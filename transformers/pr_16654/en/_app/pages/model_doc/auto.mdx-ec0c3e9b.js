import{S as vwt,i as Twt,s as Mwt,e as a,k as l,w as f,t as o,M as Ewt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as Cwt}from"../../chunks/vendor-6b77c823.js";import{T as $Pr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-17b815d9.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function wwt(If){let ee,co,de,we,io,ge,Me,Xo,Ii,qf,fa,qi,Ni,yC,Nf,ke,fo,ji,Gn,LC,On,Vn,xC,Di,Xn,kC,Gi,jf,Da;return{c(){ee=a("p"),co=o("If your "),de=a("code"),we=o("NewModelConfig"),io=o(" is a subclass of "),ge=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),yC=o(")."),Nf=l(),ke=a("p"),fo=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),LC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),xC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),kC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){ee=n(mo,"P",{});var ue=s(ee);co=r(ue,"If your "),de=n(ue,"CODE",{});var F9=s(de);we=r(F9,"NewModelConfig"),F9.forEach(t),io=r(ue," is a subclass of "),ge=n(ue,"CODE",{});var Oi=s(ge);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(ue,`, make sure its
`),Ii=n(ue,"CODE",{});var v9=s(Ii);qf=r(v9,"model_type"),v9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),qi=n(ue,"CODE",{});var T9=s(qi);Ni=r(T9,'"new-model"'),T9.forEach(t),yC=r(ue,")."),ue.forEach(t),Nf=i(mo),ke=n(mo,"P",{});var zo=s(ke);fo=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),LC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var M9=s(On);Vn=r(M9,"PreTrainedModel"),M9.forEach(t),xC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),kC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var E9=s(Gi);jf=r(E9,"NewModelConfig"),E9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ue){b(mo,ee,ue),e(ee,co),e(ee,de),e(de,we),e(ee,io),e(ee,ge),e(ge,Me),e(ee,Xo),e(ee,Ii),e(Ii,qf),e(ee,fa),e(ee,qi),e(qi,Ni),e(ee,yC),b(mo,Nf,ue),b(mo,ke,ue),e(ke,fo),e(ke,ji),e(ji,Gn),e(ke,LC),e(ke,On),e(On,Vn),e(ke,xC),e(ke,Di),e(Di,Xn),e(ke,kC),e(ke,Gi),e(Gi,jf),e(ke,Da)},d(mo){mo&&t(ee),mo&&t(Nf),mo&&t(ke)}}}function Awt(If){let ee,co,de,we,io;return{c(){ee=a("p"),co=o("Passing "),de=a("code"),we=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(ge){ee=n(ge,"P",{});var Me=s(ee);co=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);we=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,ee,Me),e(ee,co),e(ee,de),e(de,we),e(ee,io)},d(ge){ge&&t(ee)}}}function ywt(If){let ee,co,de,we,io;return{c(){ee=a("p"),co=o("Passing "),de=a("code"),we=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(ge){ee=n(ge,"P",{});var Me=s(ee);co=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);we=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(ge,Me){b(ge,ee,Me),e(ee,co),e(ee,de),e(de,we),e(ee,io)},d(ge){ge&&t(ee)}}}function Lwt(If){let ee,co,de,we,io,ge,Me,Xo,Ii,qf,fa,qi,Ni,yC,Nf,ke,fo,ji,Gn,LC,On,Vn,xC,Di,Xn,kC,Gi,jf,Da,mo,ue,F9,Oi,v9,T9,zo,Ga,M9,Df,E9,XIe,SRe,Vi,Gf,dY,SC,zIe,cY,QIe,RRe,zn,WIe,fY,HIe,UIe,mY,JIe,YIe,BRe,RC,PRe,C9,KIe,$Re,Of,IRe,Xi,Vf,gY,BC,ZIe,hY,eqe,qRe,Qo,PC,oqe,$C,rqe,w9,tqe,aqe,nqe,IC,sqe,pY,lqe,iqe,dqe,go,qC,cqe,_Y,fqe,mqe,zi,gqe,uY,hqe,pqe,bY,_qe,uqe,bqe,F,Xf,FY,Fqe,vqe,A9,Tqe,Mqe,Eqe,zf,vY,Cqe,wqe,y9,Aqe,yqe,Lqe,Qf,TY,xqe,kqe,L9,Sqe,Rqe,Bqe,Wf,MY,Pqe,$qe,x9,Iqe,qqe,Nqe,Hf,EY,jqe,Dqe,k9,Gqe,Oqe,Vqe,Uf,CY,Xqe,zqe,S9,Qqe,Wqe,Hqe,Jf,wY,Uqe,Jqe,R9,Yqe,Kqe,Zqe,Yf,AY,eNe,oNe,B9,rNe,tNe,aNe,Kf,yY,nNe,sNe,P9,lNe,iNe,dNe,Zf,LY,cNe,fNe,$9,mNe,gNe,hNe,em,xY,pNe,_Ne,I9,uNe,bNe,FNe,om,kY,vNe,TNe,q9,MNe,ENe,CNe,rm,SY,wNe,ANe,N9,yNe,LNe,xNe,tm,RY,kNe,SNe,j9,RNe,BNe,PNe,am,BY,$Ne,INe,D9,qNe,NNe,jNe,nm,PY,DNe,GNe,G9,ONe,VNe,XNe,sm,$Y,zNe,QNe,O9,WNe,HNe,UNe,lm,IY,JNe,YNe,V9,KNe,ZNe,eje,im,qY,oje,rje,X9,tje,aje,nje,dm,NY,sje,lje,z9,ije,dje,cje,cm,jY,fje,mje,Q9,gje,hje,pje,fm,DY,_je,uje,W9,bje,Fje,vje,mm,GY,Tje,Mje,H9,Eje,Cje,wje,gm,OY,Aje,yje,U9,Lje,xje,kje,hm,VY,Sje,Rje,J9,Bje,Pje,$je,pm,XY,Ije,qje,Y9,Nje,jje,Dje,_m,zY,Gje,Oje,K9,Vje,Xje,zje,um,QY,Qje,Wje,Z9,Hje,Uje,Jje,bm,WY,Yje,Kje,ex,Zje,eDe,oDe,Fm,HY,rDe,tDe,ox,aDe,nDe,sDe,vm,UY,lDe,iDe,rx,dDe,cDe,fDe,Tm,JY,mDe,gDe,tx,hDe,pDe,_De,Mm,YY,uDe,bDe,ax,FDe,vDe,TDe,Em,KY,MDe,EDe,nx,CDe,wDe,ADe,Cm,ZY,yDe,LDe,sx,xDe,kDe,SDe,wm,eK,RDe,BDe,lx,PDe,$De,IDe,Am,oK,qDe,NDe,ix,jDe,DDe,GDe,ym,rK,ODe,VDe,dx,XDe,zDe,QDe,Lm,tK,WDe,HDe,cx,UDe,JDe,YDe,xm,aK,KDe,ZDe,fx,eGe,oGe,rGe,km,nK,tGe,aGe,mx,nGe,sGe,lGe,Sm,sK,iGe,dGe,gx,cGe,fGe,mGe,Rm,lK,gGe,hGe,hx,pGe,_Ge,uGe,Bm,iK,bGe,FGe,px,vGe,TGe,MGe,Pm,dK,EGe,CGe,_x,wGe,AGe,yGe,$m,cK,LGe,xGe,ux,kGe,SGe,RGe,Im,fK,BGe,PGe,bx,$Ge,IGe,qGe,qm,mK,NGe,jGe,Fx,DGe,GGe,OGe,Nm,gK,VGe,XGe,vx,zGe,QGe,WGe,jm,hK,HGe,UGe,Tx,JGe,YGe,KGe,Dm,pK,ZGe,eOe,Mx,oOe,rOe,tOe,Gm,_K,aOe,nOe,Ex,sOe,lOe,iOe,Om,uK,dOe,cOe,Cx,fOe,mOe,gOe,Vm,bK,hOe,pOe,wx,_Oe,uOe,bOe,Xm,FK,FOe,vOe,Ax,TOe,MOe,EOe,zm,vK,COe,wOe,yx,AOe,yOe,LOe,Qm,TK,xOe,kOe,Lx,SOe,ROe,BOe,Wm,MK,POe,$Oe,xx,IOe,qOe,NOe,Hm,EK,jOe,DOe,kx,GOe,OOe,VOe,Um,CK,XOe,zOe,Sx,QOe,WOe,HOe,Jm,wK,UOe,JOe,Rx,YOe,KOe,ZOe,Ym,AK,eVe,oVe,Bx,rVe,tVe,aVe,Km,yK,nVe,sVe,Px,lVe,iVe,dVe,Zm,LK,cVe,fVe,$x,mVe,gVe,hVe,eg,xK,pVe,_Ve,Ix,uVe,bVe,FVe,og,kK,vVe,TVe,qx,MVe,EVe,CVe,rg,SK,wVe,AVe,Nx,yVe,LVe,xVe,tg,RK,kVe,SVe,jx,RVe,BVe,PVe,ag,BK,$Ve,IVe,Dx,qVe,NVe,jVe,ng,PK,DVe,GVe,Gx,OVe,VVe,XVe,sg,$K,zVe,QVe,Ox,WVe,HVe,UVe,lg,IK,JVe,YVe,Vx,KVe,ZVe,eXe,ig,qK,oXe,rXe,Xx,tXe,aXe,nXe,dg,NK,sXe,lXe,zx,iXe,dXe,cXe,cg,jK,fXe,mXe,Qx,gXe,hXe,pXe,fg,DK,_Xe,uXe,Wx,bXe,FXe,vXe,mg,GK,TXe,MXe,Hx,EXe,CXe,wXe,gg,OK,AXe,yXe,Ux,LXe,xXe,kXe,hg,VK,SXe,RXe,Jx,BXe,PXe,$Xe,pg,XK,IXe,qXe,Yx,NXe,jXe,DXe,_g,zK,GXe,OXe,Kx,VXe,XXe,zXe,ug,QK,QXe,WXe,Zx,HXe,UXe,JXe,bg,WK,YXe,KXe,ek,ZXe,eze,oze,Fg,HK,rze,tze,ok,aze,nze,sze,vg,UK,lze,ize,rk,dze,cze,fze,Tg,JK,mze,gze,tk,hze,pze,_ze,Mg,YK,uze,bze,ak,Fze,vze,Tze,Eg,KK,Mze,Eze,nk,Cze,wze,Aze,Cg,ZK,yze,Lze,sk,xze,kze,Sze,wg,eZ,Rze,Bze,lk,Pze,$ze,Ize,Ag,oZ,qze,Nze,ik,jze,Dze,Gze,yg,rZ,Oze,Vze,dk,Xze,zze,Qze,Lg,tZ,Wze,Hze,ck,Uze,Jze,Yze,xg,aZ,Kze,Zze,fk,eQe,oQe,rQe,kg,nZ,tQe,aQe,mk,nQe,sQe,lQe,Sg,sZ,iQe,dQe,gk,cQe,fQe,mQe,Rg,lZ,gQe,hQe,hk,pQe,_Qe,uQe,Bg,iZ,bQe,FQe,pk,vQe,TQe,MQe,Pg,dZ,EQe,CQe,_k,wQe,AQe,yQe,$g,cZ,LQe,xQe,uk,kQe,SQe,RQe,Ig,fZ,BQe,PQe,bk,$Qe,IQe,qQe,qg,mZ,NQe,jQe,Fk,DQe,GQe,OQe,gZ,VQe,XQe,NC,zQe,Ng,jC,QQe,hZ,WQe,NRe,Qi,jg,pZ,DC,HQe,_Z,UQe,jRe,Wo,GC,JQe,OC,YQe,vk,KQe,ZQe,eWe,VC,oWe,uZ,rWe,tWe,aWe,ho,XC,nWe,bZ,sWe,lWe,Oa,iWe,FZ,dWe,cWe,vZ,fWe,mWe,TZ,gWe,hWe,pWe,E,Qn,MZ,_We,uWe,Tk,bWe,FWe,Mk,vWe,TWe,MWe,Wn,EZ,EWe,CWe,Ek,wWe,AWe,Ck,yWe,LWe,xWe,Hn,CZ,kWe,SWe,wk,RWe,BWe,Ak,PWe,$We,IWe,Dg,wZ,qWe,NWe,yk,jWe,DWe,GWe,Un,AZ,OWe,VWe,Lk,XWe,zWe,xk,QWe,WWe,HWe,Gg,yZ,UWe,JWe,kk,YWe,KWe,ZWe,Og,LZ,eHe,oHe,Sk,rHe,tHe,aHe,Vg,xZ,nHe,sHe,Rk,lHe,iHe,dHe,Jn,kZ,cHe,fHe,Bk,mHe,gHe,Pk,hHe,pHe,_He,Yn,SZ,uHe,bHe,$k,FHe,vHe,Ik,THe,MHe,EHe,Kn,RZ,CHe,wHe,qk,AHe,yHe,Nk,LHe,xHe,kHe,Xg,BZ,SHe,RHe,jk,BHe,PHe,$He,zg,PZ,IHe,qHe,Dk,NHe,jHe,DHe,Zn,$Z,GHe,OHe,Gk,VHe,XHe,Ok,zHe,QHe,WHe,Qg,IZ,HHe,UHe,Vk,JHe,YHe,KHe,es,qZ,ZHe,eUe,Xk,oUe,rUe,zk,tUe,aUe,nUe,os,NZ,sUe,lUe,Qk,iUe,dUe,Wk,cUe,fUe,mUe,rs,jZ,gUe,hUe,Hk,pUe,_Ue,DZ,uUe,bUe,FUe,Wg,GZ,vUe,TUe,Uk,MUe,EUe,CUe,ts,OZ,wUe,AUe,Jk,yUe,LUe,Yk,xUe,kUe,SUe,Hg,VZ,RUe,BUe,Kk,PUe,$Ue,IUe,as,XZ,qUe,NUe,Zk,jUe,DUe,eS,GUe,OUe,VUe,ns,zZ,XUe,zUe,oS,QUe,WUe,rS,HUe,UUe,JUe,ss,QZ,YUe,KUe,tS,ZUe,eJe,aS,oJe,rJe,tJe,Ug,WZ,aJe,nJe,nS,sJe,lJe,iJe,ls,HZ,dJe,cJe,sS,fJe,mJe,lS,gJe,hJe,pJe,Jg,UZ,_Je,uJe,iS,bJe,FJe,vJe,is,JZ,TJe,MJe,dS,EJe,CJe,cS,wJe,AJe,yJe,ds,YZ,LJe,xJe,fS,kJe,SJe,mS,RJe,BJe,PJe,cs,KZ,$Je,IJe,gS,qJe,NJe,hS,jJe,DJe,GJe,fs,ZZ,OJe,VJe,pS,XJe,zJe,_S,QJe,WJe,HJe,Yg,eee,UJe,JJe,uS,YJe,KJe,ZJe,ms,oee,eYe,oYe,bS,rYe,tYe,FS,aYe,nYe,sYe,gs,ree,lYe,iYe,vS,dYe,cYe,TS,fYe,mYe,gYe,hs,tee,hYe,pYe,MS,_Ye,uYe,ES,bYe,FYe,vYe,ps,aee,TYe,MYe,CS,EYe,CYe,wS,wYe,AYe,yYe,_s,nee,LYe,xYe,AS,kYe,SYe,yS,RYe,BYe,PYe,us,see,$Ye,IYe,LS,qYe,NYe,xS,jYe,DYe,GYe,Kg,lee,OYe,VYe,kS,XYe,zYe,QYe,bs,iee,WYe,HYe,SS,UYe,JYe,RS,YYe,KYe,ZYe,Zg,dee,eKe,oKe,BS,rKe,tKe,aKe,eh,cee,nKe,sKe,PS,lKe,iKe,dKe,Fs,fee,cKe,fKe,$S,mKe,gKe,IS,hKe,pKe,_Ke,vs,mee,uKe,bKe,qS,FKe,vKe,NS,TKe,MKe,EKe,oh,gee,CKe,wKe,jS,AKe,yKe,LKe,Ts,hee,xKe,kKe,DS,SKe,RKe,GS,BKe,PKe,$Ke,Ms,pee,IKe,qKe,OS,NKe,jKe,VS,DKe,GKe,OKe,Es,_ee,VKe,XKe,XS,zKe,QKe,zS,WKe,HKe,UKe,Cs,uee,JKe,YKe,QS,KKe,ZKe,WS,eZe,oZe,rZe,ws,bee,tZe,aZe,HS,nZe,sZe,US,lZe,iZe,dZe,rh,Fee,cZe,fZe,JS,mZe,gZe,hZe,th,vee,pZe,_Ze,YS,uZe,bZe,FZe,ah,Tee,vZe,TZe,KS,MZe,EZe,CZe,nh,Mee,wZe,AZe,ZS,yZe,LZe,xZe,As,Eee,kZe,SZe,eR,RZe,BZe,oR,PZe,$Ze,IZe,sh,Cee,qZe,NZe,rR,jZe,DZe,GZe,ys,wee,OZe,VZe,tR,XZe,zZe,aR,QZe,WZe,HZe,Ls,Aee,UZe,JZe,nR,YZe,KZe,sR,ZZe,eeo,oeo,xs,yee,reo,teo,lR,aeo,neo,iR,seo,leo,ieo,ks,Lee,deo,ceo,dR,feo,meo,cR,geo,heo,peo,Ss,xee,_eo,ueo,fR,beo,Feo,mR,veo,Teo,Meo,Rs,kee,Eeo,Ceo,gR,weo,Aeo,hR,yeo,Leo,xeo,lh,See,keo,Seo,pR,Reo,Beo,Peo,ih,Ree,$eo,Ieo,_R,qeo,Neo,jeo,Bs,Bee,Deo,Geo,uR,Oeo,Veo,bR,Xeo,zeo,Qeo,Ps,Pee,Weo,Heo,FR,Ueo,Jeo,vR,Yeo,Keo,Zeo,$s,$ee,eoo,ooo,TR,roo,too,MR,aoo,noo,soo,dh,Iee,loo,ioo,ER,doo,coo,foo,ch,qee,moo,goo,CR,hoo,poo,_oo,fh,Nee,uoo,boo,wR,Foo,voo,Too,mh,jee,Moo,Eoo,AR,Coo,woo,Aoo,gh,Dee,yoo,Loo,yR,xoo,koo,Soo,Is,Gee,Roo,Boo,LR,Poo,$oo,xR,Ioo,qoo,Noo,hh,Oee,joo,Doo,kR,Goo,Ooo,Voo,ph,Vee,Xoo,zoo,SR,Qoo,Woo,Hoo,qs,Xee,Uoo,Joo,RR,Yoo,Koo,BR,Zoo,ero,oro,Ns,zee,rro,tro,PR,aro,nro,$R,sro,lro,iro,Qee,dro,cro,zC,fro,_h,QC,mro,Wee,gro,DRe,Wi,uh,Hee,WC,hro,Uee,pro,GRe,Ho,HC,_ro,UC,uro,IR,bro,Fro,vro,JC,Tro,Jee,Mro,Ero,Cro,$e,YC,wro,Yee,Aro,yro,Va,Lro,Kee,xro,kro,Zee,Sro,Rro,eoe,Bro,Pro,$ro,J,bh,ooe,Iro,qro,qR,Nro,jro,Dro,Fh,roe,Gro,Oro,NR,Vro,Xro,zro,vh,toe,Qro,Wro,jR,Hro,Uro,Jro,Th,aoe,Yro,Kro,DR,Zro,eto,oto,Mh,noe,rto,tto,GR,ato,nto,sto,Eh,soe,lto,ito,OR,dto,cto,fto,Ch,loe,mto,gto,VR,hto,pto,_to,wh,ioe,uto,bto,XR,Fto,vto,Tto,Ah,doe,Mto,Eto,zR,Cto,wto,Ato,yh,coe,yto,Lto,QR,xto,kto,Sto,Lh,foe,Rto,Bto,WR,Pto,$to,Ito,xh,moe,qto,Nto,HR,jto,Dto,Gto,kh,goe,Oto,Vto,UR,Xto,zto,Qto,Sh,hoe,Wto,Hto,JR,Uto,Jto,Yto,Rh,poe,Kto,Zto,YR,eao,oao,rao,Bh,_oe,tao,aao,KR,nao,sao,lao,Ph,uoe,iao,dao,ZR,cao,fao,mao,$h,boe,gao,hao,eB,pao,_ao,uao,Ih,Foe,bao,Fao,oB,vao,Tao,Mao,qh,voe,Eao,Cao,rB,wao,Aao,yao,Nh,Lao,Toe,xao,kao,KC,Sao,jh,ZC,Rao,Moe,Bao,ORe,Hi,Dh,Eoe,ew,Pao,Coe,$ao,VRe,Uo,ow,Iao,rw,qao,tB,Nao,jao,Dao,tw,Gao,woe,Oao,Vao,Xao,Ie,aw,zao,Aoe,Qao,Wao,Ui,Hao,yoe,Uao,Jao,Loe,Yao,Kao,Zao,Ee,Gh,xoe,eno,ono,aB,rno,tno,ano,Oh,koe,nno,sno,nB,lno,ino,dno,Vh,Soe,cno,fno,sB,mno,gno,hno,Xh,Roe,pno,_no,lB,uno,bno,Fno,zh,Boe,vno,Tno,iB,Mno,Eno,Cno,Qh,Poe,wno,Ano,dB,yno,Lno,xno,Wh,$oe,kno,Sno,cB,Rno,Bno,Pno,Hh,Ioe,$no,Ino,fB,qno,Nno,jno,Uh,qoe,Dno,Gno,mB,Ono,Vno,Xno,Jh,zno,Noe,Qno,Wno,nw,Hno,Yh,sw,Uno,joe,Jno,XRe,Ji,Kh,Doe,lw,Yno,Goe,Kno,zRe,Jo,iw,Zno,Yi,eso,gB,oso,rso,hB,tso,aso,nso,dw,sso,Ooe,lso,iso,dso,Xr,cw,cso,Voe,fso,mso,Ki,gso,Xoe,hso,pso,pB,_so,uso,bso,zoe,Fso,vso,fw,Tso,qe,mw,Mso,Qoe,Eso,Cso,Xa,wso,Woe,Aso,yso,Hoe,Lso,xso,Uoe,kso,Sso,Rso,T,Zh,Joe,Bso,Pso,_B,$so,Iso,qso,ep,Yoe,Nso,jso,uB,Dso,Gso,Oso,op,Koe,Vso,Xso,bB,zso,Qso,Wso,rp,Zoe,Hso,Uso,FB,Jso,Yso,Kso,tp,ere,Zso,elo,vB,olo,rlo,tlo,ap,ore,alo,nlo,TB,slo,llo,ilo,np,rre,dlo,clo,MB,flo,mlo,glo,sp,tre,hlo,plo,EB,_lo,ulo,blo,lp,are,Flo,vlo,CB,Tlo,Mlo,Elo,ip,nre,Clo,wlo,wB,Alo,ylo,Llo,dp,sre,xlo,klo,AB,Slo,Rlo,Blo,cp,lre,Plo,$lo,yB,Ilo,qlo,Nlo,fp,ire,jlo,Dlo,LB,Glo,Olo,Vlo,mp,dre,Xlo,zlo,xB,Qlo,Wlo,Hlo,gp,cre,Ulo,Jlo,kB,Ylo,Klo,Zlo,hp,fre,eio,oio,SB,rio,tio,aio,pp,mre,nio,sio,RB,lio,iio,dio,_p,gre,cio,fio,BB,mio,gio,hio,up,hre,pio,_io,PB,uio,bio,Fio,bp,pre,vio,Tio,$B,Mio,Eio,Cio,Fp,_re,wio,Aio,IB,yio,Lio,xio,vp,ure,kio,Sio,qB,Rio,Bio,Pio,Tp,bre,$io,Iio,NB,qio,Nio,jio,Mp,Fre,Dio,Gio,jB,Oio,Vio,Xio,Ep,vre,zio,Qio,DB,Wio,Hio,Uio,Cp,Tre,Jio,Yio,GB,Kio,Zio,edo,wp,Mre,odo,rdo,OB,tdo,ado,ndo,Ap,Ere,sdo,ldo,VB,ido,ddo,cdo,yp,Cre,fdo,mdo,XB,gdo,hdo,pdo,Lp,wre,_do,udo,zB,bdo,Fdo,vdo,js,Are,Tdo,Mdo,QB,Edo,Cdo,WB,wdo,Ado,ydo,xp,yre,Ldo,xdo,HB,kdo,Sdo,Rdo,kp,Lre,Bdo,Pdo,UB,$do,Ido,qdo,Sp,xre,Ndo,jdo,JB,Ddo,Gdo,Odo,Rp,kre,Vdo,Xdo,YB,zdo,Qdo,Wdo,Bp,Sre,Hdo,Udo,KB,Jdo,Ydo,Kdo,Pp,Rre,Zdo,eco,ZB,oco,rco,tco,$p,Bre,aco,nco,eP,sco,lco,ico,Ip,Pre,dco,cco,oP,fco,mco,gco,qp,$re,hco,pco,rP,_co,uco,bco,Np,Ire,Fco,vco,tP,Tco,Mco,Eco,jp,qre,Cco,wco,aP,Aco,yco,Lco,Dp,Nre,xco,kco,nP,Sco,Rco,Bco,Gp,jre,Pco,$co,sP,Ico,qco,Nco,Op,Dre,jco,Dco,lP,Gco,Oco,Vco,Vp,Gre,Xco,zco,iP,Qco,Wco,Hco,Xp,Ore,Uco,Jco,dP,Yco,Kco,Zco,zp,Vre,efo,ofo,cP,rfo,tfo,afo,Qp,Xre,nfo,sfo,fP,lfo,ifo,dfo,Wp,zre,cfo,ffo,mP,mfo,gfo,hfo,Hp,Qre,pfo,_fo,gP,ufo,bfo,Ffo,Up,Wre,vfo,Tfo,hP,Mfo,Efo,Cfo,Jp,Hre,wfo,Afo,pP,yfo,Lfo,xfo,Yp,Ure,kfo,Sfo,_P,Rfo,Bfo,Pfo,Kp,Jre,$fo,Ifo,uP,qfo,Nfo,jfo,Zp,Yre,Dfo,Gfo,bP,Ofo,Vfo,Xfo,e_,Kre,zfo,Qfo,FP,Wfo,Hfo,Ufo,o_,Zre,Jfo,Yfo,vP,Kfo,Zfo,emo,r_,ete,omo,rmo,TP,tmo,amo,nmo,t_,ote,smo,lmo,MP,imo,dmo,cmo,a_,rte,fmo,mmo,EP,gmo,hmo,pmo,n_,tte,_mo,umo,CP,bmo,Fmo,vmo,s_,ate,Tmo,Mmo,wP,Emo,Cmo,wmo,l_,nte,Amo,ymo,AP,Lmo,xmo,kmo,i_,ste,Smo,Rmo,yP,Bmo,Pmo,$mo,d_,lte,Imo,qmo,LP,Nmo,jmo,Dmo,c_,ite,Gmo,Omo,xP,Vmo,Xmo,zmo,f_,dte,Qmo,Wmo,kP,Hmo,Umo,Jmo,m_,cte,Ymo,Kmo,SP,Zmo,ego,ogo,g_,fte,rgo,tgo,RP,ago,ngo,sgo,h_,mte,lgo,igo,BP,dgo,cgo,fgo,p_,gte,mgo,ggo,PP,hgo,pgo,_go,__,hte,ugo,bgo,$P,Fgo,vgo,Tgo,u_,pte,Mgo,Ego,IP,Cgo,wgo,Ago,b_,_te,ygo,Lgo,qP,xgo,kgo,Sgo,F_,ute,Rgo,Bgo,NP,Pgo,$go,Igo,v_,bte,qgo,Ngo,jP,jgo,Dgo,Ggo,T_,Fte,Ogo,Vgo,DP,Xgo,zgo,Qgo,M_,vte,Wgo,Hgo,GP,Ugo,Jgo,Ygo,E_,Tte,Kgo,Zgo,OP,eho,oho,rho,C_,Mte,tho,aho,VP,nho,sho,lho,w_,Ete,iho,dho,XP,cho,fho,mho,A_,Cte,gho,hho,zP,pho,_ho,uho,y_,wte,bho,Fho,QP,vho,Tho,Mho,L_,Ate,Eho,Cho,WP,who,Aho,yho,x_,yte,Lho,xho,HP,kho,Sho,Rho,k_,Lte,Bho,Pho,UP,$ho,Iho,qho,S_,xte,Nho,jho,JP,Dho,Gho,Oho,R_,kte,Vho,Xho,YP,zho,Qho,Who,B_,Ste,Hho,Uho,KP,Jho,Yho,Kho,P_,Rte,Zho,epo,ZP,opo,rpo,tpo,$_,Bte,apo,npo,e$,spo,lpo,ipo,I_,Pte,dpo,cpo,o$,fpo,mpo,gpo,q_,$te,hpo,ppo,r$,_po,upo,bpo,N_,Fpo,Ite,vpo,Tpo,qte,Mpo,Epo,Nte,Cpo,wpo,gw,QRe,Zi,j_,jte,hw,Apo,Dte,ypo,WRe,Yo,pw,Lpo,ed,xpo,t$,kpo,Spo,a$,Rpo,Bpo,Ppo,_w,$po,Gte,Ipo,qpo,Npo,zr,uw,jpo,Ote,Dpo,Gpo,od,Opo,Vte,Vpo,Xpo,n$,zpo,Qpo,Wpo,Xte,Hpo,Upo,bw,Jpo,Ne,Fw,Ypo,zte,Kpo,Zpo,za,e_o,Qte,o_o,r_o,Wte,t_o,a_o,Hte,n_o,s_o,l_o,S,D_,Ute,i_o,d_o,s$,c_o,f_o,m_o,G_,Jte,g_o,h_o,l$,p_o,__o,u_o,O_,Yte,b_o,F_o,i$,v_o,T_o,M_o,V_,Kte,E_o,C_o,d$,w_o,A_o,y_o,X_,Zte,L_o,x_o,c$,k_o,S_o,R_o,z_,eae,B_o,P_o,f$,$_o,I_o,q_o,Q_,oae,N_o,j_o,m$,D_o,G_o,O_o,W_,rae,V_o,X_o,g$,z_o,Q_o,W_o,H_,tae,H_o,U_o,h$,J_o,Y_o,K_o,U_,aae,Z_o,euo,p$,ouo,ruo,tuo,J_,nae,auo,nuo,_$,suo,luo,iuo,Y_,sae,duo,cuo,u$,fuo,muo,guo,K_,lae,huo,puo,b$,_uo,uuo,buo,Z_,iae,Fuo,vuo,F$,Tuo,Muo,Euo,eu,dae,Cuo,wuo,v$,Auo,yuo,Luo,ou,cae,xuo,kuo,T$,Suo,Ruo,Buo,ru,fae,Puo,$uo,M$,Iuo,quo,Nuo,tu,mae,juo,Duo,E$,Guo,Ouo,Vuo,au,gae,Xuo,zuo,C$,Quo,Wuo,Huo,nu,hae,Uuo,Juo,w$,Yuo,Kuo,Zuo,su,pae,e6o,o6o,A$,r6o,t6o,a6o,lu,_ae,n6o,s6o,y$,l6o,i6o,d6o,iu,uae,c6o,f6o,L$,m6o,g6o,h6o,du,bae,p6o,_6o,x$,u6o,b6o,F6o,cu,Fae,v6o,T6o,k$,M6o,E6o,C6o,fu,vae,w6o,A6o,S$,y6o,L6o,x6o,mu,Tae,k6o,S6o,R$,R6o,B6o,P6o,gu,Mae,$6o,I6o,B$,q6o,N6o,j6o,hu,Eae,D6o,G6o,P$,O6o,V6o,X6o,pu,Cae,z6o,Q6o,$$,W6o,H6o,U6o,_u,wae,J6o,Y6o,I$,K6o,Z6o,e1o,uu,Aae,o1o,r1o,q$,t1o,a1o,n1o,bu,yae,s1o,l1o,N$,i1o,d1o,c1o,Fu,Lae,f1o,m1o,j$,g1o,h1o,p1o,vu,xae,_1o,u1o,D$,b1o,F1o,v1o,Tu,kae,T1o,M1o,G$,E1o,C1o,w1o,Mu,Sae,A1o,y1o,O$,L1o,x1o,k1o,Eu,Rae,S1o,R1o,V$,B1o,P1o,$1o,Cu,Bae,I1o,q1o,X$,N1o,j1o,D1o,wu,G1o,Pae,O1o,V1o,$ae,X1o,z1o,Iae,Q1o,W1o,vw,HRe,rd,Au,qae,Tw,H1o,Nae,U1o,URe,Ko,Mw,J1o,td,Y1o,z$,K1o,Z1o,Q$,e4o,o4o,r4o,Ew,t4o,jae,a4o,n4o,s4o,Qr,Cw,l4o,Dae,i4o,d4o,ad,c4o,Gae,f4o,m4o,W$,g4o,h4o,p4o,Oae,_4o,u4o,ww,b4o,je,Aw,F4o,Vae,v4o,T4o,Qa,M4o,Xae,E4o,C4o,zae,w4o,A4o,Qae,y4o,L4o,x4o,$,yu,Wae,k4o,S4o,H$,R4o,B4o,P4o,Lu,Hae,$4o,I4o,U$,q4o,N4o,j4o,xu,Uae,D4o,G4o,J$,O4o,V4o,X4o,ku,Jae,z4o,Q4o,Y$,W4o,H4o,U4o,Su,Yae,J4o,Y4o,K$,K4o,Z4o,ebo,Ru,Kae,obo,rbo,Z$,tbo,abo,nbo,Bu,Zae,sbo,lbo,eI,ibo,dbo,cbo,Pu,ene,fbo,mbo,oI,gbo,hbo,pbo,$u,one,_bo,ubo,rI,bbo,Fbo,vbo,Iu,rne,Tbo,Mbo,tI,Ebo,Cbo,wbo,qu,tne,Abo,ybo,aI,Lbo,xbo,kbo,Nu,ane,Sbo,Rbo,nI,Bbo,Pbo,$bo,ju,nne,Ibo,qbo,sI,Nbo,jbo,Dbo,Du,sne,Gbo,Obo,lI,Vbo,Xbo,zbo,Gu,lne,Qbo,Wbo,iI,Hbo,Ubo,Jbo,Ou,ine,Ybo,Kbo,dI,Zbo,e5o,o5o,Vu,dne,r5o,t5o,cI,a5o,n5o,s5o,Xu,cne,l5o,i5o,fI,d5o,c5o,f5o,zu,fne,m5o,g5o,mI,h5o,p5o,_5o,Qu,mne,u5o,b5o,gI,F5o,v5o,T5o,Wu,gne,M5o,E5o,hI,C5o,w5o,A5o,Hu,hne,y5o,L5o,pI,x5o,k5o,S5o,Uu,pne,R5o,B5o,_I,P5o,$5o,I5o,Ju,_ne,q5o,N5o,uI,j5o,D5o,G5o,Yu,une,O5o,V5o,bI,X5o,z5o,Q5o,Ku,bne,W5o,H5o,FI,U5o,J5o,Y5o,Zu,Fne,K5o,Z5o,vI,e2o,o2o,r2o,e6,vne,t2o,a2o,TI,n2o,s2o,l2o,o6,Tne,i2o,d2o,MI,c2o,f2o,m2o,r6,Mne,g2o,h2o,EI,p2o,_2o,u2o,t6,Ene,b2o,F2o,CI,v2o,T2o,M2o,a6,Cne,E2o,C2o,wI,w2o,A2o,y2o,n6,wne,L2o,x2o,AI,k2o,S2o,R2o,s6,Ane,B2o,P2o,yI,$2o,I2o,q2o,l6,yne,N2o,j2o,LI,D2o,G2o,O2o,i6,V2o,Lne,X2o,z2o,xne,Q2o,W2o,kne,H2o,U2o,yw,JRe,nd,d6,Sne,Lw,J2o,Rne,Y2o,YRe,Zo,xw,K2o,sd,Z2o,xI,eFo,oFo,kI,rFo,tFo,aFo,kw,nFo,Bne,sFo,lFo,iFo,Wr,Sw,dFo,Pne,cFo,fFo,ld,mFo,$ne,gFo,hFo,SI,pFo,_Fo,uFo,Ine,bFo,FFo,Rw,vFo,De,Bw,TFo,qne,MFo,EFo,Wa,CFo,Nne,wFo,AFo,jne,yFo,LFo,Dne,xFo,kFo,SFo,I,c6,Gne,RFo,BFo,RI,PFo,$Fo,IFo,f6,One,qFo,NFo,BI,jFo,DFo,GFo,m6,Vne,OFo,VFo,PI,XFo,zFo,QFo,g6,Xne,WFo,HFo,$I,UFo,JFo,YFo,h6,zne,KFo,ZFo,II,evo,ovo,rvo,p6,Qne,tvo,avo,qI,nvo,svo,lvo,_6,Wne,ivo,dvo,NI,cvo,fvo,mvo,u6,Hne,gvo,hvo,jI,pvo,_vo,uvo,b6,Une,bvo,Fvo,DI,vvo,Tvo,Mvo,F6,Jne,Evo,Cvo,GI,wvo,Avo,yvo,v6,Yne,Lvo,xvo,OI,kvo,Svo,Rvo,T6,Kne,Bvo,Pvo,VI,$vo,Ivo,qvo,M6,Zne,Nvo,jvo,XI,Dvo,Gvo,Ovo,E6,ese,Vvo,Xvo,zI,zvo,Qvo,Wvo,C6,ose,Hvo,Uvo,QI,Jvo,Yvo,Kvo,w6,rse,Zvo,eTo,WI,oTo,rTo,tTo,A6,tse,aTo,nTo,HI,sTo,lTo,iTo,y6,ase,dTo,cTo,UI,fTo,mTo,gTo,L6,nse,hTo,pTo,JI,_To,uTo,bTo,x6,sse,FTo,vTo,YI,TTo,MTo,ETo,k6,lse,CTo,wTo,KI,ATo,yTo,LTo,S6,ise,xTo,kTo,ZI,STo,RTo,BTo,R6,dse,PTo,$To,eq,ITo,qTo,NTo,B6,cse,jTo,DTo,oq,GTo,OTo,VTo,P6,fse,XTo,zTo,rq,QTo,WTo,HTo,$6,mse,UTo,JTo,tq,YTo,KTo,ZTo,I6,gse,eMo,oMo,aq,rMo,tMo,aMo,q6,hse,nMo,sMo,nq,lMo,iMo,dMo,N6,pse,cMo,fMo,sq,mMo,gMo,hMo,j6,_se,pMo,_Mo,lq,uMo,bMo,FMo,D6,use,vMo,TMo,bse,MMo,EMo,CMo,G6,Fse,wMo,AMo,iq,yMo,LMo,xMo,O6,vse,kMo,SMo,dq,RMo,BMo,PMo,V6,Tse,$Mo,IMo,cq,qMo,NMo,jMo,X6,Mse,DMo,GMo,fq,OMo,VMo,XMo,z6,zMo,Ese,QMo,WMo,Cse,HMo,UMo,wse,JMo,YMo,Pw,KRe,id,Q6,Ase,$w,KMo,yse,ZMo,ZRe,er,Iw,eEo,dd,oEo,mq,rEo,tEo,gq,aEo,nEo,sEo,qw,lEo,Lse,iEo,dEo,cEo,Hr,Nw,fEo,xse,mEo,gEo,cd,hEo,kse,pEo,_Eo,hq,uEo,bEo,FEo,Sse,vEo,TEo,jw,MEo,Ge,Dw,EEo,Rse,CEo,wEo,Ha,AEo,Bse,yEo,LEo,Pse,xEo,kEo,$se,SEo,REo,BEo,ne,W6,Ise,PEo,$Eo,pq,IEo,qEo,NEo,H6,qse,jEo,DEo,_q,GEo,OEo,VEo,U6,Nse,XEo,zEo,uq,QEo,WEo,HEo,J6,jse,UEo,JEo,bq,YEo,KEo,ZEo,Y6,Dse,e3o,o3o,Fq,r3o,t3o,a3o,K6,Gse,n3o,s3o,vq,l3o,i3o,d3o,Z6,Ose,c3o,f3o,Tq,m3o,g3o,h3o,e1,Vse,p3o,_3o,Mq,u3o,b3o,F3o,o1,Xse,v3o,T3o,Eq,M3o,E3o,C3o,r1,zse,w3o,A3o,Cq,y3o,L3o,x3o,t1,Qse,k3o,S3o,wq,R3o,B3o,P3o,a1,Wse,$3o,I3o,Aq,q3o,N3o,j3o,n1,Hse,D3o,G3o,yq,O3o,V3o,X3o,s1,Use,z3o,Q3o,Lq,W3o,H3o,U3o,l1,Jse,J3o,Y3o,xq,K3o,Z3o,eCo,i1,Yse,oCo,rCo,kq,tCo,aCo,nCo,d1,Kse,sCo,lCo,Sq,iCo,dCo,cCo,c1,fCo,Zse,mCo,gCo,ele,hCo,pCo,ole,_Co,uCo,Gw,eBe,fd,f1,rle,Ow,bCo,tle,FCo,oBe,or,Vw,vCo,md,TCo,Rq,MCo,ECo,Bq,CCo,wCo,ACo,Xw,yCo,ale,LCo,xCo,kCo,Ur,zw,SCo,nle,RCo,BCo,gd,PCo,sle,$Co,ICo,Pq,qCo,NCo,jCo,lle,DCo,GCo,Qw,OCo,Oe,Ww,VCo,ile,XCo,zCo,Ua,QCo,dle,WCo,HCo,cle,UCo,JCo,fle,YCo,KCo,ZCo,y,m1,mle,ewo,owo,$q,rwo,two,awo,g1,gle,nwo,swo,Iq,lwo,iwo,dwo,h1,hle,cwo,fwo,qq,mwo,gwo,hwo,p1,ple,pwo,_wo,Nq,uwo,bwo,Fwo,_1,_le,vwo,Two,jq,Mwo,Ewo,Cwo,u1,ule,wwo,Awo,Dq,ywo,Lwo,xwo,b1,ble,kwo,Swo,Gq,Rwo,Bwo,Pwo,F1,Fle,$wo,Iwo,Oq,qwo,Nwo,jwo,v1,vle,Dwo,Gwo,Vq,Owo,Vwo,Xwo,T1,Tle,zwo,Qwo,Xq,Wwo,Hwo,Uwo,M1,Mle,Jwo,Ywo,zq,Kwo,Zwo,eAo,E1,Ele,oAo,rAo,Qq,tAo,aAo,nAo,C1,Cle,sAo,lAo,Wq,iAo,dAo,cAo,w1,wle,fAo,mAo,Hq,gAo,hAo,pAo,A1,Ale,_Ao,uAo,Uq,bAo,FAo,vAo,y1,yle,TAo,MAo,Jq,EAo,CAo,wAo,L1,Lle,AAo,yAo,Yq,LAo,xAo,kAo,x1,xle,SAo,RAo,Kq,BAo,PAo,$Ao,k1,kle,IAo,qAo,Zq,NAo,jAo,DAo,S1,Sle,GAo,OAo,eN,VAo,XAo,zAo,R1,Rle,QAo,WAo,oN,HAo,UAo,JAo,B1,Ble,YAo,KAo,rN,ZAo,e0o,o0o,P1,Ple,r0o,t0o,tN,a0o,n0o,s0o,$1,$le,l0o,i0o,aN,d0o,c0o,f0o,I1,Ile,m0o,g0o,nN,h0o,p0o,_0o,q1,qle,u0o,b0o,sN,F0o,v0o,T0o,N1,Nle,M0o,E0o,lN,C0o,w0o,A0o,j1,jle,y0o,L0o,iN,x0o,k0o,S0o,D1,Dle,R0o,B0o,dN,P0o,$0o,I0o,G1,Gle,q0o,N0o,cN,j0o,D0o,G0o,O1,Ole,O0o,V0o,fN,X0o,z0o,Q0o,V1,Vle,W0o,H0o,mN,U0o,J0o,Y0o,X1,Xle,K0o,Z0o,gN,eyo,oyo,ryo,z1,zle,tyo,ayo,hN,nyo,syo,lyo,Q1,Qle,iyo,dyo,pN,cyo,fyo,myo,W1,Wle,gyo,hyo,_N,pyo,_yo,uyo,H1,Hle,byo,Fyo,uN,vyo,Tyo,Myo,U1,Ule,Eyo,Cyo,bN,wyo,Ayo,yyo,J1,Jle,Lyo,xyo,FN,kyo,Syo,Ryo,Y1,Yle,Byo,Pyo,vN,$yo,Iyo,qyo,K1,Kle,Nyo,jyo,TN,Dyo,Gyo,Oyo,Z1,Zle,Vyo,Xyo,MN,zyo,Qyo,Wyo,e4,eie,Hyo,Uyo,EN,Jyo,Yyo,Kyo,o4,oie,Zyo,eLo,CN,oLo,rLo,tLo,r4,rie,aLo,nLo,wN,sLo,lLo,iLo,t4,tie,dLo,cLo,AN,fLo,mLo,gLo,a4,aie,hLo,pLo,yN,_Lo,uLo,bLo,n4,FLo,nie,vLo,TLo,sie,MLo,ELo,lie,CLo,wLo,Hw,rBe,hd,s4,iie,Uw,ALo,die,yLo,tBe,rr,Jw,LLo,pd,xLo,LN,kLo,SLo,xN,RLo,BLo,PLo,Yw,$Lo,cie,ILo,qLo,NLo,Jr,Kw,jLo,fie,DLo,GLo,_d,OLo,mie,VLo,XLo,kN,zLo,QLo,WLo,gie,HLo,ULo,Zw,JLo,Ve,eA,YLo,hie,KLo,ZLo,Ja,e8o,pie,o8o,r8o,_ie,t8o,a8o,uie,n8o,s8o,l8o,G,l4,bie,i8o,d8o,SN,c8o,f8o,m8o,i4,Fie,g8o,h8o,RN,p8o,_8o,u8o,d4,vie,b8o,F8o,BN,v8o,T8o,M8o,c4,Tie,E8o,C8o,PN,w8o,A8o,y8o,f4,Mie,L8o,x8o,$N,k8o,S8o,R8o,m4,Eie,B8o,P8o,IN,$8o,I8o,q8o,g4,Cie,N8o,j8o,qN,D8o,G8o,O8o,h4,wie,V8o,X8o,NN,z8o,Q8o,W8o,p4,Aie,H8o,U8o,jN,J8o,Y8o,K8o,_4,yie,Z8o,e7o,DN,o7o,r7o,t7o,u4,Lie,a7o,n7o,GN,s7o,l7o,i7o,b4,xie,d7o,c7o,ON,f7o,m7o,g7o,F4,kie,h7o,p7o,VN,_7o,u7o,b7o,v4,Sie,F7o,v7o,XN,T7o,M7o,E7o,T4,Rie,C7o,w7o,zN,A7o,y7o,L7o,M4,Bie,x7o,k7o,QN,S7o,R7o,B7o,E4,Pie,P7o,$7o,WN,I7o,q7o,N7o,C4,$ie,j7o,D7o,HN,G7o,O7o,V7o,w4,Iie,X7o,z7o,UN,Q7o,W7o,H7o,A4,qie,U7o,J7o,JN,Y7o,K7o,Z7o,y4,Nie,e9o,o9o,YN,r9o,t9o,a9o,L4,jie,n9o,s9o,KN,l9o,i9o,d9o,x4,Die,c9o,f9o,ZN,m9o,g9o,h9o,k4,Gie,p9o,_9o,ej,u9o,b9o,F9o,S4,Oie,v9o,T9o,oj,M9o,E9o,C9o,R4,Vie,w9o,A9o,rj,y9o,L9o,x9o,B4,Xie,k9o,S9o,tj,R9o,B9o,P9o,P4,zie,$9o,I9o,aj,q9o,N9o,j9o,$4,D9o,Qie,G9o,O9o,Wie,V9o,X9o,Hie,z9o,Q9o,oA,aBe,ud,I4,Uie,rA,W9o,Jie,H9o,nBe,tr,tA,U9o,bd,J9o,nj,Y9o,K9o,sj,Z9o,exo,oxo,aA,rxo,Yie,txo,axo,nxo,Yr,nA,sxo,Kie,lxo,ixo,Fd,dxo,Zie,cxo,fxo,lj,mxo,gxo,hxo,ede,pxo,_xo,sA,uxo,Xe,lA,bxo,ode,Fxo,vxo,Ya,Txo,rde,Mxo,Exo,tde,Cxo,wxo,ade,Axo,yxo,Lxo,da,q4,nde,xxo,kxo,ij,Sxo,Rxo,Bxo,N4,sde,Pxo,$xo,dj,Ixo,qxo,Nxo,j4,lde,jxo,Dxo,cj,Gxo,Oxo,Vxo,D4,ide,Xxo,zxo,fj,Qxo,Wxo,Hxo,G4,dde,Uxo,Jxo,mj,Yxo,Kxo,Zxo,O4,eko,cde,oko,rko,fde,tko,ako,mde,nko,sko,iA,sBe,vd,V4,gde,dA,lko,hde,iko,lBe,ar,cA,dko,Td,cko,gj,fko,mko,hj,gko,hko,pko,fA,_ko,pde,uko,bko,Fko,Kr,mA,vko,_de,Tko,Mko,Md,Eko,ude,Cko,wko,pj,Ako,yko,Lko,bde,xko,kko,gA,Sko,ze,hA,Rko,Fde,Bko,Pko,Ka,$ko,vde,Iko,qko,Tde,Nko,jko,Mde,Dko,Gko,Oko,j,X4,Ede,Vko,Xko,_j,zko,Qko,Wko,z4,Cde,Hko,Uko,uj,Jko,Yko,Kko,Q4,wde,Zko,eSo,bj,oSo,rSo,tSo,W4,Ade,aSo,nSo,Fj,sSo,lSo,iSo,H4,yde,dSo,cSo,vj,fSo,mSo,gSo,U4,Lde,hSo,pSo,Tj,_So,uSo,bSo,J4,xde,FSo,vSo,Mj,TSo,MSo,ESo,Y4,kde,CSo,wSo,Ej,ASo,ySo,LSo,K4,Sde,xSo,kSo,Cj,SSo,RSo,BSo,Z4,Rde,PSo,$So,wj,ISo,qSo,NSo,eb,Bde,jSo,DSo,Aj,GSo,OSo,VSo,ob,Pde,XSo,zSo,yj,QSo,WSo,HSo,rb,$de,USo,JSo,Lj,YSo,KSo,ZSo,tb,Ide,eRo,oRo,xj,rRo,tRo,aRo,ab,qde,nRo,sRo,kj,lRo,iRo,dRo,nb,Nde,cRo,fRo,Sj,mRo,gRo,hRo,sb,jde,pRo,_Ro,Rj,uRo,bRo,FRo,lb,Dde,vRo,TRo,Bj,MRo,ERo,CRo,ib,Gde,wRo,ARo,Pj,yRo,LRo,xRo,db,Ode,kRo,SRo,$j,RRo,BRo,PRo,cb,Vde,$Ro,IRo,Ij,qRo,NRo,jRo,fb,Xde,DRo,GRo,qj,ORo,VRo,XRo,mb,zde,zRo,QRo,Nj,WRo,HRo,URo,gb,Qde,JRo,YRo,jj,KRo,ZRo,eBo,hb,Wde,oBo,rBo,Dj,tBo,aBo,nBo,pb,Hde,sBo,lBo,Gj,iBo,dBo,cBo,_b,Ude,fBo,mBo,Oj,gBo,hBo,pBo,ub,Jde,_Bo,uBo,Vj,bBo,FBo,vBo,bb,Yde,TBo,MBo,Xj,EBo,CBo,wBo,Fb,Kde,ABo,yBo,zj,LBo,xBo,kBo,vb,Zde,SBo,RBo,Qj,BBo,PBo,$Bo,Tb,ece,IBo,qBo,Wj,NBo,jBo,DBo,Mb,oce,GBo,OBo,Hj,VBo,XBo,zBo,Eb,QBo,rce,WBo,HBo,tce,UBo,JBo,ace,YBo,KBo,pA,iBe,Ed,Cb,nce,_A,ZBo,sce,ePo,dBe,nr,uA,oPo,Cd,rPo,Uj,tPo,aPo,Jj,nPo,sPo,lPo,bA,iPo,lce,dPo,cPo,fPo,Zr,FA,mPo,ice,gPo,hPo,wd,pPo,dce,_Po,uPo,Yj,bPo,FPo,vPo,cce,TPo,MPo,vA,EPo,Qe,TA,CPo,fce,wPo,APo,Za,yPo,mce,LPo,xPo,gce,kPo,SPo,hce,RPo,BPo,PPo,R,wb,pce,$Po,IPo,Kj,qPo,NPo,jPo,Ab,_ce,DPo,GPo,Zj,OPo,VPo,XPo,yb,uce,zPo,QPo,eD,WPo,HPo,UPo,Lb,bce,JPo,YPo,oD,KPo,ZPo,e$o,xb,Fce,o$o,r$o,rD,t$o,a$o,n$o,kb,vce,s$o,l$o,tD,i$o,d$o,c$o,Sb,Tce,f$o,m$o,aD,g$o,h$o,p$o,Rb,Mce,_$o,u$o,nD,b$o,F$o,v$o,Bb,Ece,T$o,M$o,sD,E$o,C$o,w$o,Pb,Cce,A$o,y$o,lD,L$o,x$o,k$o,$b,wce,S$o,R$o,iD,B$o,P$o,$$o,Ib,Ace,I$o,q$o,dD,N$o,j$o,D$o,qb,yce,G$o,O$o,cD,V$o,X$o,z$o,Nb,Lce,Q$o,W$o,fD,H$o,U$o,J$o,jb,xce,Y$o,K$o,mD,Z$o,eIo,oIo,Db,kce,rIo,tIo,gD,aIo,nIo,sIo,Gb,Sce,lIo,iIo,hD,dIo,cIo,fIo,Ob,Rce,mIo,gIo,pD,hIo,pIo,_Io,Vb,Bce,uIo,bIo,_D,FIo,vIo,TIo,Xb,Pce,MIo,EIo,uD,CIo,wIo,AIo,zb,$ce,yIo,LIo,bD,xIo,kIo,SIo,Qb,Ice,RIo,BIo,FD,PIo,$Io,IIo,Wb,qce,qIo,NIo,vD,jIo,DIo,GIo,Hb,Nce,OIo,VIo,TD,XIo,zIo,QIo,Ub,jce,WIo,HIo,MD,UIo,JIo,YIo,Jb,Dce,KIo,ZIo,ED,eqo,oqo,rqo,Yb,Gce,tqo,aqo,CD,nqo,sqo,lqo,Kb,Oce,iqo,dqo,wD,cqo,fqo,mqo,Zb,Vce,gqo,hqo,AD,pqo,_qo,uqo,e5,Xce,bqo,Fqo,yD,vqo,Tqo,Mqo,o5,zce,Eqo,Cqo,LD,wqo,Aqo,yqo,r5,Qce,Lqo,xqo,xD,kqo,Sqo,Rqo,t5,Wce,Bqo,Pqo,kD,$qo,Iqo,qqo,a5,Hce,Nqo,jqo,SD,Dqo,Gqo,Oqo,n5,Uce,Vqo,Xqo,RD,zqo,Qqo,Wqo,s5,Jce,Hqo,Uqo,BD,Jqo,Yqo,Kqo,l5,Yce,Zqo,eNo,PD,oNo,rNo,tNo,i5,Kce,aNo,nNo,$D,sNo,lNo,iNo,d5,Zce,dNo,cNo,ID,fNo,mNo,gNo,c5,hNo,efe,pNo,_No,ofe,uNo,bNo,rfe,FNo,vNo,MA,cBe,Ad,f5,tfe,EA,TNo,afe,MNo,fBe,sr,CA,ENo,yd,CNo,qD,wNo,ANo,ND,yNo,LNo,xNo,wA,kNo,nfe,SNo,RNo,BNo,et,AA,PNo,sfe,$No,INo,Ld,qNo,lfe,NNo,jNo,jD,DNo,GNo,ONo,ife,VNo,XNo,yA,zNo,We,LA,QNo,dfe,WNo,HNo,en,UNo,cfe,JNo,YNo,ffe,KNo,ZNo,mfe,ejo,ojo,rjo,gfe,m5,hfe,tjo,ajo,DD,njo,sjo,ljo,g5,ijo,pfe,djo,cjo,_fe,fjo,mjo,ufe,gjo,hjo,xA,mBe,xd,h5,bfe,kA,pjo,Ffe,_jo,gBe,lr,SA,ujo,kd,bjo,GD,Fjo,vjo,OD,Tjo,Mjo,Ejo,RA,Cjo,vfe,wjo,Ajo,yjo,ot,BA,Ljo,Tfe,xjo,kjo,Sd,Sjo,Mfe,Rjo,Bjo,VD,Pjo,$jo,Ijo,Efe,qjo,Njo,PA,jjo,He,$A,Djo,Cfe,Gjo,Ojo,on,Vjo,wfe,Xjo,zjo,Afe,Qjo,Wjo,yfe,Hjo,Ujo,Jjo,ce,p5,Lfe,Yjo,Kjo,XD,Zjo,eDo,oDo,_5,xfe,rDo,tDo,zD,aDo,nDo,sDo,Ds,kfe,lDo,iDo,QD,dDo,cDo,WD,fDo,mDo,gDo,u5,Sfe,hDo,pDo,HD,_Do,uDo,bDo,ma,Rfe,FDo,vDo,UD,TDo,MDo,JD,EDo,CDo,YD,wDo,ADo,yDo,b5,Bfe,LDo,xDo,KD,kDo,SDo,RDo,F5,Pfe,BDo,PDo,ZD,$Do,IDo,qDo,v5,$fe,NDo,jDo,eG,DDo,GDo,ODo,T5,Ife,VDo,XDo,oG,zDo,QDo,WDo,M5,qfe,HDo,UDo,rG,JDo,YDo,KDo,E5,Nfe,ZDo,eGo,tG,oGo,rGo,tGo,C5,jfe,aGo,nGo,aG,sGo,lGo,iGo,w5,dGo,Dfe,cGo,fGo,Gfe,mGo,gGo,Ofe,hGo,pGo,IA,hBe,Rd,A5,Vfe,qA,_Go,Xfe,uGo,pBe,ir,NA,bGo,Bd,FGo,nG,vGo,TGo,sG,MGo,EGo,CGo,jA,wGo,zfe,AGo,yGo,LGo,rt,DA,xGo,Qfe,kGo,SGo,Pd,RGo,Wfe,BGo,PGo,lG,$Go,IGo,qGo,Hfe,NGo,jGo,GA,DGo,Ue,OA,GGo,Ufe,OGo,VGo,rn,XGo,Jfe,zGo,QGo,Yfe,WGo,HGo,Kfe,UGo,JGo,YGo,Zfe,y5,eme,KGo,ZGo,iG,eOo,oOo,rOo,L5,tOo,ome,aOo,nOo,rme,sOo,lOo,tme,iOo,dOo,VA,_Be,$d,x5,ame,XA,cOo,nme,fOo,uBe,dr,zA,mOo,Id,gOo,dG,hOo,pOo,cG,_Oo,uOo,bOo,QA,FOo,sme,vOo,TOo,MOo,tt,WA,EOo,lme,COo,wOo,qd,AOo,ime,yOo,LOo,fG,xOo,kOo,SOo,dme,ROo,BOo,HA,POo,Je,UA,$Oo,cme,IOo,qOo,tn,NOo,fme,jOo,DOo,mme,GOo,OOo,gme,VOo,XOo,zOo,Se,k5,hme,QOo,WOo,mG,HOo,UOo,JOo,S5,pme,YOo,KOo,gG,ZOo,eVo,oVo,R5,_me,rVo,tVo,hG,aVo,nVo,sVo,B5,ume,lVo,iVo,pG,dVo,cVo,fVo,P5,bme,mVo,gVo,_G,hVo,pVo,_Vo,$5,Fme,uVo,bVo,uG,FVo,vVo,TVo,I5,vme,MVo,EVo,bG,CVo,wVo,AVo,q5,Tme,yVo,LVo,FG,xVo,kVo,SVo,N5,RVo,Mme,BVo,PVo,Eme,$Vo,IVo,Cme,qVo,NVo,JA,bBe,Nd,j5,wme,YA,jVo,Ame,DVo,FBe,cr,KA,GVo,jd,OVo,vG,VVo,XVo,TG,zVo,QVo,WVo,ZA,HVo,yme,UVo,JVo,YVo,at,e0,KVo,Lme,ZVo,eXo,Dd,oXo,xme,rXo,tXo,MG,aXo,nXo,sXo,kme,lXo,iXo,o0,dXo,Ye,r0,cXo,Sme,fXo,mXo,an,gXo,Rme,hXo,pXo,Bme,_Xo,uXo,Pme,bXo,FXo,vXo,nn,D5,$me,TXo,MXo,EG,EXo,CXo,wXo,G5,Ime,AXo,yXo,CG,LXo,xXo,kXo,O5,qme,SXo,RXo,wG,BXo,PXo,$Xo,V5,Nme,IXo,qXo,AG,NXo,jXo,DXo,X5,GXo,jme,OXo,VXo,Dme,XXo,zXo,Gme,QXo,WXo,t0,vBe,Gd,z5,Ome,a0,HXo,Vme,UXo,TBe,fr,n0,JXo,Od,YXo,yG,KXo,ZXo,LG,ezo,ozo,rzo,s0,tzo,Xme,azo,nzo,szo,nt,l0,lzo,zme,izo,dzo,Vd,czo,Qme,fzo,mzo,xG,gzo,hzo,pzo,Wme,_zo,uzo,i0,bzo,Ke,d0,Fzo,Hme,vzo,Tzo,sn,Mzo,Ume,Ezo,Czo,Jme,wzo,Azo,Yme,yzo,Lzo,xzo,Re,Q5,Kme,kzo,Szo,kG,Rzo,Bzo,Pzo,W5,Zme,$zo,Izo,SG,qzo,Nzo,jzo,H5,ege,Dzo,Gzo,RG,Ozo,Vzo,Xzo,U5,oge,zzo,Qzo,BG,Wzo,Hzo,Uzo,J5,rge,Jzo,Yzo,PG,Kzo,Zzo,eQo,Y5,tge,oQo,rQo,$G,tQo,aQo,nQo,K5,age,sQo,lQo,IG,iQo,dQo,cQo,Z5,nge,fQo,mQo,qG,gQo,hQo,pQo,e2,_Qo,sge,uQo,bQo,lge,FQo,vQo,ige,TQo,MQo,c0,MBe,Xd,o2,dge,f0,EQo,cge,CQo,EBe,mr,m0,wQo,zd,AQo,NG,yQo,LQo,jG,xQo,kQo,SQo,g0,RQo,fge,BQo,PQo,$Qo,st,h0,IQo,mge,qQo,NQo,Qd,jQo,gge,DQo,GQo,DG,OQo,VQo,XQo,hge,zQo,QQo,p0,WQo,Ze,_0,HQo,pge,UQo,JQo,ln,YQo,_ge,KQo,ZQo,uge,eWo,oWo,bge,rWo,tWo,aWo,u0,r2,Fge,nWo,sWo,GG,lWo,iWo,dWo,t2,vge,cWo,fWo,OG,mWo,gWo,hWo,a2,pWo,Tge,_Wo,uWo,Mge,bWo,FWo,Ege,vWo,TWo,b0,CBe,Wd,n2,Cge,F0,MWo,wge,EWo,wBe,gr,v0,CWo,Hd,wWo,VG,AWo,yWo,XG,LWo,xWo,kWo,T0,SWo,Age,RWo,BWo,PWo,lt,M0,$Wo,yge,IWo,qWo,Ud,NWo,Lge,jWo,DWo,zG,GWo,OWo,VWo,xge,XWo,zWo,E0,QWo,eo,C0,WWo,kge,HWo,UWo,dn,JWo,Sge,YWo,KWo,Rge,ZWo,eHo,Bge,oHo,rHo,tHo,cn,s2,Pge,aHo,nHo,QG,sHo,lHo,iHo,l2,$ge,dHo,cHo,WG,fHo,mHo,gHo,i2,Ige,hHo,pHo,HG,_Ho,uHo,bHo,d2,qge,FHo,vHo,UG,THo,MHo,EHo,c2,CHo,Nge,wHo,AHo,jge,yHo,LHo,Dge,xHo,kHo,w0,ABe,Jd,f2,Gge,A0,SHo,Oge,RHo,yBe,hr,y0,BHo,Yd,PHo,JG,$Ho,IHo,YG,qHo,NHo,jHo,L0,DHo,Vge,GHo,OHo,VHo,it,x0,XHo,Xge,zHo,QHo,Kd,WHo,zge,HHo,UHo,KG,JHo,YHo,KHo,Qge,ZHo,eUo,k0,oUo,oo,S0,rUo,Wge,tUo,aUo,fn,nUo,Hge,sUo,lUo,Uge,iUo,dUo,Jge,cUo,fUo,mUo,Zd,m2,Yge,gUo,hUo,ZG,pUo,_Uo,uUo,g2,Kge,bUo,FUo,eO,vUo,TUo,MUo,h2,Zge,EUo,CUo,oO,wUo,AUo,yUo,p2,LUo,ehe,xUo,kUo,ohe,SUo,RUo,rhe,BUo,PUo,R0,LBe,ec,_2,the,B0,$Uo,ahe,IUo,xBe,pr,P0,qUo,oc,NUo,rO,jUo,DUo,tO,GUo,OUo,VUo,$0,XUo,nhe,zUo,QUo,WUo,dt,I0,HUo,she,UUo,JUo,rc,YUo,lhe,KUo,ZUo,aO,eJo,oJo,rJo,ihe,tJo,aJo,q0,nJo,ro,N0,sJo,dhe,lJo,iJo,mn,dJo,che,cJo,fJo,fhe,mJo,gJo,mhe,hJo,pJo,_Jo,ghe,u2,hhe,uJo,bJo,nO,FJo,vJo,TJo,b2,MJo,phe,EJo,CJo,_he,wJo,AJo,uhe,yJo,LJo,j0,kBe,tc,F2,bhe,D0,xJo,Fhe,kJo,SBe,_r,G0,SJo,ac,RJo,sO,BJo,PJo,lO,$Jo,IJo,qJo,O0,NJo,vhe,jJo,DJo,GJo,ct,V0,OJo,The,VJo,XJo,nc,zJo,Mhe,QJo,WJo,iO,HJo,UJo,JJo,Ehe,YJo,KJo,X0,ZJo,to,z0,eYo,Che,oYo,rYo,gn,tYo,whe,aYo,nYo,Ahe,sYo,lYo,yhe,iYo,dYo,cYo,Lhe,v2,xhe,fYo,mYo,dO,gYo,hYo,pYo,T2,_Yo,khe,uYo,bYo,She,FYo,vYo,Rhe,TYo,MYo,Q0,RBe,sc,M2,Bhe,W0,EYo,Phe,CYo,BBe,ur,H0,wYo,lc,AYo,cO,yYo,LYo,fO,xYo,kYo,SYo,U0,RYo,$he,BYo,PYo,$Yo,ft,J0,IYo,Ihe,qYo,NYo,ic,jYo,qhe,DYo,GYo,mO,OYo,VYo,XYo,Nhe,zYo,QYo,Y0,WYo,ao,K0,HYo,jhe,UYo,JYo,hn,YYo,Dhe,KYo,ZYo,Ghe,eKo,oKo,Ohe,rKo,tKo,aKo,dc,E2,Vhe,nKo,sKo,gO,lKo,iKo,dKo,C2,Xhe,cKo,fKo,hO,mKo,gKo,hKo,w2,zhe,pKo,_Ko,pO,uKo,bKo,FKo,A2,vKo,Qhe,TKo,MKo,Whe,EKo,CKo,Hhe,wKo,AKo,Z0,PBe,cc,y2,Uhe,ey,yKo,Jhe,LKo,$Be,br,oy,xKo,fc,kKo,_O,SKo,RKo,uO,BKo,PKo,$Ko,ry,IKo,Yhe,qKo,NKo,jKo,mt,ty,DKo,Khe,GKo,OKo,mc,VKo,Zhe,XKo,zKo,bO,QKo,WKo,HKo,epe,UKo,JKo,ay,YKo,no,ny,KKo,ope,ZKo,eZo,pn,oZo,rpe,rZo,tZo,tpe,aZo,nZo,ape,sZo,lZo,iZo,npe,L2,spe,dZo,cZo,FO,fZo,mZo,gZo,x2,hZo,lpe,pZo,_Zo,ipe,uZo,bZo,dpe,FZo,vZo,sy,IBe,gc,k2,cpe,ly,TZo,fpe,MZo,qBe,Fr,iy,EZo,hc,CZo,vO,wZo,AZo,TO,yZo,LZo,xZo,dy,kZo,mpe,SZo,RZo,BZo,gt,cy,PZo,gpe,$Zo,IZo,pc,qZo,hpe,NZo,jZo,MO,DZo,GZo,OZo,ppe,VZo,XZo,fy,zZo,po,my,QZo,_pe,WZo,HZo,_n,UZo,upe,JZo,YZo,bpe,KZo,ZZo,Fpe,eer,oer,rer,x,S2,vpe,ter,aer,EO,ner,ser,ler,R2,Tpe,ier,der,CO,cer,fer,mer,B2,Mpe,ger,her,wO,per,_er,uer,P2,Epe,ber,Fer,AO,ver,Ter,Mer,$2,Cpe,Eer,Cer,yO,wer,Aer,yer,I2,wpe,Ler,xer,LO,ker,Ser,Rer,q2,Ape,Ber,Per,xO,$er,Ier,qer,N2,ype,Ner,jer,kO,Der,Ger,Oer,j2,Lpe,Ver,Xer,SO,zer,Qer,Wer,D2,xpe,Her,Uer,RO,Jer,Yer,Ker,G2,kpe,Zer,eor,BO,oor,ror,tor,O2,Spe,aor,nor,PO,sor,lor,ior,V2,Rpe,dor,cor,$O,mor,gor,hor,X2,Bpe,por,_or,IO,uor,bor,For,z2,Ppe,vor,Tor,qO,Mor,Eor,Cor,Q2,$pe,wor,Aor,NO,yor,Lor,xor,Gs,Ipe,kor,Sor,jO,Ror,Bor,DO,Por,$or,Ior,W2,qpe,qor,Nor,GO,jor,Dor,Gor,H2,Npe,Oor,Vor,OO,Xor,zor,Qor,U2,jpe,Wor,Hor,VO,Uor,Jor,Yor,J2,Dpe,Kor,Zor,XO,err,orr,rrr,Y2,Gpe,trr,arr,zO,nrr,srr,lrr,K2,Ope,irr,drr,QO,crr,frr,mrr,Z2,Vpe,grr,hrr,WO,prr,_rr,urr,eF,Xpe,brr,Frr,HO,vrr,Trr,Mrr,oF,zpe,Err,Crr,UO,wrr,Arr,yrr,rF,Qpe,Lrr,xrr,JO,krr,Srr,Rrr,tF,Wpe,Brr,Prr,YO,$rr,Irr,qrr,aF,Hpe,Nrr,jrr,KO,Drr,Grr,Orr,nF,Upe,Vrr,Xrr,ZO,zrr,Qrr,Wrr,sF,Jpe,Hrr,Urr,eV,Jrr,Yrr,Krr,lF,Ype,Zrr,etr,oV,otr,rtr,ttr,iF,Kpe,atr,ntr,rV,str,ltr,itr,dF,Zpe,dtr,ctr,tV,ftr,mtr,gtr,cF,e_e,htr,ptr,aV,_tr,utr,btr,fF,o_e,Ftr,vtr,nV,Ttr,Mtr,Etr,mF,r_e,Ctr,wtr,sV,Atr,ytr,Ltr,gF,t_e,xtr,ktr,lV,Str,Rtr,Btr,hF,a_e,Ptr,$tr,iV,Itr,qtr,Ntr,pF,n_e,jtr,Dtr,dV,Gtr,Otr,Vtr,_F,s_e,Xtr,ztr,cV,Qtr,Wtr,Htr,uF,l_e,Utr,Jtr,fV,Ytr,Ktr,Ztr,bF,i_e,ear,oar,mV,rar,tar,aar,FF,d_e,nar,sar,gV,lar,iar,dar,c_e,car,far,gy,NBe,_c,vF,f_e,hy,mar,m_e,gar,jBe,vr,py,har,uc,par,hV,_ar,uar,pV,bar,Far,Tar,_y,Mar,g_e,Ear,Car,war,ht,uy,Aar,h_e,yar,Lar,bc,xar,p_e,kar,Sar,_V,Rar,Bar,Par,__e,$ar,Iar,by,qar,_o,Fy,Nar,u_e,jar,Dar,un,Gar,b_e,Oar,Var,F_e,Xar,zar,v_e,Qar,War,Har,H,TF,T_e,Uar,Jar,uV,Yar,Kar,Zar,MF,M_e,enr,onr,bV,rnr,tnr,anr,EF,E_e,nnr,snr,FV,lnr,inr,dnr,CF,C_e,cnr,fnr,vV,mnr,gnr,hnr,wF,w_e,pnr,_nr,TV,unr,bnr,Fnr,AF,A_e,vnr,Tnr,MV,Mnr,Enr,Cnr,yF,y_e,wnr,Anr,EV,ynr,Lnr,xnr,LF,L_e,knr,Snr,CV,Rnr,Bnr,Pnr,xF,x_e,$nr,Inr,wV,qnr,Nnr,jnr,kF,k_e,Dnr,Gnr,AV,Onr,Vnr,Xnr,SF,S_e,znr,Qnr,yV,Wnr,Hnr,Unr,RF,R_e,Jnr,Ynr,LV,Knr,Znr,esr,BF,B_e,osr,rsr,xV,tsr,asr,nsr,PF,P_e,ssr,lsr,kV,isr,dsr,csr,$F,$_e,fsr,msr,SV,gsr,hsr,psr,IF,I_e,_sr,usr,RV,bsr,Fsr,vsr,qF,q_e,Tsr,Msr,BV,Esr,Csr,wsr,NF,N_e,Asr,ysr,PV,Lsr,xsr,ksr,jF,j_e,Ssr,Rsr,$V,Bsr,Psr,$sr,DF,D_e,Isr,qsr,IV,Nsr,jsr,Dsr,GF,G_e,Gsr,Osr,qV,Vsr,Xsr,zsr,OF,O_e,Qsr,Wsr,NV,Hsr,Usr,Jsr,VF,V_e,Ysr,Ksr,jV,Zsr,elr,olr,X_e,rlr,tlr,vy,DBe,Fc,XF,z_e,Ty,alr,Q_e,nlr,GBe,Tr,My,slr,vc,llr,DV,ilr,dlr,GV,clr,flr,mlr,Ey,glr,W_e,hlr,plr,_lr,pt,Cy,ulr,H_e,blr,Flr,Tc,vlr,U_e,Tlr,Mlr,OV,Elr,Clr,wlr,J_e,Alr,ylr,wy,Llr,uo,Ay,xlr,Y_e,klr,Slr,bn,Rlr,K_e,Blr,Plr,Z_e,$lr,Ilr,eue,qlr,Nlr,jlr,fe,zF,oue,Dlr,Glr,VV,Olr,Vlr,Xlr,QF,rue,zlr,Qlr,XV,Wlr,Hlr,Ulr,WF,tue,Jlr,Ylr,zV,Klr,Zlr,eir,HF,aue,oir,rir,QV,tir,air,nir,UF,nue,sir,lir,WV,iir,dir,cir,JF,sue,fir,mir,HV,gir,hir,pir,YF,lue,_ir,uir,UV,bir,Fir,vir,KF,iue,Tir,Mir,JV,Eir,Cir,wir,ZF,due,Air,yir,YV,Lir,xir,kir,ev,cue,Sir,Rir,KV,Bir,Pir,$ir,ov,fue,Iir,qir,ZV,Nir,jir,Dir,rv,mue,Gir,Oir,eX,Vir,Xir,zir,gue,Qir,Wir,yy,OBe,Mc,tv,hue,Ly,Hir,pue,Uir,VBe,Mr,xy,Jir,Ec,Yir,oX,Kir,Zir,rX,edr,odr,rdr,ky,tdr,_ue,adr,ndr,sdr,_t,Sy,ldr,uue,idr,ddr,Cc,cdr,bue,fdr,mdr,tX,gdr,hdr,pdr,Fue,_dr,udr,Ry,bdr,bo,By,Fdr,vue,vdr,Tdr,Fn,Mdr,Tue,Edr,Cdr,Mue,wdr,Adr,Eue,ydr,Ldr,xdr,Py,av,Cue,kdr,Sdr,aX,Rdr,Bdr,Pdr,nv,wue,$dr,Idr,nX,qdr,Ndr,jdr,Aue,Ddr,Gdr,$y,XBe,wc,sv,yue,Iy,Odr,Lue,Vdr,zBe,Er,qy,Xdr,Ac,zdr,sX,Qdr,Wdr,lX,Hdr,Udr,Jdr,Ny,Ydr,xue,Kdr,Zdr,ecr,ut,jy,ocr,kue,rcr,tcr,yc,acr,Sue,ncr,scr,iX,lcr,icr,dcr,Rue,ccr,fcr,Dy,mcr,Fo,Gy,gcr,Bue,hcr,pcr,vn,_cr,Pue,ucr,bcr,$ue,Fcr,vcr,Iue,Tcr,Mcr,Ecr,Y,lv,que,Ccr,wcr,dX,Acr,ycr,Lcr,iv,Nue,xcr,kcr,cX,Scr,Rcr,Bcr,dv,jue,Pcr,$cr,fX,Icr,qcr,Ncr,cv,Due,jcr,Dcr,mX,Gcr,Ocr,Vcr,fv,Gue,Xcr,zcr,gX,Qcr,Wcr,Hcr,mv,Oue,Ucr,Jcr,hX,Ycr,Kcr,Zcr,gv,Vue,efr,ofr,pX,rfr,tfr,afr,hv,Xue,nfr,sfr,_X,lfr,ifr,dfr,pv,zue,cfr,ffr,uX,mfr,gfr,hfr,_v,Que,pfr,_fr,bX,ufr,bfr,Ffr,uv,Wue,vfr,Tfr,FX,Mfr,Efr,Cfr,bv,Hue,wfr,Afr,vX,yfr,Lfr,xfr,Fv,Uue,kfr,Sfr,TX,Rfr,Bfr,Pfr,vv,Jue,$fr,Ifr,MX,qfr,Nfr,jfr,Tv,Yue,Dfr,Gfr,EX,Ofr,Vfr,Xfr,Mv,Kue,zfr,Qfr,CX,Wfr,Hfr,Ufr,Ev,Zue,Jfr,Yfr,wX,Kfr,Zfr,emr,Cv,e6e,omr,rmr,AX,tmr,amr,nmr,wv,o6e,smr,lmr,yX,imr,dmr,cmr,Av,r6e,fmr,mmr,LX,gmr,hmr,pmr,t6e,_mr,umr,Oy,QBe,Lc,yv,a6e,Vy,bmr,n6e,Fmr,WBe,Cr,Xy,vmr,xc,Tmr,xX,Mmr,Emr,kX,Cmr,wmr,Amr,zy,ymr,s6e,Lmr,xmr,kmr,bt,Qy,Smr,l6e,Rmr,Bmr,kc,Pmr,i6e,$mr,Imr,SX,qmr,Nmr,jmr,d6e,Dmr,Gmr,Wy,Omr,vo,Hy,Vmr,c6e,Xmr,zmr,Tn,Qmr,f6e,Wmr,Hmr,m6e,Umr,Jmr,g6e,Ymr,Kmr,Zmr,be,Lv,h6e,egr,ogr,RX,rgr,tgr,agr,xv,p6e,ngr,sgr,BX,lgr,igr,dgr,kv,_6e,cgr,fgr,PX,mgr,ggr,hgr,Sv,u6e,pgr,_gr,$X,ugr,bgr,Fgr,Rv,b6e,vgr,Tgr,IX,Mgr,Egr,Cgr,Bv,F6e,wgr,Agr,qX,ygr,Lgr,xgr,Pv,v6e,kgr,Sgr,NX,Rgr,Bgr,Pgr,$v,T6e,$gr,Igr,jX,qgr,Ngr,jgr,Iv,M6e,Dgr,Ggr,DX,Ogr,Vgr,Xgr,qv,E6e,zgr,Qgr,GX,Wgr,Hgr,Ugr,C6e,Jgr,Ygr,Uy,HBe,Sc,Nv,w6e,Jy,Kgr,A6e,Zgr,UBe,wr,Yy,ehr,Rc,ohr,OX,rhr,thr,VX,ahr,nhr,shr,Ky,lhr,y6e,ihr,dhr,chr,Ft,Zy,fhr,L6e,mhr,ghr,Bc,hhr,x6e,phr,_hr,XX,uhr,bhr,Fhr,k6e,vhr,Thr,eL,Mhr,To,oL,Ehr,S6e,Chr,whr,Mn,Ahr,R6e,yhr,Lhr,B6e,xhr,khr,P6e,Shr,Rhr,Bhr,V,jv,$6e,Phr,$hr,zX,Ihr,qhr,Nhr,Dv,I6e,jhr,Dhr,QX,Ghr,Ohr,Vhr,Gv,q6e,Xhr,zhr,WX,Qhr,Whr,Hhr,Ov,N6e,Uhr,Jhr,HX,Yhr,Khr,Zhr,Vv,j6e,epr,opr,UX,rpr,tpr,apr,Xv,D6e,npr,spr,JX,lpr,ipr,dpr,zv,G6e,cpr,fpr,YX,mpr,gpr,hpr,Qv,O6e,ppr,_pr,KX,upr,bpr,Fpr,Wv,V6e,vpr,Tpr,ZX,Mpr,Epr,Cpr,Hv,X6e,wpr,Apr,ez,ypr,Lpr,xpr,Uv,z6e,kpr,Spr,oz,Rpr,Bpr,Ppr,Jv,Q6e,$pr,Ipr,rz,qpr,Npr,jpr,Yv,W6e,Dpr,Gpr,tz,Opr,Vpr,Xpr,Kv,H6e,zpr,Qpr,az,Wpr,Hpr,Upr,Zv,U6e,Jpr,Ypr,nz,Kpr,Zpr,e_r,eT,J6e,o_r,r_r,sz,t_r,a_r,n_r,oT,Y6e,s_r,l_r,lz,i_r,d_r,c_r,rT,K6e,f_r,m_r,iz,g_r,h_r,p_r,tT,Z6e,__r,u_r,dz,b_r,F_r,v_r,aT,e1e,T_r,M_r,cz,E_r,C_r,w_r,nT,o1e,A_r,y_r,fz,L_r,x_r,k_r,sT,r1e,S_r,R_r,mz,B_r,P_r,$_r,lT,t1e,I_r,q_r,gz,N_r,j_r,D_r,iT,a1e,G_r,O_r,hz,V_r,X_r,z_r,dT,n1e,Q_r,W_r,pz,H_r,U_r,J_r,cT,s1e,Y_r,K_r,_z,Z_r,eur,our,l1e,rur,tur,rL,JBe,Pc,fT,i1e,tL,aur,d1e,nur,YBe,Ar,aL,sur,$c,lur,uz,iur,dur,bz,cur,fur,mur,nL,gur,c1e,hur,pur,_ur,vt,sL,uur,f1e,bur,Fur,Ic,vur,m1e,Tur,Mur,Fz,Eur,Cur,wur,g1e,Aur,yur,lL,Lur,Mo,iL,xur,h1e,kur,Sur,En,Rur,p1e,Bur,Pur,_1e,$ur,Iur,u1e,qur,Nur,jur,se,mT,b1e,Dur,Gur,vz,Our,Vur,Xur,gT,F1e,zur,Qur,Tz,Wur,Hur,Uur,hT,v1e,Jur,Yur,Mz,Kur,Zur,e6r,pT,T1e,o6r,r6r,Ez,t6r,a6r,n6r,_T,M1e,s6r,l6r,Cz,i6r,d6r,c6r,uT,E1e,f6r,m6r,wz,g6r,h6r,p6r,bT,C1e,_6r,u6r,Az,b6r,F6r,v6r,FT,w1e,T6r,M6r,yz,E6r,C6r,w6r,vT,A1e,A6r,y6r,Lz,L6r,x6r,k6r,TT,y1e,S6r,R6r,xz,B6r,P6r,$6r,MT,L1e,I6r,q6r,kz,N6r,j6r,D6r,ET,x1e,G6r,O6r,Sz,V6r,X6r,z6r,CT,k1e,Q6r,W6r,Rz,H6r,U6r,J6r,wT,S1e,Y6r,K6r,Bz,Z6r,e1r,o1r,AT,R1e,r1r,t1r,Pz,a1r,n1r,s1r,yT,B1e,l1r,i1r,$z,d1r,c1r,f1r,LT,P1e,m1r,g1r,Iz,h1r,p1r,_1r,$1e,u1r,b1r,dL,KBe,qc,xT,I1e,cL,F1r,q1e,v1r,ZBe,yr,fL,T1r,Nc,M1r,qz,E1r,C1r,Nz,w1r,A1r,y1r,mL,L1r,N1e,x1r,k1r,S1r,Tt,gL,R1r,j1e,B1r,P1r,jc,$1r,D1e,I1r,q1r,jz,N1r,j1r,D1r,G1e,G1r,O1r,hL,V1r,Eo,pL,X1r,O1e,z1r,Q1r,Cn,W1r,V1e,H1r,U1r,X1e,J1r,Y1r,z1e,K1r,Z1r,e4r,Q1e,kT,W1e,o4r,r4r,Dz,t4r,a4r,n4r,H1e,s4r,l4r,_L,ePe,Dc,ST,U1e,uL,i4r,J1e,d4r,oPe,Lr,bL,c4r,Gc,f4r,Gz,m4r,g4r,Oz,h4r,p4r,_4r,FL,u4r,Y1e,b4r,F4r,v4r,Mt,vL,T4r,K1e,M4r,E4r,Oc,C4r,Z1e,w4r,A4r,Vz,y4r,L4r,x4r,e4e,k4r,S4r,TL,R4r,Co,ML,B4r,o4e,P4r,$4r,wn,I4r,r4e,q4r,N4r,t4e,j4r,D4r,a4e,G4r,O4r,V4r,K,RT,n4e,X4r,z4r,Xz,Q4r,W4r,H4r,BT,s4e,U4r,J4r,zz,Y4r,K4r,Z4r,PT,l4e,ebr,obr,Qz,rbr,tbr,abr,$T,i4e,nbr,sbr,Wz,lbr,ibr,dbr,IT,d4e,cbr,fbr,Hz,mbr,gbr,hbr,qT,c4e,pbr,_br,Uz,ubr,bbr,Fbr,NT,f4e,vbr,Tbr,Jz,Mbr,Ebr,Cbr,jT,m4e,wbr,Abr,Yz,ybr,Lbr,xbr,DT,g4e,kbr,Sbr,Kz,Rbr,Bbr,Pbr,GT,h4e,$br,Ibr,Zz,qbr,Nbr,jbr,OT,p4e,Dbr,Gbr,eQ,Obr,Vbr,Xbr,VT,_4e,zbr,Qbr,oQ,Wbr,Hbr,Ubr,XT,u4e,Jbr,Ybr,rQ,Kbr,Zbr,e5r,zT,b4e,o5r,r5r,tQ,t5r,a5r,n5r,QT,F4e,s5r,l5r,aQ,i5r,d5r,c5r,WT,v4e,f5r,m5r,nQ,g5r,h5r,p5r,HT,T4e,_5r,u5r,sQ,b5r,F5r,v5r,UT,M4e,T5r,M5r,lQ,E5r,C5r,w5r,JT,E4e,A5r,y5r,iQ,L5r,x5r,k5r,YT,C4e,S5r,R5r,dQ,B5r,P5r,$5r,w4e,I5r,q5r,EL,rPe,Vc,KT,A4e,CL,N5r,y4e,j5r,tPe,xr,wL,D5r,Xc,G5r,cQ,O5r,V5r,fQ,X5r,z5r,Q5r,AL,W5r,L4e,H5r,U5r,J5r,Et,yL,Y5r,x4e,K5r,Z5r,zc,e2r,k4e,o2r,r2r,mQ,t2r,a2r,n2r,S4e,s2r,l2r,LL,i2r,wo,xL,d2r,R4e,c2r,f2r,An,m2r,B4e,g2r,h2r,P4e,p2r,_2r,$4e,u2r,b2r,F2r,Z,ZT,I4e,v2r,T2r,gQ,M2r,E2r,C2r,eM,q4e,w2r,A2r,hQ,y2r,L2r,x2r,oM,N4e,k2r,S2r,pQ,R2r,B2r,P2r,rM,j4e,$2r,I2r,_Q,q2r,N2r,j2r,tM,D4e,D2r,G2r,uQ,O2r,V2r,X2r,aM,G4e,z2r,Q2r,bQ,W2r,H2r,U2r,nM,O4e,J2r,Y2r,FQ,K2r,Z2r,eFr,sM,V4e,oFr,rFr,vQ,tFr,aFr,nFr,lM,X4e,sFr,lFr,TQ,iFr,dFr,cFr,iM,z4e,fFr,mFr,MQ,gFr,hFr,pFr,dM,Q4e,_Fr,uFr,EQ,bFr,FFr,vFr,cM,W4e,TFr,MFr,CQ,EFr,CFr,wFr,fM,H4e,AFr,yFr,wQ,LFr,xFr,kFr,mM,U4e,SFr,RFr,AQ,BFr,PFr,$Fr,gM,J4e,IFr,qFr,yQ,NFr,jFr,DFr,hM,Y4e,GFr,OFr,LQ,VFr,XFr,zFr,pM,K4e,QFr,WFr,xQ,HFr,UFr,JFr,_M,Z4e,YFr,KFr,kQ,ZFr,evr,ovr,uM,ebe,rvr,tvr,SQ,avr,nvr,svr,bM,obe,lvr,ivr,RQ,dvr,cvr,fvr,rbe,mvr,gvr,kL,aPe,Qc,FM,tbe,SL,hvr,abe,pvr,nPe,kr,RL,_vr,Wc,uvr,BQ,bvr,Fvr,PQ,vvr,Tvr,Mvr,BL,Evr,nbe,Cvr,wvr,Avr,Ct,PL,yvr,sbe,Lvr,xvr,Hc,kvr,lbe,Svr,Rvr,$Q,Bvr,Pvr,$vr,ibe,Ivr,qvr,$L,Nvr,Ao,IL,jvr,dbe,Dvr,Gvr,yn,Ovr,cbe,Vvr,Xvr,fbe,zvr,Qvr,mbe,Wvr,Hvr,Uvr,gbe,vM,hbe,Jvr,Yvr,IQ,Kvr,Zvr,eTr,pbe,oTr,rTr,qL,sPe,Uc,TM,_be,NL,tTr,ube,aTr,lPe,Sr,jL,nTr,Jc,sTr,qQ,lTr,iTr,NQ,dTr,cTr,fTr,DL,mTr,bbe,gTr,hTr,pTr,wt,GL,_Tr,Fbe,uTr,bTr,Yc,FTr,vbe,vTr,TTr,jQ,MTr,ETr,CTr,Tbe,wTr,ATr,OL,yTr,yo,VL,LTr,Mbe,xTr,kTr,Ln,STr,Ebe,RTr,BTr,Cbe,PTr,$Tr,wbe,ITr,qTr,NTr,Abe,MM,ybe,jTr,DTr,DQ,GTr,OTr,VTr,Lbe,XTr,zTr,XL,iPe,Kc,EM,xbe,zL,QTr,kbe,WTr,dPe,Rr,QL,HTr,Zc,UTr,GQ,JTr,YTr,OQ,KTr,ZTr,eMr,WL,oMr,Sbe,rMr,tMr,aMr,At,HL,nMr,Rbe,sMr,lMr,ef,iMr,Bbe,dMr,cMr,VQ,fMr,mMr,gMr,Pbe,hMr,pMr,UL,_Mr,Lo,JL,uMr,$be,bMr,FMr,xn,vMr,Ibe,TMr,MMr,qbe,EMr,CMr,Nbe,wMr,AMr,yMr,z,CM,jbe,LMr,xMr,XQ,kMr,SMr,RMr,wM,Dbe,BMr,PMr,zQ,$Mr,IMr,qMr,AM,Gbe,NMr,jMr,QQ,DMr,GMr,OMr,yM,Obe,VMr,XMr,WQ,zMr,QMr,WMr,LM,Vbe,HMr,UMr,HQ,JMr,YMr,KMr,xM,Xbe,ZMr,eEr,UQ,oEr,rEr,tEr,kM,zbe,aEr,nEr,JQ,sEr,lEr,iEr,SM,Qbe,dEr,cEr,YQ,fEr,mEr,gEr,RM,Wbe,hEr,pEr,KQ,_Er,uEr,bEr,BM,Hbe,FEr,vEr,ZQ,TEr,MEr,EEr,PM,Ube,CEr,wEr,eW,AEr,yEr,LEr,$M,Jbe,xEr,kEr,oW,SEr,REr,BEr,IM,Ybe,PEr,$Er,rW,IEr,qEr,NEr,qM,Kbe,jEr,DEr,tW,GEr,OEr,VEr,NM,Zbe,XEr,zEr,aW,QEr,WEr,HEr,jM,e5e,UEr,JEr,nW,YEr,KEr,ZEr,DM,o5e,e3r,o3r,sW,r3r,t3r,a3r,GM,r5e,n3r,s3r,lW,l3r,i3r,d3r,OM,t5e,c3r,f3r,iW,m3r,g3r,h3r,VM,a5e,p3r,_3r,dW,u3r,b3r,F3r,XM,n5e,v3r,T3r,cW,M3r,E3r,C3r,zM,s5e,w3r,A3r,fW,y3r,L3r,x3r,QM,l5e,k3r,S3r,mW,R3r,B3r,P3r,WM,i5e,$3r,I3r,gW,q3r,N3r,j3r,HM,d5e,D3r,G3r,hW,O3r,V3r,X3r,c5e,z3r,Q3r,YL,cPe,of,UM,f5e,KL,W3r,m5e,H3r,fPe,Br,ZL,U3r,rf,J3r,pW,Y3r,K3r,_W,Z3r,eCr,oCr,e8,rCr,g5e,tCr,aCr,nCr,yt,o8,sCr,h5e,lCr,iCr,tf,dCr,p5e,cCr,fCr,uW,mCr,gCr,hCr,_5e,pCr,_Cr,r8,uCr,xo,t8,bCr,u5e,FCr,vCr,kn,TCr,b5e,MCr,ECr,F5e,CCr,wCr,v5e,ACr,yCr,LCr,ca,JM,T5e,xCr,kCr,bW,SCr,RCr,BCr,YM,M5e,PCr,$Cr,FW,ICr,qCr,NCr,KM,E5e,jCr,DCr,vW,GCr,OCr,VCr,ZM,C5e,XCr,zCr,TW,QCr,WCr,HCr,eE,w5e,UCr,JCr,MW,YCr,KCr,ZCr,A5e,ewr,owr,a8,mPe,af,oE,y5e,n8,rwr,L5e,twr,gPe,Pr,s8,awr,nf,nwr,EW,swr,lwr,CW,iwr,dwr,cwr,l8,fwr,x5e,mwr,gwr,hwr,Lt,i8,pwr,k5e,_wr,uwr,sf,bwr,S5e,Fwr,vwr,wW,Twr,Mwr,Ewr,R5e,Cwr,wwr,d8,Awr,ko,c8,ywr,B5e,Lwr,xwr,Sn,kwr,P5e,Swr,Rwr,$5e,Bwr,Pwr,I5e,$wr,Iwr,qwr,me,rE,q5e,Nwr,jwr,AW,Dwr,Gwr,Owr,tE,N5e,Vwr,Xwr,yW,zwr,Qwr,Wwr,aE,j5e,Hwr,Uwr,LW,Jwr,Ywr,Kwr,nE,D5e,Zwr,eAr,xW,oAr,rAr,tAr,sE,G5e,aAr,nAr,kW,sAr,lAr,iAr,lE,O5e,dAr,cAr,SW,fAr,mAr,gAr,iE,V5e,hAr,pAr,RW,_Ar,uAr,bAr,dE,X5e,FAr,vAr,BW,TAr,MAr,EAr,cE,z5e,CAr,wAr,PW,AAr,yAr,LAr,fE,Q5e,xAr,kAr,$W,SAr,RAr,BAr,mE,W5e,PAr,$Ar,IW,IAr,qAr,NAr,gE,H5e,jAr,DAr,qW,GAr,OAr,VAr,U5e,XAr,zAr,f8,hPe,lf,hE,J5e,m8,QAr,Y5e,WAr,pPe,$r,g8,HAr,df,UAr,NW,JAr,YAr,jW,KAr,ZAr,e0r,h8,o0r,K5e,r0r,t0r,a0r,xt,p8,n0r,Z5e,s0r,l0r,cf,i0r,e2e,d0r,c0r,DW,f0r,m0r,g0r,o2e,h0r,p0r,_8,_0r,So,u8,u0r,r2e,b0r,F0r,Rn,v0r,t2e,T0r,M0r,a2e,E0r,C0r,n2e,w0r,A0r,y0r,Fe,pE,s2e,L0r,x0r,GW,k0r,S0r,R0r,_E,l2e,B0r,P0r,OW,$0r,I0r,q0r,uE,i2e,N0r,j0r,VW,D0r,G0r,O0r,bE,d2e,V0r,X0r,XW,z0r,Q0r,W0r,FE,c2e,H0r,U0r,zW,J0r,Y0r,K0r,vE,f2e,Z0r,eyr,QW,oyr,ryr,tyr,TE,m2e,ayr,nyr,WW,syr,lyr,iyr,ME,g2e,dyr,cyr,HW,fyr,myr,gyr,EE,h2e,hyr,pyr,UW,_yr,uyr,byr,CE,p2e,Fyr,vyr,JW,Tyr,Myr,Eyr,_2e,Cyr,wyr,b8,_Pe,ff,wE,u2e,F8,Ayr,b2e,yyr,uPe,Ir,v8,Lyr,mf,xyr,YW,kyr,Syr,KW,Ryr,Byr,Pyr,T8,$yr,F2e,Iyr,qyr,Nyr,kt,M8,jyr,v2e,Dyr,Gyr,gf,Oyr,T2e,Vyr,Xyr,ZW,zyr,Qyr,Wyr,M2e,Hyr,Uyr,E8,Jyr,Ro,C8,Yyr,E2e,Kyr,Zyr,Bn,eLr,C2e,oLr,rLr,w2e,tLr,aLr,A2e,nLr,sLr,lLr,Ce,AE,y2e,iLr,dLr,eH,cLr,fLr,mLr,yE,L2e,gLr,hLr,oH,pLr,_Lr,uLr,LE,x2e,bLr,FLr,rH,vLr,TLr,MLr,xE,k2e,ELr,CLr,tH,wLr,ALr,yLr,kE,S2e,LLr,xLr,aH,kLr,SLr,RLr,SE,R2e,BLr,PLr,nH,$Lr,ILr,qLr,RE,B2e,NLr,jLr,sH,DLr,GLr,OLr,BE,P2e,VLr,XLr,lH,zLr,QLr,WLr,PE,$2e,HLr,ULr,iH,JLr,YLr,KLr,I2e,ZLr,e8r,w8,bPe,hf,$E,q2e,A8,o8r,N2e,r8r,FPe,qr,y8,t8r,pf,a8r,dH,n8r,s8r,cH,l8r,i8r,d8r,L8,c8r,j2e,f8r,m8r,g8r,St,x8,h8r,D2e,p8r,_8r,_f,u8r,G2e,b8r,F8r,fH,v8r,T8r,M8r,O2e,E8r,C8r,k8,w8r,Bo,S8,A8r,V2e,y8r,L8r,Pn,x8r,X2e,k8r,S8r,z2e,R8r,B8r,Q2e,P8r,$8r,I8r,ve,IE,W2e,q8r,N8r,mH,j8r,D8r,G8r,qE,H2e,O8r,V8r,gH,X8r,z8r,Q8r,NE,U2e,W8r,H8r,hH,U8r,J8r,Y8r,jE,J2e,K8r,Z8r,pH,e7r,o7r,r7r,DE,Y2e,t7r,a7r,_H,n7r,s7r,l7r,GE,K2e,i7r,d7r,uH,c7r,f7r,m7r,OE,Z2e,g7r,h7r,bH,p7r,_7r,u7r,VE,eFe,b7r,F7r,FH,v7r,T7r,M7r,XE,oFe,E7r,C7r,vH,w7r,A7r,y7r,zE,rFe,L7r,x7r,TH,k7r,S7r,R7r,tFe,B7r,P7r,R8,vPe,uf,QE,aFe,B8,$7r,nFe,I7r,TPe,Nr,P8,q7r,bf,N7r,MH,j7r,D7r,EH,G7r,O7r,V7r,$8,X7r,sFe,z7r,Q7r,W7r,Rt,I8,H7r,lFe,U7r,J7r,Ff,Y7r,iFe,K7r,Z7r,CH,e9r,o9r,r9r,dFe,t9r,a9r,q8,n9r,Po,N8,s9r,cFe,l9r,i9r,$n,d9r,fFe,c9r,f9r,mFe,m9r,g9r,gFe,h9r,p9r,_9r,Te,WE,hFe,u9r,b9r,wH,F9r,v9r,T9r,HE,pFe,M9r,E9r,AH,C9r,w9r,A9r,UE,_Fe,y9r,L9r,yH,x9r,k9r,S9r,JE,uFe,R9r,B9r,LH,P9r,$9r,I9r,YE,bFe,q9r,N9r,xH,j9r,D9r,G9r,KE,FFe,O9r,V9r,kH,X9r,z9r,Q9r,ZE,vFe,W9r,H9r,SH,U9r,J9r,Y9r,e3,TFe,K9r,Z9r,RH,exr,oxr,rxr,o3,MFe,txr,axr,BH,nxr,sxr,lxr,r3,EFe,ixr,dxr,PH,cxr,fxr,mxr,CFe,gxr,hxr,j8,MPe,vf,t3,wFe,D8,pxr,AFe,_xr,EPe,jr,G8,uxr,Tf,bxr,$H,Fxr,vxr,IH,Txr,Mxr,Exr,O8,Cxr,yFe,wxr,Axr,yxr,Bt,V8,Lxr,LFe,xxr,kxr,Mf,Sxr,xFe,Rxr,Bxr,qH,Pxr,$xr,Ixr,kFe,qxr,Nxr,X8,jxr,$o,z8,Dxr,SFe,Gxr,Oxr,In,Vxr,RFe,Xxr,zxr,BFe,Qxr,Wxr,PFe,Hxr,Uxr,Jxr,Be,a3,$Fe,Yxr,Kxr,NH,Zxr,ekr,okr,n3,IFe,rkr,tkr,jH,akr,nkr,skr,s3,qFe,lkr,ikr,DH,dkr,ckr,fkr,l3,NFe,mkr,gkr,GH,hkr,pkr,_kr,i3,jFe,ukr,bkr,OH,Fkr,vkr,Tkr,d3,DFe,Mkr,Ekr,VH,Ckr,wkr,Akr,c3,GFe,ykr,Lkr,XH,xkr,kkr,Skr,f3,OFe,Rkr,Bkr,zH,Pkr,$kr,Ikr,VFe,qkr,Nkr,Q8,CPe,Ef,m3,XFe,W8,jkr,zFe,Dkr,wPe,Dr,H8,Gkr,Cf,Okr,QH,Vkr,Xkr,WH,zkr,Qkr,Wkr,U8,Hkr,QFe,Ukr,Jkr,Ykr,Pt,J8,Kkr,WFe,Zkr,eSr,wf,oSr,HFe,rSr,tSr,HH,aSr,nSr,sSr,UFe,lSr,iSr,Y8,dSr,Io,K8,cSr,JFe,fSr,mSr,qn,gSr,YFe,hSr,pSr,KFe,_Sr,uSr,ZFe,bSr,FSr,vSr,Pe,g3,eve,TSr,MSr,UH,ESr,CSr,wSr,h3,ove,ASr,ySr,JH,LSr,xSr,kSr,p3,rve,SSr,RSr,YH,BSr,PSr,$Sr,_3,tve,ISr,qSr,KH,NSr,jSr,DSr,u3,ave,GSr,OSr,ZH,VSr,XSr,zSr,b3,nve,QSr,WSr,eU,HSr,USr,JSr,F3,sve,YSr,KSr,oU,ZSr,eRr,oRr,v3,lve,rRr,tRr,rU,aRr,nRr,sRr,ive,lRr,iRr,Z8,APe,Af,T3,dve,e7,dRr,cve,cRr,yPe,Gr,o7,fRr,yf,mRr,tU,gRr,hRr,aU,pRr,_Rr,uRr,r7,bRr,fve,FRr,vRr,TRr,$t,t7,MRr,mve,ERr,CRr,Lf,wRr,gve,ARr,yRr,nU,LRr,xRr,kRr,hve,SRr,RRr,a7,BRr,qo,n7,PRr,pve,$Rr,IRr,Nn,qRr,_ve,NRr,jRr,uve,DRr,GRr,bve,ORr,VRr,XRr,Fve,M3,vve,zRr,QRr,sU,WRr,HRr,URr,Tve,JRr,YRr,s7,LPe,xf,E3,Mve,l7,KRr,Eve,ZRr,xPe,Or,i7,eBr,kf,oBr,lU,rBr,tBr,iU,aBr,nBr,sBr,d7,lBr,Cve,iBr,dBr,cBr,It,c7,fBr,wve,mBr,gBr,Sf,hBr,Ave,pBr,_Br,dU,uBr,bBr,FBr,yve,vBr,TBr,f7,MBr,No,m7,EBr,Lve,CBr,wBr,jn,ABr,xve,yBr,LBr,kve,xBr,kBr,Sve,SBr,RBr,BBr,g7,C3,Rve,PBr,$Br,cU,IBr,qBr,NBr,w3,Bve,jBr,DBr,fU,GBr,OBr,VBr,Pve,XBr,zBr,h7,kPe,Rf,A3,$ve,p7,QBr,Ive,WBr,SPe,Vr,_7,HBr,Bf,UBr,mU,JBr,YBr,gU,KBr,ZBr,ePr,u7,oPr,qve,rPr,tPr,aPr,qt,b7,nPr,Nve,sPr,lPr,Pf,iPr,jve,dPr,cPr,hU,fPr,mPr,gPr,Dve,hPr,pPr,F7,_Pr,jo,v7,uPr,Gve,bPr,FPr,Dn,vPr,Ove,TPr,MPr,Vve,EPr,CPr,Xve,wPr,APr,yPr,zve,y3,Qve,LPr,xPr,pU,kPr,SPr,RPr,Wve,BPr,PPr,T7,RPe;return ge=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),SC=new X({}),RC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new $Pr({props:{warning:!0,$$slots:{default:[wwt]},$$scope:{ctx:If}}}),BC=new X({}),PC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/configuration_auto.py#L555"}}),qC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/configuration_auto.py#L578"}}),NC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),jC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/configuration_auto.py#L700"}}),DC=new X({}),GC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/tokenization_auto.py#L359"}}),XC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/tokenization_auto.py#L373"}}),zC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),QC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/tokenization_auto.py#L569"}}),WC=new X({}),HC=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/feature_extraction_auto.py#L173"}}),YC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),Nh=new $Pr({props:{$$slots:{default:[Awt]},$$scope:{ctx:If}}}),KC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),ZC=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/feature_extraction_auto.py#L314"}}),ew=new X({}),ow=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/processing_auto.py#L71"}}),aw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/processing_auto.py#L85"}}),Jh=new $Pr({props:{$$slots:{default:[ywt]},$$scope:{ctx:If}}}),nw=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),sw=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/processing_auto.py#L238"}}),lw=new X({}),iw=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L712"}}),cw=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAConfig">FLAVAConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAModel">FLAVAModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),mw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new X({}),pw=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L719"}}),uw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Fw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Mw=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L734"}}),Cw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Aw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new X({}),xw=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L741"}}),Sw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Bw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new X({}),Iw=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L748"}}),Nw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Dw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new X({}),Vw=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L757"}}),zw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Ww=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new X({}),Jw=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L791"}}),Kw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),eA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new X({}),tA=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L798"}}),nA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),lA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new X({}),cA=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L784"}}),mA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),hA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new X({}),uA=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L766"}}),FA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),TA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new X({}),CA=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L773"}}),AA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),LA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new X({}),SA=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L807"}}),BA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),$A=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),NA=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L846"}}),DA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),OA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),VA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),zA=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L853"}}),WA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),HA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),UA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),JA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L876"}}),e0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),r0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a0=new X({}),n0=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L860"}}),l0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),d0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new X({}),m0=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L867"}}),h0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),_0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),v0=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L885"}}),M0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),C0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new X({}),y0=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L892"}}),x0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),S0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new X({}),P0=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L839"}}),I0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),N0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),G0=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L814"}}),V0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),z0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new X({}),H0=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L821"}}),J0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),K0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new X({}),oy=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L830"}}),ty=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),ay=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),ny=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new X({}),iy=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),cy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),my=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new X({}),py=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),uy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),by=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Fy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),My=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),Cy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Ay=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new X({}),xy=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Sy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),By=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),$y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new X({}),qy=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),jy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Gy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new X({}),Xy=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Qy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Hy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new X({}),Yy=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Zy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),eL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),oL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),rL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),sL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),lL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),iL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),dL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),fL=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),gL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),hL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),pL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),_L=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uL=new X({}),bL=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),vL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),TL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),ML=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),EL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new X({}),wL=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),yL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),LL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),xL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),kL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new X({}),RL=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),PL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),$L=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),IL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),qL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NL=new X({}),jL=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),GL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),OL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),VL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),XL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zL=new X({}),QL=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),HL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),UL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),JL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),YL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KL=new X({}),ZL=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),o8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),r8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),t8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),a8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n8=new X({}),s8=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),i8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),d8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),c8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),f8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m8=new X({}),g8=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),p8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),_8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),u8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),b8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F8=new X({}),v8=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),M8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),E8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),C8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),w8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A8=new X({}),y8=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),x8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),k8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),S8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),R8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B8=new X({}),P8=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),I8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),q8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),N8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),j8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D8=new X({}),G8=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),V8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),X8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),z8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Q8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W8=new X({}),H8=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),J8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Y8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),K8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Z8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e7=new X({}),o7=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),t7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),n7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l7=new X({}),i7=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),c7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),m7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),h7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p7=new X({}),_7=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),b7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),v7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),T7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){ee=a("meta"),co=l(),de=a("h1"),we=a("a"),io=a("span"),f(ge.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),yC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ke=l(),fo=a("p"),ji=o("Instantiating one of "),Gn=a("a"),LC=o("AutoConfig"),On=o(", "),Vn=a("a"),xC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),kC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),mo=l(),ue=a("p"),F9=o("will create a model that is an instance of "),Oi=a("a"),v9=o("BertModel"),T9=o("."),zo=l(),Ga=a("p"),M9=o("There is one class of "),Df=a("code"),E9=o("AutoModel"),XIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SRe=l(),Vi=a("h2"),Gf=a("a"),dY=a("span"),f(SC.$$.fragment),zIe=l(),cY=a("span"),QIe=o("Extending the Auto Classes"),RRe=l(),zn=a("p"),WIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fY=a("code"),HIe=o("NewModel"),UIe=o(", make sure you have a "),mY=a("code"),JIe=o("NewModelConfig"),YIe=o(` then you can add those to the auto
classes like this:`),BRe=l(),f(RC.$$.fragment),PRe=l(),C9=a("p"),KIe=o("You will then be able to use the auto classes like you would usually do!"),$Re=l(),f(Of.$$.fragment),IRe=l(),Xi=a("h2"),Vf=a("a"),gY=a("span"),f(BC.$$.fragment),ZIe=l(),hY=a("span"),eqe=o("AutoConfig"),qRe=l(),Qo=a("div"),f(PC.$$.fragment),oqe=l(),$C=a("p"),rqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),w9=a("a"),tqe=o("from_pretrained()"),aqe=o(" class method."),nqe=l(),IC=a("p"),sqe=o("This class cannot be instantiated directly using "),pY=a("code"),lqe=o("__init__()"),iqe=o(" (throws an error)."),dqe=l(),go=a("div"),f(qC.$$.fragment),cqe=l(),_Y=a("p"),fqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),mqe=l(),zi=a("p"),gqe=o("The configuration class to instantiate is selected based on the "),uY=a("code"),hqe=o("model_type"),pqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bY=a("code"),_qe=o("pretrained_model_name_or_path"),uqe=o(":"),bqe=l(),F=a("ul"),Xf=a("li"),FY=a("strong"),Fqe=o("albert"),vqe=o(" \u2014 "),A9=a("a"),Tqe=o("AlbertConfig"),Mqe=o(" (ALBERT model)"),Eqe=l(),zf=a("li"),vY=a("strong"),Cqe=o("bart"),wqe=o(" \u2014 "),y9=a("a"),Aqe=o("BartConfig"),yqe=o(" (BART model)"),Lqe=l(),Qf=a("li"),TY=a("strong"),xqe=o("beit"),kqe=o(" \u2014 "),L9=a("a"),Sqe=o("BeitConfig"),Rqe=o(" (BEiT model)"),Bqe=l(),Wf=a("li"),MY=a("strong"),Pqe=o("bert"),$qe=o(" \u2014 "),x9=a("a"),Iqe=o("BertConfig"),qqe=o(" (BERT model)"),Nqe=l(),Hf=a("li"),EY=a("strong"),jqe=o("bert-generation"),Dqe=o(" \u2014 "),k9=a("a"),Gqe=o("BertGenerationConfig"),Oqe=o(" (Bert Generation model)"),Vqe=l(),Uf=a("li"),CY=a("strong"),Xqe=o("big_bird"),zqe=o(" \u2014 "),S9=a("a"),Qqe=o("BigBirdConfig"),Wqe=o(" (BigBird model)"),Hqe=l(),Jf=a("li"),wY=a("strong"),Uqe=o("bigbird_pegasus"),Jqe=o(" \u2014 "),R9=a("a"),Yqe=o("BigBirdPegasusConfig"),Kqe=o(" (BigBirdPegasus model)"),Zqe=l(),Yf=a("li"),AY=a("strong"),eNe=o("blenderbot"),oNe=o(" \u2014 "),B9=a("a"),rNe=o("BlenderbotConfig"),tNe=o(" (Blenderbot model)"),aNe=l(),Kf=a("li"),yY=a("strong"),nNe=o("blenderbot-small"),sNe=o(" \u2014 "),P9=a("a"),lNe=o("BlenderbotSmallConfig"),iNe=o(" (BlenderbotSmall model)"),dNe=l(),Zf=a("li"),LY=a("strong"),cNe=o("camembert"),fNe=o(" \u2014 "),$9=a("a"),mNe=o("CamembertConfig"),gNe=o(" (CamemBERT model)"),hNe=l(),em=a("li"),xY=a("strong"),pNe=o("canine"),_Ne=o(" \u2014 "),I9=a("a"),uNe=o("CanineConfig"),bNe=o(" (Canine model)"),FNe=l(),om=a("li"),kY=a("strong"),vNe=o("clip"),TNe=o(" \u2014 "),q9=a("a"),MNe=o("CLIPConfig"),ENe=o(" (CLIP model)"),CNe=l(),rm=a("li"),SY=a("strong"),wNe=o("convbert"),ANe=o(" \u2014 "),N9=a("a"),yNe=o("ConvBertConfig"),LNe=o(" (ConvBERT model)"),xNe=l(),tm=a("li"),RY=a("strong"),kNe=o("convnext"),SNe=o(" \u2014 "),j9=a("a"),RNe=o("ConvNextConfig"),BNe=o(" (ConvNext model)"),PNe=l(),am=a("li"),BY=a("strong"),$Ne=o("ctrl"),INe=o(" \u2014 "),D9=a("a"),qNe=o("CTRLConfig"),NNe=o(" (CTRL model)"),jNe=l(),nm=a("li"),PY=a("strong"),DNe=o("data2vec-audio"),GNe=o(" \u2014 "),G9=a("a"),ONe=o("Data2VecAudioConfig"),VNe=o(" (Data2VecAudio model)"),XNe=l(),sm=a("li"),$Y=a("strong"),zNe=o("data2vec-text"),QNe=o(" \u2014 "),O9=a("a"),WNe=o("Data2VecTextConfig"),HNe=o(" (Data2VecText model)"),UNe=l(),lm=a("li"),IY=a("strong"),JNe=o("deberta"),YNe=o(" \u2014 "),V9=a("a"),KNe=o("DebertaConfig"),ZNe=o(" (DeBERTa model)"),eje=l(),im=a("li"),qY=a("strong"),oje=o("deberta-v2"),rje=o(" \u2014 "),X9=a("a"),tje=o("DebertaV2Config"),aje=o(" (DeBERTa-v2 model)"),nje=l(),dm=a("li"),NY=a("strong"),sje=o("decision_transformer"),lje=o(" \u2014 "),z9=a("a"),ije=o("DecisionTransformerConfig"),dje=o(" (Decision Transformer model)"),cje=l(),cm=a("li"),jY=a("strong"),fje=o("deit"),mje=o(" \u2014 "),Q9=a("a"),gje=o("DeiTConfig"),hje=o(" (DeiT model)"),pje=l(),fm=a("li"),DY=a("strong"),_je=o("detr"),uje=o(" \u2014 "),W9=a("a"),bje=o("DetrConfig"),Fje=o(" (DETR model)"),vje=l(),mm=a("li"),GY=a("strong"),Tje=o("distilbert"),Mje=o(" \u2014 "),H9=a("a"),Eje=o("DistilBertConfig"),Cje=o(" (DistilBERT model)"),wje=l(),gm=a("li"),OY=a("strong"),Aje=o("dpr"),yje=o(" \u2014 "),U9=a("a"),Lje=o("DPRConfig"),xje=o(" (DPR model)"),kje=l(),hm=a("li"),VY=a("strong"),Sje=o("dpt"),Rje=o(" \u2014 "),J9=a("a"),Bje=o("DPTConfig"),Pje=o(" (DPT model)"),$je=l(),pm=a("li"),XY=a("strong"),Ije=o("electra"),qje=o(" \u2014 "),Y9=a("a"),Nje=o("ElectraConfig"),jje=o(" (ELECTRA model)"),Dje=l(),_m=a("li"),zY=a("strong"),Gje=o("encoder-decoder"),Oje=o(" \u2014 "),K9=a("a"),Vje=o("EncoderDecoderConfig"),Xje=o(" (Encoder decoder model)"),zje=l(),um=a("li"),QY=a("strong"),Qje=o("flaubert"),Wje=o(" \u2014 "),Z9=a("a"),Hje=o("FlaubertConfig"),Uje=o(" (FlauBERT model)"),Jje=l(),bm=a("li"),WY=a("strong"),Yje=o("flava"),Kje=o(" \u2014 "),ex=a("a"),Zje=o("FLAVAConfig"),eDe=o(" (FLAVA model)"),oDe=l(),Fm=a("li"),HY=a("strong"),rDe=o("fnet"),tDe=o(" \u2014 "),ox=a("a"),aDe=o("FNetConfig"),nDe=o(" (FNet model)"),sDe=l(),vm=a("li"),UY=a("strong"),lDe=o("fsmt"),iDe=o(" \u2014 "),rx=a("a"),dDe=o("FSMTConfig"),cDe=o(" (FairSeq Machine-Translation model)"),fDe=l(),Tm=a("li"),JY=a("strong"),mDe=o("funnel"),gDe=o(" \u2014 "),tx=a("a"),hDe=o("FunnelConfig"),pDe=o(" (Funnel Transformer model)"),_De=l(),Mm=a("li"),YY=a("strong"),uDe=o("glpn"),bDe=o(" \u2014 "),ax=a("a"),FDe=o("GLPNConfig"),vDe=o(" (GLPN model)"),TDe=l(),Em=a("li"),KY=a("strong"),MDe=o("gpt2"),EDe=o(" \u2014 "),nx=a("a"),CDe=o("GPT2Config"),wDe=o(" (OpenAI GPT-2 model)"),ADe=l(),Cm=a("li"),ZY=a("strong"),yDe=o("gpt_neo"),LDe=o(" \u2014 "),sx=a("a"),xDe=o("GPTNeoConfig"),kDe=o(" (GPT Neo model)"),SDe=l(),wm=a("li"),eK=a("strong"),RDe=o("gptj"),BDe=o(" \u2014 "),lx=a("a"),PDe=o("GPTJConfig"),$De=o(" (GPT-J model)"),IDe=l(),Am=a("li"),oK=a("strong"),qDe=o("hubert"),NDe=o(" \u2014 "),ix=a("a"),jDe=o("HubertConfig"),DDe=o(" (Hubert model)"),GDe=l(),ym=a("li"),rK=a("strong"),ODe=o("ibert"),VDe=o(" \u2014 "),dx=a("a"),XDe=o("IBertConfig"),zDe=o(" (I-BERT model)"),QDe=l(),Lm=a("li"),tK=a("strong"),WDe=o("imagegpt"),HDe=o(" \u2014 "),cx=a("a"),UDe=o("ImageGPTConfig"),JDe=o(" (ImageGPT model)"),YDe=l(),xm=a("li"),aK=a("strong"),KDe=o("layoutlm"),ZDe=o(" \u2014 "),fx=a("a"),eGe=o("LayoutLMConfig"),oGe=o(" (LayoutLM model)"),rGe=l(),km=a("li"),nK=a("strong"),tGe=o("layoutlmv2"),aGe=o(" \u2014 "),mx=a("a"),nGe=o("LayoutLMv2Config"),sGe=o(" (LayoutLMv2 model)"),lGe=l(),Sm=a("li"),sK=a("strong"),iGe=o("led"),dGe=o(" \u2014 "),gx=a("a"),cGe=o("LEDConfig"),fGe=o(" (LED model)"),mGe=l(),Rm=a("li"),lK=a("strong"),gGe=o("longformer"),hGe=o(" \u2014 "),hx=a("a"),pGe=o("LongformerConfig"),_Ge=o(" (Longformer model)"),uGe=l(),Bm=a("li"),iK=a("strong"),bGe=o("luke"),FGe=o(" \u2014 "),px=a("a"),vGe=o("LukeConfig"),TGe=o(" (LUKE model)"),MGe=l(),Pm=a("li"),dK=a("strong"),EGe=o("lxmert"),CGe=o(" \u2014 "),_x=a("a"),wGe=o("LxmertConfig"),AGe=o(" (LXMERT model)"),yGe=l(),$m=a("li"),cK=a("strong"),LGe=o("m2m_100"),xGe=o(" \u2014 "),ux=a("a"),kGe=o("M2M100Config"),SGe=o(" (M2M100 model)"),RGe=l(),Im=a("li"),fK=a("strong"),BGe=o("marian"),PGe=o(" \u2014 "),bx=a("a"),$Ge=o("MarianConfig"),IGe=o(" (Marian model)"),qGe=l(),qm=a("li"),mK=a("strong"),NGe=o("maskformer"),jGe=o(" \u2014 "),Fx=a("a"),DGe=o("MaskFormerConfig"),GGe=o(" (MaskFormer model)"),OGe=l(),Nm=a("li"),gK=a("strong"),VGe=o("mbart"),XGe=o(" \u2014 "),vx=a("a"),zGe=o("MBartConfig"),QGe=o(" (mBART model)"),WGe=l(),jm=a("li"),hK=a("strong"),HGe=o("megatron-bert"),UGe=o(" \u2014 "),Tx=a("a"),JGe=o("MegatronBertConfig"),YGe=o(" (MegatronBert model)"),KGe=l(),Dm=a("li"),pK=a("strong"),ZGe=o("mobilebert"),eOe=o(" \u2014 "),Mx=a("a"),oOe=o("MobileBertConfig"),rOe=o(" (MobileBERT model)"),tOe=l(),Gm=a("li"),_K=a("strong"),aOe=o("mpnet"),nOe=o(" \u2014 "),Ex=a("a"),sOe=o("MPNetConfig"),lOe=o(" (MPNet model)"),iOe=l(),Om=a("li"),uK=a("strong"),dOe=o("mt5"),cOe=o(" \u2014 "),Cx=a("a"),fOe=o("MT5Config"),mOe=o(" (mT5 model)"),gOe=l(),Vm=a("li"),bK=a("strong"),hOe=o("nystromformer"),pOe=o(" \u2014 "),wx=a("a"),_Oe=o("NystromformerConfig"),uOe=o(" (Nystromformer model)"),bOe=l(),Xm=a("li"),FK=a("strong"),FOe=o("openai-gpt"),vOe=o(" \u2014 "),Ax=a("a"),TOe=o("OpenAIGPTConfig"),MOe=o(" (OpenAI GPT model)"),EOe=l(),zm=a("li"),vK=a("strong"),COe=o("pegasus"),wOe=o(" \u2014 "),yx=a("a"),AOe=o("PegasusConfig"),yOe=o(" (Pegasus model)"),LOe=l(),Qm=a("li"),TK=a("strong"),xOe=o("perceiver"),kOe=o(" \u2014 "),Lx=a("a"),SOe=o("PerceiverConfig"),ROe=o(" (Perceiver model)"),BOe=l(),Wm=a("li"),MK=a("strong"),POe=o("plbart"),$Oe=o(" \u2014 "),xx=a("a"),IOe=o("PLBartConfig"),qOe=o(" (PLBart model)"),NOe=l(),Hm=a("li"),EK=a("strong"),jOe=o("poolformer"),DOe=o(" \u2014 "),kx=a("a"),GOe=o("PoolFormerConfig"),OOe=o(" (PoolFormer model)"),VOe=l(),Um=a("li"),CK=a("strong"),XOe=o("prophetnet"),zOe=o(" \u2014 "),Sx=a("a"),QOe=o("ProphetNetConfig"),WOe=o(" (ProphetNet model)"),HOe=l(),Jm=a("li"),wK=a("strong"),UOe=o("qdqbert"),JOe=o(" \u2014 "),Rx=a("a"),YOe=o("QDQBertConfig"),KOe=o(" (QDQBert model)"),ZOe=l(),Ym=a("li"),AK=a("strong"),eVe=o("rag"),oVe=o(" \u2014 "),Bx=a("a"),rVe=o("RagConfig"),tVe=o(" (RAG model)"),aVe=l(),Km=a("li"),yK=a("strong"),nVe=o("realm"),sVe=o(" \u2014 "),Px=a("a"),lVe=o("RealmConfig"),iVe=o(" (Realm model)"),dVe=l(),Zm=a("li"),LK=a("strong"),cVe=o("reformer"),fVe=o(" \u2014 "),$x=a("a"),mVe=o("ReformerConfig"),gVe=o(" (Reformer model)"),hVe=l(),eg=a("li"),xK=a("strong"),pVe=o("regnet"),_Ve=o(" \u2014 "),Ix=a("a"),uVe=o("RegNetConfig"),bVe=o(" (RegNet model)"),FVe=l(),og=a("li"),kK=a("strong"),vVe=o("rembert"),TVe=o(" \u2014 "),qx=a("a"),MVe=o("RemBertConfig"),EVe=o(" (RemBERT model)"),CVe=l(),rg=a("li"),SK=a("strong"),wVe=o("resnet"),AVe=o(" \u2014 "),Nx=a("a"),yVe=o("ResNetConfig"),LVe=o(" (ResNet model)"),xVe=l(),tg=a("li"),RK=a("strong"),kVe=o("retribert"),SVe=o(" \u2014 "),jx=a("a"),RVe=o("RetriBertConfig"),BVe=o(" (RetriBERT model)"),PVe=l(),ag=a("li"),BK=a("strong"),$Ve=o("roberta"),IVe=o(" \u2014 "),Dx=a("a"),qVe=o("RobertaConfig"),NVe=o(" (RoBERTa model)"),jVe=l(),ng=a("li"),PK=a("strong"),DVe=o("roformer"),GVe=o(" \u2014 "),Gx=a("a"),OVe=o("RoFormerConfig"),VVe=o(" (RoFormer model)"),XVe=l(),sg=a("li"),$K=a("strong"),zVe=o("segformer"),QVe=o(" \u2014 "),Ox=a("a"),WVe=o("SegformerConfig"),HVe=o(" (SegFormer model)"),UVe=l(),lg=a("li"),IK=a("strong"),JVe=o("sew"),YVe=o(" \u2014 "),Vx=a("a"),KVe=o("SEWConfig"),ZVe=o(" (SEW model)"),eXe=l(),ig=a("li"),qK=a("strong"),oXe=o("sew-d"),rXe=o(" \u2014 "),Xx=a("a"),tXe=o("SEWDConfig"),aXe=o(" (SEW-D model)"),nXe=l(),dg=a("li"),NK=a("strong"),sXe=o("speech-encoder-decoder"),lXe=o(" \u2014 "),zx=a("a"),iXe=o("SpeechEncoderDecoderConfig"),dXe=o(" (Speech Encoder decoder model)"),cXe=l(),cg=a("li"),jK=a("strong"),fXe=o("speech_to_text"),mXe=o(" \u2014 "),Qx=a("a"),gXe=o("Speech2TextConfig"),hXe=o(" (Speech2Text model)"),pXe=l(),fg=a("li"),DK=a("strong"),_Xe=o("speech_to_text_2"),uXe=o(" \u2014 "),Wx=a("a"),bXe=o("Speech2Text2Config"),FXe=o(" (Speech2Text2 model)"),vXe=l(),mg=a("li"),GK=a("strong"),TXe=o("splinter"),MXe=o(" \u2014 "),Hx=a("a"),EXe=o("SplinterConfig"),CXe=o(" (Splinter model)"),wXe=l(),gg=a("li"),OK=a("strong"),AXe=o("squeezebert"),yXe=o(" \u2014 "),Ux=a("a"),LXe=o("SqueezeBertConfig"),xXe=o(" (SqueezeBERT model)"),kXe=l(),hg=a("li"),VK=a("strong"),SXe=o("swin"),RXe=o(" \u2014 "),Jx=a("a"),BXe=o("SwinConfig"),PXe=o(" (Swin model)"),$Xe=l(),pg=a("li"),XK=a("strong"),IXe=o("t5"),qXe=o(" \u2014 "),Yx=a("a"),NXe=o("T5Config"),jXe=o(" (T5 model)"),DXe=l(),_g=a("li"),zK=a("strong"),GXe=o("tapas"),OXe=o(" \u2014 "),Kx=a("a"),VXe=o("TapasConfig"),XXe=o(" (TAPAS model)"),zXe=l(),ug=a("li"),QK=a("strong"),QXe=o("tapex"),WXe=o(" \u2014 "),Zx=a("a"),HXe=o("BartConfig"),UXe=o(" (TAPEX model)"),JXe=l(),bg=a("li"),WK=a("strong"),YXe=o("transfo-xl"),KXe=o(" \u2014 "),ek=a("a"),ZXe=o("TransfoXLConfig"),eze=o(" (Transformer-XL model)"),oze=l(),Fg=a("li"),HK=a("strong"),rze=o("trocr"),tze=o(" \u2014 "),ok=a("a"),aze=o("TrOCRConfig"),nze=o(" (TrOCR model)"),sze=l(),vg=a("li"),UK=a("strong"),lze=o("unispeech"),ize=o(" \u2014 "),rk=a("a"),dze=o("UniSpeechConfig"),cze=o(" (UniSpeech model)"),fze=l(),Tg=a("li"),JK=a("strong"),mze=o("unispeech-sat"),gze=o(" \u2014 "),tk=a("a"),hze=o("UniSpeechSatConfig"),pze=o(" (UniSpeechSat model)"),_ze=l(),Mg=a("li"),YK=a("strong"),uze=o("van"),bze=o(" \u2014 "),ak=a("a"),Fze=o("VanConfig"),vze=o(" (VAN model)"),Tze=l(),Eg=a("li"),KK=a("strong"),Mze=o("vilt"),Eze=o(" \u2014 "),nk=a("a"),Cze=o("ViltConfig"),wze=o(" (ViLT model)"),Aze=l(),Cg=a("li"),ZK=a("strong"),yze=o("vision-encoder-decoder"),Lze=o(" \u2014 "),sk=a("a"),xze=o("VisionEncoderDecoderConfig"),kze=o(" (Vision Encoder decoder model)"),Sze=l(),wg=a("li"),eZ=a("strong"),Rze=o("vision-text-dual-encoder"),Bze=o(" \u2014 "),lk=a("a"),Pze=o("VisionTextDualEncoderConfig"),$ze=o(" (VisionTextDualEncoder model)"),Ize=l(),Ag=a("li"),oZ=a("strong"),qze=o("visual_bert"),Nze=o(" \u2014 "),ik=a("a"),jze=o("VisualBertConfig"),Dze=o(" (VisualBert model)"),Gze=l(),yg=a("li"),rZ=a("strong"),Oze=o("vit"),Vze=o(" \u2014 "),dk=a("a"),Xze=o("ViTConfig"),zze=o(" (ViT model)"),Qze=l(),Lg=a("li"),tZ=a("strong"),Wze=o("vit_mae"),Hze=o(" \u2014 "),ck=a("a"),Uze=o("ViTMAEConfig"),Jze=o(" (ViTMAE model)"),Yze=l(),xg=a("li"),aZ=a("strong"),Kze=o("wav2vec2"),Zze=o(" \u2014 "),fk=a("a"),eQe=o("Wav2Vec2Config"),oQe=o(" (Wav2Vec2 model)"),rQe=l(),kg=a("li"),nZ=a("strong"),tQe=o("wavlm"),aQe=o(" \u2014 "),mk=a("a"),nQe=o("WavLMConfig"),sQe=o(" (WavLM model)"),lQe=l(),Sg=a("li"),sZ=a("strong"),iQe=o("xglm"),dQe=o(" \u2014 "),gk=a("a"),cQe=o("XGLMConfig"),fQe=o(" (XGLM model)"),mQe=l(),Rg=a("li"),lZ=a("strong"),gQe=o("xlm"),hQe=o(" \u2014 "),hk=a("a"),pQe=o("XLMConfig"),_Qe=o(" (XLM model)"),uQe=l(),Bg=a("li"),iZ=a("strong"),bQe=o("xlm-prophetnet"),FQe=o(" \u2014 "),pk=a("a"),vQe=o("XLMProphetNetConfig"),TQe=o(" (XLMProphetNet model)"),MQe=l(),Pg=a("li"),dZ=a("strong"),EQe=o("xlm-roberta"),CQe=o(" \u2014 "),_k=a("a"),wQe=o("XLMRobertaConfig"),AQe=o(" (XLM-RoBERTa model)"),yQe=l(),$g=a("li"),cZ=a("strong"),LQe=o("xlm-roberta-xl"),xQe=o(" \u2014 "),uk=a("a"),kQe=o("XLMRobertaXLConfig"),SQe=o(" (XLM-RoBERTa-XL model)"),RQe=l(),Ig=a("li"),fZ=a("strong"),BQe=o("xlnet"),PQe=o(" \u2014 "),bk=a("a"),$Qe=o("XLNetConfig"),IQe=o(" (XLNet model)"),qQe=l(),qg=a("li"),mZ=a("strong"),NQe=o("yoso"),jQe=o(" \u2014 "),Fk=a("a"),DQe=o("YosoConfig"),GQe=o(" (YOSO model)"),OQe=l(),gZ=a("p"),VQe=o("Examples:"),XQe=l(),f(NC.$$.fragment),zQe=l(),Ng=a("div"),f(jC.$$.fragment),QQe=l(),hZ=a("p"),WQe=o("Register a new configuration for this class."),NRe=l(),Qi=a("h2"),jg=a("a"),pZ=a("span"),f(DC.$$.fragment),HQe=l(),_Z=a("span"),UQe=o("AutoTokenizer"),jRe=l(),Wo=a("div"),f(GC.$$.fragment),JQe=l(),OC=a("p"),YQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vk=a("a"),KQe=o("AutoTokenizer.from_pretrained()"),ZQe=o(" class method."),eWe=l(),VC=a("p"),oWe=o("This class cannot be instantiated directly using "),uZ=a("code"),rWe=o("__init__()"),tWe=o(" (throws an error)."),aWe=l(),ho=a("div"),f(XC.$$.fragment),nWe=l(),bZ=a("p"),sWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lWe=l(),Oa=a("p"),iWe=o("The tokenizer class to instantiate is selected based on the "),FZ=a("code"),dWe=o("model_type"),cWe=o(` property of the config object (either
passed as an argument or loaded from `),vZ=a("code"),fWe=o("pretrained_model_name_or_path"),mWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TZ=a("code"),gWe=o("pretrained_model_name_or_path"),hWe=o(":"),pWe=l(),E=a("ul"),Qn=a("li"),MZ=a("strong"),_We=o("albert"),uWe=o(" \u2014 "),Tk=a("a"),bWe=o("AlbertTokenizer"),FWe=o(" or "),Mk=a("a"),vWe=o("AlbertTokenizerFast"),TWe=o(" (ALBERT model)"),MWe=l(),Wn=a("li"),EZ=a("strong"),EWe=o("bart"),CWe=o(" \u2014 "),Ek=a("a"),wWe=o("BartTokenizer"),AWe=o(" or "),Ck=a("a"),yWe=o("BartTokenizerFast"),LWe=o(" (BART model)"),xWe=l(),Hn=a("li"),CZ=a("strong"),kWe=o("barthez"),SWe=o(" \u2014 "),wk=a("a"),RWe=o("BarthezTokenizer"),BWe=o(" or "),Ak=a("a"),PWe=o("BarthezTokenizerFast"),$We=o(" (BARThez model)"),IWe=l(),Dg=a("li"),wZ=a("strong"),qWe=o("bartpho"),NWe=o(" \u2014 "),yk=a("a"),jWe=o("BartphoTokenizer"),DWe=o(" (BARTpho model)"),GWe=l(),Un=a("li"),AZ=a("strong"),OWe=o("bert"),VWe=o(" \u2014 "),Lk=a("a"),XWe=o("BertTokenizer"),zWe=o(" or "),xk=a("a"),QWe=o("BertTokenizerFast"),WWe=o(" (BERT model)"),HWe=l(),Gg=a("li"),yZ=a("strong"),UWe=o("bert-generation"),JWe=o(" \u2014 "),kk=a("a"),YWe=o("BertGenerationTokenizer"),KWe=o(" (Bert Generation model)"),ZWe=l(),Og=a("li"),LZ=a("strong"),eHe=o("bert-japanese"),oHe=o(" \u2014 "),Sk=a("a"),rHe=o("BertJapaneseTokenizer"),tHe=o(" (BertJapanese model)"),aHe=l(),Vg=a("li"),xZ=a("strong"),nHe=o("bertweet"),sHe=o(" \u2014 "),Rk=a("a"),lHe=o("BertweetTokenizer"),iHe=o(" (Bertweet model)"),dHe=l(),Jn=a("li"),kZ=a("strong"),cHe=o("big_bird"),fHe=o(" \u2014 "),Bk=a("a"),mHe=o("BigBirdTokenizer"),gHe=o(" or "),Pk=a("a"),hHe=o("BigBirdTokenizerFast"),pHe=o(" (BigBird model)"),_He=l(),Yn=a("li"),SZ=a("strong"),uHe=o("bigbird_pegasus"),bHe=o(" \u2014 "),$k=a("a"),FHe=o("PegasusTokenizer"),vHe=o(" or "),Ik=a("a"),THe=o("PegasusTokenizerFast"),MHe=o(" (BigBirdPegasus model)"),EHe=l(),Kn=a("li"),RZ=a("strong"),CHe=o("blenderbot"),wHe=o(" \u2014 "),qk=a("a"),AHe=o("BlenderbotTokenizer"),yHe=o(" or "),Nk=a("a"),LHe=o("BlenderbotTokenizerFast"),xHe=o(" (Blenderbot model)"),kHe=l(),Xg=a("li"),BZ=a("strong"),SHe=o("blenderbot-small"),RHe=o(" \u2014 "),jk=a("a"),BHe=o("BlenderbotSmallTokenizer"),PHe=o(" (BlenderbotSmall model)"),$He=l(),zg=a("li"),PZ=a("strong"),IHe=o("byt5"),qHe=o(" \u2014 "),Dk=a("a"),NHe=o("ByT5Tokenizer"),jHe=o(" (ByT5 model)"),DHe=l(),Zn=a("li"),$Z=a("strong"),GHe=o("camembert"),OHe=o(" \u2014 "),Gk=a("a"),VHe=o("CamembertTokenizer"),XHe=o(" or "),Ok=a("a"),zHe=o("CamembertTokenizerFast"),QHe=o(" (CamemBERT model)"),WHe=l(),Qg=a("li"),IZ=a("strong"),HHe=o("canine"),UHe=o(" \u2014 "),Vk=a("a"),JHe=o("CanineTokenizer"),YHe=o(" (Canine model)"),KHe=l(),es=a("li"),qZ=a("strong"),ZHe=o("clip"),eUe=o(" \u2014 "),Xk=a("a"),oUe=o("CLIPTokenizer"),rUe=o(" or "),zk=a("a"),tUe=o("CLIPTokenizerFast"),aUe=o(" (CLIP model)"),nUe=l(),os=a("li"),NZ=a("strong"),sUe=o("convbert"),lUe=o(" \u2014 "),Qk=a("a"),iUe=o("ConvBertTokenizer"),dUe=o(" or "),Wk=a("a"),cUe=o("ConvBertTokenizerFast"),fUe=o(" (ConvBERT model)"),mUe=l(),rs=a("li"),jZ=a("strong"),gUe=o("cpm"),hUe=o(" \u2014 "),Hk=a("a"),pUe=o("CpmTokenizer"),_Ue=o(" or "),DZ=a("code"),uUe=o("CpmTokenizerFast"),bUe=o(" (CPM model)"),FUe=l(),Wg=a("li"),GZ=a("strong"),vUe=o("ctrl"),TUe=o(" \u2014 "),Uk=a("a"),MUe=o("CTRLTokenizer"),EUe=o(" (CTRL model)"),CUe=l(),ts=a("li"),OZ=a("strong"),wUe=o("deberta"),AUe=o(" \u2014 "),Jk=a("a"),yUe=o("DebertaTokenizer"),LUe=o(" or "),Yk=a("a"),xUe=o("DebertaTokenizerFast"),kUe=o(" (DeBERTa model)"),SUe=l(),Hg=a("li"),VZ=a("strong"),RUe=o("deberta-v2"),BUe=o(" \u2014 "),Kk=a("a"),PUe=o("DebertaV2Tokenizer"),$Ue=o(" (DeBERTa-v2 model)"),IUe=l(),as=a("li"),XZ=a("strong"),qUe=o("distilbert"),NUe=o(" \u2014 "),Zk=a("a"),jUe=o("DistilBertTokenizer"),DUe=o(" or "),eS=a("a"),GUe=o("DistilBertTokenizerFast"),OUe=o(" (DistilBERT model)"),VUe=l(),ns=a("li"),zZ=a("strong"),XUe=o("dpr"),zUe=o(" \u2014 "),oS=a("a"),QUe=o("DPRQuestionEncoderTokenizer"),WUe=o(" or "),rS=a("a"),HUe=o("DPRQuestionEncoderTokenizerFast"),UUe=o(" (DPR model)"),JUe=l(),ss=a("li"),QZ=a("strong"),YUe=o("electra"),KUe=o(" \u2014 "),tS=a("a"),ZUe=o("ElectraTokenizer"),eJe=o(" or "),aS=a("a"),oJe=o("ElectraTokenizerFast"),rJe=o(" (ELECTRA model)"),tJe=l(),Ug=a("li"),WZ=a("strong"),aJe=o("flaubert"),nJe=o(" \u2014 "),nS=a("a"),sJe=o("FlaubertTokenizer"),lJe=o(" (FlauBERT model)"),iJe=l(),ls=a("li"),HZ=a("strong"),dJe=o("fnet"),cJe=o(" \u2014 "),sS=a("a"),fJe=o("FNetTokenizer"),mJe=o(" or "),lS=a("a"),gJe=o("FNetTokenizerFast"),hJe=o(" (FNet model)"),pJe=l(),Jg=a("li"),UZ=a("strong"),_Je=o("fsmt"),uJe=o(" \u2014 "),iS=a("a"),bJe=o("FSMTTokenizer"),FJe=o(" (FairSeq Machine-Translation model)"),vJe=l(),is=a("li"),JZ=a("strong"),TJe=o("funnel"),MJe=o(" \u2014 "),dS=a("a"),EJe=o("FunnelTokenizer"),CJe=o(" or "),cS=a("a"),wJe=o("FunnelTokenizerFast"),AJe=o(" (Funnel Transformer model)"),yJe=l(),ds=a("li"),YZ=a("strong"),LJe=o("gpt2"),xJe=o(" \u2014 "),fS=a("a"),kJe=o("GPT2Tokenizer"),SJe=o(" or "),mS=a("a"),RJe=o("GPT2TokenizerFast"),BJe=o(" (OpenAI GPT-2 model)"),PJe=l(),cs=a("li"),KZ=a("strong"),$Je=o("gpt_neo"),IJe=o(" \u2014 "),gS=a("a"),qJe=o("GPT2Tokenizer"),NJe=o(" or "),hS=a("a"),jJe=o("GPT2TokenizerFast"),DJe=o(" (GPT Neo model)"),GJe=l(),fs=a("li"),ZZ=a("strong"),OJe=o("herbert"),VJe=o(" \u2014 "),pS=a("a"),XJe=o("HerbertTokenizer"),zJe=o(" or "),_S=a("a"),QJe=o("HerbertTokenizerFast"),WJe=o(" (HerBERT model)"),HJe=l(),Yg=a("li"),eee=a("strong"),UJe=o("hubert"),JJe=o(" \u2014 "),uS=a("a"),YJe=o("Wav2Vec2CTCTokenizer"),KJe=o(" (Hubert model)"),ZJe=l(),ms=a("li"),oee=a("strong"),eYe=o("ibert"),oYe=o(" \u2014 "),bS=a("a"),rYe=o("RobertaTokenizer"),tYe=o(" or "),FS=a("a"),aYe=o("RobertaTokenizerFast"),nYe=o(" (I-BERT model)"),sYe=l(),gs=a("li"),ree=a("strong"),lYe=o("layoutlm"),iYe=o(" \u2014 "),vS=a("a"),dYe=o("LayoutLMTokenizer"),cYe=o(" or "),TS=a("a"),fYe=o("LayoutLMTokenizerFast"),mYe=o(" (LayoutLM model)"),gYe=l(),hs=a("li"),tee=a("strong"),hYe=o("layoutlmv2"),pYe=o(" \u2014 "),MS=a("a"),_Ye=o("LayoutLMv2Tokenizer"),uYe=o(" or "),ES=a("a"),bYe=o("LayoutLMv2TokenizerFast"),FYe=o(" (LayoutLMv2 model)"),vYe=l(),ps=a("li"),aee=a("strong"),TYe=o("layoutxlm"),MYe=o(" \u2014 "),CS=a("a"),EYe=o("LayoutXLMTokenizer"),CYe=o(" or "),wS=a("a"),wYe=o("LayoutXLMTokenizerFast"),AYe=o(" (LayoutXLM model)"),yYe=l(),_s=a("li"),nee=a("strong"),LYe=o("led"),xYe=o(" \u2014 "),AS=a("a"),kYe=o("LEDTokenizer"),SYe=o(" or "),yS=a("a"),RYe=o("LEDTokenizerFast"),BYe=o(" (LED model)"),PYe=l(),us=a("li"),see=a("strong"),$Ye=o("longformer"),IYe=o(" \u2014 "),LS=a("a"),qYe=o("LongformerTokenizer"),NYe=o(" or "),xS=a("a"),jYe=o("LongformerTokenizerFast"),DYe=o(" (Longformer model)"),GYe=l(),Kg=a("li"),lee=a("strong"),OYe=o("luke"),VYe=o(" \u2014 "),kS=a("a"),XYe=o("LukeTokenizer"),zYe=o(" (LUKE model)"),QYe=l(),bs=a("li"),iee=a("strong"),WYe=o("lxmert"),HYe=o(" \u2014 "),SS=a("a"),UYe=o("LxmertTokenizer"),JYe=o(" or "),RS=a("a"),YYe=o("LxmertTokenizerFast"),KYe=o(" (LXMERT model)"),ZYe=l(),Zg=a("li"),dee=a("strong"),eKe=o("m2m_100"),oKe=o(" \u2014 "),BS=a("a"),rKe=o("M2M100Tokenizer"),tKe=o(" (M2M100 model)"),aKe=l(),eh=a("li"),cee=a("strong"),nKe=o("marian"),sKe=o(" \u2014 "),PS=a("a"),lKe=o("MarianTokenizer"),iKe=o(" (Marian model)"),dKe=l(),Fs=a("li"),fee=a("strong"),cKe=o("mbart"),fKe=o(" \u2014 "),$S=a("a"),mKe=o("MBartTokenizer"),gKe=o(" or "),IS=a("a"),hKe=o("MBartTokenizerFast"),pKe=o(" (mBART model)"),_Ke=l(),vs=a("li"),mee=a("strong"),uKe=o("mbart50"),bKe=o(" \u2014 "),qS=a("a"),FKe=o("MBart50Tokenizer"),vKe=o(" or "),NS=a("a"),TKe=o("MBart50TokenizerFast"),MKe=o(" (mBART-50 model)"),EKe=l(),oh=a("li"),gee=a("strong"),CKe=o("mluke"),wKe=o(" \u2014 "),jS=a("a"),AKe=o("MLukeTokenizer"),yKe=o(" (mLUKE model)"),LKe=l(),Ts=a("li"),hee=a("strong"),xKe=o("mobilebert"),kKe=o(" \u2014 "),DS=a("a"),SKe=o("MobileBertTokenizer"),RKe=o(" or "),GS=a("a"),BKe=o("MobileBertTokenizerFast"),PKe=o(" (MobileBERT model)"),$Ke=l(),Ms=a("li"),pee=a("strong"),IKe=o("mpnet"),qKe=o(" \u2014 "),OS=a("a"),NKe=o("MPNetTokenizer"),jKe=o(" or "),VS=a("a"),DKe=o("MPNetTokenizerFast"),GKe=o(" (MPNet model)"),OKe=l(),Es=a("li"),_ee=a("strong"),VKe=o("mt5"),XKe=o(" \u2014 "),XS=a("a"),zKe=o("MT5Tokenizer"),QKe=o(" or "),zS=a("a"),WKe=o("MT5TokenizerFast"),HKe=o(" (mT5 model)"),UKe=l(),Cs=a("li"),uee=a("strong"),JKe=o("openai-gpt"),YKe=o(" \u2014 "),QS=a("a"),KKe=o("OpenAIGPTTokenizer"),ZKe=o(" or "),WS=a("a"),eZe=o("OpenAIGPTTokenizerFast"),oZe=o(" (OpenAI GPT model)"),rZe=l(),ws=a("li"),bee=a("strong"),tZe=o("pegasus"),aZe=o(" \u2014 "),HS=a("a"),nZe=o("PegasusTokenizer"),sZe=o(" or "),US=a("a"),lZe=o("PegasusTokenizerFast"),iZe=o(" (Pegasus model)"),dZe=l(),rh=a("li"),Fee=a("strong"),cZe=o("perceiver"),fZe=o(" \u2014 "),JS=a("a"),mZe=o("PerceiverTokenizer"),gZe=o(" (Perceiver model)"),hZe=l(),th=a("li"),vee=a("strong"),pZe=o("phobert"),_Ze=o(" \u2014 "),YS=a("a"),uZe=o("PhobertTokenizer"),bZe=o(" (PhoBERT model)"),FZe=l(),ah=a("li"),Tee=a("strong"),vZe=o("plbart"),TZe=o(" \u2014 "),KS=a("a"),MZe=o("PLBartTokenizer"),EZe=o(" (PLBart model)"),CZe=l(),nh=a("li"),Mee=a("strong"),wZe=o("prophetnet"),AZe=o(" \u2014 "),ZS=a("a"),yZe=o("ProphetNetTokenizer"),LZe=o(" (ProphetNet model)"),xZe=l(),As=a("li"),Eee=a("strong"),kZe=o("qdqbert"),SZe=o(" \u2014 "),eR=a("a"),RZe=o("BertTokenizer"),BZe=o(" or "),oR=a("a"),PZe=o("BertTokenizerFast"),$Ze=o(" (QDQBert model)"),IZe=l(),sh=a("li"),Cee=a("strong"),qZe=o("rag"),NZe=o(" \u2014 "),rR=a("a"),jZe=o("RagTokenizer"),DZe=o(" (RAG model)"),GZe=l(),ys=a("li"),wee=a("strong"),OZe=o("realm"),VZe=o(" \u2014 "),tR=a("a"),XZe=o("RealmTokenizer"),zZe=o(" or "),aR=a("a"),QZe=o("RealmTokenizerFast"),WZe=o(" (Realm model)"),HZe=l(),Ls=a("li"),Aee=a("strong"),UZe=o("reformer"),JZe=o(" \u2014 "),nR=a("a"),YZe=o("ReformerTokenizer"),KZe=o(" or "),sR=a("a"),ZZe=o("ReformerTokenizerFast"),eeo=o(" (Reformer model)"),oeo=l(),xs=a("li"),yee=a("strong"),reo=o("rembert"),teo=o(" \u2014 "),lR=a("a"),aeo=o("RemBertTokenizer"),neo=o(" or "),iR=a("a"),seo=o("RemBertTokenizerFast"),leo=o(" (RemBERT model)"),ieo=l(),ks=a("li"),Lee=a("strong"),deo=o("retribert"),ceo=o(" \u2014 "),dR=a("a"),feo=o("RetriBertTokenizer"),meo=o(" or "),cR=a("a"),geo=o("RetriBertTokenizerFast"),heo=o(" (RetriBERT model)"),peo=l(),Ss=a("li"),xee=a("strong"),_eo=o("roberta"),ueo=o(" \u2014 "),fR=a("a"),beo=o("RobertaTokenizer"),Feo=o(" or "),mR=a("a"),veo=o("RobertaTokenizerFast"),Teo=o(" (RoBERTa model)"),Meo=l(),Rs=a("li"),kee=a("strong"),Eeo=o("roformer"),Ceo=o(" \u2014 "),gR=a("a"),weo=o("RoFormerTokenizer"),Aeo=o(" or "),hR=a("a"),yeo=o("RoFormerTokenizerFast"),Leo=o(" (RoFormer model)"),xeo=l(),lh=a("li"),See=a("strong"),keo=o("speech_to_text"),Seo=o(" \u2014 "),pR=a("a"),Reo=o("Speech2TextTokenizer"),Beo=o(" (Speech2Text model)"),Peo=l(),ih=a("li"),Ree=a("strong"),$eo=o("speech_to_text_2"),Ieo=o(" \u2014 "),_R=a("a"),qeo=o("Speech2Text2Tokenizer"),Neo=o(" (Speech2Text2 model)"),jeo=l(),Bs=a("li"),Bee=a("strong"),Deo=o("splinter"),Geo=o(" \u2014 "),uR=a("a"),Oeo=o("SplinterTokenizer"),Veo=o(" or "),bR=a("a"),Xeo=o("SplinterTokenizerFast"),zeo=o(" (Splinter model)"),Qeo=l(),Ps=a("li"),Pee=a("strong"),Weo=o("squeezebert"),Heo=o(" \u2014 "),FR=a("a"),Ueo=o("SqueezeBertTokenizer"),Jeo=o(" or "),vR=a("a"),Yeo=o("SqueezeBertTokenizerFast"),Keo=o(" (SqueezeBERT model)"),Zeo=l(),$s=a("li"),$ee=a("strong"),eoo=o("t5"),ooo=o(" \u2014 "),TR=a("a"),roo=o("T5Tokenizer"),too=o(" or "),MR=a("a"),aoo=o("T5TokenizerFast"),noo=o(" (T5 model)"),soo=l(),dh=a("li"),Iee=a("strong"),loo=o("tapas"),ioo=o(" \u2014 "),ER=a("a"),doo=o("TapasTokenizer"),coo=o(" (TAPAS model)"),foo=l(),ch=a("li"),qee=a("strong"),moo=o("tapex"),goo=o(" \u2014 "),CR=a("a"),hoo=o("TapexTokenizer"),poo=o(" (TAPEX model)"),_oo=l(),fh=a("li"),Nee=a("strong"),uoo=o("transfo-xl"),boo=o(" \u2014 "),wR=a("a"),Foo=o("TransfoXLTokenizer"),voo=o(" (Transformer-XL model)"),Too=l(),mh=a("li"),jee=a("strong"),Moo=o("wav2vec2"),Eoo=o(" \u2014 "),AR=a("a"),Coo=o("Wav2Vec2CTCTokenizer"),woo=o(" (Wav2Vec2 model)"),Aoo=l(),gh=a("li"),Dee=a("strong"),yoo=o("wav2vec2_phoneme"),Loo=o(" \u2014 "),yR=a("a"),xoo=o("Wav2Vec2PhonemeCTCTokenizer"),koo=o(" (Wav2Vec2Phoneme model)"),Soo=l(),Is=a("li"),Gee=a("strong"),Roo=o("xglm"),Boo=o(" \u2014 "),LR=a("a"),Poo=o("XGLMTokenizer"),$oo=o(" or "),xR=a("a"),Ioo=o("XGLMTokenizerFast"),qoo=o(" (XGLM model)"),Noo=l(),hh=a("li"),Oee=a("strong"),joo=o("xlm"),Doo=o(" \u2014 "),kR=a("a"),Goo=o("XLMTokenizer"),Ooo=o(" (XLM model)"),Voo=l(),ph=a("li"),Vee=a("strong"),Xoo=o("xlm-prophetnet"),zoo=o(" \u2014 "),SR=a("a"),Qoo=o("XLMProphetNetTokenizer"),Woo=o(" (XLMProphetNet model)"),Hoo=l(),qs=a("li"),Xee=a("strong"),Uoo=o("xlm-roberta"),Joo=o(" \u2014 "),RR=a("a"),Yoo=o("XLMRobertaTokenizer"),Koo=o(" or "),BR=a("a"),Zoo=o("XLMRobertaTokenizerFast"),ero=o(" (XLM-RoBERTa model)"),oro=l(),Ns=a("li"),zee=a("strong"),rro=o("xlnet"),tro=o(" \u2014 "),PR=a("a"),aro=o("XLNetTokenizer"),nro=o(" or "),$R=a("a"),sro=o("XLNetTokenizerFast"),lro=o(" (XLNet model)"),iro=l(),Qee=a("p"),dro=o("Examples:"),cro=l(),f(zC.$$.fragment),fro=l(),_h=a("div"),f(QC.$$.fragment),mro=l(),Wee=a("p"),gro=o("Register a new tokenizer in this mapping."),DRe=l(),Wi=a("h2"),uh=a("a"),Hee=a("span"),f(WC.$$.fragment),hro=l(),Uee=a("span"),pro=o("AutoFeatureExtractor"),GRe=l(),Ho=a("div"),f(HC.$$.fragment),_ro=l(),UC=a("p"),uro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IR=a("a"),bro=o("AutoFeatureExtractor.from_pretrained()"),Fro=o(" class method."),vro=l(),JC=a("p"),Tro=o("This class cannot be instantiated directly using "),Jee=a("code"),Mro=o("__init__()"),Ero=o(" (throws an error)."),Cro=l(),$e=a("div"),f(YC.$$.fragment),wro=l(),Yee=a("p"),Aro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yro=l(),Va=a("p"),Lro=o("The feature extractor class to instantiate is selected based on the "),Kee=a("code"),xro=o("model_type"),kro=o(` property of the config object
(either passed as an argument or loaded from `),Zee=a("code"),Sro=o("pretrained_model_name_or_path"),Rro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),eoe=a("code"),Bro=o("pretrained_model_name_or_path"),Pro=o(":"),$ro=l(),J=a("ul"),bh=a("li"),ooe=a("strong"),Iro=o("beit"),qro=o(" \u2014 "),qR=a("a"),Nro=o("BeitFeatureExtractor"),jro=o(" (BEiT model)"),Dro=l(),Fh=a("li"),roe=a("strong"),Gro=o("clip"),Oro=o(" \u2014 "),NR=a("a"),Vro=o("CLIPFeatureExtractor"),Xro=o(" (CLIP model)"),zro=l(),vh=a("li"),toe=a("strong"),Qro=o("convnext"),Wro=o(" \u2014 "),jR=a("a"),Hro=o("ConvNextFeatureExtractor"),Uro=o(" (ConvNext model)"),Jro=l(),Th=a("li"),aoe=a("strong"),Yro=o("deit"),Kro=o(" \u2014 "),DR=a("a"),Zro=o("DeiTFeatureExtractor"),eto=o(" (DeiT model)"),oto=l(),Mh=a("li"),noe=a("strong"),rto=o("detr"),tto=o(" \u2014 "),GR=a("a"),ato=o("DetrFeatureExtractor"),nto=o(" (DETR model)"),sto=l(),Eh=a("li"),soe=a("strong"),lto=o("flava"),ito=o(" \u2014 "),OR=a("a"),dto=o("FLAVAFeatureExtractor"),cto=o(" (FLAVA model)"),fto=l(),Ch=a("li"),loe=a("strong"),mto=o("hubert"),gto=o(" \u2014 "),VR=a("a"),hto=o("Wav2Vec2FeatureExtractor"),pto=o(" (Hubert model)"),_to=l(),wh=a("li"),ioe=a("strong"),uto=o("layoutlmv2"),bto=o(" \u2014 "),XR=a("a"),Fto=o("LayoutLMv2FeatureExtractor"),vto=o(" (LayoutLMv2 model)"),Tto=l(),Ah=a("li"),doe=a("strong"),Mto=o("maskformer"),Eto=o(" \u2014 "),zR=a("a"),Cto=o("MaskFormerFeatureExtractor"),wto=o(" (MaskFormer model)"),Ato=l(),yh=a("li"),coe=a("strong"),yto=o("perceiver"),Lto=o(" \u2014 "),QR=a("a"),xto=o("PerceiverFeatureExtractor"),kto=o(" (Perceiver model)"),Sto=l(),Lh=a("li"),foe=a("strong"),Rto=o("poolformer"),Bto=o(" \u2014 "),WR=a("a"),Pto=o("PoolFormerFeatureExtractor"),$to=o(" (PoolFormer model)"),Ito=l(),xh=a("li"),moe=a("strong"),qto=o("regnet"),Nto=o(" \u2014 "),HR=a("a"),jto=o("ConvNextFeatureExtractor"),Dto=o(" (RegNet model)"),Gto=l(),kh=a("li"),goe=a("strong"),Oto=o("resnet"),Vto=o(" \u2014 "),UR=a("a"),Xto=o("ConvNextFeatureExtractor"),zto=o(" (ResNet model)"),Qto=l(),Sh=a("li"),hoe=a("strong"),Wto=o("segformer"),Hto=o(" \u2014 "),JR=a("a"),Uto=o("SegformerFeatureExtractor"),Jto=o(" (SegFormer model)"),Yto=l(),Rh=a("li"),poe=a("strong"),Kto=o("speech_to_text"),Zto=o(" \u2014 "),YR=a("a"),eao=o("Speech2TextFeatureExtractor"),oao=o(" (Speech2Text model)"),rao=l(),Bh=a("li"),_oe=a("strong"),tao=o("swin"),aao=o(" \u2014 "),KR=a("a"),nao=o("ViTFeatureExtractor"),sao=o(" (Swin model)"),lao=l(),Ph=a("li"),uoe=a("strong"),iao=o("van"),dao=o(" \u2014 "),ZR=a("a"),cao=o("ConvNextFeatureExtractor"),fao=o(" (VAN model)"),mao=l(),$h=a("li"),boe=a("strong"),gao=o("vit"),hao=o(" \u2014 "),eB=a("a"),pao=o("ViTFeatureExtractor"),_ao=o(" (ViT model)"),uao=l(),Ih=a("li"),Foe=a("strong"),bao=o("vit_mae"),Fao=o(" \u2014 "),oB=a("a"),vao=o("ViTFeatureExtractor"),Tao=o(" (ViTMAE model)"),Mao=l(),qh=a("li"),voe=a("strong"),Eao=o("wav2vec2"),Cao=o(" \u2014 "),rB=a("a"),wao=o("Wav2Vec2FeatureExtractor"),Aao=o(" (Wav2Vec2 model)"),yao=l(),f(Nh.$$.fragment),Lao=l(),Toe=a("p"),xao=o("Examples:"),kao=l(),f(KC.$$.fragment),Sao=l(),jh=a("div"),f(ZC.$$.fragment),Rao=l(),Moe=a("p"),Bao=o("Register a new feature extractor for this class."),ORe=l(),Hi=a("h2"),Dh=a("a"),Eoe=a("span"),f(ew.$$.fragment),Pao=l(),Coe=a("span"),$ao=o("AutoProcessor"),VRe=l(),Uo=a("div"),f(ow.$$.fragment),Iao=l(),rw=a("p"),qao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tB=a("a"),Nao=o("AutoProcessor.from_pretrained()"),jao=o(" class method."),Dao=l(),tw=a("p"),Gao=o("This class cannot be instantiated directly using "),woe=a("code"),Oao=o("__init__()"),Vao=o(" (throws an error)."),Xao=l(),Ie=a("div"),f(aw.$$.fragment),zao=l(),Aoe=a("p"),Qao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Wao=l(),Ui=a("p"),Hao=o("The processor class to instantiate is selected based on the "),yoe=a("code"),Uao=o("model_type"),Jao=o(` property of the config object (either
passed as an argument or loaded from `),Loe=a("code"),Yao=o("pretrained_model_name_or_path"),Kao=o(" if possible):"),Zao=l(),Ee=a("ul"),Gh=a("li"),xoe=a("strong"),eno=o("clip"),ono=o(" \u2014 "),aB=a("a"),rno=o("CLIPProcessor"),tno=o(" (CLIP model)"),ano=l(),Oh=a("li"),koe=a("strong"),nno=o("flava"),sno=o(" \u2014 "),nB=a("a"),lno=o("FLAVAProcessor"),ino=o(" (FLAVA model)"),dno=l(),Vh=a("li"),Soe=a("strong"),cno=o("layoutlmv2"),fno=o(" \u2014 "),sB=a("a"),mno=o("LayoutLMv2Processor"),gno=o(" (LayoutLMv2 model)"),hno=l(),Xh=a("li"),Roe=a("strong"),pno=o("layoutxlm"),_no=o(" \u2014 "),lB=a("a"),uno=o("LayoutXLMProcessor"),bno=o(" (LayoutXLM model)"),Fno=l(),zh=a("li"),Boe=a("strong"),vno=o("speech_to_text"),Tno=o(" \u2014 "),iB=a("a"),Mno=o("Speech2TextProcessor"),Eno=o(" (Speech2Text model)"),Cno=l(),Qh=a("li"),Poe=a("strong"),wno=o("speech_to_text_2"),Ano=o(" \u2014 "),dB=a("a"),yno=o("Speech2Text2Processor"),Lno=o(" (Speech2Text2 model)"),xno=l(),Wh=a("li"),$oe=a("strong"),kno=o("trocr"),Sno=o(" \u2014 "),cB=a("a"),Rno=o("TrOCRProcessor"),Bno=o(" (TrOCR model)"),Pno=l(),Hh=a("li"),Ioe=a("strong"),$no=o("vision-text-dual-encoder"),Ino=o(" \u2014 "),fB=a("a"),qno=o("VisionTextDualEncoderProcessor"),Nno=o(" (VisionTextDualEncoder model)"),jno=l(),Uh=a("li"),qoe=a("strong"),Dno=o("wav2vec2"),Gno=o(" \u2014 "),mB=a("a"),Ono=o("Wav2Vec2Processor"),Vno=o(" (Wav2Vec2 model)"),Xno=l(),f(Jh.$$.fragment),zno=l(),Noe=a("p"),Qno=o("Examples:"),Wno=l(),f(nw.$$.fragment),Hno=l(),Yh=a("div"),f(sw.$$.fragment),Uno=l(),joe=a("p"),Jno=o("Register a new processor for this class."),XRe=l(),Ji=a("h2"),Kh=a("a"),Doe=a("span"),f(lw.$$.fragment),Yno=l(),Goe=a("span"),Kno=o("AutoModel"),zRe=l(),Jo=a("div"),f(iw.$$.fragment),Zno=l(),Yi=a("p"),eso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gB=a("a"),oso=o("from_pretrained()"),rso=o(" class method or the "),hB=a("a"),tso=o("from_config()"),aso=o(` class
method.`),nso=l(),dw=a("p"),sso=o("This class cannot be instantiated directly using "),Ooe=a("code"),lso=o("__init__()"),iso=o(" (throws an error)."),dso=l(),Xr=a("div"),f(cw.$$.fragment),cso=l(),Voe=a("p"),fso=o("Instantiates one of the base model classes of the library from a configuration."),mso=l(),Ki=a("p"),gso=o(`Note:
Loading a model from its configuration file does `),Xoe=a("strong"),hso=o("not"),pso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pB=a("a"),_so=o("from_pretrained()"),uso=o(" to load the model weights."),bso=l(),zoe=a("p"),Fso=o("Examples:"),vso=l(),f(fw.$$.fragment),Tso=l(),qe=a("div"),f(mw.$$.fragment),Mso=l(),Qoe=a("p"),Eso=o("Instantiate one of the base model classes of the library from a pretrained model."),Cso=l(),Xa=a("p"),wso=o("The model class to instantiate is selected based on the "),Woe=a("code"),Aso=o("model_type"),yso=o(` property of the config object (either
passed as an argument or loaded from `),Hoe=a("code"),Lso=o("pretrained_model_name_or_path"),xso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=a("code"),kso=o("pretrained_model_name_or_path"),Sso=o(":"),Rso=l(),T=a("ul"),Zh=a("li"),Joe=a("strong"),Bso=o("albert"),Pso=o(" \u2014 "),_B=a("a"),$so=o("AlbertModel"),Iso=o(" (ALBERT model)"),qso=l(),ep=a("li"),Yoe=a("strong"),Nso=o("bart"),jso=o(" \u2014 "),uB=a("a"),Dso=o("BartModel"),Gso=o(" (BART model)"),Oso=l(),op=a("li"),Koe=a("strong"),Vso=o("beit"),Xso=o(" \u2014 "),bB=a("a"),zso=o("BeitModel"),Qso=o(" (BEiT model)"),Wso=l(),rp=a("li"),Zoe=a("strong"),Hso=o("bert"),Uso=o(" \u2014 "),FB=a("a"),Jso=o("BertModel"),Yso=o(" (BERT model)"),Kso=l(),tp=a("li"),ere=a("strong"),Zso=o("bert-generation"),elo=o(" \u2014 "),vB=a("a"),olo=o("BertGenerationEncoder"),rlo=o(" (Bert Generation model)"),tlo=l(),ap=a("li"),ore=a("strong"),alo=o("big_bird"),nlo=o(" \u2014 "),TB=a("a"),slo=o("BigBirdModel"),llo=o(" (BigBird model)"),ilo=l(),np=a("li"),rre=a("strong"),dlo=o("bigbird_pegasus"),clo=o(" \u2014 "),MB=a("a"),flo=o("BigBirdPegasusModel"),mlo=o(" (BigBirdPegasus model)"),glo=l(),sp=a("li"),tre=a("strong"),hlo=o("blenderbot"),plo=o(" \u2014 "),EB=a("a"),_lo=o("BlenderbotModel"),ulo=o(" (Blenderbot model)"),blo=l(),lp=a("li"),are=a("strong"),Flo=o("blenderbot-small"),vlo=o(" \u2014 "),CB=a("a"),Tlo=o("BlenderbotSmallModel"),Mlo=o(" (BlenderbotSmall model)"),Elo=l(),ip=a("li"),nre=a("strong"),Clo=o("camembert"),wlo=o(" \u2014 "),wB=a("a"),Alo=o("CamembertModel"),ylo=o(" (CamemBERT model)"),Llo=l(),dp=a("li"),sre=a("strong"),xlo=o("canine"),klo=o(" \u2014 "),AB=a("a"),Slo=o("CanineModel"),Rlo=o(" (Canine model)"),Blo=l(),cp=a("li"),lre=a("strong"),Plo=o("clip"),$lo=o(" \u2014 "),yB=a("a"),Ilo=o("CLIPModel"),qlo=o(" (CLIP model)"),Nlo=l(),fp=a("li"),ire=a("strong"),jlo=o("convbert"),Dlo=o(" \u2014 "),LB=a("a"),Glo=o("ConvBertModel"),Olo=o(" (ConvBERT model)"),Vlo=l(),mp=a("li"),dre=a("strong"),Xlo=o("convnext"),zlo=o(" \u2014 "),xB=a("a"),Qlo=o("ConvNextModel"),Wlo=o(" (ConvNext model)"),Hlo=l(),gp=a("li"),cre=a("strong"),Ulo=o("ctrl"),Jlo=o(" \u2014 "),kB=a("a"),Ylo=o("CTRLModel"),Klo=o(" (CTRL model)"),Zlo=l(),hp=a("li"),fre=a("strong"),eio=o("data2vec-audio"),oio=o(" \u2014 "),SB=a("a"),rio=o("Data2VecAudioModel"),tio=o(" (Data2VecAudio model)"),aio=l(),pp=a("li"),mre=a("strong"),nio=o("data2vec-text"),sio=o(" \u2014 "),RB=a("a"),lio=o("Data2VecTextModel"),iio=o(" (Data2VecText model)"),dio=l(),_p=a("li"),gre=a("strong"),cio=o("deberta"),fio=o(" \u2014 "),BB=a("a"),mio=o("DebertaModel"),gio=o(" (DeBERTa model)"),hio=l(),up=a("li"),hre=a("strong"),pio=o("deberta-v2"),_io=o(" \u2014 "),PB=a("a"),uio=o("DebertaV2Model"),bio=o(" (DeBERTa-v2 model)"),Fio=l(),bp=a("li"),pre=a("strong"),vio=o("decision_transformer"),Tio=o(" \u2014 "),$B=a("a"),Mio=o("DecisionTransformerModel"),Eio=o(" (Decision Transformer model)"),Cio=l(),Fp=a("li"),_re=a("strong"),wio=o("deit"),Aio=o(" \u2014 "),IB=a("a"),yio=o("DeiTModel"),Lio=o(" (DeiT model)"),xio=l(),vp=a("li"),ure=a("strong"),kio=o("detr"),Sio=o(" \u2014 "),qB=a("a"),Rio=o("DetrModel"),Bio=o(" (DETR model)"),Pio=l(),Tp=a("li"),bre=a("strong"),$io=o("distilbert"),Iio=o(" \u2014 "),NB=a("a"),qio=o("DistilBertModel"),Nio=o(" (DistilBERT model)"),jio=l(),Mp=a("li"),Fre=a("strong"),Dio=o("dpr"),Gio=o(" \u2014 "),jB=a("a"),Oio=o("DPRQuestionEncoder"),Vio=o(" (DPR model)"),Xio=l(),Ep=a("li"),vre=a("strong"),zio=o("dpt"),Qio=o(" \u2014 "),DB=a("a"),Wio=o("DPTModel"),Hio=o(" (DPT model)"),Uio=l(),Cp=a("li"),Tre=a("strong"),Jio=o("electra"),Yio=o(" \u2014 "),GB=a("a"),Kio=o("ElectraModel"),Zio=o(" (ELECTRA model)"),edo=l(),wp=a("li"),Mre=a("strong"),odo=o("flaubert"),rdo=o(" \u2014 "),OB=a("a"),tdo=o("FlaubertModel"),ado=o(" (FlauBERT model)"),ndo=l(),Ap=a("li"),Ere=a("strong"),sdo=o("flava"),ldo=o(" \u2014 "),VB=a("a"),ido=o("FLAVAModel"),ddo=o(" (FLAVA model)"),cdo=l(),yp=a("li"),Cre=a("strong"),fdo=o("fnet"),mdo=o(" \u2014 "),XB=a("a"),gdo=o("FNetModel"),hdo=o(" (FNet model)"),pdo=l(),Lp=a("li"),wre=a("strong"),_do=o("fsmt"),udo=o(" \u2014 "),zB=a("a"),bdo=o("FSMTModel"),Fdo=o(" (FairSeq Machine-Translation model)"),vdo=l(),js=a("li"),Are=a("strong"),Tdo=o("funnel"),Mdo=o(" \u2014 "),QB=a("a"),Edo=o("FunnelModel"),Cdo=o(" or "),WB=a("a"),wdo=o("FunnelBaseModel"),Ado=o(" (Funnel Transformer model)"),ydo=l(),xp=a("li"),yre=a("strong"),Ldo=o("glpn"),xdo=o(" \u2014 "),HB=a("a"),kdo=o("GLPNModel"),Sdo=o(" (GLPN model)"),Rdo=l(),kp=a("li"),Lre=a("strong"),Bdo=o("gpt2"),Pdo=o(" \u2014 "),UB=a("a"),$do=o("GPT2Model"),Ido=o(" (OpenAI GPT-2 model)"),qdo=l(),Sp=a("li"),xre=a("strong"),Ndo=o("gpt_neo"),jdo=o(" \u2014 "),JB=a("a"),Ddo=o("GPTNeoModel"),Gdo=o(" (GPT Neo model)"),Odo=l(),Rp=a("li"),kre=a("strong"),Vdo=o("gptj"),Xdo=o(" \u2014 "),YB=a("a"),zdo=o("GPTJModel"),Qdo=o(" (GPT-J model)"),Wdo=l(),Bp=a("li"),Sre=a("strong"),Hdo=o("hubert"),Udo=o(" \u2014 "),KB=a("a"),Jdo=o("HubertModel"),Ydo=o(" (Hubert model)"),Kdo=l(),Pp=a("li"),Rre=a("strong"),Zdo=o("ibert"),eco=o(" \u2014 "),ZB=a("a"),oco=o("IBertModel"),rco=o(" (I-BERT model)"),tco=l(),$p=a("li"),Bre=a("strong"),aco=o("imagegpt"),nco=o(" \u2014 "),eP=a("a"),sco=o("ImageGPTModel"),lco=o(" (ImageGPT model)"),ico=l(),Ip=a("li"),Pre=a("strong"),dco=o("layoutlm"),cco=o(" \u2014 "),oP=a("a"),fco=o("LayoutLMModel"),mco=o(" (LayoutLM model)"),gco=l(),qp=a("li"),$re=a("strong"),hco=o("layoutlmv2"),pco=o(" \u2014 "),rP=a("a"),_co=o("LayoutLMv2Model"),uco=o(" (LayoutLMv2 model)"),bco=l(),Np=a("li"),Ire=a("strong"),Fco=o("led"),vco=o(" \u2014 "),tP=a("a"),Tco=o("LEDModel"),Mco=o(" (LED model)"),Eco=l(),jp=a("li"),qre=a("strong"),Cco=o("longformer"),wco=o(" \u2014 "),aP=a("a"),Aco=o("LongformerModel"),yco=o(" (Longformer model)"),Lco=l(),Dp=a("li"),Nre=a("strong"),xco=o("luke"),kco=o(" \u2014 "),nP=a("a"),Sco=o("LukeModel"),Rco=o(" (LUKE model)"),Bco=l(),Gp=a("li"),jre=a("strong"),Pco=o("lxmert"),$co=o(" \u2014 "),sP=a("a"),Ico=o("LxmertModel"),qco=o(" (LXMERT model)"),Nco=l(),Op=a("li"),Dre=a("strong"),jco=o("m2m_100"),Dco=o(" \u2014 "),lP=a("a"),Gco=o("M2M100Model"),Oco=o(" (M2M100 model)"),Vco=l(),Vp=a("li"),Gre=a("strong"),Xco=o("marian"),zco=o(" \u2014 "),iP=a("a"),Qco=o("MarianModel"),Wco=o(" (Marian model)"),Hco=l(),Xp=a("li"),Ore=a("strong"),Uco=o("maskformer"),Jco=o(" \u2014 "),dP=a("a"),Yco=o("MaskFormerModel"),Kco=o(" (MaskFormer model)"),Zco=l(),zp=a("li"),Vre=a("strong"),efo=o("mbart"),ofo=o(" \u2014 "),cP=a("a"),rfo=o("MBartModel"),tfo=o(" (mBART model)"),afo=l(),Qp=a("li"),Xre=a("strong"),nfo=o("megatron-bert"),sfo=o(" \u2014 "),fP=a("a"),lfo=o("MegatronBertModel"),ifo=o(" (MegatronBert model)"),dfo=l(),Wp=a("li"),zre=a("strong"),cfo=o("mobilebert"),ffo=o(" \u2014 "),mP=a("a"),mfo=o("MobileBertModel"),gfo=o(" (MobileBERT model)"),hfo=l(),Hp=a("li"),Qre=a("strong"),pfo=o("mpnet"),_fo=o(" \u2014 "),gP=a("a"),ufo=o("MPNetModel"),bfo=o(" (MPNet model)"),Ffo=l(),Up=a("li"),Wre=a("strong"),vfo=o("mt5"),Tfo=o(" \u2014 "),hP=a("a"),Mfo=o("MT5Model"),Efo=o(" (mT5 model)"),Cfo=l(),Jp=a("li"),Hre=a("strong"),wfo=o("nystromformer"),Afo=o(" \u2014 "),pP=a("a"),yfo=o("NystromformerModel"),Lfo=o(" (Nystromformer model)"),xfo=l(),Yp=a("li"),Ure=a("strong"),kfo=o("openai-gpt"),Sfo=o(" \u2014 "),_P=a("a"),Rfo=o("OpenAIGPTModel"),Bfo=o(" (OpenAI GPT model)"),Pfo=l(),Kp=a("li"),Jre=a("strong"),$fo=o("pegasus"),Ifo=o(" \u2014 "),uP=a("a"),qfo=o("PegasusModel"),Nfo=o(" (Pegasus model)"),jfo=l(),Zp=a("li"),Yre=a("strong"),Dfo=o("perceiver"),Gfo=o(" \u2014 "),bP=a("a"),Ofo=o("PerceiverModel"),Vfo=o(" (Perceiver model)"),Xfo=l(),e_=a("li"),Kre=a("strong"),zfo=o("plbart"),Qfo=o(" \u2014 "),FP=a("a"),Wfo=o("PLBartModel"),Hfo=o(" (PLBart model)"),Ufo=l(),o_=a("li"),Zre=a("strong"),Jfo=o("poolformer"),Yfo=o(" \u2014 "),vP=a("a"),Kfo=o("PoolFormerModel"),Zfo=o(" (PoolFormer model)"),emo=l(),r_=a("li"),ete=a("strong"),omo=o("prophetnet"),rmo=o(" \u2014 "),TP=a("a"),tmo=o("ProphetNetModel"),amo=o(" (ProphetNet model)"),nmo=l(),t_=a("li"),ote=a("strong"),smo=o("qdqbert"),lmo=o(" \u2014 "),MP=a("a"),imo=o("QDQBertModel"),dmo=o(" (QDQBert model)"),cmo=l(),a_=a("li"),rte=a("strong"),fmo=o("reformer"),mmo=o(" \u2014 "),EP=a("a"),gmo=o("ReformerModel"),hmo=o(" (Reformer model)"),pmo=l(),n_=a("li"),tte=a("strong"),_mo=o("regnet"),umo=o(" \u2014 "),CP=a("a"),bmo=o("RegNetModel"),Fmo=o(" (RegNet model)"),vmo=l(),s_=a("li"),ate=a("strong"),Tmo=o("rembert"),Mmo=o(" \u2014 "),wP=a("a"),Emo=o("RemBertModel"),Cmo=o(" (RemBERT model)"),wmo=l(),l_=a("li"),nte=a("strong"),Amo=o("resnet"),ymo=o(" \u2014 "),AP=a("a"),Lmo=o("ResNetModel"),xmo=o(" (ResNet model)"),kmo=l(),i_=a("li"),ste=a("strong"),Smo=o("retribert"),Rmo=o(" \u2014 "),yP=a("a"),Bmo=o("RetriBertModel"),Pmo=o(" (RetriBERT model)"),$mo=l(),d_=a("li"),lte=a("strong"),Imo=o("roberta"),qmo=o(" \u2014 "),LP=a("a"),Nmo=o("RobertaModel"),jmo=o(" (RoBERTa model)"),Dmo=l(),c_=a("li"),ite=a("strong"),Gmo=o("roformer"),Omo=o(" \u2014 "),xP=a("a"),Vmo=o("RoFormerModel"),Xmo=o(" (RoFormer model)"),zmo=l(),f_=a("li"),dte=a("strong"),Qmo=o("segformer"),Wmo=o(" \u2014 "),kP=a("a"),Hmo=o("SegformerModel"),Umo=o(" (SegFormer model)"),Jmo=l(),m_=a("li"),cte=a("strong"),Ymo=o("sew"),Kmo=o(" \u2014 "),SP=a("a"),Zmo=o("SEWModel"),ego=o(" (SEW model)"),ogo=l(),g_=a("li"),fte=a("strong"),rgo=o("sew-d"),tgo=o(" \u2014 "),RP=a("a"),ago=o("SEWDModel"),ngo=o(" (SEW-D model)"),sgo=l(),h_=a("li"),mte=a("strong"),lgo=o("speech_to_text"),igo=o(" \u2014 "),BP=a("a"),dgo=o("Speech2TextModel"),cgo=o(" (Speech2Text model)"),fgo=l(),p_=a("li"),gte=a("strong"),mgo=o("splinter"),ggo=o(" \u2014 "),PP=a("a"),hgo=o("SplinterModel"),pgo=o(" (Splinter model)"),_go=l(),__=a("li"),hte=a("strong"),ugo=o("squeezebert"),bgo=o(" \u2014 "),$P=a("a"),Fgo=o("SqueezeBertModel"),vgo=o(" (SqueezeBERT model)"),Tgo=l(),u_=a("li"),pte=a("strong"),Mgo=o("swin"),Ego=o(" \u2014 "),IP=a("a"),Cgo=o("SwinModel"),wgo=o(" (Swin model)"),Ago=l(),b_=a("li"),_te=a("strong"),ygo=o("t5"),Lgo=o(" \u2014 "),qP=a("a"),xgo=o("T5Model"),kgo=o(" (T5 model)"),Sgo=l(),F_=a("li"),ute=a("strong"),Rgo=o("tapas"),Bgo=o(" \u2014 "),NP=a("a"),Pgo=o("TapasModel"),$go=o(" (TAPAS model)"),Igo=l(),v_=a("li"),bte=a("strong"),qgo=o("transfo-xl"),Ngo=o(" \u2014 "),jP=a("a"),jgo=o("TransfoXLModel"),Dgo=o(" (Transformer-XL model)"),Ggo=l(),T_=a("li"),Fte=a("strong"),Ogo=o("unispeech"),Vgo=o(" \u2014 "),DP=a("a"),Xgo=o("UniSpeechModel"),zgo=o(" (UniSpeech model)"),Qgo=l(),M_=a("li"),vte=a("strong"),Wgo=o("unispeech-sat"),Hgo=o(" \u2014 "),GP=a("a"),Ugo=o("UniSpeechSatModel"),Jgo=o(" (UniSpeechSat model)"),Ygo=l(),E_=a("li"),Tte=a("strong"),Kgo=o("van"),Zgo=o(" \u2014 "),OP=a("a"),eho=o("VanModel"),oho=o(" (VAN model)"),rho=l(),C_=a("li"),Mte=a("strong"),tho=o("vilt"),aho=o(" \u2014 "),VP=a("a"),nho=o("ViltModel"),sho=o(" (ViLT model)"),lho=l(),w_=a("li"),Ete=a("strong"),iho=o("vision-text-dual-encoder"),dho=o(" \u2014 "),XP=a("a"),cho=o("VisionTextDualEncoderModel"),fho=o(" (VisionTextDualEncoder model)"),mho=l(),A_=a("li"),Cte=a("strong"),gho=o("visual_bert"),hho=o(" \u2014 "),zP=a("a"),pho=o("VisualBertModel"),_ho=o(" (VisualBert model)"),uho=l(),y_=a("li"),wte=a("strong"),bho=o("vit"),Fho=o(" \u2014 "),QP=a("a"),vho=o("ViTModel"),Tho=o(" (ViT model)"),Mho=l(),L_=a("li"),Ate=a("strong"),Eho=o("vit_mae"),Cho=o(" \u2014 "),WP=a("a"),who=o("ViTMAEModel"),Aho=o(" (ViTMAE model)"),yho=l(),x_=a("li"),yte=a("strong"),Lho=o("wav2vec2"),xho=o(" \u2014 "),HP=a("a"),kho=o("Wav2Vec2Model"),Sho=o(" (Wav2Vec2 model)"),Rho=l(),k_=a("li"),Lte=a("strong"),Bho=o("wavlm"),Pho=o(" \u2014 "),UP=a("a"),$ho=o("WavLMModel"),Iho=o(" (WavLM model)"),qho=l(),S_=a("li"),xte=a("strong"),Nho=o("xglm"),jho=o(" \u2014 "),JP=a("a"),Dho=o("XGLMModel"),Gho=o(" (XGLM model)"),Oho=l(),R_=a("li"),kte=a("strong"),Vho=o("xlm"),Xho=o(" \u2014 "),YP=a("a"),zho=o("XLMModel"),Qho=o(" (XLM model)"),Who=l(),B_=a("li"),Ste=a("strong"),Hho=o("xlm-prophetnet"),Uho=o(" \u2014 "),KP=a("a"),Jho=o("XLMProphetNetModel"),Yho=o(" (XLMProphetNet model)"),Kho=l(),P_=a("li"),Rte=a("strong"),Zho=o("xlm-roberta"),epo=o(" \u2014 "),ZP=a("a"),opo=o("XLMRobertaModel"),rpo=o(" (XLM-RoBERTa model)"),tpo=l(),$_=a("li"),Bte=a("strong"),apo=o("xlm-roberta-xl"),npo=o(" \u2014 "),e$=a("a"),spo=o("XLMRobertaXLModel"),lpo=o(" (XLM-RoBERTa-XL model)"),ipo=l(),I_=a("li"),Pte=a("strong"),dpo=o("xlnet"),cpo=o(" \u2014 "),o$=a("a"),fpo=o("XLNetModel"),mpo=o(" (XLNet model)"),gpo=l(),q_=a("li"),$te=a("strong"),hpo=o("yoso"),ppo=o(" \u2014 "),r$=a("a"),_po=o("YosoModel"),upo=o(" (YOSO model)"),bpo=l(),N_=a("p"),Fpo=o("The model is set in evaluation mode by default using "),Ite=a("code"),vpo=o("model.eval()"),Tpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qte=a("code"),Mpo=o("model.train()"),Epo=l(),Nte=a("p"),Cpo=o("Examples:"),wpo=l(),f(gw.$$.fragment),QRe=l(),Zi=a("h2"),j_=a("a"),jte=a("span"),f(hw.$$.fragment),Apo=l(),Dte=a("span"),ypo=o("AutoModelForPreTraining"),WRe=l(),Yo=a("div"),f(pw.$$.fragment),Lpo=l(),ed=a("p"),xpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),t$=a("a"),kpo=o("from_pretrained()"),Spo=o(" class method or the "),a$=a("a"),Rpo=o("from_config()"),Bpo=o(` class
method.`),Ppo=l(),_w=a("p"),$po=o("This class cannot be instantiated directly using "),Gte=a("code"),Ipo=o("__init__()"),qpo=o(" (throws an error)."),Npo=l(),zr=a("div"),f(uw.$$.fragment),jpo=l(),Ote=a("p"),Dpo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gpo=l(),od=a("p"),Opo=o(`Note:
Loading a model from its configuration file does `),Vte=a("strong"),Vpo=o("not"),Xpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),n$=a("a"),zpo=o("from_pretrained()"),Qpo=o(" to load the model weights."),Wpo=l(),Xte=a("p"),Hpo=o("Examples:"),Upo=l(),f(bw.$$.fragment),Jpo=l(),Ne=a("div"),f(Fw.$$.fragment),Ypo=l(),zte=a("p"),Kpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zpo=l(),za=a("p"),e_o=o("The model class to instantiate is selected based on the "),Qte=a("code"),o_o=o("model_type"),r_o=o(` property of the config object (either
passed as an argument or loaded from `),Wte=a("code"),t_o=o("pretrained_model_name_or_path"),a_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hte=a("code"),n_o=o("pretrained_model_name_or_path"),s_o=o(":"),l_o=l(),S=a("ul"),D_=a("li"),Ute=a("strong"),i_o=o("albert"),d_o=o(" \u2014 "),s$=a("a"),c_o=o("AlbertForPreTraining"),f_o=o(" (ALBERT model)"),m_o=l(),G_=a("li"),Jte=a("strong"),g_o=o("bart"),h_o=o(" \u2014 "),l$=a("a"),p_o=o("BartForConditionalGeneration"),__o=o(" (BART model)"),u_o=l(),O_=a("li"),Yte=a("strong"),b_o=o("bert"),F_o=o(" \u2014 "),i$=a("a"),v_o=o("BertForPreTraining"),T_o=o(" (BERT model)"),M_o=l(),V_=a("li"),Kte=a("strong"),E_o=o("big_bird"),C_o=o(" \u2014 "),d$=a("a"),w_o=o("BigBirdForPreTraining"),A_o=o(" (BigBird model)"),y_o=l(),X_=a("li"),Zte=a("strong"),L_o=o("camembert"),x_o=o(" \u2014 "),c$=a("a"),k_o=o("CamembertForMaskedLM"),S_o=o(" (CamemBERT model)"),R_o=l(),z_=a("li"),eae=a("strong"),B_o=o("ctrl"),P_o=o(" \u2014 "),f$=a("a"),$_o=o("CTRLLMHeadModel"),I_o=o(" (CTRL model)"),q_o=l(),Q_=a("li"),oae=a("strong"),N_o=o("data2vec-text"),j_o=o(" \u2014 "),m$=a("a"),D_o=o("Data2VecTextForMaskedLM"),G_o=o(" (Data2VecText model)"),O_o=l(),W_=a("li"),rae=a("strong"),V_o=o("deberta"),X_o=o(" \u2014 "),g$=a("a"),z_o=o("DebertaForMaskedLM"),Q_o=o(" (DeBERTa model)"),W_o=l(),H_=a("li"),tae=a("strong"),H_o=o("deberta-v2"),U_o=o(" \u2014 "),h$=a("a"),J_o=o("DebertaV2ForMaskedLM"),Y_o=o(" (DeBERTa-v2 model)"),K_o=l(),U_=a("li"),aae=a("strong"),Z_o=o("distilbert"),euo=o(" \u2014 "),p$=a("a"),ouo=o("DistilBertForMaskedLM"),ruo=o(" (DistilBERT model)"),tuo=l(),J_=a("li"),nae=a("strong"),auo=o("electra"),nuo=o(" \u2014 "),_$=a("a"),suo=o("ElectraForPreTraining"),luo=o(" (ELECTRA model)"),iuo=l(),Y_=a("li"),sae=a("strong"),duo=o("flaubert"),cuo=o(" \u2014 "),u$=a("a"),fuo=o("FlaubertWithLMHeadModel"),muo=o(" (FlauBERT model)"),guo=l(),K_=a("li"),lae=a("strong"),huo=o("fnet"),puo=o(" \u2014 "),b$=a("a"),_uo=o("FNetForPreTraining"),uuo=o(" (FNet model)"),buo=l(),Z_=a("li"),iae=a("strong"),Fuo=o("fsmt"),vuo=o(" \u2014 "),F$=a("a"),Tuo=o("FSMTForConditionalGeneration"),Muo=o(" (FairSeq Machine-Translation model)"),Euo=l(),eu=a("li"),dae=a("strong"),Cuo=o("funnel"),wuo=o(" \u2014 "),v$=a("a"),Auo=o("FunnelForPreTraining"),yuo=o(" (Funnel Transformer model)"),Luo=l(),ou=a("li"),cae=a("strong"),xuo=o("gpt2"),kuo=o(" \u2014 "),T$=a("a"),Suo=o("GPT2LMHeadModel"),Ruo=o(" (OpenAI GPT-2 model)"),Buo=l(),ru=a("li"),fae=a("strong"),Puo=o("ibert"),$uo=o(" \u2014 "),M$=a("a"),Iuo=o("IBertForMaskedLM"),quo=o(" (I-BERT model)"),Nuo=l(),tu=a("li"),mae=a("strong"),juo=o("layoutlm"),Duo=o(" \u2014 "),E$=a("a"),Guo=o("LayoutLMForMaskedLM"),Ouo=o(" (LayoutLM model)"),Vuo=l(),au=a("li"),gae=a("strong"),Xuo=o("longformer"),zuo=o(" \u2014 "),C$=a("a"),Quo=o("LongformerForMaskedLM"),Wuo=o(" (Longformer model)"),Huo=l(),nu=a("li"),hae=a("strong"),Uuo=o("lxmert"),Juo=o(" \u2014 "),w$=a("a"),Yuo=o("LxmertForPreTraining"),Kuo=o(" (LXMERT model)"),Zuo=l(),su=a("li"),pae=a("strong"),e6o=o("megatron-bert"),o6o=o(" \u2014 "),A$=a("a"),r6o=o("MegatronBertForPreTraining"),t6o=o(" (MegatronBert model)"),a6o=l(),lu=a("li"),_ae=a("strong"),n6o=o("mobilebert"),s6o=o(" \u2014 "),y$=a("a"),l6o=o("MobileBertForPreTraining"),i6o=o(" (MobileBERT model)"),d6o=l(),iu=a("li"),uae=a("strong"),c6o=o("mpnet"),f6o=o(" \u2014 "),L$=a("a"),m6o=o("MPNetForMaskedLM"),g6o=o(" (MPNet model)"),h6o=l(),du=a("li"),bae=a("strong"),p6o=o("openai-gpt"),_6o=o(" \u2014 "),x$=a("a"),u6o=o("OpenAIGPTLMHeadModel"),b6o=o(" (OpenAI GPT model)"),F6o=l(),cu=a("li"),Fae=a("strong"),v6o=o("retribert"),T6o=o(" \u2014 "),k$=a("a"),M6o=o("RetriBertModel"),E6o=o(" (RetriBERT model)"),C6o=l(),fu=a("li"),vae=a("strong"),w6o=o("roberta"),A6o=o(" \u2014 "),S$=a("a"),y6o=o("RobertaForMaskedLM"),L6o=o(" (RoBERTa model)"),x6o=l(),mu=a("li"),Tae=a("strong"),k6o=o("squeezebert"),S6o=o(" \u2014 "),R$=a("a"),R6o=o("SqueezeBertForMaskedLM"),B6o=o(" (SqueezeBERT model)"),P6o=l(),gu=a("li"),Mae=a("strong"),$6o=o("t5"),I6o=o(" \u2014 "),B$=a("a"),q6o=o("T5ForConditionalGeneration"),N6o=o(" (T5 model)"),j6o=l(),hu=a("li"),Eae=a("strong"),D6o=o("tapas"),G6o=o(" \u2014 "),P$=a("a"),O6o=o("TapasForMaskedLM"),V6o=o(" (TAPAS model)"),X6o=l(),pu=a("li"),Cae=a("strong"),z6o=o("transfo-xl"),Q6o=o(" \u2014 "),$$=a("a"),W6o=o("TransfoXLLMHeadModel"),H6o=o(" (Transformer-XL model)"),U6o=l(),_u=a("li"),wae=a("strong"),J6o=o("unispeech"),Y6o=o(" \u2014 "),I$=a("a"),K6o=o("UniSpeechForPreTraining"),Z6o=o(" (UniSpeech model)"),e1o=l(),uu=a("li"),Aae=a("strong"),o1o=o("unispeech-sat"),r1o=o(" \u2014 "),q$=a("a"),t1o=o("UniSpeechSatForPreTraining"),a1o=o(" (UniSpeechSat model)"),n1o=l(),bu=a("li"),yae=a("strong"),s1o=o("visual_bert"),l1o=o(" \u2014 "),N$=a("a"),i1o=o("VisualBertForPreTraining"),d1o=o(" (VisualBert model)"),c1o=l(),Fu=a("li"),Lae=a("strong"),f1o=o("vit_mae"),m1o=o(" \u2014 "),j$=a("a"),g1o=o("ViTMAEForPreTraining"),h1o=o(" (ViTMAE model)"),p1o=l(),vu=a("li"),xae=a("strong"),_1o=o("wav2vec2"),u1o=o(" \u2014 "),D$=a("a"),b1o=o("Wav2Vec2ForPreTraining"),F1o=o(" (Wav2Vec2 model)"),v1o=l(),Tu=a("li"),kae=a("strong"),T1o=o("xlm"),M1o=o(" \u2014 "),G$=a("a"),E1o=o("XLMWithLMHeadModel"),C1o=o(" (XLM model)"),w1o=l(),Mu=a("li"),Sae=a("strong"),A1o=o("xlm-roberta"),y1o=o(" \u2014 "),O$=a("a"),L1o=o("XLMRobertaForMaskedLM"),x1o=o(" (XLM-RoBERTa model)"),k1o=l(),Eu=a("li"),Rae=a("strong"),S1o=o("xlm-roberta-xl"),R1o=o(" \u2014 "),V$=a("a"),B1o=o("XLMRobertaXLForMaskedLM"),P1o=o(" (XLM-RoBERTa-XL model)"),$1o=l(),Cu=a("li"),Bae=a("strong"),I1o=o("xlnet"),q1o=o(" \u2014 "),X$=a("a"),N1o=o("XLNetLMHeadModel"),j1o=o(" (XLNet model)"),D1o=l(),wu=a("p"),G1o=o("The model is set in evaluation mode by default using "),Pae=a("code"),O1o=o("model.eval()"),V1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ae=a("code"),X1o=o("model.train()"),z1o=l(),Iae=a("p"),Q1o=o("Examples:"),W1o=l(),f(vw.$$.fragment),HRe=l(),rd=a("h2"),Au=a("a"),qae=a("span"),f(Tw.$$.fragment),H1o=l(),Nae=a("span"),U1o=o("AutoModelForCausalLM"),URe=l(),Ko=a("div"),f(Mw.$$.fragment),J1o=l(),td=a("p"),Y1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),z$=a("a"),K1o=o("from_pretrained()"),Z1o=o(" class method or the "),Q$=a("a"),e4o=o("from_config()"),o4o=o(` class
method.`),r4o=l(),Ew=a("p"),t4o=o("This class cannot be instantiated directly using "),jae=a("code"),a4o=o("__init__()"),n4o=o(" (throws an error)."),s4o=l(),Qr=a("div"),f(Cw.$$.fragment),l4o=l(),Dae=a("p"),i4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),d4o=l(),ad=a("p"),c4o=o(`Note:
Loading a model from its configuration file does `),Gae=a("strong"),f4o=o("not"),m4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W$=a("a"),g4o=o("from_pretrained()"),h4o=o(" to load the model weights."),p4o=l(),Oae=a("p"),_4o=o("Examples:"),u4o=l(),f(ww.$$.fragment),b4o=l(),je=a("div"),f(Aw.$$.fragment),F4o=l(),Vae=a("p"),v4o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),T4o=l(),Qa=a("p"),M4o=o("The model class to instantiate is selected based on the "),Xae=a("code"),E4o=o("model_type"),C4o=o(` property of the config object (either
passed as an argument or loaded from `),zae=a("code"),w4o=o("pretrained_model_name_or_path"),A4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qae=a("code"),y4o=o("pretrained_model_name_or_path"),L4o=o(":"),x4o=l(),$=a("ul"),yu=a("li"),Wae=a("strong"),k4o=o("bart"),S4o=o(" \u2014 "),H$=a("a"),R4o=o("BartForCausalLM"),B4o=o(" (BART model)"),P4o=l(),Lu=a("li"),Hae=a("strong"),$4o=o("bert"),I4o=o(" \u2014 "),U$=a("a"),q4o=o("BertLMHeadModel"),N4o=o(" (BERT model)"),j4o=l(),xu=a("li"),Uae=a("strong"),D4o=o("bert-generation"),G4o=o(" \u2014 "),J$=a("a"),O4o=o("BertGenerationDecoder"),V4o=o(" (Bert Generation model)"),X4o=l(),ku=a("li"),Jae=a("strong"),z4o=o("big_bird"),Q4o=o(" \u2014 "),Y$=a("a"),W4o=o("BigBirdForCausalLM"),H4o=o(" (BigBird model)"),U4o=l(),Su=a("li"),Yae=a("strong"),J4o=o("bigbird_pegasus"),Y4o=o(" \u2014 "),K$=a("a"),K4o=o("BigBirdPegasusForCausalLM"),Z4o=o(" (BigBirdPegasus model)"),ebo=l(),Ru=a("li"),Kae=a("strong"),obo=o("blenderbot"),rbo=o(" \u2014 "),Z$=a("a"),tbo=o("BlenderbotForCausalLM"),abo=o(" (Blenderbot model)"),nbo=l(),Bu=a("li"),Zae=a("strong"),sbo=o("blenderbot-small"),lbo=o(" \u2014 "),eI=a("a"),ibo=o("BlenderbotSmallForCausalLM"),dbo=o(" (BlenderbotSmall model)"),cbo=l(),Pu=a("li"),ene=a("strong"),fbo=o("camembert"),mbo=o(" \u2014 "),oI=a("a"),gbo=o("CamembertForCausalLM"),hbo=o(" (CamemBERT model)"),pbo=l(),$u=a("li"),one=a("strong"),_bo=o("ctrl"),ubo=o(" \u2014 "),rI=a("a"),bbo=o("CTRLLMHeadModel"),Fbo=o(" (CTRL model)"),vbo=l(),Iu=a("li"),rne=a("strong"),Tbo=o("data2vec-text"),Mbo=o(" \u2014 "),tI=a("a"),Ebo=o("Data2VecTextForCausalLM"),Cbo=o(" (Data2VecText model)"),wbo=l(),qu=a("li"),tne=a("strong"),Abo=o("electra"),ybo=o(" \u2014 "),aI=a("a"),Lbo=o("ElectraForCausalLM"),xbo=o(" (ELECTRA model)"),kbo=l(),Nu=a("li"),ane=a("strong"),Sbo=o("gpt2"),Rbo=o(" \u2014 "),nI=a("a"),Bbo=o("GPT2LMHeadModel"),Pbo=o(" (OpenAI GPT-2 model)"),$bo=l(),ju=a("li"),nne=a("strong"),Ibo=o("gpt_neo"),qbo=o(" \u2014 "),sI=a("a"),Nbo=o("GPTNeoForCausalLM"),jbo=o(" (GPT Neo model)"),Dbo=l(),Du=a("li"),sne=a("strong"),Gbo=o("gptj"),Obo=o(" \u2014 "),lI=a("a"),Vbo=o("GPTJForCausalLM"),Xbo=o(" (GPT-J model)"),zbo=l(),Gu=a("li"),lne=a("strong"),Qbo=o("marian"),Wbo=o(" \u2014 "),iI=a("a"),Hbo=o("MarianForCausalLM"),Ubo=o(" (Marian model)"),Jbo=l(),Ou=a("li"),ine=a("strong"),Ybo=o("mbart"),Kbo=o(" \u2014 "),dI=a("a"),Zbo=o("MBartForCausalLM"),e5o=o(" (mBART model)"),o5o=l(),Vu=a("li"),dne=a("strong"),r5o=o("megatron-bert"),t5o=o(" \u2014 "),cI=a("a"),a5o=o("MegatronBertForCausalLM"),n5o=o(" (MegatronBert model)"),s5o=l(),Xu=a("li"),cne=a("strong"),l5o=o("openai-gpt"),i5o=o(" \u2014 "),fI=a("a"),d5o=o("OpenAIGPTLMHeadModel"),c5o=o(" (OpenAI GPT model)"),f5o=l(),zu=a("li"),fne=a("strong"),m5o=o("pegasus"),g5o=o(" \u2014 "),mI=a("a"),h5o=o("PegasusForCausalLM"),p5o=o(" (Pegasus model)"),_5o=l(),Qu=a("li"),mne=a("strong"),u5o=o("plbart"),b5o=o(" \u2014 "),gI=a("a"),F5o=o("PLBartForCausalLM"),v5o=o(" (PLBart model)"),T5o=l(),Wu=a("li"),gne=a("strong"),M5o=o("prophetnet"),E5o=o(" \u2014 "),hI=a("a"),C5o=o("ProphetNetForCausalLM"),w5o=o(" (ProphetNet model)"),A5o=l(),Hu=a("li"),hne=a("strong"),y5o=o("qdqbert"),L5o=o(" \u2014 "),pI=a("a"),x5o=o("QDQBertLMHeadModel"),k5o=o(" (QDQBert model)"),S5o=l(),Uu=a("li"),pne=a("strong"),R5o=o("reformer"),B5o=o(" \u2014 "),_I=a("a"),P5o=o("ReformerModelWithLMHead"),$5o=o(" (Reformer model)"),I5o=l(),Ju=a("li"),_ne=a("strong"),q5o=o("rembert"),N5o=o(" \u2014 "),uI=a("a"),j5o=o("RemBertForCausalLM"),D5o=o(" (RemBERT model)"),G5o=l(),Yu=a("li"),une=a("strong"),O5o=o("roberta"),V5o=o(" \u2014 "),bI=a("a"),X5o=o("RobertaForCausalLM"),z5o=o(" (RoBERTa model)"),Q5o=l(),Ku=a("li"),bne=a("strong"),W5o=o("roformer"),H5o=o(" \u2014 "),FI=a("a"),U5o=o("RoFormerForCausalLM"),J5o=o(" (RoFormer model)"),Y5o=l(),Zu=a("li"),Fne=a("strong"),K5o=o("speech_to_text_2"),Z5o=o(" \u2014 "),vI=a("a"),e2o=o("Speech2Text2ForCausalLM"),o2o=o(" (Speech2Text2 model)"),r2o=l(),e6=a("li"),vne=a("strong"),t2o=o("transfo-xl"),a2o=o(" \u2014 "),TI=a("a"),n2o=o("TransfoXLLMHeadModel"),s2o=o(" (Transformer-XL model)"),l2o=l(),o6=a("li"),Tne=a("strong"),i2o=o("trocr"),d2o=o(" \u2014 "),MI=a("a"),c2o=o("TrOCRForCausalLM"),f2o=o(" (TrOCR model)"),m2o=l(),r6=a("li"),Mne=a("strong"),g2o=o("xglm"),h2o=o(" \u2014 "),EI=a("a"),p2o=o("XGLMForCausalLM"),_2o=o(" (XGLM model)"),u2o=l(),t6=a("li"),Ene=a("strong"),b2o=o("xlm"),F2o=o(" \u2014 "),CI=a("a"),v2o=o("XLMWithLMHeadModel"),T2o=o(" (XLM model)"),M2o=l(),a6=a("li"),Cne=a("strong"),E2o=o("xlm-prophetnet"),C2o=o(" \u2014 "),wI=a("a"),w2o=o("XLMProphetNetForCausalLM"),A2o=o(" (XLMProphetNet model)"),y2o=l(),n6=a("li"),wne=a("strong"),L2o=o("xlm-roberta"),x2o=o(" \u2014 "),AI=a("a"),k2o=o("XLMRobertaForCausalLM"),S2o=o(" (XLM-RoBERTa model)"),R2o=l(),s6=a("li"),Ane=a("strong"),B2o=o("xlm-roberta-xl"),P2o=o(" \u2014 "),yI=a("a"),$2o=o("XLMRobertaXLForCausalLM"),I2o=o(" (XLM-RoBERTa-XL model)"),q2o=l(),l6=a("li"),yne=a("strong"),N2o=o("xlnet"),j2o=o(" \u2014 "),LI=a("a"),D2o=o("XLNetLMHeadModel"),G2o=o(" (XLNet model)"),O2o=l(),i6=a("p"),V2o=o("The model is set in evaluation mode by default using "),Lne=a("code"),X2o=o("model.eval()"),z2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xne=a("code"),Q2o=o("model.train()"),W2o=l(),kne=a("p"),H2o=o("Examples:"),U2o=l(),f(yw.$$.fragment),JRe=l(),nd=a("h2"),d6=a("a"),Sne=a("span"),f(Lw.$$.fragment),J2o=l(),Rne=a("span"),Y2o=o("AutoModelForMaskedLM"),YRe=l(),Zo=a("div"),f(xw.$$.fragment),K2o=l(),sd=a("p"),Z2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xI=a("a"),eFo=o("from_pretrained()"),oFo=o(" class method or the "),kI=a("a"),rFo=o("from_config()"),tFo=o(` class
method.`),aFo=l(),kw=a("p"),nFo=o("This class cannot be instantiated directly using "),Bne=a("code"),sFo=o("__init__()"),lFo=o(" (throws an error)."),iFo=l(),Wr=a("div"),f(Sw.$$.fragment),dFo=l(),Pne=a("p"),cFo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),fFo=l(),ld=a("p"),mFo=o(`Note:
Loading a model from its configuration file does `),$ne=a("strong"),gFo=o("not"),hFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SI=a("a"),pFo=o("from_pretrained()"),_Fo=o(" to load the model weights."),uFo=l(),Ine=a("p"),bFo=o("Examples:"),FFo=l(),f(Rw.$$.fragment),vFo=l(),De=a("div"),f(Bw.$$.fragment),TFo=l(),qne=a("p"),MFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),EFo=l(),Wa=a("p"),CFo=o("The model class to instantiate is selected based on the "),Nne=a("code"),wFo=o("model_type"),AFo=o(` property of the config object (either
passed as an argument or loaded from `),jne=a("code"),yFo=o("pretrained_model_name_or_path"),LFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dne=a("code"),xFo=o("pretrained_model_name_or_path"),kFo=o(":"),SFo=l(),I=a("ul"),c6=a("li"),Gne=a("strong"),RFo=o("albert"),BFo=o(" \u2014 "),RI=a("a"),PFo=o("AlbertForMaskedLM"),$Fo=o(" (ALBERT model)"),IFo=l(),f6=a("li"),One=a("strong"),qFo=o("bart"),NFo=o(" \u2014 "),BI=a("a"),jFo=o("BartForConditionalGeneration"),DFo=o(" (BART model)"),GFo=l(),m6=a("li"),Vne=a("strong"),OFo=o("bert"),VFo=o(" \u2014 "),PI=a("a"),XFo=o("BertForMaskedLM"),zFo=o(" (BERT model)"),QFo=l(),g6=a("li"),Xne=a("strong"),WFo=o("big_bird"),HFo=o(" \u2014 "),$I=a("a"),UFo=o("BigBirdForMaskedLM"),JFo=o(" (BigBird model)"),YFo=l(),h6=a("li"),zne=a("strong"),KFo=o("camembert"),ZFo=o(" \u2014 "),II=a("a"),evo=o("CamembertForMaskedLM"),ovo=o(" (CamemBERT model)"),rvo=l(),p6=a("li"),Qne=a("strong"),tvo=o("convbert"),avo=o(" \u2014 "),qI=a("a"),nvo=o("ConvBertForMaskedLM"),svo=o(" (ConvBERT model)"),lvo=l(),_6=a("li"),Wne=a("strong"),ivo=o("data2vec-text"),dvo=o(" \u2014 "),NI=a("a"),cvo=o("Data2VecTextForMaskedLM"),fvo=o(" (Data2VecText model)"),mvo=l(),u6=a("li"),Hne=a("strong"),gvo=o("deberta"),hvo=o(" \u2014 "),jI=a("a"),pvo=o("DebertaForMaskedLM"),_vo=o(" (DeBERTa model)"),uvo=l(),b6=a("li"),Une=a("strong"),bvo=o("deberta-v2"),Fvo=o(" \u2014 "),DI=a("a"),vvo=o("DebertaV2ForMaskedLM"),Tvo=o(" (DeBERTa-v2 model)"),Mvo=l(),F6=a("li"),Jne=a("strong"),Evo=o("distilbert"),Cvo=o(" \u2014 "),GI=a("a"),wvo=o("DistilBertForMaskedLM"),Avo=o(" (DistilBERT model)"),yvo=l(),v6=a("li"),Yne=a("strong"),Lvo=o("electra"),xvo=o(" \u2014 "),OI=a("a"),kvo=o("ElectraForMaskedLM"),Svo=o(" (ELECTRA model)"),Rvo=l(),T6=a("li"),Kne=a("strong"),Bvo=o("flaubert"),Pvo=o(" \u2014 "),VI=a("a"),$vo=o("FlaubertWithLMHeadModel"),Ivo=o(" (FlauBERT model)"),qvo=l(),M6=a("li"),Zne=a("strong"),Nvo=o("fnet"),jvo=o(" \u2014 "),XI=a("a"),Dvo=o("FNetForMaskedLM"),Gvo=o(" (FNet model)"),Ovo=l(),E6=a("li"),ese=a("strong"),Vvo=o("funnel"),Xvo=o(" \u2014 "),zI=a("a"),zvo=o("FunnelForMaskedLM"),Qvo=o(" (Funnel Transformer model)"),Wvo=l(),C6=a("li"),ose=a("strong"),Hvo=o("ibert"),Uvo=o(" \u2014 "),QI=a("a"),Jvo=o("IBertForMaskedLM"),Yvo=o(" (I-BERT model)"),Kvo=l(),w6=a("li"),rse=a("strong"),Zvo=o("layoutlm"),eTo=o(" \u2014 "),WI=a("a"),oTo=o("LayoutLMForMaskedLM"),rTo=o(" (LayoutLM model)"),tTo=l(),A6=a("li"),tse=a("strong"),aTo=o("longformer"),nTo=o(" \u2014 "),HI=a("a"),sTo=o("LongformerForMaskedLM"),lTo=o(" (Longformer model)"),iTo=l(),y6=a("li"),ase=a("strong"),dTo=o("mbart"),cTo=o(" \u2014 "),UI=a("a"),fTo=o("MBartForConditionalGeneration"),mTo=o(" (mBART model)"),gTo=l(),L6=a("li"),nse=a("strong"),hTo=o("megatron-bert"),pTo=o(" \u2014 "),JI=a("a"),_To=o("MegatronBertForMaskedLM"),uTo=o(" (MegatronBert model)"),bTo=l(),x6=a("li"),sse=a("strong"),FTo=o("mobilebert"),vTo=o(" \u2014 "),YI=a("a"),TTo=o("MobileBertForMaskedLM"),MTo=o(" (MobileBERT model)"),ETo=l(),k6=a("li"),lse=a("strong"),CTo=o("mpnet"),wTo=o(" \u2014 "),KI=a("a"),ATo=o("MPNetForMaskedLM"),yTo=o(" (MPNet model)"),LTo=l(),S6=a("li"),ise=a("strong"),xTo=o("nystromformer"),kTo=o(" \u2014 "),ZI=a("a"),STo=o("NystromformerForMaskedLM"),RTo=o(" (Nystromformer model)"),BTo=l(),R6=a("li"),dse=a("strong"),PTo=o("perceiver"),$To=o(" \u2014 "),eq=a("a"),ITo=o("PerceiverForMaskedLM"),qTo=o(" (Perceiver model)"),NTo=l(),B6=a("li"),cse=a("strong"),jTo=o("qdqbert"),DTo=o(" \u2014 "),oq=a("a"),GTo=o("QDQBertForMaskedLM"),OTo=o(" (QDQBert model)"),VTo=l(),P6=a("li"),fse=a("strong"),XTo=o("reformer"),zTo=o(" \u2014 "),rq=a("a"),QTo=o("ReformerForMaskedLM"),WTo=o(" (Reformer model)"),HTo=l(),$6=a("li"),mse=a("strong"),UTo=o("rembert"),JTo=o(" \u2014 "),tq=a("a"),YTo=o("RemBertForMaskedLM"),KTo=o(" (RemBERT model)"),ZTo=l(),I6=a("li"),gse=a("strong"),eMo=o("roberta"),oMo=o(" \u2014 "),aq=a("a"),rMo=o("RobertaForMaskedLM"),tMo=o(" (RoBERTa model)"),aMo=l(),q6=a("li"),hse=a("strong"),nMo=o("roformer"),sMo=o(" \u2014 "),nq=a("a"),lMo=o("RoFormerForMaskedLM"),iMo=o(" (RoFormer model)"),dMo=l(),N6=a("li"),pse=a("strong"),cMo=o("squeezebert"),fMo=o(" \u2014 "),sq=a("a"),mMo=o("SqueezeBertForMaskedLM"),gMo=o(" (SqueezeBERT model)"),hMo=l(),j6=a("li"),_se=a("strong"),pMo=o("tapas"),_Mo=o(" \u2014 "),lq=a("a"),uMo=o("TapasForMaskedLM"),bMo=o(" (TAPAS model)"),FMo=l(),D6=a("li"),use=a("strong"),vMo=o("wav2vec2"),TMo=o(" \u2014 "),bse=a("code"),MMo=o("Wav2Vec2ForMaskedLM"),EMo=o(" (Wav2Vec2 model)"),CMo=l(),G6=a("li"),Fse=a("strong"),wMo=o("xlm"),AMo=o(" \u2014 "),iq=a("a"),yMo=o("XLMWithLMHeadModel"),LMo=o(" (XLM model)"),xMo=l(),O6=a("li"),vse=a("strong"),kMo=o("xlm-roberta"),SMo=o(" \u2014 "),dq=a("a"),RMo=o("XLMRobertaForMaskedLM"),BMo=o(" (XLM-RoBERTa model)"),PMo=l(),V6=a("li"),Tse=a("strong"),$Mo=o("xlm-roberta-xl"),IMo=o(" \u2014 "),cq=a("a"),qMo=o("XLMRobertaXLForMaskedLM"),NMo=o(" (XLM-RoBERTa-XL model)"),jMo=l(),X6=a("li"),Mse=a("strong"),DMo=o("yoso"),GMo=o(" \u2014 "),fq=a("a"),OMo=o("YosoForMaskedLM"),VMo=o(" (YOSO model)"),XMo=l(),z6=a("p"),zMo=o("The model is set in evaluation mode by default using "),Ese=a("code"),QMo=o("model.eval()"),WMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=a("code"),HMo=o("model.train()"),UMo=l(),wse=a("p"),JMo=o("Examples:"),YMo=l(),f(Pw.$$.fragment),KRe=l(),id=a("h2"),Q6=a("a"),Ase=a("span"),f($w.$$.fragment),KMo=l(),yse=a("span"),ZMo=o("AutoModelForSeq2SeqLM"),ZRe=l(),er=a("div"),f(Iw.$$.fragment),eEo=l(),dd=a("p"),oEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mq=a("a"),rEo=o("from_pretrained()"),tEo=o(" class method or the "),gq=a("a"),aEo=o("from_config()"),nEo=o(` class
method.`),sEo=l(),qw=a("p"),lEo=o("This class cannot be instantiated directly using "),Lse=a("code"),iEo=o("__init__()"),dEo=o(" (throws an error)."),cEo=l(),Hr=a("div"),f(Nw.$$.fragment),fEo=l(),xse=a("p"),mEo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gEo=l(),cd=a("p"),hEo=o(`Note:
Loading a model from its configuration file does `),kse=a("strong"),pEo=o("not"),_Eo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=a("a"),uEo=o("from_pretrained()"),bEo=o(" to load the model weights."),FEo=l(),Sse=a("p"),vEo=o("Examples:"),TEo=l(),f(jw.$$.fragment),MEo=l(),Ge=a("div"),f(Dw.$$.fragment),EEo=l(),Rse=a("p"),CEo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wEo=l(),Ha=a("p"),AEo=o("The model class to instantiate is selected based on the "),Bse=a("code"),yEo=o("model_type"),LEo=o(` property of the config object (either
passed as an argument or loaded from `),Pse=a("code"),xEo=o("pretrained_model_name_or_path"),kEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),SEo=o("pretrained_model_name_or_path"),REo=o(":"),BEo=l(),ne=a("ul"),W6=a("li"),Ise=a("strong"),PEo=o("bart"),$Eo=o(" \u2014 "),pq=a("a"),IEo=o("BartForConditionalGeneration"),qEo=o(" (BART model)"),NEo=l(),H6=a("li"),qse=a("strong"),jEo=o("bigbird_pegasus"),DEo=o(" \u2014 "),_q=a("a"),GEo=o("BigBirdPegasusForConditionalGeneration"),OEo=o(" (BigBirdPegasus model)"),VEo=l(),U6=a("li"),Nse=a("strong"),XEo=o("blenderbot"),zEo=o(" \u2014 "),uq=a("a"),QEo=o("BlenderbotForConditionalGeneration"),WEo=o(" (Blenderbot model)"),HEo=l(),J6=a("li"),jse=a("strong"),UEo=o("blenderbot-small"),JEo=o(" \u2014 "),bq=a("a"),YEo=o("BlenderbotSmallForConditionalGeneration"),KEo=o(" (BlenderbotSmall model)"),ZEo=l(),Y6=a("li"),Dse=a("strong"),e3o=o("encoder-decoder"),o3o=o(" \u2014 "),Fq=a("a"),r3o=o("EncoderDecoderModel"),t3o=o(" (Encoder decoder model)"),a3o=l(),K6=a("li"),Gse=a("strong"),n3o=o("fsmt"),s3o=o(" \u2014 "),vq=a("a"),l3o=o("FSMTForConditionalGeneration"),i3o=o(" (FairSeq Machine-Translation model)"),d3o=l(),Z6=a("li"),Ose=a("strong"),c3o=o("led"),f3o=o(" \u2014 "),Tq=a("a"),m3o=o("LEDForConditionalGeneration"),g3o=o(" (LED model)"),h3o=l(),e1=a("li"),Vse=a("strong"),p3o=o("m2m_100"),_3o=o(" \u2014 "),Mq=a("a"),u3o=o("M2M100ForConditionalGeneration"),b3o=o(" (M2M100 model)"),F3o=l(),o1=a("li"),Xse=a("strong"),v3o=o("marian"),T3o=o(" \u2014 "),Eq=a("a"),M3o=o("MarianMTModel"),E3o=o(" (Marian model)"),C3o=l(),r1=a("li"),zse=a("strong"),w3o=o("mbart"),A3o=o(" \u2014 "),Cq=a("a"),y3o=o("MBartForConditionalGeneration"),L3o=o(" (mBART model)"),x3o=l(),t1=a("li"),Qse=a("strong"),k3o=o("mt5"),S3o=o(" \u2014 "),wq=a("a"),R3o=o("MT5ForConditionalGeneration"),B3o=o(" (mT5 model)"),P3o=l(),a1=a("li"),Wse=a("strong"),$3o=o("pegasus"),I3o=o(" \u2014 "),Aq=a("a"),q3o=o("PegasusForConditionalGeneration"),N3o=o(" (Pegasus model)"),j3o=l(),n1=a("li"),Hse=a("strong"),D3o=o("plbart"),G3o=o(" \u2014 "),yq=a("a"),O3o=o("PLBartForConditionalGeneration"),V3o=o(" (PLBart model)"),X3o=l(),s1=a("li"),Use=a("strong"),z3o=o("prophetnet"),Q3o=o(" \u2014 "),Lq=a("a"),W3o=o("ProphetNetForConditionalGeneration"),H3o=o(" (ProphetNet model)"),U3o=l(),l1=a("li"),Jse=a("strong"),J3o=o("t5"),Y3o=o(" \u2014 "),xq=a("a"),K3o=o("T5ForConditionalGeneration"),Z3o=o(" (T5 model)"),eCo=l(),i1=a("li"),Yse=a("strong"),oCo=o("tapex"),rCo=o(" \u2014 "),kq=a("a"),tCo=o("BartForConditionalGeneration"),aCo=o(" (TAPEX model)"),nCo=l(),d1=a("li"),Kse=a("strong"),sCo=o("xlm-prophetnet"),lCo=o(" \u2014 "),Sq=a("a"),iCo=o("XLMProphetNetForConditionalGeneration"),dCo=o(" (XLMProphetNet model)"),cCo=l(),c1=a("p"),fCo=o("The model is set in evaluation mode by default using "),Zse=a("code"),mCo=o("model.eval()"),gCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),hCo=o("model.train()"),pCo=l(),ole=a("p"),_Co=o("Examples:"),uCo=l(),f(Gw.$$.fragment),eBe=l(),fd=a("h2"),f1=a("a"),rle=a("span"),f(Ow.$$.fragment),bCo=l(),tle=a("span"),FCo=o("AutoModelForSequenceClassification"),oBe=l(),or=a("div"),f(Vw.$$.fragment),vCo=l(),md=a("p"),TCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Rq=a("a"),MCo=o("from_pretrained()"),ECo=o(" class method or the "),Bq=a("a"),CCo=o("from_config()"),wCo=o(` class
method.`),ACo=l(),Xw=a("p"),yCo=o("This class cannot be instantiated directly using "),ale=a("code"),LCo=o("__init__()"),xCo=o(" (throws an error)."),kCo=l(),Ur=a("div"),f(zw.$$.fragment),SCo=l(),nle=a("p"),RCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BCo=l(),gd=a("p"),PCo=o(`Note:
Loading a model from its configuration file does `),sle=a("strong"),$Co=o("not"),ICo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pq=a("a"),qCo=o("from_pretrained()"),NCo=o(" to load the model weights."),jCo=l(),lle=a("p"),DCo=o("Examples:"),GCo=l(),f(Qw.$$.fragment),OCo=l(),Oe=a("div"),f(Ww.$$.fragment),VCo=l(),ile=a("p"),XCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zCo=l(),Ua=a("p"),QCo=o("The model class to instantiate is selected based on the "),dle=a("code"),WCo=o("model_type"),HCo=o(` property of the config object (either
passed as an argument or loaded from `),cle=a("code"),UCo=o("pretrained_model_name_or_path"),JCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=a("code"),YCo=o("pretrained_model_name_or_path"),KCo=o(":"),ZCo=l(),y=a("ul"),m1=a("li"),mle=a("strong"),ewo=o("albert"),owo=o(" \u2014 "),$q=a("a"),rwo=o("AlbertForSequenceClassification"),two=o(" (ALBERT model)"),awo=l(),g1=a("li"),gle=a("strong"),nwo=o("bart"),swo=o(" \u2014 "),Iq=a("a"),lwo=o("BartForSequenceClassification"),iwo=o(" (BART model)"),dwo=l(),h1=a("li"),hle=a("strong"),cwo=o("bert"),fwo=o(" \u2014 "),qq=a("a"),mwo=o("BertForSequenceClassification"),gwo=o(" (BERT model)"),hwo=l(),p1=a("li"),ple=a("strong"),pwo=o("big_bird"),_wo=o(" \u2014 "),Nq=a("a"),uwo=o("BigBirdForSequenceClassification"),bwo=o(" (BigBird model)"),Fwo=l(),_1=a("li"),_le=a("strong"),vwo=o("bigbird_pegasus"),Two=o(" \u2014 "),jq=a("a"),Mwo=o("BigBirdPegasusForSequenceClassification"),Ewo=o(" (BigBirdPegasus model)"),Cwo=l(),u1=a("li"),ule=a("strong"),wwo=o("camembert"),Awo=o(" \u2014 "),Dq=a("a"),ywo=o("CamembertForSequenceClassification"),Lwo=o(" (CamemBERT model)"),xwo=l(),b1=a("li"),ble=a("strong"),kwo=o("canine"),Swo=o(" \u2014 "),Gq=a("a"),Rwo=o("CanineForSequenceClassification"),Bwo=o(" (Canine model)"),Pwo=l(),F1=a("li"),Fle=a("strong"),$wo=o("convbert"),Iwo=o(" \u2014 "),Oq=a("a"),qwo=o("ConvBertForSequenceClassification"),Nwo=o(" (ConvBERT model)"),jwo=l(),v1=a("li"),vle=a("strong"),Dwo=o("ctrl"),Gwo=o(" \u2014 "),Vq=a("a"),Owo=o("CTRLForSequenceClassification"),Vwo=o(" (CTRL model)"),Xwo=l(),T1=a("li"),Tle=a("strong"),zwo=o("data2vec-text"),Qwo=o(" \u2014 "),Xq=a("a"),Wwo=o("Data2VecTextForSequenceClassification"),Hwo=o(" (Data2VecText model)"),Uwo=l(),M1=a("li"),Mle=a("strong"),Jwo=o("deberta"),Ywo=o(" \u2014 "),zq=a("a"),Kwo=o("DebertaForSequenceClassification"),Zwo=o(" (DeBERTa model)"),eAo=l(),E1=a("li"),Ele=a("strong"),oAo=o("deberta-v2"),rAo=o(" \u2014 "),Qq=a("a"),tAo=o("DebertaV2ForSequenceClassification"),aAo=o(" (DeBERTa-v2 model)"),nAo=l(),C1=a("li"),Cle=a("strong"),sAo=o("distilbert"),lAo=o(" \u2014 "),Wq=a("a"),iAo=o("DistilBertForSequenceClassification"),dAo=o(" (DistilBERT model)"),cAo=l(),w1=a("li"),wle=a("strong"),fAo=o("electra"),mAo=o(" \u2014 "),Hq=a("a"),gAo=o("ElectraForSequenceClassification"),hAo=o(" (ELECTRA model)"),pAo=l(),A1=a("li"),Ale=a("strong"),_Ao=o("flaubert"),uAo=o(" \u2014 "),Uq=a("a"),bAo=o("FlaubertForSequenceClassification"),FAo=o(" (FlauBERT model)"),vAo=l(),y1=a("li"),yle=a("strong"),TAo=o("fnet"),MAo=o(" \u2014 "),Jq=a("a"),EAo=o("FNetForSequenceClassification"),CAo=o(" (FNet model)"),wAo=l(),L1=a("li"),Lle=a("strong"),AAo=o("funnel"),yAo=o(" \u2014 "),Yq=a("a"),LAo=o("FunnelForSequenceClassification"),xAo=o(" (Funnel Transformer model)"),kAo=l(),x1=a("li"),xle=a("strong"),SAo=o("gpt2"),RAo=o(" \u2014 "),Kq=a("a"),BAo=o("GPT2ForSequenceClassification"),PAo=o(" (OpenAI GPT-2 model)"),$Ao=l(),k1=a("li"),kle=a("strong"),IAo=o("gpt_neo"),qAo=o(" \u2014 "),Zq=a("a"),NAo=o("GPTNeoForSequenceClassification"),jAo=o(" (GPT Neo model)"),DAo=l(),S1=a("li"),Sle=a("strong"),GAo=o("gptj"),OAo=o(" \u2014 "),eN=a("a"),VAo=o("GPTJForSequenceClassification"),XAo=o(" (GPT-J model)"),zAo=l(),R1=a("li"),Rle=a("strong"),QAo=o("ibert"),WAo=o(" \u2014 "),oN=a("a"),HAo=o("IBertForSequenceClassification"),UAo=o(" (I-BERT model)"),JAo=l(),B1=a("li"),Ble=a("strong"),YAo=o("layoutlm"),KAo=o(" \u2014 "),rN=a("a"),ZAo=o("LayoutLMForSequenceClassification"),e0o=o(" (LayoutLM model)"),o0o=l(),P1=a("li"),Ple=a("strong"),r0o=o("layoutlmv2"),t0o=o(" \u2014 "),tN=a("a"),a0o=o("LayoutLMv2ForSequenceClassification"),n0o=o(" (LayoutLMv2 model)"),s0o=l(),$1=a("li"),$le=a("strong"),l0o=o("led"),i0o=o(" \u2014 "),aN=a("a"),d0o=o("LEDForSequenceClassification"),c0o=o(" (LED model)"),f0o=l(),I1=a("li"),Ile=a("strong"),m0o=o("longformer"),g0o=o(" \u2014 "),nN=a("a"),h0o=o("LongformerForSequenceClassification"),p0o=o(" (Longformer model)"),_0o=l(),q1=a("li"),qle=a("strong"),u0o=o("mbart"),b0o=o(" \u2014 "),sN=a("a"),F0o=o("MBartForSequenceClassification"),v0o=o(" (mBART model)"),T0o=l(),N1=a("li"),Nle=a("strong"),M0o=o("megatron-bert"),E0o=o(" \u2014 "),lN=a("a"),C0o=o("MegatronBertForSequenceClassification"),w0o=o(" (MegatronBert model)"),A0o=l(),j1=a("li"),jle=a("strong"),y0o=o("mobilebert"),L0o=o(" \u2014 "),iN=a("a"),x0o=o("MobileBertForSequenceClassification"),k0o=o(" (MobileBERT model)"),S0o=l(),D1=a("li"),Dle=a("strong"),R0o=o("mpnet"),B0o=o(" \u2014 "),dN=a("a"),P0o=o("MPNetForSequenceClassification"),$0o=o(" (MPNet model)"),I0o=l(),G1=a("li"),Gle=a("strong"),q0o=o("nystromformer"),N0o=o(" \u2014 "),cN=a("a"),j0o=o("NystromformerForSequenceClassification"),D0o=o(" (Nystromformer model)"),G0o=l(),O1=a("li"),Ole=a("strong"),O0o=o("openai-gpt"),V0o=o(" \u2014 "),fN=a("a"),X0o=o("OpenAIGPTForSequenceClassification"),z0o=o(" (OpenAI GPT model)"),Q0o=l(),V1=a("li"),Vle=a("strong"),W0o=o("perceiver"),H0o=o(" \u2014 "),mN=a("a"),U0o=o("PerceiverForSequenceClassification"),J0o=o(" (Perceiver model)"),Y0o=l(),X1=a("li"),Xle=a("strong"),K0o=o("plbart"),Z0o=o(" \u2014 "),gN=a("a"),eyo=o("PLBartForSequenceClassification"),oyo=o(" (PLBart model)"),ryo=l(),z1=a("li"),zle=a("strong"),tyo=o("qdqbert"),ayo=o(" \u2014 "),hN=a("a"),nyo=o("QDQBertForSequenceClassification"),syo=o(" (QDQBert model)"),lyo=l(),Q1=a("li"),Qle=a("strong"),iyo=o("reformer"),dyo=o(" \u2014 "),pN=a("a"),cyo=o("ReformerForSequenceClassification"),fyo=o(" (Reformer model)"),myo=l(),W1=a("li"),Wle=a("strong"),gyo=o("rembert"),hyo=o(" \u2014 "),_N=a("a"),pyo=o("RemBertForSequenceClassification"),_yo=o(" (RemBERT model)"),uyo=l(),H1=a("li"),Hle=a("strong"),byo=o("roberta"),Fyo=o(" \u2014 "),uN=a("a"),vyo=o("RobertaForSequenceClassification"),Tyo=o(" (RoBERTa model)"),Myo=l(),U1=a("li"),Ule=a("strong"),Eyo=o("roformer"),Cyo=o(" \u2014 "),bN=a("a"),wyo=o("RoFormerForSequenceClassification"),Ayo=o(" (RoFormer model)"),yyo=l(),J1=a("li"),Jle=a("strong"),Lyo=o("squeezebert"),xyo=o(" \u2014 "),FN=a("a"),kyo=o("SqueezeBertForSequenceClassification"),Syo=o(" (SqueezeBERT model)"),Ryo=l(),Y1=a("li"),Yle=a("strong"),Byo=o("tapas"),Pyo=o(" \u2014 "),vN=a("a"),$yo=o("TapasForSequenceClassification"),Iyo=o(" (TAPAS model)"),qyo=l(),K1=a("li"),Kle=a("strong"),Nyo=o("tapex"),jyo=o(" \u2014 "),TN=a("a"),Dyo=o("BartForSequenceClassification"),Gyo=o(" (TAPEX model)"),Oyo=l(),Z1=a("li"),Zle=a("strong"),Vyo=o("transfo-xl"),Xyo=o(" \u2014 "),MN=a("a"),zyo=o("TransfoXLForSequenceClassification"),Qyo=o(" (Transformer-XL model)"),Wyo=l(),e4=a("li"),eie=a("strong"),Hyo=o("xlm"),Uyo=o(" \u2014 "),EN=a("a"),Jyo=o("XLMForSequenceClassification"),Yyo=o(" (XLM model)"),Kyo=l(),o4=a("li"),oie=a("strong"),Zyo=o("xlm-roberta"),eLo=o(" \u2014 "),CN=a("a"),oLo=o("XLMRobertaForSequenceClassification"),rLo=o(" (XLM-RoBERTa model)"),tLo=l(),r4=a("li"),rie=a("strong"),aLo=o("xlm-roberta-xl"),nLo=o(" \u2014 "),wN=a("a"),sLo=o("XLMRobertaXLForSequenceClassification"),lLo=o(" (XLM-RoBERTa-XL model)"),iLo=l(),t4=a("li"),tie=a("strong"),dLo=o("xlnet"),cLo=o(" \u2014 "),AN=a("a"),fLo=o("XLNetForSequenceClassification"),mLo=o(" (XLNet model)"),gLo=l(),a4=a("li"),aie=a("strong"),hLo=o("yoso"),pLo=o(" \u2014 "),yN=a("a"),_Lo=o("YosoForSequenceClassification"),uLo=o(" (YOSO model)"),bLo=l(),n4=a("p"),FLo=o("The model is set in evaluation mode by default using "),nie=a("code"),vLo=o("model.eval()"),TLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=a("code"),MLo=o("model.train()"),ELo=l(),lie=a("p"),CLo=o("Examples:"),wLo=l(),f(Hw.$$.fragment),rBe=l(),hd=a("h2"),s4=a("a"),iie=a("span"),f(Uw.$$.fragment),ALo=l(),die=a("span"),yLo=o("AutoModelForMultipleChoice"),tBe=l(),rr=a("div"),f(Jw.$$.fragment),LLo=l(),pd=a("p"),xLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LN=a("a"),kLo=o("from_pretrained()"),SLo=o(" class method or the "),xN=a("a"),RLo=o("from_config()"),BLo=o(` class
method.`),PLo=l(),Yw=a("p"),$Lo=o("This class cannot be instantiated directly using "),cie=a("code"),ILo=o("__init__()"),qLo=o(" (throws an error)."),NLo=l(),Jr=a("div"),f(Kw.$$.fragment),jLo=l(),fie=a("p"),DLo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GLo=l(),_d=a("p"),OLo=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),VLo=o("not"),XLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kN=a("a"),zLo=o("from_pretrained()"),QLo=o(" to load the model weights."),WLo=l(),gie=a("p"),HLo=o("Examples:"),ULo=l(),f(Zw.$$.fragment),JLo=l(),Ve=a("div"),f(eA.$$.fragment),YLo=l(),hie=a("p"),KLo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZLo=l(),Ja=a("p"),e8o=o("The model class to instantiate is selected based on the "),pie=a("code"),o8o=o("model_type"),r8o=o(` property of the config object (either
passed as an argument or loaded from `),_ie=a("code"),t8o=o("pretrained_model_name_or_path"),a8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),n8o=o("pretrained_model_name_or_path"),s8o=o(":"),l8o=l(),G=a("ul"),l4=a("li"),bie=a("strong"),i8o=o("albert"),d8o=o(" \u2014 "),SN=a("a"),c8o=o("AlbertForMultipleChoice"),f8o=o(" (ALBERT model)"),m8o=l(),i4=a("li"),Fie=a("strong"),g8o=o("bert"),h8o=o(" \u2014 "),RN=a("a"),p8o=o("BertForMultipleChoice"),_8o=o(" (BERT model)"),u8o=l(),d4=a("li"),vie=a("strong"),b8o=o("big_bird"),F8o=o(" \u2014 "),BN=a("a"),v8o=o("BigBirdForMultipleChoice"),T8o=o(" (BigBird model)"),M8o=l(),c4=a("li"),Tie=a("strong"),E8o=o("camembert"),C8o=o(" \u2014 "),PN=a("a"),w8o=o("CamembertForMultipleChoice"),A8o=o(" (CamemBERT model)"),y8o=l(),f4=a("li"),Mie=a("strong"),L8o=o("canine"),x8o=o(" \u2014 "),$N=a("a"),k8o=o("CanineForMultipleChoice"),S8o=o(" (Canine model)"),R8o=l(),m4=a("li"),Eie=a("strong"),B8o=o("convbert"),P8o=o(" \u2014 "),IN=a("a"),$8o=o("ConvBertForMultipleChoice"),I8o=o(" (ConvBERT model)"),q8o=l(),g4=a("li"),Cie=a("strong"),N8o=o("data2vec-text"),j8o=o(" \u2014 "),qN=a("a"),D8o=o("Data2VecTextForMultipleChoice"),G8o=o(" (Data2VecText model)"),O8o=l(),h4=a("li"),wie=a("strong"),V8o=o("distilbert"),X8o=o(" \u2014 "),NN=a("a"),z8o=o("DistilBertForMultipleChoice"),Q8o=o(" (DistilBERT model)"),W8o=l(),p4=a("li"),Aie=a("strong"),H8o=o("electra"),U8o=o(" \u2014 "),jN=a("a"),J8o=o("ElectraForMultipleChoice"),Y8o=o(" (ELECTRA model)"),K8o=l(),_4=a("li"),yie=a("strong"),Z8o=o("flaubert"),e7o=o(" \u2014 "),DN=a("a"),o7o=o("FlaubertForMultipleChoice"),r7o=o(" (FlauBERT model)"),t7o=l(),u4=a("li"),Lie=a("strong"),a7o=o("fnet"),n7o=o(" \u2014 "),GN=a("a"),s7o=o("FNetForMultipleChoice"),l7o=o(" (FNet model)"),i7o=l(),b4=a("li"),xie=a("strong"),d7o=o("funnel"),c7o=o(" \u2014 "),ON=a("a"),f7o=o("FunnelForMultipleChoice"),m7o=o(" (Funnel Transformer model)"),g7o=l(),F4=a("li"),kie=a("strong"),h7o=o("ibert"),p7o=o(" \u2014 "),VN=a("a"),_7o=o("IBertForMultipleChoice"),u7o=o(" (I-BERT model)"),b7o=l(),v4=a("li"),Sie=a("strong"),F7o=o("longformer"),v7o=o(" \u2014 "),XN=a("a"),T7o=o("LongformerForMultipleChoice"),M7o=o(" (Longformer model)"),E7o=l(),T4=a("li"),Rie=a("strong"),C7o=o("megatron-bert"),w7o=o(" \u2014 "),zN=a("a"),A7o=o("MegatronBertForMultipleChoice"),y7o=o(" (MegatronBert model)"),L7o=l(),M4=a("li"),Bie=a("strong"),x7o=o("mobilebert"),k7o=o(" \u2014 "),QN=a("a"),S7o=o("MobileBertForMultipleChoice"),R7o=o(" (MobileBERT model)"),B7o=l(),E4=a("li"),Pie=a("strong"),P7o=o("mpnet"),$7o=o(" \u2014 "),WN=a("a"),I7o=o("MPNetForMultipleChoice"),q7o=o(" (MPNet model)"),N7o=l(),C4=a("li"),$ie=a("strong"),j7o=o("nystromformer"),D7o=o(" \u2014 "),HN=a("a"),G7o=o("NystromformerForMultipleChoice"),O7o=o(" (Nystromformer model)"),V7o=l(),w4=a("li"),Iie=a("strong"),X7o=o("qdqbert"),z7o=o(" \u2014 "),UN=a("a"),Q7o=o("QDQBertForMultipleChoice"),W7o=o(" (QDQBert model)"),H7o=l(),A4=a("li"),qie=a("strong"),U7o=o("rembert"),J7o=o(" \u2014 "),JN=a("a"),Y7o=o("RemBertForMultipleChoice"),K7o=o(" (RemBERT model)"),Z7o=l(),y4=a("li"),Nie=a("strong"),e9o=o("roberta"),o9o=o(" \u2014 "),YN=a("a"),r9o=o("RobertaForMultipleChoice"),t9o=o(" (RoBERTa model)"),a9o=l(),L4=a("li"),jie=a("strong"),n9o=o("roformer"),s9o=o(" \u2014 "),KN=a("a"),l9o=o("RoFormerForMultipleChoice"),i9o=o(" (RoFormer model)"),d9o=l(),x4=a("li"),Die=a("strong"),c9o=o("squeezebert"),f9o=o(" \u2014 "),ZN=a("a"),m9o=o("SqueezeBertForMultipleChoice"),g9o=o(" (SqueezeBERT model)"),h9o=l(),k4=a("li"),Gie=a("strong"),p9o=o("xlm"),_9o=o(" \u2014 "),ej=a("a"),u9o=o("XLMForMultipleChoice"),b9o=o(" (XLM model)"),F9o=l(),S4=a("li"),Oie=a("strong"),v9o=o("xlm-roberta"),T9o=o(" \u2014 "),oj=a("a"),M9o=o("XLMRobertaForMultipleChoice"),E9o=o(" (XLM-RoBERTa model)"),C9o=l(),R4=a("li"),Vie=a("strong"),w9o=o("xlm-roberta-xl"),A9o=o(" \u2014 "),rj=a("a"),y9o=o("XLMRobertaXLForMultipleChoice"),L9o=o(" (XLM-RoBERTa-XL model)"),x9o=l(),B4=a("li"),Xie=a("strong"),k9o=o("xlnet"),S9o=o(" \u2014 "),tj=a("a"),R9o=o("XLNetForMultipleChoice"),B9o=o(" (XLNet model)"),P9o=l(),P4=a("li"),zie=a("strong"),$9o=o("yoso"),I9o=o(" \u2014 "),aj=a("a"),q9o=o("YosoForMultipleChoice"),N9o=o(" (YOSO model)"),j9o=l(),$4=a("p"),D9o=o("The model is set in evaluation mode by default using "),Qie=a("code"),G9o=o("model.eval()"),O9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=a("code"),V9o=o("model.train()"),X9o=l(),Hie=a("p"),z9o=o("Examples:"),Q9o=l(),f(oA.$$.fragment),aBe=l(),ud=a("h2"),I4=a("a"),Uie=a("span"),f(rA.$$.fragment),W9o=l(),Jie=a("span"),H9o=o("AutoModelForNextSentencePrediction"),nBe=l(),tr=a("div"),f(tA.$$.fragment),U9o=l(),bd=a("p"),J9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nj=a("a"),Y9o=o("from_pretrained()"),K9o=o(" class method or the "),sj=a("a"),Z9o=o("from_config()"),exo=o(` class
method.`),oxo=l(),aA=a("p"),rxo=o("This class cannot be instantiated directly using "),Yie=a("code"),txo=o("__init__()"),axo=o(" (throws an error)."),nxo=l(),Yr=a("div"),f(nA.$$.fragment),sxo=l(),Kie=a("p"),lxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ixo=l(),Fd=a("p"),dxo=o(`Note:
Loading a model from its configuration file does `),Zie=a("strong"),cxo=o("not"),fxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=a("a"),mxo=o("from_pretrained()"),gxo=o(" to load the model weights."),hxo=l(),ede=a("p"),pxo=o("Examples:"),_xo=l(),f(sA.$$.fragment),uxo=l(),Xe=a("div"),f(lA.$$.fragment),bxo=l(),ode=a("p"),Fxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vxo=l(),Ya=a("p"),Txo=o("The model class to instantiate is selected based on the "),rde=a("code"),Mxo=o("model_type"),Exo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),Cxo=o("pretrained_model_name_or_path"),wxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),Axo=o("pretrained_model_name_or_path"),yxo=o(":"),Lxo=l(),da=a("ul"),q4=a("li"),nde=a("strong"),xxo=o("bert"),kxo=o(" \u2014 "),ij=a("a"),Sxo=o("BertForNextSentencePrediction"),Rxo=o(" (BERT model)"),Bxo=l(),N4=a("li"),sde=a("strong"),Pxo=o("fnet"),$xo=o(" \u2014 "),dj=a("a"),Ixo=o("FNetForNextSentencePrediction"),qxo=o(" (FNet model)"),Nxo=l(),j4=a("li"),lde=a("strong"),jxo=o("megatron-bert"),Dxo=o(" \u2014 "),cj=a("a"),Gxo=o("MegatronBertForNextSentencePrediction"),Oxo=o(" (MegatronBert model)"),Vxo=l(),D4=a("li"),ide=a("strong"),Xxo=o("mobilebert"),zxo=o(" \u2014 "),fj=a("a"),Qxo=o("MobileBertForNextSentencePrediction"),Wxo=o(" (MobileBERT model)"),Hxo=l(),G4=a("li"),dde=a("strong"),Uxo=o("qdqbert"),Jxo=o(" \u2014 "),mj=a("a"),Yxo=o("QDQBertForNextSentencePrediction"),Kxo=o(" (QDQBert model)"),Zxo=l(),O4=a("p"),eko=o("The model is set in evaluation mode by default using "),cde=a("code"),oko=o("model.eval()"),rko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),tko=o("model.train()"),ako=l(),mde=a("p"),nko=o("Examples:"),sko=l(),f(iA.$$.fragment),sBe=l(),vd=a("h2"),V4=a("a"),gde=a("span"),f(dA.$$.fragment),lko=l(),hde=a("span"),iko=o("AutoModelForTokenClassification"),lBe=l(),ar=a("div"),f(cA.$$.fragment),dko=l(),Td=a("p"),cko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gj=a("a"),fko=o("from_pretrained()"),mko=o(" class method or the "),hj=a("a"),gko=o("from_config()"),hko=o(` class
method.`),pko=l(),fA=a("p"),_ko=o("This class cannot be instantiated directly using "),pde=a("code"),uko=o("__init__()"),bko=o(" (throws an error)."),Fko=l(),Kr=a("div"),f(mA.$$.fragment),vko=l(),_de=a("p"),Tko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mko=l(),Md=a("p"),Eko=o(`Note:
Loading a model from its configuration file does `),ude=a("strong"),Cko=o("not"),wko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=a("a"),Ako=o("from_pretrained()"),yko=o(" to load the model weights."),Lko=l(),bde=a("p"),xko=o("Examples:"),kko=l(),f(gA.$$.fragment),Sko=l(),ze=a("div"),f(hA.$$.fragment),Rko=l(),Fde=a("p"),Bko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Pko=l(),Ka=a("p"),$ko=o("The model class to instantiate is selected based on the "),vde=a("code"),Iko=o("model_type"),qko=o(` property of the config object (either
passed as an argument or loaded from `),Tde=a("code"),Nko=o("pretrained_model_name_or_path"),jko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mde=a("code"),Dko=o("pretrained_model_name_or_path"),Gko=o(":"),Oko=l(),j=a("ul"),X4=a("li"),Ede=a("strong"),Vko=o("albert"),Xko=o(" \u2014 "),_j=a("a"),zko=o("AlbertForTokenClassification"),Qko=o(" (ALBERT model)"),Wko=l(),z4=a("li"),Cde=a("strong"),Hko=o("bert"),Uko=o(" \u2014 "),uj=a("a"),Jko=o("BertForTokenClassification"),Yko=o(" (BERT model)"),Kko=l(),Q4=a("li"),wde=a("strong"),Zko=o("big_bird"),eSo=o(" \u2014 "),bj=a("a"),oSo=o("BigBirdForTokenClassification"),rSo=o(" (BigBird model)"),tSo=l(),W4=a("li"),Ade=a("strong"),aSo=o("camembert"),nSo=o(" \u2014 "),Fj=a("a"),sSo=o("CamembertForTokenClassification"),lSo=o(" (CamemBERT model)"),iSo=l(),H4=a("li"),yde=a("strong"),dSo=o("canine"),cSo=o(" \u2014 "),vj=a("a"),fSo=o("CanineForTokenClassification"),mSo=o(" (Canine model)"),gSo=l(),U4=a("li"),Lde=a("strong"),hSo=o("convbert"),pSo=o(" \u2014 "),Tj=a("a"),_So=o("ConvBertForTokenClassification"),uSo=o(" (ConvBERT model)"),bSo=l(),J4=a("li"),xde=a("strong"),FSo=o("data2vec-text"),vSo=o(" \u2014 "),Mj=a("a"),TSo=o("Data2VecTextForTokenClassification"),MSo=o(" (Data2VecText model)"),ESo=l(),Y4=a("li"),kde=a("strong"),CSo=o("deberta"),wSo=o(" \u2014 "),Ej=a("a"),ASo=o("DebertaForTokenClassification"),ySo=o(" (DeBERTa model)"),LSo=l(),K4=a("li"),Sde=a("strong"),xSo=o("deberta-v2"),kSo=o(" \u2014 "),Cj=a("a"),SSo=o("DebertaV2ForTokenClassification"),RSo=o(" (DeBERTa-v2 model)"),BSo=l(),Z4=a("li"),Rde=a("strong"),PSo=o("distilbert"),$So=o(" \u2014 "),wj=a("a"),ISo=o("DistilBertForTokenClassification"),qSo=o(" (DistilBERT model)"),NSo=l(),eb=a("li"),Bde=a("strong"),jSo=o("electra"),DSo=o(" \u2014 "),Aj=a("a"),GSo=o("ElectraForTokenClassification"),OSo=o(" (ELECTRA model)"),VSo=l(),ob=a("li"),Pde=a("strong"),XSo=o("flaubert"),zSo=o(" \u2014 "),yj=a("a"),QSo=o("FlaubertForTokenClassification"),WSo=o(" (FlauBERT model)"),HSo=l(),rb=a("li"),$de=a("strong"),USo=o("fnet"),JSo=o(" \u2014 "),Lj=a("a"),YSo=o("FNetForTokenClassification"),KSo=o(" (FNet model)"),ZSo=l(),tb=a("li"),Ide=a("strong"),eRo=o("funnel"),oRo=o(" \u2014 "),xj=a("a"),rRo=o("FunnelForTokenClassification"),tRo=o(" (Funnel Transformer model)"),aRo=l(),ab=a("li"),qde=a("strong"),nRo=o("gpt2"),sRo=o(" \u2014 "),kj=a("a"),lRo=o("GPT2ForTokenClassification"),iRo=o(" (OpenAI GPT-2 model)"),dRo=l(),nb=a("li"),Nde=a("strong"),cRo=o("ibert"),fRo=o(" \u2014 "),Sj=a("a"),mRo=o("IBertForTokenClassification"),gRo=o(" (I-BERT model)"),hRo=l(),sb=a("li"),jde=a("strong"),pRo=o("layoutlm"),_Ro=o(" \u2014 "),Rj=a("a"),uRo=o("LayoutLMForTokenClassification"),bRo=o(" (LayoutLM model)"),FRo=l(),lb=a("li"),Dde=a("strong"),vRo=o("layoutlmv2"),TRo=o(" \u2014 "),Bj=a("a"),MRo=o("LayoutLMv2ForTokenClassification"),ERo=o(" (LayoutLMv2 model)"),CRo=l(),ib=a("li"),Gde=a("strong"),wRo=o("longformer"),ARo=o(" \u2014 "),Pj=a("a"),yRo=o("LongformerForTokenClassification"),LRo=o(" (Longformer model)"),xRo=l(),db=a("li"),Ode=a("strong"),kRo=o("megatron-bert"),SRo=o(" \u2014 "),$j=a("a"),RRo=o("MegatronBertForTokenClassification"),BRo=o(" (MegatronBert model)"),PRo=l(),cb=a("li"),Vde=a("strong"),$Ro=o("mobilebert"),IRo=o(" \u2014 "),Ij=a("a"),qRo=o("MobileBertForTokenClassification"),NRo=o(" (MobileBERT model)"),jRo=l(),fb=a("li"),Xde=a("strong"),DRo=o("mpnet"),GRo=o(" \u2014 "),qj=a("a"),ORo=o("MPNetForTokenClassification"),VRo=o(" (MPNet model)"),XRo=l(),mb=a("li"),zde=a("strong"),zRo=o("nystromformer"),QRo=o(" \u2014 "),Nj=a("a"),WRo=o("NystromformerForTokenClassification"),HRo=o(" (Nystromformer model)"),URo=l(),gb=a("li"),Qde=a("strong"),JRo=o("qdqbert"),YRo=o(" \u2014 "),jj=a("a"),KRo=o("QDQBertForTokenClassification"),ZRo=o(" (QDQBert model)"),eBo=l(),hb=a("li"),Wde=a("strong"),oBo=o("rembert"),rBo=o(" \u2014 "),Dj=a("a"),tBo=o("RemBertForTokenClassification"),aBo=o(" (RemBERT model)"),nBo=l(),pb=a("li"),Hde=a("strong"),sBo=o("roberta"),lBo=o(" \u2014 "),Gj=a("a"),iBo=o("RobertaForTokenClassification"),dBo=o(" (RoBERTa model)"),cBo=l(),_b=a("li"),Ude=a("strong"),fBo=o("roformer"),mBo=o(" \u2014 "),Oj=a("a"),gBo=o("RoFormerForTokenClassification"),hBo=o(" (RoFormer model)"),pBo=l(),ub=a("li"),Jde=a("strong"),_Bo=o("squeezebert"),uBo=o(" \u2014 "),Vj=a("a"),bBo=o("SqueezeBertForTokenClassification"),FBo=o(" (SqueezeBERT model)"),vBo=l(),bb=a("li"),Yde=a("strong"),TBo=o("xlm"),MBo=o(" \u2014 "),Xj=a("a"),EBo=o("XLMForTokenClassification"),CBo=o(" (XLM model)"),wBo=l(),Fb=a("li"),Kde=a("strong"),ABo=o("xlm-roberta"),yBo=o(" \u2014 "),zj=a("a"),LBo=o("XLMRobertaForTokenClassification"),xBo=o(" (XLM-RoBERTa model)"),kBo=l(),vb=a("li"),Zde=a("strong"),SBo=o("xlm-roberta-xl"),RBo=o(" \u2014 "),Qj=a("a"),BBo=o("XLMRobertaXLForTokenClassification"),PBo=o(" (XLM-RoBERTa-XL model)"),$Bo=l(),Tb=a("li"),ece=a("strong"),IBo=o("xlnet"),qBo=o(" \u2014 "),Wj=a("a"),NBo=o("XLNetForTokenClassification"),jBo=o(" (XLNet model)"),DBo=l(),Mb=a("li"),oce=a("strong"),GBo=o("yoso"),OBo=o(" \u2014 "),Hj=a("a"),VBo=o("YosoForTokenClassification"),XBo=o(" (YOSO model)"),zBo=l(),Eb=a("p"),QBo=o("The model is set in evaluation mode by default using "),rce=a("code"),WBo=o("model.eval()"),HBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=a("code"),UBo=o("model.train()"),JBo=l(),ace=a("p"),YBo=o("Examples:"),KBo=l(),f(pA.$$.fragment),iBe=l(),Ed=a("h2"),Cb=a("a"),nce=a("span"),f(_A.$$.fragment),ZBo=l(),sce=a("span"),ePo=o("AutoModelForQuestionAnswering"),dBe=l(),nr=a("div"),f(uA.$$.fragment),oPo=l(),Cd=a("p"),rPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Uj=a("a"),tPo=o("from_pretrained()"),aPo=o(" class method or the "),Jj=a("a"),nPo=o("from_config()"),sPo=o(` class
method.`),lPo=l(),bA=a("p"),iPo=o("This class cannot be instantiated directly using "),lce=a("code"),dPo=o("__init__()"),cPo=o(" (throws an error)."),fPo=l(),Zr=a("div"),f(FA.$$.fragment),mPo=l(),ice=a("p"),gPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hPo=l(),wd=a("p"),pPo=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),_Po=o("not"),uPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=a("a"),bPo=o("from_pretrained()"),FPo=o(" to load the model weights."),vPo=l(),cce=a("p"),TPo=o("Examples:"),MPo=l(),f(vA.$$.fragment),EPo=l(),Qe=a("div"),f(TA.$$.fragment),CPo=l(),fce=a("p"),wPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),APo=l(),Za=a("p"),yPo=o("The model class to instantiate is selected based on the "),mce=a("code"),LPo=o("model_type"),xPo=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),kPo=o("pretrained_model_name_or_path"),SPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),RPo=o("pretrained_model_name_or_path"),BPo=o(":"),PPo=l(),R=a("ul"),wb=a("li"),pce=a("strong"),$Po=o("albert"),IPo=o(" \u2014 "),Kj=a("a"),qPo=o("AlbertForQuestionAnswering"),NPo=o(" (ALBERT model)"),jPo=l(),Ab=a("li"),_ce=a("strong"),DPo=o("bart"),GPo=o(" \u2014 "),Zj=a("a"),OPo=o("BartForQuestionAnswering"),VPo=o(" (BART model)"),XPo=l(),yb=a("li"),uce=a("strong"),zPo=o("bert"),QPo=o(" \u2014 "),eD=a("a"),WPo=o("BertForQuestionAnswering"),HPo=o(" (BERT model)"),UPo=l(),Lb=a("li"),bce=a("strong"),JPo=o("big_bird"),YPo=o(" \u2014 "),oD=a("a"),KPo=o("BigBirdForQuestionAnswering"),ZPo=o(" (BigBird model)"),e$o=l(),xb=a("li"),Fce=a("strong"),o$o=o("bigbird_pegasus"),r$o=o(" \u2014 "),rD=a("a"),t$o=o("BigBirdPegasusForQuestionAnswering"),a$o=o(" (BigBirdPegasus model)"),n$o=l(),kb=a("li"),vce=a("strong"),s$o=o("camembert"),l$o=o(" \u2014 "),tD=a("a"),i$o=o("CamembertForQuestionAnswering"),d$o=o(" (CamemBERT model)"),c$o=l(),Sb=a("li"),Tce=a("strong"),f$o=o("canine"),m$o=o(" \u2014 "),aD=a("a"),g$o=o("CanineForQuestionAnswering"),h$o=o(" (Canine model)"),p$o=l(),Rb=a("li"),Mce=a("strong"),_$o=o("convbert"),u$o=o(" \u2014 "),nD=a("a"),b$o=o("ConvBertForQuestionAnswering"),F$o=o(" (ConvBERT model)"),v$o=l(),Bb=a("li"),Ece=a("strong"),T$o=o("data2vec-text"),M$o=o(" \u2014 "),sD=a("a"),E$o=o("Data2VecTextForQuestionAnswering"),C$o=o(" (Data2VecText model)"),w$o=l(),Pb=a("li"),Cce=a("strong"),A$o=o("deberta"),y$o=o(" \u2014 "),lD=a("a"),L$o=o("DebertaForQuestionAnswering"),x$o=o(" (DeBERTa model)"),k$o=l(),$b=a("li"),wce=a("strong"),S$o=o("deberta-v2"),R$o=o(" \u2014 "),iD=a("a"),B$o=o("DebertaV2ForQuestionAnswering"),P$o=o(" (DeBERTa-v2 model)"),$$o=l(),Ib=a("li"),Ace=a("strong"),I$o=o("distilbert"),q$o=o(" \u2014 "),dD=a("a"),N$o=o("DistilBertForQuestionAnswering"),j$o=o(" (DistilBERT model)"),D$o=l(),qb=a("li"),yce=a("strong"),G$o=o("electra"),O$o=o(" \u2014 "),cD=a("a"),V$o=o("ElectraForQuestionAnswering"),X$o=o(" (ELECTRA model)"),z$o=l(),Nb=a("li"),Lce=a("strong"),Q$o=o("flaubert"),W$o=o(" \u2014 "),fD=a("a"),H$o=o("FlaubertForQuestionAnsweringSimple"),U$o=o(" (FlauBERT model)"),J$o=l(),jb=a("li"),xce=a("strong"),Y$o=o("fnet"),K$o=o(" \u2014 "),mD=a("a"),Z$o=o("FNetForQuestionAnswering"),eIo=o(" (FNet model)"),oIo=l(),Db=a("li"),kce=a("strong"),rIo=o("funnel"),tIo=o(" \u2014 "),gD=a("a"),aIo=o("FunnelForQuestionAnswering"),nIo=o(" (Funnel Transformer model)"),sIo=l(),Gb=a("li"),Sce=a("strong"),lIo=o("gptj"),iIo=o(" \u2014 "),hD=a("a"),dIo=o("GPTJForQuestionAnswering"),cIo=o(" (GPT-J model)"),fIo=l(),Ob=a("li"),Rce=a("strong"),mIo=o("ibert"),gIo=o(" \u2014 "),pD=a("a"),hIo=o("IBertForQuestionAnswering"),pIo=o(" (I-BERT model)"),_Io=l(),Vb=a("li"),Bce=a("strong"),uIo=o("layoutlmv2"),bIo=o(" \u2014 "),_D=a("a"),FIo=o("LayoutLMv2ForQuestionAnswering"),vIo=o(" (LayoutLMv2 model)"),TIo=l(),Xb=a("li"),Pce=a("strong"),MIo=o("led"),EIo=o(" \u2014 "),uD=a("a"),CIo=o("LEDForQuestionAnswering"),wIo=o(" (LED model)"),AIo=l(),zb=a("li"),$ce=a("strong"),yIo=o("longformer"),LIo=o(" \u2014 "),bD=a("a"),xIo=o("LongformerForQuestionAnswering"),kIo=o(" (Longformer model)"),SIo=l(),Qb=a("li"),Ice=a("strong"),RIo=o("lxmert"),BIo=o(" \u2014 "),FD=a("a"),PIo=o("LxmertForQuestionAnswering"),$Io=o(" (LXMERT model)"),IIo=l(),Wb=a("li"),qce=a("strong"),qIo=o("mbart"),NIo=o(" \u2014 "),vD=a("a"),jIo=o("MBartForQuestionAnswering"),DIo=o(" (mBART model)"),GIo=l(),Hb=a("li"),Nce=a("strong"),OIo=o("megatron-bert"),VIo=o(" \u2014 "),TD=a("a"),XIo=o("MegatronBertForQuestionAnswering"),zIo=o(" (MegatronBert model)"),QIo=l(),Ub=a("li"),jce=a("strong"),WIo=o("mobilebert"),HIo=o(" \u2014 "),MD=a("a"),UIo=o("MobileBertForQuestionAnswering"),JIo=o(" (MobileBERT model)"),YIo=l(),Jb=a("li"),Dce=a("strong"),KIo=o("mpnet"),ZIo=o(" \u2014 "),ED=a("a"),eqo=o("MPNetForQuestionAnswering"),oqo=o(" (MPNet model)"),rqo=l(),Yb=a("li"),Gce=a("strong"),tqo=o("nystromformer"),aqo=o(" \u2014 "),CD=a("a"),nqo=o("NystromformerForQuestionAnswering"),sqo=o(" (Nystromformer model)"),lqo=l(),Kb=a("li"),Oce=a("strong"),iqo=o("qdqbert"),dqo=o(" \u2014 "),wD=a("a"),cqo=o("QDQBertForQuestionAnswering"),fqo=o(" (QDQBert model)"),mqo=l(),Zb=a("li"),Vce=a("strong"),gqo=o("reformer"),hqo=o(" \u2014 "),AD=a("a"),pqo=o("ReformerForQuestionAnswering"),_qo=o(" (Reformer model)"),uqo=l(),e5=a("li"),Xce=a("strong"),bqo=o("rembert"),Fqo=o(" \u2014 "),yD=a("a"),vqo=o("RemBertForQuestionAnswering"),Tqo=o(" (RemBERT model)"),Mqo=l(),o5=a("li"),zce=a("strong"),Eqo=o("roberta"),Cqo=o(" \u2014 "),LD=a("a"),wqo=o("RobertaForQuestionAnswering"),Aqo=o(" (RoBERTa model)"),yqo=l(),r5=a("li"),Qce=a("strong"),Lqo=o("roformer"),xqo=o(" \u2014 "),xD=a("a"),kqo=o("RoFormerForQuestionAnswering"),Sqo=o(" (RoFormer model)"),Rqo=l(),t5=a("li"),Wce=a("strong"),Bqo=o("splinter"),Pqo=o(" \u2014 "),kD=a("a"),$qo=o("SplinterForQuestionAnswering"),Iqo=o(" (Splinter model)"),qqo=l(),a5=a("li"),Hce=a("strong"),Nqo=o("squeezebert"),jqo=o(" \u2014 "),SD=a("a"),Dqo=o("SqueezeBertForQuestionAnswering"),Gqo=o(" (SqueezeBERT model)"),Oqo=l(),n5=a("li"),Uce=a("strong"),Vqo=o("xlm"),Xqo=o(" \u2014 "),RD=a("a"),zqo=o("XLMForQuestionAnsweringSimple"),Qqo=o(" (XLM model)"),Wqo=l(),s5=a("li"),Jce=a("strong"),Hqo=o("xlm-roberta"),Uqo=o(" \u2014 "),BD=a("a"),Jqo=o("XLMRobertaForQuestionAnswering"),Yqo=o(" (XLM-RoBERTa model)"),Kqo=l(),l5=a("li"),Yce=a("strong"),Zqo=o("xlm-roberta-xl"),eNo=o(" \u2014 "),PD=a("a"),oNo=o("XLMRobertaXLForQuestionAnswering"),rNo=o(" (XLM-RoBERTa-XL model)"),tNo=l(),i5=a("li"),Kce=a("strong"),aNo=o("xlnet"),nNo=o(" \u2014 "),$D=a("a"),sNo=o("XLNetForQuestionAnsweringSimple"),lNo=o(" (XLNet model)"),iNo=l(),d5=a("li"),Zce=a("strong"),dNo=o("yoso"),cNo=o(" \u2014 "),ID=a("a"),fNo=o("YosoForQuestionAnswering"),mNo=o(" (YOSO model)"),gNo=l(),c5=a("p"),hNo=o("The model is set in evaluation mode by default using "),efe=a("code"),pNo=o("model.eval()"),_No=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),uNo=o("model.train()"),bNo=l(),rfe=a("p"),FNo=o("Examples:"),vNo=l(),f(MA.$$.fragment),cBe=l(),Ad=a("h2"),f5=a("a"),tfe=a("span"),f(EA.$$.fragment),TNo=l(),afe=a("span"),MNo=o("AutoModelForTableQuestionAnswering"),fBe=l(),sr=a("div"),f(CA.$$.fragment),ENo=l(),yd=a("p"),CNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qD=a("a"),wNo=o("from_pretrained()"),ANo=o(" class method or the "),ND=a("a"),yNo=o("from_config()"),LNo=o(` class
method.`),xNo=l(),wA=a("p"),kNo=o("This class cannot be instantiated directly using "),nfe=a("code"),SNo=o("__init__()"),RNo=o(" (throws an error)."),BNo=l(),et=a("div"),f(AA.$$.fragment),PNo=l(),sfe=a("p"),$No=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),INo=l(),Ld=a("p"),qNo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),NNo=o("not"),jNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),DNo=o("from_pretrained()"),GNo=o(" to load the model weights."),ONo=l(),ife=a("p"),VNo=o("Examples:"),XNo=l(),f(yA.$$.fragment),zNo=l(),We=a("div"),f(LA.$$.fragment),QNo=l(),dfe=a("p"),WNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),HNo=l(),en=a("p"),UNo=o("The model class to instantiate is selected based on the "),cfe=a("code"),JNo=o("model_type"),YNo=o(` property of the config object (either
passed as an argument or loaded from `),ffe=a("code"),KNo=o("pretrained_model_name_or_path"),ZNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),ejo=o("pretrained_model_name_or_path"),ojo=o(":"),rjo=l(),gfe=a("ul"),m5=a("li"),hfe=a("strong"),tjo=o("tapas"),ajo=o(" \u2014 "),DD=a("a"),njo=o("TapasForQuestionAnswering"),sjo=o(" (TAPAS model)"),ljo=l(),g5=a("p"),ijo=o("The model is set in evaluation mode by default using "),pfe=a("code"),djo=o("model.eval()"),cjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=a("code"),fjo=o("model.train()"),mjo=l(),ufe=a("p"),gjo=o("Examples:"),hjo=l(),f(xA.$$.fragment),mBe=l(),xd=a("h2"),h5=a("a"),bfe=a("span"),f(kA.$$.fragment),pjo=l(),Ffe=a("span"),_jo=o("AutoModelForImageClassification"),gBe=l(),lr=a("div"),f(SA.$$.fragment),ujo=l(),kd=a("p"),bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GD=a("a"),Fjo=o("from_pretrained()"),vjo=o(" class method or the "),OD=a("a"),Tjo=o("from_config()"),Mjo=o(` class
method.`),Ejo=l(),RA=a("p"),Cjo=o("This class cannot be instantiated directly using "),vfe=a("code"),wjo=o("__init__()"),Ajo=o(" (throws an error)."),yjo=l(),ot=a("div"),f(BA.$$.fragment),Ljo=l(),Tfe=a("p"),xjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kjo=l(),Sd=a("p"),Sjo=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),Rjo=o("not"),Bjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),Pjo=o("from_pretrained()"),$jo=o(" to load the model weights."),Ijo=l(),Efe=a("p"),qjo=o("Examples:"),Njo=l(),f(PA.$$.fragment),jjo=l(),He=a("div"),f($A.$$.fragment),Djo=l(),Cfe=a("p"),Gjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ojo=l(),on=a("p"),Vjo=o("The model class to instantiate is selected based on the "),wfe=a("code"),Xjo=o("model_type"),zjo=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),Qjo=o("pretrained_model_name_or_path"),Wjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(":"),Jjo=l(),ce=a("ul"),p5=a("li"),Lfe=a("strong"),Yjo=o("beit"),Kjo=o(" \u2014 "),XD=a("a"),Zjo=o("BeitForImageClassification"),eDo=o(" (BEiT model)"),oDo=l(),_5=a("li"),xfe=a("strong"),rDo=o("convnext"),tDo=o(" \u2014 "),zD=a("a"),aDo=o("ConvNextForImageClassification"),nDo=o(" (ConvNext model)"),sDo=l(),Ds=a("li"),kfe=a("strong"),lDo=o("deit"),iDo=o(" \u2014 "),QD=a("a"),dDo=o("DeiTForImageClassification"),cDo=o(" or "),WD=a("a"),fDo=o("DeiTForImageClassificationWithTeacher"),mDo=o(" (DeiT model)"),gDo=l(),u5=a("li"),Sfe=a("strong"),hDo=o("imagegpt"),pDo=o(" \u2014 "),HD=a("a"),_Do=o("ImageGPTForImageClassification"),uDo=o(" (ImageGPT model)"),bDo=l(),ma=a("li"),Rfe=a("strong"),FDo=o("perceiver"),vDo=o(" \u2014 "),UD=a("a"),TDo=o("PerceiverForImageClassificationLearned"),MDo=o(" or "),JD=a("a"),EDo=o("PerceiverForImageClassificationFourier"),CDo=o(" or "),YD=a("a"),wDo=o("PerceiverForImageClassificationConvProcessing"),ADo=o(" (Perceiver model)"),yDo=l(),b5=a("li"),Bfe=a("strong"),LDo=o("poolformer"),xDo=o(" \u2014 "),KD=a("a"),kDo=o("PoolFormerForImageClassification"),SDo=o(" (PoolFormer model)"),RDo=l(),F5=a("li"),Pfe=a("strong"),BDo=o("regnet"),PDo=o(" \u2014 "),ZD=a("a"),$Do=o("RegNetForImageClassification"),IDo=o(" (RegNet model)"),qDo=l(),v5=a("li"),$fe=a("strong"),NDo=o("resnet"),jDo=o(" \u2014 "),eG=a("a"),DDo=o("ResNetForImageClassification"),GDo=o(" (ResNet model)"),ODo=l(),T5=a("li"),Ife=a("strong"),VDo=o("segformer"),XDo=o(" \u2014 "),oG=a("a"),zDo=o("SegformerForImageClassification"),QDo=o(" (SegFormer model)"),WDo=l(),M5=a("li"),qfe=a("strong"),HDo=o("swin"),UDo=o(" \u2014 "),rG=a("a"),JDo=o("SwinForImageClassification"),YDo=o(" (Swin model)"),KDo=l(),E5=a("li"),Nfe=a("strong"),ZDo=o("van"),eGo=o(" \u2014 "),tG=a("a"),oGo=o("VanForImageClassification"),rGo=o(" (VAN model)"),tGo=l(),C5=a("li"),jfe=a("strong"),aGo=o("vit"),nGo=o(" \u2014 "),aG=a("a"),sGo=o("ViTForImageClassification"),lGo=o(" (ViT model)"),iGo=l(),w5=a("p"),dGo=o("The model is set in evaluation mode by default using "),Dfe=a("code"),cGo=o("model.eval()"),fGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),mGo=o("model.train()"),gGo=l(),Ofe=a("p"),hGo=o("Examples:"),pGo=l(),f(IA.$$.fragment),hBe=l(),Rd=a("h2"),A5=a("a"),Vfe=a("span"),f(qA.$$.fragment),_Go=l(),Xfe=a("span"),uGo=o("AutoModelForVision2Seq"),pBe=l(),ir=a("div"),f(NA.$$.fragment),bGo=l(),Bd=a("p"),FGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nG=a("a"),vGo=o("from_pretrained()"),TGo=o(" class method or the "),sG=a("a"),MGo=o("from_config()"),EGo=o(` class
method.`),CGo=l(),jA=a("p"),wGo=o("This class cannot be instantiated directly using "),zfe=a("code"),AGo=o("__init__()"),yGo=o(" (throws an error)."),LGo=l(),rt=a("div"),f(DA.$$.fragment),xGo=l(),Qfe=a("p"),kGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),SGo=l(),Pd=a("p"),RGo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),BGo=o("not"),PGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),$Go=o("from_pretrained()"),IGo=o(" to load the model weights."),qGo=l(),Hfe=a("p"),NGo=o("Examples:"),jGo=l(),f(GA.$$.fragment),DGo=l(),Ue=a("div"),f(OA.$$.fragment),GGo=l(),Ufe=a("p"),OGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),VGo=l(),rn=a("p"),XGo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),zGo=o("model_type"),QGo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),WGo=o("pretrained_model_name_or_path"),HGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),UGo=o("pretrained_model_name_or_path"),JGo=o(":"),YGo=l(),Zfe=a("ul"),y5=a("li"),eme=a("strong"),KGo=o("vision-encoder-decoder"),ZGo=o(" \u2014 "),iG=a("a"),eOo=o("VisionEncoderDecoderModel"),oOo=o(" (Vision Encoder decoder model)"),rOo=l(),L5=a("p"),tOo=o("The model is set in evaluation mode by default using "),ome=a("code"),aOo=o("model.eval()"),nOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=a("code"),sOo=o("model.train()"),lOo=l(),tme=a("p"),iOo=o("Examples:"),dOo=l(),f(VA.$$.fragment),_Be=l(),$d=a("h2"),x5=a("a"),ame=a("span"),f(XA.$$.fragment),cOo=l(),nme=a("span"),fOo=o("AutoModelForAudioClassification"),uBe=l(),dr=a("div"),f(zA.$$.fragment),mOo=l(),Id=a("p"),gOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dG=a("a"),hOo=o("from_pretrained()"),pOo=o(" class method or the "),cG=a("a"),_Oo=o("from_config()"),uOo=o(` class
method.`),bOo=l(),QA=a("p"),FOo=o("This class cannot be instantiated directly using "),sme=a("code"),vOo=o("__init__()"),TOo=o(" (throws an error)."),MOo=l(),tt=a("div"),f(WA.$$.fragment),EOo=l(),lme=a("p"),COo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wOo=l(),qd=a("p"),AOo=o(`Note:
Loading a model from its configuration file does `),ime=a("strong"),yOo=o("not"),LOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),xOo=o("from_pretrained()"),kOo=o(" to load the model weights."),SOo=l(),dme=a("p"),ROo=o("Examples:"),BOo=l(),f(HA.$$.fragment),POo=l(),Je=a("div"),f(UA.$$.fragment),$Oo=l(),cme=a("p"),IOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qOo=l(),tn=a("p"),NOo=o("The model class to instantiate is selected based on the "),fme=a("code"),jOo=o("model_type"),DOo=o(` property of the config object (either
passed as an argument or loaded from `),mme=a("code"),GOo=o("pretrained_model_name_or_path"),OOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=a("code"),VOo=o("pretrained_model_name_or_path"),XOo=o(":"),zOo=l(),Se=a("ul"),k5=a("li"),hme=a("strong"),QOo=o("data2vec-audio"),WOo=o(" \u2014 "),mG=a("a"),HOo=o("Data2VecAudioForSequenceClassification"),UOo=o(" (Data2VecAudio model)"),JOo=l(),S5=a("li"),pme=a("strong"),YOo=o("hubert"),KOo=o(" \u2014 "),gG=a("a"),ZOo=o("HubertForSequenceClassification"),eVo=o(" (Hubert model)"),oVo=l(),R5=a("li"),_me=a("strong"),rVo=o("sew"),tVo=o(" \u2014 "),hG=a("a"),aVo=o("SEWForSequenceClassification"),nVo=o(" (SEW model)"),sVo=l(),B5=a("li"),ume=a("strong"),lVo=o("sew-d"),iVo=o(" \u2014 "),pG=a("a"),dVo=o("SEWDForSequenceClassification"),cVo=o(" (SEW-D model)"),fVo=l(),P5=a("li"),bme=a("strong"),mVo=o("unispeech"),gVo=o(" \u2014 "),_G=a("a"),hVo=o("UniSpeechForSequenceClassification"),pVo=o(" (UniSpeech model)"),_Vo=l(),$5=a("li"),Fme=a("strong"),uVo=o("unispeech-sat"),bVo=o(" \u2014 "),uG=a("a"),FVo=o("UniSpeechSatForSequenceClassification"),vVo=o(" (UniSpeechSat model)"),TVo=l(),I5=a("li"),vme=a("strong"),MVo=o("wav2vec2"),EVo=o(" \u2014 "),bG=a("a"),CVo=o("Wav2Vec2ForSequenceClassification"),wVo=o(" (Wav2Vec2 model)"),AVo=l(),q5=a("li"),Tme=a("strong"),yVo=o("wavlm"),LVo=o(" \u2014 "),FG=a("a"),xVo=o("WavLMForSequenceClassification"),kVo=o(" (WavLM model)"),SVo=l(),N5=a("p"),RVo=o("The model is set in evaluation mode by default using "),Mme=a("code"),BVo=o("model.eval()"),PVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=a("code"),$Vo=o("model.train()"),IVo=l(),Cme=a("p"),qVo=o("Examples:"),NVo=l(),f(JA.$$.fragment),bBe=l(),Nd=a("h2"),j5=a("a"),wme=a("span"),f(YA.$$.fragment),jVo=l(),Ame=a("span"),DVo=o("AutoModelForAudioFrameClassification"),FBe=l(),cr=a("div"),f(KA.$$.fragment),GVo=l(),jd=a("p"),OVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),vG=a("a"),VVo=o("from_pretrained()"),XVo=o(" class method or the "),TG=a("a"),zVo=o("from_config()"),QVo=o(` class
method.`),WVo=l(),ZA=a("p"),HVo=o("This class cannot be instantiated directly using "),yme=a("code"),UVo=o("__init__()"),JVo=o(" (throws an error)."),YVo=l(),at=a("div"),f(e0.$$.fragment),KVo=l(),Lme=a("p"),ZVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eXo=l(),Dd=a("p"),oXo=o(`Note:
Loading a model from its configuration file does `),xme=a("strong"),rXo=o("not"),tXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),aXo=o("from_pretrained()"),nXo=o(" to load the model weights."),sXo=l(),kme=a("p"),lXo=o("Examples:"),iXo=l(),f(o0.$$.fragment),dXo=l(),Ye=a("div"),f(r0.$$.fragment),cXo=l(),Sme=a("p"),fXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mXo=l(),an=a("p"),gXo=o("The model class to instantiate is selected based on the "),Rme=a("code"),hXo=o("model_type"),pXo=o(` property of the config object (either
passed as an argument or loaded from `),Bme=a("code"),_Xo=o("pretrained_model_name_or_path"),uXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=a("code"),bXo=o("pretrained_model_name_or_path"),FXo=o(":"),vXo=l(),nn=a("ul"),D5=a("li"),$me=a("strong"),TXo=o("data2vec-audio"),MXo=o(" \u2014 "),EG=a("a"),EXo=o("Data2VecAudioForAudioFrameClassification"),CXo=o(" (Data2VecAudio model)"),wXo=l(),G5=a("li"),Ime=a("strong"),AXo=o("unispeech-sat"),yXo=o(" \u2014 "),CG=a("a"),LXo=o("UniSpeechSatForAudioFrameClassification"),xXo=o(" (UniSpeechSat model)"),kXo=l(),O5=a("li"),qme=a("strong"),SXo=o("wav2vec2"),RXo=o(" \u2014 "),wG=a("a"),BXo=o("Wav2Vec2ForAudioFrameClassification"),PXo=o(" (Wav2Vec2 model)"),$Xo=l(),V5=a("li"),Nme=a("strong"),IXo=o("wavlm"),qXo=o(" \u2014 "),AG=a("a"),NXo=o("WavLMForAudioFrameClassification"),jXo=o(" (WavLM model)"),DXo=l(),X5=a("p"),GXo=o("The model is set in evaluation mode by default using "),jme=a("code"),OXo=o("model.eval()"),VXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),XXo=o("model.train()"),zXo=l(),Gme=a("p"),QXo=o("Examples:"),WXo=l(),f(t0.$$.fragment),vBe=l(),Gd=a("h2"),z5=a("a"),Ome=a("span"),f(a0.$$.fragment),HXo=l(),Vme=a("span"),UXo=o("AutoModelForCTC"),TBe=l(),fr=a("div"),f(n0.$$.fragment),JXo=l(),Od=a("p"),YXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yG=a("a"),KXo=o("from_pretrained()"),ZXo=o(" class method or the "),LG=a("a"),ezo=o("from_config()"),ozo=o(` class
method.`),rzo=l(),s0=a("p"),tzo=o("This class cannot be instantiated directly using "),Xme=a("code"),azo=o("__init__()"),nzo=o(" (throws an error)."),szo=l(),nt=a("div"),f(l0.$$.fragment),lzo=l(),zme=a("p"),izo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dzo=l(),Vd=a("p"),czo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),fzo=o("not"),mzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),gzo=o("from_pretrained()"),hzo=o(" to load the model weights."),pzo=l(),Wme=a("p"),_zo=o("Examples:"),uzo=l(),f(i0.$$.fragment),bzo=l(),Ke=a("div"),f(d0.$$.fragment),Fzo=l(),Hme=a("p"),vzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Tzo=l(),sn=a("p"),Mzo=o("The model class to instantiate is selected based on the "),Ume=a("code"),Ezo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),wzo=o("pretrained_model_name_or_path"),Azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),yzo=o("pretrained_model_name_or_path"),Lzo=o(":"),xzo=l(),Re=a("ul"),Q5=a("li"),Kme=a("strong"),kzo=o("data2vec-audio"),Szo=o(" \u2014 "),kG=a("a"),Rzo=o("Data2VecAudioForCTC"),Bzo=o(" (Data2VecAudio model)"),Pzo=l(),W5=a("li"),Zme=a("strong"),$zo=o("hubert"),Izo=o(" \u2014 "),SG=a("a"),qzo=o("HubertForCTC"),Nzo=o(" (Hubert model)"),jzo=l(),H5=a("li"),ege=a("strong"),Dzo=o("sew"),Gzo=o(" \u2014 "),RG=a("a"),Ozo=o("SEWForCTC"),Vzo=o(" (SEW model)"),Xzo=l(),U5=a("li"),oge=a("strong"),zzo=o("sew-d"),Qzo=o(" \u2014 "),BG=a("a"),Wzo=o("SEWDForCTC"),Hzo=o(" (SEW-D model)"),Uzo=l(),J5=a("li"),rge=a("strong"),Jzo=o("unispeech"),Yzo=o(" \u2014 "),PG=a("a"),Kzo=o("UniSpeechForCTC"),Zzo=o(" (UniSpeech model)"),eQo=l(),Y5=a("li"),tge=a("strong"),oQo=o("unispeech-sat"),rQo=o(" \u2014 "),$G=a("a"),tQo=o("UniSpeechSatForCTC"),aQo=o(" (UniSpeechSat model)"),nQo=l(),K5=a("li"),age=a("strong"),sQo=o("wav2vec2"),lQo=o(" \u2014 "),IG=a("a"),iQo=o("Wav2Vec2ForCTC"),dQo=o(" (Wav2Vec2 model)"),cQo=l(),Z5=a("li"),nge=a("strong"),fQo=o("wavlm"),mQo=o(" \u2014 "),qG=a("a"),gQo=o("WavLMForCTC"),hQo=o(" (WavLM model)"),pQo=l(),e2=a("p"),_Qo=o("The model is set in evaluation mode by default using "),sge=a("code"),uQo=o("model.eval()"),bQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=a("code"),FQo=o("model.train()"),vQo=l(),ige=a("p"),TQo=o("Examples:"),MQo=l(),f(c0.$$.fragment),MBe=l(),Xd=a("h2"),o2=a("a"),dge=a("span"),f(f0.$$.fragment),EQo=l(),cge=a("span"),CQo=o("AutoModelForSpeechSeq2Seq"),EBe=l(),mr=a("div"),f(m0.$$.fragment),wQo=l(),zd=a("p"),AQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NG=a("a"),yQo=o("from_pretrained()"),LQo=o(" class method or the "),jG=a("a"),xQo=o("from_config()"),kQo=o(` class
method.`),SQo=l(),g0=a("p"),RQo=o("This class cannot be instantiated directly using "),fge=a("code"),BQo=o("__init__()"),PQo=o(" (throws an error)."),$Qo=l(),st=a("div"),f(h0.$$.fragment),IQo=l(),mge=a("p"),qQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NQo=l(),Qd=a("p"),jQo=o(`Note:
Loading a model from its configuration file does `),gge=a("strong"),DQo=o("not"),GQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),OQo=o("from_pretrained()"),VQo=o(" to load the model weights."),XQo=l(),hge=a("p"),zQo=o("Examples:"),QQo=l(),f(p0.$$.fragment),WQo=l(),Ze=a("div"),f(_0.$$.fragment),HQo=l(),pge=a("p"),UQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JQo=l(),ln=a("p"),YQo=o("The model class to instantiate is selected based on the "),_ge=a("code"),KQo=o("model_type"),ZQo=o(` property of the config object (either
passed as an argument or loaded from `),uge=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(":"),aWo=l(),u0=a("ul"),r2=a("li"),Fge=a("strong"),nWo=o("speech-encoder-decoder"),sWo=o(" \u2014 "),GG=a("a"),lWo=o("SpeechEncoderDecoderModel"),iWo=o(" (Speech Encoder decoder model)"),dWo=l(),t2=a("li"),vge=a("strong"),cWo=o("speech_to_text"),fWo=o(" \u2014 "),OG=a("a"),mWo=o("Speech2TextForConditionalGeneration"),gWo=o(" (Speech2Text model)"),hWo=l(),a2=a("p"),pWo=o("The model is set in evaluation mode by default using "),Tge=a("code"),_Wo=o("model.eval()"),uWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),bWo=o("model.train()"),FWo=l(),Ege=a("p"),vWo=o("Examples:"),TWo=l(),f(b0.$$.fragment),CBe=l(),Wd=a("h2"),n2=a("a"),Cge=a("span"),f(F0.$$.fragment),MWo=l(),wge=a("span"),EWo=o("AutoModelForAudioXVector"),wBe=l(),gr=a("div"),f(v0.$$.fragment),CWo=l(),Hd=a("p"),wWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VG=a("a"),AWo=o("from_pretrained()"),yWo=o(" class method or the "),XG=a("a"),LWo=o("from_config()"),xWo=o(` class
method.`),kWo=l(),T0=a("p"),SWo=o("This class cannot be instantiated directly using "),Age=a("code"),RWo=o("__init__()"),BWo=o(" (throws an error)."),PWo=l(),lt=a("div"),f(M0.$$.fragment),$Wo=l(),yge=a("p"),IWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qWo=l(),Ud=a("p"),NWo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),jWo=o("not"),DWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),GWo=o("from_pretrained()"),OWo=o(" to load the model weights."),VWo=l(),xge=a("p"),XWo=o("Examples:"),zWo=l(),f(E0.$$.fragment),QWo=l(),eo=a("div"),f(C0.$$.fragment),WWo=l(),kge=a("p"),HWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),UWo=l(),dn=a("p"),JWo=o("The model class to instantiate is selected based on the "),Sge=a("code"),YWo=o("model_type"),KWo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),ZWo=o("pretrained_model_name_or_path"),eHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),oHo=o("pretrained_model_name_or_path"),rHo=o(":"),tHo=l(),cn=a("ul"),s2=a("li"),Pge=a("strong"),aHo=o("data2vec-audio"),nHo=o(" \u2014 "),QG=a("a"),sHo=o("Data2VecAudioForXVector"),lHo=o(" (Data2VecAudio model)"),iHo=l(),l2=a("li"),$ge=a("strong"),dHo=o("unispeech-sat"),cHo=o(" \u2014 "),WG=a("a"),fHo=o("UniSpeechSatForXVector"),mHo=o(" (UniSpeechSat model)"),gHo=l(),i2=a("li"),Ige=a("strong"),hHo=o("wav2vec2"),pHo=o(" \u2014 "),HG=a("a"),_Ho=o("Wav2Vec2ForXVector"),uHo=o(" (Wav2Vec2 model)"),bHo=l(),d2=a("li"),qge=a("strong"),FHo=o("wavlm"),vHo=o(" \u2014 "),UG=a("a"),THo=o("WavLMForXVector"),MHo=o(" (WavLM model)"),EHo=l(),c2=a("p"),CHo=o("The model is set in evaluation mode by default using "),Nge=a("code"),wHo=o("model.eval()"),AHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=a("code"),yHo=o("model.train()"),LHo=l(),Dge=a("p"),xHo=o("Examples:"),kHo=l(),f(w0.$$.fragment),ABe=l(),Jd=a("h2"),f2=a("a"),Gge=a("span"),f(A0.$$.fragment),SHo=l(),Oge=a("span"),RHo=o("AutoModelForMaskedImageModeling"),yBe=l(),hr=a("div"),f(y0.$$.fragment),BHo=l(),Yd=a("p"),PHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),JG=a("a"),$Ho=o("from_pretrained()"),IHo=o(" class method or the "),YG=a("a"),qHo=o("from_config()"),NHo=o(` class
method.`),jHo=l(),L0=a("p"),DHo=o("This class cannot be instantiated directly using "),Vge=a("code"),GHo=o("__init__()"),OHo=o(" (throws an error)."),VHo=l(),it=a("div"),f(x0.$$.fragment),XHo=l(),Xge=a("p"),zHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QHo=l(),Kd=a("p"),WHo=o(`Note:
Loading a model from its configuration file does `),zge=a("strong"),HHo=o("not"),UHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),JHo=o("from_pretrained()"),YHo=o(" to load the model weights."),KHo=l(),Qge=a("p"),ZHo=o("Examples:"),eUo=l(),f(k0.$$.fragment),oUo=l(),oo=a("div"),f(S0.$$.fragment),rUo=l(),Wge=a("p"),tUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aUo=l(),fn=a("p"),nUo=o("The model class to instantiate is selected based on the "),Hge=a("code"),sUo=o("model_type"),lUo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),cUo=o("pretrained_model_name_or_path"),fUo=o(":"),mUo=l(),Zd=a("ul"),m2=a("li"),Yge=a("strong"),gUo=o("deit"),hUo=o(" \u2014 "),ZG=a("a"),pUo=o("DeiTForMaskedImageModeling"),_Uo=o(" (DeiT model)"),uUo=l(),g2=a("li"),Kge=a("strong"),bUo=o("swin"),FUo=o(" \u2014 "),eO=a("a"),vUo=o("SwinForMaskedImageModeling"),TUo=o(" (Swin model)"),MUo=l(),h2=a("li"),Zge=a("strong"),EUo=o("vit"),CUo=o(" \u2014 "),oO=a("a"),wUo=o("ViTForMaskedImageModeling"),AUo=o(" (ViT model)"),yUo=l(),p2=a("p"),LUo=o("The model is set in evaluation mode by default using "),ehe=a("code"),xUo=o("model.eval()"),kUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),SUo=o("model.train()"),RUo=l(),rhe=a("p"),BUo=o("Examples:"),PUo=l(),f(R0.$$.fragment),LBe=l(),ec=a("h2"),_2=a("a"),the=a("span"),f(B0.$$.fragment),$Uo=l(),ahe=a("span"),IUo=o("AutoModelForObjectDetection"),xBe=l(),pr=a("div"),f(P0.$$.fragment),qUo=l(),oc=a("p"),NUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),rO=a("a"),jUo=o("from_pretrained()"),DUo=o(" class method or the "),tO=a("a"),GUo=o("from_config()"),OUo=o(` class
method.`),VUo=l(),$0=a("p"),XUo=o("This class cannot be instantiated directly using "),nhe=a("code"),zUo=o("__init__()"),QUo=o(" (throws an error)."),WUo=l(),dt=a("div"),f(I0.$$.fragment),HUo=l(),she=a("p"),UUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JUo=l(),rc=a("p"),YUo=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),KUo=o("not"),ZUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),eJo=o("from_pretrained()"),oJo=o(" to load the model weights."),rJo=l(),ihe=a("p"),tJo=o("Examples:"),aJo=l(),f(q0.$$.fragment),nJo=l(),ro=a("div"),f(N0.$$.fragment),sJo=l(),dhe=a("p"),lJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),iJo=l(),mn=a("p"),dJo=o("The model class to instantiate is selected based on the "),che=a("code"),cJo=o("model_type"),fJo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),hJo=o("pretrained_model_name_or_path"),pJo=o(":"),_Jo=l(),ghe=a("ul"),u2=a("li"),hhe=a("strong"),uJo=o("detr"),bJo=o(" \u2014 "),nO=a("a"),FJo=o("DetrForObjectDetection"),vJo=o(" (DETR model)"),TJo=l(),b2=a("p"),MJo=o("The model is set in evaluation mode by default using "),phe=a("code"),EJo=o("model.eval()"),CJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),wJo=o("model.train()"),AJo=l(),uhe=a("p"),yJo=o("Examples:"),LJo=l(),f(j0.$$.fragment),kBe=l(),tc=a("h2"),F2=a("a"),bhe=a("span"),f(D0.$$.fragment),xJo=l(),Fhe=a("span"),kJo=o("AutoModelForImageSegmentation"),SBe=l(),_r=a("div"),f(G0.$$.fragment),SJo=l(),ac=a("p"),RJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sO=a("a"),BJo=o("from_pretrained()"),PJo=o(" class method or the "),lO=a("a"),$Jo=o("from_config()"),IJo=o(` class
method.`),qJo=l(),O0=a("p"),NJo=o("This class cannot be instantiated directly using "),vhe=a("code"),jJo=o("__init__()"),DJo=o(" (throws an error)."),GJo=l(),ct=a("div"),f(V0.$$.fragment),OJo=l(),The=a("p"),VJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),XJo=l(),nc=a("p"),zJo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),QJo=o("not"),WJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),HJo=o("from_pretrained()"),UJo=o(" to load the model weights."),JJo=l(),Ehe=a("p"),YJo=o("Examples:"),KJo=l(),f(X0.$$.fragment),ZJo=l(),to=a("div"),f(z0.$$.fragment),eYo=l(),Che=a("p"),oYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rYo=l(),gn=a("p"),tYo=o("The model class to instantiate is selected based on the "),whe=a("code"),aYo=o("model_type"),nYo=o(` property of the config object (either
passed as an argument or loaded from `),Ahe=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=a("code"),iYo=o("pretrained_model_name_or_path"),dYo=o(":"),cYo=l(),Lhe=a("ul"),v2=a("li"),xhe=a("strong"),fYo=o("detr"),mYo=o(" \u2014 "),dO=a("a"),gYo=o("DetrForSegmentation"),hYo=o(" (DETR model)"),pYo=l(),T2=a("p"),_Yo=o("The model is set in evaluation mode by default using "),khe=a("code"),uYo=o("model.eval()"),bYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=a("code"),FYo=o("model.train()"),vYo=l(),Rhe=a("p"),TYo=o("Examples:"),MYo=l(),f(Q0.$$.fragment),RBe=l(),sc=a("h2"),M2=a("a"),Bhe=a("span"),f(W0.$$.fragment),EYo=l(),Phe=a("span"),CYo=o("AutoModelForSemanticSegmentation"),BBe=l(),ur=a("div"),f(H0.$$.fragment),wYo=l(),lc=a("p"),AYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cO=a("a"),yYo=o("from_pretrained()"),LYo=o(" class method or the "),fO=a("a"),xYo=o("from_config()"),kYo=o(` class
method.`),SYo=l(),U0=a("p"),RYo=o("This class cannot be instantiated directly using "),$he=a("code"),BYo=o("__init__()"),PYo=o(" (throws an error)."),$Yo=l(),ft=a("div"),f(J0.$$.fragment),IYo=l(),Ihe=a("p"),qYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),NYo=l(),ic=a("p"),jYo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),DYo=o("not"),GYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),OYo=o("from_pretrained()"),VYo=o(" to load the model weights."),XYo=l(),Nhe=a("p"),zYo=o("Examples:"),QYo=l(),f(Y0.$$.fragment),WYo=l(),ao=a("div"),f(K0.$$.fragment),HYo=l(),jhe=a("p"),UYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JYo=l(),hn=a("p"),YYo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),KYo=o("model_type"),ZYo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),rKo=o("pretrained_model_name_or_path"),tKo=o(":"),aKo=l(),dc=a("ul"),E2=a("li"),Vhe=a("strong"),nKo=o("beit"),sKo=o(" \u2014 "),gO=a("a"),lKo=o("BeitForSemanticSegmentation"),iKo=o(" (BEiT model)"),dKo=l(),C2=a("li"),Xhe=a("strong"),cKo=o("dpt"),fKo=o(" \u2014 "),hO=a("a"),mKo=o("DPTForSemanticSegmentation"),gKo=o(" (DPT model)"),hKo=l(),w2=a("li"),zhe=a("strong"),pKo=o("segformer"),_Ko=o(" \u2014 "),pO=a("a"),uKo=o("SegformerForSemanticSegmentation"),bKo=o(" (SegFormer model)"),FKo=l(),A2=a("p"),vKo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),EKo=o("model.train()"),CKo=l(),Hhe=a("p"),wKo=o("Examples:"),AKo=l(),f(Z0.$$.fragment),PBe=l(),cc=a("h2"),y2=a("a"),Uhe=a("span"),f(ey.$$.fragment),yKo=l(),Jhe=a("span"),LKo=o("AutoModelForInstanceSegmentation"),$Be=l(),br=a("div"),f(oy.$$.fragment),xKo=l(),fc=a("p"),kKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_O=a("a"),SKo=o("from_pretrained()"),RKo=o(" class method or the "),uO=a("a"),BKo=o("from_config()"),PKo=o(` class
method.`),$Ko=l(),ry=a("p"),IKo=o("This class cannot be instantiated directly using "),Yhe=a("code"),qKo=o("__init__()"),NKo=o(" (throws an error)."),jKo=l(),mt=a("div"),f(ty.$$.fragment),DKo=l(),Khe=a("p"),GKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OKo=l(),mc=a("p"),VKo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),XKo=o("not"),zKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),QKo=o("from_pretrained()"),WKo=o(" to load the model weights."),HKo=l(),epe=a("p"),UKo=o("Examples:"),JKo=l(),f(ay.$$.fragment),YKo=l(),no=a("div"),f(ny.$$.fragment),KKo=l(),ope=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eZo=l(),pn=a("p"),oZo=o("The model class to instantiate is selected based on the "),rpe=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),tpe=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),npe=a("ul"),L2=a("li"),spe=a("strong"),dZo=o("maskformer"),cZo=o(" \u2014 "),FO=a("a"),fZo=o("MaskFormerForInstanceSegmentation"),mZo=o(" (MaskFormer model)"),gZo=l(),x2=a("p"),hZo=o("The model is set in evaluation mode by default using "),lpe=a("code"),pZo=o("model.eval()"),_Zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=a("code"),uZo=o("model.train()"),bZo=l(),dpe=a("p"),FZo=o("Examples:"),vZo=l(),f(sy.$$.fragment),IBe=l(),gc=a("h2"),k2=a("a"),cpe=a("span"),f(ly.$$.fragment),TZo=l(),fpe=a("span"),MZo=o("TFAutoModel"),qBe=l(),Fr=a("div"),f(iy.$$.fragment),EZo=l(),hc=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vO=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),TO=a("a"),yZo=o("from_config()"),LZo=o(` class
method.`),xZo=l(),dy=a("p"),kZo=o("This class cannot be instantiated directly using "),mpe=a("code"),SZo=o("__init__()"),RZo=o(" (throws an error)."),BZo=l(),gt=a("div"),f(cy.$$.fragment),PZo=l(),gpe=a("p"),$Zo=o("Instantiates one of the base model classes of the library from a configuration."),IZo=l(),pc=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),NZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),ppe=a("p"),VZo=o("Examples:"),XZo=l(),f(fy.$$.fragment),zZo=l(),po=a("div"),f(my.$$.fragment),QZo=l(),_pe=a("p"),WZo=o("Instantiate one of the base model classes of the library from a pretrained model."),HZo=l(),_n=a("p"),UZo=o("The model class to instantiate is selected based on the "),upe=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),x=a("ul"),S2=a("li"),vpe=a("strong"),ter=o("albert"),aer=o(" \u2014 "),EO=a("a"),ner=o("TFAlbertModel"),ser=o(" (ALBERT model)"),ler=l(),R2=a("li"),Tpe=a("strong"),ier=o("bart"),der=o(" \u2014 "),CO=a("a"),cer=o("TFBartModel"),fer=o(" (BART model)"),mer=l(),B2=a("li"),Mpe=a("strong"),ger=o("bert"),her=o(" \u2014 "),wO=a("a"),per=o("TFBertModel"),_er=o(" (BERT model)"),uer=l(),P2=a("li"),Epe=a("strong"),ber=o("blenderbot"),Fer=o(" \u2014 "),AO=a("a"),ver=o("TFBlenderbotModel"),Ter=o(" (Blenderbot model)"),Mer=l(),$2=a("li"),Cpe=a("strong"),Eer=o("blenderbot-small"),Cer=o(" \u2014 "),yO=a("a"),wer=o("TFBlenderbotSmallModel"),Aer=o(" (BlenderbotSmall model)"),yer=l(),I2=a("li"),wpe=a("strong"),Ler=o("camembert"),xer=o(" \u2014 "),LO=a("a"),ker=o("TFCamembertModel"),Ser=o(" (CamemBERT model)"),Rer=l(),q2=a("li"),Ape=a("strong"),Ber=o("clip"),Per=o(" \u2014 "),xO=a("a"),$er=o("TFCLIPModel"),Ier=o(" (CLIP model)"),qer=l(),N2=a("li"),ype=a("strong"),Ner=o("convbert"),jer=o(" \u2014 "),kO=a("a"),Der=o("TFConvBertModel"),Ger=o(" (ConvBERT model)"),Oer=l(),j2=a("li"),Lpe=a("strong"),Ver=o("convnext"),Xer=o(" \u2014 "),SO=a("a"),zer=o("TFConvNextModel"),Qer=o(" (ConvNext model)"),Wer=l(),D2=a("li"),xpe=a("strong"),Her=o("ctrl"),Uer=o(" \u2014 "),RO=a("a"),Jer=o("TFCTRLModel"),Yer=o(" (CTRL model)"),Ker=l(),G2=a("li"),kpe=a("strong"),Zer=o("deberta"),eor=o(" \u2014 "),BO=a("a"),oor=o("TFDebertaModel"),ror=o(" (DeBERTa model)"),tor=l(),O2=a("li"),Spe=a("strong"),aor=o("deberta-v2"),nor=o(" \u2014 "),PO=a("a"),sor=o("TFDebertaV2Model"),lor=o(" (DeBERTa-v2 model)"),ior=l(),V2=a("li"),Rpe=a("strong"),dor=o("distilbert"),cor=o(" \u2014 "),$O=a("a"),mor=o("TFDistilBertModel"),gor=o(" (DistilBERT model)"),hor=l(),X2=a("li"),Bpe=a("strong"),por=o("dpr"),_or=o(" \u2014 "),IO=a("a"),uor=o("TFDPRQuestionEncoder"),bor=o(" (DPR model)"),For=l(),z2=a("li"),Ppe=a("strong"),vor=o("electra"),Tor=o(" \u2014 "),qO=a("a"),Mor=o("TFElectraModel"),Eor=o(" (ELECTRA model)"),Cor=l(),Q2=a("li"),$pe=a("strong"),wor=o("flaubert"),Aor=o(" \u2014 "),NO=a("a"),yor=o("TFFlaubertModel"),Lor=o(" (FlauBERT model)"),xor=l(),Gs=a("li"),Ipe=a("strong"),kor=o("funnel"),Sor=o(" \u2014 "),jO=a("a"),Ror=o("TFFunnelModel"),Bor=o(" or "),DO=a("a"),Por=o("TFFunnelBaseModel"),$or=o(" (Funnel Transformer model)"),Ior=l(),W2=a("li"),qpe=a("strong"),qor=o("gpt2"),Nor=o(" \u2014 "),GO=a("a"),jor=o("TFGPT2Model"),Dor=o(" (OpenAI GPT-2 model)"),Gor=l(),H2=a("li"),Npe=a("strong"),Oor=o("gptj"),Vor=o(" \u2014 "),OO=a("a"),Xor=o("TFGPTJModel"),zor=o(" (GPT-J model)"),Qor=l(),U2=a("li"),jpe=a("strong"),Wor=o("hubert"),Hor=o(" \u2014 "),VO=a("a"),Uor=o("TFHubertModel"),Jor=o(" (Hubert model)"),Yor=l(),J2=a("li"),Dpe=a("strong"),Kor=o("layoutlm"),Zor=o(" \u2014 "),XO=a("a"),err=o("TFLayoutLMModel"),orr=o(" (LayoutLM model)"),rrr=l(),Y2=a("li"),Gpe=a("strong"),trr=o("led"),arr=o(" \u2014 "),zO=a("a"),nrr=o("TFLEDModel"),srr=o(" (LED model)"),lrr=l(),K2=a("li"),Ope=a("strong"),irr=o("longformer"),drr=o(" \u2014 "),QO=a("a"),crr=o("TFLongformerModel"),frr=o(" (Longformer model)"),mrr=l(),Z2=a("li"),Vpe=a("strong"),grr=o("lxmert"),hrr=o(" \u2014 "),WO=a("a"),prr=o("TFLxmertModel"),_rr=o(" (LXMERT model)"),urr=l(),eF=a("li"),Xpe=a("strong"),brr=o("marian"),Frr=o(" \u2014 "),HO=a("a"),vrr=o("TFMarianModel"),Trr=o(" (Marian model)"),Mrr=l(),oF=a("li"),zpe=a("strong"),Err=o("mbart"),Crr=o(" \u2014 "),UO=a("a"),wrr=o("TFMBartModel"),Arr=o(" (mBART model)"),yrr=l(),rF=a("li"),Qpe=a("strong"),Lrr=o("mobilebert"),xrr=o(" \u2014 "),JO=a("a"),krr=o("TFMobileBertModel"),Srr=o(" (MobileBERT model)"),Rrr=l(),tF=a("li"),Wpe=a("strong"),Brr=o("mpnet"),Prr=o(" \u2014 "),YO=a("a"),$rr=o("TFMPNetModel"),Irr=o(" (MPNet model)"),qrr=l(),aF=a("li"),Hpe=a("strong"),Nrr=o("mt5"),jrr=o(" \u2014 "),KO=a("a"),Drr=o("TFMT5Model"),Grr=o(" (mT5 model)"),Orr=l(),nF=a("li"),Upe=a("strong"),Vrr=o("openai-gpt"),Xrr=o(" \u2014 "),ZO=a("a"),zrr=o("TFOpenAIGPTModel"),Qrr=o(" (OpenAI GPT model)"),Wrr=l(),sF=a("li"),Jpe=a("strong"),Hrr=o("pegasus"),Urr=o(" \u2014 "),eV=a("a"),Jrr=o("TFPegasusModel"),Yrr=o(" (Pegasus model)"),Krr=l(),lF=a("li"),Ype=a("strong"),Zrr=o("rembert"),etr=o(" \u2014 "),oV=a("a"),otr=o("TFRemBertModel"),rtr=o(" (RemBERT model)"),ttr=l(),iF=a("li"),Kpe=a("strong"),atr=o("roberta"),ntr=o(" \u2014 "),rV=a("a"),str=o("TFRobertaModel"),ltr=o(" (RoBERTa model)"),itr=l(),dF=a("li"),Zpe=a("strong"),dtr=o("roformer"),ctr=o(" \u2014 "),tV=a("a"),ftr=o("TFRoFormerModel"),mtr=o(" (RoFormer model)"),gtr=l(),cF=a("li"),e_e=a("strong"),htr=o("speech_to_text"),ptr=o(" \u2014 "),aV=a("a"),_tr=o("TFSpeech2TextModel"),utr=o(" (Speech2Text model)"),btr=l(),fF=a("li"),o_e=a("strong"),Ftr=o("t5"),vtr=o(" \u2014 "),nV=a("a"),Ttr=o("TFT5Model"),Mtr=o(" (T5 model)"),Etr=l(),mF=a("li"),r_e=a("strong"),Ctr=o("tapas"),wtr=o(" \u2014 "),sV=a("a"),Atr=o("TFTapasModel"),ytr=o(" (TAPAS model)"),Ltr=l(),gF=a("li"),t_e=a("strong"),xtr=o("transfo-xl"),ktr=o(" \u2014 "),lV=a("a"),Str=o("TFTransfoXLModel"),Rtr=o(" (Transformer-XL model)"),Btr=l(),hF=a("li"),a_e=a("strong"),Ptr=o("vit"),$tr=o(" \u2014 "),iV=a("a"),Itr=o("TFViTModel"),qtr=o(" (ViT model)"),Ntr=l(),pF=a("li"),n_e=a("strong"),jtr=o("vit_mae"),Dtr=o(" \u2014 "),dV=a("a"),Gtr=o("TFViTMAEModel"),Otr=o(" (ViTMAE model)"),Vtr=l(),_F=a("li"),s_e=a("strong"),Xtr=o("wav2vec2"),ztr=o(" \u2014 "),cV=a("a"),Qtr=o("TFWav2Vec2Model"),Wtr=o(" (Wav2Vec2 model)"),Htr=l(),uF=a("li"),l_e=a("strong"),Utr=o("xlm"),Jtr=o(" \u2014 "),fV=a("a"),Ytr=o("TFXLMModel"),Ktr=o(" (XLM model)"),Ztr=l(),bF=a("li"),i_e=a("strong"),ear=o("xlm-roberta"),oar=o(" \u2014 "),mV=a("a"),rar=o("TFXLMRobertaModel"),tar=o(" (XLM-RoBERTa model)"),aar=l(),FF=a("li"),d_e=a("strong"),nar=o("xlnet"),sar=o(" \u2014 "),gV=a("a"),lar=o("TFXLNetModel"),iar=o(" (XLNet model)"),dar=l(),c_e=a("p"),car=o("Examples:"),far=l(),f(gy.$$.fragment),NBe=l(),_c=a("h2"),vF=a("a"),f_e=a("span"),f(hy.$$.fragment),mar=l(),m_e=a("span"),gar=o("TFAutoModelForPreTraining"),jBe=l(),vr=a("div"),f(py.$$.fragment),har=l(),uc=a("p"),par=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hV=a("a"),_ar=o("from_pretrained()"),uar=o(" class method or the "),pV=a("a"),bar=o("from_config()"),Far=o(` class
method.`),Tar=l(),_y=a("p"),Mar=o("This class cannot be instantiated directly using "),g_e=a("code"),Ear=o("__init__()"),Car=o(" (throws an error)."),war=l(),ht=a("div"),f(uy.$$.fragment),Aar=l(),h_e=a("p"),yar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lar=l(),bc=a("p"),xar=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),kar=o("not"),Sar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),Rar=o("from_pretrained()"),Bar=o(" to load the model weights."),Par=l(),__e=a("p"),$ar=o("Examples:"),Iar=l(),f(by.$$.fragment),qar=l(),_o=a("div"),f(Fy.$$.fragment),Nar=l(),u_e=a("p"),jar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dar=l(),un=a("p"),Gar=o("The model class to instantiate is selected based on the "),b_e=a("code"),Oar=o("model_type"),Var=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Xar=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),Qar=o("pretrained_model_name_or_path"),War=o(":"),Har=l(),H=a("ul"),TF=a("li"),T_e=a("strong"),Uar=o("albert"),Jar=o(" \u2014 "),uV=a("a"),Yar=o("TFAlbertForPreTraining"),Kar=o(" (ALBERT model)"),Zar=l(),MF=a("li"),M_e=a("strong"),enr=o("bart"),onr=o(" \u2014 "),bV=a("a"),rnr=o("TFBartForConditionalGeneration"),tnr=o(" (BART model)"),anr=l(),EF=a("li"),E_e=a("strong"),nnr=o("bert"),snr=o(" \u2014 "),FV=a("a"),lnr=o("TFBertForPreTraining"),inr=o(" (BERT model)"),dnr=l(),CF=a("li"),C_e=a("strong"),cnr=o("camembert"),fnr=o(" \u2014 "),vV=a("a"),mnr=o("TFCamembertForMaskedLM"),gnr=o(" (CamemBERT model)"),hnr=l(),wF=a("li"),w_e=a("strong"),pnr=o("ctrl"),_nr=o(" \u2014 "),TV=a("a"),unr=o("TFCTRLLMHeadModel"),bnr=o(" (CTRL model)"),Fnr=l(),AF=a("li"),A_e=a("strong"),vnr=o("distilbert"),Tnr=o(" \u2014 "),MV=a("a"),Mnr=o("TFDistilBertForMaskedLM"),Enr=o(" (DistilBERT model)"),Cnr=l(),yF=a("li"),y_e=a("strong"),wnr=o("electra"),Anr=o(" \u2014 "),EV=a("a"),ynr=o("TFElectraForPreTraining"),Lnr=o(" (ELECTRA model)"),xnr=l(),LF=a("li"),L_e=a("strong"),knr=o("flaubert"),Snr=o(" \u2014 "),CV=a("a"),Rnr=o("TFFlaubertWithLMHeadModel"),Bnr=o(" (FlauBERT model)"),Pnr=l(),xF=a("li"),x_e=a("strong"),$nr=o("funnel"),Inr=o(" \u2014 "),wV=a("a"),qnr=o("TFFunnelForPreTraining"),Nnr=o(" (Funnel Transformer model)"),jnr=l(),kF=a("li"),k_e=a("strong"),Dnr=o("gpt2"),Gnr=o(" \u2014 "),AV=a("a"),Onr=o("TFGPT2LMHeadModel"),Vnr=o(" (OpenAI GPT-2 model)"),Xnr=l(),SF=a("li"),S_e=a("strong"),znr=o("layoutlm"),Qnr=o(" \u2014 "),yV=a("a"),Wnr=o("TFLayoutLMForMaskedLM"),Hnr=o(" (LayoutLM model)"),Unr=l(),RF=a("li"),R_e=a("strong"),Jnr=o("lxmert"),Ynr=o(" \u2014 "),LV=a("a"),Knr=o("TFLxmertForPreTraining"),Znr=o(" (LXMERT model)"),esr=l(),BF=a("li"),B_e=a("strong"),osr=o("mobilebert"),rsr=o(" \u2014 "),xV=a("a"),tsr=o("TFMobileBertForPreTraining"),asr=o(" (MobileBERT model)"),nsr=l(),PF=a("li"),P_e=a("strong"),ssr=o("mpnet"),lsr=o(" \u2014 "),kV=a("a"),isr=o("TFMPNetForMaskedLM"),dsr=o(" (MPNet model)"),csr=l(),$F=a("li"),$_e=a("strong"),fsr=o("openai-gpt"),msr=o(" \u2014 "),SV=a("a"),gsr=o("TFOpenAIGPTLMHeadModel"),hsr=o(" (OpenAI GPT model)"),psr=l(),IF=a("li"),I_e=a("strong"),_sr=o("roberta"),usr=o(" \u2014 "),RV=a("a"),bsr=o("TFRobertaForMaskedLM"),Fsr=o(" (RoBERTa model)"),vsr=l(),qF=a("li"),q_e=a("strong"),Tsr=o("t5"),Msr=o(" \u2014 "),BV=a("a"),Esr=o("TFT5ForConditionalGeneration"),Csr=o(" (T5 model)"),wsr=l(),NF=a("li"),N_e=a("strong"),Asr=o("tapas"),ysr=o(" \u2014 "),PV=a("a"),Lsr=o("TFTapasForMaskedLM"),xsr=o(" (TAPAS model)"),ksr=l(),jF=a("li"),j_e=a("strong"),Ssr=o("transfo-xl"),Rsr=o(" \u2014 "),$V=a("a"),Bsr=o("TFTransfoXLLMHeadModel"),Psr=o(" (Transformer-XL model)"),$sr=l(),DF=a("li"),D_e=a("strong"),Isr=o("vit_mae"),qsr=o(" \u2014 "),IV=a("a"),Nsr=o("TFViTMAEForPreTraining"),jsr=o(" (ViTMAE model)"),Dsr=l(),GF=a("li"),G_e=a("strong"),Gsr=o("xlm"),Osr=o(" \u2014 "),qV=a("a"),Vsr=o("TFXLMWithLMHeadModel"),Xsr=o(" (XLM model)"),zsr=l(),OF=a("li"),O_e=a("strong"),Qsr=o("xlm-roberta"),Wsr=o(" \u2014 "),NV=a("a"),Hsr=o("TFXLMRobertaForMaskedLM"),Usr=o(" (XLM-RoBERTa model)"),Jsr=l(),VF=a("li"),V_e=a("strong"),Ysr=o("xlnet"),Ksr=o(" \u2014 "),jV=a("a"),Zsr=o("TFXLNetLMHeadModel"),elr=o(" (XLNet model)"),olr=l(),X_e=a("p"),rlr=o("Examples:"),tlr=l(),f(vy.$$.fragment),DBe=l(),Fc=a("h2"),XF=a("a"),z_e=a("span"),f(Ty.$$.fragment),alr=l(),Q_e=a("span"),nlr=o("TFAutoModelForCausalLM"),GBe=l(),Tr=a("div"),f(My.$$.fragment),slr=l(),vc=a("p"),llr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DV=a("a"),ilr=o("from_pretrained()"),dlr=o(" class method or the "),GV=a("a"),clr=o("from_config()"),flr=o(` class
method.`),mlr=l(),Ey=a("p"),glr=o("This class cannot be instantiated directly using "),W_e=a("code"),hlr=o("__init__()"),plr=o(" (throws an error)."),_lr=l(),pt=a("div"),f(Cy.$$.fragment),ulr=l(),H_e=a("p"),blr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Flr=l(),Tc=a("p"),vlr=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),Tlr=o("not"),Mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),Elr=o("from_pretrained()"),Clr=o(" to load the model weights."),wlr=l(),J_e=a("p"),Alr=o("Examples:"),ylr=l(),f(wy.$$.fragment),Llr=l(),uo=a("div"),f(Ay.$$.fragment),xlr=l(),Y_e=a("p"),klr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Slr=l(),bn=a("p"),Rlr=o("The model class to instantiate is selected based on the "),K_e=a("code"),Blr=o("model_type"),Plr=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),$lr=o("pretrained_model_name_or_path"),Ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),qlr=o("pretrained_model_name_or_path"),Nlr=o(":"),jlr=l(),fe=a("ul"),zF=a("li"),oue=a("strong"),Dlr=o("bert"),Glr=o(" \u2014 "),VV=a("a"),Olr=o("TFBertLMHeadModel"),Vlr=o(" (BERT model)"),Xlr=l(),QF=a("li"),rue=a("strong"),zlr=o("camembert"),Qlr=o(" \u2014 "),XV=a("a"),Wlr=o("TFCamembertForCausalLM"),Hlr=o(" (CamemBERT model)"),Ulr=l(),WF=a("li"),tue=a("strong"),Jlr=o("ctrl"),Ylr=o(" \u2014 "),zV=a("a"),Klr=o("TFCTRLLMHeadModel"),Zlr=o(" (CTRL model)"),eir=l(),HF=a("li"),aue=a("strong"),oir=o("gpt2"),rir=o(" \u2014 "),QV=a("a"),tir=o("TFGPT2LMHeadModel"),air=o(" (OpenAI GPT-2 model)"),nir=l(),UF=a("li"),nue=a("strong"),sir=o("gptj"),lir=o(" \u2014 "),WV=a("a"),iir=o("TFGPTJForCausalLM"),dir=o(" (GPT-J model)"),cir=l(),JF=a("li"),sue=a("strong"),fir=o("openai-gpt"),mir=o(" \u2014 "),HV=a("a"),gir=o("TFOpenAIGPTLMHeadModel"),hir=o(" (OpenAI GPT model)"),pir=l(),YF=a("li"),lue=a("strong"),_ir=o("rembert"),uir=o(" \u2014 "),UV=a("a"),bir=o("TFRemBertForCausalLM"),Fir=o(" (RemBERT model)"),vir=l(),KF=a("li"),iue=a("strong"),Tir=o("roberta"),Mir=o(" \u2014 "),JV=a("a"),Eir=o("TFRobertaForCausalLM"),Cir=o(" (RoBERTa model)"),wir=l(),ZF=a("li"),due=a("strong"),Air=o("roformer"),yir=o(" \u2014 "),YV=a("a"),Lir=o("TFRoFormerForCausalLM"),xir=o(" (RoFormer model)"),kir=l(),ev=a("li"),cue=a("strong"),Sir=o("transfo-xl"),Rir=o(" \u2014 "),KV=a("a"),Bir=o("TFTransfoXLLMHeadModel"),Pir=o(" (Transformer-XL model)"),$ir=l(),ov=a("li"),fue=a("strong"),Iir=o("xlm"),qir=o(" \u2014 "),ZV=a("a"),Nir=o("TFXLMWithLMHeadModel"),jir=o(" (XLM model)"),Dir=l(),rv=a("li"),mue=a("strong"),Gir=o("xlnet"),Oir=o(" \u2014 "),eX=a("a"),Vir=o("TFXLNetLMHeadModel"),Xir=o(" (XLNet model)"),zir=l(),gue=a("p"),Qir=o("Examples:"),Wir=l(),f(yy.$$.fragment),OBe=l(),Mc=a("h2"),tv=a("a"),hue=a("span"),f(Ly.$$.fragment),Hir=l(),pue=a("span"),Uir=o("TFAutoModelForImageClassification"),VBe=l(),Mr=a("div"),f(xy.$$.fragment),Jir=l(),Ec=a("p"),Yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oX=a("a"),Kir=o("from_pretrained()"),Zir=o(" class method or the "),rX=a("a"),edr=o("from_config()"),odr=o(` class
method.`),rdr=l(),ky=a("p"),tdr=o("This class cannot be instantiated directly using "),_ue=a("code"),adr=o("__init__()"),ndr=o(" (throws an error)."),sdr=l(),_t=a("div"),f(Sy.$$.fragment),ldr=l(),uue=a("p"),idr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ddr=l(),Cc=a("p"),cdr=o(`Note:
Loading a model from its configuration file does `),bue=a("strong"),fdr=o("not"),mdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),gdr=o("from_pretrained()"),hdr=o(" to load the model weights."),pdr=l(),Fue=a("p"),_dr=o("Examples:"),udr=l(),f(Ry.$$.fragment),bdr=l(),bo=a("div"),f(By.$$.fragment),Fdr=l(),vue=a("p"),vdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tdr=l(),Fn=a("p"),Mdr=o("The model class to instantiate is selected based on the "),Tue=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),Mue=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(":"),xdr=l(),Py=a("ul"),av=a("li"),Cue=a("strong"),kdr=o("convnext"),Sdr=o(" \u2014 "),aX=a("a"),Rdr=o("TFConvNextForImageClassification"),Bdr=o(" (ConvNext model)"),Pdr=l(),nv=a("li"),wue=a("strong"),$dr=o("vit"),Idr=o(" \u2014 "),nX=a("a"),qdr=o("TFViTForImageClassification"),Ndr=o(" (ViT model)"),jdr=l(),Aue=a("p"),Ddr=o("Examples:"),Gdr=l(),f($y.$$.fragment),XBe=l(),wc=a("h2"),sv=a("a"),yue=a("span"),f(Iy.$$.fragment),Odr=l(),Lue=a("span"),Vdr=o("TFAutoModelForMaskedLM"),zBe=l(),Er=a("div"),f(qy.$$.fragment),Xdr=l(),Ac=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sX=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" class method or the "),lX=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),Ny=a("p"),Ydr=o("This class cannot be instantiated directly using "),xue=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),ut=a("div"),f(jy.$$.fragment),ocr=l(),kue=a("p"),rcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tcr=l(),yc=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),Rue=a("p"),ccr=o("Examples:"),fcr=l(),f(Dy.$$.fragment),mcr=l(),Fo=a("div"),f(Gy.$$.fragment),gcr=l(),Bue=a("p"),hcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pcr=l(),vn=a("p"),_cr=o("The model class to instantiate is selected based on the "),Pue=a("code"),ucr=o("model_type"),bcr=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),Fcr=o("pretrained_model_name_or_path"),vcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(":"),Ecr=l(),Y=a("ul"),lv=a("li"),que=a("strong"),Ccr=o("albert"),wcr=o(" \u2014 "),dX=a("a"),Acr=o("TFAlbertForMaskedLM"),ycr=o(" (ALBERT model)"),Lcr=l(),iv=a("li"),Nue=a("strong"),xcr=o("bert"),kcr=o(" \u2014 "),cX=a("a"),Scr=o("TFBertForMaskedLM"),Rcr=o(" (BERT model)"),Bcr=l(),dv=a("li"),jue=a("strong"),Pcr=o("camembert"),$cr=o(" \u2014 "),fX=a("a"),Icr=o("TFCamembertForMaskedLM"),qcr=o(" (CamemBERT model)"),Ncr=l(),cv=a("li"),Due=a("strong"),jcr=o("convbert"),Dcr=o(" \u2014 "),mX=a("a"),Gcr=o("TFConvBertForMaskedLM"),Ocr=o(" (ConvBERT model)"),Vcr=l(),fv=a("li"),Gue=a("strong"),Xcr=o("deberta"),zcr=o(" \u2014 "),gX=a("a"),Qcr=o("TFDebertaForMaskedLM"),Wcr=o(" (DeBERTa model)"),Hcr=l(),mv=a("li"),Oue=a("strong"),Ucr=o("deberta-v2"),Jcr=o(" \u2014 "),hX=a("a"),Ycr=o("TFDebertaV2ForMaskedLM"),Kcr=o(" (DeBERTa-v2 model)"),Zcr=l(),gv=a("li"),Vue=a("strong"),efr=o("distilbert"),ofr=o(" \u2014 "),pX=a("a"),rfr=o("TFDistilBertForMaskedLM"),tfr=o(" (DistilBERT model)"),afr=l(),hv=a("li"),Xue=a("strong"),nfr=o("electra"),sfr=o(" \u2014 "),_X=a("a"),lfr=o("TFElectraForMaskedLM"),ifr=o(" (ELECTRA model)"),dfr=l(),pv=a("li"),zue=a("strong"),cfr=o("flaubert"),ffr=o(" \u2014 "),uX=a("a"),mfr=o("TFFlaubertWithLMHeadModel"),gfr=o(" (FlauBERT model)"),hfr=l(),_v=a("li"),Que=a("strong"),pfr=o("funnel"),_fr=o(" \u2014 "),bX=a("a"),ufr=o("TFFunnelForMaskedLM"),bfr=o(" (Funnel Transformer model)"),Ffr=l(),uv=a("li"),Wue=a("strong"),vfr=o("layoutlm"),Tfr=o(" \u2014 "),FX=a("a"),Mfr=o("TFLayoutLMForMaskedLM"),Efr=o(" (LayoutLM model)"),Cfr=l(),bv=a("li"),Hue=a("strong"),wfr=o("longformer"),Afr=o(" \u2014 "),vX=a("a"),yfr=o("TFLongformerForMaskedLM"),Lfr=o(" (Longformer model)"),xfr=l(),Fv=a("li"),Uue=a("strong"),kfr=o("mobilebert"),Sfr=o(" \u2014 "),TX=a("a"),Rfr=o("TFMobileBertForMaskedLM"),Bfr=o(" (MobileBERT model)"),Pfr=l(),vv=a("li"),Jue=a("strong"),$fr=o("mpnet"),Ifr=o(" \u2014 "),MX=a("a"),qfr=o("TFMPNetForMaskedLM"),Nfr=o(" (MPNet model)"),jfr=l(),Tv=a("li"),Yue=a("strong"),Dfr=o("rembert"),Gfr=o(" \u2014 "),EX=a("a"),Ofr=o("TFRemBertForMaskedLM"),Vfr=o(" (RemBERT model)"),Xfr=l(),Mv=a("li"),Kue=a("strong"),zfr=o("roberta"),Qfr=o(" \u2014 "),CX=a("a"),Wfr=o("TFRobertaForMaskedLM"),Hfr=o(" (RoBERTa model)"),Ufr=l(),Ev=a("li"),Zue=a("strong"),Jfr=o("roformer"),Yfr=o(" \u2014 "),wX=a("a"),Kfr=o("TFRoFormerForMaskedLM"),Zfr=o(" (RoFormer model)"),emr=l(),Cv=a("li"),e6e=a("strong"),omr=o("tapas"),rmr=o(" \u2014 "),AX=a("a"),tmr=o("TFTapasForMaskedLM"),amr=o(" (TAPAS model)"),nmr=l(),wv=a("li"),o6e=a("strong"),smr=o("xlm"),lmr=o(" \u2014 "),yX=a("a"),imr=o("TFXLMWithLMHeadModel"),dmr=o(" (XLM model)"),cmr=l(),Av=a("li"),r6e=a("strong"),fmr=o("xlm-roberta"),mmr=o(" \u2014 "),LX=a("a"),gmr=o("TFXLMRobertaForMaskedLM"),hmr=o(" (XLM-RoBERTa model)"),pmr=l(),t6e=a("p"),_mr=o("Examples:"),umr=l(),f(Oy.$$.fragment),QBe=l(),Lc=a("h2"),yv=a("a"),a6e=a("span"),f(Vy.$$.fragment),bmr=l(),n6e=a("span"),Fmr=o("TFAutoModelForSeq2SeqLM"),WBe=l(),Cr=a("div"),f(Xy.$$.fragment),vmr=l(),xc=a("p"),Tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xX=a("a"),Mmr=o("from_pretrained()"),Emr=o(" class method or the "),kX=a("a"),Cmr=o("from_config()"),wmr=o(` class
method.`),Amr=l(),zy=a("p"),ymr=o("This class cannot be instantiated directly using "),s6e=a("code"),Lmr=o("__init__()"),xmr=o(" (throws an error)."),kmr=l(),bt=a("div"),f(Qy.$$.fragment),Smr=l(),l6e=a("p"),Rmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bmr=l(),kc=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),i6e=a("strong"),$mr=o("not"),Imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),qmr=o("from_pretrained()"),Nmr=o(" to load the model weights."),jmr=l(),d6e=a("p"),Dmr=o("Examples:"),Gmr=l(),f(Wy.$$.fragment),Omr=l(),vo=a("div"),f(Hy.$$.fragment),Vmr=l(),c6e=a("p"),Xmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zmr=l(),Tn=a("p"),Qmr=o("The model class to instantiate is selected based on the "),f6e=a("code"),Wmr=o("model_type"),Hmr=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(":"),Zmr=l(),be=a("ul"),Lv=a("li"),h6e=a("strong"),egr=o("bart"),ogr=o(" \u2014 "),RX=a("a"),rgr=o("TFBartForConditionalGeneration"),tgr=o(" (BART model)"),agr=l(),xv=a("li"),p6e=a("strong"),ngr=o("blenderbot"),sgr=o(" \u2014 "),BX=a("a"),lgr=o("TFBlenderbotForConditionalGeneration"),igr=o(" (Blenderbot model)"),dgr=l(),kv=a("li"),_6e=a("strong"),cgr=o("blenderbot-small"),fgr=o(" \u2014 "),PX=a("a"),mgr=o("TFBlenderbotSmallForConditionalGeneration"),ggr=o(" (BlenderbotSmall model)"),hgr=l(),Sv=a("li"),u6e=a("strong"),pgr=o("encoder-decoder"),_gr=o(" \u2014 "),$X=a("a"),ugr=o("TFEncoderDecoderModel"),bgr=o(" (Encoder decoder model)"),Fgr=l(),Rv=a("li"),b6e=a("strong"),vgr=o("led"),Tgr=o(" \u2014 "),IX=a("a"),Mgr=o("TFLEDForConditionalGeneration"),Egr=o(" (LED model)"),Cgr=l(),Bv=a("li"),F6e=a("strong"),wgr=o("marian"),Agr=o(" \u2014 "),qX=a("a"),ygr=o("TFMarianMTModel"),Lgr=o(" (Marian model)"),xgr=l(),Pv=a("li"),v6e=a("strong"),kgr=o("mbart"),Sgr=o(" \u2014 "),NX=a("a"),Rgr=o("TFMBartForConditionalGeneration"),Bgr=o(" (mBART model)"),Pgr=l(),$v=a("li"),T6e=a("strong"),$gr=o("mt5"),Igr=o(" \u2014 "),jX=a("a"),qgr=o("TFMT5ForConditionalGeneration"),Ngr=o(" (mT5 model)"),jgr=l(),Iv=a("li"),M6e=a("strong"),Dgr=o("pegasus"),Ggr=o(" \u2014 "),DX=a("a"),Ogr=o("TFPegasusForConditionalGeneration"),Vgr=o(" (Pegasus model)"),Xgr=l(),qv=a("li"),E6e=a("strong"),zgr=o("t5"),Qgr=o(" \u2014 "),GX=a("a"),Wgr=o("TFT5ForConditionalGeneration"),Hgr=o(" (T5 model)"),Ugr=l(),C6e=a("p"),Jgr=o("Examples:"),Ygr=l(),f(Uy.$$.fragment),HBe=l(),Sc=a("h2"),Nv=a("a"),w6e=a("span"),f(Jy.$$.fragment),Kgr=l(),A6e=a("span"),Zgr=o("TFAutoModelForSequenceClassification"),UBe=l(),wr=a("div"),f(Yy.$$.fragment),ehr=l(),Rc=a("p"),ohr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OX=a("a"),rhr=o("from_pretrained()"),thr=o(" class method or the "),VX=a("a"),ahr=o("from_config()"),nhr=o(` class
method.`),shr=l(),Ky=a("p"),lhr=o("This class cannot be instantiated directly using "),y6e=a("code"),ihr=o("__init__()"),dhr=o(" (throws an error)."),chr=l(),Ft=a("div"),f(Zy.$$.fragment),fhr=l(),L6e=a("p"),mhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ghr=l(),Bc=a("p"),hhr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),phr=o("not"),_hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),uhr=o("from_pretrained()"),bhr=o(" to load the model weights."),Fhr=l(),k6e=a("p"),vhr=o("Examples:"),Thr=l(),f(eL.$$.fragment),Mhr=l(),To=a("div"),f(oL.$$.fragment),Ehr=l(),S6e=a("p"),Chr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),whr=l(),Mn=a("p"),Ahr=o("The model class to instantiate is selected based on the "),R6e=a("code"),yhr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),B6e=a("code"),xhr=o("pretrained_model_name_or_path"),khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(":"),Bhr=l(),V=a("ul"),jv=a("li"),$6e=a("strong"),Phr=o("albert"),$hr=o(" \u2014 "),zX=a("a"),Ihr=o("TFAlbertForSequenceClassification"),qhr=o(" (ALBERT model)"),Nhr=l(),Dv=a("li"),I6e=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),QX=a("a"),Ghr=o("TFBertForSequenceClassification"),Ohr=o(" (BERT model)"),Vhr=l(),Gv=a("li"),q6e=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),WX=a("a"),Qhr=o("TFCamembertForSequenceClassification"),Whr=o(" (CamemBERT model)"),Hhr=l(),Ov=a("li"),N6e=a("strong"),Uhr=o("convbert"),Jhr=o(" \u2014 "),HX=a("a"),Yhr=o("TFConvBertForSequenceClassification"),Khr=o(" (ConvBERT model)"),Zhr=l(),Vv=a("li"),j6e=a("strong"),epr=o("ctrl"),opr=o(" \u2014 "),UX=a("a"),rpr=o("TFCTRLForSequenceClassification"),tpr=o(" (CTRL model)"),apr=l(),Xv=a("li"),D6e=a("strong"),npr=o("deberta"),spr=o(" \u2014 "),JX=a("a"),lpr=o("TFDebertaForSequenceClassification"),ipr=o(" (DeBERTa model)"),dpr=l(),zv=a("li"),G6e=a("strong"),cpr=o("deberta-v2"),fpr=o(" \u2014 "),YX=a("a"),mpr=o("TFDebertaV2ForSequenceClassification"),gpr=o(" (DeBERTa-v2 model)"),hpr=l(),Qv=a("li"),O6e=a("strong"),ppr=o("distilbert"),_pr=o(" \u2014 "),KX=a("a"),upr=o("TFDistilBertForSequenceClassification"),bpr=o(" (DistilBERT model)"),Fpr=l(),Wv=a("li"),V6e=a("strong"),vpr=o("electra"),Tpr=o(" \u2014 "),ZX=a("a"),Mpr=o("TFElectraForSequenceClassification"),Epr=o(" (ELECTRA model)"),Cpr=l(),Hv=a("li"),X6e=a("strong"),wpr=o("flaubert"),Apr=o(" \u2014 "),ez=a("a"),ypr=o("TFFlaubertForSequenceClassification"),Lpr=o(" (FlauBERT model)"),xpr=l(),Uv=a("li"),z6e=a("strong"),kpr=o("funnel"),Spr=o(" \u2014 "),oz=a("a"),Rpr=o("TFFunnelForSequenceClassification"),Bpr=o(" (Funnel Transformer model)"),Ppr=l(),Jv=a("li"),Q6e=a("strong"),$pr=o("gpt2"),Ipr=o(" \u2014 "),rz=a("a"),qpr=o("TFGPT2ForSequenceClassification"),Npr=o(" (OpenAI GPT-2 model)"),jpr=l(),Yv=a("li"),W6e=a("strong"),Dpr=o("gptj"),Gpr=o(" \u2014 "),tz=a("a"),Opr=o("TFGPTJForSequenceClassification"),Vpr=o(" (GPT-J model)"),Xpr=l(),Kv=a("li"),H6e=a("strong"),zpr=o("layoutlm"),Qpr=o(" \u2014 "),az=a("a"),Wpr=o("TFLayoutLMForSequenceClassification"),Hpr=o(" (LayoutLM model)"),Upr=l(),Zv=a("li"),U6e=a("strong"),Jpr=o("longformer"),Ypr=o(" \u2014 "),nz=a("a"),Kpr=o("TFLongformerForSequenceClassification"),Zpr=o(" (Longformer model)"),e_r=l(),eT=a("li"),J6e=a("strong"),o_r=o("mobilebert"),r_r=o(" \u2014 "),sz=a("a"),t_r=o("TFMobileBertForSequenceClassification"),a_r=o(" (MobileBERT model)"),n_r=l(),oT=a("li"),Y6e=a("strong"),s_r=o("mpnet"),l_r=o(" \u2014 "),lz=a("a"),i_r=o("TFMPNetForSequenceClassification"),d_r=o(" (MPNet model)"),c_r=l(),rT=a("li"),K6e=a("strong"),f_r=o("openai-gpt"),m_r=o(" \u2014 "),iz=a("a"),g_r=o("TFOpenAIGPTForSequenceClassification"),h_r=o(" (OpenAI GPT model)"),p_r=l(),tT=a("li"),Z6e=a("strong"),__r=o("rembert"),u_r=o(" \u2014 "),dz=a("a"),b_r=o("TFRemBertForSequenceClassification"),F_r=o(" (RemBERT model)"),v_r=l(),aT=a("li"),e1e=a("strong"),T_r=o("roberta"),M_r=o(" \u2014 "),cz=a("a"),E_r=o("TFRobertaForSequenceClassification"),C_r=o(" (RoBERTa model)"),w_r=l(),nT=a("li"),o1e=a("strong"),A_r=o("roformer"),y_r=o(" \u2014 "),fz=a("a"),L_r=o("TFRoFormerForSequenceClassification"),x_r=o(" (RoFormer model)"),k_r=l(),sT=a("li"),r1e=a("strong"),S_r=o("tapas"),R_r=o(" \u2014 "),mz=a("a"),B_r=o("TFTapasForSequenceClassification"),P_r=o(" (TAPAS model)"),$_r=l(),lT=a("li"),t1e=a("strong"),I_r=o("transfo-xl"),q_r=o(" \u2014 "),gz=a("a"),N_r=o("TFTransfoXLForSequenceClassification"),j_r=o(" (Transformer-XL model)"),D_r=l(),iT=a("li"),a1e=a("strong"),G_r=o("xlm"),O_r=o(" \u2014 "),hz=a("a"),V_r=o("TFXLMForSequenceClassification"),X_r=o(" (XLM model)"),z_r=l(),dT=a("li"),n1e=a("strong"),Q_r=o("xlm-roberta"),W_r=o(" \u2014 "),pz=a("a"),H_r=o("TFXLMRobertaForSequenceClassification"),U_r=o(" (XLM-RoBERTa model)"),J_r=l(),cT=a("li"),s1e=a("strong"),Y_r=o("xlnet"),K_r=o(" \u2014 "),_z=a("a"),Z_r=o("TFXLNetForSequenceClassification"),eur=o(" (XLNet model)"),our=l(),l1e=a("p"),rur=o("Examples:"),tur=l(),f(rL.$$.fragment),JBe=l(),Pc=a("h2"),fT=a("a"),i1e=a("span"),f(tL.$$.fragment),aur=l(),d1e=a("span"),nur=o("TFAutoModelForMultipleChoice"),YBe=l(),Ar=a("div"),f(aL.$$.fragment),sur=l(),$c=a("p"),lur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uz=a("a"),iur=o("from_pretrained()"),dur=o(" class method or the "),bz=a("a"),cur=o("from_config()"),fur=o(` class
method.`),mur=l(),nL=a("p"),gur=o("This class cannot be instantiated directly using "),c1e=a("code"),hur=o("__init__()"),pur=o(" (throws an error)."),_ur=l(),vt=a("div"),f(sL.$$.fragment),uur=l(),f1e=a("p"),bur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fur=l(),Ic=a("p"),vur=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),Tur=o("not"),Mur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),Eur=o("from_pretrained()"),Cur=o(" to load the model weights."),wur=l(),g1e=a("p"),Aur=o("Examples:"),yur=l(),f(lL.$$.fragment),Lur=l(),Mo=a("div"),f(iL.$$.fragment),xur=l(),h1e=a("p"),kur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Sur=l(),En=a("p"),Rur=o("The model class to instantiate is selected based on the "),p1e=a("code"),Bur=o("model_type"),Pur=o(` property of the config object (either
passed as an argument or loaded from `),_1e=a("code"),$ur=o("pretrained_model_name_or_path"),Iur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),qur=o("pretrained_model_name_or_path"),Nur=o(":"),jur=l(),se=a("ul"),mT=a("li"),b1e=a("strong"),Dur=o("albert"),Gur=o(" \u2014 "),vz=a("a"),Our=o("TFAlbertForMultipleChoice"),Vur=o(" (ALBERT model)"),Xur=l(),gT=a("li"),F1e=a("strong"),zur=o("bert"),Qur=o(" \u2014 "),Tz=a("a"),Wur=o("TFBertForMultipleChoice"),Hur=o(" (BERT model)"),Uur=l(),hT=a("li"),v1e=a("strong"),Jur=o("camembert"),Yur=o(" \u2014 "),Mz=a("a"),Kur=o("TFCamembertForMultipleChoice"),Zur=o(" (CamemBERT model)"),e6r=l(),pT=a("li"),T1e=a("strong"),o6r=o("convbert"),r6r=o(" \u2014 "),Ez=a("a"),t6r=o("TFConvBertForMultipleChoice"),a6r=o(" (ConvBERT model)"),n6r=l(),_T=a("li"),M1e=a("strong"),s6r=o("distilbert"),l6r=o(" \u2014 "),Cz=a("a"),i6r=o("TFDistilBertForMultipleChoice"),d6r=o(" (DistilBERT model)"),c6r=l(),uT=a("li"),E1e=a("strong"),f6r=o("electra"),m6r=o(" \u2014 "),wz=a("a"),g6r=o("TFElectraForMultipleChoice"),h6r=o(" (ELECTRA model)"),p6r=l(),bT=a("li"),C1e=a("strong"),_6r=o("flaubert"),u6r=o(" \u2014 "),Az=a("a"),b6r=o("TFFlaubertForMultipleChoice"),F6r=o(" (FlauBERT model)"),v6r=l(),FT=a("li"),w1e=a("strong"),T6r=o("funnel"),M6r=o(" \u2014 "),yz=a("a"),E6r=o("TFFunnelForMultipleChoice"),C6r=o(" (Funnel Transformer model)"),w6r=l(),vT=a("li"),A1e=a("strong"),A6r=o("longformer"),y6r=o(" \u2014 "),Lz=a("a"),L6r=o("TFLongformerForMultipleChoice"),x6r=o(" (Longformer model)"),k6r=l(),TT=a("li"),y1e=a("strong"),S6r=o("mobilebert"),R6r=o(" \u2014 "),xz=a("a"),B6r=o("TFMobileBertForMultipleChoice"),P6r=o(" (MobileBERT model)"),$6r=l(),MT=a("li"),L1e=a("strong"),I6r=o("mpnet"),q6r=o(" \u2014 "),kz=a("a"),N6r=o("TFMPNetForMultipleChoice"),j6r=o(" (MPNet model)"),D6r=l(),ET=a("li"),x1e=a("strong"),G6r=o("rembert"),O6r=o(" \u2014 "),Sz=a("a"),V6r=o("TFRemBertForMultipleChoice"),X6r=o(" (RemBERT model)"),z6r=l(),CT=a("li"),k1e=a("strong"),Q6r=o("roberta"),W6r=o(" \u2014 "),Rz=a("a"),H6r=o("TFRobertaForMultipleChoice"),U6r=o(" (RoBERTa model)"),J6r=l(),wT=a("li"),S1e=a("strong"),Y6r=o("roformer"),K6r=o(" \u2014 "),Bz=a("a"),Z6r=o("TFRoFormerForMultipleChoice"),e1r=o(" (RoFormer model)"),o1r=l(),AT=a("li"),R1e=a("strong"),r1r=o("xlm"),t1r=o(" \u2014 "),Pz=a("a"),a1r=o("TFXLMForMultipleChoice"),n1r=o(" (XLM model)"),s1r=l(),yT=a("li"),B1e=a("strong"),l1r=o("xlm-roberta"),i1r=o(" \u2014 "),$z=a("a"),d1r=o("TFXLMRobertaForMultipleChoice"),c1r=o(" (XLM-RoBERTa model)"),f1r=l(),LT=a("li"),P1e=a("strong"),m1r=o("xlnet"),g1r=o(" \u2014 "),Iz=a("a"),h1r=o("TFXLNetForMultipleChoice"),p1r=o(" (XLNet model)"),_1r=l(),$1e=a("p"),u1r=o("Examples:"),b1r=l(),f(dL.$$.fragment),KBe=l(),qc=a("h2"),xT=a("a"),I1e=a("span"),f(cL.$$.fragment),F1r=l(),q1e=a("span"),v1r=o("TFAutoModelForTableQuestionAnswering"),ZBe=l(),yr=a("div"),f(fL.$$.fragment),T1r=l(),Nc=a("p"),M1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qz=a("a"),E1r=o("from_pretrained()"),C1r=o(" class method or the "),Nz=a("a"),w1r=o("from_config()"),A1r=o(` class
method.`),y1r=l(),mL=a("p"),L1r=o("This class cannot be instantiated directly using "),N1e=a("code"),x1r=o("__init__()"),k1r=o(" (throws an error)."),S1r=l(),Tt=a("div"),f(gL.$$.fragment),R1r=l(),j1e=a("p"),B1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P1r=l(),jc=a("p"),$1r=o(`Note:
Loading a model from its configuration file does `),D1e=a("strong"),I1r=o("not"),q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=a("a"),N1r=o("from_pretrained()"),j1r=o(" to load the model weights."),D1r=l(),G1e=a("p"),G1r=o("Examples:"),O1r=l(),f(hL.$$.fragment),V1r=l(),Eo=a("div"),f(pL.$$.fragment),X1r=l(),O1e=a("p"),z1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q1r=l(),Cn=a("p"),W1r=o("The model class to instantiate is selected based on the "),V1e=a("code"),H1r=o("model_type"),U1r=o(` property of the config object (either
passed as an argument or loaded from `),X1e=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(":"),e4r=l(),Q1e=a("ul"),kT=a("li"),W1e=a("strong"),o4r=o("tapas"),r4r=o(" \u2014 "),Dz=a("a"),t4r=o("TFTapasForQuestionAnswering"),a4r=o(" (TAPAS model)"),n4r=l(),H1e=a("p"),s4r=o("Examples:"),l4r=l(),f(_L.$$.fragment),ePe=l(),Dc=a("h2"),ST=a("a"),U1e=a("span"),f(uL.$$.fragment),i4r=l(),J1e=a("span"),d4r=o("TFAutoModelForTokenClassification"),oPe=l(),Lr=a("div"),f(bL.$$.fragment),c4r=l(),Gc=a("p"),f4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gz=a("a"),m4r=o("from_pretrained()"),g4r=o(" class method or the "),Oz=a("a"),h4r=o("from_config()"),p4r=o(` class
method.`),_4r=l(),FL=a("p"),u4r=o("This class cannot be instantiated directly using "),Y1e=a("code"),b4r=o("__init__()"),F4r=o(" (throws an error)."),v4r=l(),Mt=a("div"),f(vL.$$.fragment),T4r=l(),K1e=a("p"),M4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E4r=l(),Oc=a("p"),C4r=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),w4r=o("not"),A4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),y4r=o("from_pretrained()"),L4r=o(" to load the model weights."),x4r=l(),e4e=a("p"),k4r=o("Examples:"),S4r=l(),f(TL.$$.fragment),R4r=l(),Co=a("div"),f(ML.$$.fragment),B4r=l(),o4e=a("p"),P4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$4r=l(),wn=a("p"),I4r=o("The model class to instantiate is selected based on the "),r4e=a("code"),q4r=o("model_type"),N4r=o(` property of the config object (either
passed as an argument or loaded from `),t4e=a("code"),j4r=o("pretrained_model_name_or_path"),D4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=a("code"),G4r=o("pretrained_model_name_or_path"),O4r=o(":"),V4r=l(),K=a("ul"),RT=a("li"),n4e=a("strong"),X4r=o("albert"),z4r=o(" \u2014 "),Xz=a("a"),Q4r=o("TFAlbertForTokenClassification"),W4r=o(" (ALBERT model)"),H4r=l(),BT=a("li"),s4e=a("strong"),U4r=o("bert"),J4r=o(" \u2014 "),zz=a("a"),Y4r=o("TFBertForTokenClassification"),K4r=o(" (BERT model)"),Z4r=l(),PT=a("li"),l4e=a("strong"),ebr=o("camembert"),obr=o(" \u2014 "),Qz=a("a"),rbr=o("TFCamembertForTokenClassification"),tbr=o(" (CamemBERT model)"),abr=l(),$T=a("li"),i4e=a("strong"),nbr=o("convbert"),sbr=o(" \u2014 "),Wz=a("a"),lbr=o("TFConvBertForTokenClassification"),ibr=o(" (ConvBERT model)"),dbr=l(),IT=a("li"),d4e=a("strong"),cbr=o("deberta"),fbr=o(" \u2014 "),Hz=a("a"),mbr=o("TFDebertaForTokenClassification"),gbr=o(" (DeBERTa model)"),hbr=l(),qT=a("li"),c4e=a("strong"),pbr=o("deberta-v2"),_br=o(" \u2014 "),Uz=a("a"),ubr=o("TFDebertaV2ForTokenClassification"),bbr=o(" (DeBERTa-v2 model)"),Fbr=l(),NT=a("li"),f4e=a("strong"),vbr=o("distilbert"),Tbr=o(" \u2014 "),Jz=a("a"),Mbr=o("TFDistilBertForTokenClassification"),Ebr=o(" (DistilBERT model)"),Cbr=l(),jT=a("li"),m4e=a("strong"),wbr=o("electra"),Abr=o(" \u2014 "),Yz=a("a"),ybr=o("TFElectraForTokenClassification"),Lbr=o(" (ELECTRA model)"),xbr=l(),DT=a("li"),g4e=a("strong"),kbr=o("flaubert"),Sbr=o(" \u2014 "),Kz=a("a"),Rbr=o("TFFlaubertForTokenClassification"),Bbr=o(" (FlauBERT model)"),Pbr=l(),GT=a("li"),h4e=a("strong"),$br=o("funnel"),Ibr=o(" \u2014 "),Zz=a("a"),qbr=o("TFFunnelForTokenClassification"),Nbr=o(" (Funnel Transformer model)"),jbr=l(),OT=a("li"),p4e=a("strong"),Dbr=o("layoutlm"),Gbr=o(" \u2014 "),eQ=a("a"),Obr=o("TFLayoutLMForTokenClassification"),Vbr=o(" (LayoutLM model)"),Xbr=l(),VT=a("li"),_4e=a("strong"),zbr=o("longformer"),Qbr=o(" \u2014 "),oQ=a("a"),Wbr=o("TFLongformerForTokenClassification"),Hbr=o(" (Longformer model)"),Ubr=l(),XT=a("li"),u4e=a("strong"),Jbr=o("mobilebert"),Ybr=o(" \u2014 "),rQ=a("a"),Kbr=o("TFMobileBertForTokenClassification"),Zbr=o(" (MobileBERT model)"),e5r=l(),zT=a("li"),b4e=a("strong"),o5r=o("mpnet"),r5r=o(" \u2014 "),tQ=a("a"),t5r=o("TFMPNetForTokenClassification"),a5r=o(" (MPNet model)"),n5r=l(),QT=a("li"),F4e=a("strong"),s5r=o("rembert"),l5r=o(" \u2014 "),aQ=a("a"),i5r=o("TFRemBertForTokenClassification"),d5r=o(" (RemBERT model)"),c5r=l(),WT=a("li"),v4e=a("strong"),f5r=o("roberta"),m5r=o(" \u2014 "),nQ=a("a"),g5r=o("TFRobertaForTokenClassification"),h5r=o(" (RoBERTa model)"),p5r=l(),HT=a("li"),T4e=a("strong"),_5r=o("roformer"),u5r=o(" \u2014 "),sQ=a("a"),b5r=o("TFRoFormerForTokenClassification"),F5r=o(" (RoFormer model)"),v5r=l(),UT=a("li"),M4e=a("strong"),T5r=o("xlm"),M5r=o(" \u2014 "),lQ=a("a"),E5r=o("TFXLMForTokenClassification"),C5r=o(" (XLM model)"),w5r=l(),JT=a("li"),E4e=a("strong"),A5r=o("xlm-roberta"),y5r=o(" \u2014 "),iQ=a("a"),L5r=o("TFXLMRobertaForTokenClassification"),x5r=o(" (XLM-RoBERTa model)"),k5r=l(),YT=a("li"),C4e=a("strong"),S5r=o("xlnet"),R5r=o(" \u2014 "),dQ=a("a"),B5r=o("TFXLNetForTokenClassification"),P5r=o(" (XLNet model)"),$5r=l(),w4e=a("p"),I5r=o("Examples:"),q5r=l(),f(EL.$$.fragment),rPe=l(),Vc=a("h2"),KT=a("a"),A4e=a("span"),f(CL.$$.fragment),N5r=l(),y4e=a("span"),j5r=o("TFAutoModelForQuestionAnswering"),tPe=l(),xr=a("div"),f(wL.$$.fragment),D5r=l(),Xc=a("p"),G5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cQ=a("a"),O5r=o("from_pretrained()"),V5r=o(" class method or the "),fQ=a("a"),X5r=o("from_config()"),z5r=o(` class
method.`),Q5r=l(),AL=a("p"),W5r=o("This class cannot be instantiated directly using "),L4e=a("code"),H5r=o("__init__()"),U5r=o(" (throws an error)."),J5r=l(),Et=a("div"),f(yL.$$.fragment),Y5r=l(),x4e=a("p"),K5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z5r=l(),zc=a("p"),e2r=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),o2r=o("not"),r2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),t2r=o("from_pretrained()"),a2r=o(" to load the model weights."),n2r=l(),S4e=a("p"),s2r=o("Examples:"),l2r=l(),f(LL.$$.fragment),i2r=l(),wo=a("div"),f(xL.$$.fragment),d2r=l(),R4e=a("p"),c2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f2r=l(),An=a("p"),m2r=o("The model class to instantiate is selected based on the "),B4e=a("code"),g2r=o("model_type"),h2r=o(` property of the config object (either
passed as an argument or loaded from `),P4e=a("code"),p2r=o("pretrained_model_name_or_path"),_2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=a("code"),u2r=o("pretrained_model_name_or_path"),b2r=o(":"),F2r=l(),Z=a("ul"),ZT=a("li"),I4e=a("strong"),v2r=o("albert"),T2r=o(" \u2014 "),gQ=a("a"),M2r=o("TFAlbertForQuestionAnswering"),E2r=o(" (ALBERT model)"),C2r=l(),eM=a("li"),q4e=a("strong"),w2r=o("bert"),A2r=o(" \u2014 "),hQ=a("a"),y2r=o("TFBertForQuestionAnswering"),L2r=o(" (BERT model)"),x2r=l(),oM=a("li"),N4e=a("strong"),k2r=o("camembert"),S2r=o(" \u2014 "),pQ=a("a"),R2r=o("TFCamembertForQuestionAnswering"),B2r=o(" (CamemBERT model)"),P2r=l(),rM=a("li"),j4e=a("strong"),$2r=o("convbert"),I2r=o(" \u2014 "),_Q=a("a"),q2r=o("TFConvBertForQuestionAnswering"),N2r=o(" (ConvBERT model)"),j2r=l(),tM=a("li"),D4e=a("strong"),D2r=o("deberta"),G2r=o(" \u2014 "),uQ=a("a"),O2r=o("TFDebertaForQuestionAnswering"),V2r=o(" (DeBERTa model)"),X2r=l(),aM=a("li"),G4e=a("strong"),z2r=o("deberta-v2"),Q2r=o(" \u2014 "),bQ=a("a"),W2r=o("TFDebertaV2ForQuestionAnswering"),H2r=o(" (DeBERTa-v2 model)"),U2r=l(),nM=a("li"),O4e=a("strong"),J2r=o("distilbert"),Y2r=o(" \u2014 "),FQ=a("a"),K2r=o("TFDistilBertForQuestionAnswering"),Z2r=o(" (DistilBERT model)"),eFr=l(),sM=a("li"),V4e=a("strong"),oFr=o("electra"),rFr=o(" \u2014 "),vQ=a("a"),tFr=o("TFElectraForQuestionAnswering"),aFr=o(" (ELECTRA model)"),nFr=l(),lM=a("li"),X4e=a("strong"),sFr=o("flaubert"),lFr=o(" \u2014 "),TQ=a("a"),iFr=o("TFFlaubertForQuestionAnsweringSimple"),dFr=o(" (FlauBERT model)"),cFr=l(),iM=a("li"),z4e=a("strong"),fFr=o("funnel"),mFr=o(" \u2014 "),MQ=a("a"),gFr=o("TFFunnelForQuestionAnswering"),hFr=o(" (Funnel Transformer model)"),pFr=l(),dM=a("li"),Q4e=a("strong"),_Fr=o("gptj"),uFr=o(" \u2014 "),EQ=a("a"),bFr=o("TFGPTJForQuestionAnswering"),FFr=o(" (GPT-J model)"),vFr=l(),cM=a("li"),W4e=a("strong"),TFr=o("longformer"),MFr=o(" \u2014 "),CQ=a("a"),EFr=o("TFLongformerForQuestionAnswering"),CFr=o(" (Longformer model)"),wFr=l(),fM=a("li"),H4e=a("strong"),AFr=o("mobilebert"),yFr=o(" \u2014 "),wQ=a("a"),LFr=o("TFMobileBertForQuestionAnswering"),xFr=o(" (MobileBERT model)"),kFr=l(),mM=a("li"),U4e=a("strong"),SFr=o("mpnet"),RFr=o(" \u2014 "),AQ=a("a"),BFr=o("TFMPNetForQuestionAnswering"),PFr=o(" (MPNet model)"),$Fr=l(),gM=a("li"),J4e=a("strong"),IFr=o("rembert"),qFr=o(" \u2014 "),yQ=a("a"),NFr=o("TFRemBertForQuestionAnswering"),jFr=o(" (RemBERT model)"),DFr=l(),hM=a("li"),Y4e=a("strong"),GFr=o("roberta"),OFr=o(" \u2014 "),LQ=a("a"),VFr=o("TFRobertaForQuestionAnswering"),XFr=o(" (RoBERTa model)"),zFr=l(),pM=a("li"),K4e=a("strong"),QFr=o("roformer"),WFr=o(" \u2014 "),xQ=a("a"),HFr=o("TFRoFormerForQuestionAnswering"),UFr=o(" (RoFormer model)"),JFr=l(),_M=a("li"),Z4e=a("strong"),YFr=o("xlm"),KFr=o(" \u2014 "),kQ=a("a"),ZFr=o("TFXLMForQuestionAnsweringSimple"),evr=o(" (XLM model)"),ovr=l(),uM=a("li"),ebe=a("strong"),rvr=o("xlm-roberta"),tvr=o(" \u2014 "),SQ=a("a"),avr=o("TFXLMRobertaForQuestionAnswering"),nvr=o(" (XLM-RoBERTa model)"),svr=l(),bM=a("li"),obe=a("strong"),lvr=o("xlnet"),ivr=o(" \u2014 "),RQ=a("a"),dvr=o("TFXLNetForQuestionAnsweringSimple"),cvr=o(" (XLNet model)"),fvr=l(),rbe=a("p"),mvr=o("Examples:"),gvr=l(),f(kL.$$.fragment),aPe=l(),Qc=a("h2"),FM=a("a"),tbe=a("span"),f(SL.$$.fragment),hvr=l(),abe=a("span"),pvr=o("TFAutoModelForVision2Seq"),nPe=l(),kr=a("div"),f(RL.$$.fragment),_vr=l(),Wc=a("p"),uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BQ=a("a"),bvr=o("from_pretrained()"),Fvr=o(" class method or the "),PQ=a("a"),vvr=o("from_config()"),Tvr=o(` class
method.`),Mvr=l(),BL=a("p"),Evr=o("This class cannot be instantiated directly using "),nbe=a("code"),Cvr=o("__init__()"),wvr=o(" (throws an error)."),Avr=l(),Ct=a("div"),f(PL.$$.fragment),yvr=l(),sbe=a("p"),Lvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xvr=l(),Hc=a("p"),kvr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),Svr=o("not"),Rvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Bvr=o("from_pretrained()"),Pvr=o(" to load the model weights."),$vr=l(),ibe=a("p"),Ivr=o("Examples:"),qvr=l(),f($L.$$.fragment),Nvr=l(),Ao=a("div"),f(IL.$$.fragment),jvr=l(),dbe=a("p"),Dvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Gvr=l(),yn=a("p"),Ovr=o("The model class to instantiate is selected based on the "),cbe=a("code"),Vvr=o("model_type"),Xvr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),zvr=o("pretrained_model_name_or_path"),Qvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=a("code"),Wvr=o("pretrained_model_name_or_path"),Hvr=o(":"),Uvr=l(),gbe=a("ul"),vM=a("li"),hbe=a("strong"),Jvr=o("vision-encoder-decoder"),Yvr=o(" \u2014 "),IQ=a("a"),Kvr=o("TFVisionEncoderDecoderModel"),Zvr=o(" (Vision Encoder decoder model)"),eTr=l(),pbe=a("p"),oTr=o("Examples:"),rTr=l(),f(qL.$$.fragment),sPe=l(),Uc=a("h2"),TM=a("a"),_be=a("span"),f(NL.$$.fragment),tTr=l(),ube=a("span"),aTr=o("TFAutoModelForSpeechSeq2Seq"),lPe=l(),Sr=a("div"),f(jL.$$.fragment),nTr=l(),Jc=a("p"),sTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qQ=a("a"),lTr=o("from_pretrained()"),iTr=o(" class method or the "),NQ=a("a"),dTr=o("from_config()"),cTr=o(` class
method.`),fTr=l(),DL=a("p"),mTr=o("This class cannot be instantiated directly using "),bbe=a("code"),gTr=o("__init__()"),hTr=o(" (throws an error)."),pTr=l(),wt=a("div"),f(GL.$$.fragment),_Tr=l(),Fbe=a("p"),uTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bTr=l(),Yc=a("p"),FTr=o(`Note:
Loading a model from its configuration file does `),vbe=a("strong"),vTr=o("not"),TTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=a("a"),MTr=o("from_pretrained()"),ETr=o(" to load the model weights."),CTr=l(),Tbe=a("p"),wTr=o("Examples:"),ATr=l(),f(OL.$$.fragment),yTr=l(),yo=a("div"),f(VL.$$.fragment),LTr=l(),Mbe=a("p"),xTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kTr=l(),Ln=a("p"),STr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),RTr=o("model_type"),BTr=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),PTr=o("pretrained_model_name_or_path"),$Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),ITr=o("pretrained_model_name_or_path"),qTr=o(":"),NTr=l(),Abe=a("ul"),MM=a("li"),ybe=a("strong"),jTr=o("speech_to_text"),DTr=o(" \u2014 "),DQ=a("a"),GTr=o("TFSpeech2TextForConditionalGeneration"),OTr=o(" (Speech2Text model)"),VTr=l(),Lbe=a("p"),XTr=o("Examples:"),zTr=l(),f(XL.$$.fragment),iPe=l(),Kc=a("h2"),EM=a("a"),xbe=a("span"),f(zL.$$.fragment),QTr=l(),kbe=a("span"),WTr=o("FlaxAutoModel"),dPe=l(),Rr=a("div"),f(QL.$$.fragment),HTr=l(),Zc=a("p"),UTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GQ=a("a"),JTr=o("from_pretrained()"),YTr=o(" class method or the "),OQ=a("a"),KTr=o("from_config()"),ZTr=o(` class
method.`),eMr=l(),WL=a("p"),oMr=o("This class cannot be instantiated directly using "),Sbe=a("code"),rMr=o("__init__()"),tMr=o(" (throws an error)."),aMr=l(),At=a("div"),f(HL.$$.fragment),nMr=l(),Rbe=a("p"),sMr=o("Instantiates one of the base model classes of the library from a configuration."),lMr=l(),ef=a("p"),iMr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),dMr=o("not"),cMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=a("a"),fMr=o("from_pretrained()"),mMr=o(" to load the model weights."),gMr=l(),Pbe=a("p"),hMr=o("Examples:"),pMr=l(),f(UL.$$.fragment),_Mr=l(),Lo=a("div"),f(JL.$$.fragment),uMr=l(),$be=a("p"),bMr=o("Instantiate one of the base model classes of the library from a pretrained model."),FMr=l(),xn=a("p"),vMr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),TMr=o("model_type"),MMr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),EMr=o("pretrained_model_name_or_path"),CMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),wMr=o("pretrained_model_name_or_path"),AMr=o(":"),yMr=l(),z=a("ul"),CM=a("li"),jbe=a("strong"),LMr=o("albert"),xMr=o(" \u2014 "),XQ=a("a"),kMr=o("FlaxAlbertModel"),SMr=o(" (ALBERT model)"),RMr=l(),wM=a("li"),Dbe=a("strong"),BMr=o("bart"),PMr=o(" \u2014 "),zQ=a("a"),$Mr=o("FlaxBartModel"),IMr=o(" (BART model)"),qMr=l(),AM=a("li"),Gbe=a("strong"),NMr=o("beit"),jMr=o(" \u2014 "),QQ=a("a"),DMr=o("FlaxBeitModel"),GMr=o(" (BEiT model)"),OMr=l(),yM=a("li"),Obe=a("strong"),VMr=o("bert"),XMr=o(" \u2014 "),WQ=a("a"),zMr=o("FlaxBertModel"),QMr=o(" (BERT model)"),WMr=l(),LM=a("li"),Vbe=a("strong"),HMr=o("big_bird"),UMr=o(" \u2014 "),HQ=a("a"),JMr=o("FlaxBigBirdModel"),YMr=o(" (BigBird model)"),KMr=l(),xM=a("li"),Xbe=a("strong"),ZMr=o("blenderbot"),eEr=o(" \u2014 "),UQ=a("a"),oEr=o("FlaxBlenderbotModel"),rEr=o(" (Blenderbot model)"),tEr=l(),kM=a("li"),zbe=a("strong"),aEr=o("blenderbot-small"),nEr=o(" \u2014 "),JQ=a("a"),sEr=o("FlaxBlenderbotSmallModel"),lEr=o(" (BlenderbotSmall model)"),iEr=l(),SM=a("li"),Qbe=a("strong"),dEr=o("clip"),cEr=o(" \u2014 "),YQ=a("a"),fEr=o("FlaxCLIPModel"),mEr=o(" (CLIP model)"),gEr=l(),RM=a("li"),Wbe=a("strong"),hEr=o("distilbert"),pEr=o(" \u2014 "),KQ=a("a"),_Er=o("FlaxDistilBertModel"),uEr=o(" (DistilBERT model)"),bEr=l(),BM=a("li"),Hbe=a("strong"),FEr=o("electra"),vEr=o(" \u2014 "),ZQ=a("a"),TEr=o("FlaxElectraModel"),MEr=o(" (ELECTRA model)"),EEr=l(),PM=a("li"),Ube=a("strong"),CEr=o("gpt2"),wEr=o(" \u2014 "),eW=a("a"),AEr=o("FlaxGPT2Model"),yEr=o(" (OpenAI GPT-2 model)"),LEr=l(),$M=a("li"),Jbe=a("strong"),xEr=o("gpt_neo"),kEr=o(" \u2014 "),oW=a("a"),SEr=o("FlaxGPTNeoModel"),REr=o(" (GPT Neo model)"),BEr=l(),IM=a("li"),Ybe=a("strong"),PEr=o("gptj"),$Er=o(" \u2014 "),rW=a("a"),IEr=o("FlaxGPTJModel"),qEr=o(" (GPT-J model)"),NEr=l(),qM=a("li"),Kbe=a("strong"),jEr=o("marian"),DEr=o(" \u2014 "),tW=a("a"),GEr=o("FlaxMarianModel"),OEr=o(" (Marian model)"),VEr=l(),NM=a("li"),Zbe=a("strong"),XEr=o("mbart"),zEr=o(" \u2014 "),aW=a("a"),QEr=o("FlaxMBartModel"),WEr=o(" (mBART model)"),HEr=l(),jM=a("li"),e5e=a("strong"),UEr=o("mt5"),JEr=o(" \u2014 "),nW=a("a"),YEr=o("FlaxMT5Model"),KEr=o(" (mT5 model)"),ZEr=l(),DM=a("li"),o5e=a("strong"),e3r=o("pegasus"),o3r=o(" \u2014 "),sW=a("a"),r3r=o("FlaxPegasusModel"),t3r=o(" (Pegasus model)"),a3r=l(),GM=a("li"),r5e=a("strong"),n3r=o("roberta"),s3r=o(" \u2014 "),lW=a("a"),l3r=o("FlaxRobertaModel"),i3r=o(" (RoBERTa model)"),d3r=l(),OM=a("li"),t5e=a("strong"),c3r=o("roformer"),f3r=o(" \u2014 "),iW=a("a"),m3r=o("FlaxRoFormerModel"),g3r=o(" (RoFormer model)"),h3r=l(),VM=a("li"),a5e=a("strong"),p3r=o("t5"),_3r=o(" \u2014 "),dW=a("a"),u3r=o("FlaxT5Model"),b3r=o(" (T5 model)"),F3r=l(),XM=a("li"),n5e=a("strong"),v3r=o("vision-text-dual-encoder"),T3r=o(" \u2014 "),cW=a("a"),M3r=o("FlaxVisionTextDualEncoderModel"),E3r=o(" (VisionTextDualEncoder model)"),C3r=l(),zM=a("li"),s5e=a("strong"),w3r=o("vit"),A3r=o(" \u2014 "),fW=a("a"),y3r=o("FlaxViTModel"),L3r=o(" (ViT model)"),x3r=l(),QM=a("li"),l5e=a("strong"),k3r=o("wav2vec2"),S3r=o(" \u2014 "),mW=a("a"),R3r=o("FlaxWav2Vec2Model"),B3r=o(" (Wav2Vec2 model)"),P3r=l(),WM=a("li"),i5e=a("strong"),$3r=o("xglm"),I3r=o(" \u2014 "),gW=a("a"),q3r=o("FlaxXGLMModel"),N3r=o(" (XGLM model)"),j3r=l(),HM=a("li"),d5e=a("strong"),D3r=o("xlm-roberta"),G3r=o(" \u2014 "),hW=a("a"),O3r=o("FlaxXLMRobertaModel"),V3r=o(" (XLM-RoBERTa model)"),X3r=l(),c5e=a("p"),z3r=o("Examples:"),Q3r=l(),f(YL.$$.fragment),cPe=l(),of=a("h2"),UM=a("a"),f5e=a("span"),f(KL.$$.fragment),W3r=l(),m5e=a("span"),H3r=o("FlaxAutoModelForCausalLM"),fPe=l(),Br=a("div"),f(ZL.$$.fragment),U3r=l(),rf=a("p"),J3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pW=a("a"),Y3r=o("from_pretrained()"),K3r=o(" class method or the "),_W=a("a"),Z3r=o("from_config()"),eCr=o(` class
method.`),oCr=l(),e8=a("p"),rCr=o("This class cannot be instantiated directly using "),g5e=a("code"),tCr=o("__init__()"),aCr=o(" (throws an error)."),nCr=l(),yt=a("div"),f(o8.$$.fragment),sCr=l(),h5e=a("p"),lCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iCr=l(),tf=a("p"),dCr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),cCr=o("not"),fCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),mCr=o("from_pretrained()"),gCr=o(" to load the model weights."),hCr=l(),_5e=a("p"),pCr=o("Examples:"),_Cr=l(),f(r8.$$.fragment),uCr=l(),xo=a("div"),f(t8.$$.fragment),bCr=l(),u5e=a("p"),FCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vCr=l(),kn=a("p"),TCr=o("The model class to instantiate is selected based on the "),b5e=a("code"),MCr=o("model_type"),ECr=o(` property of the config object (either
passed as an argument or loaded from `),F5e=a("code"),CCr=o("pretrained_model_name_or_path"),wCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=a("code"),ACr=o("pretrained_model_name_or_path"),yCr=o(":"),LCr=l(),ca=a("ul"),JM=a("li"),T5e=a("strong"),xCr=o("bart"),kCr=o(" \u2014 "),bW=a("a"),SCr=o("FlaxBartForCausalLM"),RCr=o(" (BART model)"),BCr=l(),YM=a("li"),M5e=a("strong"),PCr=o("gpt2"),$Cr=o(" \u2014 "),FW=a("a"),ICr=o("FlaxGPT2LMHeadModel"),qCr=o(" (OpenAI GPT-2 model)"),NCr=l(),KM=a("li"),E5e=a("strong"),jCr=o("gpt_neo"),DCr=o(" \u2014 "),vW=a("a"),GCr=o("FlaxGPTNeoForCausalLM"),OCr=o(" (GPT Neo model)"),VCr=l(),ZM=a("li"),C5e=a("strong"),XCr=o("gptj"),zCr=o(" \u2014 "),TW=a("a"),QCr=o("FlaxGPTJForCausalLM"),WCr=o(" (GPT-J model)"),HCr=l(),eE=a("li"),w5e=a("strong"),UCr=o("xglm"),JCr=o(" \u2014 "),MW=a("a"),YCr=o("FlaxXGLMForCausalLM"),KCr=o(" (XGLM model)"),ZCr=l(),A5e=a("p"),ewr=o("Examples:"),owr=l(),f(a8.$$.fragment),mPe=l(),af=a("h2"),oE=a("a"),y5e=a("span"),f(n8.$$.fragment),rwr=l(),L5e=a("span"),twr=o("FlaxAutoModelForPreTraining"),gPe=l(),Pr=a("div"),f(s8.$$.fragment),awr=l(),nf=a("p"),nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EW=a("a"),swr=o("from_pretrained()"),lwr=o(" class method or the "),CW=a("a"),iwr=o("from_config()"),dwr=o(` class
method.`),cwr=l(),l8=a("p"),fwr=o("This class cannot be instantiated directly using "),x5e=a("code"),mwr=o("__init__()"),gwr=o(" (throws an error)."),hwr=l(),Lt=a("div"),f(i8.$$.fragment),pwr=l(),k5e=a("p"),_wr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uwr=l(),sf=a("p"),bwr=o(`Note:
Loading a model from its configuration file does `),S5e=a("strong"),Fwr=o("not"),vwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),Twr=o("from_pretrained()"),Mwr=o(" to load the model weights."),Ewr=l(),R5e=a("p"),Cwr=o("Examples:"),wwr=l(),f(d8.$$.fragment),Awr=l(),ko=a("div"),f(c8.$$.fragment),ywr=l(),B5e=a("p"),Lwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xwr=l(),Sn=a("p"),kwr=o("The model class to instantiate is selected based on the "),P5e=a("code"),Swr=o("model_type"),Rwr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),Bwr=o("pretrained_model_name_or_path"),Pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),$wr=o("pretrained_model_name_or_path"),Iwr=o(":"),qwr=l(),me=a("ul"),rE=a("li"),q5e=a("strong"),Nwr=o("albert"),jwr=o(" \u2014 "),AW=a("a"),Dwr=o("FlaxAlbertForPreTraining"),Gwr=o(" (ALBERT model)"),Owr=l(),tE=a("li"),N5e=a("strong"),Vwr=o("bart"),Xwr=o(" \u2014 "),yW=a("a"),zwr=o("FlaxBartForConditionalGeneration"),Qwr=o(" (BART model)"),Wwr=l(),aE=a("li"),j5e=a("strong"),Hwr=o("bert"),Uwr=o(" \u2014 "),LW=a("a"),Jwr=o("FlaxBertForPreTraining"),Ywr=o(" (BERT model)"),Kwr=l(),nE=a("li"),D5e=a("strong"),Zwr=o("big_bird"),eAr=o(" \u2014 "),xW=a("a"),oAr=o("FlaxBigBirdForPreTraining"),rAr=o(" (BigBird model)"),tAr=l(),sE=a("li"),G5e=a("strong"),aAr=o("electra"),nAr=o(" \u2014 "),kW=a("a"),sAr=o("FlaxElectraForPreTraining"),lAr=o(" (ELECTRA model)"),iAr=l(),lE=a("li"),O5e=a("strong"),dAr=o("mbart"),cAr=o(" \u2014 "),SW=a("a"),fAr=o("FlaxMBartForConditionalGeneration"),mAr=o(" (mBART model)"),gAr=l(),iE=a("li"),V5e=a("strong"),hAr=o("mt5"),pAr=o(" \u2014 "),RW=a("a"),_Ar=o("FlaxMT5ForConditionalGeneration"),uAr=o(" (mT5 model)"),bAr=l(),dE=a("li"),X5e=a("strong"),FAr=o("roberta"),vAr=o(" \u2014 "),BW=a("a"),TAr=o("FlaxRobertaForMaskedLM"),MAr=o(" (RoBERTa model)"),EAr=l(),cE=a("li"),z5e=a("strong"),CAr=o("roformer"),wAr=o(" \u2014 "),PW=a("a"),AAr=o("FlaxRoFormerForMaskedLM"),yAr=o(" (RoFormer model)"),LAr=l(),fE=a("li"),Q5e=a("strong"),xAr=o("t5"),kAr=o(" \u2014 "),$W=a("a"),SAr=o("FlaxT5ForConditionalGeneration"),RAr=o(" (T5 model)"),BAr=l(),mE=a("li"),W5e=a("strong"),PAr=o("wav2vec2"),$Ar=o(" \u2014 "),IW=a("a"),IAr=o("FlaxWav2Vec2ForPreTraining"),qAr=o(" (Wav2Vec2 model)"),NAr=l(),gE=a("li"),H5e=a("strong"),jAr=o("xlm-roberta"),DAr=o(" \u2014 "),qW=a("a"),GAr=o("FlaxXLMRobertaForMaskedLM"),OAr=o(" (XLM-RoBERTa model)"),VAr=l(),U5e=a("p"),XAr=o("Examples:"),zAr=l(),f(f8.$$.fragment),hPe=l(),lf=a("h2"),hE=a("a"),J5e=a("span"),f(m8.$$.fragment),QAr=l(),Y5e=a("span"),WAr=o("FlaxAutoModelForMaskedLM"),pPe=l(),$r=a("div"),f(g8.$$.fragment),HAr=l(),df=a("p"),UAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NW=a("a"),JAr=o("from_pretrained()"),YAr=o(" class method or the "),jW=a("a"),KAr=o("from_config()"),ZAr=o(` class
method.`),e0r=l(),h8=a("p"),o0r=o("This class cannot be instantiated directly using "),K5e=a("code"),r0r=o("__init__()"),t0r=o(" (throws an error)."),a0r=l(),xt=a("div"),f(p8.$$.fragment),n0r=l(),Z5e=a("p"),s0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l0r=l(),cf=a("p"),i0r=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),d0r=o("not"),c0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=a("a"),f0r=o("from_pretrained()"),m0r=o(" to load the model weights."),g0r=l(),o2e=a("p"),h0r=o("Examples:"),p0r=l(),f(_8.$$.fragment),_0r=l(),So=a("div"),f(u8.$$.fragment),u0r=l(),r2e=a("p"),b0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),F0r=l(),Rn=a("p"),v0r=o("The model class to instantiate is selected based on the "),t2e=a("code"),T0r=o("model_type"),M0r=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),E0r=o("pretrained_model_name_or_path"),C0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),w0r=o("pretrained_model_name_or_path"),A0r=o(":"),y0r=l(),Fe=a("ul"),pE=a("li"),s2e=a("strong"),L0r=o("albert"),x0r=o(" \u2014 "),GW=a("a"),k0r=o("FlaxAlbertForMaskedLM"),S0r=o(" (ALBERT model)"),R0r=l(),_E=a("li"),l2e=a("strong"),B0r=o("bart"),P0r=o(" \u2014 "),OW=a("a"),$0r=o("FlaxBartForConditionalGeneration"),I0r=o(" (BART model)"),q0r=l(),uE=a("li"),i2e=a("strong"),N0r=o("bert"),j0r=o(" \u2014 "),VW=a("a"),D0r=o("FlaxBertForMaskedLM"),G0r=o(" (BERT model)"),O0r=l(),bE=a("li"),d2e=a("strong"),V0r=o("big_bird"),X0r=o(" \u2014 "),XW=a("a"),z0r=o("FlaxBigBirdForMaskedLM"),Q0r=o(" (BigBird model)"),W0r=l(),FE=a("li"),c2e=a("strong"),H0r=o("distilbert"),U0r=o(" \u2014 "),zW=a("a"),J0r=o("FlaxDistilBertForMaskedLM"),Y0r=o(" (DistilBERT model)"),K0r=l(),vE=a("li"),f2e=a("strong"),Z0r=o("electra"),eyr=o(" \u2014 "),QW=a("a"),oyr=o("FlaxElectraForMaskedLM"),ryr=o(" (ELECTRA model)"),tyr=l(),TE=a("li"),m2e=a("strong"),ayr=o("mbart"),nyr=o(" \u2014 "),WW=a("a"),syr=o("FlaxMBartForConditionalGeneration"),lyr=o(" (mBART model)"),iyr=l(),ME=a("li"),g2e=a("strong"),dyr=o("roberta"),cyr=o(" \u2014 "),HW=a("a"),fyr=o("FlaxRobertaForMaskedLM"),myr=o(" (RoBERTa model)"),gyr=l(),EE=a("li"),h2e=a("strong"),hyr=o("roformer"),pyr=o(" \u2014 "),UW=a("a"),_yr=o("FlaxRoFormerForMaskedLM"),uyr=o(" (RoFormer model)"),byr=l(),CE=a("li"),p2e=a("strong"),Fyr=o("xlm-roberta"),vyr=o(" \u2014 "),JW=a("a"),Tyr=o("FlaxXLMRobertaForMaskedLM"),Myr=o(" (XLM-RoBERTa model)"),Eyr=l(),_2e=a("p"),Cyr=o("Examples:"),wyr=l(),f(b8.$$.fragment),_Pe=l(),ff=a("h2"),wE=a("a"),u2e=a("span"),f(F8.$$.fragment),Ayr=l(),b2e=a("span"),yyr=o("FlaxAutoModelForSeq2SeqLM"),uPe=l(),Ir=a("div"),f(v8.$$.fragment),Lyr=l(),mf=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YW=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),KW=a("a"),Ryr=o("from_config()"),Byr=o(` class
method.`),Pyr=l(),T8=a("p"),$yr=o("This class cannot be instantiated directly using "),F2e=a("code"),Iyr=o("__init__()"),qyr=o(" (throws an error)."),Nyr=l(),kt=a("div"),f(M8.$$.fragment),jyr=l(),v2e=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gyr=l(),gf=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),zyr=o("from_pretrained()"),Qyr=o(" to load the model weights."),Wyr=l(),M2e=a("p"),Hyr=o("Examples:"),Uyr=l(),f(E8.$$.fragment),Jyr=l(),Ro=a("div"),f(C8.$$.fragment),Yyr=l(),E2e=a("p"),Kyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zyr=l(),Bn=a("p"),eLr=o("The model class to instantiate is selected based on the "),C2e=a("code"),oLr=o("model_type"),rLr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),tLr=o("pretrained_model_name_or_path"),aLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(":"),lLr=l(),Ce=a("ul"),AE=a("li"),y2e=a("strong"),iLr=o("bart"),dLr=o(" \u2014 "),eH=a("a"),cLr=o("FlaxBartForConditionalGeneration"),fLr=o(" (BART model)"),mLr=l(),yE=a("li"),L2e=a("strong"),gLr=o("blenderbot"),hLr=o(" \u2014 "),oH=a("a"),pLr=o("FlaxBlenderbotForConditionalGeneration"),_Lr=o(" (Blenderbot model)"),uLr=l(),LE=a("li"),x2e=a("strong"),bLr=o("blenderbot-small"),FLr=o(" \u2014 "),rH=a("a"),vLr=o("FlaxBlenderbotSmallForConditionalGeneration"),TLr=o(" (BlenderbotSmall model)"),MLr=l(),xE=a("li"),k2e=a("strong"),ELr=o("encoder-decoder"),CLr=o(" \u2014 "),tH=a("a"),wLr=o("FlaxEncoderDecoderModel"),ALr=o(" (Encoder decoder model)"),yLr=l(),kE=a("li"),S2e=a("strong"),LLr=o("marian"),xLr=o(" \u2014 "),aH=a("a"),kLr=o("FlaxMarianMTModel"),SLr=o(" (Marian model)"),RLr=l(),SE=a("li"),R2e=a("strong"),BLr=o("mbart"),PLr=o(" \u2014 "),nH=a("a"),$Lr=o("FlaxMBartForConditionalGeneration"),ILr=o(" (mBART model)"),qLr=l(),RE=a("li"),B2e=a("strong"),NLr=o("mt5"),jLr=o(" \u2014 "),sH=a("a"),DLr=o("FlaxMT5ForConditionalGeneration"),GLr=o(" (mT5 model)"),OLr=l(),BE=a("li"),P2e=a("strong"),VLr=o("pegasus"),XLr=o(" \u2014 "),lH=a("a"),zLr=o("FlaxPegasusForConditionalGeneration"),QLr=o(" (Pegasus model)"),WLr=l(),PE=a("li"),$2e=a("strong"),HLr=o("t5"),ULr=o(" \u2014 "),iH=a("a"),JLr=o("FlaxT5ForConditionalGeneration"),YLr=o(" (T5 model)"),KLr=l(),I2e=a("p"),ZLr=o("Examples:"),e8r=l(),f(w8.$$.fragment),bPe=l(),hf=a("h2"),$E=a("a"),q2e=a("span"),f(A8.$$.fragment),o8r=l(),N2e=a("span"),r8r=o("FlaxAutoModelForSequenceClassification"),FPe=l(),qr=a("div"),f(y8.$$.fragment),t8r=l(),pf=a("p"),a8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dH=a("a"),n8r=o("from_pretrained()"),s8r=o(" class method or the "),cH=a("a"),l8r=o("from_config()"),i8r=o(` class
method.`),d8r=l(),L8=a("p"),c8r=o("This class cannot be instantiated directly using "),j2e=a("code"),f8r=o("__init__()"),m8r=o(" (throws an error)."),g8r=l(),St=a("div"),f(x8.$$.fragment),h8r=l(),D2e=a("p"),p8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_8r=l(),_f=a("p"),u8r=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),b8r=o("not"),F8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),v8r=o("from_pretrained()"),T8r=o(" to load the model weights."),M8r=l(),O2e=a("p"),E8r=o("Examples:"),C8r=l(),f(k8.$$.fragment),w8r=l(),Bo=a("div"),f(S8.$$.fragment),A8r=l(),V2e=a("p"),y8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L8r=l(),Pn=a("p"),x8r=o("The model class to instantiate is selected based on the "),X2e=a("code"),k8r=o("model_type"),S8r=o(` property of the config object (either
passed as an argument or loaded from `),z2e=a("code"),R8r=o("pretrained_model_name_or_path"),B8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),P8r=o("pretrained_model_name_or_path"),$8r=o(":"),I8r=l(),ve=a("ul"),IE=a("li"),W2e=a("strong"),q8r=o("albert"),N8r=o(" \u2014 "),mH=a("a"),j8r=o("FlaxAlbertForSequenceClassification"),D8r=o(" (ALBERT model)"),G8r=l(),qE=a("li"),H2e=a("strong"),O8r=o("bart"),V8r=o(" \u2014 "),gH=a("a"),X8r=o("FlaxBartForSequenceClassification"),z8r=o(" (BART model)"),Q8r=l(),NE=a("li"),U2e=a("strong"),W8r=o("bert"),H8r=o(" \u2014 "),hH=a("a"),U8r=o("FlaxBertForSequenceClassification"),J8r=o(" (BERT model)"),Y8r=l(),jE=a("li"),J2e=a("strong"),K8r=o("big_bird"),Z8r=o(" \u2014 "),pH=a("a"),e7r=o("FlaxBigBirdForSequenceClassification"),o7r=o(" (BigBird model)"),r7r=l(),DE=a("li"),Y2e=a("strong"),t7r=o("distilbert"),a7r=o(" \u2014 "),_H=a("a"),n7r=o("FlaxDistilBertForSequenceClassification"),s7r=o(" (DistilBERT model)"),l7r=l(),GE=a("li"),K2e=a("strong"),i7r=o("electra"),d7r=o(" \u2014 "),uH=a("a"),c7r=o("FlaxElectraForSequenceClassification"),f7r=o(" (ELECTRA model)"),m7r=l(),OE=a("li"),Z2e=a("strong"),g7r=o("mbart"),h7r=o(" \u2014 "),bH=a("a"),p7r=o("FlaxMBartForSequenceClassification"),_7r=o(" (mBART model)"),u7r=l(),VE=a("li"),eFe=a("strong"),b7r=o("roberta"),F7r=o(" \u2014 "),FH=a("a"),v7r=o("FlaxRobertaForSequenceClassification"),T7r=o(" (RoBERTa model)"),M7r=l(),XE=a("li"),oFe=a("strong"),E7r=o("roformer"),C7r=o(" \u2014 "),vH=a("a"),w7r=o("FlaxRoFormerForSequenceClassification"),A7r=o(" (RoFormer model)"),y7r=l(),zE=a("li"),rFe=a("strong"),L7r=o("xlm-roberta"),x7r=o(" \u2014 "),TH=a("a"),k7r=o("FlaxXLMRobertaForSequenceClassification"),S7r=o(" (XLM-RoBERTa model)"),R7r=l(),tFe=a("p"),B7r=o("Examples:"),P7r=l(),f(R8.$$.fragment),vPe=l(),uf=a("h2"),QE=a("a"),aFe=a("span"),f(B8.$$.fragment),$7r=l(),nFe=a("span"),I7r=o("FlaxAutoModelForQuestionAnswering"),TPe=l(),Nr=a("div"),f(P8.$$.fragment),q7r=l(),bf=a("p"),N7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MH=a("a"),j7r=o("from_pretrained()"),D7r=o(" class method or the "),EH=a("a"),G7r=o("from_config()"),O7r=o(` class
method.`),V7r=l(),$8=a("p"),X7r=o("This class cannot be instantiated directly using "),sFe=a("code"),z7r=o("__init__()"),Q7r=o(" (throws an error)."),W7r=l(),Rt=a("div"),f(I8.$$.fragment),H7r=l(),lFe=a("p"),U7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J7r=l(),Ff=a("p"),Y7r=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),K7r=o("not"),Z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),e9r=o("from_pretrained()"),o9r=o(" to load the model weights."),r9r=l(),dFe=a("p"),t9r=o("Examples:"),a9r=l(),f(q8.$$.fragment),n9r=l(),Po=a("div"),f(N8.$$.fragment),s9r=l(),cFe=a("p"),l9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i9r=l(),$n=a("p"),d9r=o("The model class to instantiate is selected based on the "),fFe=a("code"),c9r=o("model_type"),f9r=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),m9r=o("pretrained_model_name_or_path"),g9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),h9r=o("pretrained_model_name_or_path"),p9r=o(":"),_9r=l(),Te=a("ul"),WE=a("li"),hFe=a("strong"),u9r=o("albert"),b9r=o(" \u2014 "),wH=a("a"),F9r=o("FlaxAlbertForQuestionAnswering"),v9r=o(" (ALBERT model)"),T9r=l(),HE=a("li"),pFe=a("strong"),M9r=o("bart"),E9r=o(" \u2014 "),AH=a("a"),C9r=o("FlaxBartForQuestionAnswering"),w9r=o(" (BART model)"),A9r=l(),UE=a("li"),_Fe=a("strong"),y9r=o("bert"),L9r=o(" \u2014 "),yH=a("a"),x9r=o("FlaxBertForQuestionAnswering"),k9r=o(" (BERT model)"),S9r=l(),JE=a("li"),uFe=a("strong"),R9r=o("big_bird"),B9r=o(" \u2014 "),LH=a("a"),P9r=o("FlaxBigBirdForQuestionAnswering"),$9r=o(" (BigBird model)"),I9r=l(),YE=a("li"),bFe=a("strong"),q9r=o("distilbert"),N9r=o(" \u2014 "),xH=a("a"),j9r=o("FlaxDistilBertForQuestionAnswering"),D9r=o(" (DistilBERT model)"),G9r=l(),KE=a("li"),FFe=a("strong"),O9r=o("electra"),V9r=o(" \u2014 "),kH=a("a"),X9r=o("FlaxElectraForQuestionAnswering"),z9r=o(" (ELECTRA model)"),Q9r=l(),ZE=a("li"),vFe=a("strong"),W9r=o("mbart"),H9r=o(" \u2014 "),SH=a("a"),U9r=o("FlaxMBartForQuestionAnswering"),J9r=o(" (mBART model)"),Y9r=l(),e3=a("li"),TFe=a("strong"),K9r=o("roberta"),Z9r=o(" \u2014 "),RH=a("a"),exr=o("FlaxRobertaForQuestionAnswering"),oxr=o(" (RoBERTa model)"),rxr=l(),o3=a("li"),MFe=a("strong"),txr=o("roformer"),axr=o(" \u2014 "),BH=a("a"),nxr=o("FlaxRoFormerForQuestionAnswering"),sxr=o(" (RoFormer model)"),lxr=l(),r3=a("li"),EFe=a("strong"),ixr=o("xlm-roberta"),dxr=o(" \u2014 "),PH=a("a"),cxr=o("FlaxXLMRobertaForQuestionAnswering"),fxr=o(" (XLM-RoBERTa model)"),mxr=l(),CFe=a("p"),gxr=o("Examples:"),hxr=l(),f(j8.$$.fragment),MPe=l(),vf=a("h2"),t3=a("a"),wFe=a("span"),f(D8.$$.fragment),pxr=l(),AFe=a("span"),_xr=o("FlaxAutoModelForTokenClassification"),EPe=l(),jr=a("div"),f(G8.$$.fragment),uxr=l(),Tf=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$H=a("a"),Fxr=o("from_pretrained()"),vxr=o(" class method or the "),IH=a("a"),Txr=o("from_config()"),Mxr=o(` class
method.`),Exr=l(),O8=a("p"),Cxr=o("This class cannot be instantiated directly using "),yFe=a("code"),wxr=o("__init__()"),Axr=o(" (throws an error)."),yxr=l(),Bt=a("div"),f(V8.$$.fragment),Lxr=l(),LFe=a("p"),xxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kxr=l(),Mf=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),Rxr=o("not"),Bxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),Pxr=o("from_pretrained()"),$xr=o(" to load the model weights."),Ixr=l(),kFe=a("p"),qxr=o("Examples:"),Nxr=l(),f(X8.$$.fragment),jxr=l(),$o=a("div"),f(z8.$$.fragment),Dxr=l(),SFe=a("p"),Gxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oxr=l(),In=a("p"),Vxr=o("The model class to instantiate is selected based on the "),RFe=a("code"),Xxr=o("model_type"),zxr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),Qxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),Hxr=o("pretrained_model_name_or_path"),Uxr=o(":"),Jxr=l(),Be=a("ul"),a3=a("li"),$Fe=a("strong"),Yxr=o("albert"),Kxr=o(" \u2014 "),NH=a("a"),Zxr=o("FlaxAlbertForTokenClassification"),ekr=o(" (ALBERT model)"),okr=l(),n3=a("li"),IFe=a("strong"),rkr=o("bert"),tkr=o(" \u2014 "),jH=a("a"),akr=o("FlaxBertForTokenClassification"),nkr=o(" (BERT model)"),skr=l(),s3=a("li"),qFe=a("strong"),lkr=o("big_bird"),ikr=o(" \u2014 "),DH=a("a"),dkr=o("FlaxBigBirdForTokenClassification"),ckr=o(" (BigBird model)"),fkr=l(),l3=a("li"),NFe=a("strong"),mkr=o("distilbert"),gkr=o(" \u2014 "),GH=a("a"),hkr=o("FlaxDistilBertForTokenClassification"),pkr=o(" (DistilBERT model)"),_kr=l(),i3=a("li"),jFe=a("strong"),ukr=o("electra"),bkr=o(" \u2014 "),OH=a("a"),Fkr=o("FlaxElectraForTokenClassification"),vkr=o(" (ELECTRA model)"),Tkr=l(),d3=a("li"),DFe=a("strong"),Mkr=o("roberta"),Ekr=o(" \u2014 "),VH=a("a"),Ckr=o("FlaxRobertaForTokenClassification"),wkr=o(" (RoBERTa model)"),Akr=l(),c3=a("li"),GFe=a("strong"),ykr=o("roformer"),Lkr=o(" \u2014 "),XH=a("a"),xkr=o("FlaxRoFormerForTokenClassification"),kkr=o(" (RoFormer model)"),Skr=l(),f3=a("li"),OFe=a("strong"),Rkr=o("xlm-roberta"),Bkr=o(" \u2014 "),zH=a("a"),Pkr=o("FlaxXLMRobertaForTokenClassification"),$kr=o(" (XLM-RoBERTa model)"),Ikr=l(),VFe=a("p"),qkr=o("Examples:"),Nkr=l(),f(Q8.$$.fragment),CPe=l(),Ef=a("h2"),m3=a("a"),XFe=a("span"),f(W8.$$.fragment),jkr=l(),zFe=a("span"),Dkr=o("FlaxAutoModelForMultipleChoice"),wPe=l(),Dr=a("div"),f(H8.$$.fragment),Gkr=l(),Cf=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QH=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),WH=a("a"),zkr=o("from_config()"),Qkr=o(` class
method.`),Wkr=l(),U8=a("p"),Hkr=o("This class cannot be instantiated directly using "),QFe=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Pt=a("div"),f(J8.$$.fragment),Kkr=l(),WFe=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eSr=l(),wf=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),UFe=a("p"),lSr=o("Examples:"),iSr=l(),f(Y8.$$.fragment),dSr=l(),Io=a("div"),f(K8.$$.fragment),cSr=l(),JFe=a("p"),fSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mSr=l(),qn=a("p"),gSr=o("The model class to instantiate is selected based on the "),YFe=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),bSr=o("pretrained_model_name_or_path"),FSr=o(":"),vSr=l(),Pe=a("ul"),g3=a("li"),eve=a("strong"),TSr=o("albert"),MSr=o(" \u2014 "),UH=a("a"),ESr=o("FlaxAlbertForMultipleChoice"),CSr=o(" (ALBERT model)"),wSr=l(),h3=a("li"),ove=a("strong"),ASr=o("bert"),ySr=o(" \u2014 "),JH=a("a"),LSr=o("FlaxBertForMultipleChoice"),xSr=o(" (BERT model)"),kSr=l(),p3=a("li"),rve=a("strong"),SSr=o("big_bird"),RSr=o(" \u2014 "),YH=a("a"),BSr=o("FlaxBigBirdForMultipleChoice"),PSr=o(" (BigBird model)"),$Sr=l(),_3=a("li"),tve=a("strong"),ISr=o("distilbert"),qSr=o(" \u2014 "),KH=a("a"),NSr=o("FlaxDistilBertForMultipleChoice"),jSr=o(" (DistilBERT model)"),DSr=l(),u3=a("li"),ave=a("strong"),GSr=o("electra"),OSr=o(" \u2014 "),ZH=a("a"),VSr=o("FlaxElectraForMultipleChoice"),XSr=o(" (ELECTRA model)"),zSr=l(),b3=a("li"),nve=a("strong"),QSr=o("roberta"),WSr=o(" \u2014 "),eU=a("a"),HSr=o("FlaxRobertaForMultipleChoice"),USr=o(" (RoBERTa model)"),JSr=l(),F3=a("li"),sve=a("strong"),YSr=o("roformer"),KSr=o(" \u2014 "),oU=a("a"),ZSr=o("FlaxRoFormerForMultipleChoice"),eRr=o(" (RoFormer model)"),oRr=l(),v3=a("li"),lve=a("strong"),rRr=o("xlm-roberta"),tRr=o(" \u2014 "),rU=a("a"),aRr=o("FlaxXLMRobertaForMultipleChoice"),nRr=o(" (XLM-RoBERTa model)"),sRr=l(),ive=a("p"),lRr=o("Examples:"),iRr=l(),f(Z8.$$.fragment),APe=l(),Af=a("h2"),T3=a("a"),dve=a("span"),f(e7.$$.fragment),dRr=l(),cve=a("span"),cRr=o("FlaxAutoModelForNextSentencePrediction"),yPe=l(),Gr=a("div"),f(o7.$$.fragment),fRr=l(),yf=a("p"),mRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tU=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),aU=a("a"),pRr=o("from_config()"),_Rr=o(` class
method.`),uRr=l(),r7=a("p"),bRr=o("This class cannot be instantiated directly using "),fve=a("code"),FRr=o("__init__()"),vRr=o(" (throws an error)."),TRr=l(),$t=a("div"),f(t7.$$.fragment),MRr=l(),mve=a("p"),ERr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CRr=l(),Lf=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),ARr=o("not"),yRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),LRr=o("from_pretrained()"),xRr=o(" to load the model weights."),kRr=l(),hve=a("p"),SRr=o("Examples:"),RRr=l(),f(a7.$$.fragment),BRr=l(),qo=a("div"),f(n7.$$.fragment),PRr=l(),pve=a("p"),$Rr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IRr=l(),Nn=a("p"),qRr=o("The model class to instantiate is selected based on the "),_ve=a("code"),NRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),Fve=a("ul"),M3=a("li"),vve=a("strong"),zRr=o("bert"),QRr=o(" \u2014 "),sU=a("a"),WRr=o("FlaxBertForNextSentencePrediction"),HRr=o(" (BERT model)"),URr=l(),Tve=a("p"),JRr=o("Examples:"),YRr=l(),f(s7.$$.fragment),LPe=l(),xf=a("h2"),E3=a("a"),Mve=a("span"),f(l7.$$.fragment),KRr=l(),Eve=a("span"),ZRr=o("FlaxAutoModelForImageClassification"),xPe=l(),Or=a("div"),f(i7.$$.fragment),eBr=l(),kf=a("p"),oBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lU=a("a"),rBr=o("from_pretrained()"),tBr=o(" class method or the "),iU=a("a"),aBr=o("from_config()"),nBr=o(` class
method.`),sBr=l(),d7=a("p"),lBr=o("This class cannot be instantiated directly using "),Cve=a("code"),iBr=o("__init__()"),dBr=o(" (throws an error)."),cBr=l(),It=a("div"),f(c7.$$.fragment),fBr=l(),wve=a("p"),mBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gBr=l(),Sf=a("p"),hBr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),pBr=o("not"),_Br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),uBr=o("from_pretrained()"),bBr=o(" to load the model weights."),FBr=l(),yve=a("p"),vBr=o("Examples:"),TBr=l(),f(f7.$$.fragment),MBr=l(),No=a("div"),f(m7.$$.fragment),EBr=l(),Lve=a("p"),CBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wBr=l(),jn=a("p"),ABr=o("The model class to instantiate is selected based on the "),xve=a("code"),yBr=o("model_type"),LBr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),xBr=o("pretrained_model_name_or_path"),kBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(":"),BBr=l(),g7=a("ul"),C3=a("li"),Rve=a("strong"),PBr=o("beit"),$Br=o(" \u2014 "),cU=a("a"),IBr=o("FlaxBeitForImageClassification"),qBr=o(" (BEiT model)"),NBr=l(),w3=a("li"),Bve=a("strong"),jBr=o("vit"),DBr=o(" \u2014 "),fU=a("a"),GBr=o("FlaxViTForImageClassification"),OBr=o(" (ViT model)"),VBr=l(),Pve=a("p"),XBr=o("Examples:"),zBr=l(),f(h7.$$.fragment),kPe=l(),Rf=a("h2"),A3=a("a"),$ve=a("span"),f(p7.$$.fragment),QBr=l(),Ive=a("span"),WBr=o("FlaxAutoModelForVision2Seq"),SPe=l(),Vr=a("div"),f(_7.$$.fragment),HBr=l(),Bf=a("p"),UBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mU=a("a"),JBr=o("from_pretrained()"),YBr=o(" class method or the "),gU=a("a"),KBr=o("from_config()"),ZBr=o(` class
method.`),ePr=l(),u7=a("p"),oPr=o("This class cannot be instantiated directly using "),qve=a("code"),rPr=o("__init__()"),tPr=o(" (throws an error)."),aPr=l(),qt=a("div"),f(b7.$$.fragment),nPr=l(),Nve=a("p"),sPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lPr=l(),Pf=a("p"),iPr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),dPr=o("not"),cPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),fPr=o("from_pretrained()"),mPr=o(" to load the model weights."),gPr=l(),Dve=a("p"),hPr=o("Examples:"),pPr=l(),f(F7.$$.fragment),_Pr=l(),jo=a("div"),f(v7.$$.fragment),uPr=l(),Gve=a("p"),bPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FPr=l(),Dn=a("p"),vPr=o("The model class to instantiate is selected based on the "),Ove=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),Vve=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),yPr=l(),zve=a("ul"),y3=a("li"),Qve=a("strong"),LPr=o("vision-encoder-decoder"),xPr=o(" \u2014 "),pU=a("a"),kPr=o("FlaxVisionEncoderDecoderModel"),SPr=o(" (Vision Encoder decoder model)"),RPr=l(),Wve=a("p"),BPr=o("Examples:"),PPr=l(),f(T7.$$.fragment),this.h()},l(c){const u=Ewt('[data-svelte="svelte-1phssyn"]',document.head);ee=n(u,"META",{name:!0,content:!0}),u.forEach(t),co=i(c),de=n(c,"H1",{class:!0});var M7=s(de);we=n(M7,"A",{id:!0,class:!0,href:!0});var Hve=s(we);io=n(Hve,"SPAN",{});var Uve=s(io);m(ge.$$.fragment,Uve),Uve.forEach(t),Hve.forEach(t),Me=i(M7),Xo=n(M7,"SPAN",{});var IPr=s(Xo);Ii=r(IPr,"Auto Classes"),IPr.forEach(t),M7.forEach(t),qf=i(c),fa=n(c,"P",{});var BPe=s(fa);qi=r(BPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(BPe,"CODE",{});var qPr=s(Ni);yC=r(qPr,"from_pretrained()"),qPr.forEach(t),Nf=r(BPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),BPe.forEach(t),ke=i(c),fo=n(c,"P",{});var L3=s(fo);ji=r(L3,"Instantiating one of "),Gn=n(L3,"A",{href:!0});var NPr=s(Gn);LC=r(NPr,"AutoConfig"),NPr.forEach(t),On=r(L3,", "),Vn=n(L3,"A",{href:!0});var jPr=s(Vn);xC=r(jPr,"AutoModel"),jPr.forEach(t),Di=r(L3,`, and
`),Xn=n(L3,"A",{href:!0});var DPr=s(Xn);kC=r(DPr,"AutoTokenizer"),DPr.forEach(t),Gi=r(L3," will directly create a class of the relevant architecture. For instance"),L3.forEach(t),jf=i(c),m(Da.$$.fragment,c),mo=i(c),ue=n(c,"P",{});var PPe=s(ue);F9=r(PPe,"will create a model that is an instance of "),Oi=n(PPe,"A",{href:!0});var GPr=s(Oi);v9=r(GPr,"BertModel"),GPr.forEach(t),T9=r(PPe,"."),PPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var $Pe=s(Ga);M9=r($Pe,"There is one class of "),Df=n($Pe,"CODE",{});var OPr=s(Df);E9=r(OPr,"AutoModel"),OPr.forEach(t),XIe=r($Pe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$Pe.forEach(t),SRe=i(c),Vi=n(c,"H2",{class:!0});var IPe=s(Vi);Gf=n(IPe,"A",{id:!0,class:!0,href:!0});var VPr=s(Gf);dY=n(VPr,"SPAN",{});var XPr=s(dY);m(SC.$$.fragment,XPr),XPr.forEach(t),VPr.forEach(t),zIe=i(IPe),cY=n(IPe,"SPAN",{});var zPr=s(cY);QIe=r(zPr,"Extending the Auto Classes"),zPr.forEach(t),IPe.forEach(t),RRe=i(c),zn=n(c,"P",{});var _U=s(zn);WIe=r(_U,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),fY=n(_U,"CODE",{});var QPr=s(fY);HIe=r(QPr,"NewModel"),QPr.forEach(t),UIe=r(_U,", make sure you have a "),mY=n(_U,"CODE",{});var WPr=s(mY);JIe=r(WPr,"NewModelConfig"),WPr.forEach(t),YIe=r(_U,` then you can add those to the auto
classes like this:`),_U.forEach(t),BRe=i(c),m(RC.$$.fragment,c),PRe=i(c),C9=n(c,"P",{});var HPr=s(C9);KIe=r(HPr,"You will then be able to use the auto classes like you would usually do!"),HPr.forEach(t),$Re=i(c),m(Of.$$.fragment,c),IRe=i(c),Xi=n(c,"H2",{class:!0});var qPe=s(Xi);Vf=n(qPe,"A",{id:!0,class:!0,href:!0});var UPr=s(Vf);gY=n(UPr,"SPAN",{});var JPr=s(gY);m(BC.$$.fragment,JPr),JPr.forEach(t),UPr.forEach(t),ZIe=i(qPe),hY=n(qPe,"SPAN",{});var YPr=s(hY);eqe=r(YPr,"AutoConfig"),YPr.forEach(t),qPe.forEach(t),qRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(PC.$$.fragment,Os),oqe=i(Os),$C=n(Os,"P",{});var NPe=s($C);rqe=r(NPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),w9=n(NPe,"A",{href:!0});var KPr=s(w9);tqe=r(KPr,"from_pretrained()"),KPr.forEach(t),aqe=r(NPe," class method."),NPe.forEach(t),nqe=i(Os),IC=n(Os,"P",{});var jPe=s(IC);sqe=r(jPe,"This class cannot be instantiated directly using "),pY=n(jPe,"CODE",{});var ZPr=s(pY);lqe=r(ZPr,"__init__()"),ZPr.forEach(t),iqe=r(jPe," (throws an error)."),jPe.forEach(t),dqe=i(Os),go=n(Os,"DIV",{class:!0});var ga=s(go);m(qC.$$.fragment,ga),cqe=i(ga),_Y=n(ga,"P",{});var e$r=s(_Y);fqe=r(e$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e$r.forEach(t),mqe=i(ga),zi=n(ga,"P",{});var uU=s(zi);gqe=r(uU,"The configuration class to instantiate is selected based on the "),uY=n(uU,"CODE",{});var o$r=s(uY);hqe=r(o$r,"model_type"),o$r.forEach(t),pqe=r(uU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bY=n(uU,"CODE",{});var r$r=s(bY);_qe=r(r$r,"pretrained_model_name_or_path"),r$r.forEach(t),uqe=r(uU,":"),uU.forEach(t),bqe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var Jve=s(Xf);FY=n(Jve,"STRONG",{});var t$r=s(FY);Fqe=r(t$r,"albert"),t$r.forEach(t),vqe=r(Jve," \u2014 "),A9=n(Jve,"A",{href:!0});var a$r=s(A9);Tqe=r(a$r,"AlbertConfig"),a$r.forEach(t),Mqe=r(Jve," (ALBERT model)"),Jve.forEach(t),Eqe=i(v),zf=n(v,"LI",{});var Yve=s(zf);vY=n(Yve,"STRONG",{});var n$r=s(vY);Cqe=r(n$r,"bart"),n$r.forEach(t),wqe=r(Yve," \u2014 "),y9=n(Yve,"A",{href:!0});var s$r=s(y9);Aqe=r(s$r,"BartConfig"),s$r.forEach(t),yqe=r(Yve," (BART model)"),Yve.forEach(t),Lqe=i(v),Qf=n(v,"LI",{});var Kve=s(Qf);TY=n(Kve,"STRONG",{});var l$r=s(TY);xqe=r(l$r,"beit"),l$r.forEach(t),kqe=r(Kve," \u2014 "),L9=n(Kve,"A",{href:!0});var i$r=s(L9);Sqe=r(i$r,"BeitConfig"),i$r.forEach(t),Rqe=r(Kve," (BEiT model)"),Kve.forEach(t),Bqe=i(v),Wf=n(v,"LI",{});var Zve=s(Wf);MY=n(Zve,"STRONG",{});var d$r=s(MY);Pqe=r(d$r,"bert"),d$r.forEach(t),$qe=r(Zve," \u2014 "),x9=n(Zve,"A",{href:!0});var c$r=s(x9);Iqe=r(c$r,"BertConfig"),c$r.forEach(t),qqe=r(Zve," (BERT model)"),Zve.forEach(t),Nqe=i(v),Hf=n(v,"LI",{});var eTe=s(Hf);EY=n(eTe,"STRONG",{});var f$r=s(EY);jqe=r(f$r,"bert-generation"),f$r.forEach(t),Dqe=r(eTe," \u2014 "),k9=n(eTe,"A",{href:!0});var m$r=s(k9);Gqe=r(m$r,"BertGenerationConfig"),m$r.forEach(t),Oqe=r(eTe," (Bert Generation model)"),eTe.forEach(t),Vqe=i(v),Uf=n(v,"LI",{});var oTe=s(Uf);CY=n(oTe,"STRONG",{});var g$r=s(CY);Xqe=r(g$r,"big_bird"),g$r.forEach(t),zqe=r(oTe," \u2014 "),S9=n(oTe,"A",{href:!0});var h$r=s(S9);Qqe=r(h$r,"BigBirdConfig"),h$r.forEach(t),Wqe=r(oTe," (BigBird model)"),oTe.forEach(t),Hqe=i(v),Jf=n(v,"LI",{});var rTe=s(Jf);wY=n(rTe,"STRONG",{});var p$r=s(wY);Uqe=r(p$r,"bigbird_pegasus"),p$r.forEach(t),Jqe=r(rTe," \u2014 "),R9=n(rTe,"A",{href:!0});var _$r=s(R9);Yqe=r(_$r,"BigBirdPegasusConfig"),_$r.forEach(t),Kqe=r(rTe," (BigBirdPegasus model)"),rTe.forEach(t),Zqe=i(v),Yf=n(v,"LI",{});var tTe=s(Yf);AY=n(tTe,"STRONG",{});var u$r=s(AY);eNe=r(u$r,"blenderbot"),u$r.forEach(t),oNe=r(tTe," \u2014 "),B9=n(tTe,"A",{href:!0});var b$r=s(B9);rNe=r(b$r,"BlenderbotConfig"),b$r.forEach(t),tNe=r(tTe," (Blenderbot model)"),tTe.forEach(t),aNe=i(v),Kf=n(v,"LI",{});var aTe=s(Kf);yY=n(aTe,"STRONG",{});var F$r=s(yY);nNe=r(F$r,"blenderbot-small"),F$r.forEach(t),sNe=r(aTe," \u2014 "),P9=n(aTe,"A",{href:!0});var v$r=s(P9);lNe=r(v$r,"BlenderbotSmallConfig"),v$r.forEach(t),iNe=r(aTe," (BlenderbotSmall model)"),aTe.forEach(t),dNe=i(v),Zf=n(v,"LI",{});var nTe=s(Zf);LY=n(nTe,"STRONG",{});var T$r=s(LY);cNe=r(T$r,"camembert"),T$r.forEach(t),fNe=r(nTe," \u2014 "),$9=n(nTe,"A",{href:!0});var M$r=s($9);mNe=r(M$r,"CamembertConfig"),M$r.forEach(t),gNe=r(nTe," (CamemBERT model)"),nTe.forEach(t),hNe=i(v),em=n(v,"LI",{});var sTe=s(em);xY=n(sTe,"STRONG",{});var E$r=s(xY);pNe=r(E$r,"canine"),E$r.forEach(t),_Ne=r(sTe," \u2014 "),I9=n(sTe,"A",{href:!0});var C$r=s(I9);uNe=r(C$r,"CanineConfig"),C$r.forEach(t),bNe=r(sTe," (Canine model)"),sTe.forEach(t),FNe=i(v),om=n(v,"LI",{});var lTe=s(om);kY=n(lTe,"STRONG",{});var w$r=s(kY);vNe=r(w$r,"clip"),w$r.forEach(t),TNe=r(lTe," \u2014 "),q9=n(lTe,"A",{href:!0});var A$r=s(q9);MNe=r(A$r,"CLIPConfig"),A$r.forEach(t),ENe=r(lTe," (CLIP model)"),lTe.forEach(t),CNe=i(v),rm=n(v,"LI",{});var iTe=s(rm);SY=n(iTe,"STRONG",{});var y$r=s(SY);wNe=r(y$r,"convbert"),y$r.forEach(t),ANe=r(iTe," \u2014 "),N9=n(iTe,"A",{href:!0});var L$r=s(N9);yNe=r(L$r,"ConvBertConfig"),L$r.forEach(t),LNe=r(iTe," (ConvBERT model)"),iTe.forEach(t),xNe=i(v),tm=n(v,"LI",{});var dTe=s(tm);RY=n(dTe,"STRONG",{});var x$r=s(RY);kNe=r(x$r,"convnext"),x$r.forEach(t),SNe=r(dTe," \u2014 "),j9=n(dTe,"A",{href:!0});var k$r=s(j9);RNe=r(k$r,"ConvNextConfig"),k$r.forEach(t),BNe=r(dTe," (ConvNext model)"),dTe.forEach(t),PNe=i(v),am=n(v,"LI",{});var cTe=s(am);BY=n(cTe,"STRONG",{});var S$r=s(BY);$Ne=r(S$r,"ctrl"),S$r.forEach(t),INe=r(cTe," \u2014 "),D9=n(cTe,"A",{href:!0});var R$r=s(D9);qNe=r(R$r,"CTRLConfig"),R$r.forEach(t),NNe=r(cTe," (CTRL model)"),cTe.forEach(t),jNe=i(v),nm=n(v,"LI",{});var fTe=s(nm);PY=n(fTe,"STRONG",{});var B$r=s(PY);DNe=r(B$r,"data2vec-audio"),B$r.forEach(t),GNe=r(fTe," \u2014 "),G9=n(fTe,"A",{href:!0});var P$r=s(G9);ONe=r(P$r,"Data2VecAudioConfig"),P$r.forEach(t),VNe=r(fTe," (Data2VecAudio model)"),fTe.forEach(t),XNe=i(v),sm=n(v,"LI",{});var mTe=s(sm);$Y=n(mTe,"STRONG",{});var $$r=s($Y);zNe=r($$r,"data2vec-text"),$$r.forEach(t),QNe=r(mTe," \u2014 "),O9=n(mTe,"A",{href:!0});var I$r=s(O9);WNe=r(I$r,"Data2VecTextConfig"),I$r.forEach(t),HNe=r(mTe," (Data2VecText model)"),mTe.forEach(t),UNe=i(v),lm=n(v,"LI",{});var gTe=s(lm);IY=n(gTe,"STRONG",{});var q$r=s(IY);JNe=r(q$r,"deberta"),q$r.forEach(t),YNe=r(gTe," \u2014 "),V9=n(gTe,"A",{href:!0});var N$r=s(V9);KNe=r(N$r,"DebertaConfig"),N$r.forEach(t),ZNe=r(gTe," (DeBERTa model)"),gTe.forEach(t),eje=i(v),im=n(v,"LI",{});var hTe=s(im);qY=n(hTe,"STRONG",{});var j$r=s(qY);oje=r(j$r,"deberta-v2"),j$r.forEach(t),rje=r(hTe," \u2014 "),X9=n(hTe,"A",{href:!0});var D$r=s(X9);tje=r(D$r,"DebertaV2Config"),D$r.forEach(t),aje=r(hTe," (DeBERTa-v2 model)"),hTe.forEach(t),nje=i(v),dm=n(v,"LI",{});var pTe=s(dm);NY=n(pTe,"STRONG",{});var G$r=s(NY);sje=r(G$r,"decision_transformer"),G$r.forEach(t),lje=r(pTe," \u2014 "),z9=n(pTe,"A",{href:!0});var O$r=s(z9);ije=r(O$r,"DecisionTransformerConfig"),O$r.forEach(t),dje=r(pTe," (Decision Transformer model)"),pTe.forEach(t),cje=i(v),cm=n(v,"LI",{});var _Te=s(cm);jY=n(_Te,"STRONG",{});var V$r=s(jY);fje=r(V$r,"deit"),V$r.forEach(t),mje=r(_Te," \u2014 "),Q9=n(_Te,"A",{href:!0});var X$r=s(Q9);gje=r(X$r,"DeiTConfig"),X$r.forEach(t),hje=r(_Te," (DeiT model)"),_Te.forEach(t),pje=i(v),fm=n(v,"LI",{});var uTe=s(fm);DY=n(uTe,"STRONG",{});var z$r=s(DY);_je=r(z$r,"detr"),z$r.forEach(t),uje=r(uTe," \u2014 "),W9=n(uTe,"A",{href:!0});var Q$r=s(W9);bje=r(Q$r,"DetrConfig"),Q$r.forEach(t),Fje=r(uTe," (DETR model)"),uTe.forEach(t),vje=i(v),mm=n(v,"LI",{});var bTe=s(mm);GY=n(bTe,"STRONG",{});var W$r=s(GY);Tje=r(W$r,"distilbert"),W$r.forEach(t),Mje=r(bTe," \u2014 "),H9=n(bTe,"A",{href:!0});var H$r=s(H9);Eje=r(H$r,"DistilBertConfig"),H$r.forEach(t),Cje=r(bTe," (DistilBERT model)"),bTe.forEach(t),wje=i(v),gm=n(v,"LI",{});var FTe=s(gm);OY=n(FTe,"STRONG",{});var U$r=s(OY);Aje=r(U$r,"dpr"),U$r.forEach(t),yje=r(FTe," \u2014 "),U9=n(FTe,"A",{href:!0});var J$r=s(U9);Lje=r(J$r,"DPRConfig"),J$r.forEach(t),xje=r(FTe," (DPR model)"),FTe.forEach(t),kje=i(v),hm=n(v,"LI",{});var vTe=s(hm);VY=n(vTe,"STRONG",{});var Y$r=s(VY);Sje=r(Y$r,"dpt"),Y$r.forEach(t),Rje=r(vTe," \u2014 "),J9=n(vTe,"A",{href:!0});var K$r=s(J9);Bje=r(K$r,"DPTConfig"),K$r.forEach(t),Pje=r(vTe," (DPT model)"),vTe.forEach(t),$je=i(v),pm=n(v,"LI",{});var TTe=s(pm);XY=n(TTe,"STRONG",{});var Z$r=s(XY);Ije=r(Z$r,"electra"),Z$r.forEach(t),qje=r(TTe," \u2014 "),Y9=n(TTe,"A",{href:!0});var eIr=s(Y9);Nje=r(eIr,"ElectraConfig"),eIr.forEach(t),jje=r(TTe," (ELECTRA model)"),TTe.forEach(t),Dje=i(v),_m=n(v,"LI",{});var MTe=s(_m);zY=n(MTe,"STRONG",{});var oIr=s(zY);Gje=r(oIr,"encoder-decoder"),oIr.forEach(t),Oje=r(MTe," \u2014 "),K9=n(MTe,"A",{href:!0});var rIr=s(K9);Vje=r(rIr,"EncoderDecoderConfig"),rIr.forEach(t),Xje=r(MTe," (Encoder decoder model)"),MTe.forEach(t),zje=i(v),um=n(v,"LI",{});var ETe=s(um);QY=n(ETe,"STRONG",{});var tIr=s(QY);Qje=r(tIr,"flaubert"),tIr.forEach(t),Wje=r(ETe," \u2014 "),Z9=n(ETe,"A",{href:!0});var aIr=s(Z9);Hje=r(aIr,"FlaubertConfig"),aIr.forEach(t),Uje=r(ETe," (FlauBERT model)"),ETe.forEach(t),Jje=i(v),bm=n(v,"LI",{});var CTe=s(bm);WY=n(CTe,"STRONG",{});var nIr=s(WY);Yje=r(nIr,"flava"),nIr.forEach(t),Kje=r(CTe," \u2014 "),ex=n(CTe,"A",{href:!0});var sIr=s(ex);Zje=r(sIr,"FLAVAConfig"),sIr.forEach(t),eDe=r(CTe," (FLAVA model)"),CTe.forEach(t),oDe=i(v),Fm=n(v,"LI",{});var wTe=s(Fm);HY=n(wTe,"STRONG",{});var lIr=s(HY);rDe=r(lIr,"fnet"),lIr.forEach(t),tDe=r(wTe," \u2014 "),ox=n(wTe,"A",{href:!0});var iIr=s(ox);aDe=r(iIr,"FNetConfig"),iIr.forEach(t),nDe=r(wTe," (FNet model)"),wTe.forEach(t),sDe=i(v),vm=n(v,"LI",{});var ATe=s(vm);UY=n(ATe,"STRONG",{});var dIr=s(UY);lDe=r(dIr,"fsmt"),dIr.forEach(t),iDe=r(ATe," \u2014 "),rx=n(ATe,"A",{href:!0});var cIr=s(rx);dDe=r(cIr,"FSMTConfig"),cIr.forEach(t),cDe=r(ATe," (FairSeq Machine-Translation model)"),ATe.forEach(t),fDe=i(v),Tm=n(v,"LI",{});var yTe=s(Tm);JY=n(yTe,"STRONG",{});var fIr=s(JY);mDe=r(fIr,"funnel"),fIr.forEach(t),gDe=r(yTe," \u2014 "),tx=n(yTe,"A",{href:!0});var mIr=s(tx);hDe=r(mIr,"FunnelConfig"),mIr.forEach(t),pDe=r(yTe," (Funnel Transformer model)"),yTe.forEach(t),_De=i(v),Mm=n(v,"LI",{});var LTe=s(Mm);YY=n(LTe,"STRONG",{});var gIr=s(YY);uDe=r(gIr,"glpn"),gIr.forEach(t),bDe=r(LTe," \u2014 "),ax=n(LTe,"A",{href:!0});var hIr=s(ax);FDe=r(hIr,"GLPNConfig"),hIr.forEach(t),vDe=r(LTe," (GLPN model)"),LTe.forEach(t),TDe=i(v),Em=n(v,"LI",{});var xTe=s(Em);KY=n(xTe,"STRONG",{});var pIr=s(KY);MDe=r(pIr,"gpt2"),pIr.forEach(t),EDe=r(xTe," \u2014 "),nx=n(xTe,"A",{href:!0});var _Ir=s(nx);CDe=r(_Ir,"GPT2Config"),_Ir.forEach(t),wDe=r(xTe," (OpenAI GPT-2 model)"),xTe.forEach(t),ADe=i(v),Cm=n(v,"LI",{});var kTe=s(Cm);ZY=n(kTe,"STRONG",{});var uIr=s(ZY);yDe=r(uIr,"gpt_neo"),uIr.forEach(t),LDe=r(kTe," \u2014 "),sx=n(kTe,"A",{href:!0});var bIr=s(sx);xDe=r(bIr,"GPTNeoConfig"),bIr.forEach(t),kDe=r(kTe," (GPT Neo model)"),kTe.forEach(t),SDe=i(v),wm=n(v,"LI",{});var STe=s(wm);eK=n(STe,"STRONG",{});var FIr=s(eK);RDe=r(FIr,"gptj"),FIr.forEach(t),BDe=r(STe," \u2014 "),lx=n(STe,"A",{href:!0});var vIr=s(lx);PDe=r(vIr,"GPTJConfig"),vIr.forEach(t),$De=r(STe," (GPT-J model)"),STe.forEach(t),IDe=i(v),Am=n(v,"LI",{});var RTe=s(Am);oK=n(RTe,"STRONG",{});var TIr=s(oK);qDe=r(TIr,"hubert"),TIr.forEach(t),NDe=r(RTe," \u2014 "),ix=n(RTe,"A",{href:!0});var MIr=s(ix);jDe=r(MIr,"HubertConfig"),MIr.forEach(t),DDe=r(RTe," (Hubert model)"),RTe.forEach(t),GDe=i(v),ym=n(v,"LI",{});var BTe=s(ym);rK=n(BTe,"STRONG",{});var EIr=s(rK);ODe=r(EIr,"ibert"),EIr.forEach(t),VDe=r(BTe," \u2014 "),dx=n(BTe,"A",{href:!0});var CIr=s(dx);XDe=r(CIr,"IBertConfig"),CIr.forEach(t),zDe=r(BTe," (I-BERT model)"),BTe.forEach(t),QDe=i(v),Lm=n(v,"LI",{});var PTe=s(Lm);tK=n(PTe,"STRONG",{});var wIr=s(tK);WDe=r(wIr,"imagegpt"),wIr.forEach(t),HDe=r(PTe," \u2014 "),cx=n(PTe,"A",{href:!0});var AIr=s(cx);UDe=r(AIr,"ImageGPTConfig"),AIr.forEach(t),JDe=r(PTe," (ImageGPT model)"),PTe.forEach(t),YDe=i(v),xm=n(v,"LI",{});var $Te=s(xm);aK=n($Te,"STRONG",{});var yIr=s(aK);KDe=r(yIr,"layoutlm"),yIr.forEach(t),ZDe=r($Te," \u2014 "),fx=n($Te,"A",{href:!0});var LIr=s(fx);eGe=r(LIr,"LayoutLMConfig"),LIr.forEach(t),oGe=r($Te," (LayoutLM model)"),$Te.forEach(t),rGe=i(v),km=n(v,"LI",{});var ITe=s(km);nK=n(ITe,"STRONG",{});var xIr=s(nK);tGe=r(xIr,"layoutlmv2"),xIr.forEach(t),aGe=r(ITe," \u2014 "),mx=n(ITe,"A",{href:!0});var kIr=s(mx);nGe=r(kIr,"LayoutLMv2Config"),kIr.forEach(t),sGe=r(ITe," (LayoutLMv2 model)"),ITe.forEach(t),lGe=i(v),Sm=n(v,"LI",{});var qTe=s(Sm);sK=n(qTe,"STRONG",{});var SIr=s(sK);iGe=r(SIr,"led"),SIr.forEach(t),dGe=r(qTe," \u2014 "),gx=n(qTe,"A",{href:!0});var RIr=s(gx);cGe=r(RIr,"LEDConfig"),RIr.forEach(t),fGe=r(qTe," (LED model)"),qTe.forEach(t),mGe=i(v),Rm=n(v,"LI",{});var NTe=s(Rm);lK=n(NTe,"STRONG",{});var BIr=s(lK);gGe=r(BIr,"longformer"),BIr.forEach(t),hGe=r(NTe," \u2014 "),hx=n(NTe,"A",{href:!0});var PIr=s(hx);pGe=r(PIr,"LongformerConfig"),PIr.forEach(t),_Ge=r(NTe," (Longformer model)"),NTe.forEach(t),uGe=i(v),Bm=n(v,"LI",{});var jTe=s(Bm);iK=n(jTe,"STRONG",{});var $Ir=s(iK);bGe=r($Ir,"luke"),$Ir.forEach(t),FGe=r(jTe," \u2014 "),px=n(jTe,"A",{href:!0});var IIr=s(px);vGe=r(IIr,"LukeConfig"),IIr.forEach(t),TGe=r(jTe," (LUKE model)"),jTe.forEach(t),MGe=i(v),Pm=n(v,"LI",{});var DTe=s(Pm);dK=n(DTe,"STRONG",{});var qIr=s(dK);EGe=r(qIr,"lxmert"),qIr.forEach(t),CGe=r(DTe," \u2014 "),_x=n(DTe,"A",{href:!0});var NIr=s(_x);wGe=r(NIr,"LxmertConfig"),NIr.forEach(t),AGe=r(DTe," (LXMERT model)"),DTe.forEach(t),yGe=i(v),$m=n(v,"LI",{});var GTe=s($m);cK=n(GTe,"STRONG",{});var jIr=s(cK);LGe=r(jIr,"m2m_100"),jIr.forEach(t),xGe=r(GTe," \u2014 "),ux=n(GTe,"A",{href:!0});var DIr=s(ux);kGe=r(DIr,"M2M100Config"),DIr.forEach(t),SGe=r(GTe," (M2M100 model)"),GTe.forEach(t),RGe=i(v),Im=n(v,"LI",{});var OTe=s(Im);fK=n(OTe,"STRONG",{});var GIr=s(fK);BGe=r(GIr,"marian"),GIr.forEach(t),PGe=r(OTe," \u2014 "),bx=n(OTe,"A",{href:!0});var OIr=s(bx);$Ge=r(OIr,"MarianConfig"),OIr.forEach(t),IGe=r(OTe," (Marian model)"),OTe.forEach(t),qGe=i(v),qm=n(v,"LI",{});var VTe=s(qm);mK=n(VTe,"STRONG",{});var VIr=s(mK);NGe=r(VIr,"maskformer"),VIr.forEach(t),jGe=r(VTe," \u2014 "),Fx=n(VTe,"A",{href:!0});var XIr=s(Fx);DGe=r(XIr,"MaskFormerConfig"),XIr.forEach(t),GGe=r(VTe," (MaskFormer model)"),VTe.forEach(t),OGe=i(v),Nm=n(v,"LI",{});var XTe=s(Nm);gK=n(XTe,"STRONG",{});var zIr=s(gK);VGe=r(zIr,"mbart"),zIr.forEach(t),XGe=r(XTe," \u2014 "),vx=n(XTe,"A",{href:!0});var QIr=s(vx);zGe=r(QIr,"MBartConfig"),QIr.forEach(t),QGe=r(XTe," (mBART model)"),XTe.forEach(t),WGe=i(v),jm=n(v,"LI",{});var zTe=s(jm);hK=n(zTe,"STRONG",{});var WIr=s(hK);HGe=r(WIr,"megatron-bert"),WIr.forEach(t),UGe=r(zTe," \u2014 "),Tx=n(zTe,"A",{href:!0});var HIr=s(Tx);JGe=r(HIr,"MegatronBertConfig"),HIr.forEach(t),YGe=r(zTe," (MegatronBert model)"),zTe.forEach(t),KGe=i(v),Dm=n(v,"LI",{});var QTe=s(Dm);pK=n(QTe,"STRONG",{});var UIr=s(pK);ZGe=r(UIr,"mobilebert"),UIr.forEach(t),eOe=r(QTe," \u2014 "),Mx=n(QTe,"A",{href:!0});var JIr=s(Mx);oOe=r(JIr,"MobileBertConfig"),JIr.forEach(t),rOe=r(QTe," (MobileBERT model)"),QTe.forEach(t),tOe=i(v),Gm=n(v,"LI",{});var WTe=s(Gm);_K=n(WTe,"STRONG",{});var YIr=s(_K);aOe=r(YIr,"mpnet"),YIr.forEach(t),nOe=r(WTe," \u2014 "),Ex=n(WTe,"A",{href:!0});var KIr=s(Ex);sOe=r(KIr,"MPNetConfig"),KIr.forEach(t),lOe=r(WTe," (MPNet model)"),WTe.forEach(t),iOe=i(v),Om=n(v,"LI",{});var HTe=s(Om);uK=n(HTe,"STRONG",{});var ZIr=s(uK);dOe=r(ZIr,"mt5"),ZIr.forEach(t),cOe=r(HTe," \u2014 "),Cx=n(HTe,"A",{href:!0});var eqr=s(Cx);fOe=r(eqr,"MT5Config"),eqr.forEach(t),mOe=r(HTe," (mT5 model)"),HTe.forEach(t),gOe=i(v),Vm=n(v,"LI",{});var UTe=s(Vm);bK=n(UTe,"STRONG",{});var oqr=s(bK);hOe=r(oqr,"nystromformer"),oqr.forEach(t),pOe=r(UTe," \u2014 "),wx=n(UTe,"A",{href:!0});var rqr=s(wx);_Oe=r(rqr,"NystromformerConfig"),rqr.forEach(t),uOe=r(UTe," (Nystromformer model)"),UTe.forEach(t),bOe=i(v),Xm=n(v,"LI",{});var JTe=s(Xm);FK=n(JTe,"STRONG",{});var tqr=s(FK);FOe=r(tqr,"openai-gpt"),tqr.forEach(t),vOe=r(JTe," \u2014 "),Ax=n(JTe,"A",{href:!0});var aqr=s(Ax);TOe=r(aqr,"OpenAIGPTConfig"),aqr.forEach(t),MOe=r(JTe," (OpenAI GPT model)"),JTe.forEach(t),EOe=i(v),zm=n(v,"LI",{});var YTe=s(zm);vK=n(YTe,"STRONG",{});var nqr=s(vK);COe=r(nqr,"pegasus"),nqr.forEach(t),wOe=r(YTe," \u2014 "),yx=n(YTe,"A",{href:!0});var sqr=s(yx);AOe=r(sqr,"PegasusConfig"),sqr.forEach(t),yOe=r(YTe," (Pegasus model)"),YTe.forEach(t),LOe=i(v),Qm=n(v,"LI",{});var KTe=s(Qm);TK=n(KTe,"STRONG",{});var lqr=s(TK);xOe=r(lqr,"perceiver"),lqr.forEach(t),kOe=r(KTe," \u2014 "),Lx=n(KTe,"A",{href:!0});var iqr=s(Lx);SOe=r(iqr,"PerceiverConfig"),iqr.forEach(t),ROe=r(KTe," (Perceiver model)"),KTe.forEach(t),BOe=i(v),Wm=n(v,"LI",{});var ZTe=s(Wm);MK=n(ZTe,"STRONG",{});var dqr=s(MK);POe=r(dqr,"plbart"),dqr.forEach(t),$Oe=r(ZTe," \u2014 "),xx=n(ZTe,"A",{href:!0});var cqr=s(xx);IOe=r(cqr,"PLBartConfig"),cqr.forEach(t),qOe=r(ZTe," (PLBart model)"),ZTe.forEach(t),NOe=i(v),Hm=n(v,"LI",{});var eMe=s(Hm);EK=n(eMe,"STRONG",{});var fqr=s(EK);jOe=r(fqr,"poolformer"),fqr.forEach(t),DOe=r(eMe," \u2014 "),kx=n(eMe,"A",{href:!0});var mqr=s(kx);GOe=r(mqr,"PoolFormerConfig"),mqr.forEach(t),OOe=r(eMe," (PoolFormer model)"),eMe.forEach(t),VOe=i(v),Um=n(v,"LI",{});var oMe=s(Um);CK=n(oMe,"STRONG",{});var gqr=s(CK);XOe=r(gqr,"prophetnet"),gqr.forEach(t),zOe=r(oMe," \u2014 "),Sx=n(oMe,"A",{href:!0});var hqr=s(Sx);QOe=r(hqr,"ProphetNetConfig"),hqr.forEach(t),WOe=r(oMe," (ProphetNet model)"),oMe.forEach(t),HOe=i(v),Jm=n(v,"LI",{});var rMe=s(Jm);wK=n(rMe,"STRONG",{});var pqr=s(wK);UOe=r(pqr,"qdqbert"),pqr.forEach(t),JOe=r(rMe," \u2014 "),Rx=n(rMe,"A",{href:!0});var _qr=s(Rx);YOe=r(_qr,"QDQBertConfig"),_qr.forEach(t),KOe=r(rMe," (QDQBert model)"),rMe.forEach(t),ZOe=i(v),Ym=n(v,"LI",{});var tMe=s(Ym);AK=n(tMe,"STRONG",{});var uqr=s(AK);eVe=r(uqr,"rag"),uqr.forEach(t),oVe=r(tMe," \u2014 "),Bx=n(tMe,"A",{href:!0});var bqr=s(Bx);rVe=r(bqr,"RagConfig"),bqr.forEach(t),tVe=r(tMe," (RAG model)"),tMe.forEach(t),aVe=i(v),Km=n(v,"LI",{});var aMe=s(Km);yK=n(aMe,"STRONG",{});var Fqr=s(yK);nVe=r(Fqr,"realm"),Fqr.forEach(t),sVe=r(aMe," \u2014 "),Px=n(aMe,"A",{href:!0});var vqr=s(Px);lVe=r(vqr,"RealmConfig"),vqr.forEach(t),iVe=r(aMe," (Realm model)"),aMe.forEach(t),dVe=i(v),Zm=n(v,"LI",{});var nMe=s(Zm);LK=n(nMe,"STRONG",{});var Tqr=s(LK);cVe=r(Tqr,"reformer"),Tqr.forEach(t),fVe=r(nMe," \u2014 "),$x=n(nMe,"A",{href:!0});var Mqr=s($x);mVe=r(Mqr,"ReformerConfig"),Mqr.forEach(t),gVe=r(nMe," (Reformer model)"),nMe.forEach(t),hVe=i(v),eg=n(v,"LI",{});var sMe=s(eg);xK=n(sMe,"STRONG",{});var Eqr=s(xK);pVe=r(Eqr,"regnet"),Eqr.forEach(t),_Ve=r(sMe," \u2014 "),Ix=n(sMe,"A",{href:!0});var Cqr=s(Ix);uVe=r(Cqr,"RegNetConfig"),Cqr.forEach(t),bVe=r(sMe," (RegNet model)"),sMe.forEach(t),FVe=i(v),og=n(v,"LI",{});var lMe=s(og);kK=n(lMe,"STRONG",{});var wqr=s(kK);vVe=r(wqr,"rembert"),wqr.forEach(t),TVe=r(lMe," \u2014 "),qx=n(lMe,"A",{href:!0});var Aqr=s(qx);MVe=r(Aqr,"RemBertConfig"),Aqr.forEach(t),EVe=r(lMe," (RemBERT model)"),lMe.forEach(t),CVe=i(v),rg=n(v,"LI",{});var iMe=s(rg);SK=n(iMe,"STRONG",{});var yqr=s(SK);wVe=r(yqr,"resnet"),yqr.forEach(t),AVe=r(iMe," \u2014 "),Nx=n(iMe,"A",{href:!0});var Lqr=s(Nx);yVe=r(Lqr,"ResNetConfig"),Lqr.forEach(t),LVe=r(iMe," (ResNet model)"),iMe.forEach(t),xVe=i(v),tg=n(v,"LI",{});var dMe=s(tg);RK=n(dMe,"STRONG",{});var xqr=s(RK);kVe=r(xqr,"retribert"),xqr.forEach(t),SVe=r(dMe," \u2014 "),jx=n(dMe,"A",{href:!0});var kqr=s(jx);RVe=r(kqr,"RetriBertConfig"),kqr.forEach(t),BVe=r(dMe," (RetriBERT model)"),dMe.forEach(t),PVe=i(v),ag=n(v,"LI",{});var cMe=s(ag);BK=n(cMe,"STRONG",{});var Sqr=s(BK);$Ve=r(Sqr,"roberta"),Sqr.forEach(t),IVe=r(cMe," \u2014 "),Dx=n(cMe,"A",{href:!0});var Rqr=s(Dx);qVe=r(Rqr,"RobertaConfig"),Rqr.forEach(t),NVe=r(cMe," (RoBERTa model)"),cMe.forEach(t),jVe=i(v),ng=n(v,"LI",{});var fMe=s(ng);PK=n(fMe,"STRONG",{});var Bqr=s(PK);DVe=r(Bqr,"roformer"),Bqr.forEach(t),GVe=r(fMe," \u2014 "),Gx=n(fMe,"A",{href:!0});var Pqr=s(Gx);OVe=r(Pqr,"RoFormerConfig"),Pqr.forEach(t),VVe=r(fMe," (RoFormer model)"),fMe.forEach(t),XVe=i(v),sg=n(v,"LI",{});var mMe=s(sg);$K=n(mMe,"STRONG",{});var $qr=s($K);zVe=r($qr,"segformer"),$qr.forEach(t),QVe=r(mMe," \u2014 "),Ox=n(mMe,"A",{href:!0});var Iqr=s(Ox);WVe=r(Iqr,"SegformerConfig"),Iqr.forEach(t),HVe=r(mMe," (SegFormer model)"),mMe.forEach(t),UVe=i(v),lg=n(v,"LI",{});var gMe=s(lg);IK=n(gMe,"STRONG",{});var qqr=s(IK);JVe=r(qqr,"sew"),qqr.forEach(t),YVe=r(gMe," \u2014 "),Vx=n(gMe,"A",{href:!0});var Nqr=s(Vx);KVe=r(Nqr,"SEWConfig"),Nqr.forEach(t),ZVe=r(gMe," (SEW model)"),gMe.forEach(t),eXe=i(v),ig=n(v,"LI",{});var hMe=s(ig);qK=n(hMe,"STRONG",{});var jqr=s(qK);oXe=r(jqr,"sew-d"),jqr.forEach(t),rXe=r(hMe," \u2014 "),Xx=n(hMe,"A",{href:!0});var Dqr=s(Xx);tXe=r(Dqr,"SEWDConfig"),Dqr.forEach(t),aXe=r(hMe," (SEW-D model)"),hMe.forEach(t),nXe=i(v),dg=n(v,"LI",{});var pMe=s(dg);NK=n(pMe,"STRONG",{});var Gqr=s(NK);sXe=r(Gqr,"speech-encoder-decoder"),Gqr.forEach(t),lXe=r(pMe," \u2014 "),zx=n(pMe,"A",{href:!0});var Oqr=s(zx);iXe=r(Oqr,"SpeechEncoderDecoderConfig"),Oqr.forEach(t),dXe=r(pMe," (Speech Encoder decoder model)"),pMe.forEach(t),cXe=i(v),cg=n(v,"LI",{});var _Me=s(cg);jK=n(_Me,"STRONG",{});var Vqr=s(jK);fXe=r(Vqr,"speech_to_text"),Vqr.forEach(t),mXe=r(_Me," \u2014 "),Qx=n(_Me,"A",{href:!0});var Xqr=s(Qx);gXe=r(Xqr,"Speech2TextConfig"),Xqr.forEach(t),hXe=r(_Me," (Speech2Text model)"),_Me.forEach(t),pXe=i(v),fg=n(v,"LI",{});var uMe=s(fg);DK=n(uMe,"STRONG",{});var zqr=s(DK);_Xe=r(zqr,"speech_to_text_2"),zqr.forEach(t),uXe=r(uMe," \u2014 "),Wx=n(uMe,"A",{href:!0});var Qqr=s(Wx);bXe=r(Qqr,"Speech2Text2Config"),Qqr.forEach(t),FXe=r(uMe," (Speech2Text2 model)"),uMe.forEach(t),vXe=i(v),mg=n(v,"LI",{});var bMe=s(mg);GK=n(bMe,"STRONG",{});var Wqr=s(GK);TXe=r(Wqr,"splinter"),Wqr.forEach(t),MXe=r(bMe," \u2014 "),Hx=n(bMe,"A",{href:!0});var Hqr=s(Hx);EXe=r(Hqr,"SplinterConfig"),Hqr.forEach(t),CXe=r(bMe," (Splinter model)"),bMe.forEach(t),wXe=i(v),gg=n(v,"LI",{});var FMe=s(gg);OK=n(FMe,"STRONG",{});var Uqr=s(OK);AXe=r(Uqr,"squeezebert"),Uqr.forEach(t),yXe=r(FMe," \u2014 "),Ux=n(FMe,"A",{href:!0});var Jqr=s(Ux);LXe=r(Jqr,"SqueezeBertConfig"),Jqr.forEach(t),xXe=r(FMe," (SqueezeBERT model)"),FMe.forEach(t),kXe=i(v),hg=n(v,"LI",{});var vMe=s(hg);VK=n(vMe,"STRONG",{});var Yqr=s(VK);SXe=r(Yqr,"swin"),Yqr.forEach(t),RXe=r(vMe," \u2014 "),Jx=n(vMe,"A",{href:!0});var Kqr=s(Jx);BXe=r(Kqr,"SwinConfig"),Kqr.forEach(t),PXe=r(vMe," (Swin model)"),vMe.forEach(t),$Xe=i(v),pg=n(v,"LI",{});var TMe=s(pg);XK=n(TMe,"STRONG",{});var Zqr=s(XK);IXe=r(Zqr,"t5"),Zqr.forEach(t),qXe=r(TMe," \u2014 "),Yx=n(TMe,"A",{href:!0});var eNr=s(Yx);NXe=r(eNr,"T5Config"),eNr.forEach(t),jXe=r(TMe," (T5 model)"),TMe.forEach(t),DXe=i(v),_g=n(v,"LI",{});var MMe=s(_g);zK=n(MMe,"STRONG",{});var oNr=s(zK);GXe=r(oNr,"tapas"),oNr.forEach(t),OXe=r(MMe," \u2014 "),Kx=n(MMe,"A",{href:!0});var rNr=s(Kx);VXe=r(rNr,"TapasConfig"),rNr.forEach(t),XXe=r(MMe," (TAPAS model)"),MMe.forEach(t),zXe=i(v),ug=n(v,"LI",{});var EMe=s(ug);QK=n(EMe,"STRONG",{});var tNr=s(QK);QXe=r(tNr,"tapex"),tNr.forEach(t),WXe=r(EMe," \u2014 "),Zx=n(EMe,"A",{href:!0});var aNr=s(Zx);HXe=r(aNr,"BartConfig"),aNr.forEach(t),UXe=r(EMe," (TAPEX model)"),EMe.forEach(t),JXe=i(v),bg=n(v,"LI",{});var CMe=s(bg);WK=n(CMe,"STRONG",{});var nNr=s(WK);YXe=r(nNr,"transfo-xl"),nNr.forEach(t),KXe=r(CMe," \u2014 "),ek=n(CMe,"A",{href:!0});var sNr=s(ek);ZXe=r(sNr,"TransfoXLConfig"),sNr.forEach(t),eze=r(CMe," (Transformer-XL model)"),CMe.forEach(t),oze=i(v),Fg=n(v,"LI",{});var wMe=s(Fg);HK=n(wMe,"STRONG",{});var lNr=s(HK);rze=r(lNr,"trocr"),lNr.forEach(t),tze=r(wMe," \u2014 "),ok=n(wMe,"A",{href:!0});var iNr=s(ok);aze=r(iNr,"TrOCRConfig"),iNr.forEach(t),nze=r(wMe," (TrOCR model)"),wMe.forEach(t),sze=i(v),vg=n(v,"LI",{});var AMe=s(vg);UK=n(AMe,"STRONG",{});var dNr=s(UK);lze=r(dNr,"unispeech"),dNr.forEach(t),ize=r(AMe," \u2014 "),rk=n(AMe,"A",{href:!0});var cNr=s(rk);dze=r(cNr,"UniSpeechConfig"),cNr.forEach(t),cze=r(AMe," (UniSpeech model)"),AMe.forEach(t),fze=i(v),Tg=n(v,"LI",{});var yMe=s(Tg);JK=n(yMe,"STRONG",{});var fNr=s(JK);mze=r(fNr,"unispeech-sat"),fNr.forEach(t),gze=r(yMe," \u2014 "),tk=n(yMe,"A",{href:!0});var mNr=s(tk);hze=r(mNr,"UniSpeechSatConfig"),mNr.forEach(t),pze=r(yMe," (UniSpeechSat model)"),yMe.forEach(t),_ze=i(v),Mg=n(v,"LI",{});var LMe=s(Mg);YK=n(LMe,"STRONG",{});var gNr=s(YK);uze=r(gNr,"van"),gNr.forEach(t),bze=r(LMe," \u2014 "),ak=n(LMe,"A",{href:!0});var hNr=s(ak);Fze=r(hNr,"VanConfig"),hNr.forEach(t),vze=r(LMe," (VAN model)"),LMe.forEach(t),Tze=i(v),Eg=n(v,"LI",{});var xMe=s(Eg);KK=n(xMe,"STRONG",{});var pNr=s(KK);Mze=r(pNr,"vilt"),pNr.forEach(t),Eze=r(xMe," \u2014 "),nk=n(xMe,"A",{href:!0});var _Nr=s(nk);Cze=r(_Nr,"ViltConfig"),_Nr.forEach(t),wze=r(xMe," (ViLT model)"),xMe.forEach(t),Aze=i(v),Cg=n(v,"LI",{});var kMe=s(Cg);ZK=n(kMe,"STRONG",{});var uNr=s(ZK);yze=r(uNr,"vision-encoder-decoder"),uNr.forEach(t),Lze=r(kMe," \u2014 "),sk=n(kMe,"A",{href:!0});var bNr=s(sk);xze=r(bNr,"VisionEncoderDecoderConfig"),bNr.forEach(t),kze=r(kMe," (Vision Encoder decoder model)"),kMe.forEach(t),Sze=i(v),wg=n(v,"LI",{});var SMe=s(wg);eZ=n(SMe,"STRONG",{});var FNr=s(eZ);Rze=r(FNr,"vision-text-dual-encoder"),FNr.forEach(t),Bze=r(SMe," \u2014 "),lk=n(SMe,"A",{href:!0});var vNr=s(lk);Pze=r(vNr,"VisionTextDualEncoderConfig"),vNr.forEach(t),$ze=r(SMe," (VisionTextDualEncoder model)"),SMe.forEach(t),Ize=i(v),Ag=n(v,"LI",{});var RMe=s(Ag);oZ=n(RMe,"STRONG",{});var TNr=s(oZ);qze=r(TNr,"visual_bert"),TNr.forEach(t),Nze=r(RMe," \u2014 "),ik=n(RMe,"A",{href:!0});var MNr=s(ik);jze=r(MNr,"VisualBertConfig"),MNr.forEach(t),Dze=r(RMe," (VisualBert model)"),RMe.forEach(t),Gze=i(v),yg=n(v,"LI",{});var BMe=s(yg);rZ=n(BMe,"STRONG",{});var ENr=s(rZ);Oze=r(ENr,"vit"),ENr.forEach(t),Vze=r(BMe," \u2014 "),dk=n(BMe,"A",{href:!0});var CNr=s(dk);Xze=r(CNr,"ViTConfig"),CNr.forEach(t),zze=r(BMe," (ViT model)"),BMe.forEach(t),Qze=i(v),Lg=n(v,"LI",{});var PMe=s(Lg);tZ=n(PMe,"STRONG",{});var wNr=s(tZ);Wze=r(wNr,"vit_mae"),wNr.forEach(t),Hze=r(PMe," \u2014 "),ck=n(PMe,"A",{href:!0});var ANr=s(ck);Uze=r(ANr,"ViTMAEConfig"),ANr.forEach(t),Jze=r(PMe," (ViTMAE model)"),PMe.forEach(t),Yze=i(v),xg=n(v,"LI",{});var $Me=s(xg);aZ=n($Me,"STRONG",{});var yNr=s(aZ);Kze=r(yNr,"wav2vec2"),yNr.forEach(t),Zze=r($Me," \u2014 "),fk=n($Me,"A",{href:!0});var LNr=s(fk);eQe=r(LNr,"Wav2Vec2Config"),LNr.forEach(t),oQe=r($Me," (Wav2Vec2 model)"),$Me.forEach(t),rQe=i(v),kg=n(v,"LI",{});var IMe=s(kg);nZ=n(IMe,"STRONG",{});var xNr=s(nZ);tQe=r(xNr,"wavlm"),xNr.forEach(t),aQe=r(IMe," \u2014 "),mk=n(IMe,"A",{href:!0});var kNr=s(mk);nQe=r(kNr,"WavLMConfig"),kNr.forEach(t),sQe=r(IMe," (WavLM model)"),IMe.forEach(t),lQe=i(v),Sg=n(v,"LI",{});var qMe=s(Sg);sZ=n(qMe,"STRONG",{});var SNr=s(sZ);iQe=r(SNr,"xglm"),SNr.forEach(t),dQe=r(qMe," \u2014 "),gk=n(qMe,"A",{href:!0});var RNr=s(gk);cQe=r(RNr,"XGLMConfig"),RNr.forEach(t),fQe=r(qMe," (XGLM model)"),qMe.forEach(t),mQe=i(v),Rg=n(v,"LI",{});var NMe=s(Rg);lZ=n(NMe,"STRONG",{});var BNr=s(lZ);gQe=r(BNr,"xlm"),BNr.forEach(t),hQe=r(NMe," \u2014 "),hk=n(NMe,"A",{href:!0});var PNr=s(hk);pQe=r(PNr,"XLMConfig"),PNr.forEach(t),_Qe=r(NMe," (XLM model)"),NMe.forEach(t),uQe=i(v),Bg=n(v,"LI",{});var jMe=s(Bg);iZ=n(jMe,"STRONG",{});var $Nr=s(iZ);bQe=r($Nr,"xlm-prophetnet"),$Nr.forEach(t),FQe=r(jMe," \u2014 "),pk=n(jMe,"A",{href:!0});var INr=s(pk);vQe=r(INr,"XLMProphetNetConfig"),INr.forEach(t),TQe=r(jMe," (XLMProphetNet model)"),jMe.forEach(t),MQe=i(v),Pg=n(v,"LI",{});var DMe=s(Pg);dZ=n(DMe,"STRONG",{});var qNr=s(dZ);EQe=r(qNr,"xlm-roberta"),qNr.forEach(t),CQe=r(DMe," \u2014 "),_k=n(DMe,"A",{href:!0});var NNr=s(_k);wQe=r(NNr,"XLMRobertaConfig"),NNr.forEach(t),AQe=r(DMe," (XLM-RoBERTa model)"),DMe.forEach(t),yQe=i(v),$g=n(v,"LI",{});var GMe=s($g);cZ=n(GMe,"STRONG",{});var jNr=s(cZ);LQe=r(jNr,"xlm-roberta-xl"),jNr.forEach(t),xQe=r(GMe," \u2014 "),uk=n(GMe,"A",{href:!0});var DNr=s(uk);kQe=r(DNr,"XLMRobertaXLConfig"),DNr.forEach(t),SQe=r(GMe," (XLM-RoBERTa-XL model)"),GMe.forEach(t),RQe=i(v),Ig=n(v,"LI",{});var OMe=s(Ig);fZ=n(OMe,"STRONG",{});var GNr=s(fZ);BQe=r(GNr,"xlnet"),GNr.forEach(t),PQe=r(OMe," \u2014 "),bk=n(OMe,"A",{href:!0});var ONr=s(bk);$Qe=r(ONr,"XLNetConfig"),ONr.forEach(t),IQe=r(OMe," (XLNet model)"),OMe.forEach(t),qQe=i(v),qg=n(v,"LI",{});var VMe=s(qg);mZ=n(VMe,"STRONG",{});var VNr=s(mZ);NQe=r(VNr,"yoso"),VNr.forEach(t),jQe=r(VMe," \u2014 "),Fk=n(VMe,"A",{href:!0});var XNr=s(Fk);DQe=r(XNr,"YosoConfig"),XNr.forEach(t),GQe=r(VMe," (YOSO model)"),VMe.forEach(t),v.forEach(t),OQe=i(ga),gZ=n(ga,"P",{});var zNr=s(gZ);VQe=r(zNr,"Examples:"),zNr.forEach(t),XQe=i(ga),m(NC.$$.fragment,ga),ga.forEach(t),zQe=i(Os),Ng=n(Os,"DIV",{class:!0});var DPe=s(Ng);m(jC.$$.fragment,DPe),QQe=i(DPe),hZ=n(DPe,"P",{});var QNr=s(hZ);WQe=r(QNr,"Register a new configuration for this class."),QNr.forEach(t),DPe.forEach(t),Os.forEach(t),NRe=i(c),Qi=n(c,"H2",{class:!0});var GPe=s(Qi);jg=n(GPe,"A",{id:!0,class:!0,href:!0});var WNr=s(jg);pZ=n(WNr,"SPAN",{});var HNr=s(pZ);m(DC.$$.fragment,HNr),HNr.forEach(t),WNr.forEach(t),HQe=i(GPe),_Z=n(GPe,"SPAN",{});var UNr=s(_Z);UQe=r(UNr,"AutoTokenizer"),UNr.forEach(t),GPe.forEach(t),jRe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(GC.$$.fragment,Vs),JQe=i(Vs),OC=n(Vs,"P",{});var OPe=s(OC);YQe=r(OPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vk=n(OPe,"A",{href:!0});var JNr=s(vk);KQe=r(JNr,"AutoTokenizer.from_pretrained()"),JNr.forEach(t),ZQe=r(OPe," class method."),OPe.forEach(t),eWe=i(Vs),VC=n(Vs,"P",{});var VPe=s(VC);oWe=r(VPe,"This class cannot be instantiated directly using "),uZ=n(VPe,"CODE",{});var YNr=s(uZ);rWe=r(YNr,"__init__()"),YNr.forEach(t),tWe=r(VPe," (throws an error)."),VPe.forEach(t),aWe=i(Vs),ho=n(Vs,"DIV",{class:!0});var ha=s(ho);m(XC.$$.fragment,ha),nWe=i(ha),bZ=n(ha,"P",{});var KNr=s(bZ);sWe=r(KNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KNr.forEach(t),lWe=i(ha),Oa=n(ha,"P",{});var x3=s(Oa);iWe=r(x3,"The tokenizer class to instantiate is selected based on the "),FZ=n(x3,"CODE",{});var ZNr=s(FZ);dWe=r(ZNr,"model_type"),ZNr.forEach(t),cWe=r(x3,` property of the config object (either
passed as an argument or loaded from `),vZ=n(x3,"CODE",{});var ejr=s(vZ);fWe=r(ejr,"pretrained_model_name_or_path"),ejr.forEach(t),mWe=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TZ=n(x3,"CODE",{});var ojr=s(TZ);gWe=r(ojr,"pretrained_model_name_or_path"),ojr.forEach(t),hWe=r(x3,":"),x3.forEach(t),pWe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var E7=s(Qn);MZ=n(E7,"STRONG",{});var rjr=s(MZ);_We=r(rjr,"albert"),rjr.forEach(t),uWe=r(E7," \u2014 "),Tk=n(E7,"A",{href:!0});var tjr=s(Tk);bWe=r(tjr,"AlbertTokenizer"),tjr.forEach(t),FWe=r(E7," or "),Mk=n(E7,"A",{href:!0});var ajr=s(Mk);vWe=r(ajr,"AlbertTokenizerFast"),ajr.forEach(t),TWe=r(E7," (ALBERT model)"),E7.forEach(t),MWe=i(w),Wn=n(w,"LI",{});var C7=s(Wn);EZ=n(C7,"STRONG",{});var njr=s(EZ);EWe=r(njr,"bart"),njr.forEach(t),CWe=r(C7," \u2014 "),Ek=n(C7,"A",{href:!0});var sjr=s(Ek);wWe=r(sjr,"BartTokenizer"),sjr.forEach(t),AWe=r(C7," or "),Ck=n(C7,"A",{href:!0});var ljr=s(Ck);yWe=r(ljr,"BartTokenizerFast"),ljr.forEach(t),LWe=r(C7," (BART model)"),C7.forEach(t),xWe=i(w),Hn=n(w,"LI",{});var w7=s(Hn);CZ=n(w7,"STRONG",{});var ijr=s(CZ);kWe=r(ijr,"barthez"),ijr.forEach(t),SWe=r(w7," \u2014 "),wk=n(w7,"A",{href:!0});var djr=s(wk);RWe=r(djr,"BarthezTokenizer"),djr.forEach(t),BWe=r(w7," or "),Ak=n(w7,"A",{href:!0});var cjr=s(Ak);PWe=r(cjr,"BarthezTokenizerFast"),cjr.forEach(t),$We=r(w7," (BARThez model)"),w7.forEach(t),IWe=i(w),Dg=n(w,"LI",{});var XMe=s(Dg);wZ=n(XMe,"STRONG",{});var fjr=s(wZ);qWe=r(fjr,"bartpho"),fjr.forEach(t),NWe=r(XMe," \u2014 "),yk=n(XMe,"A",{href:!0});var mjr=s(yk);jWe=r(mjr,"BartphoTokenizer"),mjr.forEach(t),DWe=r(XMe," (BARTpho model)"),XMe.forEach(t),GWe=i(w),Un=n(w,"LI",{});var A7=s(Un);AZ=n(A7,"STRONG",{});var gjr=s(AZ);OWe=r(gjr,"bert"),gjr.forEach(t),VWe=r(A7," \u2014 "),Lk=n(A7,"A",{href:!0});var hjr=s(Lk);XWe=r(hjr,"BertTokenizer"),hjr.forEach(t),zWe=r(A7," or "),xk=n(A7,"A",{href:!0});var pjr=s(xk);QWe=r(pjr,"BertTokenizerFast"),pjr.forEach(t),WWe=r(A7," (BERT model)"),A7.forEach(t),HWe=i(w),Gg=n(w,"LI",{});var zMe=s(Gg);yZ=n(zMe,"STRONG",{});var _jr=s(yZ);UWe=r(_jr,"bert-generation"),_jr.forEach(t),JWe=r(zMe," \u2014 "),kk=n(zMe,"A",{href:!0});var ujr=s(kk);YWe=r(ujr,"BertGenerationTokenizer"),ujr.forEach(t),KWe=r(zMe," (Bert Generation model)"),zMe.forEach(t),ZWe=i(w),Og=n(w,"LI",{});var QMe=s(Og);LZ=n(QMe,"STRONG",{});var bjr=s(LZ);eHe=r(bjr,"bert-japanese"),bjr.forEach(t),oHe=r(QMe," \u2014 "),Sk=n(QMe,"A",{href:!0});var Fjr=s(Sk);rHe=r(Fjr,"BertJapaneseTokenizer"),Fjr.forEach(t),tHe=r(QMe," (BertJapanese model)"),QMe.forEach(t),aHe=i(w),Vg=n(w,"LI",{});var WMe=s(Vg);xZ=n(WMe,"STRONG",{});var vjr=s(xZ);nHe=r(vjr,"bertweet"),vjr.forEach(t),sHe=r(WMe," \u2014 "),Rk=n(WMe,"A",{href:!0});var Tjr=s(Rk);lHe=r(Tjr,"BertweetTokenizer"),Tjr.forEach(t),iHe=r(WMe," (Bertweet model)"),WMe.forEach(t),dHe=i(w),Jn=n(w,"LI",{});var y7=s(Jn);kZ=n(y7,"STRONG",{});var Mjr=s(kZ);cHe=r(Mjr,"big_bird"),Mjr.forEach(t),fHe=r(y7," \u2014 "),Bk=n(y7,"A",{href:!0});var Ejr=s(Bk);mHe=r(Ejr,"BigBirdTokenizer"),Ejr.forEach(t),gHe=r(y7," or "),Pk=n(y7,"A",{href:!0});var Cjr=s(Pk);hHe=r(Cjr,"BigBirdTokenizerFast"),Cjr.forEach(t),pHe=r(y7," (BigBird model)"),y7.forEach(t),_He=i(w),Yn=n(w,"LI",{});var L7=s(Yn);SZ=n(L7,"STRONG",{});var wjr=s(SZ);uHe=r(wjr,"bigbird_pegasus"),wjr.forEach(t),bHe=r(L7," \u2014 "),$k=n(L7,"A",{href:!0});var Ajr=s($k);FHe=r(Ajr,"PegasusTokenizer"),Ajr.forEach(t),vHe=r(L7," or "),Ik=n(L7,"A",{href:!0});var yjr=s(Ik);THe=r(yjr,"PegasusTokenizerFast"),yjr.forEach(t),MHe=r(L7," (BigBirdPegasus model)"),L7.forEach(t),EHe=i(w),Kn=n(w,"LI",{});var x7=s(Kn);RZ=n(x7,"STRONG",{});var Ljr=s(RZ);CHe=r(Ljr,"blenderbot"),Ljr.forEach(t),wHe=r(x7," \u2014 "),qk=n(x7,"A",{href:!0});var xjr=s(qk);AHe=r(xjr,"BlenderbotTokenizer"),xjr.forEach(t),yHe=r(x7," or "),Nk=n(x7,"A",{href:!0});var kjr=s(Nk);LHe=r(kjr,"BlenderbotTokenizerFast"),kjr.forEach(t),xHe=r(x7," (Blenderbot model)"),x7.forEach(t),kHe=i(w),Xg=n(w,"LI",{});var HMe=s(Xg);BZ=n(HMe,"STRONG",{});var Sjr=s(BZ);SHe=r(Sjr,"blenderbot-small"),Sjr.forEach(t),RHe=r(HMe," \u2014 "),jk=n(HMe,"A",{href:!0});var Rjr=s(jk);BHe=r(Rjr,"BlenderbotSmallTokenizer"),Rjr.forEach(t),PHe=r(HMe," (BlenderbotSmall model)"),HMe.forEach(t),$He=i(w),zg=n(w,"LI",{});var UMe=s(zg);PZ=n(UMe,"STRONG",{});var Bjr=s(PZ);IHe=r(Bjr,"byt5"),Bjr.forEach(t),qHe=r(UMe," \u2014 "),Dk=n(UMe,"A",{href:!0});var Pjr=s(Dk);NHe=r(Pjr,"ByT5Tokenizer"),Pjr.forEach(t),jHe=r(UMe," (ByT5 model)"),UMe.forEach(t),DHe=i(w),Zn=n(w,"LI",{});var k7=s(Zn);$Z=n(k7,"STRONG",{});var $jr=s($Z);GHe=r($jr,"camembert"),$jr.forEach(t),OHe=r(k7," \u2014 "),Gk=n(k7,"A",{href:!0});var Ijr=s(Gk);VHe=r(Ijr,"CamembertTokenizer"),Ijr.forEach(t),XHe=r(k7," or "),Ok=n(k7,"A",{href:!0});var qjr=s(Ok);zHe=r(qjr,"CamembertTokenizerFast"),qjr.forEach(t),QHe=r(k7," (CamemBERT model)"),k7.forEach(t),WHe=i(w),Qg=n(w,"LI",{});var JMe=s(Qg);IZ=n(JMe,"STRONG",{});var Njr=s(IZ);HHe=r(Njr,"canine"),Njr.forEach(t),UHe=r(JMe," \u2014 "),Vk=n(JMe,"A",{href:!0});var jjr=s(Vk);JHe=r(jjr,"CanineTokenizer"),jjr.forEach(t),YHe=r(JMe," (Canine model)"),JMe.forEach(t),KHe=i(w),es=n(w,"LI",{});var S7=s(es);qZ=n(S7,"STRONG",{});var Djr=s(qZ);ZHe=r(Djr,"clip"),Djr.forEach(t),eUe=r(S7," \u2014 "),Xk=n(S7,"A",{href:!0});var Gjr=s(Xk);oUe=r(Gjr,"CLIPTokenizer"),Gjr.forEach(t),rUe=r(S7," or "),zk=n(S7,"A",{href:!0});var Ojr=s(zk);tUe=r(Ojr,"CLIPTokenizerFast"),Ojr.forEach(t),aUe=r(S7," (CLIP model)"),S7.forEach(t),nUe=i(w),os=n(w,"LI",{});var R7=s(os);NZ=n(R7,"STRONG",{});var Vjr=s(NZ);sUe=r(Vjr,"convbert"),Vjr.forEach(t),lUe=r(R7," \u2014 "),Qk=n(R7,"A",{href:!0});var Xjr=s(Qk);iUe=r(Xjr,"ConvBertTokenizer"),Xjr.forEach(t),dUe=r(R7," or "),Wk=n(R7,"A",{href:!0});var zjr=s(Wk);cUe=r(zjr,"ConvBertTokenizerFast"),zjr.forEach(t),fUe=r(R7," (ConvBERT model)"),R7.forEach(t),mUe=i(w),rs=n(w,"LI",{});var B7=s(rs);jZ=n(B7,"STRONG",{});var Qjr=s(jZ);gUe=r(Qjr,"cpm"),Qjr.forEach(t),hUe=r(B7," \u2014 "),Hk=n(B7,"A",{href:!0});var Wjr=s(Hk);pUe=r(Wjr,"CpmTokenizer"),Wjr.forEach(t),_Ue=r(B7," or "),DZ=n(B7,"CODE",{});var Hjr=s(DZ);uUe=r(Hjr,"CpmTokenizerFast"),Hjr.forEach(t),bUe=r(B7," (CPM model)"),B7.forEach(t),FUe=i(w),Wg=n(w,"LI",{});var YMe=s(Wg);GZ=n(YMe,"STRONG",{});var Ujr=s(GZ);vUe=r(Ujr,"ctrl"),Ujr.forEach(t),TUe=r(YMe," \u2014 "),Uk=n(YMe,"A",{href:!0});var Jjr=s(Uk);MUe=r(Jjr,"CTRLTokenizer"),Jjr.forEach(t),EUe=r(YMe," (CTRL model)"),YMe.forEach(t),CUe=i(w),ts=n(w,"LI",{});var P7=s(ts);OZ=n(P7,"STRONG",{});var Yjr=s(OZ);wUe=r(Yjr,"deberta"),Yjr.forEach(t),AUe=r(P7," \u2014 "),Jk=n(P7,"A",{href:!0});var Kjr=s(Jk);yUe=r(Kjr,"DebertaTokenizer"),Kjr.forEach(t),LUe=r(P7," or "),Yk=n(P7,"A",{href:!0});var Zjr=s(Yk);xUe=r(Zjr,"DebertaTokenizerFast"),Zjr.forEach(t),kUe=r(P7," (DeBERTa model)"),P7.forEach(t),SUe=i(w),Hg=n(w,"LI",{});var KMe=s(Hg);VZ=n(KMe,"STRONG",{});var eDr=s(VZ);RUe=r(eDr,"deberta-v2"),eDr.forEach(t),BUe=r(KMe," \u2014 "),Kk=n(KMe,"A",{href:!0});var oDr=s(Kk);PUe=r(oDr,"DebertaV2Tokenizer"),oDr.forEach(t),$Ue=r(KMe," (DeBERTa-v2 model)"),KMe.forEach(t),IUe=i(w),as=n(w,"LI",{});var $7=s(as);XZ=n($7,"STRONG",{});var rDr=s(XZ);qUe=r(rDr,"distilbert"),rDr.forEach(t),NUe=r($7," \u2014 "),Zk=n($7,"A",{href:!0});var tDr=s(Zk);jUe=r(tDr,"DistilBertTokenizer"),tDr.forEach(t),DUe=r($7," or "),eS=n($7,"A",{href:!0});var aDr=s(eS);GUe=r(aDr,"DistilBertTokenizerFast"),aDr.forEach(t),OUe=r($7," (DistilBERT model)"),$7.forEach(t),VUe=i(w),ns=n(w,"LI",{});var I7=s(ns);zZ=n(I7,"STRONG",{});var nDr=s(zZ);XUe=r(nDr,"dpr"),nDr.forEach(t),zUe=r(I7," \u2014 "),oS=n(I7,"A",{href:!0});var sDr=s(oS);QUe=r(sDr,"DPRQuestionEncoderTokenizer"),sDr.forEach(t),WUe=r(I7," or "),rS=n(I7,"A",{href:!0});var lDr=s(rS);HUe=r(lDr,"DPRQuestionEncoderTokenizerFast"),lDr.forEach(t),UUe=r(I7," (DPR model)"),I7.forEach(t),JUe=i(w),ss=n(w,"LI",{});var q7=s(ss);QZ=n(q7,"STRONG",{});var iDr=s(QZ);YUe=r(iDr,"electra"),iDr.forEach(t),KUe=r(q7," \u2014 "),tS=n(q7,"A",{href:!0});var dDr=s(tS);ZUe=r(dDr,"ElectraTokenizer"),dDr.forEach(t),eJe=r(q7," or "),aS=n(q7,"A",{href:!0});var cDr=s(aS);oJe=r(cDr,"ElectraTokenizerFast"),cDr.forEach(t),rJe=r(q7," (ELECTRA model)"),q7.forEach(t),tJe=i(w),Ug=n(w,"LI",{});var ZMe=s(Ug);WZ=n(ZMe,"STRONG",{});var fDr=s(WZ);aJe=r(fDr,"flaubert"),fDr.forEach(t),nJe=r(ZMe," \u2014 "),nS=n(ZMe,"A",{href:!0});var mDr=s(nS);sJe=r(mDr,"FlaubertTokenizer"),mDr.forEach(t),lJe=r(ZMe," (FlauBERT model)"),ZMe.forEach(t),iJe=i(w),ls=n(w,"LI",{});var N7=s(ls);HZ=n(N7,"STRONG",{});var gDr=s(HZ);dJe=r(gDr,"fnet"),gDr.forEach(t),cJe=r(N7," \u2014 "),sS=n(N7,"A",{href:!0});var hDr=s(sS);fJe=r(hDr,"FNetTokenizer"),hDr.forEach(t),mJe=r(N7," or "),lS=n(N7,"A",{href:!0});var pDr=s(lS);gJe=r(pDr,"FNetTokenizerFast"),pDr.forEach(t),hJe=r(N7," (FNet model)"),N7.forEach(t),pJe=i(w),Jg=n(w,"LI",{});var eEe=s(Jg);UZ=n(eEe,"STRONG",{});var _Dr=s(UZ);_Je=r(_Dr,"fsmt"),_Dr.forEach(t),uJe=r(eEe," \u2014 "),iS=n(eEe,"A",{href:!0});var uDr=s(iS);bJe=r(uDr,"FSMTTokenizer"),uDr.forEach(t),FJe=r(eEe," (FairSeq Machine-Translation model)"),eEe.forEach(t),vJe=i(w),is=n(w,"LI",{});var j7=s(is);JZ=n(j7,"STRONG",{});var bDr=s(JZ);TJe=r(bDr,"funnel"),bDr.forEach(t),MJe=r(j7," \u2014 "),dS=n(j7,"A",{href:!0});var FDr=s(dS);EJe=r(FDr,"FunnelTokenizer"),FDr.forEach(t),CJe=r(j7," or "),cS=n(j7,"A",{href:!0});var vDr=s(cS);wJe=r(vDr,"FunnelTokenizerFast"),vDr.forEach(t),AJe=r(j7," (Funnel Transformer model)"),j7.forEach(t),yJe=i(w),ds=n(w,"LI",{});var D7=s(ds);YZ=n(D7,"STRONG",{});var TDr=s(YZ);LJe=r(TDr,"gpt2"),TDr.forEach(t),xJe=r(D7," \u2014 "),fS=n(D7,"A",{href:!0});var MDr=s(fS);kJe=r(MDr,"GPT2Tokenizer"),MDr.forEach(t),SJe=r(D7," or "),mS=n(D7,"A",{href:!0});var EDr=s(mS);RJe=r(EDr,"GPT2TokenizerFast"),EDr.forEach(t),BJe=r(D7," (OpenAI GPT-2 model)"),D7.forEach(t),PJe=i(w),cs=n(w,"LI",{});var G7=s(cs);KZ=n(G7,"STRONG",{});var CDr=s(KZ);$Je=r(CDr,"gpt_neo"),CDr.forEach(t),IJe=r(G7," \u2014 "),gS=n(G7,"A",{href:!0});var wDr=s(gS);qJe=r(wDr,"GPT2Tokenizer"),wDr.forEach(t),NJe=r(G7," or "),hS=n(G7,"A",{href:!0});var ADr=s(hS);jJe=r(ADr,"GPT2TokenizerFast"),ADr.forEach(t),DJe=r(G7," (GPT Neo model)"),G7.forEach(t),GJe=i(w),fs=n(w,"LI",{});var O7=s(fs);ZZ=n(O7,"STRONG",{});var yDr=s(ZZ);OJe=r(yDr,"herbert"),yDr.forEach(t),VJe=r(O7," \u2014 "),pS=n(O7,"A",{href:!0});var LDr=s(pS);XJe=r(LDr,"HerbertTokenizer"),LDr.forEach(t),zJe=r(O7," or "),_S=n(O7,"A",{href:!0});var xDr=s(_S);QJe=r(xDr,"HerbertTokenizerFast"),xDr.forEach(t),WJe=r(O7," (HerBERT model)"),O7.forEach(t),HJe=i(w),Yg=n(w,"LI",{});var oEe=s(Yg);eee=n(oEe,"STRONG",{});var kDr=s(eee);UJe=r(kDr,"hubert"),kDr.forEach(t),JJe=r(oEe," \u2014 "),uS=n(oEe,"A",{href:!0});var SDr=s(uS);YJe=r(SDr,"Wav2Vec2CTCTokenizer"),SDr.forEach(t),KJe=r(oEe," (Hubert model)"),oEe.forEach(t),ZJe=i(w),ms=n(w,"LI",{});var V7=s(ms);oee=n(V7,"STRONG",{});var RDr=s(oee);eYe=r(RDr,"ibert"),RDr.forEach(t),oYe=r(V7," \u2014 "),bS=n(V7,"A",{href:!0});var BDr=s(bS);rYe=r(BDr,"RobertaTokenizer"),BDr.forEach(t),tYe=r(V7," or "),FS=n(V7,"A",{href:!0});var PDr=s(FS);aYe=r(PDr,"RobertaTokenizerFast"),PDr.forEach(t),nYe=r(V7," (I-BERT model)"),V7.forEach(t),sYe=i(w),gs=n(w,"LI",{});var X7=s(gs);ree=n(X7,"STRONG",{});var $Dr=s(ree);lYe=r($Dr,"layoutlm"),$Dr.forEach(t),iYe=r(X7," \u2014 "),vS=n(X7,"A",{href:!0});var IDr=s(vS);dYe=r(IDr,"LayoutLMTokenizer"),IDr.forEach(t),cYe=r(X7," or "),TS=n(X7,"A",{href:!0});var qDr=s(TS);fYe=r(qDr,"LayoutLMTokenizerFast"),qDr.forEach(t),mYe=r(X7," (LayoutLM model)"),X7.forEach(t),gYe=i(w),hs=n(w,"LI",{});var z7=s(hs);tee=n(z7,"STRONG",{});var NDr=s(tee);hYe=r(NDr,"layoutlmv2"),NDr.forEach(t),pYe=r(z7," \u2014 "),MS=n(z7,"A",{href:!0});var jDr=s(MS);_Ye=r(jDr,"LayoutLMv2Tokenizer"),jDr.forEach(t),uYe=r(z7," or "),ES=n(z7,"A",{href:!0});var DDr=s(ES);bYe=r(DDr,"LayoutLMv2TokenizerFast"),DDr.forEach(t),FYe=r(z7," (LayoutLMv2 model)"),z7.forEach(t),vYe=i(w),ps=n(w,"LI",{});var Q7=s(ps);aee=n(Q7,"STRONG",{});var GDr=s(aee);TYe=r(GDr,"layoutxlm"),GDr.forEach(t),MYe=r(Q7," \u2014 "),CS=n(Q7,"A",{href:!0});var ODr=s(CS);EYe=r(ODr,"LayoutXLMTokenizer"),ODr.forEach(t),CYe=r(Q7," or "),wS=n(Q7,"A",{href:!0});var VDr=s(wS);wYe=r(VDr,"LayoutXLMTokenizerFast"),VDr.forEach(t),AYe=r(Q7," (LayoutXLM model)"),Q7.forEach(t),yYe=i(w),_s=n(w,"LI",{});var W7=s(_s);nee=n(W7,"STRONG",{});var XDr=s(nee);LYe=r(XDr,"led"),XDr.forEach(t),xYe=r(W7," \u2014 "),AS=n(W7,"A",{href:!0});var zDr=s(AS);kYe=r(zDr,"LEDTokenizer"),zDr.forEach(t),SYe=r(W7," or "),yS=n(W7,"A",{href:!0});var QDr=s(yS);RYe=r(QDr,"LEDTokenizerFast"),QDr.forEach(t),BYe=r(W7," (LED model)"),W7.forEach(t),PYe=i(w),us=n(w,"LI",{});var H7=s(us);see=n(H7,"STRONG",{});var WDr=s(see);$Ye=r(WDr,"longformer"),WDr.forEach(t),IYe=r(H7," \u2014 "),LS=n(H7,"A",{href:!0});var HDr=s(LS);qYe=r(HDr,"LongformerTokenizer"),HDr.forEach(t),NYe=r(H7," or "),xS=n(H7,"A",{href:!0});var UDr=s(xS);jYe=r(UDr,"LongformerTokenizerFast"),UDr.forEach(t),DYe=r(H7," (Longformer model)"),H7.forEach(t),GYe=i(w),Kg=n(w,"LI",{});var rEe=s(Kg);lee=n(rEe,"STRONG",{});var JDr=s(lee);OYe=r(JDr,"luke"),JDr.forEach(t),VYe=r(rEe," \u2014 "),kS=n(rEe,"A",{href:!0});var YDr=s(kS);XYe=r(YDr,"LukeTokenizer"),YDr.forEach(t),zYe=r(rEe," (LUKE model)"),rEe.forEach(t),QYe=i(w),bs=n(w,"LI",{});var U7=s(bs);iee=n(U7,"STRONG",{});var KDr=s(iee);WYe=r(KDr,"lxmert"),KDr.forEach(t),HYe=r(U7," \u2014 "),SS=n(U7,"A",{href:!0});var ZDr=s(SS);UYe=r(ZDr,"LxmertTokenizer"),ZDr.forEach(t),JYe=r(U7," or "),RS=n(U7,"A",{href:!0});var eGr=s(RS);YYe=r(eGr,"LxmertTokenizerFast"),eGr.forEach(t),KYe=r(U7," (LXMERT model)"),U7.forEach(t),ZYe=i(w),Zg=n(w,"LI",{});var tEe=s(Zg);dee=n(tEe,"STRONG",{});var oGr=s(dee);eKe=r(oGr,"m2m_100"),oGr.forEach(t),oKe=r(tEe," \u2014 "),BS=n(tEe,"A",{href:!0});var rGr=s(BS);rKe=r(rGr,"M2M100Tokenizer"),rGr.forEach(t),tKe=r(tEe," (M2M100 model)"),tEe.forEach(t),aKe=i(w),eh=n(w,"LI",{});var aEe=s(eh);cee=n(aEe,"STRONG",{});var tGr=s(cee);nKe=r(tGr,"marian"),tGr.forEach(t),sKe=r(aEe," \u2014 "),PS=n(aEe,"A",{href:!0});var aGr=s(PS);lKe=r(aGr,"MarianTokenizer"),aGr.forEach(t),iKe=r(aEe," (Marian model)"),aEe.forEach(t),dKe=i(w),Fs=n(w,"LI",{});var J7=s(Fs);fee=n(J7,"STRONG",{});var nGr=s(fee);cKe=r(nGr,"mbart"),nGr.forEach(t),fKe=r(J7," \u2014 "),$S=n(J7,"A",{href:!0});var sGr=s($S);mKe=r(sGr,"MBartTokenizer"),sGr.forEach(t),gKe=r(J7," or "),IS=n(J7,"A",{href:!0});var lGr=s(IS);hKe=r(lGr,"MBartTokenizerFast"),lGr.forEach(t),pKe=r(J7," (mBART model)"),J7.forEach(t),_Ke=i(w),vs=n(w,"LI",{});var Y7=s(vs);mee=n(Y7,"STRONG",{});var iGr=s(mee);uKe=r(iGr,"mbart50"),iGr.forEach(t),bKe=r(Y7," \u2014 "),qS=n(Y7,"A",{href:!0});var dGr=s(qS);FKe=r(dGr,"MBart50Tokenizer"),dGr.forEach(t),vKe=r(Y7," or "),NS=n(Y7,"A",{href:!0});var cGr=s(NS);TKe=r(cGr,"MBart50TokenizerFast"),cGr.forEach(t),MKe=r(Y7," (mBART-50 model)"),Y7.forEach(t),EKe=i(w),oh=n(w,"LI",{});var nEe=s(oh);gee=n(nEe,"STRONG",{});var fGr=s(gee);CKe=r(fGr,"mluke"),fGr.forEach(t),wKe=r(nEe," \u2014 "),jS=n(nEe,"A",{href:!0});var mGr=s(jS);AKe=r(mGr,"MLukeTokenizer"),mGr.forEach(t),yKe=r(nEe," (mLUKE model)"),nEe.forEach(t),LKe=i(w),Ts=n(w,"LI",{});var K7=s(Ts);hee=n(K7,"STRONG",{});var gGr=s(hee);xKe=r(gGr,"mobilebert"),gGr.forEach(t),kKe=r(K7," \u2014 "),DS=n(K7,"A",{href:!0});var hGr=s(DS);SKe=r(hGr,"MobileBertTokenizer"),hGr.forEach(t),RKe=r(K7," or "),GS=n(K7,"A",{href:!0});var pGr=s(GS);BKe=r(pGr,"MobileBertTokenizerFast"),pGr.forEach(t),PKe=r(K7," (MobileBERT model)"),K7.forEach(t),$Ke=i(w),Ms=n(w,"LI",{});var Z7=s(Ms);pee=n(Z7,"STRONG",{});var _Gr=s(pee);IKe=r(_Gr,"mpnet"),_Gr.forEach(t),qKe=r(Z7," \u2014 "),OS=n(Z7,"A",{href:!0});var uGr=s(OS);NKe=r(uGr,"MPNetTokenizer"),uGr.forEach(t),jKe=r(Z7," or "),VS=n(Z7,"A",{href:!0});var bGr=s(VS);DKe=r(bGr,"MPNetTokenizerFast"),bGr.forEach(t),GKe=r(Z7," (MPNet model)"),Z7.forEach(t),OKe=i(w),Es=n(w,"LI",{});var e9=s(Es);_ee=n(e9,"STRONG",{});var FGr=s(_ee);VKe=r(FGr,"mt5"),FGr.forEach(t),XKe=r(e9," \u2014 "),XS=n(e9,"A",{href:!0});var vGr=s(XS);zKe=r(vGr,"MT5Tokenizer"),vGr.forEach(t),QKe=r(e9," or "),zS=n(e9,"A",{href:!0});var TGr=s(zS);WKe=r(TGr,"MT5TokenizerFast"),TGr.forEach(t),HKe=r(e9," (mT5 model)"),e9.forEach(t),UKe=i(w),Cs=n(w,"LI",{});var o9=s(Cs);uee=n(o9,"STRONG",{});var MGr=s(uee);JKe=r(MGr,"openai-gpt"),MGr.forEach(t),YKe=r(o9," \u2014 "),QS=n(o9,"A",{href:!0});var EGr=s(QS);KKe=r(EGr,"OpenAIGPTTokenizer"),EGr.forEach(t),ZKe=r(o9," or "),WS=n(o9,"A",{href:!0});var CGr=s(WS);eZe=r(CGr,"OpenAIGPTTokenizerFast"),CGr.forEach(t),oZe=r(o9," (OpenAI GPT model)"),o9.forEach(t),rZe=i(w),ws=n(w,"LI",{});var r9=s(ws);bee=n(r9,"STRONG",{});var wGr=s(bee);tZe=r(wGr,"pegasus"),wGr.forEach(t),aZe=r(r9," \u2014 "),HS=n(r9,"A",{href:!0});var AGr=s(HS);nZe=r(AGr,"PegasusTokenizer"),AGr.forEach(t),sZe=r(r9," or "),US=n(r9,"A",{href:!0});var yGr=s(US);lZe=r(yGr,"PegasusTokenizerFast"),yGr.forEach(t),iZe=r(r9," (Pegasus model)"),r9.forEach(t),dZe=i(w),rh=n(w,"LI",{});var sEe=s(rh);Fee=n(sEe,"STRONG",{});var LGr=s(Fee);cZe=r(LGr,"perceiver"),LGr.forEach(t),fZe=r(sEe," \u2014 "),JS=n(sEe,"A",{href:!0});var xGr=s(JS);mZe=r(xGr,"PerceiverTokenizer"),xGr.forEach(t),gZe=r(sEe," (Perceiver model)"),sEe.forEach(t),hZe=i(w),th=n(w,"LI",{});var lEe=s(th);vee=n(lEe,"STRONG",{});var kGr=s(vee);pZe=r(kGr,"phobert"),kGr.forEach(t),_Ze=r(lEe," \u2014 "),YS=n(lEe,"A",{href:!0});var SGr=s(YS);uZe=r(SGr,"PhobertTokenizer"),SGr.forEach(t),bZe=r(lEe," (PhoBERT model)"),lEe.forEach(t),FZe=i(w),ah=n(w,"LI",{});var iEe=s(ah);Tee=n(iEe,"STRONG",{});var RGr=s(Tee);vZe=r(RGr,"plbart"),RGr.forEach(t),TZe=r(iEe," \u2014 "),KS=n(iEe,"A",{href:!0});var BGr=s(KS);MZe=r(BGr,"PLBartTokenizer"),BGr.forEach(t),EZe=r(iEe," (PLBart model)"),iEe.forEach(t),CZe=i(w),nh=n(w,"LI",{});var dEe=s(nh);Mee=n(dEe,"STRONG",{});var PGr=s(Mee);wZe=r(PGr,"prophetnet"),PGr.forEach(t),AZe=r(dEe," \u2014 "),ZS=n(dEe,"A",{href:!0});var $Gr=s(ZS);yZe=r($Gr,"ProphetNetTokenizer"),$Gr.forEach(t),LZe=r(dEe," (ProphetNet model)"),dEe.forEach(t),xZe=i(w),As=n(w,"LI",{});var t9=s(As);Eee=n(t9,"STRONG",{});var IGr=s(Eee);kZe=r(IGr,"qdqbert"),IGr.forEach(t),SZe=r(t9," \u2014 "),eR=n(t9,"A",{href:!0});var qGr=s(eR);RZe=r(qGr,"BertTokenizer"),qGr.forEach(t),BZe=r(t9," or "),oR=n(t9,"A",{href:!0});var NGr=s(oR);PZe=r(NGr,"BertTokenizerFast"),NGr.forEach(t),$Ze=r(t9," (QDQBert model)"),t9.forEach(t),IZe=i(w),sh=n(w,"LI",{});var cEe=s(sh);Cee=n(cEe,"STRONG",{});var jGr=s(Cee);qZe=r(jGr,"rag"),jGr.forEach(t),NZe=r(cEe," \u2014 "),rR=n(cEe,"A",{href:!0});var DGr=s(rR);jZe=r(DGr,"RagTokenizer"),DGr.forEach(t),DZe=r(cEe," (RAG model)"),cEe.forEach(t),GZe=i(w),ys=n(w,"LI",{});var a9=s(ys);wee=n(a9,"STRONG",{});var GGr=s(wee);OZe=r(GGr,"realm"),GGr.forEach(t),VZe=r(a9," \u2014 "),tR=n(a9,"A",{href:!0});var OGr=s(tR);XZe=r(OGr,"RealmTokenizer"),OGr.forEach(t),zZe=r(a9," or "),aR=n(a9,"A",{href:!0});var VGr=s(aR);QZe=r(VGr,"RealmTokenizerFast"),VGr.forEach(t),WZe=r(a9," (Realm model)"),a9.forEach(t),HZe=i(w),Ls=n(w,"LI",{});var n9=s(Ls);Aee=n(n9,"STRONG",{});var XGr=s(Aee);UZe=r(XGr,"reformer"),XGr.forEach(t),JZe=r(n9," \u2014 "),nR=n(n9,"A",{href:!0});var zGr=s(nR);YZe=r(zGr,"ReformerTokenizer"),zGr.forEach(t),KZe=r(n9," or "),sR=n(n9,"A",{href:!0});var QGr=s(sR);ZZe=r(QGr,"ReformerTokenizerFast"),QGr.forEach(t),eeo=r(n9," (Reformer model)"),n9.forEach(t),oeo=i(w),xs=n(w,"LI",{});var s9=s(xs);yee=n(s9,"STRONG",{});var WGr=s(yee);reo=r(WGr,"rembert"),WGr.forEach(t),teo=r(s9," \u2014 "),lR=n(s9,"A",{href:!0});var HGr=s(lR);aeo=r(HGr,"RemBertTokenizer"),HGr.forEach(t),neo=r(s9," or "),iR=n(s9,"A",{href:!0});var UGr=s(iR);seo=r(UGr,"RemBertTokenizerFast"),UGr.forEach(t),leo=r(s9," (RemBERT model)"),s9.forEach(t),ieo=i(w),ks=n(w,"LI",{});var l9=s(ks);Lee=n(l9,"STRONG",{});var JGr=s(Lee);deo=r(JGr,"retribert"),JGr.forEach(t),ceo=r(l9," \u2014 "),dR=n(l9,"A",{href:!0});var YGr=s(dR);feo=r(YGr,"RetriBertTokenizer"),YGr.forEach(t),meo=r(l9," or "),cR=n(l9,"A",{href:!0});var KGr=s(cR);geo=r(KGr,"RetriBertTokenizerFast"),KGr.forEach(t),heo=r(l9," (RetriBERT model)"),l9.forEach(t),peo=i(w),Ss=n(w,"LI",{});var i9=s(Ss);xee=n(i9,"STRONG",{});var ZGr=s(xee);_eo=r(ZGr,"roberta"),ZGr.forEach(t),ueo=r(i9," \u2014 "),fR=n(i9,"A",{href:!0});var eOr=s(fR);beo=r(eOr,"RobertaTokenizer"),eOr.forEach(t),Feo=r(i9," or "),mR=n(i9,"A",{href:!0});var oOr=s(mR);veo=r(oOr,"RobertaTokenizerFast"),oOr.forEach(t),Teo=r(i9," (RoBERTa model)"),i9.forEach(t),Meo=i(w),Rs=n(w,"LI",{});var d9=s(Rs);kee=n(d9,"STRONG",{});var rOr=s(kee);Eeo=r(rOr,"roformer"),rOr.forEach(t),Ceo=r(d9," \u2014 "),gR=n(d9,"A",{href:!0});var tOr=s(gR);weo=r(tOr,"RoFormerTokenizer"),tOr.forEach(t),Aeo=r(d9," or "),hR=n(d9,"A",{href:!0});var aOr=s(hR);yeo=r(aOr,"RoFormerTokenizerFast"),aOr.forEach(t),Leo=r(d9," (RoFormer model)"),d9.forEach(t),xeo=i(w),lh=n(w,"LI",{});var fEe=s(lh);See=n(fEe,"STRONG",{});var nOr=s(See);keo=r(nOr,"speech_to_text"),nOr.forEach(t),Seo=r(fEe," \u2014 "),pR=n(fEe,"A",{href:!0});var sOr=s(pR);Reo=r(sOr,"Speech2TextTokenizer"),sOr.forEach(t),Beo=r(fEe," (Speech2Text model)"),fEe.forEach(t),Peo=i(w),ih=n(w,"LI",{});var mEe=s(ih);Ree=n(mEe,"STRONG",{});var lOr=s(Ree);$eo=r(lOr,"speech_to_text_2"),lOr.forEach(t),Ieo=r(mEe," \u2014 "),_R=n(mEe,"A",{href:!0});var iOr=s(_R);qeo=r(iOr,"Speech2Text2Tokenizer"),iOr.forEach(t),Neo=r(mEe," (Speech2Text2 model)"),mEe.forEach(t),jeo=i(w),Bs=n(w,"LI",{});var c9=s(Bs);Bee=n(c9,"STRONG",{});var dOr=s(Bee);Deo=r(dOr,"splinter"),dOr.forEach(t),Geo=r(c9," \u2014 "),uR=n(c9,"A",{href:!0});var cOr=s(uR);Oeo=r(cOr,"SplinterTokenizer"),cOr.forEach(t),Veo=r(c9," or "),bR=n(c9,"A",{href:!0});var fOr=s(bR);Xeo=r(fOr,"SplinterTokenizerFast"),fOr.forEach(t),zeo=r(c9," (Splinter model)"),c9.forEach(t),Qeo=i(w),Ps=n(w,"LI",{});var f9=s(Ps);Pee=n(f9,"STRONG",{});var mOr=s(Pee);Weo=r(mOr,"squeezebert"),mOr.forEach(t),Heo=r(f9," \u2014 "),FR=n(f9,"A",{href:!0});var gOr=s(FR);Ueo=r(gOr,"SqueezeBertTokenizer"),gOr.forEach(t),Jeo=r(f9," or "),vR=n(f9,"A",{href:!0});var hOr=s(vR);Yeo=r(hOr,"SqueezeBertTokenizerFast"),hOr.forEach(t),Keo=r(f9," (SqueezeBERT model)"),f9.forEach(t),Zeo=i(w),$s=n(w,"LI",{});var m9=s($s);$ee=n(m9,"STRONG",{});var pOr=s($ee);eoo=r(pOr,"t5"),pOr.forEach(t),ooo=r(m9," \u2014 "),TR=n(m9,"A",{href:!0});var _Or=s(TR);roo=r(_Or,"T5Tokenizer"),_Or.forEach(t),too=r(m9," or "),MR=n(m9,"A",{href:!0});var uOr=s(MR);aoo=r(uOr,"T5TokenizerFast"),uOr.forEach(t),noo=r(m9," (T5 model)"),m9.forEach(t),soo=i(w),dh=n(w,"LI",{});var gEe=s(dh);Iee=n(gEe,"STRONG",{});var bOr=s(Iee);loo=r(bOr,"tapas"),bOr.forEach(t),ioo=r(gEe," \u2014 "),ER=n(gEe,"A",{href:!0});var FOr=s(ER);doo=r(FOr,"TapasTokenizer"),FOr.forEach(t),coo=r(gEe," (TAPAS model)"),gEe.forEach(t),foo=i(w),ch=n(w,"LI",{});var hEe=s(ch);qee=n(hEe,"STRONG",{});var vOr=s(qee);moo=r(vOr,"tapex"),vOr.forEach(t),goo=r(hEe," \u2014 "),CR=n(hEe,"A",{href:!0});var TOr=s(CR);hoo=r(TOr,"TapexTokenizer"),TOr.forEach(t),poo=r(hEe," (TAPEX model)"),hEe.forEach(t),_oo=i(w),fh=n(w,"LI",{});var pEe=s(fh);Nee=n(pEe,"STRONG",{});var MOr=s(Nee);uoo=r(MOr,"transfo-xl"),MOr.forEach(t),boo=r(pEe," \u2014 "),wR=n(pEe,"A",{href:!0});var EOr=s(wR);Foo=r(EOr,"TransfoXLTokenizer"),EOr.forEach(t),voo=r(pEe," (Transformer-XL model)"),pEe.forEach(t),Too=i(w),mh=n(w,"LI",{});var _Ee=s(mh);jee=n(_Ee,"STRONG",{});var COr=s(jee);Moo=r(COr,"wav2vec2"),COr.forEach(t),Eoo=r(_Ee," \u2014 "),AR=n(_Ee,"A",{href:!0});var wOr=s(AR);Coo=r(wOr,"Wav2Vec2CTCTokenizer"),wOr.forEach(t),woo=r(_Ee," (Wav2Vec2 model)"),_Ee.forEach(t),Aoo=i(w),gh=n(w,"LI",{});var uEe=s(gh);Dee=n(uEe,"STRONG",{});var AOr=s(Dee);yoo=r(AOr,"wav2vec2_phoneme"),AOr.forEach(t),Loo=r(uEe," \u2014 "),yR=n(uEe,"A",{href:!0});var yOr=s(yR);xoo=r(yOr,"Wav2Vec2PhonemeCTCTokenizer"),yOr.forEach(t),koo=r(uEe," (Wav2Vec2Phoneme model)"),uEe.forEach(t),Soo=i(w),Is=n(w,"LI",{});var g9=s(Is);Gee=n(g9,"STRONG",{});var LOr=s(Gee);Roo=r(LOr,"xglm"),LOr.forEach(t),Boo=r(g9," \u2014 "),LR=n(g9,"A",{href:!0});var xOr=s(LR);Poo=r(xOr,"XGLMTokenizer"),xOr.forEach(t),$oo=r(g9," or "),xR=n(g9,"A",{href:!0});var kOr=s(xR);Ioo=r(kOr,"XGLMTokenizerFast"),kOr.forEach(t),qoo=r(g9," (XGLM model)"),g9.forEach(t),Noo=i(w),hh=n(w,"LI",{});var bEe=s(hh);Oee=n(bEe,"STRONG",{});var SOr=s(Oee);joo=r(SOr,"xlm"),SOr.forEach(t),Doo=r(bEe," \u2014 "),kR=n(bEe,"A",{href:!0});var ROr=s(kR);Goo=r(ROr,"XLMTokenizer"),ROr.forEach(t),Ooo=r(bEe," (XLM model)"),bEe.forEach(t),Voo=i(w),ph=n(w,"LI",{});var FEe=s(ph);Vee=n(FEe,"STRONG",{});var BOr=s(Vee);Xoo=r(BOr,"xlm-prophetnet"),BOr.forEach(t),zoo=r(FEe," \u2014 "),SR=n(FEe,"A",{href:!0});var POr=s(SR);Qoo=r(POr,"XLMProphetNetTokenizer"),POr.forEach(t),Woo=r(FEe," (XLMProphetNet model)"),FEe.forEach(t),Hoo=i(w),qs=n(w,"LI",{});var h9=s(qs);Xee=n(h9,"STRONG",{});var $Or=s(Xee);Uoo=r($Or,"xlm-roberta"),$Or.forEach(t),Joo=r(h9," \u2014 "),RR=n(h9,"A",{href:!0});var IOr=s(RR);Yoo=r(IOr,"XLMRobertaTokenizer"),IOr.forEach(t),Koo=r(h9," or "),BR=n(h9,"A",{href:!0});var qOr=s(BR);Zoo=r(qOr,"XLMRobertaTokenizerFast"),qOr.forEach(t),ero=r(h9," (XLM-RoBERTa model)"),h9.forEach(t),oro=i(w),Ns=n(w,"LI",{});var p9=s(Ns);zee=n(p9,"STRONG",{});var NOr=s(zee);rro=r(NOr,"xlnet"),NOr.forEach(t),tro=r(p9," \u2014 "),PR=n(p9,"A",{href:!0});var jOr=s(PR);aro=r(jOr,"XLNetTokenizer"),jOr.forEach(t),nro=r(p9," or "),$R=n(p9,"A",{href:!0});var DOr=s($R);sro=r(DOr,"XLNetTokenizerFast"),DOr.forEach(t),lro=r(p9," (XLNet model)"),p9.forEach(t),w.forEach(t),iro=i(ha),Qee=n(ha,"P",{});var GOr=s(Qee);dro=r(GOr,"Examples:"),GOr.forEach(t),cro=i(ha),m(zC.$$.fragment,ha),ha.forEach(t),fro=i(Vs),_h=n(Vs,"DIV",{class:!0});var XPe=s(_h);m(QC.$$.fragment,XPe),mro=i(XPe),Wee=n(XPe,"P",{});var OOr=s(Wee);gro=r(OOr,"Register a new tokenizer in this mapping."),OOr.forEach(t),XPe.forEach(t),Vs.forEach(t),DRe=i(c),Wi=n(c,"H2",{class:!0});var zPe=s(Wi);uh=n(zPe,"A",{id:!0,class:!0,href:!0});var VOr=s(uh);Hee=n(VOr,"SPAN",{});var XOr=s(Hee);m(WC.$$.fragment,XOr),XOr.forEach(t),VOr.forEach(t),hro=i(zPe),Uee=n(zPe,"SPAN",{});var zOr=s(Uee);pro=r(zOr,"AutoFeatureExtractor"),zOr.forEach(t),zPe.forEach(t),GRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(HC.$$.fragment,Xs),_ro=i(Xs),UC=n(Xs,"P",{});var QPe=s(UC);uro=r(QPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),IR=n(QPe,"A",{href:!0});var QOr=s(IR);bro=r(QOr,"AutoFeatureExtractor.from_pretrained()"),QOr.forEach(t),Fro=r(QPe," class method."),QPe.forEach(t),vro=i(Xs),JC=n(Xs,"P",{});var WPe=s(JC);Tro=r(WPe,"This class cannot be instantiated directly using "),Jee=n(WPe,"CODE",{});var WOr=s(Jee);Mro=r(WOr,"__init__()"),WOr.forEach(t),Ero=r(WPe," (throws an error)."),WPe.forEach(t),Cro=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(YC.$$.fragment,Nt),wro=i(Nt),Yee=n(Nt,"P",{});var HOr=s(Yee);Aro=r(HOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),HOr.forEach(t),yro=i(Nt),Va=n(Nt,"P",{});var k3=s(Va);Lro=r(k3,"The feature extractor class to instantiate is selected based on the "),Kee=n(k3,"CODE",{});var UOr=s(Kee);xro=r(UOr,"model_type"),UOr.forEach(t),kro=r(k3,` property of the config object
(either passed as an argument or loaded from `),Zee=n(k3,"CODE",{});var JOr=s(Zee);Sro=r(JOr,"pretrained_model_name_or_path"),JOr.forEach(t),Rro=r(k3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),eoe=n(k3,"CODE",{});var YOr=s(eoe);Bro=r(YOr,"pretrained_model_name_or_path"),YOr.forEach(t),Pro=r(k3,":"),k3.forEach(t),$ro=i(Nt),J=n(Nt,"UL",{});var oe=s(J);bh=n(oe,"LI",{});var vEe=s(bh);ooe=n(vEe,"STRONG",{});var KOr=s(ooe);Iro=r(KOr,"beit"),KOr.forEach(t),qro=r(vEe," \u2014 "),qR=n(vEe,"A",{href:!0});var ZOr=s(qR);Nro=r(ZOr,"BeitFeatureExtractor"),ZOr.forEach(t),jro=r(vEe," (BEiT model)"),vEe.forEach(t),Dro=i(oe),Fh=n(oe,"LI",{});var TEe=s(Fh);roe=n(TEe,"STRONG",{});var eVr=s(roe);Gro=r(eVr,"clip"),eVr.forEach(t),Oro=r(TEe," \u2014 "),NR=n(TEe,"A",{href:!0});var oVr=s(NR);Vro=r(oVr,"CLIPFeatureExtractor"),oVr.forEach(t),Xro=r(TEe," (CLIP model)"),TEe.forEach(t),zro=i(oe),vh=n(oe,"LI",{});var MEe=s(vh);toe=n(MEe,"STRONG",{});var rVr=s(toe);Qro=r(rVr,"convnext"),rVr.forEach(t),Wro=r(MEe," \u2014 "),jR=n(MEe,"A",{href:!0});var tVr=s(jR);Hro=r(tVr,"ConvNextFeatureExtractor"),tVr.forEach(t),Uro=r(MEe," (ConvNext model)"),MEe.forEach(t),Jro=i(oe),Th=n(oe,"LI",{});var EEe=s(Th);aoe=n(EEe,"STRONG",{});var aVr=s(aoe);Yro=r(aVr,"deit"),aVr.forEach(t),Kro=r(EEe," \u2014 "),DR=n(EEe,"A",{href:!0});var nVr=s(DR);Zro=r(nVr,"DeiTFeatureExtractor"),nVr.forEach(t),eto=r(EEe," (DeiT model)"),EEe.forEach(t),oto=i(oe),Mh=n(oe,"LI",{});var CEe=s(Mh);noe=n(CEe,"STRONG",{});var sVr=s(noe);rto=r(sVr,"detr"),sVr.forEach(t),tto=r(CEe," \u2014 "),GR=n(CEe,"A",{href:!0});var lVr=s(GR);ato=r(lVr,"DetrFeatureExtractor"),lVr.forEach(t),nto=r(CEe," (DETR model)"),CEe.forEach(t),sto=i(oe),Eh=n(oe,"LI",{});var wEe=s(Eh);soe=n(wEe,"STRONG",{});var iVr=s(soe);lto=r(iVr,"flava"),iVr.forEach(t),ito=r(wEe," \u2014 "),OR=n(wEe,"A",{href:!0});var dVr=s(OR);dto=r(dVr,"FLAVAFeatureExtractor"),dVr.forEach(t),cto=r(wEe," (FLAVA model)"),wEe.forEach(t),fto=i(oe),Ch=n(oe,"LI",{});var AEe=s(Ch);loe=n(AEe,"STRONG",{});var cVr=s(loe);mto=r(cVr,"hubert"),cVr.forEach(t),gto=r(AEe," \u2014 "),VR=n(AEe,"A",{href:!0});var fVr=s(VR);hto=r(fVr,"Wav2Vec2FeatureExtractor"),fVr.forEach(t),pto=r(AEe," (Hubert model)"),AEe.forEach(t),_to=i(oe),wh=n(oe,"LI",{});var yEe=s(wh);ioe=n(yEe,"STRONG",{});var mVr=s(ioe);uto=r(mVr,"layoutlmv2"),mVr.forEach(t),bto=r(yEe," \u2014 "),XR=n(yEe,"A",{href:!0});var gVr=s(XR);Fto=r(gVr,"LayoutLMv2FeatureExtractor"),gVr.forEach(t),vto=r(yEe," (LayoutLMv2 model)"),yEe.forEach(t),Tto=i(oe),Ah=n(oe,"LI",{});var LEe=s(Ah);doe=n(LEe,"STRONG",{});var hVr=s(doe);Mto=r(hVr,"maskformer"),hVr.forEach(t),Eto=r(LEe," \u2014 "),zR=n(LEe,"A",{href:!0});var pVr=s(zR);Cto=r(pVr,"MaskFormerFeatureExtractor"),pVr.forEach(t),wto=r(LEe," (MaskFormer model)"),LEe.forEach(t),Ato=i(oe),yh=n(oe,"LI",{});var xEe=s(yh);coe=n(xEe,"STRONG",{});var _Vr=s(coe);yto=r(_Vr,"perceiver"),_Vr.forEach(t),Lto=r(xEe," \u2014 "),QR=n(xEe,"A",{href:!0});var uVr=s(QR);xto=r(uVr,"PerceiverFeatureExtractor"),uVr.forEach(t),kto=r(xEe," (Perceiver model)"),xEe.forEach(t),Sto=i(oe),Lh=n(oe,"LI",{});var kEe=s(Lh);foe=n(kEe,"STRONG",{});var bVr=s(foe);Rto=r(bVr,"poolformer"),bVr.forEach(t),Bto=r(kEe," \u2014 "),WR=n(kEe,"A",{href:!0});var FVr=s(WR);Pto=r(FVr,"PoolFormerFeatureExtractor"),FVr.forEach(t),$to=r(kEe," (PoolFormer model)"),kEe.forEach(t),Ito=i(oe),xh=n(oe,"LI",{});var SEe=s(xh);moe=n(SEe,"STRONG",{});var vVr=s(moe);qto=r(vVr,"regnet"),vVr.forEach(t),Nto=r(SEe," \u2014 "),HR=n(SEe,"A",{href:!0});var TVr=s(HR);jto=r(TVr,"ConvNextFeatureExtractor"),TVr.forEach(t),Dto=r(SEe," (RegNet model)"),SEe.forEach(t),Gto=i(oe),kh=n(oe,"LI",{});var REe=s(kh);goe=n(REe,"STRONG",{});var MVr=s(goe);Oto=r(MVr,"resnet"),MVr.forEach(t),Vto=r(REe," \u2014 "),UR=n(REe,"A",{href:!0});var EVr=s(UR);Xto=r(EVr,"ConvNextFeatureExtractor"),EVr.forEach(t),zto=r(REe," (ResNet model)"),REe.forEach(t),Qto=i(oe),Sh=n(oe,"LI",{});var BEe=s(Sh);hoe=n(BEe,"STRONG",{});var CVr=s(hoe);Wto=r(CVr,"segformer"),CVr.forEach(t),Hto=r(BEe," \u2014 "),JR=n(BEe,"A",{href:!0});var wVr=s(JR);Uto=r(wVr,"SegformerFeatureExtractor"),wVr.forEach(t),Jto=r(BEe," (SegFormer model)"),BEe.forEach(t),Yto=i(oe),Rh=n(oe,"LI",{});var PEe=s(Rh);poe=n(PEe,"STRONG",{});var AVr=s(poe);Kto=r(AVr,"speech_to_text"),AVr.forEach(t),Zto=r(PEe," \u2014 "),YR=n(PEe,"A",{href:!0});var yVr=s(YR);eao=r(yVr,"Speech2TextFeatureExtractor"),yVr.forEach(t),oao=r(PEe," (Speech2Text model)"),PEe.forEach(t),rao=i(oe),Bh=n(oe,"LI",{});var $Ee=s(Bh);_oe=n($Ee,"STRONG",{});var LVr=s(_oe);tao=r(LVr,"swin"),LVr.forEach(t),aao=r($Ee," \u2014 "),KR=n($Ee,"A",{href:!0});var xVr=s(KR);nao=r(xVr,"ViTFeatureExtractor"),xVr.forEach(t),sao=r($Ee," (Swin model)"),$Ee.forEach(t),lao=i(oe),Ph=n(oe,"LI",{});var IEe=s(Ph);uoe=n(IEe,"STRONG",{});var kVr=s(uoe);iao=r(kVr,"van"),kVr.forEach(t),dao=r(IEe," \u2014 "),ZR=n(IEe,"A",{href:!0});var SVr=s(ZR);cao=r(SVr,"ConvNextFeatureExtractor"),SVr.forEach(t),fao=r(IEe," (VAN model)"),IEe.forEach(t),mao=i(oe),$h=n(oe,"LI",{});var qEe=s($h);boe=n(qEe,"STRONG",{});var RVr=s(boe);gao=r(RVr,"vit"),RVr.forEach(t),hao=r(qEe," \u2014 "),eB=n(qEe,"A",{href:!0});var BVr=s(eB);pao=r(BVr,"ViTFeatureExtractor"),BVr.forEach(t),_ao=r(qEe," (ViT model)"),qEe.forEach(t),uao=i(oe),Ih=n(oe,"LI",{});var NEe=s(Ih);Foe=n(NEe,"STRONG",{});var PVr=s(Foe);bao=r(PVr,"vit_mae"),PVr.forEach(t),Fao=r(NEe," \u2014 "),oB=n(NEe,"A",{href:!0});var $Vr=s(oB);vao=r($Vr,"ViTFeatureExtractor"),$Vr.forEach(t),Tao=r(NEe," (ViTMAE model)"),NEe.forEach(t),Mao=i(oe),qh=n(oe,"LI",{});var jEe=s(qh);voe=n(jEe,"STRONG",{});var IVr=s(voe);Eao=r(IVr,"wav2vec2"),IVr.forEach(t),Cao=r(jEe," \u2014 "),rB=n(jEe,"A",{href:!0});var qVr=s(rB);wao=r(qVr,"Wav2Vec2FeatureExtractor"),qVr.forEach(t),Aao=r(jEe," (Wav2Vec2 model)"),jEe.forEach(t),oe.forEach(t),yao=i(Nt),m(Nh.$$.fragment,Nt),Lao=i(Nt),Toe=n(Nt,"P",{});var NVr=s(Toe);xao=r(NVr,"Examples:"),NVr.forEach(t),kao=i(Nt),m(KC.$$.fragment,Nt),Nt.forEach(t),Sao=i(Xs),jh=n(Xs,"DIV",{class:!0});var HPe=s(jh);m(ZC.$$.fragment,HPe),Rao=i(HPe),Moe=n(HPe,"P",{});var jVr=s(Moe);Bao=r(jVr,"Register a new feature extractor for this class."),jVr.forEach(t),HPe.forEach(t),Xs.forEach(t),ORe=i(c),Hi=n(c,"H2",{class:!0});var UPe=s(Hi);Dh=n(UPe,"A",{id:!0,class:!0,href:!0});var DVr=s(Dh);Eoe=n(DVr,"SPAN",{});var GVr=s(Eoe);m(ew.$$.fragment,GVr),GVr.forEach(t),DVr.forEach(t),Pao=i(UPe),Coe=n(UPe,"SPAN",{});var OVr=s(Coe);$ao=r(OVr,"AutoProcessor"),OVr.forEach(t),UPe.forEach(t),VRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(ow.$$.fragment,zs),Iao=i(zs),rw=n(zs,"P",{});var JPe=s(rw);qao=r(JPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tB=n(JPe,"A",{href:!0});var VVr=s(tB);Nao=r(VVr,"AutoProcessor.from_pretrained()"),VVr.forEach(t),jao=r(JPe," class method."),JPe.forEach(t),Dao=i(zs),tw=n(zs,"P",{});var YPe=s(tw);Gao=r(YPe,"This class cannot be instantiated directly using "),woe=n(YPe,"CODE",{});var XVr=s(woe);Oao=r(XVr,"__init__()"),XVr.forEach(t),Vao=r(YPe," (throws an error)."),YPe.forEach(t),Xao=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(aw.$$.fragment,jt),zao=i(jt),Aoe=n(jt,"P",{});var zVr=s(Aoe);Qao=r(zVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zVr.forEach(t),Wao=i(jt),Ui=n(jt,"P",{});var bU=s(Ui);Hao=r(bU,"The processor class to instantiate is selected based on the "),yoe=n(bU,"CODE",{});var QVr=s(yoe);Uao=r(QVr,"model_type"),QVr.forEach(t),Jao=r(bU,` property of the config object (either
passed as an argument or loaded from `),Loe=n(bU,"CODE",{});var WVr=s(Loe);Yao=r(WVr,"pretrained_model_name_or_path"),WVr.forEach(t),Kao=r(bU," if possible):"),bU.forEach(t),Zao=i(jt),Ee=n(jt,"UL",{});var so=s(Ee);Gh=n(so,"LI",{});var DEe=s(Gh);xoe=n(DEe,"STRONG",{});var HVr=s(xoe);eno=r(HVr,"clip"),HVr.forEach(t),ono=r(DEe," \u2014 "),aB=n(DEe,"A",{href:!0});var UVr=s(aB);rno=r(UVr,"CLIPProcessor"),UVr.forEach(t),tno=r(DEe," (CLIP model)"),DEe.forEach(t),ano=i(so),Oh=n(so,"LI",{});var GEe=s(Oh);koe=n(GEe,"STRONG",{});var JVr=s(koe);nno=r(JVr,"flava"),JVr.forEach(t),sno=r(GEe," \u2014 "),nB=n(GEe,"A",{href:!0});var YVr=s(nB);lno=r(YVr,"FLAVAProcessor"),YVr.forEach(t),ino=r(GEe," (FLAVA model)"),GEe.forEach(t),dno=i(so),Vh=n(so,"LI",{});var OEe=s(Vh);Soe=n(OEe,"STRONG",{});var KVr=s(Soe);cno=r(KVr,"layoutlmv2"),KVr.forEach(t),fno=r(OEe," \u2014 "),sB=n(OEe,"A",{href:!0});var ZVr=s(sB);mno=r(ZVr,"LayoutLMv2Processor"),ZVr.forEach(t),gno=r(OEe," (LayoutLMv2 model)"),OEe.forEach(t),hno=i(so),Xh=n(so,"LI",{});var VEe=s(Xh);Roe=n(VEe,"STRONG",{});var eXr=s(Roe);pno=r(eXr,"layoutxlm"),eXr.forEach(t),_no=r(VEe," \u2014 "),lB=n(VEe,"A",{href:!0});var oXr=s(lB);uno=r(oXr,"LayoutXLMProcessor"),oXr.forEach(t),bno=r(VEe," (LayoutXLM model)"),VEe.forEach(t),Fno=i(so),zh=n(so,"LI",{});var XEe=s(zh);Boe=n(XEe,"STRONG",{});var rXr=s(Boe);vno=r(rXr,"speech_to_text"),rXr.forEach(t),Tno=r(XEe," \u2014 "),iB=n(XEe,"A",{href:!0});var tXr=s(iB);Mno=r(tXr,"Speech2TextProcessor"),tXr.forEach(t),Eno=r(XEe," (Speech2Text model)"),XEe.forEach(t),Cno=i(so),Qh=n(so,"LI",{});var zEe=s(Qh);Poe=n(zEe,"STRONG",{});var aXr=s(Poe);wno=r(aXr,"speech_to_text_2"),aXr.forEach(t),Ano=r(zEe," \u2014 "),dB=n(zEe,"A",{href:!0});var nXr=s(dB);yno=r(nXr,"Speech2Text2Processor"),nXr.forEach(t),Lno=r(zEe," (Speech2Text2 model)"),zEe.forEach(t),xno=i(so),Wh=n(so,"LI",{});var QEe=s(Wh);$oe=n(QEe,"STRONG",{});var sXr=s($oe);kno=r(sXr,"trocr"),sXr.forEach(t),Sno=r(QEe," \u2014 "),cB=n(QEe,"A",{href:!0});var lXr=s(cB);Rno=r(lXr,"TrOCRProcessor"),lXr.forEach(t),Bno=r(QEe," (TrOCR model)"),QEe.forEach(t),Pno=i(so),Hh=n(so,"LI",{});var WEe=s(Hh);Ioe=n(WEe,"STRONG",{});var iXr=s(Ioe);$no=r(iXr,"vision-text-dual-encoder"),iXr.forEach(t),Ino=r(WEe," \u2014 "),fB=n(WEe,"A",{href:!0});var dXr=s(fB);qno=r(dXr,"VisionTextDualEncoderProcessor"),dXr.forEach(t),Nno=r(WEe," (VisionTextDualEncoder model)"),WEe.forEach(t),jno=i(so),Uh=n(so,"LI",{});var HEe=s(Uh);qoe=n(HEe,"STRONG",{});var cXr=s(qoe);Dno=r(cXr,"wav2vec2"),cXr.forEach(t),Gno=r(HEe," \u2014 "),mB=n(HEe,"A",{href:!0});var fXr=s(mB);Ono=r(fXr,"Wav2Vec2Processor"),fXr.forEach(t),Vno=r(HEe," (Wav2Vec2 model)"),HEe.forEach(t),so.forEach(t),Xno=i(jt),m(Jh.$$.fragment,jt),zno=i(jt),Noe=n(jt,"P",{});var mXr=s(Noe);Qno=r(mXr,"Examples:"),mXr.forEach(t),Wno=i(jt),m(nw.$$.fragment,jt),jt.forEach(t),Hno=i(zs),Yh=n(zs,"DIV",{class:!0});var KPe=s(Yh);m(sw.$$.fragment,KPe),Uno=i(KPe),joe=n(KPe,"P",{});var gXr=s(joe);Jno=r(gXr,"Register a new processor for this class."),gXr.forEach(t),KPe.forEach(t),zs.forEach(t),XRe=i(c),Ji=n(c,"H2",{class:!0});var ZPe=s(Ji);Kh=n(ZPe,"A",{id:!0,class:!0,href:!0});var hXr=s(Kh);Doe=n(hXr,"SPAN",{});var pXr=s(Doe);m(lw.$$.fragment,pXr),pXr.forEach(t),hXr.forEach(t),Yno=i(ZPe),Goe=n(ZPe,"SPAN",{});var _Xr=s(Goe);Kno=r(_Xr,"AutoModel"),_Xr.forEach(t),ZPe.forEach(t),zRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(iw.$$.fragment,Qs),Zno=i(Qs),Yi=n(Qs,"P",{});var FU=s(Yi);eso=r(FU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gB=n(FU,"A",{href:!0});var uXr=s(gB);oso=r(uXr,"from_pretrained()"),uXr.forEach(t),rso=r(FU," class method or the "),hB=n(FU,"A",{href:!0});var bXr=s(hB);tso=r(bXr,"from_config()"),bXr.forEach(t),aso=r(FU,` class
method.`),FU.forEach(t),nso=i(Qs),dw=n(Qs,"P",{});var e$e=s(dw);sso=r(e$e,"This class cannot be instantiated directly using "),Ooe=n(e$e,"CODE",{});var FXr=s(Ooe);lso=r(FXr,"__init__()"),FXr.forEach(t),iso=r(e$e," (throws an error)."),e$e.forEach(t),dso=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(cw.$$.fragment,Ws),cso=i(Ws),Voe=n(Ws,"P",{});var vXr=s(Voe);fso=r(vXr,"Instantiates one of the base model classes of the library from a configuration."),vXr.forEach(t),mso=i(Ws),Ki=n(Ws,"P",{});var vU=s(Ki);gso=r(vU,`Note:
Loading a model from its configuration file does `),Xoe=n(vU,"STRONG",{});var TXr=s(Xoe);hso=r(TXr,"not"),TXr.forEach(t),pso=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pB=n(vU,"A",{href:!0});var MXr=s(pB);_so=r(MXr,"from_pretrained()"),MXr.forEach(t),uso=r(vU," to load the model weights."),vU.forEach(t),bso=i(Ws),zoe=n(Ws,"P",{});var EXr=s(zoe);Fso=r(EXr,"Examples:"),EXr.forEach(t),vso=i(Ws),m(fw.$$.fragment,Ws),Ws.forEach(t),Tso=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(mw.$$.fragment,Dt),Mso=i(Dt),Qoe=n(Dt,"P",{});var CXr=s(Qoe);Eso=r(CXr,"Instantiate one of the base model classes of the library from a pretrained model."),CXr.forEach(t),Cso=i(Dt),Xa=n(Dt,"P",{});var S3=s(Xa);wso=r(S3,"The model class to instantiate is selected based on the "),Woe=n(S3,"CODE",{});var wXr=s(Woe);Aso=r(wXr,"model_type"),wXr.forEach(t),yso=r(S3,` property of the config object (either
passed as an argument or loaded from `),Hoe=n(S3,"CODE",{});var AXr=s(Hoe);Lso=r(AXr,"pretrained_model_name_or_path"),AXr.forEach(t),xso=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=n(S3,"CODE",{});var yXr=s(Uoe);kso=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),Sso=r(S3,":"),S3.forEach(t),Rso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Zh=n(M,"LI",{});var UEe=s(Zh);Joe=n(UEe,"STRONG",{});var LXr=s(Joe);Bso=r(LXr,"albert"),LXr.forEach(t),Pso=r(UEe," \u2014 "),_B=n(UEe,"A",{href:!0});var xXr=s(_B);$so=r(xXr,"AlbertModel"),xXr.forEach(t),Iso=r(UEe," (ALBERT model)"),UEe.forEach(t),qso=i(M),ep=n(M,"LI",{});var JEe=s(ep);Yoe=n(JEe,"STRONG",{});var kXr=s(Yoe);Nso=r(kXr,"bart"),kXr.forEach(t),jso=r(JEe," \u2014 "),uB=n(JEe,"A",{href:!0});var SXr=s(uB);Dso=r(SXr,"BartModel"),SXr.forEach(t),Gso=r(JEe," (BART model)"),JEe.forEach(t),Oso=i(M),op=n(M,"LI",{});var YEe=s(op);Koe=n(YEe,"STRONG",{});var RXr=s(Koe);Vso=r(RXr,"beit"),RXr.forEach(t),Xso=r(YEe," \u2014 "),bB=n(YEe,"A",{href:!0});var BXr=s(bB);zso=r(BXr,"BeitModel"),BXr.forEach(t),Qso=r(YEe," (BEiT model)"),YEe.forEach(t),Wso=i(M),rp=n(M,"LI",{});var KEe=s(rp);Zoe=n(KEe,"STRONG",{});var PXr=s(Zoe);Hso=r(PXr,"bert"),PXr.forEach(t),Uso=r(KEe," \u2014 "),FB=n(KEe,"A",{href:!0});var $Xr=s(FB);Jso=r($Xr,"BertModel"),$Xr.forEach(t),Yso=r(KEe," (BERT model)"),KEe.forEach(t),Kso=i(M),tp=n(M,"LI",{});var ZEe=s(tp);ere=n(ZEe,"STRONG",{});var IXr=s(ere);Zso=r(IXr,"bert-generation"),IXr.forEach(t),elo=r(ZEe," \u2014 "),vB=n(ZEe,"A",{href:!0});var qXr=s(vB);olo=r(qXr,"BertGenerationEncoder"),qXr.forEach(t),rlo=r(ZEe," (Bert Generation model)"),ZEe.forEach(t),tlo=i(M),ap=n(M,"LI",{});var e3e=s(ap);ore=n(e3e,"STRONG",{});var NXr=s(ore);alo=r(NXr,"big_bird"),NXr.forEach(t),nlo=r(e3e," \u2014 "),TB=n(e3e,"A",{href:!0});var jXr=s(TB);slo=r(jXr,"BigBirdModel"),jXr.forEach(t),llo=r(e3e," (BigBird model)"),e3e.forEach(t),ilo=i(M),np=n(M,"LI",{});var o3e=s(np);rre=n(o3e,"STRONG",{});var DXr=s(rre);dlo=r(DXr,"bigbird_pegasus"),DXr.forEach(t),clo=r(o3e," \u2014 "),MB=n(o3e,"A",{href:!0});var GXr=s(MB);flo=r(GXr,"BigBirdPegasusModel"),GXr.forEach(t),mlo=r(o3e," (BigBirdPegasus model)"),o3e.forEach(t),glo=i(M),sp=n(M,"LI",{});var r3e=s(sp);tre=n(r3e,"STRONG",{});var OXr=s(tre);hlo=r(OXr,"blenderbot"),OXr.forEach(t),plo=r(r3e," \u2014 "),EB=n(r3e,"A",{href:!0});var VXr=s(EB);_lo=r(VXr,"BlenderbotModel"),VXr.forEach(t),ulo=r(r3e," (Blenderbot model)"),r3e.forEach(t),blo=i(M),lp=n(M,"LI",{});var t3e=s(lp);are=n(t3e,"STRONG",{});var XXr=s(are);Flo=r(XXr,"blenderbot-small"),XXr.forEach(t),vlo=r(t3e," \u2014 "),CB=n(t3e,"A",{href:!0});var zXr=s(CB);Tlo=r(zXr,"BlenderbotSmallModel"),zXr.forEach(t),Mlo=r(t3e," (BlenderbotSmall model)"),t3e.forEach(t),Elo=i(M),ip=n(M,"LI",{});var a3e=s(ip);nre=n(a3e,"STRONG",{});var QXr=s(nre);Clo=r(QXr,"camembert"),QXr.forEach(t),wlo=r(a3e," \u2014 "),wB=n(a3e,"A",{href:!0});var WXr=s(wB);Alo=r(WXr,"CamembertModel"),WXr.forEach(t),ylo=r(a3e," (CamemBERT model)"),a3e.forEach(t),Llo=i(M),dp=n(M,"LI",{});var n3e=s(dp);sre=n(n3e,"STRONG",{});var HXr=s(sre);xlo=r(HXr,"canine"),HXr.forEach(t),klo=r(n3e," \u2014 "),AB=n(n3e,"A",{href:!0});var UXr=s(AB);Slo=r(UXr,"CanineModel"),UXr.forEach(t),Rlo=r(n3e," (Canine model)"),n3e.forEach(t),Blo=i(M),cp=n(M,"LI",{});var s3e=s(cp);lre=n(s3e,"STRONG",{});var JXr=s(lre);Plo=r(JXr,"clip"),JXr.forEach(t),$lo=r(s3e," \u2014 "),yB=n(s3e,"A",{href:!0});var YXr=s(yB);Ilo=r(YXr,"CLIPModel"),YXr.forEach(t),qlo=r(s3e," (CLIP model)"),s3e.forEach(t),Nlo=i(M),fp=n(M,"LI",{});var l3e=s(fp);ire=n(l3e,"STRONG",{});var KXr=s(ire);jlo=r(KXr,"convbert"),KXr.forEach(t),Dlo=r(l3e," \u2014 "),LB=n(l3e,"A",{href:!0});var ZXr=s(LB);Glo=r(ZXr,"ConvBertModel"),ZXr.forEach(t),Olo=r(l3e," (ConvBERT model)"),l3e.forEach(t),Vlo=i(M),mp=n(M,"LI",{});var i3e=s(mp);dre=n(i3e,"STRONG",{});var ezr=s(dre);Xlo=r(ezr,"convnext"),ezr.forEach(t),zlo=r(i3e," \u2014 "),xB=n(i3e,"A",{href:!0});var ozr=s(xB);Qlo=r(ozr,"ConvNextModel"),ozr.forEach(t),Wlo=r(i3e," (ConvNext model)"),i3e.forEach(t),Hlo=i(M),gp=n(M,"LI",{});var d3e=s(gp);cre=n(d3e,"STRONG",{});var rzr=s(cre);Ulo=r(rzr,"ctrl"),rzr.forEach(t),Jlo=r(d3e," \u2014 "),kB=n(d3e,"A",{href:!0});var tzr=s(kB);Ylo=r(tzr,"CTRLModel"),tzr.forEach(t),Klo=r(d3e," (CTRL model)"),d3e.forEach(t),Zlo=i(M),hp=n(M,"LI",{});var c3e=s(hp);fre=n(c3e,"STRONG",{});var azr=s(fre);eio=r(azr,"data2vec-audio"),azr.forEach(t),oio=r(c3e," \u2014 "),SB=n(c3e,"A",{href:!0});var nzr=s(SB);rio=r(nzr,"Data2VecAudioModel"),nzr.forEach(t),tio=r(c3e," (Data2VecAudio model)"),c3e.forEach(t),aio=i(M),pp=n(M,"LI",{});var f3e=s(pp);mre=n(f3e,"STRONG",{});var szr=s(mre);nio=r(szr,"data2vec-text"),szr.forEach(t),sio=r(f3e," \u2014 "),RB=n(f3e,"A",{href:!0});var lzr=s(RB);lio=r(lzr,"Data2VecTextModel"),lzr.forEach(t),iio=r(f3e," (Data2VecText model)"),f3e.forEach(t),dio=i(M),_p=n(M,"LI",{});var m3e=s(_p);gre=n(m3e,"STRONG",{});var izr=s(gre);cio=r(izr,"deberta"),izr.forEach(t),fio=r(m3e," \u2014 "),BB=n(m3e,"A",{href:!0});var dzr=s(BB);mio=r(dzr,"DebertaModel"),dzr.forEach(t),gio=r(m3e," (DeBERTa model)"),m3e.forEach(t),hio=i(M),up=n(M,"LI",{});var g3e=s(up);hre=n(g3e,"STRONG",{});var czr=s(hre);pio=r(czr,"deberta-v2"),czr.forEach(t),_io=r(g3e," \u2014 "),PB=n(g3e,"A",{href:!0});var fzr=s(PB);uio=r(fzr,"DebertaV2Model"),fzr.forEach(t),bio=r(g3e," (DeBERTa-v2 model)"),g3e.forEach(t),Fio=i(M),bp=n(M,"LI",{});var h3e=s(bp);pre=n(h3e,"STRONG",{});var mzr=s(pre);vio=r(mzr,"decision_transformer"),mzr.forEach(t),Tio=r(h3e," \u2014 "),$B=n(h3e,"A",{href:!0});var gzr=s($B);Mio=r(gzr,"DecisionTransformerModel"),gzr.forEach(t),Eio=r(h3e," (Decision Transformer model)"),h3e.forEach(t),Cio=i(M),Fp=n(M,"LI",{});var p3e=s(Fp);_re=n(p3e,"STRONG",{});var hzr=s(_re);wio=r(hzr,"deit"),hzr.forEach(t),Aio=r(p3e," \u2014 "),IB=n(p3e,"A",{href:!0});var pzr=s(IB);yio=r(pzr,"DeiTModel"),pzr.forEach(t),Lio=r(p3e," (DeiT model)"),p3e.forEach(t),xio=i(M),vp=n(M,"LI",{});var _3e=s(vp);ure=n(_3e,"STRONG",{});var _zr=s(ure);kio=r(_zr,"detr"),_zr.forEach(t),Sio=r(_3e," \u2014 "),qB=n(_3e,"A",{href:!0});var uzr=s(qB);Rio=r(uzr,"DetrModel"),uzr.forEach(t),Bio=r(_3e," (DETR model)"),_3e.forEach(t),Pio=i(M),Tp=n(M,"LI",{});var u3e=s(Tp);bre=n(u3e,"STRONG",{});var bzr=s(bre);$io=r(bzr,"distilbert"),bzr.forEach(t),Iio=r(u3e," \u2014 "),NB=n(u3e,"A",{href:!0});var Fzr=s(NB);qio=r(Fzr,"DistilBertModel"),Fzr.forEach(t),Nio=r(u3e," (DistilBERT model)"),u3e.forEach(t),jio=i(M),Mp=n(M,"LI",{});var b3e=s(Mp);Fre=n(b3e,"STRONG",{});var vzr=s(Fre);Dio=r(vzr,"dpr"),vzr.forEach(t),Gio=r(b3e," \u2014 "),jB=n(b3e,"A",{href:!0});var Tzr=s(jB);Oio=r(Tzr,"DPRQuestionEncoder"),Tzr.forEach(t),Vio=r(b3e," (DPR model)"),b3e.forEach(t),Xio=i(M),Ep=n(M,"LI",{});var F3e=s(Ep);vre=n(F3e,"STRONG",{});var Mzr=s(vre);zio=r(Mzr,"dpt"),Mzr.forEach(t),Qio=r(F3e," \u2014 "),DB=n(F3e,"A",{href:!0});var Ezr=s(DB);Wio=r(Ezr,"DPTModel"),Ezr.forEach(t),Hio=r(F3e," (DPT model)"),F3e.forEach(t),Uio=i(M),Cp=n(M,"LI",{});var v3e=s(Cp);Tre=n(v3e,"STRONG",{});var Czr=s(Tre);Jio=r(Czr,"electra"),Czr.forEach(t),Yio=r(v3e," \u2014 "),GB=n(v3e,"A",{href:!0});var wzr=s(GB);Kio=r(wzr,"ElectraModel"),wzr.forEach(t),Zio=r(v3e," (ELECTRA model)"),v3e.forEach(t),edo=i(M),wp=n(M,"LI",{});var T3e=s(wp);Mre=n(T3e,"STRONG",{});var Azr=s(Mre);odo=r(Azr,"flaubert"),Azr.forEach(t),rdo=r(T3e," \u2014 "),OB=n(T3e,"A",{href:!0});var yzr=s(OB);tdo=r(yzr,"FlaubertModel"),yzr.forEach(t),ado=r(T3e," (FlauBERT model)"),T3e.forEach(t),ndo=i(M),Ap=n(M,"LI",{});var M3e=s(Ap);Ere=n(M3e,"STRONG",{});var Lzr=s(Ere);sdo=r(Lzr,"flava"),Lzr.forEach(t),ldo=r(M3e," \u2014 "),VB=n(M3e,"A",{href:!0});var xzr=s(VB);ido=r(xzr,"FLAVAModel"),xzr.forEach(t),ddo=r(M3e," (FLAVA model)"),M3e.forEach(t),cdo=i(M),yp=n(M,"LI",{});var E3e=s(yp);Cre=n(E3e,"STRONG",{});var kzr=s(Cre);fdo=r(kzr,"fnet"),kzr.forEach(t),mdo=r(E3e," \u2014 "),XB=n(E3e,"A",{href:!0});var Szr=s(XB);gdo=r(Szr,"FNetModel"),Szr.forEach(t),hdo=r(E3e," (FNet model)"),E3e.forEach(t),pdo=i(M),Lp=n(M,"LI",{});var C3e=s(Lp);wre=n(C3e,"STRONG",{});var Rzr=s(wre);_do=r(Rzr,"fsmt"),Rzr.forEach(t),udo=r(C3e," \u2014 "),zB=n(C3e,"A",{href:!0});var Bzr=s(zB);bdo=r(Bzr,"FSMTModel"),Bzr.forEach(t),Fdo=r(C3e," (FairSeq Machine-Translation model)"),C3e.forEach(t),vdo=i(M),js=n(M,"LI",{});var _9=s(js);Are=n(_9,"STRONG",{});var Pzr=s(Are);Tdo=r(Pzr,"funnel"),Pzr.forEach(t),Mdo=r(_9," \u2014 "),QB=n(_9,"A",{href:!0});var $zr=s(QB);Edo=r($zr,"FunnelModel"),$zr.forEach(t),Cdo=r(_9," or "),WB=n(_9,"A",{href:!0});var Izr=s(WB);wdo=r(Izr,"FunnelBaseModel"),Izr.forEach(t),Ado=r(_9," (Funnel Transformer model)"),_9.forEach(t),ydo=i(M),xp=n(M,"LI",{});var w3e=s(xp);yre=n(w3e,"STRONG",{});var qzr=s(yre);Ldo=r(qzr,"glpn"),qzr.forEach(t),xdo=r(w3e," \u2014 "),HB=n(w3e,"A",{href:!0});var Nzr=s(HB);kdo=r(Nzr,"GLPNModel"),Nzr.forEach(t),Sdo=r(w3e," (GLPN model)"),w3e.forEach(t),Rdo=i(M),kp=n(M,"LI",{});var A3e=s(kp);Lre=n(A3e,"STRONG",{});var jzr=s(Lre);Bdo=r(jzr,"gpt2"),jzr.forEach(t),Pdo=r(A3e," \u2014 "),UB=n(A3e,"A",{href:!0});var Dzr=s(UB);$do=r(Dzr,"GPT2Model"),Dzr.forEach(t),Ido=r(A3e," (OpenAI GPT-2 model)"),A3e.forEach(t),qdo=i(M),Sp=n(M,"LI",{});var y3e=s(Sp);xre=n(y3e,"STRONG",{});var Gzr=s(xre);Ndo=r(Gzr,"gpt_neo"),Gzr.forEach(t),jdo=r(y3e," \u2014 "),JB=n(y3e,"A",{href:!0});var Ozr=s(JB);Ddo=r(Ozr,"GPTNeoModel"),Ozr.forEach(t),Gdo=r(y3e," (GPT Neo model)"),y3e.forEach(t),Odo=i(M),Rp=n(M,"LI",{});var L3e=s(Rp);kre=n(L3e,"STRONG",{});var Vzr=s(kre);Vdo=r(Vzr,"gptj"),Vzr.forEach(t),Xdo=r(L3e," \u2014 "),YB=n(L3e,"A",{href:!0});var Xzr=s(YB);zdo=r(Xzr,"GPTJModel"),Xzr.forEach(t),Qdo=r(L3e," (GPT-J model)"),L3e.forEach(t),Wdo=i(M),Bp=n(M,"LI",{});var x3e=s(Bp);Sre=n(x3e,"STRONG",{});var zzr=s(Sre);Hdo=r(zzr,"hubert"),zzr.forEach(t),Udo=r(x3e," \u2014 "),KB=n(x3e,"A",{href:!0});var Qzr=s(KB);Jdo=r(Qzr,"HubertModel"),Qzr.forEach(t),Ydo=r(x3e," (Hubert model)"),x3e.forEach(t),Kdo=i(M),Pp=n(M,"LI",{});var k3e=s(Pp);Rre=n(k3e,"STRONG",{});var Wzr=s(Rre);Zdo=r(Wzr,"ibert"),Wzr.forEach(t),eco=r(k3e," \u2014 "),ZB=n(k3e,"A",{href:!0});var Hzr=s(ZB);oco=r(Hzr,"IBertModel"),Hzr.forEach(t),rco=r(k3e," (I-BERT model)"),k3e.forEach(t),tco=i(M),$p=n(M,"LI",{});var S3e=s($p);Bre=n(S3e,"STRONG",{});var Uzr=s(Bre);aco=r(Uzr,"imagegpt"),Uzr.forEach(t),nco=r(S3e," \u2014 "),eP=n(S3e,"A",{href:!0});var Jzr=s(eP);sco=r(Jzr,"ImageGPTModel"),Jzr.forEach(t),lco=r(S3e," (ImageGPT model)"),S3e.forEach(t),ico=i(M),Ip=n(M,"LI",{});var R3e=s(Ip);Pre=n(R3e,"STRONG",{});var Yzr=s(Pre);dco=r(Yzr,"layoutlm"),Yzr.forEach(t),cco=r(R3e," \u2014 "),oP=n(R3e,"A",{href:!0});var Kzr=s(oP);fco=r(Kzr,"LayoutLMModel"),Kzr.forEach(t),mco=r(R3e," (LayoutLM model)"),R3e.forEach(t),gco=i(M),qp=n(M,"LI",{});var B3e=s(qp);$re=n(B3e,"STRONG",{});var Zzr=s($re);hco=r(Zzr,"layoutlmv2"),Zzr.forEach(t),pco=r(B3e," \u2014 "),rP=n(B3e,"A",{href:!0});var eQr=s(rP);_co=r(eQr,"LayoutLMv2Model"),eQr.forEach(t),uco=r(B3e," (LayoutLMv2 model)"),B3e.forEach(t),bco=i(M),Np=n(M,"LI",{});var P3e=s(Np);Ire=n(P3e,"STRONG",{});var oQr=s(Ire);Fco=r(oQr,"led"),oQr.forEach(t),vco=r(P3e," \u2014 "),tP=n(P3e,"A",{href:!0});var rQr=s(tP);Tco=r(rQr,"LEDModel"),rQr.forEach(t),Mco=r(P3e," (LED model)"),P3e.forEach(t),Eco=i(M),jp=n(M,"LI",{});var $3e=s(jp);qre=n($3e,"STRONG",{});var tQr=s(qre);Cco=r(tQr,"longformer"),tQr.forEach(t),wco=r($3e," \u2014 "),aP=n($3e,"A",{href:!0});var aQr=s(aP);Aco=r(aQr,"LongformerModel"),aQr.forEach(t),yco=r($3e," (Longformer model)"),$3e.forEach(t),Lco=i(M),Dp=n(M,"LI",{});var I3e=s(Dp);Nre=n(I3e,"STRONG",{});var nQr=s(Nre);xco=r(nQr,"luke"),nQr.forEach(t),kco=r(I3e," \u2014 "),nP=n(I3e,"A",{href:!0});var sQr=s(nP);Sco=r(sQr,"LukeModel"),sQr.forEach(t),Rco=r(I3e," (LUKE model)"),I3e.forEach(t),Bco=i(M),Gp=n(M,"LI",{});var q3e=s(Gp);jre=n(q3e,"STRONG",{});var lQr=s(jre);Pco=r(lQr,"lxmert"),lQr.forEach(t),$co=r(q3e," \u2014 "),sP=n(q3e,"A",{href:!0});var iQr=s(sP);Ico=r(iQr,"LxmertModel"),iQr.forEach(t),qco=r(q3e," (LXMERT model)"),q3e.forEach(t),Nco=i(M),Op=n(M,"LI",{});var N3e=s(Op);Dre=n(N3e,"STRONG",{});var dQr=s(Dre);jco=r(dQr,"m2m_100"),dQr.forEach(t),Dco=r(N3e," \u2014 "),lP=n(N3e,"A",{href:!0});var cQr=s(lP);Gco=r(cQr,"M2M100Model"),cQr.forEach(t),Oco=r(N3e," (M2M100 model)"),N3e.forEach(t),Vco=i(M),Vp=n(M,"LI",{});var j3e=s(Vp);Gre=n(j3e,"STRONG",{});var fQr=s(Gre);Xco=r(fQr,"marian"),fQr.forEach(t),zco=r(j3e," \u2014 "),iP=n(j3e,"A",{href:!0});var mQr=s(iP);Qco=r(mQr,"MarianModel"),mQr.forEach(t),Wco=r(j3e," (Marian model)"),j3e.forEach(t),Hco=i(M),Xp=n(M,"LI",{});var D3e=s(Xp);Ore=n(D3e,"STRONG",{});var gQr=s(Ore);Uco=r(gQr,"maskformer"),gQr.forEach(t),Jco=r(D3e," \u2014 "),dP=n(D3e,"A",{href:!0});var hQr=s(dP);Yco=r(hQr,"MaskFormerModel"),hQr.forEach(t),Kco=r(D3e," (MaskFormer model)"),D3e.forEach(t),Zco=i(M),zp=n(M,"LI",{});var G3e=s(zp);Vre=n(G3e,"STRONG",{});var pQr=s(Vre);efo=r(pQr,"mbart"),pQr.forEach(t),ofo=r(G3e," \u2014 "),cP=n(G3e,"A",{href:!0});var _Qr=s(cP);rfo=r(_Qr,"MBartModel"),_Qr.forEach(t),tfo=r(G3e," (mBART model)"),G3e.forEach(t),afo=i(M),Qp=n(M,"LI",{});var O3e=s(Qp);Xre=n(O3e,"STRONG",{});var uQr=s(Xre);nfo=r(uQr,"megatron-bert"),uQr.forEach(t),sfo=r(O3e," \u2014 "),fP=n(O3e,"A",{href:!0});var bQr=s(fP);lfo=r(bQr,"MegatronBertModel"),bQr.forEach(t),ifo=r(O3e," (MegatronBert model)"),O3e.forEach(t),dfo=i(M),Wp=n(M,"LI",{});var V3e=s(Wp);zre=n(V3e,"STRONG",{});var FQr=s(zre);cfo=r(FQr,"mobilebert"),FQr.forEach(t),ffo=r(V3e," \u2014 "),mP=n(V3e,"A",{href:!0});var vQr=s(mP);mfo=r(vQr,"MobileBertModel"),vQr.forEach(t),gfo=r(V3e," (MobileBERT model)"),V3e.forEach(t),hfo=i(M),Hp=n(M,"LI",{});var X3e=s(Hp);Qre=n(X3e,"STRONG",{});var TQr=s(Qre);pfo=r(TQr,"mpnet"),TQr.forEach(t),_fo=r(X3e," \u2014 "),gP=n(X3e,"A",{href:!0});var MQr=s(gP);ufo=r(MQr,"MPNetModel"),MQr.forEach(t),bfo=r(X3e," (MPNet model)"),X3e.forEach(t),Ffo=i(M),Up=n(M,"LI",{});var z3e=s(Up);Wre=n(z3e,"STRONG",{});var EQr=s(Wre);vfo=r(EQr,"mt5"),EQr.forEach(t),Tfo=r(z3e," \u2014 "),hP=n(z3e,"A",{href:!0});var CQr=s(hP);Mfo=r(CQr,"MT5Model"),CQr.forEach(t),Efo=r(z3e," (mT5 model)"),z3e.forEach(t),Cfo=i(M),Jp=n(M,"LI",{});var Q3e=s(Jp);Hre=n(Q3e,"STRONG",{});var wQr=s(Hre);wfo=r(wQr,"nystromformer"),wQr.forEach(t),Afo=r(Q3e," \u2014 "),pP=n(Q3e,"A",{href:!0});var AQr=s(pP);yfo=r(AQr,"NystromformerModel"),AQr.forEach(t),Lfo=r(Q3e," (Nystromformer model)"),Q3e.forEach(t),xfo=i(M),Yp=n(M,"LI",{});var W3e=s(Yp);Ure=n(W3e,"STRONG",{});var yQr=s(Ure);kfo=r(yQr,"openai-gpt"),yQr.forEach(t),Sfo=r(W3e," \u2014 "),_P=n(W3e,"A",{href:!0});var LQr=s(_P);Rfo=r(LQr,"OpenAIGPTModel"),LQr.forEach(t),Bfo=r(W3e," (OpenAI GPT model)"),W3e.forEach(t),Pfo=i(M),Kp=n(M,"LI",{});var H3e=s(Kp);Jre=n(H3e,"STRONG",{});var xQr=s(Jre);$fo=r(xQr,"pegasus"),xQr.forEach(t),Ifo=r(H3e," \u2014 "),uP=n(H3e,"A",{href:!0});var kQr=s(uP);qfo=r(kQr,"PegasusModel"),kQr.forEach(t),Nfo=r(H3e," (Pegasus model)"),H3e.forEach(t),jfo=i(M),Zp=n(M,"LI",{});var U3e=s(Zp);Yre=n(U3e,"STRONG",{});var SQr=s(Yre);Dfo=r(SQr,"perceiver"),SQr.forEach(t),Gfo=r(U3e," \u2014 "),bP=n(U3e,"A",{href:!0});var RQr=s(bP);Ofo=r(RQr,"PerceiverModel"),RQr.forEach(t),Vfo=r(U3e," (Perceiver model)"),U3e.forEach(t),Xfo=i(M),e_=n(M,"LI",{});var J3e=s(e_);Kre=n(J3e,"STRONG",{});var BQr=s(Kre);zfo=r(BQr,"plbart"),BQr.forEach(t),Qfo=r(J3e," \u2014 "),FP=n(J3e,"A",{href:!0});var PQr=s(FP);Wfo=r(PQr,"PLBartModel"),PQr.forEach(t),Hfo=r(J3e," (PLBart model)"),J3e.forEach(t),Ufo=i(M),o_=n(M,"LI",{});var Y3e=s(o_);Zre=n(Y3e,"STRONG",{});var $Qr=s(Zre);Jfo=r($Qr,"poolformer"),$Qr.forEach(t),Yfo=r(Y3e," \u2014 "),vP=n(Y3e,"A",{href:!0});var IQr=s(vP);Kfo=r(IQr,"PoolFormerModel"),IQr.forEach(t),Zfo=r(Y3e," (PoolFormer model)"),Y3e.forEach(t),emo=i(M),r_=n(M,"LI",{});var K3e=s(r_);ete=n(K3e,"STRONG",{});var qQr=s(ete);omo=r(qQr,"prophetnet"),qQr.forEach(t),rmo=r(K3e," \u2014 "),TP=n(K3e,"A",{href:!0});var NQr=s(TP);tmo=r(NQr,"ProphetNetModel"),NQr.forEach(t),amo=r(K3e," (ProphetNet model)"),K3e.forEach(t),nmo=i(M),t_=n(M,"LI",{});var Z3e=s(t_);ote=n(Z3e,"STRONG",{});var jQr=s(ote);smo=r(jQr,"qdqbert"),jQr.forEach(t),lmo=r(Z3e," \u2014 "),MP=n(Z3e,"A",{href:!0});var DQr=s(MP);imo=r(DQr,"QDQBertModel"),DQr.forEach(t),dmo=r(Z3e," (QDQBert model)"),Z3e.forEach(t),cmo=i(M),a_=n(M,"LI",{});var eCe=s(a_);rte=n(eCe,"STRONG",{});var GQr=s(rte);fmo=r(GQr,"reformer"),GQr.forEach(t),mmo=r(eCe," \u2014 "),EP=n(eCe,"A",{href:!0});var OQr=s(EP);gmo=r(OQr,"ReformerModel"),OQr.forEach(t),hmo=r(eCe," (Reformer model)"),eCe.forEach(t),pmo=i(M),n_=n(M,"LI",{});var oCe=s(n_);tte=n(oCe,"STRONG",{});var VQr=s(tte);_mo=r(VQr,"regnet"),VQr.forEach(t),umo=r(oCe," \u2014 "),CP=n(oCe,"A",{href:!0});var XQr=s(CP);bmo=r(XQr,"RegNetModel"),XQr.forEach(t),Fmo=r(oCe," (RegNet model)"),oCe.forEach(t),vmo=i(M),s_=n(M,"LI",{});var rCe=s(s_);ate=n(rCe,"STRONG",{});var zQr=s(ate);Tmo=r(zQr,"rembert"),zQr.forEach(t),Mmo=r(rCe," \u2014 "),wP=n(rCe,"A",{href:!0});var QQr=s(wP);Emo=r(QQr,"RemBertModel"),QQr.forEach(t),Cmo=r(rCe," (RemBERT model)"),rCe.forEach(t),wmo=i(M),l_=n(M,"LI",{});var tCe=s(l_);nte=n(tCe,"STRONG",{});var WQr=s(nte);Amo=r(WQr,"resnet"),WQr.forEach(t),ymo=r(tCe," \u2014 "),AP=n(tCe,"A",{href:!0});var HQr=s(AP);Lmo=r(HQr,"ResNetModel"),HQr.forEach(t),xmo=r(tCe," (ResNet model)"),tCe.forEach(t),kmo=i(M),i_=n(M,"LI",{});var aCe=s(i_);ste=n(aCe,"STRONG",{});var UQr=s(ste);Smo=r(UQr,"retribert"),UQr.forEach(t),Rmo=r(aCe," \u2014 "),yP=n(aCe,"A",{href:!0});var JQr=s(yP);Bmo=r(JQr,"RetriBertModel"),JQr.forEach(t),Pmo=r(aCe," (RetriBERT model)"),aCe.forEach(t),$mo=i(M),d_=n(M,"LI",{});var nCe=s(d_);lte=n(nCe,"STRONG",{});var YQr=s(lte);Imo=r(YQr,"roberta"),YQr.forEach(t),qmo=r(nCe," \u2014 "),LP=n(nCe,"A",{href:!0});var KQr=s(LP);Nmo=r(KQr,"RobertaModel"),KQr.forEach(t),jmo=r(nCe," (RoBERTa model)"),nCe.forEach(t),Dmo=i(M),c_=n(M,"LI",{});var sCe=s(c_);ite=n(sCe,"STRONG",{});var ZQr=s(ite);Gmo=r(ZQr,"roformer"),ZQr.forEach(t),Omo=r(sCe," \u2014 "),xP=n(sCe,"A",{href:!0});var eWr=s(xP);Vmo=r(eWr,"RoFormerModel"),eWr.forEach(t),Xmo=r(sCe," (RoFormer model)"),sCe.forEach(t),zmo=i(M),f_=n(M,"LI",{});var lCe=s(f_);dte=n(lCe,"STRONG",{});var oWr=s(dte);Qmo=r(oWr,"segformer"),oWr.forEach(t),Wmo=r(lCe," \u2014 "),kP=n(lCe,"A",{href:!0});var rWr=s(kP);Hmo=r(rWr,"SegformerModel"),rWr.forEach(t),Umo=r(lCe," (SegFormer model)"),lCe.forEach(t),Jmo=i(M),m_=n(M,"LI",{});var iCe=s(m_);cte=n(iCe,"STRONG",{});var tWr=s(cte);Ymo=r(tWr,"sew"),tWr.forEach(t),Kmo=r(iCe," \u2014 "),SP=n(iCe,"A",{href:!0});var aWr=s(SP);Zmo=r(aWr,"SEWModel"),aWr.forEach(t),ego=r(iCe," (SEW model)"),iCe.forEach(t),ogo=i(M),g_=n(M,"LI",{});var dCe=s(g_);fte=n(dCe,"STRONG",{});var nWr=s(fte);rgo=r(nWr,"sew-d"),nWr.forEach(t),tgo=r(dCe," \u2014 "),RP=n(dCe,"A",{href:!0});var sWr=s(RP);ago=r(sWr,"SEWDModel"),sWr.forEach(t),ngo=r(dCe," (SEW-D model)"),dCe.forEach(t),sgo=i(M),h_=n(M,"LI",{});var cCe=s(h_);mte=n(cCe,"STRONG",{});var lWr=s(mte);lgo=r(lWr,"speech_to_text"),lWr.forEach(t),igo=r(cCe," \u2014 "),BP=n(cCe,"A",{href:!0});var iWr=s(BP);dgo=r(iWr,"Speech2TextModel"),iWr.forEach(t),cgo=r(cCe," (Speech2Text model)"),cCe.forEach(t),fgo=i(M),p_=n(M,"LI",{});var fCe=s(p_);gte=n(fCe,"STRONG",{});var dWr=s(gte);mgo=r(dWr,"splinter"),dWr.forEach(t),ggo=r(fCe," \u2014 "),PP=n(fCe,"A",{href:!0});var cWr=s(PP);hgo=r(cWr,"SplinterModel"),cWr.forEach(t),pgo=r(fCe," (Splinter model)"),fCe.forEach(t),_go=i(M),__=n(M,"LI",{});var mCe=s(__);hte=n(mCe,"STRONG",{});var fWr=s(hte);ugo=r(fWr,"squeezebert"),fWr.forEach(t),bgo=r(mCe," \u2014 "),$P=n(mCe,"A",{href:!0});var mWr=s($P);Fgo=r(mWr,"SqueezeBertModel"),mWr.forEach(t),vgo=r(mCe," (SqueezeBERT model)"),mCe.forEach(t),Tgo=i(M),u_=n(M,"LI",{});var gCe=s(u_);pte=n(gCe,"STRONG",{});var gWr=s(pte);Mgo=r(gWr,"swin"),gWr.forEach(t),Ego=r(gCe," \u2014 "),IP=n(gCe,"A",{href:!0});var hWr=s(IP);Cgo=r(hWr,"SwinModel"),hWr.forEach(t),wgo=r(gCe," (Swin model)"),gCe.forEach(t),Ago=i(M),b_=n(M,"LI",{});var hCe=s(b_);_te=n(hCe,"STRONG",{});var pWr=s(_te);ygo=r(pWr,"t5"),pWr.forEach(t),Lgo=r(hCe," \u2014 "),qP=n(hCe,"A",{href:!0});var _Wr=s(qP);xgo=r(_Wr,"T5Model"),_Wr.forEach(t),kgo=r(hCe," (T5 model)"),hCe.forEach(t),Sgo=i(M),F_=n(M,"LI",{});var pCe=s(F_);ute=n(pCe,"STRONG",{});var uWr=s(ute);Rgo=r(uWr,"tapas"),uWr.forEach(t),Bgo=r(pCe," \u2014 "),NP=n(pCe,"A",{href:!0});var bWr=s(NP);Pgo=r(bWr,"TapasModel"),bWr.forEach(t),$go=r(pCe," (TAPAS model)"),pCe.forEach(t),Igo=i(M),v_=n(M,"LI",{});var _Ce=s(v_);bte=n(_Ce,"STRONG",{});var FWr=s(bte);qgo=r(FWr,"transfo-xl"),FWr.forEach(t),Ngo=r(_Ce," \u2014 "),jP=n(_Ce,"A",{href:!0});var vWr=s(jP);jgo=r(vWr,"TransfoXLModel"),vWr.forEach(t),Dgo=r(_Ce," (Transformer-XL model)"),_Ce.forEach(t),Ggo=i(M),T_=n(M,"LI",{});var uCe=s(T_);Fte=n(uCe,"STRONG",{});var TWr=s(Fte);Ogo=r(TWr,"unispeech"),TWr.forEach(t),Vgo=r(uCe," \u2014 "),DP=n(uCe,"A",{href:!0});var MWr=s(DP);Xgo=r(MWr,"UniSpeechModel"),MWr.forEach(t),zgo=r(uCe," (UniSpeech model)"),uCe.forEach(t),Qgo=i(M),M_=n(M,"LI",{});var bCe=s(M_);vte=n(bCe,"STRONG",{});var EWr=s(vte);Wgo=r(EWr,"unispeech-sat"),EWr.forEach(t),Hgo=r(bCe," \u2014 "),GP=n(bCe,"A",{href:!0});var CWr=s(GP);Ugo=r(CWr,"UniSpeechSatModel"),CWr.forEach(t),Jgo=r(bCe," (UniSpeechSat model)"),bCe.forEach(t),Ygo=i(M),E_=n(M,"LI",{});var FCe=s(E_);Tte=n(FCe,"STRONG",{});var wWr=s(Tte);Kgo=r(wWr,"van"),wWr.forEach(t),Zgo=r(FCe," \u2014 "),OP=n(FCe,"A",{href:!0});var AWr=s(OP);eho=r(AWr,"VanModel"),AWr.forEach(t),oho=r(FCe," (VAN model)"),FCe.forEach(t),rho=i(M),C_=n(M,"LI",{});var vCe=s(C_);Mte=n(vCe,"STRONG",{});var yWr=s(Mte);tho=r(yWr,"vilt"),yWr.forEach(t),aho=r(vCe," \u2014 "),VP=n(vCe,"A",{href:!0});var LWr=s(VP);nho=r(LWr,"ViltModel"),LWr.forEach(t),sho=r(vCe," (ViLT model)"),vCe.forEach(t),lho=i(M),w_=n(M,"LI",{});var TCe=s(w_);Ete=n(TCe,"STRONG",{});var xWr=s(Ete);iho=r(xWr,"vision-text-dual-encoder"),xWr.forEach(t),dho=r(TCe," \u2014 "),XP=n(TCe,"A",{href:!0});var kWr=s(XP);cho=r(kWr,"VisionTextDualEncoderModel"),kWr.forEach(t),fho=r(TCe," (VisionTextDualEncoder model)"),TCe.forEach(t),mho=i(M),A_=n(M,"LI",{});var MCe=s(A_);Cte=n(MCe,"STRONG",{});var SWr=s(Cte);gho=r(SWr,"visual_bert"),SWr.forEach(t),hho=r(MCe," \u2014 "),zP=n(MCe,"A",{href:!0});var RWr=s(zP);pho=r(RWr,"VisualBertModel"),RWr.forEach(t),_ho=r(MCe," (VisualBert model)"),MCe.forEach(t),uho=i(M),y_=n(M,"LI",{});var ECe=s(y_);wte=n(ECe,"STRONG",{});var BWr=s(wte);bho=r(BWr,"vit"),BWr.forEach(t),Fho=r(ECe," \u2014 "),QP=n(ECe,"A",{href:!0});var PWr=s(QP);vho=r(PWr,"ViTModel"),PWr.forEach(t),Tho=r(ECe," (ViT model)"),ECe.forEach(t),Mho=i(M),L_=n(M,"LI",{});var CCe=s(L_);Ate=n(CCe,"STRONG",{});var $Wr=s(Ate);Eho=r($Wr,"vit_mae"),$Wr.forEach(t),Cho=r(CCe," \u2014 "),WP=n(CCe,"A",{href:!0});var IWr=s(WP);who=r(IWr,"ViTMAEModel"),IWr.forEach(t),Aho=r(CCe," (ViTMAE model)"),CCe.forEach(t),yho=i(M),x_=n(M,"LI",{});var wCe=s(x_);yte=n(wCe,"STRONG",{});var qWr=s(yte);Lho=r(qWr,"wav2vec2"),qWr.forEach(t),xho=r(wCe," \u2014 "),HP=n(wCe,"A",{href:!0});var NWr=s(HP);kho=r(NWr,"Wav2Vec2Model"),NWr.forEach(t),Sho=r(wCe," (Wav2Vec2 model)"),wCe.forEach(t),Rho=i(M),k_=n(M,"LI",{});var ACe=s(k_);Lte=n(ACe,"STRONG",{});var jWr=s(Lte);Bho=r(jWr,"wavlm"),jWr.forEach(t),Pho=r(ACe," \u2014 "),UP=n(ACe,"A",{href:!0});var DWr=s(UP);$ho=r(DWr,"WavLMModel"),DWr.forEach(t),Iho=r(ACe," (WavLM model)"),ACe.forEach(t),qho=i(M),S_=n(M,"LI",{});var yCe=s(S_);xte=n(yCe,"STRONG",{});var GWr=s(xte);Nho=r(GWr,"xglm"),GWr.forEach(t),jho=r(yCe," \u2014 "),JP=n(yCe,"A",{href:!0});var OWr=s(JP);Dho=r(OWr,"XGLMModel"),OWr.forEach(t),Gho=r(yCe," (XGLM model)"),yCe.forEach(t),Oho=i(M),R_=n(M,"LI",{});var LCe=s(R_);kte=n(LCe,"STRONG",{});var VWr=s(kte);Vho=r(VWr,"xlm"),VWr.forEach(t),Xho=r(LCe," \u2014 "),YP=n(LCe,"A",{href:!0});var XWr=s(YP);zho=r(XWr,"XLMModel"),XWr.forEach(t),Qho=r(LCe," (XLM model)"),LCe.forEach(t),Who=i(M),B_=n(M,"LI",{});var xCe=s(B_);Ste=n(xCe,"STRONG",{});var zWr=s(Ste);Hho=r(zWr,"xlm-prophetnet"),zWr.forEach(t),Uho=r(xCe," \u2014 "),KP=n(xCe,"A",{href:!0});var QWr=s(KP);Jho=r(QWr,"XLMProphetNetModel"),QWr.forEach(t),Yho=r(xCe," (XLMProphetNet model)"),xCe.forEach(t),Kho=i(M),P_=n(M,"LI",{});var kCe=s(P_);Rte=n(kCe,"STRONG",{});var WWr=s(Rte);Zho=r(WWr,"xlm-roberta"),WWr.forEach(t),epo=r(kCe," \u2014 "),ZP=n(kCe,"A",{href:!0});var HWr=s(ZP);opo=r(HWr,"XLMRobertaModel"),HWr.forEach(t),rpo=r(kCe," (XLM-RoBERTa model)"),kCe.forEach(t),tpo=i(M),$_=n(M,"LI",{});var SCe=s($_);Bte=n(SCe,"STRONG",{});var UWr=s(Bte);apo=r(UWr,"xlm-roberta-xl"),UWr.forEach(t),npo=r(SCe," \u2014 "),e$=n(SCe,"A",{href:!0});var JWr=s(e$);spo=r(JWr,"XLMRobertaXLModel"),JWr.forEach(t),lpo=r(SCe," (XLM-RoBERTa-XL model)"),SCe.forEach(t),ipo=i(M),I_=n(M,"LI",{});var RCe=s(I_);Pte=n(RCe,"STRONG",{});var YWr=s(Pte);dpo=r(YWr,"xlnet"),YWr.forEach(t),cpo=r(RCe," \u2014 "),o$=n(RCe,"A",{href:!0});var KWr=s(o$);fpo=r(KWr,"XLNetModel"),KWr.forEach(t),mpo=r(RCe," (XLNet model)"),RCe.forEach(t),gpo=i(M),q_=n(M,"LI",{});var BCe=s(q_);$te=n(BCe,"STRONG",{});var ZWr=s($te);hpo=r(ZWr,"yoso"),ZWr.forEach(t),ppo=r(BCe," \u2014 "),r$=n(BCe,"A",{href:!0});var eHr=s(r$);_po=r(eHr,"YosoModel"),eHr.forEach(t),upo=r(BCe," (YOSO model)"),BCe.forEach(t),M.forEach(t),bpo=i(Dt),N_=n(Dt,"P",{});var PCe=s(N_);Fpo=r(PCe,"The model is set in evaluation mode by default using "),Ite=n(PCe,"CODE",{});var oHr=s(Ite);vpo=r(oHr,"model.eval()"),oHr.forEach(t),Tpo=r(PCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qte=n(PCe,"CODE",{});var rHr=s(qte);Mpo=r(rHr,"model.train()"),rHr.forEach(t),PCe.forEach(t),Epo=i(Dt),Nte=n(Dt,"P",{});var tHr=s(Nte);Cpo=r(tHr,"Examples:"),tHr.forEach(t),wpo=i(Dt),m(gw.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),QRe=i(c),Zi=n(c,"H2",{class:!0});var o$e=s(Zi);j_=n(o$e,"A",{id:!0,class:!0,href:!0});var aHr=s(j_);jte=n(aHr,"SPAN",{});var nHr=s(jte);m(hw.$$.fragment,nHr),nHr.forEach(t),aHr.forEach(t),Apo=i(o$e),Dte=n(o$e,"SPAN",{});var sHr=s(Dte);ypo=r(sHr,"AutoModelForPreTraining"),sHr.forEach(t),o$e.forEach(t),WRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(pw.$$.fragment,Hs),Lpo=i(Hs),ed=n(Hs,"P",{});var TU=s(ed);xpo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),t$=n(TU,"A",{href:!0});var lHr=s(t$);kpo=r(lHr,"from_pretrained()"),lHr.forEach(t),Spo=r(TU," class method or the "),a$=n(TU,"A",{href:!0});var iHr=s(a$);Rpo=r(iHr,"from_config()"),iHr.forEach(t),Bpo=r(TU,` class
method.`),TU.forEach(t),Ppo=i(Hs),_w=n(Hs,"P",{});var r$e=s(_w);$po=r(r$e,"This class cannot be instantiated directly using "),Gte=n(r$e,"CODE",{});var dHr=s(Gte);Ipo=r(dHr,"__init__()"),dHr.forEach(t),qpo=r(r$e," (throws an error)."),r$e.forEach(t),Npo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(uw.$$.fragment,Us),jpo=i(Us),Ote=n(Us,"P",{});var cHr=s(Ote);Dpo=r(cHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cHr.forEach(t),Gpo=i(Us),od=n(Us,"P",{});var MU=s(od);Opo=r(MU,`Note:
Loading a model from its configuration file does `),Vte=n(MU,"STRONG",{});var fHr=s(Vte);Vpo=r(fHr,"not"),fHr.forEach(t),Xpo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),n$=n(MU,"A",{href:!0});var mHr=s(n$);zpo=r(mHr,"from_pretrained()"),mHr.forEach(t),Qpo=r(MU," to load the model weights."),MU.forEach(t),Wpo=i(Us),Xte=n(Us,"P",{});var gHr=s(Xte);Hpo=r(gHr,"Examples:"),gHr.forEach(t),Upo=i(Us),m(bw.$$.fragment,Us),Us.forEach(t),Jpo=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(Fw.$$.fragment,Gt),Ypo=i(Gt),zte=n(Gt,"P",{});var hHr=s(zte);Kpo=r(hHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hHr.forEach(t),Zpo=i(Gt),za=n(Gt,"P",{});var R3=s(za);e_o=r(R3,"The model class to instantiate is selected based on the "),Qte=n(R3,"CODE",{});var pHr=s(Qte);o_o=r(pHr,"model_type"),pHr.forEach(t),r_o=r(R3,` property of the config object (either
passed as an argument or loaded from `),Wte=n(R3,"CODE",{});var _Hr=s(Wte);t_o=r(_Hr,"pretrained_model_name_or_path"),_Hr.forEach(t),a_o=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hte=n(R3,"CODE",{});var uHr=s(Hte);n_o=r(uHr,"pretrained_model_name_or_path"),uHr.forEach(t),s_o=r(R3,":"),R3.forEach(t),l_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);D_=n(B,"LI",{});var $Ce=s(D_);Ute=n($Ce,"STRONG",{});var bHr=s(Ute);i_o=r(bHr,"albert"),bHr.forEach(t),d_o=r($Ce," \u2014 "),s$=n($Ce,"A",{href:!0});var FHr=s(s$);c_o=r(FHr,"AlbertForPreTraining"),FHr.forEach(t),f_o=r($Ce," (ALBERT model)"),$Ce.forEach(t),m_o=i(B),G_=n(B,"LI",{});var ICe=s(G_);Jte=n(ICe,"STRONG",{});var vHr=s(Jte);g_o=r(vHr,"bart"),vHr.forEach(t),h_o=r(ICe," \u2014 "),l$=n(ICe,"A",{href:!0});var THr=s(l$);p_o=r(THr,"BartForConditionalGeneration"),THr.forEach(t),__o=r(ICe," (BART model)"),ICe.forEach(t),u_o=i(B),O_=n(B,"LI",{});var qCe=s(O_);Yte=n(qCe,"STRONG",{});var MHr=s(Yte);b_o=r(MHr,"bert"),MHr.forEach(t),F_o=r(qCe," \u2014 "),i$=n(qCe,"A",{href:!0});var EHr=s(i$);v_o=r(EHr,"BertForPreTraining"),EHr.forEach(t),T_o=r(qCe," (BERT model)"),qCe.forEach(t),M_o=i(B),V_=n(B,"LI",{});var NCe=s(V_);Kte=n(NCe,"STRONG",{});var CHr=s(Kte);E_o=r(CHr,"big_bird"),CHr.forEach(t),C_o=r(NCe," \u2014 "),d$=n(NCe,"A",{href:!0});var wHr=s(d$);w_o=r(wHr,"BigBirdForPreTraining"),wHr.forEach(t),A_o=r(NCe," (BigBird model)"),NCe.forEach(t),y_o=i(B),X_=n(B,"LI",{});var jCe=s(X_);Zte=n(jCe,"STRONG",{});var AHr=s(Zte);L_o=r(AHr,"camembert"),AHr.forEach(t),x_o=r(jCe," \u2014 "),c$=n(jCe,"A",{href:!0});var yHr=s(c$);k_o=r(yHr,"CamembertForMaskedLM"),yHr.forEach(t),S_o=r(jCe," (CamemBERT model)"),jCe.forEach(t),R_o=i(B),z_=n(B,"LI",{});var DCe=s(z_);eae=n(DCe,"STRONG",{});var LHr=s(eae);B_o=r(LHr,"ctrl"),LHr.forEach(t),P_o=r(DCe," \u2014 "),f$=n(DCe,"A",{href:!0});var xHr=s(f$);$_o=r(xHr,"CTRLLMHeadModel"),xHr.forEach(t),I_o=r(DCe," (CTRL model)"),DCe.forEach(t),q_o=i(B),Q_=n(B,"LI",{});var GCe=s(Q_);oae=n(GCe,"STRONG",{});var kHr=s(oae);N_o=r(kHr,"data2vec-text"),kHr.forEach(t),j_o=r(GCe," \u2014 "),m$=n(GCe,"A",{href:!0});var SHr=s(m$);D_o=r(SHr,"Data2VecTextForMaskedLM"),SHr.forEach(t),G_o=r(GCe," (Data2VecText model)"),GCe.forEach(t),O_o=i(B),W_=n(B,"LI",{});var OCe=s(W_);rae=n(OCe,"STRONG",{});var RHr=s(rae);V_o=r(RHr,"deberta"),RHr.forEach(t),X_o=r(OCe," \u2014 "),g$=n(OCe,"A",{href:!0});var BHr=s(g$);z_o=r(BHr,"DebertaForMaskedLM"),BHr.forEach(t),Q_o=r(OCe," (DeBERTa model)"),OCe.forEach(t),W_o=i(B),H_=n(B,"LI",{});var VCe=s(H_);tae=n(VCe,"STRONG",{});var PHr=s(tae);H_o=r(PHr,"deberta-v2"),PHr.forEach(t),U_o=r(VCe," \u2014 "),h$=n(VCe,"A",{href:!0});var $Hr=s(h$);J_o=r($Hr,"DebertaV2ForMaskedLM"),$Hr.forEach(t),Y_o=r(VCe," (DeBERTa-v2 model)"),VCe.forEach(t),K_o=i(B),U_=n(B,"LI",{});var XCe=s(U_);aae=n(XCe,"STRONG",{});var IHr=s(aae);Z_o=r(IHr,"distilbert"),IHr.forEach(t),euo=r(XCe," \u2014 "),p$=n(XCe,"A",{href:!0});var qHr=s(p$);ouo=r(qHr,"DistilBertForMaskedLM"),qHr.forEach(t),ruo=r(XCe," (DistilBERT model)"),XCe.forEach(t),tuo=i(B),J_=n(B,"LI",{});var zCe=s(J_);nae=n(zCe,"STRONG",{});var NHr=s(nae);auo=r(NHr,"electra"),NHr.forEach(t),nuo=r(zCe," \u2014 "),_$=n(zCe,"A",{href:!0});var jHr=s(_$);suo=r(jHr,"ElectraForPreTraining"),jHr.forEach(t),luo=r(zCe," (ELECTRA model)"),zCe.forEach(t),iuo=i(B),Y_=n(B,"LI",{});var QCe=s(Y_);sae=n(QCe,"STRONG",{});var DHr=s(sae);duo=r(DHr,"flaubert"),DHr.forEach(t),cuo=r(QCe," \u2014 "),u$=n(QCe,"A",{href:!0});var GHr=s(u$);fuo=r(GHr,"FlaubertWithLMHeadModel"),GHr.forEach(t),muo=r(QCe," (FlauBERT model)"),QCe.forEach(t),guo=i(B),K_=n(B,"LI",{});var WCe=s(K_);lae=n(WCe,"STRONG",{});var OHr=s(lae);huo=r(OHr,"fnet"),OHr.forEach(t),puo=r(WCe," \u2014 "),b$=n(WCe,"A",{href:!0});var VHr=s(b$);_uo=r(VHr,"FNetForPreTraining"),VHr.forEach(t),uuo=r(WCe," (FNet model)"),WCe.forEach(t),buo=i(B),Z_=n(B,"LI",{});var HCe=s(Z_);iae=n(HCe,"STRONG",{});var XHr=s(iae);Fuo=r(XHr,"fsmt"),XHr.forEach(t),vuo=r(HCe," \u2014 "),F$=n(HCe,"A",{href:!0});var zHr=s(F$);Tuo=r(zHr,"FSMTForConditionalGeneration"),zHr.forEach(t),Muo=r(HCe," (FairSeq Machine-Translation model)"),HCe.forEach(t),Euo=i(B),eu=n(B,"LI",{});var UCe=s(eu);dae=n(UCe,"STRONG",{});var QHr=s(dae);Cuo=r(QHr,"funnel"),QHr.forEach(t),wuo=r(UCe," \u2014 "),v$=n(UCe,"A",{href:!0});var WHr=s(v$);Auo=r(WHr,"FunnelForPreTraining"),WHr.forEach(t),yuo=r(UCe," (Funnel Transformer model)"),UCe.forEach(t),Luo=i(B),ou=n(B,"LI",{});var JCe=s(ou);cae=n(JCe,"STRONG",{});var HHr=s(cae);xuo=r(HHr,"gpt2"),HHr.forEach(t),kuo=r(JCe," \u2014 "),T$=n(JCe,"A",{href:!0});var UHr=s(T$);Suo=r(UHr,"GPT2LMHeadModel"),UHr.forEach(t),Ruo=r(JCe," (OpenAI GPT-2 model)"),JCe.forEach(t),Buo=i(B),ru=n(B,"LI",{});var YCe=s(ru);fae=n(YCe,"STRONG",{});var JHr=s(fae);Puo=r(JHr,"ibert"),JHr.forEach(t),$uo=r(YCe," \u2014 "),M$=n(YCe,"A",{href:!0});var YHr=s(M$);Iuo=r(YHr,"IBertForMaskedLM"),YHr.forEach(t),quo=r(YCe," (I-BERT model)"),YCe.forEach(t),Nuo=i(B),tu=n(B,"LI",{});var KCe=s(tu);mae=n(KCe,"STRONG",{});var KHr=s(mae);juo=r(KHr,"layoutlm"),KHr.forEach(t),Duo=r(KCe," \u2014 "),E$=n(KCe,"A",{href:!0});var ZHr=s(E$);Guo=r(ZHr,"LayoutLMForMaskedLM"),ZHr.forEach(t),Ouo=r(KCe," (LayoutLM model)"),KCe.forEach(t),Vuo=i(B),au=n(B,"LI",{});var ZCe=s(au);gae=n(ZCe,"STRONG",{});var eUr=s(gae);Xuo=r(eUr,"longformer"),eUr.forEach(t),zuo=r(ZCe," \u2014 "),C$=n(ZCe,"A",{href:!0});var oUr=s(C$);Quo=r(oUr,"LongformerForMaskedLM"),oUr.forEach(t),Wuo=r(ZCe," (Longformer model)"),ZCe.forEach(t),Huo=i(B),nu=n(B,"LI",{});var ewe=s(nu);hae=n(ewe,"STRONG",{});var rUr=s(hae);Uuo=r(rUr,"lxmert"),rUr.forEach(t),Juo=r(ewe," \u2014 "),w$=n(ewe,"A",{href:!0});var tUr=s(w$);Yuo=r(tUr,"LxmertForPreTraining"),tUr.forEach(t),Kuo=r(ewe," (LXMERT model)"),ewe.forEach(t),Zuo=i(B),su=n(B,"LI",{});var owe=s(su);pae=n(owe,"STRONG",{});var aUr=s(pae);e6o=r(aUr,"megatron-bert"),aUr.forEach(t),o6o=r(owe," \u2014 "),A$=n(owe,"A",{href:!0});var nUr=s(A$);r6o=r(nUr,"MegatronBertForPreTraining"),nUr.forEach(t),t6o=r(owe," (MegatronBert model)"),owe.forEach(t),a6o=i(B),lu=n(B,"LI",{});var rwe=s(lu);_ae=n(rwe,"STRONG",{});var sUr=s(_ae);n6o=r(sUr,"mobilebert"),sUr.forEach(t),s6o=r(rwe," \u2014 "),y$=n(rwe,"A",{href:!0});var lUr=s(y$);l6o=r(lUr,"MobileBertForPreTraining"),lUr.forEach(t),i6o=r(rwe," (MobileBERT model)"),rwe.forEach(t),d6o=i(B),iu=n(B,"LI",{});var twe=s(iu);uae=n(twe,"STRONG",{});var iUr=s(uae);c6o=r(iUr,"mpnet"),iUr.forEach(t),f6o=r(twe," \u2014 "),L$=n(twe,"A",{href:!0});var dUr=s(L$);m6o=r(dUr,"MPNetForMaskedLM"),dUr.forEach(t),g6o=r(twe," (MPNet model)"),twe.forEach(t),h6o=i(B),du=n(B,"LI",{});var awe=s(du);bae=n(awe,"STRONG",{});var cUr=s(bae);p6o=r(cUr,"openai-gpt"),cUr.forEach(t),_6o=r(awe," \u2014 "),x$=n(awe,"A",{href:!0});var fUr=s(x$);u6o=r(fUr,"OpenAIGPTLMHeadModel"),fUr.forEach(t),b6o=r(awe," (OpenAI GPT model)"),awe.forEach(t),F6o=i(B),cu=n(B,"LI",{});var nwe=s(cu);Fae=n(nwe,"STRONG",{});var mUr=s(Fae);v6o=r(mUr,"retribert"),mUr.forEach(t),T6o=r(nwe," \u2014 "),k$=n(nwe,"A",{href:!0});var gUr=s(k$);M6o=r(gUr,"RetriBertModel"),gUr.forEach(t),E6o=r(nwe," (RetriBERT model)"),nwe.forEach(t),C6o=i(B),fu=n(B,"LI",{});var swe=s(fu);vae=n(swe,"STRONG",{});var hUr=s(vae);w6o=r(hUr,"roberta"),hUr.forEach(t),A6o=r(swe," \u2014 "),S$=n(swe,"A",{href:!0});var pUr=s(S$);y6o=r(pUr,"RobertaForMaskedLM"),pUr.forEach(t),L6o=r(swe," (RoBERTa model)"),swe.forEach(t),x6o=i(B),mu=n(B,"LI",{});var lwe=s(mu);Tae=n(lwe,"STRONG",{});var _Ur=s(Tae);k6o=r(_Ur,"squeezebert"),_Ur.forEach(t),S6o=r(lwe," \u2014 "),R$=n(lwe,"A",{href:!0});var uUr=s(R$);R6o=r(uUr,"SqueezeBertForMaskedLM"),uUr.forEach(t),B6o=r(lwe," (SqueezeBERT model)"),lwe.forEach(t),P6o=i(B),gu=n(B,"LI",{});var iwe=s(gu);Mae=n(iwe,"STRONG",{});var bUr=s(Mae);$6o=r(bUr,"t5"),bUr.forEach(t),I6o=r(iwe," \u2014 "),B$=n(iwe,"A",{href:!0});var FUr=s(B$);q6o=r(FUr,"T5ForConditionalGeneration"),FUr.forEach(t),N6o=r(iwe," (T5 model)"),iwe.forEach(t),j6o=i(B),hu=n(B,"LI",{});var dwe=s(hu);Eae=n(dwe,"STRONG",{});var vUr=s(Eae);D6o=r(vUr,"tapas"),vUr.forEach(t),G6o=r(dwe," \u2014 "),P$=n(dwe,"A",{href:!0});var TUr=s(P$);O6o=r(TUr,"TapasForMaskedLM"),TUr.forEach(t),V6o=r(dwe," (TAPAS model)"),dwe.forEach(t),X6o=i(B),pu=n(B,"LI",{});var cwe=s(pu);Cae=n(cwe,"STRONG",{});var MUr=s(Cae);z6o=r(MUr,"transfo-xl"),MUr.forEach(t),Q6o=r(cwe," \u2014 "),$$=n(cwe,"A",{href:!0});var EUr=s($$);W6o=r(EUr,"TransfoXLLMHeadModel"),EUr.forEach(t),H6o=r(cwe," (Transformer-XL model)"),cwe.forEach(t),U6o=i(B),_u=n(B,"LI",{});var fwe=s(_u);wae=n(fwe,"STRONG",{});var CUr=s(wae);J6o=r(CUr,"unispeech"),CUr.forEach(t),Y6o=r(fwe," \u2014 "),I$=n(fwe,"A",{href:!0});var wUr=s(I$);K6o=r(wUr,"UniSpeechForPreTraining"),wUr.forEach(t),Z6o=r(fwe," (UniSpeech model)"),fwe.forEach(t),e1o=i(B),uu=n(B,"LI",{});var mwe=s(uu);Aae=n(mwe,"STRONG",{});var AUr=s(Aae);o1o=r(AUr,"unispeech-sat"),AUr.forEach(t),r1o=r(mwe," \u2014 "),q$=n(mwe,"A",{href:!0});var yUr=s(q$);t1o=r(yUr,"UniSpeechSatForPreTraining"),yUr.forEach(t),a1o=r(mwe," (UniSpeechSat model)"),mwe.forEach(t),n1o=i(B),bu=n(B,"LI",{});var gwe=s(bu);yae=n(gwe,"STRONG",{});var LUr=s(yae);s1o=r(LUr,"visual_bert"),LUr.forEach(t),l1o=r(gwe," \u2014 "),N$=n(gwe,"A",{href:!0});var xUr=s(N$);i1o=r(xUr,"VisualBertForPreTraining"),xUr.forEach(t),d1o=r(gwe," (VisualBert model)"),gwe.forEach(t),c1o=i(B),Fu=n(B,"LI",{});var hwe=s(Fu);Lae=n(hwe,"STRONG",{});var kUr=s(Lae);f1o=r(kUr,"vit_mae"),kUr.forEach(t),m1o=r(hwe," \u2014 "),j$=n(hwe,"A",{href:!0});var SUr=s(j$);g1o=r(SUr,"ViTMAEForPreTraining"),SUr.forEach(t),h1o=r(hwe," (ViTMAE model)"),hwe.forEach(t),p1o=i(B),vu=n(B,"LI",{});var pwe=s(vu);xae=n(pwe,"STRONG",{});var RUr=s(xae);_1o=r(RUr,"wav2vec2"),RUr.forEach(t),u1o=r(pwe," \u2014 "),D$=n(pwe,"A",{href:!0});var BUr=s(D$);b1o=r(BUr,"Wav2Vec2ForPreTraining"),BUr.forEach(t),F1o=r(pwe," (Wav2Vec2 model)"),pwe.forEach(t),v1o=i(B),Tu=n(B,"LI",{});var _we=s(Tu);kae=n(_we,"STRONG",{});var PUr=s(kae);T1o=r(PUr,"xlm"),PUr.forEach(t),M1o=r(_we," \u2014 "),G$=n(_we,"A",{href:!0});var $Ur=s(G$);E1o=r($Ur,"XLMWithLMHeadModel"),$Ur.forEach(t),C1o=r(_we," (XLM model)"),_we.forEach(t),w1o=i(B),Mu=n(B,"LI",{});var uwe=s(Mu);Sae=n(uwe,"STRONG",{});var IUr=s(Sae);A1o=r(IUr,"xlm-roberta"),IUr.forEach(t),y1o=r(uwe," \u2014 "),O$=n(uwe,"A",{href:!0});var qUr=s(O$);L1o=r(qUr,"XLMRobertaForMaskedLM"),qUr.forEach(t),x1o=r(uwe," (XLM-RoBERTa model)"),uwe.forEach(t),k1o=i(B),Eu=n(B,"LI",{});var bwe=s(Eu);Rae=n(bwe,"STRONG",{});var NUr=s(Rae);S1o=r(NUr,"xlm-roberta-xl"),NUr.forEach(t),R1o=r(bwe," \u2014 "),V$=n(bwe,"A",{href:!0});var jUr=s(V$);B1o=r(jUr,"XLMRobertaXLForMaskedLM"),jUr.forEach(t),P1o=r(bwe," (XLM-RoBERTa-XL model)"),bwe.forEach(t),$1o=i(B),Cu=n(B,"LI",{});var Fwe=s(Cu);Bae=n(Fwe,"STRONG",{});var DUr=s(Bae);I1o=r(DUr,"xlnet"),DUr.forEach(t),q1o=r(Fwe," \u2014 "),X$=n(Fwe,"A",{href:!0});var GUr=s(X$);N1o=r(GUr,"XLNetLMHeadModel"),GUr.forEach(t),j1o=r(Fwe," (XLNet model)"),Fwe.forEach(t),B.forEach(t),D1o=i(Gt),wu=n(Gt,"P",{});var vwe=s(wu);G1o=r(vwe,"The model is set in evaluation mode by default using "),Pae=n(vwe,"CODE",{});var OUr=s(Pae);O1o=r(OUr,"model.eval()"),OUr.forEach(t),V1o=r(vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ae=n(vwe,"CODE",{});var VUr=s($ae);X1o=r(VUr,"model.train()"),VUr.forEach(t),vwe.forEach(t),z1o=i(Gt),Iae=n(Gt,"P",{});var XUr=s(Iae);Q1o=r(XUr,"Examples:"),XUr.forEach(t),W1o=i(Gt),m(vw.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),HRe=i(c),rd=n(c,"H2",{class:!0});var t$e=s(rd);Au=n(t$e,"A",{id:!0,class:!0,href:!0});var zUr=s(Au);qae=n(zUr,"SPAN",{});var QUr=s(qae);m(Tw.$$.fragment,QUr),QUr.forEach(t),zUr.forEach(t),H1o=i(t$e),Nae=n(t$e,"SPAN",{});var WUr=s(Nae);U1o=r(WUr,"AutoModelForCausalLM"),WUr.forEach(t),t$e.forEach(t),URe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(Mw.$$.fragment,Js),J1o=i(Js),td=n(Js,"P",{});var EU=s(td);Y1o=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),z$=n(EU,"A",{href:!0});var HUr=s(z$);K1o=r(HUr,"from_pretrained()"),HUr.forEach(t),Z1o=r(EU," class method or the "),Q$=n(EU,"A",{href:!0});var UUr=s(Q$);e4o=r(UUr,"from_config()"),UUr.forEach(t),o4o=r(EU,` class
method.`),EU.forEach(t),r4o=i(Js),Ew=n(Js,"P",{});var a$e=s(Ew);t4o=r(a$e,"This class cannot be instantiated directly using "),jae=n(a$e,"CODE",{});var JUr=s(jae);a4o=r(JUr,"__init__()"),JUr.forEach(t),n4o=r(a$e," (throws an error)."),a$e.forEach(t),s4o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(Cw.$$.fragment,Ys),l4o=i(Ys),Dae=n(Ys,"P",{});var YUr=s(Dae);i4o=r(YUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YUr.forEach(t),d4o=i(Ys),ad=n(Ys,"P",{});var CU=s(ad);c4o=r(CU,`Note:
Loading a model from its configuration file does `),Gae=n(CU,"STRONG",{});var KUr=s(Gae);f4o=r(KUr,"not"),KUr.forEach(t),m4o=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),W$=n(CU,"A",{href:!0});var ZUr=s(W$);g4o=r(ZUr,"from_pretrained()"),ZUr.forEach(t),h4o=r(CU," to load the model weights."),CU.forEach(t),p4o=i(Ys),Oae=n(Ys,"P",{});var eJr=s(Oae);_4o=r(eJr,"Examples:"),eJr.forEach(t),u4o=i(Ys),m(ww.$$.fragment,Ys),Ys.forEach(t),b4o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(Aw.$$.fragment,Ot),F4o=i(Ot),Vae=n(Ot,"P",{});var oJr=s(Vae);v4o=r(oJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oJr.forEach(t),T4o=i(Ot),Qa=n(Ot,"P",{});var B3=s(Qa);M4o=r(B3,"The model class to instantiate is selected based on the "),Xae=n(B3,"CODE",{});var rJr=s(Xae);E4o=r(rJr,"model_type"),rJr.forEach(t),C4o=r(B3,` property of the config object (either
passed as an argument or loaded from `),zae=n(B3,"CODE",{});var tJr=s(zae);w4o=r(tJr,"pretrained_model_name_or_path"),tJr.forEach(t),A4o=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qae=n(B3,"CODE",{});var aJr=s(Qae);y4o=r(aJr,"pretrained_model_name_or_path"),aJr.forEach(t),L4o=r(B3,":"),B3.forEach(t),x4o=i(Ot),$=n(Ot,"UL",{});var q=s($);yu=n(q,"LI",{});var Twe=s(yu);Wae=n(Twe,"STRONG",{});var nJr=s(Wae);k4o=r(nJr,"bart"),nJr.forEach(t),S4o=r(Twe," \u2014 "),H$=n(Twe,"A",{href:!0});var sJr=s(H$);R4o=r(sJr,"BartForCausalLM"),sJr.forEach(t),B4o=r(Twe," (BART model)"),Twe.forEach(t),P4o=i(q),Lu=n(q,"LI",{});var Mwe=s(Lu);Hae=n(Mwe,"STRONG",{});var lJr=s(Hae);$4o=r(lJr,"bert"),lJr.forEach(t),I4o=r(Mwe," \u2014 "),U$=n(Mwe,"A",{href:!0});var iJr=s(U$);q4o=r(iJr,"BertLMHeadModel"),iJr.forEach(t),N4o=r(Mwe," (BERT model)"),Mwe.forEach(t),j4o=i(q),xu=n(q,"LI",{});var Ewe=s(xu);Uae=n(Ewe,"STRONG",{});var dJr=s(Uae);D4o=r(dJr,"bert-generation"),dJr.forEach(t),G4o=r(Ewe," \u2014 "),J$=n(Ewe,"A",{href:!0});var cJr=s(J$);O4o=r(cJr,"BertGenerationDecoder"),cJr.forEach(t),V4o=r(Ewe," (Bert Generation model)"),Ewe.forEach(t),X4o=i(q),ku=n(q,"LI",{});var Cwe=s(ku);Jae=n(Cwe,"STRONG",{});var fJr=s(Jae);z4o=r(fJr,"big_bird"),fJr.forEach(t),Q4o=r(Cwe," \u2014 "),Y$=n(Cwe,"A",{href:!0});var mJr=s(Y$);W4o=r(mJr,"BigBirdForCausalLM"),mJr.forEach(t),H4o=r(Cwe," (BigBird model)"),Cwe.forEach(t),U4o=i(q),Su=n(q,"LI",{});var wwe=s(Su);Yae=n(wwe,"STRONG",{});var gJr=s(Yae);J4o=r(gJr,"bigbird_pegasus"),gJr.forEach(t),Y4o=r(wwe," \u2014 "),K$=n(wwe,"A",{href:!0});var hJr=s(K$);K4o=r(hJr,"BigBirdPegasusForCausalLM"),hJr.forEach(t),Z4o=r(wwe," (BigBirdPegasus model)"),wwe.forEach(t),ebo=i(q),Ru=n(q,"LI",{});var Awe=s(Ru);Kae=n(Awe,"STRONG",{});var pJr=s(Kae);obo=r(pJr,"blenderbot"),pJr.forEach(t),rbo=r(Awe," \u2014 "),Z$=n(Awe,"A",{href:!0});var _Jr=s(Z$);tbo=r(_Jr,"BlenderbotForCausalLM"),_Jr.forEach(t),abo=r(Awe," (Blenderbot model)"),Awe.forEach(t),nbo=i(q),Bu=n(q,"LI",{});var ywe=s(Bu);Zae=n(ywe,"STRONG",{});var uJr=s(Zae);sbo=r(uJr,"blenderbot-small"),uJr.forEach(t),lbo=r(ywe," \u2014 "),eI=n(ywe,"A",{href:!0});var bJr=s(eI);ibo=r(bJr,"BlenderbotSmallForCausalLM"),bJr.forEach(t),dbo=r(ywe," (BlenderbotSmall model)"),ywe.forEach(t),cbo=i(q),Pu=n(q,"LI",{});var Lwe=s(Pu);ene=n(Lwe,"STRONG",{});var FJr=s(ene);fbo=r(FJr,"camembert"),FJr.forEach(t),mbo=r(Lwe," \u2014 "),oI=n(Lwe,"A",{href:!0});var vJr=s(oI);gbo=r(vJr,"CamembertForCausalLM"),vJr.forEach(t),hbo=r(Lwe," (CamemBERT model)"),Lwe.forEach(t),pbo=i(q),$u=n(q,"LI",{});var xwe=s($u);one=n(xwe,"STRONG",{});var TJr=s(one);_bo=r(TJr,"ctrl"),TJr.forEach(t),ubo=r(xwe," \u2014 "),rI=n(xwe,"A",{href:!0});var MJr=s(rI);bbo=r(MJr,"CTRLLMHeadModel"),MJr.forEach(t),Fbo=r(xwe," (CTRL model)"),xwe.forEach(t),vbo=i(q),Iu=n(q,"LI",{});var kwe=s(Iu);rne=n(kwe,"STRONG",{});var EJr=s(rne);Tbo=r(EJr,"data2vec-text"),EJr.forEach(t),Mbo=r(kwe," \u2014 "),tI=n(kwe,"A",{href:!0});var CJr=s(tI);Ebo=r(CJr,"Data2VecTextForCausalLM"),CJr.forEach(t),Cbo=r(kwe," (Data2VecText model)"),kwe.forEach(t),wbo=i(q),qu=n(q,"LI",{});var Swe=s(qu);tne=n(Swe,"STRONG",{});var wJr=s(tne);Abo=r(wJr,"electra"),wJr.forEach(t),ybo=r(Swe," \u2014 "),aI=n(Swe,"A",{href:!0});var AJr=s(aI);Lbo=r(AJr,"ElectraForCausalLM"),AJr.forEach(t),xbo=r(Swe," (ELECTRA model)"),Swe.forEach(t),kbo=i(q),Nu=n(q,"LI",{});var Rwe=s(Nu);ane=n(Rwe,"STRONG",{});var yJr=s(ane);Sbo=r(yJr,"gpt2"),yJr.forEach(t),Rbo=r(Rwe," \u2014 "),nI=n(Rwe,"A",{href:!0});var LJr=s(nI);Bbo=r(LJr,"GPT2LMHeadModel"),LJr.forEach(t),Pbo=r(Rwe," (OpenAI GPT-2 model)"),Rwe.forEach(t),$bo=i(q),ju=n(q,"LI",{});var Bwe=s(ju);nne=n(Bwe,"STRONG",{});var xJr=s(nne);Ibo=r(xJr,"gpt_neo"),xJr.forEach(t),qbo=r(Bwe," \u2014 "),sI=n(Bwe,"A",{href:!0});var kJr=s(sI);Nbo=r(kJr,"GPTNeoForCausalLM"),kJr.forEach(t),jbo=r(Bwe," (GPT Neo model)"),Bwe.forEach(t),Dbo=i(q),Du=n(q,"LI",{});var Pwe=s(Du);sne=n(Pwe,"STRONG",{});var SJr=s(sne);Gbo=r(SJr,"gptj"),SJr.forEach(t),Obo=r(Pwe," \u2014 "),lI=n(Pwe,"A",{href:!0});var RJr=s(lI);Vbo=r(RJr,"GPTJForCausalLM"),RJr.forEach(t),Xbo=r(Pwe," (GPT-J model)"),Pwe.forEach(t),zbo=i(q),Gu=n(q,"LI",{});var $we=s(Gu);lne=n($we,"STRONG",{});var BJr=s(lne);Qbo=r(BJr,"marian"),BJr.forEach(t),Wbo=r($we," \u2014 "),iI=n($we,"A",{href:!0});var PJr=s(iI);Hbo=r(PJr,"MarianForCausalLM"),PJr.forEach(t),Ubo=r($we," (Marian model)"),$we.forEach(t),Jbo=i(q),Ou=n(q,"LI",{});var Iwe=s(Ou);ine=n(Iwe,"STRONG",{});var $Jr=s(ine);Ybo=r($Jr,"mbart"),$Jr.forEach(t),Kbo=r(Iwe," \u2014 "),dI=n(Iwe,"A",{href:!0});var IJr=s(dI);Zbo=r(IJr,"MBartForCausalLM"),IJr.forEach(t),e5o=r(Iwe," (mBART model)"),Iwe.forEach(t),o5o=i(q),Vu=n(q,"LI",{});var qwe=s(Vu);dne=n(qwe,"STRONG",{});var qJr=s(dne);r5o=r(qJr,"megatron-bert"),qJr.forEach(t),t5o=r(qwe," \u2014 "),cI=n(qwe,"A",{href:!0});var NJr=s(cI);a5o=r(NJr,"MegatronBertForCausalLM"),NJr.forEach(t),n5o=r(qwe," (MegatronBert model)"),qwe.forEach(t),s5o=i(q),Xu=n(q,"LI",{});var Nwe=s(Xu);cne=n(Nwe,"STRONG",{});var jJr=s(cne);l5o=r(jJr,"openai-gpt"),jJr.forEach(t),i5o=r(Nwe," \u2014 "),fI=n(Nwe,"A",{href:!0});var DJr=s(fI);d5o=r(DJr,"OpenAIGPTLMHeadModel"),DJr.forEach(t),c5o=r(Nwe," (OpenAI GPT model)"),Nwe.forEach(t),f5o=i(q),zu=n(q,"LI",{});var jwe=s(zu);fne=n(jwe,"STRONG",{});var GJr=s(fne);m5o=r(GJr,"pegasus"),GJr.forEach(t),g5o=r(jwe," \u2014 "),mI=n(jwe,"A",{href:!0});var OJr=s(mI);h5o=r(OJr,"PegasusForCausalLM"),OJr.forEach(t),p5o=r(jwe," (Pegasus model)"),jwe.forEach(t),_5o=i(q),Qu=n(q,"LI",{});var Dwe=s(Qu);mne=n(Dwe,"STRONG",{});var VJr=s(mne);u5o=r(VJr,"plbart"),VJr.forEach(t),b5o=r(Dwe," \u2014 "),gI=n(Dwe,"A",{href:!0});var XJr=s(gI);F5o=r(XJr,"PLBartForCausalLM"),XJr.forEach(t),v5o=r(Dwe," (PLBart model)"),Dwe.forEach(t),T5o=i(q),Wu=n(q,"LI",{});var Gwe=s(Wu);gne=n(Gwe,"STRONG",{});var zJr=s(gne);M5o=r(zJr,"prophetnet"),zJr.forEach(t),E5o=r(Gwe," \u2014 "),hI=n(Gwe,"A",{href:!0});var QJr=s(hI);C5o=r(QJr,"ProphetNetForCausalLM"),QJr.forEach(t),w5o=r(Gwe," (ProphetNet model)"),Gwe.forEach(t),A5o=i(q),Hu=n(q,"LI",{});var Owe=s(Hu);hne=n(Owe,"STRONG",{});var WJr=s(hne);y5o=r(WJr,"qdqbert"),WJr.forEach(t),L5o=r(Owe," \u2014 "),pI=n(Owe,"A",{href:!0});var HJr=s(pI);x5o=r(HJr,"QDQBertLMHeadModel"),HJr.forEach(t),k5o=r(Owe," (QDQBert model)"),Owe.forEach(t),S5o=i(q),Uu=n(q,"LI",{});var Vwe=s(Uu);pne=n(Vwe,"STRONG",{});var UJr=s(pne);R5o=r(UJr,"reformer"),UJr.forEach(t),B5o=r(Vwe," \u2014 "),_I=n(Vwe,"A",{href:!0});var JJr=s(_I);P5o=r(JJr,"ReformerModelWithLMHead"),JJr.forEach(t),$5o=r(Vwe," (Reformer model)"),Vwe.forEach(t),I5o=i(q),Ju=n(q,"LI",{});var Xwe=s(Ju);_ne=n(Xwe,"STRONG",{});var YJr=s(_ne);q5o=r(YJr,"rembert"),YJr.forEach(t),N5o=r(Xwe," \u2014 "),uI=n(Xwe,"A",{href:!0});var KJr=s(uI);j5o=r(KJr,"RemBertForCausalLM"),KJr.forEach(t),D5o=r(Xwe," (RemBERT model)"),Xwe.forEach(t),G5o=i(q),Yu=n(q,"LI",{});var zwe=s(Yu);une=n(zwe,"STRONG",{});var ZJr=s(une);O5o=r(ZJr,"roberta"),ZJr.forEach(t),V5o=r(zwe," \u2014 "),bI=n(zwe,"A",{href:!0});var eYr=s(bI);X5o=r(eYr,"RobertaForCausalLM"),eYr.forEach(t),z5o=r(zwe," (RoBERTa model)"),zwe.forEach(t),Q5o=i(q),Ku=n(q,"LI",{});var Qwe=s(Ku);bne=n(Qwe,"STRONG",{});var oYr=s(bne);W5o=r(oYr,"roformer"),oYr.forEach(t),H5o=r(Qwe," \u2014 "),FI=n(Qwe,"A",{href:!0});var rYr=s(FI);U5o=r(rYr,"RoFormerForCausalLM"),rYr.forEach(t),J5o=r(Qwe," (RoFormer model)"),Qwe.forEach(t),Y5o=i(q),Zu=n(q,"LI",{});var Wwe=s(Zu);Fne=n(Wwe,"STRONG",{});var tYr=s(Fne);K5o=r(tYr,"speech_to_text_2"),tYr.forEach(t),Z5o=r(Wwe," \u2014 "),vI=n(Wwe,"A",{href:!0});var aYr=s(vI);e2o=r(aYr,"Speech2Text2ForCausalLM"),aYr.forEach(t),o2o=r(Wwe," (Speech2Text2 model)"),Wwe.forEach(t),r2o=i(q),e6=n(q,"LI",{});var Hwe=s(e6);vne=n(Hwe,"STRONG",{});var nYr=s(vne);t2o=r(nYr,"transfo-xl"),nYr.forEach(t),a2o=r(Hwe," \u2014 "),TI=n(Hwe,"A",{href:!0});var sYr=s(TI);n2o=r(sYr,"TransfoXLLMHeadModel"),sYr.forEach(t),s2o=r(Hwe," (Transformer-XL model)"),Hwe.forEach(t),l2o=i(q),o6=n(q,"LI",{});var Uwe=s(o6);Tne=n(Uwe,"STRONG",{});var lYr=s(Tne);i2o=r(lYr,"trocr"),lYr.forEach(t),d2o=r(Uwe," \u2014 "),MI=n(Uwe,"A",{href:!0});var iYr=s(MI);c2o=r(iYr,"TrOCRForCausalLM"),iYr.forEach(t),f2o=r(Uwe," (TrOCR model)"),Uwe.forEach(t),m2o=i(q),r6=n(q,"LI",{});var Jwe=s(r6);Mne=n(Jwe,"STRONG",{});var dYr=s(Mne);g2o=r(dYr,"xglm"),dYr.forEach(t),h2o=r(Jwe," \u2014 "),EI=n(Jwe,"A",{href:!0});var cYr=s(EI);p2o=r(cYr,"XGLMForCausalLM"),cYr.forEach(t),_2o=r(Jwe," (XGLM model)"),Jwe.forEach(t),u2o=i(q),t6=n(q,"LI",{});var Ywe=s(t6);Ene=n(Ywe,"STRONG",{});var fYr=s(Ene);b2o=r(fYr,"xlm"),fYr.forEach(t),F2o=r(Ywe," \u2014 "),CI=n(Ywe,"A",{href:!0});var mYr=s(CI);v2o=r(mYr,"XLMWithLMHeadModel"),mYr.forEach(t),T2o=r(Ywe," (XLM model)"),Ywe.forEach(t),M2o=i(q),a6=n(q,"LI",{});var Kwe=s(a6);Cne=n(Kwe,"STRONG",{});var gYr=s(Cne);E2o=r(gYr,"xlm-prophetnet"),gYr.forEach(t),C2o=r(Kwe," \u2014 "),wI=n(Kwe,"A",{href:!0});var hYr=s(wI);w2o=r(hYr,"XLMProphetNetForCausalLM"),hYr.forEach(t),A2o=r(Kwe," (XLMProphetNet model)"),Kwe.forEach(t),y2o=i(q),n6=n(q,"LI",{});var Zwe=s(n6);wne=n(Zwe,"STRONG",{});var pYr=s(wne);L2o=r(pYr,"xlm-roberta"),pYr.forEach(t),x2o=r(Zwe," \u2014 "),AI=n(Zwe,"A",{href:!0});var _Yr=s(AI);k2o=r(_Yr,"XLMRobertaForCausalLM"),_Yr.forEach(t),S2o=r(Zwe," (XLM-RoBERTa model)"),Zwe.forEach(t),R2o=i(q),s6=n(q,"LI",{});var eAe=s(s6);Ane=n(eAe,"STRONG",{});var uYr=s(Ane);B2o=r(uYr,"xlm-roberta-xl"),uYr.forEach(t),P2o=r(eAe," \u2014 "),yI=n(eAe,"A",{href:!0});var bYr=s(yI);$2o=r(bYr,"XLMRobertaXLForCausalLM"),bYr.forEach(t),I2o=r(eAe," (XLM-RoBERTa-XL model)"),eAe.forEach(t),q2o=i(q),l6=n(q,"LI",{});var oAe=s(l6);yne=n(oAe,"STRONG",{});var FYr=s(yne);N2o=r(FYr,"xlnet"),FYr.forEach(t),j2o=r(oAe," \u2014 "),LI=n(oAe,"A",{href:!0});var vYr=s(LI);D2o=r(vYr,"XLNetLMHeadModel"),vYr.forEach(t),G2o=r(oAe," (XLNet model)"),oAe.forEach(t),q.forEach(t),O2o=i(Ot),i6=n(Ot,"P",{});var rAe=s(i6);V2o=r(rAe,"The model is set in evaluation mode by default using "),Lne=n(rAe,"CODE",{});var TYr=s(Lne);X2o=r(TYr,"model.eval()"),TYr.forEach(t),z2o=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xne=n(rAe,"CODE",{});var MYr=s(xne);Q2o=r(MYr,"model.train()"),MYr.forEach(t),rAe.forEach(t),W2o=i(Ot),kne=n(Ot,"P",{});var EYr=s(kne);H2o=r(EYr,"Examples:"),EYr.forEach(t),U2o=i(Ot),m(yw.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),JRe=i(c),nd=n(c,"H2",{class:!0});var n$e=s(nd);d6=n(n$e,"A",{id:!0,class:!0,href:!0});var CYr=s(d6);Sne=n(CYr,"SPAN",{});var wYr=s(Sne);m(Lw.$$.fragment,wYr),wYr.forEach(t),CYr.forEach(t),J2o=i(n$e),Rne=n(n$e,"SPAN",{});var AYr=s(Rne);Y2o=r(AYr,"AutoModelForMaskedLM"),AYr.forEach(t),n$e.forEach(t),YRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(xw.$$.fragment,Ks),K2o=i(Ks),sd=n(Ks,"P",{});var wU=s(sd);Z2o=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),xI=n(wU,"A",{href:!0});var yYr=s(xI);eFo=r(yYr,"from_pretrained()"),yYr.forEach(t),oFo=r(wU," class method or the "),kI=n(wU,"A",{href:!0});var LYr=s(kI);rFo=r(LYr,"from_config()"),LYr.forEach(t),tFo=r(wU,` class
method.`),wU.forEach(t),aFo=i(Ks),kw=n(Ks,"P",{});var s$e=s(kw);nFo=r(s$e,"This class cannot be instantiated directly using "),Bne=n(s$e,"CODE",{});var xYr=s(Bne);sFo=r(xYr,"__init__()"),xYr.forEach(t),lFo=r(s$e," (throws an error)."),s$e.forEach(t),iFo=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(Sw.$$.fragment,Zs),dFo=i(Zs),Pne=n(Zs,"P",{});var kYr=s(Pne);cFo=r(kYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kYr.forEach(t),fFo=i(Zs),ld=n(Zs,"P",{});var AU=s(ld);mFo=r(AU,`Note:
Loading a model from its configuration file does `),$ne=n(AU,"STRONG",{});var SYr=s($ne);gFo=r(SYr,"not"),SYr.forEach(t),hFo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),SI=n(AU,"A",{href:!0});var RYr=s(SI);pFo=r(RYr,"from_pretrained()"),RYr.forEach(t),_Fo=r(AU," to load the model weights."),AU.forEach(t),uFo=i(Zs),Ine=n(Zs,"P",{});var BYr=s(Ine);bFo=r(BYr,"Examples:"),BYr.forEach(t),FFo=i(Zs),m(Rw.$$.fragment,Zs),Zs.forEach(t),vFo=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(Bw.$$.fragment,Vt),TFo=i(Vt),qne=n(Vt,"P",{});var PYr=s(qne);MFo=r(PYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PYr.forEach(t),EFo=i(Vt),Wa=n(Vt,"P",{});var P3=s(Wa);CFo=r(P3,"The model class to instantiate is selected based on the "),Nne=n(P3,"CODE",{});var $Yr=s(Nne);wFo=r($Yr,"model_type"),$Yr.forEach(t),AFo=r(P3,` property of the config object (either
passed as an argument or loaded from `),jne=n(P3,"CODE",{});var IYr=s(jne);yFo=r(IYr,"pretrained_model_name_or_path"),IYr.forEach(t),LFo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dne=n(P3,"CODE",{});var qYr=s(Dne);xFo=r(qYr,"pretrained_model_name_or_path"),qYr.forEach(t),kFo=r(P3,":"),P3.forEach(t),SFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);c6=n(N,"LI",{});var tAe=s(c6);Gne=n(tAe,"STRONG",{});var NYr=s(Gne);RFo=r(NYr,"albert"),NYr.forEach(t),BFo=r(tAe," \u2014 "),RI=n(tAe,"A",{href:!0});var jYr=s(RI);PFo=r(jYr,"AlbertForMaskedLM"),jYr.forEach(t),$Fo=r(tAe," (ALBERT model)"),tAe.forEach(t),IFo=i(N),f6=n(N,"LI",{});var aAe=s(f6);One=n(aAe,"STRONG",{});var DYr=s(One);qFo=r(DYr,"bart"),DYr.forEach(t),NFo=r(aAe," \u2014 "),BI=n(aAe,"A",{href:!0});var GYr=s(BI);jFo=r(GYr,"BartForConditionalGeneration"),GYr.forEach(t),DFo=r(aAe," (BART model)"),aAe.forEach(t),GFo=i(N),m6=n(N,"LI",{});var nAe=s(m6);Vne=n(nAe,"STRONG",{});var OYr=s(Vne);OFo=r(OYr,"bert"),OYr.forEach(t),VFo=r(nAe," \u2014 "),PI=n(nAe,"A",{href:!0});var VYr=s(PI);XFo=r(VYr,"BertForMaskedLM"),VYr.forEach(t),zFo=r(nAe," (BERT model)"),nAe.forEach(t),QFo=i(N),g6=n(N,"LI",{});var sAe=s(g6);Xne=n(sAe,"STRONG",{});var XYr=s(Xne);WFo=r(XYr,"big_bird"),XYr.forEach(t),HFo=r(sAe," \u2014 "),$I=n(sAe,"A",{href:!0});var zYr=s($I);UFo=r(zYr,"BigBirdForMaskedLM"),zYr.forEach(t),JFo=r(sAe," (BigBird model)"),sAe.forEach(t),YFo=i(N),h6=n(N,"LI",{});var lAe=s(h6);zne=n(lAe,"STRONG",{});var QYr=s(zne);KFo=r(QYr,"camembert"),QYr.forEach(t),ZFo=r(lAe," \u2014 "),II=n(lAe,"A",{href:!0});var WYr=s(II);evo=r(WYr,"CamembertForMaskedLM"),WYr.forEach(t),ovo=r(lAe," (CamemBERT model)"),lAe.forEach(t),rvo=i(N),p6=n(N,"LI",{});var iAe=s(p6);Qne=n(iAe,"STRONG",{});var HYr=s(Qne);tvo=r(HYr,"convbert"),HYr.forEach(t),avo=r(iAe," \u2014 "),qI=n(iAe,"A",{href:!0});var UYr=s(qI);nvo=r(UYr,"ConvBertForMaskedLM"),UYr.forEach(t),svo=r(iAe," (ConvBERT model)"),iAe.forEach(t),lvo=i(N),_6=n(N,"LI",{});var dAe=s(_6);Wne=n(dAe,"STRONG",{});var JYr=s(Wne);ivo=r(JYr,"data2vec-text"),JYr.forEach(t),dvo=r(dAe," \u2014 "),NI=n(dAe,"A",{href:!0});var YYr=s(NI);cvo=r(YYr,"Data2VecTextForMaskedLM"),YYr.forEach(t),fvo=r(dAe," (Data2VecText model)"),dAe.forEach(t),mvo=i(N),u6=n(N,"LI",{});var cAe=s(u6);Hne=n(cAe,"STRONG",{});var KYr=s(Hne);gvo=r(KYr,"deberta"),KYr.forEach(t),hvo=r(cAe," \u2014 "),jI=n(cAe,"A",{href:!0});var ZYr=s(jI);pvo=r(ZYr,"DebertaForMaskedLM"),ZYr.forEach(t),_vo=r(cAe," (DeBERTa model)"),cAe.forEach(t),uvo=i(N),b6=n(N,"LI",{});var fAe=s(b6);Une=n(fAe,"STRONG",{});var eKr=s(Une);bvo=r(eKr,"deberta-v2"),eKr.forEach(t),Fvo=r(fAe," \u2014 "),DI=n(fAe,"A",{href:!0});var oKr=s(DI);vvo=r(oKr,"DebertaV2ForMaskedLM"),oKr.forEach(t),Tvo=r(fAe," (DeBERTa-v2 model)"),fAe.forEach(t),Mvo=i(N),F6=n(N,"LI",{});var mAe=s(F6);Jne=n(mAe,"STRONG",{});var rKr=s(Jne);Evo=r(rKr,"distilbert"),rKr.forEach(t),Cvo=r(mAe," \u2014 "),GI=n(mAe,"A",{href:!0});var tKr=s(GI);wvo=r(tKr,"DistilBertForMaskedLM"),tKr.forEach(t),Avo=r(mAe," (DistilBERT model)"),mAe.forEach(t),yvo=i(N),v6=n(N,"LI",{});var gAe=s(v6);Yne=n(gAe,"STRONG",{});var aKr=s(Yne);Lvo=r(aKr,"electra"),aKr.forEach(t),xvo=r(gAe," \u2014 "),OI=n(gAe,"A",{href:!0});var nKr=s(OI);kvo=r(nKr,"ElectraForMaskedLM"),nKr.forEach(t),Svo=r(gAe," (ELECTRA model)"),gAe.forEach(t),Rvo=i(N),T6=n(N,"LI",{});var hAe=s(T6);Kne=n(hAe,"STRONG",{});var sKr=s(Kne);Bvo=r(sKr,"flaubert"),sKr.forEach(t),Pvo=r(hAe," \u2014 "),VI=n(hAe,"A",{href:!0});var lKr=s(VI);$vo=r(lKr,"FlaubertWithLMHeadModel"),lKr.forEach(t),Ivo=r(hAe," (FlauBERT model)"),hAe.forEach(t),qvo=i(N),M6=n(N,"LI",{});var pAe=s(M6);Zne=n(pAe,"STRONG",{});var iKr=s(Zne);Nvo=r(iKr,"fnet"),iKr.forEach(t),jvo=r(pAe," \u2014 "),XI=n(pAe,"A",{href:!0});var dKr=s(XI);Dvo=r(dKr,"FNetForMaskedLM"),dKr.forEach(t),Gvo=r(pAe," (FNet model)"),pAe.forEach(t),Ovo=i(N),E6=n(N,"LI",{});var _Ae=s(E6);ese=n(_Ae,"STRONG",{});var cKr=s(ese);Vvo=r(cKr,"funnel"),cKr.forEach(t),Xvo=r(_Ae," \u2014 "),zI=n(_Ae,"A",{href:!0});var fKr=s(zI);zvo=r(fKr,"FunnelForMaskedLM"),fKr.forEach(t),Qvo=r(_Ae," (Funnel Transformer model)"),_Ae.forEach(t),Wvo=i(N),C6=n(N,"LI",{});var uAe=s(C6);ose=n(uAe,"STRONG",{});var mKr=s(ose);Hvo=r(mKr,"ibert"),mKr.forEach(t),Uvo=r(uAe," \u2014 "),QI=n(uAe,"A",{href:!0});var gKr=s(QI);Jvo=r(gKr,"IBertForMaskedLM"),gKr.forEach(t),Yvo=r(uAe," (I-BERT model)"),uAe.forEach(t),Kvo=i(N),w6=n(N,"LI",{});var bAe=s(w6);rse=n(bAe,"STRONG",{});var hKr=s(rse);Zvo=r(hKr,"layoutlm"),hKr.forEach(t),eTo=r(bAe," \u2014 "),WI=n(bAe,"A",{href:!0});var pKr=s(WI);oTo=r(pKr,"LayoutLMForMaskedLM"),pKr.forEach(t),rTo=r(bAe," (LayoutLM model)"),bAe.forEach(t),tTo=i(N),A6=n(N,"LI",{});var FAe=s(A6);tse=n(FAe,"STRONG",{});var _Kr=s(tse);aTo=r(_Kr,"longformer"),_Kr.forEach(t),nTo=r(FAe," \u2014 "),HI=n(FAe,"A",{href:!0});var uKr=s(HI);sTo=r(uKr,"LongformerForMaskedLM"),uKr.forEach(t),lTo=r(FAe," (Longformer model)"),FAe.forEach(t),iTo=i(N),y6=n(N,"LI",{});var vAe=s(y6);ase=n(vAe,"STRONG",{});var bKr=s(ase);dTo=r(bKr,"mbart"),bKr.forEach(t),cTo=r(vAe," \u2014 "),UI=n(vAe,"A",{href:!0});var FKr=s(UI);fTo=r(FKr,"MBartForConditionalGeneration"),FKr.forEach(t),mTo=r(vAe," (mBART model)"),vAe.forEach(t),gTo=i(N),L6=n(N,"LI",{});var TAe=s(L6);nse=n(TAe,"STRONG",{});var vKr=s(nse);hTo=r(vKr,"megatron-bert"),vKr.forEach(t),pTo=r(TAe," \u2014 "),JI=n(TAe,"A",{href:!0});var TKr=s(JI);_To=r(TKr,"MegatronBertForMaskedLM"),TKr.forEach(t),uTo=r(TAe," (MegatronBert model)"),TAe.forEach(t),bTo=i(N),x6=n(N,"LI",{});var MAe=s(x6);sse=n(MAe,"STRONG",{});var MKr=s(sse);FTo=r(MKr,"mobilebert"),MKr.forEach(t),vTo=r(MAe," \u2014 "),YI=n(MAe,"A",{href:!0});var EKr=s(YI);TTo=r(EKr,"MobileBertForMaskedLM"),EKr.forEach(t),MTo=r(MAe," (MobileBERT model)"),MAe.forEach(t),ETo=i(N),k6=n(N,"LI",{});var EAe=s(k6);lse=n(EAe,"STRONG",{});var CKr=s(lse);CTo=r(CKr,"mpnet"),CKr.forEach(t),wTo=r(EAe," \u2014 "),KI=n(EAe,"A",{href:!0});var wKr=s(KI);ATo=r(wKr,"MPNetForMaskedLM"),wKr.forEach(t),yTo=r(EAe," (MPNet model)"),EAe.forEach(t),LTo=i(N),S6=n(N,"LI",{});var CAe=s(S6);ise=n(CAe,"STRONG",{});var AKr=s(ise);xTo=r(AKr,"nystromformer"),AKr.forEach(t),kTo=r(CAe," \u2014 "),ZI=n(CAe,"A",{href:!0});var yKr=s(ZI);STo=r(yKr,"NystromformerForMaskedLM"),yKr.forEach(t),RTo=r(CAe," (Nystromformer model)"),CAe.forEach(t),BTo=i(N),R6=n(N,"LI",{});var wAe=s(R6);dse=n(wAe,"STRONG",{});var LKr=s(dse);PTo=r(LKr,"perceiver"),LKr.forEach(t),$To=r(wAe," \u2014 "),eq=n(wAe,"A",{href:!0});var xKr=s(eq);ITo=r(xKr,"PerceiverForMaskedLM"),xKr.forEach(t),qTo=r(wAe," (Perceiver model)"),wAe.forEach(t),NTo=i(N),B6=n(N,"LI",{});var AAe=s(B6);cse=n(AAe,"STRONG",{});var kKr=s(cse);jTo=r(kKr,"qdqbert"),kKr.forEach(t),DTo=r(AAe," \u2014 "),oq=n(AAe,"A",{href:!0});var SKr=s(oq);GTo=r(SKr,"QDQBertForMaskedLM"),SKr.forEach(t),OTo=r(AAe," (QDQBert model)"),AAe.forEach(t),VTo=i(N),P6=n(N,"LI",{});var yAe=s(P6);fse=n(yAe,"STRONG",{});var RKr=s(fse);XTo=r(RKr,"reformer"),RKr.forEach(t),zTo=r(yAe," \u2014 "),rq=n(yAe,"A",{href:!0});var BKr=s(rq);QTo=r(BKr,"ReformerForMaskedLM"),BKr.forEach(t),WTo=r(yAe," (Reformer model)"),yAe.forEach(t),HTo=i(N),$6=n(N,"LI",{});var LAe=s($6);mse=n(LAe,"STRONG",{});var PKr=s(mse);UTo=r(PKr,"rembert"),PKr.forEach(t),JTo=r(LAe," \u2014 "),tq=n(LAe,"A",{href:!0});var $Kr=s(tq);YTo=r($Kr,"RemBertForMaskedLM"),$Kr.forEach(t),KTo=r(LAe," (RemBERT model)"),LAe.forEach(t),ZTo=i(N),I6=n(N,"LI",{});var xAe=s(I6);gse=n(xAe,"STRONG",{});var IKr=s(gse);eMo=r(IKr,"roberta"),IKr.forEach(t),oMo=r(xAe," \u2014 "),aq=n(xAe,"A",{href:!0});var qKr=s(aq);rMo=r(qKr,"RobertaForMaskedLM"),qKr.forEach(t),tMo=r(xAe," (RoBERTa model)"),xAe.forEach(t),aMo=i(N),q6=n(N,"LI",{});var kAe=s(q6);hse=n(kAe,"STRONG",{});var NKr=s(hse);nMo=r(NKr,"roformer"),NKr.forEach(t),sMo=r(kAe," \u2014 "),nq=n(kAe,"A",{href:!0});var jKr=s(nq);lMo=r(jKr,"RoFormerForMaskedLM"),jKr.forEach(t),iMo=r(kAe," (RoFormer model)"),kAe.forEach(t),dMo=i(N),N6=n(N,"LI",{});var SAe=s(N6);pse=n(SAe,"STRONG",{});var DKr=s(pse);cMo=r(DKr,"squeezebert"),DKr.forEach(t),fMo=r(SAe," \u2014 "),sq=n(SAe,"A",{href:!0});var GKr=s(sq);mMo=r(GKr,"SqueezeBertForMaskedLM"),GKr.forEach(t),gMo=r(SAe," (SqueezeBERT model)"),SAe.forEach(t),hMo=i(N),j6=n(N,"LI",{});var RAe=s(j6);_se=n(RAe,"STRONG",{});var OKr=s(_se);pMo=r(OKr,"tapas"),OKr.forEach(t),_Mo=r(RAe," \u2014 "),lq=n(RAe,"A",{href:!0});var VKr=s(lq);uMo=r(VKr,"TapasForMaskedLM"),VKr.forEach(t),bMo=r(RAe," (TAPAS model)"),RAe.forEach(t),FMo=i(N),D6=n(N,"LI",{});var BAe=s(D6);use=n(BAe,"STRONG",{});var XKr=s(use);vMo=r(XKr,"wav2vec2"),XKr.forEach(t),TMo=r(BAe," \u2014 "),bse=n(BAe,"CODE",{});var zKr=s(bse);MMo=r(zKr,"Wav2Vec2ForMaskedLM"),zKr.forEach(t),EMo=r(BAe," (Wav2Vec2 model)"),BAe.forEach(t),CMo=i(N),G6=n(N,"LI",{});var PAe=s(G6);Fse=n(PAe,"STRONG",{});var QKr=s(Fse);wMo=r(QKr,"xlm"),QKr.forEach(t),AMo=r(PAe," \u2014 "),iq=n(PAe,"A",{href:!0});var WKr=s(iq);yMo=r(WKr,"XLMWithLMHeadModel"),WKr.forEach(t),LMo=r(PAe," (XLM model)"),PAe.forEach(t),xMo=i(N),O6=n(N,"LI",{});var $Ae=s(O6);vse=n($Ae,"STRONG",{});var HKr=s(vse);kMo=r(HKr,"xlm-roberta"),HKr.forEach(t),SMo=r($Ae," \u2014 "),dq=n($Ae,"A",{href:!0});var UKr=s(dq);RMo=r(UKr,"XLMRobertaForMaskedLM"),UKr.forEach(t),BMo=r($Ae," (XLM-RoBERTa model)"),$Ae.forEach(t),PMo=i(N),V6=n(N,"LI",{});var IAe=s(V6);Tse=n(IAe,"STRONG",{});var JKr=s(Tse);$Mo=r(JKr,"xlm-roberta-xl"),JKr.forEach(t),IMo=r(IAe," \u2014 "),cq=n(IAe,"A",{href:!0});var YKr=s(cq);qMo=r(YKr,"XLMRobertaXLForMaskedLM"),YKr.forEach(t),NMo=r(IAe," (XLM-RoBERTa-XL model)"),IAe.forEach(t),jMo=i(N),X6=n(N,"LI",{});var qAe=s(X6);Mse=n(qAe,"STRONG",{});var KKr=s(Mse);DMo=r(KKr,"yoso"),KKr.forEach(t),GMo=r(qAe," \u2014 "),fq=n(qAe,"A",{href:!0});var ZKr=s(fq);OMo=r(ZKr,"YosoForMaskedLM"),ZKr.forEach(t),VMo=r(qAe," (YOSO model)"),qAe.forEach(t),N.forEach(t),XMo=i(Vt),z6=n(Vt,"P",{});var NAe=s(z6);zMo=r(NAe,"The model is set in evaluation mode by default using "),Ese=n(NAe,"CODE",{});var eZr=s(Ese);QMo=r(eZr,"model.eval()"),eZr.forEach(t),WMo=r(NAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=n(NAe,"CODE",{});var oZr=s(Cse);HMo=r(oZr,"model.train()"),oZr.forEach(t),NAe.forEach(t),UMo=i(Vt),wse=n(Vt,"P",{});var rZr=s(wse);JMo=r(rZr,"Examples:"),rZr.forEach(t),YMo=i(Vt),m(Pw.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),KRe=i(c),id=n(c,"H2",{class:!0});var l$e=s(id);Q6=n(l$e,"A",{id:!0,class:!0,href:!0});var tZr=s(Q6);Ase=n(tZr,"SPAN",{});var aZr=s(Ase);m($w.$$.fragment,aZr),aZr.forEach(t),tZr.forEach(t),KMo=i(l$e),yse=n(l$e,"SPAN",{});var nZr=s(yse);ZMo=r(nZr,"AutoModelForSeq2SeqLM"),nZr.forEach(t),l$e.forEach(t),ZRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(Iw.$$.fragment,el),eEo=i(el),dd=n(el,"P",{});var yU=s(dd);oEo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mq=n(yU,"A",{href:!0});var sZr=s(mq);rEo=r(sZr,"from_pretrained()"),sZr.forEach(t),tEo=r(yU," class method or the "),gq=n(yU,"A",{href:!0});var lZr=s(gq);aEo=r(lZr,"from_config()"),lZr.forEach(t),nEo=r(yU,` class
method.`),yU.forEach(t),sEo=i(el),qw=n(el,"P",{});var i$e=s(qw);lEo=r(i$e,"This class cannot be instantiated directly using "),Lse=n(i$e,"CODE",{});var iZr=s(Lse);iEo=r(iZr,"__init__()"),iZr.forEach(t),dEo=r(i$e," (throws an error)."),i$e.forEach(t),cEo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(Nw.$$.fragment,ol),fEo=i(ol),xse=n(ol,"P",{});var dZr=s(xse);mEo=r(dZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dZr.forEach(t),gEo=i(ol),cd=n(ol,"P",{});var LU=s(cd);hEo=r(LU,`Note:
Loading a model from its configuration file does `),kse=n(LU,"STRONG",{});var cZr=s(kse);pEo=r(cZr,"not"),cZr.forEach(t),_Eo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=n(LU,"A",{href:!0});var fZr=s(hq);uEo=r(fZr,"from_pretrained()"),fZr.forEach(t),bEo=r(LU," to load the model weights."),LU.forEach(t),FEo=i(ol),Sse=n(ol,"P",{});var mZr=s(Sse);vEo=r(mZr,"Examples:"),mZr.forEach(t),TEo=i(ol),m(jw.$$.fragment,ol),ol.forEach(t),MEo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(Dw.$$.fragment,Xt),EEo=i(Xt),Rse=n(Xt,"P",{});var gZr=s(Rse);CEo=r(gZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gZr.forEach(t),wEo=i(Xt),Ha=n(Xt,"P",{});var $3=s(Ha);AEo=r($3,"The model class to instantiate is selected based on the "),Bse=n($3,"CODE",{});var hZr=s(Bse);yEo=r(hZr,"model_type"),hZr.forEach(t),LEo=r($3,` property of the config object (either
passed as an argument or loaded from `),Pse=n($3,"CODE",{});var pZr=s(Pse);xEo=r(pZr,"pretrained_model_name_or_path"),pZr.forEach(t),kEo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n($3,"CODE",{});var _Zr=s($se);SEo=r(_Zr,"pretrained_model_name_or_path"),_Zr.forEach(t),REo=r($3,":"),$3.forEach(t),BEo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);W6=n(le,"LI",{});var jAe=s(W6);Ise=n(jAe,"STRONG",{});var uZr=s(Ise);PEo=r(uZr,"bart"),uZr.forEach(t),$Eo=r(jAe," \u2014 "),pq=n(jAe,"A",{href:!0});var bZr=s(pq);IEo=r(bZr,"BartForConditionalGeneration"),bZr.forEach(t),qEo=r(jAe," (BART model)"),jAe.forEach(t),NEo=i(le),H6=n(le,"LI",{});var DAe=s(H6);qse=n(DAe,"STRONG",{});var FZr=s(qse);jEo=r(FZr,"bigbird_pegasus"),FZr.forEach(t),DEo=r(DAe," \u2014 "),_q=n(DAe,"A",{href:!0});var vZr=s(_q);GEo=r(vZr,"BigBirdPegasusForConditionalGeneration"),vZr.forEach(t),OEo=r(DAe," (BigBirdPegasus model)"),DAe.forEach(t),VEo=i(le),U6=n(le,"LI",{});var GAe=s(U6);Nse=n(GAe,"STRONG",{});var TZr=s(Nse);XEo=r(TZr,"blenderbot"),TZr.forEach(t),zEo=r(GAe," \u2014 "),uq=n(GAe,"A",{href:!0});var MZr=s(uq);QEo=r(MZr,"BlenderbotForConditionalGeneration"),MZr.forEach(t),WEo=r(GAe," (Blenderbot model)"),GAe.forEach(t),HEo=i(le),J6=n(le,"LI",{});var OAe=s(J6);jse=n(OAe,"STRONG",{});var EZr=s(jse);UEo=r(EZr,"blenderbot-small"),EZr.forEach(t),JEo=r(OAe," \u2014 "),bq=n(OAe,"A",{href:!0});var CZr=s(bq);YEo=r(CZr,"BlenderbotSmallForConditionalGeneration"),CZr.forEach(t),KEo=r(OAe," (BlenderbotSmall model)"),OAe.forEach(t),ZEo=i(le),Y6=n(le,"LI",{});var VAe=s(Y6);Dse=n(VAe,"STRONG",{});var wZr=s(Dse);e3o=r(wZr,"encoder-decoder"),wZr.forEach(t),o3o=r(VAe," \u2014 "),Fq=n(VAe,"A",{href:!0});var AZr=s(Fq);r3o=r(AZr,"EncoderDecoderModel"),AZr.forEach(t),t3o=r(VAe," (Encoder decoder model)"),VAe.forEach(t),a3o=i(le),K6=n(le,"LI",{});var XAe=s(K6);Gse=n(XAe,"STRONG",{});var yZr=s(Gse);n3o=r(yZr,"fsmt"),yZr.forEach(t),s3o=r(XAe," \u2014 "),vq=n(XAe,"A",{href:!0});var LZr=s(vq);l3o=r(LZr,"FSMTForConditionalGeneration"),LZr.forEach(t),i3o=r(XAe," (FairSeq Machine-Translation model)"),XAe.forEach(t),d3o=i(le),Z6=n(le,"LI",{});var zAe=s(Z6);Ose=n(zAe,"STRONG",{});var xZr=s(Ose);c3o=r(xZr,"led"),xZr.forEach(t),f3o=r(zAe," \u2014 "),Tq=n(zAe,"A",{href:!0});var kZr=s(Tq);m3o=r(kZr,"LEDForConditionalGeneration"),kZr.forEach(t),g3o=r(zAe," (LED model)"),zAe.forEach(t),h3o=i(le),e1=n(le,"LI",{});var QAe=s(e1);Vse=n(QAe,"STRONG",{});var SZr=s(Vse);p3o=r(SZr,"m2m_100"),SZr.forEach(t),_3o=r(QAe," \u2014 "),Mq=n(QAe,"A",{href:!0});var RZr=s(Mq);u3o=r(RZr,"M2M100ForConditionalGeneration"),RZr.forEach(t),b3o=r(QAe," (M2M100 model)"),QAe.forEach(t),F3o=i(le),o1=n(le,"LI",{});var WAe=s(o1);Xse=n(WAe,"STRONG",{});var BZr=s(Xse);v3o=r(BZr,"marian"),BZr.forEach(t),T3o=r(WAe," \u2014 "),Eq=n(WAe,"A",{href:!0});var PZr=s(Eq);M3o=r(PZr,"MarianMTModel"),PZr.forEach(t),E3o=r(WAe," (Marian model)"),WAe.forEach(t),C3o=i(le),r1=n(le,"LI",{});var HAe=s(r1);zse=n(HAe,"STRONG",{});var $Zr=s(zse);w3o=r($Zr,"mbart"),$Zr.forEach(t),A3o=r(HAe," \u2014 "),Cq=n(HAe,"A",{href:!0});var IZr=s(Cq);y3o=r(IZr,"MBartForConditionalGeneration"),IZr.forEach(t),L3o=r(HAe," (mBART model)"),HAe.forEach(t),x3o=i(le),t1=n(le,"LI",{});var UAe=s(t1);Qse=n(UAe,"STRONG",{});var qZr=s(Qse);k3o=r(qZr,"mt5"),qZr.forEach(t),S3o=r(UAe," \u2014 "),wq=n(UAe,"A",{href:!0});var NZr=s(wq);R3o=r(NZr,"MT5ForConditionalGeneration"),NZr.forEach(t),B3o=r(UAe," (mT5 model)"),UAe.forEach(t),P3o=i(le),a1=n(le,"LI",{});var JAe=s(a1);Wse=n(JAe,"STRONG",{});var jZr=s(Wse);$3o=r(jZr,"pegasus"),jZr.forEach(t),I3o=r(JAe," \u2014 "),Aq=n(JAe,"A",{href:!0});var DZr=s(Aq);q3o=r(DZr,"PegasusForConditionalGeneration"),DZr.forEach(t),N3o=r(JAe," (Pegasus model)"),JAe.forEach(t),j3o=i(le),n1=n(le,"LI",{});var YAe=s(n1);Hse=n(YAe,"STRONG",{});var GZr=s(Hse);D3o=r(GZr,"plbart"),GZr.forEach(t),G3o=r(YAe," \u2014 "),yq=n(YAe,"A",{href:!0});var OZr=s(yq);O3o=r(OZr,"PLBartForConditionalGeneration"),OZr.forEach(t),V3o=r(YAe," (PLBart model)"),YAe.forEach(t),X3o=i(le),s1=n(le,"LI",{});var KAe=s(s1);Use=n(KAe,"STRONG",{});var VZr=s(Use);z3o=r(VZr,"prophetnet"),VZr.forEach(t),Q3o=r(KAe," \u2014 "),Lq=n(KAe,"A",{href:!0});var XZr=s(Lq);W3o=r(XZr,"ProphetNetForConditionalGeneration"),XZr.forEach(t),H3o=r(KAe," (ProphetNet model)"),KAe.forEach(t),U3o=i(le),l1=n(le,"LI",{});var ZAe=s(l1);Jse=n(ZAe,"STRONG",{});var zZr=s(Jse);J3o=r(zZr,"t5"),zZr.forEach(t),Y3o=r(ZAe," \u2014 "),xq=n(ZAe,"A",{href:!0});var QZr=s(xq);K3o=r(QZr,"T5ForConditionalGeneration"),QZr.forEach(t),Z3o=r(ZAe," (T5 model)"),ZAe.forEach(t),eCo=i(le),i1=n(le,"LI",{});var e0e=s(i1);Yse=n(e0e,"STRONG",{});var WZr=s(Yse);oCo=r(WZr,"tapex"),WZr.forEach(t),rCo=r(e0e," \u2014 "),kq=n(e0e,"A",{href:!0});var HZr=s(kq);tCo=r(HZr,"BartForConditionalGeneration"),HZr.forEach(t),aCo=r(e0e," (TAPEX model)"),e0e.forEach(t),nCo=i(le),d1=n(le,"LI",{});var o0e=s(d1);Kse=n(o0e,"STRONG",{});var UZr=s(Kse);sCo=r(UZr,"xlm-prophetnet"),UZr.forEach(t),lCo=r(o0e," \u2014 "),Sq=n(o0e,"A",{href:!0});var JZr=s(Sq);iCo=r(JZr,"XLMProphetNetForConditionalGeneration"),JZr.forEach(t),dCo=r(o0e," (XLMProphetNet model)"),o0e.forEach(t),le.forEach(t),cCo=i(Xt),c1=n(Xt,"P",{});var r0e=s(c1);fCo=r(r0e,"The model is set in evaluation mode by default using "),Zse=n(r0e,"CODE",{});var YZr=s(Zse);mCo=r(YZr,"model.eval()"),YZr.forEach(t),gCo=r(r0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=n(r0e,"CODE",{});var KZr=s(ele);hCo=r(KZr,"model.train()"),KZr.forEach(t),r0e.forEach(t),pCo=i(Xt),ole=n(Xt,"P",{});var ZZr=s(ole);_Co=r(ZZr,"Examples:"),ZZr.forEach(t),uCo=i(Xt),m(Gw.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),eBe=i(c),fd=n(c,"H2",{class:!0});var d$e=s(fd);f1=n(d$e,"A",{id:!0,class:!0,href:!0});var eet=s(f1);rle=n(eet,"SPAN",{});var oet=s(rle);m(Ow.$$.fragment,oet),oet.forEach(t),eet.forEach(t),bCo=i(d$e),tle=n(d$e,"SPAN",{});var ret=s(tle);FCo=r(ret,"AutoModelForSequenceClassification"),ret.forEach(t),d$e.forEach(t),oBe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(Vw.$$.fragment,rl),vCo=i(rl),md=n(rl,"P",{});var xU=s(md);TCo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Rq=n(xU,"A",{href:!0});var tet=s(Rq);MCo=r(tet,"from_pretrained()"),tet.forEach(t),ECo=r(xU," class method or the "),Bq=n(xU,"A",{href:!0});var aet=s(Bq);CCo=r(aet,"from_config()"),aet.forEach(t),wCo=r(xU,` class
method.`),xU.forEach(t),ACo=i(rl),Xw=n(rl,"P",{});var c$e=s(Xw);yCo=r(c$e,"This class cannot be instantiated directly using "),ale=n(c$e,"CODE",{});var net=s(ale);LCo=r(net,"__init__()"),net.forEach(t),xCo=r(c$e," (throws an error)."),c$e.forEach(t),kCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(zw.$$.fragment,tl),SCo=i(tl),nle=n(tl,"P",{});var set=s(nle);RCo=r(set,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),set.forEach(t),BCo=i(tl),gd=n(tl,"P",{});var kU=s(gd);PCo=r(kU,`Note:
Loading a model from its configuration file does `),sle=n(kU,"STRONG",{});var iet=s(sle);$Co=r(iet,"not"),iet.forEach(t),ICo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pq=n(kU,"A",{href:!0});var det=s(Pq);qCo=r(det,"from_pretrained()"),det.forEach(t),NCo=r(kU," to load the model weights."),kU.forEach(t),jCo=i(tl),lle=n(tl,"P",{});var cet=s(lle);DCo=r(cet,"Examples:"),cet.forEach(t),GCo=i(tl),m(Qw.$$.fragment,tl),tl.forEach(t),OCo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(Ww.$$.fragment,zt),VCo=i(zt),ile=n(zt,"P",{});var fet=s(ile);XCo=r(fet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fet.forEach(t),zCo=i(zt),Ua=n(zt,"P",{});var I3=s(Ua);QCo=r(I3,"The model class to instantiate is selected based on the "),dle=n(I3,"CODE",{});var met=s(dle);WCo=r(met,"model_type"),met.forEach(t),HCo=r(I3,` property of the config object (either
passed as an argument or loaded from `),cle=n(I3,"CODE",{});var get=s(cle);UCo=r(get,"pretrained_model_name_or_path"),get.forEach(t),JCo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=n(I3,"CODE",{});var het=s(fle);YCo=r(het,"pretrained_model_name_or_path"),het.forEach(t),KCo=r(I3,":"),I3.forEach(t),ZCo=i(zt),y=n(zt,"UL",{});var L=s(y);m1=n(L,"LI",{});var t0e=s(m1);mle=n(t0e,"STRONG",{});var pet=s(mle);ewo=r(pet,"albert"),pet.forEach(t),owo=r(t0e," \u2014 "),$q=n(t0e,"A",{href:!0});var _et=s($q);rwo=r(_et,"AlbertForSequenceClassification"),_et.forEach(t),two=r(t0e," (ALBERT model)"),t0e.forEach(t),awo=i(L),g1=n(L,"LI",{});var a0e=s(g1);gle=n(a0e,"STRONG",{});var uet=s(gle);nwo=r(uet,"bart"),uet.forEach(t),swo=r(a0e," \u2014 "),Iq=n(a0e,"A",{href:!0});var bet=s(Iq);lwo=r(bet,"BartForSequenceClassification"),bet.forEach(t),iwo=r(a0e," (BART model)"),a0e.forEach(t),dwo=i(L),h1=n(L,"LI",{});var n0e=s(h1);hle=n(n0e,"STRONG",{});var Fet=s(hle);cwo=r(Fet,"bert"),Fet.forEach(t),fwo=r(n0e," \u2014 "),qq=n(n0e,"A",{href:!0});var vet=s(qq);mwo=r(vet,"BertForSequenceClassification"),vet.forEach(t),gwo=r(n0e," (BERT model)"),n0e.forEach(t),hwo=i(L),p1=n(L,"LI",{});var s0e=s(p1);ple=n(s0e,"STRONG",{});var Tet=s(ple);pwo=r(Tet,"big_bird"),Tet.forEach(t),_wo=r(s0e," \u2014 "),Nq=n(s0e,"A",{href:!0});var Met=s(Nq);uwo=r(Met,"BigBirdForSequenceClassification"),Met.forEach(t),bwo=r(s0e," (BigBird model)"),s0e.forEach(t),Fwo=i(L),_1=n(L,"LI",{});var l0e=s(_1);_le=n(l0e,"STRONG",{});var Eet=s(_le);vwo=r(Eet,"bigbird_pegasus"),Eet.forEach(t),Two=r(l0e," \u2014 "),jq=n(l0e,"A",{href:!0});var Cet=s(jq);Mwo=r(Cet,"BigBirdPegasusForSequenceClassification"),Cet.forEach(t),Ewo=r(l0e," (BigBirdPegasus model)"),l0e.forEach(t),Cwo=i(L),u1=n(L,"LI",{});var i0e=s(u1);ule=n(i0e,"STRONG",{});var wet=s(ule);wwo=r(wet,"camembert"),wet.forEach(t),Awo=r(i0e," \u2014 "),Dq=n(i0e,"A",{href:!0});var Aet=s(Dq);ywo=r(Aet,"CamembertForSequenceClassification"),Aet.forEach(t),Lwo=r(i0e," (CamemBERT model)"),i0e.forEach(t),xwo=i(L),b1=n(L,"LI",{});var d0e=s(b1);ble=n(d0e,"STRONG",{});var yet=s(ble);kwo=r(yet,"canine"),yet.forEach(t),Swo=r(d0e," \u2014 "),Gq=n(d0e,"A",{href:!0});var Let=s(Gq);Rwo=r(Let,"CanineForSequenceClassification"),Let.forEach(t),Bwo=r(d0e," (Canine model)"),d0e.forEach(t),Pwo=i(L),F1=n(L,"LI",{});var c0e=s(F1);Fle=n(c0e,"STRONG",{});var xet=s(Fle);$wo=r(xet,"convbert"),xet.forEach(t),Iwo=r(c0e," \u2014 "),Oq=n(c0e,"A",{href:!0});var ket=s(Oq);qwo=r(ket,"ConvBertForSequenceClassification"),ket.forEach(t),Nwo=r(c0e," (ConvBERT model)"),c0e.forEach(t),jwo=i(L),v1=n(L,"LI",{});var f0e=s(v1);vle=n(f0e,"STRONG",{});var Set=s(vle);Dwo=r(Set,"ctrl"),Set.forEach(t),Gwo=r(f0e," \u2014 "),Vq=n(f0e,"A",{href:!0});var Ret=s(Vq);Owo=r(Ret,"CTRLForSequenceClassification"),Ret.forEach(t),Vwo=r(f0e," (CTRL model)"),f0e.forEach(t),Xwo=i(L),T1=n(L,"LI",{});var m0e=s(T1);Tle=n(m0e,"STRONG",{});var Bet=s(Tle);zwo=r(Bet,"data2vec-text"),Bet.forEach(t),Qwo=r(m0e," \u2014 "),Xq=n(m0e,"A",{href:!0});var Pet=s(Xq);Wwo=r(Pet,"Data2VecTextForSequenceClassification"),Pet.forEach(t),Hwo=r(m0e," (Data2VecText model)"),m0e.forEach(t),Uwo=i(L),M1=n(L,"LI",{});var g0e=s(M1);Mle=n(g0e,"STRONG",{});var $et=s(Mle);Jwo=r($et,"deberta"),$et.forEach(t),Ywo=r(g0e," \u2014 "),zq=n(g0e,"A",{href:!0});var Iet=s(zq);Kwo=r(Iet,"DebertaForSequenceClassification"),Iet.forEach(t),Zwo=r(g0e," (DeBERTa model)"),g0e.forEach(t),eAo=i(L),E1=n(L,"LI",{});var h0e=s(E1);Ele=n(h0e,"STRONG",{});var qet=s(Ele);oAo=r(qet,"deberta-v2"),qet.forEach(t),rAo=r(h0e," \u2014 "),Qq=n(h0e,"A",{href:!0});var Net=s(Qq);tAo=r(Net,"DebertaV2ForSequenceClassification"),Net.forEach(t),aAo=r(h0e," (DeBERTa-v2 model)"),h0e.forEach(t),nAo=i(L),C1=n(L,"LI",{});var p0e=s(C1);Cle=n(p0e,"STRONG",{});var jet=s(Cle);sAo=r(jet,"distilbert"),jet.forEach(t),lAo=r(p0e," \u2014 "),Wq=n(p0e,"A",{href:!0});var Det=s(Wq);iAo=r(Det,"DistilBertForSequenceClassification"),Det.forEach(t),dAo=r(p0e," (DistilBERT model)"),p0e.forEach(t),cAo=i(L),w1=n(L,"LI",{});var _0e=s(w1);wle=n(_0e,"STRONG",{});var Get=s(wle);fAo=r(Get,"electra"),Get.forEach(t),mAo=r(_0e," \u2014 "),Hq=n(_0e,"A",{href:!0});var Oet=s(Hq);gAo=r(Oet,"ElectraForSequenceClassification"),Oet.forEach(t),hAo=r(_0e," (ELECTRA model)"),_0e.forEach(t),pAo=i(L),A1=n(L,"LI",{});var u0e=s(A1);Ale=n(u0e,"STRONG",{});var Vet=s(Ale);_Ao=r(Vet,"flaubert"),Vet.forEach(t),uAo=r(u0e," \u2014 "),Uq=n(u0e,"A",{href:!0});var Xet=s(Uq);bAo=r(Xet,"FlaubertForSequenceClassification"),Xet.forEach(t),FAo=r(u0e," (FlauBERT model)"),u0e.forEach(t),vAo=i(L),y1=n(L,"LI",{});var b0e=s(y1);yle=n(b0e,"STRONG",{});var zet=s(yle);TAo=r(zet,"fnet"),zet.forEach(t),MAo=r(b0e," \u2014 "),Jq=n(b0e,"A",{href:!0});var Qet=s(Jq);EAo=r(Qet,"FNetForSequenceClassification"),Qet.forEach(t),CAo=r(b0e," (FNet model)"),b0e.forEach(t),wAo=i(L),L1=n(L,"LI",{});var F0e=s(L1);Lle=n(F0e,"STRONG",{});var Wet=s(Lle);AAo=r(Wet,"funnel"),Wet.forEach(t),yAo=r(F0e," \u2014 "),Yq=n(F0e,"A",{href:!0});var Het=s(Yq);LAo=r(Het,"FunnelForSequenceClassification"),Het.forEach(t),xAo=r(F0e," (Funnel Transformer model)"),F0e.forEach(t),kAo=i(L),x1=n(L,"LI",{});var v0e=s(x1);xle=n(v0e,"STRONG",{});var Uet=s(xle);SAo=r(Uet,"gpt2"),Uet.forEach(t),RAo=r(v0e," \u2014 "),Kq=n(v0e,"A",{href:!0});var Jet=s(Kq);BAo=r(Jet,"GPT2ForSequenceClassification"),Jet.forEach(t),PAo=r(v0e," (OpenAI GPT-2 model)"),v0e.forEach(t),$Ao=i(L),k1=n(L,"LI",{});var T0e=s(k1);kle=n(T0e,"STRONG",{});var Yet=s(kle);IAo=r(Yet,"gpt_neo"),Yet.forEach(t),qAo=r(T0e," \u2014 "),Zq=n(T0e,"A",{href:!0});var Ket=s(Zq);NAo=r(Ket,"GPTNeoForSequenceClassification"),Ket.forEach(t),jAo=r(T0e," (GPT Neo model)"),T0e.forEach(t),DAo=i(L),S1=n(L,"LI",{});var M0e=s(S1);Sle=n(M0e,"STRONG",{});var Zet=s(Sle);GAo=r(Zet,"gptj"),Zet.forEach(t),OAo=r(M0e," \u2014 "),eN=n(M0e,"A",{href:!0});var eot=s(eN);VAo=r(eot,"GPTJForSequenceClassification"),eot.forEach(t),XAo=r(M0e," (GPT-J model)"),M0e.forEach(t),zAo=i(L),R1=n(L,"LI",{});var E0e=s(R1);Rle=n(E0e,"STRONG",{});var oot=s(Rle);QAo=r(oot,"ibert"),oot.forEach(t),WAo=r(E0e," \u2014 "),oN=n(E0e,"A",{href:!0});var rot=s(oN);HAo=r(rot,"IBertForSequenceClassification"),rot.forEach(t),UAo=r(E0e," (I-BERT model)"),E0e.forEach(t),JAo=i(L),B1=n(L,"LI",{});var C0e=s(B1);Ble=n(C0e,"STRONG",{});var tot=s(Ble);YAo=r(tot,"layoutlm"),tot.forEach(t),KAo=r(C0e," \u2014 "),rN=n(C0e,"A",{href:!0});var aot=s(rN);ZAo=r(aot,"LayoutLMForSequenceClassification"),aot.forEach(t),e0o=r(C0e," (LayoutLM model)"),C0e.forEach(t),o0o=i(L),P1=n(L,"LI",{});var w0e=s(P1);Ple=n(w0e,"STRONG",{});var not=s(Ple);r0o=r(not,"layoutlmv2"),not.forEach(t),t0o=r(w0e," \u2014 "),tN=n(w0e,"A",{href:!0});var sot=s(tN);a0o=r(sot,"LayoutLMv2ForSequenceClassification"),sot.forEach(t),n0o=r(w0e," (LayoutLMv2 model)"),w0e.forEach(t),s0o=i(L),$1=n(L,"LI",{});var A0e=s($1);$le=n(A0e,"STRONG",{});var lot=s($le);l0o=r(lot,"led"),lot.forEach(t),i0o=r(A0e," \u2014 "),aN=n(A0e,"A",{href:!0});var iot=s(aN);d0o=r(iot,"LEDForSequenceClassification"),iot.forEach(t),c0o=r(A0e," (LED model)"),A0e.forEach(t),f0o=i(L),I1=n(L,"LI",{});var y0e=s(I1);Ile=n(y0e,"STRONG",{});var dot=s(Ile);m0o=r(dot,"longformer"),dot.forEach(t),g0o=r(y0e," \u2014 "),nN=n(y0e,"A",{href:!0});var cot=s(nN);h0o=r(cot,"LongformerForSequenceClassification"),cot.forEach(t),p0o=r(y0e," (Longformer model)"),y0e.forEach(t),_0o=i(L),q1=n(L,"LI",{});var L0e=s(q1);qle=n(L0e,"STRONG",{});var fot=s(qle);u0o=r(fot,"mbart"),fot.forEach(t),b0o=r(L0e," \u2014 "),sN=n(L0e,"A",{href:!0});var mot=s(sN);F0o=r(mot,"MBartForSequenceClassification"),mot.forEach(t),v0o=r(L0e," (mBART model)"),L0e.forEach(t),T0o=i(L),N1=n(L,"LI",{});var x0e=s(N1);Nle=n(x0e,"STRONG",{});var got=s(Nle);M0o=r(got,"megatron-bert"),got.forEach(t),E0o=r(x0e," \u2014 "),lN=n(x0e,"A",{href:!0});var hot=s(lN);C0o=r(hot,"MegatronBertForSequenceClassification"),hot.forEach(t),w0o=r(x0e," (MegatronBert model)"),x0e.forEach(t),A0o=i(L),j1=n(L,"LI",{});var k0e=s(j1);jle=n(k0e,"STRONG",{});var pot=s(jle);y0o=r(pot,"mobilebert"),pot.forEach(t),L0o=r(k0e," \u2014 "),iN=n(k0e,"A",{href:!0});var _ot=s(iN);x0o=r(_ot,"MobileBertForSequenceClassification"),_ot.forEach(t),k0o=r(k0e," (MobileBERT model)"),k0e.forEach(t),S0o=i(L),D1=n(L,"LI",{});var S0e=s(D1);Dle=n(S0e,"STRONG",{});var uot=s(Dle);R0o=r(uot,"mpnet"),uot.forEach(t),B0o=r(S0e," \u2014 "),dN=n(S0e,"A",{href:!0});var bot=s(dN);P0o=r(bot,"MPNetForSequenceClassification"),bot.forEach(t),$0o=r(S0e," (MPNet model)"),S0e.forEach(t),I0o=i(L),G1=n(L,"LI",{});var R0e=s(G1);Gle=n(R0e,"STRONG",{});var Fot=s(Gle);q0o=r(Fot,"nystromformer"),Fot.forEach(t),N0o=r(R0e," \u2014 "),cN=n(R0e,"A",{href:!0});var vot=s(cN);j0o=r(vot,"NystromformerForSequenceClassification"),vot.forEach(t),D0o=r(R0e," (Nystromformer model)"),R0e.forEach(t),G0o=i(L),O1=n(L,"LI",{});var B0e=s(O1);Ole=n(B0e,"STRONG",{});var Tot=s(Ole);O0o=r(Tot,"openai-gpt"),Tot.forEach(t),V0o=r(B0e," \u2014 "),fN=n(B0e,"A",{href:!0});var Mot=s(fN);X0o=r(Mot,"OpenAIGPTForSequenceClassification"),Mot.forEach(t),z0o=r(B0e," (OpenAI GPT model)"),B0e.forEach(t),Q0o=i(L),V1=n(L,"LI",{});var P0e=s(V1);Vle=n(P0e,"STRONG",{});var Eot=s(Vle);W0o=r(Eot,"perceiver"),Eot.forEach(t),H0o=r(P0e," \u2014 "),mN=n(P0e,"A",{href:!0});var Cot=s(mN);U0o=r(Cot,"PerceiverForSequenceClassification"),Cot.forEach(t),J0o=r(P0e," (Perceiver model)"),P0e.forEach(t),Y0o=i(L),X1=n(L,"LI",{});var $0e=s(X1);Xle=n($0e,"STRONG",{});var wot=s(Xle);K0o=r(wot,"plbart"),wot.forEach(t),Z0o=r($0e," \u2014 "),gN=n($0e,"A",{href:!0});var Aot=s(gN);eyo=r(Aot,"PLBartForSequenceClassification"),Aot.forEach(t),oyo=r($0e," (PLBart model)"),$0e.forEach(t),ryo=i(L),z1=n(L,"LI",{});var I0e=s(z1);zle=n(I0e,"STRONG",{});var yot=s(zle);tyo=r(yot,"qdqbert"),yot.forEach(t),ayo=r(I0e," \u2014 "),hN=n(I0e,"A",{href:!0});var Lot=s(hN);nyo=r(Lot,"QDQBertForSequenceClassification"),Lot.forEach(t),syo=r(I0e," (QDQBert model)"),I0e.forEach(t),lyo=i(L),Q1=n(L,"LI",{});var q0e=s(Q1);Qle=n(q0e,"STRONG",{});var xot=s(Qle);iyo=r(xot,"reformer"),xot.forEach(t),dyo=r(q0e," \u2014 "),pN=n(q0e,"A",{href:!0});var kot=s(pN);cyo=r(kot,"ReformerForSequenceClassification"),kot.forEach(t),fyo=r(q0e," (Reformer model)"),q0e.forEach(t),myo=i(L),W1=n(L,"LI",{});var N0e=s(W1);Wle=n(N0e,"STRONG",{});var Sot=s(Wle);gyo=r(Sot,"rembert"),Sot.forEach(t),hyo=r(N0e," \u2014 "),_N=n(N0e,"A",{href:!0});var Rot=s(_N);pyo=r(Rot,"RemBertForSequenceClassification"),Rot.forEach(t),_yo=r(N0e," (RemBERT model)"),N0e.forEach(t),uyo=i(L),H1=n(L,"LI",{});var j0e=s(H1);Hle=n(j0e,"STRONG",{});var Bot=s(Hle);byo=r(Bot,"roberta"),Bot.forEach(t),Fyo=r(j0e," \u2014 "),uN=n(j0e,"A",{href:!0});var Pot=s(uN);vyo=r(Pot,"RobertaForSequenceClassification"),Pot.forEach(t),Tyo=r(j0e," (RoBERTa model)"),j0e.forEach(t),Myo=i(L),U1=n(L,"LI",{});var D0e=s(U1);Ule=n(D0e,"STRONG",{});var $ot=s(Ule);Eyo=r($ot,"roformer"),$ot.forEach(t),Cyo=r(D0e," \u2014 "),bN=n(D0e,"A",{href:!0});var Iot=s(bN);wyo=r(Iot,"RoFormerForSequenceClassification"),Iot.forEach(t),Ayo=r(D0e," (RoFormer model)"),D0e.forEach(t),yyo=i(L),J1=n(L,"LI",{});var G0e=s(J1);Jle=n(G0e,"STRONG",{});var qot=s(Jle);Lyo=r(qot,"squeezebert"),qot.forEach(t),xyo=r(G0e," \u2014 "),FN=n(G0e,"A",{href:!0});var Not=s(FN);kyo=r(Not,"SqueezeBertForSequenceClassification"),Not.forEach(t),Syo=r(G0e," (SqueezeBERT model)"),G0e.forEach(t),Ryo=i(L),Y1=n(L,"LI",{});var O0e=s(Y1);Yle=n(O0e,"STRONG",{});var jot=s(Yle);Byo=r(jot,"tapas"),jot.forEach(t),Pyo=r(O0e," \u2014 "),vN=n(O0e,"A",{href:!0});var Dot=s(vN);$yo=r(Dot,"TapasForSequenceClassification"),Dot.forEach(t),Iyo=r(O0e," (TAPAS model)"),O0e.forEach(t),qyo=i(L),K1=n(L,"LI",{});var V0e=s(K1);Kle=n(V0e,"STRONG",{});var Got=s(Kle);Nyo=r(Got,"tapex"),Got.forEach(t),jyo=r(V0e," \u2014 "),TN=n(V0e,"A",{href:!0});var Oot=s(TN);Dyo=r(Oot,"BartForSequenceClassification"),Oot.forEach(t),Gyo=r(V0e," (TAPEX model)"),V0e.forEach(t),Oyo=i(L),Z1=n(L,"LI",{});var X0e=s(Z1);Zle=n(X0e,"STRONG",{});var Vot=s(Zle);Vyo=r(Vot,"transfo-xl"),Vot.forEach(t),Xyo=r(X0e," \u2014 "),MN=n(X0e,"A",{href:!0});var Xot=s(MN);zyo=r(Xot,"TransfoXLForSequenceClassification"),Xot.forEach(t),Qyo=r(X0e," (Transformer-XL model)"),X0e.forEach(t),Wyo=i(L),e4=n(L,"LI",{});var z0e=s(e4);eie=n(z0e,"STRONG",{});var zot=s(eie);Hyo=r(zot,"xlm"),zot.forEach(t),Uyo=r(z0e," \u2014 "),EN=n(z0e,"A",{href:!0});var Qot=s(EN);Jyo=r(Qot,"XLMForSequenceClassification"),Qot.forEach(t),Yyo=r(z0e," (XLM model)"),z0e.forEach(t),Kyo=i(L),o4=n(L,"LI",{});var Q0e=s(o4);oie=n(Q0e,"STRONG",{});var Wot=s(oie);Zyo=r(Wot,"xlm-roberta"),Wot.forEach(t),eLo=r(Q0e," \u2014 "),CN=n(Q0e,"A",{href:!0});var Hot=s(CN);oLo=r(Hot,"XLMRobertaForSequenceClassification"),Hot.forEach(t),rLo=r(Q0e," (XLM-RoBERTa model)"),Q0e.forEach(t),tLo=i(L),r4=n(L,"LI",{});var W0e=s(r4);rie=n(W0e,"STRONG",{});var Uot=s(rie);aLo=r(Uot,"xlm-roberta-xl"),Uot.forEach(t),nLo=r(W0e," \u2014 "),wN=n(W0e,"A",{href:!0});var Jot=s(wN);sLo=r(Jot,"XLMRobertaXLForSequenceClassification"),Jot.forEach(t),lLo=r(W0e," (XLM-RoBERTa-XL model)"),W0e.forEach(t),iLo=i(L),t4=n(L,"LI",{});var H0e=s(t4);tie=n(H0e,"STRONG",{});var Yot=s(tie);dLo=r(Yot,"xlnet"),Yot.forEach(t),cLo=r(H0e," \u2014 "),AN=n(H0e,"A",{href:!0});var Kot=s(AN);fLo=r(Kot,"XLNetForSequenceClassification"),Kot.forEach(t),mLo=r(H0e," (XLNet model)"),H0e.forEach(t),gLo=i(L),a4=n(L,"LI",{});var U0e=s(a4);aie=n(U0e,"STRONG",{});var Zot=s(aie);hLo=r(Zot,"yoso"),Zot.forEach(t),pLo=r(U0e," \u2014 "),yN=n(U0e,"A",{href:!0});var ert=s(yN);_Lo=r(ert,"YosoForSequenceClassification"),ert.forEach(t),uLo=r(U0e," (YOSO model)"),U0e.forEach(t),L.forEach(t),bLo=i(zt),n4=n(zt,"P",{});var J0e=s(n4);FLo=r(J0e,"The model is set in evaluation mode by default using "),nie=n(J0e,"CODE",{});var ort=s(nie);vLo=r(ort,"model.eval()"),ort.forEach(t),TLo=r(J0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=n(J0e,"CODE",{});var rrt=s(sie);MLo=r(rrt,"model.train()"),rrt.forEach(t),J0e.forEach(t),ELo=i(zt),lie=n(zt,"P",{});var trt=s(lie);CLo=r(trt,"Examples:"),trt.forEach(t),wLo=i(zt),m(Hw.$$.fragment,zt),zt.forEach(t),rl.forEach(t),rBe=i(c),hd=n(c,"H2",{class:!0});var f$e=s(hd);s4=n(f$e,"A",{id:!0,class:!0,href:!0});var art=s(s4);iie=n(art,"SPAN",{});var nrt=s(iie);m(Uw.$$.fragment,nrt),nrt.forEach(t),art.forEach(t),ALo=i(f$e),die=n(f$e,"SPAN",{});var srt=s(die);yLo=r(srt,"AutoModelForMultipleChoice"),srt.forEach(t),f$e.forEach(t),tBe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(Jw.$$.fragment,al),LLo=i(al),pd=n(al,"P",{});var SU=s(pd);xLo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LN=n(SU,"A",{href:!0});var lrt=s(LN);kLo=r(lrt,"from_pretrained()"),lrt.forEach(t),SLo=r(SU," class method or the "),xN=n(SU,"A",{href:!0});var irt=s(xN);RLo=r(irt,"from_config()"),irt.forEach(t),BLo=r(SU,` class
method.`),SU.forEach(t),PLo=i(al),Yw=n(al,"P",{});var m$e=s(Yw);$Lo=r(m$e,"This class cannot be instantiated directly using "),cie=n(m$e,"CODE",{});var drt=s(cie);ILo=r(drt,"__init__()"),drt.forEach(t),qLo=r(m$e," (throws an error)."),m$e.forEach(t),NLo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Kw.$$.fragment,nl),jLo=i(nl),fie=n(nl,"P",{});var crt=s(fie);DLo=r(crt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),crt.forEach(t),GLo=i(nl),_d=n(nl,"P",{});var RU=s(_d);OLo=r(RU,`Note:
Loading a model from its configuration file does `),mie=n(RU,"STRONG",{});var frt=s(mie);VLo=r(frt,"not"),frt.forEach(t),XLo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kN=n(RU,"A",{href:!0});var mrt=s(kN);zLo=r(mrt,"from_pretrained()"),mrt.forEach(t),QLo=r(RU," to load the model weights."),RU.forEach(t),WLo=i(nl),gie=n(nl,"P",{});var grt=s(gie);HLo=r(grt,"Examples:"),grt.forEach(t),ULo=i(nl),m(Zw.$$.fragment,nl),nl.forEach(t),JLo=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(eA.$$.fragment,Qt),YLo=i(Qt),hie=n(Qt,"P",{});var hrt=s(hie);KLo=r(hrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hrt.forEach(t),ZLo=i(Qt),Ja=n(Qt,"P",{});var q3=s(Ja);e8o=r(q3,"The model class to instantiate is selected based on the "),pie=n(q3,"CODE",{});var prt=s(pie);o8o=r(prt,"model_type"),prt.forEach(t),r8o=r(q3,` property of the config object (either
passed as an argument or loaded from `),_ie=n(q3,"CODE",{});var _rt=s(_ie);t8o=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),a8o=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(q3,"CODE",{});var urt=s(uie);n8o=r(urt,"pretrained_model_name_or_path"),urt.forEach(t),s8o=r(q3,":"),q3.forEach(t),l8o=i(Qt),G=n(Qt,"UL",{});var O=s(G);l4=n(O,"LI",{});var Y0e=s(l4);bie=n(Y0e,"STRONG",{});var brt=s(bie);i8o=r(brt,"albert"),brt.forEach(t),d8o=r(Y0e," \u2014 "),SN=n(Y0e,"A",{href:!0});var Frt=s(SN);c8o=r(Frt,"AlbertForMultipleChoice"),Frt.forEach(t),f8o=r(Y0e," (ALBERT model)"),Y0e.forEach(t),m8o=i(O),i4=n(O,"LI",{});var K0e=s(i4);Fie=n(K0e,"STRONG",{});var vrt=s(Fie);g8o=r(vrt,"bert"),vrt.forEach(t),h8o=r(K0e," \u2014 "),RN=n(K0e,"A",{href:!0});var Trt=s(RN);p8o=r(Trt,"BertForMultipleChoice"),Trt.forEach(t),_8o=r(K0e," (BERT model)"),K0e.forEach(t),u8o=i(O),d4=n(O,"LI",{});var Z0e=s(d4);vie=n(Z0e,"STRONG",{});var Mrt=s(vie);b8o=r(Mrt,"big_bird"),Mrt.forEach(t),F8o=r(Z0e," \u2014 "),BN=n(Z0e,"A",{href:!0});var Ert=s(BN);v8o=r(Ert,"BigBirdForMultipleChoice"),Ert.forEach(t),T8o=r(Z0e," (BigBird model)"),Z0e.forEach(t),M8o=i(O),c4=n(O,"LI",{});var eye=s(c4);Tie=n(eye,"STRONG",{});var Crt=s(Tie);E8o=r(Crt,"camembert"),Crt.forEach(t),C8o=r(eye," \u2014 "),PN=n(eye,"A",{href:!0});var wrt=s(PN);w8o=r(wrt,"CamembertForMultipleChoice"),wrt.forEach(t),A8o=r(eye," (CamemBERT model)"),eye.forEach(t),y8o=i(O),f4=n(O,"LI",{});var oye=s(f4);Mie=n(oye,"STRONG",{});var Art=s(Mie);L8o=r(Art,"canine"),Art.forEach(t),x8o=r(oye," \u2014 "),$N=n(oye,"A",{href:!0});var yrt=s($N);k8o=r(yrt,"CanineForMultipleChoice"),yrt.forEach(t),S8o=r(oye," (Canine model)"),oye.forEach(t),R8o=i(O),m4=n(O,"LI",{});var rye=s(m4);Eie=n(rye,"STRONG",{});var Lrt=s(Eie);B8o=r(Lrt,"convbert"),Lrt.forEach(t),P8o=r(rye," \u2014 "),IN=n(rye,"A",{href:!0});var xrt=s(IN);$8o=r(xrt,"ConvBertForMultipleChoice"),xrt.forEach(t),I8o=r(rye," (ConvBERT model)"),rye.forEach(t),q8o=i(O),g4=n(O,"LI",{});var tye=s(g4);Cie=n(tye,"STRONG",{});var krt=s(Cie);N8o=r(krt,"data2vec-text"),krt.forEach(t),j8o=r(tye," \u2014 "),qN=n(tye,"A",{href:!0});var Srt=s(qN);D8o=r(Srt,"Data2VecTextForMultipleChoice"),Srt.forEach(t),G8o=r(tye," (Data2VecText model)"),tye.forEach(t),O8o=i(O),h4=n(O,"LI",{});var aye=s(h4);wie=n(aye,"STRONG",{});var Rrt=s(wie);V8o=r(Rrt,"distilbert"),Rrt.forEach(t),X8o=r(aye," \u2014 "),NN=n(aye,"A",{href:!0});var Brt=s(NN);z8o=r(Brt,"DistilBertForMultipleChoice"),Brt.forEach(t),Q8o=r(aye," (DistilBERT model)"),aye.forEach(t),W8o=i(O),p4=n(O,"LI",{});var nye=s(p4);Aie=n(nye,"STRONG",{});var Prt=s(Aie);H8o=r(Prt,"electra"),Prt.forEach(t),U8o=r(nye," \u2014 "),jN=n(nye,"A",{href:!0});var $rt=s(jN);J8o=r($rt,"ElectraForMultipleChoice"),$rt.forEach(t),Y8o=r(nye," (ELECTRA model)"),nye.forEach(t),K8o=i(O),_4=n(O,"LI",{});var sye=s(_4);yie=n(sye,"STRONG",{});var Irt=s(yie);Z8o=r(Irt,"flaubert"),Irt.forEach(t),e7o=r(sye," \u2014 "),DN=n(sye,"A",{href:!0});var qrt=s(DN);o7o=r(qrt,"FlaubertForMultipleChoice"),qrt.forEach(t),r7o=r(sye," (FlauBERT model)"),sye.forEach(t),t7o=i(O),u4=n(O,"LI",{});var lye=s(u4);Lie=n(lye,"STRONG",{});var Nrt=s(Lie);a7o=r(Nrt,"fnet"),Nrt.forEach(t),n7o=r(lye," \u2014 "),GN=n(lye,"A",{href:!0});var jrt=s(GN);s7o=r(jrt,"FNetForMultipleChoice"),jrt.forEach(t),l7o=r(lye," (FNet model)"),lye.forEach(t),i7o=i(O),b4=n(O,"LI",{});var iye=s(b4);xie=n(iye,"STRONG",{});var Drt=s(xie);d7o=r(Drt,"funnel"),Drt.forEach(t),c7o=r(iye," \u2014 "),ON=n(iye,"A",{href:!0});var Grt=s(ON);f7o=r(Grt,"FunnelForMultipleChoice"),Grt.forEach(t),m7o=r(iye," (Funnel Transformer model)"),iye.forEach(t),g7o=i(O),F4=n(O,"LI",{});var dye=s(F4);kie=n(dye,"STRONG",{});var Ort=s(kie);h7o=r(Ort,"ibert"),Ort.forEach(t),p7o=r(dye," \u2014 "),VN=n(dye,"A",{href:!0});var Vrt=s(VN);_7o=r(Vrt,"IBertForMultipleChoice"),Vrt.forEach(t),u7o=r(dye," (I-BERT model)"),dye.forEach(t),b7o=i(O),v4=n(O,"LI",{});var cye=s(v4);Sie=n(cye,"STRONG",{});var Xrt=s(Sie);F7o=r(Xrt,"longformer"),Xrt.forEach(t),v7o=r(cye," \u2014 "),XN=n(cye,"A",{href:!0});var zrt=s(XN);T7o=r(zrt,"LongformerForMultipleChoice"),zrt.forEach(t),M7o=r(cye," (Longformer model)"),cye.forEach(t),E7o=i(O),T4=n(O,"LI",{});var fye=s(T4);Rie=n(fye,"STRONG",{});var Qrt=s(Rie);C7o=r(Qrt,"megatron-bert"),Qrt.forEach(t),w7o=r(fye," \u2014 "),zN=n(fye,"A",{href:!0});var Wrt=s(zN);A7o=r(Wrt,"MegatronBertForMultipleChoice"),Wrt.forEach(t),y7o=r(fye," (MegatronBert model)"),fye.forEach(t),L7o=i(O),M4=n(O,"LI",{});var mye=s(M4);Bie=n(mye,"STRONG",{});var Hrt=s(Bie);x7o=r(Hrt,"mobilebert"),Hrt.forEach(t),k7o=r(mye," \u2014 "),QN=n(mye,"A",{href:!0});var Urt=s(QN);S7o=r(Urt,"MobileBertForMultipleChoice"),Urt.forEach(t),R7o=r(mye," (MobileBERT model)"),mye.forEach(t),B7o=i(O),E4=n(O,"LI",{});var gye=s(E4);Pie=n(gye,"STRONG",{});var Jrt=s(Pie);P7o=r(Jrt,"mpnet"),Jrt.forEach(t),$7o=r(gye," \u2014 "),WN=n(gye,"A",{href:!0});var Yrt=s(WN);I7o=r(Yrt,"MPNetForMultipleChoice"),Yrt.forEach(t),q7o=r(gye," (MPNet model)"),gye.forEach(t),N7o=i(O),C4=n(O,"LI",{});var hye=s(C4);$ie=n(hye,"STRONG",{});var Krt=s($ie);j7o=r(Krt,"nystromformer"),Krt.forEach(t),D7o=r(hye," \u2014 "),HN=n(hye,"A",{href:!0});var Zrt=s(HN);G7o=r(Zrt,"NystromformerForMultipleChoice"),Zrt.forEach(t),O7o=r(hye," (Nystromformer model)"),hye.forEach(t),V7o=i(O),w4=n(O,"LI",{});var pye=s(w4);Iie=n(pye,"STRONG",{});var ett=s(Iie);X7o=r(ett,"qdqbert"),ett.forEach(t),z7o=r(pye," \u2014 "),UN=n(pye,"A",{href:!0});var ott=s(UN);Q7o=r(ott,"QDQBertForMultipleChoice"),ott.forEach(t),W7o=r(pye," (QDQBert model)"),pye.forEach(t),H7o=i(O),A4=n(O,"LI",{});var _ye=s(A4);qie=n(_ye,"STRONG",{});var rtt=s(qie);U7o=r(rtt,"rembert"),rtt.forEach(t),J7o=r(_ye," \u2014 "),JN=n(_ye,"A",{href:!0});var ttt=s(JN);Y7o=r(ttt,"RemBertForMultipleChoice"),ttt.forEach(t),K7o=r(_ye," (RemBERT model)"),_ye.forEach(t),Z7o=i(O),y4=n(O,"LI",{});var uye=s(y4);Nie=n(uye,"STRONG",{});var att=s(Nie);e9o=r(att,"roberta"),att.forEach(t),o9o=r(uye," \u2014 "),YN=n(uye,"A",{href:!0});var ntt=s(YN);r9o=r(ntt,"RobertaForMultipleChoice"),ntt.forEach(t),t9o=r(uye," (RoBERTa model)"),uye.forEach(t),a9o=i(O),L4=n(O,"LI",{});var bye=s(L4);jie=n(bye,"STRONG",{});var stt=s(jie);n9o=r(stt,"roformer"),stt.forEach(t),s9o=r(bye," \u2014 "),KN=n(bye,"A",{href:!0});var ltt=s(KN);l9o=r(ltt,"RoFormerForMultipleChoice"),ltt.forEach(t),i9o=r(bye," (RoFormer model)"),bye.forEach(t),d9o=i(O),x4=n(O,"LI",{});var Fye=s(x4);Die=n(Fye,"STRONG",{});var itt=s(Die);c9o=r(itt,"squeezebert"),itt.forEach(t),f9o=r(Fye," \u2014 "),ZN=n(Fye,"A",{href:!0});var dtt=s(ZN);m9o=r(dtt,"SqueezeBertForMultipleChoice"),dtt.forEach(t),g9o=r(Fye," (SqueezeBERT model)"),Fye.forEach(t),h9o=i(O),k4=n(O,"LI",{});var vye=s(k4);Gie=n(vye,"STRONG",{});var ctt=s(Gie);p9o=r(ctt,"xlm"),ctt.forEach(t),_9o=r(vye," \u2014 "),ej=n(vye,"A",{href:!0});var ftt=s(ej);u9o=r(ftt,"XLMForMultipleChoice"),ftt.forEach(t),b9o=r(vye," (XLM model)"),vye.forEach(t),F9o=i(O),S4=n(O,"LI",{});var Tye=s(S4);Oie=n(Tye,"STRONG",{});var mtt=s(Oie);v9o=r(mtt,"xlm-roberta"),mtt.forEach(t),T9o=r(Tye," \u2014 "),oj=n(Tye,"A",{href:!0});var gtt=s(oj);M9o=r(gtt,"XLMRobertaForMultipleChoice"),gtt.forEach(t),E9o=r(Tye," (XLM-RoBERTa model)"),Tye.forEach(t),C9o=i(O),R4=n(O,"LI",{});var Mye=s(R4);Vie=n(Mye,"STRONG",{});var htt=s(Vie);w9o=r(htt,"xlm-roberta-xl"),htt.forEach(t),A9o=r(Mye," \u2014 "),rj=n(Mye,"A",{href:!0});var ptt=s(rj);y9o=r(ptt,"XLMRobertaXLForMultipleChoice"),ptt.forEach(t),L9o=r(Mye," (XLM-RoBERTa-XL model)"),Mye.forEach(t),x9o=i(O),B4=n(O,"LI",{});var Eye=s(B4);Xie=n(Eye,"STRONG",{});var _tt=s(Xie);k9o=r(_tt,"xlnet"),_tt.forEach(t),S9o=r(Eye," \u2014 "),tj=n(Eye,"A",{href:!0});var utt=s(tj);R9o=r(utt,"XLNetForMultipleChoice"),utt.forEach(t),B9o=r(Eye," (XLNet model)"),Eye.forEach(t),P9o=i(O),P4=n(O,"LI",{});var Cye=s(P4);zie=n(Cye,"STRONG",{});var btt=s(zie);$9o=r(btt,"yoso"),btt.forEach(t),I9o=r(Cye," \u2014 "),aj=n(Cye,"A",{href:!0});var Ftt=s(aj);q9o=r(Ftt,"YosoForMultipleChoice"),Ftt.forEach(t),N9o=r(Cye," (YOSO model)"),Cye.forEach(t),O.forEach(t),j9o=i(Qt),$4=n(Qt,"P",{});var wye=s($4);D9o=r(wye,"The model is set in evaluation mode by default using "),Qie=n(wye,"CODE",{});var vtt=s(Qie);G9o=r(vtt,"model.eval()"),vtt.forEach(t),O9o=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=n(wye,"CODE",{});var Ttt=s(Wie);V9o=r(Ttt,"model.train()"),Ttt.forEach(t),wye.forEach(t),X9o=i(Qt),Hie=n(Qt,"P",{});var Mtt=s(Hie);z9o=r(Mtt,"Examples:"),Mtt.forEach(t),Q9o=i(Qt),m(oA.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),aBe=i(c),ud=n(c,"H2",{class:!0});var g$e=s(ud);I4=n(g$e,"A",{id:!0,class:!0,href:!0});var Ett=s(I4);Uie=n(Ett,"SPAN",{});var Ctt=s(Uie);m(rA.$$.fragment,Ctt),Ctt.forEach(t),Ett.forEach(t),W9o=i(g$e),Jie=n(g$e,"SPAN",{});var wtt=s(Jie);H9o=r(wtt,"AutoModelForNextSentencePrediction"),wtt.forEach(t),g$e.forEach(t),nBe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(tA.$$.fragment,sl),U9o=i(sl),bd=n(sl,"P",{});var BU=s(bd);J9o=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nj=n(BU,"A",{href:!0});var Att=s(nj);Y9o=r(Att,"from_pretrained()"),Att.forEach(t),K9o=r(BU," class method or the "),sj=n(BU,"A",{href:!0});var ytt=s(sj);Z9o=r(ytt,"from_config()"),ytt.forEach(t),exo=r(BU,` class
method.`),BU.forEach(t),oxo=i(sl),aA=n(sl,"P",{});var h$e=s(aA);rxo=r(h$e,"This class cannot be instantiated directly using "),Yie=n(h$e,"CODE",{});var Ltt=s(Yie);txo=r(Ltt,"__init__()"),Ltt.forEach(t),axo=r(h$e," (throws an error)."),h$e.forEach(t),nxo=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(nA.$$.fragment,ll),sxo=i(ll),Kie=n(ll,"P",{});var xtt=s(Kie);lxo=r(xtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xtt.forEach(t),ixo=i(ll),Fd=n(ll,"P",{});var PU=s(Fd);dxo=r(PU,`Note:
Loading a model from its configuration file does `),Zie=n(PU,"STRONG",{});var ktt=s(Zie);cxo=r(ktt,"not"),ktt.forEach(t),fxo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lj=n(PU,"A",{href:!0});var Stt=s(lj);mxo=r(Stt,"from_pretrained()"),Stt.forEach(t),gxo=r(PU," to load the model weights."),PU.forEach(t),hxo=i(ll),ede=n(ll,"P",{});var Rtt=s(ede);pxo=r(Rtt,"Examples:"),Rtt.forEach(t),_xo=i(ll),m(sA.$$.fragment,ll),ll.forEach(t),uxo=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(lA.$$.fragment,Wt),bxo=i(Wt),ode=n(Wt,"P",{});var Btt=s(ode);Fxo=r(Btt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Btt.forEach(t),vxo=i(Wt),Ya=n(Wt,"P",{});var N3=s(Ya);Txo=r(N3,"The model class to instantiate is selected based on the "),rde=n(N3,"CODE",{});var Ptt=s(rde);Mxo=r(Ptt,"model_type"),Ptt.forEach(t),Exo=r(N3,` property of the config object (either
passed as an argument or loaded from `),tde=n(N3,"CODE",{});var $tt=s(tde);Cxo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),wxo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(N3,"CODE",{});var Itt=s(ade);Axo=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),yxo=r(N3,":"),N3.forEach(t),Lxo=i(Wt),da=n(Wt,"UL",{});var il=s(da);q4=n(il,"LI",{});var Aye=s(q4);nde=n(Aye,"STRONG",{});var qtt=s(nde);xxo=r(qtt,"bert"),qtt.forEach(t),kxo=r(Aye," \u2014 "),ij=n(Aye,"A",{href:!0});var Ntt=s(ij);Sxo=r(Ntt,"BertForNextSentencePrediction"),Ntt.forEach(t),Rxo=r(Aye," (BERT model)"),Aye.forEach(t),Bxo=i(il),N4=n(il,"LI",{});var yye=s(N4);sde=n(yye,"STRONG",{});var jtt=s(sde);Pxo=r(jtt,"fnet"),jtt.forEach(t),$xo=r(yye," \u2014 "),dj=n(yye,"A",{href:!0});var Dtt=s(dj);Ixo=r(Dtt,"FNetForNextSentencePrediction"),Dtt.forEach(t),qxo=r(yye," (FNet model)"),yye.forEach(t),Nxo=i(il),j4=n(il,"LI",{});var Lye=s(j4);lde=n(Lye,"STRONG",{});var Gtt=s(lde);jxo=r(Gtt,"megatron-bert"),Gtt.forEach(t),Dxo=r(Lye," \u2014 "),cj=n(Lye,"A",{href:!0});var Ott=s(cj);Gxo=r(Ott,"MegatronBertForNextSentencePrediction"),Ott.forEach(t),Oxo=r(Lye," (MegatronBert model)"),Lye.forEach(t),Vxo=i(il),D4=n(il,"LI",{});var xye=s(D4);ide=n(xye,"STRONG",{});var Vtt=s(ide);Xxo=r(Vtt,"mobilebert"),Vtt.forEach(t),zxo=r(xye," \u2014 "),fj=n(xye,"A",{href:!0});var Xtt=s(fj);Qxo=r(Xtt,"MobileBertForNextSentencePrediction"),Xtt.forEach(t),Wxo=r(xye," (MobileBERT model)"),xye.forEach(t),Hxo=i(il),G4=n(il,"LI",{});var kye=s(G4);dde=n(kye,"STRONG",{});var ztt=s(dde);Uxo=r(ztt,"qdqbert"),ztt.forEach(t),Jxo=r(kye," \u2014 "),mj=n(kye,"A",{href:!0});var Qtt=s(mj);Yxo=r(Qtt,"QDQBertForNextSentencePrediction"),Qtt.forEach(t),Kxo=r(kye," (QDQBert model)"),kye.forEach(t),il.forEach(t),Zxo=i(Wt),O4=n(Wt,"P",{});var Sye=s(O4);eko=r(Sye,"The model is set in evaluation mode by default using "),cde=n(Sye,"CODE",{});var Wtt=s(cde);oko=r(Wtt,"model.eval()"),Wtt.forEach(t),rko=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(Sye,"CODE",{});var Htt=s(fde);tko=r(Htt,"model.train()"),Htt.forEach(t),Sye.forEach(t),ako=i(Wt),mde=n(Wt,"P",{});var Utt=s(mde);nko=r(Utt,"Examples:"),Utt.forEach(t),sko=i(Wt),m(iA.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),sBe=i(c),vd=n(c,"H2",{class:!0});var p$e=s(vd);V4=n(p$e,"A",{id:!0,class:!0,href:!0});var Jtt=s(V4);gde=n(Jtt,"SPAN",{});var Ytt=s(gde);m(dA.$$.fragment,Ytt),Ytt.forEach(t),Jtt.forEach(t),lko=i(p$e),hde=n(p$e,"SPAN",{});var Ktt=s(hde);iko=r(Ktt,"AutoModelForTokenClassification"),Ktt.forEach(t),p$e.forEach(t),lBe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(cA.$$.fragment,dl),dko=i(dl),Td=n(dl,"P",{});var $U=s(Td);cko=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gj=n($U,"A",{href:!0});var Ztt=s(gj);fko=r(Ztt,"from_pretrained()"),Ztt.forEach(t),mko=r($U," class method or the "),hj=n($U,"A",{href:!0});var eat=s(hj);gko=r(eat,"from_config()"),eat.forEach(t),hko=r($U,` class
method.`),$U.forEach(t),pko=i(dl),fA=n(dl,"P",{});var _$e=s(fA);_ko=r(_$e,"This class cannot be instantiated directly using "),pde=n(_$e,"CODE",{});var oat=s(pde);uko=r(oat,"__init__()"),oat.forEach(t),bko=r(_$e," (throws an error)."),_$e.forEach(t),Fko=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(mA.$$.fragment,cl),vko=i(cl),_de=n(cl,"P",{});var rat=s(_de);Tko=r(rat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rat.forEach(t),Mko=i(cl),Md=n(cl,"P",{});var IU=s(Md);Eko=r(IU,`Note:
Loading a model from its configuration file does `),ude=n(IU,"STRONG",{});var tat=s(ude);Cko=r(tat,"not"),tat.forEach(t),wko=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=n(IU,"A",{href:!0});var aat=s(pj);Ako=r(aat,"from_pretrained()"),aat.forEach(t),yko=r(IU," to load the model weights."),IU.forEach(t),Lko=i(cl),bde=n(cl,"P",{});var nat=s(bde);xko=r(nat,"Examples:"),nat.forEach(t),kko=i(cl),m(gA.$$.fragment,cl),cl.forEach(t),Sko=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(hA.$$.fragment,Ht),Rko=i(Ht),Fde=n(Ht,"P",{});var sat=s(Fde);Bko=r(sat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sat.forEach(t),Pko=i(Ht),Ka=n(Ht,"P",{});var j3=s(Ka);$ko=r(j3,"The model class to instantiate is selected based on the "),vde=n(j3,"CODE",{});var lat=s(vde);Iko=r(lat,"model_type"),lat.forEach(t),qko=r(j3,` property of the config object (either
passed as an argument or loaded from `),Tde=n(j3,"CODE",{});var iat=s(Tde);Nko=r(iat,"pretrained_model_name_or_path"),iat.forEach(t),jko=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mde=n(j3,"CODE",{});var dat=s(Mde);Dko=r(dat,"pretrained_model_name_or_path"),dat.forEach(t),Gko=r(j3,":"),j3.forEach(t),Oko=i(Ht),j=n(Ht,"UL",{});var D=s(j);X4=n(D,"LI",{});var Rye=s(X4);Ede=n(Rye,"STRONG",{});var cat=s(Ede);Vko=r(cat,"albert"),cat.forEach(t),Xko=r(Rye," \u2014 "),_j=n(Rye,"A",{href:!0});var fat=s(_j);zko=r(fat,"AlbertForTokenClassification"),fat.forEach(t),Qko=r(Rye," (ALBERT model)"),Rye.forEach(t),Wko=i(D),z4=n(D,"LI",{});var Bye=s(z4);Cde=n(Bye,"STRONG",{});var mat=s(Cde);Hko=r(mat,"bert"),mat.forEach(t),Uko=r(Bye," \u2014 "),uj=n(Bye,"A",{href:!0});var gat=s(uj);Jko=r(gat,"BertForTokenClassification"),gat.forEach(t),Yko=r(Bye," (BERT model)"),Bye.forEach(t),Kko=i(D),Q4=n(D,"LI",{});var Pye=s(Q4);wde=n(Pye,"STRONG",{});var hat=s(wde);Zko=r(hat,"big_bird"),hat.forEach(t),eSo=r(Pye," \u2014 "),bj=n(Pye,"A",{href:!0});var pat=s(bj);oSo=r(pat,"BigBirdForTokenClassification"),pat.forEach(t),rSo=r(Pye," (BigBird model)"),Pye.forEach(t),tSo=i(D),W4=n(D,"LI",{});var $ye=s(W4);Ade=n($ye,"STRONG",{});var _at=s(Ade);aSo=r(_at,"camembert"),_at.forEach(t),nSo=r($ye," \u2014 "),Fj=n($ye,"A",{href:!0});var uat=s(Fj);sSo=r(uat,"CamembertForTokenClassification"),uat.forEach(t),lSo=r($ye," (CamemBERT model)"),$ye.forEach(t),iSo=i(D),H4=n(D,"LI",{});var Iye=s(H4);yde=n(Iye,"STRONG",{});var bat=s(yde);dSo=r(bat,"canine"),bat.forEach(t),cSo=r(Iye," \u2014 "),vj=n(Iye,"A",{href:!0});var Fat=s(vj);fSo=r(Fat,"CanineForTokenClassification"),Fat.forEach(t),mSo=r(Iye," (Canine model)"),Iye.forEach(t),gSo=i(D),U4=n(D,"LI",{});var qye=s(U4);Lde=n(qye,"STRONG",{});var vat=s(Lde);hSo=r(vat,"convbert"),vat.forEach(t),pSo=r(qye," \u2014 "),Tj=n(qye,"A",{href:!0});var Tat=s(Tj);_So=r(Tat,"ConvBertForTokenClassification"),Tat.forEach(t),uSo=r(qye," (ConvBERT model)"),qye.forEach(t),bSo=i(D),J4=n(D,"LI",{});var Nye=s(J4);xde=n(Nye,"STRONG",{});var Mat=s(xde);FSo=r(Mat,"data2vec-text"),Mat.forEach(t),vSo=r(Nye," \u2014 "),Mj=n(Nye,"A",{href:!0});var Eat=s(Mj);TSo=r(Eat,"Data2VecTextForTokenClassification"),Eat.forEach(t),MSo=r(Nye," (Data2VecText model)"),Nye.forEach(t),ESo=i(D),Y4=n(D,"LI",{});var jye=s(Y4);kde=n(jye,"STRONG",{});var Cat=s(kde);CSo=r(Cat,"deberta"),Cat.forEach(t),wSo=r(jye," \u2014 "),Ej=n(jye,"A",{href:!0});var wat=s(Ej);ASo=r(wat,"DebertaForTokenClassification"),wat.forEach(t),ySo=r(jye," (DeBERTa model)"),jye.forEach(t),LSo=i(D),K4=n(D,"LI",{});var Dye=s(K4);Sde=n(Dye,"STRONG",{});var Aat=s(Sde);xSo=r(Aat,"deberta-v2"),Aat.forEach(t),kSo=r(Dye," \u2014 "),Cj=n(Dye,"A",{href:!0});var yat=s(Cj);SSo=r(yat,"DebertaV2ForTokenClassification"),yat.forEach(t),RSo=r(Dye," (DeBERTa-v2 model)"),Dye.forEach(t),BSo=i(D),Z4=n(D,"LI",{});var Gye=s(Z4);Rde=n(Gye,"STRONG",{});var Lat=s(Rde);PSo=r(Lat,"distilbert"),Lat.forEach(t),$So=r(Gye," \u2014 "),wj=n(Gye,"A",{href:!0});var xat=s(wj);ISo=r(xat,"DistilBertForTokenClassification"),xat.forEach(t),qSo=r(Gye," (DistilBERT model)"),Gye.forEach(t),NSo=i(D),eb=n(D,"LI",{});var Oye=s(eb);Bde=n(Oye,"STRONG",{});var kat=s(Bde);jSo=r(kat,"electra"),kat.forEach(t),DSo=r(Oye," \u2014 "),Aj=n(Oye,"A",{href:!0});var Sat=s(Aj);GSo=r(Sat,"ElectraForTokenClassification"),Sat.forEach(t),OSo=r(Oye," (ELECTRA model)"),Oye.forEach(t),VSo=i(D),ob=n(D,"LI",{});var Vye=s(ob);Pde=n(Vye,"STRONG",{});var Rat=s(Pde);XSo=r(Rat,"flaubert"),Rat.forEach(t),zSo=r(Vye," \u2014 "),yj=n(Vye,"A",{href:!0});var Bat=s(yj);QSo=r(Bat,"FlaubertForTokenClassification"),Bat.forEach(t),WSo=r(Vye," (FlauBERT model)"),Vye.forEach(t),HSo=i(D),rb=n(D,"LI",{});var Xye=s(rb);$de=n(Xye,"STRONG",{});var Pat=s($de);USo=r(Pat,"fnet"),Pat.forEach(t),JSo=r(Xye," \u2014 "),Lj=n(Xye,"A",{href:!0});var $at=s(Lj);YSo=r($at,"FNetForTokenClassification"),$at.forEach(t),KSo=r(Xye," (FNet model)"),Xye.forEach(t),ZSo=i(D),tb=n(D,"LI",{});var zye=s(tb);Ide=n(zye,"STRONG",{});var Iat=s(Ide);eRo=r(Iat,"funnel"),Iat.forEach(t),oRo=r(zye," \u2014 "),xj=n(zye,"A",{href:!0});var qat=s(xj);rRo=r(qat,"FunnelForTokenClassification"),qat.forEach(t),tRo=r(zye," (Funnel Transformer model)"),zye.forEach(t),aRo=i(D),ab=n(D,"LI",{});var Qye=s(ab);qde=n(Qye,"STRONG",{});var Nat=s(qde);nRo=r(Nat,"gpt2"),Nat.forEach(t),sRo=r(Qye," \u2014 "),kj=n(Qye,"A",{href:!0});var jat=s(kj);lRo=r(jat,"GPT2ForTokenClassification"),jat.forEach(t),iRo=r(Qye," (OpenAI GPT-2 model)"),Qye.forEach(t),dRo=i(D),nb=n(D,"LI",{});var Wye=s(nb);Nde=n(Wye,"STRONG",{});var Dat=s(Nde);cRo=r(Dat,"ibert"),Dat.forEach(t),fRo=r(Wye," \u2014 "),Sj=n(Wye,"A",{href:!0});var Gat=s(Sj);mRo=r(Gat,"IBertForTokenClassification"),Gat.forEach(t),gRo=r(Wye," (I-BERT model)"),Wye.forEach(t),hRo=i(D),sb=n(D,"LI",{});var Hye=s(sb);jde=n(Hye,"STRONG",{});var Oat=s(jde);pRo=r(Oat,"layoutlm"),Oat.forEach(t),_Ro=r(Hye," \u2014 "),Rj=n(Hye,"A",{href:!0});var Vat=s(Rj);uRo=r(Vat,"LayoutLMForTokenClassification"),Vat.forEach(t),bRo=r(Hye," (LayoutLM model)"),Hye.forEach(t),FRo=i(D),lb=n(D,"LI",{});var Uye=s(lb);Dde=n(Uye,"STRONG",{});var Xat=s(Dde);vRo=r(Xat,"layoutlmv2"),Xat.forEach(t),TRo=r(Uye," \u2014 "),Bj=n(Uye,"A",{href:!0});var zat=s(Bj);MRo=r(zat,"LayoutLMv2ForTokenClassification"),zat.forEach(t),ERo=r(Uye," (LayoutLMv2 model)"),Uye.forEach(t),CRo=i(D),ib=n(D,"LI",{});var Jye=s(ib);Gde=n(Jye,"STRONG",{});var Qat=s(Gde);wRo=r(Qat,"longformer"),Qat.forEach(t),ARo=r(Jye," \u2014 "),Pj=n(Jye,"A",{href:!0});var Wat=s(Pj);yRo=r(Wat,"LongformerForTokenClassification"),Wat.forEach(t),LRo=r(Jye," (Longformer model)"),Jye.forEach(t),xRo=i(D),db=n(D,"LI",{});var Yye=s(db);Ode=n(Yye,"STRONG",{});var Hat=s(Ode);kRo=r(Hat,"megatron-bert"),Hat.forEach(t),SRo=r(Yye," \u2014 "),$j=n(Yye,"A",{href:!0});var Uat=s($j);RRo=r(Uat,"MegatronBertForTokenClassification"),Uat.forEach(t),BRo=r(Yye," (MegatronBert model)"),Yye.forEach(t),PRo=i(D),cb=n(D,"LI",{});var Kye=s(cb);Vde=n(Kye,"STRONG",{});var Jat=s(Vde);$Ro=r(Jat,"mobilebert"),Jat.forEach(t),IRo=r(Kye," \u2014 "),Ij=n(Kye,"A",{href:!0});var Yat=s(Ij);qRo=r(Yat,"MobileBertForTokenClassification"),Yat.forEach(t),NRo=r(Kye," (MobileBERT model)"),Kye.forEach(t),jRo=i(D),fb=n(D,"LI",{});var Zye=s(fb);Xde=n(Zye,"STRONG",{});var Kat=s(Xde);DRo=r(Kat,"mpnet"),Kat.forEach(t),GRo=r(Zye," \u2014 "),qj=n(Zye,"A",{href:!0});var Zat=s(qj);ORo=r(Zat,"MPNetForTokenClassification"),Zat.forEach(t),VRo=r(Zye," (MPNet model)"),Zye.forEach(t),XRo=i(D),mb=n(D,"LI",{});var eLe=s(mb);zde=n(eLe,"STRONG",{});var ent=s(zde);zRo=r(ent,"nystromformer"),ent.forEach(t),QRo=r(eLe," \u2014 "),Nj=n(eLe,"A",{href:!0});var ont=s(Nj);WRo=r(ont,"NystromformerForTokenClassification"),ont.forEach(t),HRo=r(eLe," (Nystromformer model)"),eLe.forEach(t),URo=i(D),gb=n(D,"LI",{});var oLe=s(gb);Qde=n(oLe,"STRONG",{});var rnt=s(Qde);JRo=r(rnt,"qdqbert"),rnt.forEach(t),YRo=r(oLe," \u2014 "),jj=n(oLe,"A",{href:!0});var tnt=s(jj);KRo=r(tnt,"QDQBertForTokenClassification"),tnt.forEach(t),ZRo=r(oLe," (QDQBert model)"),oLe.forEach(t),eBo=i(D),hb=n(D,"LI",{});var rLe=s(hb);Wde=n(rLe,"STRONG",{});var ant=s(Wde);oBo=r(ant,"rembert"),ant.forEach(t),rBo=r(rLe," \u2014 "),Dj=n(rLe,"A",{href:!0});var nnt=s(Dj);tBo=r(nnt,"RemBertForTokenClassification"),nnt.forEach(t),aBo=r(rLe," (RemBERT model)"),rLe.forEach(t),nBo=i(D),pb=n(D,"LI",{});var tLe=s(pb);Hde=n(tLe,"STRONG",{});var snt=s(Hde);sBo=r(snt,"roberta"),snt.forEach(t),lBo=r(tLe," \u2014 "),Gj=n(tLe,"A",{href:!0});var lnt=s(Gj);iBo=r(lnt,"RobertaForTokenClassification"),lnt.forEach(t),dBo=r(tLe," (RoBERTa model)"),tLe.forEach(t),cBo=i(D),_b=n(D,"LI",{});var aLe=s(_b);Ude=n(aLe,"STRONG",{});var int=s(Ude);fBo=r(int,"roformer"),int.forEach(t),mBo=r(aLe," \u2014 "),Oj=n(aLe,"A",{href:!0});var dnt=s(Oj);gBo=r(dnt,"RoFormerForTokenClassification"),dnt.forEach(t),hBo=r(aLe," (RoFormer model)"),aLe.forEach(t),pBo=i(D),ub=n(D,"LI",{});var nLe=s(ub);Jde=n(nLe,"STRONG",{});var cnt=s(Jde);_Bo=r(cnt,"squeezebert"),cnt.forEach(t),uBo=r(nLe," \u2014 "),Vj=n(nLe,"A",{href:!0});var fnt=s(Vj);bBo=r(fnt,"SqueezeBertForTokenClassification"),fnt.forEach(t),FBo=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),vBo=i(D),bb=n(D,"LI",{});var sLe=s(bb);Yde=n(sLe,"STRONG",{});var mnt=s(Yde);TBo=r(mnt,"xlm"),mnt.forEach(t),MBo=r(sLe," \u2014 "),Xj=n(sLe,"A",{href:!0});var gnt=s(Xj);EBo=r(gnt,"XLMForTokenClassification"),gnt.forEach(t),CBo=r(sLe," (XLM model)"),sLe.forEach(t),wBo=i(D),Fb=n(D,"LI",{});var lLe=s(Fb);Kde=n(lLe,"STRONG",{});var hnt=s(Kde);ABo=r(hnt,"xlm-roberta"),hnt.forEach(t),yBo=r(lLe," \u2014 "),zj=n(lLe,"A",{href:!0});var pnt=s(zj);LBo=r(pnt,"XLMRobertaForTokenClassification"),pnt.forEach(t),xBo=r(lLe," (XLM-RoBERTa model)"),lLe.forEach(t),kBo=i(D),vb=n(D,"LI",{});var iLe=s(vb);Zde=n(iLe,"STRONG",{});var _nt=s(Zde);SBo=r(_nt,"xlm-roberta-xl"),_nt.forEach(t),RBo=r(iLe," \u2014 "),Qj=n(iLe,"A",{href:!0});var unt=s(Qj);BBo=r(unt,"XLMRobertaXLForTokenClassification"),unt.forEach(t),PBo=r(iLe," (XLM-RoBERTa-XL model)"),iLe.forEach(t),$Bo=i(D),Tb=n(D,"LI",{});var dLe=s(Tb);ece=n(dLe,"STRONG",{});var bnt=s(ece);IBo=r(bnt,"xlnet"),bnt.forEach(t),qBo=r(dLe," \u2014 "),Wj=n(dLe,"A",{href:!0});var Fnt=s(Wj);NBo=r(Fnt,"XLNetForTokenClassification"),Fnt.forEach(t),jBo=r(dLe," (XLNet model)"),dLe.forEach(t),DBo=i(D),Mb=n(D,"LI",{});var cLe=s(Mb);oce=n(cLe,"STRONG",{});var vnt=s(oce);GBo=r(vnt,"yoso"),vnt.forEach(t),OBo=r(cLe," \u2014 "),Hj=n(cLe,"A",{href:!0});var Tnt=s(Hj);VBo=r(Tnt,"YosoForTokenClassification"),Tnt.forEach(t),XBo=r(cLe," (YOSO model)"),cLe.forEach(t),D.forEach(t),zBo=i(Ht),Eb=n(Ht,"P",{});var fLe=s(Eb);QBo=r(fLe,"The model is set in evaluation mode by default using "),rce=n(fLe,"CODE",{});var Mnt=s(rce);WBo=r(Mnt,"model.eval()"),Mnt.forEach(t),HBo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=n(fLe,"CODE",{});var Ent=s(tce);UBo=r(Ent,"model.train()"),Ent.forEach(t),fLe.forEach(t),JBo=i(Ht),ace=n(Ht,"P",{});var Cnt=s(ace);YBo=r(Cnt,"Examples:"),Cnt.forEach(t),KBo=i(Ht),m(pA.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),iBe=i(c),Ed=n(c,"H2",{class:!0});var u$e=s(Ed);Cb=n(u$e,"A",{id:!0,class:!0,href:!0});var wnt=s(Cb);nce=n(wnt,"SPAN",{});var Ant=s(nce);m(_A.$$.fragment,Ant),Ant.forEach(t),wnt.forEach(t),ZBo=i(u$e),sce=n(u$e,"SPAN",{});var ynt=s(sce);ePo=r(ynt,"AutoModelForQuestionAnswering"),ynt.forEach(t),u$e.forEach(t),dBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(uA.$$.fragment,fl),oPo=i(fl),Cd=n(fl,"P",{});var qU=s(Cd);rPo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Uj=n(qU,"A",{href:!0});var Lnt=s(Uj);tPo=r(Lnt,"from_pretrained()"),Lnt.forEach(t),aPo=r(qU," class method or the "),Jj=n(qU,"A",{href:!0});var xnt=s(Jj);nPo=r(xnt,"from_config()"),xnt.forEach(t),sPo=r(qU,` class
method.`),qU.forEach(t),lPo=i(fl),bA=n(fl,"P",{});var b$e=s(bA);iPo=r(b$e,"This class cannot be instantiated directly using "),lce=n(b$e,"CODE",{});var knt=s(lce);dPo=r(knt,"__init__()"),knt.forEach(t),cPo=r(b$e," (throws an error)."),b$e.forEach(t),fPo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(FA.$$.fragment,ml),mPo=i(ml),ice=n(ml,"P",{});var Snt=s(ice);gPo=r(Snt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Snt.forEach(t),hPo=i(ml),wd=n(ml,"P",{});var NU=s(wd);pPo=r(NU,`Note:
Loading a model from its configuration file does `),dce=n(NU,"STRONG",{});var Rnt=s(dce);_Po=r(Rnt,"not"),Rnt.forEach(t),uPo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Yj=n(NU,"A",{href:!0});var Bnt=s(Yj);bPo=r(Bnt,"from_pretrained()"),Bnt.forEach(t),FPo=r(NU," to load the model weights."),NU.forEach(t),vPo=i(ml),cce=n(ml,"P",{});var Pnt=s(cce);TPo=r(Pnt,"Examples:"),Pnt.forEach(t),MPo=i(ml),m(vA.$$.fragment,ml),ml.forEach(t),EPo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(TA.$$.fragment,Ut),CPo=i(Ut),fce=n(Ut,"P",{});var $nt=s(fce);wPo=r($nt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$nt.forEach(t),APo=i(Ut),Za=n(Ut,"P",{});var D3=s(Za);yPo=r(D3,"The model class to instantiate is selected based on the "),mce=n(D3,"CODE",{});var Int=s(mce);LPo=r(Int,"model_type"),Int.forEach(t),xPo=r(D3,` property of the config object (either
passed as an argument or loaded from `),gce=n(D3,"CODE",{});var qnt=s(gce);kPo=r(qnt,"pretrained_model_name_or_path"),qnt.forEach(t),SPo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(D3,"CODE",{});var Nnt=s(hce);RPo=r(Nnt,"pretrained_model_name_or_path"),Nnt.forEach(t),BPo=r(D3,":"),D3.forEach(t),PPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);wb=n(P,"LI",{});var mLe=s(wb);pce=n(mLe,"STRONG",{});var jnt=s(pce);$Po=r(jnt,"albert"),jnt.forEach(t),IPo=r(mLe," \u2014 "),Kj=n(mLe,"A",{href:!0});var Dnt=s(Kj);qPo=r(Dnt,"AlbertForQuestionAnswering"),Dnt.forEach(t),NPo=r(mLe," (ALBERT model)"),mLe.forEach(t),jPo=i(P),Ab=n(P,"LI",{});var gLe=s(Ab);_ce=n(gLe,"STRONG",{});var Gnt=s(_ce);DPo=r(Gnt,"bart"),Gnt.forEach(t),GPo=r(gLe," \u2014 "),Zj=n(gLe,"A",{href:!0});var Ont=s(Zj);OPo=r(Ont,"BartForQuestionAnswering"),Ont.forEach(t),VPo=r(gLe," (BART model)"),gLe.forEach(t),XPo=i(P),yb=n(P,"LI",{});var hLe=s(yb);uce=n(hLe,"STRONG",{});var Vnt=s(uce);zPo=r(Vnt,"bert"),Vnt.forEach(t),QPo=r(hLe," \u2014 "),eD=n(hLe,"A",{href:!0});var Xnt=s(eD);WPo=r(Xnt,"BertForQuestionAnswering"),Xnt.forEach(t),HPo=r(hLe," (BERT model)"),hLe.forEach(t),UPo=i(P),Lb=n(P,"LI",{});var pLe=s(Lb);bce=n(pLe,"STRONG",{});var znt=s(bce);JPo=r(znt,"big_bird"),znt.forEach(t),YPo=r(pLe," \u2014 "),oD=n(pLe,"A",{href:!0});var Qnt=s(oD);KPo=r(Qnt,"BigBirdForQuestionAnswering"),Qnt.forEach(t),ZPo=r(pLe," (BigBird model)"),pLe.forEach(t),e$o=i(P),xb=n(P,"LI",{});var _Le=s(xb);Fce=n(_Le,"STRONG",{});var Wnt=s(Fce);o$o=r(Wnt,"bigbird_pegasus"),Wnt.forEach(t),r$o=r(_Le," \u2014 "),rD=n(_Le,"A",{href:!0});var Hnt=s(rD);t$o=r(Hnt,"BigBirdPegasusForQuestionAnswering"),Hnt.forEach(t),a$o=r(_Le," (BigBirdPegasus model)"),_Le.forEach(t),n$o=i(P),kb=n(P,"LI",{});var uLe=s(kb);vce=n(uLe,"STRONG",{});var Unt=s(vce);s$o=r(Unt,"camembert"),Unt.forEach(t),l$o=r(uLe," \u2014 "),tD=n(uLe,"A",{href:!0});var Jnt=s(tD);i$o=r(Jnt,"CamembertForQuestionAnswering"),Jnt.forEach(t),d$o=r(uLe," (CamemBERT model)"),uLe.forEach(t),c$o=i(P),Sb=n(P,"LI",{});var bLe=s(Sb);Tce=n(bLe,"STRONG",{});var Ynt=s(Tce);f$o=r(Ynt,"canine"),Ynt.forEach(t),m$o=r(bLe," \u2014 "),aD=n(bLe,"A",{href:!0});var Knt=s(aD);g$o=r(Knt,"CanineForQuestionAnswering"),Knt.forEach(t),h$o=r(bLe," (Canine model)"),bLe.forEach(t),p$o=i(P),Rb=n(P,"LI",{});var FLe=s(Rb);Mce=n(FLe,"STRONG",{});var Znt=s(Mce);_$o=r(Znt,"convbert"),Znt.forEach(t),u$o=r(FLe," \u2014 "),nD=n(FLe,"A",{href:!0});var est=s(nD);b$o=r(est,"ConvBertForQuestionAnswering"),est.forEach(t),F$o=r(FLe," (ConvBERT model)"),FLe.forEach(t),v$o=i(P),Bb=n(P,"LI",{});var vLe=s(Bb);Ece=n(vLe,"STRONG",{});var ost=s(Ece);T$o=r(ost,"data2vec-text"),ost.forEach(t),M$o=r(vLe," \u2014 "),sD=n(vLe,"A",{href:!0});var rst=s(sD);E$o=r(rst,"Data2VecTextForQuestionAnswering"),rst.forEach(t),C$o=r(vLe," (Data2VecText model)"),vLe.forEach(t),w$o=i(P),Pb=n(P,"LI",{});var TLe=s(Pb);Cce=n(TLe,"STRONG",{});var tst=s(Cce);A$o=r(tst,"deberta"),tst.forEach(t),y$o=r(TLe," \u2014 "),lD=n(TLe,"A",{href:!0});var ast=s(lD);L$o=r(ast,"DebertaForQuestionAnswering"),ast.forEach(t),x$o=r(TLe," (DeBERTa model)"),TLe.forEach(t),k$o=i(P),$b=n(P,"LI",{});var MLe=s($b);wce=n(MLe,"STRONG",{});var nst=s(wce);S$o=r(nst,"deberta-v2"),nst.forEach(t),R$o=r(MLe," \u2014 "),iD=n(MLe,"A",{href:!0});var sst=s(iD);B$o=r(sst,"DebertaV2ForQuestionAnswering"),sst.forEach(t),P$o=r(MLe," (DeBERTa-v2 model)"),MLe.forEach(t),$$o=i(P),Ib=n(P,"LI",{});var ELe=s(Ib);Ace=n(ELe,"STRONG",{});var lst=s(Ace);I$o=r(lst,"distilbert"),lst.forEach(t),q$o=r(ELe," \u2014 "),dD=n(ELe,"A",{href:!0});var ist=s(dD);N$o=r(ist,"DistilBertForQuestionAnswering"),ist.forEach(t),j$o=r(ELe," (DistilBERT model)"),ELe.forEach(t),D$o=i(P),qb=n(P,"LI",{});var CLe=s(qb);yce=n(CLe,"STRONG",{});var dst=s(yce);G$o=r(dst,"electra"),dst.forEach(t),O$o=r(CLe," \u2014 "),cD=n(CLe,"A",{href:!0});var cst=s(cD);V$o=r(cst,"ElectraForQuestionAnswering"),cst.forEach(t),X$o=r(CLe," (ELECTRA model)"),CLe.forEach(t),z$o=i(P),Nb=n(P,"LI",{});var wLe=s(Nb);Lce=n(wLe,"STRONG",{});var fst=s(Lce);Q$o=r(fst,"flaubert"),fst.forEach(t),W$o=r(wLe," \u2014 "),fD=n(wLe,"A",{href:!0});var mst=s(fD);H$o=r(mst,"FlaubertForQuestionAnsweringSimple"),mst.forEach(t),U$o=r(wLe," (FlauBERT model)"),wLe.forEach(t),J$o=i(P),jb=n(P,"LI",{});var ALe=s(jb);xce=n(ALe,"STRONG",{});var gst=s(xce);Y$o=r(gst,"fnet"),gst.forEach(t),K$o=r(ALe," \u2014 "),mD=n(ALe,"A",{href:!0});var hst=s(mD);Z$o=r(hst,"FNetForQuestionAnswering"),hst.forEach(t),eIo=r(ALe," (FNet model)"),ALe.forEach(t),oIo=i(P),Db=n(P,"LI",{});var yLe=s(Db);kce=n(yLe,"STRONG",{});var pst=s(kce);rIo=r(pst,"funnel"),pst.forEach(t),tIo=r(yLe," \u2014 "),gD=n(yLe,"A",{href:!0});var _st=s(gD);aIo=r(_st,"FunnelForQuestionAnswering"),_st.forEach(t),nIo=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),sIo=i(P),Gb=n(P,"LI",{});var LLe=s(Gb);Sce=n(LLe,"STRONG",{});var ust=s(Sce);lIo=r(ust,"gptj"),ust.forEach(t),iIo=r(LLe," \u2014 "),hD=n(LLe,"A",{href:!0});var bst=s(hD);dIo=r(bst,"GPTJForQuestionAnswering"),bst.forEach(t),cIo=r(LLe," (GPT-J model)"),LLe.forEach(t),fIo=i(P),Ob=n(P,"LI",{});var xLe=s(Ob);Rce=n(xLe,"STRONG",{});var Fst=s(Rce);mIo=r(Fst,"ibert"),Fst.forEach(t),gIo=r(xLe," \u2014 "),pD=n(xLe,"A",{href:!0});var vst=s(pD);hIo=r(vst,"IBertForQuestionAnswering"),vst.forEach(t),pIo=r(xLe," (I-BERT model)"),xLe.forEach(t),_Io=i(P),Vb=n(P,"LI",{});var kLe=s(Vb);Bce=n(kLe,"STRONG",{});var Tst=s(Bce);uIo=r(Tst,"layoutlmv2"),Tst.forEach(t),bIo=r(kLe," \u2014 "),_D=n(kLe,"A",{href:!0});var Mst=s(_D);FIo=r(Mst,"LayoutLMv2ForQuestionAnswering"),Mst.forEach(t),vIo=r(kLe," (LayoutLMv2 model)"),kLe.forEach(t),TIo=i(P),Xb=n(P,"LI",{});var SLe=s(Xb);Pce=n(SLe,"STRONG",{});var Est=s(Pce);MIo=r(Est,"led"),Est.forEach(t),EIo=r(SLe," \u2014 "),uD=n(SLe,"A",{href:!0});var Cst=s(uD);CIo=r(Cst,"LEDForQuestionAnswering"),Cst.forEach(t),wIo=r(SLe," (LED model)"),SLe.forEach(t),AIo=i(P),zb=n(P,"LI",{});var RLe=s(zb);$ce=n(RLe,"STRONG",{});var wst=s($ce);yIo=r(wst,"longformer"),wst.forEach(t),LIo=r(RLe," \u2014 "),bD=n(RLe,"A",{href:!0});var Ast=s(bD);xIo=r(Ast,"LongformerForQuestionAnswering"),Ast.forEach(t),kIo=r(RLe," (Longformer model)"),RLe.forEach(t),SIo=i(P),Qb=n(P,"LI",{});var BLe=s(Qb);Ice=n(BLe,"STRONG",{});var yst=s(Ice);RIo=r(yst,"lxmert"),yst.forEach(t),BIo=r(BLe," \u2014 "),FD=n(BLe,"A",{href:!0});var Lst=s(FD);PIo=r(Lst,"LxmertForQuestionAnswering"),Lst.forEach(t),$Io=r(BLe," (LXMERT model)"),BLe.forEach(t),IIo=i(P),Wb=n(P,"LI",{});var PLe=s(Wb);qce=n(PLe,"STRONG",{});var xst=s(qce);qIo=r(xst,"mbart"),xst.forEach(t),NIo=r(PLe," \u2014 "),vD=n(PLe,"A",{href:!0});var kst=s(vD);jIo=r(kst,"MBartForQuestionAnswering"),kst.forEach(t),DIo=r(PLe," (mBART model)"),PLe.forEach(t),GIo=i(P),Hb=n(P,"LI",{});var $Le=s(Hb);Nce=n($Le,"STRONG",{});var Sst=s(Nce);OIo=r(Sst,"megatron-bert"),Sst.forEach(t),VIo=r($Le," \u2014 "),TD=n($Le,"A",{href:!0});var Rst=s(TD);XIo=r(Rst,"MegatronBertForQuestionAnswering"),Rst.forEach(t),zIo=r($Le," (MegatronBert model)"),$Le.forEach(t),QIo=i(P),Ub=n(P,"LI",{});var ILe=s(Ub);jce=n(ILe,"STRONG",{});var Bst=s(jce);WIo=r(Bst,"mobilebert"),Bst.forEach(t),HIo=r(ILe," \u2014 "),MD=n(ILe,"A",{href:!0});var Pst=s(MD);UIo=r(Pst,"MobileBertForQuestionAnswering"),Pst.forEach(t),JIo=r(ILe," (MobileBERT model)"),ILe.forEach(t),YIo=i(P),Jb=n(P,"LI",{});var qLe=s(Jb);Dce=n(qLe,"STRONG",{});var $st=s(Dce);KIo=r($st,"mpnet"),$st.forEach(t),ZIo=r(qLe," \u2014 "),ED=n(qLe,"A",{href:!0});var Ist=s(ED);eqo=r(Ist,"MPNetForQuestionAnswering"),Ist.forEach(t),oqo=r(qLe," (MPNet model)"),qLe.forEach(t),rqo=i(P),Yb=n(P,"LI",{});var NLe=s(Yb);Gce=n(NLe,"STRONG",{});var qst=s(Gce);tqo=r(qst,"nystromformer"),qst.forEach(t),aqo=r(NLe," \u2014 "),CD=n(NLe,"A",{href:!0});var Nst=s(CD);nqo=r(Nst,"NystromformerForQuestionAnswering"),Nst.forEach(t),sqo=r(NLe," (Nystromformer model)"),NLe.forEach(t),lqo=i(P),Kb=n(P,"LI",{});var jLe=s(Kb);Oce=n(jLe,"STRONG",{});var jst=s(Oce);iqo=r(jst,"qdqbert"),jst.forEach(t),dqo=r(jLe," \u2014 "),wD=n(jLe,"A",{href:!0});var Dst=s(wD);cqo=r(Dst,"QDQBertForQuestionAnswering"),Dst.forEach(t),fqo=r(jLe," (QDQBert model)"),jLe.forEach(t),mqo=i(P),Zb=n(P,"LI",{});var DLe=s(Zb);Vce=n(DLe,"STRONG",{});var Gst=s(Vce);gqo=r(Gst,"reformer"),Gst.forEach(t),hqo=r(DLe," \u2014 "),AD=n(DLe,"A",{href:!0});var Ost=s(AD);pqo=r(Ost,"ReformerForQuestionAnswering"),Ost.forEach(t),_qo=r(DLe," (Reformer model)"),DLe.forEach(t),uqo=i(P),e5=n(P,"LI",{});var GLe=s(e5);Xce=n(GLe,"STRONG",{});var Vst=s(Xce);bqo=r(Vst,"rembert"),Vst.forEach(t),Fqo=r(GLe," \u2014 "),yD=n(GLe,"A",{href:!0});var Xst=s(yD);vqo=r(Xst,"RemBertForQuestionAnswering"),Xst.forEach(t),Tqo=r(GLe," (RemBERT model)"),GLe.forEach(t),Mqo=i(P),o5=n(P,"LI",{});var OLe=s(o5);zce=n(OLe,"STRONG",{});var zst=s(zce);Eqo=r(zst,"roberta"),zst.forEach(t),Cqo=r(OLe," \u2014 "),LD=n(OLe,"A",{href:!0});var Qst=s(LD);wqo=r(Qst,"RobertaForQuestionAnswering"),Qst.forEach(t),Aqo=r(OLe," (RoBERTa model)"),OLe.forEach(t),yqo=i(P),r5=n(P,"LI",{});var VLe=s(r5);Qce=n(VLe,"STRONG",{});var Wst=s(Qce);Lqo=r(Wst,"roformer"),Wst.forEach(t),xqo=r(VLe," \u2014 "),xD=n(VLe,"A",{href:!0});var Hst=s(xD);kqo=r(Hst,"RoFormerForQuestionAnswering"),Hst.forEach(t),Sqo=r(VLe," (RoFormer model)"),VLe.forEach(t),Rqo=i(P),t5=n(P,"LI",{});var XLe=s(t5);Wce=n(XLe,"STRONG",{});var Ust=s(Wce);Bqo=r(Ust,"splinter"),Ust.forEach(t),Pqo=r(XLe," \u2014 "),kD=n(XLe,"A",{href:!0});var Jst=s(kD);$qo=r(Jst,"SplinterForQuestionAnswering"),Jst.forEach(t),Iqo=r(XLe," (Splinter model)"),XLe.forEach(t),qqo=i(P),a5=n(P,"LI",{});var zLe=s(a5);Hce=n(zLe,"STRONG",{});var Yst=s(Hce);Nqo=r(Yst,"squeezebert"),Yst.forEach(t),jqo=r(zLe," \u2014 "),SD=n(zLe,"A",{href:!0});var Kst=s(SD);Dqo=r(Kst,"SqueezeBertForQuestionAnswering"),Kst.forEach(t),Gqo=r(zLe," (SqueezeBERT model)"),zLe.forEach(t),Oqo=i(P),n5=n(P,"LI",{});var QLe=s(n5);Uce=n(QLe,"STRONG",{});var Zst=s(Uce);Vqo=r(Zst,"xlm"),Zst.forEach(t),Xqo=r(QLe," \u2014 "),RD=n(QLe,"A",{href:!0});var elt=s(RD);zqo=r(elt,"XLMForQuestionAnsweringSimple"),elt.forEach(t),Qqo=r(QLe," (XLM model)"),QLe.forEach(t),Wqo=i(P),s5=n(P,"LI",{});var WLe=s(s5);Jce=n(WLe,"STRONG",{});var olt=s(Jce);Hqo=r(olt,"xlm-roberta"),olt.forEach(t),Uqo=r(WLe," \u2014 "),BD=n(WLe,"A",{href:!0});var rlt=s(BD);Jqo=r(rlt,"XLMRobertaForQuestionAnswering"),rlt.forEach(t),Yqo=r(WLe," (XLM-RoBERTa model)"),WLe.forEach(t),Kqo=i(P),l5=n(P,"LI",{});var HLe=s(l5);Yce=n(HLe,"STRONG",{});var tlt=s(Yce);Zqo=r(tlt,"xlm-roberta-xl"),tlt.forEach(t),eNo=r(HLe," \u2014 "),PD=n(HLe,"A",{href:!0});var alt=s(PD);oNo=r(alt,"XLMRobertaXLForQuestionAnswering"),alt.forEach(t),rNo=r(HLe," (XLM-RoBERTa-XL model)"),HLe.forEach(t),tNo=i(P),i5=n(P,"LI",{});var ULe=s(i5);Kce=n(ULe,"STRONG",{});var nlt=s(Kce);aNo=r(nlt,"xlnet"),nlt.forEach(t),nNo=r(ULe," \u2014 "),$D=n(ULe,"A",{href:!0});var slt=s($D);sNo=r(slt,"XLNetForQuestionAnsweringSimple"),slt.forEach(t),lNo=r(ULe," (XLNet model)"),ULe.forEach(t),iNo=i(P),d5=n(P,"LI",{});var JLe=s(d5);Zce=n(JLe,"STRONG",{});var llt=s(Zce);dNo=r(llt,"yoso"),llt.forEach(t),cNo=r(JLe," \u2014 "),ID=n(JLe,"A",{href:!0});var ilt=s(ID);fNo=r(ilt,"YosoForQuestionAnswering"),ilt.forEach(t),mNo=r(JLe," (YOSO model)"),JLe.forEach(t),P.forEach(t),gNo=i(Ut),c5=n(Ut,"P",{});var YLe=s(c5);hNo=r(YLe,"The model is set in evaluation mode by default using "),efe=n(YLe,"CODE",{});var dlt=s(efe);pNo=r(dlt,"model.eval()"),dlt.forEach(t),_No=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(YLe,"CODE",{});var clt=s(ofe);uNo=r(clt,"model.train()"),clt.forEach(t),YLe.forEach(t),bNo=i(Ut),rfe=n(Ut,"P",{});var flt=s(rfe);FNo=r(flt,"Examples:"),flt.forEach(t),vNo=i(Ut),m(MA.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),cBe=i(c),Ad=n(c,"H2",{class:!0});var F$e=s(Ad);f5=n(F$e,"A",{id:!0,class:!0,href:!0});var mlt=s(f5);tfe=n(mlt,"SPAN",{});var glt=s(tfe);m(EA.$$.fragment,glt),glt.forEach(t),mlt.forEach(t),TNo=i(F$e),afe=n(F$e,"SPAN",{});var hlt=s(afe);MNo=r(hlt,"AutoModelForTableQuestionAnswering"),hlt.forEach(t),F$e.forEach(t),fBe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(CA.$$.fragment,gl),ENo=i(gl),yd=n(gl,"P",{});var jU=s(yd);CNo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qD=n(jU,"A",{href:!0});var plt=s(qD);wNo=r(plt,"from_pretrained()"),plt.forEach(t),ANo=r(jU," class method or the "),ND=n(jU,"A",{href:!0});var _lt=s(ND);yNo=r(_lt,"from_config()"),_lt.forEach(t),LNo=r(jU,` class
method.`),jU.forEach(t),xNo=i(gl),wA=n(gl,"P",{});var v$e=s(wA);kNo=r(v$e,"This class cannot be instantiated directly using "),nfe=n(v$e,"CODE",{});var ult=s(nfe);SNo=r(ult,"__init__()"),ult.forEach(t),RNo=r(v$e," (throws an error)."),v$e.forEach(t),BNo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(AA.$$.fragment,hl),PNo=i(hl),sfe=n(hl,"P",{});var blt=s(sfe);$No=r(blt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),blt.forEach(t),INo=i(hl),Ld=n(hl,"P",{});var DU=s(Ld);qNo=r(DU,`Note:
Loading a model from its configuration file does `),lfe=n(DU,"STRONG",{});var Flt=s(lfe);NNo=r(Flt,"not"),Flt.forEach(t),jNo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(DU,"A",{href:!0});var vlt=s(jD);DNo=r(vlt,"from_pretrained()"),vlt.forEach(t),GNo=r(DU," to load the model weights."),DU.forEach(t),ONo=i(hl),ife=n(hl,"P",{});var Tlt=s(ife);VNo=r(Tlt,"Examples:"),Tlt.forEach(t),XNo=i(hl),m(yA.$$.fragment,hl),hl.forEach(t),zNo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(LA.$$.fragment,Jt),QNo=i(Jt),dfe=n(Jt,"P",{});var Mlt=s(dfe);WNo=r(Mlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mlt.forEach(t),HNo=i(Jt),en=n(Jt,"P",{});var G3=s(en);UNo=r(G3,"The model class to instantiate is selected based on the "),cfe=n(G3,"CODE",{});var Elt=s(cfe);JNo=r(Elt,"model_type"),Elt.forEach(t),YNo=r(G3,` property of the config object (either
passed as an argument or loaded from `),ffe=n(G3,"CODE",{});var Clt=s(ffe);KNo=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),ZNo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(G3,"CODE",{});var wlt=s(mfe);ejo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),ojo=r(G3,":"),G3.forEach(t),rjo=i(Jt),gfe=n(Jt,"UL",{});var Alt=s(gfe);m5=n(Alt,"LI",{});var KLe=s(m5);hfe=n(KLe,"STRONG",{});var ylt=s(hfe);tjo=r(ylt,"tapas"),ylt.forEach(t),ajo=r(KLe," \u2014 "),DD=n(KLe,"A",{href:!0});var Llt=s(DD);njo=r(Llt,"TapasForQuestionAnswering"),Llt.forEach(t),sjo=r(KLe," (TAPAS model)"),KLe.forEach(t),Alt.forEach(t),ljo=i(Jt),g5=n(Jt,"P",{});var ZLe=s(g5);ijo=r(ZLe,"The model is set in evaluation mode by default using "),pfe=n(ZLe,"CODE",{});var xlt=s(pfe);djo=r(xlt,"model.eval()"),xlt.forEach(t),cjo=r(ZLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=n(ZLe,"CODE",{});var klt=s(_fe);fjo=r(klt,"model.train()"),klt.forEach(t),ZLe.forEach(t),mjo=i(Jt),ufe=n(Jt,"P",{});var Slt=s(ufe);gjo=r(Slt,"Examples:"),Slt.forEach(t),hjo=i(Jt),m(xA.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),mBe=i(c),xd=n(c,"H2",{class:!0});var T$e=s(xd);h5=n(T$e,"A",{id:!0,class:!0,href:!0});var Rlt=s(h5);bfe=n(Rlt,"SPAN",{});var Blt=s(bfe);m(kA.$$.fragment,Blt),Blt.forEach(t),Rlt.forEach(t),pjo=i(T$e),Ffe=n(T$e,"SPAN",{});var Plt=s(Ffe);_jo=r(Plt,"AutoModelForImageClassification"),Plt.forEach(t),T$e.forEach(t),gBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(SA.$$.fragment,pl),ujo=i(pl),kd=n(pl,"P",{});var GU=s(kd);bjo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),GD=n(GU,"A",{href:!0});var $lt=s(GD);Fjo=r($lt,"from_pretrained()"),$lt.forEach(t),vjo=r(GU," class method or the "),OD=n(GU,"A",{href:!0});var Ilt=s(OD);Tjo=r(Ilt,"from_config()"),Ilt.forEach(t),Mjo=r(GU,` class
method.`),GU.forEach(t),Ejo=i(pl),RA=n(pl,"P",{});var M$e=s(RA);Cjo=r(M$e,"This class cannot be instantiated directly using "),vfe=n(M$e,"CODE",{});var qlt=s(vfe);wjo=r(qlt,"__init__()"),qlt.forEach(t),Ajo=r(M$e," (throws an error)."),M$e.forEach(t),yjo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(BA.$$.fragment,_l),Ljo=i(_l),Tfe=n(_l,"P",{});var Nlt=s(Tfe);xjo=r(Nlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nlt.forEach(t),kjo=i(_l),Sd=n(_l,"P",{});var OU=s(Sd);Sjo=r(OU,`Note:
Loading a model from its configuration file does `),Mfe=n(OU,"STRONG",{});var jlt=s(Mfe);Rjo=r(jlt,"not"),jlt.forEach(t),Bjo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(OU,"A",{href:!0});var Dlt=s(VD);Pjo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),$jo=r(OU," to load the model weights."),OU.forEach(t),Ijo=i(_l),Efe=n(_l,"P",{});var Glt=s(Efe);qjo=r(Glt,"Examples:"),Glt.forEach(t),Njo=i(_l),m(PA.$$.fragment,_l),_l.forEach(t),jjo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m($A.$$.fragment,Yt),Djo=i(Yt),Cfe=n(Yt,"P",{});var Olt=s(Cfe);Gjo=r(Olt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Olt.forEach(t),Ojo=i(Yt),on=n(Yt,"P",{});var O3=s(on);Vjo=r(O3,"The model class to instantiate is selected based on the "),wfe=n(O3,"CODE",{});var Vlt=s(wfe);Xjo=r(Vlt,"model_type"),Vlt.forEach(t),zjo=r(O3,` property of the config object (either
passed as an argument or loaded from `),Afe=n(O3,"CODE",{});var Xlt=s(Afe);Qjo=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),Wjo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=n(O3,"CODE",{});var zlt=s(yfe);Hjo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),Ujo=r(O3,":"),O3.forEach(t),Jjo=i(Yt),ce=n(Yt,"UL",{});var he=s(ce);p5=n(he,"LI",{});var e8e=s(p5);Lfe=n(e8e,"STRONG",{});var Qlt=s(Lfe);Yjo=r(Qlt,"beit"),Qlt.forEach(t),Kjo=r(e8e," \u2014 "),XD=n(e8e,"A",{href:!0});var Wlt=s(XD);Zjo=r(Wlt,"BeitForImageClassification"),Wlt.forEach(t),eDo=r(e8e," (BEiT model)"),e8e.forEach(t),oDo=i(he),_5=n(he,"LI",{});var o8e=s(_5);xfe=n(o8e,"STRONG",{});var Hlt=s(xfe);rDo=r(Hlt,"convnext"),Hlt.forEach(t),tDo=r(o8e," \u2014 "),zD=n(o8e,"A",{href:!0});var Ult=s(zD);aDo=r(Ult,"ConvNextForImageClassification"),Ult.forEach(t),nDo=r(o8e," (ConvNext model)"),o8e.forEach(t),sDo=i(he),Ds=n(he,"LI",{});var u9=s(Ds);kfe=n(u9,"STRONG",{});var Jlt=s(kfe);lDo=r(Jlt,"deit"),Jlt.forEach(t),iDo=r(u9," \u2014 "),QD=n(u9,"A",{href:!0});var Ylt=s(QD);dDo=r(Ylt,"DeiTForImageClassification"),Ylt.forEach(t),cDo=r(u9," or "),WD=n(u9,"A",{href:!0});var Klt=s(WD);fDo=r(Klt,"DeiTForImageClassificationWithTeacher"),Klt.forEach(t),mDo=r(u9," (DeiT model)"),u9.forEach(t),gDo=i(he),u5=n(he,"LI",{});var r8e=s(u5);Sfe=n(r8e,"STRONG",{});var Zlt=s(Sfe);hDo=r(Zlt,"imagegpt"),Zlt.forEach(t),pDo=r(r8e," \u2014 "),HD=n(r8e,"A",{href:!0});var eit=s(HD);_Do=r(eit,"ImageGPTForImageClassification"),eit.forEach(t),uDo=r(r8e," (ImageGPT model)"),r8e.forEach(t),bDo=i(he),ma=n(he,"LI",{});var $f=s(ma);Rfe=n($f,"STRONG",{});var oit=s(Rfe);FDo=r(oit,"perceiver"),oit.forEach(t),vDo=r($f," \u2014 "),UD=n($f,"A",{href:!0});var rit=s(UD);TDo=r(rit,"PerceiverForImageClassificationLearned"),rit.forEach(t),MDo=r($f," or "),JD=n($f,"A",{href:!0});var tit=s(JD);EDo=r(tit,"PerceiverForImageClassificationFourier"),tit.forEach(t),CDo=r($f," or "),YD=n($f,"A",{href:!0});var ait=s(YD);wDo=r(ait,"PerceiverForImageClassificationConvProcessing"),ait.forEach(t),ADo=r($f," (Perceiver model)"),$f.forEach(t),yDo=i(he),b5=n(he,"LI",{});var t8e=s(b5);Bfe=n(t8e,"STRONG",{});var nit=s(Bfe);LDo=r(nit,"poolformer"),nit.forEach(t),xDo=r(t8e," \u2014 "),KD=n(t8e,"A",{href:!0});var sit=s(KD);kDo=r(sit,"PoolFormerForImageClassification"),sit.forEach(t),SDo=r(t8e," (PoolFormer model)"),t8e.forEach(t),RDo=i(he),F5=n(he,"LI",{});var a8e=s(F5);Pfe=n(a8e,"STRONG",{});var lit=s(Pfe);BDo=r(lit,"regnet"),lit.forEach(t),PDo=r(a8e," \u2014 "),ZD=n(a8e,"A",{href:!0});var iit=s(ZD);$Do=r(iit,"RegNetForImageClassification"),iit.forEach(t),IDo=r(a8e," (RegNet model)"),a8e.forEach(t),qDo=i(he),v5=n(he,"LI",{});var n8e=s(v5);$fe=n(n8e,"STRONG",{});var dit=s($fe);NDo=r(dit,"resnet"),dit.forEach(t),jDo=r(n8e," \u2014 "),eG=n(n8e,"A",{href:!0});var cit=s(eG);DDo=r(cit,"ResNetForImageClassification"),cit.forEach(t),GDo=r(n8e," (ResNet model)"),n8e.forEach(t),ODo=i(he),T5=n(he,"LI",{});var s8e=s(T5);Ife=n(s8e,"STRONG",{});var fit=s(Ife);VDo=r(fit,"segformer"),fit.forEach(t),XDo=r(s8e," \u2014 "),oG=n(s8e,"A",{href:!0});var mit=s(oG);zDo=r(mit,"SegformerForImageClassification"),mit.forEach(t),QDo=r(s8e," (SegFormer model)"),s8e.forEach(t),WDo=i(he),M5=n(he,"LI",{});var l8e=s(M5);qfe=n(l8e,"STRONG",{});var git=s(qfe);HDo=r(git,"swin"),git.forEach(t),UDo=r(l8e," \u2014 "),rG=n(l8e,"A",{href:!0});var hit=s(rG);JDo=r(hit,"SwinForImageClassification"),hit.forEach(t),YDo=r(l8e," (Swin model)"),l8e.forEach(t),KDo=i(he),E5=n(he,"LI",{});var i8e=s(E5);Nfe=n(i8e,"STRONG",{});var pit=s(Nfe);ZDo=r(pit,"van"),pit.forEach(t),eGo=r(i8e," \u2014 "),tG=n(i8e,"A",{href:!0});var _it=s(tG);oGo=r(_it,"VanForImageClassification"),_it.forEach(t),rGo=r(i8e," (VAN model)"),i8e.forEach(t),tGo=i(he),C5=n(he,"LI",{});var d8e=s(C5);jfe=n(d8e,"STRONG",{});var uit=s(jfe);aGo=r(uit,"vit"),uit.forEach(t),nGo=r(d8e," \u2014 "),aG=n(d8e,"A",{href:!0});var bit=s(aG);sGo=r(bit,"ViTForImageClassification"),bit.forEach(t),lGo=r(d8e," (ViT model)"),d8e.forEach(t),he.forEach(t),iGo=i(Yt),w5=n(Yt,"P",{});var c8e=s(w5);dGo=r(c8e,"The model is set in evaluation mode by default using "),Dfe=n(c8e,"CODE",{});var Fit=s(Dfe);cGo=r(Fit,"model.eval()"),Fit.forEach(t),fGo=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(c8e,"CODE",{});var vit=s(Gfe);mGo=r(vit,"model.train()"),vit.forEach(t),c8e.forEach(t),gGo=i(Yt),Ofe=n(Yt,"P",{});var Tit=s(Ofe);hGo=r(Tit,"Examples:"),Tit.forEach(t),pGo=i(Yt),m(IA.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),hBe=i(c),Rd=n(c,"H2",{class:!0});var E$e=s(Rd);A5=n(E$e,"A",{id:!0,class:!0,href:!0});var Mit=s(A5);Vfe=n(Mit,"SPAN",{});var Eit=s(Vfe);m(qA.$$.fragment,Eit),Eit.forEach(t),Mit.forEach(t),_Go=i(E$e),Xfe=n(E$e,"SPAN",{});var Cit=s(Xfe);uGo=r(Cit,"AutoModelForVision2Seq"),Cit.forEach(t),E$e.forEach(t),pBe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(NA.$$.fragment,ul),bGo=i(ul),Bd=n(ul,"P",{});var VU=s(Bd);FGo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nG=n(VU,"A",{href:!0});var wit=s(nG);vGo=r(wit,"from_pretrained()"),wit.forEach(t),TGo=r(VU," class method or the "),sG=n(VU,"A",{href:!0});var Ait=s(sG);MGo=r(Ait,"from_config()"),Ait.forEach(t),EGo=r(VU,` class
method.`),VU.forEach(t),CGo=i(ul),jA=n(ul,"P",{});var C$e=s(jA);wGo=r(C$e,"This class cannot be instantiated directly using "),zfe=n(C$e,"CODE",{});var yit=s(zfe);AGo=r(yit,"__init__()"),yit.forEach(t),yGo=r(C$e," (throws an error)."),C$e.forEach(t),LGo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(DA.$$.fragment,bl),xGo=i(bl),Qfe=n(bl,"P",{});var Lit=s(Qfe);kGo=r(Lit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Lit.forEach(t),SGo=i(bl),Pd=n(bl,"P",{});var XU=s(Pd);RGo=r(XU,`Note:
Loading a model from its configuration file does `),Wfe=n(XU,"STRONG",{});var xit=s(Wfe);BGo=r(xit,"not"),xit.forEach(t),PGo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(XU,"A",{href:!0});var kit=s(lG);$Go=r(kit,"from_pretrained()"),kit.forEach(t),IGo=r(XU," to load the model weights."),XU.forEach(t),qGo=i(bl),Hfe=n(bl,"P",{});var Sit=s(Hfe);NGo=r(Sit,"Examples:"),Sit.forEach(t),jGo=i(bl),m(GA.$$.fragment,bl),bl.forEach(t),DGo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(OA.$$.fragment,Kt),GGo=i(Kt),Ufe=n(Kt,"P",{});var Rit=s(Ufe);OGo=r(Rit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Rit.forEach(t),VGo=i(Kt),rn=n(Kt,"P",{});var V3=s(rn);XGo=r(V3,"The model class to instantiate is selected based on the "),Jfe=n(V3,"CODE",{});var Bit=s(Jfe);zGo=r(Bit,"model_type"),Bit.forEach(t),QGo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(V3,"CODE",{});var Pit=s(Yfe);WGo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),HGo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(V3,"CODE",{});var $it=s(Kfe);UGo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),JGo=r(V3,":"),V3.forEach(t),YGo=i(Kt),Zfe=n(Kt,"UL",{});var Iit=s(Zfe);y5=n(Iit,"LI",{});var f8e=s(y5);eme=n(f8e,"STRONG",{});var qit=s(eme);KGo=r(qit,"vision-encoder-decoder"),qit.forEach(t),ZGo=r(f8e," \u2014 "),iG=n(f8e,"A",{href:!0});var Nit=s(iG);eOo=r(Nit,"VisionEncoderDecoderModel"),Nit.forEach(t),oOo=r(f8e," (Vision Encoder decoder model)"),f8e.forEach(t),Iit.forEach(t),rOo=i(Kt),L5=n(Kt,"P",{});var m8e=s(L5);tOo=r(m8e,"The model is set in evaluation mode by default using "),ome=n(m8e,"CODE",{});var jit=s(ome);aOo=r(jit,"model.eval()"),jit.forEach(t),nOo=r(m8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rme=n(m8e,"CODE",{});var Dit=s(rme);sOo=r(Dit,"model.train()"),Dit.forEach(t),m8e.forEach(t),lOo=i(Kt),tme=n(Kt,"P",{});var Git=s(tme);iOo=r(Git,"Examples:"),Git.forEach(t),dOo=i(Kt),m(VA.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),_Be=i(c),$d=n(c,"H2",{class:!0});var w$e=s($d);x5=n(w$e,"A",{id:!0,class:!0,href:!0});var Oit=s(x5);ame=n(Oit,"SPAN",{});var Vit=s(ame);m(XA.$$.fragment,Vit),Vit.forEach(t),Oit.forEach(t),cOo=i(w$e),nme=n(w$e,"SPAN",{});var Xit=s(nme);fOo=r(Xit,"AutoModelForAudioClassification"),Xit.forEach(t),w$e.forEach(t),uBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(zA.$$.fragment,Fl),mOo=i(Fl),Id=n(Fl,"P",{});var zU=s(Id);gOo=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dG=n(zU,"A",{href:!0});var zit=s(dG);hOo=r(zit,"from_pretrained()"),zit.forEach(t),pOo=r(zU," class method or the "),cG=n(zU,"A",{href:!0});var Qit=s(cG);_Oo=r(Qit,"from_config()"),Qit.forEach(t),uOo=r(zU,` class
method.`),zU.forEach(t),bOo=i(Fl),QA=n(Fl,"P",{});var A$e=s(QA);FOo=r(A$e,"This class cannot be instantiated directly using "),sme=n(A$e,"CODE",{});var Wit=s(sme);vOo=r(Wit,"__init__()"),Wit.forEach(t),TOo=r(A$e," (throws an error)."),A$e.forEach(t),MOo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(WA.$$.fragment,vl),EOo=i(vl),lme=n(vl,"P",{});var Hit=s(lme);COo=r(Hit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Hit.forEach(t),wOo=i(vl),qd=n(vl,"P",{});var QU=s(qd);AOo=r(QU,`Note:
Loading a model from its configuration file does `),ime=n(QU,"STRONG",{});var Uit=s(ime);yOo=r(Uit,"not"),Uit.forEach(t),LOo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(QU,"A",{href:!0});var Jit=s(fG);xOo=r(Jit,"from_pretrained()"),Jit.forEach(t),kOo=r(QU," to load the model weights."),QU.forEach(t),SOo=i(vl),dme=n(vl,"P",{});var Yit=s(dme);ROo=r(Yit,"Examples:"),Yit.forEach(t),BOo=i(vl),m(HA.$$.fragment,vl),vl.forEach(t),POo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(UA.$$.fragment,Zt),$Oo=i(Zt),cme=n(Zt,"P",{});var Kit=s(cme);IOo=r(Kit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Kit.forEach(t),qOo=i(Zt),tn=n(Zt,"P",{});var X3=s(tn);NOo=r(X3,"The model class to instantiate is selected based on the "),fme=n(X3,"CODE",{});var Zit=s(fme);jOo=r(Zit,"model_type"),Zit.forEach(t),DOo=r(X3,` property of the config object (either
passed as an argument or loaded from `),mme=n(X3,"CODE",{});var edt=s(mme);GOo=r(edt,"pretrained_model_name_or_path"),edt.forEach(t),OOo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gme=n(X3,"CODE",{});var odt=s(gme);VOo=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),XOo=r(X3,":"),X3.forEach(t),zOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);k5=n(Do,"LI",{});var g8e=s(k5);hme=n(g8e,"STRONG",{});var rdt=s(hme);QOo=r(rdt,"data2vec-audio"),rdt.forEach(t),WOo=r(g8e," \u2014 "),mG=n(g8e,"A",{href:!0});var tdt=s(mG);HOo=r(tdt,"Data2VecAudioForSequenceClassification"),tdt.forEach(t),UOo=r(g8e," (Data2VecAudio model)"),g8e.forEach(t),JOo=i(Do),S5=n(Do,"LI",{});var h8e=s(S5);pme=n(h8e,"STRONG",{});var adt=s(pme);YOo=r(adt,"hubert"),adt.forEach(t),KOo=r(h8e," \u2014 "),gG=n(h8e,"A",{href:!0});var ndt=s(gG);ZOo=r(ndt,"HubertForSequenceClassification"),ndt.forEach(t),eVo=r(h8e," (Hubert model)"),h8e.forEach(t),oVo=i(Do),R5=n(Do,"LI",{});var p8e=s(R5);_me=n(p8e,"STRONG",{});var sdt=s(_me);rVo=r(sdt,"sew"),sdt.forEach(t),tVo=r(p8e," \u2014 "),hG=n(p8e,"A",{href:!0});var ldt=s(hG);aVo=r(ldt,"SEWForSequenceClassification"),ldt.forEach(t),nVo=r(p8e," (SEW model)"),p8e.forEach(t),sVo=i(Do),B5=n(Do,"LI",{});var _8e=s(B5);ume=n(_8e,"STRONG",{});var idt=s(ume);lVo=r(idt,"sew-d"),idt.forEach(t),iVo=r(_8e," \u2014 "),pG=n(_8e,"A",{href:!0});var ddt=s(pG);dVo=r(ddt,"SEWDForSequenceClassification"),ddt.forEach(t),cVo=r(_8e," (SEW-D model)"),_8e.forEach(t),fVo=i(Do),P5=n(Do,"LI",{});var u8e=s(P5);bme=n(u8e,"STRONG",{});var cdt=s(bme);mVo=r(cdt,"unispeech"),cdt.forEach(t),gVo=r(u8e," \u2014 "),_G=n(u8e,"A",{href:!0});var fdt=s(_G);hVo=r(fdt,"UniSpeechForSequenceClassification"),fdt.forEach(t),pVo=r(u8e," (UniSpeech model)"),u8e.forEach(t),_Vo=i(Do),$5=n(Do,"LI",{});var b8e=s($5);Fme=n(b8e,"STRONG",{});var mdt=s(Fme);uVo=r(mdt,"unispeech-sat"),mdt.forEach(t),bVo=r(b8e," \u2014 "),uG=n(b8e,"A",{href:!0});var gdt=s(uG);FVo=r(gdt,"UniSpeechSatForSequenceClassification"),gdt.forEach(t),vVo=r(b8e," (UniSpeechSat model)"),b8e.forEach(t),TVo=i(Do),I5=n(Do,"LI",{});var F8e=s(I5);vme=n(F8e,"STRONG",{});var hdt=s(vme);MVo=r(hdt,"wav2vec2"),hdt.forEach(t),EVo=r(F8e," \u2014 "),bG=n(F8e,"A",{href:!0});var pdt=s(bG);CVo=r(pdt,"Wav2Vec2ForSequenceClassification"),pdt.forEach(t),wVo=r(F8e," (Wav2Vec2 model)"),F8e.forEach(t),AVo=i(Do),q5=n(Do,"LI",{});var v8e=s(q5);Tme=n(v8e,"STRONG",{});var _dt=s(Tme);yVo=r(_dt,"wavlm"),_dt.forEach(t),LVo=r(v8e," \u2014 "),FG=n(v8e,"A",{href:!0});var udt=s(FG);xVo=r(udt,"WavLMForSequenceClassification"),udt.forEach(t),kVo=r(v8e," (WavLM model)"),v8e.forEach(t),Do.forEach(t),SVo=i(Zt),N5=n(Zt,"P",{});var T8e=s(N5);RVo=r(T8e,"The model is set in evaluation mode by default using "),Mme=n(T8e,"CODE",{});var bdt=s(Mme);BVo=r(bdt,"model.eval()"),bdt.forEach(t),PVo=r(T8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eme=n(T8e,"CODE",{});var Fdt=s(Eme);$Vo=r(Fdt,"model.train()"),Fdt.forEach(t),T8e.forEach(t),IVo=i(Zt),Cme=n(Zt,"P",{});var vdt=s(Cme);qVo=r(vdt,"Examples:"),vdt.forEach(t),NVo=i(Zt),m(JA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),bBe=i(c),Nd=n(c,"H2",{class:!0});var y$e=s(Nd);j5=n(y$e,"A",{id:!0,class:!0,href:!0});var Tdt=s(j5);wme=n(Tdt,"SPAN",{});var Mdt=s(wme);m(YA.$$.fragment,Mdt),Mdt.forEach(t),Tdt.forEach(t),jVo=i(y$e),Ame=n(y$e,"SPAN",{});var Edt=s(Ame);DVo=r(Edt,"AutoModelForAudioFrameClassification"),Edt.forEach(t),y$e.forEach(t),FBe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(KA.$$.fragment,Tl),GVo=i(Tl),jd=n(Tl,"P",{});var WU=s(jd);OVo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),vG=n(WU,"A",{href:!0});var Cdt=s(vG);VVo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),XVo=r(WU," class method or the "),TG=n(WU,"A",{href:!0});var wdt=s(TG);zVo=r(wdt,"from_config()"),wdt.forEach(t),QVo=r(WU,` class
method.`),WU.forEach(t),WVo=i(Tl),ZA=n(Tl,"P",{});var L$e=s(ZA);HVo=r(L$e,"This class cannot be instantiated directly using "),yme=n(L$e,"CODE",{});var Adt=s(yme);UVo=r(Adt,"__init__()"),Adt.forEach(t),JVo=r(L$e," (throws an error)."),L$e.forEach(t),YVo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(e0.$$.fragment,Ml),KVo=i(Ml),Lme=n(Ml,"P",{});var ydt=s(Lme);ZVo=r(ydt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ydt.forEach(t),eXo=i(Ml),Dd=n(Ml,"P",{});var HU=s(Dd);oXo=r(HU,`Note:
Loading a model from its configuration file does `),xme=n(HU,"STRONG",{});var Ldt=s(xme);rXo=r(Ldt,"not"),Ldt.forEach(t),tXo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(HU,"A",{href:!0});var xdt=s(MG);aXo=r(xdt,"from_pretrained()"),xdt.forEach(t),nXo=r(HU," to load the model weights."),HU.forEach(t),sXo=i(Ml),kme=n(Ml,"P",{});var kdt=s(kme);lXo=r(kdt,"Examples:"),kdt.forEach(t),iXo=i(Ml),m(o0.$$.fragment,Ml),Ml.forEach(t),dXo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(r0.$$.fragment,ea),cXo=i(ea),Sme=n(ea,"P",{});var Sdt=s(Sme);fXo=r(Sdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Sdt.forEach(t),mXo=i(ea),an=n(ea,"P",{});var z3=s(an);gXo=r(z3,"The model class to instantiate is selected based on the "),Rme=n(z3,"CODE",{});var Rdt=s(Rme);hXo=r(Rdt,"model_type"),Rdt.forEach(t),pXo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Bme=n(z3,"CODE",{});var Bdt=s(Bme);_Xo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),uXo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pme=n(z3,"CODE",{});var Pdt=s(Pme);bXo=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),FXo=r(z3,":"),z3.forEach(t),vXo=i(ea),nn=n(ea,"UL",{});var Q3=s(nn);D5=n(Q3,"LI",{});var M8e=s(D5);$me=n(M8e,"STRONG",{});var $dt=s($me);TXo=r($dt,"data2vec-audio"),$dt.forEach(t),MXo=r(M8e," \u2014 "),EG=n(M8e,"A",{href:!0});var Idt=s(EG);EXo=r(Idt,"Data2VecAudioForAudioFrameClassification"),Idt.forEach(t),CXo=r(M8e," (Data2VecAudio model)"),M8e.forEach(t),wXo=i(Q3),G5=n(Q3,"LI",{});var E8e=s(G5);Ime=n(E8e,"STRONG",{});var qdt=s(Ime);AXo=r(qdt,"unispeech-sat"),qdt.forEach(t),yXo=r(E8e," \u2014 "),CG=n(E8e,"A",{href:!0});var Ndt=s(CG);LXo=r(Ndt,"UniSpeechSatForAudioFrameClassification"),Ndt.forEach(t),xXo=r(E8e," (UniSpeechSat model)"),E8e.forEach(t),kXo=i(Q3),O5=n(Q3,"LI",{});var C8e=s(O5);qme=n(C8e,"STRONG",{});var jdt=s(qme);SXo=r(jdt,"wav2vec2"),jdt.forEach(t),RXo=r(C8e," \u2014 "),wG=n(C8e,"A",{href:!0});var Ddt=s(wG);BXo=r(Ddt,"Wav2Vec2ForAudioFrameClassification"),Ddt.forEach(t),PXo=r(C8e," (Wav2Vec2 model)"),C8e.forEach(t),$Xo=i(Q3),V5=n(Q3,"LI",{});var w8e=s(V5);Nme=n(w8e,"STRONG",{});var Gdt=s(Nme);IXo=r(Gdt,"wavlm"),Gdt.forEach(t),qXo=r(w8e," \u2014 "),AG=n(w8e,"A",{href:!0});var Odt=s(AG);NXo=r(Odt,"WavLMForAudioFrameClassification"),Odt.forEach(t),jXo=r(w8e," (WavLM model)"),w8e.forEach(t),Q3.forEach(t),DXo=i(ea),X5=n(ea,"P",{});var A8e=s(X5);GXo=r(A8e,"The model is set in evaluation mode by default using "),jme=n(A8e,"CODE",{});var Vdt=s(jme);OXo=r(Vdt,"model.eval()"),Vdt.forEach(t),VXo=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(A8e,"CODE",{});var Xdt=s(Dme);XXo=r(Xdt,"model.train()"),Xdt.forEach(t),A8e.forEach(t),zXo=i(ea),Gme=n(ea,"P",{});var zdt=s(Gme);QXo=r(zdt,"Examples:"),zdt.forEach(t),WXo=i(ea),m(t0.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),vBe=i(c),Gd=n(c,"H2",{class:!0});var x$e=s(Gd);z5=n(x$e,"A",{id:!0,class:!0,href:!0});var Qdt=s(z5);Ome=n(Qdt,"SPAN",{});var Wdt=s(Ome);m(a0.$$.fragment,Wdt),Wdt.forEach(t),Qdt.forEach(t),HXo=i(x$e),Vme=n(x$e,"SPAN",{});var Hdt=s(Vme);UXo=r(Hdt,"AutoModelForCTC"),Hdt.forEach(t),x$e.forEach(t),TBe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(n0.$$.fragment,El),JXo=i(El),Od=n(El,"P",{});var UU=s(Od);YXo=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yG=n(UU,"A",{href:!0});var Udt=s(yG);KXo=r(Udt,"from_pretrained()"),Udt.forEach(t),ZXo=r(UU," class method or the "),LG=n(UU,"A",{href:!0});var Jdt=s(LG);ezo=r(Jdt,"from_config()"),Jdt.forEach(t),ozo=r(UU,` class
method.`),UU.forEach(t),rzo=i(El),s0=n(El,"P",{});var k$e=s(s0);tzo=r(k$e,"This class cannot be instantiated directly using "),Xme=n(k$e,"CODE",{});var Ydt=s(Xme);azo=r(Ydt,"__init__()"),Ydt.forEach(t),nzo=r(k$e," (throws an error)."),k$e.forEach(t),szo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(l0.$$.fragment,Cl),lzo=i(Cl),zme=n(Cl,"P",{});var Kdt=s(zme);izo=r(Kdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Kdt.forEach(t),dzo=i(Cl),Vd=n(Cl,"P",{});var JU=s(Vd);czo=r(JU,`Note:
Loading a model from its configuration file does `),Qme=n(JU,"STRONG",{});var Zdt=s(Qme);fzo=r(Zdt,"not"),Zdt.forEach(t),mzo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(JU,"A",{href:!0});var ect=s(xG);gzo=r(ect,"from_pretrained()"),ect.forEach(t),hzo=r(JU," to load the model weights."),JU.forEach(t),pzo=i(Cl),Wme=n(Cl,"P",{});var oct=s(Wme);_zo=r(oct,"Examples:"),oct.forEach(t),uzo=i(Cl),m(i0.$$.fragment,Cl),Cl.forEach(t),bzo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(d0.$$.fragment,oa),Fzo=i(oa),Hme=n(oa,"P",{});var rct=s(Hme);vzo=r(rct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),rct.forEach(t),Tzo=i(oa),sn=n(oa,"P",{});var W3=s(sn);Mzo=r(W3,"The model class to instantiate is selected based on the "),Ume=n(W3,"CODE",{});var tct=s(Ume);Ezo=r(tct,"model_type"),tct.forEach(t),Czo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Jme=n(W3,"CODE",{});var act=s(Jme);wzo=r(act,"pretrained_model_name_or_path"),act.forEach(t),Azo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(W3,"CODE",{});var nct=s(Yme);yzo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),Lzo=r(W3,":"),W3.forEach(t),xzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Q5=n(Go,"LI",{});var y8e=s(Q5);Kme=n(y8e,"STRONG",{});var sct=s(Kme);kzo=r(sct,"data2vec-audio"),sct.forEach(t),Szo=r(y8e," \u2014 "),kG=n(y8e,"A",{href:!0});var lct=s(kG);Rzo=r(lct,"Data2VecAudioForCTC"),lct.forEach(t),Bzo=r(y8e," (Data2VecAudio model)"),y8e.forEach(t),Pzo=i(Go),W5=n(Go,"LI",{});var L8e=s(W5);Zme=n(L8e,"STRONG",{});var ict=s(Zme);$zo=r(ict,"hubert"),ict.forEach(t),Izo=r(L8e," \u2014 "),SG=n(L8e,"A",{href:!0});var dct=s(SG);qzo=r(dct,"HubertForCTC"),dct.forEach(t),Nzo=r(L8e," (Hubert model)"),L8e.forEach(t),jzo=i(Go),H5=n(Go,"LI",{});var x8e=s(H5);ege=n(x8e,"STRONG",{});var cct=s(ege);Dzo=r(cct,"sew"),cct.forEach(t),Gzo=r(x8e," \u2014 "),RG=n(x8e,"A",{href:!0});var fct=s(RG);Ozo=r(fct,"SEWForCTC"),fct.forEach(t),Vzo=r(x8e," (SEW model)"),x8e.forEach(t),Xzo=i(Go),U5=n(Go,"LI",{});var k8e=s(U5);oge=n(k8e,"STRONG",{});var mct=s(oge);zzo=r(mct,"sew-d"),mct.forEach(t),Qzo=r(k8e," \u2014 "),BG=n(k8e,"A",{href:!0});var gct=s(BG);Wzo=r(gct,"SEWDForCTC"),gct.forEach(t),Hzo=r(k8e," (SEW-D model)"),k8e.forEach(t),Uzo=i(Go),J5=n(Go,"LI",{});var S8e=s(J5);rge=n(S8e,"STRONG",{});var hct=s(rge);Jzo=r(hct,"unispeech"),hct.forEach(t),Yzo=r(S8e," \u2014 "),PG=n(S8e,"A",{href:!0});var pct=s(PG);Kzo=r(pct,"UniSpeechForCTC"),pct.forEach(t),Zzo=r(S8e," (UniSpeech model)"),S8e.forEach(t),eQo=i(Go),Y5=n(Go,"LI",{});var R8e=s(Y5);tge=n(R8e,"STRONG",{});var _ct=s(tge);oQo=r(_ct,"unispeech-sat"),_ct.forEach(t),rQo=r(R8e," \u2014 "),$G=n(R8e,"A",{href:!0});var uct=s($G);tQo=r(uct,"UniSpeechSatForCTC"),uct.forEach(t),aQo=r(R8e," (UniSpeechSat model)"),R8e.forEach(t),nQo=i(Go),K5=n(Go,"LI",{});var B8e=s(K5);age=n(B8e,"STRONG",{});var bct=s(age);sQo=r(bct,"wav2vec2"),bct.forEach(t),lQo=r(B8e," \u2014 "),IG=n(B8e,"A",{href:!0});var Fct=s(IG);iQo=r(Fct,"Wav2Vec2ForCTC"),Fct.forEach(t),dQo=r(B8e," (Wav2Vec2 model)"),B8e.forEach(t),cQo=i(Go),Z5=n(Go,"LI",{});var P8e=s(Z5);nge=n(P8e,"STRONG",{});var vct=s(nge);fQo=r(vct,"wavlm"),vct.forEach(t),mQo=r(P8e," \u2014 "),qG=n(P8e,"A",{href:!0});var Tct=s(qG);gQo=r(Tct,"WavLMForCTC"),Tct.forEach(t),hQo=r(P8e," (WavLM model)"),P8e.forEach(t),Go.forEach(t),pQo=i(oa),e2=n(oa,"P",{});var $8e=s(e2);_Qo=r($8e,"The model is set in evaluation mode by default using "),sge=n($8e,"CODE",{});var Mct=s(sge);uQo=r(Mct,"model.eval()"),Mct.forEach(t),bQo=r($8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lge=n($8e,"CODE",{});var Ect=s(lge);FQo=r(Ect,"model.train()"),Ect.forEach(t),$8e.forEach(t),vQo=i(oa),ige=n(oa,"P",{});var Cct=s(ige);TQo=r(Cct,"Examples:"),Cct.forEach(t),MQo=i(oa),m(c0.$$.fragment,oa),oa.forEach(t),El.forEach(t),MBe=i(c),Xd=n(c,"H2",{class:!0});var S$e=s(Xd);o2=n(S$e,"A",{id:!0,class:!0,href:!0});var wct=s(o2);dge=n(wct,"SPAN",{});var Act=s(dge);m(f0.$$.fragment,Act),Act.forEach(t),wct.forEach(t),EQo=i(S$e),cge=n(S$e,"SPAN",{});var yct=s(cge);CQo=r(yct,"AutoModelForSpeechSeq2Seq"),yct.forEach(t),S$e.forEach(t),EBe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(m0.$$.fragment,wl),wQo=i(wl),zd=n(wl,"P",{});var YU=s(zd);AQo=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NG=n(YU,"A",{href:!0});var Lct=s(NG);yQo=r(Lct,"from_pretrained()"),Lct.forEach(t),LQo=r(YU," class method or the "),jG=n(YU,"A",{href:!0});var xct=s(jG);xQo=r(xct,"from_config()"),xct.forEach(t),kQo=r(YU,` class
method.`),YU.forEach(t),SQo=i(wl),g0=n(wl,"P",{});var R$e=s(g0);RQo=r(R$e,"This class cannot be instantiated directly using "),fge=n(R$e,"CODE",{});var kct=s(fge);BQo=r(kct,"__init__()"),kct.forEach(t),PQo=r(R$e," (throws an error)."),R$e.forEach(t),$Qo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(h0.$$.fragment,Al),IQo=i(Al),mge=n(Al,"P",{});var Sct=s(mge);qQo=r(Sct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Sct.forEach(t),NQo=i(Al),Qd=n(Al,"P",{});var KU=s(Qd);jQo=r(KU,`Note:
Loading a model from its configuration file does `),gge=n(KU,"STRONG",{});var Rct=s(gge);DQo=r(Rct,"not"),Rct.forEach(t),GQo=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(KU,"A",{href:!0});var Bct=s(DG);OQo=r(Bct,"from_pretrained()"),Bct.forEach(t),VQo=r(KU," to load the model weights."),KU.forEach(t),XQo=i(Al),hge=n(Al,"P",{});var Pct=s(hge);zQo=r(Pct,"Examples:"),Pct.forEach(t),QQo=i(Al),m(p0.$$.fragment,Al),Al.forEach(t),WQo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(_0.$$.fragment,ra),HQo=i(ra),pge=n(ra,"P",{});var $ct=s(pge);UQo=r($ct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),$ct.forEach(t),JQo=i(ra),ln=n(ra,"P",{});var H3=s(ln);YQo=r(H3,"The model class to instantiate is selected based on the "),_ge=n(H3,"CODE",{});var Ict=s(_ge);KQo=r(Ict,"model_type"),Ict.forEach(t),ZQo=r(H3,` property of the config object (either
passed as an argument or loaded from `),uge=n(H3,"CODE",{});var qct=s(uge);eWo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),oWo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(H3,"CODE",{});var Nct=s(bge);rWo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),tWo=r(H3,":"),H3.forEach(t),aWo=i(ra),u0=n(ra,"UL",{});var B$e=s(u0);r2=n(B$e,"LI",{});var I8e=s(r2);Fge=n(I8e,"STRONG",{});var jct=s(Fge);nWo=r(jct,"speech-encoder-decoder"),jct.forEach(t),sWo=r(I8e," \u2014 "),GG=n(I8e,"A",{href:!0});var Dct=s(GG);lWo=r(Dct,"SpeechEncoderDecoderModel"),Dct.forEach(t),iWo=r(I8e," (Speech Encoder decoder model)"),I8e.forEach(t),dWo=i(B$e),t2=n(B$e,"LI",{});var q8e=s(t2);vge=n(q8e,"STRONG",{});var Gct=s(vge);cWo=r(Gct,"speech_to_text"),Gct.forEach(t),fWo=r(q8e," \u2014 "),OG=n(q8e,"A",{href:!0});var Oct=s(OG);mWo=r(Oct,"Speech2TextForConditionalGeneration"),Oct.forEach(t),gWo=r(q8e," (Speech2Text model)"),q8e.forEach(t),B$e.forEach(t),hWo=i(ra),a2=n(ra,"P",{});var N8e=s(a2);pWo=r(N8e,"The model is set in evaluation mode by default using "),Tge=n(N8e,"CODE",{});var Vct=s(Tge);_Wo=r(Vct,"model.eval()"),Vct.forEach(t),uWo=r(N8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(N8e,"CODE",{});var Xct=s(Mge);bWo=r(Xct,"model.train()"),Xct.forEach(t),N8e.forEach(t),FWo=i(ra),Ege=n(ra,"P",{});var zct=s(Ege);vWo=r(zct,"Examples:"),zct.forEach(t),TWo=i(ra),m(b0.$$.fragment,ra),ra.forEach(t),wl.forEach(t),CBe=i(c),Wd=n(c,"H2",{class:!0});var P$e=s(Wd);n2=n(P$e,"A",{id:!0,class:!0,href:!0});var Qct=s(n2);Cge=n(Qct,"SPAN",{});var Wct=s(Cge);m(F0.$$.fragment,Wct),Wct.forEach(t),Qct.forEach(t),MWo=i(P$e),wge=n(P$e,"SPAN",{});var Hct=s(wge);EWo=r(Hct,"AutoModelForAudioXVector"),Hct.forEach(t),P$e.forEach(t),wBe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(v0.$$.fragment,yl),CWo=i(yl),Hd=n(yl,"P",{});var ZU=s(Hd);wWo=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VG=n(ZU,"A",{href:!0});var Uct=s(VG);AWo=r(Uct,"from_pretrained()"),Uct.forEach(t),yWo=r(ZU," class method or the "),XG=n(ZU,"A",{href:!0});var Jct=s(XG);LWo=r(Jct,"from_config()"),Jct.forEach(t),xWo=r(ZU,` class
method.`),ZU.forEach(t),kWo=i(yl),T0=n(yl,"P",{});var $$e=s(T0);SWo=r($$e,"This class cannot be instantiated directly using "),Age=n($$e,"CODE",{});var Yct=s(Age);RWo=r(Yct,"__init__()"),Yct.forEach(t),BWo=r($$e," (throws an error)."),$$e.forEach(t),PWo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(M0.$$.fragment,Ll),$Wo=i(Ll),yge=n(Ll,"P",{});var Kct=s(yge);IWo=r(Kct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Kct.forEach(t),qWo=i(Ll),Ud=n(Ll,"P",{});var eJ=s(Ud);NWo=r(eJ,`Note:
Loading a model from its configuration file does `),Lge=n(eJ,"STRONG",{});var Zct=s(Lge);jWo=r(Zct,"not"),Zct.forEach(t),DWo=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(eJ,"A",{href:!0});var eft=s(zG);GWo=r(eft,"from_pretrained()"),eft.forEach(t),OWo=r(eJ," to load the model weights."),eJ.forEach(t),VWo=i(Ll),xge=n(Ll,"P",{});var oft=s(xge);XWo=r(oft,"Examples:"),oft.forEach(t),zWo=i(Ll),m(E0.$$.fragment,Ll),Ll.forEach(t),QWo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(C0.$$.fragment,ta),WWo=i(ta),kge=n(ta,"P",{});var rft=s(kge);HWo=r(rft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),rft.forEach(t),UWo=i(ta),dn=n(ta,"P",{});var U3=s(dn);JWo=r(U3,"The model class to instantiate is selected based on the "),Sge=n(U3,"CODE",{});var tft=s(Sge);YWo=r(tft,"model_type"),tft.forEach(t),KWo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Rge=n(U3,"CODE",{});var aft=s(Rge);ZWo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),eHo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(U3,"CODE",{});var nft=s(Bge);oHo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),rHo=r(U3,":"),U3.forEach(t),tHo=i(ta),cn=n(ta,"UL",{});var J3=s(cn);s2=n(J3,"LI",{});var j8e=s(s2);Pge=n(j8e,"STRONG",{});var sft=s(Pge);aHo=r(sft,"data2vec-audio"),sft.forEach(t),nHo=r(j8e," \u2014 "),QG=n(j8e,"A",{href:!0});var lft=s(QG);sHo=r(lft,"Data2VecAudioForXVector"),lft.forEach(t),lHo=r(j8e," (Data2VecAudio model)"),j8e.forEach(t),iHo=i(J3),l2=n(J3,"LI",{});var D8e=s(l2);$ge=n(D8e,"STRONG",{});var ift=s($ge);dHo=r(ift,"unispeech-sat"),ift.forEach(t),cHo=r(D8e," \u2014 "),WG=n(D8e,"A",{href:!0});var dft=s(WG);fHo=r(dft,"UniSpeechSatForXVector"),dft.forEach(t),mHo=r(D8e," (UniSpeechSat model)"),D8e.forEach(t),gHo=i(J3),i2=n(J3,"LI",{});var G8e=s(i2);Ige=n(G8e,"STRONG",{});var cft=s(Ige);hHo=r(cft,"wav2vec2"),cft.forEach(t),pHo=r(G8e," \u2014 "),HG=n(G8e,"A",{href:!0});var fft=s(HG);_Ho=r(fft,"Wav2Vec2ForXVector"),fft.forEach(t),uHo=r(G8e," (Wav2Vec2 model)"),G8e.forEach(t),bHo=i(J3),d2=n(J3,"LI",{});var O8e=s(d2);qge=n(O8e,"STRONG",{});var mft=s(qge);FHo=r(mft,"wavlm"),mft.forEach(t),vHo=r(O8e," \u2014 "),UG=n(O8e,"A",{href:!0});var gft=s(UG);THo=r(gft,"WavLMForXVector"),gft.forEach(t),MHo=r(O8e," (WavLM model)"),O8e.forEach(t),J3.forEach(t),EHo=i(ta),c2=n(ta,"P",{});var V8e=s(c2);CHo=r(V8e,"The model is set in evaluation mode by default using "),Nge=n(V8e,"CODE",{});var hft=s(Nge);wHo=r(hft,"model.eval()"),hft.forEach(t),AHo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jge=n(V8e,"CODE",{});var pft=s(jge);yHo=r(pft,"model.train()"),pft.forEach(t),V8e.forEach(t),LHo=i(ta),Dge=n(ta,"P",{});var _ft=s(Dge);xHo=r(_ft,"Examples:"),_ft.forEach(t),kHo=i(ta),m(w0.$$.fragment,ta),ta.forEach(t),yl.forEach(t),ABe=i(c),Jd=n(c,"H2",{class:!0});var I$e=s(Jd);f2=n(I$e,"A",{id:!0,class:!0,href:!0});var uft=s(f2);Gge=n(uft,"SPAN",{});var bft=s(Gge);m(A0.$$.fragment,bft),bft.forEach(t),uft.forEach(t),SHo=i(I$e),Oge=n(I$e,"SPAN",{});var Fft=s(Oge);RHo=r(Fft,"AutoModelForMaskedImageModeling"),Fft.forEach(t),I$e.forEach(t),yBe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(y0.$$.fragment,xl),BHo=i(xl),Yd=n(xl,"P",{});var oJ=s(Yd);PHo=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),JG=n(oJ,"A",{href:!0});var vft=s(JG);$Ho=r(vft,"from_pretrained()"),vft.forEach(t),IHo=r(oJ," class method or the "),YG=n(oJ,"A",{href:!0});var Tft=s(YG);qHo=r(Tft,"from_config()"),Tft.forEach(t),NHo=r(oJ,` class
method.`),oJ.forEach(t),jHo=i(xl),L0=n(xl,"P",{});var q$e=s(L0);DHo=r(q$e,"This class cannot be instantiated directly using "),Vge=n(q$e,"CODE",{});var Mft=s(Vge);GHo=r(Mft,"__init__()"),Mft.forEach(t),OHo=r(q$e," (throws an error)."),q$e.forEach(t),VHo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(x0.$$.fragment,kl),XHo=i(kl),Xge=n(kl,"P",{});var Eft=s(Xge);zHo=r(Eft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Eft.forEach(t),QHo=i(kl),Kd=n(kl,"P",{});var rJ=s(Kd);WHo=r(rJ,`Note:
Loading a model from its configuration file does `),zge=n(rJ,"STRONG",{});var Cft=s(zge);HHo=r(Cft,"not"),Cft.forEach(t),UHo=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(rJ,"A",{href:!0});var wft=s(KG);JHo=r(wft,"from_pretrained()"),wft.forEach(t),YHo=r(rJ," to load the model weights."),rJ.forEach(t),KHo=i(kl),Qge=n(kl,"P",{});var Aft=s(Qge);ZHo=r(Aft,"Examples:"),Aft.forEach(t),eUo=i(kl),m(k0.$$.fragment,kl),kl.forEach(t),oUo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(S0.$$.fragment,aa),rUo=i(aa),Wge=n(aa,"P",{});var yft=s(Wge);tUo=r(yft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),yft.forEach(t),aUo=i(aa),fn=n(aa,"P",{});var Y3=s(fn);nUo=r(Y3,"The model class to instantiate is selected based on the "),Hge=n(Y3,"CODE",{});var Lft=s(Hge);sUo=r(Lft,"model_type"),Lft.forEach(t),lUo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Uge=n(Y3,"CODE",{});var xft=s(Uge);iUo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),dUo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(Y3,"CODE",{});var kft=s(Jge);cUo=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),fUo=r(Y3,":"),Y3.forEach(t),mUo=i(aa),Zd=n(aa,"UL",{});var tJ=s(Zd);m2=n(tJ,"LI",{});var X8e=s(m2);Yge=n(X8e,"STRONG",{});var Sft=s(Yge);gUo=r(Sft,"deit"),Sft.forEach(t),hUo=r(X8e," \u2014 "),ZG=n(X8e,"A",{href:!0});var Rft=s(ZG);pUo=r(Rft,"DeiTForMaskedImageModeling"),Rft.forEach(t),_Uo=r(X8e," (DeiT model)"),X8e.forEach(t),uUo=i(tJ),g2=n(tJ,"LI",{});var z8e=s(g2);Kge=n(z8e,"STRONG",{});var Bft=s(Kge);bUo=r(Bft,"swin"),Bft.forEach(t),FUo=r(z8e," \u2014 "),eO=n(z8e,"A",{href:!0});var Pft=s(eO);vUo=r(Pft,"SwinForMaskedImageModeling"),Pft.forEach(t),TUo=r(z8e," (Swin model)"),z8e.forEach(t),MUo=i(tJ),h2=n(tJ,"LI",{});var Q8e=s(h2);Zge=n(Q8e,"STRONG",{});var $ft=s(Zge);EUo=r($ft,"vit"),$ft.forEach(t),CUo=r(Q8e," \u2014 "),oO=n(Q8e,"A",{href:!0});var Ift=s(oO);wUo=r(Ift,"ViTForMaskedImageModeling"),Ift.forEach(t),AUo=r(Q8e," (ViT model)"),Q8e.forEach(t),tJ.forEach(t),yUo=i(aa),p2=n(aa,"P",{});var W8e=s(p2);LUo=r(W8e,"The model is set in evaluation mode by default using "),ehe=n(W8e,"CODE",{});var qft=s(ehe);xUo=r(qft,"model.eval()"),qft.forEach(t),kUo=r(W8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(W8e,"CODE",{});var Nft=s(ohe);SUo=r(Nft,"model.train()"),Nft.forEach(t),W8e.forEach(t),RUo=i(aa),rhe=n(aa,"P",{});var jft=s(rhe);BUo=r(jft,"Examples:"),jft.forEach(t),PUo=i(aa),m(R0.$$.fragment,aa),aa.forEach(t),xl.forEach(t),LBe=i(c),ec=n(c,"H2",{class:!0});var N$e=s(ec);_2=n(N$e,"A",{id:!0,class:!0,href:!0});var Dft=s(_2);the=n(Dft,"SPAN",{});var Gft=s(the);m(B0.$$.fragment,Gft),Gft.forEach(t),Dft.forEach(t),$Uo=i(N$e),ahe=n(N$e,"SPAN",{});var Oft=s(ahe);IUo=r(Oft,"AutoModelForObjectDetection"),Oft.forEach(t),N$e.forEach(t),xBe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(P0.$$.fragment,Sl),qUo=i(Sl),oc=n(Sl,"P",{});var aJ=s(oc);NUo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),rO=n(aJ,"A",{href:!0});var Vft=s(rO);jUo=r(Vft,"from_pretrained()"),Vft.forEach(t),DUo=r(aJ," class method or the "),tO=n(aJ,"A",{href:!0});var Xft=s(tO);GUo=r(Xft,"from_config()"),Xft.forEach(t),OUo=r(aJ,` class
method.`),aJ.forEach(t),VUo=i(Sl),$0=n(Sl,"P",{});var j$e=s($0);XUo=r(j$e,"This class cannot be instantiated directly using "),nhe=n(j$e,"CODE",{});var zft=s(nhe);zUo=r(zft,"__init__()"),zft.forEach(t),QUo=r(j$e," (throws an error)."),j$e.forEach(t),WUo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(I0.$$.fragment,Rl),HUo=i(Rl),she=n(Rl,"P",{});var Qft=s(she);UUo=r(Qft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Qft.forEach(t),JUo=i(Rl),rc=n(Rl,"P",{});var nJ=s(rc);YUo=r(nJ,`Note:
Loading a model from its configuration file does `),lhe=n(nJ,"STRONG",{});var Wft=s(lhe);KUo=r(Wft,"not"),Wft.forEach(t),ZUo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(nJ,"A",{href:!0});var Hft=s(aO);eJo=r(Hft,"from_pretrained()"),Hft.forEach(t),oJo=r(nJ," to load the model weights."),nJ.forEach(t),rJo=i(Rl),ihe=n(Rl,"P",{});var Uft=s(ihe);tJo=r(Uft,"Examples:"),Uft.forEach(t),aJo=i(Rl),m(q0.$$.fragment,Rl),Rl.forEach(t),nJo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(N0.$$.fragment,na),sJo=i(na),dhe=n(na,"P",{});var Jft=s(dhe);lJo=r(Jft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Jft.forEach(t),iJo=i(na),mn=n(na,"P",{});var K3=s(mn);dJo=r(K3,"The model class to instantiate is selected based on the "),che=n(K3,"CODE",{});var Yft=s(che);cJo=r(Yft,"model_type"),Yft.forEach(t),fJo=r(K3,` property of the config object (either
passed as an argument or loaded from `),fhe=n(K3,"CODE",{});var Kft=s(fhe);mJo=r(Kft,"pretrained_model_name_or_path"),Kft.forEach(t),gJo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(K3,"CODE",{});var Zft=s(mhe);hJo=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),pJo=r(K3,":"),K3.forEach(t),_Jo=i(na),ghe=n(na,"UL",{});var emt=s(ghe);u2=n(emt,"LI",{});var H8e=s(u2);hhe=n(H8e,"STRONG",{});var omt=s(hhe);uJo=r(omt,"detr"),omt.forEach(t),bJo=r(H8e," \u2014 "),nO=n(H8e,"A",{href:!0});var rmt=s(nO);FJo=r(rmt,"DetrForObjectDetection"),rmt.forEach(t),vJo=r(H8e," (DETR model)"),H8e.forEach(t),emt.forEach(t),TJo=i(na),b2=n(na,"P",{});var U8e=s(b2);MJo=r(U8e,"The model is set in evaluation mode by default using "),phe=n(U8e,"CODE",{});var tmt=s(phe);EJo=r(tmt,"model.eval()"),tmt.forEach(t),CJo=r(U8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(U8e,"CODE",{});var amt=s(_he);wJo=r(amt,"model.train()"),amt.forEach(t),U8e.forEach(t),AJo=i(na),uhe=n(na,"P",{});var nmt=s(uhe);yJo=r(nmt,"Examples:"),nmt.forEach(t),LJo=i(na),m(j0.$$.fragment,na),na.forEach(t),Sl.forEach(t),kBe=i(c),tc=n(c,"H2",{class:!0});var D$e=s(tc);F2=n(D$e,"A",{id:!0,class:!0,href:!0});var smt=s(F2);bhe=n(smt,"SPAN",{});var lmt=s(bhe);m(D0.$$.fragment,lmt),lmt.forEach(t),smt.forEach(t),xJo=i(D$e),Fhe=n(D$e,"SPAN",{});var imt=s(Fhe);kJo=r(imt,"AutoModelForImageSegmentation"),imt.forEach(t),D$e.forEach(t),SBe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(G0.$$.fragment,Bl),SJo=i(Bl),ac=n(Bl,"P",{});var sJ=s(ac);RJo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sO=n(sJ,"A",{href:!0});var dmt=s(sO);BJo=r(dmt,"from_pretrained()"),dmt.forEach(t),PJo=r(sJ," class method or the "),lO=n(sJ,"A",{href:!0});var cmt=s(lO);$Jo=r(cmt,"from_config()"),cmt.forEach(t),IJo=r(sJ,` class
method.`),sJ.forEach(t),qJo=i(Bl),O0=n(Bl,"P",{});var G$e=s(O0);NJo=r(G$e,"This class cannot be instantiated directly using "),vhe=n(G$e,"CODE",{});var fmt=s(vhe);jJo=r(fmt,"__init__()"),fmt.forEach(t),DJo=r(G$e," (throws an error)."),G$e.forEach(t),GJo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(V0.$$.fragment,Pl),OJo=i(Pl),The=n(Pl,"P",{});var mmt=s(The);VJo=r(mmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mmt.forEach(t),XJo=i(Pl),nc=n(Pl,"P",{});var lJ=s(nc);zJo=r(lJ,`Note:
Loading a model from its configuration file does `),Mhe=n(lJ,"STRONG",{});var gmt=s(Mhe);QJo=r(gmt,"not"),gmt.forEach(t),WJo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(lJ,"A",{href:!0});var hmt=s(iO);HJo=r(hmt,"from_pretrained()"),hmt.forEach(t),UJo=r(lJ," to load the model weights."),lJ.forEach(t),JJo=i(Pl),Ehe=n(Pl,"P",{});var pmt=s(Ehe);YJo=r(pmt,"Examples:"),pmt.forEach(t),KJo=i(Pl),m(X0.$$.fragment,Pl),Pl.forEach(t),ZJo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(z0.$$.fragment,sa),eYo=i(sa),Che=n(sa,"P",{});var _mt=s(Che);oYo=r(_mt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),_mt.forEach(t),rYo=i(sa),gn=n(sa,"P",{});var Z3=s(gn);tYo=r(Z3,"The model class to instantiate is selected based on the "),whe=n(Z3,"CODE",{});var umt=s(whe);aYo=r(umt,"model_type"),umt.forEach(t),nYo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Ahe=n(Z3,"CODE",{});var bmt=s(Ahe);sYo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),lYo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yhe=n(Z3,"CODE",{});var Fmt=s(yhe);iYo=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),dYo=r(Z3,":"),Z3.forEach(t),cYo=i(sa),Lhe=n(sa,"UL",{});var vmt=s(Lhe);v2=n(vmt,"LI",{});var J8e=s(v2);xhe=n(J8e,"STRONG",{});var Tmt=s(xhe);fYo=r(Tmt,"detr"),Tmt.forEach(t),mYo=r(J8e," \u2014 "),dO=n(J8e,"A",{href:!0});var Mmt=s(dO);gYo=r(Mmt,"DetrForSegmentation"),Mmt.forEach(t),hYo=r(J8e," (DETR model)"),J8e.forEach(t),vmt.forEach(t),pYo=i(sa),T2=n(sa,"P",{});var Y8e=s(T2);_Yo=r(Y8e,"The model is set in evaluation mode by default using "),khe=n(Y8e,"CODE",{});var Emt=s(khe);uYo=r(Emt,"model.eval()"),Emt.forEach(t),bYo=r(Y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=n(Y8e,"CODE",{});var Cmt=s(She);FYo=r(Cmt,"model.train()"),Cmt.forEach(t),Y8e.forEach(t),vYo=i(sa),Rhe=n(sa,"P",{});var wmt=s(Rhe);TYo=r(wmt,"Examples:"),wmt.forEach(t),MYo=i(sa),m(Q0.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),RBe=i(c),sc=n(c,"H2",{class:!0});var O$e=s(sc);M2=n(O$e,"A",{id:!0,class:!0,href:!0});var Amt=s(M2);Bhe=n(Amt,"SPAN",{});var ymt=s(Bhe);m(W0.$$.fragment,ymt),ymt.forEach(t),Amt.forEach(t),EYo=i(O$e),Phe=n(O$e,"SPAN",{});var Lmt=s(Phe);CYo=r(Lmt,"AutoModelForSemanticSegmentation"),Lmt.forEach(t),O$e.forEach(t),BBe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(H0.$$.fragment,$l),wYo=i($l),lc=n($l,"P",{});var iJ=s(lc);AYo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cO=n(iJ,"A",{href:!0});var xmt=s(cO);yYo=r(xmt,"from_pretrained()"),xmt.forEach(t),LYo=r(iJ," class method or the "),fO=n(iJ,"A",{href:!0});var kmt=s(fO);xYo=r(kmt,"from_config()"),kmt.forEach(t),kYo=r(iJ,` class
method.`),iJ.forEach(t),SYo=i($l),U0=n($l,"P",{});var V$e=s(U0);RYo=r(V$e,"This class cannot be instantiated directly using "),$he=n(V$e,"CODE",{});var Smt=s($he);BYo=r(Smt,"__init__()"),Smt.forEach(t),PYo=r(V$e," (throws an error)."),V$e.forEach(t),$Yo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(J0.$$.fragment,Il),IYo=i(Il),Ihe=n(Il,"P",{});var Rmt=s(Ihe);qYo=r(Rmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Rmt.forEach(t),NYo=i(Il),ic=n(Il,"P",{});var dJ=s(ic);jYo=r(dJ,`Note:
Loading a model from its configuration file does `),qhe=n(dJ,"STRONG",{});var Bmt=s(qhe);DYo=r(Bmt,"not"),Bmt.forEach(t),GYo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(dJ,"A",{href:!0});var Pmt=s(mO);OYo=r(Pmt,"from_pretrained()"),Pmt.forEach(t),VYo=r(dJ," to load the model weights."),dJ.forEach(t),XYo=i(Il),Nhe=n(Il,"P",{});var $mt=s(Nhe);zYo=r($mt,"Examples:"),$mt.forEach(t),QYo=i(Il),m(Y0.$$.fragment,Il),Il.forEach(t),WYo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(K0.$$.fragment,la),HYo=i(la),jhe=n(la,"P",{});var Imt=s(jhe);UYo=r(Imt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Imt.forEach(t),JYo=i(la),hn=n(la,"P",{});var eC=s(hn);YYo=r(eC,"The model class to instantiate is selected based on the "),Dhe=n(eC,"CODE",{});var qmt=s(Dhe);KYo=r(qmt,"model_type"),qmt.forEach(t),ZYo=r(eC,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(eC,"CODE",{});var Nmt=s(Ghe);eKo=r(Nmt,"pretrained_model_name_or_path"),Nmt.forEach(t),oKo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(eC,"CODE",{});var jmt=s(Ohe);rKo=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),tKo=r(eC,":"),eC.forEach(t),aKo=i(la),dc=n(la,"UL",{});var cJ=s(dc);E2=n(cJ,"LI",{});var K8e=s(E2);Vhe=n(K8e,"STRONG",{});var Dmt=s(Vhe);nKo=r(Dmt,"beit"),Dmt.forEach(t),sKo=r(K8e," \u2014 "),gO=n(K8e,"A",{href:!0});var Gmt=s(gO);lKo=r(Gmt,"BeitForSemanticSegmentation"),Gmt.forEach(t),iKo=r(K8e," (BEiT model)"),K8e.forEach(t),dKo=i(cJ),C2=n(cJ,"LI",{});var Z8e=s(C2);Xhe=n(Z8e,"STRONG",{});var Omt=s(Xhe);cKo=r(Omt,"dpt"),Omt.forEach(t),fKo=r(Z8e," \u2014 "),hO=n(Z8e,"A",{href:!0});var Vmt=s(hO);mKo=r(Vmt,"DPTForSemanticSegmentation"),Vmt.forEach(t),gKo=r(Z8e," (DPT model)"),Z8e.forEach(t),hKo=i(cJ),w2=n(cJ,"LI",{});var e7e=s(w2);zhe=n(e7e,"STRONG",{});var Xmt=s(zhe);pKo=r(Xmt,"segformer"),Xmt.forEach(t),_Ko=r(e7e," \u2014 "),pO=n(e7e,"A",{href:!0});var zmt=s(pO);uKo=r(zmt,"SegformerForSemanticSegmentation"),zmt.forEach(t),bKo=r(e7e," (SegFormer model)"),e7e.forEach(t),cJ.forEach(t),FKo=i(la),A2=n(la,"P",{});var o7e=s(A2);vKo=r(o7e,"The model is set in evaluation mode by default using "),Qhe=n(o7e,"CODE",{});var Qmt=s(Qhe);TKo=r(Qmt,"model.eval()"),Qmt.forEach(t),MKo=r(o7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(o7e,"CODE",{});var Wmt=s(Whe);EKo=r(Wmt,"model.train()"),Wmt.forEach(t),o7e.forEach(t),CKo=i(la),Hhe=n(la,"P",{});var Hmt=s(Hhe);wKo=r(Hmt,"Examples:"),Hmt.forEach(t),AKo=i(la),m(Z0.$$.fragment,la),la.forEach(t),$l.forEach(t),PBe=i(c),cc=n(c,"H2",{class:!0});var X$e=s(cc);y2=n(X$e,"A",{id:!0,class:!0,href:!0});var Umt=s(y2);Uhe=n(Umt,"SPAN",{});var Jmt=s(Uhe);m(ey.$$.fragment,Jmt),Jmt.forEach(t),Umt.forEach(t),yKo=i(X$e),Jhe=n(X$e,"SPAN",{});var Ymt=s(Jhe);LKo=r(Ymt,"AutoModelForInstanceSegmentation"),Ymt.forEach(t),X$e.forEach(t),$Be=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(oy.$$.fragment,ql),xKo=i(ql),fc=n(ql,"P",{});var fJ=s(fc);kKo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_O=n(fJ,"A",{href:!0});var Kmt=s(_O);SKo=r(Kmt,"from_pretrained()"),Kmt.forEach(t),RKo=r(fJ," class method or the "),uO=n(fJ,"A",{href:!0});var Zmt=s(uO);BKo=r(Zmt,"from_config()"),Zmt.forEach(t),PKo=r(fJ,` class
method.`),fJ.forEach(t),$Ko=i(ql),ry=n(ql,"P",{});var z$e=s(ry);IKo=r(z$e,"This class cannot be instantiated directly using "),Yhe=n(z$e,"CODE",{});var egt=s(Yhe);qKo=r(egt,"__init__()"),egt.forEach(t),NKo=r(z$e," (throws an error)."),z$e.forEach(t),jKo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(ty.$$.fragment,Nl),DKo=i(Nl),Khe=n(Nl,"P",{});var ogt=s(Khe);GKo=r(ogt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ogt.forEach(t),OKo=i(Nl),mc=n(Nl,"P",{});var mJ=s(mc);VKo=r(mJ,`Note:
Loading a model from its configuration file does `),Zhe=n(mJ,"STRONG",{});var rgt=s(Zhe);XKo=r(rgt,"not"),rgt.forEach(t),zKo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(mJ,"A",{href:!0});var tgt=s(bO);QKo=r(tgt,"from_pretrained()"),tgt.forEach(t),WKo=r(mJ," to load the model weights."),mJ.forEach(t),HKo=i(Nl),epe=n(Nl,"P",{});var agt=s(epe);UKo=r(agt,"Examples:"),agt.forEach(t),JKo=i(Nl),m(ay.$$.fragment,Nl),Nl.forEach(t),YKo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(ny.$$.fragment,ia),KKo=i(ia),ope=n(ia,"P",{});var ngt=s(ope);ZKo=r(ngt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ngt.forEach(t),eZo=i(ia),pn=n(ia,"P",{});var oC=s(pn);oZo=r(oC,"The model class to instantiate is selected based on the "),rpe=n(oC,"CODE",{});var sgt=s(rpe);rZo=r(sgt,"model_type"),sgt.forEach(t),tZo=r(oC,` property of the config object (either
passed as an argument or loaded from `),tpe=n(oC,"CODE",{});var lgt=s(tpe);aZo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),nZo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ape=n(oC,"CODE",{});var igt=s(ape);sZo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),lZo=r(oC,":"),oC.forEach(t),iZo=i(ia),npe=n(ia,"UL",{});var dgt=s(npe);L2=n(dgt,"LI",{});var r7e=s(L2);spe=n(r7e,"STRONG",{});var cgt=s(spe);dZo=r(cgt,"maskformer"),cgt.forEach(t),cZo=r(r7e," \u2014 "),FO=n(r7e,"A",{href:!0});var fgt=s(FO);fZo=r(fgt,"MaskFormerForInstanceSegmentation"),fgt.forEach(t),mZo=r(r7e," (MaskFormer model)"),r7e.forEach(t),dgt.forEach(t),gZo=i(ia),x2=n(ia,"P",{});var t7e=s(x2);hZo=r(t7e,"The model is set in evaluation mode by default using "),lpe=n(t7e,"CODE",{});var mgt=s(lpe);pZo=r(mgt,"model.eval()"),mgt.forEach(t),_Zo=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=n(t7e,"CODE",{});var ggt=s(ipe);uZo=r(ggt,"model.train()"),ggt.forEach(t),t7e.forEach(t),bZo=i(ia),dpe=n(ia,"P",{});var hgt=s(dpe);FZo=r(hgt,"Examples:"),hgt.forEach(t),vZo=i(ia),m(sy.$$.fragment,ia),ia.forEach(t),ql.forEach(t),IBe=i(c),gc=n(c,"H2",{class:!0});var Q$e=s(gc);k2=n(Q$e,"A",{id:!0,class:!0,href:!0});var pgt=s(k2);cpe=n(pgt,"SPAN",{});var _gt=s(cpe);m(ly.$$.fragment,_gt),_gt.forEach(t),pgt.forEach(t),TZo=i(Q$e),fpe=n(Q$e,"SPAN",{});var ugt=s(fpe);MZo=r(ugt,"TFAutoModel"),ugt.forEach(t),Q$e.forEach(t),qBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(iy.$$.fragment,jl),EZo=i(jl),hc=n(jl,"P",{});var gJ=s(hc);CZo=r(gJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vO=n(gJ,"A",{href:!0});var bgt=s(vO);wZo=r(bgt,"from_pretrained()"),bgt.forEach(t),AZo=r(gJ," class method or the "),TO=n(gJ,"A",{href:!0});var Fgt=s(TO);yZo=r(Fgt,"from_config()"),Fgt.forEach(t),LZo=r(gJ,` class
method.`),gJ.forEach(t),xZo=i(jl),dy=n(jl,"P",{});var W$e=s(dy);kZo=r(W$e,"This class cannot be instantiated directly using "),mpe=n(W$e,"CODE",{});var vgt=s(mpe);SZo=r(vgt,"__init__()"),vgt.forEach(t),RZo=r(W$e," (throws an error)."),W$e.forEach(t),BZo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(cy.$$.fragment,Dl),PZo=i(Dl),gpe=n(Dl,"P",{});var Tgt=s(gpe);$Zo=r(Tgt,"Instantiates one of the base model classes of the library from a configuration."),Tgt.forEach(t),IZo=i(Dl),pc=n(Dl,"P",{});var hJ=s(pc);qZo=r(hJ,`Note:
Loading a model from its configuration file does `),hpe=n(hJ,"STRONG",{});var Mgt=s(hpe);NZo=r(Mgt,"not"),Mgt.forEach(t),jZo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(hJ,"A",{href:!0});var Egt=s(MO);DZo=r(Egt,"from_pretrained()"),Egt.forEach(t),GZo=r(hJ," to load the model weights."),hJ.forEach(t),OZo=i(Dl),ppe=n(Dl,"P",{});var Cgt=s(ppe);VZo=r(Cgt,"Examples:"),Cgt.forEach(t),XZo=i(Dl),m(fy.$$.fragment,Dl),Dl.forEach(t),zZo=i(jl),po=n(jl,"DIV",{class:!0});var pa=s(po);m(my.$$.fragment,pa),QZo=i(pa),_pe=n(pa,"P",{});var wgt=s(_pe);WZo=r(wgt,"Instantiate one of the base model classes of the library from a pretrained model."),wgt.forEach(t),HZo=i(pa),_n=n(pa,"P",{});var rC=s(_n);UZo=r(rC,"The model class to instantiate is selected based on the "),upe=n(rC,"CODE",{});var Agt=s(upe);JZo=r(Agt,"model_type"),Agt.forEach(t),YZo=r(rC,` property of the config object (either
passed as an argument or loaded from `),bpe=n(rC,"CODE",{});var ygt=s(bpe);KZo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),ZZo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(rC,"CODE",{});var Lgt=s(Fpe);eer=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),oer=r(rC,":"),rC.forEach(t),rer=i(pa),x=n(pa,"UL",{});var k=s(x);S2=n(k,"LI",{});var a7e=s(S2);vpe=n(a7e,"STRONG",{});var xgt=s(vpe);ter=r(xgt,"albert"),xgt.forEach(t),aer=r(a7e," \u2014 "),EO=n(a7e,"A",{href:!0});var kgt=s(EO);ner=r(kgt,"TFAlbertModel"),kgt.forEach(t),ser=r(a7e," (ALBERT model)"),a7e.forEach(t),ler=i(k),R2=n(k,"LI",{});var n7e=s(R2);Tpe=n(n7e,"STRONG",{});var Sgt=s(Tpe);ier=r(Sgt,"bart"),Sgt.forEach(t),der=r(n7e," \u2014 "),CO=n(n7e,"A",{href:!0});var Rgt=s(CO);cer=r(Rgt,"TFBartModel"),Rgt.forEach(t),fer=r(n7e," (BART model)"),n7e.forEach(t),mer=i(k),B2=n(k,"LI",{});var s7e=s(B2);Mpe=n(s7e,"STRONG",{});var Bgt=s(Mpe);ger=r(Bgt,"bert"),Bgt.forEach(t),her=r(s7e," \u2014 "),wO=n(s7e,"A",{href:!0});var Pgt=s(wO);per=r(Pgt,"TFBertModel"),Pgt.forEach(t),_er=r(s7e," (BERT model)"),s7e.forEach(t),uer=i(k),P2=n(k,"LI",{});var l7e=s(P2);Epe=n(l7e,"STRONG",{});var $gt=s(Epe);ber=r($gt,"blenderbot"),$gt.forEach(t),Fer=r(l7e," \u2014 "),AO=n(l7e,"A",{href:!0});var Igt=s(AO);ver=r(Igt,"TFBlenderbotModel"),Igt.forEach(t),Ter=r(l7e," (Blenderbot model)"),l7e.forEach(t),Mer=i(k),$2=n(k,"LI",{});var i7e=s($2);Cpe=n(i7e,"STRONG",{});var qgt=s(Cpe);Eer=r(qgt,"blenderbot-small"),qgt.forEach(t),Cer=r(i7e," \u2014 "),yO=n(i7e,"A",{href:!0});var Ngt=s(yO);wer=r(Ngt,"TFBlenderbotSmallModel"),Ngt.forEach(t),Aer=r(i7e," (BlenderbotSmall model)"),i7e.forEach(t),yer=i(k),I2=n(k,"LI",{});var d7e=s(I2);wpe=n(d7e,"STRONG",{});var jgt=s(wpe);Ler=r(jgt,"camembert"),jgt.forEach(t),xer=r(d7e," \u2014 "),LO=n(d7e,"A",{href:!0});var Dgt=s(LO);ker=r(Dgt,"TFCamembertModel"),Dgt.forEach(t),Ser=r(d7e," (CamemBERT model)"),d7e.forEach(t),Rer=i(k),q2=n(k,"LI",{});var c7e=s(q2);Ape=n(c7e,"STRONG",{});var Ggt=s(Ape);Ber=r(Ggt,"clip"),Ggt.forEach(t),Per=r(c7e," \u2014 "),xO=n(c7e,"A",{href:!0});var Ogt=s(xO);$er=r(Ogt,"TFCLIPModel"),Ogt.forEach(t),Ier=r(c7e," (CLIP model)"),c7e.forEach(t),qer=i(k),N2=n(k,"LI",{});var f7e=s(N2);ype=n(f7e,"STRONG",{});var Vgt=s(ype);Ner=r(Vgt,"convbert"),Vgt.forEach(t),jer=r(f7e," \u2014 "),kO=n(f7e,"A",{href:!0});var Xgt=s(kO);Der=r(Xgt,"TFConvBertModel"),Xgt.forEach(t),Ger=r(f7e," (ConvBERT model)"),f7e.forEach(t),Oer=i(k),j2=n(k,"LI",{});var m7e=s(j2);Lpe=n(m7e,"STRONG",{});var zgt=s(Lpe);Ver=r(zgt,"convnext"),zgt.forEach(t),Xer=r(m7e," \u2014 "),SO=n(m7e,"A",{href:!0});var Qgt=s(SO);zer=r(Qgt,"TFConvNextModel"),Qgt.forEach(t),Qer=r(m7e," (ConvNext model)"),m7e.forEach(t),Wer=i(k),D2=n(k,"LI",{});var g7e=s(D2);xpe=n(g7e,"STRONG",{});var Wgt=s(xpe);Her=r(Wgt,"ctrl"),Wgt.forEach(t),Uer=r(g7e," \u2014 "),RO=n(g7e,"A",{href:!0});var Hgt=s(RO);Jer=r(Hgt,"TFCTRLModel"),Hgt.forEach(t),Yer=r(g7e," (CTRL model)"),g7e.forEach(t),Ker=i(k),G2=n(k,"LI",{});var h7e=s(G2);kpe=n(h7e,"STRONG",{});var Ugt=s(kpe);Zer=r(Ugt,"deberta"),Ugt.forEach(t),eor=r(h7e," \u2014 "),BO=n(h7e,"A",{href:!0});var Jgt=s(BO);oor=r(Jgt,"TFDebertaModel"),Jgt.forEach(t),ror=r(h7e," (DeBERTa model)"),h7e.forEach(t),tor=i(k),O2=n(k,"LI",{});var p7e=s(O2);Spe=n(p7e,"STRONG",{});var Ygt=s(Spe);aor=r(Ygt,"deberta-v2"),Ygt.forEach(t),nor=r(p7e," \u2014 "),PO=n(p7e,"A",{href:!0});var Kgt=s(PO);sor=r(Kgt,"TFDebertaV2Model"),Kgt.forEach(t),lor=r(p7e," (DeBERTa-v2 model)"),p7e.forEach(t),ior=i(k),V2=n(k,"LI",{});var _7e=s(V2);Rpe=n(_7e,"STRONG",{});var Zgt=s(Rpe);dor=r(Zgt,"distilbert"),Zgt.forEach(t),cor=r(_7e," \u2014 "),$O=n(_7e,"A",{href:!0});var eht=s($O);mor=r(eht,"TFDistilBertModel"),eht.forEach(t),gor=r(_7e," (DistilBERT model)"),_7e.forEach(t),hor=i(k),X2=n(k,"LI",{});var u7e=s(X2);Bpe=n(u7e,"STRONG",{});var oht=s(Bpe);por=r(oht,"dpr"),oht.forEach(t),_or=r(u7e," \u2014 "),IO=n(u7e,"A",{href:!0});var rht=s(IO);uor=r(rht,"TFDPRQuestionEncoder"),rht.forEach(t),bor=r(u7e," (DPR model)"),u7e.forEach(t),For=i(k),z2=n(k,"LI",{});var b7e=s(z2);Ppe=n(b7e,"STRONG",{});var tht=s(Ppe);vor=r(tht,"electra"),tht.forEach(t),Tor=r(b7e," \u2014 "),qO=n(b7e,"A",{href:!0});var aht=s(qO);Mor=r(aht,"TFElectraModel"),aht.forEach(t),Eor=r(b7e," (ELECTRA model)"),b7e.forEach(t),Cor=i(k),Q2=n(k,"LI",{});var F7e=s(Q2);$pe=n(F7e,"STRONG",{});var nht=s($pe);wor=r(nht,"flaubert"),nht.forEach(t),Aor=r(F7e," \u2014 "),NO=n(F7e,"A",{href:!0});var sht=s(NO);yor=r(sht,"TFFlaubertModel"),sht.forEach(t),Lor=r(F7e," (FlauBERT model)"),F7e.forEach(t),xor=i(k),Gs=n(k,"LI",{});var b9=s(Gs);Ipe=n(b9,"STRONG",{});var lht=s(Ipe);kor=r(lht,"funnel"),lht.forEach(t),Sor=r(b9," \u2014 "),jO=n(b9,"A",{href:!0});var iht=s(jO);Ror=r(iht,"TFFunnelModel"),iht.forEach(t),Bor=r(b9," or "),DO=n(b9,"A",{href:!0});var dht=s(DO);Por=r(dht,"TFFunnelBaseModel"),dht.forEach(t),$or=r(b9," (Funnel Transformer model)"),b9.forEach(t),Ior=i(k),W2=n(k,"LI",{});var v7e=s(W2);qpe=n(v7e,"STRONG",{});var cht=s(qpe);qor=r(cht,"gpt2"),cht.forEach(t),Nor=r(v7e," \u2014 "),GO=n(v7e,"A",{href:!0});var fht=s(GO);jor=r(fht,"TFGPT2Model"),fht.forEach(t),Dor=r(v7e," (OpenAI GPT-2 model)"),v7e.forEach(t),Gor=i(k),H2=n(k,"LI",{});var T7e=s(H2);Npe=n(T7e,"STRONG",{});var mht=s(Npe);Oor=r(mht,"gptj"),mht.forEach(t),Vor=r(T7e," \u2014 "),OO=n(T7e,"A",{href:!0});var ght=s(OO);Xor=r(ght,"TFGPTJModel"),ght.forEach(t),zor=r(T7e," (GPT-J model)"),T7e.forEach(t),Qor=i(k),U2=n(k,"LI",{});var M7e=s(U2);jpe=n(M7e,"STRONG",{});var hht=s(jpe);Wor=r(hht,"hubert"),hht.forEach(t),Hor=r(M7e," \u2014 "),VO=n(M7e,"A",{href:!0});var pht=s(VO);Uor=r(pht,"TFHubertModel"),pht.forEach(t),Jor=r(M7e," (Hubert model)"),M7e.forEach(t),Yor=i(k),J2=n(k,"LI",{});var E7e=s(J2);Dpe=n(E7e,"STRONG",{});var _ht=s(Dpe);Kor=r(_ht,"layoutlm"),_ht.forEach(t),Zor=r(E7e," \u2014 "),XO=n(E7e,"A",{href:!0});var uht=s(XO);err=r(uht,"TFLayoutLMModel"),uht.forEach(t),orr=r(E7e," (LayoutLM model)"),E7e.forEach(t),rrr=i(k),Y2=n(k,"LI",{});var C7e=s(Y2);Gpe=n(C7e,"STRONG",{});var bht=s(Gpe);trr=r(bht,"led"),bht.forEach(t),arr=r(C7e," \u2014 "),zO=n(C7e,"A",{href:!0});var Fht=s(zO);nrr=r(Fht,"TFLEDModel"),Fht.forEach(t),srr=r(C7e," (LED model)"),C7e.forEach(t),lrr=i(k),K2=n(k,"LI",{});var w7e=s(K2);Ope=n(w7e,"STRONG",{});var vht=s(Ope);irr=r(vht,"longformer"),vht.forEach(t),drr=r(w7e," \u2014 "),QO=n(w7e,"A",{href:!0});var Tht=s(QO);crr=r(Tht,"TFLongformerModel"),Tht.forEach(t),frr=r(w7e," (Longformer model)"),w7e.forEach(t),mrr=i(k),Z2=n(k,"LI",{});var A7e=s(Z2);Vpe=n(A7e,"STRONG",{});var Mht=s(Vpe);grr=r(Mht,"lxmert"),Mht.forEach(t),hrr=r(A7e," \u2014 "),WO=n(A7e,"A",{href:!0});var Eht=s(WO);prr=r(Eht,"TFLxmertModel"),Eht.forEach(t),_rr=r(A7e," (LXMERT model)"),A7e.forEach(t),urr=i(k),eF=n(k,"LI",{});var y7e=s(eF);Xpe=n(y7e,"STRONG",{});var Cht=s(Xpe);brr=r(Cht,"marian"),Cht.forEach(t),Frr=r(y7e," \u2014 "),HO=n(y7e,"A",{href:!0});var wht=s(HO);vrr=r(wht,"TFMarianModel"),wht.forEach(t),Trr=r(y7e," (Marian model)"),y7e.forEach(t),Mrr=i(k),oF=n(k,"LI",{});var L7e=s(oF);zpe=n(L7e,"STRONG",{});var Aht=s(zpe);Err=r(Aht,"mbart"),Aht.forEach(t),Crr=r(L7e," \u2014 "),UO=n(L7e,"A",{href:!0});var yht=s(UO);wrr=r(yht,"TFMBartModel"),yht.forEach(t),Arr=r(L7e," (mBART model)"),L7e.forEach(t),yrr=i(k),rF=n(k,"LI",{});var x7e=s(rF);Qpe=n(x7e,"STRONG",{});var Lht=s(Qpe);Lrr=r(Lht,"mobilebert"),Lht.forEach(t),xrr=r(x7e," \u2014 "),JO=n(x7e,"A",{href:!0});var xht=s(JO);krr=r(xht,"TFMobileBertModel"),xht.forEach(t),Srr=r(x7e," (MobileBERT model)"),x7e.forEach(t),Rrr=i(k),tF=n(k,"LI",{});var k7e=s(tF);Wpe=n(k7e,"STRONG",{});var kht=s(Wpe);Brr=r(kht,"mpnet"),kht.forEach(t),Prr=r(k7e," \u2014 "),YO=n(k7e,"A",{href:!0});var Sht=s(YO);$rr=r(Sht,"TFMPNetModel"),Sht.forEach(t),Irr=r(k7e," (MPNet model)"),k7e.forEach(t),qrr=i(k),aF=n(k,"LI",{});var S7e=s(aF);Hpe=n(S7e,"STRONG",{});var Rht=s(Hpe);Nrr=r(Rht,"mt5"),Rht.forEach(t),jrr=r(S7e," \u2014 "),KO=n(S7e,"A",{href:!0});var Bht=s(KO);Drr=r(Bht,"TFMT5Model"),Bht.forEach(t),Grr=r(S7e," (mT5 model)"),S7e.forEach(t),Orr=i(k),nF=n(k,"LI",{});var R7e=s(nF);Upe=n(R7e,"STRONG",{});var Pht=s(Upe);Vrr=r(Pht,"openai-gpt"),Pht.forEach(t),Xrr=r(R7e," \u2014 "),ZO=n(R7e,"A",{href:!0});var $ht=s(ZO);zrr=r($ht,"TFOpenAIGPTModel"),$ht.forEach(t),Qrr=r(R7e," (OpenAI GPT model)"),R7e.forEach(t),Wrr=i(k),sF=n(k,"LI",{});var B7e=s(sF);Jpe=n(B7e,"STRONG",{});var Iht=s(Jpe);Hrr=r(Iht,"pegasus"),Iht.forEach(t),Urr=r(B7e," \u2014 "),eV=n(B7e,"A",{href:!0});var qht=s(eV);Jrr=r(qht,"TFPegasusModel"),qht.forEach(t),Yrr=r(B7e," (Pegasus model)"),B7e.forEach(t),Krr=i(k),lF=n(k,"LI",{});var P7e=s(lF);Ype=n(P7e,"STRONG",{});var Nht=s(Ype);Zrr=r(Nht,"rembert"),Nht.forEach(t),etr=r(P7e," \u2014 "),oV=n(P7e,"A",{href:!0});var jht=s(oV);otr=r(jht,"TFRemBertModel"),jht.forEach(t),rtr=r(P7e," (RemBERT model)"),P7e.forEach(t),ttr=i(k),iF=n(k,"LI",{});var $7e=s(iF);Kpe=n($7e,"STRONG",{});var Dht=s(Kpe);atr=r(Dht,"roberta"),Dht.forEach(t),ntr=r($7e," \u2014 "),rV=n($7e,"A",{href:!0});var Ght=s(rV);str=r(Ght,"TFRobertaModel"),Ght.forEach(t),ltr=r($7e," (RoBERTa model)"),$7e.forEach(t),itr=i(k),dF=n(k,"LI",{});var I7e=s(dF);Zpe=n(I7e,"STRONG",{});var Oht=s(Zpe);dtr=r(Oht,"roformer"),Oht.forEach(t),ctr=r(I7e," \u2014 "),tV=n(I7e,"A",{href:!0});var Vht=s(tV);ftr=r(Vht,"TFRoFormerModel"),Vht.forEach(t),mtr=r(I7e," (RoFormer model)"),I7e.forEach(t),gtr=i(k),cF=n(k,"LI",{});var q7e=s(cF);e_e=n(q7e,"STRONG",{});var Xht=s(e_e);htr=r(Xht,"speech_to_text"),Xht.forEach(t),ptr=r(q7e," \u2014 "),aV=n(q7e,"A",{href:!0});var zht=s(aV);_tr=r(zht,"TFSpeech2TextModel"),zht.forEach(t),utr=r(q7e," (Speech2Text model)"),q7e.forEach(t),btr=i(k),fF=n(k,"LI",{});var N7e=s(fF);o_e=n(N7e,"STRONG",{});var Qht=s(o_e);Ftr=r(Qht,"t5"),Qht.forEach(t),vtr=r(N7e," \u2014 "),nV=n(N7e,"A",{href:!0});var Wht=s(nV);Ttr=r(Wht,"TFT5Model"),Wht.forEach(t),Mtr=r(N7e," (T5 model)"),N7e.forEach(t),Etr=i(k),mF=n(k,"LI",{});var j7e=s(mF);r_e=n(j7e,"STRONG",{});var Hht=s(r_e);Ctr=r(Hht,"tapas"),Hht.forEach(t),wtr=r(j7e," \u2014 "),sV=n(j7e,"A",{href:!0});var Uht=s(sV);Atr=r(Uht,"TFTapasModel"),Uht.forEach(t),ytr=r(j7e," (TAPAS model)"),j7e.forEach(t),Ltr=i(k),gF=n(k,"LI",{});var D7e=s(gF);t_e=n(D7e,"STRONG",{});var Jht=s(t_e);xtr=r(Jht,"transfo-xl"),Jht.forEach(t),ktr=r(D7e," \u2014 "),lV=n(D7e,"A",{href:!0});var Yht=s(lV);Str=r(Yht,"TFTransfoXLModel"),Yht.forEach(t),Rtr=r(D7e," (Transformer-XL model)"),D7e.forEach(t),Btr=i(k),hF=n(k,"LI",{});var G7e=s(hF);a_e=n(G7e,"STRONG",{});var Kht=s(a_e);Ptr=r(Kht,"vit"),Kht.forEach(t),$tr=r(G7e," \u2014 "),iV=n(G7e,"A",{href:!0});var Zht=s(iV);Itr=r(Zht,"TFViTModel"),Zht.forEach(t),qtr=r(G7e," (ViT model)"),G7e.forEach(t),Ntr=i(k),pF=n(k,"LI",{});var O7e=s(pF);n_e=n(O7e,"STRONG",{});var ept=s(n_e);jtr=r(ept,"vit_mae"),ept.forEach(t),Dtr=r(O7e," \u2014 "),dV=n(O7e,"A",{href:!0});var opt=s(dV);Gtr=r(opt,"TFViTMAEModel"),opt.forEach(t),Otr=r(O7e," (ViTMAE model)"),O7e.forEach(t),Vtr=i(k),_F=n(k,"LI",{});var V7e=s(_F);s_e=n(V7e,"STRONG",{});var rpt=s(s_e);Xtr=r(rpt,"wav2vec2"),rpt.forEach(t),ztr=r(V7e," \u2014 "),cV=n(V7e,"A",{href:!0});var tpt=s(cV);Qtr=r(tpt,"TFWav2Vec2Model"),tpt.forEach(t),Wtr=r(V7e," (Wav2Vec2 model)"),V7e.forEach(t),Htr=i(k),uF=n(k,"LI",{});var X7e=s(uF);l_e=n(X7e,"STRONG",{});var apt=s(l_e);Utr=r(apt,"xlm"),apt.forEach(t),Jtr=r(X7e," \u2014 "),fV=n(X7e,"A",{href:!0});var npt=s(fV);Ytr=r(npt,"TFXLMModel"),npt.forEach(t),Ktr=r(X7e," (XLM model)"),X7e.forEach(t),Ztr=i(k),bF=n(k,"LI",{});var z7e=s(bF);i_e=n(z7e,"STRONG",{});var spt=s(i_e);ear=r(spt,"xlm-roberta"),spt.forEach(t),oar=r(z7e," \u2014 "),mV=n(z7e,"A",{href:!0});var lpt=s(mV);rar=r(lpt,"TFXLMRobertaModel"),lpt.forEach(t),tar=r(z7e," (XLM-RoBERTa model)"),z7e.forEach(t),aar=i(k),FF=n(k,"LI",{});var Q7e=s(FF);d_e=n(Q7e,"STRONG",{});var ipt=s(d_e);nar=r(ipt,"xlnet"),ipt.forEach(t),sar=r(Q7e," \u2014 "),gV=n(Q7e,"A",{href:!0});var dpt=s(gV);lar=r(dpt,"TFXLNetModel"),dpt.forEach(t),iar=r(Q7e," (XLNet model)"),Q7e.forEach(t),k.forEach(t),dar=i(pa),c_e=n(pa,"P",{});var cpt=s(c_e);car=r(cpt,"Examples:"),cpt.forEach(t),far=i(pa),m(gy.$$.fragment,pa),pa.forEach(t),jl.forEach(t),NBe=i(c),_c=n(c,"H2",{class:!0});var H$e=s(_c);vF=n(H$e,"A",{id:!0,class:!0,href:!0});var fpt=s(vF);f_e=n(fpt,"SPAN",{});var mpt=s(f_e);m(hy.$$.fragment,mpt),mpt.forEach(t),fpt.forEach(t),mar=i(H$e),m_e=n(H$e,"SPAN",{});var gpt=s(m_e);gar=r(gpt,"TFAutoModelForPreTraining"),gpt.forEach(t),H$e.forEach(t),jBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(py.$$.fragment,Gl),har=i(Gl),uc=n(Gl,"P",{});var pJ=s(uc);par=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),hV=n(pJ,"A",{href:!0});var hpt=s(hV);_ar=r(hpt,"from_pretrained()"),hpt.forEach(t),uar=r(pJ," class method or the "),pV=n(pJ,"A",{href:!0});var ppt=s(pV);bar=r(ppt,"from_config()"),ppt.forEach(t),Far=r(pJ,` class
method.`),pJ.forEach(t),Tar=i(Gl),_y=n(Gl,"P",{});var U$e=s(_y);Mar=r(U$e,"This class cannot be instantiated directly using "),g_e=n(U$e,"CODE",{});var _pt=s(g_e);Ear=r(_pt,"__init__()"),_pt.forEach(t),Car=r(U$e," (throws an error)."),U$e.forEach(t),war=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(uy.$$.fragment,Ol),Aar=i(Ol),h_e=n(Ol,"P",{});var upt=s(h_e);yar=r(upt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),upt.forEach(t),Lar=i(Ol),bc=n(Ol,"P",{});var _J=s(bc);xar=r(_J,`Note:
Loading a model from its configuration file does `),p_e=n(_J,"STRONG",{});var bpt=s(p_e);kar=r(bpt,"not"),bpt.forEach(t),Sar=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(_J,"A",{href:!0});var Fpt=s(_V);Rar=r(Fpt,"from_pretrained()"),Fpt.forEach(t),Bar=r(_J," to load the model weights."),_J.forEach(t),Par=i(Ol),__e=n(Ol,"P",{});var vpt=s(__e);$ar=r(vpt,"Examples:"),vpt.forEach(t),Iar=i(Ol),m(by.$$.fragment,Ol),Ol.forEach(t),qar=i(Gl),_o=n(Gl,"DIV",{class:!0});var _a=s(_o);m(Fy.$$.fragment,_a),Nar=i(_a),u_e=n(_a,"P",{});var Tpt=s(u_e);jar=r(Tpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tpt.forEach(t),Dar=i(_a),un=n(_a,"P",{});var tC=s(un);Gar=r(tC,"The model class to instantiate is selected based on the "),b_e=n(tC,"CODE",{});var Mpt=s(b_e);Oar=r(Mpt,"model_type"),Mpt.forEach(t),Var=r(tC,` property of the config object (either
passed as an argument or loaded from `),F_e=n(tC,"CODE",{});var Ept=s(F_e);Xar=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),zar=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(tC,"CODE",{});var Cpt=s(v_e);Qar=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),War=r(tC,":"),tC.forEach(t),Har=i(_a),H=n(_a,"UL",{});var U=s(H);TF=n(U,"LI",{});var W7e=s(TF);T_e=n(W7e,"STRONG",{});var wpt=s(T_e);Uar=r(wpt,"albert"),wpt.forEach(t),Jar=r(W7e," \u2014 "),uV=n(W7e,"A",{href:!0});var Apt=s(uV);Yar=r(Apt,"TFAlbertForPreTraining"),Apt.forEach(t),Kar=r(W7e," (ALBERT model)"),W7e.forEach(t),Zar=i(U),MF=n(U,"LI",{});var H7e=s(MF);M_e=n(H7e,"STRONG",{});var ypt=s(M_e);enr=r(ypt,"bart"),ypt.forEach(t),onr=r(H7e," \u2014 "),bV=n(H7e,"A",{href:!0});var Lpt=s(bV);rnr=r(Lpt,"TFBartForConditionalGeneration"),Lpt.forEach(t),tnr=r(H7e," (BART model)"),H7e.forEach(t),anr=i(U),EF=n(U,"LI",{});var U7e=s(EF);E_e=n(U7e,"STRONG",{});var xpt=s(E_e);nnr=r(xpt,"bert"),xpt.forEach(t),snr=r(U7e," \u2014 "),FV=n(U7e,"A",{href:!0});var kpt=s(FV);lnr=r(kpt,"TFBertForPreTraining"),kpt.forEach(t),inr=r(U7e," (BERT model)"),U7e.forEach(t),dnr=i(U),CF=n(U,"LI",{});var J7e=s(CF);C_e=n(J7e,"STRONG",{});var Spt=s(C_e);cnr=r(Spt,"camembert"),Spt.forEach(t),fnr=r(J7e," \u2014 "),vV=n(J7e,"A",{href:!0});var Rpt=s(vV);mnr=r(Rpt,"TFCamembertForMaskedLM"),Rpt.forEach(t),gnr=r(J7e," (CamemBERT model)"),J7e.forEach(t),hnr=i(U),wF=n(U,"LI",{});var Y7e=s(wF);w_e=n(Y7e,"STRONG",{});var Bpt=s(w_e);pnr=r(Bpt,"ctrl"),Bpt.forEach(t),_nr=r(Y7e," \u2014 "),TV=n(Y7e,"A",{href:!0});var Ppt=s(TV);unr=r(Ppt,"TFCTRLLMHeadModel"),Ppt.forEach(t),bnr=r(Y7e," (CTRL model)"),Y7e.forEach(t),Fnr=i(U),AF=n(U,"LI",{});var K7e=s(AF);A_e=n(K7e,"STRONG",{});var $pt=s(A_e);vnr=r($pt,"distilbert"),$pt.forEach(t),Tnr=r(K7e," \u2014 "),MV=n(K7e,"A",{href:!0});var Ipt=s(MV);Mnr=r(Ipt,"TFDistilBertForMaskedLM"),Ipt.forEach(t),Enr=r(K7e," (DistilBERT model)"),K7e.forEach(t),Cnr=i(U),yF=n(U,"LI",{});var Z7e=s(yF);y_e=n(Z7e,"STRONG",{});var qpt=s(y_e);wnr=r(qpt,"electra"),qpt.forEach(t),Anr=r(Z7e," \u2014 "),EV=n(Z7e,"A",{href:!0});var Npt=s(EV);ynr=r(Npt,"TFElectraForPreTraining"),Npt.forEach(t),Lnr=r(Z7e," (ELECTRA model)"),Z7e.forEach(t),xnr=i(U),LF=n(U,"LI",{});var e9e=s(LF);L_e=n(e9e,"STRONG",{});var jpt=s(L_e);knr=r(jpt,"flaubert"),jpt.forEach(t),Snr=r(e9e," \u2014 "),CV=n(e9e,"A",{href:!0});var Dpt=s(CV);Rnr=r(Dpt,"TFFlaubertWithLMHeadModel"),Dpt.forEach(t),Bnr=r(e9e," (FlauBERT model)"),e9e.forEach(t),Pnr=i(U),xF=n(U,"LI",{});var o9e=s(xF);x_e=n(o9e,"STRONG",{});var Gpt=s(x_e);$nr=r(Gpt,"funnel"),Gpt.forEach(t),Inr=r(o9e," \u2014 "),wV=n(o9e,"A",{href:!0});var Opt=s(wV);qnr=r(Opt,"TFFunnelForPreTraining"),Opt.forEach(t),Nnr=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),jnr=i(U),kF=n(U,"LI",{});var r9e=s(kF);k_e=n(r9e,"STRONG",{});var Vpt=s(k_e);Dnr=r(Vpt,"gpt2"),Vpt.forEach(t),Gnr=r(r9e," \u2014 "),AV=n(r9e,"A",{href:!0});var Xpt=s(AV);Onr=r(Xpt,"TFGPT2LMHeadModel"),Xpt.forEach(t),Vnr=r(r9e," (OpenAI GPT-2 model)"),r9e.forEach(t),Xnr=i(U),SF=n(U,"LI",{});var t9e=s(SF);S_e=n(t9e,"STRONG",{});var zpt=s(S_e);znr=r(zpt,"layoutlm"),zpt.forEach(t),Qnr=r(t9e," \u2014 "),yV=n(t9e,"A",{href:!0});var Qpt=s(yV);Wnr=r(Qpt,"TFLayoutLMForMaskedLM"),Qpt.forEach(t),Hnr=r(t9e," (LayoutLM model)"),t9e.forEach(t),Unr=i(U),RF=n(U,"LI",{});var a9e=s(RF);R_e=n(a9e,"STRONG",{});var Wpt=s(R_e);Jnr=r(Wpt,"lxmert"),Wpt.forEach(t),Ynr=r(a9e," \u2014 "),LV=n(a9e,"A",{href:!0});var Hpt=s(LV);Knr=r(Hpt,"TFLxmertForPreTraining"),Hpt.forEach(t),Znr=r(a9e," (LXMERT model)"),a9e.forEach(t),esr=i(U),BF=n(U,"LI",{});var n9e=s(BF);B_e=n(n9e,"STRONG",{});var Upt=s(B_e);osr=r(Upt,"mobilebert"),Upt.forEach(t),rsr=r(n9e," \u2014 "),xV=n(n9e,"A",{href:!0});var Jpt=s(xV);tsr=r(Jpt,"TFMobileBertForPreTraining"),Jpt.forEach(t),asr=r(n9e," (MobileBERT model)"),n9e.forEach(t),nsr=i(U),PF=n(U,"LI",{});var s9e=s(PF);P_e=n(s9e,"STRONG",{});var Ypt=s(P_e);ssr=r(Ypt,"mpnet"),Ypt.forEach(t),lsr=r(s9e," \u2014 "),kV=n(s9e,"A",{href:!0});var Kpt=s(kV);isr=r(Kpt,"TFMPNetForMaskedLM"),Kpt.forEach(t),dsr=r(s9e," (MPNet model)"),s9e.forEach(t),csr=i(U),$F=n(U,"LI",{});var l9e=s($F);$_e=n(l9e,"STRONG",{});var Zpt=s($_e);fsr=r(Zpt,"openai-gpt"),Zpt.forEach(t),msr=r(l9e," \u2014 "),SV=n(l9e,"A",{href:!0});var e_t=s(SV);gsr=r(e_t,"TFOpenAIGPTLMHeadModel"),e_t.forEach(t),hsr=r(l9e," (OpenAI GPT model)"),l9e.forEach(t),psr=i(U),IF=n(U,"LI",{});var i9e=s(IF);I_e=n(i9e,"STRONG",{});var o_t=s(I_e);_sr=r(o_t,"roberta"),o_t.forEach(t),usr=r(i9e," \u2014 "),RV=n(i9e,"A",{href:!0});var r_t=s(RV);bsr=r(r_t,"TFRobertaForMaskedLM"),r_t.forEach(t),Fsr=r(i9e," (RoBERTa model)"),i9e.forEach(t),vsr=i(U),qF=n(U,"LI",{});var d9e=s(qF);q_e=n(d9e,"STRONG",{});var t_t=s(q_e);Tsr=r(t_t,"t5"),t_t.forEach(t),Msr=r(d9e," \u2014 "),BV=n(d9e,"A",{href:!0});var a_t=s(BV);Esr=r(a_t,"TFT5ForConditionalGeneration"),a_t.forEach(t),Csr=r(d9e," (T5 model)"),d9e.forEach(t),wsr=i(U),NF=n(U,"LI",{});var c9e=s(NF);N_e=n(c9e,"STRONG",{});var n_t=s(N_e);Asr=r(n_t,"tapas"),n_t.forEach(t),ysr=r(c9e," \u2014 "),PV=n(c9e,"A",{href:!0});var s_t=s(PV);Lsr=r(s_t,"TFTapasForMaskedLM"),s_t.forEach(t),xsr=r(c9e," (TAPAS model)"),c9e.forEach(t),ksr=i(U),jF=n(U,"LI",{});var f9e=s(jF);j_e=n(f9e,"STRONG",{});var l_t=s(j_e);Ssr=r(l_t,"transfo-xl"),l_t.forEach(t),Rsr=r(f9e," \u2014 "),$V=n(f9e,"A",{href:!0});var i_t=s($V);Bsr=r(i_t,"TFTransfoXLLMHeadModel"),i_t.forEach(t),Psr=r(f9e," (Transformer-XL model)"),f9e.forEach(t),$sr=i(U),DF=n(U,"LI",{});var m9e=s(DF);D_e=n(m9e,"STRONG",{});var d_t=s(D_e);Isr=r(d_t,"vit_mae"),d_t.forEach(t),qsr=r(m9e," \u2014 "),IV=n(m9e,"A",{href:!0});var c_t=s(IV);Nsr=r(c_t,"TFViTMAEForPreTraining"),c_t.forEach(t),jsr=r(m9e," (ViTMAE model)"),m9e.forEach(t),Dsr=i(U),GF=n(U,"LI",{});var g9e=s(GF);G_e=n(g9e,"STRONG",{});var f_t=s(G_e);Gsr=r(f_t,"xlm"),f_t.forEach(t),Osr=r(g9e," \u2014 "),qV=n(g9e,"A",{href:!0});var m_t=s(qV);Vsr=r(m_t,"TFXLMWithLMHeadModel"),m_t.forEach(t),Xsr=r(g9e," (XLM model)"),g9e.forEach(t),zsr=i(U),OF=n(U,"LI",{});var h9e=s(OF);O_e=n(h9e,"STRONG",{});var g_t=s(O_e);Qsr=r(g_t,"xlm-roberta"),g_t.forEach(t),Wsr=r(h9e," \u2014 "),NV=n(h9e,"A",{href:!0});var h_t=s(NV);Hsr=r(h_t,"TFXLMRobertaForMaskedLM"),h_t.forEach(t),Usr=r(h9e," (XLM-RoBERTa model)"),h9e.forEach(t),Jsr=i(U),VF=n(U,"LI",{});var p9e=s(VF);V_e=n(p9e,"STRONG",{});var p_t=s(V_e);Ysr=r(p_t,"xlnet"),p_t.forEach(t),Ksr=r(p9e," \u2014 "),jV=n(p9e,"A",{href:!0});var __t=s(jV);Zsr=r(__t,"TFXLNetLMHeadModel"),__t.forEach(t),elr=r(p9e," (XLNet model)"),p9e.forEach(t),U.forEach(t),olr=i(_a),X_e=n(_a,"P",{});var u_t=s(X_e);rlr=r(u_t,"Examples:"),u_t.forEach(t),tlr=i(_a),m(vy.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),DBe=i(c),Fc=n(c,"H2",{class:!0});var J$e=s(Fc);XF=n(J$e,"A",{id:!0,class:!0,href:!0});var b_t=s(XF);z_e=n(b_t,"SPAN",{});var F_t=s(z_e);m(Ty.$$.fragment,F_t),F_t.forEach(t),b_t.forEach(t),alr=i(J$e),Q_e=n(J$e,"SPAN",{});var v_t=s(Q_e);nlr=r(v_t,"TFAutoModelForCausalLM"),v_t.forEach(t),J$e.forEach(t),GBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(My.$$.fragment,Vl),slr=i(Vl),vc=n(Vl,"P",{});var uJ=s(vc);llr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),DV=n(uJ,"A",{href:!0});var T_t=s(DV);ilr=r(T_t,"from_pretrained()"),T_t.forEach(t),dlr=r(uJ," class method or the "),GV=n(uJ,"A",{href:!0});var M_t=s(GV);clr=r(M_t,"from_config()"),M_t.forEach(t),flr=r(uJ,` class
method.`),uJ.forEach(t),mlr=i(Vl),Ey=n(Vl,"P",{});var Y$e=s(Ey);glr=r(Y$e,"This class cannot be instantiated directly using "),W_e=n(Y$e,"CODE",{});var E_t=s(W_e);hlr=r(E_t,"__init__()"),E_t.forEach(t),plr=r(Y$e," (throws an error)."),Y$e.forEach(t),_lr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(Cy.$$.fragment,Xl),ulr=i(Xl),H_e=n(Xl,"P",{});var C_t=s(H_e);blr=r(C_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C_t.forEach(t),Flr=i(Xl),Tc=n(Xl,"P",{});var bJ=s(Tc);vlr=r(bJ,`Note:
Loading a model from its configuration file does `),U_e=n(bJ,"STRONG",{});var w_t=s(U_e);Tlr=r(w_t,"not"),w_t.forEach(t),Mlr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(bJ,"A",{href:!0});var A_t=s(OV);Elr=r(A_t,"from_pretrained()"),A_t.forEach(t),Clr=r(bJ," to load the model weights."),bJ.forEach(t),wlr=i(Xl),J_e=n(Xl,"P",{});var y_t=s(J_e);Alr=r(y_t,"Examples:"),y_t.forEach(t),ylr=i(Xl),m(wy.$$.fragment,Xl),Xl.forEach(t),Llr=i(Vl),uo=n(Vl,"DIV",{class:!0});var ua=s(uo);m(Ay.$$.fragment,ua),xlr=i(ua),Y_e=n(ua,"P",{});var L_t=s(Y_e);klr=r(L_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),L_t.forEach(t),Slr=i(ua),bn=n(ua,"P",{});var aC=s(bn);Rlr=r(aC,"The model class to instantiate is selected based on the "),K_e=n(aC,"CODE",{});var x_t=s(K_e);Blr=r(x_t,"model_type"),x_t.forEach(t),Plr=r(aC,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(aC,"CODE",{});var k_t=s(Z_e);$lr=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),Ilr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(aC,"CODE",{});var S_t=s(eue);qlr=r(S_t,"pretrained_model_name_or_path"),S_t.forEach(t),Nlr=r(aC,":"),aC.forEach(t),jlr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);zF=n(pe,"LI",{});var _9e=s(zF);oue=n(_9e,"STRONG",{});var R_t=s(oue);Dlr=r(R_t,"bert"),R_t.forEach(t),Glr=r(_9e," \u2014 "),VV=n(_9e,"A",{href:!0});var B_t=s(VV);Olr=r(B_t,"TFBertLMHeadModel"),B_t.forEach(t),Vlr=r(_9e," (BERT model)"),_9e.forEach(t),Xlr=i(pe),QF=n(pe,"LI",{});var u9e=s(QF);rue=n(u9e,"STRONG",{});var P_t=s(rue);zlr=r(P_t,"camembert"),P_t.forEach(t),Qlr=r(u9e," \u2014 "),XV=n(u9e,"A",{href:!0});var $_t=s(XV);Wlr=r($_t,"TFCamembertForCausalLM"),$_t.forEach(t),Hlr=r(u9e," (CamemBERT model)"),u9e.forEach(t),Ulr=i(pe),WF=n(pe,"LI",{});var b9e=s(WF);tue=n(b9e,"STRONG",{});var I_t=s(tue);Jlr=r(I_t,"ctrl"),I_t.forEach(t),Ylr=r(b9e," \u2014 "),zV=n(b9e,"A",{href:!0});var q_t=s(zV);Klr=r(q_t,"TFCTRLLMHeadModel"),q_t.forEach(t),Zlr=r(b9e," (CTRL model)"),b9e.forEach(t),eir=i(pe),HF=n(pe,"LI",{});var F9e=s(HF);aue=n(F9e,"STRONG",{});var N_t=s(aue);oir=r(N_t,"gpt2"),N_t.forEach(t),rir=r(F9e," \u2014 "),QV=n(F9e,"A",{href:!0});var j_t=s(QV);tir=r(j_t,"TFGPT2LMHeadModel"),j_t.forEach(t),air=r(F9e," (OpenAI GPT-2 model)"),F9e.forEach(t),nir=i(pe),UF=n(pe,"LI",{});var v9e=s(UF);nue=n(v9e,"STRONG",{});var D_t=s(nue);sir=r(D_t,"gptj"),D_t.forEach(t),lir=r(v9e," \u2014 "),WV=n(v9e,"A",{href:!0});var G_t=s(WV);iir=r(G_t,"TFGPTJForCausalLM"),G_t.forEach(t),dir=r(v9e," (GPT-J model)"),v9e.forEach(t),cir=i(pe),JF=n(pe,"LI",{});var T9e=s(JF);sue=n(T9e,"STRONG",{});var O_t=s(sue);fir=r(O_t,"openai-gpt"),O_t.forEach(t),mir=r(T9e," \u2014 "),HV=n(T9e,"A",{href:!0});var V_t=s(HV);gir=r(V_t,"TFOpenAIGPTLMHeadModel"),V_t.forEach(t),hir=r(T9e," (OpenAI GPT model)"),T9e.forEach(t),pir=i(pe),YF=n(pe,"LI",{});var M9e=s(YF);lue=n(M9e,"STRONG",{});var X_t=s(lue);_ir=r(X_t,"rembert"),X_t.forEach(t),uir=r(M9e," \u2014 "),UV=n(M9e,"A",{href:!0});var z_t=s(UV);bir=r(z_t,"TFRemBertForCausalLM"),z_t.forEach(t),Fir=r(M9e," (RemBERT model)"),M9e.forEach(t),vir=i(pe),KF=n(pe,"LI",{});var E9e=s(KF);iue=n(E9e,"STRONG",{});var Q_t=s(iue);Tir=r(Q_t,"roberta"),Q_t.forEach(t),Mir=r(E9e," \u2014 "),JV=n(E9e,"A",{href:!0});var W_t=s(JV);Eir=r(W_t,"TFRobertaForCausalLM"),W_t.forEach(t),Cir=r(E9e," (RoBERTa model)"),E9e.forEach(t),wir=i(pe),ZF=n(pe,"LI",{});var C9e=s(ZF);due=n(C9e,"STRONG",{});var H_t=s(due);Air=r(H_t,"roformer"),H_t.forEach(t),yir=r(C9e," \u2014 "),YV=n(C9e,"A",{href:!0});var U_t=s(YV);Lir=r(U_t,"TFRoFormerForCausalLM"),U_t.forEach(t),xir=r(C9e," (RoFormer model)"),C9e.forEach(t),kir=i(pe),ev=n(pe,"LI",{});var w9e=s(ev);cue=n(w9e,"STRONG",{});var J_t=s(cue);Sir=r(J_t,"transfo-xl"),J_t.forEach(t),Rir=r(w9e," \u2014 "),KV=n(w9e,"A",{href:!0});var Y_t=s(KV);Bir=r(Y_t,"TFTransfoXLLMHeadModel"),Y_t.forEach(t),Pir=r(w9e," (Transformer-XL model)"),w9e.forEach(t),$ir=i(pe),ov=n(pe,"LI",{});var A9e=s(ov);fue=n(A9e,"STRONG",{});var K_t=s(fue);Iir=r(K_t,"xlm"),K_t.forEach(t),qir=r(A9e," \u2014 "),ZV=n(A9e,"A",{href:!0});var Z_t=s(ZV);Nir=r(Z_t,"TFXLMWithLMHeadModel"),Z_t.forEach(t),jir=r(A9e," (XLM model)"),A9e.forEach(t),Dir=i(pe),rv=n(pe,"LI",{});var y9e=s(rv);mue=n(y9e,"STRONG",{});var eut=s(mue);Gir=r(eut,"xlnet"),eut.forEach(t),Oir=r(y9e," \u2014 "),eX=n(y9e,"A",{href:!0});var out=s(eX);Vir=r(out,"TFXLNetLMHeadModel"),out.forEach(t),Xir=r(y9e," (XLNet model)"),y9e.forEach(t),pe.forEach(t),zir=i(ua),gue=n(ua,"P",{});var rut=s(gue);Qir=r(rut,"Examples:"),rut.forEach(t),Wir=i(ua),m(yy.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),OBe=i(c),Mc=n(c,"H2",{class:!0});var K$e=s(Mc);tv=n(K$e,"A",{id:!0,class:!0,href:!0});var tut=s(tv);hue=n(tut,"SPAN",{});var aut=s(hue);m(Ly.$$.fragment,aut),aut.forEach(t),tut.forEach(t),Hir=i(K$e),pue=n(K$e,"SPAN",{});var nut=s(pue);Uir=r(nut,"TFAutoModelForImageClassification"),nut.forEach(t),K$e.forEach(t),VBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(xy.$$.fragment,zl),Jir=i(zl),Ec=n(zl,"P",{});var FJ=s(Ec);Yir=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oX=n(FJ,"A",{href:!0});var sut=s(oX);Kir=r(sut,"from_pretrained()"),sut.forEach(t),Zir=r(FJ," class method or the "),rX=n(FJ,"A",{href:!0});var lut=s(rX);edr=r(lut,"from_config()"),lut.forEach(t),odr=r(FJ,` class
method.`),FJ.forEach(t),rdr=i(zl),ky=n(zl,"P",{});var Z$e=s(ky);tdr=r(Z$e,"This class cannot be instantiated directly using "),_ue=n(Z$e,"CODE",{});var iut=s(_ue);adr=r(iut,"__init__()"),iut.forEach(t),ndr=r(Z$e," (throws an error)."),Z$e.forEach(t),sdr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(Sy.$$.fragment,Ql),ldr=i(Ql),uue=n(Ql,"P",{});var dut=s(uue);idr=r(dut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dut.forEach(t),ddr=i(Ql),Cc=n(Ql,"P",{});var vJ=s(Cc);cdr=r(vJ,`Note:
Loading a model from its configuration file does `),bue=n(vJ,"STRONG",{});var cut=s(bue);fdr=r(cut,"not"),cut.forEach(t),mdr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(vJ,"A",{href:!0});var fut=s(tX);gdr=r(fut,"from_pretrained()"),fut.forEach(t),hdr=r(vJ," to load the model weights."),vJ.forEach(t),pdr=i(Ql),Fue=n(Ql,"P",{});var mut=s(Fue);_dr=r(mut,"Examples:"),mut.forEach(t),udr=i(Ql),m(Ry.$$.fragment,Ql),Ql.forEach(t),bdr=i(zl),bo=n(zl,"DIV",{class:!0});var ba=s(bo);m(By.$$.fragment,ba),Fdr=i(ba),vue=n(ba,"P",{});var gut=s(vue);vdr=r(gut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gut.forEach(t),Tdr=i(ba),Fn=n(ba,"P",{});var nC=s(Fn);Mdr=r(nC,"The model class to instantiate is selected based on the "),Tue=n(nC,"CODE",{});var hut=s(Tue);Edr=r(hut,"model_type"),hut.forEach(t),Cdr=r(nC,` property of the config object (either
passed as an argument or loaded from `),Mue=n(nC,"CODE",{});var put=s(Mue);wdr=r(put,"pretrained_model_name_or_path"),put.forEach(t),Adr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eue=n(nC,"CODE",{});var _ut=s(Eue);ydr=r(_ut,"pretrained_model_name_or_path"),_ut.forEach(t),Ldr=r(nC,":"),nC.forEach(t),xdr=i(ba),Py=n(ba,"UL",{});var eIe=s(Py);av=n(eIe,"LI",{});var L9e=s(av);Cue=n(L9e,"STRONG",{});var uut=s(Cue);kdr=r(uut,"convnext"),uut.forEach(t),Sdr=r(L9e," \u2014 "),aX=n(L9e,"A",{href:!0});var but=s(aX);Rdr=r(but,"TFConvNextForImageClassification"),but.forEach(t),Bdr=r(L9e," (ConvNext model)"),L9e.forEach(t),Pdr=i(eIe),nv=n(eIe,"LI",{});var x9e=s(nv);wue=n(x9e,"STRONG",{});var Fut=s(wue);$dr=r(Fut,"vit"),Fut.forEach(t),Idr=r(x9e," \u2014 "),nX=n(x9e,"A",{href:!0});var vut=s(nX);qdr=r(vut,"TFViTForImageClassification"),vut.forEach(t),Ndr=r(x9e," (ViT model)"),x9e.forEach(t),eIe.forEach(t),jdr=i(ba),Aue=n(ba,"P",{});var Tut=s(Aue);Ddr=r(Tut,"Examples:"),Tut.forEach(t),Gdr=i(ba),m($y.$$.fragment,ba),ba.forEach(t),zl.forEach(t),XBe=i(c),wc=n(c,"H2",{class:!0});var oIe=s(wc);sv=n(oIe,"A",{id:!0,class:!0,href:!0});var Mut=s(sv);yue=n(Mut,"SPAN",{});var Eut=s(yue);m(Iy.$$.fragment,Eut),Eut.forEach(t),Mut.forEach(t),Odr=i(oIe),Lue=n(oIe,"SPAN",{});var Cut=s(Lue);Vdr=r(Cut,"TFAutoModelForMaskedLM"),Cut.forEach(t),oIe.forEach(t),zBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(qy.$$.fragment,Wl),Xdr=i(Wl),Ac=n(Wl,"P",{});var TJ=s(Ac);zdr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sX=n(TJ,"A",{href:!0});var wut=s(sX);Qdr=r(wut,"from_pretrained()"),wut.forEach(t),Wdr=r(TJ," class method or the "),lX=n(TJ,"A",{href:!0});var Aut=s(lX);Hdr=r(Aut,"from_config()"),Aut.forEach(t),Udr=r(TJ,` class
method.`),TJ.forEach(t),Jdr=i(Wl),Ny=n(Wl,"P",{});var rIe=s(Ny);Ydr=r(rIe,"This class cannot be instantiated directly using "),xue=n(rIe,"CODE",{});var yut=s(xue);Kdr=r(yut,"__init__()"),yut.forEach(t),Zdr=r(rIe," (throws an error)."),rIe.forEach(t),ecr=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(jy.$$.fragment,Hl),ocr=i(Hl),kue=n(Hl,"P",{});var Lut=s(kue);rcr=r(Lut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lut.forEach(t),tcr=i(Hl),yc=n(Hl,"P",{});var MJ=s(yc);acr=r(MJ,`Note:
Loading a model from its configuration file does `),Sue=n(MJ,"STRONG",{});var xut=s(Sue);ncr=r(xut,"not"),xut.forEach(t),scr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(MJ,"A",{href:!0});var kut=s(iX);lcr=r(kut,"from_pretrained()"),kut.forEach(t),icr=r(MJ," to load the model weights."),MJ.forEach(t),dcr=i(Hl),Rue=n(Hl,"P",{});var Sut=s(Rue);ccr=r(Sut,"Examples:"),Sut.forEach(t),fcr=i(Hl),m(Dy.$$.fragment,Hl),Hl.forEach(t),mcr=i(Wl),Fo=n(Wl,"DIV",{class:!0});var Fa=s(Fo);m(Gy.$$.fragment,Fa),gcr=i(Fa),Bue=n(Fa,"P",{});var Rut=s(Bue);hcr=r(Rut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rut.forEach(t),pcr=i(Fa),vn=n(Fa,"P",{});var sC=s(vn);_cr=r(sC,"The model class to instantiate is selected based on the "),Pue=n(sC,"CODE",{});var But=s(Pue);ucr=r(But,"model_type"),But.forEach(t),bcr=r(sC,` property of the config object (either
passed as an argument or loaded from `),$ue=n(sC,"CODE",{});var Put=s($ue);Fcr=r(Put,"pretrained_model_name_or_path"),Put.forEach(t),vcr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(sC,"CODE",{});var $ut=s(Iue);Tcr=r($ut,"pretrained_model_name_or_path"),$ut.forEach(t),Mcr=r(sC,":"),sC.forEach(t),Ecr=i(Fa),Y=n(Fa,"UL",{});var re=s(Y);lv=n(re,"LI",{});var k9e=s(lv);que=n(k9e,"STRONG",{});var Iut=s(que);Ccr=r(Iut,"albert"),Iut.forEach(t),wcr=r(k9e," \u2014 "),dX=n(k9e,"A",{href:!0});var qut=s(dX);Acr=r(qut,"TFAlbertForMaskedLM"),qut.forEach(t),ycr=r(k9e," (ALBERT model)"),k9e.forEach(t),Lcr=i(re),iv=n(re,"LI",{});var S9e=s(iv);Nue=n(S9e,"STRONG",{});var Nut=s(Nue);xcr=r(Nut,"bert"),Nut.forEach(t),kcr=r(S9e," \u2014 "),cX=n(S9e,"A",{href:!0});var jut=s(cX);Scr=r(jut,"TFBertForMaskedLM"),jut.forEach(t),Rcr=r(S9e," (BERT model)"),S9e.forEach(t),Bcr=i(re),dv=n(re,"LI",{});var R9e=s(dv);jue=n(R9e,"STRONG",{});var Dut=s(jue);Pcr=r(Dut,"camembert"),Dut.forEach(t),$cr=r(R9e," \u2014 "),fX=n(R9e,"A",{href:!0});var Gut=s(fX);Icr=r(Gut,"TFCamembertForMaskedLM"),Gut.forEach(t),qcr=r(R9e," (CamemBERT model)"),R9e.forEach(t),Ncr=i(re),cv=n(re,"LI",{});var B9e=s(cv);Due=n(B9e,"STRONG",{});var Out=s(Due);jcr=r(Out,"convbert"),Out.forEach(t),Dcr=r(B9e," \u2014 "),mX=n(B9e,"A",{href:!0});var Vut=s(mX);Gcr=r(Vut,"TFConvBertForMaskedLM"),Vut.forEach(t),Ocr=r(B9e," (ConvBERT model)"),B9e.forEach(t),Vcr=i(re),fv=n(re,"LI",{});var P9e=s(fv);Gue=n(P9e,"STRONG",{});var Xut=s(Gue);Xcr=r(Xut,"deberta"),Xut.forEach(t),zcr=r(P9e," \u2014 "),gX=n(P9e,"A",{href:!0});var zut=s(gX);Qcr=r(zut,"TFDebertaForMaskedLM"),zut.forEach(t),Wcr=r(P9e," (DeBERTa model)"),P9e.forEach(t),Hcr=i(re),mv=n(re,"LI",{});var $9e=s(mv);Oue=n($9e,"STRONG",{});var Qut=s(Oue);Ucr=r(Qut,"deberta-v2"),Qut.forEach(t),Jcr=r($9e," \u2014 "),hX=n($9e,"A",{href:!0});var Wut=s(hX);Ycr=r(Wut,"TFDebertaV2ForMaskedLM"),Wut.forEach(t),Kcr=r($9e," (DeBERTa-v2 model)"),$9e.forEach(t),Zcr=i(re),gv=n(re,"LI",{});var I9e=s(gv);Vue=n(I9e,"STRONG",{});var Hut=s(Vue);efr=r(Hut,"distilbert"),Hut.forEach(t),ofr=r(I9e," \u2014 "),pX=n(I9e,"A",{href:!0});var Uut=s(pX);rfr=r(Uut,"TFDistilBertForMaskedLM"),Uut.forEach(t),tfr=r(I9e," (DistilBERT model)"),I9e.forEach(t),afr=i(re),hv=n(re,"LI",{});var q9e=s(hv);Xue=n(q9e,"STRONG",{});var Jut=s(Xue);nfr=r(Jut,"electra"),Jut.forEach(t),sfr=r(q9e," \u2014 "),_X=n(q9e,"A",{href:!0});var Yut=s(_X);lfr=r(Yut,"TFElectraForMaskedLM"),Yut.forEach(t),ifr=r(q9e," (ELECTRA model)"),q9e.forEach(t),dfr=i(re),pv=n(re,"LI",{});var N9e=s(pv);zue=n(N9e,"STRONG",{});var Kut=s(zue);cfr=r(Kut,"flaubert"),Kut.forEach(t),ffr=r(N9e," \u2014 "),uX=n(N9e,"A",{href:!0});var Zut=s(uX);mfr=r(Zut,"TFFlaubertWithLMHeadModel"),Zut.forEach(t),gfr=r(N9e," (FlauBERT model)"),N9e.forEach(t),hfr=i(re),_v=n(re,"LI",{});var j9e=s(_v);Que=n(j9e,"STRONG",{});var e6t=s(Que);pfr=r(e6t,"funnel"),e6t.forEach(t),_fr=r(j9e," \u2014 "),bX=n(j9e,"A",{href:!0});var o6t=s(bX);ufr=r(o6t,"TFFunnelForMaskedLM"),o6t.forEach(t),bfr=r(j9e," (Funnel Transformer model)"),j9e.forEach(t),Ffr=i(re),uv=n(re,"LI",{});var D9e=s(uv);Wue=n(D9e,"STRONG",{});var r6t=s(Wue);vfr=r(r6t,"layoutlm"),r6t.forEach(t),Tfr=r(D9e," \u2014 "),FX=n(D9e,"A",{href:!0});var t6t=s(FX);Mfr=r(t6t,"TFLayoutLMForMaskedLM"),t6t.forEach(t),Efr=r(D9e," (LayoutLM model)"),D9e.forEach(t),Cfr=i(re),bv=n(re,"LI",{});var G9e=s(bv);Hue=n(G9e,"STRONG",{});var a6t=s(Hue);wfr=r(a6t,"longformer"),a6t.forEach(t),Afr=r(G9e," \u2014 "),vX=n(G9e,"A",{href:!0});var n6t=s(vX);yfr=r(n6t,"TFLongformerForMaskedLM"),n6t.forEach(t),Lfr=r(G9e," (Longformer model)"),G9e.forEach(t),xfr=i(re),Fv=n(re,"LI",{});var O9e=s(Fv);Uue=n(O9e,"STRONG",{});var s6t=s(Uue);kfr=r(s6t,"mobilebert"),s6t.forEach(t),Sfr=r(O9e," \u2014 "),TX=n(O9e,"A",{href:!0});var l6t=s(TX);Rfr=r(l6t,"TFMobileBertForMaskedLM"),l6t.forEach(t),Bfr=r(O9e," (MobileBERT model)"),O9e.forEach(t),Pfr=i(re),vv=n(re,"LI",{});var V9e=s(vv);Jue=n(V9e,"STRONG",{});var i6t=s(Jue);$fr=r(i6t,"mpnet"),i6t.forEach(t),Ifr=r(V9e," \u2014 "),MX=n(V9e,"A",{href:!0});var d6t=s(MX);qfr=r(d6t,"TFMPNetForMaskedLM"),d6t.forEach(t),Nfr=r(V9e," (MPNet model)"),V9e.forEach(t),jfr=i(re),Tv=n(re,"LI",{});var X9e=s(Tv);Yue=n(X9e,"STRONG",{});var c6t=s(Yue);Dfr=r(c6t,"rembert"),c6t.forEach(t),Gfr=r(X9e," \u2014 "),EX=n(X9e,"A",{href:!0});var f6t=s(EX);Ofr=r(f6t,"TFRemBertForMaskedLM"),f6t.forEach(t),Vfr=r(X9e," (RemBERT model)"),X9e.forEach(t),Xfr=i(re),Mv=n(re,"LI",{});var z9e=s(Mv);Kue=n(z9e,"STRONG",{});var m6t=s(Kue);zfr=r(m6t,"roberta"),m6t.forEach(t),Qfr=r(z9e," \u2014 "),CX=n(z9e,"A",{href:!0});var g6t=s(CX);Wfr=r(g6t,"TFRobertaForMaskedLM"),g6t.forEach(t),Hfr=r(z9e," (RoBERTa model)"),z9e.forEach(t),Ufr=i(re),Ev=n(re,"LI",{});var Q9e=s(Ev);Zue=n(Q9e,"STRONG",{});var h6t=s(Zue);Jfr=r(h6t,"roformer"),h6t.forEach(t),Yfr=r(Q9e," \u2014 "),wX=n(Q9e,"A",{href:!0});var p6t=s(wX);Kfr=r(p6t,"TFRoFormerForMaskedLM"),p6t.forEach(t),Zfr=r(Q9e," (RoFormer model)"),Q9e.forEach(t),emr=i(re),Cv=n(re,"LI",{});var W9e=s(Cv);e6e=n(W9e,"STRONG",{});var _6t=s(e6e);omr=r(_6t,"tapas"),_6t.forEach(t),rmr=r(W9e," \u2014 "),AX=n(W9e,"A",{href:!0});var u6t=s(AX);tmr=r(u6t,"TFTapasForMaskedLM"),u6t.forEach(t),amr=r(W9e," (TAPAS model)"),W9e.forEach(t),nmr=i(re),wv=n(re,"LI",{});var H9e=s(wv);o6e=n(H9e,"STRONG",{});var b6t=s(o6e);smr=r(b6t,"xlm"),b6t.forEach(t),lmr=r(H9e," \u2014 "),yX=n(H9e,"A",{href:!0});var F6t=s(yX);imr=r(F6t,"TFXLMWithLMHeadModel"),F6t.forEach(t),dmr=r(H9e," (XLM model)"),H9e.forEach(t),cmr=i(re),Av=n(re,"LI",{});var U9e=s(Av);r6e=n(U9e,"STRONG",{});var v6t=s(r6e);fmr=r(v6t,"xlm-roberta"),v6t.forEach(t),mmr=r(U9e," \u2014 "),LX=n(U9e,"A",{href:!0});var T6t=s(LX);gmr=r(T6t,"TFXLMRobertaForMaskedLM"),T6t.forEach(t),hmr=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),re.forEach(t),pmr=i(Fa),t6e=n(Fa,"P",{});var M6t=s(t6e);_mr=r(M6t,"Examples:"),M6t.forEach(t),umr=i(Fa),m(Oy.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),QBe=i(c),Lc=n(c,"H2",{class:!0});var tIe=s(Lc);yv=n(tIe,"A",{id:!0,class:!0,href:!0});var E6t=s(yv);a6e=n(E6t,"SPAN",{});var C6t=s(a6e);m(Vy.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),bmr=i(tIe),n6e=n(tIe,"SPAN",{});var w6t=s(n6e);Fmr=r(w6t,"TFAutoModelForSeq2SeqLM"),w6t.forEach(t),tIe.forEach(t),WBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(Xy.$$.fragment,Ul),vmr=i(Ul),xc=n(Ul,"P",{});var EJ=s(xc);Tmr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xX=n(EJ,"A",{href:!0});var A6t=s(xX);Mmr=r(A6t,"from_pretrained()"),A6t.forEach(t),Emr=r(EJ," class method or the "),kX=n(EJ,"A",{href:!0});var y6t=s(kX);Cmr=r(y6t,"from_config()"),y6t.forEach(t),wmr=r(EJ,` class
method.`),EJ.forEach(t),Amr=i(Ul),zy=n(Ul,"P",{});var aIe=s(zy);ymr=r(aIe,"This class cannot be instantiated directly using "),s6e=n(aIe,"CODE",{});var L6t=s(s6e);Lmr=r(L6t,"__init__()"),L6t.forEach(t),xmr=r(aIe," (throws an error)."),aIe.forEach(t),kmr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(Qy.$$.fragment,Jl),Smr=i(Jl),l6e=n(Jl,"P",{});var x6t=s(l6e);Rmr=r(x6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x6t.forEach(t),Bmr=i(Jl),kc=n(Jl,"P",{});var CJ=s(kc);Pmr=r(CJ,`Note:
Loading a model from its configuration file does `),i6e=n(CJ,"STRONG",{});var k6t=s(i6e);$mr=r(k6t,"not"),k6t.forEach(t),Imr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(CJ,"A",{href:!0});var S6t=s(SX);qmr=r(S6t,"from_pretrained()"),S6t.forEach(t),Nmr=r(CJ," to load the model weights."),CJ.forEach(t),jmr=i(Jl),d6e=n(Jl,"P",{});var R6t=s(d6e);Dmr=r(R6t,"Examples:"),R6t.forEach(t),Gmr=i(Jl),m(Wy.$$.fragment,Jl),Jl.forEach(t),Omr=i(Ul),vo=n(Ul,"DIV",{class:!0});var va=s(vo);m(Hy.$$.fragment,va),Vmr=i(va),c6e=n(va,"P",{});var B6t=s(c6e);Xmr=r(B6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),B6t.forEach(t),zmr=i(va),Tn=n(va,"P",{});var lC=s(Tn);Qmr=r(lC,"The model class to instantiate is selected based on the "),f6e=n(lC,"CODE",{});var P6t=s(f6e);Wmr=r(P6t,"model_type"),P6t.forEach(t),Hmr=r(lC,` property of the config object (either
passed as an argument or loaded from `),m6e=n(lC,"CODE",{});var $6t=s(m6e);Umr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),Jmr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(lC,"CODE",{});var I6t=s(g6e);Ymr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),Kmr=r(lC,":"),lC.forEach(t),Zmr=i(va),be=n(va,"UL",{});var Ae=s(be);Lv=n(Ae,"LI",{});var J9e=s(Lv);h6e=n(J9e,"STRONG",{});var q6t=s(h6e);egr=r(q6t,"bart"),q6t.forEach(t),ogr=r(J9e," \u2014 "),RX=n(J9e,"A",{href:!0});var N6t=s(RX);rgr=r(N6t,"TFBartForConditionalGeneration"),N6t.forEach(t),tgr=r(J9e," (BART model)"),J9e.forEach(t),agr=i(Ae),xv=n(Ae,"LI",{});var Y9e=s(xv);p6e=n(Y9e,"STRONG",{});var j6t=s(p6e);ngr=r(j6t,"blenderbot"),j6t.forEach(t),sgr=r(Y9e," \u2014 "),BX=n(Y9e,"A",{href:!0});var D6t=s(BX);lgr=r(D6t,"TFBlenderbotForConditionalGeneration"),D6t.forEach(t),igr=r(Y9e," (Blenderbot model)"),Y9e.forEach(t),dgr=i(Ae),kv=n(Ae,"LI",{});var K9e=s(kv);_6e=n(K9e,"STRONG",{});var G6t=s(_6e);cgr=r(G6t,"blenderbot-small"),G6t.forEach(t),fgr=r(K9e," \u2014 "),PX=n(K9e,"A",{href:!0});var O6t=s(PX);mgr=r(O6t,"TFBlenderbotSmallForConditionalGeneration"),O6t.forEach(t),ggr=r(K9e," (BlenderbotSmall model)"),K9e.forEach(t),hgr=i(Ae),Sv=n(Ae,"LI",{});var Z9e=s(Sv);u6e=n(Z9e,"STRONG",{});var V6t=s(u6e);pgr=r(V6t,"encoder-decoder"),V6t.forEach(t),_gr=r(Z9e," \u2014 "),$X=n(Z9e,"A",{href:!0});var X6t=s($X);ugr=r(X6t,"TFEncoderDecoderModel"),X6t.forEach(t),bgr=r(Z9e," (Encoder decoder model)"),Z9e.forEach(t),Fgr=i(Ae),Rv=n(Ae,"LI",{});var exe=s(Rv);b6e=n(exe,"STRONG",{});var z6t=s(b6e);vgr=r(z6t,"led"),z6t.forEach(t),Tgr=r(exe," \u2014 "),IX=n(exe,"A",{href:!0});var Q6t=s(IX);Mgr=r(Q6t,"TFLEDForConditionalGeneration"),Q6t.forEach(t),Egr=r(exe," (LED model)"),exe.forEach(t),Cgr=i(Ae),Bv=n(Ae,"LI",{});var oxe=s(Bv);F6e=n(oxe,"STRONG",{});var W6t=s(F6e);wgr=r(W6t,"marian"),W6t.forEach(t),Agr=r(oxe," \u2014 "),qX=n(oxe,"A",{href:!0});var H6t=s(qX);ygr=r(H6t,"TFMarianMTModel"),H6t.forEach(t),Lgr=r(oxe," (Marian model)"),oxe.forEach(t),xgr=i(Ae),Pv=n(Ae,"LI",{});var rxe=s(Pv);v6e=n(rxe,"STRONG",{});var U6t=s(v6e);kgr=r(U6t,"mbart"),U6t.forEach(t),Sgr=r(rxe," \u2014 "),NX=n(rxe,"A",{href:!0});var J6t=s(NX);Rgr=r(J6t,"TFMBartForConditionalGeneration"),J6t.forEach(t),Bgr=r(rxe," (mBART model)"),rxe.forEach(t),Pgr=i(Ae),$v=n(Ae,"LI",{});var txe=s($v);T6e=n(txe,"STRONG",{});var Y6t=s(T6e);$gr=r(Y6t,"mt5"),Y6t.forEach(t),Igr=r(txe," \u2014 "),jX=n(txe,"A",{href:!0});var K6t=s(jX);qgr=r(K6t,"TFMT5ForConditionalGeneration"),K6t.forEach(t),Ngr=r(txe," (mT5 model)"),txe.forEach(t),jgr=i(Ae),Iv=n(Ae,"LI",{});var axe=s(Iv);M6e=n(axe,"STRONG",{});var Z6t=s(M6e);Dgr=r(Z6t,"pegasus"),Z6t.forEach(t),Ggr=r(axe," \u2014 "),DX=n(axe,"A",{href:!0});var e1t=s(DX);Ogr=r(e1t,"TFPegasusForConditionalGeneration"),e1t.forEach(t),Vgr=r(axe," (Pegasus model)"),axe.forEach(t),Xgr=i(Ae),qv=n(Ae,"LI",{});var nxe=s(qv);E6e=n(nxe,"STRONG",{});var o1t=s(E6e);zgr=r(o1t,"t5"),o1t.forEach(t),Qgr=r(nxe," \u2014 "),GX=n(nxe,"A",{href:!0});var r1t=s(GX);Wgr=r(r1t,"TFT5ForConditionalGeneration"),r1t.forEach(t),Hgr=r(nxe," (T5 model)"),nxe.forEach(t),Ae.forEach(t),Ugr=i(va),C6e=n(va,"P",{});var t1t=s(C6e);Jgr=r(t1t,"Examples:"),t1t.forEach(t),Ygr=i(va),m(Uy.$$.fragment,va),va.forEach(t),Ul.forEach(t),HBe=i(c),Sc=n(c,"H2",{class:!0});var nIe=s(Sc);Nv=n(nIe,"A",{id:!0,class:!0,href:!0});var a1t=s(Nv);w6e=n(a1t,"SPAN",{});var n1t=s(w6e);m(Jy.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),Kgr=i(nIe),A6e=n(nIe,"SPAN",{});var s1t=s(A6e);Zgr=r(s1t,"TFAutoModelForSequenceClassification"),s1t.forEach(t),nIe.forEach(t),UBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(Yy.$$.fragment,Yl),ehr=i(Yl),Rc=n(Yl,"P",{});var wJ=s(Rc);ohr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OX=n(wJ,"A",{href:!0});var l1t=s(OX);rhr=r(l1t,"from_pretrained()"),l1t.forEach(t),thr=r(wJ," class method or the "),VX=n(wJ,"A",{href:!0});var i1t=s(VX);ahr=r(i1t,"from_config()"),i1t.forEach(t),nhr=r(wJ,` class
method.`),wJ.forEach(t),shr=i(Yl),Ky=n(Yl,"P",{});var sIe=s(Ky);lhr=r(sIe,"This class cannot be instantiated directly using "),y6e=n(sIe,"CODE",{});var d1t=s(y6e);ihr=r(d1t,"__init__()"),d1t.forEach(t),dhr=r(sIe," (throws an error)."),sIe.forEach(t),chr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(Zy.$$.fragment,Kl),fhr=i(Kl),L6e=n(Kl,"P",{});var c1t=s(L6e);mhr=r(c1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c1t.forEach(t),ghr=i(Kl),Bc=n(Kl,"P",{});var AJ=s(Bc);hhr=r(AJ,`Note:
Loading a model from its configuration file does `),x6e=n(AJ,"STRONG",{});var f1t=s(x6e);phr=r(f1t,"not"),f1t.forEach(t),_hr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(AJ,"A",{href:!0});var m1t=s(XX);uhr=r(m1t,"from_pretrained()"),m1t.forEach(t),bhr=r(AJ," to load the model weights."),AJ.forEach(t),Fhr=i(Kl),k6e=n(Kl,"P",{});var g1t=s(k6e);vhr=r(g1t,"Examples:"),g1t.forEach(t),Thr=i(Kl),m(eL.$$.fragment,Kl),Kl.forEach(t),Mhr=i(Yl),To=n(Yl,"DIV",{class:!0});var Ta=s(To);m(oL.$$.fragment,Ta),Ehr=i(Ta),S6e=n(Ta,"P",{});var h1t=s(S6e);Chr=r(h1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h1t.forEach(t),whr=i(Ta),Mn=n(Ta,"P",{});var iC=s(Mn);Ahr=r(iC,"The model class to instantiate is selected based on the "),R6e=n(iC,"CODE",{});var p1t=s(R6e);yhr=r(p1t,"model_type"),p1t.forEach(t),Lhr=r(iC,` property of the config object (either
passed as an argument or loaded from `),B6e=n(iC,"CODE",{});var _1t=s(B6e);xhr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),khr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P6e=n(iC,"CODE",{});var u1t=s(P6e);Shr=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),Rhr=r(iC,":"),iC.forEach(t),Bhr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);jv=n(Q,"LI",{});var sxe=s(jv);$6e=n(sxe,"STRONG",{});var b1t=s($6e);Phr=r(b1t,"albert"),b1t.forEach(t),$hr=r(sxe," \u2014 "),zX=n(sxe,"A",{href:!0});var F1t=s(zX);Ihr=r(F1t,"TFAlbertForSequenceClassification"),F1t.forEach(t),qhr=r(sxe," (ALBERT model)"),sxe.forEach(t),Nhr=i(Q),Dv=n(Q,"LI",{});var lxe=s(Dv);I6e=n(lxe,"STRONG",{});var v1t=s(I6e);jhr=r(v1t,"bert"),v1t.forEach(t),Dhr=r(lxe," \u2014 "),QX=n(lxe,"A",{href:!0});var T1t=s(QX);Ghr=r(T1t,"TFBertForSequenceClassification"),T1t.forEach(t),Ohr=r(lxe," (BERT model)"),lxe.forEach(t),Vhr=i(Q),Gv=n(Q,"LI",{});var ixe=s(Gv);q6e=n(ixe,"STRONG",{});var M1t=s(q6e);Xhr=r(M1t,"camembert"),M1t.forEach(t),zhr=r(ixe," \u2014 "),WX=n(ixe,"A",{href:!0});var E1t=s(WX);Qhr=r(E1t,"TFCamembertForSequenceClassification"),E1t.forEach(t),Whr=r(ixe," (CamemBERT model)"),ixe.forEach(t),Hhr=i(Q),Ov=n(Q,"LI",{});var dxe=s(Ov);N6e=n(dxe,"STRONG",{});var C1t=s(N6e);Uhr=r(C1t,"convbert"),C1t.forEach(t),Jhr=r(dxe," \u2014 "),HX=n(dxe,"A",{href:!0});var w1t=s(HX);Yhr=r(w1t,"TFConvBertForSequenceClassification"),w1t.forEach(t),Khr=r(dxe," (ConvBERT model)"),dxe.forEach(t),Zhr=i(Q),Vv=n(Q,"LI",{});var cxe=s(Vv);j6e=n(cxe,"STRONG",{});var A1t=s(j6e);epr=r(A1t,"ctrl"),A1t.forEach(t),opr=r(cxe," \u2014 "),UX=n(cxe,"A",{href:!0});var y1t=s(UX);rpr=r(y1t,"TFCTRLForSequenceClassification"),y1t.forEach(t),tpr=r(cxe," (CTRL model)"),cxe.forEach(t),apr=i(Q),Xv=n(Q,"LI",{});var fxe=s(Xv);D6e=n(fxe,"STRONG",{});var L1t=s(D6e);npr=r(L1t,"deberta"),L1t.forEach(t),spr=r(fxe," \u2014 "),JX=n(fxe,"A",{href:!0});var x1t=s(JX);lpr=r(x1t,"TFDebertaForSequenceClassification"),x1t.forEach(t),ipr=r(fxe," (DeBERTa model)"),fxe.forEach(t),dpr=i(Q),zv=n(Q,"LI",{});var mxe=s(zv);G6e=n(mxe,"STRONG",{});var k1t=s(G6e);cpr=r(k1t,"deberta-v2"),k1t.forEach(t),fpr=r(mxe," \u2014 "),YX=n(mxe,"A",{href:!0});var S1t=s(YX);mpr=r(S1t,"TFDebertaV2ForSequenceClassification"),S1t.forEach(t),gpr=r(mxe," (DeBERTa-v2 model)"),mxe.forEach(t),hpr=i(Q),Qv=n(Q,"LI",{});var gxe=s(Qv);O6e=n(gxe,"STRONG",{});var R1t=s(O6e);ppr=r(R1t,"distilbert"),R1t.forEach(t),_pr=r(gxe," \u2014 "),KX=n(gxe,"A",{href:!0});var B1t=s(KX);upr=r(B1t,"TFDistilBertForSequenceClassification"),B1t.forEach(t),bpr=r(gxe," (DistilBERT model)"),gxe.forEach(t),Fpr=i(Q),Wv=n(Q,"LI",{});var hxe=s(Wv);V6e=n(hxe,"STRONG",{});var P1t=s(V6e);vpr=r(P1t,"electra"),P1t.forEach(t),Tpr=r(hxe," \u2014 "),ZX=n(hxe,"A",{href:!0});var $1t=s(ZX);Mpr=r($1t,"TFElectraForSequenceClassification"),$1t.forEach(t),Epr=r(hxe," (ELECTRA model)"),hxe.forEach(t),Cpr=i(Q),Hv=n(Q,"LI",{});var pxe=s(Hv);X6e=n(pxe,"STRONG",{});var I1t=s(X6e);wpr=r(I1t,"flaubert"),I1t.forEach(t),Apr=r(pxe," \u2014 "),ez=n(pxe,"A",{href:!0});var q1t=s(ez);ypr=r(q1t,"TFFlaubertForSequenceClassification"),q1t.forEach(t),Lpr=r(pxe," (FlauBERT model)"),pxe.forEach(t),xpr=i(Q),Uv=n(Q,"LI",{});var _xe=s(Uv);z6e=n(_xe,"STRONG",{});var N1t=s(z6e);kpr=r(N1t,"funnel"),N1t.forEach(t),Spr=r(_xe," \u2014 "),oz=n(_xe,"A",{href:!0});var j1t=s(oz);Rpr=r(j1t,"TFFunnelForSequenceClassification"),j1t.forEach(t),Bpr=r(_xe," (Funnel Transformer model)"),_xe.forEach(t),Ppr=i(Q),Jv=n(Q,"LI",{});var uxe=s(Jv);Q6e=n(uxe,"STRONG",{});var D1t=s(Q6e);$pr=r(D1t,"gpt2"),D1t.forEach(t),Ipr=r(uxe," \u2014 "),rz=n(uxe,"A",{href:!0});var G1t=s(rz);qpr=r(G1t,"TFGPT2ForSequenceClassification"),G1t.forEach(t),Npr=r(uxe," (OpenAI GPT-2 model)"),uxe.forEach(t),jpr=i(Q),Yv=n(Q,"LI",{});var bxe=s(Yv);W6e=n(bxe,"STRONG",{});var O1t=s(W6e);Dpr=r(O1t,"gptj"),O1t.forEach(t),Gpr=r(bxe," \u2014 "),tz=n(bxe,"A",{href:!0});var V1t=s(tz);Opr=r(V1t,"TFGPTJForSequenceClassification"),V1t.forEach(t),Vpr=r(bxe," (GPT-J model)"),bxe.forEach(t),Xpr=i(Q),Kv=n(Q,"LI",{});var Fxe=s(Kv);H6e=n(Fxe,"STRONG",{});var X1t=s(H6e);zpr=r(X1t,"layoutlm"),X1t.forEach(t),Qpr=r(Fxe," \u2014 "),az=n(Fxe,"A",{href:!0});var z1t=s(az);Wpr=r(z1t,"TFLayoutLMForSequenceClassification"),z1t.forEach(t),Hpr=r(Fxe," (LayoutLM model)"),Fxe.forEach(t),Upr=i(Q),Zv=n(Q,"LI",{});var vxe=s(Zv);U6e=n(vxe,"STRONG",{});var Q1t=s(U6e);Jpr=r(Q1t,"longformer"),Q1t.forEach(t),Ypr=r(vxe," \u2014 "),nz=n(vxe,"A",{href:!0});var W1t=s(nz);Kpr=r(W1t,"TFLongformerForSequenceClassification"),W1t.forEach(t),Zpr=r(vxe," (Longformer model)"),vxe.forEach(t),e_r=i(Q),eT=n(Q,"LI",{});var Txe=s(eT);J6e=n(Txe,"STRONG",{});var H1t=s(J6e);o_r=r(H1t,"mobilebert"),H1t.forEach(t),r_r=r(Txe," \u2014 "),sz=n(Txe,"A",{href:!0});var U1t=s(sz);t_r=r(U1t,"TFMobileBertForSequenceClassification"),U1t.forEach(t),a_r=r(Txe," (MobileBERT model)"),Txe.forEach(t),n_r=i(Q),oT=n(Q,"LI",{});var Mxe=s(oT);Y6e=n(Mxe,"STRONG",{});var J1t=s(Y6e);s_r=r(J1t,"mpnet"),J1t.forEach(t),l_r=r(Mxe," \u2014 "),lz=n(Mxe,"A",{href:!0});var Y1t=s(lz);i_r=r(Y1t,"TFMPNetForSequenceClassification"),Y1t.forEach(t),d_r=r(Mxe," (MPNet model)"),Mxe.forEach(t),c_r=i(Q),rT=n(Q,"LI",{});var Exe=s(rT);K6e=n(Exe,"STRONG",{});var K1t=s(K6e);f_r=r(K1t,"openai-gpt"),K1t.forEach(t),m_r=r(Exe," \u2014 "),iz=n(Exe,"A",{href:!0});var Z1t=s(iz);g_r=r(Z1t,"TFOpenAIGPTForSequenceClassification"),Z1t.forEach(t),h_r=r(Exe," (OpenAI GPT model)"),Exe.forEach(t),p_r=i(Q),tT=n(Q,"LI",{});var Cxe=s(tT);Z6e=n(Cxe,"STRONG",{});var e4t=s(Z6e);__r=r(e4t,"rembert"),e4t.forEach(t),u_r=r(Cxe," \u2014 "),dz=n(Cxe,"A",{href:!0});var o4t=s(dz);b_r=r(o4t,"TFRemBertForSequenceClassification"),o4t.forEach(t),F_r=r(Cxe," (RemBERT model)"),Cxe.forEach(t),v_r=i(Q),aT=n(Q,"LI",{});var wxe=s(aT);e1e=n(wxe,"STRONG",{});var r4t=s(e1e);T_r=r(r4t,"roberta"),r4t.forEach(t),M_r=r(wxe," \u2014 "),cz=n(wxe,"A",{href:!0});var t4t=s(cz);E_r=r(t4t,"TFRobertaForSequenceClassification"),t4t.forEach(t),C_r=r(wxe," (RoBERTa model)"),wxe.forEach(t),w_r=i(Q),nT=n(Q,"LI",{});var Axe=s(nT);o1e=n(Axe,"STRONG",{});var a4t=s(o1e);A_r=r(a4t,"roformer"),a4t.forEach(t),y_r=r(Axe," \u2014 "),fz=n(Axe,"A",{href:!0});var n4t=s(fz);L_r=r(n4t,"TFRoFormerForSequenceClassification"),n4t.forEach(t),x_r=r(Axe," (RoFormer model)"),Axe.forEach(t),k_r=i(Q),sT=n(Q,"LI",{});var yxe=s(sT);r1e=n(yxe,"STRONG",{});var s4t=s(r1e);S_r=r(s4t,"tapas"),s4t.forEach(t),R_r=r(yxe," \u2014 "),mz=n(yxe,"A",{href:!0});var l4t=s(mz);B_r=r(l4t,"TFTapasForSequenceClassification"),l4t.forEach(t),P_r=r(yxe," (TAPAS model)"),yxe.forEach(t),$_r=i(Q),lT=n(Q,"LI",{});var Lxe=s(lT);t1e=n(Lxe,"STRONG",{});var i4t=s(t1e);I_r=r(i4t,"transfo-xl"),i4t.forEach(t),q_r=r(Lxe," \u2014 "),gz=n(Lxe,"A",{href:!0});var d4t=s(gz);N_r=r(d4t,"TFTransfoXLForSequenceClassification"),d4t.forEach(t),j_r=r(Lxe," (Transformer-XL model)"),Lxe.forEach(t),D_r=i(Q),iT=n(Q,"LI",{});var xxe=s(iT);a1e=n(xxe,"STRONG",{});var c4t=s(a1e);G_r=r(c4t,"xlm"),c4t.forEach(t),O_r=r(xxe," \u2014 "),hz=n(xxe,"A",{href:!0});var f4t=s(hz);V_r=r(f4t,"TFXLMForSequenceClassification"),f4t.forEach(t),X_r=r(xxe," (XLM model)"),xxe.forEach(t),z_r=i(Q),dT=n(Q,"LI",{});var kxe=s(dT);n1e=n(kxe,"STRONG",{});var m4t=s(n1e);Q_r=r(m4t,"xlm-roberta"),m4t.forEach(t),W_r=r(kxe," \u2014 "),pz=n(kxe,"A",{href:!0});var g4t=s(pz);H_r=r(g4t,"TFXLMRobertaForSequenceClassification"),g4t.forEach(t),U_r=r(kxe," (XLM-RoBERTa model)"),kxe.forEach(t),J_r=i(Q),cT=n(Q,"LI",{});var Sxe=s(cT);s1e=n(Sxe,"STRONG",{});var h4t=s(s1e);Y_r=r(h4t,"xlnet"),h4t.forEach(t),K_r=r(Sxe," \u2014 "),_z=n(Sxe,"A",{href:!0});var p4t=s(_z);Z_r=r(p4t,"TFXLNetForSequenceClassification"),p4t.forEach(t),eur=r(Sxe," (XLNet model)"),Sxe.forEach(t),Q.forEach(t),our=i(Ta),l1e=n(Ta,"P",{});var _4t=s(l1e);rur=r(_4t,"Examples:"),_4t.forEach(t),tur=i(Ta),m(rL.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),JBe=i(c),Pc=n(c,"H2",{class:!0});var lIe=s(Pc);fT=n(lIe,"A",{id:!0,class:!0,href:!0});var u4t=s(fT);i1e=n(u4t,"SPAN",{});var b4t=s(i1e);m(tL.$$.fragment,b4t),b4t.forEach(t),u4t.forEach(t),aur=i(lIe),d1e=n(lIe,"SPAN",{});var F4t=s(d1e);nur=r(F4t,"TFAutoModelForMultipleChoice"),F4t.forEach(t),lIe.forEach(t),YBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(aL.$$.fragment,Zl),sur=i(Zl),$c=n(Zl,"P",{});var yJ=s($c);lur=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),uz=n(yJ,"A",{href:!0});var v4t=s(uz);iur=r(v4t,"from_pretrained()"),v4t.forEach(t),dur=r(yJ," class method or the "),bz=n(yJ,"A",{href:!0});var T4t=s(bz);cur=r(T4t,"from_config()"),T4t.forEach(t),fur=r(yJ,` class
method.`),yJ.forEach(t),mur=i(Zl),nL=n(Zl,"P",{});var iIe=s(nL);gur=r(iIe,"This class cannot be instantiated directly using "),c1e=n(iIe,"CODE",{});var M4t=s(c1e);hur=r(M4t,"__init__()"),M4t.forEach(t),pur=r(iIe," (throws an error)."),iIe.forEach(t),_ur=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(sL.$$.fragment,ei),uur=i(ei),f1e=n(ei,"P",{});var E4t=s(f1e);bur=r(E4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),E4t.forEach(t),Fur=i(ei),Ic=n(ei,"P",{});var LJ=s(Ic);vur=r(LJ,`Note:
Loading a model from its configuration file does `),m1e=n(LJ,"STRONG",{});var C4t=s(m1e);Tur=r(C4t,"not"),C4t.forEach(t),Mur=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(LJ,"A",{href:!0});var w4t=s(Fz);Eur=r(w4t,"from_pretrained()"),w4t.forEach(t),Cur=r(LJ," to load the model weights."),LJ.forEach(t),wur=i(ei),g1e=n(ei,"P",{});var A4t=s(g1e);Aur=r(A4t,"Examples:"),A4t.forEach(t),yur=i(ei),m(lL.$$.fragment,ei),ei.forEach(t),Lur=i(Zl),Mo=n(Zl,"DIV",{class:!0});var Ma=s(Mo);m(iL.$$.fragment,Ma),xur=i(Ma),h1e=n(Ma,"P",{});var y4t=s(h1e);kur=r(y4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y4t.forEach(t),Sur=i(Ma),En=n(Ma,"P",{});var dC=s(En);Rur=r(dC,"The model class to instantiate is selected based on the "),p1e=n(dC,"CODE",{});var L4t=s(p1e);Bur=r(L4t,"model_type"),L4t.forEach(t),Pur=r(dC,` property of the config object (either
passed as an argument or loaded from `),_1e=n(dC,"CODE",{});var x4t=s(_1e);$ur=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),Iur=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(dC,"CODE",{});var k4t=s(u1e);qur=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),Nur=r(dC,":"),dC.forEach(t),jur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);mT=n(ie,"LI",{});var Rxe=s(mT);b1e=n(Rxe,"STRONG",{});var S4t=s(b1e);Dur=r(S4t,"albert"),S4t.forEach(t),Gur=r(Rxe," \u2014 "),vz=n(Rxe,"A",{href:!0});var R4t=s(vz);Our=r(R4t,"TFAlbertForMultipleChoice"),R4t.forEach(t),Vur=r(Rxe," (ALBERT model)"),Rxe.forEach(t),Xur=i(ie),gT=n(ie,"LI",{});var Bxe=s(gT);F1e=n(Bxe,"STRONG",{});var B4t=s(F1e);zur=r(B4t,"bert"),B4t.forEach(t),Qur=r(Bxe," \u2014 "),Tz=n(Bxe,"A",{href:!0});var P4t=s(Tz);Wur=r(P4t,"TFBertForMultipleChoice"),P4t.forEach(t),Hur=r(Bxe," (BERT model)"),Bxe.forEach(t),Uur=i(ie),hT=n(ie,"LI",{});var Pxe=s(hT);v1e=n(Pxe,"STRONG",{});var $4t=s(v1e);Jur=r($4t,"camembert"),$4t.forEach(t),Yur=r(Pxe," \u2014 "),Mz=n(Pxe,"A",{href:!0});var I4t=s(Mz);Kur=r(I4t,"TFCamembertForMultipleChoice"),I4t.forEach(t),Zur=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),e6r=i(ie),pT=n(ie,"LI",{});var $xe=s(pT);T1e=n($xe,"STRONG",{});var q4t=s(T1e);o6r=r(q4t,"convbert"),q4t.forEach(t),r6r=r($xe," \u2014 "),Ez=n($xe,"A",{href:!0});var N4t=s(Ez);t6r=r(N4t,"TFConvBertForMultipleChoice"),N4t.forEach(t),a6r=r($xe," (ConvBERT model)"),$xe.forEach(t),n6r=i(ie),_T=n(ie,"LI",{});var Ixe=s(_T);M1e=n(Ixe,"STRONG",{});var j4t=s(M1e);s6r=r(j4t,"distilbert"),j4t.forEach(t),l6r=r(Ixe," \u2014 "),Cz=n(Ixe,"A",{href:!0});var D4t=s(Cz);i6r=r(D4t,"TFDistilBertForMultipleChoice"),D4t.forEach(t),d6r=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),c6r=i(ie),uT=n(ie,"LI",{});var qxe=s(uT);E1e=n(qxe,"STRONG",{});var G4t=s(E1e);f6r=r(G4t,"electra"),G4t.forEach(t),m6r=r(qxe," \u2014 "),wz=n(qxe,"A",{href:!0});var O4t=s(wz);g6r=r(O4t,"TFElectraForMultipleChoice"),O4t.forEach(t),h6r=r(qxe," (ELECTRA model)"),qxe.forEach(t),p6r=i(ie),bT=n(ie,"LI",{});var Nxe=s(bT);C1e=n(Nxe,"STRONG",{});var V4t=s(C1e);_6r=r(V4t,"flaubert"),V4t.forEach(t),u6r=r(Nxe," \u2014 "),Az=n(Nxe,"A",{href:!0});var X4t=s(Az);b6r=r(X4t,"TFFlaubertForMultipleChoice"),X4t.forEach(t),F6r=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),v6r=i(ie),FT=n(ie,"LI",{});var jxe=s(FT);w1e=n(jxe,"STRONG",{});var z4t=s(w1e);T6r=r(z4t,"funnel"),z4t.forEach(t),M6r=r(jxe," \u2014 "),yz=n(jxe,"A",{href:!0});var Q4t=s(yz);E6r=r(Q4t,"TFFunnelForMultipleChoice"),Q4t.forEach(t),C6r=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),w6r=i(ie),vT=n(ie,"LI",{});var Dxe=s(vT);A1e=n(Dxe,"STRONG",{});var W4t=s(A1e);A6r=r(W4t,"longformer"),W4t.forEach(t),y6r=r(Dxe," \u2014 "),Lz=n(Dxe,"A",{href:!0});var H4t=s(Lz);L6r=r(H4t,"TFLongformerForMultipleChoice"),H4t.forEach(t),x6r=r(Dxe," (Longformer model)"),Dxe.forEach(t),k6r=i(ie),TT=n(ie,"LI",{});var Gxe=s(TT);y1e=n(Gxe,"STRONG",{});var U4t=s(y1e);S6r=r(U4t,"mobilebert"),U4t.forEach(t),R6r=r(Gxe," \u2014 "),xz=n(Gxe,"A",{href:!0});var J4t=s(xz);B6r=r(J4t,"TFMobileBertForMultipleChoice"),J4t.forEach(t),P6r=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),$6r=i(ie),MT=n(ie,"LI",{});var Oxe=s(MT);L1e=n(Oxe,"STRONG",{});var Y4t=s(L1e);I6r=r(Y4t,"mpnet"),Y4t.forEach(t),q6r=r(Oxe," \u2014 "),kz=n(Oxe,"A",{href:!0});var K4t=s(kz);N6r=r(K4t,"TFMPNetForMultipleChoice"),K4t.forEach(t),j6r=r(Oxe," (MPNet model)"),Oxe.forEach(t),D6r=i(ie),ET=n(ie,"LI",{});var Vxe=s(ET);x1e=n(Vxe,"STRONG",{});var Z4t=s(x1e);G6r=r(Z4t,"rembert"),Z4t.forEach(t),O6r=r(Vxe," \u2014 "),Sz=n(Vxe,"A",{href:!0});var ebt=s(Sz);V6r=r(ebt,"TFRemBertForMultipleChoice"),ebt.forEach(t),X6r=r(Vxe," (RemBERT model)"),Vxe.forEach(t),z6r=i(ie),CT=n(ie,"LI",{});var Xxe=s(CT);k1e=n(Xxe,"STRONG",{});var obt=s(k1e);Q6r=r(obt,"roberta"),obt.forEach(t),W6r=r(Xxe," \u2014 "),Rz=n(Xxe,"A",{href:!0});var rbt=s(Rz);H6r=r(rbt,"TFRobertaForMultipleChoice"),rbt.forEach(t),U6r=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),J6r=i(ie),wT=n(ie,"LI",{});var zxe=s(wT);S1e=n(zxe,"STRONG",{});var tbt=s(S1e);Y6r=r(tbt,"roformer"),tbt.forEach(t),K6r=r(zxe," \u2014 "),Bz=n(zxe,"A",{href:!0});var abt=s(Bz);Z6r=r(abt,"TFRoFormerForMultipleChoice"),abt.forEach(t),e1r=r(zxe," (RoFormer model)"),zxe.forEach(t),o1r=i(ie),AT=n(ie,"LI",{});var Qxe=s(AT);R1e=n(Qxe,"STRONG",{});var nbt=s(R1e);r1r=r(nbt,"xlm"),nbt.forEach(t),t1r=r(Qxe," \u2014 "),Pz=n(Qxe,"A",{href:!0});var sbt=s(Pz);a1r=r(sbt,"TFXLMForMultipleChoice"),sbt.forEach(t),n1r=r(Qxe," (XLM model)"),Qxe.forEach(t),s1r=i(ie),yT=n(ie,"LI",{});var Wxe=s(yT);B1e=n(Wxe,"STRONG",{});var lbt=s(B1e);l1r=r(lbt,"xlm-roberta"),lbt.forEach(t),i1r=r(Wxe," \u2014 "),$z=n(Wxe,"A",{href:!0});var ibt=s($z);d1r=r(ibt,"TFXLMRobertaForMultipleChoice"),ibt.forEach(t),c1r=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),f1r=i(ie),LT=n(ie,"LI",{});var Hxe=s(LT);P1e=n(Hxe,"STRONG",{});var dbt=s(P1e);m1r=r(dbt,"xlnet"),dbt.forEach(t),g1r=r(Hxe," \u2014 "),Iz=n(Hxe,"A",{href:!0});var cbt=s(Iz);h1r=r(cbt,"TFXLNetForMultipleChoice"),cbt.forEach(t),p1r=r(Hxe," (XLNet model)"),Hxe.forEach(t),ie.forEach(t),_1r=i(Ma),$1e=n(Ma,"P",{});var fbt=s($1e);u1r=r(fbt,"Examples:"),fbt.forEach(t),b1r=i(Ma),m(dL.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),KBe=i(c),qc=n(c,"H2",{class:!0});var dIe=s(qc);xT=n(dIe,"A",{id:!0,class:!0,href:!0});var mbt=s(xT);I1e=n(mbt,"SPAN",{});var gbt=s(I1e);m(cL.$$.fragment,gbt),gbt.forEach(t),mbt.forEach(t),F1r=i(dIe),q1e=n(dIe,"SPAN",{});var hbt=s(q1e);v1r=r(hbt,"TFAutoModelForTableQuestionAnswering"),hbt.forEach(t),dIe.forEach(t),ZBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(fL.$$.fragment,oi),T1r=i(oi),Nc=n(oi,"P",{});var xJ=s(Nc);M1r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),qz=n(xJ,"A",{href:!0});var pbt=s(qz);E1r=r(pbt,"from_pretrained()"),pbt.forEach(t),C1r=r(xJ," class method or the "),Nz=n(xJ,"A",{href:!0});var _bt=s(Nz);w1r=r(_bt,"from_config()"),_bt.forEach(t),A1r=r(xJ,` class
method.`),xJ.forEach(t),y1r=i(oi),mL=n(oi,"P",{});var cIe=s(mL);L1r=r(cIe,"This class cannot be instantiated directly using "),N1e=n(cIe,"CODE",{});var ubt=s(N1e);x1r=r(ubt,"__init__()"),ubt.forEach(t),k1r=r(cIe," (throws an error)."),cIe.forEach(t),S1r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(gL.$$.fragment,ri),R1r=i(ri),j1e=n(ri,"P",{});var bbt=s(j1e);B1r=r(bbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bbt.forEach(t),P1r=i(ri),jc=n(ri,"P",{});var kJ=s(jc);$1r=r(kJ,`Note:
Loading a model from its configuration file does `),D1e=n(kJ,"STRONG",{});var Fbt=s(D1e);I1r=r(Fbt,"not"),Fbt.forEach(t),q1r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jz=n(kJ,"A",{href:!0});var vbt=s(jz);N1r=r(vbt,"from_pretrained()"),vbt.forEach(t),j1r=r(kJ," to load the model weights."),kJ.forEach(t),D1r=i(ri),G1e=n(ri,"P",{});var Tbt=s(G1e);G1r=r(Tbt,"Examples:"),Tbt.forEach(t),O1r=i(ri),m(hL.$$.fragment,ri),ri.forEach(t),V1r=i(oi),Eo=n(oi,"DIV",{class:!0});var Ea=s(Eo);m(pL.$$.fragment,Ea),X1r=i(Ea),O1e=n(Ea,"P",{});var Mbt=s(O1e);z1r=r(Mbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mbt.forEach(t),Q1r=i(Ea),Cn=n(Ea,"P",{});var cC=s(Cn);W1r=r(cC,"The model class to instantiate is selected based on the "),V1e=n(cC,"CODE",{});var Ebt=s(V1e);H1r=r(Ebt,"model_type"),Ebt.forEach(t),U1r=r(cC,` property of the config object (either
passed as an argument or loaded from `),X1e=n(cC,"CODE",{});var Cbt=s(X1e);J1r=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Y1r=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z1e=n(cC,"CODE",{});var wbt=s(z1e);K1r=r(wbt,"pretrained_model_name_or_path"),wbt.forEach(t),Z1r=r(cC,":"),cC.forEach(t),e4r=i(Ea),Q1e=n(Ea,"UL",{});var Abt=s(Q1e);kT=n(Abt,"LI",{});var Uxe=s(kT);W1e=n(Uxe,"STRONG",{});var ybt=s(W1e);o4r=r(ybt,"tapas"),ybt.forEach(t),r4r=r(Uxe," \u2014 "),Dz=n(Uxe,"A",{href:!0});var Lbt=s(Dz);t4r=r(Lbt,"TFTapasForQuestionAnswering"),Lbt.forEach(t),a4r=r(Uxe," (TAPAS model)"),Uxe.forEach(t),Abt.forEach(t),n4r=i(Ea),H1e=n(Ea,"P",{});var xbt=s(H1e);s4r=r(xbt,"Examples:"),xbt.forEach(t),l4r=i(Ea),m(_L.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),ePe=i(c),Dc=n(c,"H2",{class:!0});var fIe=s(Dc);ST=n(fIe,"A",{id:!0,class:!0,href:!0});var kbt=s(ST);U1e=n(kbt,"SPAN",{});var Sbt=s(U1e);m(uL.$$.fragment,Sbt),Sbt.forEach(t),kbt.forEach(t),i4r=i(fIe),J1e=n(fIe,"SPAN",{});var Rbt=s(J1e);d4r=r(Rbt,"TFAutoModelForTokenClassification"),Rbt.forEach(t),fIe.forEach(t),oPe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(bL.$$.fragment,ti),c4r=i(ti),Gc=n(ti,"P",{});var SJ=s(Gc);f4r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Gz=n(SJ,"A",{href:!0});var Bbt=s(Gz);m4r=r(Bbt,"from_pretrained()"),Bbt.forEach(t),g4r=r(SJ," class method or the "),Oz=n(SJ,"A",{href:!0});var Pbt=s(Oz);h4r=r(Pbt,"from_config()"),Pbt.forEach(t),p4r=r(SJ,` class
method.`),SJ.forEach(t),_4r=i(ti),FL=n(ti,"P",{});var mIe=s(FL);u4r=r(mIe,"This class cannot be instantiated directly using "),Y1e=n(mIe,"CODE",{});var $bt=s(Y1e);b4r=r($bt,"__init__()"),$bt.forEach(t),F4r=r(mIe," (throws an error)."),mIe.forEach(t),v4r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(vL.$$.fragment,ai),T4r=i(ai),K1e=n(ai,"P",{});var Ibt=s(K1e);M4r=r(Ibt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ibt.forEach(t),E4r=i(ai),Oc=n(ai,"P",{});var RJ=s(Oc);C4r=r(RJ,`Note:
Loading a model from its configuration file does `),Z1e=n(RJ,"STRONG",{});var qbt=s(Z1e);w4r=r(qbt,"not"),qbt.forEach(t),A4r=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(RJ,"A",{href:!0});var Nbt=s(Vz);y4r=r(Nbt,"from_pretrained()"),Nbt.forEach(t),L4r=r(RJ," to load the model weights."),RJ.forEach(t),x4r=i(ai),e4e=n(ai,"P",{});var jbt=s(e4e);k4r=r(jbt,"Examples:"),jbt.forEach(t),S4r=i(ai),m(TL.$$.fragment,ai),ai.forEach(t),R4r=i(ti),Co=n(ti,"DIV",{class:!0});var Ca=s(Co);m(ML.$$.fragment,Ca),B4r=i(Ca),o4e=n(Ca,"P",{});var Dbt=s(o4e);P4r=r(Dbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dbt.forEach(t),$4r=i(Ca),wn=n(Ca,"P",{});var fC=s(wn);I4r=r(fC,"The model class to instantiate is selected based on the "),r4e=n(fC,"CODE",{});var Gbt=s(r4e);q4r=r(Gbt,"model_type"),Gbt.forEach(t),N4r=r(fC,` property of the config object (either
passed as an argument or loaded from `),t4e=n(fC,"CODE",{});var Obt=s(t4e);j4r=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),D4r=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a4e=n(fC,"CODE",{});var Vbt=s(a4e);G4r=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),O4r=r(fC,":"),fC.forEach(t),V4r=i(Ca),K=n(Ca,"UL",{});var te=s(K);RT=n(te,"LI",{});var Jxe=s(RT);n4e=n(Jxe,"STRONG",{});var Xbt=s(n4e);X4r=r(Xbt,"albert"),Xbt.forEach(t),z4r=r(Jxe," \u2014 "),Xz=n(Jxe,"A",{href:!0});var zbt=s(Xz);Q4r=r(zbt,"TFAlbertForTokenClassification"),zbt.forEach(t),W4r=r(Jxe," (ALBERT model)"),Jxe.forEach(t),H4r=i(te),BT=n(te,"LI",{});var Yxe=s(BT);s4e=n(Yxe,"STRONG",{});var Qbt=s(s4e);U4r=r(Qbt,"bert"),Qbt.forEach(t),J4r=r(Yxe," \u2014 "),zz=n(Yxe,"A",{href:!0});var Wbt=s(zz);Y4r=r(Wbt,"TFBertForTokenClassification"),Wbt.forEach(t),K4r=r(Yxe," (BERT model)"),Yxe.forEach(t),Z4r=i(te),PT=n(te,"LI",{});var Kxe=s(PT);l4e=n(Kxe,"STRONG",{});var Hbt=s(l4e);ebr=r(Hbt,"camembert"),Hbt.forEach(t),obr=r(Kxe," \u2014 "),Qz=n(Kxe,"A",{href:!0});var Ubt=s(Qz);rbr=r(Ubt,"TFCamembertForTokenClassification"),Ubt.forEach(t),tbr=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),abr=i(te),$T=n(te,"LI",{});var Zxe=s($T);i4e=n(Zxe,"STRONG",{});var Jbt=s(i4e);nbr=r(Jbt,"convbert"),Jbt.forEach(t),sbr=r(Zxe," \u2014 "),Wz=n(Zxe,"A",{href:!0});var Ybt=s(Wz);lbr=r(Ybt,"TFConvBertForTokenClassification"),Ybt.forEach(t),ibr=r(Zxe," (ConvBERT model)"),Zxe.forEach(t),dbr=i(te),IT=n(te,"LI",{});var eke=s(IT);d4e=n(eke,"STRONG",{});var Kbt=s(d4e);cbr=r(Kbt,"deberta"),Kbt.forEach(t),fbr=r(eke," \u2014 "),Hz=n(eke,"A",{href:!0});var Zbt=s(Hz);mbr=r(Zbt,"TFDebertaForTokenClassification"),Zbt.forEach(t),gbr=r(eke," (DeBERTa model)"),eke.forEach(t),hbr=i(te),qT=n(te,"LI",{});var oke=s(qT);c4e=n(oke,"STRONG",{});var e5t=s(c4e);pbr=r(e5t,"deberta-v2"),e5t.forEach(t),_br=r(oke," \u2014 "),Uz=n(oke,"A",{href:!0});var o5t=s(Uz);ubr=r(o5t,"TFDebertaV2ForTokenClassification"),o5t.forEach(t),bbr=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),Fbr=i(te),NT=n(te,"LI",{});var rke=s(NT);f4e=n(rke,"STRONG",{});var r5t=s(f4e);vbr=r(r5t,"distilbert"),r5t.forEach(t),Tbr=r(rke," \u2014 "),Jz=n(rke,"A",{href:!0});var t5t=s(Jz);Mbr=r(t5t,"TFDistilBertForTokenClassification"),t5t.forEach(t),Ebr=r(rke," (DistilBERT model)"),rke.forEach(t),Cbr=i(te),jT=n(te,"LI",{});var tke=s(jT);m4e=n(tke,"STRONG",{});var a5t=s(m4e);wbr=r(a5t,"electra"),a5t.forEach(t),Abr=r(tke," \u2014 "),Yz=n(tke,"A",{href:!0});var n5t=s(Yz);ybr=r(n5t,"TFElectraForTokenClassification"),n5t.forEach(t),Lbr=r(tke," (ELECTRA model)"),tke.forEach(t),xbr=i(te),DT=n(te,"LI",{});var ake=s(DT);g4e=n(ake,"STRONG",{});var s5t=s(g4e);kbr=r(s5t,"flaubert"),s5t.forEach(t),Sbr=r(ake," \u2014 "),Kz=n(ake,"A",{href:!0});var l5t=s(Kz);Rbr=r(l5t,"TFFlaubertForTokenClassification"),l5t.forEach(t),Bbr=r(ake," (FlauBERT model)"),ake.forEach(t),Pbr=i(te),GT=n(te,"LI",{});var nke=s(GT);h4e=n(nke,"STRONG",{});var i5t=s(h4e);$br=r(i5t,"funnel"),i5t.forEach(t),Ibr=r(nke," \u2014 "),Zz=n(nke,"A",{href:!0});var d5t=s(Zz);qbr=r(d5t,"TFFunnelForTokenClassification"),d5t.forEach(t),Nbr=r(nke," (Funnel Transformer model)"),nke.forEach(t),jbr=i(te),OT=n(te,"LI",{});var ske=s(OT);p4e=n(ske,"STRONG",{});var c5t=s(p4e);Dbr=r(c5t,"layoutlm"),c5t.forEach(t),Gbr=r(ske," \u2014 "),eQ=n(ske,"A",{href:!0});var f5t=s(eQ);Obr=r(f5t,"TFLayoutLMForTokenClassification"),f5t.forEach(t),Vbr=r(ske," (LayoutLM model)"),ske.forEach(t),Xbr=i(te),VT=n(te,"LI",{});var lke=s(VT);_4e=n(lke,"STRONG",{});var m5t=s(_4e);zbr=r(m5t,"longformer"),m5t.forEach(t),Qbr=r(lke," \u2014 "),oQ=n(lke,"A",{href:!0});var g5t=s(oQ);Wbr=r(g5t,"TFLongformerForTokenClassification"),g5t.forEach(t),Hbr=r(lke," (Longformer model)"),lke.forEach(t),Ubr=i(te),XT=n(te,"LI",{});var ike=s(XT);u4e=n(ike,"STRONG",{});var h5t=s(u4e);Jbr=r(h5t,"mobilebert"),h5t.forEach(t),Ybr=r(ike," \u2014 "),rQ=n(ike,"A",{href:!0});var p5t=s(rQ);Kbr=r(p5t,"TFMobileBertForTokenClassification"),p5t.forEach(t),Zbr=r(ike," (MobileBERT model)"),ike.forEach(t),e5r=i(te),zT=n(te,"LI",{});var dke=s(zT);b4e=n(dke,"STRONG",{});var _5t=s(b4e);o5r=r(_5t,"mpnet"),_5t.forEach(t),r5r=r(dke," \u2014 "),tQ=n(dke,"A",{href:!0});var u5t=s(tQ);t5r=r(u5t,"TFMPNetForTokenClassification"),u5t.forEach(t),a5r=r(dke," (MPNet model)"),dke.forEach(t),n5r=i(te),QT=n(te,"LI",{});var cke=s(QT);F4e=n(cke,"STRONG",{});var b5t=s(F4e);s5r=r(b5t,"rembert"),b5t.forEach(t),l5r=r(cke," \u2014 "),aQ=n(cke,"A",{href:!0});var F5t=s(aQ);i5r=r(F5t,"TFRemBertForTokenClassification"),F5t.forEach(t),d5r=r(cke," (RemBERT model)"),cke.forEach(t),c5r=i(te),WT=n(te,"LI",{});var fke=s(WT);v4e=n(fke,"STRONG",{});var v5t=s(v4e);f5r=r(v5t,"roberta"),v5t.forEach(t),m5r=r(fke," \u2014 "),nQ=n(fke,"A",{href:!0});var T5t=s(nQ);g5r=r(T5t,"TFRobertaForTokenClassification"),T5t.forEach(t),h5r=r(fke," (RoBERTa model)"),fke.forEach(t),p5r=i(te),HT=n(te,"LI",{});var mke=s(HT);T4e=n(mke,"STRONG",{});var M5t=s(T4e);_5r=r(M5t,"roformer"),M5t.forEach(t),u5r=r(mke," \u2014 "),sQ=n(mke,"A",{href:!0});var E5t=s(sQ);b5r=r(E5t,"TFRoFormerForTokenClassification"),E5t.forEach(t),F5r=r(mke," (RoFormer model)"),mke.forEach(t),v5r=i(te),UT=n(te,"LI",{});var gke=s(UT);M4e=n(gke,"STRONG",{});var C5t=s(M4e);T5r=r(C5t,"xlm"),C5t.forEach(t),M5r=r(gke," \u2014 "),lQ=n(gke,"A",{href:!0});var w5t=s(lQ);E5r=r(w5t,"TFXLMForTokenClassification"),w5t.forEach(t),C5r=r(gke," (XLM model)"),gke.forEach(t),w5r=i(te),JT=n(te,"LI",{});var hke=s(JT);E4e=n(hke,"STRONG",{});var A5t=s(E4e);A5r=r(A5t,"xlm-roberta"),A5t.forEach(t),y5r=r(hke," \u2014 "),iQ=n(hke,"A",{href:!0});var y5t=s(iQ);L5r=r(y5t,"TFXLMRobertaForTokenClassification"),y5t.forEach(t),x5r=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),k5r=i(te),YT=n(te,"LI",{});var pke=s(YT);C4e=n(pke,"STRONG",{});var L5t=s(C4e);S5r=r(L5t,"xlnet"),L5t.forEach(t),R5r=r(pke," \u2014 "),dQ=n(pke,"A",{href:!0});var x5t=s(dQ);B5r=r(x5t,"TFXLNetForTokenClassification"),x5t.forEach(t),P5r=r(pke," (XLNet model)"),pke.forEach(t),te.forEach(t),$5r=i(Ca),w4e=n(Ca,"P",{});var k5t=s(w4e);I5r=r(k5t,"Examples:"),k5t.forEach(t),q5r=i(Ca),m(EL.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),rPe=i(c),Vc=n(c,"H2",{class:!0});var gIe=s(Vc);KT=n(gIe,"A",{id:!0,class:!0,href:!0});var S5t=s(KT);A4e=n(S5t,"SPAN",{});var R5t=s(A4e);m(CL.$$.fragment,R5t),R5t.forEach(t),S5t.forEach(t),N5r=i(gIe),y4e=n(gIe,"SPAN",{});var B5t=s(y4e);j5r=r(B5t,"TFAutoModelForQuestionAnswering"),B5t.forEach(t),gIe.forEach(t),tPe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(wL.$$.fragment,ni),D5r=i(ni),Xc=n(ni,"P",{});var BJ=s(Xc);G5r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),cQ=n(BJ,"A",{href:!0});var P5t=s(cQ);O5r=r(P5t,"from_pretrained()"),P5t.forEach(t),V5r=r(BJ," class method or the "),fQ=n(BJ,"A",{href:!0});var $5t=s(fQ);X5r=r($5t,"from_config()"),$5t.forEach(t),z5r=r(BJ,` class
method.`),BJ.forEach(t),Q5r=i(ni),AL=n(ni,"P",{});var hIe=s(AL);W5r=r(hIe,"This class cannot be instantiated directly using "),L4e=n(hIe,"CODE",{});var I5t=s(L4e);H5r=r(I5t,"__init__()"),I5t.forEach(t),U5r=r(hIe," (throws an error)."),hIe.forEach(t),J5r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(yL.$$.fragment,si),Y5r=i(si),x4e=n(si,"P",{});var q5t=s(x4e);K5r=r(q5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q5t.forEach(t),Z5r=i(si),zc=n(si,"P",{});var PJ=s(zc);e2r=r(PJ,`Note:
Loading a model from its configuration file does `),k4e=n(PJ,"STRONG",{});var N5t=s(k4e);o2r=r(N5t,"not"),N5t.forEach(t),r2r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(PJ,"A",{href:!0});var j5t=s(mQ);t2r=r(j5t,"from_pretrained()"),j5t.forEach(t),a2r=r(PJ," to load the model weights."),PJ.forEach(t),n2r=i(si),S4e=n(si,"P",{});var D5t=s(S4e);s2r=r(D5t,"Examples:"),D5t.forEach(t),l2r=i(si),m(LL.$$.fragment,si),si.forEach(t),i2r=i(ni),wo=n(ni,"DIV",{class:!0});var wa=s(wo);m(xL.$$.fragment,wa),d2r=i(wa),R4e=n(wa,"P",{});var G5t=s(R4e);c2r=r(G5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G5t.forEach(t),f2r=i(wa),An=n(wa,"P",{});var mC=s(An);m2r=r(mC,"The model class to instantiate is selected based on the "),B4e=n(mC,"CODE",{});var O5t=s(B4e);g2r=r(O5t,"model_type"),O5t.forEach(t),h2r=r(mC,` property of the config object (either
passed as an argument or loaded from `),P4e=n(mC,"CODE",{});var V5t=s(P4e);p2r=r(V5t,"pretrained_model_name_or_path"),V5t.forEach(t),_2r=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$4e=n(mC,"CODE",{});var X5t=s($4e);u2r=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),b2r=r(mC,":"),mC.forEach(t),F2r=i(wa),Z=n(wa,"UL",{});var ae=s(Z);ZT=n(ae,"LI",{});var _ke=s(ZT);I4e=n(_ke,"STRONG",{});var z5t=s(I4e);v2r=r(z5t,"albert"),z5t.forEach(t),T2r=r(_ke," \u2014 "),gQ=n(_ke,"A",{href:!0});var Q5t=s(gQ);M2r=r(Q5t,"TFAlbertForQuestionAnswering"),Q5t.forEach(t),E2r=r(_ke," (ALBERT model)"),_ke.forEach(t),C2r=i(ae),eM=n(ae,"LI",{});var uke=s(eM);q4e=n(uke,"STRONG",{});var W5t=s(q4e);w2r=r(W5t,"bert"),W5t.forEach(t),A2r=r(uke," \u2014 "),hQ=n(uke,"A",{href:!0});var H5t=s(hQ);y2r=r(H5t,"TFBertForQuestionAnswering"),H5t.forEach(t),L2r=r(uke," (BERT model)"),uke.forEach(t),x2r=i(ae),oM=n(ae,"LI",{});var bke=s(oM);N4e=n(bke,"STRONG",{});var U5t=s(N4e);k2r=r(U5t,"camembert"),U5t.forEach(t),S2r=r(bke," \u2014 "),pQ=n(bke,"A",{href:!0});var J5t=s(pQ);R2r=r(J5t,"TFCamembertForQuestionAnswering"),J5t.forEach(t),B2r=r(bke," (CamemBERT model)"),bke.forEach(t),P2r=i(ae),rM=n(ae,"LI",{});var Fke=s(rM);j4e=n(Fke,"STRONG",{});var Y5t=s(j4e);$2r=r(Y5t,"convbert"),Y5t.forEach(t),I2r=r(Fke," \u2014 "),_Q=n(Fke,"A",{href:!0});var K5t=s(_Q);q2r=r(K5t,"TFConvBertForQuestionAnswering"),K5t.forEach(t),N2r=r(Fke," (ConvBERT model)"),Fke.forEach(t),j2r=i(ae),tM=n(ae,"LI",{});var vke=s(tM);D4e=n(vke,"STRONG",{});var Z5t=s(D4e);D2r=r(Z5t,"deberta"),Z5t.forEach(t),G2r=r(vke," \u2014 "),uQ=n(vke,"A",{href:!0});var e2t=s(uQ);O2r=r(e2t,"TFDebertaForQuestionAnswering"),e2t.forEach(t),V2r=r(vke," (DeBERTa model)"),vke.forEach(t),X2r=i(ae),aM=n(ae,"LI",{});var Tke=s(aM);G4e=n(Tke,"STRONG",{});var o2t=s(G4e);z2r=r(o2t,"deberta-v2"),o2t.forEach(t),Q2r=r(Tke," \u2014 "),bQ=n(Tke,"A",{href:!0});var r2t=s(bQ);W2r=r(r2t,"TFDebertaV2ForQuestionAnswering"),r2t.forEach(t),H2r=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),U2r=i(ae),nM=n(ae,"LI",{});var Mke=s(nM);O4e=n(Mke,"STRONG",{});var t2t=s(O4e);J2r=r(t2t,"distilbert"),t2t.forEach(t),Y2r=r(Mke," \u2014 "),FQ=n(Mke,"A",{href:!0});var a2t=s(FQ);K2r=r(a2t,"TFDistilBertForQuestionAnswering"),a2t.forEach(t),Z2r=r(Mke," (DistilBERT model)"),Mke.forEach(t),eFr=i(ae),sM=n(ae,"LI",{});var Eke=s(sM);V4e=n(Eke,"STRONG",{});var n2t=s(V4e);oFr=r(n2t,"electra"),n2t.forEach(t),rFr=r(Eke," \u2014 "),vQ=n(Eke,"A",{href:!0});var s2t=s(vQ);tFr=r(s2t,"TFElectraForQuestionAnswering"),s2t.forEach(t),aFr=r(Eke," (ELECTRA model)"),Eke.forEach(t),nFr=i(ae),lM=n(ae,"LI",{});var Cke=s(lM);X4e=n(Cke,"STRONG",{});var l2t=s(X4e);sFr=r(l2t,"flaubert"),l2t.forEach(t),lFr=r(Cke," \u2014 "),TQ=n(Cke,"A",{href:!0});var i2t=s(TQ);iFr=r(i2t,"TFFlaubertForQuestionAnsweringSimple"),i2t.forEach(t),dFr=r(Cke," (FlauBERT model)"),Cke.forEach(t),cFr=i(ae),iM=n(ae,"LI",{});var wke=s(iM);z4e=n(wke,"STRONG",{});var d2t=s(z4e);fFr=r(d2t,"funnel"),d2t.forEach(t),mFr=r(wke," \u2014 "),MQ=n(wke,"A",{href:!0});var c2t=s(MQ);gFr=r(c2t,"TFFunnelForQuestionAnswering"),c2t.forEach(t),hFr=r(wke," (Funnel Transformer model)"),wke.forEach(t),pFr=i(ae),dM=n(ae,"LI",{});var Ake=s(dM);Q4e=n(Ake,"STRONG",{});var f2t=s(Q4e);_Fr=r(f2t,"gptj"),f2t.forEach(t),uFr=r(Ake," \u2014 "),EQ=n(Ake,"A",{href:!0});var m2t=s(EQ);bFr=r(m2t,"TFGPTJForQuestionAnswering"),m2t.forEach(t),FFr=r(Ake," (GPT-J model)"),Ake.forEach(t),vFr=i(ae),cM=n(ae,"LI",{});var yke=s(cM);W4e=n(yke,"STRONG",{});var g2t=s(W4e);TFr=r(g2t,"longformer"),g2t.forEach(t),MFr=r(yke," \u2014 "),CQ=n(yke,"A",{href:!0});var h2t=s(CQ);EFr=r(h2t,"TFLongformerForQuestionAnswering"),h2t.forEach(t),CFr=r(yke," (Longformer model)"),yke.forEach(t),wFr=i(ae),fM=n(ae,"LI",{});var Lke=s(fM);H4e=n(Lke,"STRONG",{});var p2t=s(H4e);AFr=r(p2t,"mobilebert"),p2t.forEach(t),yFr=r(Lke," \u2014 "),wQ=n(Lke,"A",{href:!0});var _2t=s(wQ);LFr=r(_2t,"TFMobileBertForQuestionAnswering"),_2t.forEach(t),xFr=r(Lke," (MobileBERT model)"),Lke.forEach(t),kFr=i(ae),mM=n(ae,"LI",{});var xke=s(mM);U4e=n(xke,"STRONG",{});var u2t=s(U4e);SFr=r(u2t,"mpnet"),u2t.forEach(t),RFr=r(xke," \u2014 "),AQ=n(xke,"A",{href:!0});var b2t=s(AQ);BFr=r(b2t,"TFMPNetForQuestionAnswering"),b2t.forEach(t),PFr=r(xke," (MPNet model)"),xke.forEach(t),$Fr=i(ae),gM=n(ae,"LI",{});var kke=s(gM);J4e=n(kke,"STRONG",{});var F2t=s(J4e);IFr=r(F2t,"rembert"),F2t.forEach(t),qFr=r(kke," \u2014 "),yQ=n(kke,"A",{href:!0});var v2t=s(yQ);NFr=r(v2t,"TFRemBertForQuestionAnswering"),v2t.forEach(t),jFr=r(kke," (RemBERT model)"),kke.forEach(t),DFr=i(ae),hM=n(ae,"LI",{});var Ske=s(hM);Y4e=n(Ske,"STRONG",{});var T2t=s(Y4e);GFr=r(T2t,"roberta"),T2t.forEach(t),OFr=r(Ske," \u2014 "),LQ=n(Ske,"A",{href:!0});var M2t=s(LQ);VFr=r(M2t,"TFRobertaForQuestionAnswering"),M2t.forEach(t),XFr=r(Ske," (RoBERTa model)"),Ske.forEach(t),zFr=i(ae),pM=n(ae,"LI",{});var Rke=s(pM);K4e=n(Rke,"STRONG",{});var E2t=s(K4e);QFr=r(E2t,"roformer"),E2t.forEach(t),WFr=r(Rke," \u2014 "),xQ=n(Rke,"A",{href:!0});var C2t=s(xQ);HFr=r(C2t,"TFRoFormerForQuestionAnswering"),C2t.forEach(t),UFr=r(Rke," (RoFormer model)"),Rke.forEach(t),JFr=i(ae),_M=n(ae,"LI",{});var Bke=s(_M);Z4e=n(Bke,"STRONG",{});var w2t=s(Z4e);YFr=r(w2t,"xlm"),w2t.forEach(t),KFr=r(Bke," \u2014 "),kQ=n(Bke,"A",{href:!0});var A2t=s(kQ);ZFr=r(A2t,"TFXLMForQuestionAnsweringSimple"),A2t.forEach(t),evr=r(Bke," (XLM model)"),Bke.forEach(t),ovr=i(ae),uM=n(ae,"LI",{});var Pke=s(uM);ebe=n(Pke,"STRONG",{});var y2t=s(ebe);rvr=r(y2t,"xlm-roberta"),y2t.forEach(t),tvr=r(Pke," \u2014 "),SQ=n(Pke,"A",{href:!0});var L2t=s(SQ);avr=r(L2t,"TFXLMRobertaForQuestionAnswering"),L2t.forEach(t),nvr=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),svr=i(ae),bM=n(ae,"LI",{});var $ke=s(bM);obe=n($ke,"STRONG",{});var x2t=s(obe);lvr=r(x2t,"xlnet"),x2t.forEach(t),ivr=r($ke," \u2014 "),RQ=n($ke,"A",{href:!0});var k2t=s(RQ);dvr=r(k2t,"TFXLNetForQuestionAnsweringSimple"),k2t.forEach(t),cvr=r($ke," (XLNet model)"),$ke.forEach(t),ae.forEach(t),fvr=i(wa),rbe=n(wa,"P",{});var S2t=s(rbe);mvr=r(S2t,"Examples:"),S2t.forEach(t),gvr=i(wa),m(kL.$$.fragment,wa),wa.forEach(t),ni.forEach(t),aPe=i(c),Qc=n(c,"H2",{class:!0});var pIe=s(Qc);FM=n(pIe,"A",{id:!0,class:!0,href:!0});var R2t=s(FM);tbe=n(R2t,"SPAN",{});var B2t=s(tbe);m(SL.$$.fragment,B2t),B2t.forEach(t),R2t.forEach(t),hvr=i(pIe),abe=n(pIe,"SPAN",{});var P2t=s(abe);pvr=r(P2t,"TFAutoModelForVision2Seq"),P2t.forEach(t),pIe.forEach(t),nPe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(RL.$$.fragment,li),_vr=i(li),Wc=n(li,"P",{});var $J=s(Wc);uvr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BQ=n($J,"A",{href:!0});var $2t=s(BQ);bvr=r($2t,"from_pretrained()"),$2t.forEach(t),Fvr=r($J," class method or the "),PQ=n($J,"A",{href:!0});var I2t=s(PQ);vvr=r(I2t,"from_config()"),I2t.forEach(t),Tvr=r($J,` class
method.`),$J.forEach(t),Mvr=i(li),BL=n(li,"P",{});var _Ie=s(BL);Evr=r(_Ie,"This class cannot be instantiated directly using "),nbe=n(_Ie,"CODE",{});var q2t=s(nbe);Cvr=r(q2t,"__init__()"),q2t.forEach(t),wvr=r(_Ie," (throws an error)."),_Ie.forEach(t),Avr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(PL.$$.fragment,ii),yvr=i(ii),sbe=n(ii,"P",{});var N2t=s(sbe);Lvr=r(N2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),N2t.forEach(t),xvr=i(ii),Hc=n(ii,"P",{});var IJ=s(Hc);kvr=r(IJ,`Note:
Loading a model from its configuration file does `),lbe=n(IJ,"STRONG",{});var j2t=s(lbe);Svr=r(j2t,"not"),j2t.forEach(t),Rvr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(IJ,"A",{href:!0});var D2t=s($Q);Bvr=r(D2t,"from_pretrained()"),D2t.forEach(t),Pvr=r(IJ," to load the model weights."),IJ.forEach(t),$vr=i(ii),ibe=n(ii,"P",{});var G2t=s(ibe);Ivr=r(G2t,"Examples:"),G2t.forEach(t),qvr=i(ii),m($L.$$.fragment,ii),ii.forEach(t),Nvr=i(li),Ao=n(li,"DIV",{class:!0});var Aa=s(Ao);m(IL.$$.fragment,Aa),jvr=i(Aa),dbe=n(Aa,"P",{});var O2t=s(dbe);Dvr=r(O2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),O2t.forEach(t),Gvr=i(Aa),yn=n(Aa,"P",{});var gC=s(yn);Ovr=r(gC,"The model class to instantiate is selected based on the "),cbe=n(gC,"CODE",{});var V2t=s(cbe);Vvr=r(V2t,"model_type"),V2t.forEach(t),Xvr=r(gC,` property of the config object (either
passed as an argument or loaded from `),fbe=n(gC,"CODE",{});var X2t=s(fbe);zvr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),Qvr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mbe=n(gC,"CODE",{});var z2t=s(mbe);Wvr=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),Hvr=r(gC,":"),gC.forEach(t),Uvr=i(Aa),gbe=n(Aa,"UL",{});var Q2t=s(gbe);vM=n(Q2t,"LI",{});var Ike=s(vM);hbe=n(Ike,"STRONG",{});var W2t=s(hbe);Jvr=r(W2t,"vision-encoder-decoder"),W2t.forEach(t),Yvr=r(Ike," \u2014 "),IQ=n(Ike,"A",{href:!0});var H2t=s(IQ);Kvr=r(H2t,"TFVisionEncoderDecoderModel"),H2t.forEach(t),Zvr=r(Ike," (Vision Encoder decoder model)"),Ike.forEach(t),Q2t.forEach(t),eTr=i(Aa),pbe=n(Aa,"P",{});var U2t=s(pbe);oTr=r(U2t,"Examples:"),U2t.forEach(t),rTr=i(Aa),m(qL.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),sPe=i(c),Uc=n(c,"H2",{class:!0});var uIe=s(Uc);TM=n(uIe,"A",{id:!0,class:!0,href:!0});var J2t=s(TM);_be=n(J2t,"SPAN",{});var Y2t=s(_be);m(NL.$$.fragment,Y2t),Y2t.forEach(t),J2t.forEach(t),tTr=i(uIe),ube=n(uIe,"SPAN",{});var K2t=s(ube);aTr=r(K2t,"TFAutoModelForSpeechSeq2Seq"),K2t.forEach(t),uIe.forEach(t),lPe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(jL.$$.fragment,di),nTr=i(di),Jc=n(di,"P",{});var qJ=s(Jc);sTr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qQ=n(qJ,"A",{href:!0});var Z2t=s(qQ);lTr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),iTr=r(qJ," class method or the "),NQ=n(qJ,"A",{href:!0});var eFt=s(NQ);dTr=r(eFt,"from_config()"),eFt.forEach(t),cTr=r(qJ,` class
method.`),qJ.forEach(t),fTr=i(di),DL=n(di,"P",{});var bIe=s(DL);mTr=r(bIe,"This class cannot be instantiated directly using "),bbe=n(bIe,"CODE",{});var oFt=s(bbe);gTr=r(oFt,"__init__()"),oFt.forEach(t),hTr=r(bIe," (throws an error)."),bIe.forEach(t),pTr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(GL.$$.fragment,ci),_Tr=i(ci),Fbe=n(ci,"P",{});var rFt=s(Fbe);uTr=r(rFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rFt.forEach(t),bTr=i(ci),Yc=n(ci,"P",{});var NJ=s(Yc);FTr=r(NJ,`Note:
Loading a model from its configuration file does `),vbe=n(NJ,"STRONG",{});var tFt=s(vbe);vTr=r(tFt,"not"),tFt.forEach(t),TTr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jQ=n(NJ,"A",{href:!0});var aFt=s(jQ);MTr=r(aFt,"from_pretrained()"),aFt.forEach(t),ETr=r(NJ," to load the model weights."),NJ.forEach(t),CTr=i(ci),Tbe=n(ci,"P",{});var nFt=s(Tbe);wTr=r(nFt,"Examples:"),nFt.forEach(t),ATr=i(ci),m(OL.$$.fragment,ci),ci.forEach(t),yTr=i(di),yo=n(di,"DIV",{class:!0});var ya=s(yo);m(VL.$$.fragment,ya),LTr=i(ya),Mbe=n(ya,"P",{});var sFt=s(Mbe);xTr=r(sFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sFt.forEach(t),kTr=i(ya),Ln=n(ya,"P",{});var hC=s(Ln);STr=r(hC,"The model class to instantiate is selected based on the "),Ebe=n(hC,"CODE",{});var lFt=s(Ebe);RTr=r(lFt,"model_type"),lFt.forEach(t),BTr=r(hC,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(hC,"CODE",{});var iFt=s(Cbe);PTr=r(iFt,"pretrained_model_name_or_path"),iFt.forEach(t),$Tr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(hC,"CODE",{});var dFt=s(wbe);ITr=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),qTr=r(hC,":"),hC.forEach(t),NTr=i(ya),Abe=n(ya,"UL",{});var cFt=s(Abe);MM=n(cFt,"LI",{});var qke=s(MM);ybe=n(qke,"STRONG",{});var fFt=s(ybe);jTr=r(fFt,"speech_to_text"),fFt.forEach(t),DTr=r(qke," \u2014 "),DQ=n(qke,"A",{href:!0});var mFt=s(DQ);GTr=r(mFt,"TFSpeech2TextForConditionalGeneration"),mFt.forEach(t),OTr=r(qke," (Speech2Text model)"),qke.forEach(t),cFt.forEach(t),VTr=i(ya),Lbe=n(ya,"P",{});var gFt=s(Lbe);XTr=r(gFt,"Examples:"),gFt.forEach(t),zTr=i(ya),m(XL.$$.fragment,ya),ya.forEach(t),di.forEach(t),iPe=i(c),Kc=n(c,"H2",{class:!0});var FIe=s(Kc);EM=n(FIe,"A",{id:!0,class:!0,href:!0});var hFt=s(EM);xbe=n(hFt,"SPAN",{});var pFt=s(xbe);m(zL.$$.fragment,pFt),pFt.forEach(t),hFt.forEach(t),QTr=i(FIe),kbe=n(FIe,"SPAN",{});var _Ft=s(kbe);WTr=r(_Ft,"FlaxAutoModel"),_Ft.forEach(t),FIe.forEach(t),dPe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(QL.$$.fragment,fi),HTr=i(fi),Zc=n(fi,"P",{});var jJ=s(Zc);UTr=r(jJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GQ=n(jJ,"A",{href:!0});var uFt=s(GQ);JTr=r(uFt,"from_pretrained()"),uFt.forEach(t),YTr=r(jJ," class method or the "),OQ=n(jJ,"A",{href:!0});var bFt=s(OQ);KTr=r(bFt,"from_config()"),bFt.forEach(t),ZTr=r(jJ,` class
method.`),jJ.forEach(t),eMr=i(fi),WL=n(fi,"P",{});var vIe=s(WL);oMr=r(vIe,"This class cannot be instantiated directly using "),Sbe=n(vIe,"CODE",{});var FFt=s(Sbe);rMr=r(FFt,"__init__()"),FFt.forEach(t),tMr=r(vIe," (throws an error)."),vIe.forEach(t),aMr=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(HL.$$.fragment,mi),nMr=i(mi),Rbe=n(mi,"P",{});var vFt=s(Rbe);sMr=r(vFt,"Instantiates one of the base model classes of the library from a configuration."),vFt.forEach(t),lMr=i(mi),ef=n(mi,"P",{});var DJ=s(ef);iMr=r(DJ,`Note:
Loading a model from its configuration file does `),Bbe=n(DJ,"STRONG",{});var TFt=s(Bbe);dMr=r(TFt,"not"),TFt.forEach(t),cMr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VQ=n(DJ,"A",{href:!0});var MFt=s(VQ);fMr=r(MFt,"from_pretrained()"),MFt.forEach(t),mMr=r(DJ," to load the model weights."),DJ.forEach(t),gMr=i(mi),Pbe=n(mi,"P",{});var EFt=s(Pbe);hMr=r(EFt,"Examples:"),EFt.forEach(t),pMr=i(mi),m(UL.$$.fragment,mi),mi.forEach(t),_Mr=i(fi),Lo=n(fi,"DIV",{class:!0});var La=s(Lo);m(JL.$$.fragment,La),uMr=i(La),$be=n(La,"P",{});var CFt=s($be);bMr=r(CFt,"Instantiate one of the base model classes of the library from a pretrained model."),CFt.forEach(t),FMr=i(La),xn=n(La,"P",{});var pC=s(xn);vMr=r(pC,"The model class to instantiate is selected based on the "),Ibe=n(pC,"CODE",{});var wFt=s(Ibe);TMr=r(wFt,"model_type"),wFt.forEach(t),MMr=r(pC,` property of the config object (either
passed as an argument or loaded from `),qbe=n(pC,"CODE",{});var AFt=s(qbe);EMr=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),CMr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(pC,"CODE",{});var yFt=s(Nbe);wMr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),AMr=r(pC,":"),pC.forEach(t),yMr=i(La),z=n(La,"UL",{});var W=s(z);CM=n(W,"LI",{});var Nke=s(CM);jbe=n(Nke,"STRONG",{});var LFt=s(jbe);LMr=r(LFt,"albert"),LFt.forEach(t),xMr=r(Nke," \u2014 "),XQ=n(Nke,"A",{href:!0});var xFt=s(XQ);kMr=r(xFt,"FlaxAlbertModel"),xFt.forEach(t),SMr=r(Nke," (ALBERT model)"),Nke.forEach(t),RMr=i(W),wM=n(W,"LI",{});var jke=s(wM);Dbe=n(jke,"STRONG",{});var kFt=s(Dbe);BMr=r(kFt,"bart"),kFt.forEach(t),PMr=r(jke," \u2014 "),zQ=n(jke,"A",{href:!0});var SFt=s(zQ);$Mr=r(SFt,"FlaxBartModel"),SFt.forEach(t),IMr=r(jke," (BART model)"),jke.forEach(t),qMr=i(W),AM=n(W,"LI",{});var Dke=s(AM);Gbe=n(Dke,"STRONG",{});var RFt=s(Gbe);NMr=r(RFt,"beit"),RFt.forEach(t),jMr=r(Dke," \u2014 "),QQ=n(Dke,"A",{href:!0});var BFt=s(QQ);DMr=r(BFt,"FlaxBeitModel"),BFt.forEach(t),GMr=r(Dke," (BEiT model)"),Dke.forEach(t),OMr=i(W),yM=n(W,"LI",{});var Gke=s(yM);Obe=n(Gke,"STRONG",{});var PFt=s(Obe);VMr=r(PFt,"bert"),PFt.forEach(t),XMr=r(Gke," \u2014 "),WQ=n(Gke,"A",{href:!0});var $Ft=s(WQ);zMr=r($Ft,"FlaxBertModel"),$Ft.forEach(t),QMr=r(Gke," (BERT model)"),Gke.forEach(t),WMr=i(W),LM=n(W,"LI",{});var Oke=s(LM);Vbe=n(Oke,"STRONG",{});var IFt=s(Vbe);HMr=r(IFt,"big_bird"),IFt.forEach(t),UMr=r(Oke," \u2014 "),HQ=n(Oke,"A",{href:!0});var qFt=s(HQ);JMr=r(qFt,"FlaxBigBirdModel"),qFt.forEach(t),YMr=r(Oke," (BigBird model)"),Oke.forEach(t),KMr=i(W),xM=n(W,"LI",{});var Vke=s(xM);Xbe=n(Vke,"STRONG",{});var NFt=s(Xbe);ZMr=r(NFt,"blenderbot"),NFt.forEach(t),eEr=r(Vke," \u2014 "),UQ=n(Vke,"A",{href:!0});var jFt=s(UQ);oEr=r(jFt,"FlaxBlenderbotModel"),jFt.forEach(t),rEr=r(Vke," (Blenderbot model)"),Vke.forEach(t),tEr=i(W),kM=n(W,"LI",{});var Xke=s(kM);zbe=n(Xke,"STRONG",{});var DFt=s(zbe);aEr=r(DFt,"blenderbot-small"),DFt.forEach(t),nEr=r(Xke," \u2014 "),JQ=n(Xke,"A",{href:!0});var GFt=s(JQ);sEr=r(GFt,"FlaxBlenderbotSmallModel"),GFt.forEach(t),lEr=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),iEr=i(W),SM=n(W,"LI",{});var zke=s(SM);Qbe=n(zke,"STRONG",{});var OFt=s(Qbe);dEr=r(OFt,"clip"),OFt.forEach(t),cEr=r(zke," \u2014 "),YQ=n(zke,"A",{href:!0});var VFt=s(YQ);fEr=r(VFt,"FlaxCLIPModel"),VFt.forEach(t),mEr=r(zke," (CLIP model)"),zke.forEach(t),gEr=i(W),RM=n(W,"LI",{});var Qke=s(RM);Wbe=n(Qke,"STRONG",{});var XFt=s(Wbe);hEr=r(XFt,"distilbert"),XFt.forEach(t),pEr=r(Qke," \u2014 "),KQ=n(Qke,"A",{href:!0});var zFt=s(KQ);_Er=r(zFt,"FlaxDistilBertModel"),zFt.forEach(t),uEr=r(Qke," (DistilBERT model)"),Qke.forEach(t),bEr=i(W),BM=n(W,"LI",{});var Wke=s(BM);Hbe=n(Wke,"STRONG",{});var QFt=s(Hbe);FEr=r(QFt,"electra"),QFt.forEach(t),vEr=r(Wke," \u2014 "),ZQ=n(Wke,"A",{href:!0});var WFt=s(ZQ);TEr=r(WFt,"FlaxElectraModel"),WFt.forEach(t),MEr=r(Wke," (ELECTRA model)"),Wke.forEach(t),EEr=i(W),PM=n(W,"LI",{});var Hke=s(PM);Ube=n(Hke,"STRONG",{});var HFt=s(Ube);CEr=r(HFt,"gpt2"),HFt.forEach(t),wEr=r(Hke," \u2014 "),eW=n(Hke,"A",{href:!0});var UFt=s(eW);AEr=r(UFt,"FlaxGPT2Model"),UFt.forEach(t),yEr=r(Hke," (OpenAI GPT-2 model)"),Hke.forEach(t),LEr=i(W),$M=n(W,"LI",{});var Uke=s($M);Jbe=n(Uke,"STRONG",{});var JFt=s(Jbe);xEr=r(JFt,"gpt_neo"),JFt.forEach(t),kEr=r(Uke," \u2014 "),oW=n(Uke,"A",{href:!0});var YFt=s(oW);SEr=r(YFt,"FlaxGPTNeoModel"),YFt.forEach(t),REr=r(Uke," (GPT Neo model)"),Uke.forEach(t),BEr=i(W),IM=n(W,"LI",{});var Jke=s(IM);Ybe=n(Jke,"STRONG",{});var KFt=s(Ybe);PEr=r(KFt,"gptj"),KFt.forEach(t),$Er=r(Jke," \u2014 "),rW=n(Jke,"A",{href:!0});var ZFt=s(rW);IEr=r(ZFt,"FlaxGPTJModel"),ZFt.forEach(t),qEr=r(Jke," (GPT-J model)"),Jke.forEach(t),NEr=i(W),qM=n(W,"LI",{});var Yke=s(qM);Kbe=n(Yke,"STRONG",{});var evt=s(Kbe);jEr=r(evt,"marian"),evt.forEach(t),DEr=r(Yke," \u2014 "),tW=n(Yke,"A",{href:!0});var ovt=s(tW);GEr=r(ovt,"FlaxMarianModel"),ovt.forEach(t),OEr=r(Yke," (Marian model)"),Yke.forEach(t),VEr=i(W),NM=n(W,"LI",{});var Kke=s(NM);Zbe=n(Kke,"STRONG",{});var rvt=s(Zbe);XEr=r(rvt,"mbart"),rvt.forEach(t),zEr=r(Kke," \u2014 "),aW=n(Kke,"A",{href:!0});var tvt=s(aW);QEr=r(tvt,"FlaxMBartModel"),tvt.forEach(t),WEr=r(Kke," (mBART model)"),Kke.forEach(t),HEr=i(W),jM=n(W,"LI",{});var Zke=s(jM);e5e=n(Zke,"STRONG",{});var avt=s(e5e);UEr=r(avt,"mt5"),avt.forEach(t),JEr=r(Zke," \u2014 "),nW=n(Zke,"A",{href:!0});var nvt=s(nW);YEr=r(nvt,"FlaxMT5Model"),nvt.forEach(t),KEr=r(Zke," (mT5 model)"),Zke.forEach(t),ZEr=i(W),DM=n(W,"LI",{});var eSe=s(DM);o5e=n(eSe,"STRONG",{});var svt=s(o5e);e3r=r(svt,"pegasus"),svt.forEach(t),o3r=r(eSe," \u2014 "),sW=n(eSe,"A",{href:!0});var lvt=s(sW);r3r=r(lvt,"FlaxPegasusModel"),lvt.forEach(t),t3r=r(eSe," (Pegasus model)"),eSe.forEach(t),a3r=i(W),GM=n(W,"LI",{});var oSe=s(GM);r5e=n(oSe,"STRONG",{});var ivt=s(r5e);n3r=r(ivt,"roberta"),ivt.forEach(t),s3r=r(oSe," \u2014 "),lW=n(oSe,"A",{href:!0});var dvt=s(lW);l3r=r(dvt,"FlaxRobertaModel"),dvt.forEach(t),i3r=r(oSe," (RoBERTa model)"),oSe.forEach(t),d3r=i(W),OM=n(W,"LI",{});var rSe=s(OM);t5e=n(rSe,"STRONG",{});var cvt=s(t5e);c3r=r(cvt,"roformer"),cvt.forEach(t),f3r=r(rSe," \u2014 "),iW=n(rSe,"A",{href:!0});var fvt=s(iW);m3r=r(fvt,"FlaxRoFormerModel"),fvt.forEach(t),g3r=r(rSe," (RoFormer model)"),rSe.forEach(t),h3r=i(W),VM=n(W,"LI",{});var tSe=s(VM);a5e=n(tSe,"STRONG",{});var mvt=s(a5e);p3r=r(mvt,"t5"),mvt.forEach(t),_3r=r(tSe," \u2014 "),dW=n(tSe,"A",{href:!0});var gvt=s(dW);u3r=r(gvt,"FlaxT5Model"),gvt.forEach(t),b3r=r(tSe," (T5 model)"),tSe.forEach(t),F3r=i(W),XM=n(W,"LI",{});var aSe=s(XM);n5e=n(aSe,"STRONG",{});var hvt=s(n5e);v3r=r(hvt,"vision-text-dual-encoder"),hvt.forEach(t),T3r=r(aSe," \u2014 "),cW=n(aSe,"A",{href:!0});var pvt=s(cW);M3r=r(pvt,"FlaxVisionTextDualEncoderModel"),pvt.forEach(t),E3r=r(aSe," (VisionTextDualEncoder model)"),aSe.forEach(t),C3r=i(W),zM=n(W,"LI",{});var nSe=s(zM);s5e=n(nSe,"STRONG",{});var _vt=s(s5e);w3r=r(_vt,"vit"),_vt.forEach(t),A3r=r(nSe," \u2014 "),fW=n(nSe,"A",{href:!0});var uvt=s(fW);y3r=r(uvt,"FlaxViTModel"),uvt.forEach(t),L3r=r(nSe," (ViT model)"),nSe.forEach(t),x3r=i(W),QM=n(W,"LI",{});var sSe=s(QM);l5e=n(sSe,"STRONG",{});var bvt=s(l5e);k3r=r(bvt,"wav2vec2"),bvt.forEach(t),S3r=r(sSe," \u2014 "),mW=n(sSe,"A",{href:!0});var Fvt=s(mW);R3r=r(Fvt,"FlaxWav2Vec2Model"),Fvt.forEach(t),B3r=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),P3r=i(W),WM=n(W,"LI",{});var lSe=s(WM);i5e=n(lSe,"STRONG",{});var vvt=s(i5e);$3r=r(vvt,"xglm"),vvt.forEach(t),I3r=r(lSe," \u2014 "),gW=n(lSe,"A",{href:!0});var Tvt=s(gW);q3r=r(Tvt,"FlaxXGLMModel"),Tvt.forEach(t),N3r=r(lSe," (XGLM model)"),lSe.forEach(t),j3r=i(W),HM=n(W,"LI",{});var iSe=s(HM);d5e=n(iSe,"STRONG",{});var Mvt=s(d5e);D3r=r(Mvt,"xlm-roberta"),Mvt.forEach(t),G3r=r(iSe," \u2014 "),hW=n(iSe,"A",{href:!0});var Evt=s(hW);O3r=r(Evt,"FlaxXLMRobertaModel"),Evt.forEach(t),V3r=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),W.forEach(t),X3r=i(La),c5e=n(La,"P",{});var Cvt=s(c5e);z3r=r(Cvt,"Examples:"),Cvt.forEach(t),Q3r=i(La),m(YL.$$.fragment,La),La.forEach(t),fi.forEach(t),cPe=i(c),of=n(c,"H2",{class:!0});var TIe=s(of);UM=n(TIe,"A",{id:!0,class:!0,href:!0});var wvt=s(UM);f5e=n(wvt,"SPAN",{});var Avt=s(f5e);m(KL.$$.fragment,Avt),Avt.forEach(t),wvt.forEach(t),W3r=i(TIe),m5e=n(TIe,"SPAN",{});var yvt=s(m5e);H3r=r(yvt,"FlaxAutoModelForCausalLM"),yvt.forEach(t),TIe.forEach(t),fPe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(ZL.$$.fragment,gi),U3r=i(gi),rf=n(gi,"P",{});var GJ=s(rf);J3r=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pW=n(GJ,"A",{href:!0});var Lvt=s(pW);Y3r=r(Lvt,"from_pretrained()"),Lvt.forEach(t),K3r=r(GJ," class method or the "),_W=n(GJ,"A",{href:!0});var xvt=s(_W);Z3r=r(xvt,"from_config()"),xvt.forEach(t),eCr=r(GJ,` class
method.`),GJ.forEach(t),oCr=i(gi),e8=n(gi,"P",{});var MIe=s(e8);rCr=r(MIe,"This class cannot be instantiated directly using "),g5e=n(MIe,"CODE",{});var kvt=s(g5e);tCr=r(kvt,"__init__()"),kvt.forEach(t),aCr=r(MIe," (throws an error)."),MIe.forEach(t),nCr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(o8.$$.fragment,hi),sCr=i(hi),h5e=n(hi,"P",{});var Svt=s(h5e);lCr=r(Svt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Svt.forEach(t),iCr=i(hi),tf=n(hi,"P",{});var OJ=s(tf);dCr=r(OJ,`Note:
Loading a model from its configuration file does `),p5e=n(OJ,"STRONG",{});var Rvt=s(p5e);cCr=r(Rvt,"not"),Rvt.forEach(t),fCr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(OJ,"A",{href:!0});var Bvt=s(uW);mCr=r(Bvt,"from_pretrained()"),Bvt.forEach(t),gCr=r(OJ," to load the model weights."),OJ.forEach(t),hCr=i(hi),_5e=n(hi,"P",{});var Pvt=s(_5e);pCr=r(Pvt,"Examples:"),Pvt.forEach(t),_Cr=i(hi),m(r8.$$.fragment,hi),hi.forEach(t),uCr=i(gi),xo=n(gi,"DIV",{class:!0});var xa=s(xo);m(t8.$$.fragment,xa),bCr=i(xa),u5e=n(xa,"P",{});var $vt=s(u5e);FCr=r($vt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$vt.forEach(t),vCr=i(xa),kn=n(xa,"P",{});var _C=s(kn);TCr=r(_C,"The model class to instantiate is selected based on the "),b5e=n(_C,"CODE",{});var Ivt=s(b5e);MCr=r(Ivt,"model_type"),Ivt.forEach(t),ECr=r(_C,` property of the config object (either
passed as an argument or loaded from `),F5e=n(_C,"CODE",{});var qvt=s(F5e);CCr=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),wCr=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v5e=n(_C,"CODE",{});var Nvt=s(v5e);ACr=r(Nvt,"pretrained_model_name_or_path"),Nvt.forEach(t),yCr=r(_C,":"),_C.forEach(t),LCr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);JM=n(pi,"LI",{});var dSe=s(JM);T5e=n(dSe,"STRONG",{});var jvt=s(T5e);xCr=r(jvt,"bart"),jvt.forEach(t),kCr=r(dSe," \u2014 "),bW=n(dSe,"A",{href:!0});var Dvt=s(bW);SCr=r(Dvt,"FlaxBartForCausalLM"),Dvt.forEach(t),RCr=r(dSe," (BART model)"),dSe.forEach(t),BCr=i(pi),YM=n(pi,"LI",{});var cSe=s(YM);M5e=n(cSe,"STRONG",{});var Gvt=s(M5e);PCr=r(Gvt,"gpt2"),Gvt.forEach(t),$Cr=r(cSe," \u2014 "),FW=n(cSe,"A",{href:!0});var Ovt=s(FW);ICr=r(Ovt,"FlaxGPT2LMHeadModel"),Ovt.forEach(t),qCr=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),NCr=i(pi),KM=n(pi,"LI",{});var fSe=s(KM);E5e=n(fSe,"STRONG",{});var Vvt=s(E5e);jCr=r(Vvt,"gpt_neo"),Vvt.forEach(t),DCr=r(fSe," \u2014 "),vW=n(fSe,"A",{href:!0});var Xvt=s(vW);GCr=r(Xvt,"FlaxGPTNeoForCausalLM"),Xvt.forEach(t),OCr=r(fSe," (GPT Neo model)"),fSe.forEach(t),VCr=i(pi),ZM=n(pi,"LI",{});var mSe=s(ZM);C5e=n(mSe,"STRONG",{});var zvt=s(C5e);XCr=r(zvt,"gptj"),zvt.forEach(t),zCr=r(mSe," \u2014 "),TW=n(mSe,"A",{href:!0});var Qvt=s(TW);QCr=r(Qvt,"FlaxGPTJForCausalLM"),Qvt.forEach(t),WCr=r(mSe," (GPT-J model)"),mSe.forEach(t),HCr=i(pi),eE=n(pi,"LI",{});var gSe=s(eE);w5e=n(gSe,"STRONG",{});var Wvt=s(w5e);UCr=r(Wvt,"xglm"),Wvt.forEach(t),JCr=r(gSe," \u2014 "),MW=n(gSe,"A",{href:!0});var Hvt=s(MW);YCr=r(Hvt,"FlaxXGLMForCausalLM"),Hvt.forEach(t),KCr=r(gSe," (XGLM model)"),gSe.forEach(t),pi.forEach(t),ZCr=i(xa),A5e=n(xa,"P",{});var Uvt=s(A5e);ewr=r(Uvt,"Examples:"),Uvt.forEach(t),owr=i(xa),m(a8.$$.fragment,xa),xa.forEach(t),gi.forEach(t),mPe=i(c),af=n(c,"H2",{class:!0});var EIe=s(af);oE=n(EIe,"A",{id:!0,class:!0,href:!0});var Jvt=s(oE);y5e=n(Jvt,"SPAN",{});var Yvt=s(y5e);m(n8.$$.fragment,Yvt),Yvt.forEach(t),Jvt.forEach(t),rwr=i(EIe),L5e=n(EIe,"SPAN",{});var Kvt=s(L5e);twr=r(Kvt,"FlaxAutoModelForPreTraining"),Kvt.forEach(t),EIe.forEach(t),gPe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(s8.$$.fragment,_i),awr=i(_i),nf=n(_i,"P",{});var VJ=s(nf);nwr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),EW=n(VJ,"A",{href:!0});var Zvt=s(EW);swr=r(Zvt,"from_pretrained()"),Zvt.forEach(t),lwr=r(VJ," class method or the "),CW=n(VJ,"A",{href:!0});var eTt=s(CW);iwr=r(eTt,"from_config()"),eTt.forEach(t),dwr=r(VJ,` class
method.`),VJ.forEach(t),cwr=i(_i),l8=n(_i,"P",{});var CIe=s(l8);fwr=r(CIe,"This class cannot be instantiated directly using "),x5e=n(CIe,"CODE",{});var oTt=s(x5e);mwr=r(oTt,"__init__()"),oTt.forEach(t),gwr=r(CIe," (throws an error)."),CIe.forEach(t),hwr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(i8.$$.fragment,ui),pwr=i(ui),k5e=n(ui,"P",{});var rTt=s(k5e);_wr=r(rTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rTt.forEach(t),uwr=i(ui),sf=n(ui,"P",{});var XJ=s(sf);bwr=r(XJ,`Note:
Loading a model from its configuration file does `),S5e=n(XJ,"STRONG",{});var tTt=s(S5e);Fwr=r(tTt,"not"),tTt.forEach(t),vwr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(XJ,"A",{href:!0});var aTt=s(wW);Twr=r(aTt,"from_pretrained()"),aTt.forEach(t),Mwr=r(XJ," to load the model weights."),XJ.forEach(t),Ewr=i(ui),R5e=n(ui,"P",{});var nTt=s(R5e);Cwr=r(nTt,"Examples:"),nTt.forEach(t),wwr=i(ui),m(d8.$$.fragment,ui),ui.forEach(t),Awr=i(_i),ko=n(_i,"DIV",{class:!0});var ka=s(ko);m(c8.$$.fragment,ka),ywr=i(ka),B5e=n(ka,"P",{});var sTt=s(B5e);Lwr=r(sTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sTt.forEach(t),xwr=i(ka),Sn=n(ka,"P",{});var uC=s(Sn);kwr=r(uC,"The model class to instantiate is selected based on the "),P5e=n(uC,"CODE",{});var lTt=s(P5e);Swr=r(lTt,"model_type"),lTt.forEach(t),Rwr=r(uC,` property of the config object (either
passed as an argument or loaded from `),$5e=n(uC,"CODE",{});var iTt=s($5e);Bwr=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),Pwr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(uC,"CODE",{});var dTt=s(I5e);$wr=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),Iwr=r(uC,":"),uC.forEach(t),qwr=i(ka),me=n(ka,"UL",{});var _e=s(me);rE=n(_e,"LI",{});var hSe=s(rE);q5e=n(hSe,"STRONG",{});var cTt=s(q5e);Nwr=r(cTt,"albert"),cTt.forEach(t),jwr=r(hSe," \u2014 "),AW=n(hSe,"A",{href:!0});var fTt=s(AW);Dwr=r(fTt,"FlaxAlbertForPreTraining"),fTt.forEach(t),Gwr=r(hSe," (ALBERT model)"),hSe.forEach(t),Owr=i(_e),tE=n(_e,"LI",{});var pSe=s(tE);N5e=n(pSe,"STRONG",{});var mTt=s(N5e);Vwr=r(mTt,"bart"),mTt.forEach(t),Xwr=r(pSe," \u2014 "),yW=n(pSe,"A",{href:!0});var gTt=s(yW);zwr=r(gTt,"FlaxBartForConditionalGeneration"),gTt.forEach(t),Qwr=r(pSe," (BART model)"),pSe.forEach(t),Wwr=i(_e),aE=n(_e,"LI",{});var _Se=s(aE);j5e=n(_Se,"STRONG",{});var hTt=s(j5e);Hwr=r(hTt,"bert"),hTt.forEach(t),Uwr=r(_Se," \u2014 "),LW=n(_Se,"A",{href:!0});var pTt=s(LW);Jwr=r(pTt,"FlaxBertForPreTraining"),pTt.forEach(t),Ywr=r(_Se," (BERT model)"),_Se.forEach(t),Kwr=i(_e),nE=n(_e,"LI",{});var uSe=s(nE);D5e=n(uSe,"STRONG",{});var _Tt=s(D5e);Zwr=r(_Tt,"big_bird"),_Tt.forEach(t),eAr=r(uSe," \u2014 "),xW=n(uSe,"A",{href:!0});var uTt=s(xW);oAr=r(uTt,"FlaxBigBirdForPreTraining"),uTt.forEach(t),rAr=r(uSe," (BigBird model)"),uSe.forEach(t),tAr=i(_e),sE=n(_e,"LI",{});var bSe=s(sE);G5e=n(bSe,"STRONG",{});var bTt=s(G5e);aAr=r(bTt,"electra"),bTt.forEach(t),nAr=r(bSe," \u2014 "),kW=n(bSe,"A",{href:!0});var FTt=s(kW);sAr=r(FTt,"FlaxElectraForPreTraining"),FTt.forEach(t),lAr=r(bSe," (ELECTRA model)"),bSe.forEach(t),iAr=i(_e),lE=n(_e,"LI",{});var FSe=s(lE);O5e=n(FSe,"STRONG",{});var vTt=s(O5e);dAr=r(vTt,"mbart"),vTt.forEach(t),cAr=r(FSe," \u2014 "),SW=n(FSe,"A",{href:!0});var TTt=s(SW);fAr=r(TTt,"FlaxMBartForConditionalGeneration"),TTt.forEach(t),mAr=r(FSe," (mBART model)"),FSe.forEach(t),gAr=i(_e),iE=n(_e,"LI",{});var vSe=s(iE);V5e=n(vSe,"STRONG",{});var MTt=s(V5e);hAr=r(MTt,"mt5"),MTt.forEach(t),pAr=r(vSe," \u2014 "),RW=n(vSe,"A",{href:!0});var ETt=s(RW);_Ar=r(ETt,"FlaxMT5ForConditionalGeneration"),ETt.forEach(t),uAr=r(vSe," (mT5 model)"),vSe.forEach(t),bAr=i(_e),dE=n(_e,"LI",{});var TSe=s(dE);X5e=n(TSe,"STRONG",{});var CTt=s(X5e);FAr=r(CTt,"roberta"),CTt.forEach(t),vAr=r(TSe," \u2014 "),BW=n(TSe,"A",{href:!0});var wTt=s(BW);TAr=r(wTt,"FlaxRobertaForMaskedLM"),wTt.forEach(t),MAr=r(TSe," (RoBERTa model)"),TSe.forEach(t),EAr=i(_e),cE=n(_e,"LI",{});var MSe=s(cE);z5e=n(MSe,"STRONG",{});var ATt=s(z5e);CAr=r(ATt,"roformer"),ATt.forEach(t),wAr=r(MSe," \u2014 "),PW=n(MSe,"A",{href:!0});var yTt=s(PW);AAr=r(yTt,"FlaxRoFormerForMaskedLM"),yTt.forEach(t),yAr=r(MSe," (RoFormer model)"),MSe.forEach(t),LAr=i(_e),fE=n(_e,"LI",{});var ESe=s(fE);Q5e=n(ESe,"STRONG",{});var LTt=s(Q5e);xAr=r(LTt,"t5"),LTt.forEach(t),kAr=r(ESe," \u2014 "),$W=n(ESe,"A",{href:!0});var xTt=s($W);SAr=r(xTt,"FlaxT5ForConditionalGeneration"),xTt.forEach(t),RAr=r(ESe," (T5 model)"),ESe.forEach(t),BAr=i(_e),mE=n(_e,"LI",{});var CSe=s(mE);W5e=n(CSe,"STRONG",{});var kTt=s(W5e);PAr=r(kTt,"wav2vec2"),kTt.forEach(t),$Ar=r(CSe," \u2014 "),IW=n(CSe,"A",{href:!0});var STt=s(IW);IAr=r(STt,"FlaxWav2Vec2ForPreTraining"),STt.forEach(t),qAr=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),NAr=i(_e),gE=n(_e,"LI",{});var wSe=s(gE);H5e=n(wSe,"STRONG",{});var RTt=s(H5e);jAr=r(RTt,"xlm-roberta"),RTt.forEach(t),DAr=r(wSe," \u2014 "),qW=n(wSe,"A",{href:!0});var BTt=s(qW);GAr=r(BTt,"FlaxXLMRobertaForMaskedLM"),BTt.forEach(t),OAr=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),_e.forEach(t),VAr=i(ka),U5e=n(ka,"P",{});var PTt=s(U5e);XAr=r(PTt,"Examples:"),PTt.forEach(t),zAr=i(ka),m(f8.$$.fragment,ka),ka.forEach(t),_i.forEach(t),hPe=i(c),lf=n(c,"H2",{class:!0});var wIe=s(lf);hE=n(wIe,"A",{id:!0,class:!0,href:!0});var $Tt=s(hE);J5e=n($Tt,"SPAN",{});var ITt=s(J5e);m(m8.$$.fragment,ITt),ITt.forEach(t),$Tt.forEach(t),QAr=i(wIe),Y5e=n(wIe,"SPAN",{});var qTt=s(Y5e);WAr=r(qTt,"FlaxAutoModelForMaskedLM"),qTt.forEach(t),wIe.forEach(t),pPe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(g8.$$.fragment,bi),HAr=i(bi),df=n(bi,"P",{});var zJ=s(df);UAr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NW=n(zJ,"A",{href:!0});var NTt=s(NW);JAr=r(NTt,"from_pretrained()"),NTt.forEach(t),YAr=r(zJ," class method or the "),jW=n(zJ,"A",{href:!0});var jTt=s(jW);KAr=r(jTt,"from_config()"),jTt.forEach(t),ZAr=r(zJ,` class
method.`),zJ.forEach(t),e0r=i(bi),h8=n(bi,"P",{});var AIe=s(h8);o0r=r(AIe,"This class cannot be instantiated directly using "),K5e=n(AIe,"CODE",{});var DTt=s(K5e);r0r=r(DTt,"__init__()"),DTt.forEach(t),t0r=r(AIe," (throws an error)."),AIe.forEach(t),a0r=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(p8.$$.fragment,Fi),n0r=i(Fi),Z5e=n(Fi,"P",{});var GTt=s(Z5e);s0r=r(GTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GTt.forEach(t),l0r=i(Fi),cf=n(Fi,"P",{});var QJ=s(cf);i0r=r(QJ,`Note:
Loading a model from its configuration file does `),e2e=n(QJ,"STRONG",{});var OTt=s(e2e);d0r=r(OTt,"not"),OTt.forEach(t),c0r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DW=n(QJ,"A",{href:!0});var VTt=s(DW);f0r=r(VTt,"from_pretrained()"),VTt.forEach(t),m0r=r(QJ," to load the model weights."),QJ.forEach(t),g0r=i(Fi),o2e=n(Fi,"P",{});var XTt=s(o2e);h0r=r(XTt,"Examples:"),XTt.forEach(t),p0r=i(Fi),m(_8.$$.fragment,Fi),Fi.forEach(t),_0r=i(bi),So=n(bi,"DIV",{class:!0});var Sa=s(So);m(u8.$$.fragment,Sa),u0r=i(Sa),r2e=n(Sa,"P",{});var zTt=s(r2e);b0r=r(zTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zTt.forEach(t),F0r=i(Sa),Rn=n(Sa,"P",{});var bC=s(Rn);v0r=r(bC,"The model class to instantiate is selected based on the "),t2e=n(bC,"CODE",{});var QTt=s(t2e);T0r=r(QTt,"model_type"),QTt.forEach(t),M0r=r(bC,` property of the config object (either
passed as an argument or loaded from `),a2e=n(bC,"CODE",{});var WTt=s(a2e);E0r=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),C0r=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(bC,"CODE",{});var HTt=s(n2e);w0r=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),A0r=r(bC,":"),bC.forEach(t),y0r=i(Sa),Fe=n(Sa,"UL",{});var ye=s(Fe);pE=n(ye,"LI",{});var ASe=s(pE);s2e=n(ASe,"STRONG",{});var UTt=s(s2e);L0r=r(UTt,"albert"),UTt.forEach(t),x0r=r(ASe," \u2014 "),GW=n(ASe,"A",{href:!0});var JTt=s(GW);k0r=r(JTt,"FlaxAlbertForMaskedLM"),JTt.forEach(t),S0r=r(ASe," (ALBERT model)"),ASe.forEach(t),R0r=i(ye),_E=n(ye,"LI",{});var ySe=s(_E);l2e=n(ySe,"STRONG",{});var YTt=s(l2e);B0r=r(YTt,"bart"),YTt.forEach(t),P0r=r(ySe," \u2014 "),OW=n(ySe,"A",{href:!0});var KTt=s(OW);$0r=r(KTt,"FlaxBartForConditionalGeneration"),KTt.forEach(t),I0r=r(ySe," (BART model)"),ySe.forEach(t),q0r=i(ye),uE=n(ye,"LI",{});var LSe=s(uE);i2e=n(LSe,"STRONG",{});var ZTt=s(i2e);N0r=r(ZTt,"bert"),ZTt.forEach(t),j0r=r(LSe," \u2014 "),VW=n(LSe,"A",{href:!0});var eMt=s(VW);D0r=r(eMt,"FlaxBertForMaskedLM"),eMt.forEach(t),G0r=r(LSe," (BERT model)"),LSe.forEach(t),O0r=i(ye),bE=n(ye,"LI",{});var xSe=s(bE);d2e=n(xSe,"STRONG",{});var oMt=s(d2e);V0r=r(oMt,"big_bird"),oMt.forEach(t),X0r=r(xSe," \u2014 "),XW=n(xSe,"A",{href:!0});var rMt=s(XW);z0r=r(rMt,"FlaxBigBirdForMaskedLM"),rMt.forEach(t),Q0r=r(xSe," (BigBird model)"),xSe.forEach(t),W0r=i(ye),FE=n(ye,"LI",{});var kSe=s(FE);c2e=n(kSe,"STRONG",{});var tMt=s(c2e);H0r=r(tMt,"distilbert"),tMt.forEach(t),U0r=r(kSe," \u2014 "),zW=n(kSe,"A",{href:!0});var aMt=s(zW);J0r=r(aMt,"FlaxDistilBertForMaskedLM"),aMt.forEach(t),Y0r=r(kSe," (DistilBERT model)"),kSe.forEach(t),K0r=i(ye),vE=n(ye,"LI",{});var SSe=s(vE);f2e=n(SSe,"STRONG",{});var nMt=s(f2e);Z0r=r(nMt,"electra"),nMt.forEach(t),eyr=r(SSe," \u2014 "),QW=n(SSe,"A",{href:!0});var sMt=s(QW);oyr=r(sMt,"FlaxElectraForMaskedLM"),sMt.forEach(t),ryr=r(SSe," (ELECTRA model)"),SSe.forEach(t),tyr=i(ye),TE=n(ye,"LI",{});var RSe=s(TE);m2e=n(RSe,"STRONG",{});var lMt=s(m2e);ayr=r(lMt,"mbart"),lMt.forEach(t),nyr=r(RSe," \u2014 "),WW=n(RSe,"A",{href:!0});var iMt=s(WW);syr=r(iMt,"FlaxMBartForConditionalGeneration"),iMt.forEach(t),lyr=r(RSe," (mBART model)"),RSe.forEach(t),iyr=i(ye),ME=n(ye,"LI",{});var BSe=s(ME);g2e=n(BSe,"STRONG",{});var dMt=s(g2e);dyr=r(dMt,"roberta"),dMt.forEach(t),cyr=r(BSe," \u2014 "),HW=n(BSe,"A",{href:!0});var cMt=s(HW);fyr=r(cMt,"FlaxRobertaForMaskedLM"),cMt.forEach(t),myr=r(BSe," (RoBERTa model)"),BSe.forEach(t),gyr=i(ye),EE=n(ye,"LI",{});var PSe=s(EE);h2e=n(PSe,"STRONG",{});var fMt=s(h2e);hyr=r(fMt,"roformer"),fMt.forEach(t),pyr=r(PSe," \u2014 "),UW=n(PSe,"A",{href:!0});var mMt=s(UW);_yr=r(mMt,"FlaxRoFormerForMaskedLM"),mMt.forEach(t),uyr=r(PSe," (RoFormer model)"),PSe.forEach(t),byr=i(ye),CE=n(ye,"LI",{});var $Se=s(CE);p2e=n($Se,"STRONG",{});var gMt=s(p2e);Fyr=r(gMt,"xlm-roberta"),gMt.forEach(t),vyr=r($Se," \u2014 "),JW=n($Se,"A",{href:!0});var hMt=s(JW);Tyr=r(hMt,"FlaxXLMRobertaForMaskedLM"),hMt.forEach(t),Myr=r($Se," (XLM-RoBERTa model)"),$Se.forEach(t),ye.forEach(t),Eyr=i(Sa),_2e=n(Sa,"P",{});var pMt=s(_2e);Cyr=r(pMt,"Examples:"),pMt.forEach(t),wyr=i(Sa),m(b8.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),_Pe=i(c),ff=n(c,"H2",{class:!0});var yIe=s(ff);wE=n(yIe,"A",{id:!0,class:!0,href:!0});var _Mt=s(wE);u2e=n(_Mt,"SPAN",{});var uMt=s(u2e);m(F8.$$.fragment,uMt),uMt.forEach(t),_Mt.forEach(t),Ayr=i(yIe),b2e=n(yIe,"SPAN",{});var bMt=s(b2e);yyr=r(bMt,"FlaxAutoModelForSeq2SeqLM"),bMt.forEach(t),yIe.forEach(t),uPe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(v8.$$.fragment,vi),Lyr=i(vi),mf=n(vi,"P",{});var WJ=s(mf);xyr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),YW=n(WJ,"A",{href:!0});var FMt=s(YW);kyr=r(FMt,"from_pretrained()"),FMt.forEach(t),Syr=r(WJ," class method or the "),KW=n(WJ,"A",{href:!0});var vMt=s(KW);Ryr=r(vMt,"from_config()"),vMt.forEach(t),Byr=r(WJ,` class
method.`),WJ.forEach(t),Pyr=i(vi),T8=n(vi,"P",{});var LIe=s(T8);$yr=r(LIe,"This class cannot be instantiated directly using "),F2e=n(LIe,"CODE",{});var TMt=s(F2e);Iyr=r(TMt,"__init__()"),TMt.forEach(t),qyr=r(LIe," (throws an error)."),LIe.forEach(t),Nyr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(M8.$$.fragment,Ti),jyr=i(Ti),v2e=n(Ti,"P",{});var MMt=s(v2e);Dyr=r(MMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MMt.forEach(t),Gyr=i(Ti),gf=n(Ti,"P",{});var HJ=s(gf);Oyr=r(HJ,`Note:
Loading a model from its configuration file does `),T2e=n(HJ,"STRONG",{});var EMt=s(T2e);Vyr=r(EMt,"not"),EMt.forEach(t),Xyr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(HJ,"A",{href:!0});var CMt=s(ZW);zyr=r(CMt,"from_pretrained()"),CMt.forEach(t),Qyr=r(HJ," to load the model weights."),HJ.forEach(t),Wyr=i(Ti),M2e=n(Ti,"P",{});var wMt=s(M2e);Hyr=r(wMt,"Examples:"),wMt.forEach(t),Uyr=i(Ti),m(E8.$$.fragment,Ti),Ti.forEach(t),Jyr=i(vi),Ro=n(vi,"DIV",{class:!0});var Ra=s(Ro);m(C8.$$.fragment,Ra),Yyr=i(Ra),E2e=n(Ra,"P",{});var AMt=s(E2e);Kyr=r(AMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AMt.forEach(t),Zyr=i(Ra),Bn=n(Ra,"P",{});var FC=s(Bn);eLr=r(FC,"The model class to instantiate is selected based on the "),C2e=n(FC,"CODE",{});var yMt=s(C2e);oLr=r(yMt,"model_type"),yMt.forEach(t),rLr=r(FC,` property of the config object (either
passed as an argument or loaded from `),w2e=n(FC,"CODE",{});var LMt=s(w2e);tLr=r(LMt,"pretrained_model_name_or_path"),LMt.forEach(t),aLr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(FC,"CODE",{});var xMt=s(A2e);nLr=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),sLr=r(FC,":"),FC.forEach(t),lLr=i(Ra),Ce=n(Ra,"UL",{});var lo=s(Ce);AE=n(lo,"LI",{});var ISe=s(AE);y2e=n(ISe,"STRONG",{});var kMt=s(y2e);iLr=r(kMt,"bart"),kMt.forEach(t),dLr=r(ISe," \u2014 "),eH=n(ISe,"A",{href:!0});var SMt=s(eH);cLr=r(SMt,"FlaxBartForConditionalGeneration"),SMt.forEach(t),fLr=r(ISe," (BART model)"),ISe.forEach(t),mLr=i(lo),yE=n(lo,"LI",{});var qSe=s(yE);L2e=n(qSe,"STRONG",{});var RMt=s(L2e);gLr=r(RMt,"blenderbot"),RMt.forEach(t),hLr=r(qSe," \u2014 "),oH=n(qSe,"A",{href:!0});var BMt=s(oH);pLr=r(BMt,"FlaxBlenderbotForConditionalGeneration"),BMt.forEach(t),_Lr=r(qSe," (Blenderbot model)"),qSe.forEach(t),uLr=i(lo),LE=n(lo,"LI",{});var NSe=s(LE);x2e=n(NSe,"STRONG",{});var PMt=s(x2e);bLr=r(PMt,"blenderbot-small"),PMt.forEach(t),FLr=r(NSe," \u2014 "),rH=n(NSe,"A",{href:!0});var $Mt=s(rH);vLr=r($Mt,"FlaxBlenderbotSmallForConditionalGeneration"),$Mt.forEach(t),TLr=r(NSe," (BlenderbotSmall model)"),NSe.forEach(t),MLr=i(lo),xE=n(lo,"LI",{});var jSe=s(xE);k2e=n(jSe,"STRONG",{});var IMt=s(k2e);ELr=r(IMt,"encoder-decoder"),IMt.forEach(t),CLr=r(jSe," \u2014 "),tH=n(jSe,"A",{href:!0});var qMt=s(tH);wLr=r(qMt,"FlaxEncoderDecoderModel"),qMt.forEach(t),ALr=r(jSe," (Encoder decoder model)"),jSe.forEach(t),yLr=i(lo),kE=n(lo,"LI",{});var DSe=s(kE);S2e=n(DSe,"STRONG",{});var NMt=s(S2e);LLr=r(NMt,"marian"),NMt.forEach(t),xLr=r(DSe," \u2014 "),aH=n(DSe,"A",{href:!0});var jMt=s(aH);kLr=r(jMt,"FlaxMarianMTModel"),jMt.forEach(t),SLr=r(DSe," (Marian model)"),DSe.forEach(t),RLr=i(lo),SE=n(lo,"LI",{});var GSe=s(SE);R2e=n(GSe,"STRONG",{});var DMt=s(R2e);BLr=r(DMt,"mbart"),DMt.forEach(t),PLr=r(GSe," \u2014 "),nH=n(GSe,"A",{href:!0});var GMt=s(nH);$Lr=r(GMt,"FlaxMBartForConditionalGeneration"),GMt.forEach(t),ILr=r(GSe," (mBART model)"),GSe.forEach(t),qLr=i(lo),RE=n(lo,"LI",{});var OSe=s(RE);B2e=n(OSe,"STRONG",{});var OMt=s(B2e);NLr=r(OMt,"mt5"),OMt.forEach(t),jLr=r(OSe," \u2014 "),sH=n(OSe,"A",{href:!0});var VMt=s(sH);DLr=r(VMt,"FlaxMT5ForConditionalGeneration"),VMt.forEach(t),GLr=r(OSe," (mT5 model)"),OSe.forEach(t),OLr=i(lo),BE=n(lo,"LI",{});var VSe=s(BE);P2e=n(VSe,"STRONG",{});var XMt=s(P2e);VLr=r(XMt,"pegasus"),XMt.forEach(t),XLr=r(VSe," \u2014 "),lH=n(VSe,"A",{href:!0});var zMt=s(lH);zLr=r(zMt,"FlaxPegasusForConditionalGeneration"),zMt.forEach(t),QLr=r(VSe," (Pegasus model)"),VSe.forEach(t),WLr=i(lo),PE=n(lo,"LI",{});var XSe=s(PE);$2e=n(XSe,"STRONG",{});var QMt=s($2e);HLr=r(QMt,"t5"),QMt.forEach(t),ULr=r(XSe," \u2014 "),iH=n(XSe,"A",{href:!0});var WMt=s(iH);JLr=r(WMt,"FlaxT5ForConditionalGeneration"),WMt.forEach(t),YLr=r(XSe," (T5 model)"),XSe.forEach(t),lo.forEach(t),KLr=i(Ra),I2e=n(Ra,"P",{});var HMt=s(I2e);ZLr=r(HMt,"Examples:"),HMt.forEach(t),e8r=i(Ra),m(w8.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),bPe=i(c),hf=n(c,"H2",{class:!0});var xIe=s(hf);$E=n(xIe,"A",{id:!0,class:!0,href:!0});var UMt=s($E);q2e=n(UMt,"SPAN",{});var JMt=s(q2e);m(A8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),o8r=i(xIe),N2e=n(xIe,"SPAN",{});var YMt=s(N2e);r8r=r(YMt,"FlaxAutoModelForSequenceClassification"),YMt.forEach(t),xIe.forEach(t),FPe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(y8.$$.fragment,Mi),t8r=i(Mi),pf=n(Mi,"P",{});var UJ=s(pf);a8r=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dH=n(UJ,"A",{href:!0});var KMt=s(dH);n8r=r(KMt,"from_pretrained()"),KMt.forEach(t),s8r=r(UJ," class method or the "),cH=n(UJ,"A",{href:!0});var ZMt=s(cH);l8r=r(ZMt,"from_config()"),ZMt.forEach(t),i8r=r(UJ,` class
method.`),UJ.forEach(t),d8r=i(Mi),L8=n(Mi,"P",{});var kIe=s(L8);c8r=r(kIe,"This class cannot be instantiated directly using "),j2e=n(kIe,"CODE",{});var eEt=s(j2e);f8r=r(eEt,"__init__()"),eEt.forEach(t),m8r=r(kIe," (throws an error)."),kIe.forEach(t),g8r=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(x8.$$.fragment,Ei),h8r=i(Ei),D2e=n(Ei,"P",{});var oEt=s(D2e);p8r=r(oEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oEt.forEach(t),_8r=i(Ei),_f=n(Ei,"P",{});var JJ=s(_f);u8r=r(JJ,`Note:
Loading a model from its configuration file does `),G2e=n(JJ,"STRONG",{});var rEt=s(G2e);b8r=r(rEt,"not"),rEt.forEach(t),F8r=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(JJ,"A",{href:!0});var tEt=s(fH);v8r=r(tEt,"from_pretrained()"),tEt.forEach(t),T8r=r(JJ," to load the model weights."),JJ.forEach(t),M8r=i(Ei),O2e=n(Ei,"P",{});var aEt=s(O2e);E8r=r(aEt,"Examples:"),aEt.forEach(t),C8r=i(Ei),m(k8.$$.fragment,Ei),Ei.forEach(t),w8r=i(Mi),Bo=n(Mi,"DIV",{class:!0});var Ba=s(Bo);m(S8.$$.fragment,Ba),A8r=i(Ba),V2e=n(Ba,"P",{});var nEt=s(V2e);y8r=r(nEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nEt.forEach(t),L8r=i(Ba),Pn=n(Ba,"P",{});var vC=s(Pn);x8r=r(vC,"The model class to instantiate is selected based on the "),X2e=n(vC,"CODE",{});var sEt=s(X2e);k8r=r(sEt,"model_type"),sEt.forEach(t),S8r=r(vC,` property of the config object (either
passed as an argument or loaded from `),z2e=n(vC,"CODE",{});var lEt=s(z2e);R8r=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),B8r=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(vC,"CODE",{});var iEt=s(Q2e);P8r=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),$8r=r(vC,":"),vC.forEach(t),I8r=i(Ba),ve=n(Ba,"UL",{});var Le=s(ve);IE=n(Le,"LI",{});var zSe=s(IE);W2e=n(zSe,"STRONG",{});var dEt=s(W2e);q8r=r(dEt,"albert"),dEt.forEach(t),N8r=r(zSe," \u2014 "),mH=n(zSe,"A",{href:!0});var cEt=s(mH);j8r=r(cEt,"FlaxAlbertForSequenceClassification"),cEt.forEach(t),D8r=r(zSe," (ALBERT model)"),zSe.forEach(t),G8r=i(Le),qE=n(Le,"LI",{});var QSe=s(qE);H2e=n(QSe,"STRONG",{});var fEt=s(H2e);O8r=r(fEt,"bart"),fEt.forEach(t),V8r=r(QSe," \u2014 "),gH=n(QSe,"A",{href:!0});var mEt=s(gH);X8r=r(mEt,"FlaxBartForSequenceClassification"),mEt.forEach(t),z8r=r(QSe," (BART model)"),QSe.forEach(t),Q8r=i(Le),NE=n(Le,"LI",{});var WSe=s(NE);U2e=n(WSe,"STRONG",{});var gEt=s(U2e);W8r=r(gEt,"bert"),gEt.forEach(t),H8r=r(WSe," \u2014 "),hH=n(WSe,"A",{href:!0});var hEt=s(hH);U8r=r(hEt,"FlaxBertForSequenceClassification"),hEt.forEach(t),J8r=r(WSe," (BERT model)"),WSe.forEach(t),Y8r=i(Le),jE=n(Le,"LI",{});var HSe=s(jE);J2e=n(HSe,"STRONG",{});var pEt=s(J2e);K8r=r(pEt,"big_bird"),pEt.forEach(t),Z8r=r(HSe," \u2014 "),pH=n(HSe,"A",{href:!0});var _Et=s(pH);e7r=r(_Et,"FlaxBigBirdForSequenceClassification"),_Et.forEach(t),o7r=r(HSe," (BigBird model)"),HSe.forEach(t),r7r=i(Le),DE=n(Le,"LI",{});var USe=s(DE);Y2e=n(USe,"STRONG",{});var uEt=s(Y2e);t7r=r(uEt,"distilbert"),uEt.forEach(t),a7r=r(USe," \u2014 "),_H=n(USe,"A",{href:!0});var bEt=s(_H);n7r=r(bEt,"FlaxDistilBertForSequenceClassification"),bEt.forEach(t),s7r=r(USe," (DistilBERT model)"),USe.forEach(t),l7r=i(Le),GE=n(Le,"LI",{});var JSe=s(GE);K2e=n(JSe,"STRONG",{});var FEt=s(K2e);i7r=r(FEt,"electra"),FEt.forEach(t),d7r=r(JSe," \u2014 "),uH=n(JSe,"A",{href:!0});var vEt=s(uH);c7r=r(vEt,"FlaxElectraForSequenceClassification"),vEt.forEach(t),f7r=r(JSe," (ELECTRA model)"),JSe.forEach(t),m7r=i(Le),OE=n(Le,"LI",{});var YSe=s(OE);Z2e=n(YSe,"STRONG",{});var TEt=s(Z2e);g7r=r(TEt,"mbart"),TEt.forEach(t),h7r=r(YSe," \u2014 "),bH=n(YSe,"A",{href:!0});var MEt=s(bH);p7r=r(MEt,"FlaxMBartForSequenceClassification"),MEt.forEach(t),_7r=r(YSe," (mBART model)"),YSe.forEach(t),u7r=i(Le),VE=n(Le,"LI",{});var KSe=s(VE);eFe=n(KSe,"STRONG",{});var EEt=s(eFe);b7r=r(EEt,"roberta"),EEt.forEach(t),F7r=r(KSe," \u2014 "),FH=n(KSe,"A",{href:!0});var CEt=s(FH);v7r=r(CEt,"FlaxRobertaForSequenceClassification"),CEt.forEach(t),T7r=r(KSe," (RoBERTa model)"),KSe.forEach(t),M7r=i(Le),XE=n(Le,"LI",{});var ZSe=s(XE);oFe=n(ZSe,"STRONG",{});var wEt=s(oFe);E7r=r(wEt,"roformer"),wEt.forEach(t),C7r=r(ZSe," \u2014 "),vH=n(ZSe,"A",{href:!0});var AEt=s(vH);w7r=r(AEt,"FlaxRoFormerForSequenceClassification"),AEt.forEach(t),A7r=r(ZSe," (RoFormer model)"),ZSe.forEach(t),y7r=i(Le),zE=n(Le,"LI",{});var eRe=s(zE);rFe=n(eRe,"STRONG",{});var yEt=s(rFe);L7r=r(yEt,"xlm-roberta"),yEt.forEach(t),x7r=r(eRe," \u2014 "),TH=n(eRe,"A",{href:!0});var LEt=s(TH);k7r=r(LEt,"FlaxXLMRobertaForSequenceClassification"),LEt.forEach(t),S7r=r(eRe," (XLM-RoBERTa model)"),eRe.forEach(t),Le.forEach(t),R7r=i(Ba),tFe=n(Ba,"P",{});var xEt=s(tFe);B7r=r(xEt,"Examples:"),xEt.forEach(t),P7r=i(Ba),m(R8.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),vPe=i(c),uf=n(c,"H2",{class:!0});var SIe=s(uf);QE=n(SIe,"A",{id:!0,class:!0,href:!0});var kEt=s(QE);aFe=n(kEt,"SPAN",{});var SEt=s(aFe);m(B8.$$.fragment,SEt),SEt.forEach(t),kEt.forEach(t),$7r=i(SIe),nFe=n(SIe,"SPAN",{});var REt=s(nFe);I7r=r(REt,"FlaxAutoModelForQuestionAnswering"),REt.forEach(t),SIe.forEach(t),TPe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(P8.$$.fragment,Ci),q7r=i(Ci),bf=n(Ci,"P",{});var YJ=s(bf);N7r=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MH=n(YJ,"A",{href:!0});var BEt=s(MH);j7r=r(BEt,"from_pretrained()"),BEt.forEach(t),D7r=r(YJ," class method or the "),EH=n(YJ,"A",{href:!0});var PEt=s(EH);G7r=r(PEt,"from_config()"),PEt.forEach(t),O7r=r(YJ,` class
method.`),YJ.forEach(t),V7r=i(Ci),$8=n(Ci,"P",{});var RIe=s($8);X7r=r(RIe,"This class cannot be instantiated directly using "),sFe=n(RIe,"CODE",{});var $Et=s(sFe);z7r=r($Et,"__init__()"),$Et.forEach(t),Q7r=r(RIe," (throws an error)."),RIe.forEach(t),W7r=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(I8.$$.fragment,wi),H7r=i(wi),lFe=n(wi,"P",{});var IEt=s(lFe);U7r=r(IEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),IEt.forEach(t),J7r=i(wi),Ff=n(wi,"P",{});var KJ=s(Ff);Y7r=r(KJ,`Note:
Loading a model from its configuration file does `),iFe=n(KJ,"STRONG",{});var qEt=s(iFe);K7r=r(qEt,"not"),qEt.forEach(t),Z7r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(KJ,"A",{href:!0});var NEt=s(CH);e9r=r(NEt,"from_pretrained()"),NEt.forEach(t),o9r=r(KJ," to load the model weights."),KJ.forEach(t),r9r=i(wi),dFe=n(wi,"P",{});var jEt=s(dFe);t9r=r(jEt,"Examples:"),jEt.forEach(t),a9r=i(wi),m(q8.$$.fragment,wi),wi.forEach(t),n9r=i(Ci),Po=n(Ci,"DIV",{class:!0});var Pa=s(Po);m(N8.$$.fragment,Pa),s9r=i(Pa),cFe=n(Pa,"P",{});var DEt=s(cFe);l9r=r(DEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DEt.forEach(t),i9r=i(Pa),$n=n(Pa,"P",{});var TC=s($n);d9r=r(TC,"The model class to instantiate is selected based on the "),fFe=n(TC,"CODE",{});var GEt=s(fFe);c9r=r(GEt,"model_type"),GEt.forEach(t),f9r=r(TC,` property of the config object (either
passed as an argument or loaded from `),mFe=n(TC,"CODE",{});var OEt=s(mFe);m9r=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),g9r=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(TC,"CODE",{});var VEt=s(gFe);h9r=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),p9r=r(TC,":"),TC.forEach(t),_9r=i(Pa),Te=n(Pa,"UL",{});var xe=s(Te);WE=n(xe,"LI",{});var oRe=s(WE);hFe=n(oRe,"STRONG",{});var XEt=s(hFe);u9r=r(XEt,"albert"),XEt.forEach(t),b9r=r(oRe," \u2014 "),wH=n(oRe,"A",{href:!0});var zEt=s(wH);F9r=r(zEt,"FlaxAlbertForQuestionAnswering"),zEt.forEach(t),v9r=r(oRe," (ALBERT model)"),oRe.forEach(t),T9r=i(xe),HE=n(xe,"LI",{});var rRe=s(HE);pFe=n(rRe,"STRONG",{});var QEt=s(pFe);M9r=r(QEt,"bart"),QEt.forEach(t),E9r=r(rRe," \u2014 "),AH=n(rRe,"A",{href:!0});var WEt=s(AH);C9r=r(WEt,"FlaxBartForQuestionAnswering"),WEt.forEach(t),w9r=r(rRe," (BART model)"),rRe.forEach(t),A9r=i(xe),UE=n(xe,"LI",{});var tRe=s(UE);_Fe=n(tRe,"STRONG",{});var HEt=s(_Fe);y9r=r(HEt,"bert"),HEt.forEach(t),L9r=r(tRe," \u2014 "),yH=n(tRe,"A",{href:!0});var UEt=s(yH);x9r=r(UEt,"FlaxBertForQuestionAnswering"),UEt.forEach(t),k9r=r(tRe," (BERT model)"),tRe.forEach(t),S9r=i(xe),JE=n(xe,"LI",{});var aRe=s(JE);uFe=n(aRe,"STRONG",{});var JEt=s(uFe);R9r=r(JEt,"big_bird"),JEt.forEach(t),B9r=r(aRe," \u2014 "),LH=n(aRe,"A",{href:!0});var YEt=s(LH);P9r=r(YEt,"FlaxBigBirdForQuestionAnswering"),YEt.forEach(t),$9r=r(aRe," (BigBird model)"),aRe.forEach(t),I9r=i(xe),YE=n(xe,"LI",{});var nRe=s(YE);bFe=n(nRe,"STRONG",{});var KEt=s(bFe);q9r=r(KEt,"distilbert"),KEt.forEach(t),N9r=r(nRe," \u2014 "),xH=n(nRe,"A",{href:!0});var ZEt=s(xH);j9r=r(ZEt,"FlaxDistilBertForQuestionAnswering"),ZEt.forEach(t),D9r=r(nRe," (DistilBERT model)"),nRe.forEach(t),G9r=i(xe),KE=n(xe,"LI",{});var sRe=s(KE);FFe=n(sRe,"STRONG",{});var e3t=s(FFe);O9r=r(e3t,"electra"),e3t.forEach(t),V9r=r(sRe," \u2014 "),kH=n(sRe,"A",{href:!0});var o3t=s(kH);X9r=r(o3t,"FlaxElectraForQuestionAnswering"),o3t.forEach(t),z9r=r(sRe," (ELECTRA model)"),sRe.forEach(t),Q9r=i(xe),ZE=n(xe,"LI",{});var lRe=s(ZE);vFe=n(lRe,"STRONG",{});var r3t=s(vFe);W9r=r(r3t,"mbart"),r3t.forEach(t),H9r=r(lRe," \u2014 "),SH=n(lRe,"A",{href:!0});var t3t=s(SH);U9r=r(t3t,"FlaxMBartForQuestionAnswering"),t3t.forEach(t),J9r=r(lRe," (mBART model)"),lRe.forEach(t),Y9r=i(xe),e3=n(xe,"LI",{});var iRe=s(e3);TFe=n(iRe,"STRONG",{});var a3t=s(TFe);K9r=r(a3t,"roberta"),a3t.forEach(t),Z9r=r(iRe," \u2014 "),RH=n(iRe,"A",{href:!0});var n3t=s(RH);exr=r(n3t,"FlaxRobertaForQuestionAnswering"),n3t.forEach(t),oxr=r(iRe," (RoBERTa model)"),iRe.forEach(t),rxr=i(xe),o3=n(xe,"LI",{});var dRe=s(o3);MFe=n(dRe,"STRONG",{});var s3t=s(MFe);txr=r(s3t,"roformer"),s3t.forEach(t),axr=r(dRe," \u2014 "),BH=n(dRe,"A",{href:!0});var l3t=s(BH);nxr=r(l3t,"FlaxRoFormerForQuestionAnswering"),l3t.forEach(t),sxr=r(dRe," (RoFormer model)"),dRe.forEach(t),lxr=i(xe),r3=n(xe,"LI",{});var cRe=s(r3);EFe=n(cRe,"STRONG",{});var i3t=s(EFe);ixr=r(i3t,"xlm-roberta"),i3t.forEach(t),dxr=r(cRe," \u2014 "),PH=n(cRe,"A",{href:!0});var d3t=s(PH);cxr=r(d3t,"FlaxXLMRobertaForQuestionAnswering"),d3t.forEach(t),fxr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),xe.forEach(t),mxr=i(Pa),CFe=n(Pa,"P",{});var c3t=s(CFe);gxr=r(c3t,"Examples:"),c3t.forEach(t),hxr=i(Pa),m(j8.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),MPe=i(c),vf=n(c,"H2",{class:!0});var BIe=s(vf);t3=n(BIe,"A",{id:!0,class:!0,href:!0});var f3t=s(t3);wFe=n(f3t,"SPAN",{});var m3t=s(wFe);m(D8.$$.fragment,m3t),m3t.forEach(t),f3t.forEach(t),pxr=i(BIe),AFe=n(BIe,"SPAN",{});var g3t=s(AFe);_xr=r(g3t,"FlaxAutoModelForTokenClassification"),g3t.forEach(t),BIe.forEach(t),EPe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(G8.$$.fragment,Ai),uxr=i(Ai),Tf=n(Ai,"P",{});var ZJ=s(Tf);bxr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),$H=n(ZJ,"A",{href:!0});var h3t=s($H);Fxr=r(h3t,"from_pretrained()"),h3t.forEach(t),vxr=r(ZJ," class method or the "),IH=n(ZJ,"A",{href:!0});var p3t=s(IH);Txr=r(p3t,"from_config()"),p3t.forEach(t),Mxr=r(ZJ,` class
method.`),ZJ.forEach(t),Exr=i(Ai),O8=n(Ai,"P",{});var PIe=s(O8);Cxr=r(PIe,"This class cannot be instantiated directly using "),yFe=n(PIe,"CODE",{});var _3t=s(yFe);wxr=r(_3t,"__init__()"),_3t.forEach(t),Axr=r(PIe," (throws an error)."),PIe.forEach(t),yxr=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(V8.$$.fragment,yi),Lxr=i(yi),LFe=n(yi,"P",{});var u3t=s(LFe);xxr=r(u3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),u3t.forEach(t),kxr=i(yi),Mf=n(yi,"P",{});var eY=s(Mf);Sxr=r(eY,`Note:
Loading a model from its configuration file does `),xFe=n(eY,"STRONG",{});var b3t=s(xFe);Rxr=r(b3t,"not"),b3t.forEach(t),Bxr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(eY,"A",{href:!0});var F3t=s(qH);Pxr=r(F3t,"from_pretrained()"),F3t.forEach(t),$xr=r(eY," to load the model weights."),eY.forEach(t),Ixr=i(yi),kFe=n(yi,"P",{});var v3t=s(kFe);qxr=r(v3t,"Examples:"),v3t.forEach(t),Nxr=i(yi),m(X8.$$.fragment,yi),yi.forEach(t),jxr=i(Ai),$o=n(Ai,"DIV",{class:!0});var $a=s($o);m(z8.$$.fragment,$a),Dxr=i($a),SFe=n($a,"P",{});var T3t=s(SFe);Gxr=r(T3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),T3t.forEach(t),Oxr=i($a),In=n($a,"P",{});var MC=s(In);Vxr=r(MC,"The model class to instantiate is selected based on the "),RFe=n(MC,"CODE",{});var M3t=s(RFe);Xxr=r(M3t,"model_type"),M3t.forEach(t),zxr=r(MC,` property of the config object (either
passed as an argument or loaded from `),BFe=n(MC,"CODE",{});var E3t=s(BFe);Qxr=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),Wxr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(MC,"CODE",{});var C3t=s(PFe);Hxr=r(C3t,"pretrained_model_name_or_path"),C3t.forEach(t),Uxr=r(MC,":"),MC.forEach(t),Jxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);a3=n(Oo,"LI",{});var fRe=s(a3);$Fe=n(fRe,"STRONG",{});var w3t=s($Fe);Yxr=r(w3t,"albert"),w3t.forEach(t),Kxr=r(fRe," \u2014 "),NH=n(fRe,"A",{href:!0});var A3t=s(NH);Zxr=r(A3t,"FlaxAlbertForTokenClassification"),A3t.forEach(t),ekr=r(fRe," (ALBERT model)"),fRe.forEach(t),okr=i(Oo),n3=n(Oo,"LI",{});var mRe=s(n3);IFe=n(mRe,"STRONG",{});var y3t=s(IFe);rkr=r(y3t,"bert"),y3t.forEach(t),tkr=r(mRe," \u2014 "),jH=n(mRe,"A",{href:!0});var L3t=s(jH);akr=r(L3t,"FlaxBertForTokenClassification"),L3t.forEach(t),nkr=r(mRe," (BERT model)"),mRe.forEach(t),skr=i(Oo),s3=n(Oo,"LI",{});var gRe=s(s3);qFe=n(gRe,"STRONG",{});var x3t=s(qFe);lkr=r(x3t,"big_bird"),x3t.forEach(t),ikr=r(gRe," \u2014 "),DH=n(gRe,"A",{href:!0});var k3t=s(DH);dkr=r(k3t,"FlaxBigBirdForTokenClassification"),k3t.forEach(t),ckr=r(gRe," (BigBird model)"),gRe.forEach(t),fkr=i(Oo),l3=n(Oo,"LI",{});var hRe=s(l3);NFe=n(hRe,"STRONG",{});var S3t=s(NFe);mkr=r(S3t,"distilbert"),S3t.forEach(t),gkr=r(hRe," \u2014 "),GH=n(hRe,"A",{href:!0});var R3t=s(GH);hkr=r(R3t,"FlaxDistilBertForTokenClassification"),R3t.forEach(t),pkr=r(hRe," (DistilBERT model)"),hRe.forEach(t),_kr=i(Oo),i3=n(Oo,"LI",{});var pRe=s(i3);jFe=n(pRe,"STRONG",{});var B3t=s(jFe);ukr=r(B3t,"electra"),B3t.forEach(t),bkr=r(pRe," \u2014 "),OH=n(pRe,"A",{href:!0});var P3t=s(OH);Fkr=r(P3t,"FlaxElectraForTokenClassification"),P3t.forEach(t),vkr=r(pRe," (ELECTRA model)"),pRe.forEach(t),Tkr=i(Oo),d3=n(Oo,"LI",{});var _Re=s(d3);DFe=n(_Re,"STRONG",{});var $3t=s(DFe);Mkr=r($3t,"roberta"),$3t.forEach(t),Ekr=r(_Re," \u2014 "),VH=n(_Re,"A",{href:!0});var I3t=s(VH);Ckr=r(I3t,"FlaxRobertaForTokenClassification"),I3t.forEach(t),wkr=r(_Re," (RoBERTa model)"),_Re.forEach(t),Akr=i(Oo),c3=n(Oo,"LI",{});var uRe=s(c3);GFe=n(uRe,"STRONG",{});var q3t=s(GFe);ykr=r(q3t,"roformer"),q3t.forEach(t),Lkr=r(uRe," \u2014 "),XH=n(uRe,"A",{href:!0});var N3t=s(XH);xkr=r(N3t,"FlaxRoFormerForTokenClassification"),N3t.forEach(t),kkr=r(uRe," (RoFormer model)"),uRe.forEach(t),Skr=i(Oo),f3=n(Oo,"LI",{});var bRe=s(f3);OFe=n(bRe,"STRONG",{});var j3t=s(OFe);Rkr=r(j3t,"xlm-roberta"),j3t.forEach(t),Bkr=r(bRe," \u2014 "),zH=n(bRe,"A",{href:!0});var D3t=s(zH);Pkr=r(D3t,"FlaxXLMRobertaForTokenClassification"),D3t.forEach(t),$kr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Oo.forEach(t),Ikr=i($a),VFe=n($a,"P",{});var G3t=s(VFe);qkr=r(G3t,"Examples:"),G3t.forEach(t),Nkr=i($a),m(Q8.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),CPe=i(c),Ef=n(c,"H2",{class:!0});var $Ie=s(Ef);m3=n($Ie,"A",{id:!0,class:!0,href:!0});var O3t=s(m3);XFe=n(O3t,"SPAN",{});var V3t=s(XFe);m(W8.$$.fragment,V3t),V3t.forEach(t),O3t.forEach(t),jkr=i($Ie),zFe=n($Ie,"SPAN",{});var X3t=s(zFe);Dkr=r(X3t,"FlaxAutoModelForMultipleChoice"),X3t.forEach(t),$Ie.forEach(t),wPe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(H8.$$.fragment,Li),Gkr=i(Li),Cf=n(Li,"P",{});var oY=s(Cf);Okr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),QH=n(oY,"A",{href:!0});var z3t=s(QH);Vkr=r(z3t,"from_pretrained()"),z3t.forEach(t),Xkr=r(oY," class method or the "),WH=n(oY,"A",{href:!0});var Q3t=s(WH);zkr=r(Q3t,"from_config()"),Q3t.forEach(t),Qkr=r(oY,` class
method.`),oY.forEach(t),Wkr=i(Li),U8=n(Li,"P",{});var IIe=s(U8);Hkr=r(IIe,"This class cannot be instantiated directly using "),QFe=n(IIe,"CODE",{});var W3t=s(QFe);Ukr=r(W3t,"__init__()"),W3t.forEach(t),Jkr=r(IIe," (throws an error)."),IIe.forEach(t),Ykr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(J8.$$.fragment,xi),Kkr=i(xi),WFe=n(xi,"P",{});var H3t=s(WFe);Zkr=r(H3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),H3t.forEach(t),eSr=i(xi),wf=n(xi,"P",{});var rY=s(wf);oSr=r(rY,`Note:
Loading a model from its configuration file does `),HFe=n(rY,"STRONG",{});var U3t=s(HFe);rSr=r(U3t,"not"),U3t.forEach(t),tSr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(rY,"A",{href:!0});var J3t=s(HH);aSr=r(J3t,"from_pretrained()"),J3t.forEach(t),nSr=r(rY," to load the model weights."),rY.forEach(t),sSr=i(xi),UFe=n(xi,"P",{});var Y3t=s(UFe);lSr=r(Y3t,"Examples:"),Y3t.forEach(t),iSr=i(xi),m(Y8.$$.fragment,xi),xi.forEach(t),dSr=i(Li),Io=n(Li,"DIV",{class:!0});var Ia=s(Io);m(K8.$$.fragment,Ia),cSr=i(Ia),JFe=n(Ia,"P",{});var K3t=s(JFe);fSr=r(K3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),K3t.forEach(t),mSr=i(Ia),qn=n(Ia,"P",{});var EC=s(qn);gSr=r(EC,"The model class to instantiate is selected based on the "),YFe=n(EC,"CODE",{});var Z3t=s(YFe);hSr=r(Z3t,"model_type"),Z3t.forEach(t),pSr=r(EC,` property of the config object (either
passed as an argument or loaded from `),KFe=n(EC,"CODE",{});var eCt=s(KFe);_Sr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),uSr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(EC,"CODE",{});var oCt=s(ZFe);bSr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),FSr=r(EC,":"),EC.forEach(t),vSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);g3=n(Vo,"LI",{});var FRe=s(g3);eve=n(FRe,"STRONG",{});var rCt=s(eve);TSr=r(rCt,"albert"),rCt.forEach(t),MSr=r(FRe," \u2014 "),UH=n(FRe,"A",{href:!0});var tCt=s(UH);ESr=r(tCt,"FlaxAlbertForMultipleChoice"),tCt.forEach(t),CSr=r(FRe," (ALBERT model)"),FRe.forEach(t),wSr=i(Vo),h3=n(Vo,"LI",{});var vRe=s(h3);ove=n(vRe,"STRONG",{});var aCt=s(ove);ASr=r(aCt,"bert"),aCt.forEach(t),ySr=r(vRe," \u2014 "),JH=n(vRe,"A",{href:!0});var nCt=s(JH);LSr=r(nCt,"FlaxBertForMultipleChoice"),nCt.forEach(t),xSr=r(vRe," (BERT model)"),vRe.forEach(t),kSr=i(Vo),p3=n(Vo,"LI",{});var TRe=s(p3);rve=n(TRe,"STRONG",{});var sCt=s(rve);SSr=r(sCt,"big_bird"),sCt.forEach(t),RSr=r(TRe," \u2014 "),YH=n(TRe,"A",{href:!0});var lCt=s(YH);BSr=r(lCt,"FlaxBigBirdForMultipleChoice"),lCt.forEach(t),PSr=r(TRe," (BigBird model)"),TRe.forEach(t),$Sr=i(Vo),_3=n(Vo,"LI",{});var MRe=s(_3);tve=n(MRe,"STRONG",{});var iCt=s(tve);ISr=r(iCt,"distilbert"),iCt.forEach(t),qSr=r(MRe," \u2014 "),KH=n(MRe,"A",{href:!0});var dCt=s(KH);NSr=r(dCt,"FlaxDistilBertForMultipleChoice"),dCt.forEach(t),jSr=r(MRe," (DistilBERT model)"),MRe.forEach(t),DSr=i(Vo),u3=n(Vo,"LI",{});var ERe=s(u3);ave=n(ERe,"STRONG",{});var cCt=s(ave);GSr=r(cCt,"electra"),cCt.forEach(t),OSr=r(ERe," \u2014 "),ZH=n(ERe,"A",{href:!0});var fCt=s(ZH);VSr=r(fCt,"FlaxElectraForMultipleChoice"),fCt.forEach(t),XSr=r(ERe," (ELECTRA model)"),ERe.forEach(t),zSr=i(Vo),b3=n(Vo,"LI",{});var CRe=s(b3);nve=n(CRe,"STRONG",{});var mCt=s(nve);QSr=r(mCt,"roberta"),mCt.forEach(t),WSr=r(CRe," \u2014 "),eU=n(CRe,"A",{href:!0});var gCt=s(eU);HSr=r(gCt,"FlaxRobertaForMultipleChoice"),gCt.forEach(t),USr=r(CRe," (RoBERTa model)"),CRe.forEach(t),JSr=i(Vo),F3=n(Vo,"LI",{});var wRe=s(F3);sve=n(wRe,"STRONG",{});var hCt=s(sve);YSr=r(hCt,"roformer"),hCt.forEach(t),KSr=r(wRe," \u2014 "),oU=n(wRe,"A",{href:!0});var pCt=s(oU);ZSr=r(pCt,"FlaxRoFormerForMultipleChoice"),pCt.forEach(t),eRr=r(wRe," (RoFormer model)"),wRe.forEach(t),oRr=i(Vo),v3=n(Vo,"LI",{});var ARe=s(v3);lve=n(ARe,"STRONG",{});var _Ct=s(lve);rRr=r(_Ct,"xlm-roberta"),_Ct.forEach(t),tRr=r(ARe," \u2014 "),rU=n(ARe,"A",{href:!0});var uCt=s(rU);aRr=r(uCt,"FlaxXLMRobertaForMultipleChoice"),uCt.forEach(t),nRr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),Vo.forEach(t),sRr=i(Ia),ive=n(Ia,"P",{});var bCt=s(ive);lRr=r(bCt,"Examples:"),bCt.forEach(t),iRr=i(Ia),m(Z8.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),APe=i(c),Af=n(c,"H2",{class:!0});var qIe=s(Af);T3=n(qIe,"A",{id:!0,class:!0,href:!0});var FCt=s(T3);dve=n(FCt,"SPAN",{});var vCt=s(dve);m(e7.$$.fragment,vCt),vCt.forEach(t),FCt.forEach(t),dRr=i(qIe),cve=n(qIe,"SPAN",{});var TCt=s(cve);cRr=r(TCt,"FlaxAutoModelForNextSentencePrediction"),TCt.forEach(t),qIe.forEach(t),yPe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(o7.$$.fragment,ki),fRr=i(ki),yf=n(ki,"P",{});var tY=s(yf);mRr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tU=n(tY,"A",{href:!0});var MCt=s(tU);gRr=r(MCt,"from_pretrained()"),MCt.forEach(t),hRr=r(tY," class method or the "),aU=n(tY,"A",{href:!0});var ECt=s(aU);pRr=r(ECt,"from_config()"),ECt.forEach(t),_Rr=r(tY,` class
method.`),tY.forEach(t),uRr=i(ki),r7=n(ki,"P",{});var NIe=s(r7);bRr=r(NIe,"This class cannot be instantiated directly using "),fve=n(NIe,"CODE",{});var CCt=s(fve);FRr=r(CCt,"__init__()"),CCt.forEach(t),vRr=r(NIe," (throws an error)."),NIe.forEach(t),TRr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(t7.$$.fragment,Si),MRr=i(Si),mve=n(Si,"P",{});var wCt=s(mve);ERr=r(wCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wCt.forEach(t),CRr=i(Si),Lf=n(Si,"P",{});var aY=s(Lf);wRr=r(aY,`Note:
Loading a model from its configuration file does `),gve=n(aY,"STRONG",{});var ACt=s(gve);ARr=r(ACt,"not"),ACt.forEach(t),yRr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(aY,"A",{href:!0});var yCt=s(nU);LRr=r(yCt,"from_pretrained()"),yCt.forEach(t),xRr=r(aY," to load the model weights."),aY.forEach(t),kRr=i(Si),hve=n(Si,"P",{});var LCt=s(hve);SRr=r(LCt,"Examples:"),LCt.forEach(t),RRr=i(Si),m(a7.$$.fragment,Si),Si.forEach(t),BRr=i(ki),qo=n(ki,"DIV",{class:!0});var qa=s(qo);m(n7.$$.fragment,qa),PRr=i(qa),pve=n(qa,"P",{});var xCt=s(pve);$Rr=r(xCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xCt.forEach(t),IRr=i(qa),Nn=n(qa,"P",{});var CC=s(Nn);qRr=r(CC,"The model class to instantiate is selected based on the "),_ve=n(CC,"CODE",{});var kCt=s(_ve);NRr=r(kCt,"model_type"),kCt.forEach(t),jRr=r(CC,` property of the config object (either
passed as an argument or loaded from `),uve=n(CC,"CODE",{});var SCt=s(uve);DRr=r(SCt,"pretrained_model_name_or_path"),SCt.forEach(t),GRr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(CC,"CODE",{});var RCt=s(bve);ORr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),VRr=r(CC,":"),CC.forEach(t),XRr=i(qa),Fve=n(qa,"UL",{});var BCt=s(Fve);M3=n(BCt,"LI",{});var yRe=s(M3);vve=n(yRe,"STRONG",{});var PCt=s(vve);zRr=r(PCt,"bert"),PCt.forEach(t),QRr=r(yRe," \u2014 "),sU=n(yRe,"A",{href:!0});var $Ct=s(sU);WRr=r($Ct,"FlaxBertForNextSentencePrediction"),$Ct.forEach(t),HRr=r(yRe," (BERT model)"),yRe.forEach(t),BCt.forEach(t),URr=i(qa),Tve=n(qa,"P",{});var ICt=s(Tve);JRr=r(ICt,"Examples:"),ICt.forEach(t),YRr=i(qa),m(s7.$$.fragment,qa),qa.forEach(t),ki.forEach(t),LPe=i(c),xf=n(c,"H2",{class:!0});var jIe=s(xf);E3=n(jIe,"A",{id:!0,class:!0,href:!0});var qCt=s(E3);Mve=n(qCt,"SPAN",{});var NCt=s(Mve);m(l7.$$.fragment,NCt),NCt.forEach(t),qCt.forEach(t),KRr=i(jIe),Eve=n(jIe,"SPAN",{});var jCt=s(Eve);ZRr=r(jCt,"FlaxAutoModelForImageClassification"),jCt.forEach(t),jIe.forEach(t),xPe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(i7.$$.fragment,Ri),eBr=i(Ri),kf=n(Ri,"P",{});var nY=s(kf);oBr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lU=n(nY,"A",{href:!0});var DCt=s(lU);rBr=r(DCt,"from_pretrained()"),DCt.forEach(t),tBr=r(nY," class method or the "),iU=n(nY,"A",{href:!0});var GCt=s(iU);aBr=r(GCt,"from_config()"),GCt.forEach(t),nBr=r(nY,` class
method.`),nY.forEach(t),sBr=i(Ri),d7=n(Ri,"P",{});var DIe=s(d7);lBr=r(DIe,"This class cannot be instantiated directly using "),Cve=n(DIe,"CODE",{});var OCt=s(Cve);iBr=r(OCt,"__init__()"),OCt.forEach(t),dBr=r(DIe," (throws an error)."),DIe.forEach(t),cBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(c7.$$.fragment,Bi),fBr=i(Bi),wve=n(Bi,"P",{});var VCt=s(wve);mBr=r(VCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),VCt.forEach(t),gBr=i(Bi),Sf=n(Bi,"P",{});var sY=s(Sf);hBr=r(sY,`Note:
Loading a model from its configuration file does `),Ave=n(sY,"STRONG",{});var XCt=s(Ave);pBr=r(XCt,"not"),XCt.forEach(t),_Br=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(sY,"A",{href:!0});var zCt=s(dU);uBr=r(zCt,"from_pretrained()"),zCt.forEach(t),bBr=r(sY," to load the model weights."),sY.forEach(t),FBr=i(Bi),yve=n(Bi,"P",{});var QCt=s(yve);vBr=r(QCt,"Examples:"),QCt.forEach(t),TBr=i(Bi),m(f7.$$.fragment,Bi),Bi.forEach(t),MBr=i(Ri),No=n(Ri,"DIV",{class:!0});var Na=s(No);m(m7.$$.fragment,Na),EBr=i(Na),Lve=n(Na,"P",{});var WCt=s(Lve);CBr=r(WCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),WCt.forEach(t),wBr=i(Na),jn=n(Na,"P",{});var wC=s(jn);ABr=r(wC,"The model class to instantiate is selected based on the "),xve=n(wC,"CODE",{});var HCt=s(xve);yBr=r(HCt,"model_type"),HCt.forEach(t),LBr=r(wC,` property of the config object (either
passed as an argument or loaded from `),kve=n(wC,"CODE",{});var UCt=s(kve);xBr=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),kBr=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(wC,"CODE",{});var JCt=s(Sve);SBr=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),RBr=r(wC,":"),wC.forEach(t),BBr=i(Na),g7=n(Na,"UL",{});var GIe=s(g7);C3=n(GIe,"LI",{});var LRe=s(C3);Rve=n(LRe,"STRONG",{});var YCt=s(Rve);PBr=r(YCt,"beit"),YCt.forEach(t),$Br=r(LRe," \u2014 "),cU=n(LRe,"A",{href:!0});var KCt=s(cU);IBr=r(KCt,"FlaxBeitForImageClassification"),KCt.forEach(t),qBr=r(LRe," (BEiT model)"),LRe.forEach(t),NBr=i(GIe),w3=n(GIe,"LI",{});var xRe=s(w3);Bve=n(xRe,"STRONG",{});var ZCt=s(Bve);jBr=r(ZCt,"vit"),ZCt.forEach(t),DBr=r(xRe," \u2014 "),fU=n(xRe,"A",{href:!0});var ewt=s(fU);GBr=r(ewt,"FlaxViTForImageClassification"),ewt.forEach(t),OBr=r(xRe," (ViT model)"),xRe.forEach(t),GIe.forEach(t),VBr=i(Na),Pve=n(Na,"P",{});var owt=s(Pve);XBr=r(owt,"Examples:"),owt.forEach(t),zBr=i(Na),m(h7.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),kPe=i(c),Rf=n(c,"H2",{class:!0});var OIe=s(Rf);A3=n(OIe,"A",{id:!0,class:!0,href:!0});var rwt=s(A3);$ve=n(rwt,"SPAN",{});var twt=s($ve);m(p7.$$.fragment,twt),twt.forEach(t),rwt.forEach(t),QBr=i(OIe),Ive=n(OIe,"SPAN",{});var awt=s(Ive);WBr=r(awt,"FlaxAutoModelForVision2Seq"),awt.forEach(t),OIe.forEach(t),SPe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(_7.$$.fragment,Pi),HBr=i(Pi),Bf=n(Pi,"P",{});var lY=s(Bf);UBr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mU=n(lY,"A",{href:!0});var nwt=s(mU);JBr=r(nwt,"from_pretrained()"),nwt.forEach(t),YBr=r(lY," class method or the "),gU=n(lY,"A",{href:!0});var swt=s(gU);KBr=r(swt,"from_config()"),swt.forEach(t),ZBr=r(lY,` class
method.`),lY.forEach(t),ePr=i(Pi),u7=n(Pi,"P",{});var VIe=s(u7);oPr=r(VIe,"This class cannot be instantiated directly using "),qve=n(VIe,"CODE",{});var lwt=s(qve);rPr=r(lwt,"__init__()"),lwt.forEach(t),tPr=r(VIe," (throws an error)."),VIe.forEach(t),aPr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(b7.$$.fragment,$i),nPr=i($i),Nve=n($i,"P",{});var iwt=s(Nve);sPr=r(iwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iwt.forEach(t),lPr=i($i),Pf=n($i,"P",{});var iY=s(Pf);iPr=r(iY,`Note:
Loading a model from its configuration file does `),jve=n(iY,"STRONG",{});var dwt=s(jve);dPr=r(dwt,"not"),dwt.forEach(t),cPr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(iY,"A",{href:!0});var cwt=s(hU);fPr=r(cwt,"from_pretrained()"),cwt.forEach(t),mPr=r(iY," to load the model weights."),iY.forEach(t),gPr=i($i),Dve=n($i,"P",{});var fwt=s(Dve);hPr=r(fwt,"Examples:"),fwt.forEach(t),pPr=i($i),m(F7.$$.fragment,$i),$i.forEach(t),_Pr=i(Pi),jo=n(Pi,"DIV",{class:!0});var ja=s(jo);m(v7.$$.fragment,ja),uPr=i(ja),Gve=n(ja,"P",{});var mwt=s(Gve);bPr=r(mwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mwt.forEach(t),FPr=i(ja),Dn=n(ja,"P",{});var AC=s(Dn);vPr=r(AC,"The model class to instantiate is selected based on the "),Ove=n(AC,"CODE",{});var gwt=s(Ove);TPr=r(gwt,"model_type"),gwt.forEach(t),MPr=r(AC,` property of the config object (either
passed as an argument or loaded from `),Vve=n(AC,"CODE",{});var hwt=s(Vve);EPr=r(hwt,"pretrained_model_name_or_path"),hwt.forEach(t),CPr=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xve=n(AC,"CODE",{});var pwt=s(Xve);wPr=r(pwt,"pretrained_model_name_or_path"),pwt.forEach(t),APr=r(AC,":"),AC.forEach(t),yPr=i(ja),zve=n(ja,"UL",{});var _wt=s(zve);y3=n(_wt,"LI",{});var kRe=s(y3);Qve=n(kRe,"STRONG",{});var uwt=s(Qve);LPr=r(uwt,"vision-encoder-decoder"),uwt.forEach(t),xPr=r(kRe," \u2014 "),pU=n(kRe,"A",{href:!0});var bwt=s(pU);kPr=r(bwt,"FlaxVisionEncoderDecoderModel"),bwt.forEach(t),SPr=r(kRe," (Vision Encoder decoder model)"),kRe.forEach(t),_wt.forEach(t),RPr=i(ja),Wve=n(ja,"P",{});var Fwt=s(Wve);BPr=r(Fwt,"Examples:"),Fwt.forEach(t),PPr=i(ja),m(T7.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(ee,"name","hf:doc:metadata"),d(ee,"content",JSON.stringify(xwt)),d(we,"id","auto-classes"),d(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(we,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(w9,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(A9,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig"),d(y9,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig"),d(L9,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig"),d(x9,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig"),d(k9,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(S9,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig"),d(R9,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(B9,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(P9,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d($9,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig"),d(I9,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig"),d(q9,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig"),d(N9,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig"),d(j9,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig"),d(D9,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig"),d(G9,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(O9,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(V9,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig"),d(X9,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(z9,"href","/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Q9,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig"),d(W9,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig"),d(H9,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig"),d(U9,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig"),d(J9,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig"),d(Y9,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig"),d(K9,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Z9,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig"),d(ex,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAConfig"),d(ox,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig"),d(rx,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig"),d(tx,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig"),d(ax,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNConfig"),d(nx,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config"),d(sx,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(lx,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig"),d(ix,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig"),d(dx,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig"),d(cx,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(fx,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(mx,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(gx,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig"),d(hx,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig"),d(px,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeConfig"),d(_x,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig"),d(ux,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config"),d(bx,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig"),d(Fx,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(vx,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig"),d(Tx,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Mx,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Ex,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig"),d(Cx,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config"),d(wx,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Ax,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(yx,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig"),d(Lx,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig"),d(xx,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig"),d(kx,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Sx,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Rx,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Bx,"href","/docs/transformers/pr_16654/en/model_doc/rag#transformers.RagConfig"),d(Px,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmConfig"),d($x,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig"),d(Ix,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig"),d(qx,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig"),d(Nx,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig"),d(jx,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig"),d(Dx,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig"),d(Gx,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig"),d(Ox,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig"),d(Vx,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig"),d(Xx,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig"),d(zx,"href","/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Qx,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Wx,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Hx,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig"),d(Ux,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Jx,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig"),d(Yx,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config"),d(Kx,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig"),d(Zx,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig"),d(ek,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(ok,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRConfig"),d(rk,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(tk,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(ak,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig"),d(nk,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltConfig"),d(sk,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(lk,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(ik,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(dk,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig"),d(ck,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(fk,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(mk,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig"),d(gk,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig"),d(hk,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig"),d(pk,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(_k,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(uk,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(bk,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig"),d(Fk,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"id","transformers.AutoTokenizer"),d(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(vk,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Tk,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizer"),d(Mk,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartTokenizer"),d(Ck,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartTokenizerFast"),d(wk,"href","/docs/transformers/pr_16654/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Ak,"href","/docs/transformers/pr_16654/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(yk,"href","/docs/transformers/pr_16654/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Lk,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),d(xk,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),d(kk,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Sk,"href","/docs/transformers/pr_16654/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Rk,"href","/docs/transformers/pr_16654/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Bk,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Pk,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d($k,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Ik,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(qk,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Nk,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(jk,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Dk,"href","/docs/transformers/pr_16654/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Gk,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Ok,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineTokenizer"),d(Xk,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPTokenizer"),d(zk,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Wk,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16654/en/model_doc/cpm#transformers.CpmTokenizer"),d(Uk,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Jk,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Yk,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Zk,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(eS,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(oS,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(rS,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(tS,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraTokenizer"),d(aS,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(nS,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(sS,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetTokenizer"),d(lS,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(iS,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(dS,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelTokenizer"),d(cS,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(fS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(mS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(gS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(hS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(pS,"href","/docs/transformers/pr_16654/en/model_doc/herbert#transformers.HerbertTokenizer"),d(_S,"href","/docs/transformers/pr_16654/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(uS,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(bS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),d(FS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(vS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(TS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(MS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(ES,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(CS,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(wS,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(AS,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDTokenizer"),d(yS,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDTokenizerFast"),d(LS,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerTokenizer"),d(xS,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(kS,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeTokenizer"),d(SS,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(RS,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(BS,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(PS,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianTokenizer"),d($S,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartTokenizer"),d(IS,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(qS,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(NS,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(jS,"href","/docs/transformers/pr_16654/en/model_doc/mluke#transformers.MLukeTokenizer"),d(DS,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(GS,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(OS,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(VS,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(XS,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5Tokenizer"),d(zS,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5TokenizerFast"),d(QS,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(WS,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(HS,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(US,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(JS,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(YS,"href","/docs/transformers/pr_16654/en/model_doc/phobert#transformers.PhobertTokenizer"),d(KS,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartTokenizer"),d(ZS,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(eR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),d(oR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),d(rR,"href","/docs/transformers/pr_16654/en/model_doc/rag#transformers.RagTokenizer"),d(tR,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmTokenizer"),d(aR,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmTokenizerFast"),d(nR,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerTokenizer"),d(sR,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(lR,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertTokenizer"),d(iR,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(dR,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(cR,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(fR,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),d(mR,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(gR,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(hR,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(pR,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(_R,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(uR,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterTokenizer"),d(bR,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(FR,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(vR,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(TR,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5Tokenizer"),d(MR,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ER,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasTokenizer"),d(CR,"href","/docs/transformers/pr_16654/en/model_doc/tapex#transformers.TapexTokenizer"),d(wR,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(AR,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(yR,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(LR,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMTokenizer"),d(xR,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(kR,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMTokenizer"),d(SR,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(RR,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(BR,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(PR,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetTokenizer"),d($R,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uh,"id","transformers.AutoFeatureExtractor"),d(uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(IR,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(qR,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(GR,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAFeatureExtractor"),d(VR,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(XR,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(zR,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"id","transformers.AutoProcessor"),d(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(tB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(aB,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPProcessor"),d(nB,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAProcessor"),d(sB,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(lB,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(iB,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(dB,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(cB,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRProcessor"),d(fB,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(mB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kh,"id","transformers.AutoModel"),d(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(gB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_B,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertModel"),d(uB,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartModel"),d(bB,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitModel"),d(FB,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel"),d(vB,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(TB,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdModel"),d(MB,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(EB,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(CB,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(wB,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertModel"),d(AB,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineModel"),d(yB,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPModel"),d(LB,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertModel"),d(xB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextModel"),d(kB,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLModel"),d(SB,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(RB,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(BB,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaModel"),d(PB,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d($B,"href","/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(IB,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTModel"),d(qB,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrModel"),d(NB,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertModel"),d(jB,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(DB,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTModel"),d(GB,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraModel"),d(OB,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertModel"),d(VB,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAModel"),d(XB,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetModel"),d(zB,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTModel"),d(QB,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelModel"),d(WB,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelBaseModel"),d(HB,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNModel"),d(UB,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Model"),d(JB,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(YB,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJModel"),d(KB,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertModel"),d(ZB,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertModel"),d(eP,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(oP,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(rP,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(tP,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDModel"),d(aP,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerModel"),d(nP,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeModel"),d(sP,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertModel"),d(lP,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Model"),d(iP,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianModel"),d(dP,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerModel"),d(cP,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartModel"),d(fP,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(mP,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertModel"),d(gP,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetModel"),d(hP,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Model"),d(pP,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerModel"),d(_P,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(uP,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusModel"),d(bP,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverModel"),d(FP,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartModel"),d(vP,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerModel"),d(TP,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(MP,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertModel"),d(EP,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModel"),d(CP,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetModel"),d(wP,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertModel"),d(AP,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetModel"),d(yP,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel"),d(LP,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaModel"),d(xP,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerModel"),d(kP,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerModel"),d(SP,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWModel"),d(RP,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDModel"),d(BP,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(PP,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterModel"),d($P,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(IP,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinModel"),d(qP,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Model"),d(NP,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasModel"),d(jP,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(DP,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechModel"),d(GP,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(OP,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanModel"),d(VP,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltModel"),d(XP,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(zP,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertModel"),d(QP,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTModel"),d(WP,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(HP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(UP,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMModel"),d(JP,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMModel"),d(YP,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMModel"),d(KP,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(ZP,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(e$,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(o$,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetModel"),d(r$,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j_,"id","transformers.AutoModelForPreTraining"),d(j_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(t$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(a$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(n$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s$,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForPreTraining"),d(l$,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(i$,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForPreTraining"),d(d$,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(c$,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(f$,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(m$,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(g$,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(h$,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(p$,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(_$,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForPreTraining"),d(u$,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(b$,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForPreTraining"),d(F$,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(v$,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(T$,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(M$,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(E$,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(C$,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(w$,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(A$,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(y$,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(L$,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(x$,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(k$,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel"),d(S$,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(R$,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(B$,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(P$,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM"),d($$,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(I$,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(q$,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(N$,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(j$,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(D$,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(G$,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(O$,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(V$,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(X$,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Au,"id","transformers.AutoModelForCausalLM"),d(Au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Au,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(z$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Q$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(W$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H$,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForCausalLM"),d(U$,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertLMHeadModel"),d(J$,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(Y$,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(K$,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(Z$,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(eI,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(oI,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(rI,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(tI,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(aI,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForCausalLM"),d(nI,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(sI,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(lI,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(iI,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianForCausalLM"),d(dI,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForCausalLM"),d(cI,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(fI,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(mI,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(gI,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(hI,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(pI,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(_I,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(uI,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(bI,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(FI,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(vI,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(TI,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(MI,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(EI,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(CI,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(wI,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(AI,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(yI,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(LI,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d6,"id","transformers.AutoModelForMaskedLM"),d(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d6,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(xI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RI,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(BI,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMaskedLM"),d($I,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(II,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(qI,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(NI,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(jI,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(DI,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(GI,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(OI,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(VI,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(XI,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(zI,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(QI,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(WI,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(HI,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(UI,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(JI,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(YI,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(KI,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(eq,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(oq,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(rq,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(tq,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(aq,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(nq,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(sq,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(lq,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(iq,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(dq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(cq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(fq,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q6,"id","transformers.AutoModelForSeq2SeqLM"),d(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q6,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(mq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(_q,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(bq,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(vq,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianMTModel"),d(Cq,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f1,"id","transformers.AutoModelForSequenceClassification"),d(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f1,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Rq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Pq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($q,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s4,"id","transformers.AutoModelForMultipleChoice"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(LN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SN,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d($N,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I4,"id","transformers.AutoModelForNextSentencePrediction"),d(I4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I4,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(nj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ij,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(dj,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(cj,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(fj,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(mj,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V4,"id","transformers.AutoModelForTokenClassification"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(gj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_j,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForTokenClassification"),d(bj,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(wj,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(yj,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(xj,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(kj,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d($j,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(qj,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(jj,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(zj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cb,"id","transformers.AutoModelForQuestionAnswering"),d(Cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cb,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Uj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Yj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kj,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(mD,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(BD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(ID,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f5,"id","transformers.AutoModelForTableQuestionAnswering"),d(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f5,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(qD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ND,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DD,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h5,"id","transformers.AutoModelForImageClassification"),d(h5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h5,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(GD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XD,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForImageClassification"),d(zD,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(QD,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassification"),d(WD,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(HD,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(UD,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(JD,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(YD,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(KD,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(ZD,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(eG,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(oG,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(rG,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForImageClassification"),d(tG,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanForImageClassification"),d(aG,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A5,"id","transformers.AutoModelForVision2Seq"),d(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A5,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(nG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iG,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x5,"id","transformers.AutoModelForAudioClassification"),d(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x5,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(dG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(gG,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(hG,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(pG,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(_G,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(uG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(bG,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(FG,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j5,"id","transformers.AutoModelForAudioFrameClassification"),d(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j5,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(vG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(CG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(wG,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(AG,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z5,"id","transformers.AutoModelForCTC"),d(z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z5,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(yG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(SG,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForCTC"),d(RG,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForCTC"),d(BG,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForCTC"),d(PG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d($G,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(IG,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(qG,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(NG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GG,"href","/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(OG,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n2,"id","transformers.AutoModelForAudioXVector"),d(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(VG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(WG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(HG,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(UG,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f2,"id","transformers.AutoModelForMaskedImageModeling"),d(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(JG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZG,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(eO,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(oO,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_2,"id","transformers.AutoModelForObjectDetection"),d(_2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_2,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(rO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nO,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F2,"id","transformers.AutoModelForImageSegmentation"),d(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F2,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(sO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dO,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M2,"id","transformers.AutoModelForSemanticSegmentation"),d(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M2,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(cO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gO,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(hO,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(pO,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y2,"id","transformers.AutoModelForInstanceSegmentation"),d(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y2,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(_O,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FO,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k2,"id","transformers.TFAutoModel"),d(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k2,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(vO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EO,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertModel"),d(CO,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartModel"),d(wO,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertModel"),d(AO,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(yO,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(LO,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertModel"),d(xO,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.TFCLIPModel"),d(kO,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertModel"),d(SO,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextModel"),d(RO,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLModel"),d(BO,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaModel"),d(PO,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d($O,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(IO,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(qO,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraModel"),d(NO,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(jO,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelModel"),d(DO,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(GO,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2Model"),d(OO,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJModel"),d(VO,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.TFHubertModel"),d(XO,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(zO,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDModel"),d(QO,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerModel"),d(WO,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertModel"),d(HO,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianModel"),d(UO,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartModel"),d(JO,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(YO,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetModel"),d(KO,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5Model"),d(ZO,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(eV,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusModel"),d(oV,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertModel"),d(rV,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaModel"),d(tV,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerModel"),d(aV,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(nV,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5Model"),d(sV,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasModel"),d(lV,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(iV,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTModel"),d(dV,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(cV,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(fV,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMModel"),d(mV,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(gV,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vF,"id","transformers.TFAutoModelForPreTraining"),d(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vF,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(hV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_V,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uV,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(bV,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(FV,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForPreTraining"),d(vV,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(TV,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(MV,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(EV,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(CV,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(wV,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(AV,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(yV,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(LV,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(xV,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(kV,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(SV,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(RV,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(BV,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(PV,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d($V,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(IV,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(qV,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(NV,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(jV,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XF,"id","transformers.TFAutoModelForCausalLM"),d(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XF,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(DV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VV,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(XV,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(zV,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(QV,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(WV,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(HV,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(UV,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(JV,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(YV,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(KV,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(ZV,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(eX,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tv,"id","transformers.TFAutoModelForImageClassification"),d(tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tv,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(oX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aX,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(nX,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTForImageClassification"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sv,"id","transformers.TFAutoModelForMaskedLM"),d(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sv,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(sX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dX,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(cX,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(fX,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(mX,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(gX,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(hX,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(pX,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(_X,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(uX,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(bX,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(FX,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(vX,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(TX,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(MX,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(EX,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(CX,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(wX,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(AX,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(yX,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(LX,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yv,"id","transformers.TFAutoModelForSeq2SeqLM"),d(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yv,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(xX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RX,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(PX,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d($X,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(IX,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianMTModel"),d(NX,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(jX,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nv,"id","transformers.TFAutoModelForSequenceClassification"),d(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Nv,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(OX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zX,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(az,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fT,"id","transformers.TFAutoModelForMultipleChoice"),d(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(uz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vz,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(wz,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d($z,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(qz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dz,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ST,"id","transformers.TFAutoModelForTokenClassification"),d(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ST,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Gz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xz,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(zz,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(sQ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(lQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KT,"id","transformers.TFAutoModelForQuestionAnswering"),d(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(cQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gQ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(MQ,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(SQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FM,"id","transformers.TFAutoModelForVision2Seq"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(BQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($Q,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IQ,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(qQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DQ,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EM,"id","transformers.FlaxAutoModel"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(GQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XQ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertModel"),d(zQ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartModel"),d(QQ,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitModel"),d(WQ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertModel"),d(HQ,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(UQ,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(JQ,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(YQ,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.FlaxCLIPModel"),d(KQ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(ZQ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraModel"),d(eW,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(oW,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(rW,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(tW,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianModel"),d(aW,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartModel"),d(nW,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5Model"),d(sW,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(lW,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(iW,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(dW,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5Model"),d(cW,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(fW,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTModel"),d(mW,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(gW,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(hW,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UM,"id","transformers.FlaxAutoModelForCausalLM"),d(UM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(pW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_W,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bW,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(FW,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(vW,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(TW,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(MW,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oE,"id","transformers.FlaxAutoModelForPreTraining"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(EW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AW,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(yW,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(LW,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(xW,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(kW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(SW,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(RW,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(BW,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(PW,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d($W,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(IW,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(qW,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hE,"id","transformers.FlaxAutoModelForMaskedLM"),d(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(NW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GW,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(OW,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(VW,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(XW,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(zW,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(QW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(WW,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(HW,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(UW,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(JW,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(wE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(YW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eH,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(oH,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(rH,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(tH,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(aH,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(nH,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(sH,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(lH,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(iH,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($E,"id","transformers.FlaxAutoModelForSequenceClassification"),d($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($E,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(dH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(gH,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(hH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(pH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(_H,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(uH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(bH,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(FH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(vH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(TH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(MH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(yH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(LH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(xH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(kH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(SH,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(RH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(BH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(PH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t3,"id","transformers.FlaxAutoModelForTokenClassification"),d(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t3,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d($H,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(jH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(DH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(GH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(OH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(VH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(XH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(zH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(QH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(JH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(YH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(KH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(ZH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(eU,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(oU,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(rU,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(tU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sU,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E3,"id","transformers.FlaxAutoModelForImageClassification"),d(E3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E3,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(lU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cU,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(fU,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A3,"id","transformers.FlaxAutoModelForVision2Seq"),d(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(mU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pU,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,ee),b(c,co,u),b(c,de,u),e(de,we),e(we,io),g(ge,io,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,yC),e(fa,Nf),b(c,ke,u),b(c,fo,u),e(fo,ji),e(fo,Gn),e(Gn,LC),e(fo,On),e(fo,Vn),e(Vn,xC),e(fo,Di),e(fo,Xn),e(Xn,kC),e(fo,Gi),b(c,jf,u),g(Da,c,u),b(c,mo,u),b(c,ue,u),e(ue,F9),e(ue,Oi),e(Oi,v9),e(ue,T9),b(c,zo,u),b(c,Ga,u),e(Ga,M9),e(Ga,Df),e(Df,E9),e(Ga,XIe),b(c,SRe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,dY),g(SC,dY,null),e(Vi,zIe),e(Vi,cY),e(cY,QIe),b(c,RRe,u),b(c,zn,u),e(zn,WIe),e(zn,fY),e(fY,HIe),e(zn,UIe),e(zn,mY),e(mY,JIe),e(zn,YIe),b(c,BRe,u),g(RC,c,u),b(c,PRe,u),b(c,C9,u),e(C9,KIe),b(c,$Re,u),g(Of,c,u),b(c,IRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,gY),g(BC,gY,null),e(Xi,ZIe),e(Xi,hY),e(hY,eqe),b(c,qRe,u),b(c,Qo,u),g(PC,Qo,null),e(Qo,oqe),e(Qo,$C),e($C,rqe),e($C,w9),e(w9,tqe),e($C,aqe),e(Qo,nqe),e(Qo,IC),e(IC,sqe),e(IC,pY),e(pY,lqe),e(IC,iqe),e(Qo,dqe),e(Qo,go),g(qC,go,null),e(go,cqe),e(go,_Y),e(_Y,fqe),e(go,mqe),e(go,zi),e(zi,gqe),e(zi,uY),e(uY,hqe),e(zi,pqe),e(zi,bY),e(bY,_qe),e(zi,uqe),e(go,bqe),e(go,F),e(F,Xf),e(Xf,FY),e(FY,Fqe),e(Xf,vqe),e(Xf,A9),e(A9,Tqe),e(Xf,Mqe),e(F,Eqe),e(F,zf),e(zf,vY),e(vY,Cqe),e(zf,wqe),e(zf,y9),e(y9,Aqe),e(zf,yqe),e(F,Lqe),e(F,Qf),e(Qf,TY),e(TY,xqe),e(Qf,kqe),e(Qf,L9),e(L9,Sqe),e(Qf,Rqe),e(F,Bqe),e(F,Wf),e(Wf,MY),e(MY,Pqe),e(Wf,$qe),e(Wf,x9),e(x9,Iqe),e(Wf,qqe),e(F,Nqe),e(F,Hf),e(Hf,EY),e(EY,jqe),e(Hf,Dqe),e(Hf,k9),e(k9,Gqe),e(Hf,Oqe),e(F,Vqe),e(F,Uf),e(Uf,CY),e(CY,Xqe),e(Uf,zqe),e(Uf,S9),e(S9,Qqe),e(Uf,Wqe),e(F,Hqe),e(F,Jf),e(Jf,wY),e(wY,Uqe),e(Jf,Jqe),e(Jf,R9),e(R9,Yqe),e(Jf,Kqe),e(F,Zqe),e(F,Yf),e(Yf,AY),e(AY,eNe),e(Yf,oNe),e(Yf,B9),e(B9,rNe),e(Yf,tNe),e(F,aNe),e(F,Kf),e(Kf,yY),e(yY,nNe),e(Kf,sNe),e(Kf,P9),e(P9,lNe),e(Kf,iNe),e(F,dNe),e(F,Zf),e(Zf,LY),e(LY,cNe),e(Zf,fNe),e(Zf,$9),e($9,mNe),e(Zf,gNe),e(F,hNe),e(F,em),e(em,xY),e(xY,pNe),e(em,_Ne),e(em,I9),e(I9,uNe),e(em,bNe),e(F,FNe),e(F,om),e(om,kY),e(kY,vNe),e(om,TNe),e(om,q9),e(q9,MNe),e(om,ENe),e(F,CNe),e(F,rm),e(rm,SY),e(SY,wNe),e(rm,ANe),e(rm,N9),e(N9,yNe),e(rm,LNe),e(F,xNe),e(F,tm),e(tm,RY),e(RY,kNe),e(tm,SNe),e(tm,j9),e(j9,RNe),e(tm,BNe),e(F,PNe),e(F,am),e(am,BY),e(BY,$Ne),e(am,INe),e(am,D9),e(D9,qNe),e(am,NNe),e(F,jNe),e(F,nm),e(nm,PY),e(PY,DNe),e(nm,GNe),e(nm,G9),e(G9,ONe),e(nm,VNe),e(F,XNe),e(F,sm),e(sm,$Y),e($Y,zNe),e(sm,QNe),e(sm,O9),e(O9,WNe),e(sm,HNe),e(F,UNe),e(F,lm),e(lm,IY),e(IY,JNe),e(lm,YNe),e(lm,V9),e(V9,KNe),e(lm,ZNe),e(F,eje),e(F,im),e(im,qY),e(qY,oje),e(im,rje),e(im,X9),e(X9,tje),e(im,aje),e(F,nje),e(F,dm),e(dm,NY),e(NY,sje),e(dm,lje),e(dm,z9),e(z9,ije),e(dm,dje),e(F,cje),e(F,cm),e(cm,jY),e(jY,fje),e(cm,mje),e(cm,Q9),e(Q9,gje),e(cm,hje),e(F,pje),e(F,fm),e(fm,DY),e(DY,_je),e(fm,uje),e(fm,W9),e(W9,bje),e(fm,Fje),e(F,vje),e(F,mm),e(mm,GY),e(GY,Tje),e(mm,Mje),e(mm,H9),e(H9,Eje),e(mm,Cje),e(F,wje),e(F,gm),e(gm,OY),e(OY,Aje),e(gm,yje),e(gm,U9),e(U9,Lje),e(gm,xje),e(F,kje),e(F,hm),e(hm,VY),e(VY,Sje),e(hm,Rje),e(hm,J9),e(J9,Bje),e(hm,Pje),e(F,$je),e(F,pm),e(pm,XY),e(XY,Ije),e(pm,qje),e(pm,Y9),e(Y9,Nje),e(pm,jje),e(F,Dje),e(F,_m),e(_m,zY),e(zY,Gje),e(_m,Oje),e(_m,K9),e(K9,Vje),e(_m,Xje),e(F,zje),e(F,um),e(um,QY),e(QY,Qje),e(um,Wje),e(um,Z9),e(Z9,Hje),e(um,Uje),e(F,Jje),e(F,bm),e(bm,WY),e(WY,Yje),e(bm,Kje),e(bm,ex),e(ex,Zje),e(bm,eDe),e(F,oDe),e(F,Fm),e(Fm,HY),e(HY,rDe),e(Fm,tDe),e(Fm,ox),e(ox,aDe),e(Fm,nDe),e(F,sDe),e(F,vm),e(vm,UY),e(UY,lDe),e(vm,iDe),e(vm,rx),e(rx,dDe),e(vm,cDe),e(F,fDe),e(F,Tm),e(Tm,JY),e(JY,mDe),e(Tm,gDe),e(Tm,tx),e(tx,hDe),e(Tm,pDe),e(F,_De),e(F,Mm),e(Mm,YY),e(YY,uDe),e(Mm,bDe),e(Mm,ax),e(ax,FDe),e(Mm,vDe),e(F,TDe),e(F,Em),e(Em,KY),e(KY,MDe),e(Em,EDe),e(Em,nx),e(nx,CDe),e(Em,wDe),e(F,ADe),e(F,Cm),e(Cm,ZY),e(ZY,yDe),e(Cm,LDe),e(Cm,sx),e(sx,xDe),e(Cm,kDe),e(F,SDe),e(F,wm),e(wm,eK),e(eK,RDe),e(wm,BDe),e(wm,lx),e(lx,PDe),e(wm,$De),e(F,IDe),e(F,Am),e(Am,oK),e(oK,qDe),e(Am,NDe),e(Am,ix),e(ix,jDe),e(Am,DDe),e(F,GDe),e(F,ym),e(ym,rK),e(rK,ODe),e(ym,VDe),e(ym,dx),e(dx,XDe),e(ym,zDe),e(F,QDe),e(F,Lm),e(Lm,tK),e(tK,WDe),e(Lm,HDe),e(Lm,cx),e(cx,UDe),e(Lm,JDe),e(F,YDe),e(F,xm),e(xm,aK),e(aK,KDe),e(xm,ZDe),e(xm,fx),e(fx,eGe),e(xm,oGe),e(F,rGe),e(F,km),e(km,nK),e(nK,tGe),e(km,aGe),e(km,mx),e(mx,nGe),e(km,sGe),e(F,lGe),e(F,Sm),e(Sm,sK),e(sK,iGe),e(Sm,dGe),e(Sm,gx),e(gx,cGe),e(Sm,fGe),e(F,mGe),e(F,Rm),e(Rm,lK),e(lK,gGe),e(Rm,hGe),e(Rm,hx),e(hx,pGe),e(Rm,_Ge),e(F,uGe),e(F,Bm),e(Bm,iK),e(iK,bGe),e(Bm,FGe),e(Bm,px),e(px,vGe),e(Bm,TGe),e(F,MGe),e(F,Pm),e(Pm,dK),e(dK,EGe),e(Pm,CGe),e(Pm,_x),e(_x,wGe),e(Pm,AGe),e(F,yGe),e(F,$m),e($m,cK),e(cK,LGe),e($m,xGe),e($m,ux),e(ux,kGe),e($m,SGe),e(F,RGe),e(F,Im),e(Im,fK),e(fK,BGe),e(Im,PGe),e(Im,bx),e(bx,$Ge),e(Im,IGe),e(F,qGe),e(F,qm),e(qm,mK),e(mK,NGe),e(qm,jGe),e(qm,Fx),e(Fx,DGe),e(qm,GGe),e(F,OGe),e(F,Nm),e(Nm,gK),e(gK,VGe),e(Nm,XGe),e(Nm,vx),e(vx,zGe),e(Nm,QGe),e(F,WGe),e(F,jm),e(jm,hK),e(hK,HGe),e(jm,UGe),e(jm,Tx),e(Tx,JGe),e(jm,YGe),e(F,KGe),e(F,Dm),e(Dm,pK),e(pK,ZGe),e(Dm,eOe),e(Dm,Mx),e(Mx,oOe),e(Dm,rOe),e(F,tOe),e(F,Gm),e(Gm,_K),e(_K,aOe),e(Gm,nOe),e(Gm,Ex),e(Ex,sOe),e(Gm,lOe),e(F,iOe),e(F,Om),e(Om,uK),e(uK,dOe),e(Om,cOe),e(Om,Cx),e(Cx,fOe),e(Om,mOe),e(F,gOe),e(F,Vm),e(Vm,bK),e(bK,hOe),e(Vm,pOe),e(Vm,wx),e(wx,_Oe),e(Vm,uOe),e(F,bOe),e(F,Xm),e(Xm,FK),e(FK,FOe),e(Xm,vOe),e(Xm,Ax),e(Ax,TOe),e(Xm,MOe),e(F,EOe),e(F,zm),e(zm,vK),e(vK,COe),e(zm,wOe),e(zm,yx),e(yx,AOe),e(zm,yOe),e(F,LOe),e(F,Qm),e(Qm,TK),e(TK,xOe),e(Qm,kOe),e(Qm,Lx),e(Lx,SOe),e(Qm,ROe),e(F,BOe),e(F,Wm),e(Wm,MK),e(MK,POe),e(Wm,$Oe),e(Wm,xx),e(xx,IOe),e(Wm,qOe),e(F,NOe),e(F,Hm),e(Hm,EK),e(EK,jOe),e(Hm,DOe),e(Hm,kx),e(kx,GOe),e(Hm,OOe),e(F,VOe),e(F,Um),e(Um,CK),e(CK,XOe),e(Um,zOe),e(Um,Sx),e(Sx,QOe),e(Um,WOe),e(F,HOe),e(F,Jm),e(Jm,wK),e(wK,UOe),e(Jm,JOe),e(Jm,Rx),e(Rx,YOe),e(Jm,KOe),e(F,ZOe),e(F,Ym),e(Ym,AK),e(AK,eVe),e(Ym,oVe),e(Ym,Bx),e(Bx,rVe),e(Ym,tVe),e(F,aVe),e(F,Km),e(Km,yK),e(yK,nVe),e(Km,sVe),e(Km,Px),e(Px,lVe),e(Km,iVe),e(F,dVe),e(F,Zm),e(Zm,LK),e(LK,cVe),e(Zm,fVe),e(Zm,$x),e($x,mVe),e(Zm,gVe),e(F,hVe),e(F,eg),e(eg,xK),e(xK,pVe),e(eg,_Ve),e(eg,Ix),e(Ix,uVe),e(eg,bVe),e(F,FVe),e(F,og),e(og,kK),e(kK,vVe),e(og,TVe),e(og,qx),e(qx,MVe),e(og,EVe),e(F,CVe),e(F,rg),e(rg,SK),e(SK,wVe),e(rg,AVe),e(rg,Nx),e(Nx,yVe),e(rg,LVe),e(F,xVe),e(F,tg),e(tg,RK),e(RK,kVe),e(tg,SVe),e(tg,jx),e(jx,RVe),e(tg,BVe),e(F,PVe),e(F,ag),e(ag,BK),e(BK,$Ve),e(ag,IVe),e(ag,Dx),e(Dx,qVe),e(ag,NVe),e(F,jVe),e(F,ng),e(ng,PK),e(PK,DVe),e(ng,GVe),e(ng,Gx),e(Gx,OVe),e(ng,VVe),e(F,XVe),e(F,sg),e(sg,$K),e($K,zVe),e(sg,QVe),e(sg,Ox),e(Ox,WVe),e(sg,HVe),e(F,UVe),e(F,lg),e(lg,IK),e(IK,JVe),e(lg,YVe),e(lg,Vx),e(Vx,KVe),e(lg,ZVe),e(F,eXe),e(F,ig),e(ig,qK),e(qK,oXe),e(ig,rXe),e(ig,Xx),e(Xx,tXe),e(ig,aXe),e(F,nXe),e(F,dg),e(dg,NK),e(NK,sXe),e(dg,lXe),e(dg,zx),e(zx,iXe),e(dg,dXe),e(F,cXe),e(F,cg),e(cg,jK),e(jK,fXe),e(cg,mXe),e(cg,Qx),e(Qx,gXe),e(cg,hXe),e(F,pXe),e(F,fg),e(fg,DK),e(DK,_Xe),e(fg,uXe),e(fg,Wx),e(Wx,bXe),e(fg,FXe),e(F,vXe),e(F,mg),e(mg,GK),e(GK,TXe),e(mg,MXe),e(mg,Hx),e(Hx,EXe),e(mg,CXe),e(F,wXe),e(F,gg),e(gg,OK),e(OK,AXe),e(gg,yXe),e(gg,Ux),e(Ux,LXe),e(gg,xXe),e(F,kXe),e(F,hg),e(hg,VK),e(VK,SXe),e(hg,RXe),e(hg,Jx),e(Jx,BXe),e(hg,PXe),e(F,$Xe),e(F,pg),e(pg,XK),e(XK,IXe),e(pg,qXe),e(pg,Yx),e(Yx,NXe),e(pg,jXe),e(F,DXe),e(F,_g),e(_g,zK),e(zK,GXe),e(_g,OXe),e(_g,Kx),e(Kx,VXe),e(_g,XXe),e(F,zXe),e(F,ug),e(ug,QK),e(QK,QXe),e(ug,WXe),e(ug,Zx),e(Zx,HXe),e(ug,UXe),e(F,JXe),e(F,bg),e(bg,WK),e(WK,YXe),e(bg,KXe),e(bg,ek),e(ek,ZXe),e(bg,eze),e(F,oze),e(F,Fg),e(Fg,HK),e(HK,rze),e(Fg,tze),e(Fg,ok),e(ok,aze),e(Fg,nze),e(F,sze),e(F,vg),e(vg,UK),e(UK,lze),e(vg,ize),e(vg,rk),e(rk,dze),e(vg,cze),e(F,fze),e(F,Tg),e(Tg,JK),e(JK,mze),e(Tg,gze),e(Tg,tk),e(tk,hze),e(Tg,pze),e(F,_ze),e(F,Mg),e(Mg,YK),e(YK,uze),e(Mg,bze),e(Mg,ak),e(ak,Fze),e(Mg,vze),e(F,Tze),e(F,Eg),e(Eg,KK),e(KK,Mze),e(Eg,Eze),e(Eg,nk),e(nk,Cze),e(Eg,wze),e(F,Aze),e(F,Cg),e(Cg,ZK),e(ZK,yze),e(Cg,Lze),e(Cg,sk),e(sk,xze),e(Cg,kze),e(F,Sze),e(F,wg),e(wg,eZ),e(eZ,Rze),e(wg,Bze),e(wg,lk),e(lk,Pze),e(wg,$ze),e(F,Ize),e(F,Ag),e(Ag,oZ),e(oZ,qze),e(Ag,Nze),e(Ag,ik),e(ik,jze),e(Ag,Dze),e(F,Gze),e(F,yg),e(yg,rZ),e(rZ,Oze),e(yg,Vze),e(yg,dk),e(dk,Xze),e(yg,zze),e(F,Qze),e(F,Lg),e(Lg,tZ),e(tZ,Wze),e(Lg,Hze),e(Lg,ck),e(ck,Uze),e(Lg,Jze),e(F,Yze),e(F,xg),e(xg,aZ),e(aZ,Kze),e(xg,Zze),e(xg,fk),e(fk,eQe),e(xg,oQe),e(F,rQe),e(F,kg),e(kg,nZ),e(nZ,tQe),e(kg,aQe),e(kg,mk),e(mk,nQe),e(kg,sQe),e(F,lQe),e(F,Sg),e(Sg,sZ),e(sZ,iQe),e(Sg,dQe),e(Sg,gk),e(gk,cQe),e(Sg,fQe),e(F,mQe),e(F,Rg),e(Rg,lZ),e(lZ,gQe),e(Rg,hQe),e(Rg,hk),e(hk,pQe),e(Rg,_Qe),e(F,uQe),e(F,Bg),e(Bg,iZ),e(iZ,bQe),e(Bg,FQe),e(Bg,pk),e(pk,vQe),e(Bg,TQe),e(F,MQe),e(F,Pg),e(Pg,dZ),e(dZ,EQe),e(Pg,CQe),e(Pg,_k),e(_k,wQe),e(Pg,AQe),e(F,yQe),e(F,$g),e($g,cZ),e(cZ,LQe),e($g,xQe),e($g,uk),e(uk,kQe),e($g,SQe),e(F,RQe),e(F,Ig),e(Ig,fZ),e(fZ,BQe),e(Ig,PQe),e(Ig,bk),e(bk,$Qe),e(Ig,IQe),e(F,qQe),e(F,qg),e(qg,mZ),e(mZ,NQe),e(qg,jQe),e(qg,Fk),e(Fk,DQe),e(qg,GQe),e(go,OQe),e(go,gZ),e(gZ,VQe),e(go,XQe),g(NC,go,null),e(Qo,zQe),e(Qo,Ng),g(jC,Ng,null),e(Ng,QQe),e(Ng,hZ),e(hZ,WQe),b(c,NRe,u),b(c,Qi,u),e(Qi,jg),e(jg,pZ),g(DC,pZ,null),e(Qi,HQe),e(Qi,_Z),e(_Z,UQe),b(c,jRe,u),b(c,Wo,u),g(GC,Wo,null),e(Wo,JQe),e(Wo,OC),e(OC,YQe),e(OC,vk),e(vk,KQe),e(OC,ZQe),e(Wo,eWe),e(Wo,VC),e(VC,oWe),e(VC,uZ),e(uZ,rWe),e(VC,tWe),e(Wo,aWe),e(Wo,ho),g(XC,ho,null),e(ho,nWe),e(ho,bZ),e(bZ,sWe),e(ho,lWe),e(ho,Oa),e(Oa,iWe),e(Oa,FZ),e(FZ,dWe),e(Oa,cWe),e(Oa,vZ),e(vZ,fWe),e(Oa,mWe),e(Oa,TZ),e(TZ,gWe),e(Oa,hWe),e(ho,pWe),e(ho,E),e(E,Qn),e(Qn,MZ),e(MZ,_We),e(Qn,uWe),e(Qn,Tk),e(Tk,bWe),e(Qn,FWe),e(Qn,Mk),e(Mk,vWe),e(Qn,TWe),e(E,MWe),e(E,Wn),e(Wn,EZ),e(EZ,EWe),e(Wn,CWe),e(Wn,Ek),e(Ek,wWe),e(Wn,AWe),e(Wn,Ck),e(Ck,yWe),e(Wn,LWe),e(E,xWe),e(E,Hn),e(Hn,CZ),e(CZ,kWe),e(Hn,SWe),e(Hn,wk),e(wk,RWe),e(Hn,BWe),e(Hn,Ak),e(Ak,PWe),e(Hn,$We),e(E,IWe),e(E,Dg),e(Dg,wZ),e(wZ,qWe),e(Dg,NWe),e(Dg,yk),e(yk,jWe),e(Dg,DWe),e(E,GWe),e(E,Un),e(Un,AZ),e(AZ,OWe),e(Un,VWe),e(Un,Lk),e(Lk,XWe),e(Un,zWe),e(Un,xk),e(xk,QWe),e(Un,WWe),e(E,HWe),e(E,Gg),e(Gg,yZ),e(yZ,UWe),e(Gg,JWe),e(Gg,kk),e(kk,YWe),e(Gg,KWe),e(E,ZWe),e(E,Og),e(Og,LZ),e(LZ,eHe),e(Og,oHe),e(Og,Sk),e(Sk,rHe),e(Og,tHe),e(E,aHe),e(E,Vg),e(Vg,xZ),e(xZ,nHe),e(Vg,sHe),e(Vg,Rk),e(Rk,lHe),e(Vg,iHe),e(E,dHe),e(E,Jn),e(Jn,kZ),e(kZ,cHe),e(Jn,fHe),e(Jn,Bk),e(Bk,mHe),e(Jn,gHe),e(Jn,Pk),e(Pk,hHe),e(Jn,pHe),e(E,_He),e(E,Yn),e(Yn,SZ),e(SZ,uHe),e(Yn,bHe),e(Yn,$k),e($k,FHe),e(Yn,vHe),e(Yn,Ik),e(Ik,THe),e(Yn,MHe),e(E,EHe),e(E,Kn),e(Kn,RZ),e(RZ,CHe),e(Kn,wHe),e(Kn,qk),e(qk,AHe),e(Kn,yHe),e(Kn,Nk),e(Nk,LHe),e(Kn,xHe),e(E,kHe),e(E,Xg),e(Xg,BZ),e(BZ,SHe),e(Xg,RHe),e(Xg,jk),e(jk,BHe),e(Xg,PHe),e(E,$He),e(E,zg),e(zg,PZ),e(PZ,IHe),e(zg,qHe),e(zg,Dk),e(Dk,NHe),e(zg,jHe),e(E,DHe),e(E,Zn),e(Zn,$Z),e($Z,GHe),e(Zn,OHe),e(Zn,Gk),e(Gk,VHe),e(Zn,XHe),e(Zn,Ok),e(Ok,zHe),e(Zn,QHe),e(E,WHe),e(E,Qg),e(Qg,IZ),e(IZ,HHe),e(Qg,UHe),e(Qg,Vk),e(Vk,JHe),e(Qg,YHe),e(E,KHe),e(E,es),e(es,qZ),e(qZ,ZHe),e(es,eUe),e(es,Xk),e(Xk,oUe),e(es,rUe),e(es,zk),e(zk,tUe),e(es,aUe),e(E,nUe),e(E,os),e(os,NZ),e(NZ,sUe),e(os,lUe),e(os,Qk),e(Qk,iUe),e(os,dUe),e(os,Wk),e(Wk,cUe),e(os,fUe),e(E,mUe),e(E,rs),e(rs,jZ),e(jZ,gUe),e(rs,hUe),e(rs,Hk),e(Hk,pUe),e(rs,_Ue),e(rs,DZ),e(DZ,uUe),e(rs,bUe),e(E,FUe),e(E,Wg),e(Wg,GZ),e(GZ,vUe),e(Wg,TUe),e(Wg,Uk),e(Uk,MUe),e(Wg,EUe),e(E,CUe),e(E,ts),e(ts,OZ),e(OZ,wUe),e(ts,AUe),e(ts,Jk),e(Jk,yUe),e(ts,LUe),e(ts,Yk),e(Yk,xUe),e(ts,kUe),e(E,SUe),e(E,Hg),e(Hg,VZ),e(VZ,RUe),e(Hg,BUe),e(Hg,Kk),e(Kk,PUe),e(Hg,$Ue),e(E,IUe),e(E,as),e(as,XZ),e(XZ,qUe),e(as,NUe),e(as,Zk),e(Zk,jUe),e(as,DUe),e(as,eS),e(eS,GUe),e(as,OUe),e(E,VUe),e(E,ns),e(ns,zZ),e(zZ,XUe),e(ns,zUe),e(ns,oS),e(oS,QUe),e(ns,WUe),e(ns,rS),e(rS,HUe),e(ns,UUe),e(E,JUe),e(E,ss),e(ss,QZ),e(QZ,YUe),e(ss,KUe),e(ss,tS),e(tS,ZUe),e(ss,eJe),e(ss,aS),e(aS,oJe),e(ss,rJe),e(E,tJe),e(E,Ug),e(Ug,WZ),e(WZ,aJe),e(Ug,nJe),e(Ug,nS),e(nS,sJe),e(Ug,lJe),e(E,iJe),e(E,ls),e(ls,HZ),e(HZ,dJe),e(ls,cJe),e(ls,sS),e(sS,fJe),e(ls,mJe),e(ls,lS),e(lS,gJe),e(ls,hJe),e(E,pJe),e(E,Jg),e(Jg,UZ),e(UZ,_Je),e(Jg,uJe),e(Jg,iS),e(iS,bJe),e(Jg,FJe),e(E,vJe),e(E,is),e(is,JZ),e(JZ,TJe),e(is,MJe),e(is,dS),e(dS,EJe),e(is,CJe),e(is,cS),e(cS,wJe),e(is,AJe),e(E,yJe),e(E,ds),e(ds,YZ),e(YZ,LJe),e(ds,xJe),e(ds,fS),e(fS,kJe),e(ds,SJe),e(ds,mS),e(mS,RJe),e(ds,BJe),e(E,PJe),e(E,cs),e(cs,KZ),e(KZ,$Je),e(cs,IJe),e(cs,gS),e(gS,qJe),e(cs,NJe),e(cs,hS),e(hS,jJe),e(cs,DJe),e(E,GJe),e(E,fs),e(fs,ZZ),e(ZZ,OJe),e(fs,VJe),e(fs,pS),e(pS,XJe),e(fs,zJe),e(fs,_S),e(_S,QJe),e(fs,WJe),e(E,HJe),e(E,Yg),e(Yg,eee),e(eee,UJe),e(Yg,JJe),e(Yg,uS),e(uS,YJe),e(Yg,KJe),e(E,ZJe),e(E,ms),e(ms,oee),e(oee,eYe),e(ms,oYe),e(ms,bS),e(bS,rYe),e(ms,tYe),e(ms,FS),e(FS,aYe),e(ms,nYe),e(E,sYe),e(E,gs),e(gs,ree),e(ree,lYe),e(gs,iYe),e(gs,vS),e(vS,dYe),e(gs,cYe),e(gs,TS),e(TS,fYe),e(gs,mYe),e(E,gYe),e(E,hs),e(hs,tee),e(tee,hYe),e(hs,pYe),e(hs,MS),e(MS,_Ye),e(hs,uYe),e(hs,ES),e(ES,bYe),e(hs,FYe),e(E,vYe),e(E,ps),e(ps,aee),e(aee,TYe),e(ps,MYe),e(ps,CS),e(CS,EYe),e(ps,CYe),e(ps,wS),e(wS,wYe),e(ps,AYe),e(E,yYe),e(E,_s),e(_s,nee),e(nee,LYe),e(_s,xYe),e(_s,AS),e(AS,kYe),e(_s,SYe),e(_s,yS),e(yS,RYe),e(_s,BYe),e(E,PYe),e(E,us),e(us,see),e(see,$Ye),e(us,IYe),e(us,LS),e(LS,qYe),e(us,NYe),e(us,xS),e(xS,jYe),e(us,DYe),e(E,GYe),e(E,Kg),e(Kg,lee),e(lee,OYe),e(Kg,VYe),e(Kg,kS),e(kS,XYe),e(Kg,zYe),e(E,QYe),e(E,bs),e(bs,iee),e(iee,WYe),e(bs,HYe),e(bs,SS),e(SS,UYe),e(bs,JYe),e(bs,RS),e(RS,YYe),e(bs,KYe),e(E,ZYe),e(E,Zg),e(Zg,dee),e(dee,eKe),e(Zg,oKe),e(Zg,BS),e(BS,rKe),e(Zg,tKe),e(E,aKe),e(E,eh),e(eh,cee),e(cee,nKe),e(eh,sKe),e(eh,PS),e(PS,lKe),e(eh,iKe),e(E,dKe),e(E,Fs),e(Fs,fee),e(fee,cKe),e(Fs,fKe),e(Fs,$S),e($S,mKe),e(Fs,gKe),e(Fs,IS),e(IS,hKe),e(Fs,pKe),e(E,_Ke),e(E,vs),e(vs,mee),e(mee,uKe),e(vs,bKe),e(vs,qS),e(qS,FKe),e(vs,vKe),e(vs,NS),e(NS,TKe),e(vs,MKe),e(E,EKe),e(E,oh),e(oh,gee),e(gee,CKe),e(oh,wKe),e(oh,jS),e(jS,AKe),e(oh,yKe),e(E,LKe),e(E,Ts),e(Ts,hee),e(hee,xKe),e(Ts,kKe),e(Ts,DS),e(DS,SKe),e(Ts,RKe),e(Ts,GS),e(GS,BKe),e(Ts,PKe),e(E,$Ke),e(E,Ms),e(Ms,pee),e(pee,IKe),e(Ms,qKe),e(Ms,OS),e(OS,NKe),e(Ms,jKe),e(Ms,VS),e(VS,DKe),e(Ms,GKe),e(E,OKe),e(E,Es),e(Es,_ee),e(_ee,VKe),e(Es,XKe),e(Es,XS),e(XS,zKe),e(Es,QKe),e(Es,zS),e(zS,WKe),e(Es,HKe),e(E,UKe),e(E,Cs),e(Cs,uee),e(uee,JKe),e(Cs,YKe),e(Cs,QS),e(QS,KKe),e(Cs,ZKe),e(Cs,WS),e(WS,eZe),e(Cs,oZe),e(E,rZe),e(E,ws),e(ws,bee),e(bee,tZe),e(ws,aZe),e(ws,HS),e(HS,nZe),e(ws,sZe),e(ws,US),e(US,lZe),e(ws,iZe),e(E,dZe),e(E,rh),e(rh,Fee),e(Fee,cZe),e(rh,fZe),e(rh,JS),e(JS,mZe),e(rh,gZe),e(E,hZe),e(E,th),e(th,vee),e(vee,pZe),e(th,_Ze),e(th,YS),e(YS,uZe),e(th,bZe),e(E,FZe),e(E,ah),e(ah,Tee),e(Tee,vZe),e(ah,TZe),e(ah,KS),e(KS,MZe),e(ah,EZe),e(E,CZe),e(E,nh),e(nh,Mee),e(Mee,wZe),e(nh,AZe),e(nh,ZS),e(ZS,yZe),e(nh,LZe),e(E,xZe),e(E,As),e(As,Eee),e(Eee,kZe),e(As,SZe),e(As,eR),e(eR,RZe),e(As,BZe),e(As,oR),e(oR,PZe),e(As,$Ze),e(E,IZe),e(E,sh),e(sh,Cee),e(Cee,qZe),e(sh,NZe),e(sh,rR),e(rR,jZe),e(sh,DZe),e(E,GZe),e(E,ys),e(ys,wee),e(wee,OZe),e(ys,VZe),e(ys,tR),e(tR,XZe),e(ys,zZe),e(ys,aR),e(aR,QZe),e(ys,WZe),e(E,HZe),e(E,Ls),e(Ls,Aee),e(Aee,UZe),e(Ls,JZe),e(Ls,nR),e(nR,YZe),e(Ls,KZe),e(Ls,sR),e(sR,ZZe),e(Ls,eeo),e(E,oeo),e(E,xs),e(xs,yee),e(yee,reo),e(xs,teo),e(xs,lR),e(lR,aeo),e(xs,neo),e(xs,iR),e(iR,seo),e(xs,leo),e(E,ieo),e(E,ks),e(ks,Lee),e(Lee,deo),e(ks,ceo),e(ks,dR),e(dR,feo),e(ks,meo),e(ks,cR),e(cR,geo),e(ks,heo),e(E,peo),e(E,Ss),e(Ss,xee),e(xee,_eo),e(Ss,ueo),e(Ss,fR),e(fR,beo),e(Ss,Feo),e(Ss,mR),e(mR,veo),e(Ss,Teo),e(E,Meo),e(E,Rs),e(Rs,kee),e(kee,Eeo),e(Rs,Ceo),e(Rs,gR),e(gR,weo),e(Rs,Aeo),e(Rs,hR),e(hR,yeo),e(Rs,Leo),e(E,xeo),e(E,lh),e(lh,See),e(See,keo),e(lh,Seo),e(lh,pR),e(pR,Reo),e(lh,Beo),e(E,Peo),e(E,ih),e(ih,Ree),e(Ree,$eo),e(ih,Ieo),e(ih,_R),e(_R,qeo),e(ih,Neo),e(E,jeo),e(E,Bs),e(Bs,Bee),e(Bee,Deo),e(Bs,Geo),e(Bs,uR),e(uR,Oeo),e(Bs,Veo),e(Bs,bR),e(bR,Xeo),e(Bs,zeo),e(E,Qeo),e(E,Ps),e(Ps,Pee),e(Pee,Weo),e(Ps,Heo),e(Ps,FR),e(FR,Ueo),e(Ps,Jeo),e(Ps,vR),e(vR,Yeo),e(Ps,Keo),e(E,Zeo),e(E,$s),e($s,$ee),e($ee,eoo),e($s,ooo),e($s,TR),e(TR,roo),e($s,too),e($s,MR),e(MR,aoo),e($s,noo),e(E,soo),e(E,dh),e(dh,Iee),e(Iee,loo),e(dh,ioo),e(dh,ER),e(ER,doo),e(dh,coo),e(E,foo),e(E,ch),e(ch,qee),e(qee,moo),e(ch,goo),e(ch,CR),e(CR,hoo),e(ch,poo),e(E,_oo),e(E,fh),e(fh,Nee),e(Nee,uoo),e(fh,boo),e(fh,wR),e(wR,Foo),e(fh,voo),e(E,Too),e(E,mh),e(mh,jee),e(jee,Moo),e(mh,Eoo),e(mh,AR),e(AR,Coo),e(mh,woo),e(E,Aoo),e(E,gh),e(gh,Dee),e(Dee,yoo),e(gh,Loo),e(gh,yR),e(yR,xoo),e(gh,koo),e(E,Soo),e(E,Is),e(Is,Gee),e(Gee,Roo),e(Is,Boo),e(Is,LR),e(LR,Poo),e(Is,$oo),e(Is,xR),e(xR,Ioo),e(Is,qoo),e(E,Noo),e(E,hh),e(hh,Oee),e(Oee,joo),e(hh,Doo),e(hh,kR),e(kR,Goo),e(hh,Ooo),e(E,Voo),e(E,ph),e(ph,Vee),e(Vee,Xoo),e(ph,zoo),e(ph,SR),e(SR,Qoo),e(ph,Woo),e(E,Hoo),e(E,qs),e(qs,Xee),e(Xee,Uoo),e(qs,Joo),e(qs,RR),e(RR,Yoo),e(qs,Koo),e(qs,BR),e(BR,Zoo),e(qs,ero),e(E,oro),e(E,Ns),e(Ns,zee),e(zee,rro),e(Ns,tro),e(Ns,PR),e(PR,aro),e(Ns,nro),e(Ns,$R),e($R,sro),e(Ns,lro),e(ho,iro),e(ho,Qee),e(Qee,dro),e(ho,cro),g(zC,ho,null),e(Wo,fro),e(Wo,_h),g(QC,_h,null),e(_h,mro),e(_h,Wee),e(Wee,gro),b(c,DRe,u),b(c,Wi,u),e(Wi,uh),e(uh,Hee),g(WC,Hee,null),e(Wi,hro),e(Wi,Uee),e(Uee,pro),b(c,GRe,u),b(c,Ho,u),g(HC,Ho,null),e(Ho,_ro),e(Ho,UC),e(UC,uro),e(UC,IR),e(IR,bro),e(UC,Fro),e(Ho,vro),e(Ho,JC),e(JC,Tro),e(JC,Jee),e(Jee,Mro),e(JC,Ero),e(Ho,Cro),e(Ho,$e),g(YC,$e,null),e($e,wro),e($e,Yee),e(Yee,Aro),e($e,yro),e($e,Va),e(Va,Lro),e(Va,Kee),e(Kee,xro),e(Va,kro),e(Va,Zee),e(Zee,Sro),e(Va,Rro),e(Va,eoe),e(eoe,Bro),e(Va,Pro),e($e,$ro),e($e,J),e(J,bh),e(bh,ooe),e(ooe,Iro),e(bh,qro),e(bh,qR),e(qR,Nro),e(bh,jro),e(J,Dro),e(J,Fh),e(Fh,roe),e(roe,Gro),e(Fh,Oro),e(Fh,NR),e(NR,Vro),e(Fh,Xro),e(J,zro),e(J,vh),e(vh,toe),e(toe,Qro),e(vh,Wro),e(vh,jR),e(jR,Hro),e(vh,Uro),e(J,Jro),e(J,Th),e(Th,aoe),e(aoe,Yro),e(Th,Kro),e(Th,DR),e(DR,Zro),e(Th,eto),e(J,oto),e(J,Mh),e(Mh,noe),e(noe,rto),e(Mh,tto),e(Mh,GR),e(GR,ato),e(Mh,nto),e(J,sto),e(J,Eh),e(Eh,soe),e(soe,lto),e(Eh,ito),e(Eh,OR),e(OR,dto),e(Eh,cto),e(J,fto),e(J,Ch),e(Ch,loe),e(loe,mto),e(Ch,gto),e(Ch,VR),e(VR,hto),e(Ch,pto),e(J,_to),e(J,wh),e(wh,ioe),e(ioe,uto),e(wh,bto),e(wh,XR),e(XR,Fto),e(wh,vto),e(J,Tto),e(J,Ah),e(Ah,doe),e(doe,Mto),e(Ah,Eto),e(Ah,zR),e(zR,Cto),e(Ah,wto),e(J,Ato),e(J,yh),e(yh,coe),e(coe,yto),e(yh,Lto),e(yh,QR),e(QR,xto),e(yh,kto),e(J,Sto),e(J,Lh),e(Lh,foe),e(foe,Rto),e(Lh,Bto),e(Lh,WR),e(WR,Pto),e(Lh,$to),e(J,Ito),e(J,xh),e(xh,moe),e(moe,qto),e(xh,Nto),e(xh,HR),e(HR,jto),e(xh,Dto),e(J,Gto),e(J,kh),e(kh,goe),e(goe,Oto),e(kh,Vto),e(kh,UR),e(UR,Xto),e(kh,zto),e(J,Qto),e(J,Sh),e(Sh,hoe),e(hoe,Wto),e(Sh,Hto),e(Sh,JR),e(JR,Uto),e(Sh,Jto),e(J,Yto),e(J,Rh),e(Rh,poe),e(poe,Kto),e(Rh,Zto),e(Rh,YR),e(YR,eao),e(Rh,oao),e(J,rao),e(J,Bh),e(Bh,_oe),e(_oe,tao),e(Bh,aao),e(Bh,KR),e(KR,nao),e(Bh,sao),e(J,lao),e(J,Ph),e(Ph,uoe),e(uoe,iao),e(Ph,dao),e(Ph,ZR),e(ZR,cao),e(Ph,fao),e(J,mao),e(J,$h),e($h,boe),e(boe,gao),e($h,hao),e($h,eB),e(eB,pao),e($h,_ao),e(J,uao),e(J,Ih),e(Ih,Foe),e(Foe,bao),e(Ih,Fao),e(Ih,oB),e(oB,vao),e(Ih,Tao),e(J,Mao),e(J,qh),e(qh,voe),e(voe,Eao),e(qh,Cao),e(qh,rB),e(rB,wao),e(qh,Aao),e($e,yao),g(Nh,$e,null),e($e,Lao),e($e,Toe),e(Toe,xao),e($e,kao),g(KC,$e,null),e(Ho,Sao),e(Ho,jh),g(ZC,jh,null),e(jh,Rao),e(jh,Moe),e(Moe,Bao),b(c,ORe,u),b(c,Hi,u),e(Hi,Dh),e(Dh,Eoe),g(ew,Eoe,null),e(Hi,Pao),e(Hi,Coe),e(Coe,$ao),b(c,VRe,u),b(c,Uo,u),g(ow,Uo,null),e(Uo,Iao),e(Uo,rw),e(rw,qao),e(rw,tB),e(tB,Nao),e(rw,jao),e(Uo,Dao),e(Uo,tw),e(tw,Gao),e(tw,woe),e(woe,Oao),e(tw,Vao),e(Uo,Xao),e(Uo,Ie),g(aw,Ie,null),e(Ie,zao),e(Ie,Aoe),e(Aoe,Qao),e(Ie,Wao),e(Ie,Ui),e(Ui,Hao),e(Ui,yoe),e(yoe,Uao),e(Ui,Jao),e(Ui,Loe),e(Loe,Yao),e(Ui,Kao),e(Ie,Zao),e(Ie,Ee),e(Ee,Gh),e(Gh,xoe),e(xoe,eno),e(Gh,ono),e(Gh,aB),e(aB,rno),e(Gh,tno),e(Ee,ano),e(Ee,Oh),e(Oh,koe),e(koe,nno),e(Oh,sno),e(Oh,nB),e(nB,lno),e(Oh,ino),e(Ee,dno),e(Ee,Vh),e(Vh,Soe),e(Soe,cno),e(Vh,fno),e(Vh,sB),e(sB,mno),e(Vh,gno),e(Ee,hno),e(Ee,Xh),e(Xh,Roe),e(Roe,pno),e(Xh,_no),e(Xh,lB),e(lB,uno),e(Xh,bno),e(Ee,Fno),e(Ee,zh),e(zh,Boe),e(Boe,vno),e(zh,Tno),e(zh,iB),e(iB,Mno),e(zh,Eno),e(Ee,Cno),e(Ee,Qh),e(Qh,Poe),e(Poe,wno),e(Qh,Ano),e(Qh,dB),e(dB,yno),e(Qh,Lno),e(Ee,xno),e(Ee,Wh),e(Wh,$oe),e($oe,kno),e(Wh,Sno),e(Wh,cB),e(cB,Rno),e(Wh,Bno),e(Ee,Pno),e(Ee,Hh),e(Hh,Ioe),e(Ioe,$no),e(Hh,Ino),e(Hh,fB),e(fB,qno),e(Hh,Nno),e(Ee,jno),e(Ee,Uh),e(Uh,qoe),e(qoe,Dno),e(Uh,Gno),e(Uh,mB),e(mB,Ono),e(Uh,Vno),e(Ie,Xno),g(Jh,Ie,null),e(Ie,zno),e(Ie,Noe),e(Noe,Qno),e(Ie,Wno),g(nw,Ie,null),e(Uo,Hno),e(Uo,Yh),g(sw,Yh,null),e(Yh,Uno),e(Yh,joe),e(joe,Jno),b(c,XRe,u),b(c,Ji,u),e(Ji,Kh),e(Kh,Doe),g(lw,Doe,null),e(Ji,Yno),e(Ji,Goe),e(Goe,Kno),b(c,zRe,u),b(c,Jo,u),g(iw,Jo,null),e(Jo,Zno),e(Jo,Yi),e(Yi,eso),e(Yi,gB),e(gB,oso),e(Yi,rso),e(Yi,hB),e(hB,tso),e(Yi,aso),e(Jo,nso),e(Jo,dw),e(dw,sso),e(dw,Ooe),e(Ooe,lso),e(dw,iso),e(Jo,dso),e(Jo,Xr),g(cw,Xr,null),e(Xr,cso),e(Xr,Voe),e(Voe,fso),e(Xr,mso),e(Xr,Ki),e(Ki,gso),e(Ki,Xoe),e(Xoe,hso),e(Ki,pso),e(Ki,pB),e(pB,_so),e(Ki,uso),e(Xr,bso),e(Xr,zoe),e(zoe,Fso),e(Xr,vso),g(fw,Xr,null),e(Jo,Tso),e(Jo,qe),g(mw,qe,null),e(qe,Mso),e(qe,Qoe),e(Qoe,Eso),e(qe,Cso),e(qe,Xa),e(Xa,wso),e(Xa,Woe),e(Woe,Aso),e(Xa,yso),e(Xa,Hoe),e(Hoe,Lso),e(Xa,xso),e(Xa,Uoe),e(Uoe,kso),e(Xa,Sso),e(qe,Rso),e(qe,T),e(T,Zh),e(Zh,Joe),e(Joe,Bso),e(Zh,Pso),e(Zh,_B),e(_B,$so),e(Zh,Iso),e(T,qso),e(T,ep),e(ep,Yoe),e(Yoe,Nso),e(ep,jso),e(ep,uB),e(uB,Dso),e(ep,Gso),e(T,Oso),e(T,op),e(op,Koe),e(Koe,Vso),e(op,Xso),e(op,bB),e(bB,zso),e(op,Qso),e(T,Wso),e(T,rp),e(rp,Zoe),e(Zoe,Hso),e(rp,Uso),e(rp,FB),e(FB,Jso),e(rp,Yso),e(T,Kso),e(T,tp),e(tp,ere),e(ere,Zso),e(tp,elo),e(tp,vB),e(vB,olo),e(tp,rlo),e(T,tlo),e(T,ap),e(ap,ore),e(ore,alo),e(ap,nlo),e(ap,TB),e(TB,slo),e(ap,llo),e(T,ilo),e(T,np),e(np,rre),e(rre,dlo),e(np,clo),e(np,MB),e(MB,flo),e(np,mlo),e(T,glo),e(T,sp),e(sp,tre),e(tre,hlo),e(sp,plo),e(sp,EB),e(EB,_lo),e(sp,ulo),e(T,blo),e(T,lp),e(lp,are),e(are,Flo),e(lp,vlo),e(lp,CB),e(CB,Tlo),e(lp,Mlo),e(T,Elo),e(T,ip),e(ip,nre),e(nre,Clo),e(ip,wlo),e(ip,wB),e(wB,Alo),e(ip,ylo),e(T,Llo),e(T,dp),e(dp,sre),e(sre,xlo),e(dp,klo),e(dp,AB),e(AB,Slo),e(dp,Rlo),e(T,Blo),e(T,cp),e(cp,lre),e(lre,Plo),e(cp,$lo),e(cp,yB),e(yB,Ilo),e(cp,qlo),e(T,Nlo),e(T,fp),e(fp,ire),e(ire,jlo),e(fp,Dlo),e(fp,LB),e(LB,Glo),e(fp,Olo),e(T,Vlo),e(T,mp),e(mp,dre),e(dre,Xlo),e(mp,zlo),e(mp,xB),e(xB,Qlo),e(mp,Wlo),e(T,Hlo),e(T,gp),e(gp,cre),e(cre,Ulo),e(gp,Jlo),e(gp,kB),e(kB,Ylo),e(gp,Klo),e(T,Zlo),e(T,hp),e(hp,fre),e(fre,eio),e(hp,oio),e(hp,SB),e(SB,rio),e(hp,tio),e(T,aio),e(T,pp),e(pp,mre),e(mre,nio),e(pp,sio),e(pp,RB),e(RB,lio),e(pp,iio),e(T,dio),e(T,_p),e(_p,gre),e(gre,cio),e(_p,fio),e(_p,BB),e(BB,mio),e(_p,gio),e(T,hio),e(T,up),e(up,hre),e(hre,pio),e(up,_io),e(up,PB),e(PB,uio),e(up,bio),e(T,Fio),e(T,bp),e(bp,pre),e(pre,vio),e(bp,Tio),e(bp,$B),e($B,Mio),e(bp,Eio),e(T,Cio),e(T,Fp),e(Fp,_re),e(_re,wio),e(Fp,Aio),e(Fp,IB),e(IB,yio),e(Fp,Lio),e(T,xio),e(T,vp),e(vp,ure),e(ure,kio),e(vp,Sio),e(vp,qB),e(qB,Rio),e(vp,Bio),e(T,Pio),e(T,Tp),e(Tp,bre),e(bre,$io),e(Tp,Iio),e(Tp,NB),e(NB,qio),e(Tp,Nio),e(T,jio),e(T,Mp),e(Mp,Fre),e(Fre,Dio),e(Mp,Gio),e(Mp,jB),e(jB,Oio),e(Mp,Vio),e(T,Xio),e(T,Ep),e(Ep,vre),e(vre,zio),e(Ep,Qio),e(Ep,DB),e(DB,Wio),e(Ep,Hio),e(T,Uio),e(T,Cp),e(Cp,Tre),e(Tre,Jio),e(Cp,Yio),e(Cp,GB),e(GB,Kio),e(Cp,Zio),e(T,edo),e(T,wp),e(wp,Mre),e(Mre,odo),e(wp,rdo),e(wp,OB),e(OB,tdo),e(wp,ado),e(T,ndo),e(T,Ap),e(Ap,Ere),e(Ere,sdo),e(Ap,ldo),e(Ap,VB),e(VB,ido),e(Ap,ddo),e(T,cdo),e(T,yp),e(yp,Cre),e(Cre,fdo),e(yp,mdo),e(yp,XB),e(XB,gdo),e(yp,hdo),e(T,pdo),e(T,Lp),e(Lp,wre),e(wre,_do),e(Lp,udo),e(Lp,zB),e(zB,bdo),e(Lp,Fdo),e(T,vdo),e(T,js),e(js,Are),e(Are,Tdo),e(js,Mdo),e(js,QB),e(QB,Edo),e(js,Cdo),e(js,WB),e(WB,wdo),e(js,Ado),e(T,ydo),e(T,xp),e(xp,yre),e(yre,Ldo),e(xp,xdo),e(xp,HB),e(HB,kdo),e(xp,Sdo),e(T,Rdo),e(T,kp),e(kp,Lre),e(Lre,Bdo),e(kp,Pdo),e(kp,UB),e(UB,$do),e(kp,Ido),e(T,qdo),e(T,Sp),e(Sp,xre),e(xre,Ndo),e(Sp,jdo),e(Sp,JB),e(JB,Ddo),e(Sp,Gdo),e(T,Odo),e(T,Rp),e(Rp,kre),e(kre,Vdo),e(Rp,Xdo),e(Rp,YB),e(YB,zdo),e(Rp,Qdo),e(T,Wdo),e(T,Bp),e(Bp,Sre),e(Sre,Hdo),e(Bp,Udo),e(Bp,KB),e(KB,Jdo),e(Bp,Ydo),e(T,Kdo),e(T,Pp),e(Pp,Rre),e(Rre,Zdo),e(Pp,eco),e(Pp,ZB),e(ZB,oco),e(Pp,rco),e(T,tco),e(T,$p),e($p,Bre),e(Bre,aco),e($p,nco),e($p,eP),e(eP,sco),e($p,lco),e(T,ico),e(T,Ip),e(Ip,Pre),e(Pre,dco),e(Ip,cco),e(Ip,oP),e(oP,fco),e(Ip,mco),e(T,gco),e(T,qp),e(qp,$re),e($re,hco),e(qp,pco),e(qp,rP),e(rP,_co),e(qp,uco),e(T,bco),e(T,Np),e(Np,Ire),e(Ire,Fco),e(Np,vco),e(Np,tP),e(tP,Tco),e(Np,Mco),e(T,Eco),e(T,jp),e(jp,qre),e(qre,Cco),e(jp,wco),e(jp,aP),e(aP,Aco),e(jp,yco),e(T,Lco),e(T,Dp),e(Dp,Nre),e(Nre,xco),e(Dp,kco),e(Dp,nP),e(nP,Sco),e(Dp,Rco),e(T,Bco),e(T,Gp),e(Gp,jre),e(jre,Pco),e(Gp,$co),e(Gp,sP),e(sP,Ico),e(Gp,qco),e(T,Nco),e(T,Op),e(Op,Dre),e(Dre,jco),e(Op,Dco),e(Op,lP),e(lP,Gco),e(Op,Oco),e(T,Vco),e(T,Vp),e(Vp,Gre),e(Gre,Xco),e(Vp,zco),e(Vp,iP),e(iP,Qco),e(Vp,Wco),e(T,Hco),e(T,Xp),e(Xp,Ore),e(Ore,Uco),e(Xp,Jco),e(Xp,dP),e(dP,Yco),e(Xp,Kco),e(T,Zco),e(T,zp),e(zp,Vre),e(Vre,efo),e(zp,ofo),e(zp,cP),e(cP,rfo),e(zp,tfo),e(T,afo),e(T,Qp),e(Qp,Xre),e(Xre,nfo),e(Qp,sfo),e(Qp,fP),e(fP,lfo),e(Qp,ifo),e(T,dfo),e(T,Wp),e(Wp,zre),e(zre,cfo),e(Wp,ffo),e(Wp,mP),e(mP,mfo),e(Wp,gfo),e(T,hfo),e(T,Hp),e(Hp,Qre),e(Qre,pfo),e(Hp,_fo),e(Hp,gP),e(gP,ufo),e(Hp,bfo),e(T,Ffo),e(T,Up),e(Up,Wre),e(Wre,vfo),e(Up,Tfo),e(Up,hP),e(hP,Mfo),e(Up,Efo),e(T,Cfo),e(T,Jp),e(Jp,Hre),e(Hre,wfo),e(Jp,Afo),e(Jp,pP),e(pP,yfo),e(Jp,Lfo),e(T,xfo),e(T,Yp),e(Yp,Ure),e(Ure,kfo),e(Yp,Sfo),e(Yp,_P),e(_P,Rfo),e(Yp,Bfo),e(T,Pfo),e(T,Kp),e(Kp,Jre),e(Jre,$fo),e(Kp,Ifo),e(Kp,uP),e(uP,qfo),e(Kp,Nfo),e(T,jfo),e(T,Zp),e(Zp,Yre),e(Yre,Dfo),e(Zp,Gfo),e(Zp,bP),e(bP,Ofo),e(Zp,Vfo),e(T,Xfo),e(T,e_),e(e_,Kre),e(Kre,zfo),e(e_,Qfo),e(e_,FP),e(FP,Wfo),e(e_,Hfo),e(T,Ufo),e(T,o_),e(o_,Zre),e(Zre,Jfo),e(o_,Yfo),e(o_,vP),e(vP,Kfo),e(o_,Zfo),e(T,emo),e(T,r_),e(r_,ete),e(ete,omo),e(r_,rmo),e(r_,TP),e(TP,tmo),e(r_,amo),e(T,nmo),e(T,t_),e(t_,ote),e(ote,smo),e(t_,lmo),e(t_,MP),e(MP,imo),e(t_,dmo),e(T,cmo),e(T,a_),e(a_,rte),e(rte,fmo),e(a_,mmo),e(a_,EP),e(EP,gmo),e(a_,hmo),e(T,pmo),e(T,n_),e(n_,tte),e(tte,_mo),e(n_,umo),e(n_,CP),e(CP,bmo),e(n_,Fmo),e(T,vmo),e(T,s_),e(s_,ate),e(ate,Tmo),e(s_,Mmo),e(s_,wP),e(wP,Emo),e(s_,Cmo),e(T,wmo),e(T,l_),e(l_,nte),e(nte,Amo),e(l_,ymo),e(l_,AP),e(AP,Lmo),e(l_,xmo),e(T,kmo),e(T,i_),e(i_,ste),e(ste,Smo),e(i_,Rmo),e(i_,yP),e(yP,Bmo),e(i_,Pmo),e(T,$mo),e(T,d_),e(d_,lte),e(lte,Imo),e(d_,qmo),e(d_,LP),e(LP,Nmo),e(d_,jmo),e(T,Dmo),e(T,c_),e(c_,ite),e(ite,Gmo),e(c_,Omo),e(c_,xP),e(xP,Vmo),e(c_,Xmo),e(T,zmo),e(T,f_),e(f_,dte),e(dte,Qmo),e(f_,Wmo),e(f_,kP),e(kP,Hmo),e(f_,Umo),e(T,Jmo),e(T,m_),e(m_,cte),e(cte,Ymo),e(m_,Kmo),e(m_,SP),e(SP,Zmo),e(m_,ego),e(T,ogo),e(T,g_),e(g_,fte),e(fte,rgo),e(g_,tgo),e(g_,RP),e(RP,ago),e(g_,ngo),e(T,sgo),e(T,h_),e(h_,mte),e(mte,lgo),e(h_,igo),e(h_,BP),e(BP,dgo),e(h_,cgo),e(T,fgo),e(T,p_),e(p_,gte),e(gte,mgo),e(p_,ggo),e(p_,PP),e(PP,hgo),e(p_,pgo),e(T,_go),e(T,__),e(__,hte),e(hte,ugo),e(__,bgo),e(__,$P),e($P,Fgo),e(__,vgo),e(T,Tgo),e(T,u_),e(u_,pte),e(pte,Mgo),e(u_,Ego),e(u_,IP),e(IP,Cgo),e(u_,wgo),e(T,Ago),e(T,b_),e(b_,_te),e(_te,ygo),e(b_,Lgo),e(b_,qP),e(qP,xgo),e(b_,kgo),e(T,Sgo),e(T,F_),e(F_,ute),e(ute,Rgo),e(F_,Bgo),e(F_,NP),e(NP,Pgo),e(F_,$go),e(T,Igo),e(T,v_),e(v_,bte),e(bte,qgo),e(v_,Ngo),e(v_,jP),e(jP,jgo),e(v_,Dgo),e(T,Ggo),e(T,T_),e(T_,Fte),e(Fte,Ogo),e(T_,Vgo),e(T_,DP),e(DP,Xgo),e(T_,zgo),e(T,Qgo),e(T,M_),e(M_,vte),e(vte,Wgo),e(M_,Hgo),e(M_,GP),e(GP,Ugo),e(M_,Jgo),e(T,Ygo),e(T,E_),e(E_,Tte),e(Tte,Kgo),e(E_,Zgo),e(E_,OP),e(OP,eho),e(E_,oho),e(T,rho),e(T,C_),e(C_,Mte),e(Mte,tho),e(C_,aho),e(C_,VP),e(VP,nho),e(C_,sho),e(T,lho),e(T,w_),e(w_,Ete),e(Ete,iho),e(w_,dho),e(w_,XP),e(XP,cho),e(w_,fho),e(T,mho),e(T,A_),e(A_,Cte),e(Cte,gho),e(A_,hho),e(A_,zP),e(zP,pho),e(A_,_ho),e(T,uho),e(T,y_),e(y_,wte),e(wte,bho),e(y_,Fho),e(y_,QP),e(QP,vho),e(y_,Tho),e(T,Mho),e(T,L_),e(L_,Ate),e(Ate,Eho),e(L_,Cho),e(L_,WP),e(WP,who),e(L_,Aho),e(T,yho),e(T,x_),e(x_,yte),e(yte,Lho),e(x_,xho),e(x_,HP),e(HP,kho),e(x_,Sho),e(T,Rho),e(T,k_),e(k_,Lte),e(Lte,Bho),e(k_,Pho),e(k_,UP),e(UP,$ho),e(k_,Iho),e(T,qho),e(T,S_),e(S_,xte),e(xte,Nho),e(S_,jho),e(S_,JP),e(JP,Dho),e(S_,Gho),e(T,Oho),e(T,R_),e(R_,kte),e(kte,Vho),e(R_,Xho),e(R_,YP),e(YP,zho),e(R_,Qho),e(T,Who),e(T,B_),e(B_,Ste),e(Ste,Hho),e(B_,Uho),e(B_,KP),e(KP,Jho),e(B_,Yho),e(T,Kho),e(T,P_),e(P_,Rte),e(Rte,Zho),e(P_,epo),e(P_,ZP),e(ZP,opo),e(P_,rpo),e(T,tpo),e(T,$_),e($_,Bte),e(Bte,apo),e($_,npo),e($_,e$),e(e$,spo),e($_,lpo),e(T,ipo),e(T,I_),e(I_,Pte),e(Pte,dpo),e(I_,cpo),e(I_,o$),e(o$,fpo),e(I_,mpo),e(T,gpo),e(T,q_),e(q_,$te),e($te,hpo),e(q_,ppo),e(q_,r$),e(r$,_po),e(q_,upo),e(qe,bpo),e(qe,N_),e(N_,Fpo),e(N_,Ite),e(Ite,vpo),e(N_,Tpo),e(N_,qte),e(qte,Mpo),e(qe,Epo),e(qe,Nte),e(Nte,Cpo),e(qe,wpo),g(gw,qe,null),b(c,QRe,u),b(c,Zi,u),e(Zi,j_),e(j_,jte),g(hw,jte,null),e(Zi,Apo),e(Zi,Dte),e(Dte,ypo),b(c,WRe,u),b(c,Yo,u),g(pw,Yo,null),e(Yo,Lpo),e(Yo,ed),e(ed,xpo),e(ed,t$),e(t$,kpo),e(ed,Spo),e(ed,a$),e(a$,Rpo),e(ed,Bpo),e(Yo,Ppo),e(Yo,_w),e(_w,$po),e(_w,Gte),e(Gte,Ipo),e(_w,qpo),e(Yo,Npo),e(Yo,zr),g(uw,zr,null),e(zr,jpo),e(zr,Ote),e(Ote,Dpo),e(zr,Gpo),e(zr,od),e(od,Opo),e(od,Vte),e(Vte,Vpo),e(od,Xpo),e(od,n$),e(n$,zpo),e(od,Qpo),e(zr,Wpo),e(zr,Xte),e(Xte,Hpo),e(zr,Upo),g(bw,zr,null),e(Yo,Jpo),e(Yo,Ne),g(Fw,Ne,null),e(Ne,Ypo),e(Ne,zte),e(zte,Kpo),e(Ne,Zpo),e(Ne,za),e(za,e_o),e(za,Qte),e(Qte,o_o),e(za,r_o),e(za,Wte),e(Wte,t_o),e(za,a_o),e(za,Hte),e(Hte,n_o),e(za,s_o),e(Ne,l_o),e(Ne,S),e(S,D_),e(D_,Ute),e(Ute,i_o),e(D_,d_o),e(D_,s$),e(s$,c_o),e(D_,f_o),e(S,m_o),e(S,G_),e(G_,Jte),e(Jte,g_o),e(G_,h_o),e(G_,l$),e(l$,p_o),e(G_,__o),e(S,u_o),e(S,O_),e(O_,Yte),e(Yte,b_o),e(O_,F_o),e(O_,i$),e(i$,v_o),e(O_,T_o),e(S,M_o),e(S,V_),e(V_,Kte),e(Kte,E_o),e(V_,C_o),e(V_,d$),e(d$,w_o),e(V_,A_o),e(S,y_o),e(S,X_),e(X_,Zte),e(Zte,L_o),e(X_,x_o),e(X_,c$),e(c$,k_o),e(X_,S_o),e(S,R_o),e(S,z_),e(z_,eae),e(eae,B_o),e(z_,P_o),e(z_,f$),e(f$,$_o),e(z_,I_o),e(S,q_o),e(S,Q_),e(Q_,oae),e(oae,N_o),e(Q_,j_o),e(Q_,m$),e(m$,D_o),e(Q_,G_o),e(S,O_o),e(S,W_),e(W_,rae),e(rae,V_o),e(W_,X_o),e(W_,g$),e(g$,z_o),e(W_,Q_o),e(S,W_o),e(S,H_),e(H_,tae),e(tae,H_o),e(H_,U_o),e(H_,h$),e(h$,J_o),e(H_,Y_o),e(S,K_o),e(S,U_),e(U_,aae),e(aae,Z_o),e(U_,euo),e(U_,p$),e(p$,ouo),e(U_,ruo),e(S,tuo),e(S,J_),e(J_,nae),e(nae,auo),e(J_,nuo),e(J_,_$),e(_$,suo),e(J_,luo),e(S,iuo),e(S,Y_),e(Y_,sae),e(sae,duo),e(Y_,cuo),e(Y_,u$),e(u$,fuo),e(Y_,muo),e(S,guo),e(S,K_),e(K_,lae),e(lae,huo),e(K_,puo),e(K_,b$),e(b$,_uo),e(K_,uuo),e(S,buo),e(S,Z_),e(Z_,iae),e(iae,Fuo),e(Z_,vuo),e(Z_,F$),e(F$,Tuo),e(Z_,Muo),e(S,Euo),e(S,eu),e(eu,dae),e(dae,Cuo),e(eu,wuo),e(eu,v$),e(v$,Auo),e(eu,yuo),e(S,Luo),e(S,ou),e(ou,cae),e(cae,xuo),e(ou,kuo),e(ou,T$),e(T$,Suo),e(ou,Ruo),e(S,Buo),e(S,ru),e(ru,fae),e(fae,Puo),e(ru,$uo),e(ru,M$),e(M$,Iuo),e(ru,quo),e(S,Nuo),e(S,tu),e(tu,mae),e(mae,juo),e(tu,Duo),e(tu,E$),e(E$,Guo),e(tu,Ouo),e(S,Vuo),e(S,au),e(au,gae),e(gae,Xuo),e(au,zuo),e(au,C$),e(C$,Quo),e(au,Wuo),e(S,Huo),e(S,nu),e(nu,hae),e(hae,Uuo),e(nu,Juo),e(nu,w$),e(w$,Yuo),e(nu,Kuo),e(S,Zuo),e(S,su),e(su,pae),e(pae,e6o),e(su,o6o),e(su,A$),e(A$,r6o),e(su,t6o),e(S,a6o),e(S,lu),e(lu,_ae),e(_ae,n6o),e(lu,s6o),e(lu,y$),e(y$,l6o),e(lu,i6o),e(S,d6o),e(S,iu),e(iu,uae),e(uae,c6o),e(iu,f6o),e(iu,L$),e(L$,m6o),e(iu,g6o),e(S,h6o),e(S,du),e(du,bae),e(bae,p6o),e(du,_6o),e(du,x$),e(x$,u6o),e(du,b6o),e(S,F6o),e(S,cu),e(cu,Fae),e(Fae,v6o),e(cu,T6o),e(cu,k$),e(k$,M6o),e(cu,E6o),e(S,C6o),e(S,fu),e(fu,vae),e(vae,w6o),e(fu,A6o),e(fu,S$),e(S$,y6o),e(fu,L6o),e(S,x6o),e(S,mu),e(mu,Tae),e(Tae,k6o),e(mu,S6o),e(mu,R$),e(R$,R6o),e(mu,B6o),e(S,P6o),e(S,gu),e(gu,Mae),e(Mae,$6o),e(gu,I6o),e(gu,B$),e(B$,q6o),e(gu,N6o),e(S,j6o),e(S,hu),e(hu,Eae),e(Eae,D6o),e(hu,G6o),e(hu,P$),e(P$,O6o),e(hu,V6o),e(S,X6o),e(S,pu),e(pu,Cae),e(Cae,z6o),e(pu,Q6o),e(pu,$$),e($$,W6o),e(pu,H6o),e(S,U6o),e(S,_u),e(_u,wae),e(wae,J6o),e(_u,Y6o),e(_u,I$),e(I$,K6o),e(_u,Z6o),e(S,e1o),e(S,uu),e(uu,Aae),e(Aae,o1o),e(uu,r1o),e(uu,q$),e(q$,t1o),e(uu,a1o),e(S,n1o),e(S,bu),e(bu,yae),e(yae,s1o),e(bu,l1o),e(bu,N$),e(N$,i1o),e(bu,d1o),e(S,c1o),e(S,Fu),e(Fu,Lae),e(Lae,f1o),e(Fu,m1o),e(Fu,j$),e(j$,g1o),e(Fu,h1o),e(S,p1o),e(S,vu),e(vu,xae),e(xae,_1o),e(vu,u1o),e(vu,D$),e(D$,b1o),e(vu,F1o),e(S,v1o),e(S,Tu),e(Tu,kae),e(kae,T1o),e(Tu,M1o),e(Tu,G$),e(G$,E1o),e(Tu,C1o),e(S,w1o),e(S,Mu),e(Mu,Sae),e(Sae,A1o),e(Mu,y1o),e(Mu,O$),e(O$,L1o),e(Mu,x1o),e(S,k1o),e(S,Eu),e(Eu,Rae),e(Rae,S1o),e(Eu,R1o),e(Eu,V$),e(V$,B1o),e(Eu,P1o),e(S,$1o),e(S,Cu),e(Cu,Bae),e(Bae,I1o),e(Cu,q1o),e(Cu,X$),e(X$,N1o),e(Cu,j1o),e(Ne,D1o),e(Ne,wu),e(wu,G1o),e(wu,Pae),e(Pae,O1o),e(wu,V1o),e(wu,$ae),e($ae,X1o),e(Ne,z1o),e(Ne,Iae),e(Iae,Q1o),e(Ne,W1o),g(vw,Ne,null),b(c,HRe,u),b(c,rd,u),e(rd,Au),e(Au,qae),g(Tw,qae,null),e(rd,H1o),e(rd,Nae),e(Nae,U1o),b(c,URe,u),b(c,Ko,u),g(Mw,Ko,null),e(Ko,J1o),e(Ko,td),e(td,Y1o),e(td,z$),e(z$,K1o),e(td,Z1o),e(td,Q$),e(Q$,e4o),e(td,o4o),e(Ko,r4o),e(Ko,Ew),e(Ew,t4o),e(Ew,jae),e(jae,a4o),e(Ew,n4o),e(Ko,s4o),e(Ko,Qr),g(Cw,Qr,null),e(Qr,l4o),e(Qr,Dae),e(Dae,i4o),e(Qr,d4o),e(Qr,ad),e(ad,c4o),e(ad,Gae),e(Gae,f4o),e(ad,m4o),e(ad,W$),e(W$,g4o),e(ad,h4o),e(Qr,p4o),e(Qr,Oae),e(Oae,_4o),e(Qr,u4o),g(ww,Qr,null),e(Ko,b4o),e(Ko,je),g(Aw,je,null),e(je,F4o),e(je,Vae),e(Vae,v4o),e(je,T4o),e(je,Qa),e(Qa,M4o),e(Qa,Xae),e(Xae,E4o),e(Qa,C4o),e(Qa,zae),e(zae,w4o),e(Qa,A4o),e(Qa,Qae),e(Qae,y4o),e(Qa,L4o),e(je,x4o),e(je,$),e($,yu),e(yu,Wae),e(Wae,k4o),e(yu,S4o),e(yu,H$),e(H$,R4o),e(yu,B4o),e($,P4o),e($,Lu),e(Lu,Hae),e(Hae,$4o),e(Lu,I4o),e(Lu,U$),e(U$,q4o),e(Lu,N4o),e($,j4o),e($,xu),e(xu,Uae),e(Uae,D4o),e(xu,G4o),e(xu,J$),e(J$,O4o),e(xu,V4o),e($,X4o),e($,ku),e(ku,Jae),e(Jae,z4o),e(ku,Q4o),e(ku,Y$),e(Y$,W4o),e(ku,H4o),e($,U4o),e($,Su),e(Su,Yae),e(Yae,J4o),e(Su,Y4o),e(Su,K$),e(K$,K4o),e(Su,Z4o),e($,ebo),e($,Ru),e(Ru,Kae),e(Kae,obo),e(Ru,rbo),e(Ru,Z$),e(Z$,tbo),e(Ru,abo),e($,nbo),e($,Bu),e(Bu,Zae),e(Zae,sbo),e(Bu,lbo),e(Bu,eI),e(eI,ibo),e(Bu,dbo),e($,cbo),e($,Pu),e(Pu,ene),e(ene,fbo),e(Pu,mbo),e(Pu,oI),e(oI,gbo),e(Pu,hbo),e($,pbo),e($,$u),e($u,one),e(one,_bo),e($u,ubo),e($u,rI),e(rI,bbo),e($u,Fbo),e($,vbo),e($,Iu),e(Iu,rne),e(rne,Tbo),e(Iu,Mbo),e(Iu,tI),e(tI,Ebo),e(Iu,Cbo),e($,wbo),e($,qu),e(qu,tne),e(tne,Abo),e(qu,ybo),e(qu,aI),e(aI,Lbo),e(qu,xbo),e($,kbo),e($,Nu),e(Nu,ane),e(ane,Sbo),e(Nu,Rbo),e(Nu,nI),e(nI,Bbo),e(Nu,Pbo),e($,$bo),e($,ju),e(ju,nne),e(nne,Ibo),e(ju,qbo),e(ju,sI),e(sI,Nbo),e(ju,jbo),e($,Dbo),e($,Du),e(Du,sne),e(sne,Gbo),e(Du,Obo),e(Du,lI),e(lI,Vbo),e(Du,Xbo),e($,zbo),e($,Gu),e(Gu,lne),e(lne,Qbo),e(Gu,Wbo),e(Gu,iI),e(iI,Hbo),e(Gu,Ubo),e($,Jbo),e($,Ou),e(Ou,ine),e(ine,Ybo),e(Ou,Kbo),e(Ou,dI),e(dI,Zbo),e(Ou,e5o),e($,o5o),e($,Vu),e(Vu,dne),e(dne,r5o),e(Vu,t5o),e(Vu,cI),e(cI,a5o),e(Vu,n5o),e($,s5o),e($,Xu),e(Xu,cne),e(cne,l5o),e(Xu,i5o),e(Xu,fI),e(fI,d5o),e(Xu,c5o),e($,f5o),e($,zu),e(zu,fne),e(fne,m5o),e(zu,g5o),e(zu,mI),e(mI,h5o),e(zu,p5o),e($,_5o),e($,Qu),e(Qu,mne),e(mne,u5o),e(Qu,b5o),e(Qu,gI),e(gI,F5o),e(Qu,v5o),e($,T5o),e($,Wu),e(Wu,gne),e(gne,M5o),e(Wu,E5o),e(Wu,hI),e(hI,C5o),e(Wu,w5o),e($,A5o),e($,Hu),e(Hu,hne),e(hne,y5o),e(Hu,L5o),e(Hu,pI),e(pI,x5o),e(Hu,k5o),e($,S5o),e($,Uu),e(Uu,pne),e(pne,R5o),e(Uu,B5o),e(Uu,_I),e(_I,P5o),e(Uu,$5o),e($,I5o),e($,Ju),e(Ju,_ne),e(_ne,q5o),e(Ju,N5o),e(Ju,uI),e(uI,j5o),e(Ju,D5o),e($,G5o),e($,Yu),e(Yu,une),e(une,O5o),e(Yu,V5o),e(Yu,bI),e(bI,X5o),e(Yu,z5o),e($,Q5o),e($,Ku),e(Ku,bne),e(bne,W5o),e(Ku,H5o),e(Ku,FI),e(FI,U5o),e(Ku,J5o),e($,Y5o),e($,Zu),e(Zu,Fne),e(Fne,K5o),e(Zu,Z5o),e(Zu,vI),e(vI,e2o),e(Zu,o2o),e($,r2o),e($,e6),e(e6,vne),e(vne,t2o),e(e6,a2o),e(e6,TI),e(TI,n2o),e(e6,s2o),e($,l2o),e($,o6),e(o6,Tne),e(Tne,i2o),e(o6,d2o),e(o6,MI),e(MI,c2o),e(o6,f2o),e($,m2o),e($,r6),e(r6,Mne),e(Mne,g2o),e(r6,h2o),e(r6,EI),e(EI,p2o),e(r6,_2o),e($,u2o),e($,t6),e(t6,Ene),e(Ene,b2o),e(t6,F2o),e(t6,CI),e(CI,v2o),e(t6,T2o),e($,M2o),e($,a6),e(a6,Cne),e(Cne,E2o),e(a6,C2o),e(a6,wI),e(wI,w2o),e(a6,A2o),e($,y2o),e($,n6),e(n6,wne),e(wne,L2o),e(n6,x2o),e(n6,AI),e(AI,k2o),e(n6,S2o),e($,R2o),e($,s6),e(s6,Ane),e(Ane,B2o),e(s6,P2o),e(s6,yI),e(yI,$2o),e(s6,I2o),e($,q2o),e($,l6),e(l6,yne),e(yne,N2o),e(l6,j2o),e(l6,LI),e(LI,D2o),e(l6,G2o),e(je,O2o),e(je,i6),e(i6,V2o),e(i6,Lne),e(Lne,X2o),e(i6,z2o),e(i6,xne),e(xne,Q2o),e(je,W2o),e(je,kne),e(kne,H2o),e(je,U2o),g(yw,je,null),b(c,JRe,u),b(c,nd,u),e(nd,d6),e(d6,Sne),g(Lw,Sne,null),e(nd,J2o),e(nd,Rne),e(Rne,Y2o),b(c,YRe,u),b(c,Zo,u),g(xw,Zo,null),e(Zo,K2o),e(Zo,sd),e(sd,Z2o),e(sd,xI),e(xI,eFo),e(sd,oFo),e(sd,kI),e(kI,rFo),e(sd,tFo),e(Zo,aFo),e(Zo,kw),e(kw,nFo),e(kw,Bne),e(Bne,sFo),e(kw,lFo),e(Zo,iFo),e(Zo,Wr),g(Sw,Wr,null),e(Wr,dFo),e(Wr,Pne),e(Pne,cFo),e(Wr,fFo),e(Wr,ld),e(ld,mFo),e(ld,$ne),e($ne,gFo),e(ld,hFo),e(ld,SI),e(SI,pFo),e(ld,_Fo),e(Wr,uFo),e(Wr,Ine),e(Ine,bFo),e(Wr,FFo),g(Rw,Wr,null),e(Zo,vFo),e(Zo,De),g(Bw,De,null),e(De,TFo),e(De,qne),e(qne,MFo),e(De,EFo),e(De,Wa),e(Wa,CFo),e(Wa,Nne),e(Nne,wFo),e(Wa,AFo),e(Wa,jne),e(jne,yFo),e(Wa,LFo),e(Wa,Dne),e(Dne,xFo),e(Wa,kFo),e(De,SFo),e(De,I),e(I,c6),e(c6,Gne),e(Gne,RFo),e(c6,BFo),e(c6,RI),e(RI,PFo),e(c6,$Fo),e(I,IFo),e(I,f6),e(f6,One),e(One,qFo),e(f6,NFo),e(f6,BI),e(BI,jFo),e(f6,DFo),e(I,GFo),e(I,m6),e(m6,Vne),e(Vne,OFo),e(m6,VFo),e(m6,PI),e(PI,XFo),e(m6,zFo),e(I,QFo),e(I,g6),e(g6,Xne),e(Xne,WFo),e(g6,HFo),e(g6,$I),e($I,UFo),e(g6,JFo),e(I,YFo),e(I,h6),e(h6,zne),e(zne,KFo),e(h6,ZFo),e(h6,II),e(II,evo),e(h6,ovo),e(I,rvo),e(I,p6),e(p6,Qne),e(Qne,tvo),e(p6,avo),e(p6,qI),e(qI,nvo),e(p6,svo),e(I,lvo),e(I,_6),e(_6,Wne),e(Wne,ivo),e(_6,dvo),e(_6,NI),e(NI,cvo),e(_6,fvo),e(I,mvo),e(I,u6),e(u6,Hne),e(Hne,gvo),e(u6,hvo),e(u6,jI),e(jI,pvo),e(u6,_vo),e(I,uvo),e(I,b6),e(b6,Une),e(Une,bvo),e(b6,Fvo),e(b6,DI),e(DI,vvo),e(b6,Tvo),e(I,Mvo),e(I,F6),e(F6,Jne),e(Jne,Evo),e(F6,Cvo),e(F6,GI),e(GI,wvo),e(F6,Avo),e(I,yvo),e(I,v6),e(v6,Yne),e(Yne,Lvo),e(v6,xvo),e(v6,OI),e(OI,kvo),e(v6,Svo),e(I,Rvo),e(I,T6),e(T6,Kne),e(Kne,Bvo),e(T6,Pvo),e(T6,VI),e(VI,$vo),e(T6,Ivo),e(I,qvo),e(I,M6),e(M6,Zne),e(Zne,Nvo),e(M6,jvo),e(M6,XI),e(XI,Dvo),e(M6,Gvo),e(I,Ovo),e(I,E6),e(E6,ese),e(ese,Vvo),e(E6,Xvo),e(E6,zI),e(zI,zvo),e(E6,Qvo),e(I,Wvo),e(I,C6),e(C6,ose),e(ose,Hvo),e(C6,Uvo),e(C6,QI),e(QI,Jvo),e(C6,Yvo),e(I,Kvo),e(I,w6),e(w6,rse),e(rse,Zvo),e(w6,eTo),e(w6,WI),e(WI,oTo),e(w6,rTo),e(I,tTo),e(I,A6),e(A6,tse),e(tse,aTo),e(A6,nTo),e(A6,HI),e(HI,sTo),e(A6,lTo),e(I,iTo),e(I,y6),e(y6,ase),e(ase,dTo),e(y6,cTo),e(y6,UI),e(UI,fTo),e(y6,mTo),e(I,gTo),e(I,L6),e(L6,nse),e(nse,hTo),e(L6,pTo),e(L6,JI),e(JI,_To),e(L6,uTo),e(I,bTo),e(I,x6),e(x6,sse),e(sse,FTo),e(x6,vTo),e(x6,YI),e(YI,TTo),e(x6,MTo),e(I,ETo),e(I,k6),e(k6,lse),e(lse,CTo),e(k6,wTo),e(k6,KI),e(KI,ATo),e(k6,yTo),e(I,LTo),e(I,S6),e(S6,ise),e(ise,xTo),e(S6,kTo),e(S6,ZI),e(ZI,STo),e(S6,RTo),e(I,BTo),e(I,R6),e(R6,dse),e(dse,PTo),e(R6,$To),e(R6,eq),e(eq,ITo),e(R6,qTo),e(I,NTo),e(I,B6),e(B6,cse),e(cse,jTo),e(B6,DTo),e(B6,oq),e(oq,GTo),e(B6,OTo),e(I,VTo),e(I,P6),e(P6,fse),e(fse,XTo),e(P6,zTo),e(P6,rq),e(rq,QTo),e(P6,WTo),e(I,HTo),e(I,$6),e($6,mse),e(mse,UTo),e($6,JTo),e($6,tq),e(tq,YTo),e($6,KTo),e(I,ZTo),e(I,I6),e(I6,gse),e(gse,eMo),e(I6,oMo),e(I6,aq),e(aq,rMo),e(I6,tMo),e(I,aMo),e(I,q6),e(q6,hse),e(hse,nMo),e(q6,sMo),e(q6,nq),e(nq,lMo),e(q6,iMo),e(I,dMo),e(I,N6),e(N6,pse),e(pse,cMo),e(N6,fMo),e(N6,sq),e(sq,mMo),e(N6,gMo),e(I,hMo),e(I,j6),e(j6,_se),e(_se,pMo),e(j6,_Mo),e(j6,lq),e(lq,uMo),e(j6,bMo),e(I,FMo),e(I,D6),e(D6,use),e(use,vMo),e(D6,TMo),e(D6,bse),e(bse,MMo),e(D6,EMo),e(I,CMo),e(I,G6),e(G6,Fse),e(Fse,wMo),e(G6,AMo),e(G6,iq),e(iq,yMo),e(G6,LMo),e(I,xMo),e(I,O6),e(O6,vse),e(vse,kMo),e(O6,SMo),e(O6,dq),e(dq,RMo),e(O6,BMo),e(I,PMo),e(I,V6),e(V6,Tse),e(Tse,$Mo),e(V6,IMo),e(V6,cq),e(cq,qMo),e(V6,NMo),e(I,jMo),e(I,X6),e(X6,Mse),e(Mse,DMo),e(X6,GMo),e(X6,fq),e(fq,OMo),e(X6,VMo),e(De,XMo),e(De,z6),e(z6,zMo),e(z6,Ese),e(Ese,QMo),e(z6,WMo),e(z6,Cse),e(Cse,HMo),e(De,UMo),e(De,wse),e(wse,JMo),e(De,YMo),g(Pw,De,null),b(c,KRe,u),b(c,id,u),e(id,Q6),e(Q6,Ase),g($w,Ase,null),e(id,KMo),e(id,yse),e(yse,ZMo),b(c,ZRe,u),b(c,er,u),g(Iw,er,null),e(er,eEo),e(er,dd),e(dd,oEo),e(dd,mq),e(mq,rEo),e(dd,tEo),e(dd,gq),e(gq,aEo),e(dd,nEo),e(er,sEo),e(er,qw),e(qw,lEo),e(qw,Lse),e(Lse,iEo),e(qw,dEo),e(er,cEo),e(er,Hr),g(Nw,Hr,null),e(Hr,fEo),e(Hr,xse),e(xse,mEo),e(Hr,gEo),e(Hr,cd),e(cd,hEo),e(cd,kse),e(kse,pEo),e(cd,_Eo),e(cd,hq),e(hq,uEo),e(cd,bEo),e(Hr,FEo),e(Hr,Sse),e(Sse,vEo),e(Hr,TEo),g(jw,Hr,null),e(er,MEo),e(er,Ge),g(Dw,Ge,null),e(Ge,EEo),e(Ge,Rse),e(Rse,CEo),e(Ge,wEo),e(Ge,Ha),e(Ha,AEo),e(Ha,Bse),e(Bse,yEo),e(Ha,LEo),e(Ha,Pse),e(Pse,xEo),e(Ha,kEo),e(Ha,$se),e($se,SEo),e(Ha,REo),e(Ge,BEo),e(Ge,ne),e(ne,W6),e(W6,Ise),e(Ise,PEo),e(W6,$Eo),e(W6,pq),e(pq,IEo),e(W6,qEo),e(ne,NEo),e(ne,H6),e(H6,qse),e(qse,jEo),e(H6,DEo),e(H6,_q),e(_q,GEo),e(H6,OEo),e(ne,VEo),e(ne,U6),e(U6,Nse),e(Nse,XEo),e(U6,zEo),e(U6,uq),e(uq,QEo),e(U6,WEo),e(ne,HEo),e(ne,J6),e(J6,jse),e(jse,UEo),e(J6,JEo),e(J6,bq),e(bq,YEo),e(J6,KEo),e(ne,ZEo),e(ne,Y6),e(Y6,Dse),e(Dse,e3o),e(Y6,o3o),e(Y6,Fq),e(Fq,r3o),e(Y6,t3o),e(ne,a3o),e(ne,K6),e(K6,Gse),e(Gse,n3o),e(K6,s3o),e(K6,vq),e(vq,l3o),e(K6,i3o),e(ne,d3o),e(ne,Z6),e(Z6,Ose),e(Ose,c3o),e(Z6,f3o),e(Z6,Tq),e(Tq,m3o),e(Z6,g3o),e(ne,h3o),e(ne,e1),e(e1,Vse),e(Vse,p3o),e(e1,_3o),e(e1,Mq),e(Mq,u3o),e(e1,b3o),e(ne,F3o),e(ne,o1),e(o1,Xse),e(Xse,v3o),e(o1,T3o),e(o1,Eq),e(Eq,M3o),e(o1,E3o),e(ne,C3o),e(ne,r1),e(r1,zse),e(zse,w3o),e(r1,A3o),e(r1,Cq),e(Cq,y3o),e(r1,L3o),e(ne,x3o),e(ne,t1),e(t1,Qse),e(Qse,k3o),e(t1,S3o),e(t1,wq),e(wq,R3o),e(t1,B3o),e(ne,P3o),e(ne,a1),e(a1,Wse),e(Wse,$3o),e(a1,I3o),e(a1,Aq),e(Aq,q3o),e(a1,N3o),e(ne,j3o),e(ne,n1),e(n1,Hse),e(Hse,D3o),e(n1,G3o),e(n1,yq),e(yq,O3o),e(n1,V3o),e(ne,X3o),e(ne,s1),e(s1,Use),e(Use,z3o),e(s1,Q3o),e(s1,Lq),e(Lq,W3o),e(s1,H3o),e(ne,U3o),e(ne,l1),e(l1,Jse),e(Jse,J3o),e(l1,Y3o),e(l1,xq),e(xq,K3o),e(l1,Z3o),e(ne,eCo),e(ne,i1),e(i1,Yse),e(Yse,oCo),e(i1,rCo),e(i1,kq),e(kq,tCo),e(i1,aCo),e(ne,nCo),e(ne,d1),e(d1,Kse),e(Kse,sCo),e(d1,lCo),e(d1,Sq),e(Sq,iCo),e(d1,dCo),e(Ge,cCo),e(Ge,c1),e(c1,fCo),e(c1,Zse),e(Zse,mCo),e(c1,gCo),e(c1,ele),e(ele,hCo),e(Ge,pCo),e(Ge,ole),e(ole,_Co),e(Ge,uCo),g(Gw,Ge,null),b(c,eBe,u),b(c,fd,u),e(fd,f1),e(f1,rle),g(Ow,rle,null),e(fd,bCo),e(fd,tle),e(tle,FCo),b(c,oBe,u),b(c,or,u),g(Vw,or,null),e(or,vCo),e(or,md),e(md,TCo),e(md,Rq),e(Rq,MCo),e(md,ECo),e(md,Bq),e(Bq,CCo),e(md,wCo),e(or,ACo),e(or,Xw),e(Xw,yCo),e(Xw,ale),e(ale,LCo),e(Xw,xCo),e(or,kCo),e(or,Ur),g(zw,Ur,null),e(Ur,SCo),e(Ur,nle),e(nle,RCo),e(Ur,BCo),e(Ur,gd),e(gd,PCo),e(gd,sle),e(sle,$Co),e(gd,ICo),e(gd,Pq),e(Pq,qCo),e(gd,NCo),e(Ur,jCo),e(Ur,lle),e(lle,DCo),e(Ur,GCo),g(Qw,Ur,null),e(or,OCo),e(or,Oe),g(Ww,Oe,null),e(Oe,VCo),e(Oe,ile),e(ile,XCo),e(Oe,zCo),e(Oe,Ua),e(Ua,QCo),e(Ua,dle),e(dle,WCo),e(Ua,HCo),e(Ua,cle),e(cle,UCo),e(Ua,JCo),e(Ua,fle),e(fle,YCo),e(Ua,KCo),e(Oe,ZCo),e(Oe,y),e(y,m1),e(m1,mle),e(mle,ewo),e(m1,owo),e(m1,$q),e($q,rwo),e(m1,two),e(y,awo),e(y,g1),e(g1,gle),e(gle,nwo),e(g1,swo),e(g1,Iq),e(Iq,lwo),e(g1,iwo),e(y,dwo),e(y,h1),e(h1,hle),e(hle,cwo),e(h1,fwo),e(h1,qq),e(qq,mwo),e(h1,gwo),e(y,hwo),e(y,p1),e(p1,ple),e(ple,pwo),e(p1,_wo),e(p1,Nq),e(Nq,uwo),e(p1,bwo),e(y,Fwo),e(y,_1),e(_1,_le),e(_le,vwo),e(_1,Two),e(_1,jq),e(jq,Mwo),e(_1,Ewo),e(y,Cwo),e(y,u1),e(u1,ule),e(ule,wwo),e(u1,Awo),e(u1,Dq),e(Dq,ywo),e(u1,Lwo),e(y,xwo),e(y,b1),e(b1,ble),e(ble,kwo),e(b1,Swo),e(b1,Gq),e(Gq,Rwo),e(b1,Bwo),e(y,Pwo),e(y,F1),e(F1,Fle),e(Fle,$wo),e(F1,Iwo),e(F1,Oq),e(Oq,qwo),e(F1,Nwo),e(y,jwo),e(y,v1),e(v1,vle),e(vle,Dwo),e(v1,Gwo),e(v1,Vq),e(Vq,Owo),e(v1,Vwo),e(y,Xwo),e(y,T1),e(T1,Tle),e(Tle,zwo),e(T1,Qwo),e(T1,Xq),e(Xq,Wwo),e(T1,Hwo),e(y,Uwo),e(y,M1),e(M1,Mle),e(Mle,Jwo),e(M1,Ywo),e(M1,zq),e(zq,Kwo),e(M1,Zwo),e(y,eAo),e(y,E1),e(E1,Ele),e(Ele,oAo),e(E1,rAo),e(E1,Qq),e(Qq,tAo),e(E1,aAo),e(y,nAo),e(y,C1),e(C1,Cle),e(Cle,sAo),e(C1,lAo),e(C1,Wq),e(Wq,iAo),e(C1,dAo),e(y,cAo),e(y,w1),e(w1,wle),e(wle,fAo),e(w1,mAo),e(w1,Hq),e(Hq,gAo),e(w1,hAo),e(y,pAo),e(y,A1),e(A1,Ale),e(Ale,_Ao),e(A1,uAo),e(A1,Uq),e(Uq,bAo),e(A1,FAo),e(y,vAo),e(y,y1),e(y1,yle),e(yle,TAo),e(y1,MAo),e(y1,Jq),e(Jq,EAo),e(y1,CAo),e(y,wAo),e(y,L1),e(L1,Lle),e(Lle,AAo),e(L1,yAo),e(L1,Yq),e(Yq,LAo),e(L1,xAo),e(y,kAo),e(y,x1),e(x1,xle),e(xle,SAo),e(x1,RAo),e(x1,Kq),e(Kq,BAo),e(x1,PAo),e(y,$Ao),e(y,k1),e(k1,kle),e(kle,IAo),e(k1,qAo),e(k1,Zq),e(Zq,NAo),e(k1,jAo),e(y,DAo),e(y,S1),e(S1,Sle),e(Sle,GAo),e(S1,OAo),e(S1,eN),e(eN,VAo),e(S1,XAo),e(y,zAo),e(y,R1),e(R1,Rle),e(Rle,QAo),e(R1,WAo),e(R1,oN),e(oN,HAo),e(R1,UAo),e(y,JAo),e(y,B1),e(B1,Ble),e(Ble,YAo),e(B1,KAo),e(B1,rN),e(rN,ZAo),e(B1,e0o),e(y,o0o),e(y,P1),e(P1,Ple),e(Ple,r0o),e(P1,t0o),e(P1,tN),e(tN,a0o),e(P1,n0o),e(y,s0o),e(y,$1),e($1,$le),e($le,l0o),e($1,i0o),e($1,aN),e(aN,d0o),e($1,c0o),e(y,f0o),e(y,I1),e(I1,Ile),e(Ile,m0o),e(I1,g0o),e(I1,nN),e(nN,h0o),e(I1,p0o),e(y,_0o),e(y,q1),e(q1,qle),e(qle,u0o),e(q1,b0o),e(q1,sN),e(sN,F0o),e(q1,v0o),e(y,T0o),e(y,N1),e(N1,Nle),e(Nle,M0o),e(N1,E0o),e(N1,lN),e(lN,C0o),e(N1,w0o),e(y,A0o),e(y,j1),e(j1,jle),e(jle,y0o),e(j1,L0o),e(j1,iN),e(iN,x0o),e(j1,k0o),e(y,S0o),e(y,D1),e(D1,Dle),e(Dle,R0o),e(D1,B0o),e(D1,dN),e(dN,P0o),e(D1,$0o),e(y,I0o),e(y,G1),e(G1,Gle),e(Gle,q0o),e(G1,N0o),e(G1,cN),e(cN,j0o),e(G1,D0o),e(y,G0o),e(y,O1),e(O1,Ole),e(Ole,O0o),e(O1,V0o),e(O1,fN),e(fN,X0o),e(O1,z0o),e(y,Q0o),e(y,V1),e(V1,Vle),e(Vle,W0o),e(V1,H0o),e(V1,mN),e(mN,U0o),e(V1,J0o),e(y,Y0o),e(y,X1),e(X1,Xle),e(Xle,K0o),e(X1,Z0o),e(X1,gN),e(gN,eyo),e(X1,oyo),e(y,ryo),e(y,z1),e(z1,zle),e(zle,tyo),e(z1,ayo),e(z1,hN),e(hN,nyo),e(z1,syo),e(y,lyo),e(y,Q1),e(Q1,Qle),e(Qle,iyo),e(Q1,dyo),e(Q1,pN),e(pN,cyo),e(Q1,fyo),e(y,myo),e(y,W1),e(W1,Wle),e(Wle,gyo),e(W1,hyo),e(W1,_N),e(_N,pyo),e(W1,_yo),e(y,uyo),e(y,H1),e(H1,Hle),e(Hle,byo),e(H1,Fyo),e(H1,uN),e(uN,vyo),e(H1,Tyo),e(y,Myo),e(y,U1),e(U1,Ule),e(Ule,Eyo),e(U1,Cyo),e(U1,bN),e(bN,wyo),e(U1,Ayo),e(y,yyo),e(y,J1),e(J1,Jle),e(Jle,Lyo),e(J1,xyo),e(J1,FN),e(FN,kyo),e(J1,Syo),e(y,Ryo),e(y,Y1),e(Y1,Yle),e(Yle,Byo),e(Y1,Pyo),e(Y1,vN),e(vN,$yo),e(Y1,Iyo),e(y,qyo),e(y,K1),e(K1,Kle),e(Kle,Nyo),e(K1,jyo),e(K1,TN),e(TN,Dyo),e(K1,Gyo),e(y,Oyo),e(y,Z1),e(Z1,Zle),e(Zle,Vyo),e(Z1,Xyo),e(Z1,MN),e(MN,zyo),e(Z1,Qyo),e(y,Wyo),e(y,e4),e(e4,eie),e(eie,Hyo),e(e4,Uyo),e(e4,EN),e(EN,Jyo),e(e4,Yyo),e(y,Kyo),e(y,o4),e(o4,oie),e(oie,Zyo),e(o4,eLo),e(o4,CN),e(CN,oLo),e(o4,rLo),e(y,tLo),e(y,r4),e(r4,rie),e(rie,aLo),e(r4,nLo),e(r4,wN),e(wN,sLo),e(r4,lLo),e(y,iLo),e(y,t4),e(t4,tie),e(tie,dLo),e(t4,cLo),e(t4,AN),e(AN,fLo),e(t4,mLo),e(y,gLo),e(y,a4),e(a4,aie),e(aie,hLo),e(a4,pLo),e(a4,yN),e(yN,_Lo),e(a4,uLo),e(Oe,bLo),e(Oe,n4),e(n4,FLo),e(n4,nie),e(nie,vLo),e(n4,TLo),e(n4,sie),e(sie,MLo),e(Oe,ELo),e(Oe,lie),e(lie,CLo),e(Oe,wLo),g(Hw,Oe,null),b(c,rBe,u),b(c,hd,u),e(hd,s4),e(s4,iie),g(Uw,iie,null),e(hd,ALo),e(hd,die),e(die,yLo),b(c,tBe,u),b(c,rr,u),g(Jw,rr,null),e(rr,LLo),e(rr,pd),e(pd,xLo),e(pd,LN),e(LN,kLo),e(pd,SLo),e(pd,xN),e(xN,RLo),e(pd,BLo),e(rr,PLo),e(rr,Yw),e(Yw,$Lo),e(Yw,cie),e(cie,ILo),e(Yw,qLo),e(rr,NLo),e(rr,Jr),g(Kw,Jr,null),e(Jr,jLo),e(Jr,fie),e(fie,DLo),e(Jr,GLo),e(Jr,_d),e(_d,OLo),e(_d,mie),e(mie,VLo),e(_d,XLo),e(_d,kN),e(kN,zLo),e(_d,QLo),e(Jr,WLo),e(Jr,gie),e(gie,HLo),e(Jr,ULo),g(Zw,Jr,null),e(rr,JLo),e(rr,Ve),g(eA,Ve,null),e(Ve,YLo),e(Ve,hie),e(hie,KLo),e(Ve,ZLo),e(Ve,Ja),e(Ja,e8o),e(Ja,pie),e(pie,o8o),e(Ja,r8o),e(Ja,_ie),e(_ie,t8o),e(Ja,a8o),e(Ja,uie),e(uie,n8o),e(Ja,s8o),e(Ve,l8o),e(Ve,G),e(G,l4),e(l4,bie),e(bie,i8o),e(l4,d8o),e(l4,SN),e(SN,c8o),e(l4,f8o),e(G,m8o),e(G,i4),e(i4,Fie),e(Fie,g8o),e(i4,h8o),e(i4,RN),e(RN,p8o),e(i4,_8o),e(G,u8o),e(G,d4),e(d4,vie),e(vie,b8o),e(d4,F8o),e(d4,BN),e(BN,v8o),e(d4,T8o),e(G,M8o),e(G,c4),e(c4,Tie),e(Tie,E8o),e(c4,C8o),e(c4,PN),e(PN,w8o),e(c4,A8o),e(G,y8o),e(G,f4),e(f4,Mie),e(Mie,L8o),e(f4,x8o),e(f4,$N),e($N,k8o),e(f4,S8o),e(G,R8o),e(G,m4),e(m4,Eie),e(Eie,B8o),e(m4,P8o),e(m4,IN),e(IN,$8o),e(m4,I8o),e(G,q8o),e(G,g4),e(g4,Cie),e(Cie,N8o),e(g4,j8o),e(g4,qN),e(qN,D8o),e(g4,G8o),e(G,O8o),e(G,h4),e(h4,wie),e(wie,V8o),e(h4,X8o),e(h4,NN),e(NN,z8o),e(h4,Q8o),e(G,W8o),e(G,p4),e(p4,Aie),e(Aie,H8o),e(p4,U8o),e(p4,jN),e(jN,J8o),e(p4,Y8o),e(G,K8o),e(G,_4),e(_4,yie),e(yie,Z8o),e(_4,e7o),e(_4,DN),e(DN,o7o),e(_4,r7o),e(G,t7o),e(G,u4),e(u4,Lie),e(Lie,a7o),e(u4,n7o),e(u4,GN),e(GN,s7o),e(u4,l7o),e(G,i7o),e(G,b4),e(b4,xie),e(xie,d7o),e(b4,c7o),e(b4,ON),e(ON,f7o),e(b4,m7o),e(G,g7o),e(G,F4),e(F4,kie),e(kie,h7o),e(F4,p7o),e(F4,VN),e(VN,_7o),e(F4,u7o),e(G,b7o),e(G,v4),e(v4,Sie),e(Sie,F7o),e(v4,v7o),e(v4,XN),e(XN,T7o),e(v4,M7o),e(G,E7o),e(G,T4),e(T4,Rie),e(Rie,C7o),e(T4,w7o),e(T4,zN),e(zN,A7o),e(T4,y7o),e(G,L7o),e(G,M4),e(M4,Bie),e(Bie,x7o),e(M4,k7o),e(M4,QN),e(QN,S7o),e(M4,R7o),e(G,B7o),e(G,E4),e(E4,Pie),e(Pie,P7o),e(E4,$7o),e(E4,WN),e(WN,I7o),e(E4,q7o),e(G,N7o),e(G,C4),e(C4,$ie),e($ie,j7o),e(C4,D7o),e(C4,HN),e(HN,G7o),e(C4,O7o),e(G,V7o),e(G,w4),e(w4,Iie),e(Iie,X7o),e(w4,z7o),e(w4,UN),e(UN,Q7o),e(w4,W7o),e(G,H7o),e(G,A4),e(A4,qie),e(qie,U7o),e(A4,J7o),e(A4,JN),e(JN,Y7o),e(A4,K7o),e(G,Z7o),e(G,y4),e(y4,Nie),e(Nie,e9o),e(y4,o9o),e(y4,YN),e(YN,r9o),e(y4,t9o),e(G,a9o),e(G,L4),e(L4,jie),e(jie,n9o),e(L4,s9o),e(L4,KN),e(KN,l9o),e(L4,i9o),e(G,d9o),e(G,x4),e(x4,Die),e(Die,c9o),e(x4,f9o),e(x4,ZN),e(ZN,m9o),e(x4,g9o),e(G,h9o),e(G,k4),e(k4,Gie),e(Gie,p9o),e(k4,_9o),e(k4,ej),e(ej,u9o),e(k4,b9o),e(G,F9o),e(G,S4),e(S4,Oie),e(Oie,v9o),e(S4,T9o),e(S4,oj),e(oj,M9o),e(S4,E9o),e(G,C9o),e(G,R4),e(R4,Vie),e(Vie,w9o),e(R4,A9o),e(R4,rj),e(rj,y9o),e(R4,L9o),e(G,x9o),e(G,B4),e(B4,Xie),e(Xie,k9o),e(B4,S9o),e(B4,tj),e(tj,R9o),e(B4,B9o),e(G,P9o),e(G,P4),e(P4,zie),e(zie,$9o),e(P4,I9o),e(P4,aj),e(aj,q9o),e(P4,N9o),e(Ve,j9o),e(Ve,$4),e($4,D9o),e($4,Qie),e(Qie,G9o),e($4,O9o),e($4,Wie),e(Wie,V9o),e(Ve,X9o),e(Ve,Hie),e(Hie,z9o),e(Ve,Q9o),g(oA,Ve,null),b(c,aBe,u),b(c,ud,u),e(ud,I4),e(I4,Uie),g(rA,Uie,null),e(ud,W9o),e(ud,Jie),e(Jie,H9o),b(c,nBe,u),b(c,tr,u),g(tA,tr,null),e(tr,U9o),e(tr,bd),e(bd,J9o),e(bd,nj),e(nj,Y9o),e(bd,K9o),e(bd,sj),e(sj,Z9o),e(bd,exo),e(tr,oxo),e(tr,aA),e(aA,rxo),e(aA,Yie),e(Yie,txo),e(aA,axo),e(tr,nxo),e(tr,Yr),g(nA,Yr,null),e(Yr,sxo),e(Yr,Kie),e(Kie,lxo),e(Yr,ixo),e(Yr,Fd),e(Fd,dxo),e(Fd,Zie),e(Zie,cxo),e(Fd,fxo),e(Fd,lj),e(lj,mxo),e(Fd,gxo),e(Yr,hxo),e(Yr,ede),e(ede,pxo),e(Yr,_xo),g(sA,Yr,null),e(tr,uxo),e(tr,Xe),g(lA,Xe,null),e(Xe,bxo),e(Xe,ode),e(ode,Fxo),e(Xe,vxo),e(Xe,Ya),e(Ya,Txo),e(Ya,rde),e(rde,Mxo),e(Ya,Exo),e(Ya,tde),e(tde,Cxo),e(Ya,wxo),e(Ya,ade),e(ade,Axo),e(Ya,yxo),e(Xe,Lxo),e(Xe,da),e(da,q4),e(q4,nde),e(nde,xxo),e(q4,kxo),e(q4,ij),e(ij,Sxo),e(q4,Rxo),e(da,Bxo),e(da,N4),e(N4,sde),e(sde,Pxo),e(N4,$xo),e(N4,dj),e(dj,Ixo),e(N4,qxo),e(da,Nxo),e(da,j4),e(j4,lde),e(lde,jxo),e(j4,Dxo),e(j4,cj),e(cj,Gxo),e(j4,Oxo),e(da,Vxo),e(da,D4),e(D4,ide),e(ide,Xxo),e(D4,zxo),e(D4,fj),e(fj,Qxo),e(D4,Wxo),e(da,Hxo),e(da,G4),e(G4,dde),e(dde,Uxo),e(G4,Jxo),e(G4,mj),e(mj,Yxo),e(G4,Kxo),e(Xe,Zxo),e(Xe,O4),e(O4,eko),e(O4,cde),e(cde,oko),e(O4,rko),e(O4,fde),e(fde,tko),e(Xe,ako),e(Xe,mde),e(mde,nko),e(Xe,sko),g(iA,Xe,null),b(c,sBe,u),b(c,vd,u),e(vd,V4),e(V4,gde),g(dA,gde,null),e(vd,lko),e(vd,hde),e(hde,iko),b(c,lBe,u),b(c,ar,u),g(cA,ar,null),e(ar,dko),e(ar,Td),e(Td,cko),e(Td,gj),e(gj,fko),e(Td,mko),e(Td,hj),e(hj,gko),e(Td,hko),e(ar,pko),e(ar,fA),e(fA,_ko),e(fA,pde),e(pde,uko),e(fA,bko),e(ar,Fko),e(ar,Kr),g(mA,Kr,null),e(Kr,vko),e(Kr,_de),e(_de,Tko),e(Kr,Mko),e(Kr,Md),e(Md,Eko),e(Md,ude),e(ude,Cko),e(Md,wko),e(Md,pj),e(pj,Ako),e(Md,yko),e(Kr,Lko),e(Kr,bde),e(bde,xko),e(Kr,kko),g(gA,Kr,null),e(ar,Sko),e(ar,ze),g(hA,ze,null),e(ze,Rko),e(ze,Fde),e(Fde,Bko),e(ze,Pko),e(ze,Ka),e(Ka,$ko),e(Ka,vde),e(vde,Iko),e(Ka,qko),e(Ka,Tde),e(Tde,Nko),e(Ka,jko),e(Ka,Mde),e(Mde,Dko),e(Ka,Gko),e(ze,Oko),e(ze,j),e(j,X4),e(X4,Ede),e(Ede,Vko),e(X4,Xko),e(X4,_j),e(_j,zko),e(X4,Qko),e(j,Wko),e(j,z4),e(z4,Cde),e(Cde,Hko),e(z4,Uko),e(z4,uj),e(uj,Jko),e(z4,Yko),e(j,Kko),e(j,Q4),e(Q4,wde),e(wde,Zko),e(Q4,eSo),e(Q4,bj),e(bj,oSo),e(Q4,rSo),e(j,tSo),e(j,W4),e(W4,Ade),e(Ade,aSo),e(W4,nSo),e(W4,Fj),e(Fj,sSo),e(W4,lSo),e(j,iSo),e(j,H4),e(H4,yde),e(yde,dSo),e(H4,cSo),e(H4,vj),e(vj,fSo),e(H4,mSo),e(j,gSo),e(j,U4),e(U4,Lde),e(Lde,hSo),e(U4,pSo),e(U4,Tj),e(Tj,_So),e(U4,uSo),e(j,bSo),e(j,J4),e(J4,xde),e(xde,FSo),e(J4,vSo),e(J4,Mj),e(Mj,TSo),e(J4,MSo),e(j,ESo),e(j,Y4),e(Y4,kde),e(kde,CSo),e(Y4,wSo),e(Y4,Ej),e(Ej,ASo),e(Y4,ySo),e(j,LSo),e(j,K4),e(K4,Sde),e(Sde,xSo),e(K4,kSo),e(K4,Cj),e(Cj,SSo),e(K4,RSo),e(j,BSo),e(j,Z4),e(Z4,Rde),e(Rde,PSo),e(Z4,$So),e(Z4,wj),e(wj,ISo),e(Z4,qSo),e(j,NSo),e(j,eb),e(eb,Bde),e(Bde,jSo),e(eb,DSo),e(eb,Aj),e(Aj,GSo),e(eb,OSo),e(j,VSo),e(j,ob),e(ob,Pde),e(Pde,XSo),e(ob,zSo),e(ob,yj),e(yj,QSo),e(ob,WSo),e(j,HSo),e(j,rb),e(rb,$de),e($de,USo),e(rb,JSo),e(rb,Lj),e(Lj,YSo),e(rb,KSo),e(j,ZSo),e(j,tb),e(tb,Ide),e(Ide,eRo),e(tb,oRo),e(tb,xj),e(xj,rRo),e(tb,tRo),e(j,aRo),e(j,ab),e(ab,qde),e(qde,nRo),e(ab,sRo),e(ab,kj),e(kj,lRo),e(ab,iRo),e(j,dRo),e(j,nb),e(nb,Nde),e(Nde,cRo),e(nb,fRo),e(nb,Sj),e(Sj,mRo),e(nb,gRo),e(j,hRo),e(j,sb),e(sb,jde),e(jde,pRo),e(sb,_Ro),e(sb,Rj),e(Rj,uRo),e(sb,bRo),e(j,FRo),e(j,lb),e(lb,Dde),e(Dde,vRo),e(lb,TRo),e(lb,Bj),e(Bj,MRo),e(lb,ERo),e(j,CRo),e(j,ib),e(ib,Gde),e(Gde,wRo),e(ib,ARo),e(ib,Pj),e(Pj,yRo),e(ib,LRo),e(j,xRo),e(j,db),e(db,Ode),e(Ode,kRo),e(db,SRo),e(db,$j),e($j,RRo),e(db,BRo),e(j,PRo),e(j,cb),e(cb,Vde),e(Vde,$Ro),e(cb,IRo),e(cb,Ij),e(Ij,qRo),e(cb,NRo),e(j,jRo),e(j,fb),e(fb,Xde),e(Xde,DRo),e(fb,GRo),e(fb,qj),e(qj,ORo),e(fb,VRo),e(j,XRo),e(j,mb),e(mb,zde),e(zde,zRo),e(mb,QRo),e(mb,Nj),e(Nj,WRo),e(mb,HRo),e(j,URo),e(j,gb),e(gb,Qde),e(Qde,JRo),e(gb,YRo),e(gb,jj),e(jj,KRo),e(gb,ZRo),e(j,eBo),e(j,hb),e(hb,Wde),e(Wde,oBo),e(hb,rBo),e(hb,Dj),e(Dj,tBo),e(hb,aBo),e(j,nBo),e(j,pb),e(pb,Hde),e(Hde,sBo),e(pb,lBo),e(pb,Gj),e(Gj,iBo),e(pb,dBo),e(j,cBo),e(j,_b),e(_b,Ude),e(Ude,fBo),e(_b,mBo),e(_b,Oj),e(Oj,gBo),e(_b,hBo),e(j,pBo),e(j,ub),e(ub,Jde),e(Jde,_Bo),e(ub,uBo),e(ub,Vj),e(Vj,bBo),e(ub,FBo),e(j,vBo),e(j,bb),e(bb,Yde),e(Yde,TBo),e(bb,MBo),e(bb,Xj),e(Xj,EBo),e(bb,CBo),e(j,wBo),e(j,Fb),e(Fb,Kde),e(Kde,ABo),e(Fb,yBo),e(Fb,zj),e(zj,LBo),e(Fb,xBo),e(j,kBo),e(j,vb),e(vb,Zde),e(Zde,SBo),e(vb,RBo),e(vb,Qj),e(Qj,BBo),e(vb,PBo),e(j,$Bo),e(j,Tb),e(Tb,ece),e(ece,IBo),e(Tb,qBo),e(Tb,Wj),e(Wj,NBo),e(Tb,jBo),e(j,DBo),e(j,Mb),e(Mb,oce),e(oce,GBo),e(Mb,OBo),e(Mb,Hj),e(Hj,VBo),e(Mb,XBo),e(ze,zBo),e(ze,Eb),e(Eb,QBo),e(Eb,rce),e(rce,WBo),e(Eb,HBo),e(Eb,tce),e(tce,UBo),e(ze,JBo),e(ze,ace),e(ace,YBo),e(ze,KBo),g(pA,ze,null),b(c,iBe,u),b(c,Ed,u),e(Ed,Cb),e(Cb,nce),g(_A,nce,null),e(Ed,ZBo),e(Ed,sce),e(sce,ePo),b(c,dBe,u),b(c,nr,u),g(uA,nr,null),e(nr,oPo),e(nr,Cd),e(Cd,rPo),e(Cd,Uj),e(Uj,tPo),e(Cd,aPo),e(Cd,Jj),e(Jj,nPo),e(Cd,sPo),e(nr,lPo),e(nr,bA),e(bA,iPo),e(bA,lce),e(lce,dPo),e(bA,cPo),e(nr,fPo),e(nr,Zr),g(FA,Zr,null),e(Zr,mPo),e(Zr,ice),e(ice,gPo),e(Zr,hPo),e(Zr,wd),e(wd,pPo),e(wd,dce),e(dce,_Po),e(wd,uPo),e(wd,Yj),e(Yj,bPo),e(wd,FPo),e(Zr,vPo),e(Zr,cce),e(cce,TPo),e(Zr,MPo),g(vA,Zr,null),e(nr,EPo),e(nr,Qe),g(TA,Qe,null),e(Qe,CPo),e(Qe,fce),e(fce,wPo),e(Qe,APo),e(Qe,Za),e(Za,yPo),e(Za,mce),e(mce,LPo),e(Za,xPo),e(Za,gce),e(gce,kPo),e(Za,SPo),e(Za,hce),e(hce,RPo),e(Za,BPo),e(Qe,PPo),e(Qe,R),e(R,wb),e(wb,pce),e(pce,$Po),e(wb,IPo),e(wb,Kj),e(Kj,qPo),e(wb,NPo),e(R,jPo),e(R,Ab),e(Ab,_ce),e(_ce,DPo),e(Ab,GPo),e(Ab,Zj),e(Zj,OPo),e(Ab,VPo),e(R,XPo),e(R,yb),e(yb,uce),e(uce,zPo),e(yb,QPo),e(yb,eD),e(eD,WPo),e(yb,HPo),e(R,UPo),e(R,Lb),e(Lb,bce),e(bce,JPo),e(Lb,YPo),e(Lb,oD),e(oD,KPo),e(Lb,ZPo),e(R,e$o),e(R,xb),e(xb,Fce),e(Fce,o$o),e(xb,r$o),e(xb,rD),e(rD,t$o),e(xb,a$o),e(R,n$o),e(R,kb),e(kb,vce),e(vce,s$o),e(kb,l$o),e(kb,tD),e(tD,i$o),e(kb,d$o),e(R,c$o),e(R,Sb),e(Sb,Tce),e(Tce,f$o),e(Sb,m$o),e(Sb,aD),e(aD,g$o),e(Sb,h$o),e(R,p$o),e(R,Rb),e(Rb,Mce),e(Mce,_$o),e(Rb,u$o),e(Rb,nD),e(nD,b$o),e(Rb,F$o),e(R,v$o),e(R,Bb),e(Bb,Ece),e(Ece,T$o),e(Bb,M$o),e(Bb,sD),e(sD,E$o),e(Bb,C$o),e(R,w$o),e(R,Pb),e(Pb,Cce),e(Cce,A$o),e(Pb,y$o),e(Pb,lD),e(lD,L$o),e(Pb,x$o),e(R,k$o),e(R,$b),e($b,wce),e(wce,S$o),e($b,R$o),e($b,iD),e(iD,B$o),e($b,P$o),e(R,$$o),e(R,Ib),e(Ib,Ace),e(Ace,I$o),e(Ib,q$o),e(Ib,dD),e(dD,N$o),e(Ib,j$o),e(R,D$o),e(R,qb),e(qb,yce),e(yce,G$o),e(qb,O$o),e(qb,cD),e(cD,V$o),e(qb,X$o),e(R,z$o),e(R,Nb),e(Nb,Lce),e(Lce,Q$o),e(Nb,W$o),e(Nb,fD),e(fD,H$o),e(Nb,U$o),e(R,J$o),e(R,jb),e(jb,xce),e(xce,Y$o),e(jb,K$o),e(jb,mD),e(mD,Z$o),e(jb,eIo),e(R,oIo),e(R,Db),e(Db,kce),e(kce,rIo),e(Db,tIo),e(Db,gD),e(gD,aIo),e(Db,nIo),e(R,sIo),e(R,Gb),e(Gb,Sce),e(Sce,lIo),e(Gb,iIo),e(Gb,hD),e(hD,dIo),e(Gb,cIo),e(R,fIo),e(R,Ob),e(Ob,Rce),e(Rce,mIo),e(Ob,gIo),e(Ob,pD),e(pD,hIo),e(Ob,pIo),e(R,_Io),e(R,Vb),e(Vb,Bce),e(Bce,uIo),e(Vb,bIo),e(Vb,_D),e(_D,FIo),e(Vb,vIo),e(R,TIo),e(R,Xb),e(Xb,Pce),e(Pce,MIo),e(Xb,EIo),e(Xb,uD),e(uD,CIo),e(Xb,wIo),e(R,AIo),e(R,zb),e(zb,$ce),e($ce,yIo),e(zb,LIo),e(zb,bD),e(bD,xIo),e(zb,kIo),e(R,SIo),e(R,Qb),e(Qb,Ice),e(Ice,RIo),e(Qb,BIo),e(Qb,FD),e(FD,PIo),e(Qb,$Io),e(R,IIo),e(R,Wb),e(Wb,qce),e(qce,qIo),e(Wb,NIo),e(Wb,vD),e(vD,jIo),e(Wb,DIo),e(R,GIo),e(R,Hb),e(Hb,Nce),e(Nce,OIo),e(Hb,VIo),e(Hb,TD),e(TD,XIo),e(Hb,zIo),e(R,QIo),e(R,Ub),e(Ub,jce),e(jce,WIo),e(Ub,HIo),e(Ub,MD),e(MD,UIo),e(Ub,JIo),e(R,YIo),e(R,Jb),e(Jb,Dce),e(Dce,KIo),e(Jb,ZIo),e(Jb,ED),e(ED,eqo),e(Jb,oqo),e(R,rqo),e(R,Yb),e(Yb,Gce),e(Gce,tqo),e(Yb,aqo),e(Yb,CD),e(CD,nqo),e(Yb,sqo),e(R,lqo),e(R,Kb),e(Kb,Oce),e(Oce,iqo),e(Kb,dqo),e(Kb,wD),e(wD,cqo),e(Kb,fqo),e(R,mqo),e(R,Zb),e(Zb,Vce),e(Vce,gqo),e(Zb,hqo),e(Zb,AD),e(AD,pqo),e(Zb,_qo),e(R,uqo),e(R,e5),e(e5,Xce),e(Xce,bqo),e(e5,Fqo),e(e5,yD),e(yD,vqo),e(e5,Tqo),e(R,Mqo),e(R,o5),e(o5,zce),e(zce,Eqo),e(o5,Cqo),e(o5,LD),e(LD,wqo),e(o5,Aqo),e(R,yqo),e(R,r5),e(r5,Qce),e(Qce,Lqo),e(r5,xqo),e(r5,xD),e(xD,kqo),e(r5,Sqo),e(R,Rqo),e(R,t5),e(t5,Wce),e(Wce,Bqo),e(t5,Pqo),e(t5,kD),e(kD,$qo),e(t5,Iqo),e(R,qqo),e(R,a5),e(a5,Hce),e(Hce,Nqo),e(a5,jqo),e(a5,SD),e(SD,Dqo),e(a5,Gqo),e(R,Oqo),e(R,n5),e(n5,Uce),e(Uce,Vqo),e(n5,Xqo),e(n5,RD),e(RD,zqo),e(n5,Qqo),e(R,Wqo),e(R,s5),e(s5,Jce),e(Jce,Hqo),e(s5,Uqo),e(s5,BD),e(BD,Jqo),e(s5,Yqo),e(R,Kqo),e(R,l5),e(l5,Yce),e(Yce,Zqo),e(l5,eNo),e(l5,PD),e(PD,oNo),e(l5,rNo),e(R,tNo),e(R,i5),e(i5,Kce),e(Kce,aNo),e(i5,nNo),e(i5,$D),e($D,sNo),e(i5,lNo),e(R,iNo),e(R,d5),e(d5,Zce),e(Zce,dNo),e(d5,cNo),e(d5,ID),e(ID,fNo),e(d5,mNo),e(Qe,gNo),e(Qe,c5),e(c5,hNo),e(c5,efe),e(efe,pNo),e(c5,_No),e(c5,ofe),e(ofe,uNo),e(Qe,bNo),e(Qe,rfe),e(rfe,FNo),e(Qe,vNo),g(MA,Qe,null),b(c,cBe,u),b(c,Ad,u),e(Ad,f5),e(f5,tfe),g(EA,tfe,null),e(Ad,TNo),e(Ad,afe),e(afe,MNo),b(c,fBe,u),b(c,sr,u),g(CA,sr,null),e(sr,ENo),e(sr,yd),e(yd,CNo),e(yd,qD),e(qD,wNo),e(yd,ANo),e(yd,ND),e(ND,yNo),e(yd,LNo),e(sr,xNo),e(sr,wA),e(wA,kNo),e(wA,nfe),e(nfe,SNo),e(wA,RNo),e(sr,BNo),e(sr,et),g(AA,et,null),e(et,PNo),e(et,sfe),e(sfe,$No),e(et,INo),e(et,Ld),e(Ld,qNo),e(Ld,lfe),e(lfe,NNo),e(Ld,jNo),e(Ld,jD),e(jD,DNo),e(Ld,GNo),e(et,ONo),e(et,ife),e(ife,VNo),e(et,XNo),g(yA,et,null),e(sr,zNo),e(sr,We),g(LA,We,null),e(We,QNo),e(We,dfe),e(dfe,WNo),e(We,HNo),e(We,en),e(en,UNo),e(en,cfe),e(cfe,JNo),e(en,YNo),e(en,ffe),e(ffe,KNo),e(en,ZNo),e(en,mfe),e(mfe,ejo),e(en,ojo),e(We,rjo),e(We,gfe),e(gfe,m5),e(m5,hfe),e(hfe,tjo),e(m5,ajo),e(m5,DD),e(DD,njo),e(m5,sjo),e(We,ljo),e(We,g5),e(g5,ijo),e(g5,pfe),e(pfe,djo),e(g5,cjo),e(g5,_fe),e(_fe,fjo),e(We,mjo),e(We,ufe),e(ufe,gjo),e(We,hjo),g(xA,We,null),b(c,mBe,u),b(c,xd,u),e(xd,h5),e(h5,bfe),g(kA,bfe,null),e(xd,pjo),e(xd,Ffe),e(Ffe,_jo),b(c,gBe,u),b(c,lr,u),g(SA,lr,null),e(lr,ujo),e(lr,kd),e(kd,bjo),e(kd,GD),e(GD,Fjo),e(kd,vjo),e(kd,OD),e(OD,Tjo),e(kd,Mjo),e(lr,Ejo),e(lr,RA),e(RA,Cjo),e(RA,vfe),e(vfe,wjo),e(RA,Ajo),e(lr,yjo),e(lr,ot),g(BA,ot,null),e(ot,Ljo),e(ot,Tfe),e(Tfe,xjo),e(ot,kjo),e(ot,Sd),e(Sd,Sjo),e(Sd,Mfe),e(Mfe,Rjo),e(Sd,Bjo),e(Sd,VD),e(VD,Pjo),e(Sd,$jo),e(ot,Ijo),e(ot,Efe),e(Efe,qjo),e(ot,Njo),g(PA,ot,null),e(lr,jjo),e(lr,He),g($A,He,null),e(He,Djo),e(He,Cfe),e(Cfe,Gjo),e(He,Ojo),e(He,on),e(on,Vjo),e(on,wfe),e(wfe,Xjo),e(on,zjo),e(on,Afe),e(Afe,Qjo),e(on,Wjo),e(on,yfe),e(yfe,Hjo),e(on,Ujo),e(He,Jjo),e(He,ce),e(ce,p5),e(p5,Lfe),e(Lfe,Yjo),e(p5,Kjo),e(p5,XD),e(XD,Zjo),e(p5,eDo),e(ce,oDo),e(ce,_5),e(_5,xfe),e(xfe,rDo),e(_5,tDo),e(_5,zD),e(zD,aDo),e(_5,nDo),e(ce,sDo),e(ce,Ds),e(Ds,kfe),e(kfe,lDo),e(Ds,iDo),e(Ds,QD),e(QD,dDo),e(Ds,cDo),e(Ds,WD),e(WD,fDo),e(Ds,mDo),e(ce,gDo),e(ce,u5),e(u5,Sfe),e(Sfe,hDo),e(u5,pDo),e(u5,HD),e(HD,_Do),e(u5,uDo),e(ce,bDo),e(ce,ma),e(ma,Rfe),e(Rfe,FDo),e(ma,vDo),e(ma,UD),e(UD,TDo),e(ma,MDo),e(ma,JD),e(JD,EDo),e(ma,CDo),e(ma,YD),e(YD,wDo),e(ma,ADo),e(ce,yDo),e(ce,b5),e(b5,Bfe),e(Bfe,LDo),e(b5,xDo),e(b5,KD),e(KD,kDo),e(b5,SDo),e(ce,RDo),e(ce,F5),e(F5,Pfe),e(Pfe,BDo),e(F5,PDo),e(F5,ZD),e(ZD,$Do),e(F5,IDo),e(ce,qDo),e(ce,v5),e(v5,$fe),e($fe,NDo),e(v5,jDo),e(v5,eG),e(eG,DDo),e(v5,GDo),e(ce,ODo),e(ce,T5),e(T5,Ife),e(Ife,VDo),e(T5,XDo),e(T5,oG),e(oG,zDo),e(T5,QDo),e(ce,WDo),e(ce,M5),e(M5,qfe),e(qfe,HDo),e(M5,UDo),e(M5,rG),e(rG,JDo),e(M5,YDo),e(ce,KDo),e(ce,E5),e(E5,Nfe),e(Nfe,ZDo),e(E5,eGo),e(E5,tG),e(tG,oGo),e(E5,rGo),e(ce,tGo),e(ce,C5),e(C5,jfe),e(jfe,aGo),e(C5,nGo),e(C5,aG),e(aG,sGo),e(C5,lGo),e(He,iGo),e(He,w5),e(w5,dGo),e(w5,Dfe),e(Dfe,cGo),e(w5,fGo),e(w5,Gfe),e(Gfe,mGo),e(He,gGo),e(He,Ofe),e(Ofe,hGo),e(He,pGo),g(IA,He,null),b(c,hBe,u),b(c,Rd,u),e(Rd,A5),e(A5,Vfe),g(qA,Vfe,null),e(Rd,_Go),e(Rd,Xfe),e(Xfe,uGo),b(c,pBe,u),b(c,ir,u),g(NA,ir,null),e(ir,bGo),e(ir,Bd),e(Bd,FGo),e(Bd,nG),e(nG,vGo),e(Bd,TGo),e(Bd,sG),e(sG,MGo),e(Bd,EGo),e(ir,CGo),e(ir,jA),e(jA,wGo),e(jA,zfe),e(zfe,AGo),e(jA,yGo),e(ir,LGo),e(ir,rt),g(DA,rt,null),e(rt,xGo),e(rt,Qfe),e(Qfe,kGo),e(rt,SGo),e(rt,Pd),e(Pd,RGo),e(Pd,Wfe),e(Wfe,BGo),e(Pd,PGo),e(Pd,lG),e(lG,$Go),e(Pd,IGo),e(rt,qGo),e(rt,Hfe),e(Hfe,NGo),e(rt,jGo),g(GA,rt,null),e(ir,DGo),e(ir,Ue),g(OA,Ue,null),e(Ue,GGo),e(Ue,Ufe),e(Ufe,OGo),e(Ue,VGo),e(Ue,rn),e(rn,XGo),e(rn,Jfe),e(Jfe,zGo),e(rn,QGo),e(rn,Yfe),e(Yfe,WGo),e(rn,HGo),e(rn,Kfe),e(Kfe,UGo),e(rn,JGo),e(Ue,YGo),e(Ue,Zfe),e(Zfe,y5),e(y5,eme),e(eme,KGo),e(y5,ZGo),e(y5,iG),e(iG,eOo),e(y5,oOo),e(Ue,rOo),e(Ue,L5),e(L5,tOo),e(L5,ome),e(ome,aOo),e(L5,nOo),e(L5,rme),e(rme,sOo),e(Ue,lOo),e(Ue,tme),e(tme,iOo),e(Ue,dOo),g(VA,Ue,null),b(c,_Be,u),b(c,$d,u),e($d,x5),e(x5,ame),g(XA,ame,null),e($d,cOo),e($d,nme),e(nme,fOo),b(c,uBe,u),b(c,dr,u),g(zA,dr,null),e(dr,mOo),e(dr,Id),e(Id,gOo),e(Id,dG),e(dG,hOo),e(Id,pOo),e(Id,cG),e(cG,_Oo),e(Id,uOo),e(dr,bOo),e(dr,QA),e(QA,FOo),e(QA,sme),e(sme,vOo),e(QA,TOo),e(dr,MOo),e(dr,tt),g(WA,tt,null),e(tt,EOo),e(tt,lme),e(lme,COo),e(tt,wOo),e(tt,qd),e(qd,AOo),e(qd,ime),e(ime,yOo),e(qd,LOo),e(qd,fG),e(fG,xOo),e(qd,kOo),e(tt,SOo),e(tt,dme),e(dme,ROo),e(tt,BOo),g(HA,tt,null),e(dr,POo),e(dr,Je),g(UA,Je,null),e(Je,$Oo),e(Je,cme),e(cme,IOo),e(Je,qOo),e(Je,tn),e(tn,NOo),e(tn,fme),e(fme,jOo),e(tn,DOo),e(tn,mme),e(mme,GOo),e(tn,OOo),e(tn,gme),e(gme,VOo),e(tn,XOo),e(Je,zOo),e(Je,Se),e(Se,k5),e(k5,hme),e(hme,QOo),e(k5,WOo),e(k5,mG),e(mG,HOo),e(k5,UOo),e(Se,JOo),e(Se,S5),e(S5,pme),e(pme,YOo),e(S5,KOo),e(S5,gG),e(gG,ZOo),e(S5,eVo),e(Se,oVo),e(Se,R5),e(R5,_me),e(_me,rVo),e(R5,tVo),e(R5,hG),e(hG,aVo),e(R5,nVo),e(Se,sVo),e(Se,B5),e(B5,ume),e(ume,lVo),e(B5,iVo),e(B5,pG),e(pG,dVo),e(B5,cVo),e(Se,fVo),e(Se,P5),e(P5,bme),e(bme,mVo),e(P5,gVo),e(P5,_G),e(_G,hVo),e(P5,pVo),e(Se,_Vo),e(Se,$5),e($5,Fme),e(Fme,uVo),e($5,bVo),e($5,uG),e(uG,FVo),e($5,vVo),e(Se,TVo),e(Se,I5),e(I5,vme),e(vme,MVo),e(I5,EVo),e(I5,bG),e(bG,CVo),e(I5,wVo),e(Se,AVo),e(Se,q5),e(q5,Tme),e(Tme,yVo),e(q5,LVo),e(q5,FG),e(FG,xVo),e(q5,kVo),e(Je,SVo),e(Je,N5),e(N5,RVo),e(N5,Mme),e(Mme,BVo),e(N5,PVo),e(N5,Eme),e(Eme,$Vo),e(Je,IVo),e(Je,Cme),e(Cme,qVo),e(Je,NVo),g(JA,Je,null),b(c,bBe,u),b(c,Nd,u),e(Nd,j5),e(j5,wme),g(YA,wme,null),e(Nd,jVo),e(Nd,Ame),e(Ame,DVo),b(c,FBe,u),b(c,cr,u),g(KA,cr,null),e(cr,GVo),e(cr,jd),e(jd,OVo),e(jd,vG),e(vG,VVo),e(jd,XVo),e(jd,TG),e(TG,zVo),e(jd,QVo),e(cr,WVo),e(cr,ZA),e(ZA,HVo),e(ZA,yme),e(yme,UVo),e(ZA,JVo),e(cr,YVo),e(cr,at),g(e0,at,null),e(at,KVo),e(at,Lme),e(Lme,ZVo),e(at,eXo),e(at,Dd),e(Dd,oXo),e(Dd,xme),e(xme,rXo),e(Dd,tXo),e(Dd,MG),e(MG,aXo),e(Dd,nXo),e(at,sXo),e(at,kme),e(kme,lXo),e(at,iXo),g(o0,at,null),e(cr,dXo),e(cr,Ye),g(r0,Ye,null),e(Ye,cXo),e(Ye,Sme),e(Sme,fXo),e(Ye,mXo),e(Ye,an),e(an,gXo),e(an,Rme),e(Rme,hXo),e(an,pXo),e(an,Bme),e(Bme,_Xo),e(an,uXo),e(an,Pme),e(Pme,bXo),e(an,FXo),e(Ye,vXo),e(Ye,nn),e(nn,D5),e(D5,$me),e($me,TXo),e(D5,MXo),e(D5,EG),e(EG,EXo),e(D5,CXo),e(nn,wXo),e(nn,G5),e(G5,Ime),e(Ime,AXo),e(G5,yXo),e(G5,CG),e(CG,LXo),e(G5,xXo),e(nn,kXo),e(nn,O5),e(O5,qme),e(qme,SXo),e(O5,RXo),e(O5,wG),e(wG,BXo),e(O5,PXo),e(nn,$Xo),e(nn,V5),e(V5,Nme),e(Nme,IXo),e(V5,qXo),e(V5,AG),e(AG,NXo),e(V5,jXo),e(Ye,DXo),e(Ye,X5),e(X5,GXo),e(X5,jme),e(jme,OXo),e(X5,VXo),e(X5,Dme),e(Dme,XXo),e(Ye,zXo),e(Ye,Gme),e(Gme,QXo),e(Ye,WXo),g(t0,Ye,null),b(c,vBe,u),b(c,Gd,u),e(Gd,z5),e(z5,Ome),g(a0,Ome,null),e(Gd,HXo),e(Gd,Vme),e(Vme,UXo),b(c,TBe,u),b(c,fr,u),g(n0,fr,null),e(fr,JXo),e(fr,Od),e(Od,YXo),e(Od,yG),e(yG,KXo),e(Od,ZXo),e(Od,LG),e(LG,ezo),e(Od,ozo),e(fr,rzo),e(fr,s0),e(s0,tzo),e(s0,Xme),e(Xme,azo),e(s0,nzo),e(fr,szo),e(fr,nt),g(l0,nt,null),e(nt,lzo),e(nt,zme),e(zme,izo),e(nt,dzo),e(nt,Vd),e(Vd,czo),e(Vd,Qme),e(Qme,fzo),e(Vd,mzo),e(Vd,xG),e(xG,gzo),e(Vd,hzo),e(nt,pzo),e(nt,Wme),e(Wme,_zo),e(nt,uzo),g(i0,nt,null),e(fr,bzo),e(fr,Ke),g(d0,Ke,null),e(Ke,Fzo),e(Ke,Hme),e(Hme,vzo),e(Ke,Tzo),e(Ke,sn),e(sn,Mzo),e(sn,Ume),e(Ume,Ezo),e(sn,Czo),e(sn,Jme),e(Jme,wzo),e(sn,Azo),e(sn,Yme),e(Yme,yzo),e(sn,Lzo),e(Ke,xzo),e(Ke,Re),e(Re,Q5),e(Q5,Kme),e(Kme,kzo),e(Q5,Szo),e(Q5,kG),e(kG,Rzo),e(Q5,Bzo),e(Re,Pzo),e(Re,W5),e(W5,Zme),e(Zme,$zo),e(W5,Izo),e(W5,SG),e(SG,qzo),e(W5,Nzo),e(Re,jzo),e(Re,H5),e(H5,ege),e(ege,Dzo),e(H5,Gzo),e(H5,RG),e(RG,Ozo),e(H5,Vzo),e(Re,Xzo),e(Re,U5),e(U5,oge),e(oge,zzo),e(U5,Qzo),e(U5,BG),e(BG,Wzo),e(U5,Hzo),e(Re,Uzo),e(Re,J5),e(J5,rge),e(rge,Jzo),e(J5,Yzo),e(J5,PG),e(PG,Kzo),e(J5,Zzo),e(Re,eQo),e(Re,Y5),e(Y5,tge),e(tge,oQo),e(Y5,rQo),e(Y5,$G),e($G,tQo),e(Y5,aQo),e(Re,nQo),e(Re,K5),e(K5,age),e(age,sQo),e(K5,lQo),e(K5,IG),e(IG,iQo),e(K5,dQo),e(Re,cQo),e(Re,Z5),e(Z5,nge),e(nge,fQo),e(Z5,mQo),e(Z5,qG),e(qG,gQo),e(Z5,hQo),e(Ke,pQo),e(Ke,e2),e(e2,_Qo),e(e2,sge),e(sge,uQo),e(e2,bQo),e(e2,lge),e(lge,FQo),e(Ke,vQo),e(Ke,ige),e(ige,TQo),e(Ke,MQo),g(c0,Ke,null),b(c,MBe,u),b(c,Xd,u),e(Xd,o2),e(o2,dge),g(f0,dge,null),e(Xd,EQo),e(Xd,cge),e(cge,CQo),b(c,EBe,u),b(c,mr,u),g(m0,mr,null),e(mr,wQo),e(mr,zd),e(zd,AQo),e(zd,NG),e(NG,yQo),e(zd,LQo),e(zd,jG),e(jG,xQo),e(zd,kQo),e(mr,SQo),e(mr,g0),e(g0,RQo),e(g0,fge),e(fge,BQo),e(g0,PQo),e(mr,$Qo),e(mr,st),g(h0,st,null),e(st,IQo),e(st,mge),e(mge,qQo),e(st,NQo),e(st,Qd),e(Qd,jQo),e(Qd,gge),e(gge,DQo),e(Qd,GQo),e(Qd,DG),e(DG,OQo),e(Qd,VQo),e(st,XQo),e(st,hge),e(hge,zQo),e(st,QQo),g(p0,st,null),e(mr,WQo),e(mr,Ze),g(_0,Ze,null),e(Ze,HQo),e(Ze,pge),e(pge,UQo),e(Ze,JQo),e(Ze,ln),e(ln,YQo),e(ln,_ge),e(_ge,KQo),e(ln,ZQo),e(ln,uge),e(uge,eWo),e(ln,oWo),e(ln,bge),e(bge,rWo),e(ln,tWo),e(Ze,aWo),e(Ze,u0),e(u0,r2),e(r2,Fge),e(Fge,nWo),e(r2,sWo),e(r2,GG),e(GG,lWo),e(r2,iWo),e(u0,dWo),e(u0,t2),e(t2,vge),e(vge,cWo),e(t2,fWo),e(t2,OG),e(OG,mWo),e(t2,gWo),e(Ze,hWo),e(Ze,a2),e(a2,pWo),e(a2,Tge),e(Tge,_Wo),e(a2,uWo),e(a2,Mge),e(Mge,bWo),e(Ze,FWo),e(Ze,Ege),e(Ege,vWo),e(Ze,TWo),g(b0,Ze,null),b(c,CBe,u),b(c,Wd,u),e(Wd,n2),e(n2,Cge),g(F0,Cge,null),e(Wd,MWo),e(Wd,wge),e(wge,EWo),b(c,wBe,u),b(c,gr,u),g(v0,gr,null),e(gr,CWo),e(gr,Hd),e(Hd,wWo),e(Hd,VG),e(VG,AWo),e(Hd,yWo),e(Hd,XG),e(XG,LWo),e(Hd,xWo),e(gr,kWo),e(gr,T0),e(T0,SWo),e(T0,Age),e(Age,RWo),e(T0,BWo),e(gr,PWo),e(gr,lt),g(M0,lt,null),e(lt,$Wo),e(lt,yge),e(yge,IWo),e(lt,qWo),e(lt,Ud),e(Ud,NWo),e(Ud,Lge),e(Lge,jWo),e(Ud,DWo),e(Ud,zG),e(zG,GWo),e(Ud,OWo),e(lt,VWo),e(lt,xge),e(xge,XWo),e(lt,zWo),g(E0,lt,null),e(gr,QWo),e(gr,eo),g(C0,eo,null),e(eo,WWo),e(eo,kge),e(kge,HWo),e(eo,UWo),e(eo,dn),e(dn,JWo),e(dn,Sge),e(Sge,YWo),e(dn,KWo),e(dn,Rge),e(Rge,ZWo),e(dn,eHo),e(dn,Bge),e(Bge,oHo),e(dn,rHo),e(eo,tHo),e(eo,cn),e(cn,s2),e(s2,Pge),e(Pge,aHo),e(s2,nHo),e(s2,QG),e(QG,sHo),e(s2,lHo),e(cn,iHo),e(cn,l2),e(l2,$ge),e($ge,dHo),e(l2,cHo),e(l2,WG),e(WG,fHo),e(l2,mHo),e(cn,gHo),e(cn,i2),e(i2,Ige),e(Ige,hHo),e(i2,pHo),e(i2,HG),e(HG,_Ho),e(i2,uHo),e(cn,bHo),e(cn,d2),e(d2,qge),e(qge,FHo),e(d2,vHo),e(d2,UG),e(UG,THo),e(d2,MHo),e(eo,EHo),e(eo,c2),e(c2,CHo),e(c2,Nge),e(Nge,wHo),e(c2,AHo),e(c2,jge),e(jge,yHo),e(eo,LHo),e(eo,Dge),e(Dge,xHo),e(eo,kHo),g(w0,eo,null),b(c,ABe,u),b(c,Jd,u),e(Jd,f2),e(f2,Gge),g(A0,Gge,null),e(Jd,SHo),e(Jd,Oge),e(Oge,RHo),b(c,yBe,u),b(c,hr,u),g(y0,hr,null),e(hr,BHo),e(hr,Yd),e(Yd,PHo),e(Yd,JG),e(JG,$Ho),e(Yd,IHo),e(Yd,YG),e(YG,qHo),e(Yd,NHo),e(hr,jHo),e(hr,L0),e(L0,DHo),e(L0,Vge),e(Vge,GHo),e(L0,OHo),e(hr,VHo),e(hr,it),g(x0,it,null),e(it,XHo),e(it,Xge),e(Xge,zHo),e(it,QHo),e(it,Kd),e(Kd,WHo),e(Kd,zge),e(zge,HHo),e(Kd,UHo),e(Kd,KG),e(KG,JHo),e(Kd,YHo),e(it,KHo),e(it,Qge),e(Qge,ZHo),e(it,eUo),g(k0,it,null),e(hr,oUo),e(hr,oo),g(S0,oo,null),e(oo,rUo),e(oo,Wge),e(Wge,tUo),e(oo,aUo),e(oo,fn),e(fn,nUo),e(fn,Hge),e(Hge,sUo),e(fn,lUo),e(fn,Uge),e(Uge,iUo),e(fn,dUo),e(fn,Jge),e(Jge,cUo),e(fn,fUo),e(oo,mUo),e(oo,Zd),e(Zd,m2),e(m2,Yge),e(Yge,gUo),e(m2,hUo),e(m2,ZG),e(ZG,pUo),e(m2,_Uo),e(Zd,uUo),e(Zd,g2),e(g2,Kge),e(Kge,bUo),e(g2,FUo),e(g2,eO),e(eO,vUo),e(g2,TUo),e(Zd,MUo),e(Zd,h2),e(h2,Zge),e(Zge,EUo),e(h2,CUo),e(h2,oO),e(oO,wUo),e(h2,AUo),e(oo,yUo),e(oo,p2),e(p2,LUo),e(p2,ehe),e(ehe,xUo),e(p2,kUo),e(p2,ohe),e(ohe,SUo),e(oo,RUo),e(oo,rhe),e(rhe,BUo),e(oo,PUo),g(R0,oo,null),b(c,LBe,u),b(c,ec,u),e(ec,_2),e(_2,the),g(B0,the,null),e(ec,$Uo),e(ec,ahe),e(ahe,IUo),b(c,xBe,u),b(c,pr,u),g(P0,pr,null),e(pr,qUo),e(pr,oc),e(oc,NUo),e(oc,rO),e(rO,jUo),e(oc,DUo),e(oc,tO),e(tO,GUo),e(oc,OUo),e(pr,VUo),e(pr,$0),e($0,XUo),e($0,nhe),e(nhe,zUo),e($0,QUo),e(pr,WUo),e(pr,dt),g(I0,dt,null),e(dt,HUo),e(dt,she),e(she,UUo),e(dt,JUo),e(dt,rc),e(rc,YUo),e(rc,lhe),e(lhe,KUo),e(rc,ZUo),e(rc,aO),e(aO,eJo),e(rc,oJo),e(dt,rJo),e(dt,ihe),e(ihe,tJo),e(dt,aJo),g(q0,dt,null),e(pr,nJo),e(pr,ro),g(N0,ro,null),e(ro,sJo),e(ro,dhe),e(dhe,lJo),e(ro,iJo),e(ro,mn),e(mn,dJo),e(mn,che),e(che,cJo),e(mn,fJo),e(mn,fhe),e(fhe,mJo),e(mn,gJo),e(mn,mhe),e(mhe,hJo),e(mn,pJo),e(ro,_Jo),e(ro,ghe),e(ghe,u2),e(u2,hhe),e(hhe,uJo),e(u2,bJo),e(u2,nO),e(nO,FJo),e(u2,vJo),e(ro,TJo),e(ro,b2),e(b2,MJo),e(b2,phe),e(phe,EJo),e(b2,CJo),e(b2,_he),e(_he,wJo),e(ro,AJo),e(ro,uhe),e(uhe,yJo),e(ro,LJo),g(j0,ro,null),b(c,kBe,u),b(c,tc,u),e(tc,F2),e(F2,bhe),g(D0,bhe,null),e(tc,xJo),e(tc,Fhe),e(Fhe,kJo),b(c,SBe,u),b(c,_r,u),g(G0,_r,null),e(_r,SJo),e(_r,ac),e(ac,RJo),e(ac,sO),e(sO,BJo),e(ac,PJo),e(ac,lO),e(lO,$Jo),e(ac,IJo),e(_r,qJo),e(_r,O0),e(O0,NJo),e(O0,vhe),e(vhe,jJo),e(O0,DJo),e(_r,GJo),e(_r,ct),g(V0,ct,null),e(ct,OJo),e(ct,The),e(The,VJo),e(ct,XJo),e(ct,nc),e(nc,zJo),e(nc,Mhe),e(Mhe,QJo),e(nc,WJo),e(nc,iO),e(iO,HJo),e(nc,UJo),e(ct,JJo),e(ct,Ehe),e(Ehe,YJo),e(ct,KJo),g(X0,ct,null),e(_r,ZJo),e(_r,to),g(z0,to,null),e(to,eYo),e(to,Che),e(Che,oYo),e(to,rYo),e(to,gn),e(gn,tYo),e(gn,whe),e(whe,aYo),e(gn,nYo),e(gn,Ahe),e(Ahe,sYo),e(gn,lYo),e(gn,yhe),e(yhe,iYo),e(gn,dYo),e(to,cYo),e(to,Lhe),e(Lhe,v2),e(v2,xhe),e(xhe,fYo),e(v2,mYo),e(v2,dO),e(dO,gYo),e(v2,hYo),e(to,pYo),e(to,T2),e(T2,_Yo),e(T2,khe),e(khe,uYo),e(T2,bYo),e(T2,She),e(She,FYo),e(to,vYo),e(to,Rhe),e(Rhe,TYo),e(to,MYo),g(Q0,to,null),b(c,RBe,u),b(c,sc,u),e(sc,M2),e(M2,Bhe),g(W0,Bhe,null),e(sc,EYo),e(sc,Phe),e(Phe,CYo),b(c,BBe,u),b(c,ur,u),g(H0,ur,null),e(ur,wYo),e(ur,lc),e(lc,AYo),e(lc,cO),e(cO,yYo),e(lc,LYo),e(lc,fO),e(fO,xYo),e(lc,kYo),e(ur,SYo),e(ur,U0),e(U0,RYo),e(U0,$he),e($he,BYo),e(U0,PYo),e(ur,$Yo),e(ur,ft),g(J0,ft,null),e(ft,IYo),e(ft,Ihe),e(Ihe,qYo),e(ft,NYo),e(ft,ic),e(ic,jYo),e(ic,qhe),e(qhe,DYo),e(ic,GYo),e(ic,mO),e(mO,OYo),e(ic,VYo),e(ft,XYo),e(ft,Nhe),e(Nhe,zYo),e(ft,QYo),g(Y0,ft,null),e(ur,WYo),e(ur,ao),g(K0,ao,null),e(ao,HYo),e(ao,jhe),e(jhe,UYo),e(ao,JYo),e(ao,hn),e(hn,YYo),e(hn,Dhe),e(Dhe,KYo),e(hn,ZYo),e(hn,Ghe),e(Ghe,eKo),e(hn,oKo),e(hn,Ohe),e(Ohe,rKo),e(hn,tKo),e(ao,aKo),e(ao,dc),e(dc,E2),e(E2,Vhe),e(Vhe,nKo),e(E2,sKo),e(E2,gO),e(gO,lKo),e(E2,iKo),e(dc,dKo),e(dc,C2),e(C2,Xhe),e(Xhe,cKo),e(C2,fKo),e(C2,hO),e(hO,mKo),e(C2,gKo),e(dc,hKo),e(dc,w2),e(w2,zhe),e(zhe,pKo),e(w2,_Ko),e(w2,pO),e(pO,uKo),e(w2,bKo),e(ao,FKo),e(ao,A2),e(A2,vKo),e(A2,Qhe),e(Qhe,TKo),e(A2,MKo),e(A2,Whe),e(Whe,EKo),e(ao,CKo),e(ao,Hhe),e(Hhe,wKo),e(ao,AKo),g(Z0,ao,null),b(c,PBe,u),b(c,cc,u),e(cc,y2),e(y2,Uhe),g(ey,Uhe,null),e(cc,yKo),e(cc,Jhe),e(Jhe,LKo),b(c,$Be,u),b(c,br,u),g(oy,br,null),e(br,xKo),e(br,fc),e(fc,kKo),e(fc,_O),e(_O,SKo),e(fc,RKo),e(fc,uO),e(uO,BKo),e(fc,PKo),e(br,$Ko),e(br,ry),e(ry,IKo),e(ry,Yhe),e(Yhe,qKo),e(ry,NKo),e(br,jKo),e(br,mt),g(ty,mt,null),e(mt,DKo),e(mt,Khe),e(Khe,GKo),e(mt,OKo),e(mt,mc),e(mc,VKo),e(mc,Zhe),e(Zhe,XKo),e(mc,zKo),e(mc,bO),e(bO,QKo),e(mc,WKo),e(mt,HKo),e(mt,epe),e(epe,UKo),e(mt,JKo),g(ay,mt,null),e(br,YKo),e(br,no),g(ny,no,null),e(no,KKo),e(no,ope),e(ope,ZKo),e(no,eZo),e(no,pn),e(pn,oZo),e(pn,rpe),e(rpe,rZo),e(pn,tZo),e(pn,tpe),e(tpe,aZo),e(pn,nZo),e(pn,ape),e(ape,sZo),e(pn,lZo),e(no,iZo),e(no,npe),e(npe,L2),e(L2,spe),e(spe,dZo),e(L2,cZo),e(L2,FO),e(FO,fZo),e(L2,mZo),e(no,gZo),e(no,x2),e(x2,hZo),e(x2,lpe),e(lpe,pZo),e(x2,_Zo),e(x2,ipe),e(ipe,uZo),e(no,bZo),e(no,dpe),e(dpe,FZo),e(no,vZo),g(sy,no,null),b(c,IBe,u),b(c,gc,u),e(gc,k2),e(k2,cpe),g(ly,cpe,null),e(gc,TZo),e(gc,fpe),e(fpe,MZo),b(c,qBe,u),b(c,Fr,u),g(iy,Fr,null),e(Fr,EZo),e(Fr,hc),e(hc,CZo),e(hc,vO),e(vO,wZo),e(hc,AZo),e(hc,TO),e(TO,yZo),e(hc,LZo),e(Fr,xZo),e(Fr,dy),e(dy,kZo),e(dy,mpe),e(mpe,SZo),e(dy,RZo),e(Fr,BZo),e(Fr,gt),g(cy,gt,null),e(gt,PZo),e(gt,gpe),e(gpe,$Zo),e(gt,IZo),e(gt,pc),e(pc,qZo),e(pc,hpe),e(hpe,NZo),e(pc,jZo),e(pc,MO),e(MO,DZo),e(pc,GZo),e(gt,OZo),e(gt,ppe),e(ppe,VZo),e(gt,XZo),g(fy,gt,null),e(Fr,zZo),e(Fr,po),g(my,po,null),e(po,QZo),e(po,_pe),e(_pe,WZo),e(po,HZo),e(po,_n),e(_n,UZo),e(_n,upe),e(upe,JZo),e(_n,YZo),e(_n,bpe),e(bpe,KZo),e(_n,ZZo),e(_n,Fpe),e(Fpe,eer),e(_n,oer),e(po,rer),e(po,x),e(x,S2),e(S2,vpe),e(vpe,ter),e(S2,aer),e(S2,EO),e(EO,ner),e(S2,ser),e(x,ler),e(x,R2),e(R2,Tpe),e(Tpe,ier),e(R2,der),e(R2,CO),e(CO,cer),e(R2,fer),e(x,mer),e(x,B2),e(B2,Mpe),e(Mpe,ger),e(B2,her),e(B2,wO),e(wO,per),e(B2,_er),e(x,uer),e(x,P2),e(P2,Epe),e(Epe,ber),e(P2,Fer),e(P2,AO),e(AO,ver),e(P2,Ter),e(x,Mer),e(x,$2),e($2,Cpe),e(Cpe,Eer),e($2,Cer),e($2,yO),e(yO,wer),e($2,Aer),e(x,yer),e(x,I2),e(I2,wpe),e(wpe,Ler),e(I2,xer),e(I2,LO),e(LO,ker),e(I2,Ser),e(x,Rer),e(x,q2),e(q2,Ape),e(Ape,Ber),e(q2,Per),e(q2,xO),e(xO,$er),e(q2,Ier),e(x,qer),e(x,N2),e(N2,ype),e(ype,Ner),e(N2,jer),e(N2,kO),e(kO,Der),e(N2,Ger),e(x,Oer),e(x,j2),e(j2,Lpe),e(Lpe,Ver),e(j2,Xer),e(j2,SO),e(SO,zer),e(j2,Qer),e(x,Wer),e(x,D2),e(D2,xpe),e(xpe,Her),e(D2,Uer),e(D2,RO),e(RO,Jer),e(D2,Yer),e(x,Ker),e(x,G2),e(G2,kpe),e(kpe,Zer),e(G2,eor),e(G2,BO),e(BO,oor),e(G2,ror),e(x,tor),e(x,O2),e(O2,Spe),e(Spe,aor),e(O2,nor),e(O2,PO),e(PO,sor),e(O2,lor),e(x,ior),e(x,V2),e(V2,Rpe),e(Rpe,dor),e(V2,cor),e(V2,$O),e($O,mor),e(V2,gor),e(x,hor),e(x,X2),e(X2,Bpe),e(Bpe,por),e(X2,_or),e(X2,IO),e(IO,uor),e(X2,bor),e(x,For),e(x,z2),e(z2,Ppe),e(Ppe,vor),e(z2,Tor),e(z2,qO),e(qO,Mor),e(z2,Eor),e(x,Cor),e(x,Q2),e(Q2,$pe),e($pe,wor),e(Q2,Aor),e(Q2,NO),e(NO,yor),e(Q2,Lor),e(x,xor),e(x,Gs),e(Gs,Ipe),e(Ipe,kor),e(Gs,Sor),e(Gs,jO),e(jO,Ror),e(Gs,Bor),e(Gs,DO),e(DO,Por),e(Gs,$or),e(x,Ior),e(x,W2),e(W2,qpe),e(qpe,qor),e(W2,Nor),e(W2,GO),e(GO,jor),e(W2,Dor),e(x,Gor),e(x,H2),e(H2,Npe),e(Npe,Oor),e(H2,Vor),e(H2,OO),e(OO,Xor),e(H2,zor),e(x,Qor),e(x,U2),e(U2,jpe),e(jpe,Wor),e(U2,Hor),e(U2,VO),e(VO,Uor),e(U2,Jor),e(x,Yor),e(x,J2),e(J2,Dpe),e(Dpe,Kor),e(J2,Zor),e(J2,XO),e(XO,err),e(J2,orr),e(x,rrr),e(x,Y2),e(Y2,Gpe),e(Gpe,trr),e(Y2,arr),e(Y2,zO),e(zO,nrr),e(Y2,srr),e(x,lrr),e(x,K2),e(K2,Ope),e(Ope,irr),e(K2,drr),e(K2,QO),e(QO,crr),e(K2,frr),e(x,mrr),e(x,Z2),e(Z2,Vpe),e(Vpe,grr),e(Z2,hrr),e(Z2,WO),e(WO,prr),e(Z2,_rr),e(x,urr),e(x,eF),e(eF,Xpe),e(Xpe,brr),e(eF,Frr),e(eF,HO),e(HO,vrr),e(eF,Trr),e(x,Mrr),e(x,oF),e(oF,zpe),e(zpe,Err),e(oF,Crr),e(oF,UO),e(UO,wrr),e(oF,Arr),e(x,yrr),e(x,rF),e(rF,Qpe),e(Qpe,Lrr),e(rF,xrr),e(rF,JO),e(JO,krr),e(rF,Srr),e(x,Rrr),e(x,tF),e(tF,Wpe),e(Wpe,Brr),e(tF,Prr),e(tF,YO),e(YO,$rr),e(tF,Irr),e(x,qrr),e(x,aF),e(aF,Hpe),e(Hpe,Nrr),e(aF,jrr),e(aF,KO),e(KO,Drr),e(aF,Grr),e(x,Orr),e(x,nF),e(nF,Upe),e(Upe,Vrr),e(nF,Xrr),e(nF,ZO),e(ZO,zrr),e(nF,Qrr),e(x,Wrr),e(x,sF),e(sF,Jpe),e(Jpe,Hrr),e(sF,Urr),e(sF,eV),e(eV,Jrr),e(sF,Yrr),e(x,Krr),e(x,lF),e(lF,Ype),e(Ype,Zrr),e(lF,etr),e(lF,oV),e(oV,otr),e(lF,rtr),e(x,ttr),e(x,iF),e(iF,Kpe),e(Kpe,atr),e(iF,ntr),e(iF,rV),e(rV,str),e(iF,ltr),e(x,itr),e(x,dF),e(dF,Zpe),e(Zpe,dtr),e(dF,ctr),e(dF,tV),e(tV,ftr),e(dF,mtr),e(x,gtr),e(x,cF),e(cF,e_e),e(e_e,htr),e(cF,ptr),e(cF,aV),e(aV,_tr),e(cF,utr),e(x,btr),e(x,fF),e(fF,o_e),e(o_e,Ftr),e(fF,vtr),e(fF,nV),e(nV,Ttr),e(fF,Mtr),e(x,Etr),e(x,mF),e(mF,r_e),e(r_e,Ctr),e(mF,wtr),e(mF,sV),e(sV,Atr),e(mF,ytr),e(x,Ltr),e(x,gF),e(gF,t_e),e(t_e,xtr),e(gF,ktr),e(gF,lV),e(lV,Str),e(gF,Rtr),e(x,Btr),e(x,hF),e(hF,a_e),e(a_e,Ptr),e(hF,$tr),e(hF,iV),e(iV,Itr),e(hF,qtr),e(x,Ntr),e(x,pF),e(pF,n_e),e(n_e,jtr),e(pF,Dtr),e(pF,dV),e(dV,Gtr),e(pF,Otr),e(x,Vtr),e(x,_F),e(_F,s_e),e(s_e,Xtr),e(_F,ztr),e(_F,cV),e(cV,Qtr),e(_F,Wtr),e(x,Htr),e(x,uF),e(uF,l_e),e(l_e,Utr),e(uF,Jtr),e(uF,fV),e(fV,Ytr),e(uF,Ktr),e(x,Ztr),e(x,bF),e(bF,i_e),e(i_e,ear),e(bF,oar),e(bF,mV),e(mV,rar),e(bF,tar),e(x,aar),e(x,FF),e(FF,d_e),e(d_e,nar),e(FF,sar),e(FF,gV),e(gV,lar),e(FF,iar),e(po,dar),e(po,c_e),e(c_e,car),e(po,far),g(gy,po,null),b(c,NBe,u),b(c,_c,u),e(_c,vF),e(vF,f_e),g(hy,f_e,null),e(_c,mar),e(_c,m_e),e(m_e,gar),b(c,jBe,u),b(c,vr,u),g(py,vr,null),e(vr,har),e(vr,uc),e(uc,par),e(uc,hV),e(hV,_ar),e(uc,uar),e(uc,pV),e(pV,bar),e(uc,Far),e(vr,Tar),e(vr,_y),e(_y,Mar),e(_y,g_e),e(g_e,Ear),e(_y,Car),e(vr,war),e(vr,ht),g(uy,ht,null),e(ht,Aar),e(ht,h_e),e(h_e,yar),e(ht,Lar),e(ht,bc),e(bc,xar),e(bc,p_e),e(p_e,kar),e(bc,Sar),e(bc,_V),e(_V,Rar),e(bc,Bar),e(ht,Par),e(ht,__e),e(__e,$ar),e(ht,Iar),g(by,ht,null),e(vr,qar),e(vr,_o),g(Fy,_o,null),e(_o,Nar),e(_o,u_e),e(u_e,jar),e(_o,Dar),e(_o,un),e(un,Gar),e(un,b_e),e(b_e,Oar),e(un,Var),e(un,F_e),e(F_e,Xar),e(un,zar),e(un,v_e),e(v_e,Qar),e(un,War),e(_o,Har),e(_o,H),e(H,TF),e(TF,T_e),e(T_e,Uar),e(TF,Jar),e(TF,uV),e(uV,Yar),e(TF,Kar),e(H,Zar),e(H,MF),e(MF,M_e),e(M_e,enr),e(MF,onr),e(MF,bV),e(bV,rnr),e(MF,tnr),e(H,anr),e(H,EF),e(EF,E_e),e(E_e,nnr),e(EF,snr),e(EF,FV),e(FV,lnr),e(EF,inr),e(H,dnr),e(H,CF),e(CF,C_e),e(C_e,cnr),e(CF,fnr),e(CF,vV),e(vV,mnr),e(CF,gnr),e(H,hnr),e(H,wF),e(wF,w_e),e(w_e,pnr),e(wF,_nr),e(wF,TV),e(TV,unr),e(wF,bnr),e(H,Fnr),e(H,AF),e(AF,A_e),e(A_e,vnr),e(AF,Tnr),e(AF,MV),e(MV,Mnr),e(AF,Enr),e(H,Cnr),e(H,yF),e(yF,y_e),e(y_e,wnr),e(yF,Anr),e(yF,EV),e(EV,ynr),e(yF,Lnr),e(H,xnr),e(H,LF),e(LF,L_e),e(L_e,knr),e(LF,Snr),e(LF,CV),e(CV,Rnr),e(LF,Bnr),e(H,Pnr),e(H,xF),e(xF,x_e),e(x_e,$nr),e(xF,Inr),e(xF,wV),e(wV,qnr),e(xF,Nnr),e(H,jnr),e(H,kF),e(kF,k_e),e(k_e,Dnr),e(kF,Gnr),e(kF,AV),e(AV,Onr),e(kF,Vnr),e(H,Xnr),e(H,SF),e(SF,S_e),e(S_e,znr),e(SF,Qnr),e(SF,yV),e(yV,Wnr),e(SF,Hnr),e(H,Unr),e(H,RF),e(RF,R_e),e(R_e,Jnr),e(RF,Ynr),e(RF,LV),e(LV,Knr),e(RF,Znr),e(H,esr),e(H,BF),e(BF,B_e),e(B_e,osr),e(BF,rsr),e(BF,xV),e(xV,tsr),e(BF,asr),e(H,nsr),e(H,PF),e(PF,P_e),e(P_e,ssr),e(PF,lsr),e(PF,kV),e(kV,isr),e(PF,dsr),e(H,csr),e(H,$F),e($F,$_e),e($_e,fsr),e($F,msr),e($F,SV),e(SV,gsr),e($F,hsr),e(H,psr),e(H,IF),e(IF,I_e),e(I_e,_sr),e(IF,usr),e(IF,RV),e(RV,bsr),e(IF,Fsr),e(H,vsr),e(H,qF),e(qF,q_e),e(q_e,Tsr),e(qF,Msr),e(qF,BV),e(BV,Esr),e(qF,Csr),e(H,wsr),e(H,NF),e(NF,N_e),e(N_e,Asr),e(NF,ysr),e(NF,PV),e(PV,Lsr),e(NF,xsr),e(H,ksr),e(H,jF),e(jF,j_e),e(j_e,Ssr),e(jF,Rsr),e(jF,$V),e($V,Bsr),e(jF,Psr),e(H,$sr),e(H,DF),e(DF,D_e),e(D_e,Isr),e(DF,qsr),e(DF,IV),e(IV,Nsr),e(DF,jsr),e(H,Dsr),e(H,GF),e(GF,G_e),e(G_e,Gsr),e(GF,Osr),e(GF,qV),e(qV,Vsr),e(GF,Xsr),e(H,zsr),e(H,OF),e(OF,O_e),e(O_e,Qsr),e(OF,Wsr),e(OF,NV),e(NV,Hsr),e(OF,Usr),e(H,Jsr),e(H,VF),e(VF,V_e),e(V_e,Ysr),e(VF,Ksr),e(VF,jV),e(jV,Zsr),e(VF,elr),e(_o,olr),e(_o,X_e),e(X_e,rlr),e(_o,tlr),g(vy,_o,null),b(c,DBe,u),b(c,Fc,u),e(Fc,XF),e(XF,z_e),g(Ty,z_e,null),e(Fc,alr),e(Fc,Q_e),e(Q_e,nlr),b(c,GBe,u),b(c,Tr,u),g(My,Tr,null),e(Tr,slr),e(Tr,vc),e(vc,llr),e(vc,DV),e(DV,ilr),e(vc,dlr),e(vc,GV),e(GV,clr),e(vc,flr),e(Tr,mlr),e(Tr,Ey),e(Ey,glr),e(Ey,W_e),e(W_e,hlr),e(Ey,plr),e(Tr,_lr),e(Tr,pt),g(Cy,pt,null),e(pt,ulr),e(pt,H_e),e(H_e,blr),e(pt,Flr),e(pt,Tc),e(Tc,vlr),e(Tc,U_e),e(U_e,Tlr),e(Tc,Mlr),e(Tc,OV),e(OV,Elr),e(Tc,Clr),e(pt,wlr),e(pt,J_e),e(J_e,Alr),e(pt,ylr),g(wy,pt,null),e(Tr,Llr),e(Tr,uo),g(Ay,uo,null),e(uo,xlr),e(uo,Y_e),e(Y_e,klr),e(uo,Slr),e(uo,bn),e(bn,Rlr),e(bn,K_e),e(K_e,Blr),e(bn,Plr),e(bn,Z_e),e(Z_e,$lr),e(bn,Ilr),e(bn,eue),e(eue,qlr),e(bn,Nlr),e(uo,jlr),e(uo,fe),e(fe,zF),e(zF,oue),e(oue,Dlr),e(zF,Glr),e(zF,VV),e(VV,Olr),e(zF,Vlr),e(fe,Xlr),e(fe,QF),e(QF,rue),e(rue,zlr),e(QF,Qlr),e(QF,XV),e(XV,Wlr),e(QF,Hlr),e(fe,Ulr),e(fe,WF),e(WF,tue),e(tue,Jlr),e(WF,Ylr),e(WF,zV),e(zV,Klr),e(WF,Zlr),e(fe,eir),e(fe,HF),e(HF,aue),e(aue,oir),e(HF,rir),e(HF,QV),e(QV,tir),e(HF,air),e(fe,nir),e(fe,UF),e(UF,nue),e(nue,sir),e(UF,lir),e(UF,WV),e(WV,iir),e(UF,dir),e(fe,cir),e(fe,JF),e(JF,sue),e(sue,fir),e(JF,mir),e(JF,HV),e(HV,gir),e(JF,hir),e(fe,pir),e(fe,YF),e(YF,lue),e(lue,_ir),e(YF,uir),e(YF,UV),e(UV,bir),e(YF,Fir),e(fe,vir),e(fe,KF),e(KF,iue),e(iue,Tir),e(KF,Mir),e(KF,JV),e(JV,Eir),e(KF,Cir),e(fe,wir),e(fe,ZF),e(ZF,due),e(due,Air),e(ZF,yir),e(ZF,YV),e(YV,Lir),e(ZF,xir),e(fe,kir),e(fe,ev),e(ev,cue),e(cue,Sir),e(ev,Rir),e(ev,KV),e(KV,Bir),e(ev,Pir),e(fe,$ir),e(fe,ov),e(ov,fue),e(fue,Iir),e(ov,qir),e(ov,ZV),e(ZV,Nir),e(ov,jir),e(fe,Dir),e(fe,rv),e(rv,mue),e(mue,Gir),e(rv,Oir),e(rv,eX),e(eX,Vir),e(rv,Xir),e(uo,zir),e(uo,gue),e(gue,Qir),e(uo,Wir),g(yy,uo,null),b(c,OBe,u),b(c,Mc,u),e(Mc,tv),e(tv,hue),g(Ly,hue,null),e(Mc,Hir),e(Mc,pue),e(pue,Uir),b(c,VBe,u),b(c,Mr,u),g(xy,Mr,null),e(Mr,Jir),e(Mr,Ec),e(Ec,Yir),e(Ec,oX),e(oX,Kir),e(Ec,Zir),e(Ec,rX),e(rX,edr),e(Ec,odr),e(Mr,rdr),e(Mr,ky),e(ky,tdr),e(ky,_ue),e(_ue,adr),e(ky,ndr),e(Mr,sdr),e(Mr,_t),g(Sy,_t,null),e(_t,ldr),e(_t,uue),e(uue,idr),e(_t,ddr),e(_t,Cc),e(Cc,cdr),e(Cc,bue),e(bue,fdr),e(Cc,mdr),e(Cc,tX),e(tX,gdr),e(Cc,hdr),e(_t,pdr),e(_t,Fue),e(Fue,_dr),e(_t,udr),g(Ry,_t,null),e(Mr,bdr),e(Mr,bo),g(By,bo,null),e(bo,Fdr),e(bo,vue),e(vue,vdr),e(bo,Tdr),e(bo,Fn),e(Fn,Mdr),e(Fn,Tue),e(Tue,Edr),e(Fn,Cdr),e(Fn,Mue),e(Mue,wdr),e(Fn,Adr),e(Fn,Eue),e(Eue,ydr),e(Fn,Ldr),e(bo,xdr),e(bo,Py),e(Py,av),e(av,Cue),e(Cue,kdr),e(av,Sdr),e(av,aX),e(aX,Rdr),e(av,Bdr),e(Py,Pdr),e(Py,nv),e(nv,wue),e(wue,$dr),e(nv,Idr),e(nv,nX),e(nX,qdr),e(nv,Ndr),e(bo,jdr),e(bo,Aue),e(Aue,Ddr),e(bo,Gdr),g($y,bo,null),b(c,XBe,u),b(c,wc,u),e(wc,sv),e(sv,yue),g(Iy,yue,null),e(wc,Odr),e(wc,Lue),e(Lue,Vdr),b(c,zBe,u),b(c,Er,u),g(qy,Er,null),e(Er,Xdr),e(Er,Ac),e(Ac,zdr),e(Ac,sX),e(sX,Qdr),e(Ac,Wdr),e(Ac,lX),e(lX,Hdr),e(Ac,Udr),e(Er,Jdr),e(Er,Ny),e(Ny,Ydr),e(Ny,xue),e(xue,Kdr),e(Ny,Zdr),e(Er,ecr),e(Er,ut),g(jy,ut,null),e(ut,ocr),e(ut,kue),e(kue,rcr),e(ut,tcr),e(ut,yc),e(yc,acr),e(yc,Sue),e(Sue,ncr),e(yc,scr),e(yc,iX),e(iX,lcr),e(yc,icr),e(ut,dcr),e(ut,Rue),e(Rue,ccr),e(ut,fcr),g(Dy,ut,null),e(Er,mcr),e(Er,Fo),g(Gy,Fo,null),e(Fo,gcr),e(Fo,Bue),e(Bue,hcr),e(Fo,pcr),e(Fo,vn),e(vn,_cr),e(vn,Pue),e(Pue,ucr),e(vn,bcr),e(vn,$ue),e($ue,Fcr),e(vn,vcr),e(vn,Iue),e(Iue,Tcr),e(vn,Mcr),e(Fo,Ecr),e(Fo,Y),e(Y,lv),e(lv,que),e(que,Ccr),e(lv,wcr),e(lv,dX),e(dX,Acr),e(lv,ycr),e(Y,Lcr),e(Y,iv),e(iv,Nue),e(Nue,xcr),e(iv,kcr),e(iv,cX),e(cX,Scr),e(iv,Rcr),e(Y,Bcr),e(Y,dv),e(dv,jue),e(jue,Pcr),e(dv,$cr),e(dv,fX),e(fX,Icr),e(dv,qcr),e(Y,Ncr),e(Y,cv),e(cv,Due),e(Due,jcr),e(cv,Dcr),e(cv,mX),e(mX,Gcr),e(cv,Ocr),e(Y,Vcr),e(Y,fv),e(fv,Gue),e(Gue,Xcr),e(fv,zcr),e(fv,gX),e(gX,Qcr),e(fv,Wcr),e(Y,Hcr),e(Y,mv),e(mv,Oue),e(Oue,Ucr),e(mv,Jcr),e(mv,hX),e(hX,Ycr),e(mv,Kcr),e(Y,Zcr),e(Y,gv),e(gv,Vue),e(Vue,efr),e(gv,ofr),e(gv,pX),e(pX,rfr),e(gv,tfr),e(Y,afr),e(Y,hv),e(hv,Xue),e(Xue,nfr),e(hv,sfr),e(hv,_X),e(_X,lfr),e(hv,ifr),e(Y,dfr),e(Y,pv),e(pv,zue),e(zue,cfr),e(pv,ffr),e(pv,uX),e(uX,mfr),e(pv,gfr),e(Y,hfr),e(Y,_v),e(_v,Que),e(Que,pfr),e(_v,_fr),e(_v,bX),e(bX,ufr),e(_v,bfr),e(Y,Ffr),e(Y,uv),e(uv,Wue),e(Wue,vfr),e(uv,Tfr),e(uv,FX),e(FX,Mfr),e(uv,Efr),e(Y,Cfr),e(Y,bv),e(bv,Hue),e(Hue,wfr),e(bv,Afr),e(bv,vX),e(vX,yfr),e(bv,Lfr),e(Y,xfr),e(Y,Fv),e(Fv,Uue),e(Uue,kfr),e(Fv,Sfr),e(Fv,TX),e(TX,Rfr),e(Fv,Bfr),e(Y,Pfr),e(Y,vv),e(vv,Jue),e(Jue,$fr),e(vv,Ifr),e(vv,MX),e(MX,qfr),e(vv,Nfr),e(Y,jfr),e(Y,Tv),e(Tv,Yue),e(Yue,Dfr),e(Tv,Gfr),e(Tv,EX),e(EX,Ofr),e(Tv,Vfr),e(Y,Xfr),e(Y,Mv),e(Mv,Kue),e(Kue,zfr),e(Mv,Qfr),e(Mv,CX),e(CX,Wfr),e(Mv,Hfr),e(Y,Ufr),e(Y,Ev),e(Ev,Zue),e(Zue,Jfr),e(Ev,Yfr),e(Ev,wX),e(wX,Kfr),e(Ev,Zfr),e(Y,emr),e(Y,Cv),e(Cv,e6e),e(e6e,omr),e(Cv,rmr),e(Cv,AX),e(AX,tmr),e(Cv,amr),e(Y,nmr),e(Y,wv),e(wv,o6e),e(o6e,smr),e(wv,lmr),e(wv,yX),e(yX,imr),e(wv,dmr),e(Y,cmr),e(Y,Av),e(Av,r6e),e(r6e,fmr),e(Av,mmr),e(Av,LX),e(LX,gmr),e(Av,hmr),e(Fo,pmr),e(Fo,t6e),e(t6e,_mr),e(Fo,umr),g(Oy,Fo,null),b(c,QBe,u),b(c,Lc,u),e(Lc,yv),e(yv,a6e),g(Vy,a6e,null),e(Lc,bmr),e(Lc,n6e),e(n6e,Fmr),b(c,WBe,u),b(c,Cr,u),g(Xy,Cr,null),e(Cr,vmr),e(Cr,xc),e(xc,Tmr),e(xc,xX),e(xX,Mmr),e(xc,Emr),e(xc,kX),e(kX,Cmr),e(xc,wmr),e(Cr,Amr),e(Cr,zy),e(zy,ymr),e(zy,s6e),e(s6e,Lmr),e(zy,xmr),e(Cr,kmr),e(Cr,bt),g(Qy,bt,null),e(bt,Smr),e(bt,l6e),e(l6e,Rmr),e(bt,Bmr),e(bt,kc),e(kc,Pmr),e(kc,i6e),e(i6e,$mr),e(kc,Imr),e(kc,SX),e(SX,qmr),e(kc,Nmr),e(bt,jmr),e(bt,d6e),e(d6e,Dmr),e(bt,Gmr),g(Wy,bt,null),e(Cr,Omr),e(Cr,vo),g(Hy,vo,null),e(vo,Vmr),e(vo,c6e),e(c6e,Xmr),e(vo,zmr),e(vo,Tn),e(Tn,Qmr),e(Tn,f6e),e(f6e,Wmr),e(Tn,Hmr),e(Tn,m6e),e(m6e,Umr),e(Tn,Jmr),e(Tn,g6e),e(g6e,Ymr),e(Tn,Kmr),e(vo,Zmr),e(vo,be),e(be,Lv),e(Lv,h6e),e(h6e,egr),e(Lv,ogr),e(Lv,RX),e(RX,rgr),e(Lv,tgr),e(be,agr),e(be,xv),e(xv,p6e),e(p6e,ngr),e(xv,sgr),e(xv,BX),e(BX,lgr),e(xv,igr),e(be,dgr),e(be,kv),e(kv,_6e),e(_6e,cgr),e(kv,fgr),e(kv,PX),e(PX,mgr),e(kv,ggr),e(be,hgr),e(be,Sv),e(Sv,u6e),e(u6e,pgr),e(Sv,_gr),e(Sv,$X),e($X,ugr),e(Sv,bgr),e(be,Fgr),e(be,Rv),e(Rv,b6e),e(b6e,vgr),e(Rv,Tgr),e(Rv,IX),e(IX,Mgr),e(Rv,Egr),e(be,Cgr),e(be,Bv),e(Bv,F6e),e(F6e,wgr),e(Bv,Agr),e(Bv,qX),e(qX,ygr),e(Bv,Lgr),e(be,xgr),e(be,Pv),e(Pv,v6e),e(v6e,kgr),e(Pv,Sgr),e(Pv,NX),e(NX,Rgr),e(Pv,Bgr),e(be,Pgr),e(be,$v),e($v,T6e),e(T6e,$gr),e($v,Igr),e($v,jX),e(jX,qgr),e($v,Ngr),e(be,jgr),e(be,Iv),e(Iv,M6e),e(M6e,Dgr),e(Iv,Ggr),e(Iv,DX),e(DX,Ogr),e(Iv,Vgr),e(be,Xgr),e(be,qv),e(qv,E6e),e(E6e,zgr),e(qv,Qgr),e(qv,GX),e(GX,Wgr),e(qv,Hgr),e(vo,Ugr),e(vo,C6e),e(C6e,Jgr),e(vo,Ygr),g(Uy,vo,null),b(c,HBe,u),b(c,Sc,u),e(Sc,Nv),e(Nv,w6e),g(Jy,w6e,null),e(Sc,Kgr),e(Sc,A6e),e(A6e,Zgr),b(c,UBe,u),b(c,wr,u),g(Yy,wr,null),e(wr,ehr),e(wr,Rc),e(Rc,ohr),e(Rc,OX),e(OX,rhr),e(Rc,thr),e(Rc,VX),e(VX,ahr),e(Rc,nhr),e(wr,shr),e(wr,Ky),e(Ky,lhr),e(Ky,y6e),e(y6e,ihr),e(Ky,dhr),e(wr,chr),e(wr,Ft),g(Zy,Ft,null),e(Ft,fhr),e(Ft,L6e),e(L6e,mhr),e(Ft,ghr),e(Ft,Bc),e(Bc,hhr),e(Bc,x6e),e(x6e,phr),e(Bc,_hr),e(Bc,XX),e(XX,uhr),e(Bc,bhr),e(Ft,Fhr),e(Ft,k6e),e(k6e,vhr),e(Ft,Thr),g(eL,Ft,null),e(wr,Mhr),e(wr,To),g(oL,To,null),e(To,Ehr),e(To,S6e),e(S6e,Chr),e(To,whr),e(To,Mn),e(Mn,Ahr),e(Mn,R6e),e(R6e,yhr),e(Mn,Lhr),e(Mn,B6e),e(B6e,xhr),e(Mn,khr),e(Mn,P6e),e(P6e,Shr),e(Mn,Rhr),e(To,Bhr),e(To,V),e(V,jv),e(jv,$6e),e($6e,Phr),e(jv,$hr),e(jv,zX),e(zX,Ihr),e(jv,qhr),e(V,Nhr),e(V,Dv),e(Dv,I6e),e(I6e,jhr),e(Dv,Dhr),e(Dv,QX),e(QX,Ghr),e(Dv,Ohr),e(V,Vhr),e(V,Gv),e(Gv,q6e),e(q6e,Xhr),e(Gv,zhr),e(Gv,WX),e(WX,Qhr),e(Gv,Whr),e(V,Hhr),e(V,Ov),e(Ov,N6e),e(N6e,Uhr),e(Ov,Jhr),e(Ov,HX),e(HX,Yhr),e(Ov,Khr),e(V,Zhr),e(V,Vv),e(Vv,j6e),e(j6e,epr),e(Vv,opr),e(Vv,UX),e(UX,rpr),e(Vv,tpr),e(V,apr),e(V,Xv),e(Xv,D6e),e(D6e,npr),e(Xv,spr),e(Xv,JX),e(JX,lpr),e(Xv,ipr),e(V,dpr),e(V,zv),e(zv,G6e),e(G6e,cpr),e(zv,fpr),e(zv,YX),e(YX,mpr),e(zv,gpr),e(V,hpr),e(V,Qv),e(Qv,O6e),e(O6e,ppr),e(Qv,_pr),e(Qv,KX),e(KX,upr),e(Qv,bpr),e(V,Fpr),e(V,Wv),e(Wv,V6e),e(V6e,vpr),e(Wv,Tpr),e(Wv,ZX),e(ZX,Mpr),e(Wv,Epr),e(V,Cpr),e(V,Hv),e(Hv,X6e),e(X6e,wpr),e(Hv,Apr),e(Hv,ez),e(ez,ypr),e(Hv,Lpr),e(V,xpr),e(V,Uv),e(Uv,z6e),e(z6e,kpr),e(Uv,Spr),e(Uv,oz),e(oz,Rpr),e(Uv,Bpr),e(V,Ppr),e(V,Jv),e(Jv,Q6e),e(Q6e,$pr),e(Jv,Ipr),e(Jv,rz),e(rz,qpr),e(Jv,Npr),e(V,jpr),e(V,Yv),e(Yv,W6e),e(W6e,Dpr),e(Yv,Gpr),e(Yv,tz),e(tz,Opr),e(Yv,Vpr),e(V,Xpr),e(V,Kv),e(Kv,H6e),e(H6e,zpr),e(Kv,Qpr),e(Kv,az),e(az,Wpr),e(Kv,Hpr),e(V,Upr),e(V,Zv),e(Zv,U6e),e(U6e,Jpr),e(Zv,Ypr),e(Zv,nz),e(nz,Kpr),e(Zv,Zpr),e(V,e_r),e(V,eT),e(eT,J6e),e(J6e,o_r),e(eT,r_r),e(eT,sz),e(sz,t_r),e(eT,a_r),e(V,n_r),e(V,oT),e(oT,Y6e),e(Y6e,s_r),e(oT,l_r),e(oT,lz),e(lz,i_r),e(oT,d_r),e(V,c_r),e(V,rT),e(rT,K6e),e(K6e,f_r),e(rT,m_r),e(rT,iz),e(iz,g_r),e(rT,h_r),e(V,p_r),e(V,tT),e(tT,Z6e),e(Z6e,__r),e(tT,u_r),e(tT,dz),e(dz,b_r),e(tT,F_r),e(V,v_r),e(V,aT),e(aT,e1e),e(e1e,T_r),e(aT,M_r),e(aT,cz),e(cz,E_r),e(aT,C_r),e(V,w_r),e(V,nT),e(nT,o1e),e(o1e,A_r),e(nT,y_r),e(nT,fz),e(fz,L_r),e(nT,x_r),e(V,k_r),e(V,sT),e(sT,r1e),e(r1e,S_r),e(sT,R_r),e(sT,mz),e(mz,B_r),e(sT,P_r),e(V,$_r),e(V,lT),e(lT,t1e),e(t1e,I_r),e(lT,q_r),e(lT,gz),e(gz,N_r),e(lT,j_r),e(V,D_r),e(V,iT),e(iT,a1e),e(a1e,G_r),e(iT,O_r),e(iT,hz),e(hz,V_r),e(iT,X_r),e(V,z_r),e(V,dT),e(dT,n1e),e(n1e,Q_r),e(dT,W_r),e(dT,pz),e(pz,H_r),e(dT,U_r),e(V,J_r),e(V,cT),e(cT,s1e),e(s1e,Y_r),e(cT,K_r),e(cT,_z),e(_z,Z_r),e(cT,eur),e(To,our),e(To,l1e),e(l1e,rur),e(To,tur),g(rL,To,null),b(c,JBe,u),b(c,Pc,u),e(Pc,fT),e(fT,i1e),g(tL,i1e,null),e(Pc,aur),e(Pc,d1e),e(d1e,nur),b(c,YBe,u),b(c,Ar,u),g(aL,Ar,null),e(Ar,sur),e(Ar,$c),e($c,lur),e($c,uz),e(uz,iur),e($c,dur),e($c,bz),e(bz,cur),e($c,fur),e(Ar,mur),e(Ar,nL),e(nL,gur),e(nL,c1e),e(c1e,hur),e(nL,pur),e(Ar,_ur),e(Ar,vt),g(sL,vt,null),e(vt,uur),e(vt,f1e),e(f1e,bur),e(vt,Fur),e(vt,Ic),e(Ic,vur),e(Ic,m1e),e(m1e,Tur),e(Ic,Mur),e(Ic,Fz),e(Fz,Eur),e(Ic,Cur),e(vt,wur),e(vt,g1e),e(g1e,Aur),e(vt,yur),g(lL,vt,null),e(Ar,Lur),e(Ar,Mo),g(iL,Mo,null),e(Mo,xur),e(Mo,h1e),e(h1e,kur),e(Mo,Sur),e(Mo,En),e(En,Rur),e(En,p1e),e(p1e,Bur),e(En,Pur),e(En,_1e),e(_1e,$ur),e(En,Iur),e(En,u1e),e(u1e,qur),e(En,Nur),e(Mo,jur),e(Mo,se),e(se,mT),e(mT,b1e),e(b1e,Dur),e(mT,Gur),e(mT,vz),e(vz,Our),e(mT,Vur),e(se,Xur),e(se,gT),e(gT,F1e),e(F1e,zur),e(gT,Qur),e(gT,Tz),e(Tz,Wur),e(gT,Hur),e(se,Uur),e(se,hT),e(hT,v1e),e(v1e,Jur),e(hT,Yur),e(hT,Mz),e(Mz,Kur),e(hT,Zur),e(se,e6r),e(se,pT),e(pT,T1e),e(T1e,o6r),e(pT,r6r),e(pT,Ez),e(Ez,t6r),e(pT,a6r),e(se,n6r),e(se,_T),e(_T,M1e),e(M1e,s6r),e(_T,l6r),e(_T,Cz),e(Cz,i6r),e(_T,d6r),e(se,c6r),e(se,uT),e(uT,E1e),e(E1e,f6r),e(uT,m6r),e(uT,wz),e(wz,g6r),e(uT,h6r),e(se,p6r),e(se,bT),e(bT,C1e),e(C1e,_6r),e(bT,u6r),e(bT,Az),e(Az,b6r),e(bT,F6r),e(se,v6r),e(se,FT),e(FT,w1e),e(w1e,T6r),e(FT,M6r),e(FT,yz),e(yz,E6r),e(FT,C6r),e(se,w6r),e(se,vT),e(vT,A1e),e(A1e,A6r),e(vT,y6r),e(vT,Lz),e(Lz,L6r),e(vT,x6r),e(se,k6r),e(se,TT),e(TT,y1e),e(y1e,S6r),e(TT,R6r),e(TT,xz),e(xz,B6r),e(TT,P6r),e(se,$6r),e(se,MT),e(MT,L1e),e(L1e,I6r),e(MT,q6r),e(MT,kz),e(kz,N6r),e(MT,j6r),e(se,D6r),e(se,ET),e(ET,x1e),e(x1e,G6r),e(ET,O6r),e(ET,Sz),e(Sz,V6r),e(ET,X6r),e(se,z6r),e(se,CT),e(CT,k1e),e(k1e,Q6r),e(CT,W6r),e(CT,Rz),e(Rz,H6r),e(CT,U6r),e(se,J6r),e(se,wT),e(wT,S1e),e(S1e,Y6r),e(wT,K6r),e(wT,Bz),e(Bz,Z6r),e(wT,e1r),e(se,o1r),e(se,AT),e(AT,R1e),e(R1e,r1r),e(AT,t1r),e(AT,Pz),e(Pz,a1r),e(AT,n1r),e(se,s1r),e(se,yT),e(yT,B1e),e(B1e,l1r),e(yT,i1r),e(yT,$z),e($z,d1r),e(yT,c1r),e(se,f1r),e(se,LT),e(LT,P1e),e(P1e,m1r),e(LT,g1r),e(LT,Iz),e(Iz,h1r),e(LT,p1r),e(Mo,_1r),e(Mo,$1e),e($1e,u1r),e(Mo,b1r),g(dL,Mo,null),b(c,KBe,u),b(c,qc,u),e(qc,xT),e(xT,I1e),g(cL,I1e,null),e(qc,F1r),e(qc,q1e),e(q1e,v1r),b(c,ZBe,u),b(c,yr,u),g(fL,yr,null),e(yr,T1r),e(yr,Nc),e(Nc,M1r),e(Nc,qz),e(qz,E1r),e(Nc,C1r),e(Nc,Nz),e(Nz,w1r),e(Nc,A1r),e(yr,y1r),e(yr,mL),e(mL,L1r),e(mL,N1e),e(N1e,x1r),e(mL,k1r),e(yr,S1r),e(yr,Tt),g(gL,Tt,null),e(Tt,R1r),e(Tt,j1e),e(j1e,B1r),e(Tt,P1r),e(Tt,jc),e(jc,$1r),e(jc,D1e),e(D1e,I1r),e(jc,q1r),e(jc,jz),e(jz,N1r),e(jc,j1r),e(Tt,D1r),e(Tt,G1e),e(G1e,G1r),e(Tt,O1r),g(hL,Tt,null),e(yr,V1r),e(yr,Eo),g(pL,Eo,null),e(Eo,X1r),e(Eo,O1e),e(O1e,z1r),e(Eo,Q1r),e(Eo,Cn),e(Cn,W1r),e(Cn,V1e),e(V1e,H1r),e(Cn,U1r),e(Cn,X1e),e(X1e,J1r),e(Cn,Y1r),e(Cn,z1e),e(z1e,K1r),e(Cn,Z1r),e(Eo,e4r),e(Eo,Q1e),e(Q1e,kT),e(kT,W1e),e(W1e,o4r),e(kT,r4r),e(kT,Dz),e(Dz,t4r),e(kT,a4r),e(Eo,n4r),e(Eo,H1e),e(H1e,s4r),e(Eo,l4r),g(_L,Eo,null),b(c,ePe,u),b(c,Dc,u),e(Dc,ST),e(ST,U1e),g(uL,U1e,null),e(Dc,i4r),e(Dc,J1e),e(J1e,d4r),b(c,oPe,u),b(c,Lr,u),g(bL,Lr,null),e(Lr,c4r),e(Lr,Gc),e(Gc,f4r),e(Gc,Gz),e(Gz,m4r),e(Gc,g4r),e(Gc,Oz),e(Oz,h4r),e(Gc,p4r),e(Lr,_4r),e(Lr,FL),e(FL,u4r),e(FL,Y1e),e(Y1e,b4r),e(FL,F4r),e(Lr,v4r),e(Lr,Mt),g(vL,Mt,null),e(Mt,T4r),e(Mt,K1e),e(K1e,M4r),e(Mt,E4r),e(Mt,Oc),e(Oc,C4r),e(Oc,Z1e),e(Z1e,w4r),e(Oc,A4r),e(Oc,Vz),e(Vz,y4r),e(Oc,L4r),e(Mt,x4r),e(Mt,e4e),e(e4e,k4r),e(Mt,S4r),g(TL,Mt,null),e(Lr,R4r),e(Lr,Co),g(ML,Co,null),e(Co,B4r),e(Co,o4e),e(o4e,P4r),e(Co,$4r),e(Co,wn),e(wn,I4r),e(wn,r4e),e(r4e,q4r),e(wn,N4r),e(wn,t4e),e(t4e,j4r),e(wn,D4r),e(wn,a4e),e(a4e,G4r),e(wn,O4r),e(Co,V4r),e(Co,K),e(K,RT),e(RT,n4e),e(n4e,X4r),e(RT,z4r),e(RT,Xz),e(Xz,Q4r),e(RT,W4r),e(K,H4r),e(K,BT),e(BT,s4e),e(s4e,U4r),e(BT,J4r),e(BT,zz),e(zz,Y4r),e(BT,K4r),e(K,Z4r),e(K,PT),e(PT,l4e),e(l4e,ebr),e(PT,obr),e(PT,Qz),e(Qz,rbr),e(PT,tbr),e(K,abr),e(K,$T),e($T,i4e),e(i4e,nbr),e($T,sbr),e($T,Wz),e(Wz,lbr),e($T,ibr),e(K,dbr),e(K,IT),e(IT,d4e),e(d4e,cbr),e(IT,fbr),e(IT,Hz),e(Hz,mbr),e(IT,gbr),e(K,hbr),e(K,qT),e(qT,c4e),e(c4e,pbr),e(qT,_br),e(qT,Uz),e(Uz,ubr),e(qT,bbr),e(K,Fbr),e(K,NT),e(NT,f4e),e(f4e,vbr),e(NT,Tbr),e(NT,Jz),e(Jz,Mbr),e(NT,Ebr),e(K,Cbr),e(K,jT),e(jT,m4e),e(m4e,wbr),e(jT,Abr),e(jT,Yz),e(Yz,ybr),e(jT,Lbr),e(K,xbr),e(K,DT),e(DT,g4e),e(g4e,kbr),e(DT,Sbr),e(DT,Kz),e(Kz,Rbr),e(DT,Bbr),e(K,Pbr),e(K,GT),e(GT,h4e),e(h4e,$br),e(GT,Ibr),e(GT,Zz),e(Zz,qbr),e(GT,Nbr),e(K,jbr),e(K,OT),e(OT,p4e),e(p4e,Dbr),e(OT,Gbr),e(OT,eQ),e(eQ,Obr),e(OT,Vbr),e(K,Xbr),e(K,VT),e(VT,_4e),e(_4e,zbr),e(VT,Qbr),e(VT,oQ),e(oQ,Wbr),e(VT,Hbr),e(K,Ubr),e(K,XT),e(XT,u4e),e(u4e,Jbr),e(XT,Ybr),e(XT,rQ),e(rQ,Kbr),e(XT,Zbr),e(K,e5r),e(K,zT),e(zT,b4e),e(b4e,o5r),e(zT,r5r),e(zT,tQ),e(tQ,t5r),e(zT,a5r),e(K,n5r),e(K,QT),e(QT,F4e),e(F4e,s5r),e(QT,l5r),e(QT,aQ),e(aQ,i5r),e(QT,d5r),e(K,c5r),e(K,WT),e(WT,v4e),e(v4e,f5r),e(WT,m5r),e(WT,nQ),e(nQ,g5r),e(WT,h5r),e(K,p5r),e(K,HT),e(HT,T4e),e(T4e,_5r),e(HT,u5r),e(HT,sQ),e(sQ,b5r),e(HT,F5r),e(K,v5r),e(K,UT),e(UT,M4e),e(M4e,T5r),e(UT,M5r),e(UT,lQ),e(lQ,E5r),e(UT,C5r),e(K,w5r),e(K,JT),e(JT,E4e),e(E4e,A5r),e(JT,y5r),e(JT,iQ),e(iQ,L5r),e(JT,x5r),e(K,k5r),e(K,YT),e(YT,C4e),e(C4e,S5r),e(YT,R5r),e(YT,dQ),e(dQ,B5r),e(YT,P5r),e(Co,$5r),e(Co,w4e),e(w4e,I5r),e(Co,q5r),g(EL,Co,null),b(c,rPe,u),b(c,Vc,u),e(Vc,KT),e(KT,A4e),g(CL,A4e,null),e(Vc,N5r),e(Vc,y4e),e(y4e,j5r),b(c,tPe,u),b(c,xr,u),g(wL,xr,null),e(xr,D5r),e(xr,Xc),e(Xc,G5r),e(Xc,cQ),e(cQ,O5r),e(Xc,V5r),e(Xc,fQ),e(fQ,X5r),e(Xc,z5r),e(xr,Q5r),e(xr,AL),e(AL,W5r),e(AL,L4e),e(L4e,H5r),e(AL,U5r),e(xr,J5r),e(xr,Et),g(yL,Et,null),e(Et,Y5r),e(Et,x4e),e(x4e,K5r),e(Et,Z5r),e(Et,zc),e(zc,e2r),e(zc,k4e),e(k4e,o2r),e(zc,r2r),e(zc,mQ),e(mQ,t2r),e(zc,a2r),e(Et,n2r),e(Et,S4e),e(S4e,s2r),e(Et,l2r),g(LL,Et,null),e(xr,i2r),e(xr,wo),g(xL,wo,null),e(wo,d2r),e(wo,R4e),e(R4e,c2r),e(wo,f2r),e(wo,An),e(An,m2r),e(An,B4e),e(B4e,g2r),e(An,h2r),e(An,P4e),e(P4e,p2r),e(An,_2r),e(An,$4e),e($4e,u2r),e(An,b2r),e(wo,F2r),e(wo,Z),e(Z,ZT),e(ZT,I4e),e(I4e,v2r),e(ZT,T2r),e(ZT,gQ),e(gQ,M2r),e(ZT,E2r),e(Z,C2r),e(Z,eM),e(eM,q4e),e(q4e,w2r),e(eM,A2r),e(eM,hQ),e(hQ,y2r),e(eM,L2r),e(Z,x2r),e(Z,oM),e(oM,N4e),e(N4e,k2r),e(oM,S2r),e(oM,pQ),e(pQ,R2r),e(oM,B2r),e(Z,P2r),e(Z,rM),e(rM,j4e),e(j4e,$2r),e(rM,I2r),e(rM,_Q),e(_Q,q2r),e(rM,N2r),e(Z,j2r),e(Z,tM),e(tM,D4e),e(D4e,D2r),e(tM,G2r),e(tM,uQ),e(uQ,O2r),e(tM,V2r),e(Z,X2r),e(Z,aM),e(aM,G4e),e(G4e,z2r),e(aM,Q2r),e(aM,bQ),e(bQ,W2r),e(aM,H2r),e(Z,U2r),e(Z,nM),e(nM,O4e),e(O4e,J2r),e(nM,Y2r),e(nM,FQ),e(FQ,K2r),e(nM,Z2r),e(Z,eFr),e(Z,sM),e(sM,V4e),e(V4e,oFr),e(sM,rFr),e(sM,vQ),e(vQ,tFr),e(sM,aFr),e(Z,nFr),e(Z,lM),e(lM,X4e),e(X4e,sFr),e(lM,lFr),e(lM,TQ),e(TQ,iFr),e(lM,dFr),e(Z,cFr),e(Z,iM),e(iM,z4e),e(z4e,fFr),e(iM,mFr),e(iM,MQ),e(MQ,gFr),e(iM,hFr),e(Z,pFr),e(Z,dM),e(dM,Q4e),e(Q4e,_Fr),e(dM,uFr),e(dM,EQ),e(EQ,bFr),e(dM,FFr),e(Z,vFr),e(Z,cM),e(cM,W4e),e(W4e,TFr),e(cM,MFr),e(cM,CQ),e(CQ,EFr),e(cM,CFr),e(Z,wFr),e(Z,fM),e(fM,H4e),e(H4e,AFr),e(fM,yFr),e(fM,wQ),e(wQ,LFr),e(fM,xFr),e(Z,kFr),e(Z,mM),e(mM,U4e),e(U4e,SFr),e(mM,RFr),e(mM,AQ),e(AQ,BFr),e(mM,PFr),e(Z,$Fr),e(Z,gM),e(gM,J4e),e(J4e,IFr),e(gM,qFr),e(gM,yQ),e(yQ,NFr),e(gM,jFr),e(Z,DFr),e(Z,hM),e(hM,Y4e),e(Y4e,GFr),e(hM,OFr),e(hM,LQ),e(LQ,VFr),e(hM,XFr),e(Z,zFr),e(Z,pM),e(pM,K4e),e(K4e,QFr),e(pM,WFr),e(pM,xQ),e(xQ,HFr),e(pM,UFr),e(Z,JFr),e(Z,_M),e(_M,Z4e),e(Z4e,YFr),e(_M,KFr),e(_M,kQ),e(kQ,ZFr),e(_M,evr),e(Z,ovr),e(Z,uM),e(uM,ebe),e(ebe,rvr),e(uM,tvr),e(uM,SQ),e(SQ,avr),e(uM,nvr),e(Z,svr),e(Z,bM),e(bM,obe),e(obe,lvr),e(bM,ivr),e(bM,RQ),e(RQ,dvr),e(bM,cvr),e(wo,fvr),e(wo,rbe),e(rbe,mvr),e(wo,gvr),g(kL,wo,null),b(c,aPe,u),b(c,Qc,u),e(Qc,FM),e(FM,tbe),g(SL,tbe,null),e(Qc,hvr),e(Qc,abe),e(abe,pvr),b(c,nPe,u),b(c,kr,u),g(RL,kr,null),e(kr,_vr),e(kr,Wc),e(Wc,uvr),e(Wc,BQ),e(BQ,bvr),e(Wc,Fvr),e(Wc,PQ),e(PQ,vvr),e(Wc,Tvr),e(kr,Mvr),e(kr,BL),e(BL,Evr),e(BL,nbe),e(nbe,Cvr),e(BL,wvr),e(kr,Avr),e(kr,Ct),g(PL,Ct,null),e(Ct,yvr),e(Ct,sbe),e(sbe,Lvr),e(Ct,xvr),e(Ct,Hc),e(Hc,kvr),e(Hc,lbe),e(lbe,Svr),e(Hc,Rvr),e(Hc,$Q),e($Q,Bvr),e(Hc,Pvr),e(Ct,$vr),e(Ct,ibe),e(ibe,Ivr),e(Ct,qvr),g($L,Ct,null),e(kr,Nvr),e(kr,Ao),g(IL,Ao,null),e(Ao,jvr),e(Ao,dbe),e(dbe,Dvr),e(Ao,Gvr),e(Ao,yn),e(yn,Ovr),e(yn,cbe),e(cbe,Vvr),e(yn,Xvr),e(yn,fbe),e(fbe,zvr),e(yn,Qvr),e(yn,mbe),e(mbe,Wvr),e(yn,Hvr),e(Ao,Uvr),e(Ao,gbe),e(gbe,vM),e(vM,hbe),e(hbe,Jvr),e(vM,Yvr),e(vM,IQ),e(IQ,Kvr),e(vM,Zvr),e(Ao,eTr),e(Ao,pbe),e(pbe,oTr),e(Ao,rTr),g(qL,Ao,null),b(c,sPe,u),b(c,Uc,u),e(Uc,TM),e(TM,_be),g(NL,_be,null),e(Uc,tTr),e(Uc,ube),e(ube,aTr),b(c,lPe,u),b(c,Sr,u),g(jL,Sr,null),e(Sr,nTr),e(Sr,Jc),e(Jc,sTr),e(Jc,qQ),e(qQ,lTr),e(Jc,iTr),e(Jc,NQ),e(NQ,dTr),e(Jc,cTr),e(Sr,fTr),e(Sr,DL),e(DL,mTr),e(DL,bbe),e(bbe,gTr),e(DL,hTr),e(Sr,pTr),e(Sr,wt),g(GL,wt,null),e(wt,_Tr),e(wt,Fbe),e(Fbe,uTr),e(wt,bTr),e(wt,Yc),e(Yc,FTr),e(Yc,vbe),e(vbe,vTr),e(Yc,TTr),e(Yc,jQ),e(jQ,MTr),e(Yc,ETr),e(wt,CTr),e(wt,Tbe),e(Tbe,wTr),e(wt,ATr),g(OL,wt,null),e(Sr,yTr),e(Sr,yo),g(VL,yo,null),e(yo,LTr),e(yo,Mbe),e(Mbe,xTr),e(yo,kTr),e(yo,Ln),e(Ln,STr),e(Ln,Ebe),e(Ebe,RTr),e(Ln,BTr),e(Ln,Cbe),e(Cbe,PTr),e(Ln,$Tr),e(Ln,wbe),e(wbe,ITr),e(Ln,qTr),e(yo,NTr),e(yo,Abe),e(Abe,MM),e(MM,ybe),e(ybe,jTr),e(MM,DTr),e(MM,DQ),e(DQ,GTr),e(MM,OTr),e(yo,VTr),e(yo,Lbe),e(Lbe,XTr),e(yo,zTr),g(XL,yo,null),b(c,iPe,u),b(c,Kc,u),e(Kc,EM),e(EM,xbe),g(zL,xbe,null),e(Kc,QTr),e(Kc,kbe),e(kbe,WTr),b(c,dPe,u),b(c,Rr,u),g(QL,Rr,null),e(Rr,HTr),e(Rr,Zc),e(Zc,UTr),e(Zc,GQ),e(GQ,JTr),e(Zc,YTr),e(Zc,OQ),e(OQ,KTr),e(Zc,ZTr),e(Rr,eMr),e(Rr,WL),e(WL,oMr),e(WL,Sbe),e(Sbe,rMr),e(WL,tMr),e(Rr,aMr),e(Rr,At),g(HL,At,null),e(At,nMr),e(At,Rbe),e(Rbe,sMr),e(At,lMr),e(At,ef),e(ef,iMr),e(ef,Bbe),e(Bbe,dMr),e(ef,cMr),e(ef,VQ),e(VQ,fMr),e(ef,mMr),e(At,gMr),e(At,Pbe),e(Pbe,hMr),e(At,pMr),g(UL,At,null),e(Rr,_Mr),e(Rr,Lo),g(JL,Lo,null),e(Lo,uMr),e(Lo,$be),e($be,bMr),e(Lo,FMr),e(Lo,xn),e(xn,vMr),e(xn,Ibe),e(Ibe,TMr),e(xn,MMr),e(xn,qbe),e(qbe,EMr),e(xn,CMr),e(xn,Nbe),e(Nbe,wMr),e(xn,AMr),e(Lo,yMr),e(Lo,z),e(z,CM),e(CM,jbe),e(jbe,LMr),e(CM,xMr),e(CM,XQ),e(XQ,kMr),e(CM,SMr),e(z,RMr),e(z,wM),e(wM,Dbe),e(Dbe,BMr),e(wM,PMr),e(wM,zQ),e(zQ,$Mr),e(wM,IMr),e(z,qMr),e(z,AM),e(AM,Gbe),e(Gbe,NMr),e(AM,jMr),e(AM,QQ),e(QQ,DMr),e(AM,GMr),e(z,OMr),e(z,yM),e(yM,Obe),e(Obe,VMr),e(yM,XMr),e(yM,WQ),e(WQ,zMr),e(yM,QMr),e(z,WMr),e(z,LM),e(LM,Vbe),e(Vbe,HMr),e(LM,UMr),e(LM,HQ),e(HQ,JMr),e(LM,YMr),e(z,KMr),e(z,xM),e(xM,Xbe),e(Xbe,ZMr),e(xM,eEr),e(xM,UQ),e(UQ,oEr),e(xM,rEr),e(z,tEr),e(z,kM),e(kM,zbe),e(zbe,aEr),e(kM,nEr),e(kM,JQ),e(JQ,sEr),e(kM,lEr),e(z,iEr),e(z,SM),e(SM,Qbe),e(Qbe,dEr),e(SM,cEr),e(SM,YQ),e(YQ,fEr),e(SM,mEr),e(z,gEr),e(z,RM),e(RM,Wbe),e(Wbe,hEr),e(RM,pEr),e(RM,KQ),e(KQ,_Er),e(RM,uEr),e(z,bEr),e(z,BM),e(BM,Hbe),e(Hbe,FEr),e(BM,vEr),e(BM,ZQ),e(ZQ,TEr),e(BM,MEr),e(z,EEr),e(z,PM),e(PM,Ube),e(Ube,CEr),e(PM,wEr),e(PM,eW),e(eW,AEr),e(PM,yEr),e(z,LEr),e(z,$M),e($M,Jbe),e(Jbe,xEr),e($M,kEr),e($M,oW),e(oW,SEr),e($M,REr),e(z,BEr),e(z,IM),e(IM,Ybe),e(Ybe,PEr),e(IM,$Er),e(IM,rW),e(rW,IEr),e(IM,qEr),e(z,NEr),e(z,qM),e(qM,Kbe),e(Kbe,jEr),e(qM,DEr),e(qM,tW),e(tW,GEr),e(qM,OEr),e(z,VEr),e(z,NM),e(NM,Zbe),e(Zbe,XEr),e(NM,zEr),e(NM,aW),e(aW,QEr),e(NM,WEr),e(z,HEr),e(z,jM),e(jM,e5e),e(e5e,UEr),e(jM,JEr),e(jM,nW),e(nW,YEr),e(jM,KEr),e(z,ZEr),e(z,DM),e(DM,o5e),e(o5e,e3r),e(DM,o3r),e(DM,sW),e(sW,r3r),e(DM,t3r),e(z,a3r),e(z,GM),e(GM,r5e),e(r5e,n3r),e(GM,s3r),e(GM,lW),e(lW,l3r),e(GM,i3r),e(z,d3r),e(z,OM),e(OM,t5e),e(t5e,c3r),e(OM,f3r),e(OM,iW),e(iW,m3r),e(OM,g3r),e(z,h3r),e(z,VM),e(VM,a5e),e(a5e,p3r),e(VM,_3r),e(VM,dW),e(dW,u3r),e(VM,b3r),e(z,F3r),e(z,XM),e(XM,n5e),e(n5e,v3r),e(XM,T3r),e(XM,cW),e(cW,M3r),e(XM,E3r),e(z,C3r),e(z,zM),e(zM,s5e),e(s5e,w3r),e(zM,A3r),e(zM,fW),e(fW,y3r),e(zM,L3r),e(z,x3r),e(z,QM),e(QM,l5e),e(l5e,k3r),e(QM,S3r),e(QM,mW),e(mW,R3r),e(QM,B3r),e(z,P3r),e(z,WM),e(WM,i5e),e(i5e,$3r),e(WM,I3r),e(WM,gW),e(gW,q3r),e(WM,N3r),e(z,j3r),e(z,HM),e(HM,d5e),e(d5e,D3r),e(HM,G3r),e(HM,hW),e(hW,O3r),e(HM,V3r),e(Lo,X3r),e(Lo,c5e),e(c5e,z3r),e(Lo,Q3r),g(YL,Lo,null),b(c,cPe,u),b(c,of,u),e(of,UM),e(UM,f5e),g(KL,f5e,null),e(of,W3r),e(of,m5e),e(m5e,H3r),b(c,fPe,u),b(c,Br,u),g(ZL,Br,null),e(Br,U3r),e(Br,rf),e(rf,J3r),e(rf,pW),e(pW,Y3r),e(rf,K3r),e(rf,_W),e(_W,Z3r),e(rf,eCr),e(Br,oCr),e(Br,e8),e(e8,rCr),e(e8,g5e),e(g5e,tCr),e(e8,aCr),e(Br,nCr),e(Br,yt),g(o8,yt,null),e(yt,sCr),e(yt,h5e),e(h5e,lCr),e(yt,iCr),e(yt,tf),e(tf,dCr),e(tf,p5e),e(p5e,cCr),e(tf,fCr),e(tf,uW),e(uW,mCr),e(tf,gCr),e(yt,hCr),e(yt,_5e),e(_5e,pCr),e(yt,_Cr),g(r8,yt,null),e(Br,uCr),e(Br,xo),g(t8,xo,null),e(xo,bCr),e(xo,u5e),e(u5e,FCr),e(xo,vCr),e(xo,kn),e(kn,TCr),e(kn,b5e),e(b5e,MCr),e(kn,ECr),e(kn,F5e),e(F5e,CCr),e(kn,wCr),e(kn,v5e),e(v5e,ACr),e(kn,yCr),e(xo,LCr),e(xo,ca),e(ca,JM),e(JM,T5e),e(T5e,xCr),e(JM,kCr),e(JM,bW),e(bW,SCr),e(JM,RCr),e(ca,BCr),e(ca,YM),e(YM,M5e),e(M5e,PCr),e(YM,$Cr),e(YM,FW),e(FW,ICr),e(YM,qCr),e(ca,NCr),e(ca,KM),e(KM,E5e),e(E5e,jCr),e(KM,DCr),e(KM,vW),e(vW,GCr),e(KM,OCr),e(ca,VCr),e(ca,ZM),e(ZM,C5e),e(C5e,XCr),e(ZM,zCr),e(ZM,TW),e(TW,QCr),e(ZM,WCr),e(ca,HCr),e(ca,eE),e(eE,w5e),e(w5e,UCr),e(eE,JCr),e(eE,MW),e(MW,YCr),e(eE,KCr),e(xo,ZCr),e(xo,A5e),e(A5e,ewr),e(xo,owr),g(a8,xo,null),b(c,mPe,u),b(c,af,u),e(af,oE),e(oE,y5e),g(n8,y5e,null),e(af,rwr),e(af,L5e),e(L5e,twr),b(c,gPe,u),b(c,Pr,u),g(s8,Pr,null),e(Pr,awr),e(Pr,nf),e(nf,nwr),e(nf,EW),e(EW,swr),e(nf,lwr),e(nf,CW),e(CW,iwr),e(nf,dwr),e(Pr,cwr),e(Pr,l8),e(l8,fwr),e(l8,x5e),e(x5e,mwr),e(l8,gwr),e(Pr,hwr),e(Pr,Lt),g(i8,Lt,null),e(Lt,pwr),e(Lt,k5e),e(k5e,_wr),e(Lt,uwr),e(Lt,sf),e(sf,bwr),e(sf,S5e),e(S5e,Fwr),e(sf,vwr),e(sf,wW),e(wW,Twr),e(sf,Mwr),e(Lt,Ewr),e(Lt,R5e),e(R5e,Cwr),e(Lt,wwr),g(d8,Lt,null),e(Pr,Awr),e(Pr,ko),g(c8,ko,null),e(ko,ywr),e(ko,B5e),e(B5e,Lwr),e(ko,xwr),e(ko,Sn),e(Sn,kwr),e(Sn,P5e),e(P5e,Swr),e(Sn,Rwr),e(Sn,$5e),e($5e,Bwr),e(Sn,Pwr),e(Sn,I5e),e(I5e,$wr),e(Sn,Iwr),e(ko,qwr),e(ko,me),e(me,rE),e(rE,q5e),e(q5e,Nwr),e(rE,jwr),e(rE,AW),e(AW,Dwr),e(rE,Gwr),e(me,Owr),e(me,tE),e(tE,N5e),e(N5e,Vwr),e(tE,Xwr),e(tE,yW),e(yW,zwr),e(tE,Qwr),e(me,Wwr),e(me,aE),e(aE,j5e),e(j5e,Hwr),e(aE,Uwr),e(aE,LW),e(LW,Jwr),e(aE,Ywr),e(me,Kwr),e(me,nE),e(nE,D5e),e(D5e,Zwr),e(nE,eAr),e(nE,xW),e(xW,oAr),e(nE,rAr),e(me,tAr),e(me,sE),e(sE,G5e),e(G5e,aAr),e(sE,nAr),e(sE,kW),e(kW,sAr),e(sE,lAr),e(me,iAr),e(me,lE),e(lE,O5e),e(O5e,dAr),e(lE,cAr),e(lE,SW),e(SW,fAr),e(lE,mAr),e(me,gAr),e(me,iE),e(iE,V5e),e(V5e,hAr),e(iE,pAr),e(iE,RW),e(RW,_Ar),e(iE,uAr),e(me,bAr),e(me,dE),e(dE,X5e),e(X5e,FAr),e(dE,vAr),e(dE,BW),e(BW,TAr),e(dE,MAr),e(me,EAr),e(me,cE),e(cE,z5e),e(z5e,CAr),e(cE,wAr),e(cE,PW),e(PW,AAr),e(cE,yAr),e(me,LAr),e(me,fE),e(fE,Q5e),e(Q5e,xAr),e(fE,kAr),e(fE,$W),e($W,SAr),e(fE,RAr),e(me,BAr),e(me,mE),e(mE,W5e),e(W5e,PAr),e(mE,$Ar),e(mE,IW),e(IW,IAr),e(mE,qAr),e(me,NAr),e(me,gE),e(gE,H5e),e(H5e,jAr),e(gE,DAr),e(gE,qW),e(qW,GAr),e(gE,OAr),e(ko,VAr),e(ko,U5e),e(U5e,XAr),e(ko,zAr),g(f8,ko,null),b(c,hPe,u),b(c,lf,u),e(lf,hE),e(hE,J5e),g(m8,J5e,null),e(lf,QAr),e(lf,Y5e),e(Y5e,WAr),b(c,pPe,u),b(c,$r,u),g(g8,$r,null),e($r,HAr),e($r,df),e(df,UAr),e(df,NW),e(NW,JAr),e(df,YAr),e(df,jW),e(jW,KAr),e(df,ZAr),e($r,e0r),e($r,h8),e(h8,o0r),e(h8,K5e),e(K5e,r0r),e(h8,t0r),e($r,a0r),e($r,xt),g(p8,xt,null),e(xt,n0r),e(xt,Z5e),e(Z5e,s0r),e(xt,l0r),e(xt,cf),e(cf,i0r),e(cf,e2e),e(e2e,d0r),e(cf,c0r),e(cf,DW),e(DW,f0r),e(cf,m0r),e(xt,g0r),e(xt,o2e),e(o2e,h0r),e(xt,p0r),g(_8,xt,null),e($r,_0r),e($r,So),g(u8,So,null),e(So,u0r),e(So,r2e),e(r2e,b0r),e(So,F0r),e(So,Rn),e(Rn,v0r),e(Rn,t2e),e(t2e,T0r),e(Rn,M0r),e(Rn,a2e),e(a2e,E0r),e(Rn,C0r),e(Rn,n2e),e(n2e,w0r),e(Rn,A0r),e(So,y0r),e(So,Fe),e(Fe,pE),e(pE,s2e),e(s2e,L0r),e(pE,x0r),e(pE,GW),e(GW,k0r),e(pE,S0r),e(Fe,R0r),e(Fe,_E),e(_E,l2e),e(l2e,B0r),e(_E,P0r),e(_E,OW),e(OW,$0r),e(_E,I0r),e(Fe,q0r),e(Fe,uE),e(uE,i2e),e(i2e,N0r),e(uE,j0r),e(uE,VW),e(VW,D0r),e(uE,G0r),e(Fe,O0r),e(Fe,bE),e(bE,d2e),e(d2e,V0r),e(bE,X0r),e(bE,XW),e(XW,z0r),e(bE,Q0r),e(Fe,W0r),e(Fe,FE),e(FE,c2e),e(c2e,H0r),e(FE,U0r),e(FE,zW),e(zW,J0r),e(FE,Y0r),e(Fe,K0r),e(Fe,vE),e(vE,f2e),e(f2e,Z0r),e(vE,eyr),e(vE,QW),e(QW,oyr),e(vE,ryr),e(Fe,tyr),e(Fe,TE),e(TE,m2e),e(m2e,ayr),e(TE,nyr),e(TE,WW),e(WW,syr),e(TE,lyr),e(Fe,iyr),e(Fe,ME),e(ME,g2e),e(g2e,dyr),e(ME,cyr),e(ME,HW),e(HW,fyr),e(ME,myr),e(Fe,gyr),e(Fe,EE),e(EE,h2e),e(h2e,hyr),e(EE,pyr),e(EE,UW),e(UW,_yr),e(EE,uyr),e(Fe,byr),e(Fe,CE),e(CE,p2e),e(p2e,Fyr),e(CE,vyr),e(CE,JW),e(JW,Tyr),e(CE,Myr),e(So,Eyr),e(So,_2e),e(_2e,Cyr),e(So,wyr),g(b8,So,null),b(c,_Pe,u),b(c,ff,u),e(ff,wE),e(wE,u2e),g(F8,u2e,null),e(ff,Ayr),e(ff,b2e),e(b2e,yyr),b(c,uPe,u),b(c,Ir,u),g(v8,Ir,null),e(Ir,Lyr),e(Ir,mf),e(mf,xyr),e(mf,YW),e(YW,kyr),e(mf,Syr),e(mf,KW),e(KW,Ryr),e(mf,Byr),e(Ir,Pyr),e(Ir,T8),e(T8,$yr),e(T8,F2e),e(F2e,Iyr),e(T8,qyr),e(Ir,Nyr),e(Ir,kt),g(M8,kt,null),e(kt,jyr),e(kt,v2e),e(v2e,Dyr),e(kt,Gyr),e(kt,gf),e(gf,Oyr),e(gf,T2e),e(T2e,Vyr),e(gf,Xyr),e(gf,ZW),e(ZW,zyr),e(gf,Qyr),e(kt,Wyr),e(kt,M2e),e(M2e,Hyr),e(kt,Uyr),g(E8,kt,null),e(Ir,Jyr),e(Ir,Ro),g(C8,Ro,null),e(Ro,Yyr),e(Ro,E2e),e(E2e,Kyr),e(Ro,Zyr),e(Ro,Bn),e(Bn,eLr),e(Bn,C2e),e(C2e,oLr),e(Bn,rLr),e(Bn,w2e),e(w2e,tLr),e(Bn,aLr),e(Bn,A2e),e(A2e,nLr),e(Bn,sLr),e(Ro,lLr),e(Ro,Ce),e(Ce,AE),e(AE,y2e),e(y2e,iLr),e(AE,dLr),e(AE,eH),e(eH,cLr),e(AE,fLr),e(Ce,mLr),e(Ce,yE),e(yE,L2e),e(L2e,gLr),e(yE,hLr),e(yE,oH),e(oH,pLr),e(yE,_Lr),e(Ce,uLr),e(Ce,LE),e(LE,x2e),e(x2e,bLr),e(LE,FLr),e(LE,rH),e(rH,vLr),e(LE,TLr),e(Ce,MLr),e(Ce,xE),e(xE,k2e),e(k2e,ELr),e(xE,CLr),e(xE,tH),e(tH,wLr),e(xE,ALr),e(Ce,yLr),e(Ce,kE),e(kE,S2e),e(S2e,LLr),e(kE,xLr),e(kE,aH),e(aH,kLr),e(kE,SLr),e(Ce,RLr),e(Ce,SE),e(SE,R2e),e(R2e,BLr),e(SE,PLr),e(SE,nH),e(nH,$Lr),e(SE,ILr),e(Ce,qLr),e(Ce,RE),e(RE,B2e),e(B2e,NLr),e(RE,jLr),e(RE,sH),e(sH,DLr),e(RE,GLr),e(Ce,OLr),e(Ce,BE),e(BE,P2e),e(P2e,VLr),e(BE,XLr),e(BE,lH),e(lH,zLr),e(BE,QLr),e(Ce,WLr),e(Ce,PE),e(PE,$2e),e($2e,HLr),e(PE,ULr),e(PE,iH),e(iH,JLr),e(PE,YLr),e(Ro,KLr),e(Ro,I2e),e(I2e,ZLr),e(Ro,e8r),g(w8,Ro,null),b(c,bPe,u),b(c,hf,u),e(hf,$E),e($E,q2e),g(A8,q2e,null),e(hf,o8r),e(hf,N2e),e(N2e,r8r),b(c,FPe,u),b(c,qr,u),g(y8,qr,null),e(qr,t8r),e(qr,pf),e(pf,a8r),e(pf,dH),e(dH,n8r),e(pf,s8r),e(pf,cH),e(cH,l8r),e(pf,i8r),e(qr,d8r),e(qr,L8),e(L8,c8r),e(L8,j2e),e(j2e,f8r),e(L8,m8r),e(qr,g8r),e(qr,St),g(x8,St,null),e(St,h8r),e(St,D2e),e(D2e,p8r),e(St,_8r),e(St,_f),e(_f,u8r),e(_f,G2e),e(G2e,b8r),e(_f,F8r),e(_f,fH),e(fH,v8r),e(_f,T8r),e(St,M8r),e(St,O2e),e(O2e,E8r),e(St,C8r),g(k8,St,null),e(qr,w8r),e(qr,Bo),g(S8,Bo,null),e(Bo,A8r),e(Bo,V2e),e(V2e,y8r),e(Bo,L8r),e(Bo,Pn),e(Pn,x8r),e(Pn,X2e),e(X2e,k8r),e(Pn,S8r),e(Pn,z2e),e(z2e,R8r),e(Pn,B8r),e(Pn,Q2e),e(Q2e,P8r),e(Pn,$8r),e(Bo,I8r),e(Bo,ve),e(ve,IE),e(IE,W2e),e(W2e,q8r),e(IE,N8r),e(IE,mH),e(mH,j8r),e(IE,D8r),e(ve,G8r),e(ve,qE),e(qE,H2e),e(H2e,O8r),e(qE,V8r),e(qE,gH),e(gH,X8r),e(qE,z8r),e(ve,Q8r),e(ve,NE),e(NE,U2e),e(U2e,W8r),e(NE,H8r),e(NE,hH),e(hH,U8r),e(NE,J8r),e(ve,Y8r),e(ve,jE),e(jE,J2e),e(J2e,K8r),e(jE,Z8r),e(jE,pH),e(pH,e7r),e(jE,o7r),e(ve,r7r),e(ve,DE),e(DE,Y2e),e(Y2e,t7r),e(DE,a7r),e(DE,_H),e(_H,n7r),e(DE,s7r),e(ve,l7r),e(ve,GE),e(GE,K2e),e(K2e,i7r),e(GE,d7r),e(GE,uH),e(uH,c7r),e(GE,f7r),e(ve,m7r),e(ve,OE),e(OE,Z2e),e(Z2e,g7r),e(OE,h7r),e(OE,bH),e(bH,p7r),e(OE,_7r),e(ve,u7r),e(ve,VE),e(VE,eFe),e(eFe,b7r),e(VE,F7r),e(VE,FH),e(FH,v7r),e(VE,T7r),e(ve,M7r),e(ve,XE),e(XE,oFe),e(oFe,E7r),e(XE,C7r),e(XE,vH),e(vH,w7r),e(XE,A7r),e(ve,y7r),e(ve,zE),e(zE,rFe),e(rFe,L7r),e(zE,x7r),e(zE,TH),e(TH,k7r),e(zE,S7r),e(Bo,R7r),e(Bo,tFe),e(tFe,B7r),e(Bo,P7r),g(R8,Bo,null),b(c,vPe,u),b(c,uf,u),e(uf,QE),e(QE,aFe),g(B8,aFe,null),e(uf,$7r),e(uf,nFe),e(nFe,I7r),b(c,TPe,u),b(c,Nr,u),g(P8,Nr,null),e(Nr,q7r),e(Nr,bf),e(bf,N7r),e(bf,MH),e(MH,j7r),e(bf,D7r),e(bf,EH),e(EH,G7r),e(bf,O7r),e(Nr,V7r),e(Nr,$8),e($8,X7r),e($8,sFe),e(sFe,z7r),e($8,Q7r),e(Nr,W7r),e(Nr,Rt),g(I8,Rt,null),e(Rt,H7r),e(Rt,lFe),e(lFe,U7r),e(Rt,J7r),e(Rt,Ff),e(Ff,Y7r),e(Ff,iFe),e(iFe,K7r),e(Ff,Z7r),e(Ff,CH),e(CH,e9r),e(Ff,o9r),e(Rt,r9r),e(Rt,dFe),e(dFe,t9r),e(Rt,a9r),g(q8,Rt,null),e(Nr,n9r),e(Nr,Po),g(N8,Po,null),e(Po,s9r),e(Po,cFe),e(cFe,l9r),e(Po,i9r),e(Po,$n),e($n,d9r),e($n,fFe),e(fFe,c9r),e($n,f9r),e($n,mFe),e(mFe,m9r),e($n,g9r),e($n,gFe),e(gFe,h9r),e($n,p9r),e(Po,_9r),e(Po,Te),e(Te,WE),e(WE,hFe),e(hFe,u9r),e(WE,b9r),e(WE,wH),e(wH,F9r),e(WE,v9r),e(Te,T9r),e(Te,HE),e(HE,pFe),e(pFe,M9r),e(HE,E9r),e(HE,AH),e(AH,C9r),e(HE,w9r),e(Te,A9r),e(Te,UE),e(UE,_Fe),e(_Fe,y9r),e(UE,L9r),e(UE,yH),e(yH,x9r),e(UE,k9r),e(Te,S9r),e(Te,JE),e(JE,uFe),e(uFe,R9r),e(JE,B9r),e(JE,LH),e(LH,P9r),e(JE,$9r),e(Te,I9r),e(Te,YE),e(YE,bFe),e(bFe,q9r),e(YE,N9r),e(YE,xH),e(xH,j9r),e(YE,D9r),e(Te,G9r),e(Te,KE),e(KE,FFe),e(FFe,O9r),e(KE,V9r),e(KE,kH),e(kH,X9r),e(KE,z9r),e(Te,Q9r),e(Te,ZE),e(ZE,vFe),e(vFe,W9r),e(ZE,H9r),e(ZE,SH),e(SH,U9r),e(ZE,J9r),e(Te,Y9r),e(Te,e3),e(e3,TFe),e(TFe,K9r),e(e3,Z9r),e(e3,RH),e(RH,exr),e(e3,oxr),e(Te,rxr),e(Te,o3),e(o3,MFe),e(MFe,txr),e(o3,axr),e(o3,BH),e(BH,nxr),e(o3,sxr),e(Te,lxr),e(Te,r3),e(r3,EFe),e(EFe,ixr),e(r3,dxr),e(r3,PH),e(PH,cxr),e(r3,fxr),e(Po,mxr),e(Po,CFe),e(CFe,gxr),e(Po,hxr),g(j8,Po,null),b(c,MPe,u),b(c,vf,u),e(vf,t3),e(t3,wFe),g(D8,wFe,null),e(vf,pxr),e(vf,AFe),e(AFe,_xr),b(c,EPe,u),b(c,jr,u),g(G8,jr,null),e(jr,uxr),e(jr,Tf),e(Tf,bxr),e(Tf,$H),e($H,Fxr),e(Tf,vxr),e(Tf,IH),e(IH,Txr),e(Tf,Mxr),e(jr,Exr),e(jr,O8),e(O8,Cxr),e(O8,yFe),e(yFe,wxr),e(O8,Axr),e(jr,yxr),e(jr,Bt),g(V8,Bt,null),e(Bt,Lxr),e(Bt,LFe),e(LFe,xxr),e(Bt,kxr),e(Bt,Mf),e(Mf,Sxr),e(Mf,xFe),e(xFe,Rxr),e(Mf,Bxr),e(Mf,qH),e(qH,Pxr),e(Mf,$xr),e(Bt,Ixr),e(Bt,kFe),e(kFe,qxr),e(Bt,Nxr),g(X8,Bt,null),e(jr,jxr),e(jr,$o),g(z8,$o,null),e($o,Dxr),e($o,SFe),e(SFe,Gxr),e($o,Oxr),e($o,In),e(In,Vxr),e(In,RFe),e(RFe,Xxr),e(In,zxr),e(In,BFe),e(BFe,Qxr),e(In,Wxr),e(In,PFe),e(PFe,Hxr),e(In,Uxr),e($o,Jxr),e($o,Be),e(Be,a3),e(a3,$Fe),e($Fe,Yxr),e(a3,Kxr),e(a3,NH),e(NH,Zxr),e(a3,ekr),e(Be,okr),e(Be,n3),e(n3,IFe),e(IFe,rkr),e(n3,tkr),e(n3,jH),e(jH,akr),e(n3,nkr),e(Be,skr),e(Be,s3),e(s3,qFe),e(qFe,lkr),e(s3,ikr),e(s3,DH),e(DH,dkr),e(s3,ckr),e(Be,fkr),e(Be,l3),e(l3,NFe),e(NFe,mkr),e(l3,gkr),e(l3,GH),e(GH,hkr),e(l3,pkr),e(Be,_kr),e(Be,i3),e(i3,jFe),e(jFe,ukr),e(i3,bkr),e(i3,OH),e(OH,Fkr),e(i3,vkr),e(Be,Tkr),e(Be,d3),e(d3,DFe),e(DFe,Mkr),e(d3,Ekr),e(d3,VH),e(VH,Ckr),e(d3,wkr),e(Be,Akr),e(Be,c3),e(c3,GFe),e(GFe,ykr),e(c3,Lkr),e(c3,XH),e(XH,xkr),e(c3,kkr),e(Be,Skr),e(Be,f3),e(f3,OFe),e(OFe,Rkr),e(f3,Bkr),e(f3,zH),e(zH,Pkr),e(f3,$kr),e($o,Ikr),e($o,VFe),e(VFe,qkr),e($o,Nkr),g(Q8,$o,null),b(c,CPe,u),b(c,Ef,u),e(Ef,m3),e(m3,XFe),g(W8,XFe,null),e(Ef,jkr),e(Ef,zFe),e(zFe,Dkr),b(c,wPe,u),b(c,Dr,u),g(H8,Dr,null),e(Dr,Gkr),e(Dr,Cf),e(Cf,Okr),e(Cf,QH),e(QH,Vkr),e(Cf,Xkr),e(Cf,WH),e(WH,zkr),e(Cf,Qkr),e(Dr,Wkr),e(Dr,U8),e(U8,Hkr),e(U8,QFe),e(QFe,Ukr),e(U8,Jkr),e(Dr,Ykr),e(Dr,Pt),g(J8,Pt,null),e(Pt,Kkr),e(Pt,WFe),e(WFe,Zkr),e(Pt,eSr),e(Pt,wf),e(wf,oSr),e(wf,HFe),e(HFe,rSr),e(wf,tSr),e(wf,HH),e(HH,aSr),e(wf,nSr),e(Pt,sSr),e(Pt,UFe),e(UFe,lSr),e(Pt,iSr),g(Y8,Pt,null),e(Dr,dSr),e(Dr,Io),g(K8,Io,null),e(Io,cSr),e(Io,JFe),e(JFe,fSr),e(Io,mSr),e(Io,qn),e(qn,gSr),e(qn,YFe),e(YFe,hSr),e(qn,pSr),e(qn,KFe),e(KFe,_Sr),e(qn,uSr),e(qn,ZFe),e(ZFe,bSr),e(qn,FSr),e(Io,vSr),e(Io,Pe),e(Pe,g3),e(g3,eve),e(eve,TSr),e(g3,MSr),e(g3,UH),e(UH,ESr),e(g3,CSr),e(Pe,wSr),e(Pe,h3),e(h3,ove),e(ove,ASr),e(h3,ySr),e(h3,JH),e(JH,LSr),e(h3,xSr),e(Pe,kSr),e(Pe,p3),e(p3,rve),e(rve,SSr),e(p3,RSr),e(p3,YH),e(YH,BSr),e(p3,PSr),e(Pe,$Sr),e(Pe,_3),e(_3,tve),e(tve,ISr),e(_3,qSr),e(_3,KH),e(KH,NSr),e(_3,jSr),e(Pe,DSr),e(Pe,u3),e(u3,ave),e(ave,GSr),e(u3,OSr),e(u3,ZH),e(ZH,VSr),e(u3,XSr),e(Pe,zSr),e(Pe,b3),e(b3,nve),e(nve,QSr),e(b3,WSr),e(b3,eU),e(eU,HSr),e(b3,USr),e(Pe,JSr),e(Pe,F3),e(F3,sve),e(sve,YSr),e(F3,KSr),e(F3,oU),e(oU,ZSr),e(F3,eRr),e(Pe,oRr),e(Pe,v3),e(v3,lve),e(lve,rRr),e(v3,tRr),e(v3,rU),e(rU,aRr),e(v3,nRr),e(Io,sRr),e(Io,ive),e(ive,lRr),e(Io,iRr),g(Z8,Io,null),b(c,APe,u),b(c,Af,u),e(Af,T3),e(T3,dve),g(e7,dve,null),e(Af,dRr),e(Af,cve),e(cve,cRr),b(c,yPe,u),b(c,Gr,u),g(o7,Gr,null),e(Gr,fRr),e(Gr,yf),e(yf,mRr),e(yf,tU),e(tU,gRr),e(yf,hRr),e(yf,aU),e(aU,pRr),e(yf,_Rr),e(Gr,uRr),e(Gr,r7),e(r7,bRr),e(r7,fve),e(fve,FRr),e(r7,vRr),e(Gr,TRr),e(Gr,$t),g(t7,$t,null),e($t,MRr),e($t,mve),e(mve,ERr),e($t,CRr),e($t,Lf),e(Lf,wRr),e(Lf,gve),e(gve,ARr),e(Lf,yRr),e(Lf,nU),e(nU,LRr),e(Lf,xRr),e($t,kRr),e($t,hve),e(hve,SRr),e($t,RRr),g(a7,$t,null),e(Gr,BRr),e(Gr,qo),g(n7,qo,null),e(qo,PRr),e(qo,pve),e(pve,$Rr),e(qo,IRr),e(qo,Nn),e(Nn,qRr),e(Nn,_ve),e(_ve,NRr),e(Nn,jRr),e(Nn,uve),e(uve,DRr),e(Nn,GRr),e(Nn,bve),e(bve,ORr),e(Nn,VRr),e(qo,XRr),e(qo,Fve),e(Fve,M3),e(M3,vve),e(vve,zRr),e(M3,QRr),e(M3,sU),e(sU,WRr),e(M3,HRr),e(qo,URr),e(qo,Tve),e(Tve,JRr),e(qo,YRr),g(s7,qo,null),b(c,LPe,u),b(c,xf,u),e(xf,E3),e(E3,Mve),g(l7,Mve,null),e(xf,KRr),e(xf,Eve),e(Eve,ZRr),b(c,xPe,u),b(c,Or,u),g(i7,Or,null),e(Or,eBr),e(Or,kf),e(kf,oBr),e(kf,lU),e(lU,rBr),e(kf,tBr),e(kf,iU),e(iU,aBr),e(kf,nBr),e(Or,sBr),e(Or,d7),e(d7,lBr),e(d7,Cve),e(Cve,iBr),e(d7,dBr),e(Or,cBr),e(Or,It),g(c7,It,null),e(It,fBr),e(It,wve),e(wve,mBr),e(It,gBr),e(It,Sf),e(Sf,hBr),e(Sf,Ave),e(Ave,pBr),e(Sf,_Br),e(Sf,dU),e(dU,uBr),e(Sf,bBr),e(It,FBr),e(It,yve),e(yve,vBr),e(It,TBr),g(f7,It,null),e(Or,MBr),e(Or,No),g(m7,No,null),e(No,EBr),e(No,Lve),e(Lve,CBr),e(No,wBr),e(No,jn),e(jn,ABr),e(jn,xve),e(xve,yBr),e(jn,LBr),e(jn,kve),e(kve,xBr),e(jn,kBr),e(jn,Sve),e(Sve,SBr),e(jn,RBr),e(No,BBr),e(No,g7),e(g7,C3),e(C3,Rve),e(Rve,PBr),e(C3,$Br),e(C3,cU),e(cU,IBr),e(C3,qBr),e(g7,NBr),e(g7,w3),e(w3,Bve),e(Bve,jBr),e(w3,DBr),e(w3,fU),e(fU,GBr),e(w3,OBr),e(No,VBr),e(No,Pve),e(Pve,XBr),e(No,zBr),g(h7,No,null),b(c,kPe,u),b(c,Rf,u),e(Rf,A3),e(A3,$ve),g(p7,$ve,null),e(Rf,QBr),e(Rf,Ive),e(Ive,WBr),b(c,SPe,u),b(c,Vr,u),g(_7,Vr,null),e(Vr,HBr),e(Vr,Bf),e(Bf,UBr),e(Bf,mU),e(mU,JBr),e(Bf,YBr),e(Bf,gU),e(gU,KBr),e(Bf,ZBr),e(Vr,ePr),e(Vr,u7),e(u7,oPr),e(u7,qve),e(qve,rPr),e(u7,tPr),e(Vr,aPr),e(Vr,qt),g(b7,qt,null),e(qt,nPr),e(qt,Nve),e(Nve,sPr),e(qt,lPr),e(qt,Pf),e(Pf,iPr),e(Pf,jve),e(jve,dPr),e(Pf,cPr),e(Pf,hU),e(hU,fPr),e(Pf,mPr),e(qt,gPr),e(qt,Dve),e(Dve,hPr),e(qt,pPr),g(F7,qt,null),e(Vr,_Pr),e(Vr,jo),g(v7,jo,null),e(jo,uPr),e(jo,Gve),e(Gve,bPr),e(jo,FPr),e(jo,Dn),e(Dn,vPr),e(Dn,Ove),e(Ove,TPr),e(Dn,MPr),e(Dn,Vve),e(Vve,EPr),e(Dn,CPr),e(Dn,Xve),e(Xve,wPr),e(Dn,APr),e(jo,yPr),e(jo,zve),e(zve,y3),e(y3,Qve),e(Qve,LPr),e(y3,xPr),e(y3,pU),e(pU,kPr),e(y3,SPr),e(jo,RPr),e(jo,Wve),e(Wve,BPr),e(jo,PPr),g(T7,jo,null),RPe=!0},p(c,[u]){const M7={};u&2&&(M7.$$scope={dirty:u,ctx:c}),Of.$set(M7);const Hve={};u&2&&(Hve.$$scope={dirty:u,ctx:c}),Nh.$set(Hve);const Uve={};u&2&&(Uve.$$scope={dirty:u,ctx:c}),Jh.$set(Uve)},i(c){RPe||(h(ge.$$.fragment,c),h(Da.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(Of.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(YC.$$.fragment,c),h(Nh.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(aw.$$.fragment,c),h(Jh.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(b8.$$.fragment,c),h(F8.$$.fragment,c),h(v8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(b7.$$.fragment,c),h(F7.$$.fragment,c),h(v7.$$.fragment,c),h(T7.$$.fragment,c),RPe=!0)},o(c){p(ge.$$.fragment,c),p(Da.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(Of.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(YC.$$.fragment,c),p(Nh.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(aw.$$.fragment,c),p(Jh.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(b8.$$.fragment,c),p(F8.$$.fragment,c),p(v8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(w8.$$.fragment,c),p(A8.$$.fragment,c),p(y8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(R8.$$.fragment,c),p(B8.$$.fragment,c),p(P8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(j8.$$.fragment,c),p(D8.$$.fragment,c),p(G8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(Q8.$$.fragment,c),p(W8.$$.fragment,c),p(H8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(Z8.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(b7.$$.fragment,c),p(F7.$$.fragment,c),p(v7.$$.fragment,c),p(T7.$$.fragment,c),RPe=!1},d(c){t(ee),c&&t(co),c&&t(de),_(ge),c&&t(qf),c&&t(fa),c&&t(ke),c&&t(fo),c&&t(jf),_(Da,c),c&&t(mo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(SRe),c&&t(Vi),_(SC),c&&t(RRe),c&&t(zn),c&&t(BRe),_(RC,c),c&&t(PRe),c&&t(C9),c&&t($Re),_(Of,c),c&&t(IRe),c&&t(Xi),_(BC),c&&t(qRe),c&&t(Qo),_(PC),_(qC),_(NC),_(jC),c&&t(NRe),c&&t(Qi),_(DC),c&&t(jRe),c&&t(Wo),_(GC),_(XC),_(zC),_(QC),c&&t(DRe),c&&t(Wi),_(WC),c&&t(GRe),c&&t(Ho),_(HC),_(YC),_(Nh),_(KC),_(ZC),c&&t(ORe),c&&t(Hi),_(ew),c&&t(VRe),c&&t(Uo),_(ow),_(aw),_(Jh),_(nw),_(sw),c&&t(XRe),c&&t(Ji),_(lw),c&&t(zRe),c&&t(Jo),_(iw),_(cw),_(fw),_(mw),_(gw),c&&t(QRe),c&&t(Zi),_(hw),c&&t(WRe),c&&t(Yo),_(pw),_(uw),_(bw),_(Fw),_(vw),c&&t(HRe),c&&t(rd),_(Tw),c&&t(URe),c&&t(Ko),_(Mw),_(Cw),_(ww),_(Aw),_(yw),c&&t(JRe),c&&t(nd),_(Lw),c&&t(YRe),c&&t(Zo),_(xw),_(Sw),_(Rw),_(Bw),_(Pw),c&&t(KRe),c&&t(id),_($w),c&&t(ZRe),c&&t(er),_(Iw),_(Nw),_(jw),_(Dw),_(Gw),c&&t(eBe),c&&t(fd),_(Ow),c&&t(oBe),c&&t(or),_(Vw),_(zw),_(Qw),_(Ww),_(Hw),c&&t(rBe),c&&t(hd),_(Uw),c&&t(tBe),c&&t(rr),_(Jw),_(Kw),_(Zw),_(eA),_(oA),c&&t(aBe),c&&t(ud),_(rA),c&&t(nBe),c&&t(tr),_(tA),_(nA),_(sA),_(lA),_(iA),c&&t(sBe),c&&t(vd),_(dA),c&&t(lBe),c&&t(ar),_(cA),_(mA),_(gA),_(hA),_(pA),c&&t(iBe),c&&t(Ed),_(_A),c&&t(dBe),c&&t(nr),_(uA),_(FA),_(vA),_(TA),_(MA),c&&t(cBe),c&&t(Ad),_(EA),c&&t(fBe),c&&t(sr),_(CA),_(AA),_(yA),_(LA),_(xA),c&&t(mBe),c&&t(xd),_(kA),c&&t(gBe),c&&t(lr),_(SA),_(BA),_(PA),_($A),_(IA),c&&t(hBe),c&&t(Rd),_(qA),c&&t(pBe),c&&t(ir),_(NA),_(DA),_(GA),_(OA),_(VA),c&&t(_Be),c&&t($d),_(XA),c&&t(uBe),c&&t(dr),_(zA),_(WA),_(HA),_(UA),_(JA),c&&t(bBe),c&&t(Nd),_(YA),c&&t(FBe),c&&t(cr),_(KA),_(e0),_(o0),_(r0),_(t0),c&&t(vBe),c&&t(Gd),_(a0),c&&t(TBe),c&&t(fr),_(n0),_(l0),_(i0),_(d0),_(c0),c&&t(MBe),c&&t(Xd),_(f0),c&&t(EBe),c&&t(mr),_(m0),_(h0),_(p0),_(_0),_(b0),c&&t(CBe),c&&t(Wd),_(F0),c&&t(wBe),c&&t(gr),_(v0),_(M0),_(E0),_(C0),_(w0),c&&t(ABe),c&&t(Jd),_(A0),c&&t(yBe),c&&t(hr),_(y0),_(x0),_(k0),_(S0),_(R0),c&&t(LBe),c&&t(ec),_(B0),c&&t(xBe),c&&t(pr),_(P0),_(I0),_(q0),_(N0),_(j0),c&&t(kBe),c&&t(tc),_(D0),c&&t(SBe),c&&t(_r),_(G0),_(V0),_(X0),_(z0),_(Q0),c&&t(RBe),c&&t(sc),_(W0),c&&t(BBe),c&&t(ur),_(H0),_(J0),_(Y0),_(K0),_(Z0),c&&t(PBe),c&&t(cc),_(ey),c&&t($Be),c&&t(br),_(oy),_(ty),_(ay),_(ny),_(sy),c&&t(IBe),c&&t(gc),_(ly),c&&t(qBe),c&&t(Fr),_(iy),_(cy),_(fy),_(my),_(gy),c&&t(NBe),c&&t(_c),_(hy),c&&t(jBe),c&&t(vr),_(py),_(uy),_(by),_(Fy),_(vy),c&&t(DBe),c&&t(Fc),_(Ty),c&&t(GBe),c&&t(Tr),_(My),_(Cy),_(wy),_(Ay),_(yy),c&&t(OBe),c&&t(Mc),_(Ly),c&&t(VBe),c&&t(Mr),_(xy),_(Sy),_(Ry),_(By),_($y),c&&t(XBe),c&&t(wc),_(Iy),c&&t(zBe),c&&t(Er),_(qy),_(jy),_(Dy),_(Gy),_(Oy),c&&t(QBe),c&&t(Lc),_(Vy),c&&t(WBe),c&&t(Cr),_(Xy),_(Qy),_(Wy),_(Hy),_(Uy),c&&t(HBe),c&&t(Sc),_(Jy),c&&t(UBe),c&&t(wr),_(Yy),_(Zy),_(eL),_(oL),_(rL),c&&t(JBe),c&&t(Pc),_(tL),c&&t(YBe),c&&t(Ar),_(aL),_(sL),_(lL),_(iL),_(dL),c&&t(KBe),c&&t(qc),_(cL),c&&t(ZBe),c&&t(yr),_(fL),_(gL),_(hL),_(pL),_(_L),c&&t(ePe),c&&t(Dc),_(uL),c&&t(oPe),c&&t(Lr),_(bL),_(vL),_(TL),_(ML),_(EL),c&&t(rPe),c&&t(Vc),_(CL),c&&t(tPe),c&&t(xr),_(wL),_(yL),_(LL),_(xL),_(kL),c&&t(aPe),c&&t(Qc),_(SL),c&&t(nPe),c&&t(kr),_(RL),_(PL),_($L),_(IL),_(qL),c&&t(sPe),c&&t(Uc),_(NL),c&&t(lPe),c&&t(Sr),_(jL),_(GL),_(OL),_(VL),_(XL),c&&t(iPe),c&&t(Kc),_(zL),c&&t(dPe),c&&t(Rr),_(QL),_(HL),_(UL),_(JL),_(YL),c&&t(cPe),c&&t(of),_(KL),c&&t(fPe),c&&t(Br),_(ZL),_(o8),_(r8),_(t8),_(a8),c&&t(mPe),c&&t(af),_(n8),c&&t(gPe),c&&t(Pr),_(s8),_(i8),_(d8),_(c8),_(f8),c&&t(hPe),c&&t(lf),_(m8),c&&t(pPe),c&&t($r),_(g8),_(p8),_(_8),_(u8),_(b8),c&&t(_Pe),c&&t(ff),_(F8),c&&t(uPe),c&&t(Ir),_(v8),_(M8),_(E8),_(C8),_(w8),c&&t(bPe),c&&t(hf),_(A8),c&&t(FPe),c&&t(qr),_(y8),_(x8),_(k8),_(S8),_(R8),c&&t(vPe),c&&t(uf),_(B8),c&&t(TPe),c&&t(Nr),_(P8),_(I8),_(q8),_(N8),_(j8),c&&t(MPe),c&&t(vf),_(D8),c&&t(EPe),c&&t(jr),_(G8),_(V8),_(X8),_(z8),_(Q8),c&&t(CPe),c&&t(Ef),_(W8),c&&t(wPe),c&&t(Dr),_(H8),_(J8),_(Y8),_(K8),_(Z8),c&&t(APe),c&&t(Af),_(e7),c&&t(yPe),c&&t(Gr),_(o7),_(t7),_(a7),_(n7),_(s7),c&&t(LPe),c&&t(xf),_(l7),c&&t(xPe),c&&t(Or),_(i7),_(c7),_(f7),_(m7),_(h7),c&&t(kPe),c&&t(Rf),_(p7),c&&t(SPe),c&&t(Vr),_(_7),_(b7),_(F7),_(v7),_(T7)}}}const xwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function kwt(If){return Cwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Iwt extends vwt{constructor(ee){super();Twt(this,ee,kwt,Lwt,Mwt,{})}}export{Iwt as default,xwt as metadata};
