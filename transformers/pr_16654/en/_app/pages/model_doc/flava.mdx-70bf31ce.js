import{S as tf,i as af,s as nf,e as a,k as m,w as b,t as s,M as rf,c as n,d as t,m as f,a as r,x as F,h as i,b as d,F as e,g as _,y as k,q as $,o as T,B as w,v as sf,L as bo}from"../../chunks/vendor-6b77c823.js";import{T as Bt}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-1088f2fb.js";import{C as Fo}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as L}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as vo}from"../../chunks/ExampleCodeBlock-5212b321.js";function lf(x){let c,y,u,h,v;return h=new Fo({props:{code:`from transformers import FlavaModel, FlavaForPreTraining, FlavaConfig

# Initializing a FlavaConfig with style configuration
configuration = FlavaConfig()

# Initializing a FlavaModel and FlavaForPreTraining model from the style configuration
model = FlavaModel(configuration)
model_pre = FlavaForPreTraining(configuration)

# Accessing the model configuration
configuration = model.config
configuration_pre = model_pre.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlavaModel, FlavaForPreTraining, FlavaConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a FlavaConfig with style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = FlavaConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a FlavaModel and FlavaForPreTraining model from the style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlavaModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span>model_pre = FlavaForPreTraining(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration_pre = model_pre.config`}}),{c(){c=a("p"),y=s("Example:"),u=m(),b(h.$$.fragment)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Example:"),p.forEach(t),u=f(l),F(h.$$.fragment,l)},m(l,p){_(l,c,p),e(c,y),_(l,u,p),k(h,l,p),v=!0},p:bo,i(l){v||($(h.$$.fragment,l),v=!0)},o(l){T(h.$$.fragment,l),v=!1},d(l){l&&t(c),l&&t(u),w(h,l)}}}function df(x){let c,y,u,h,v;return h=new Fo({props:{code:`from transformers import FlavaTextModel, FlavaTextConfig

# Initializing a FlavaTextModel with  style configuration
configuration = FlavaTextConfig()

# Initializing a FlavaTextConfig from the  style configuration
model = FlavaTextModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlavaTextModel, FlavaTextConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a FlavaTextModel with  style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = FlavaTextConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a FlavaTextConfig from the  style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlavaTextModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=a("p"),y=s("Example:"),u=m(),b(h.$$.fragment)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Example:"),p.forEach(t),u=f(l),F(h.$$.fragment,l)},m(l,p){_(l,c,p),e(c,y),_(l,u,p),k(h,l,p),v=!0},p:bo,i(l){v||($(h.$$.fragment,l),v=!0)},o(l){T(h.$$.fragment,l),v=!1},d(l){l&&t(c),l&&t(u),w(h,l)}}}function cf(x){let c,y,u,h,v;return h=new Fo({props:{code:`from transformers import FlavaImageModel, FlavaImageConfig

# Initializing a FlavaImageModel with  style configuration
configuration = FlavaImageConfig()

# Initializing a FlavaImageModel model from the  style configuration
model = FlavaImageModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlavaImageModel, FlavaImageConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a FlavaImageModel with  style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = FlavaImageConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a FlavaImageModel model from the  style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlavaImageModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=a("p"),y=s("Example:"),u=m(),b(h.$$.fragment)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Example:"),p.forEach(t),u=f(l),F(h.$$.fragment,l)},m(l,p){_(l,c,p),e(c,y),_(l,u,p),k(h,l,p),v=!0},p:bo,i(l){v||($(h.$$.fragment,l),v=!0)},o(l){T(h.$$.fragment,l),v=!1},d(l){l&&t(c),l&&t(u),w(h,l)}}}function mf(x){let c,y,u,h,v;return h=new Fo({props:{code:`from transformers import FlavaMultimodalModel, FlavaMultimodalConfig

# Initializing a FlavaMultimodalModel with  style configuration
configuration = FlavaMultimodalConfig()

# Initializing a FlavaMultimodalModel model from the  style configuration
model = FlavaMultimodalModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlavaMultimodalModel, FlavaMultimodalConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a FlavaMultimodalModel with  style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = FlavaMultimodalConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a FlavaMultimodalModel model from the  style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlavaMultimodalModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){c=a("p"),y=s("Example:"),u=m(),b(h.$$.fragment)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Example:"),p.forEach(t),u=f(l),F(h.$$.fragment,l)},m(l,p){_(l,c,p),e(c,y),_(l,u,p),k(h,l,p),v=!0},p:bo,i(l){v||($(h.$$.fragment,l),v=!0)},o(l){T(h.$$.fragment,l),v=!1},d(l){l&&t(c),l&&t(u),w(h,l)}}}function ff(x){let c,y,u,h,v;return{c(){c=a("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),h=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(p,"CODE",{});var z=r(u);h=i(z,"Module"),z.forEach(t),v=i(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){_(l,c,p),e(c,y),e(c,u),e(u,h),e(c,v)},d(l){l&&t(c)}}}function pf(x){let c,y,u,h,v;return{c(){c=a("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),h=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(p,"CODE",{});var z=r(u);h=i(z,"Module"),z.forEach(t),v=i(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){_(l,c,p),e(c,y),e(c,u),e(u,h),e(c,v)},d(l){l&&t(c)}}}function hf(x){let c,y,u,h,v;return h=new Fo({props:{code:`from PIL import Image
import requests
from transformers import FlavaProcessor, FlavaModel

model = FlavaModel.from_pretrained("facebook/flava-full")
processor = FlavaProcessor.from_pretrained("facebook/flava-full")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

inputs = processor(text=["a photo of a cat"], images=image, return_tensors="pt", padding=True)

outputs = model(**inputs)
logits_per_image = outputs.contrastive_logits_per_image  # this is the image-text similarity score
probs = logits_per_image.softmax(dim=1)  # we can take the softmax to get the label probabilities`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlavaProcessor, FlavaModel

<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlavaModel.from_pretrained(<span class="hljs-string">&quot;facebook/flava-full&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = FlavaProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/flava-full&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(text=[<span class="hljs-string">&quot;a photo of a cat&quot;</span>], images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>, padding=<span class="hljs-literal">True</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits_per_image = outputs.contrastive_logits_per_image  <span class="hljs-comment"># this is the image-text similarity score</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>probs = logits_per_image.softmax(dim=<span class="hljs-number">1</span>)  <span class="hljs-comment"># we can take the softmax to get the label probabilities</span>`}}),{c(){c=a("p"),y=s("Examples:"),u=m(),b(h.$$.fragment)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Examples:"),p.forEach(t),u=f(l),F(h.$$.fragment,l)},m(l,p){_(l,c,p),e(c,y),_(l,u,p),k(h,l,p),v=!0},p:bo,i(l){v||($(h.$$.fragment,l),v=!0)},o(l){T(h.$$.fragment,l),v=!1},d(l){l&&t(c),l&&t(u),w(h,l)}}}function gf(x){let c,y,u,h,v;return{c(){c=a("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),h=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(p,"CODE",{});var z=r(u);h=i(z,"Module"),z.forEach(t),v=i(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){_(l,c,p),e(c,y),e(c,u),e(u,h),e(c,v)},d(l){l&&t(c)}}}function uf(x){let c,y,u,h,v;return{c(){c=a("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),h=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(p,"CODE",{});var z=r(u);h=i(z,"Module"),z.forEach(t),v=i(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){_(l,c,p),e(c,y),e(c,u),e(u,h),e(c,v)},d(l){l&&t(c)}}}function _f(x){let c,y,u,h,v;return{c(){c=a("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),h=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(p,"CODE",{});var z=r(u);h=i(z,"Module"),z.forEach(t),v=i(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){_(l,c,p),e(c,y),e(c,u),e(u,h),e(c,v)},d(l){l&&t(c)}}}function vf(x){let c,y,u,h,v;return h=new Fo({props:{code:`from transformers import BertTokenizer, FlavaTextModel
import torch

tokenizer = BertTokenizer.from_pretrained("facebook/flava-full")
model = FlavaTextModel.from_pretrained("facebook/flava-full")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer, FlavaTextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/flava-full&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlavaTextModel.from_pretrained(<span class="hljs-string">&quot;facebook/flava-full&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){c=a("p"),y=s("Example:"),u=m(),b(h.$$.fragment)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Example:"),p.forEach(t),u=f(l),F(h.$$.fragment,l)},m(l,p){_(l,c,p),e(c,y),_(l,u,p),k(h,l,p),v=!0},p:bo,i(l){v||($(h.$$.fragment,l),v=!0)},o(l){T(h.$$.fragment,l),v=!1},d(l){l&&t(c),l&&t(u),w(h,l)}}}function bf(x){let c,y,u,h,v;return{c(){c=a("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),h=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(p,"CODE",{});var z=r(u);h=i(z,"Module"),z.forEach(t),v=i(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){_(l,c,p),e(c,y),e(c,u),e(u,h),e(c,v)},d(l){l&&t(c)}}}function Ff(x){let c,y,u,h,v;return h=new Fo({props:{code:`from transformers import FlavaFeatureExtractor, FlavaImageModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = FlavaFeatureExtractor.from_pretrained("facebook/flava-full")
model = FlavaImageModel.from_pretrained("facebook/flava-full")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> FlavaFeatureExtractor, FlavaImageModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = FlavaFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/flava-full&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlavaImageModel.from_pretrained(<span class="hljs-string">&quot;facebook/flava-full&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">197</span>, <span class="hljs-number">768</span>]`}}),{c(){c=a("p"),y=s("Example:"),u=m(),b(h.$$.fragment)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Example:"),p.forEach(t),u=f(l),F(h.$$.fragment,l)},m(l,p){_(l,c,p),e(c,y),_(l,u,p),k(h,l,p),v=!0},p:bo,i(l){v||($(h.$$.fragment,l),v=!0)},o(l){T(h.$$.fragment,l),v=!1},d(l){l&&t(c),l&&t(u),w(h,l)}}}function kf(x){let c,y,u,h,v;return{c(){c=a("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),u=a("code"),h=s("Module"),v=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Although the recipe for forward pass needs to be defined within this function, one should call the "),u=n(p,"CODE",{});var z=r(u);h=i(z,"Module"),z.forEach(t),v=i(p,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),p.forEach(t)},m(l,p){_(l,c,p),e(c,y),e(c,u),e(u,h),e(c,v)},d(l){l&&t(c)}}}function $f(x){let c,y,u,h,v;return h=new Fo({props:{code:`from transformers import BertTokenizer, FlavaMultimodalModel
import torch

tokenizer = BertTokenizer.from_pretrained("facebook/flava-full")
model = FlavaMultimodalModel.from_pretrained("facebook/flava-full")

inputs = tokenizer("Hello, my dog is cute", return_tensors="pt")
outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer, FlavaMultimodalModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/flava-full&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlavaMultimodalModel.from_pretrained(<span class="hljs-string">&quot;facebook/flava-full&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute&quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),{c(){c=a("p"),y=s("Example:"),u=m(),b(h.$$.fragment)},l(l){c=n(l,"P",{});var p=r(c);y=i(p,"Example:"),p.forEach(t),u=f(l),F(h.$$.fragment,l)},m(l,p){_(l,c,p),e(c,y),_(l,u,p),k(h,l,p),v=!0},p:bo,i(l){v||($(h.$$.fragment,l),v=!0)},o(l){T(h.$$.fragment,l),v=!1},d(l){l&&t(c),l&&t(u),w(h,l)}}}function Tf(x){let c,y,u,h,v,l,p,z,ts,Bn,re,Pe,Ba,ko,as,Sa,ns,Sn,Ie,rs,$o,ss,is,Un,St,ls,Rn,Ut,ds,Hn,Rt,Ua,cs,Gn,J,ms,To,fs,ps,wo,hs,gs,Kn,se,Ae,Ra,yo,us,Ha,_s,Zn,C,xo,vs,je,Ht,bs,Fs,Gt,ks,$s,Ts,ie,ws,Kt,ys,xs,Zt,Ms,zs,Cs,qe,Es,Le,Mo,Ps,zo,Is,Jt,As,js,qs,Oe,Co,Ls,Eo,Os,Xt,Ns,Ds,Jn,le,Ne,Ga,Po,Vs,Ka,Ws,Xn,P,Io,Bs,Ao,Ss,Qt,Us,Rs,Hs,jo,Gs,qo,Ks,Zs,Js,de,Xs,Yt,Qs,Ys,ea,ei,oi,ti,De,Qn,ce,Ve,Za,Lo,ai,Ja,ni,Yn,I,Oo,ri,No,si,oa,ii,li,di,Do,ci,Vo,mi,fi,pi,me,hi,ta,gi,ui,aa,_i,vi,bi,We,er,fe,Be,Xa,Wo,Fi,Qa,ki,or,A,Bo,$i,So,Ti,na,wi,yi,xi,Uo,Mi,Ro,zi,Ci,Ei,pe,Pi,ra,Ii,Ai,sa,ji,qi,Li,Se,tr,he,Ue,Ya,Ho,Oi,en,Ni,ar,Go,Ko,nr,ge,Re,on,Zo,Di,tn,Vi,rr,j,Jo,Wi,an,Bi,Si,O,ia,Ui,Ri,la,Hi,Gi,da,Ki,Zi,nn,Ji,Xi,ca,Qi,Yi,el,He,Xo,ol,Qo,tl,ma,al,nl,rl,Ge,Yo,sl,et,il,fa,ll,dl,sr,ue,Ke,rn,ot,cl,sn,ml,ir,R,tt,fl,ln,pl,hl,at,gl,pa,ul,_l,lr,_e,Ze,dn,nt,vl,cn,bl,dr,N,rt,Fl,mn,kl,$l,st,Tl,it,wl,yl,xl,X,lt,Ml,ve,zl,ha,Cl,El,fn,Pl,Il,Al,Je,cr,be,Xe,pn,dt,jl,hn,ql,mr,q,ct,Ll,mt,Ol,ft,Nl,Dl,Vl,D,pt,Wl,Fe,Bl,ga,Sl,Ul,gn,Rl,Hl,Gl,Qe,Kl,Ye,Zl,Q,ht,Jl,ke,Xl,ua,Ql,Yl,un,ed,od,td,eo,ad,Y,gt,nd,$e,rd,_a,sd,id,_n,ld,dd,cd,oo,fr,Te,to,vn,ut,md,bn,fd,pr,E,_t,pd,vt,hd,Fn,gd,ud,_d,bt,vd,Ft,bd,Fd,kd,va,kt,$d,ba,$t,Td,Fa,Tt,hr,we,ao,kn,wt,wd,$n,yd,gr,H,yt,xd,xt,Md,Mt,zd,Cd,Ed,V,zt,Pd,ye,Id,ka,Ad,jd,Tn,qd,Ld,Od,no,Nd,ro,ur,xe,so,wn,Ct,Dd,yn,Vd,_r,G,Et,Wd,Pt,Bd,It,Sd,Ud,Rd,W,At,Hd,Me,Gd,$a,Kd,Zd,xn,Jd,Xd,Qd,io,Yd,lo,vr,ze,co,Mn,jt,ec,zn,oc,br,K,qt,tc,Lt,ac,Ot,nc,rc,sc,B,Nt,ic,Ce,lc,Ta,dc,cc,Cn,mc,fc,pc,mo,hc,fo,Fr;return l=new L({}),ko=new L({}),yo=new L({}),xo=new M({props:{name:"class transformers.FlavaConfig",anchor:"transformers.FlavaConfig",parameters:[{name:"image_config_dict",val:": typing.Dict[str, typing.Any] = None"},{name:"text_config_dict",val:": typing.Dict[str, typing.Any] = None"},{name:"multimodal_config_dict",val:": typing.Dict[str, typing.Any] = None"},{name:"image_codebook_config_dict",val:": typing.Dict[str, typing.Any] = None"},{name:"hidden_size",val:": int = 768"},{name:"layer_norm_eps",val:": float = 1e-12"},{name:"projection_dim",val:": int = 768"},{name:"init_codebook",val:": bool = True"},{name:"logit_scale_init_value",val:": float = 2.6592"},{name:"initializer_range",val:": float = 0.02"},{name:"ce_ignore_index",val:": int = -100"},{name:"mim_weight",val:": float = 1.0"},{name:"mlm_weight",val:": float = 1.0"},{name:"global_contrastive_weight",val:": float = 1.0"},{name:"itm_weight",val:": float = 1.0"},{name:"mmm_image_weight",val:": float = 1.0"},{name:"mmm_text_weight",val:": float = 1.0"},{name:"global_backprop_contrastive",val:": bool = True"},{name:"skip_unmasked_multimodal_encoder",val:": bool = True"},{name:"return_loss",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlavaConfig.text_config_dict",description:`<strong>text_config_dict</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextConfig">FlavaTextConfig</a>.`,name:"text_config_dict"},{anchor:"transformers.FlavaConfig.image_config_dict",description:`<strong>image_config_dict</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageConfig">FlavaImageConfig</a>.`,name:"image_config_dict"},{anchor:"transformers.FlavaConfig.multimodal_config_dict",description:`<strong>multimodal_config_dict</strong> (<code>dict</code>, <em>optional</em>) &#x2014;
Dictionary of configuration options used to initialize <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaMultimodalConfig">FlavaMultimodalConfig</a>.`,name:"multimodal_config_dict"},{anchor:"transformers.FlavaConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.FlavaConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.FlavaConfig.projection_dim",description:`<strong>projection_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimentionality of text and image projection layers.`,name:"projection_dim"},{anchor:"transformers.FlavaConfig.logit_scale_init_value",description:`<strong>logit_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 2.6592) &#x2014;
The inital value of the <em>logit_scale</em> paramter. Default is used as per the original FLAVA/CLIP
implementation.`,name:"logit_scale_init_value"},{anchor:"transformers.FlavaConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.FlavaConfig.ce_ignore_index",description:`<strong>ce_ignore_index</strong> (<code>int</code>, <em>optional</em>, defaults to -100) &#x2014;
Cross entropy index to ignore.`,name:"ce_ignore_index"},{anchor:"transformers.FlavaConfig.mim_weight",description:`<strong>mim_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Weight to be assigned to MIM (Masked Image Modeling) unimodal loss`,name:"mim_weight"},{anchor:"transformers.FlavaConfig.mlm_weight",description:`<strong>mlm_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Weight to be assigned to MLM (Masked Language Modeling) unimodal loss`,name:"mlm_weight"},{anchor:"transformers.FlavaConfig.global_contrastive_weight",description:`<strong>global_contrastive_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Weight to be assigned to global contrastive cross-alignment loss.`,name:"global_contrastive_weight"},{anchor:"transformers.FlavaConfig.itm_weight",description:`<strong>itm_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Weight to be assigned to image-text matching multimodal loss.`,name:"itm_weight"},{anchor:"transformers.FlavaConfig.mmm_image_weight",description:`<strong>mmm_image_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Weight to be assigned to MMM loss&#x2019;s image part.`,name:"mmm_image_weight"},{anchor:"transformers.FlavaConfig.mmm_text_weight",description:`<strong>mmm_text_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Weight to be assigned to MMM loss&#x2019;s text part.`,name:"mmm_text_weight"},{anchor:"transformers.FlavaConfig.global_backprop_contrastive",description:`<strong>global_backprop_contrastive</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use global backpropgation through all workers in contrastive loss.`,name:"global_backprop_contrastive"},{anchor:"transformers.FlavaConfig.skip_unmasked_multimodal_encoder",description:`<strong>skip_unmasked_multimodal_encoder</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip running unmasked multimodal encoder whose outputs are not used by FLAVA losses.`,name:"skip_unmasked_multimodal_encoder"},{anchor:"transformers.FlavaConfig.return_loss",description:`<strong>return_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to return loss or not`,name:"return_loss"},{anchor:"transformers.FlavaConfig.kwargs",description:`<strong>kwargs</strong> (<em>optional</em>) &#x2014;
Dictionary of keyword arguments.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/configuration_flava.py#L463"}}),qe=new vo({props:{anchor:"transformers.FlavaConfig.example",$$slots:{default:[lf]},$$scope:{ctx:x}}}),Mo=new M({props:{name:"from_configs",anchor:"transformers.FlavaConfig.from_configs",parameters:[{name:"image_config",val:": FlavaImageConfig"},{name:"text_config",val:": FlavaTextConfig"},{name:"multimodal_config",val:": FlavaMultimodalConfig"},{name:"image_codebook_config",val:": FlavaImageCodebookConfig"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/configuration_flava.py#L607",returnDescription:`
<p>An instance of a configuration object</p>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig"
>FlavaConfig</a></p>
`}}),Co=new M({props:{name:"to_dict",anchor:"transformers.FlavaConfig.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/configuration_flava.py#L632",returnDescription:`
<p>Dictionary of all the attributes that make up this configuration instance,</p>
`,returnType:`
<p><code>Dict[str, any]</code></p>
`}}),Po=new L({}),Io=new M({props:{name:"class transformers.FlavaTextConfig",anchor:"transformers.FlavaTextConfig",parameters:[{name:"vocab_size",val:": int = 30522"},{name:"type_vocab_size",val:": int = 2"},{name:"max_position_embeddings",val:": int = 512"},{name:"position_embedding_type",val:": str = 'absolute'"},{name:"hidden_size",val:": int = 768"},{name:"num_hidden_layers",val:": int = 12"},{name:"num_attention_heads",val:": int = 12"},{name:"intermediate_size",val:": int = 3072"},{name:"hidden_act",val:": str = 'gelu'"},{name:"hidden_dropout_prob",val:": float = 0.0"},{name:"attention_probs_dropout_prob",val:": float = 0.0"},{name:"initializer_range",val:": float = 0.02"},{name:"layer_norm_eps",val:": float = 1e-12"},{name:"pad_token_id",val:": int = 0"},{name:"qkv_bias",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlavaTextConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 30522) &#x2014;
Vocabulary size of the BERT model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel">FlavaTextModel</a>.`,name:"vocab_size"},{anchor:"transformers.FlavaTextConfig.type_vocab_size",description:`<strong>type_vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The vocabulary size of the <code>token_type_ids</code> passed when calling <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel">FlavaTextModel</a>. Note that even though
text encoder allows <code>token_type_ids</code>&#x2019;s value as 2, for text-only pretraining and fine-tuning, only 1 is
used similar to RoBERTa.`,name:"type_vocab_size"},{anchor:"transformers.FlavaTextConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
The maximum sequence length that this model might ever be used with. Typically set this to something large
just in case (e.g., 512 or 1024 or 2048). For VL, max_length passed to model is 77.`,name:"max_position_embeddings"},{anchor:"transformers.FlavaTextConfig.position_embedding_type",description:`<strong>position_embedding_type</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;absolute&quot;</code>) &#x2014;
Type of position embedding. Choose one of <code>&quot;absolute&quot;</code>, <code>&quot;relative_key&quot;</code>, <code>&quot;relative_key_query&quot;</code>. For
positional embeddings use <code>&quot;absolute&quot;</code>. For more information on <code>&quot;relative_key&quot;</code>, please refer to
<a href="https://arxiv.org/abs/1803.02155" rel="nofollow">Self-Attention with Relative Position Representations (Shaw et al.)</a>.
For more information on <code>&quot;relative_key_query&quot;</code>, please refer to <em>Method 4</em> in <a href="https://arxiv.org/abs/2009.13658" rel="nofollow">Improve Transformer Models
with Better Relative Position Embeddings (Huang et al.)</a>.`,name:"position_embedding_type"},{anchor:"transformers.FlavaTextConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.FlavaTextConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.FlavaTextConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.FlavaTextConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.FlavaTextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.FlavaTextConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.FlavaTextConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.FlavaTextConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.FlavaTextConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.FlavaTextConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.FlavaTextConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.FlavaTextConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.FlavaTextConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/configuration_flava.py#L150"}}),De=new vo({props:{anchor:"transformers.FlavaTextConfig.example",$$slots:{default:[df]},$$scope:{ctx:x}}}),Lo=new L({}),Oo=new M({props:{name:"class transformers.FlavaImageConfig",anchor:"transformers.FlavaImageConfig",parameters:[{name:"hidden_size",val:": int = 768"},{name:"num_hidden_layers",val:": int = 12"},{name:"num_attention_heads",val:": int = 12"},{name:"intermediate_size",val:": int = 3072"},{name:"hidden_act",val:": int = 'gelu'"},{name:"hidden_dropout_prob",val:": float = 0.0"},{name:"attention_probs_dropout_prob",val:": float = 0.0"},{name:"initializer_range",val:": float = 0.02"},{name:"layer_norm_eps",val:": float = 1e-12"},{name:"image_size",val:": int = 224"},{name:"patch_size",val:": int = 16"},{name:"num_channels",val:": int = 3"},{name:"qkv_bias",val:": bool = True"},{name:"mask_token",val:": bool = True"},{name:"vocab_size",val:": int = 8192"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlavaImageConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.FlavaImageConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.FlavaImageConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.FlavaImageConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.FlavaImageConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.FlavaImageConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.FlavaImageConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.FlavaImageConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.FlavaImageConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.FlavaImageConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.FlavaImageConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.FlavaImageConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.FlavaImageConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.FlavaImageConfig.mask_token",description:`<strong>mask_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use a mask token or not. Used in MIM (Masked Image Modeling) loss for FLAVA.`,name:"mask_token"},{anchor:"transformers.FlavaImageConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8192) &#x2014;
Vocabulary size of the <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageCodebook">FlavaImageCodebook</a> used in conjunction with <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel">FlavaImageModel</a> for MIM (Masked
Image Modeling) loss for FLAVA.`,name:"vocab_size"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/configuration_flava.py#L32"}}),We=new vo({props:{anchor:"transformers.FlavaImageConfig.example",$$slots:{default:[cf]},$$scope:{ctx:x}}}),Wo=new L({}),Bo=new M({props:{name:"class transformers.FlavaMultimodalConfig",anchor:"transformers.FlavaMultimodalConfig",parameters:[{name:"hidden_size",val:": int = 768"},{name:"num_hidden_layers",val:": int = 6"},{name:"num_attention_heads",val:": int = 12"},{name:"intermediate_size",val:": int = 3072"},{name:"hidden_act",val:": int = 'gelu'"},{name:"hidden_dropout_prob",val:": int = 0.0"},{name:"attention_probs_dropout_prob",val:": int = 0.0"},{name:"initializer_range",val:": float = 0.02"},{name:"layer_norm_eps",val:": float = 1e-12"},{name:"qkv_bias",val:": bool = True"},{name:"use_cls_token",val:": bool = True"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlavaMultimodalConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.FlavaMultimodalConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.FlavaMultimodalConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.FlavaMultimodalConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.FlavaMultimodalConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.FlavaMultimodalConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.FlavaMultimodalConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.FlavaMultimodalConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.FlavaMultimodalConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.FlavaMultimodalConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.FlavaMultimodalConfig.use_cls_token",description:`<strong>use_cls_token</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use an extra CLS token for multimodal settings. Usually needed by the FLAVA model.`,name:"use_cls_token"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/configuration_flava.py#L278"}}),Se=new vo({props:{anchor:"transformers.FlavaMultimodalConfig.example",$$slots:{default:[mf]},$$scope:{ctx:x}}}),Ho=new L({}),Ko=new M({props:{name:"class transformers.FlavaImageCodebookConfig",anchor:"transformers.FlavaImageCodebookConfig",parameters:[{name:"num_groups",val:": int = 4"},{name:"input_channels",val:": int = 3"},{name:"num_blocks_per_group",val:": int = 2"},{name:"hidden_size",val:": int = 256"},{name:"vocab_size",val:": int = 8192"},{name:"freeze",val:": int = True"},{name:"initializer_range",val:": float = 0.02"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/configuration_flava.py#L379"}}),Zo=new L({}),Jo=new M({props:{name:"class transformers.FlavaProcessor",anchor:"transformers.FlavaProcessor",parameters:[{name:"feature_extractor",val:""},{name:"tokenizer",val:""}],parametersDescription:[{anchor:"transformers.FlavaProcessor.feature_extractor",description:'<strong>feature_extractor</strong> (<a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaFeatureExtractor">FlavaFeatureExtractor</a>) &#x2014; The feature extractor is a required input.',name:"feature_extractor"},{anchor:"transformers.FlavaProcessor.tokenizer",description:'<strong>tokenizer</strong> (<a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast">BertTokenizerFast</a>) &#x2014; The tokenizer is a required input.',name:"tokenizer"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/processing_flava.py#L27"}}),Xo=new M({props:{name:"batch_decode",anchor:"transformers.FlavaProcessor.batch_decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/processing_flava.py#L122"}}),Yo=new M({props:{name:"decode",anchor:"transformers.FlavaProcessor.decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/processing_flava.py#L129"}}),ot=new L({}),tt=new M({props:{name:"class transformers.FlavaFeatureExtractor",anchor:"transformers.FlavaFeatureExtractor",parameters:[{name:"do_resize",val:": bool = True"},{name:"size",val:": typing.Union[int, typing.Tuple[int, int]] = 224"},{name:"resample",val:": int = <Resampling.BICUBIC: 3>"},{name:"do_center_crop",val:": bool = True"},{name:"crop_size",val:": typing.Union[int, typing.Tuple[int, int]] = 224"},{name:"do_normalize",val:": bool = True"},{name:"image_mean",val:": typing.Tuple[float, float, float] = (0.48145466, 0.4578275, 0.40821073)"},{name:"image_std",val:": typing.Tuple[float, float, float] = (0.26862954, 0.26130258, 0.27577711)"},{name:"input_size_patches",val:": int = 14"},{name:"total_mask_patches",val:": int = 75"},{name:"mask_group_min_patches",val:": int = 16"},{name:"mask_group_max_patches",val:": typing.Optional[int] = None"},{name:"mask_group_min_aspect_ratio",val:": float = 0.3"},{name:"mask_group_max_aspect_ratio",val:": typing.Optional[float] = None"},{name:"codebook_do_resize",val:": bool = True"},{name:"codebook_size",val:": bool = 112"},{name:"codebook_resample",val:": int = <Resampling.LANCZOS: 1>"},{name:"codebook_do_center_crop",val:": bool = True"},{name:"codebook_crop_size",val:": int = 112"},{name:"codebook_do_map_pixels",val:": bool = True"},{name:"codebook_do_normalize",val:": bool = True"},{name:"codebook_image_mean",val:": typing.Tuple[float, float, float] = (0.0, 0.0, 0.0)"},{name:"codebook_image_std",val:": typing.Tuple[float, float, float] = (1.0, 1.0, 1.0)"},{name:"**kwargs",val:": typing.Any"}],parametersDescription:[{anchor:"transformers.FlavaFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.FlavaFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Resize the input to the given size. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.FlavaFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect`,name:"resample"},{anchor:"transformers.FlavaFeatureExtractor.do_center_crop",description:`<strong>do_center_crop</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to crop the input at the center. If the input size is smaller than <code>crop_size</code> along any edge, the
image is padded with 0&#x2019;s and then center cropped.`,name:"do_center_crop"},{anchor:"transformers.FlavaFeatureExtractor.crop_size",description:`<strong>crop_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Desired output size when applying center-cropping. Only has an effect if <code>do_center_crop</code> is set to <code>True</code>.`,name:"crop_size"},{anchor:"transformers.FlavaFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with <code>image_mean</code> and <code>image_std</code>.`,name:"do_normalize"},{anchor:"transformers.FlavaFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>(0.485, 0.456, 0.406)</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.FlavaFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>(0.229, 0.224, 0.225)</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/feature_extraction_flava.py#L120"}}),nt=new L({}),rt=new M({props:{name:"class transformers.FlavaForPreTraining",anchor:"transformers.FlavaForPreTraining",parameters:[{name:"config",val:": FlavaConfig"},{name:"image_codebook",val:": typing.Optional[torch.nn.modules.module.Module] = None"}],parametersDescription:[{anchor:"transformers.FlavaForPreTraining.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"},{anchor:"transformers.FlavaForPreTraining.image_codebook",description:`<strong>image_codebook</strong> (<code>nn.Module</code>) &#x2014; If passed, the image codebook will be set to this. Otherwise. it will
be initialized using the image_codebook_config defined in the config first as the first parameter.`,name:"image_codebook"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1910"}}),lt=new M({props:{name:"forward",anchor:"transformers.FlavaForPreTraining.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"input_ids_masked",val:": typing.Optional[torch.LongTensor] = None"},{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"codebook_pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"bool_masked_pos",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"image_attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"skip_unmasked_multimodal_encoder",val:": bool = None"},{name:"mlm_labels",val:": typing.Optional[torch.Tensor] = None"},{name:"mim_labels",val:": typing.Optional[torch.Tensor] = None"},{name:"itm_labels",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": bool = True"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"return_loss",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.FlavaForPreTraining.forward.input_ids_masked",description:`<strong>input_ids_masked</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, text_seq_len)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. These ones are the masked version of the original task
to be used with MLM. Indices can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a> along with
<code>DataCollatorForMaskedLanguageModeling</code>. See <a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids_masked"},{anchor:"transformers.FlavaForPreTraining.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, text_seq_len)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Indices can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input
IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlavaForPreTraining.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, text_seq_len)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.
<a href="../glossary#token-type-ids">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"},{anchor:"transformers.FlavaForPreTraining.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaFeatureExtractor">FlavaFeatureExtractor</a>. See
<code>FlavaFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.FlavaForPreTraining.forward.bool_masked_pos",description:`<strong>bool_masked_pos</strong> (<code>torch.BoolTensor</code> of shape <code>(batch_size, image_num_patches)</code>) &#x2014;
Boolean masked positions. Indicates which patches are masked (1) and which aren&#x2019;t (0).`,name:"bool_masked_pos"},{anchor:"transformers.FlavaForPreTraining.forward.interpolate_pos_encoding",description:`<strong>interpolate_pos_encoding</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to interpolate the pre-trained position encodings.`,name:"interpolate_pos_encoding"},{anchor:"transformers.FlavaForPreTraining.forward.image_attention_mask",description:`<strong>image_attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, image_num_patches)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices specifically for images. Mask values selected
in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"image_attention_mask"},{anchor:"transformers.FlavaForPreTraining.forward.skip_unmasked_multimodal_encoder",description:`<strong>skip_unmasked_multimodal_encoder</strong> (<em>bool</em>, <em>optional</em>) &#x2014;
Skip any calculations for multimodal encoder for unmasked inputs. FLAVA pretraining doesn&#x2019;t need unmasked
multimodal embeddings or outputs as of now.`,name:"skip_unmasked_multimodal_encoder"},{anchor:"transformers.FlavaForPreTraining.forward.mlm_labels",description:`<strong>mlm_labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, text_seq_len)</code>, <em>optional</em>) &#x2014;
Labels for computing the left-to-right language and multimodal masked modeling loss (next word prediction).
Indices should be in <code>[-100, 0, ..., text_config.vocab_size - 1]</code> (see <code>input_ids</code> docstring). Tokens with
indices set to <code>-100</code> are ignored (masked), the loss is only computed for the tokens with labels in <code>[0, ..., text_config.vocab_size - 1]</code>.`,name:"mlm_labels"},{anchor:"transformers.FlavaForPreTraining.forward.mim_labels",description:`<strong>mim_labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, image_num_patches)</code>, <em>optional</em>) &#x2014;
Labels for computing the image and multimodal masked modeling loss. Indices should be in <code>[-100, 0, ..., image_config.vocab_size - 1]</code>. Tokens with indices set to <code>-100</code> are ignored (masked), the loss is only
computed for the tokens with labels in <code>[0, ..., image_config.vocab_size - 1]</code>. If not passed, they are
generated automatically using the image codebook assigned to the model. By default, it uses
<a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageCodebook">FlavaImageCodebook</a>. See <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageCodebook">FlavaImageCodebook</a> to understand how to generate mim_labels.`,name:"mim_labels"},{anchor:"transformers.FlavaForPreTraining.forward.itm_labels",description:`<strong>itm_labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 1)</code>, <em>optional</em>) &#x2014;
Labels for computing the image-text matching loss. 0 means the pairs don&#x2019;t match and 1 means they match.
The pairs with 0 will be skipped for calculation of MMM and global contrastive losses as well.`,name:"itm_labels"},{anchor:"transformers.FlavaForPreTraining.forward.return_loss",description:`<strong>return_loss</strong> (<code>bool</code>, <em>optional</em>, default to None) &#x2014;
Whether to return calculated loss or not.`,name:"return_loss"},{anchor:"transformers.FlavaForPreTraining.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, text_seq_len)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.FlavaForPreTraining.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FlavaForPreTraining.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FlavaForPreTraining.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FlavaForPreTraining.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16654/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.</p>
<p>Examples &#x2014;`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1946",returnDescription:`
<p>A <code>transformers.models.flava.modeling_flava.FlavaForPreTrainingOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.flava.configuration_flava.FlavaConfig'&gt;</code>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code>, <em>optional</em>, returned when <code>return_loss</code> is True) \u2014 Total loss calculated for this model.</p>
</li>
<li>
<p><strong>loss_info</strong> (<code>FlavaLosses</code>) \u2014 Detailed info for FLAVA Pretraining losses. Check <code>FlavaLosses</code> class description for the information on
the keys.</p>
</li>
<li>
<p><strong>image_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>pixel_values</code> are present) \u2014 The image embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel"
>FlavaImageModel</a>.</p>
</li>
<li>
<p><strong>image_output</strong> (<code>BaseModelOutputWithPooling</code>, <em>optional</em>, returned when <code>pixel_values</code> are present) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel"
>FlavaImageModel</a>.</p>
</li>
<li>
<p><strong>text_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>input_ids</code> are present) \u2014 The text embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</p>
</li>
<li>
<p><strong>text_output</strong> (<code>BaseModelOutputWithPooling</code>, <em>optional</em>, returned when <code>input_ids</code> are present) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</p>
</li>
<li>
<p><strong>multimodal_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>input_ids</code> and <code>pixel_values</code> are present and <code>skip_unmasked_multimodal_encoder</code> is <code>None</code> or <code>False</code>) \u2014 The multimodal embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</p>
</li>
<li>
<p><strong>multimodal_output</strong> (<code>BaseModelOutputWithPooling</code>, returned when <code>input_ids</code> and <code>pixel_values</code> are present and <code>skip_unmasked_multimodal_encoder</code> is <code>None</code> or <code>False</code>) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaMultimodalModel"
>FlavaMultimodalModel</a>.</p>
</li>
<li>
<p><strong>image_masked_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>pixel_values</code> are present) \u2014 The image embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel"
>FlavaImageModel</a>. Uses <code>bool_masked_pos</code>
to create masked images.</p>
</li>
<li>
<p><strong>image_masked_output</strong> (<code>BaseModelOutputWithPooling</code>, <em>optional</em>, returned when <code>pixel_values</code> are present) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel"
>FlavaImageModel</a>. Uses <code>bool_masked_pos</code> to create masked images.</p>
</li>
<li>
<p><strong>text_masked_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>input_ids_masked</code> are present) \u2014 The text embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</p>
</li>
<li>
<p><strong>text_masked_output</strong> (<code>BaseModelOutputWithPooling</code>, <em>optional</em>, returned when <code>input_ids_masked</code> are present) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</p>
</li>
<li>
<p><strong>multimodal_masked_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>input_ids</code> and <code>pixel_values</code> are present) \u2014 The multimodal embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</p>
</li>
<li>
<p><strong>multimodal_masked_output</strong> (<code>BaseModelOutputWithPooling</code>, returned when <code>input_ids_masked</code> and <code>pixel_values</code> are present) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaMultimodalModel"
>FlavaMultimodalModel</a>.</p>
</li>
<li>
<p><strong>mim_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_image_patches, image_vocab_size)</code> or of shape <code>(total_masked_patches, image_vocab_size)</code> , <em>optional</em>, returned when <code>pixel_values</code> are present and <code>input_ids_masked</code> are not) \u2014 The logits for MIM unimodal loss. Uses <code>book_masked_pos</code> to get masked patches. The flattened output is
returned when <code>bool_masked_pos</code> has some of the patches masked.</p>
</li>
<li>
<p><strong>mlm_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, text_seq_length, text_vocab_size)</code> or of shape <code>(total_masked_seq_length, text_vocab_size)</code>, <em>optional</em>, returned when <code>input_ids_masked</code> are present and <code>pixel_values</code> are not) \u2014 The logits for MLM unimodal loss. The flattened output is returned when <code>input_ids_masked</code> has some of
the tokens masked.</p>
</li>
<li>
<p><strong>itm_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2)</code>, <em>optional</em>, returned when <code>input_ids_masked</code> and <code>pixel_values</code> are present) \u2014 The logits for ITM loss. Note that ITM loss is calculated on masked pairs in FLAVA.</p>
</li>
<li>
<p><strong>mmm_image_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_image_patches, image_vocab_size)</code> or of shape<code>(total_masked_patches, image_vocab_size)</code>, <em>optional</em>, returned when <code>pixel_values</code> and <code>input_ids_masked</code> are present) \u2014 The logits for MMM image multimodal loss. Uses <code>book_masked_pos</code> to get masked patches. The flattened
output is returned when <code>bool_masked_pos</code> has some of the patches masked.</p>
</li>
<li>
<p><strong>mmm_text_logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, text_seq_length, text_vocab_size)</code> or of shape <code>(</code>(total_masked_seq_length, text_vocab_size)<code>), *optional*, returned when </code>pixel_values<code>and</code>input_ids_masked<code>are present) -- The logits for MMM text multimodal loss. The flattened output is returned when</code>input_ids_masked\` has
some of the tokens masked.</p>
</li>
<li>
<p><strong>contrastive_logits_per_image</strong> (<code>torch.FloatTensor</code> of shape <code>(image_batch_size, text_batch_size)</code>) \u2014 The scaled dot product scores between <code>image_embeddings</code> and <code>text_embeddings</code> but passed through FLAVA\u2019s
<code>image_projection</code> and <code>text_projection</code> layers respectively. This represents the image-text similarity
scores. This is calculated on unmasked images and texts.</p>
</li>
<li>
<p><strong>contrastive_logits_per_text</strong> (<code>torch.FloatTensor</code> of shape <code>(text_batch_size, image_batch_size)</code>) \u2014 The scaled dot product scores between <code>text_embeddings</code> and <code>image_embeddings</code> but passed through FLAVA\u2019s
<code>text_projection</code> and <code>image_projection</code> layers respectively. This is calculated on unmasked images and
texts.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.models.flava.modeling_flava.FlavaForPreTrainingOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Je=new Bt({props:{$$slots:{default:[ff]},$$scope:{ctx:x}}}),dt=new L({}),ct=new M({props:{name:"class transformers.FlavaModel",anchor:"transformers.FlavaModel",parameters:[{name:"config",val:": FlavaConfig"}],parametersDescription:[{anchor:"transformers.FlavaModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1380"}}),pt=new M({props:{name:"forward",anchor:"transformers.FlavaModel.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"pixel_values",val:": typing.Optional[torch.FloatTensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"bool_masked_pos",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.LongTensor] = None"},{name:"image_attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"skip_multimodal_encoder",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": bool = True"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.FlavaModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaFeatureExtractor">FlavaFeatureExtractor</a>. See
<code>FlavaFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.FlavaModel.forward.bool_masked_pos",description:`<strong>bool_masked_pos</strong> (<code>torch.BoolTensor</code> of shape <code>(batch_size, image_num_patches)</code>) &#x2014;
Boolean masked positions. Indicates which patches are masked (1) and which aren&#x2019;t (0).`,name:"bool_masked_pos"},{anchor:"transformers.FlavaModel.forward.interpolate_pos_encoding",description:`<strong>interpolate_pos_encoding</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to interpolate the pre-trained position encodings.`,name:"interpolate_pos_encoding"},{anchor:"transformers.FlavaModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, image_num_patches + text_seq_len)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Indices can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input
IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlavaModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, image_num_patches + text_seq_len)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.
<a href="../glossary#token-type-ids">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"},{anchor:"transformers.FlavaModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, image_num_patches + text_seq_len)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.FlavaModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FlavaModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FlavaModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FlavaModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16654/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.FlavaModel.forward.skip_multimodal_encoder",description:`<strong>skip_multimodal_encoder</strong> (<em>bool</em>, <em>optional</em>) &#x2014;
Skip any calculations for multimodal encoder. Useful if multimodal encoding is not going to be used.`,name:"skip_multimodal_encoder"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1522",returnDescription:`
<p>A <code>transformers.models.flava.modeling_flava.FlavaModelOutput</code> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<code>&lt;class 'transformers.models.flava.configuration_flava.FlavaConfig'&gt;</code>) and inputs.</p>
<ul>
<li><strong>image_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>pixel_values</code> are present) \u2014 The image embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel"
>FlavaImageModel</a>.</li>
<li><strong>image_output</strong> (<code>BaseModelOutputWithPooling</code>, <em>optional</em>, returned when <code>pixel_values</code> are present) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel"
>FlavaImageModel</a>.</li>
<li><strong>text_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>input_ids</code> are present) \u2014 The text embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</li>
<li><strong>text_output</strong> (<code>BaseModelOutputWithPooling</code>, <em>optional</em>, returned when <code>input_ids</code> are present) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</li>
<li><strong>multimodal_embeddings</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, output_dim)</code>, <em>optional</em>, returned when <code>input_ids</code> and <code>pixel_values</code> are present and <code>skip_multimodal_encoder</code> is <code>None</code> or <code>False</code>) \u2014 The multimodal embeddings which are basically the pooled output of <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"
>FlavaTextModel</a>.</li>
<li><strong>multimodal_output</strong> (<code>BaseModelOutputWithPooling</code>, returned when <code>input_ids</code> and <code>pixel_values</code> are present and <code>skip_multimodal_encoder</code> is <code>None</code> or <code>False</code>) \u2014 The output of the <a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaMultimodalModel"
>FlavaMultimodalModel</a>.</li>
</ul>
`,returnType:`
<p><code>transformers.models.flava.modeling_flava.FlavaModelOutput</code> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Qe=new Bt({props:{$$slots:{default:[pf]},$$scope:{ctx:x}}}),Ye=new vo({props:{anchor:"transformers.FlavaModel.forward.example",$$slots:{default:[hf]},$$scope:{ctx:x}}}),ht=new M({props:{name:"get_text_features",anchor:"transformers.FlavaModel.get_text_features",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.FlavaModel.get_text_features.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, text_seq_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Indices can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input
IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlavaModel.get_text_features.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, text_seq_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.
<a href="../glossary#token-type-ids">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"},{anchor:"transformers.FlavaModel.get_text_features.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, text_seq_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.FlavaModel.get_text_features.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FlavaModel.get_text_features.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FlavaModel.get_text_features.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FlavaModel.get_text_features.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16654/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1424"}}),eo=new Bt({props:{$$slots:{default:[gf]},$$scope:{ctx:x}}}),gt=new M({props:{name:"get_image_features",anchor:"transformers.FlavaModel.get_image_features",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"bool_masked_pos",val:": typing.Optional[torch.BoolTensor] = None"},{name:"interpolate_pos_encoding",val:": typing.Optional[bool] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.FlavaModel.get_image_features.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaFeatureExtractor">FlavaFeatureExtractor</a>. See
<code>FlavaFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.FlavaModel.get_image_features.bool_masked_pos",description:`<strong>bool_masked_pos</strong> (<code>torch.BoolTensor</code> of shape <code>(batch_size, image_num_patches)</code>) &#x2014;
Boolean masked positions. Indicates which patches are masked (1) and which aren&#x2019;t (0).`,name:"bool_masked_pos"},{anchor:"transformers.FlavaModel.get_image_features.interpolate_pos_encoding",description:`<strong>interpolate_pos_encoding</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to interpolate the pre-trained position encodings.`,name:"interpolate_pos_encoding"},{anchor:"transformers.FlavaModel.get_image_features.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, image_num_patches)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.FlavaModel.get_image_features.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FlavaModel.get_image_features.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FlavaModel.get_image_features.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FlavaModel.get_image_features.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16654/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1470"}}),oo=new Bt({props:{$$slots:{default:[uf]},$$scope:{ctx:x}}}),ut=new L({}),_t=new M({props:{name:"class transformers.FlavaImageCodebook",anchor:"transformers.FlavaImageCodebook",parameters:[{name:"config",val:": FlavaImageCodebookConfig"},{name:"**kwargs",val:": typing.Any"}],parametersDescription:[{anchor:"transformers.FlavaImageCodebook.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageCodebookConfig">FlavaImageCodebookConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1696"}}),kt=new M({props:{name:"forward",anchor:"transformers.FlavaImageCodebook.forward",parameters:[{name:"pixel_values",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1780"}}),$t=new M({props:{name:"get_codebook_indices",anchor:"transformers.FlavaImageCodebook.get_codebook_indices",parameters:[{name:"pixel_values",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1746"}}),Tt=new M({props:{name:"get_codebook_probs",anchor:"transformers.FlavaImageCodebook.get_codebook_probs",parameters:[{name:"pixel_values",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1776"}}),wt=new L({}),yt=new M({props:{name:"class transformers.FlavaTextModel",anchor:"transformers.FlavaTextModel",parameters:[{name:"config",val:": FlavaTextConfig"},{name:"add_pooling_layer",val:": bool = True"}],parametersDescription:[{anchor:"transformers.FlavaTextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextConfig">FlavaTextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1177"}}),zt=new M({props:{name:"forward",anchor:"transformers.FlavaTextModel.forward",parameters:[{name:"input_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"token_type_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"position_ids",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.FlavaTextModel.forward.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, text_seq_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary. Indices can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See
<a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details. <a href="../glossary#input-ids">What are input
IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlavaTextModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, text_seq_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.
<a href="../glossary#token-type-ids">What are token type IDs?</a></li>
</ul>`,name:"token_type_ids"},{anchor:"transformers.FlavaTextModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, text_seq_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.FlavaTextModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FlavaTextModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FlavaTextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FlavaTextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16654/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1207",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16654/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextConfig"
>FlavaTextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16654/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),no=new Bt({props:{$$slots:{default:[_f]},$$scope:{ctx:x}}}),ro=new vo({props:{anchor:"transformers.FlavaTextModel.forward.example",$$slots:{default:[vf]},$$scope:{ctx:x}}}),Ct=new L({}),Et=new M({props:{name:"class transformers.FlavaImageModel",anchor:"transformers.FlavaImageModel",parameters:[{name:"config",val:": FlavaImageConfig"},{name:"add_pooling_layer",val:": bool = True"}],parametersDescription:[{anchor:"transformers.FlavaImageModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageConfig">FlavaImageConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1078"}}),At=new M({props:{name:"forward",anchor:"transformers.FlavaImageModel.forward",parameters:[{name:"pixel_values",val:": typing.Optional[torch.Tensor] = None"},{name:"bool_masked_pos",val:": typing.Optional[torch.BoolTensor] = None"},{name:"interpolate_pos_encoding",val:": typing.Optional[bool] = None"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.FlavaImageModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaFeatureExtractor">FlavaFeatureExtractor</a>. See
<code>FlavaFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.FlavaImageModel.forward.bool_masked_pos",description:`<strong>bool_masked_pos</strong> (<code>torch.BoolTensor</code> of shape <code>(batch_size, image_num_patches)</code>) &#x2014;
Boolean masked positions. Indicates which patches are masked (1) and which aren&#x2019;t (0).`,name:"bool_masked_pos"},{anchor:"transformers.FlavaImageModel.forward.interpolate_pos_encoding",description:`<strong>interpolate_pos_encoding</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to interpolate the pre-trained position encodings.`,name:"interpolate_pos_encoding"},{anchor:"transformers.FlavaImageModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, image_num_patches)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.FlavaImageModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FlavaImageModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FlavaImageModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FlavaImageModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16654/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1110",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16654/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageConfig"
>FlavaImageConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16654/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),io=new Bt({props:{$$slots:{default:[bf]},$$scope:{ctx:x}}}),lo=new vo({props:{anchor:"transformers.FlavaImageModel.forward.example",$$slots:{default:[Ff]},$$scope:{ctx:x}}}),jt=new L({}),qt=new M({props:{name:"class transformers.FlavaMultimodalModel",anchor:"transformers.FlavaMultimodalModel",parameters:[{name:"config",val:": FlavaMultimodalConfig"},{name:"add_pooling_layer",val:" = True"}],parametersDescription:[{anchor:"transformers.FlavaMultimodalModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaMultimodalConfig">FlavaMultimodalConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1282"}}),Nt=new M({props:{name:"forward",anchor:"transformers.FlavaMultimodalModel.forward",parameters:[{name:"hidden_states",val:": Tensor"},{name:"attention_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"head_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.FlavaMultimodalModel.forward.hidden_states",description:`<strong>hidden_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, image_num_patches + text_seq_len, hidden_size)</code>) &#x2014;
The concatenated hidden states of unimodal encoders.`,name:"hidden_states"},{anchor:"transformers.FlavaMultimodalModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, image_num_patches + text_seq_len)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.
<a href="../glossary#attention-mask">What are attention masks?</a></li>
</ul>`,name:"attention_mask"},{anchor:"transformers.FlavaMultimodalModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.FlavaMultimodalModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.FlavaMultimodalModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.FlavaMultimodalModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16654/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/flava/modeling_flava.py#L1309",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16654/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaMultimodalConfig"
>FlavaMultimodalConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) after further processing
through the layers used for the auxiliary pretraining task. E.g. for BERT-family of models, this returns
the classification token after processing through a linear layer and a tanh activation function. The linear
layer weights are trained from the next sentence prediction (classification) objective during pretraining.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16654/en/main_classes/output#transformers.modeling_outputs.BaseModelOutputWithPooling"
>transformers.modeling_outputs.BaseModelOutputWithPooling</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),mo=new Bt({props:{$$slots:{default:[kf]},$$scope:{ctx:x}}}),fo=new vo({props:{anchor:"transformers.FlavaMultimodalModel.forward.example",$$slots:{default:[$f]},$$scope:{ctx:x}}}),{c(){c=a("meta"),y=m(),u=a("h1"),h=a("a"),v=a("span"),b(l.$$.fragment),p=m(),z=a("span"),ts=s("FLAVA"),Bn=m(),re=a("h2"),Pe=a("a"),Ba=a("span"),b(ko.$$.fragment),as=m(),Sa=a("span"),ns=s("Overview"),Sn=m(),Ie=a("p"),rs=s("The FLAVA model was proposed in "),$o=a("a"),ss=s("FLAVA: A Foundational Language And Vision Alignment Model"),is=s(" by Amanpreet Singh, Ronghang Hu, Vedanuj Goswami, Guillaume Couairon, Wojciech Galuba, Marcus Rohrbach, and Douwe Kiela and is accepted at CVPR 2022."),Un=m(),St=a("p"),ls=s(`The paper aims at creating a single unified foundation model which can work across vision, language
as well as vision-and-language multimodal tasks.`),Rn=m(),Ut=a("p"),ds=s("The abstract from the paper is the following:"),Hn=m(),Rt=a("p"),Ua=a("em"),cs=s(`State-of-the-art vision and vision-and-language models rely on large-scale visio-linguistic pretraining for obtaining good performance on a variety
of downstream tasks. Generally, such models are often either cross-modal (contrastive) or multi-modal
(with earlier fusion) but not both; and they often only target specific modalities or tasks. A promising
direction would be to use a single holistic universal model, as a \u201Cfoundation\u201D, that targets all modalities
at once \u2014 a true vision and language foundation model should be good at vision tasks, language tasks, and
cross- and multi-modal vision and language tasks. We introduce FLAVA as such a model and demonstrate
impressive performance on a wide range of 35 tasks spanning these target modalities.`),Gn=m(),J=a("p"),ms=s("This model was contributed by "),To=a("a"),fs=s("aps"),ps=s(". The original code can be found "),wo=a("a"),hs=s("here"),gs=s("."),Kn=m(),se=a("h2"),Ae=a("a"),Ra=a("span"),b(yo.$$.fragment),us=m(),Ha=a("span"),_s=s("FlavaConfig"),Zn=m(),C=a("div"),b(xo.$$.fragment),vs=m(),je=a("p"),Ht=a("a"),bs=s("FlavaConfig"),Fs=s(" is the configuration class to store the configuration of a "),Gt=a("a"),ks=s("FlavaModel"),$s=s(`. It is used to
instantiate FLAVA model according to the specified arguments, defining the text model, image model, image codebook
and multimodal model configs.`),Ts=m(),ie=a("p"),ws=s("Configuration objects inherit from "),Kt=a("a"),ys=s("PretrainedConfig"),xs=s(` and can be used to control the model outputs. Read the
documentation from `),Zt=a("a"),Ms=s("PretrainedConfig"),zs=s(" for more information."),Cs=m(),b(qe.$$.fragment),Es=m(),Le=a("div"),b(Mo.$$.fragment),Ps=m(),zo=a("p"),Is=s("Instantiate a "),Jt=a("a"),As=s("FlavaConfig"),js=s(` (or a derived class) from flava text model configuration, flava image model
configuration, flava multimodal model and flava codebook model configuration.`),qs=m(),Oe=a("div"),b(Co.$$.fragment),Ls=m(),Eo=a("p"),Os=s("Serializes this instance to a Python dictionary. Override the default "),Xt=a("a"),Ns=s("to_dict()"),Ds=s("."),Jn=m(),le=a("h2"),Ne=a("a"),Ga=a("span"),b(Po.$$.fragment),Vs=m(),Ka=a("span"),Ws=s("FlavaTextConfig"),Xn=m(),P=a("div"),b(Io.$$.fragment),Bs=m(),Ao=a("p"),Ss=s("This is the configuration class to store the configuration of a "),Qt=a("a"),Us=s("FlavaTextModel"),Rs=s(`. It is used to instantiate an
FLAVA model according to the specified arguments, defining the model architecture.`),Hs=m(),jo=a("p"),Gs=s(`Instantiating a configuration with the defaults will yield a similar configuration to that of the FLAVA
`),qo=a("a"),Ks=s("facebook/flava-full"),Zs=s(" architecture."),Js=m(),de=a("p"),Xs=s("Configuration objects inherit from "),Yt=a("a"),Qs=s("PretrainedConfig"),Ys=s(` and can be used to control the model outputs. Read the
documentation from `),ea=a("a"),ei=s("PretrainedConfig"),oi=s(" for more information."),ti=m(),b(De.$$.fragment),Qn=m(),ce=a("h2"),Ve=a("a"),Za=a("span"),b(Lo.$$.fragment),ai=m(),Ja=a("span"),ni=s("FlavaImageConfig"),Yn=m(),I=a("div"),b(Oo.$$.fragment),ri=m(),No=a("p"),si=s("This is the configuration class to store the configuration of a "),oa=a("a"),ii=s("FlavaImageModel"),li=s(`. It is used to instantiate an
FLAVA model according to the specified arguments, defining the model architecture.`),di=m(),Do=a("p"),ci=s(`Instantiating a configuration with the defaults will yield a similar configuration to that of the FLAVA
`),Vo=a("a"),mi=s("facebook/flava-full"),fi=s(" architecture."),pi=m(),me=a("p"),hi=s("Configuration objects inherit from "),ta=a("a"),gi=s("PretrainedConfig"),ui=s(` and can be used to control the model outputs. Read the
documentation from `),aa=a("a"),_i=s("PretrainedConfig"),vi=s(" for more information."),bi=m(),b(We.$$.fragment),er=m(),fe=a("h2"),Be=a("a"),Xa=a("span"),b(Wo.$$.fragment),Fi=m(),Qa=a("span"),ki=s("FlavaMultimodalConfig"),or=m(),A=a("div"),b(Bo.$$.fragment),$i=m(),So=a("p"),Ti=s("This is the configuration class to store the configuration of a "),na=a("a"),wi=s("FlavaMultimodalModel"),yi=s(`. It is used to instantiate
an FLAVA model according to the specified arguments, defining the model architecture.`),xi=m(),Uo=a("p"),Mi=s(`Instantiating a configuration with the defaults will yield a similar configuration to that of the FLAVA
`),Ro=a("a"),zi=s("facebook/flava-full"),Ci=s(" architecture."),Ei=m(),pe=a("p"),Pi=s("Configuration objects inherit from "),ra=a("a"),Ii=s("PretrainedConfig"),Ai=s(` and can be used to control the model outputs. Read the
documentation from `),sa=a("a"),ji=s("PretrainedConfig"),qi=s(" for more information."),Li=m(),b(Se.$$.fragment),tr=m(),he=a("h2"),Ue=a("a"),Ya=a("span"),b(Ho.$$.fragment),Oi=m(),en=a("span"),Ni=s("FlavaImageCodebookConfig"),ar=m(),Go=a("div"),b(Ko.$$.fragment),nr=m(),ge=a("h2"),Re=a("a"),on=a("span"),b(Zo.$$.fragment),Di=m(),tn=a("span"),Vi=s("FlavaProcessor"),rr=m(),j=a("div"),b(Jo.$$.fragment),Wi=m(),an=a("p"),Bi=s("Constructs a FLAVA processor which wraps a FLAVA feature extractor and a FLAVA tokenizer into a single processor."),Si=m(),O=a("p"),ia=a("a"),Ui=s("FlavaProcessor"),Ri=s(" offers all the functionalities of "),la=a("a"),Hi=s("FlavaFeatureExtractor"),Gi=s(" and "),da=a("a"),Ki=s("BertTokenizerFast"),Zi=s(`. See the
`),nn=a("code"),Ji=s("__call__()"),Xi=s(" and "),ca=a("a"),Qi=s("decode()"),Yi=s(" for more information."),el=m(),He=a("div"),b(Xo.$$.fragment),ol=m(),Qo=a("p"),tl=s("This method forwards all its arguments to BertTokenizerFast\u2019s "),ma=a("a"),al=s("batch_decode()"),nl=s(`. Please
refer to the docstring of this method for more information.`),rl=m(),Ge=a("div"),b(Yo.$$.fragment),sl=m(),et=a("p"),il=s("This method forwards all its arguments to BertTokenizerFast\u2019s "),fa=a("a"),ll=s("decode()"),dl=s(`. Please refer to
the docstring of this method for more information.`),sr=m(),ue=a("h2"),Ke=a("a"),rn=a("span"),b(ot.$$.fragment),cl=m(),sn=a("span"),ml=s("FlavaFeatureExtractor"),ir=m(),R=a("div"),b(tt.$$.fragment),fl=m(),ln=a("p"),pl=s("Constructs a FLAVA feature extractor."),hl=m(),at=a("p"),gl=s("This feature extractor inherits from "),pa=a("a"),ul=s("FeatureExtractionMixin"),_l=s(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),lr=m(),_e=a("h2"),Ze=a("a"),dn=a("span"),b(nt.$$.fragment),vl=m(),cn=a("span"),bl=s("FlavaForPreTraining"),dr=m(),N=a("div"),b(rt.$$.fragment),Fl=m(),mn=a("p"),kl=s("The FLAVA model for pretraining which outputs losses, embeddings, logits and transformer outputs."),$l=m(),st=a("p"),Tl=s("This model is a PyTorch "),it=a("a"),wl=s("torch.nn.Module"),yl=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),xl=m(),X=a("div"),b(lt.$$.fragment),Ml=m(),ve=a("p"),zl=s("The "),ha=a("a"),Cl=s("FlavaForPreTraining"),El=s(" forward method, overrides the "),fn=a("code"),Pl=s("__call__"),Il=s(" special method."),Al=m(),b(Je.$$.fragment),cr=m(),be=a("h2"),Xe=a("a"),pn=a("span"),b(dt.$$.fragment),jl=m(),hn=a("span"),ql=s("FlavaModel"),mr=m(),q=a("div"),b(ct.$$.fragment),Ll=m(),mt=a("p"),Ol=s(`The bare FLAVA Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),ft=a("a"),Nl=s("torch.nn.Module"),Dl=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Vl=m(),D=a("div"),b(pt.$$.fragment),Wl=m(),Fe=a("p"),Bl=s("The "),ga=a("a"),Sl=s("FlavaModel"),Ul=s(" forward method, overrides the "),gn=a("code"),Rl=s("__call__"),Hl=s(" special method."),Gl=m(),b(Qe.$$.fragment),Kl=m(),b(Ye.$$.fragment),Zl=m(),Q=a("div"),b(ht.$$.fragment),Jl=m(),ke=a("p"),Xl=s("The "),ua=a("a"),Ql=s("FlavaModel"),Yl=s(" forward method, overrides the "),un=a("code"),ed=s("__call__"),od=s(" special method."),td=m(),b(eo.$$.fragment),ad=m(),Y=a("div"),b(gt.$$.fragment),nd=m(),$e=a("p"),rd=s("The "),_a=a("a"),sd=s("FlavaModel"),id=s(" forward method, overrides the "),_n=a("code"),ld=s("__call__"),dd=s(" special method."),cd=m(),b(oo.$$.fragment),fr=m(),Te=a("h2"),to=a("a"),vn=a("span"),b(ut.$$.fragment),md=m(),bn=a("span"),fd=s("FlavaImageCodebook"),pr=m(),E=a("div"),b(_t.$$.fragment),pd=m(),vt=a("p"),hd=s(`The FLAVA\u2019s image codebook model inspired from DALL-E\u2019s original encoder. Outputs raw hidden states and can be used
to generate image tokens for an image based on DALL-E\u2019s vocab. Used to generate labels for MIM. Use
`),Fn=a("code"),gd=s("get_codebook_indices"),ud=s(" to get image tokens for an image."),_d=m(),bt=a("p"),vd=s("This model is a PyTorch "),Ft=a("a"),bd=s("torch.nn.Module"),Fd=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),kd=m(),va=a("div"),b(kt.$$.fragment),$d=m(),ba=a("div"),b($t.$$.fragment),Td=m(),Fa=a("div"),b(Tt.$$.fragment),hr=m(),we=a("h2"),ao=a("a"),kn=a("span"),b(wt.$$.fragment),wd=m(),$n=a("span"),yd=s("FlavaTextModel"),gr=m(),H=a("div"),b(yt.$$.fragment),xd=m(),xt=a("p"),Md=s(`The bare FLAVA Text Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Mt=a("a"),zd=s("torch.nn.Module"),Cd=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ed=m(),V=a("div"),b(zt.$$.fragment),Pd=m(),ye=a("p"),Id=s("The "),ka=a("a"),Ad=s("FlavaTextModel"),jd=s(" forward method, overrides the "),Tn=a("code"),qd=s("__call__"),Ld=s(" special method."),Od=m(),b(no.$$.fragment),Nd=m(),b(ro.$$.fragment),ur=m(),xe=a("h2"),so=a("a"),wn=a("span"),b(Ct.$$.fragment),Dd=m(),yn=a("span"),Vd=s("FlavaImageModel"),_r=m(),G=a("div"),b(Et.$$.fragment),Wd=m(),Pt=a("p"),Bd=s(`The bare FLAVA Image Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),It=a("a"),Sd=s("torch.nn.Module"),Ud=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Rd=m(),W=a("div"),b(At.$$.fragment),Hd=m(),Me=a("p"),Gd=s("The "),$a=a("a"),Kd=s("FlavaImageModel"),Zd=s(" forward method, overrides the "),xn=a("code"),Jd=s("__call__"),Xd=s(" special method."),Qd=m(),b(io.$$.fragment),Yd=m(),b(lo.$$.fragment),vr=m(),ze=a("h2"),co=a("a"),Mn=a("span"),b(jt.$$.fragment),ec=m(),zn=a("span"),oc=s("FlavaMultimodalModel"),br=m(),K=a("div"),b(qt.$$.fragment),tc=m(),Lt=a("p"),ac=s(`The bare FLAVA Multimodal Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Ot=a("a"),nc=s("torch.nn.Module"),rc=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),sc=m(),B=a("div"),b(Nt.$$.fragment),ic=m(),Ce=a("p"),lc=s("The "),Ta=a("a"),dc=s("FlavaMultimodalModel"),cc=s(" forward method, overrides the "),Cn=a("code"),mc=s("__call__"),fc=s(" special method."),pc=m(),b(mo.$$.fragment),hc=m(),b(fo.$$.fragment),this.h()},l(o){const g=rf('[data-svelte="svelte-1phssyn"]',document.head);c=n(g,"META",{name:!0,content:!0}),g.forEach(t),y=f(o),u=n(o,"H1",{class:!0});var Dt=r(u);h=n(Dt,"A",{id:!0,class:!0,href:!0});var En=r(h);v=n(En,"SPAN",{});var Pn=r(v);F(l.$$.fragment,Pn),Pn.forEach(t),En.forEach(t),p=f(Dt),z=n(Dt,"SPAN",{});var In=r(z);ts=i(In,"FLAVA"),In.forEach(t),Dt.forEach(t),Bn=f(o),re=n(o,"H2",{class:!0});var Vt=r(re);Pe=n(Vt,"A",{id:!0,class:!0,href:!0});var An=r(Pe);Ba=n(An,"SPAN",{});var jn=r(Ba);F(ko.$$.fragment,jn),jn.forEach(t),An.forEach(t),as=f(Vt),Sa=n(Vt,"SPAN",{});var qn=r(Sa);ns=i(qn,"Overview"),qn.forEach(t),Vt.forEach(t),Sn=f(o),Ie=n(o,"P",{});var Wt=r(Ie);rs=i(Wt,"The FLAVA model was proposed in "),$o=n(Wt,"A",{href:!0,rel:!0});var Ln=r($o);ss=i(Ln,"FLAVA: A Foundational Language And Vision Alignment Model"),Ln.forEach(t),is=i(Wt," by Amanpreet Singh, Ronghang Hu, Vedanuj Goswami, Guillaume Couairon, Wojciech Galuba, Marcus Rohrbach, and Douwe Kiela and is accepted at CVPR 2022."),Wt.forEach(t),Un=f(o),St=n(o,"P",{});var On=r(St);ls=i(On,`The paper aims at creating a single unified foundation model which can work across vision, language
as well as vision-and-language multimodal tasks.`),On.forEach(t),Rn=f(o),Ut=n(o,"P",{});var Nn=r(Ut);ds=i(Nn,"The abstract from the paper is the following:"),Nn.forEach(t),Hn=f(o),Rt=n(o,"P",{});var Dn=r(Rt);Ua=n(Dn,"EM",{});var Vn=r(Ua);cs=i(Vn,`State-of-the-art vision and vision-and-language models rely on large-scale visio-linguistic pretraining for obtaining good performance on a variety
of downstream tasks. Generally, such models are often either cross-modal (contrastive) or multi-modal
(with earlier fusion) but not both; and they often only target specific modalities or tasks. A promising
direction would be to use a single holistic universal model, as a \u201Cfoundation\u201D, that targets all modalities
at once \u2014 a true vision and language foundation model should be good at vision tasks, language tasks, and
cross- and multi-modal vision and language tasks. We introduce FLAVA as such a model and demonstrate
impressive performance on a wide range of 35 tasks spanning these target modalities.`),Vn.forEach(t),Dn.forEach(t),Gn=f(o),J=n(o,"P",{});var Ee=r(J);ms=i(Ee,"This model was contributed by "),To=n(Ee,"A",{href:!0,rel:!0});var gc=r(To);fs=i(gc,"aps"),gc.forEach(t),ps=i(Ee,". The original code can be found "),wo=n(Ee,"A",{href:!0,rel:!0});var uc=r(wo);hs=i(uc,"here"),uc.forEach(t),gs=i(Ee,"."),Ee.forEach(t),Kn=f(o),se=n(o,"H2",{class:!0});var kr=r(se);Ae=n(kr,"A",{id:!0,class:!0,href:!0});var _c=r(Ae);Ra=n(_c,"SPAN",{});var vc=r(Ra);F(yo.$$.fragment,vc),vc.forEach(t),_c.forEach(t),us=f(kr),Ha=n(kr,"SPAN",{});var bc=r(Ha);_s=i(bc,"FlavaConfig"),bc.forEach(t),kr.forEach(t),Zn=f(o),C=n(o,"DIV",{class:!0});var S=r(C);F(xo.$$.fragment,S),vs=f(S),je=n(S,"P",{});var Wn=r(je);Ht=n(Wn,"A",{href:!0});var Fc=r(Ht);bs=i(Fc,"FlavaConfig"),Fc.forEach(t),Fs=i(Wn," is the configuration class to store the configuration of a "),Gt=n(Wn,"A",{href:!0});var kc=r(Gt);ks=i(kc,"FlavaModel"),kc.forEach(t),$s=i(Wn,`. It is used to
instantiate FLAVA model according to the specified arguments, defining the text model, image model, image codebook
and multimodal model configs.`),Wn.forEach(t),Ts=f(S),ie=n(S,"P",{});var wa=r(ie);ws=i(wa,"Configuration objects inherit from "),Kt=n(wa,"A",{href:!0});var $c=r(Kt);ys=i($c,"PretrainedConfig"),$c.forEach(t),xs=i(wa,` and can be used to control the model outputs. Read the
documentation from `),Zt=n(wa,"A",{href:!0});var Tc=r(Zt);Ms=i(Tc,"PretrainedConfig"),Tc.forEach(t),zs=i(wa," for more information."),wa.forEach(t),Cs=f(S),F(qe.$$.fragment,S),Es=f(S),Le=n(S,"DIV",{class:!0});var $r=r(Le);F(Mo.$$.fragment,$r),Ps=f($r),zo=n($r,"P",{});var Tr=r(zo);Is=i(Tr,"Instantiate a "),Jt=n(Tr,"A",{href:!0});var wc=r(Jt);As=i(wc,"FlavaConfig"),wc.forEach(t),js=i(Tr,` (or a derived class) from flava text model configuration, flava image model
configuration, flava multimodal model and flava codebook model configuration.`),Tr.forEach(t),$r.forEach(t),qs=f(S),Oe=n(S,"DIV",{class:!0});var wr=r(Oe);F(Co.$$.fragment,wr),Ls=f(wr),Eo=n(wr,"P",{});var yr=r(Eo);Os=i(yr,"Serializes this instance to a Python dictionary. Override the default "),Xt=n(yr,"A",{href:!0});var yc=r(Xt);Ns=i(yc,"to_dict()"),yc.forEach(t),Ds=i(yr,"."),yr.forEach(t),wr.forEach(t),S.forEach(t),Jn=f(o),le=n(o,"H2",{class:!0});var xr=r(le);Ne=n(xr,"A",{id:!0,class:!0,href:!0});var xc=r(Ne);Ga=n(xc,"SPAN",{});var Mc=r(Ga);F(Po.$$.fragment,Mc),Mc.forEach(t),xc.forEach(t),Vs=f(xr),Ka=n(xr,"SPAN",{});var zc=r(Ka);Ws=i(zc,"FlavaTextConfig"),zc.forEach(t),xr.forEach(t),Xn=f(o),P=n(o,"DIV",{class:!0});var ee=r(P);F(Io.$$.fragment,ee),Bs=f(ee),Ao=n(ee,"P",{});var Mr=r(Ao);Ss=i(Mr,"This is the configuration class to store the configuration of a "),Qt=n(Mr,"A",{href:!0});var Cc=r(Qt);Us=i(Cc,"FlavaTextModel"),Cc.forEach(t),Rs=i(Mr,`. It is used to instantiate an
FLAVA model according to the specified arguments, defining the model architecture.`),Mr.forEach(t),Hs=f(ee),jo=n(ee,"P",{});var zr=r(jo);Gs=i(zr,`Instantiating a configuration with the defaults will yield a similar configuration to that of the FLAVA
`),qo=n(zr,"A",{href:!0,rel:!0});var Ec=r(qo);Ks=i(Ec,"facebook/flava-full"),Ec.forEach(t),Zs=i(zr," architecture."),zr.forEach(t),Js=f(ee),de=n(ee,"P",{});var ya=r(de);Xs=i(ya,"Configuration objects inherit from "),Yt=n(ya,"A",{href:!0});var Pc=r(Yt);Qs=i(Pc,"PretrainedConfig"),Pc.forEach(t),Ys=i(ya,` and can be used to control the model outputs. Read the
documentation from `),ea=n(ya,"A",{href:!0});var Ic=r(ea);ei=i(Ic,"PretrainedConfig"),Ic.forEach(t),oi=i(ya," for more information."),ya.forEach(t),ti=f(ee),F(De.$$.fragment,ee),ee.forEach(t),Qn=f(o),ce=n(o,"H2",{class:!0});var Cr=r(ce);Ve=n(Cr,"A",{id:!0,class:!0,href:!0});var Ac=r(Ve);Za=n(Ac,"SPAN",{});var jc=r(Za);F(Lo.$$.fragment,jc),jc.forEach(t),Ac.forEach(t),ai=f(Cr),Ja=n(Cr,"SPAN",{});var qc=r(Ja);ni=i(qc,"FlavaImageConfig"),qc.forEach(t),Cr.forEach(t),Yn=f(o),I=n(o,"DIV",{class:!0});var oe=r(I);F(Oo.$$.fragment,oe),ri=f(oe),No=n(oe,"P",{});var Er=r(No);si=i(Er,"This is the configuration class to store the configuration of a "),oa=n(Er,"A",{href:!0});var Lc=r(oa);ii=i(Lc,"FlavaImageModel"),Lc.forEach(t),li=i(Er,`. It is used to instantiate an
FLAVA model according to the specified arguments, defining the model architecture.`),Er.forEach(t),di=f(oe),Do=n(oe,"P",{});var Pr=r(Do);ci=i(Pr,`Instantiating a configuration with the defaults will yield a similar configuration to that of the FLAVA
`),Vo=n(Pr,"A",{href:!0,rel:!0});var Oc=r(Vo);mi=i(Oc,"facebook/flava-full"),Oc.forEach(t),fi=i(Pr," architecture."),Pr.forEach(t),pi=f(oe),me=n(oe,"P",{});var xa=r(me);hi=i(xa,"Configuration objects inherit from "),ta=n(xa,"A",{href:!0});var Nc=r(ta);gi=i(Nc,"PretrainedConfig"),Nc.forEach(t),ui=i(xa,` and can be used to control the model outputs. Read the
documentation from `),aa=n(xa,"A",{href:!0});var Dc=r(aa);_i=i(Dc,"PretrainedConfig"),Dc.forEach(t),vi=i(xa," for more information."),xa.forEach(t),bi=f(oe),F(We.$$.fragment,oe),oe.forEach(t),er=f(o),fe=n(o,"H2",{class:!0});var Ir=r(fe);Be=n(Ir,"A",{id:!0,class:!0,href:!0});var Vc=r(Be);Xa=n(Vc,"SPAN",{});var Wc=r(Xa);F(Wo.$$.fragment,Wc),Wc.forEach(t),Vc.forEach(t),Fi=f(Ir),Qa=n(Ir,"SPAN",{});var Bc=r(Qa);ki=i(Bc,"FlavaMultimodalConfig"),Bc.forEach(t),Ir.forEach(t),or=f(o),A=n(o,"DIV",{class:!0});var te=r(A);F(Bo.$$.fragment,te),$i=f(te),So=n(te,"P",{});var Ar=r(So);Ti=i(Ar,"This is the configuration class to store the configuration of a "),na=n(Ar,"A",{href:!0});var Sc=r(na);wi=i(Sc,"FlavaMultimodalModel"),Sc.forEach(t),yi=i(Ar,`. It is used to instantiate
an FLAVA model according to the specified arguments, defining the model architecture.`),Ar.forEach(t),xi=f(te),Uo=n(te,"P",{});var jr=r(Uo);Mi=i(jr,`Instantiating a configuration with the defaults will yield a similar configuration to that of the FLAVA
`),Ro=n(jr,"A",{href:!0,rel:!0});var Uc=r(Ro);zi=i(Uc,"facebook/flava-full"),Uc.forEach(t),Ci=i(jr," architecture."),jr.forEach(t),Ei=f(te),pe=n(te,"P",{});var Ma=r(pe);Pi=i(Ma,"Configuration objects inherit from "),ra=n(Ma,"A",{href:!0});var Rc=r(ra);Ii=i(Rc,"PretrainedConfig"),Rc.forEach(t),Ai=i(Ma,` and can be used to control the model outputs. Read the
documentation from `),sa=n(Ma,"A",{href:!0});var Hc=r(sa);ji=i(Hc,"PretrainedConfig"),Hc.forEach(t),qi=i(Ma," for more information."),Ma.forEach(t),Li=f(te),F(Se.$$.fragment,te),te.forEach(t),tr=f(o),he=n(o,"H2",{class:!0});var qr=r(he);Ue=n(qr,"A",{id:!0,class:!0,href:!0});var Gc=r(Ue);Ya=n(Gc,"SPAN",{});var Kc=r(Ya);F(Ho.$$.fragment,Kc),Kc.forEach(t),Gc.forEach(t),Oi=f(qr),en=n(qr,"SPAN",{});var Zc=r(en);Ni=i(Zc,"FlavaImageCodebookConfig"),Zc.forEach(t),qr.forEach(t),ar=f(o),Go=n(o,"DIV",{class:!0});var Jc=r(Go);F(Ko.$$.fragment,Jc),Jc.forEach(t),nr=f(o),ge=n(o,"H2",{class:!0});var Lr=r(ge);Re=n(Lr,"A",{id:!0,class:!0,href:!0});var Xc=r(Re);on=n(Xc,"SPAN",{});var Qc=r(on);F(Zo.$$.fragment,Qc),Qc.forEach(t),Xc.forEach(t),Di=f(Lr),tn=n(Lr,"SPAN",{});var Yc=r(tn);Vi=i(Yc,"FlavaProcessor"),Yc.forEach(t),Lr.forEach(t),rr=f(o),j=n(o,"DIV",{class:!0});var ae=r(j);F(Jo.$$.fragment,ae),Wi=f(ae),an=n(ae,"P",{});var em=r(an);Bi=i(em,"Constructs a FLAVA processor which wraps a FLAVA feature extractor and a FLAVA tokenizer into a single processor."),em.forEach(t),Si=f(ae),O=n(ae,"P",{});var Z=r(O);ia=n(Z,"A",{href:!0});var om=r(ia);Ui=i(om,"FlavaProcessor"),om.forEach(t),Ri=i(Z," offers all the functionalities of "),la=n(Z,"A",{href:!0});var tm=r(la);Hi=i(tm,"FlavaFeatureExtractor"),tm.forEach(t),Gi=i(Z," and "),da=n(Z,"A",{href:!0});var am=r(da);Ki=i(am,"BertTokenizerFast"),am.forEach(t),Zi=i(Z,`. See the
`),nn=n(Z,"CODE",{});var nm=r(nn);Ji=i(nm,"__call__()"),nm.forEach(t),Xi=i(Z," and "),ca=n(Z,"A",{href:!0});var rm=r(ca);Qi=i(rm,"decode()"),rm.forEach(t),Yi=i(Z," for more information."),Z.forEach(t),el=f(ae),He=n(ae,"DIV",{class:!0});var Or=r(He);F(Xo.$$.fragment,Or),ol=f(Or),Qo=n(Or,"P",{});var Nr=r(Qo);tl=i(Nr,"This method forwards all its arguments to BertTokenizerFast\u2019s "),ma=n(Nr,"A",{href:!0});var sm=r(ma);al=i(sm,"batch_decode()"),sm.forEach(t),nl=i(Nr,`. Please
refer to the docstring of this method for more information.`),Nr.forEach(t),Or.forEach(t),rl=f(ae),Ge=n(ae,"DIV",{class:!0});var Dr=r(Ge);F(Yo.$$.fragment,Dr),sl=f(Dr),et=n(Dr,"P",{});var Vr=r(et);il=i(Vr,"This method forwards all its arguments to BertTokenizerFast\u2019s "),fa=n(Vr,"A",{href:!0});var im=r(fa);ll=i(im,"decode()"),im.forEach(t),dl=i(Vr,`. Please refer to
the docstring of this method for more information.`),Vr.forEach(t),Dr.forEach(t),ae.forEach(t),sr=f(o),ue=n(o,"H2",{class:!0});var Wr=r(ue);Ke=n(Wr,"A",{id:!0,class:!0,href:!0});var lm=r(Ke);rn=n(lm,"SPAN",{});var dm=r(rn);F(ot.$$.fragment,dm),dm.forEach(t),lm.forEach(t),cl=f(Wr),sn=n(Wr,"SPAN",{});var cm=r(sn);ml=i(cm,"FlavaFeatureExtractor"),cm.forEach(t),Wr.forEach(t),ir=f(o),R=n(o,"DIV",{class:!0});var za=r(R);F(tt.$$.fragment,za),fl=f(za),ln=n(za,"P",{});var mm=r(ln);pl=i(mm,"Constructs a FLAVA feature extractor."),mm.forEach(t),hl=f(za),at=n(za,"P",{});var Br=r(at);gl=i(Br,"This feature extractor inherits from "),pa=n(Br,"A",{href:!0});var fm=r(pa);ul=i(fm,"FeatureExtractionMixin"),fm.forEach(t),_l=i(Br,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Br.forEach(t),za.forEach(t),lr=f(o),_e=n(o,"H2",{class:!0});var Sr=r(_e);Ze=n(Sr,"A",{id:!0,class:!0,href:!0});var pm=r(Ze);dn=n(pm,"SPAN",{});var hm=r(dn);F(nt.$$.fragment,hm),hm.forEach(t),pm.forEach(t),vl=f(Sr),cn=n(Sr,"SPAN",{});var gm=r(cn);bl=i(gm,"FlavaForPreTraining"),gm.forEach(t),Sr.forEach(t),dr=f(o),N=n(o,"DIV",{class:!0});var po=r(N);F(rt.$$.fragment,po),Fl=f(po),mn=n(po,"P",{});var um=r(mn);kl=i(um,"The FLAVA model for pretraining which outputs losses, embeddings, logits and transformer outputs."),um.forEach(t),$l=f(po),st=n(po,"P",{});var Ur=r(st);Tl=i(Ur,"This model is a PyTorch "),it=n(Ur,"A",{href:!0,rel:!0});var _m=r(it);wl=i(_m,"torch.nn.Module"),_m.forEach(t),yl=i(Ur,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ur.forEach(t),xl=f(po),X=n(po,"DIV",{class:!0});var Ca=r(X);F(lt.$$.fragment,Ca),Ml=f(Ca),ve=n(Ca,"P",{});var Ea=r(ve);zl=i(Ea,"The "),ha=n(Ea,"A",{href:!0});var vm=r(ha);Cl=i(vm,"FlavaForPreTraining"),vm.forEach(t),El=i(Ea," forward method, overrides the "),fn=n(Ea,"CODE",{});var bm=r(fn);Pl=i(bm,"__call__"),bm.forEach(t),Il=i(Ea," special method."),Ea.forEach(t),Al=f(Ca),F(Je.$$.fragment,Ca),Ca.forEach(t),po.forEach(t),cr=f(o),be=n(o,"H2",{class:!0});var Rr=r(be);Xe=n(Rr,"A",{id:!0,class:!0,href:!0});var Fm=r(Xe);pn=n(Fm,"SPAN",{});var km=r(pn);F(dt.$$.fragment,km),km.forEach(t),Fm.forEach(t),jl=f(Rr),hn=n(Rr,"SPAN",{});var $m=r(hn);ql=i($m,"FlavaModel"),$m.forEach(t),Rr.forEach(t),mr=f(o),q=n(o,"DIV",{class:!0});var ne=r(q);F(ct.$$.fragment,ne),Ll=f(ne),mt=n(ne,"P",{});var Hr=r(mt);Ol=i(Hr,`The bare FLAVA Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),ft=n(Hr,"A",{href:!0,rel:!0});var Tm=r(ft);Nl=i(Tm,"torch.nn.Module"),Tm.forEach(t),Dl=i(Hr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Hr.forEach(t),Vl=f(ne),D=n(ne,"DIV",{class:!0});var ho=r(D);F(pt.$$.fragment,ho),Wl=f(ho),Fe=n(ho,"P",{});var Pa=r(Fe);Bl=i(Pa,"The "),ga=n(Pa,"A",{href:!0});var wm=r(ga);Sl=i(wm,"FlavaModel"),wm.forEach(t),Ul=i(Pa," forward method, overrides the "),gn=n(Pa,"CODE",{});var ym=r(gn);Rl=i(ym,"__call__"),ym.forEach(t),Hl=i(Pa," special method."),Pa.forEach(t),Gl=f(ho),F(Qe.$$.fragment,ho),Kl=f(ho),F(Ye.$$.fragment,ho),ho.forEach(t),Zl=f(ne),Q=n(ne,"DIV",{class:!0});var Ia=r(Q);F(ht.$$.fragment,Ia),Jl=f(Ia),ke=n(Ia,"P",{});var Aa=r(ke);Xl=i(Aa,"The "),ua=n(Aa,"A",{href:!0});var xm=r(ua);Ql=i(xm,"FlavaModel"),xm.forEach(t),Yl=i(Aa," forward method, overrides the "),un=n(Aa,"CODE",{});var Mm=r(un);ed=i(Mm,"__call__"),Mm.forEach(t),od=i(Aa," special method."),Aa.forEach(t),td=f(Ia),F(eo.$$.fragment,Ia),Ia.forEach(t),ad=f(ne),Y=n(ne,"DIV",{class:!0});var ja=r(Y);F(gt.$$.fragment,ja),nd=f(ja),$e=n(ja,"P",{});var qa=r($e);rd=i(qa,"The "),_a=n(qa,"A",{href:!0});var zm=r(_a);sd=i(zm,"FlavaModel"),zm.forEach(t),id=i(qa," forward method, overrides the "),_n=n(qa,"CODE",{});var Cm=r(_n);ld=i(Cm,"__call__"),Cm.forEach(t),dd=i(qa," special method."),qa.forEach(t),cd=f(ja),F(oo.$$.fragment,ja),ja.forEach(t),ne.forEach(t),fr=f(o),Te=n(o,"H2",{class:!0});var Gr=r(Te);to=n(Gr,"A",{id:!0,class:!0,href:!0});var Em=r(to);vn=n(Em,"SPAN",{});var Pm=r(vn);F(ut.$$.fragment,Pm),Pm.forEach(t),Em.forEach(t),md=f(Gr),bn=n(Gr,"SPAN",{});var Im=r(bn);fd=i(Im,"FlavaImageCodebook"),Im.forEach(t),Gr.forEach(t),pr=f(o),E=n(o,"DIV",{class:!0});var U=r(E);F(_t.$$.fragment,U),pd=f(U),vt=n(U,"P",{});var Kr=r(vt);hd=i(Kr,`The FLAVA\u2019s image codebook model inspired from DALL-E\u2019s original encoder. Outputs raw hidden states and can be used
to generate image tokens for an image based on DALL-E\u2019s vocab. Used to generate labels for MIM. Use
`),Fn=n(Kr,"CODE",{});var Am=r(Fn);gd=i(Am,"get_codebook_indices"),Am.forEach(t),ud=i(Kr," to get image tokens for an image."),Kr.forEach(t),_d=f(U),bt=n(U,"P",{});var Zr=r(bt);vd=i(Zr,"This model is a PyTorch "),Ft=n(Zr,"A",{href:!0,rel:!0});var jm=r(Ft);bd=i(jm,"torch.nn.Module"),jm.forEach(t),Fd=i(Zr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Zr.forEach(t),kd=f(U),va=n(U,"DIV",{class:!0});var qm=r(va);F(kt.$$.fragment,qm),qm.forEach(t),$d=f(U),ba=n(U,"DIV",{class:!0});var Lm=r(ba);F($t.$$.fragment,Lm),Lm.forEach(t),Td=f(U),Fa=n(U,"DIV",{class:!0});var Om=r(Fa);F(Tt.$$.fragment,Om),Om.forEach(t),U.forEach(t),hr=f(o),we=n(o,"H2",{class:!0});var Jr=r(we);ao=n(Jr,"A",{id:!0,class:!0,href:!0});var Nm=r(ao);kn=n(Nm,"SPAN",{});var Dm=r(kn);F(wt.$$.fragment,Dm),Dm.forEach(t),Nm.forEach(t),wd=f(Jr),$n=n(Jr,"SPAN",{});var Vm=r($n);yd=i(Vm,"FlavaTextModel"),Vm.forEach(t),Jr.forEach(t),gr=f(o),H=n(o,"DIV",{class:!0});var La=r(H);F(yt.$$.fragment,La),xd=f(La),xt=n(La,"P",{});var Xr=r(xt);Md=i(Xr,`The bare FLAVA Text Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Mt=n(Xr,"A",{href:!0,rel:!0});var Wm=r(Mt);zd=i(Wm,"torch.nn.Module"),Wm.forEach(t),Cd=i(Xr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Xr.forEach(t),Ed=f(La),V=n(La,"DIV",{class:!0});var go=r(V);F(zt.$$.fragment,go),Pd=f(go),ye=n(go,"P",{});var Oa=r(ye);Id=i(Oa,"The "),ka=n(Oa,"A",{href:!0});var Bm=r(ka);Ad=i(Bm,"FlavaTextModel"),Bm.forEach(t),jd=i(Oa," forward method, overrides the "),Tn=n(Oa,"CODE",{});var Sm=r(Tn);qd=i(Sm,"__call__"),Sm.forEach(t),Ld=i(Oa," special method."),Oa.forEach(t),Od=f(go),F(no.$$.fragment,go),Nd=f(go),F(ro.$$.fragment,go),go.forEach(t),La.forEach(t),ur=f(o),xe=n(o,"H2",{class:!0});var Qr=r(xe);so=n(Qr,"A",{id:!0,class:!0,href:!0});var Um=r(so);wn=n(Um,"SPAN",{});var Rm=r(wn);F(Ct.$$.fragment,Rm),Rm.forEach(t),Um.forEach(t),Dd=f(Qr),yn=n(Qr,"SPAN",{});var Hm=r(yn);Vd=i(Hm,"FlavaImageModel"),Hm.forEach(t),Qr.forEach(t),_r=f(o),G=n(o,"DIV",{class:!0});var Na=r(G);F(Et.$$.fragment,Na),Wd=f(Na),Pt=n(Na,"P",{});var Yr=r(Pt);Bd=i(Yr,`The bare FLAVA Image Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),It=n(Yr,"A",{href:!0,rel:!0});var Gm=r(It);Sd=i(Gm,"torch.nn.Module"),Gm.forEach(t),Ud=i(Yr,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Yr.forEach(t),Rd=f(Na),W=n(Na,"DIV",{class:!0});var uo=r(W);F(At.$$.fragment,uo),Hd=f(uo),Me=n(uo,"P",{});var Da=r(Me);Gd=i(Da,"The "),$a=n(Da,"A",{href:!0});var Km=r($a);Kd=i(Km,"FlavaImageModel"),Km.forEach(t),Zd=i(Da," forward method, overrides the "),xn=n(Da,"CODE",{});var Zm=r(xn);Jd=i(Zm,"__call__"),Zm.forEach(t),Xd=i(Da," special method."),Da.forEach(t),Qd=f(uo),F(io.$$.fragment,uo),Yd=f(uo),F(lo.$$.fragment,uo),uo.forEach(t),Na.forEach(t),vr=f(o),ze=n(o,"H2",{class:!0});var es=r(ze);co=n(es,"A",{id:!0,class:!0,href:!0});var Jm=r(co);Mn=n(Jm,"SPAN",{});var Xm=r(Mn);F(jt.$$.fragment,Xm),Xm.forEach(t),Jm.forEach(t),ec=f(es),zn=n(es,"SPAN",{});var Qm=r(zn);oc=i(Qm,"FlavaMultimodalModel"),Qm.forEach(t),es.forEach(t),br=f(o),K=n(o,"DIV",{class:!0});var Va=r(K);F(qt.$$.fragment,Va),tc=f(Va),Lt=n(Va,"P",{});var os=r(Lt);ac=i(os,`The bare FLAVA Multimodal Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Ot=n(os,"A",{href:!0,rel:!0});var Ym=r(Ot);nc=i(Ym,"torch.nn.Module"),Ym.forEach(t),rc=i(os,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),os.forEach(t),sc=f(Va),B=n(Va,"DIV",{class:!0});var _o=r(B);F(Nt.$$.fragment,_o),ic=f(_o),Ce=n(_o,"P",{});var Wa=r(Ce);lc=i(Wa,"The "),Ta=n(Wa,"A",{href:!0});var ef=r(Ta);dc=i(ef,"FlavaMultimodalModel"),ef.forEach(t),cc=i(Wa," forward method, overrides the "),Cn=n(Wa,"CODE",{});var of=r(Cn);mc=i(of,"__call__"),of.forEach(t),fc=i(Wa," special method."),Wa.forEach(t),pc=f(_o),F(mo.$$.fragment,_o),hc=f(_o),F(fo.$$.fragment,_o),_o.forEach(t),Va.forEach(t),this.h()},h(){d(c,"name","hf:doc:metadata"),d(c,"content",JSON.stringify(wf)),d(h,"id","flava"),d(h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h,"href","#flava"),d(u,"class","relative group"),d(Pe,"id","overview"),d(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pe,"href","#overview"),d(re,"class","relative group"),d($o,"href","https://arxiv.org/abs/2112.04482"),d($o,"rel","nofollow"),d(To,"href","https://huggingface.co/aps"),d(To,"rel","nofollow"),d(wo,"href","https://github.com/facebookresearch/multimodal/tree/main/examples/flava"),d(wo,"rel","nofollow"),d(Ae,"id","transformers.FlavaConfig"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#transformers.FlavaConfig"),d(se,"class","relative group"),d(Ht,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig"),d(Gt,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaModel"),d(Kt,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig"),d(Zt,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig"),d(Jt,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig"),d(Le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xt,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.to_dict"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ne,"id","transformers.FlavaTextConfig"),d(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ne,"href","#transformers.FlavaTextConfig"),d(le,"class","relative group"),d(Qt,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"),d(qo,"href","https://huggingface.co/facebook/flava-full"),d(qo,"rel","nofollow"),d(Yt,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig"),d(ea,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig"),d(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ve,"id","transformers.FlavaImageConfig"),d(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ve,"href","#transformers.FlavaImageConfig"),d(ce,"class","relative group"),d(oa,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel"),d(Vo,"href","https://huggingface.co/facebook/flava-full"),d(Vo,"rel","nofollow"),d(ta,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig"),d(aa,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig"),d(I,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Be,"id","transformers.FlavaMultimodalConfig"),d(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Be,"href","#transformers.FlavaMultimodalConfig"),d(fe,"class","relative group"),d(na,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaMultimodalModel"),d(Ro,"href","https://huggingface.co/facebook/flava-full"),d(Ro,"rel","nofollow"),d(ra,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig"),d(sa,"href","/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig"),d(A,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ue,"id","transformers.FlavaImageCodebookConfig"),d(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ue,"href","#transformers.FlavaImageCodebookConfig"),d(he,"class","relative group"),d(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Re,"id","transformers.FlavaProcessor"),d(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Re,"href","#transformers.FlavaProcessor"),d(ge,"class","relative group"),d(ia,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaProcessor"),d(la,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaFeatureExtractor"),d(da,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),d(ca,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaProcessor.decode"),d(ma,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer.batch_decode"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fa,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer.decode"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ke,"id","transformers.FlavaFeatureExtractor"),d(Ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ke,"href","#transformers.FlavaFeatureExtractor"),d(ue,"class","relative group"),d(pa,"href","/docs/transformers/pr_16654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ze,"id","transformers.FlavaForPreTraining"),d(Ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ze,"href","#transformers.FlavaForPreTraining"),d(_e,"class","relative group"),d(it,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(it,"rel","nofollow"),d(ha,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaForPreTraining"),d(X,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xe,"id","transformers.FlavaModel"),d(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xe,"href","#transformers.FlavaModel"),d(be,"class","relative group"),d(ft,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(ft,"rel","nofollow"),d(ga,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaModel"),d(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ua,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaModel"),d(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_a,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaModel"),d(Y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(to,"id","transformers.FlavaImageCodebook"),d(to,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(to,"href","#transformers.FlavaImageCodebook"),d(Te,"class","relative group"),d(Ft,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Ft,"rel","nofollow"),d(va,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ba,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ao,"id","transformers.FlavaTextModel"),d(ao,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ao,"href","#transformers.FlavaTextModel"),d(we,"class","relative group"),d(Mt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Mt,"rel","nofollow"),d(ka,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaTextModel"),d(V,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(so,"id","transformers.FlavaImageModel"),d(so,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(so,"href","#transformers.FlavaImageModel"),d(xe,"class","relative group"),d(It,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(It,"rel","nofollow"),d($a,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaImageModel"),d(W,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(co,"id","transformers.FlavaMultimodalModel"),d(co,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(co,"href","#transformers.FlavaMultimodalModel"),d(ze,"class","relative group"),d(Ot,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Ot,"rel","nofollow"),d(Ta,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaMultimodalModel"),d(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(o,g){e(document.head,c),_(o,y,g),_(o,u,g),e(u,h),e(h,v),k(l,v,null),e(u,p),e(u,z),e(z,ts),_(o,Bn,g),_(o,re,g),e(re,Pe),e(Pe,Ba),k(ko,Ba,null),e(re,as),e(re,Sa),e(Sa,ns),_(o,Sn,g),_(o,Ie,g),e(Ie,rs),e(Ie,$o),e($o,ss),e(Ie,is),_(o,Un,g),_(o,St,g),e(St,ls),_(o,Rn,g),_(o,Ut,g),e(Ut,ds),_(o,Hn,g),_(o,Rt,g),e(Rt,Ua),e(Ua,cs),_(o,Gn,g),_(o,J,g),e(J,ms),e(J,To),e(To,fs),e(J,ps),e(J,wo),e(wo,hs),e(J,gs),_(o,Kn,g),_(o,se,g),e(se,Ae),e(Ae,Ra),k(yo,Ra,null),e(se,us),e(se,Ha),e(Ha,_s),_(o,Zn,g),_(o,C,g),k(xo,C,null),e(C,vs),e(C,je),e(je,Ht),e(Ht,bs),e(je,Fs),e(je,Gt),e(Gt,ks),e(je,$s),e(C,Ts),e(C,ie),e(ie,ws),e(ie,Kt),e(Kt,ys),e(ie,xs),e(ie,Zt),e(Zt,Ms),e(ie,zs),e(C,Cs),k(qe,C,null),e(C,Es),e(C,Le),k(Mo,Le,null),e(Le,Ps),e(Le,zo),e(zo,Is),e(zo,Jt),e(Jt,As),e(zo,js),e(C,qs),e(C,Oe),k(Co,Oe,null),e(Oe,Ls),e(Oe,Eo),e(Eo,Os),e(Eo,Xt),e(Xt,Ns),e(Eo,Ds),_(o,Jn,g),_(o,le,g),e(le,Ne),e(Ne,Ga),k(Po,Ga,null),e(le,Vs),e(le,Ka),e(Ka,Ws),_(o,Xn,g),_(o,P,g),k(Io,P,null),e(P,Bs),e(P,Ao),e(Ao,Ss),e(Ao,Qt),e(Qt,Us),e(Ao,Rs),e(P,Hs),e(P,jo),e(jo,Gs),e(jo,qo),e(qo,Ks),e(jo,Zs),e(P,Js),e(P,de),e(de,Xs),e(de,Yt),e(Yt,Qs),e(de,Ys),e(de,ea),e(ea,ei),e(de,oi),e(P,ti),k(De,P,null),_(o,Qn,g),_(o,ce,g),e(ce,Ve),e(Ve,Za),k(Lo,Za,null),e(ce,ai),e(ce,Ja),e(Ja,ni),_(o,Yn,g),_(o,I,g),k(Oo,I,null),e(I,ri),e(I,No),e(No,si),e(No,oa),e(oa,ii),e(No,li),e(I,di),e(I,Do),e(Do,ci),e(Do,Vo),e(Vo,mi),e(Do,fi),e(I,pi),e(I,me),e(me,hi),e(me,ta),e(ta,gi),e(me,ui),e(me,aa),e(aa,_i),e(me,vi),e(I,bi),k(We,I,null),_(o,er,g),_(o,fe,g),e(fe,Be),e(Be,Xa),k(Wo,Xa,null),e(fe,Fi),e(fe,Qa),e(Qa,ki),_(o,or,g),_(o,A,g),k(Bo,A,null),e(A,$i),e(A,So),e(So,Ti),e(So,na),e(na,wi),e(So,yi),e(A,xi),e(A,Uo),e(Uo,Mi),e(Uo,Ro),e(Ro,zi),e(Uo,Ci),e(A,Ei),e(A,pe),e(pe,Pi),e(pe,ra),e(ra,Ii),e(pe,Ai),e(pe,sa),e(sa,ji),e(pe,qi),e(A,Li),k(Se,A,null),_(o,tr,g),_(o,he,g),e(he,Ue),e(Ue,Ya),k(Ho,Ya,null),e(he,Oi),e(he,en),e(en,Ni),_(o,ar,g),_(o,Go,g),k(Ko,Go,null),_(o,nr,g),_(o,ge,g),e(ge,Re),e(Re,on),k(Zo,on,null),e(ge,Di),e(ge,tn),e(tn,Vi),_(o,rr,g),_(o,j,g),k(Jo,j,null),e(j,Wi),e(j,an),e(an,Bi),e(j,Si),e(j,O),e(O,ia),e(ia,Ui),e(O,Ri),e(O,la),e(la,Hi),e(O,Gi),e(O,da),e(da,Ki),e(O,Zi),e(O,nn),e(nn,Ji),e(O,Xi),e(O,ca),e(ca,Qi),e(O,Yi),e(j,el),e(j,He),k(Xo,He,null),e(He,ol),e(He,Qo),e(Qo,tl),e(Qo,ma),e(ma,al),e(Qo,nl),e(j,rl),e(j,Ge),k(Yo,Ge,null),e(Ge,sl),e(Ge,et),e(et,il),e(et,fa),e(fa,ll),e(et,dl),_(o,sr,g),_(o,ue,g),e(ue,Ke),e(Ke,rn),k(ot,rn,null),e(ue,cl),e(ue,sn),e(sn,ml),_(o,ir,g),_(o,R,g),k(tt,R,null),e(R,fl),e(R,ln),e(ln,pl),e(R,hl),e(R,at),e(at,gl),e(at,pa),e(pa,ul),e(at,_l),_(o,lr,g),_(o,_e,g),e(_e,Ze),e(Ze,dn),k(nt,dn,null),e(_e,vl),e(_e,cn),e(cn,bl),_(o,dr,g),_(o,N,g),k(rt,N,null),e(N,Fl),e(N,mn),e(mn,kl),e(N,$l),e(N,st),e(st,Tl),e(st,it),e(it,wl),e(st,yl),e(N,xl),e(N,X),k(lt,X,null),e(X,Ml),e(X,ve),e(ve,zl),e(ve,ha),e(ha,Cl),e(ve,El),e(ve,fn),e(fn,Pl),e(ve,Il),e(X,Al),k(Je,X,null),_(o,cr,g),_(o,be,g),e(be,Xe),e(Xe,pn),k(dt,pn,null),e(be,jl),e(be,hn),e(hn,ql),_(o,mr,g),_(o,q,g),k(ct,q,null),e(q,Ll),e(q,mt),e(mt,Ol),e(mt,ft),e(ft,Nl),e(mt,Dl),e(q,Vl),e(q,D),k(pt,D,null),e(D,Wl),e(D,Fe),e(Fe,Bl),e(Fe,ga),e(ga,Sl),e(Fe,Ul),e(Fe,gn),e(gn,Rl),e(Fe,Hl),e(D,Gl),k(Qe,D,null),e(D,Kl),k(Ye,D,null),e(q,Zl),e(q,Q),k(ht,Q,null),e(Q,Jl),e(Q,ke),e(ke,Xl),e(ke,ua),e(ua,Ql),e(ke,Yl),e(ke,un),e(un,ed),e(ke,od),e(Q,td),k(eo,Q,null),e(q,ad),e(q,Y),k(gt,Y,null),e(Y,nd),e(Y,$e),e($e,rd),e($e,_a),e(_a,sd),e($e,id),e($e,_n),e(_n,ld),e($e,dd),e(Y,cd),k(oo,Y,null),_(o,fr,g),_(o,Te,g),e(Te,to),e(to,vn),k(ut,vn,null),e(Te,md),e(Te,bn),e(bn,fd),_(o,pr,g),_(o,E,g),k(_t,E,null),e(E,pd),e(E,vt),e(vt,hd),e(vt,Fn),e(Fn,gd),e(vt,ud),e(E,_d),e(E,bt),e(bt,vd),e(bt,Ft),e(Ft,bd),e(bt,Fd),e(E,kd),e(E,va),k(kt,va,null),e(E,$d),e(E,ba),k($t,ba,null),e(E,Td),e(E,Fa),k(Tt,Fa,null),_(o,hr,g),_(o,we,g),e(we,ao),e(ao,kn),k(wt,kn,null),e(we,wd),e(we,$n),e($n,yd),_(o,gr,g),_(o,H,g),k(yt,H,null),e(H,xd),e(H,xt),e(xt,Md),e(xt,Mt),e(Mt,zd),e(xt,Cd),e(H,Ed),e(H,V),k(zt,V,null),e(V,Pd),e(V,ye),e(ye,Id),e(ye,ka),e(ka,Ad),e(ye,jd),e(ye,Tn),e(Tn,qd),e(ye,Ld),e(V,Od),k(no,V,null),e(V,Nd),k(ro,V,null),_(o,ur,g),_(o,xe,g),e(xe,so),e(so,wn),k(Ct,wn,null),e(xe,Dd),e(xe,yn),e(yn,Vd),_(o,_r,g),_(o,G,g),k(Et,G,null),e(G,Wd),e(G,Pt),e(Pt,Bd),e(Pt,It),e(It,Sd),e(Pt,Ud),e(G,Rd),e(G,W),k(At,W,null),e(W,Hd),e(W,Me),e(Me,Gd),e(Me,$a),e($a,Kd),e(Me,Zd),e(Me,xn),e(xn,Jd),e(Me,Xd),e(W,Qd),k(io,W,null),e(W,Yd),k(lo,W,null),_(o,vr,g),_(o,ze,g),e(ze,co),e(co,Mn),k(jt,Mn,null),e(ze,ec),e(ze,zn),e(zn,oc),_(o,br,g),_(o,K,g),k(qt,K,null),e(K,tc),e(K,Lt),e(Lt,ac),e(Lt,Ot),e(Ot,nc),e(Lt,rc),e(K,sc),e(K,B),k(Nt,B,null),e(B,ic),e(B,Ce),e(Ce,lc),e(Ce,Ta),e(Ta,dc),e(Ce,cc),e(Ce,Cn),e(Cn,mc),e(Ce,fc),e(B,pc),k(mo,B,null),e(B,hc),k(fo,B,null),Fr=!0},p(o,[g]){const Dt={};g&2&&(Dt.$$scope={dirty:g,ctx:o}),qe.$set(Dt);const En={};g&2&&(En.$$scope={dirty:g,ctx:o}),De.$set(En);const Pn={};g&2&&(Pn.$$scope={dirty:g,ctx:o}),We.$set(Pn);const In={};g&2&&(In.$$scope={dirty:g,ctx:o}),Se.$set(In);const Vt={};g&2&&(Vt.$$scope={dirty:g,ctx:o}),Je.$set(Vt);const An={};g&2&&(An.$$scope={dirty:g,ctx:o}),Qe.$set(An);const jn={};g&2&&(jn.$$scope={dirty:g,ctx:o}),Ye.$set(jn);const qn={};g&2&&(qn.$$scope={dirty:g,ctx:o}),eo.$set(qn);const Wt={};g&2&&(Wt.$$scope={dirty:g,ctx:o}),oo.$set(Wt);const Ln={};g&2&&(Ln.$$scope={dirty:g,ctx:o}),no.$set(Ln);const On={};g&2&&(On.$$scope={dirty:g,ctx:o}),ro.$set(On);const Nn={};g&2&&(Nn.$$scope={dirty:g,ctx:o}),io.$set(Nn);const Dn={};g&2&&(Dn.$$scope={dirty:g,ctx:o}),lo.$set(Dn);const Vn={};g&2&&(Vn.$$scope={dirty:g,ctx:o}),mo.$set(Vn);const Ee={};g&2&&(Ee.$$scope={dirty:g,ctx:o}),fo.$set(Ee)},i(o){Fr||($(l.$$.fragment,o),$(ko.$$.fragment,o),$(yo.$$.fragment,o),$(xo.$$.fragment,o),$(qe.$$.fragment,o),$(Mo.$$.fragment,o),$(Co.$$.fragment,o),$(Po.$$.fragment,o),$(Io.$$.fragment,o),$(De.$$.fragment,o),$(Lo.$$.fragment,o),$(Oo.$$.fragment,o),$(We.$$.fragment,o),$(Wo.$$.fragment,o),$(Bo.$$.fragment,o),$(Se.$$.fragment,o),$(Ho.$$.fragment,o),$(Ko.$$.fragment,o),$(Zo.$$.fragment,o),$(Jo.$$.fragment,o),$(Xo.$$.fragment,o),$(Yo.$$.fragment,o),$(ot.$$.fragment,o),$(tt.$$.fragment,o),$(nt.$$.fragment,o),$(rt.$$.fragment,o),$(lt.$$.fragment,o),$(Je.$$.fragment,o),$(dt.$$.fragment,o),$(ct.$$.fragment,o),$(pt.$$.fragment,o),$(Qe.$$.fragment,o),$(Ye.$$.fragment,o),$(ht.$$.fragment,o),$(eo.$$.fragment,o),$(gt.$$.fragment,o),$(oo.$$.fragment,o),$(ut.$$.fragment,o),$(_t.$$.fragment,o),$(kt.$$.fragment,o),$($t.$$.fragment,o),$(Tt.$$.fragment,o),$(wt.$$.fragment,o),$(yt.$$.fragment,o),$(zt.$$.fragment,o),$(no.$$.fragment,o),$(ro.$$.fragment,o),$(Ct.$$.fragment,o),$(Et.$$.fragment,o),$(At.$$.fragment,o),$(io.$$.fragment,o),$(lo.$$.fragment,o),$(jt.$$.fragment,o),$(qt.$$.fragment,o),$(Nt.$$.fragment,o),$(mo.$$.fragment,o),$(fo.$$.fragment,o),Fr=!0)},o(o){T(l.$$.fragment,o),T(ko.$$.fragment,o),T(yo.$$.fragment,o),T(xo.$$.fragment,o),T(qe.$$.fragment,o),T(Mo.$$.fragment,o),T(Co.$$.fragment,o),T(Po.$$.fragment,o),T(Io.$$.fragment,o),T(De.$$.fragment,o),T(Lo.$$.fragment,o),T(Oo.$$.fragment,o),T(We.$$.fragment,o),T(Wo.$$.fragment,o),T(Bo.$$.fragment,o),T(Se.$$.fragment,o),T(Ho.$$.fragment,o),T(Ko.$$.fragment,o),T(Zo.$$.fragment,o),T(Jo.$$.fragment,o),T(Xo.$$.fragment,o),T(Yo.$$.fragment,o),T(ot.$$.fragment,o),T(tt.$$.fragment,o),T(nt.$$.fragment,o),T(rt.$$.fragment,o),T(lt.$$.fragment,o),T(Je.$$.fragment,o),T(dt.$$.fragment,o),T(ct.$$.fragment,o),T(pt.$$.fragment,o),T(Qe.$$.fragment,o),T(Ye.$$.fragment,o),T(ht.$$.fragment,o),T(eo.$$.fragment,o),T(gt.$$.fragment,o),T(oo.$$.fragment,o),T(ut.$$.fragment,o),T(_t.$$.fragment,o),T(kt.$$.fragment,o),T($t.$$.fragment,o),T(Tt.$$.fragment,o),T(wt.$$.fragment,o),T(yt.$$.fragment,o),T(zt.$$.fragment,o),T(no.$$.fragment,o),T(ro.$$.fragment,o),T(Ct.$$.fragment,o),T(Et.$$.fragment,o),T(At.$$.fragment,o),T(io.$$.fragment,o),T(lo.$$.fragment,o),T(jt.$$.fragment,o),T(qt.$$.fragment,o),T(Nt.$$.fragment,o),T(mo.$$.fragment,o),T(fo.$$.fragment,o),Fr=!1},d(o){t(c),o&&t(y),o&&t(u),w(l),o&&t(Bn),o&&t(re),w(ko),o&&t(Sn),o&&t(Ie),o&&t(Un),o&&t(St),o&&t(Rn),o&&t(Ut),o&&t(Hn),o&&t(Rt),o&&t(Gn),o&&t(J),o&&t(Kn),o&&t(se),w(yo),o&&t(Zn),o&&t(C),w(xo),w(qe),w(Mo),w(Co),o&&t(Jn),o&&t(le),w(Po),o&&t(Xn),o&&t(P),w(Io),w(De),o&&t(Qn),o&&t(ce),w(Lo),o&&t(Yn),o&&t(I),w(Oo),w(We),o&&t(er),o&&t(fe),w(Wo),o&&t(or),o&&t(A),w(Bo),w(Se),o&&t(tr),o&&t(he),w(Ho),o&&t(ar),o&&t(Go),w(Ko),o&&t(nr),o&&t(ge),w(Zo),o&&t(rr),o&&t(j),w(Jo),w(Xo),w(Yo),o&&t(sr),o&&t(ue),w(ot),o&&t(ir),o&&t(R),w(tt),o&&t(lr),o&&t(_e),w(nt),o&&t(dr),o&&t(N),w(rt),w(lt),w(Je),o&&t(cr),o&&t(be),w(dt),o&&t(mr),o&&t(q),w(ct),w(pt),w(Qe),w(Ye),w(ht),w(eo),w(gt),w(oo),o&&t(fr),o&&t(Te),w(ut),o&&t(pr),o&&t(E),w(_t),w(kt),w($t),w(Tt),o&&t(hr),o&&t(we),w(wt),o&&t(gr),o&&t(H),w(yt),w(zt),w(no),w(ro),o&&t(ur),o&&t(xe),w(Ct),o&&t(_r),o&&t(G),w(Et),w(At),w(io),w(lo),o&&t(vr),o&&t(ze),w(jt),o&&t(br),o&&t(K),w(qt),w(Nt),w(mo),w(fo)}}}const wf={local:"flava",sections:[{local:"overview",title:"Overview"},{local:"transformers.FlavaConfig",title:"FlavaConfig"},{local:"transformers.FlavaTextConfig",title:"FlavaTextConfig"},{local:"transformers.FlavaImageConfig",title:"FlavaImageConfig"},{local:"transformers.FlavaMultimodalConfig",title:"FlavaMultimodalConfig"},{local:"transformers.FlavaImageCodebookConfig",title:"FlavaImageCodebookConfig"},{local:"transformers.FlavaProcessor",title:"FlavaProcessor"},{local:"transformers.FlavaFeatureExtractor",title:"FlavaFeatureExtractor"},{local:"transformers.FlavaForPreTraining",title:"FlavaForPreTraining"},{local:"transformers.FlavaModel",title:"FlavaModel"},{local:"transformers.FlavaImageCodebook",title:"FlavaImageCodebook"},{local:"transformers.FlavaTextModel",title:"FlavaTextModel"},{local:"transformers.FlavaImageModel",title:"FlavaImageModel"},{local:"transformers.FlavaMultimodalModel",title:"FlavaMultimodalModel"}],title:"FLAVA"};function yf(x){return sf(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class If extends tf{constructor(c){super();af(this,c,yf,Tf,nf,{})}}export{If as default,wf as metadata};
