import{S as s0t,i as l0t,s as i0t,e as a,k as l,w as F,t as o,M as d0t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as c0t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as zqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function f0t(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,O0,gf,qe,Xe,ci,An,V0,yn,Ln,X0,fi,xn,z0,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),O0=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),V0=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),X0=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),z0=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var d$=s(p);m=r(d$,"NewModelConfig"),d$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var c$=s(li);mf=r(c$,"model_type"),c$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var f$=s(ii);di=r(f$,'"new-model"'),f$.forEach(t),O0=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),V0=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var m$=s(yn);Ln=r(m$,"PreTrainedModel"),m$.forEach(t),X0=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),z0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var g$=s(mi);hf=r(g$,"NewModelConfig"),g$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,O0),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,V0),e(qe,yn),e(yn,Ln),e(qe,X0),e(qe,fi),e(fi,xn),e(qe,z0),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function m0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h0t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function p0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u0t(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function _0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Myt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ayt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $yt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Syt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ryt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Byt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zyt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lLt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iLt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,O0,gf,qe,Xe,ci,An,V0,yn,Ln,X0,fi,xn,z0,mi,hf,Ma,ze,Ae,d$,gi,c$,f$,Eo,Ea,m$,pf,g$,Bje,EPe,hi,uf,XZ,Q0,Pje,zZ,Ije,CPe,$n,qje,QZ,Nje,jje,WZ,Dje,Gje,wPe,W0,APe,h$,Oje,yPe,_f,LPe,pi,bf,HZ,H0,Vje,UZ,Xje,xPe,Co,U0,zje,J0,Qje,p$,Wje,Hje,Uje,Y0,Jje,JZ,Yje,Kje,Zje,Er,K0,eDe,YZ,oDe,rDe,ui,tDe,KZ,aDe,nDe,ZZ,sDe,lDe,iDe,y,vf,eee,dDe,cDe,u$,fDe,mDe,gDe,Ff,oee,hDe,pDe,_$,uDe,_De,bDe,Tf,ree,vDe,FDe,b$,TDe,MDe,EDe,Mf,tee,CDe,wDe,v$,ADe,yDe,LDe,Ef,aee,xDe,$De,F$,kDe,SDe,RDe,Cf,nee,BDe,PDe,T$,IDe,qDe,NDe,wf,see,jDe,DDe,M$,GDe,ODe,VDe,Af,lee,XDe,zDe,E$,QDe,WDe,HDe,yf,iee,UDe,JDe,C$,YDe,KDe,ZDe,Lf,dee,eGe,oGe,w$,rGe,tGe,aGe,xf,cee,nGe,sGe,A$,lGe,iGe,dGe,$f,fee,cGe,fGe,y$,mGe,gGe,hGe,kf,mee,pGe,uGe,L$,_Ge,bGe,vGe,Sf,gee,FGe,TGe,x$,MGe,EGe,CGe,Rf,hee,wGe,AGe,$$,yGe,LGe,xGe,Bf,pee,$Ge,kGe,k$,SGe,RGe,BGe,Pf,uee,PGe,IGe,S$,qGe,NGe,jGe,If,_ee,DGe,GGe,R$,OGe,VGe,XGe,qf,bee,zGe,QGe,B$,WGe,HGe,UGe,Nf,vee,JGe,YGe,P$,KGe,ZGe,eOe,jf,Fee,oOe,rOe,I$,tOe,aOe,nOe,Df,Tee,sOe,lOe,q$,iOe,dOe,cOe,Gf,Mee,fOe,mOe,N$,gOe,hOe,pOe,Of,Eee,uOe,_Oe,j$,bOe,vOe,FOe,Vf,Cee,TOe,MOe,D$,EOe,COe,wOe,Xf,wee,AOe,yOe,G$,LOe,xOe,$Oe,zf,Aee,kOe,SOe,O$,ROe,BOe,POe,Qf,yee,IOe,qOe,V$,NOe,jOe,DOe,Wf,Lee,GOe,OOe,X$,VOe,XOe,zOe,Hf,xee,QOe,WOe,z$,HOe,UOe,JOe,Uf,$ee,YOe,KOe,Q$,ZOe,eVe,oVe,Jf,kee,rVe,tVe,W$,aVe,nVe,sVe,Yf,See,lVe,iVe,H$,dVe,cVe,fVe,Kf,Ree,mVe,gVe,U$,hVe,pVe,uVe,Zf,Bee,_Ve,bVe,J$,vVe,FVe,TVe,em,Pee,MVe,EVe,Y$,CVe,wVe,AVe,om,Iee,yVe,LVe,K$,xVe,$Ve,kVe,rm,qee,SVe,RVe,Z$,BVe,PVe,IVe,tm,Nee,qVe,NVe,ek,jVe,DVe,GVe,am,jee,OVe,VVe,ok,XVe,zVe,QVe,nm,Dee,WVe,HVe,rk,UVe,JVe,YVe,sm,Gee,KVe,ZVe,tk,eXe,oXe,rXe,lm,Oee,tXe,aXe,ak,nXe,sXe,lXe,im,Vee,iXe,dXe,nk,cXe,fXe,mXe,dm,Xee,gXe,hXe,sk,pXe,uXe,_Xe,cm,zee,bXe,vXe,lk,FXe,TXe,MXe,fm,Qee,EXe,CXe,ik,wXe,AXe,yXe,mm,Wee,LXe,xXe,dk,$Xe,kXe,SXe,gm,Hee,RXe,BXe,ck,PXe,IXe,qXe,hm,Uee,NXe,jXe,fk,DXe,GXe,OXe,pm,Jee,VXe,XXe,mk,zXe,QXe,WXe,um,Yee,HXe,UXe,gk,JXe,YXe,KXe,_m,Kee,ZXe,eze,hk,oze,rze,tze,bm,Zee,aze,nze,pk,sze,lze,ize,vm,eoe,dze,cze,uk,fze,mze,gze,Fm,ooe,hze,pze,_k,uze,_ze,bze,Tm,roe,vze,Fze,bk,Tze,Mze,Eze,Mm,toe,Cze,wze,vk,Aze,yze,Lze,Em,aoe,xze,$ze,Fk,kze,Sze,Rze,Cm,noe,Bze,Pze,Tk,Ize,qze,Nze,wm,soe,jze,Dze,Mk,Gze,Oze,Vze,Am,loe,Xze,zze,Ek,Qze,Wze,Hze,ym,ioe,Uze,Jze,Ck,Yze,Kze,Zze,Lm,doe,eQe,oQe,wk,rQe,tQe,aQe,xm,coe,nQe,sQe,Ak,lQe,iQe,dQe,$m,foe,cQe,fQe,yk,mQe,gQe,hQe,km,moe,pQe,uQe,Lk,_Qe,bQe,vQe,Sm,goe,FQe,TQe,xk,MQe,EQe,CQe,Rm,hoe,wQe,AQe,$k,yQe,LQe,xQe,Bm,poe,$Qe,kQe,kk,SQe,RQe,BQe,Pm,uoe,PQe,IQe,Sk,qQe,NQe,jQe,Im,_oe,DQe,GQe,Rk,OQe,VQe,XQe,qm,boe,zQe,QQe,Bk,WQe,HQe,UQe,Nm,voe,JQe,YQe,Pk,KQe,ZQe,eWe,jm,Foe,oWe,rWe,Ik,tWe,aWe,nWe,Dm,Toe,sWe,lWe,qk,iWe,dWe,cWe,Gm,Moe,fWe,mWe,Nk,gWe,hWe,pWe,Om,Eoe,uWe,_We,jk,bWe,vWe,FWe,Vm,Coe,TWe,MWe,Dk,EWe,CWe,wWe,Xm,woe,AWe,yWe,Gk,LWe,xWe,$We,zm,Aoe,kWe,SWe,Ok,RWe,BWe,PWe,Qm,yoe,IWe,qWe,Vk,NWe,jWe,DWe,Wm,Loe,GWe,OWe,Xk,VWe,XWe,zWe,Hm,xoe,QWe,WWe,zk,HWe,UWe,JWe,Um,$oe,YWe,KWe,Qk,ZWe,eHe,oHe,Jm,koe,rHe,tHe,Wk,aHe,nHe,sHe,Ym,Soe,lHe,iHe,Hk,dHe,cHe,fHe,Km,Roe,mHe,gHe,Uk,hHe,pHe,uHe,Zm,Boe,_He,bHe,Jk,vHe,FHe,THe,eg,Poe,MHe,EHe,Yk,CHe,wHe,AHe,og,Ioe,yHe,LHe,Kk,xHe,$He,kHe,rg,qoe,SHe,RHe,Zk,BHe,PHe,IHe,tg,Noe,qHe,NHe,eS,jHe,DHe,GHe,ag,joe,OHe,VHe,oS,XHe,zHe,QHe,ng,Doe,WHe,HHe,rS,UHe,JHe,YHe,sg,Goe,KHe,ZHe,tS,eUe,oUe,rUe,lg,Ooe,tUe,aUe,aS,nUe,sUe,lUe,ig,Voe,iUe,dUe,nS,cUe,fUe,mUe,dg,Xoe,gUe,hUe,sS,pUe,uUe,_Ue,cg,zoe,bUe,vUe,lS,FUe,TUe,MUe,fg,Qoe,EUe,CUe,iS,wUe,AUe,yUe,mg,Woe,LUe,xUe,dS,$Ue,kUe,SUe,gg,Hoe,RUe,BUe,cS,PUe,IUe,qUe,hg,Uoe,NUe,jUe,fS,DUe,GUe,OUe,pg,VUe,ug,Z0,XUe,Joe,zUe,$Pe,_i,_g,Yoe,ey,QUe,Koe,WUe,kPe,wo,oy,HUe,ry,UUe,mS,JUe,YUe,KUe,ty,ZUe,Zoe,eJe,oJe,rJe,Cr,ay,tJe,ere,aJe,nJe,Ca,sJe,ore,lJe,iJe,rre,dJe,cJe,tre,fJe,mJe,gJe,k,kn,are,hJe,pJe,gS,uJe,_Je,hS,bJe,vJe,FJe,Sn,nre,TJe,MJe,pS,EJe,CJe,uS,wJe,AJe,yJe,Rn,sre,LJe,xJe,_S,$Je,kJe,bS,SJe,RJe,BJe,bg,lre,PJe,IJe,vS,qJe,NJe,jJe,Bn,ire,DJe,GJe,FS,OJe,VJe,TS,XJe,zJe,QJe,vg,dre,WJe,HJe,MS,UJe,JJe,YJe,Fg,cre,KJe,ZJe,ES,eYe,oYe,rYe,Tg,fre,tYe,aYe,CS,nYe,sYe,lYe,Pn,mre,iYe,dYe,wS,cYe,fYe,AS,mYe,gYe,hYe,In,gre,pYe,uYe,yS,_Ye,bYe,LS,vYe,FYe,TYe,qn,hre,MYe,EYe,xS,CYe,wYe,$S,AYe,yYe,LYe,Mg,pre,xYe,$Ye,kS,kYe,SYe,RYe,Eg,ure,BYe,PYe,SS,IYe,qYe,NYe,Nn,_re,jYe,DYe,RS,GYe,OYe,BS,VYe,XYe,zYe,Cg,bre,QYe,WYe,PS,HYe,UYe,JYe,jn,vre,YYe,KYe,IS,ZYe,eKe,qS,oKe,rKe,tKe,Dn,Fre,aKe,nKe,NS,sKe,lKe,jS,iKe,dKe,cKe,Gn,Tre,fKe,mKe,DS,gKe,hKe,GS,pKe,uKe,_Ke,wg,Mre,bKe,vKe,OS,FKe,TKe,MKe,On,Ere,EKe,CKe,VS,wKe,AKe,XS,yKe,LKe,xKe,Vn,Cre,$Ke,kKe,zS,SKe,RKe,QS,BKe,PKe,IKe,Xn,wre,qKe,NKe,WS,jKe,DKe,HS,GKe,OKe,VKe,zn,Are,XKe,zKe,US,QKe,WKe,JS,HKe,UKe,JKe,Qn,yre,YKe,KKe,YS,ZKe,eZe,KS,oZe,rZe,tZe,Wn,Lre,aZe,nZe,ZS,sZe,lZe,eR,iZe,dZe,cZe,Ag,xre,fZe,mZe,oR,gZe,hZe,pZe,Hn,$re,uZe,_Ze,rR,bZe,vZe,tR,FZe,TZe,MZe,yg,kre,EZe,CZe,aR,wZe,AZe,yZe,Un,Sre,LZe,xZe,nR,$Ze,kZe,sR,SZe,RZe,BZe,Jn,Rre,PZe,IZe,lR,qZe,NZe,iR,jZe,DZe,GZe,Yn,Bre,OZe,VZe,dR,XZe,zZe,cR,QZe,WZe,HZe,Kn,Pre,UZe,JZe,fR,YZe,KZe,mR,ZZe,eeo,oeo,Zn,Ire,reo,teo,gR,aeo,neo,hR,seo,leo,ieo,Lg,qre,deo,ceo,pR,feo,meo,geo,es,Nre,heo,peo,uR,ueo,_eo,_R,beo,veo,Feo,os,jre,Teo,Meo,bR,Eeo,Ceo,vR,weo,Aeo,yeo,rs,Dre,Leo,xeo,FR,$eo,keo,TR,Seo,Reo,Beo,ts,Gre,Peo,Ieo,MR,qeo,Neo,ER,jeo,Deo,Geo,as,Ore,Oeo,Veo,CR,Xeo,zeo,wR,Qeo,Weo,Heo,ns,Vre,Ueo,Jeo,AR,Yeo,Keo,yR,Zeo,eoo,ooo,xg,Xre,roo,too,LR,aoo,noo,soo,ss,zre,loo,ioo,xR,doo,coo,$R,foo,moo,goo,$g,Qre,hoo,poo,kR,uoo,_oo,boo,kg,Wre,voo,Foo,SR,Too,Moo,Eoo,ls,Hre,Coo,woo,RR,Aoo,yoo,BR,Loo,xoo,$oo,is,Ure,koo,Soo,PR,Roo,Boo,IR,Poo,Ioo,qoo,ds,Jre,Noo,joo,qR,Doo,Goo,NR,Ooo,Voo,Xoo,Sg,Yre,zoo,Qoo,jR,Woo,Hoo,Uoo,cs,Kre,Joo,Yoo,DR,Koo,Zoo,GR,ero,oro,rro,fs,Zre,tro,aro,OR,nro,sro,VR,lro,iro,dro,ms,ete,cro,fro,XR,mro,gro,zR,hro,pro,uro,gs,ote,_ro,bro,QR,vro,Fro,WR,Tro,Mro,Ero,hs,rte,Cro,wro,HR,Aro,yro,UR,Lro,xro,$ro,ps,tte,kro,Sro,JR,Rro,Bro,YR,Pro,Iro,qro,Rg,ate,Nro,jro,KR,Dro,Gro,Oro,Bg,nte,Vro,Xro,ZR,zro,Qro,Wro,Pg,ste,Hro,Uro,eB,Jro,Yro,Kro,Ig,lte,Zro,eto,oB,oto,rto,tto,us,ite,ato,nto,rB,sto,lto,tB,ito,dto,cto,qg,dte,fto,mto,aB,gto,hto,pto,_s,cte,uto,_to,nB,bto,vto,sB,Fto,Tto,Mto,bs,fte,Eto,Cto,lB,wto,Ato,iB,yto,Lto,xto,vs,mte,$to,kto,dB,Sto,Rto,cB,Bto,Pto,Ito,Fs,gte,qto,Nto,fB,jto,Dto,mB,Gto,Oto,Vto,Ts,hte,Xto,zto,gB,Qto,Wto,hB,Hto,Uto,Jto,Ms,pte,Yto,Kto,pB,Zto,eao,uB,oao,rao,tao,Ng,ute,aao,nao,_B,sao,lao,iao,jg,_te,dao,cao,bB,fao,mao,gao,Es,bte,hao,pao,vB,uao,_ao,FB,bao,vao,Fao,Cs,vte,Tao,Mao,TB,Eao,Cao,MB,wao,Aao,yao,ws,Fte,Lao,xao,EB,$ao,kao,CB,Sao,Rao,Bao,Dg,Tte,Pao,Iao,wB,qao,Nao,jao,Gg,Mte,Dao,Gao,AB,Oao,Vao,Xao,Og,Ete,zao,Qao,yB,Wao,Hao,Uao,As,Cte,Jao,Yao,LB,Kao,Zao,xB,eno,ono,rno,Vg,wte,tno,ano,$B,nno,sno,lno,Xg,Ate,ino,dno,kB,cno,fno,mno,ys,yte,gno,hno,SB,pno,uno,RB,_no,bno,vno,zg,Lte,Fno,Tno,BB,Mno,Eno,Cno,Qg,xte,wno,Ano,PB,yno,Lno,xno,Ls,$te,$no,kno,IB,Sno,Rno,qB,Bno,Pno,Ino,xs,kte,qno,Nno,NB,jno,Dno,jB,Gno,Ono,Vno,$s,Ste,Xno,zno,DB,Qno,Wno,GB,Hno,Uno,Jno,ks,Rte,Yno,Kno,OB,Zno,eso,VB,oso,rso,tso,Wg,aso,Hg,ny,nso,Bte,sso,SPe,bi,Ug,Pte,sy,lso,Ite,iso,RPe,Ao,ly,dso,iy,cso,XB,fso,mso,gso,dy,hso,qte,pso,uso,_so,Qe,cy,bso,Nte,vso,Fso,wa,Tso,jte,Mso,Eso,Dte,Cso,wso,Gte,Aso,yso,Lso,oe,Jg,Ote,xso,$so,zB,kso,Sso,Rso,Yg,Vte,Bso,Pso,QB,Iso,qso,Nso,Kg,Xte,jso,Dso,WB,Gso,Oso,Vso,Zg,zte,Xso,zso,HB,Qso,Wso,Hso,eh,Qte,Uso,Jso,UB,Yso,Kso,Zso,oh,Wte,elo,olo,JB,rlo,tlo,alo,rh,Hte,nlo,slo,YB,llo,ilo,dlo,th,Ute,clo,flo,KB,mlo,glo,hlo,ah,Jte,plo,ulo,ZB,_lo,blo,vlo,nh,Yte,Flo,Tlo,eP,Mlo,Elo,Clo,sh,Kte,wlo,Alo,oP,ylo,Llo,xlo,lh,Zte,$lo,klo,rP,Slo,Rlo,Blo,ih,eae,Plo,Ilo,tP,qlo,Nlo,jlo,dh,oae,Dlo,Glo,aP,Olo,Vlo,Xlo,ch,rae,zlo,Qlo,nP,Wlo,Hlo,Ulo,fh,tae,Jlo,Ylo,sP,Klo,Zlo,eio,mh,aae,oio,rio,lP,tio,aio,nio,gh,nae,sio,lio,iP,iio,dio,cio,hh,sae,fio,mio,dP,gio,hio,pio,ph,lae,uio,_io,cP,bio,vio,Fio,uh,iae,Tio,Mio,fP,Eio,Cio,wio,_h,dae,Aio,yio,mP,Lio,xio,$io,bh,cae,kio,Sio,gP,Rio,Bio,Pio,vh,fae,Iio,qio,hP,Nio,jio,Dio,Fh,mae,Gio,Oio,pP,Vio,Xio,zio,Th,Qio,Mh,Wio,Eh,fy,Hio,gae,Uio,BPe,vi,Ch,hae,my,Jio,pae,Yio,PPe,yo,gy,Kio,hy,Zio,uP,edo,odo,rdo,py,tdo,uae,ado,ndo,sdo,We,uy,ldo,_ae,ido,ddo,Fi,cdo,bae,fdo,mdo,vae,gdo,hdo,pdo,be,wh,Fae,udo,_do,_P,bdo,vdo,Fdo,Ah,Tae,Tdo,Mdo,Mae,Edo,Cdo,wdo,yh,Eae,Ado,ydo,bP,Ldo,xdo,$do,Lh,Cae,kdo,Sdo,vP,Rdo,Bdo,Pdo,xh,wae,Ido,qdo,FP,Ndo,jdo,Ddo,$h,Aae,Gdo,Odo,TP,Vdo,Xdo,zdo,kh,yae,Qdo,Wdo,MP,Hdo,Udo,Jdo,Sh,Lae,Ydo,Kdo,EP,Zdo,eco,oco,Rh,xae,rco,tco,CP,aco,nco,sco,Bh,$ae,lco,ico,wP,dco,cco,fco,Ph,kae,mco,gco,AP,hco,pco,uco,Ih,Sae,_co,bco,yP,vco,Fco,Tco,qh,Rae,Mco,Eco,LP,Cco,wco,Aco,Nh,Bae,yco,Lco,xP,xco,$co,kco,jh,Pae,Sco,Rco,$P,Bco,Pco,Ico,Dh,qco,Gh,Nco,Oh,_y,jco,Iae,Dco,IPe,Ti,Vh,qae,by,Gco,Nae,Oco,qPe,Lo,vy,Vco,Mi,Xco,kP,zco,Qco,SP,Wco,Hco,Uco,Fy,Jco,jae,Yco,Kco,Zco,ot,Ty,efo,Dae,ofo,rfo,Ei,tfo,Gae,afo,nfo,RP,sfo,lfo,ifo,Xh,dfo,He,My,cfo,Oae,ffo,mfo,Aa,gfo,Vae,hfo,pfo,Xae,ufo,_fo,zae,bfo,vfo,Ffo,x,zh,Qae,Tfo,Mfo,BP,Efo,Cfo,wfo,Qh,Wae,Afo,yfo,PP,Lfo,xfo,$fo,Wh,Hae,kfo,Sfo,IP,Rfo,Bfo,Pfo,Hh,Uae,Ifo,qfo,qP,Nfo,jfo,Dfo,Uh,Jae,Gfo,Ofo,NP,Vfo,Xfo,zfo,Jh,Yae,Qfo,Wfo,jP,Hfo,Ufo,Jfo,Yh,Kae,Yfo,Kfo,DP,Zfo,emo,omo,Kh,Zae,rmo,tmo,GP,amo,nmo,smo,Zh,ene,lmo,imo,OP,dmo,cmo,fmo,ep,one,mmo,gmo,VP,hmo,pmo,umo,op,rne,_mo,bmo,XP,vmo,Fmo,Tmo,rp,tne,Mmo,Emo,zP,Cmo,wmo,Amo,tp,ane,ymo,Lmo,QP,xmo,$mo,kmo,ap,nne,Smo,Rmo,WP,Bmo,Pmo,Imo,np,sne,qmo,Nmo,HP,jmo,Dmo,Gmo,sp,lne,Omo,Vmo,UP,Xmo,zmo,Qmo,lp,ine,Wmo,Hmo,JP,Umo,Jmo,Ymo,ip,dne,Kmo,Zmo,YP,ego,ogo,rgo,dp,cne,tgo,ago,KP,ngo,sgo,lgo,cp,fne,igo,dgo,ZP,cgo,fgo,mgo,fp,mne,ggo,hgo,eI,pgo,ugo,_go,mp,gne,bgo,vgo,oI,Fgo,Tgo,Mgo,gp,hne,Ego,Cgo,rI,wgo,Ago,ygo,hp,pne,Lgo,xgo,tI,$go,kgo,Sgo,pp,une,Rgo,Bgo,aI,Pgo,Igo,qgo,up,_ne,Ngo,jgo,nI,Dgo,Ggo,Ogo,_p,bne,Vgo,Xgo,sI,zgo,Qgo,Wgo,bp,vne,Hgo,Ugo,lI,Jgo,Ygo,Kgo,vp,Fne,Zgo,eho,iI,oho,rho,tho,Fp,Tne,aho,nho,dI,sho,lho,iho,Tp,Mne,dho,cho,cI,fho,mho,gho,Ss,Ene,hho,pho,fI,uho,_ho,mI,bho,vho,Fho,Mp,Cne,Tho,Mho,gI,Eho,Cho,who,Ep,wne,Aho,yho,hI,Lho,xho,$ho,Cp,Ane,kho,Sho,pI,Rho,Bho,Pho,wp,yne,Iho,qho,uI,Nho,jho,Dho,Ap,Lne,Gho,Oho,_I,Vho,Xho,zho,yp,xne,Qho,Who,bI,Hho,Uho,Jho,Lp,$ne,Yho,Kho,vI,Zho,epo,opo,xp,kne,rpo,tpo,FI,apo,npo,spo,$p,Sne,lpo,ipo,TI,dpo,cpo,fpo,kp,Rne,mpo,gpo,MI,hpo,ppo,upo,Sp,Bne,_po,bpo,EI,vpo,Fpo,Tpo,Rp,Pne,Mpo,Epo,CI,Cpo,wpo,Apo,Bp,Ine,ypo,Lpo,wI,xpo,$po,kpo,Pp,qne,Spo,Rpo,AI,Bpo,Ppo,Ipo,Ip,Nne,qpo,Npo,yI,jpo,Dpo,Gpo,qp,jne,Opo,Vpo,LI,Xpo,zpo,Qpo,Np,Dne,Wpo,Hpo,xI,Upo,Jpo,Ypo,jp,Gne,Kpo,Zpo,$I,euo,ouo,ruo,Dp,One,tuo,auo,kI,nuo,suo,luo,Gp,Vne,iuo,duo,SI,cuo,fuo,muo,Op,Xne,guo,huo,RI,puo,uuo,_uo,Vp,zne,buo,vuo,BI,Fuo,Tuo,Muo,Xp,Qne,Euo,Cuo,PI,wuo,Auo,yuo,zp,Wne,Luo,xuo,II,$uo,kuo,Suo,Qp,Hne,Ruo,Buo,qI,Puo,Iuo,quo,Wp,Une,Nuo,juo,NI,Duo,Guo,Ouo,Hp,Jne,Vuo,Xuo,jI,zuo,Quo,Wuo,Up,Yne,Huo,Uuo,DI,Juo,Yuo,Kuo,Jp,Kne,Zuo,e_o,GI,o_o,r_o,t_o,Yp,Zne,a_o,n_o,OI,s_o,l_o,i_o,Kp,ese,d_o,c_o,VI,f_o,m_o,g_o,Zp,ose,h_o,p_o,XI,u_o,__o,b_o,eu,rse,v_o,F_o,zI,T_o,M_o,E_o,ou,tse,C_o,w_o,QI,A_o,y_o,L_o,ru,ase,x_o,$_o,WI,k_o,S_o,R_o,tu,nse,B_o,P_o,HI,I_o,q_o,N_o,au,sse,j_o,D_o,UI,G_o,O_o,V_o,nu,lse,X_o,z_o,JI,Q_o,W_o,H_o,su,ise,U_o,J_o,YI,Y_o,K_o,Z_o,lu,dse,e6o,o6o,KI,r6o,t6o,a6o,iu,cse,n6o,s6o,ZI,l6o,i6o,d6o,du,fse,c6o,f6o,eq,m6o,g6o,h6o,cu,mse,p6o,u6o,oq,_6o,b6o,v6o,fu,gse,F6o,T6o,rq,M6o,E6o,C6o,mu,hse,w6o,A6o,tq,y6o,L6o,x6o,gu,pse,$6o,k6o,aq,S6o,R6o,B6o,hu,use,P6o,I6o,nq,q6o,N6o,j6o,pu,_se,D6o,G6o,sq,O6o,V6o,X6o,uu,bse,z6o,Q6o,lq,W6o,H6o,U6o,_u,vse,J6o,Y6o,iq,K6o,Z6o,e1o,bu,Fse,o1o,r1o,dq,t1o,a1o,n1o,vu,Tse,s1o,l1o,cq,i1o,d1o,c1o,Fu,Mse,f1o,m1o,fq,g1o,h1o,p1o,Tu,Ese,u1o,_1o,mq,b1o,v1o,F1o,Mu,Cse,T1o,M1o,gq,E1o,C1o,w1o,Eu,wse,A1o,y1o,hq,L1o,x1o,$1o,Cu,Ase,k1o,S1o,pq,R1o,B1o,P1o,wu,yse,I1o,q1o,uq,N1o,j1o,D1o,Au,Lse,G1o,O1o,_q,V1o,X1o,z1o,yu,xse,Q1o,W1o,bq,H1o,U1o,J1o,Lu,$se,Y1o,K1o,vq,Z1o,ebo,obo,xu,kse,rbo,tbo,Fq,abo,nbo,sbo,$u,Sse,lbo,ibo,Tq,dbo,cbo,fbo,ku,Rse,mbo,gbo,Mq,hbo,pbo,ubo,Su,_bo,Bse,bbo,vbo,Pse,Fbo,Tbo,Ru,NPe,Ci,Bu,Ise,Ey,Mbo,qse,Ebo,jPe,xo,Cy,Cbo,wi,wbo,Eq,Abo,ybo,Cq,Lbo,xbo,$bo,wy,kbo,Nse,Sbo,Rbo,Bbo,rt,Ay,Pbo,jse,Ibo,qbo,Ai,Nbo,Dse,jbo,Dbo,wq,Gbo,Obo,Vbo,Pu,Xbo,Ue,yy,zbo,Gse,Qbo,Wbo,ya,Hbo,Ose,Ubo,Jbo,Vse,Ybo,Kbo,Xse,Zbo,e4o,o4o,G,Iu,zse,r4o,t4o,Aq,a4o,n4o,s4o,qu,Qse,l4o,i4o,yq,d4o,c4o,f4o,Nu,Wse,m4o,g4o,Lq,h4o,p4o,u4o,ju,Hse,_4o,b4o,xq,v4o,F4o,T4o,Du,Use,M4o,E4o,$q,C4o,w4o,A4o,Gu,Jse,y4o,L4o,kq,x4o,$4o,k4o,Ou,Yse,S4o,R4o,Sq,B4o,P4o,I4o,Vu,Kse,q4o,N4o,Rq,j4o,D4o,G4o,Xu,Zse,O4o,V4o,Bq,X4o,z4o,Q4o,zu,ele,W4o,H4o,Pq,U4o,J4o,Y4o,Qu,ole,K4o,Z4o,Iq,e2o,o2o,r2o,Wu,rle,t2o,a2o,qq,n2o,s2o,l2o,Hu,tle,i2o,d2o,Nq,c2o,f2o,m2o,Uu,ale,g2o,h2o,jq,p2o,u2o,_2o,Ju,nle,b2o,v2o,Dq,F2o,T2o,M2o,Yu,sle,E2o,C2o,Gq,w2o,A2o,y2o,Ku,lle,L2o,x2o,Oq,$2o,k2o,S2o,Zu,ile,R2o,B2o,Vq,P2o,I2o,q2o,e_,dle,N2o,j2o,Xq,D2o,G2o,O2o,o_,cle,V2o,X2o,zq,z2o,Q2o,W2o,r_,fle,H2o,U2o,Qq,J2o,Y2o,K2o,t_,mle,Z2o,e5o,Wq,o5o,r5o,t5o,a_,gle,a5o,n5o,Hq,s5o,l5o,i5o,n_,hle,d5o,c5o,Uq,f5o,m5o,g5o,s_,ple,h5o,p5o,Jq,u5o,_5o,b5o,l_,ule,v5o,F5o,Yq,T5o,M5o,E5o,i_,_le,C5o,w5o,Kq,A5o,y5o,L5o,d_,ble,x5o,$5o,Zq,k5o,S5o,R5o,c_,vle,B5o,P5o,eN,I5o,q5o,N5o,f_,Fle,j5o,D5o,oN,G5o,O5o,V5o,m_,Tle,X5o,z5o,rN,Q5o,W5o,H5o,g_,Mle,U5o,J5o,tN,Y5o,K5o,Z5o,h_,Ele,evo,ovo,aN,rvo,tvo,avo,p_,Cle,nvo,svo,nN,lvo,ivo,dvo,u_,wle,cvo,fvo,sN,mvo,gvo,hvo,__,Ale,pvo,uvo,lN,_vo,bvo,vvo,b_,yle,Fvo,Tvo,iN,Mvo,Evo,Cvo,v_,Lle,wvo,Avo,dN,yvo,Lvo,xvo,F_,xle,$vo,kvo,cN,Svo,Rvo,Bvo,T_,$le,Pvo,Ivo,fN,qvo,Nvo,jvo,M_,Dvo,kle,Gvo,Ovo,Sle,Vvo,Xvo,E_,DPe,yi,C_,Rle,Ly,zvo,Ble,Qvo,GPe,$o,xy,Wvo,Li,Hvo,mN,Uvo,Jvo,gN,Yvo,Kvo,Zvo,$y,eFo,Ple,oFo,rFo,tFo,tt,ky,aFo,Ile,nFo,sFo,xi,lFo,qle,iFo,dFo,hN,cFo,fFo,mFo,w_,gFo,Je,Sy,hFo,Nle,pFo,uFo,La,_Fo,jle,bFo,vFo,Dle,FFo,TFo,Gle,MFo,EFo,CFo,z,A_,Ole,wFo,AFo,pN,yFo,LFo,xFo,y_,Vle,$Fo,kFo,uN,SFo,RFo,BFo,L_,Xle,PFo,IFo,_N,qFo,NFo,jFo,x_,zle,DFo,GFo,bN,OFo,VFo,XFo,$_,Qle,zFo,QFo,vN,WFo,HFo,UFo,k_,Wle,JFo,YFo,FN,KFo,ZFo,eTo,S_,Hle,oTo,rTo,TN,tTo,aTo,nTo,R_,Ule,sTo,lTo,MN,iTo,dTo,cTo,B_,Jle,fTo,mTo,EN,gTo,hTo,pTo,P_,Yle,uTo,_To,CN,bTo,vTo,FTo,I_,Kle,TTo,MTo,wN,ETo,CTo,wTo,q_,Zle,ATo,yTo,AN,LTo,xTo,$To,N_,eie,kTo,STo,yN,RTo,BTo,PTo,j_,oie,ITo,qTo,LN,NTo,jTo,DTo,D_,rie,GTo,OTo,xN,VTo,XTo,zTo,G_,tie,QTo,WTo,$N,HTo,UTo,JTo,O_,aie,YTo,KTo,kN,ZTo,eMo,oMo,V_,nie,rMo,tMo,SN,aMo,nMo,sMo,X_,sie,lMo,iMo,RN,dMo,cMo,fMo,z_,lie,mMo,gMo,BN,hMo,pMo,uMo,Q_,iie,_Mo,bMo,PN,vMo,FMo,TMo,W_,die,MMo,EMo,IN,CMo,wMo,AMo,H_,cie,yMo,LMo,qN,xMo,$Mo,kMo,U_,fie,SMo,RMo,NN,BMo,PMo,IMo,J_,mie,qMo,NMo,jN,jMo,DMo,GMo,Y_,gie,OMo,VMo,DN,XMo,zMo,QMo,K_,hie,WMo,HMo,GN,UMo,JMo,YMo,Z_,pie,KMo,ZMo,ON,eEo,oEo,rEo,e6,uie,tEo,aEo,VN,nEo,sEo,lEo,o6,_ie,iEo,dEo,XN,cEo,fEo,mEo,r6,bie,gEo,hEo,zN,pEo,uEo,_Eo,t6,vie,bEo,vEo,QN,FEo,TEo,MEo,a6,Fie,EEo,CEo,WN,wEo,AEo,yEo,n6,Tie,LEo,xEo,HN,$Eo,kEo,SEo,s6,Mie,REo,BEo,UN,PEo,IEo,qEo,l6,NEo,Eie,jEo,DEo,Cie,GEo,OEo,i6,OPe,$i,d6,wie,Ry,VEo,Aie,XEo,VPe,ko,By,zEo,ki,QEo,JN,WEo,HEo,YN,UEo,JEo,YEo,Py,KEo,yie,ZEo,eCo,oCo,at,Iy,rCo,Lie,tCo,aCo,Si,nCo,xie,sCo,lCo,KN,iCo,dCo,cCo,c6,fCo,Ye,qy,mCo,$ie,gCo,hCo,xa,pCo,kie,uCo,_Co,Sie,bCo,vCo,Rie,FCo,TCo,MCo,Q,f6,Bie,ECo,CCo,ZN,wCo,ACo,yCo,m6,Pie,LCo,xCo,ej,$Co,kCo,SCo,g6,Iie,RCo,BCo,oj,PCo,ICo,qCo,h6,qie,NCo,jCo,rj,DCo,GCo,OCo,p6,Nie,VCo,XCo,tj,zCo,QCo,WCo,u6,jie,HCo,UCo,aj,JCo,YCo,KCo,_6,Die,ZCo,e3o,nj,o3o,r3o,t3o,b6,Gie,a3o,n3o,sj,s3o,l3o,i3o,v6,Oie,d3o,c3o,lj,f3o,m3o,g3o,F6,Vie,h3o,p3o,ij,u3o,_3o,b3o,T6,Xie,v3o,F3o,dj,T3o,M3o,E3o,M6,zie,C3o,w3o,cj,A3o,y3o,L3o,E6,Qie,x3o,$3o,fj,k3o,S3o,R3o,C6,Wie,B3o,P3o,mj,I3o,q3o,N3o,w6,Hie,j3o,D3o,gj,G3o,O3o,V3o,A6,Uie,X3o,z3o,hj,Q3o,W3o,H3o,y6,Jie,U3o,J3o,pj,Y3o,K3o,Z3o,L6,Yie,ewo,owo,uj,rwo,two,awo,x6,Kie,nwo,swo,_j,lwo,iwo,dwo,$6,Zie,cwo,fwo,bj,mwo,gwo,hwo,k6,ede,pwo,uwo,vj,_wo,bwo,vwo,S6,ode,Fwo,Two,Fj,Mwo,Ewo,Cwo,R6,rde,wwo,Awo,Tj,ywo,Lwo,xwo,B6,tde,$wo,kwo,Mj,Swo,Rwo,Bwo,P6,ade,Pwo,Iwo,Ej,qwo,Nwo,jwo,I6,nde,Dwo,Gwo,Cj,Owo,Vwo,Xwo,q6,sde,zwo,Qwo,wj,Wwo,Hwo,Uwo,N6,lde,Jwo,Ywo,Aj,Kwo,Zwo,eAo,j6,ide,oAo,rAo,yj,tAo,aAo,nAo,D6,dde,sAo,lAo,Lj,iAo,dAo,cAo,G6,cde,fAo,mAo,fde,gAo,hAo,pAo,O6,mde,uAo,_Ao,xj,bAo,vAo,FAo,V6,gde,TAo,MAo,$j,EAo,CAo,wAo,X6,hde,AAo,yAo,kj,LAo,xAo,$Ao,z6,pde,kAo,SAo,Sj,RAo,BAo,PAo,Q6,IAo,ude,qAo,NAo,_de,jAo,DAo,W6,XPe,Ri,H6,bde,Ny,GAo,vde,OAo,zPe,So,jy,VAo,Bi,XAo,Rj,zAo,QAo,Bj,WAo,HAo,UAo,Dy,JAo,Fde,YAo,KAo,ZAo,nt,Gy,e0o,Tde,o0o,r0o,Pi,t0o,Mde,a0o,n0o,Pj,s0o,l0o,i0o,U6,d0o,Ke,Oy,c0o,Ede,f0o,m0o,$a,g0o,Cde,h0o,p0o,wde,u0o,_0o,Ade,b0o,v0o,F0o,he,J6,yde,T0o,M0o,Ij,E0o,C0o,w0o,Y6,Lde,A0o,y0o,qj,L0o,x0o,$0o,K6,xde,k0o,S0o,Nj,R0o,B0o,P0o,Z6,$de,I0o,q0o,jj,N0o,j0o,D0o,e1,kde,G0o,O0o,Dj,V0o,X0o,z0o,o1,Sde,Q0o,W0o,Gj,H0o,U0o,J0o,r1,Rde,Y0o,K0o,Oj,Z0o,eyo,oyo,t1,Bde,ryo,tyo,Vj,ayo,nyo,syo,a1,Pde,lyo,iyo,Xj,dyo,cyo,fyo,n1,Ide,myo,gyo,zj,hyo,pyo,uyo,s1,qde,_yo,byo,Qj,vyo,Fyo,Tyo,l1,Nde,Myo,Eyo,Wj,Cyo,wyo,Ayo,i1,jde,yyo,Lyo,Hj,xyo,$yo,kyo,d1,Dde,Syo,Ryo,Uj,Byo,Pyo,Iyo,c1,Gde,qyo,Nyo,Jj,jyo,Dyo,Gyo,f1,Ode,Oyo,Vyo,Yj,Xyo,zyo,Qyo,m1,Vde,Wyo,Hyo,Kj,Uyo,Jyo,Yyo,g1,Kyo,Xde,Zyo,eLo,zde,oLo,rLo,h1,QPe,Ii,p1,Qde,Vy,tLo,Wde,aLo,WPe,Ro,Xy,nLo,qi,sLo,Zj,lLo,iLo,eD,dLo,cLo,fLo,zy,mLo,Hde,gLo,hLo,pLo,st,Qy,uLo,Ude,_Lo,bLo,Ni,vLo,Jde,FLo,TLo,oD,MLo,ELo,CLo,u1,wLo,Ze,Wy,ALo,Yde,yLo,LLo,ka,xLo,Kde,$Lo,kLo,Zde,SLo,RLo,ece,BLo,PLo,ILo,q,_1,oce,qLo,NLo,rD,jLo,DLo,GLo,b1,rce,OLo,VLo,tD,XLo,zLo,QLo,v1,tce,WLo,HLo,aD,ULo,JLo,YLo,F1,ace,KLo,ZLo,nD,e8o,o8o,r8o,T1,nce,t8o,a8o,sD,n8o,s8o,l8o,M1,sce,i8o,d8o,lD,c8o,f8o,m8o,E1,lce,g8o,h8o,iD,p8o,u8o,_8o,C1,ice,b8o,v8o,dD,F8o,T8o,M8o,w1,dce,E8o,C8o,cD,w8o,A8o,y8o,A1,cce,L8o,x8o,fD,$8o,k8o,S8o,y1,fce,R8o,B8o,mD,P8o,I8o,q8o,L1,mce,N8o,j8o,gD,D8o,G8o,O8o,x1,gce,V8o,X8o,hD,z8o,Q8o,W8o,$1,hce,H8o,U8o,pD,J8o,Y8o,K8o,k1,pce,Z8o,exo,uD,oxo,rxo,txo,S1,uce,axo,nxo,_D,sxo,lxo,ixo,R1,_ce,dxo,cxo,bD,fxo,mxo,gxo,B1,bce,hxo,pxo,vD,uxo,_xo,bxo,P1,vce,vxo,Fxo,FD,Txo,Mxo,Exo,I1,Fce,Cxo,wxo,TD,Axo,yxo,Lxo,q1,Tce,xxo,$xo,MD,kxo,Sxo,Rxo,N1,Mce,Bxo,Pxo,ED,Ixo,qxo,Nxo,j1,Ece,jxo,Dxo,CD,Gxo,Oxo,Vxo,D1,Cce,Xxo,zxo,wD,Qxo,Wxo,Hxo,G1,wce,Uxo,Jxo,AD,Yxo,Kxo,Zxo,O1,Ace,e7o,o7o,yD,r7o,t7o,a7o,V1,yce,n7o,s7o,LD,l7o,i7o,d7o,X1,Lce,c7o,f7o,xD,m7o,g7o,h7o,z1,xce,p7o,u7o,$D,_7o,b7o,v7o,Q1,$ce,F7o,T7o,kD,M7o,E7o,C7o,W1,kce,w7o,A7o,SD,y7o,L7o,x7o,H1,Sce,$7o,k7o,RD,S7o,R7o,B7o,U1,Rce,P7o,I7o,BD,q7o,N7o,j7o,J1,Bce,D7o,G7o,PD,O7o,V7o,X7o,Y1,Pce,z7o,Q7o,ID,W7o,H7o,U7o,K1,Ice,J7o,Y7o,qD,K7o,Z7o,e9o,Z1,qce,o9o,r9o,ND,t9o,a9o,n9o,eb,Nce,s9o,l9o,jD,i9o,d9o,c9o,ob,jce,f9o,m9o,DD,g9o,h9o,p9o,rb,Dce,u9o,_9o,GD,b9o,v9o,F9o,tb,Gce,T9o,M9o,OD,E9o,C9o,w9o,ab,Oce,A9o,y9o,VD,L9o,x9o,$9o,nb,Vce,k9o,S9o,XD,R9o,B9o,P9o,sb,Xce,I9o,q9o,zD,N9o,j9o,D9o,lb,zce,G9o,O9o,QD,V9o,X9o,z9o,ib,Qce,Q9o,W9o,WD,H9o,U9o,J9o,db,Wce,Y9o,K9o,HD,Z9o,e$o,o$o,cb,r$o,Hce,t$o,a$o,Uce,n$o,s$o,fb,HPe,ji,mb,Jce,Hy,l$o,Yce,i$o,UPe,Bo,Uy,d$o,Di,c$o,UD,f$o,m$o,JD,g$o,h$o,p$o,Jy,u$o,Kce,_$o,b$o,v$o,lt,Yy,F$o,Zce,T$o,M$o,Gi,E$o,efe,C$o,w$o,YD,A$o,y$o,L$o,gb,x$o,eo,Ky,$$o,ofe,k$o,S$o,Sa,R$o,rfe,B$o,P$o,tfe,I$o,q$o,afe,N$o,j$o,D$o,Y,hb,nfe,G$o,O$o,KD,V$o,X$o,z$o,pb,sfe,Q$o,W$o,ZD,H$o,U$o,J$o,ub,lfe,Y$o,K$o,eG,Z$o,eko,oko,_b,ife,rko,tko,oG,ako,nko,sko,bb,dfe,lko,iko,rG,dko,cko,fko,vb,cfe,mko,gko,tG,hko,pko,uko,Fb,ffe,_ko,bko,aG,vko,Fko,Tko,Tb,mfe,Mko,Eko,nG,Cko,wko,Ako,Mb,gfe,yko,Lko,sG,xko,$ko,kko,Eb,hfe,Sko,Rko,lG,Bko,Pko,Iko,Cb,pfe,qko,Nko,iG,jko,Dko,Gko,wb,ufe,Oko,Vko,dG,Xko,zko,Qko,Ab,_fe,Wko,Hko,cG,Uko,Jko,Yko,yb,bfe,Kko,Zko,fG,eSo,oSo,rSo,Lb,vfe,tSo,aSo,mG,nSo,sSo,lSo,xb,Ffe,iSo,dSo,gG,cSo,fSo,mSo,$b,Tfe,gSo,hSo,hG,pSo,uSo,_So,kb,Mfe,bSo,vSo,pG,FSo,TSo,MSo,Sb,Efe,ESo,CSo,uG,wSo,ASo,ySo,Rb,Cfe,LSo,xSo,_G,$So,kSo,SSo,Bb,wfe,RSo,BSo,bG,PSo,ISo,qSo,Pb,Afe,NSo,jSo,vG,DSo,GSo,OSo,Ib,yfe,VSo,XSo,FG,zSo,QSo,WSo,qb,Lfe,HSo,USo,TG,JSo,YSo,KSo,Nb,xfe,ZSo,eRo,MG,oRo,rRo,tRo,jb,$fe,aRo,nRo,EG,sRo,lRo,iRo,Db,kfe,dRo,cRo,CG,fRo,mRo,gRo,Gb,Sfe,hRo,pRo,wG,uRo,_Ro,bRo,Ob,vRo,Rfe,FRo,TRo,Bfe,MRo,ERo,Vb,JPe,Oi,Xb,Pfe,Zy,CRo,Ife,wRo,YPe,Po,eL,ARo,Vi,yRo,AG,LRo,xRo,yG,$Ro,kRo,SRo,oL,RRo,qfe,BRo,PRo,IRo,it,rL,qRo,Nfe,NRo,jRo,Xi,DRo,jfe,GRo,ORo,LG,VRo,XRo,zRo,zb,QRo,oo,tL,WRo,Dfe,HRo,URo,Ra,JRo,Gfe,YRo,KRo,Ofe,ZRo,eBo,Vfe,oBo,rBo,tBo,Yr,Qb,Xfe,aBo,nBo,xG,sBo,lBo,iBo,Wb,zfe,dBo,cBo,$G,fBo,mBo,gBo,Hb,Qfe,hBo,pBo,kG,uBo,_Bo,bBo,Ub,Wfe,vBo,FBo,SG,TBo,MBo,EBo,Jb,Hfe,CBo,wBo,RG,ABo,yBo,LBo,Yb,xBo,Ufe,$Bo,kBo,Jfe,SBo,RBo,Kb,KPe,zi,Zb,Yfe,aL,BBo,Kfe,PBo,ZPe,Io,nL,IBo,Qi,qBo,BG,NBo,jBo,PG,DBo,GBo,OBo,sL,VBo,Zfe,XBo,zBo,QBo,dt,lL,WBo,eme,HBo,UBo,Wi,JBo,ome,YBo,KBo,IG,ZBo,ePo,oPo,e4,rPo,ro,iL,tPo,rme,aPo,nPo,Ba,sPo,tme,lPo,iPo,ame,dPo,cPo,nme,fPo,mPo,gPo,U,o4,sme,hPo,pPo,qG,uPo,_Po,bPo,r4,lme,vPo,FPo,NG,TPo,MPo,EPo,t4,ime,CPo,wPo,jG,APo,yPo,LPo,a4,dme,xPo,$Po,DG,kPo,SPo,RPo,n4,cme,BPo,PPo,GG,IPo,qPo,NPo,s4,fme,jPo,DPo,OG,GPo,OPo,VPo,l4,mme,XPo,zPo,VG,QPo,WPo,HPo,i4,gme,UPo,JPo,XG,YPo,KPo,ZPo,d4,hme,eIo,oIo,zG,rIo,tIo,aIo,c4,pme,nIo,sIo,QG,lIo,iIo,dIo,f4,ume,cIo,fIo,WG,mIo,gIo,hIo,m4,_me,pIo,uIo,HG,_Io,bIo,vIo,g4,bme,FIo,TIo,UG,MIo,EIo,CIo,h4,vme,wIo,AIo,JG,yIo,LIo,xIo,p4,Fme,$Io,kIo,YG,SIo,RIo,BIo,u4,Tme,PIo,IIo,KG,qIo,NIo,jIo,_4,Mme,DIo,GIo,ZG,OIo,VIo,XIo,b4,Eme,zIo,QIo,eO,WIo,HIo,UIo,v4,Cme,JIo,YIo,oO,KIo,ZIo,eqo,F4,wme,oqo,rqo,rO,tqo,aqo,nqo,T4,Ame,sqo,lqo,tO,iqo,dqo,cqo,M4,yme,fqo,mqo,aO,gqo,hqo,pqo,E4,Lme,uqo,_qo,nO,bqo,vqo,Fqo,C4,xme,Tqo,Mqo,sO,Eqo,Cqo,wqo,w4,$me,Aqo,yqo,lO,Lqo,xqo,$qo,A4,kme,kqo,Sqo,iO,Rqo,Bqo,Pqo,y4,Sme,Iqo,qqo,dO,Nqo,jqo,Dqo,L4,Rme,Gqo,Oqo,cO,Vqo,Xqo,zqo,x4,Bme,Qqo,Wqo,fO,Hqo,Uqo,Jqo,$4,Pme,Yqo,Kqo,mO,Zqo,eNo,oNo,k4,Ime,rNo,tNo,gO,aNo,nNo,sNo,S4,qme,lNo,iNo,hO,dNo,cNo,fNo,R4,Nme,mNo,gNo,pO,hNo,pNo,uNo,B4,_No,jme,bNo,vNo,Dme,FNo,TNo,P4,eIe,Hi,I4,Gme,dL,MNo,Ome,ENo,oIe,qo,cL,CNo,Ui,wNo,uO,ANo,yNo,_O,LNo,xNo,$No,fL,kNo,Vme,SNo,RNo,BNo,ct,mL,PNo,Xme,INo,qNo,Ji,NNo,zme,jNo,DNo,bO,GNo,ONo,VNo,q4,XNo,to,gL,zNo,Qme,QNo,WNo,Pa,HNo,Wme,UNo,JNo,Hme,YNo,KNo,Ume,ZNo,ejo,ojo,O,N4,Jme,rjo,tjo,vO,ajo,njo,sjo,j4,Yme,ljo,ijo,FO,djo,cjo,fjo,D4,Kme,mjo,gjo,TO,hjo,pjo,ujo,G4,Zme,_jo,bjo,MO,vjo,Fjo,Tjo,O4,ege,Mjo,Ejo,EO,Cjo,wjo,Ajo,V4,oge,yjo,Ljo,CO,xjo,$jo,kjo,X4,rge,Sjo,Rjo,wO,Bjo,Pjo,Ijo,z4,tge,qjo,Njo,AO,jjo,Djo,Gjo,Q4,age,Ojo,Vjo,yO,Xjo,zjo,Qjo,W4,nge,Wjo,Hjo,LO,Ujo,Jjo,Yjo,H4,sge,Kjo,Zjo,xO,eDo,oDo,rDo,U4,lge,tDo,aDo,$O,nDo,sDo,lDo,J4,ige,iDo,dDo,kO,cDo,fDo,mDo,Y4,dge,gDo,hDo,SO,pDo,uDo,_Do,K4,cge,bDo,vDo,RO,FDo,TDo,MDo,Z4,fge,EDo,CDo,BO,wDo,ADo,yDo,e2,mge,LDo,xDo,PO,$Do,kDo,SDo,o2,gge,RDo,BDo,IO,PDo,IDo,qDo,r2,hge,NDo,jDo,qO,DDo,GDo,ODo,t2,pge,VDo,XDo,NO,zDo,QDo,WDo,a2,uge,HDo,UDo,jO,JDo,YDo,KDo,n2,_ge,ZDo,eGo,DO,oGo,rGo,tGo,s2,bge,aGo,nGo,GO,sGo,lGo,iGo,l2,vge,dGo,cGo,OO,fGo,mGo,gGo,i2,Fge,hGo,pGo,VO,uGo,_Go,bGo,d2,Tge,vGo,FGo,XO,TGo,MGo,EGo,c2,Mge,CGo,wGo,zO,AGo,yGo,LGo,f2,Ege,xGo,$Go,QO,kGo,SGo,RGo,m2,Cge,BGo,PGo,WO,IGo,qGo,NGo,g2,wge,jGo,DGo,HO,GGo,OGo,VGo,h2,Age,XGo,zGo,UO,QGo,WGo,HGo,p2,yge,UGo,JGo,JO,YGo,KGo,ZGo,u2,Lge,eOo,oOo,YO,rOo,tOo,aOo,_2,xge,nOo,sOo,KO,lOo,iOo,dOo,b2,$ge,cOo,fOo,ZO,mOo,gOo,hOo,v2,kge,pOo,uOo,eV,_Oo,bOo,vOo,F2,Sge,FOo,TOo,oV,MOo,EOo,COo,T2,Rge,wOo,AOo,rV,yOo,LOo,xOo,M2,Bge,$Oo,kOo,tV,SOo,ROo,BOo,E2,POo,Pge,IOo,qOo,Ige,NOo,jOo,C2,rIe,Yi,w2,qge,hL,DOo,Nge,GOo,tIe,No,pL,OOo,Ki,VOo,aV,XOo,zOo,nV,QOo,WOo,HOo,uL,UOo,jge,JOo,YOo,KOo,ft,_L,ZOo,Dge,eVo,oVo,Zi,rVo,Gge,tVo,aVo,sV,nVo,sVo,lVo,A2,iVo,ao,bL,dVo,Oge,cVo,fVo,Ia,mVo,Vge,gVo,hVo,Xge,pVo,uVo,zge,_Vo,bVo,vVo,Qge,y2,Wge,FVo,TVo,lV,MVo,EVo,CVo,L2,wVo,Hge,AVo,yVo,Uge,LVo,xVo,x2,aIe,ed,$2,Jge,vL,$Vo,Yge,kVo,nIe,jo,FL,SVo,od,RVo,iV,BVo,PVo,dV,IVo,qVo,NVo,TL,jVo,Kge,DVo,GVo,OVo,mt,ML,VVo,Zge,XVo,zVo,rd,QVo,ehe,WVo,HVo,cV,UVo,JVo,YVo,k2,KVo,no,EL,ZVo,ohe,eXo,oXo,qa,rXo,rhe,tXo,aXo,the,nXo,sXo,ahe,lXo,iXo,dXo,Fe,S2,nhe,cXo,fXo,fV,mXo,gXo,hXo,R2,she,pXo,uXo,mV,_Xo,bXo,vXo,B2,lhe,FXo,TXo,gV,MXo,EXo,CXo,Rs,ihe,wXo,AXo,hV,yXo,LXo,pV,xXo,$Xo,kXo,P2,dhe,SXo,RXo,uV,BXo,PXo,IXo,gt,che,qXo,NXo,_V,jXo,DXo,bV,GXo,OXo,vV,VXo,XXo,zXo,I2,fhe,QXo,WXo,FV,HXo,UXo,JXo,q2,mhe,YXo,KXo,TV,ZXo,ezo,ozo,N2,ghe,rzo,tzo,MV,azo,nzo,szo,j2,hhe,lzo,izo,EV,dzo,czo,fzo,D2,phe,mzo,gzo,CV,hzo,pzo,uzo,G2,uhe,_zo,bzo,wV,vzo,Fzo,Tzo,O2,_he,Mzo,Ezo,AV,Czo,wzo,Azo,V2,yzo,bhe,Lzo,xzo,vhe,$zo,kzo,X2,sIe,td,z2,Fhe,CL,Szo,The,Rzo,lIe,Do,wL,Bzo,ad,Pzo,yV,Izo,qzo,LV,Nzo,jzo,Dzo,AL,Gzo,Mhe,Ozo,Vzo,Xzo,ht,yL,zzo,Ehe,Qzo,Wzo,nd,Hzo,Che,Uzo,Jzo,xV,Yzo,Kzo,Zzo,Q2,eQo,so,LL,oQo,whe,rQo,tQo,Na,aQo,Ahe,nQo,sQo,yhe,lQo,iQo,Lhe,dQo,cQo,fQo,xhe,W2,$he,mQo,gQo,$V,hQo,pQo,uQo,H2,_Qo,khe,bQo,vQo,She,FQo,TQo,U2,iIe,sd,J2,Rhe,xL,MQo,Bhe,EQo,dIe,Go,$L,CQo,ld,wQo,kV,AQo,yQo,SV,LQo,xQo,$Qo,kL,kQo,Phe,SQo,RQo,BQo,pt,SL,PQo,Ihe,IQo,qQo,id,NQo,qhe,jQo,DQo,RV,GQo,OQo,VQo,Y2,XQo,lo,RL,zQo,Nhe,QQo,WQo,ja,HQo,jhe,UQo,JQo,Dhe,YQo,KQo,Ghe,ZQo,eWo,oWo,Ne,K2,Ohe,rWo,tWo,BV,aWo,nWo,sWo,Z2,Vhe,lWo,iWo,PV,dWo,cWo,fWo,e5,Xhe,mWo,gWo,IV,hWo,pWo,uWo,o5,zhe,_Wo,bWo,qV,vWo,FWo,TWo,r5,Qhe,MWo,EWo,NV,CWo,wWo,AWo,t5,Whe,yWo,LWo,jV,xWo,$Wo,kWo,a5,Hhe,SWo,RWo,DV,BWo,PWo,IWo,n5,Uhe,qWo,NWo,GV,jWo,DWo,GWo,s5,OWo,Jhe,VWo,XWo,Yhe,zWo,QWo,l5,cIe,dd,i5,Khe,BL,WWo,Zhe,HWo,fIe,Oo,PL,UWo,cd,JWo,OV,YWo,KWo,VV,ZWo,eHo,oHo,IL,rHo,epe,tHo,aHo,nHo,ut,qL,sHo,ope,lHo,iHo,fd,dHo,rpe,cHo,fHo,XV,mHo,gHo,hHo,d5,pHo,io,NL,uHo,tpe,_Ho,bHo,Da,vHo,ape,FHo,THo,npe,MHo,EHo,spe,CHo,wHo,AHo,Ga,c5,lpe,yHo,LHo,zV,xHo,$Ho,kHo,f5,ipe,SHo,RHo,QV,BHo,PHo,IHo,m5,dpe,qHo,NHo,WV,jHo,DHo,GHo,g5,cpe,OHo,VHo,HV,XHo,zHo,QHo,h5,WHo,fpe,HHo,UHo,mpe,JHo,YHo,p5,mIe,md,u5,gpe,jL,KHo,hpe,ZHo,gIe,Vo,DL,eUo,gd,oUo,UV,rUo,tUo,JV,aUo,nUo,sUo,GL,lUo,ppe,iUo,dUo,cUo,_t,OL,fUo,upe,mUo,gUo,hd,hUo,_pe,pUo,uUo,YV,_Uo,bUo,vUo,_5,FUo,co,VL,TUo,bpe,MUo,EUo,Oa,CUo,vpe,wUo,AUo,Fpe,yUo,LUo,Tpe,xUo,$Uo,kUo,je,b5,Mpe,SUo,RUo,KV,BUo,PUo,IUo,v5,Epe,qUo,NUo,ZV,jUo,DUo,GUo,F5,Cpe,OUo,VUo,eX,XUo,zUo,QUo,T5,wpe,WUo,HUo,oX,UUo,JUo,YUo,M5,Ape,KUo,ZUo,rX,eJo,oJo,rJo,E5,ype,tJo,aJo,tX,nJo,sJo,lJo,C5,Lpe,iJo,dJo,aX,cJo,fJo,mJo,w5,xpe,gJo,hJo,nX,pJo,uJo,_Jo,A5,bJo,$pe,vJo,FJo,kpe,TJo,MJo,y5,hIe,pd,L5,Spe,XL,EJo,Rpe,CJo,pIe,Xo,zL,wJo,ud,AJo,sX,yJo,LJo,lX,xJo,$Jo,kJo,QL,SJo,Bpe,RJo,BJo,PJo,bt,WL,IJo,Ppe,qJo,NJo,_d,jJo,Ipe,DJo,GJo,iX,OJo,VJo,XJo,x5,zJo,fo,HL,QJo,qpe,WJo,HJo,Va,UJo,Npe,JJo,YJo,jpe,KJo,ZJo,Dpe,eYo,oYo,rYo,UL,$5,Gpe,tYo,aYo,dX,nYo,sYo,lYo,k5,Ope,iYo,dYo,cX,cYo,fYo,mYo,S5,gYo,Vpe,hYo,pYo,Xpe,uYo,_Yo,R5,uIe,bd,B5,zpe,JL,bYo,Qpe,vYo,_Ie,zo,YL,FYo,vd,TYo,fX,MYo,EYo,mX,CYo,wYo,AYo,KL,yYo,Wpe,LYo,xYo,$Yo,vt,ZL,kYo,Hpe,SYo,RYo,Fd,BYo,Upe,PYo,IYo,gX,qYo,NYo,jYo,P5,DYo,mo,e8,GYo,Jpe,OYo,VYo,Xa,XYo,Ype,zYo,QYo,Kpe,WYo,HYo,Zpe,UYo,JYo,YYo,za,I5,eue,KYo,ZYo,hX,eKo,oKo,rKo,q5,oue,tKo,aKo,pX,nKo,sKo,lKo,N5,rue,iKo,dKo,uX,cKo,fKo,mKo,j5,tue,gKo,hKo,_X,pKo,uKo,_Ko,D5,bKo,aue,vKo,FKo,nue,TKo,MKo,G5,bIe,Td,O5,sue,o8,EKo,lue,CKo,vIe,Qo,r8,wKo,Md,AKo,bX,yKo,LKo,vX,xKo,$Ko,kKo,t8,SKo,iue,RKo,BKo,PKo,Ft,a8,IKo,due,qKo,NKo,Ed,jKo,cue,DKo,GKo,FX,OKo,VKo,XKo,V5,zKo,go,n8,QKo,fue,WKo,HKo,Qa,UKo,mue,JKo,YKo,gue,KKo,ZKo,hue,eZo,oZo,rZo,Cd,X5,pue,tZo,aZo,TX,nZo,sZo,lZo,z5,uue,iZo,dZo,MX,cZo,fZo,mZo,Q5,_ue,gZo,hZo,EX,pZo,uZo,_Zo,W5,bZo,bue,vZo,FZo,vue,TZo,MZo,H5,FIe,wd,U5,Fue,s8,EZo,Tue,CZo,TIe,Wo,l8,wZo,Ad,AZo,CX,yZo,LZo,wX,xZo,$Zo,kZo,i8,SZo,Mue,RZo,BZo,PZo,Tt,d8,IZo,Eue,qZo,NZo,yd,jZo,Cue,DZo,GZo,AX,OZo,VZo,XZo,J5,zZo,ho,c8,QZo,wue,WZo,HZo,Wa,UZo,Aue,JZo,YZo,yue,KZo,ZZo,Lue,eer,oer,rer,f8,Y5,xue,ter,aer,yX,ner,ser,ler,K5,$ue,ier,der,LX,cer,fer,mer,Z5,ger,kue,her,per,Sue,uer,_er,ev,MIe,Ld,ov,Rue,m8,ber,Bue,ver,EIe,Ho,g8,Fer,xd,Ter,xX,Mer,Eer,$X,Cer,wer,Aer,h8,yer,Pue,Ler,xer,$er,Mt,p8,ker,Iue,Ser,Rer,$d,Ber,que,Per,Ier,kX,qer,Ner,jer,rv,Der,po,u8,Ger,Nue,Oer,Ver,Ha,Xer,jue,zer,Qer,Due,Wer,Her,Gue,Uer,Jer,Yer,Oue,tv,Vue,Ker,Zer,SX,eor,oor,ror,av,tor,Xue,aor,nor,zue,sor,lor,nv,CIe,kd,sv,Que,_8,ior,Wue,dor,wIe,Uo,b8,cor,Sd,mor,RX,gor,hor,BX,por,uor,_or,v8,bor,Hue,vor,For,Tor,Et,F8,Mor,Uue,Eor,Cor,Rd,wor,Jue,Aor,yor,PX,Lor,xor,$or,lv,kor,uo,T8,Sor,Yue,Ror,Bor,Ua,Por,Kue,Ior,qor,Zue,Nor,jor,e_e,Dor,Gor,Oor,Ja,iv,o_e,Vor,Xor,IX,zor,Qor,Wor,dv,r_e,Hor,Uor,qX,Jor,Yor,Kor,cv,t_e,Zor,err,NX,orr,rrr,trr,fv,a_e,arr,nrr,jX,srr,lrr,irr,mv,drr,n_e,crr,frr,s_e,mrr,grr,gv,AIe,Bd,hv,l_e,M8,hrr,i_e,prr,yIe,Jo,E8,urr,Pd,_rr,DX,brr,vrr,GX,Frr,Trr,Mrr,C8,Err,d_e,Crr,wrr,Arr,Ct,w8,yrr,c_e,Lrr,xrr,Id,$rr,f_e,krr,Srr,OX,Rrr,Brr,Prr,pv,Irr,_o,A8,qrr,m_e,Nrr,jrr,Ya,Drr,g_e,Grr,Orr,h_e,Vrr,Xrr,p_e,zrr,Qrr,Wrr,u_e,uv,__e,Hrr,Urr,VX,Jrr,Yrr,Krr,_v,Zrr,b_e,etr,otr,v_e,rtr,ttr,bv,LIe,qd,vv,F_e,y8,atr,T_e,ntr,xIe,Yo,L8,str,Nd,ltr,XX,itr,dtr,zX,ctr,ftr,mtr,x8,gtr,M_e,htr,ptr,utr,wt,$8,_tr,E_e,btr,vtr,jd,Ftr,C_e,Ttr,Mtr,QX,Etr,Ctr,wtr,Fv,Atr,wr,k8,ytr,w_e,Ltr,xtr,Ka,$tr,A_e,ktr,Str,y_e,Rtr,Btr,L_e,Ptr,Itr,qtr,j,Tv,x_e,Ntr,jtr,WX,Dtr,Gtr,Otr,Mv,$_e,Vtr,Xtr,HX,ztr,Qtr,Wtr,Ev,k_e,Htr,Utr,UX,Jtr,Ytr,Ktr,Cv,S_e,Ztr,ear,JX,oar,rar,tar,wv,R_e,aar,nar,YX,sar,lar,iar,Av,B_e,dar,car,KX,far,mar,gar,yv,P_e,har,par,ZX,uar,_ar,bar,Lv,I_e,Far,Tar,ez,Mar,Ear,Car,xv,q_e,war,Aar,oz,yar,Lar,xar,$v,N_e,$ar,kar,rz,Sar,Rar,Bar,kv,j_e,Par,Iar,tz,qar,Nar,jar,Sv,D_e,Dar,Gar,az,Oar,Var,Xar,Rv,G_e,zar,Qar,nz,War,Har,Uar,Bv,O_e,Jar,Yar,sz,Kar,Zar,enr,Pv,V_e,onr,rnr,lz,tnr,anr,nnr,Iv,X_e,snr,lnr,iz,inr,dnr,cnr,qv,z_e,fnr,mnr,dz,gnr,hnr,pnr,Bs,Q_e,unr,_nr,cz,bnr,vnr,fz,Fnr,Tnr,Mnr,Nv,W_e,Enr,Cnr,mz,wnr,Anr,ynr,jv,H_e,Lnr,xnr,gz,$nr,knr,Snr,Dv,U_e,Rnr,Bnr,hz,Pnr,Inr,qnr,Gv,J_e,Nnr,jnr,pz,Dnr,Gnr,Onr,Ov,Y_e,Vnr,Xnr,uz,znr,Qnr,Wnr,Vv,K_e,Hnr,Unr,_z,Jnr,Ynr,Knr,Xv,Z_e,Znr,esr,bz,osr,rsr,tsr,zv,e6e,asr,nsr,vz,ssr,lsr,isr,Qv,o6e,dsr,csr,Fz,fsr,msr,gsr,Wv,r6e,hsr,psr,Tz,usr,_sr,bsr,Hv,t6e,vsr,Fsr,Mz,Tsr,Msr,Esr,Uv,a6e,Csr,wsr,Ez,Asr,ysr,Lsr,Jv,n6e,xsr,$sr,Cz,ksr,Ssr,Rsr,Yv,s6e,Bsr,Psr,wz,Isr,qsr,Nsr,Kv,l6e,jsr,Dsr,Az,Gsr,Osr,Vsr,Zv,i6e,Xsr,zsr,yz,Qsr,Wsr,Hsr,eF,d6e,Usr,Jsr,Lz,Ysr,Ksr,Zsr,oF,c6e,elr,olr,xz,rlr,tlr,alr,rF,f6e,nlr,slr,$z,llr,ilr,dlr,tF,m6e,clr,flr,kz,mlr,glr,hlr,aF,g6e,plr,ulr,Sz,_lr,blr,vlr,nF,h6e,Flr,Tlr,Rz,Mlr,Elr,Clr,sF,p6e,wlr,Alr,Bz,ylr,Llr,xlr,lF,u6e,$lr,klr,Pz,Slr,Rlr,Blr,iF,_6e,Plr,Ilr,Iz,qlr,Nlr,jlr,dF,b6e,Dlr,Glr,qz,Olr,Vlr,Xlr,cF,v6e,zlr,Qlr,Nz,Wlr,Hlr,Ulr,fF,$Ie,Dd,mF,F6e,S8,Jlr,T6e,Ylr,kIe,Ko,R8,Klr,Gd,Zlr,jz,eir,oir,Dz,rir,tir,air,B8,nir,M6e,sir,lir,iir,At,P8,dir,E6e,cir,fir,Od,mir,C6e,gir,hir,Gz,pir,uir,_ir,gF,bir,Ar,I8,vir,w6e,Fir,Tir,Za,Mir,A6e,Eir,Cir,y6e,wir,Air,L6e,yir,Lir,xir,se,hF,x6e,$ir,kir,Oz,Sir,Rir,Bir,pF,$6e,Pir,Iir,Vz,qir,Nir,jir,uF,k6e,Dir,Gir,Xz,Oir,Vir,Xir,_F,S6e,zir,Qir,zz,Wir,Hir,Uir,bF,R6e,Jir,Yir,Qz,Kir,Zir,edr,vF,B6e,odr,rdr,Wz,tdr,adr,ndr,FF,P6e,sdr,ldr,Hz,idr,ddr,cdr,TF,I6e,fdr,mdr,Uz,gdr,hdr,pdr,MF,q6e,udr,_dr,Jz,bdr,vdr,Fdr,EF,N6e,Tdr,Mdr,Yz,Edr,Cdr,wdr,CF,j6e,Adr,ydr,Kz,Ldr,xdr,$dr,wF,D6e,kdr,Sdr,Zz,Rdr,Bdr,Pdr,AF,G6e,Idr,qdr,eQ,Ndr,jdr,Ddr,yF,O6e,Gdr,Odr,oQ,Vdr,Xdr,zdr,LF,V6e,Qdr,Wdr,rQ,Hdr,Udr,Jdr,xF,X6e,Ydr,Kdr,tQ,Zdr,ecr,ocr,$F,z6e,rcr,tcr,aQ,acr,ncr,scr,kF,Q6e,lcr,icr,nQ,dcr,ccr,fcr,SF,W6e,mcr,gcr,sQ,hcr,pcr,ucr,RF,H6e,_cr,bcr,lQ,vcr,Fcr,Tcr,BF,U6e,Mcr,Ecr,iQ,Ccr,wcr,Acr,PF,J6e,ycr,Lcr,dQ,xcr,$cr,kcr,IF,Y6e,Scr,Rcr,cQ,Bcr,Pcr,Icr,qF,SIe,Vd,NF,K6e,q8,qcr,Z6e,Ncr,RIe,Zo,N8,jcr,Xd,Dcr,fQ,Gcr,Ocr,mQ,Vcr,Xcr,zcr,j8,Qcr,e1e,Wcr,Hcr,Ucr,yt,D8,Jcr,o1e,Ycr,Kcr,zd,Zcr,r1e,efr,ofr,gQ,rfr,tfr,afr,jF,nfr,yr,G8,sfr,t1e,lfr,ifr,en,dfr,a1e,cfr,ffr,n1e,mfr,gfr,s1e,hfr,pfr,ufr,Te,DF,l1e,_fr,bfr,hQ,vfr,Ffr,Tfr,GF,i1e,Mfr,Efr,pQ,Cfr,wfr,Afr,OF,d1e,yfr,Lfr,uQ,xfr,$fr,kfr,VF,c1e,Sfr,Rfr,_Q,Bfr,Pfr,Ifr,XF,f1e,qfr,Nfr,bQ,jfr,Dfr,Gfr,zF,m1e,Ofr,Vfr,vQ,Xfr,zfr,Qfr,QF,g1e,Wfr,Hfr,FQ,Ufr,Jfr,Yfr,WF,h1e,Kfr,Zfr,TQ,emr,omr,rmr,HF,p1e,tmr,amr,MQ,nmr,smr,lmr,UF,u1e,imr,dmr,EQ,cmr,fmr,mmr,JF,_1e,gmr,hmr,CQ,pmr,umr,_mr,YF,b1e,bmr,vmr,wQ,Fmr,Tmr,Mmr,KF,BIe,Qd,ZF,v1e,O8,Emr,F1e,Cmr,PIe,er,V8,wmr,Wd,Amr,AQ,ymr,Lmr,yQ,xmr,$mr,kmr,X8,Smr,T1e,Rmr,Bmr,Pmr,Lt,z8,Imr,M1e,qmr,Nmr,Hd,jmr,E1e,Dmr,Gmr,LQ,Omr,Vmr,Xmr,eT,zmr,Lr,Q8,Qmr,C1e,Wmr,Hmr,on,Umr,w1e,Jmr,Ymr,A1e,Kmr,Zmr,y1e,egr,ogr,rgr,Ud,oT,L1e,tgr,agr,xQ,ngr,sgr,lgr,rT,x1e,igr,dgr,$Q,cgr,fgr,mgr,tT,$1e,ggr,hgr,kQ,pgr,ugr,_gr,aT,IIe,Jd,nT,k1e,W8,bgr,S1e,vgr,qIe,or,H8,Fgr,Yd,Tgr,SQ,Mgr,Egr,RQ,Cgr,wgr,Agr,U8,ygr,R1e,Lgr,xgr,$gr,xt,J8,kgr,B1e,Sgr,Rgr,Kd,Bgr,P1e,Pgr,Igr,BQ,qgr,Ngr,jgr,sT,Dgr,xr,Y8,Ggr,I1e,Ogr,Vgr,rn,Xgr,q1e,zgr,Qgr,N1e,Wgr,Hgr,j1e,Ugr,Jgr,Ygr,ie,lT,D1e,Kgr,Zgr,PQ,ehr,ohr,rhr,iT,G1e,thr,ahr,IQ,nhr,shr,lhr,dT,O1e,ihr,dhr,qQ,chr,fhr,mhr,cT,V1e,ghr,hhr,NQ,phr,uhr,_hr,fT,X1e,bhr,vhr,jQ,Fhr,Thr,Mhr,mT,z1e,Ehr,Chr,DQ,whr,Ahr,yhr,gT,Q1e,Lhr,xhr,GQ,$hr,khr,Shr,hT,W1e,Rhr,Bhr,OQ,Phr,Ihr,qhr,pT,H1e,Nhr,jhr,VQ,Dhr,Ghr,Ohr,uT,U1e,Vhr,Xhr,XQ,zhr,Qhr,Whr,_T,J1e,Hhr,Uhr,zQ,Jhr,Yhr,Khr,bT,Y1e,Zhr,epr,QQ,opr,rpr,tpr,vT,K1e,apr,npr,WQ,spr,lpr,ipr,FT,Z1e,dpr,cpr,HQ,fpr,mpr,gpr,TT,ebe,hpr,ppr,UQ,upr,_pr,bpr,MT,obe,vpr,Fpr,JQ,Tpr,Mpr,Epr,ET,rbe,Cpr,wpr,YQ,Apr,ypr,Lpr,CT,tbe,xpr,$pr,KQ,kpr,Spr,Rpr,wT,abe,Bpr,Ppr,ZQ,Ipr,qpr,Npr,AT,nbe,jpr,Dpr,eW,Gpr,Opr,Vpr,yT,NIe,Zd,LT,sbe,K8,Xpr,lbe,zpr,jIe,rr,Z8,Qpr,ec,Wpr,oW,Hpr,Upr,rW,Jpr,Ypr,Kpr,ex,Zpr,ibe,eur,our,rur,$t,ox,tur,dbe,aur,nur,oc,sur,cbe,lur,iur,tW,dur,cur,fur,xT,mur,$r,rx,gur,fbe,hur,pur,tn,uur,mbe,_ur,bur,gbe,vur,Fur,hbe,Tur,Mur,Eur,ye,$T,pbe,Cur,wur,aW,Aur,yur,Lur,kT,ube,xur,$ur,nW,kur,Sur,Rur,ST,_be,Bur,Pur,sW,Iur,qur,Nur,RT,bbe,jur,Dur,lW,Gur,Our,Vur,BT,vbe,Xur,zur,iW,Qur,Wur,Hur,PT,Fbe,Uur,Jur,dW,Yur,Kur,Zur,IT,Tbe,e_r,o_r,cW,r_r,t_r,a_r,qT,Mbe,n_r,s_r,fW,l_r,i_r,d_r,NT,Ebe,c_r,f_r,mW,m_r,g_r,h_r,jT,Cbe,p_r,u_r,gW,__r,b_r,v_r,DT,DIe,rc,GT,wbe,tx,F_r,Abe,T_r,GIe,tr,ax,M_r,tc,E_r,hW,C_r,w_r,pW,A_r,y_r,L_r,nx,x_r,ybe,$_r,k_r,S_r,kt,sx,R_r,Lbe,B_r,P_r,ac,I_r,xbe,q_r,N_r,uW,j_r,D_r,G_r,OT,O_r,kr,lx,V_r,$be,X_r,z_r,an,Q_r,kbe,W_r,H_r,Sbe,U_r,J_r,Rbe,Y_r,K_r,Z_r,Z,VT,Bbe,e6r,o6r,_W,r6r,t6r,a6r,XT,Pbe,n6r,s6r,bW,l6r,i6r,d6r,zT,Ibe,c6r,f6r,vW,m6r,g6r,h6r,QT,qbe,p6r,u6r,FW,_6r,b6r,v6r,WT,Nbe,F6r,T6r,TW,M6r,E6r,C6r,HT,jbe,w6r,A6r,MW,y6r,L6r,x6r,UT,Dbe,$6r,k6r,EW,S6r,R6r,B6r,JT,Gbe,P6r,I6r,CW,q6r,N6r,j6r,YT,Obe,D6r,G6r,wW,O6r,V6r,X6r,KT,Vbe,z6r,Q6r,AW,W6r,H6r,U6r,ZT,Xbe,J6r,Y6r,yW,K6r,Z6r,e1r,eM,zbe,o1r,r1r,LW,t1r,a1r,n1r,oM,Qbe,s1r,l1r,xW,i1r,d1r,c1r,rM,Wbe,f1r,m1r,$W,g1r,h1r,p1r,tM,Hbe,u1r,_1r,kW,b1r,v1r,F1r,aM,Ube,T1r,M1r,SW,E1r,C1r,w1r,nM,Jbe,A1r,y1r,RW,L1r,x1r,$1r,sM,Ybe,k1r,S1r,BW,R1r,B1r,P1r,lM,Kbe,I1r,q1r,PW,N1r,j1r,D1r,iM,Zbe,G1r,O1r,IW,V1r,X1r,z1r,dM,e4e,Q1r,W1r,qW,H1r,U1r,J1r,cM,o4e,Y1r,K1r,NW,Z1r,ebr,obr,fM,r4e,rbr,tbr,jW,abr,nbr,sbr,mM,t4e,lbr,ibr,DW,dbr,cbr,fbr,gM,a4e,mbr,gbr,GW,hbr,pbr,ubr,hM,n4e,_br,bbr,OW,vbr,Fbr,Tbr,pM,OIe,nc,uM,s4e,ix,Mbr,l4e,Ebr,VIe,ar,dx,Cbr,sc,wbr,VW,Abr,ybr,XW,Lbr,xbr,$br,cx,kbr,i4e,Sbr,Rbr,Bbr,St,fx,Pbr,d4e,Ibr,qbr,lc,Nbr,c4e,jbr,Dbr,zW,Gbr,Obr,Vbr,_M,Xbr,Sr,mx,zbr,f4e,Qbr,Wbr,nn,Hbr,m4e,Ubr,Jbr,g4e,Ybr,Kbr,h4e,Zbr,e4r,o4r,pe,bM,p4e,r4r,t4r,QW,a4r,n4r,s4r,vM,u4e,l4r,i4r,WW,d4r,c4r,f4r,FM,_4e,m4r,g4r,HW,h4r,p4r,u4r,TM,b4e,_4r,b4r,UW,v4r,F4r,T4r,MM,v4e,M4r,E4r,JW,C4r,w4r,A4r,EM,F4e,y4r,L4r,YW,x4r,$4r,k4r,CM,T4e,S4r,R4r,KW,B4r,P4r,I4r,wM,M4e,q4r,N4r,ZW,j4r,D4r,G4r,AM,E4e,O4r,V4r,eH,X4r,z4r,Q4r,yM,C4e,W4r,H4r,oH,U4r,J4r,Y4r,LM,w4e,K4r,Z4r,rH,e2r,o2r,r2r,xM,A4e,t2r,a2r,tH,n2r,s2r,l2r,$M,y4e,i2r,d2r,aH,c2r,f2r,m2r,kM,L4e,g2r,h2r,nH,p2r,u2r,_2r,SM,x4e,b2r,v2r,sH,F2r,T2r,M2r,RM,$4e,E2r,C2r,lH,w2r,A2r,y2r,BM,k4e,L2r,x2r,iH,$2r,k2r,S2r,PM,XIe,ic,IM,S4e,gx,R2r,R4e,B2r,zIe,nr,hx,P2r,dc,I2r,dH,q2r,N2r,cH,j2r,D2r,G2r,px,O2r,B4e,V2r,X2r,z2r,Rt,ux,Q2r,P4e,W2r,H2r,cc,U2r,I4e,J2r,Y2r,fH,K2r,Z2r,e5r,qM,o5r,Rr,_x,r5r,q4e,t5r,a5r,sn,n5r,N4e,s5r,l5r,j4e,i5r,d5r,D4e,c5r,f5r,m5r,bx,NM,G4e,g5r,h5r,mH,p5r,u5r,_5r,jM,O4e,b5r,v5r,gH,F5r,T5r,M5r,DM,QIe,fc,GM,V4e,vx,E5r,X4e,C5r,WIe,sr,Fx,w5r,mc,A5r,hH,y5r,L5r,pH,x5r,$5r,k5r,Tx,S5r,z4e,R5r,B5r,P5r,Bt,Mx,I5r,Q4e,q5r,N5r,gc,j5r,W4e,D5r,G5r,uH,O5r,V5r,X5r,OM,z5r,Br,Ex,Q5r,H4e,W5r,H5r,ln,U5r,U4e,J5r,Y5r,J4e,K5r,Z5r,Y4e,evr,ovr,rvr,K4e,VM,Z4e,tvr,avr,_H,nvr,svr,lvr,XM,HIe,hc,zM,e2e,Cx,ivr,o2e,dvr,UIe,lr,wx,cvr,pc,fvr,bH,mvr,gvr,vH,hvr,pvr,uvr,Ax,_vr,r2e,bvr,vvr,Fvr,Pt,yx,Tvr,t2e,Mvr,Evr,uc,Cvr,a2e,wvr,Avr,FH,yvr,Lvr,xvr,QM,$vr,Pr,Lx,kvr,n2e,Svr,Rvr,dn,Bvr,s2e,Pvr,Ivr,l2e,qvr,Nvr,i2e,jvr,Dvr,Gvr,de,WM,d2e,Ovr,Vvr,TH,Xvr,zvr,Qvr,HM,c2e,Wvr,Hvr,MH,Uvr,Jvr,Yvr,UM,f2e,Kvr,Zvr,EH,eFr,oFr,rFr,JM,m2e,tFr,aFr,CH,nFr,sFr,lFr,YM,g2e,iFr,dFr,wH,cFr,fFr,mFr,KM,h2e,gFr,hFr,AH,pFr,uFr,_Fr,ZM,p2e,bFr,vFr,yH,FFr,TFr,MFr,eE,u2e,EFr,CFr,LH,wFr,AFr,yFr,oE,_2e,LFr,xFr,xH,$Fr,kFr,SFr,rE,b2e,RFr,BFr,$H,PFr,IFr,qFr,tE,v2e,NFr,jFr,kH,DFr,GFr,OFr,aE,F2e,VFr,XFr,SH,zFr,QFr,WFr,nE,T2e,HFr,UFr,RH,JFr,YFr,KFr,sE,M2e,ZFr,eTr,BH,oTr,rTr,tTr,lE,E2e,aTr,nTr,PH,sTr,lTr,iTr,iE,C2e,dTr,cTr,IH,fTr,mTr,gTr,dE,w2e,hTr,pTr,qH,uTr,_Tr,bTr,cE,A2e,vTr,FTr,NH,TTr,MTr,ETr,fE,y2e,CTr,wTr,jH,ATr,yTr,LTr,mE,L2e,xTr,$Tr,DH,kTr,STr,RTr,gE,JIe,_c,hE,x2e,xx,BTr,$2e,PTr,YIe,ir,$x,ITr,bc,qTr,GH,NTr,jTr,OH,DTr,GTr,OTr,kx,VTr,k2e,XTr,zTr,QTr,It,Sx,WTr,S2e,HTr,UTr,vc,JTr,R2e,YTr,KTr,VH,ZTr,eMr,oMr,pE,rMr,Ir,Rx,tMr,B2e,aMr,nMr,cn,sMr,P2e,lMr,iMr,I2e,dMr,cMr,q2e,fMr,mMr,gMr,ce,uE,N2e,hMr,pMr,XH,uMr,_Mr,bMr,_E,j2e,vMr,FMr,zH,TMr,MMr,EMr,bE,D2e,CMr,wMr,QH,AMr,yMr,LMr,vE,G2e,xMr,$Mr,WH,kMr,SMr,RMr,FE,O2e,BMr,PMr,HH,IMr,qMr,NMr,TE,V2e,jMr,DMr,UH,GMr,OMr,VMr,ME,X2e,XMr,zMr,JH,QMr,WMr,HMr,EE,z2e,UMr,JMr,YH,YMr,KMr,ZMr,CE,Q2e,eEr,oEr,KH,rEr,tEr,aEr,wE,W2e,nEr,sEr,ZH,lEr,iEr,dEr,AE,H2e,cEr,fEr,eU,mEr,gEr,hEr,yE,U2e,pEr,uEr,oU,_Er,bEr,vEr,LE,J2e,FEr,TEr,rU,MEr,EEr,CEr,xE,Y2e,wEr,AEr,tU,yEr,LEr,xEr,$E,K2e,$Er,kEr,aU,SEr,REr,BEr,kE,Z2e,PEr,IEr,nU,qEr,NEr,jEr,SE,e5e,DEr,GEr,sU,OEr,VEr,XEr,RE,o5e,zEr,QEr,lU,WEr,HEr,UEr,BE,r5e,JEr,YEr,iU,KEr,ZEr,eCr,PE,t5e,oCr,rCr,dU,tCr,aCr,nCr,IE,KIe,Fc,qE,a5e,Bx,sCr,n5e,lCr,ZIe,dr,Px,iCr,Tc,dCr,cU,cCr,fCr,fU,mCr,gCr,hCr,Ix,pCr,s5e,uCr,_Cr,bCr,qt,qx,vCr,l5e,FCr,TCr,Mc,MCr,i5e,ECr,CCr,mU,wCr,ACr,yCr,NE,LCr,qr,Nx,xCr,d5e,$Cr,kCr,fn,SCr,c5e,RCr,BCr,f5e,PCr,ICr,m5e,qCr,NCr,jCr,g5e,jE,h5e,DCr,GCr,gU,OCr,VCr,XCr,DE,eqe,Ec,GE,p5e,jx,zCr,u5e,QCr,oqe,cr,Dx,WCr,Cc,HCr,hU,UCr,JCr,pU,YCr,KCr,ZCr,Gx,e3r,_5e,o3r,r3r,t3r,Nt,Ox,a3r,b5e,n3r,s3r,wc,l3r,v5e,i3r,d3r,uU,c3r,f3r,m3r,OE,g3r,Nr,Vx,h3r,F5e,p3r,u3r,mn,_3r,T5e,b3r,v3r,M5e,F3r,T3r,E5e,M3r,E3r,C3r,C5e,VE,w5e,w3r,A3r,_U,y3r,L3r,x3r,XE,rqe,Ac,zE,A5e,Xx,$3r,y5e,k3r,tqe,fr,zx,S3r,yc,R3r,bU,B3r,P3r,vU,I3r,q3r,N3r,Qx,j3r,L5e,D3r,G3r,O3r,jt,Wx,V3r,x5e,X3r,z3r,Lc,Q3r,$5e,W3r,H3r,FU,U3r,J3r,Y3r,QE,K3r,jr,Hx,Z3r,k5e,ewr,owr,gn,rwr,S5e,twr,awr,R5e,nwr,swr,B5e,lwr,iwr,dwr,re,WE,P5e,cwr,fwr,TU,mwr,gwr,hwr,HE,I5e,pwr,uwr,MU,_wr,bwr,vwr,UE,q5e,Fwr,Twr,EU,Mwr,Ewr,Cwr,JE,N5e,wwr,Awr,CU,ywr,Lwr,xwr,YE,j5e,$wr,kwr,wU,Swr,Rwr,Bwr,KE,D5e,Pwr,Iwr,AU,qwr,Nwr,jwr,ZE,G5e,Dwr,Gwr,yU,Owr,Vwr,Xwr,eC,O5e,zwr,Qwr,LU,Wwr,Hwr,Uwr,oC,V5e,Jwr,Ywr,xU,Kwr,Zwr,eAr,rC,X5e,oAr,rAr,$U,tAr,aAr,nAr,tC,z5e,sAr,lAr,kU,iAr,dAr,cAr,aC,Q5e,fAr,mAr,SU,gAr,hAr,pAr,nC,W5e,uAr,_Ar,RU,bAr,vAr,FAr,sC,H5e,TAr,MAr,BU,EAr,CAr,wAr,lC,U5e,AAr,yAr,PU,LAr,xAr,$Ar,iC,J5e,kAr,SAr,IU,RAr,BAr,PAr,dC,Y5e,IAr,qAr,qU,NAr,jAr,DAr,cC,K5e,GAr,OAr,NU,VAr,XAr,zAr,fC,Z5e,QAr,WAr,jU,HAr,UAr,JAr,mC,eve,YAr,KAr,DU,ZAr,e0r,o0r,gC,ove,r0r,t0r,GU,a0r,n0r,s0r,hC,rve,l0r,i0r,OU,d0r,c0r,f0r,pC,tve,m0r,g0r,VU,h0r,p0r,u0r,uC,ave,_0r,b0r,XU,v0r,F0r,T0r,_C,nve,M0r,E0r,zU,C0r,w0r,A0r,bC,aqe,xc,vC,sve,Ux,y0r,lve,L0r,nqe,mr,Jx,x0r,$c,$0r,QU,k0r,S0r,WU,R0r,B0r,P0r,Yx,I0r,ive,q0r,N0r,j0r,Dt,Kx,D0r,dve,G0r,O0r,kc,V0r,cve,X0r,z0r,HU,Q0r,W0r,H0r,FC,U0r,Dr,Zx,J0r,fve,Y0r,K0r,hn,Z0r,mve,eyr,oyr,gve,ryr,tyr,hve,ayr,nyr,syr,ke,TC,pve,lyr,iyr,UU,dyr,cyr,fyr,MC,uve,myr,gyr,JU,hyr,pyr,uyr,EC,_ve,_yr,byr,YU,vyr,Fyr,Tyr,CC,bve,Myr,Eyr,KU,Cyr,wyr,Ayr,wC,vve,yyr,Lyr,ZU,xyr,$yr,kyr,AC,Fve,Syr,Ryr,eJ,Byr,Pyr,Iyr,yC,Tve,qyr,Nyr,oJ,jyr,Dyr,Gyr,LC,Mve,Oyr,Vyr,rJ,Xyr,zyr,Qyr,xC,Eve,Wyr,Hyr,tJ,Uyr,Jyr,Yyr,$C,sqe,Sc,kC,Cve,e7,Kyr,wve,Zyr,lqe,gr,o7,eLr,Rc,oLr,aJ,rLr,tLr,nJ,aLr,nLr,sLr,r7,lLr,Ave,iLr,dLr,cLr,Gt,t7,fLr,yve,mLr,gLr,Bc,hLr,Lve,pLr,uLr,sJ,_Lr,bLr,vLr,SC,FLr,Gr,a7,TLr,xve,MLr,ELr,pn,CLr,$ve,wLr,ALr,kve,yLr,LLr,Sve,xLr,$Lr,kLr,Me,RC,Rve,SLr,RLr,lJ,BLr,PLr,ILr,BC,Bve,qLr,NLr,iJ,jLr,DLr,GLr,PC,Pve,OLr,VLr,dJ,XLr,zLr,QLr,IC,Ive,WLr,HLr,cJ,ULr,JLr,YLr,qC,qve,KLr,ZLr,fJ,e8r,o8r,r8r,NC,Nve,t8r,a8r,mJ,n8r,s8r,l8r,jC,jve,i8r,d8r,gJ,c8r,f8r,m8r,DC,Dve,g8r,h8r,hJ,p8r,u8r,_8r,GC,Gve,b8r,v8r,pJ,F8r,T8r,M8r,OC,Ove,E8r,C8r,uJ,w8r,A8r,y8r,VC,Vve,L8r,x8r,_J,$8r,k8r,S8r,XC,Xve,R8r,B8r,bJ,P8r,I8r,q8r,zC,iqe,Pc,QC,zve,n7,N8r,Qve,j8r,dqe,hr,s7,D8r,Ic,G8r,vJ,O8r,V8r,FJ,X8r,z8r,Q8r,l7,W8r,Wve,H8r,U8r,J8r,Ot,i7,Y8r,Hve,K8r,Z8r,qc,exr,Uve,oxr,rxr,TJ,txr,axr,nxr,WC,sxr,Or,d7,lxr,Jve,ixr,dxr,un,cxr,Yve,fxr,mxr,Kve,gxr,hxr,Zve,pxr,uxr,_xr,Le,HC,eFe,bxr,vxr,MJ,Fxr,Txr,Mxr,UC,oFe,Exr,Cxr,EJ,wxr,Axr,yxr,JC,rFe,Lxr,xxr,CJ,$xr,kxr,Sxr,YC,tFe,Rxr,Bxr,wJ,Pxr,Ixr,qxr,KC,aFe,Nxr,jxr,AJ,Dxr,Gxr,Oxr,ZC,nFe,Vxr,Xxr,yJ,zxr,Qxr,Wxr,e3,sFe,Hxr,Uxr,LJ,Jxr,Yxr,Kxr,o3,lFe,Zxr,e7r,xJ,o7r,r7r,t7r,r3,iFe,a7r,n7r,$J,s7r,l7r,i7r,t3,dFe,d7r,c7r,kJ,f7r,m7r,g7r,a3,cqe,Nc,n3,cFe,c7,h7r,fFe,p7r,fqe,pr,f7,u7r,jc,_7r,SJ,b7r,v7r,RJ,F7r,T7r,M7r,m7,E7r,mFe,C7r,w7r,A7r,Vt,g7,y7r,gFe,L7r,x7r,Dc,$7r,hFe,k7r,S7r,BJ,R7r,B7r,P7r,s3,I7r,Vr,h7,q7r,pFe,N7r,j7r,_n,D7r,uFe,G7r,O7r,_Fe,V7r,X7r,bFe,z7r,Q7r,W7r,Se,l3,vFe,H7r,U7r,PJ,J7r,Y7r,K7r,i3,FFe,Z7r,e9r,IJ,o9r,r9r,t9r,d3,TFe,a9r,n9r,qJ,s9r,l9r,i9r,c3,MFe,d9r,c9r,NJ,f9r,m9r,g9r,f3,EFe,h9r,p9r,jJ,u9r,_9r,b9r,m3,CFe,v9r,F9r,DJ,T9r,M9r,E9r,g3,wFe,C9r,w9r,GJ,A9r,y9r,L9r,h3,AFe,x9r,$9r,OJ,k9r,S9r,R9r,p3,yFe,B9r,P9r,VJ,I9r,q9r,N9r,u3,mqe,Gc,_3,LFe,p7,j9r,xFe,D9r,gqe,ur,u7,G9r,Oc,O9r,XJ,V9r,X9r,zJ,z9r,Q9r,W9r,_7,H9r,$Fe,U9r,J9r,Y9r,Xt,b7,K9r,kFe,Z9r,e$r,Vc,o$r,SFe,r$r,t$r,QJ,a$r,n$r,s$r,b3,l$r,Xr,v7,i$r,RFe,d$r,c$r,bn,f$r,BFe,m$r,g$r,PFe,h$r,p$r,IFe,u$r,_$r,b$r,xe,v3,qFe,v$r,F$r,WJ,T$r,M$r,E$r,F3,NFe,C$r,w$r,HJ,A$r,y$r,L$r,T3,jFe,x$r,$$r,UJ,k$r,S$r,R$r,M3,DFe,B$r,P$r,JJ,I$r,q$r,N$r,E3,GFe,j$r,D$r,YJ,G$r,O$r,V$r,C3,OFe,X$r,z$r,KJ,Q$r,W$r,H$r,w3,VFe,U$r,J$r,ZJ,Y$r,K$r,Z$r,A3,XFe,ekr,okr,eY,rkr,tkr,akr,y3,zFe,nkr,skr,oY,lkr,ikr,dkr,L3,QFe,ckr,fkr,rY,mkr,gkr,hkr,x3,hqe,Xc,$3,WFe,F7,pkr,HFe,ukr,pqe,_r,T7,_kr,zc,bkr,tY,vkr,Fkr,aY,Tkr,Mkr,Ekr,M7,Ckr,UFe,wkr,Akr,ykr,zt,E7,Lkr,JFe,xkr,$kr,Qc,kkr,YFe,Skr,Rkr,nY,Bkr,Pkr,Ikr,k3,qkr,zr,C7,Nkr,KFe,jkr,Dkr,vn,Gkr,ZFe,Okr,Vkr,eTe,Xkr,zkr,oTe,Qkr,Wkr,Hkr,$e,S3,rTe,Ukr,Jkr,sY,Ykr,Kkr,Zkr,R3,tTe,eSr,oSr,lY,rSr,tSr,aSr,B3,aTe,nSr,sSr,iY,lSr,iSr,dSr,P3,nTe,cSr,fSr,dY,mSr,gSr,hSr,I3,sTe,pSr,uSr,cY,_Sr,bSr,vSr,q3,lTe,FSr,TSr,fY,MSr,ESr,CSr,N3,iTe,wSr,ASr,mY,ySr,LSr,xSr,j3,dTe,$Sr,kSr,gY,SSr,RSr,BSr,D3,cTe,PSr,ISr,hY,qSr,NSr,jSr,G3,fTe,DSr,GSr,pY,OSr,VSr,XSr,O3,uqe,Wc,V3,mTe,w7,zSr,gTe,QSr,_qe,br,A7,WSr,Hc,HSr,uY,USr,JSr,_Y,YSr,KSr,ZSr,y7,eRr,hTe,oRr,rRr,tRr,Qt,L7,aRr,pTe,nRr,sRr,Uc,lRr,uTe,iRr,dRr,bY,cRr,fRr,mRr,X3,gRr,Qr,x7,hRr,_Te,pRr,uRr,Fn,_Rr,bTe,bRr,vRr,vTe,FRr,TRr,FTe,MRr,ERr,CRr,De,z3,TTe,wRr,ARr,vY,yRr,LRr,xRr,Q3,MTe,$Rr,kRr,FY,SRr,RRr,BRr,W3,ETe,PRr,IRr,TY,qRr,NRr,jRr,H3,CTe,DRr,GRr,MY,ORr,VRr,XRr,U3,wTe,zRr,QRr,EY,WRr,HRr,URr,J3,ATe,JRr,YRr,CY,KRr,ZRr,eBr,Y3,yTe,oBr,rBr,wY,tBr,aBr,nBr,K3,LTe,sBr,lBr,AY,iBr,dBr,cBr,Z3,bqe,Jc,ew,xTe,$7,fBr,$Te,mBr,vqe,vr,k7,gBr,Yc,hBr,yY,pBr,uBr,LY,_Br,bBr,vBr,S7,FBr,kTe,TBr,MBr,EBr,Wt,R7,CBr,STe,wBr,ABr,Kc,yBr,RTe,LBr,xBr,xY,$Br,kBr,SBr,ow,RBr,Wr,B7,BBr,BTe,PBr,IBr,Tn,qBr,PTe,NBr,jBr,ITe,DBr,GBr,qTe,OBr,VBr,XBr,Ge,rw,NTe,zBr,QBr,$Y,WBr,HBr,UBr,tw,jTe,JBr,YBr,kY,KBr,ZBr,ePr,aw,DTe,oPr,rPr,SY,tPr,aPr,nPr,nw,GTe,sPr,lPr,RY,iPr,dPr,cPr,sw,OTe,fPr,mPr,BY,gPr,hPr,pPr,lw,VTe,uPr,_Pr,PY,bPr,vPr,FPr,iw,XTe,TPr,MPr,IY,EPr,CPr,wPr,dw,zTe,APr,yPr,qY,LPr,xPr,$Pr,cw,Fqe,Zc,fw,QTe,P7,kPr,WTe,SPr,Tqe,Fr,I7,RPr,ef,BPr,NY,PPr,IPr,jY,qPr,NPr,jPr,q7,DPr,HTe,GPr,OPr,VPr,Ht,N7,XPr,UTe,zPr,QPr,of,WPr,JTe,HPr,UPr,DY,JPr,YPr,KPr,mw,ZPr,Hr,j7,eIr,YTe,oIr,rIr,Mn,tIr,KTe,aIr,nIr,ZTe,sIr,lIr,eMe,iIr,dIr,cIr,oMe,gw,rMe,fIr,mIr,GY,gIr,hIr,pIr,hw,Mqe,rf,pw,tMe,D7,uIr,aMe,_Ir,Eqe,Tr,G7,bIr,tf,vIr,OY,FIr,TIr,VY,MIr,EIr,CIr,O7,wIr,nMe,AIr,yIr,LIr,Ut,V7,xIr,sMe,$Ir,kIr,af,SIr,lMe,RIr,BIr,XY,PIr,IIr,qIr,uw,NIr,Ur,X7,jIr,iMe,DIr,GIr,En,OIr,dMe,VIr,XIr,cMe,zIr,QIr,fMe,WIr,HIr,UIr,z7,_w,mMe,JIr,YIr,zY,KIr,ZIr,eqr,bw,gMe,oqr,rqr,QY,tqr,aqr,nqr,vw,Cqe,nf,Fw,hMe,Q7,sqr,pMe,lqr,wqe,Mr,W7,iqr,sf,dqr,WY,cqr,fqr,HY,mqr,gqr,hqr,H7,pqr,uMe,uqr,_qr,bqr,Jt,U7,vqr,_Me,Fqr,Tqr,lf,Mqr,bMe,Eqr,Cqr,UY,wqr,Aqr,yqr,Tw,Lqr,Jr,J7,xqr,vMe,$qr,kqr,Cn,Sqr,FMe,Rqr,Bqr,TMe,Pqr,Iqr,MMe,qqr,Nqr,jqr,EMe,Mw,CMe,Dqr,Gqr,JY,Oqr,Vqr,Xqr,Ew,Aqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Q0=new ee({}),W0=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new zqr({props:{warning:!0,$$slots:{default:[f0t]},$$scope:{ctx:A}}}),H0=new ee({}),U0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/configuration_auto.py#L566"}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/configuration_auto.py#L589"}}),pg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[m0t]},$$scope:{ctx:A}}}),Z0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/configuration_auto.py#L711"}}),ey=new ee({}),oy=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/tokenization_auto.py#L377"}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/tokenization_auto.py#L391"}}),Wg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[g0t]},$$scope:{ctx:A}}}),ny=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/tokenization_auto.py#L587"}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),Th=new zqr({props:{$$slots:{default:[h0t]},$$scope:{ctx:A}}}),Mh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[p0t]},$$scope:{ctx:A}}}),fy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),my=new ee({}),gy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/processing_auto.py#L77"}}),uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/processing_auto.py#L91"}}),Dh=new zqr({props:{$$slots:{default:[u0t]},$$scope:{ctx:A}}}),Gh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_0t]},$$scope:{ctx:A}}}),_y=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/processing_auto.py#L244"}}),by=new ee({}),vy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L718"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Xh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[b0t]},$$scope:{ctx:A}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Ru=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[v0t]},$$scope:{ctx:A}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L725"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Pu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[F0t]},$$scope:{ctx:A}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),E_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[T0t]},$$scope:{ctx:A}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L740"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),w_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[M0t]},$$scope:{ctx:A}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[E0t]},$$scope:{ctx:A}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L747"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[C0t]},$$scope:{ctx:A}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),W6=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[w0t]},$$scope:{ctx:A}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L754"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),U6=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[A0t]},$$scope:{ctx:A}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),h1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[y0t]},$$scope:{ctx:A}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L763"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),u1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[L0t]},$$scope:{ctx:A}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),fb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[x0t]},$$scope:{ctx:A}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L797"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),gb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$0t]},$$scope:{ctx:A}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[k0t]},$$scope:{ctx:A}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L804"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[S0t]},$$scope:{ctx:A}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Kb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[R0t]},$$scope:{ctx:A}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L790"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),e4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[B0t]},$$scope:{ctx:A}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[P0t]},$$scope:{ctx:A}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L772"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[I0t]},$$scope:{ctx:A}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),C2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[q0t]},$$scope:{ctx:A}}}),hL=new ee({}),pL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L779"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),A2=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N0t]},$$scope:{ctx:A}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),x2=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j0t]},$$scope:{ctx:A}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L813"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),k2=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[D0t]},$$scope:{ctx:A}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),X2=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[G0t]},$$scope:{ctx:A}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L852"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Q2=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[O0t]},$$scope:{ctx:A}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),U2=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[V0t]},$$scope:{ctx:A}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L859"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Y2=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[X0t]},$$scope:{ctx:A}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[z0t]},$$scope:{ctx:A}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L882"}}),qL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Q0t]},$$scope:{ctx:A}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[W0t]},$$scope:{ctx:A}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L866"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[H0t]},$$scope:{ctx:A}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[U0t]},$$scope:{ctx:A}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L873"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[J0t]},$$scope:{ctx:A}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Y0t]},$$scope:{ctx:A}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L891"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[K0t]},$$scope:{ctx:A}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),G5=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Z0t]},$$scope:{ctx:A}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L898"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),V5=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[eyt]},$$scope:{ctx:A}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),H5=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oyt]},$$scope:{ctx:A}}}),s8=new ee({}),l8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L845"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),J5=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[ryt]},$$scope:{ctx:A}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tyt]},$$scope:{ctx:A}}}),m8=new ee({}),g8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L820"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[ayt]},$$scope:{ctx:A}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nyt]},$$scope:{ctx:A}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L827"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[syt]},$$scope:{ctx:A}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lyt]},$$scope:{ctx:A}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L836"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iyt]},$$scope:{ctx:A}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dyt]},$$scope:{ctx:A}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[cyt]},$$scope:{ctx:A}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),fF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fyt]},$$scope:{ctx:A}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[myt]},$$scope:{ctx:A}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),qF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gyt]},$$scope:{ctx:A}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hyt]},$$scope:{ctx:A}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pyt]},$$scope:{ctx:A}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[uyt]},$$scope:{ctx:A}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_yt]},$$scope:{ctx:A}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[byt]},$$scope:{ctx:A}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vyt]},$$scope:{ctx:A}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Fyt]},$$scope:{ctx:A}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Tyt]},$$scope:{ctx:A}}}),tx=new ee({}),ax=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Myt]},$$scope:{ctx:A}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),pM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Eyt]},$$scope:{ctx:A}}}),ix=new ee({}),dx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Cyt]},$$scope:{ctx:A}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wyt]},$$scope:{ctx:A}}}),gx=new ee({}),hx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),ux=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Ayt]},$$scope:{ctx:A}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[yyt]},$$scope:{ctx:A}}}),vx=new ee({}),Fx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Lyt]},$$scope:{ctx:A}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xyt]},$$scope:{ctx:A}}}),Cx=new ee({}),wx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$yt]},$$scope:{ctx:A}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kyt]},$$scope:{ctx:A}}}),xx=new ee({}),$x=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Syt]},$$scope:{ctx:A}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ryt]},$$scope:{ctx:A}}}),Bx=new ee({}),Px=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),qx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Byt]},$$scope:{ctx:A}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Pyt]},$$scope:{ctx:A}}}),jx=new ee({}),Dx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Iyt]},$$scope:{ctx:A}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qyt]},$$scope:{ctx:A}}}),Xx=new ee({}),zx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Nyt]},$$scope:{ctx:A}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jyt]},$$scope:{ctx:A}}}),Ux=new ee({}),Jx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),FC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Dyt]},$$scope:{ctx:A}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Gyt]},$$scope:{ctx:A}}}),e7=new ee({}),o7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),t7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),SC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Oyt]},$$scope:{ctx:A}}}),a7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Vyt]},$$scope:{ctx:A}}}),n7=new ee({}),s7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),i7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Xyt]},$$scope:{ctx:A}}}),d7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zyt]},$$scope:{ctx:A}}}),c7=new ee({}),f7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),g7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Qyt]},$$scope:{ctx:A}}}),h7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),u3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Wyt]},$$scope:{ctx:A}}}),p7=new ee({}),u7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),b7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),b3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Hyt]},$$scope:{ctx:A}}}),v7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Uyt]},$$scope:{ctx:A}}}),F7=new ee({}),T7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),E7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Jyt]},$$scope:{ctx:A}}}),C7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),O3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Yyt]},$$scope:{ctx:A}}}),w7=new ee({}),A7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),L7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kyt]},$$scope:{ctx:A}}}),x7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zyt]},$$scope:{ctx:A}}}),$7=new ee({}),k7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),R7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),ow=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eLt]},$$scope:{ctx:A}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),cw=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oLt]},$$scope:{ctx:A}}}),P7=new ee({}),I7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),N7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),mw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rLt]},$$scope:{ctx:A}}}),j7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tLt]},$$scope:{ctx:A}}}),D7=new ee({}),G7=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),V7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aLt]},$$scope:{ctx:A}}}),X7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nLt]},$$scope:{ctx:A}}}),Q7=new ee({}),W7=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),U7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Tw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sLt]},$$scope:{ctx:A}}}),J7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Ew=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lLt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),O0=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),V0=o("AutoConfig"),yn=o(", "),Ln=a("a"),X0=o("AutoModel"),fi=o(`, and
`),xn=a("a"),z0=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),d$=o("will create a model that is an instance of "),gi=a("a"),c$=o("BertModel"),f$=o("."),Eo=l(),Ea=a("p"),m$=o("There is one class of "),pf=a("code"),g$=o("AutoModel"),Bje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),EPe=l(),hi=a("h2"),uf=a("a"),XZ=a("span"),F(Q0.$$.fragment),Pje=l(),zZ=a("span"),Ije=o("Extending the Auto Classes"),CPe=l(),$n=a("p"),qje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QZ=a("code"),Nje=o("NewModel"),jje=o(", make sure you have a "),WZ=a("code"),Dje=o("NewModelConfig"),Gje=o(` then you can add those to the auto
classes like this:`),wPe=l(),F(W0.$$.fragment),APe=l(),h$=a("p"),Oje=o("You will then be able to use the auto classes like you would usually do!"),yPe=l(),F(_f.$$.fragment),LPe=l(),pi=a("h2"),bf=a("a"),HZ=a("span"),F(H0.$$.fragment),Vje=l(),UZ=a("span"),Xje=o("AutoConfig"),xPe=l(),Co=a("div"),F(U0.$$.fragment),zje=l(),J0=a("p"),Qje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p$=a("a"),Wje=o("from_pretrained()"),Hje=o(" class method."),Uje=l(),Y0=a("p"),Jje=o("This class cannot be instantiated directly using "),JZ=a("code"),Yje=o("__init__()"),Kje=o(" (throws an error)."),Zje=l(),Er=a("div"),F(K0.$$.fragment),eDe=l(),YZ=a("p"),oDe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),rDe=l(),ui=a("p"),tDe=o("The configuration class to instantiate is selected based on the "),KZ=a("code"),aDe=o("model_type"),nDe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ZZ=a("code"),sDe=o("pretrained_model_name_or_path"),lDe=o(":"),iDe=l(),y=a("ul"),vf=a("li"),eee=a("strong"),dDe=o("albert"),cDe=o(" \u2014 "),u$=a("a"),fDe=o("AlbertConfig"),mDe=o(" (ALBERT model)"),gDe=l(),Ff=a("li"),oee=a("strong"),hDe=o("bart"),pDe=o(" \u2014 "),_$=a("a"),uDe=o("BartConfig"),_De=o(" (BART model)"),bDe=l(),Tf=a("li"),ree=a("strong"),vDe=o("beit"),FDe=o(" \u2014 "),b$=a("a"),TDe=o("BeitConfig"),MDe=o(" (BEiT model)"),EDe=l(),Mf=a("li"),tee=a("strong"),CDe=o("bert"),wDe=o(" \u2014 "),v$=a("a"),ADe=o("BertConfig"),yDe=o(" (BERT model)"),LDe=l(),Ef=a("li"),aee=a("strong"),xDe=o("bert-generation"),$De=o(" \u2014 "),F$=a("a"),kDe=o("BertGenerationConfig"),SDe=o(" (Bert Generation model)"),RDe=l(),Cf=a("li"),nee=a("strong"),BDe=o("big_bird"),PDe=o(" \u2014 "),T$=a("a"),IDe=o("BigBirdConfig"),qDe=o(" (BigBird model)"),NDe=l(),wf=a("li"),see=a("strong"),jDe=o("bigbird_pegasus"),DDe=o(" \u2014 "),M$=a("a"),GDe=o("BigBirdPegasusConfig"),ODe=o(" (BigBirdPegasus model)"),VDe=l(),Af=a("li"),lee=a("strong"),XDe=o("blenderbot"),zDe=o(" \u2014 "),E$=a("a"),QDe=o("BlenderbotConfig"),WDe=o(" (Blenderbot model)"),HDe=l(),yf=a("li"),iee=a("strong"),UDe=o("blenderbot-small"),JDe=o(" \u2014 "),C$=a("a"),YDe=o("BlenderbotSmallConfig"),KDe=o(" (BlenderbotSmall model)"),ZDe=l(),Lf=a("li"),dee=a("strong"),eGe=o("camembert"),oGe=o(" \u2014 "),w$=a("a"),rGe=o("CamembertConfig"),tGe=o(" (CamemBERT model)"),aGe=l(),xf=a("li"),cee=a("strong"),nGe=o("canine"),sGe=o(" \u2014 "),A$=a("a"),lGe=o("CanineConfig"),iGe=o(" (Canine model)"),dGe=l(),$f=a("li"),fee=a("strong"),cGe=o("clip"),fGe=o(" \u2014 "),y$=a("a"),mGe=o("CLIPConfig"),gGe=o(" (CLIP model)"),hGe=l(),kf=a("li"),mee=a("strong"),pGe=o("convbert"),uGe=o(" \u2014 "),L$=a("a"),_Ge=o("ConvBertConfig"),bGe=o(" (ConvBERT model)"),vGe=l(),Sf=a("li"),gee=a("strong"),FGe=o("convnext"),TGe=o(" \u2014 "),x$=a("a"),MGe=o("ConvNextConfig"),EGe=o(" (ConvNext model)"),CGe=l(),Rf=a("li"),hee=a("strong"),wGe=o("ctrl"),AGe=o(" \u2014 "),$$=a("a"),yGe=o("CTRLConfig"),LGe=o(" (CTRL model)"),xGe=l(),Bf=a("li"),pee=a("strong"),$Ge=o("data2vec-audio"),kGe=o(" \u2014 "),k$=a("a"),SGe=o("Data2VecAudioConfig"),RGe=o(" (Data2VecAudio model)"),BGe=l(),Pf=a("li"),uee=a("strong"),PGe=o("data2vec-text"),IGe=o(" \u2014 "),S$=a("a"),qGe=o("Data2VecTextConfig"),NGe=o(" (Data2VecText model)"),jGe=l(),If=a("li"),_ee=a("strong"),DGe=o("data2vec-vision"),GGe=o(" \u2014 "),R$=a("a"),OGe=o("Data2VecVisionConfig"),VGe=o(" (Data2VecVision model)"),XGe=l(),qf=a("li"),bee=a("strong"),zGe=o("deberta"),QGe=o(" \u2014 "),B$=a("a"),WGe=o("DebertaConfig"),HGe=o(" (DeBERTa model)"),UGe=l(),Nf=a("li"),vee=a("strong"),JGe=o("deberta-v2"),YGe=o(" \u2014 "),P$=a("a"),KGe=o("DebertaV2Config"),ZGe=o(" (DeBERTa-v2 model)"),eOe=l(),jf=a("li"),Fee=a("strong"),oOe=o("decision_transformer"),rOe=o(" \u2014 "),I$=a("a"),tOe=o("DecisionTransformerConfig"),aOe=o(" (Decision Transformer model)"),nOe=l(),Df=a("li"),Tee=a("strong"),sOe=o("deit"),lOe=o(" \u2014 "),q$=a("a"),iOe=o("DeiTConfig"),dOe=o(" (DeiT model)"),cOe=l(),Gf=a("li"),Mee=a("strong"),fOe=o("detr"),mOe=o(" \u2014 "),N$=a("a"),gOe=o("DetrConfig"),hOe=o(" (DETR model)"),pOe=l(),Of=a("li"),Eee=a("strong"),uOe=o("distilbert"),_Oe=o(" \u2014 "),j$=a("a"),bOe=o("DistilBertConfig"),vOe=o(" (DistilBERT model)"),FOe=l(),Vf=a("li"),Cee=a("strong"),TOe=o("dpr"),MOe=o(" \u2014 "),D$=a("a"),EOe=o("DPRConfig"),COe=o(" (DPR model)"),wOe=l(),Xf=a("li"),wee=a("strong"),AOe=o("dpt"),yOe=o(" \u2014 "),G$=a("a"),LOe=o("DPTConfig"),xOe=o(" (DPT model)"),$Oe=l(),zf=a("li"),Aee=a("strong"),kOe=o("electra"),SOe=o(" \u2014 "),O$=a("a"),ROe=o("ElectraConfig"),BOe=o(" (ELECTRA model)"),POe=l(),Qf=a("li"),yee=a("strong"),IOe=o("encoder-decoder"),qOe=o(" \u2014 "),V$=a("a"),NOe=o("EncoderDecoderConfig"),jOe=o(" (Encoder decoder model)"),DOe=l(),Wf=a("li"),Lee=a("strong"),GOe=o("flaubert"),OOe=o(" \u2014 "),X$=a("a"),VOe=o("FlaubertConfig"),XOe=o(" (FlauBERT model)"),zOe=l(),Hf=a("li"),xee=a("strong"),QOe=o("flava"),WOe=o(" \u2014 "),z$=a("a"),HOe=o("FlavaConfig"),UOe=o(" (Flava model)"),JOe=l(),Uf=a("li"),$ee=a("strong"),YOe=o("fnet"),KOe=o(" \u2014 "),Q$=a("a"),ZOe=o("FNetConfig"),eVe=o(" (FNet model)"),oVe=l(),Jf=a("li"),kee=a("strong"),rVe=o("fsmt"),tVe=o(" \u2014 "),W$=a("a"),aVe=o("FSMTConfig"),nVe=o(" (FairSeq Machine-Translation model)"),sVe=l(),Yf=a("li"),See=a("strong"),lVe=o("funnel"),iVe=o(" \u2014 "),H$=a("a"),dVe=o("FunnelConfig"),cVe=o(" (Funnel Transformer model)"),fVe=l(),Kf=a("li"),Ree=a("strong"),mVe=o("glpn"),gVe=o(" \u2014 "),U$=a("a"),hVe=o("GLPNConfig"),pVe=o(" (GLPN model)"),uVe=l(),Zf=a("li"),Bee=a("strong"),_Ve=o("gpt2"),bVe=o(" \u2014 "),J$=a("a"),vVe=o("GPT2Config"),FVe=o(" (OpenAI GPT-2 model)"),TVe=l(),em=a("li"),Pee=a("strong"),MVe=o("gpt_neo"),EVe=o(" \u2014 "),Y$=a("a"),CVe=o("GPTNeoConfig"),wVe=o(" (GPT Neo model)"),AVe=l(),om=a("li"),Iee=a("strong"),yVe=o("gptj"),LVe=o(" \u2014 "),K$=a("a"),xVe=o("GPTJConfig"),$Ve=o(" (GPT-J model)"),kVe=l(),rm=a("li"),qee=a("strong"),SVe=o("hubert"),RVe=o(" \u2014 "),Z$=a("a"),BVe=o("HubertConfig"),PVe=o(" (Hubert model)"),IVe=l(),tm=a("li"),Nee=a("strong"),qVe=o("ibert"),NVe=o(" \u2014 "),ek=a("a"),jVe=o("IBertConfig"),DVe=o(" (I-BERT model)"),GVe=l(),am=a("li"),jee=a("strong"),OVe=o("imagegpt"),VVe=o(" \u2014 "),ok=a("a"),XVe=o("ImageGPTConfig"),zVe=o(" (ImageGPT model)"),QVe=l(),nm=a("li"),Dee=a("strong"),WVe=o("layoutlm"),HVe=o(" \u2014 "),rk=a("a"),UVe=o("LayoutLMConfig"),JVe=o(" (LayoutLM model)"),YVe=l(),sm=a("li"),Gee=a("strong"),KVe=o("layoutlmv2"),ZVe=o(" \u2014 "),tk=a("a"),eXe=o("LayoutLMv2Config"),oXe=o(" (LayoutLMv2 model)"),rXe=l(),lm=a("li"),Oee=a("strong"),tXe=o("led"),aXe=o(" \u2014 "),ak=a("a"),nXe=o("LEDConfig"),sXe=o(" (LED model)"),lXe=l(),im=a("li"),Vee=a("strong"),iXe=o("longformer"),dXe=o(" \u2014 "),nk=a("a"),cXe=o("LongformerConfig"),fXe=o(" (Longformer model)"),mXe=l(),dm=a("li"),Xee=a("strong"),gXe=o("luke"),hXe=o(" \u2014 "),sk=a("a"),pXe=o("LukeConfig"),uXe=o(" (LUKE model)"),_Xe=l(),cm=a("li"),zee=a("strong"),bXe=o("lxmert"),vXe=o(" \u2014 "),lk=a("a"),FXe=o("LxmertConfig"),TXe=o(" (LXMERT model)"),MXe=l(),fm=a("li"),Qee=a("strong"),EXe=o("m2m_100"),CXe=o(" \u2014 "),ik=a("a"),wXe=o("M2M100Config"),AXe=o(" (M2M100 model)"),yXe=l(),mm=a("li"),Wee=a("strong"),LXe=o("marian"),xXe=o(" \u2014 "),dk=a("a"),$Xe=o("MarianConfig"),kXe=o(" (Marian model)"),SXe=l(),gm=a("li"),Hee=a("strong"),RXe=o("maskformer"),BXe=o(" \u2014 "),ck=a("a"),PXe=o("MaskFormerConfig"),IXe=o(" (MaskFormer model)"),qXe=l(),hm=a("li"),Uee=a("strong"),NXe=o("mbart"),jXe=o(" \u2014 "),fk=a("a"),DXe=o("MBartConfig"),GXe=o(" (mBART model)"),OXe=l(),pm=a("li"),Jee=a("strong"),VXe=o("megatron-bert"),XXe=o(" \u2014 "),mk=a("a"),zXe=o("MegatronBertConfig"),QXe=o(" (MegatronBert model)"),WXe=l(),um=a("li"),Yee=a("strong"),HXe=o("mobilebert"),UXe=o(" \u2014 "),gk=a("a"),JXe=o("MobileBertConfig"),YXe=o(" (MobileBERT model)"),KXe=l(),_m=a("li"),Kee=a("strong"),ZXe=o("mpnet"),eze=o(" \u2014 "),hk=a("a"),oze=o("MPNetConfig"),rze=o(" (MPNet model)"),tze=l(),bm=a("li"),Zee=a("strong"),aze=o("mt5"),nze=o(" \u2014 "),pk=a("a"),sze=o("MT5Config"),lze=o(" (mT5 model)"),ize=l(),vm=a("li"),eoe=a("strong"),dze=o("nystromformer"),cze=o(" \u2014 "),uk=a("a"),fze=o("NystromformerConfig"),mze=o(" (Nystromformer model)"),gze=l(),Fm=a("li"),ooe=a("strong"),hze=o("openai-gpt"),pze=o(" \u2014 "),_k=a("a"),uze=o("OpenAIGPTConfig"),_ze=o(" (OpenAI GPT model)"),bze=l(),Tm=a("li"),roe=a("strong"),vze=o("pegasus"),Fze=o(" \u2014 "),bk=a("a"),Tze=o("PegasusConfig"),Mze=o(" (Pegasus model)"),Eze=l(),Mm=a("li"),toe=a("strong"),Cze=o("perceiver"),wze=o(" \u2014 "),vk=a("a"),Aze=o("PerceiverConfig"),yze=o(" (Perceiver model)"),Lze=l(),Em=a("li"),aoe=a("strong"),xze=o("plbart"),$ze=o(" \u2014 "),Fk=a("a"),kze=o("PLBartConfig"),Sze=o(" (PLBart model)"),Rze=l(),Cm=a("li"),noe=a("strong"),Bze=o("poolformer"),Pze=o(" \u2014 "),Tk=a("a"),Ize=o("PoolFormerConfig"),qze=o(" (PoolFormer model)"),Nze=l(),wm=a("li"),soe=a("strong"),jze=o("prophetnet"),Dze=o(" \u2014 "),Mk=a("a"),Gze=o("ProphetNetConfig"),Oze=o(" (ProphetNet model)"),Vze=l(),Am=a("li"),loe=a("strong"),Xze=o("qdqbert"),zze=o(" \u2014 "),Ek=a("a"),Qze=o("QDQBertConfig"),Wze=o(" (QDQBert model)"),Hze=l(),ym=a("li"),ioe=a("strong"),Uze=o("rag"),Jze=o(" \u2014 "),Ck=a("a"),Yze=o("RagConfig"),Kze=o(" (RAG model)"),Zze=l(),Lm=a("li"),doe=a("strong"),eQe=o("realm"),oQe=o(" \u2014 "),wk=a("a"),rQe=o("RealmConfig"),tQe=o(" (Realm model)"),aQe=l(),xm=a("li"),coe=a("strong"),nQe=o("reformer"),sQe=o(" \u2014 "),Ak=a("a"),lQe=o("ReformerConfig"),iQe=o(" (Reformer model)"),dQe=l(),$m=a("li"),foe=a("strong"),cQe=o("regnet"),fQe=o(" \u2014 "),yk=a("a"),mQe=o("RegNetConfig"),gQe=o(" (RegNet model)"),hQe=l(),km=a("li"),moe=a("strong"),pQe=o("rembert"),uQe=o(" \u2014 "),Lk=a("a"),_Qe=o("RemBertConfig"),bQe=o(" (RemBERT model)"),vQe=l(),Sm=a("li"),goe=a("strong"),FQe=o("resnet"),TQe=o(" \u2014 "),xk=a("a"),MQe=o("ResNetConfig"),EQe=o(" (ResNet model)"),CQe=l(),Rm=a("li"),hoe=a("strong"),wQe=o("retribert"),AQe=o(" \u2014 "),$k=a("a"),yQe=o("RetriBertConfig"),LQe=o(" (RetriBERT model)"),xQe=l(),Bm=a("li"),poe=a("strong"),$Qe=o("roberta"),kQe=o(" \u2014 "),kk=a("a"),SQe=o("RobertaConfig"),RQe=o(" (RoBERTa model)"),BQe=l(),Pm=a("li"),uoe=a("strong"),PQe=o("roformer"),IQe=o(" \u2014 "),Sk=a("a"),qQe=o("RoFormerConfig"),NQe=o(" (RoFormer model)"),jQe=l(),Im=a("li"),_oe=a("strong"),DQe=o("segformer"),GQe=o(" \u2014 "),Rk=a("a"),OQe=o("SegformerConfig"),VQe=o(" (SegFormer model)"),XQe=l(),qm=a("li"),boe=a("strong"),zQe=o("sew"),QQe=o(" \u2014 "),Bk=a("a"),WQe=o("SEWConfig"),HQe=o(" (SEW model)"),UQe=l(),Nm=a("li"),voe=a("strong"),JQe=o("sew-d"),YQe=o(" \u2014 "),Pk=a("a"),KQe=o("SEWDConfig"),ZQe=o(" (SEW-D model)"),eWe=l(),jm=a("li"),Foe=a("strong"),oWe=o("speech-encoder-decoder"),rWe=o(" \u2014 "),Ik=a("a"),tWe=o("SpeechEncoderDecoderConfig"),aWe=o(" (Speech Encoder decoder model)"),nWe=l(),Dm=a("li"),Toe=a("strong"),sWe=o("speech_to_text"),lWe=o(" \u2014 "),qk=a("a"),iWe=o("Speech2TextConfig"),dWe=o(" (Speech2Text model)"),cWe=l(),Gm=a("li"),Moe=a("strong"),fWe=o("speech_to_text_2"),mWe=o(" \u2014 "),Nk=a("a"),gWe=o("Speech2Text2Config"),hWe=o(" (Speech2Text2 model)"),pWe=l(),Om=a("li"),Eoe=a("strong"),uWe=o("splinter"),_We=o(" \u2014 "),jk=a("a"),bWe=o("SplinterConfig"),vWe=o(" (Splinter model)"),FWe=l(),Vm=a("li"),Coe=a("strong"),TWe=o("squeezebert"),MWe=o(" \u2014 "),Dk=a("a"),EWe=o("SqueezeBertConfig"),CWe=o(" (SqueezeBERT model)"),wWe=l(),Xm=a("li"),woe=a("strong"),AWe=o("swin"),yWe=o(" \u2014 "),Gk=a("a"),LWe=o("SwinConfig"),xWe=o(" (Swin model)"),$We=l(),zm=a("li"),Aoe=a("strong"),kWe=o("t5"),SWe=o(" \u2014 "),Ok=a("a"),RWe=o("T5Config"),BWe=o(" (T5 model)"),PWe=l(),Qm=a("li"),yoe=a("strong"),IWe=o("tapas"),qWe=o(" \u2014 "),Vk=a("a"),NWe=o("TapasConfig"),jWe=o(" (TAPAS model)"),DWe=l(),Wm=a("li"),Loe=a("strong"),GWe=o("tapex"),OWe=o(" \u2014 "),Xk=a("a"),VWe=o("BartConfig"),XWe=o(" (TAPEX model)"),zWe=l(),Hm=a("li"),xoe=a("strong"),QWe=o("transfo-xl"),WWe=o(" \u2014 "),zk=a("a"),HWe=o("TransfoXLConfig"),UWe=o(" (Transformer-XL model)"),JWe=l(),Um=a("li"),$oe=a("strong"),YWe=o("trocr"),KWe=o(" \u2014 "),Qk=a("a"),ZWe=o("TrOCRConfig"),eHe=o(" (TrOCR model)"),oHe=l(),Jm=a("li"),koe=a("strong"),rHe=o("unispeech"),tHe=o(" \u2014 "),Wk=a("a"),aHe=o("UniSpeechConfig"),nHe=o(" (UniSpeech model)"),sHe=l(),Ym=a("li"),Soe=a("strong"),lHe=o("unispeech-sat"),iHe=o(" \u2014 "),Hk=a("a"),dHe=o("UniSpeechSatConfig"),cHe=o(" (UniSpeechSat model)"),fHe=l(),Km=a("li"),Roe=a("strong"),mHe=o("van"),gHe=o(" \u2014 "),Uk=a("a"),hHe=o("VanConfig"),pHe=o(" (VAN model)"),uHe=l(),Zm=a("li"),Boe=a("strong"),_He=o("vilt"),bHe=o(" \u2014 "),Jk=a("a"),vHe=o("ViltConfig"),FHe=o(" (ViLT model)"),THe=l(),eg=a("li"),Poe=a("strong"),MHe=o("vision-encoder-decoder"),EHe=o(" \u2014 "),Yk=a("a"),CHe=o("VisionEncoderDecoderConfig"),wHe=o(" (Vision Encoder decoder model)"),AHe=l(),og=a("li"),Ioe=a("strong"),yHe=o("vision-text-dual-encoder"),LHe=o(" \u2014 "),Kk=a("a"),xHe=o("VisionTextDualEncoderConfig"),$He=o(" (VisionTextDualEncoder model)"),kHe=l(),rg=a("li"),qoe=a("strong"),SHe=o("visual_bert"),RHe=o(" \u2014 "),Zk=a("a"),BHe=o("VisualBertConfig"),PHe=o(" (VisualBert model)"),IHe=l(),tg=a("li"),Noe=a("strong"),qHe=o("vit"),NHe=o(" \u2014 "),eS=a("a"),jHe=o("ViTConfig"),DHe=o(" (ViT model)"),GHe=l(),ag=a("li"),joe=a("strong"),OHe=o("vit_mae"),VHe=o(" \u2014 "),oS=a("a"),XHe=o("ViTMAEConfig"),zHe=o(" (ViTMAE model)"),QHe=l(),ng=a("li"),Doe=a("strong"),WHe=o("wav2vec2"),HHe=o(" \u2014 "),rS=a("a"),UHe=o("Wav2Vec2Config"),JHe=o(" (Wav2Vec2 model)"),YHe=l(),sg=a("li"),Goe=a("strong"),KHe=o("wavlm"),ZHe=o(" \u2014 "),tS=a("a"),eUe=o("WavLMConfig"),oUe=o(" (WavLM model)"),rUe=l(),lg=a("li"),Ooe=a("strong"),tUe=o("xglm"),aUe=o(" \u2014 "),aS=a("a"),nUe=o("XGLMConfig"),sUe=o(" (XGLM model)"),lUe=l(),ig=a("li"),Voe=a("strong"),iUe=o("xlm"),dUe=o(" \u2014 "),nS=a("a"),cUe=o("XLMConfig"),fUe=o(" (XLM model)"),mUe=l(),dg=a("li"),Xoe=a("strong"),gUe=o("xlm-prophetnet"),hUe=o(" \u2014 "),sS=a("a"),pUe=o("XLMProphetNetConfig"),uUe=o(" (XLMProphetNet model)"),_Ue=l(),cg=a("li"),zoe=a("strong"),bUe=o("xlm-roberta"),vUe=o(" \u2014 "),lS=a("a"),FUe=o("XLMRobertaConfig"),TUe=o(" (XLM-RoBERTa model)"),MUe=l(),fg=a("li"),Qoe=a("strong"),EUe=o("xlm-roberta-xl"),CUe=o(" \u2014 "),iS=a("a"),wUe=o("XLMRobertaXLConfig"),AUe=o(" (XLM-RoBERTa-XL model)"),yUe=l(),mg=a("li"),Woe=a("strong"),LUe=o("xlnet"),xUe=o(" \u2014 "),dS=a("a"),$Ue=o("XLNetConfig"),kUe=o(" (XLNet model)"),SUe=l(),gg=a("li"),Hoe=a("strong"),RUe=o("yolos"),BUe=o(" \u2014 "),cS=a("a"),PUe=o("YolosConfig"),IUe=o(" (YOLOS model)"),qUe=l(),hg=a("li"),Uoe=a("strong"),NUe=o("yoso"),jUe=o(" \u2014 "),fS=a("a"),DUe=o("YosoConfig"),GUe=o(" (YOSO model)"),OUe=l(),F(pg.$$.fragment),VUe=l(),ug=a("div"),F(Z0.$$.fragment),XUe=l(),Joe=a("p"),zUe=o("Register a new configuration for this class."),$Pe=l(),_i=a("h2"),_g=a("a"),Yoe=a("span"),F(ey.$$.fragment),QUe=l(),Koe=a("span"),WUe=o("AutoTokenizer"),kPe=l(),wo=a("div"),F(oy.$$.fragment),HUe=l(),ry=a("p"),UUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mS=a("a"),JUe=o("AutoTokenizer.from_pretrained()"),YUe=o(" class method."),KUe=l(),ty=a("p"),ZUe=o("This class cannot be instantiated directly using "),Zoe=a("code"),eJe=o("__init__()"),oJe=o(" (throws an error)."),rJe=l(),Cr=a("div"),F(ay.$$.fragment),tJe=l(),ere=a("p"),aJe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),nJe=l(),Ca=a("p"),sJe=o("The tokenizer class to instantiate is selected based on the "),ore=a("code"),lJe=o("model_type"),iJe=o(` property of the config object (either
passed as an argument or loaded from `),rre=a("code"),dJe=o("pretrained_model_name_or_path"),cJe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tre=a("code"),fJe=o("pretrained_model_name_or_path"),mJe=o(":"),gJe=l(),k=a("ul"),kn=a("li"),are=a("strong"),hJe=o("albert"),pJe=o(" \u2014 "),gS=a("a"),uJe=o("AlbertTokenizer"),_Je=o(" or "),hS=a("a"),bJe=o("AlbertTokenizerFast"),vJe=o(" (ALBERT model)"),FJe=l(),Sn=a("li"),nre=a("strong"),TJe=o("bart"),MJe=o(" \u2014 "),pS=a("a"),EJe=o("BartTokenizer"),CJe=o(" or "),uS=a("a"),wJe=o("BartTokenizerFast"),AJe=o(" (BART model)"),yJe=l(),Rn=a("li"),sre=a("strong"),LJe=o("barthez"),xJe=o(" \u2014 "),_S=a("a"),$Je=o("BarthezTokenizer"),kJe=o(" or "),bS=a("a"),SJe=o("BarthezTokenizerFast"),RJe=o(" (BARThez model)"),BJe=l(),bg=a("li"),lre=a("strong"),PJe=o("bartpho"),IJe=o(" \u2014 "),vS=a("a"),qJe=o("BartphoTokenizer"),NJe=o(" (BARTpho model)"),jJe=l(),Bn=a("li"),ire=a("strong"),DJe=o("bert"),GJe=o(" \u2014 "),FS=a("a"),OJe=o("BertTokenizer"),VJe=o(" or "),TS=a("a"),XJe=o("BertTokenizerFast"),zJe=o(" (BERT model)"),QJe=l(),vg=a("li"),dre=a("strong"),WJe=o("bert-generation"),HJe=o(" \u2014 "),MS=a("a"),UJe=o("BertGenerationTokenizer"),JJe=o(" (Bert Generation model)"),YJe=l(),Fg=a("li"),cre=a("strong"),KJe=o("bert-japanese"),ZJe=o(" \u2014 "),ES=a("a"),eYe=o("BertJapaneseTokenizer"),oYe=o(" (BertJapanese model)"),rYe=l(),Tg=a("li"),fre=a("strong"),tYe=o("bertweet"),aYe=o(" \u2014 "),CS=a("a"),nYe=o("BertweetTokenizer"),sYe=o(" (Bertweet model)"),lYe=l(),Pn=a("li"),mre=a("strong"),iYe=o("big_bird"),dYe=o(" \u2014 "),wS=a("a"),cYe=o("BigBirdTokenizer"),fYe=o(" or "),AS=a("a"),mYe=o("BigBirdTokenizerFast"),gYe=o(" (BigBird model)"),hYe=l(),In=a("li"),gre=a("strong"),pYe=o("bigbird_pegasus"),uYe=o(" \u2014 "),yS=a("a"),_Ye=o("PegasusTokenizer"),bYe=o(" or "),LS=a("a"),vYe=o("PegasusTokenizerFast"),FYe=o(" (BigBirdPegasus model)"),TYe=l(),qn=a("li"),hre=a("strong"),MYe=o("blenderbot"),EYe=o(" \u2014 "),xS=a("a"),CYe=o("BlenderbotTokenizer"),wYe=o(" or "),$S=a("a"),AYe=o("BlenderbotTokenizerFast"),yYe=o(" (Blenderbot model)"),LYe=l(),Mg=a("li"),pre=a("strong"),xYe=o("blenderbot-small"),$Ye=o(" \u2014 "),kS=a("a"),kYe=o("BlenderbotSmallTokenizer"),SYe=o(" (BlenderbotSmall model)"),RYe=l(),Eg=a("li"),ure=a("strong"),BYe=o("byt5"),PYe=o(" \u2014 "),SS=a("a"),IYe=o("ByT5Tokenizer"),qYe=o(" (ByT5 model)"),NYe=l(),Nn=a("li"),_re=a("strong"),jYe=o("camembert"),DYe=o(" \u2014 "),RS=a("a"),GYe=o("CamembertTokenizer"),OYe=o(" or "),BS=a("a"),VYe=o("CamembertTokenizerFast"),XYe=o(" (CamemBERT model)"),zYe=l(),Cg=a("li"),bre=a("strong"),QYe=o("canine"),WYe=o(" \u2014 "),PS=a("a"),HYe=o("CanineTokenizer"),UYe=o(" (Canine model)"),JYe=l(),jn=a("li"),vre=a("strong"),YYe=o("clip"),KYe=o(" \u2014 "),IS=a("a"),ZYe=o("CLIPTokenizer"),eKe=o(" or "),qS=a("a"),oKe=o("CLIPTokenizerFast"),rKe=o(" (CLIP model)"),tKe=l(),Dn=a("li"),Fre=a("strong"),aKe=o("convbert"),nKe=o(" \u2014 "),NS=a("a"),sKe=o("ConvBertTokenizer"),lKe=o(" or "),jS=a("a"),iKe=o("ConvBertTokenizerFast"),dKe=o(" (ConvBERT model)"),cKe=l(),Gn=a("li"),Tre=a("strong"),fKe=o("cpm"),mKe=o(" \u2014 "),DS=a("a"),gKe=o("CpmTokenizer"),hKe=o(" or "),GS=a("a"),pKe=o("CpmTokenizerFast"),uKe=o(" (CPM model)"),_Ke=l(),wg=a("li"),Mre=a("strong"),bKe=o("ctrl"),vKe=o(" \u2014 "),OS=a("a"),FKe=o("CTRLTokenizer"),TKe=o(" (CTRL model)"),MKe=l(),On=a("li"),Ere=a("strong"),EKe=o("data2vec-text"),CKe=o(" \u2014 "),VS=a("a"),wKe=o("RobertaTokenizer"),AKe=o(" or "),XS=a("a"),yKe=o("RobertaTokenizerFast"),LKe=o(" (Data2VecText model)"),xKe=l(),Vn=a("li"),Cre=a("strong"),$Ke=o("deberta"),kKe=o(" \u2014 "),zS=a("a"),SKe=o("DebertaTokenizer"),RKe=o(" or "),QS=a("a"),BKe=o("DebertaTokenizerFast"),PKe=o(" (DeBERTa model)"),IKe=l(),Xn=a("li"),wre=a("strong"),qKe=o("deberta-v2"),NKe=o(" \u2014 "),WS=a("a"),jKe=o("DebertaV2Tokenizer"),DKe=o(" or "),HS=a("a"),GKe=o("DebertaV2TokenizerFast"),OKe=o(" (DeBERTa-v2 model)"),VKe=l(),zn=a("li"),Are=a("strong"),XKe=o("distilbert"),zKe=o(" \u2014 "),US=a("a"),QKe=o("DistilBertTokenizer"),WKe=o(" or "),JS=a("a"),HKe=o("DistilBertTokenizerFast"),UKe=o(" (DistilBERT model)"),JKe=l(),Qn=a("li"),yre=a("strong"),YKe=o("dpr"),KKe=o(" \u2014 "),YS=a("a"),ZKe=o("DPRQuestionEncoderTokenizer"),eZe=o(" or "),KS=a("a"),oZe=o("DPRQuestionEncoderTokenizerFast"),rZe=o(" (DPR model)"),tZe=l(),Wn=a("li"),Lre=a("strong"),aZe=o("electra"),nZe=o(" \u2014 "),ZS=a("a"),sZe=o("ElectraTokenizer"),lZe=o(" or "),eR=a("a"),iZe=o("ElectraTokenizerFast"),dZe=o(" (ELECTRA model)"),cZe=l(),Ag=a("li"),xre=a("strong"),fZe=o("flaubert"),mZe=o(" \u2014 "),oR=a("a"),gZe=o("FlaubertTokenizer"),hZe=o(" (FlauBERT model)"),pZe=l(),Hn=a("li"),$re=a("strong"),uZe=o("fnet"),_Ze=o(" \u2014 "),rR=a("a"),bZe=o("FNetTokenizer"),vZe=o(" or "),tR=a("a"),FZe=o("FNetTokenizerFast"),TZe=o(" (FNet model)"),MZe=l(),yg=a("li"),kre=a("strong"),EZe=o("fsmt"),CZe=o(" \u2014 "),aR=a("a"),wZe=o("FSMTTokenizer"),AZe=o(" (FairSeq Machine-Translation model)"),yZe=l(),Un=a("li"),Sre=a("strong"),LZe=o("funnel"),xZe=o(" \u2014 "),nR=a("a"),$Ze=o("FunnelTokenizer"),kZe=o(" or "),sR=a("a"),SZe=o("FunnelTokenizerFast"),RZe=o(" (Funnel Transformer model)"),BZe=l(),Jn=a("li"),Rre=a("strong"),PZe=o("gpt2"),IZe=o(" \u2014 "),lR=a("a"),qZe=o("GPT2Tokenizer"),NZe=o(" or "),iR=a("a"),jZe=o("GPT2TokenizerFast"),DZe=o(" (OpenAI GPT-2 model)"),GZe=l(),Yn=a("li"),Bre=a("strong"),OZe=o("gpt_neo"),VZe=o(" \u2014 "),dR=a("a"),XZe=o("GPT2Tokenizer"),zZe=o(" or "),cR=a("a"),QZe=o("GPT2TokenizerFast"),WZe=o(" (GPT Neo model)"),HZe=l(),Kn=a("li"),Pre=a("strong"),UZe=o("gptj"),JZe=o(" \u2014 "),fR=a("a"),YZe=o("GPT2Tokenizer"),KZe=o(" or "),mR=a("a"),ZZe=o("GPT2TokenizerFast"),eeo=o(" (GPT-J model)"),oeo=l(),Zn=a("li"),Ire=a("strong"),reo=o("herbert"),teo=o(" \u2014 "),gR=a("a"),aeo=o("HerbertTokenizer"),neo=o(" or "),hR=a("a"),seo=o("HerbertTokenizerFast"),leo=o(" (HerBERT model)"),ieo=l(),Lg=a("li"),qre=a("strong"),deo=o("hubert"),ceo=o(" \u2014 "),pR=a("a"),feo=o("Wav2Vec2CTCTokenizer"),meo=o(" (Hubert model)"),geo=l(),es=a("li"),Nre=a("strong"),heo=o("ibert"),peo=o(" \u2014 "),uR=a("a"),ueo=o("RobertaTokenizer"),_eo=o(" or "),_R=a("a"),beo=o("RobertaTokenizerFast"),veo=o(" (I-BERT model)"),Feo=l(),os=a("li"),jre=a("strong"),Teo=o("layoutlm"),Meo=o(" \u2014 "),bR=a("a"),Eeo=o("LayoutLMTokenizer"),Ceo=o(" or "),vR=a("a"),weo=o("LayoutLMTokenizerFast"),Aeo=o(" (LayoutLM model)"),yeo=l(),rs=a("li"),Dre=a("strong"),Leo=o("layoutlmv2"),xeo=o(" \u2014 "),FR=a("a"),$eo=o("LayoutLMv2Tokenizer"),keo=o(" or "),TR=a("a"),Seo=o("LayoutLMv2TokenizerFast"),Reo=o(" (LayoutLMv2 model)"),Beo=l(),ts=a("li"),Gre=a("strong"),Peo=o("layoutxlm"),Ieo=o(" \u2014 "),MR=a("a"),qeo=o("LayoutXLMTokenizer"),Neo=o(" or "),ER=a("a"),jeo=o("LayoutXLMTokenizerFast"),Deo=o(" (LayoutXLM model)"),Geo=l(),as=a("li"),Ore=a("strong"),Oeo=o("led"),Veo=o(" \u2014 "),CR=a("a"),Xeo=o("LEDTokenizer"),zeo=o(" or "),wR=a("a"),Qeo=o("LEDTokenizerFast"),Weo=o(" (LED model)"),Heo=l(),ns=a("li"),Vre=a("strong"),Ueo=o("longformer"),Jeo=o(" \u2014 "),AR=a("a"),Yeo=o("LongformerTokenizer"),Keo=o(" or "),yR=a("a"),Zeo=o("LongformerTokenizerFast"),eoo=o(" (Longformer model)"),ooo=l(),xg=a("li"),Xre=a("strong"),roo=o("luke"),too=o(" \u2014 "),LR=a("a"),aoo=o("LukeTokenizer"),noo=o(" (LUKE model)"),soo=l(),ss=a("li"),zre=a("strong"),loo=o("lxmert"),ioo=o(" \u2014 "),xR=a("a"),doo=o("LxmertTokenizer"),coo=o(" or "),$R=a("a"),foo=o("LxmertTokenizerFast"),moo=o(" (LXMERT model)"),goo=l(),$g=a("li"),Qre=a("strong"),hoo=o("m2m_100"),poo=o(" \u2014 "),kR=a("a"),uoo=o("M2M100Tokenizer"),_oo=o(" (M2M100 model)"),boo=l(),kg=a("li"),Wre=a("strong"),voo=o("marian"),Foo=o(" \u2014 "),SR=a("a"),Too=o("MarianTokenizer"),Moo=o(" (Marian model)"),Eoo=l(),ls=a("li"),Hre=a("strong"),Coo=o("mbart"),woo=o(" \u2014 "),RR=a("a"),Aoo=o("MBartTokenizer"),yoo=o(" or "),BR=a("a"),Loo=o("MBartTokenizerFast"),xoo=o(" (mBART model)"),$oo=l(),is=a("li"),Ure=a("strong"),koo=o("mbart50"),Soo=o(" \u2014 "),PR=a("a"),Roo=o("MBart50Tokenizer"),Boo=o(" or "),IR=a("a"),Poo=o("MBart50TokenizerFast"),Ioo=o(" (mBART-50 model)"),qoo=l(),ds=a("li"),Jre=a("strong"),Noo=o("megatron-bert"),joo=o(" \u2014 "),qR=a("a"),Doo=o("BertTokenizer"),Goo=o(" or "),NR=a("a"),Ooo=o("BertTokenizerFast"),Voo=o(" (MegatronBert model)"),Xoo=l(),Sg=a("li"),Yre=a("strong"),zoo=o("mluke"),Qoo=o(" \u2014 "),jR=a("a"),Woo=o("MLukeTokenizer"),Hoo=o(" (mLUKE model)"),Uoo=l(),cs=a("li"),Kre=a("strong"),Joo=o("mobilebert"),Yoo=o(" \u2014 "),DR=a("a"),Koo=o("MobileBertTokenizer"),Zoo=o(" or "),GR=a("a"),ero=o("MobileBertTokenizerFast"),oro=o(" (MobileBERT model)"),rro=l(),fs=a("li"),Zre=a("strong"),tro=o("mpnet"),aro=o(" \u2014 "),OR=a("a"),nro=o("MPNetTokenizer"),sro=o(" or "),VR=a("a"),lro=o("MPNetTokenizerFast"),iro=o(" (MPNet model)"),dro=l(),ms=a("li"),ete=a("strong"),cro=o("mt5"),fro=o(" \u2014 "),XR=a("a"),mro=o("MT5Tokenizer"),gro=o(" or "),zR=a("a"),hro=o("MT5TokenizerFast"),pro=o(" (mT5 model)"),uro=l(),gs=a("li"),ote=a("strong"),_ro=o("nystromformer"),bro=o(" \u2014 "),QR=a("a"),vro=o("AlbertTokenizer"),Fro=o(" or "),WR=a("a"),Tro=o("AlbertTokenizerFast"),Mro=o(" (Nystromformer model)"),Ero=l(),hs=a("li"),rte=a("strong"),Cro=o("openai-gpt"),wro=o(" \u2014 "),HR=a("a"),Aro=o("OpenAIGPTTokenizer"),yro=o(" or "),UR=a("a"),Lro=o("OpenAIGPTTokenizerFast"),xro=o(" (OpenAI GPT model)"),$ro=l(),ps=a("li"),tte=a("strong"),kro=o("pegasus"),Sro=o(" \u2014 "),JR=a("a"),Rro=o("PegasusTokenizer"),Bro=o(" or "),YR=a("a"),Pro=o("PegasusTokenizerFast"),Iro=o(" (Pegasus model)"),qro=l(),Rg=a("li"),ate=a("strong"),Nro=o("perceiver"),jro=o(" \u2014 "),KR=a("a"),Dro=o("PerceiverTokenizer"),Gro=o(" (Perceiver model)"),Oro=l(),Bg=a("li"),nte=a("strong"),Vro=o("phobert"),Xro=o(" \u2014 "),ZR=a("a"),zro=o("PhobertTokenizer"),Qro=o(" (PhoBERT model)"),Wro=l(),Pg=a("li"),ste=a("strong"),Hro=o("plbart"),Uro=o(" \u2014 "),eB=a("a"),Jro=o("PLBartTokenizer"),Yro=o(" (PLBart model)"),Kro=l(),Ig=a("li"),lte=a("strong"),Zro=o("prophetnet"),eto=o(" \u2014 "),oB=a("a"),oto=o("ProphetNetTokenizer"),rto=o(" (ProphetNet model)"),tto=l(),us=a("li"),ite=a("strong"),ato=o("qdqbert"),nto=o(" \u2014 "),rB=a("a"),sto=o("BertTokenizer"),lto=o(" or "),tB=a("a"),ito=o("BertTokenizerFast"),dto=o(" (QDQBert model)"),cto=l(),qg=a("li"),dte=a("strong"),fto=o("rag"),mto=o(" \u2014 "),aB=a("a"),gto=o("RagTokenizer"),hto=o(" (RAG model)"),pto=l(),_s=a("li"),cte=a("strong"),uto=o("realm"),_to=o(" \u2014 "),nB=a("a"),bto=o("RealmTokenizer"),vto=o(" or "),sB=a("a"),Fto=o("RealmTokenizerFast"),Tto=o(" (Realm model)"),Mto=l(),bs=a("li"),fte=a("strong"),Eto=o("reformer"),Cto=o(" \u2014 "),lB=a("a"),wto=o("ReformerTokenizer"),Ato=o(" or "),iB=a("a"),yto=o("ReformerTokenizerFast"),Lto=o(" (Reformer model)"),xto=l(),vs=a("li"),mte=a("strong"),$to=o("rembert"),kto=o(" \u2014 "),dB=a("a"),Sto=o("RemBertTokenizer"),Rto=o(" or "),cB=a("a"),Bto=o("RemBertTokenizerFast"),Pto=o(" (RemBERT model)"),Ito=l(),Fs=a("li"),gte=a("strong"),qto=o("retribert"),Nto=o(" \u2014 "),fB=a("a"),jto=o("RetriBertTokenizer"),Dto=o(" or "),mB=a("a"),Gto=o("RetriBertTokenizerFast"),Oto=o(" (RetriBERT model)"),Vto=l(),Ts=a("li"),hte=a("strong"),Xto=o("roberta"),zto=o(" \u2014 "),gB=a("a"),Qto=o("RobertaTokenizer"),Wto=o(" or "),hB=a("a"),Hto=o("RobertaTokenizerFast"),Uto=o(" (RoBERTa model)"),Jto=l(),Ms=a("li"),pte=a("strong"),Yto=o("roformer"),Kto=o(" \u2014 "),pB=a("a"),Zto=o("RoFormerTokenizer"),eao=o(" or "),uB=a("a"),oao=o("RoFormerTokenizerFast"),rao=o(" (RoFormer model)"),tao=l(),Ng=a("li"),ute=a("strong"),aao=o("speech_to_text"),nao=o(" \u2014 "),_B=a("a"),sao=o("Speech2TextTokenizer"),lao=o(" (Speech2Text model)"),iao=l(),jg=a("li"),_te=a("strong"),dao=o("speech_to_text_2"),cao=o(" \u2014 "),bB=a("a"),fao=o("Speech2Text2Tokenizer"),mao=o(" (Speech2Text2 model)"),gao=l(),Es=a("li"),bte=a("strong"),hao=o("splinter"),pao=o(" \u2014 "),vB=a("a"),uao=o("SplinterTokenizer"),_ao=o(" or "),FB=a("a"),bao=o("SplinterTokenizerFast"),vao=o(" (Splinter model)"),Fao=l(),Cs=a("li"),vte=a("strong"),Tao=o("squeezebert"),Mao=o(" \u2014 "),TB=a("a"),Eao=o("SqueezeBertTokenizer"),Cao=o(" or "),MB=a("a"),wao=o("SqueezeBertTokenizerFast"),Aao=o(" (SqueezeBERT model)"),yao=l(),ws=a("li"),Fte=a("strong"),Lao=o("t5"),xao=o(" \u2014 "),EB=a("a"),$ao=o("T5Tokenizer"),kao=o(" or "),CB=a("a"),Sao=o("T5TokenizerFast"),Rao=o(" (T5 model)"),Bao=l(),Dg=a("li"),Tte=a("strong"),Pao=o("tapas"),Iao=o(" \u2014 "),wB=a("a"),qao=o("TapasTokenizer"),Nao=o(" (TAPAS model)"),jao=l(),Gg=a("li"),Mte=a("strong"),Dao=o("tapex"),Gao=o(" \u2014 "),AB=a("a"),Oao=o("TapexTokenizer"),Vao=o(" (TAPEX model)"),Xao=l(),Og=a("li"),Ete=a("strong"),zao=o("transfo-xl"),Qao=o(" \u2014 "),yB=a("a"),Wao=o("TransfoXLTokenizer"),Hao=o(" (Transformer-XL model)"),Uao=l(),As=a("li"),Cte=a("strong"),Jao=o("visual_bert"),Yao=o(" \u2014 "),LB=a("a"),Kao=o("BertTokenizer"),Zao=o(" or "),xB=a("a"),eno=o("BertTokenizerFast"),ono=o(" (VisualBert model)"),rno=l(),Vg=a("li"),wte=a("strong"),tno=o("wav2vec2"),ano=o(" \u2014 "),$B=a("a"),nno=o("Wav2Vec2CTCTokenizer"),sno=o(" (Wav2Vec2 model)"),lno=l(),Xg=a("li"),Ate=a("strong"),ino=o("wav2vec2_phoneme"),dno=o(" \u2014 "),kB=a("a"),cno=o("Wav2Vec2PhonemeCTCTokenizer"),fno=o(" (Wav2Vec2Phoneme model)"),mno=l(),ys=a("li"),yte=a("strong"),gno=o("xglm"),hno=o(" \u2014 "),SB=a("a"),pno=o("XGLMTokenizer"),uno=o(" or "),RB=a("a"),_no=o("XGLMTokenizerFast"),bno=o(" (XGLM model)"),vno=l(),zg=a("li"),Lte=a("strong"),Fno=o("xlm"),Tno=o(" \u2014 "),BB=a("a"),Mno=o("XLMTokenizer"),Eno=o(" (XLM model)"),Cno=l(),Qg=a("li"),xte=a("strong"),wno=o("xlm-prophetnet"),Ano=o(" \u2014 "),PB=a("a"),yno=o("XLMProphetNetTokenizer"),Lno=o(" (XLMProphetNet model)"),xno=l(),Ls=a("li"),$te=a("strong"),$no=o("xlm-roberta"),kno=o(" \u2014 "),IB=a("a"),Sno=o("XLMRobertaTokenizer"),Rno=o(" or "),qB=a("a"),Bno=o("XLMRobertaTokenizerFast"),Pno=o(" (XLM-RoBERTa model)"),Ino=l(),xs=a("li"),kte=a("strong"),qno=o("xlm-roberta-xl"),Nno=o(" \u2014 "),NB=a("a"),jno=o("RobertaTokenizer"),Dno=o(" or "),jB=a("a"),Gno=o("RobertaTokenizerFast"),Ono=o(" (XLM-RoBERTa-XL model)"),Vno=l(),$s=a("li"),Ste=a("strong"),Xno=o("xlnet"),zno=o(" \u2014 "),DB=a("a"),Qno=o("XLNetTokenizer"),Wno=o(" or "),GB=a("a"),Hno=o("XLNetTokenizerFast"),Uno=o(" (XLNet model)"),Jno=l(),ks=a("li"),Rte=a("strong"),Yno=o("yoso"),Kno=o(" \u2014 "),OB=a("a"),Zno=o("AlbertTokenizer"),eso=o(" or "),VB=a("a"),oso=o("AlbertTokenizerFast"),rso=o(" (YOSO model)"),tso=l(),F(Wg.$$.fragment),aso=l(),Hg=a("div"),F(ny.$$.fragment),nso=l(),Bte=a("p"),sso=o("Register a new tokenizer in this mapping."),SPe=l(),bi=a("h2"),Ug=a("a"),Pte=a("span"),F(sy.$$.fragment),lso=l(),Ite=a("span"),iso=o("AutoFeatureExtractor"),RPe=l(),Ao=a("div"),F(ly.$$.fragment),dso=l(),iy=a("p"),cso=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),XB=a("a"),fso=o("AutoFeatureExtractor.from_pretrained()"),mso=o(" class method."),gso=l(),dy=a("p"),hso=o("This class cannot be instantiated directly using "),qte=a("code"),pso=o("__init__()"),uso=o(" (throws an error)."),_so=l(),Qe=a("div"),F(cy.$$.fragment),bso=l(),Nte=a("p"),vso=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Fso=l(),wa=a("p"),Tso=o("The feature extractor class to instantiate is selected based on the "),jte=a("code"),Mso=o("model_type"),Eso=o(` property of the config object
(either passed as an argument or loaded from `),Dte=a("code"),Cso=o("pretrained_model_name_or_path"),wso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gte=a("code"),Aso=o("pretrained_model_name_or_path"),yso=o(":"),Lso=l(),oe=a("ul"),Jg=a("li"),Ote=a("strong"),xso=o("beit"),$so=o(" \u2014 "),zB=a("a"),kso=o("BeitFeatureExtractor"),Sso=o(" (BEiT model)"),Rso=l(),Yg=a("li"),Vte=a("strong"),Bso=o("clip"),Pso=o(" \u2014 "),QB=a("a"),Iso=o("CLIPFeatureExtractor"),qso=o(" (CLIP model)"),Nso=l(),Kg=a("li"),Xte=a("strong"),jso=o("convnext"),Dso=o(" \u2014 "),WB=a("a"),Gso=o("ConvNextFeatureExtractor"),Oso=o(" (ConvNext model)"),Vso=l(),Zg=a("li"),zte=a("strong"),Xso=o("data2vec-audio"),zso=o(" \u2014 "),HB=a("a"),Qso=o("Wav2Vec2FeatureExtractor"),Wso=o(" (Data2VecAudio model)"),Hso=l(),eh=a("li"),Qte=a("strong"),Uso=o("data2vec-vision"),Jso=o(" \u2014 "),UB=a("a"),Yso=o("BeitFeatureExtractor"),Kso=o(" (Data2VecVision model)"),Zso=l(),oh=a("li"),Wte=a("strong"),elo=o("deit"),olo=o(" \u2014 "),JB=a("a"),rlo=o("DeiTFeatureExtractor"),tlo=o(" (DeiT model)"),alo=l(),rh=a("li"),Hte=a("strong"),nlo=o("detr"),slo=o(" \u2014 "),YB=a("a"),llo=o("DetrFeatureExtractor"),ilo=o(" (DETR model)"),dlo=l(),th=a("li"),Ute=a("strong"),clo=o("dpt"),flo=o(" \u2014 "),KB=a("a"),mlo=o("DPTFeatureExtractor"),glo=o(" (DPT model)"),hlo=l(),ah=a("li"),Jte=a("strong"),plo=o("flava"),ulo=o(" \u2014 "),ZB=a("a"),_lo=o("FlavaFeatureExtractor"),blo=o(" (Flava model)"),vlo=l(),nh=a("li"),Yte=a("strong"),Flo=o("glpn"),Tlo=o(" \u2014 "),eP=a("a"),Mlo=o("GLPNFeatureExtractor"),Elo=o(" (GLPN model)"),Clo=l(),sh=a("li"),Kte=a("strong"),wlo=o("hubert"),Alo=o(" \u2014 "),oP=a("a"),ylo=o("Wav2Vec2FeatureExtractor"),Llo=o(" (Hubert model)"),xlo=l(),lh=a("li"),Zte=a("strong"),$lo=o("layoutlmv2"),klo=o(" \u2014 "),rP=a("a"),Slo=o("LayoutLMv2FeatureExtractor"),Rlo=o(" (LayoutLMv2 model)"),Blo=l(),ih=a("li"),eae=a("strong"),Plo=o("maskformer"),Ilo=o(" \u2014 "),tP=a("a"),qlo=o("MaskFormerFeatureExtractor"),Nlo=o(" (MaskFormer model)"),jlo=l(),dh=a("li"),oae=a("strong"),Dlo=o("perceiver"),Glo=o(" \u2014 "),aP=a("a"),Olo=o("PerceiverFeatureExtractor"),Vlo=o(" (Perceiver model)"),Xlo=l(),ch=a("li"),rae=a("strong"),zlo=o("poolformer"),Qlo=o(" \u2014 "),nP=a("a"),Wlo=o("PoolFormerFeatureExtractor"),Hlo=o(" (PoolFormer model)"),Ulo=l(),fh=a("li"),tae=a("strong"),Jlo=o("regnet"),Ylo=o(" \u2014 "),sP=a("a"),Klo=o("ConvNextFeatureExtractor"),Zlo=o(" (RegNet model)"),eio=l(),mh=a("li"),aae=a("strong"),oio=o("resnet"),rio=o(" \u2014 "),lP=a("a"),tio=o("ConvNextFeatureExtractor"),aio=o(" (ResNet model)"),nio=l(),gh=a("li"),nae=a("strong"),sio=o("segformer"),lio=o(" \u2014 "),iP=a("a"),iio=o("SegformerFeatureExtractor"),dio=o(" (SegFormer model)"),cio=l(),hh=a("li"),sae=a("strong"),fio=o("speech_to_text"),mio=o(" \u2014 "),dP=a("a"),gio=o("Speech2TextFeatureExtractor"),hio=o(" (Speech2Text model)"),pio=l(),ph=a("li"),lae=a("strong"),uio=o("swin"),_io=o(" \u2014 "),cP=a("a"),bio=o("ViTFeatureExtractor"),vio=o(" (Swin model)"),Fio=l(),uh=a("li"),iae=a("strong"),Tio=o("van"),Mio=o(" \u2014 "),fP=a("a"),Eio=o("ConvNextFeatureExtractor"),Cio=o(" (VAN model)"),wio=l(),_h=a("li"),dae=a("strong"),Aio=o("vit"),yio=o(" \u2014 "),mP=a("a"),Lio=o("ViTFeatureExtractor"),xio=o(" (ViT model)"),$io=l(),bh=a("li"),cae=a("strong"),kio=o("vit_mae"),Sio=o(" \u2014 "),gP=a("a"),Rio=o("ViTFeatureExtractor"),Bio=o(" (ViTMAE model)"),Pio=l(),vh=a("li"),fae=a("strong"),Iio=o("wav2vec2"),qio=o(" \u2014 "),hP=a("a"),Nio=o("Wav2Vec2FeatureExtractor"),jio=o(" (Wav2Vec2 model)"),Dio=l(),Fh=a("li"),mae=a("strong"),Gio=o("yolos"),Oio=o(" \u2014 "),pP=a("a"),Vio=o("YolosFeatureExtractor"),Xio=o(" (YOLOS model)"),zio=l(),F(Th.$$.fragment),Qio=l(),F(Mh.$$.fragment),Wio=l(),Eh=a("div"),F(fy.$$.fragment),Hio=l(),gae=a("p"),Uio=o("Register a new feature extractor for this class."),BPe=l(),vi=a("h2"),Ch=a("a"),hae=a("span"),F(my.$$.fragment),Jio=l(),pae=a("span"),Yio=o("AutoProcessor"),PPe=l(),yo=a("div"),F(gy.$$.fragment),Kio=l(),hy=a("p"),Zio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uP=a("a"),edo=o("AutoProcessor.from_pretrained()"),odo=o(" class method."),rdo=l(),py=a("p"),tdo=o("This class cannot be instantiated directly using "),uae=a("code"),ado=o("__init__()"),ndo=o(" (throws an error)."),sdo=l(),We=a("div"),F(uy.$$.fragment),ldo=l(),_ae=a("p"),ido=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ddo=l(),Fi=a("p"),cdo=o("The processor class to instantiate is selected based on the "),bae=a("code"),fdo=o("model_type"),mdo=o(` property of the config object (either
passed as an argument or loaded from `),vae=a("code"),gdo=o("pretrained_model_name_or_path"),hdo=o(" if possible):"),pdo=l(),be=a("ul"),wh=a("li"),Fae=a("strong"),udo=o("clip"),_do=o(" \u2014 "),_P=a("a"),bdo=o("CLIPProcessor"),vdo=o(" (CLIP model)"),Fdo=l(),Ah=a("li"),Tae=a("strong"),Tdo=o("flava"),Mdo=o(" \u2014 "),Mae=a("code"),Edo=o("FLAVAProcessor"),Cdo=o(" (Flava model)"),wdo=l(),yh=a("li"),Eae=a("strong"),Ado=o("layoutlmv2"),ydo=o(" \u2014 "),bP=a("a"),Ldo=o("LayoutLMv2Processor"),xdo=o(" (LayoutLMv2 model)"),$do=l(),Lh=a("li"),Cae=a("strong"),kdo=o("layoutxlm"),Sdo=o(" \u2014 "),vP=a("a"),Rdo=o("LayoutXLMProcessor"),Bdo=o(" (LayoutXLM model)"),Pdo=l(),xh=a("li"),wae=a("strong"),Ido=o("sew"),qdo=o(" \u2014 "),FP=a("a"),Ndo=o("Wav2Vec2Processor"),jdo=o(" (SEW model)"),Ddo=l(),$h=a("li"),Aae=a("strong"),Gdo=o("sew-d"),Odo=o(" \u2014 "),TP=a("a"),Vdo=o("Wav2Vec2Processor"),Xdo=o(" (SEW-D model)"),zdo=l(),kh=a("li"),yae=a("strong"),Qdo=o("speech_to_text"),Wdo=o(" \u2014 "),MP=a("a"),Hdo=o("Speech2TextProcessor"),Udo=o(" (Speech2Text model)"),Jdo=l(),Sh=a("li"),Lae=a("strong"),Ydo=o("speech_to_text_2"),Kdo=o(" \u2014 "),EP=a("a"),Zdo=o("Speech2Text2Processor"),eco=o(" (Speech2Text2 model)"),oco=l(),Rh=a("li"),xae=a("strong"),rco=o("trocr"),tco=o(" \u2014 "),CP=a("a"),aco=o("TrOCRProcessor"),nco=o(" (TrOCR model)"),sco=l(),Bh=a("li"),$ae=a("strong"),lco=o("unispeech"),ico=o(" \u2014 "),wP=a("a"),dco=o("Wav2Vec2Processor"),cco=o(" (UniSpeech model)"),fco=l(),Ph=a("li"),kae=a("strong"),mco=o("unispeech-sat"),gco=o(" \u2014 "),AP=a("a"),hco=o("Wav2Vec2Processor"),pco=o(" (UniSpeechSat model)"),uco=l(),Ih=a("li"),Sae=a("strong"),_co=o("vilt"),bco=o(" \u2014 "),yP=a("a"),vco=o("ViltProcessor"),Fco=o(" (ViLT model)"),Tco=l(),qh=a("li"),Rae=a("strong"),Mco=o("vision-text-dual-encoder"),Eco=o(" \u2014 "),LP=a("a"),Cco=o("VisionTextDualEncoderProcessor"),wco=o(" (VisionTextDualEncoder model)"),Aco=l(),Nh=a("li"),Bae=a("strong"),yco=o("wav2vec2"),Lco=o(" \u2014 "),xP=a("a"),xco=o("Wav2Vec2Processor"),$co=o(" (Wav2Vec2 model)"),kco=l(),jh=a("li"),Pae=a("strong"),Sco=o("wavlm"),Rco=o(" \u2014 "),$P=a("a"),Bco=o("Wav2Vec2Processor"),Pco=o(" (WavLM model)"),Ico=l(),F(Dh.$$.fragment),qco=l(),F(Gh.$$.fragment),Nco=l(),Oh=a("div"),F(_y.$$.fragment),jco=l(),Iae=a("p"),Dco=o("Register a new processor for this class."),IPe=l(),Ti=a("h2"),Vh=a("a"),qae=a("span"),F(by.$$.fragment),Gco=l(),Nae=a("span"),Oco=o("AutoModel"),qPe=l(),Lo=a("div"),F(vy.$$.fragment),Vco=l(),Mi=a("p"),Xco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kP=a("a"),zco=o("from_pretrained()"),Qco=o(" class method or the "),SP=a("a"),Wco=o("from_config()"),Hco=o(` class
method.`),Uco=l(),Fy=a("p"),Jco=o("This class cannot be instantiated directly using "),jae=a("code"),Yco=o("__init__()"),Kco=o(" (throws an error)."),Zco=l(),ot=a("div"),F(Ty.$$.fragment),efo=l(),Dae=a("p"),ofo=o("Instantiates one of the base model classes of the library from a configuration."),rfo=l(),Ei=a("p"),tfo=o(`Note:
Loading a model from its configuration file does `),Gae=a("strong"),afo=o("not"),nfo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RP=a("a"),sfo=o("from_pretrained()"),lfo=o(" to load the model weights."),ifo=l(),F(Xh.$$.fragment),dfo=l(),He=a("div"),F(My.$$.fragment),cfo=l(),Oae=a("p"),ffo=o("Instantiate one of the base model classes of the library from a pretrained model."),mfo=l(),Aa=a("p"),gfo=o("The model class to instantiate is selected based on the "),Vae=a("code"),hfo=o("model_type"),pfo=o(` property of the config object (either
passed as an argument or loaded from `),Xae=a("code"),ufo=o("pretrained_model_name_or_path"),_fo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zae=a("code"),bfo=o("pretrained_model_name_or_path"),vfo=o(":"),Ffo=l(),x=a("ul"),zh=a("li"),Qae=a("strong"),Tfo=o("albert"),Mfo=o(" \u2014 "),BP=a("a"),Efo=o("AlbertModel"),Cfo=o(" (ALBERT model)"),wfo=l(),Qh=a("li"),Wae=a("strong"),Afo=o("bart"),yfo=o(" \u2014 "),PP=a("a"),Lfo=o("BartModel"),xfo=o(" (BART model)"),$fo=l(),Wh=a("li"),Hae=a("strong"),kfo=o("beit"),Sfo=o(" \u2014 "),IP=a("a"),Rfo=o("BeitModel"),Bfo=o(" (BEiT model)"),Pfo=l(),Hh=a("li"),Uae=a("strong"),Ifo=o("bert"),qfo=o(" \u2014 "),qP=a("a"),Nfo=o("BertModel"),jfo=o(" (BERT model)"),Dfo=l(),Uh=a("li"),Jae=a("strong"),Gfo=o("bert-generation"),Ofo=o(" \u2014 "),NP=a("a"),Vfo=o("BertGenerationEncoder"),Xfo=o(" (Bert Generation model)"),zfo=l(),Jh=a("li"),Yae=a("strong"),Qfo=o("big_bird"),Wfo=o(" \u2014 "),jP=a("a"),Hfo=o("BigBirdModel"),Ufo=o(" (BigBird model)"),Jfo=l(),Yh=a("li"),Kae=a("strong"),Yfo=o("bigbird_pegasus"),Kfo=o(" \u2014 "),DP=a("a"),Zfo=o("BigBirdPegasusModel"),emo=o(" (BigBirdPegasus model)"),omo=l(),Kh=a("li"),Zae=a("strong"),rmo=o("blenderbot"),tmo=o(" \u2014 "),GP=a("a"),amo=o("BlenderbotModel"),nmo=o(" (Blenderbot model)"),smo=l(),Zh=a("li"),ene=a("strong"),lmo=o("blenderbot-small"),imo=o(" \u2014 "),OP=a("a"),dmo=o("BlenderbotSmallModel"),cmo=o(" (BlenderbotSmall model)"),fmo=l(),ep=a("li"),one=a("strong"),mmo=o("camembert"),gmo=o(" \u2014 "),VP=a("a"),hmo=o("CamembertModel"),pmo=o(" (CamemBERT model)"),umo=l(),op=a("li"),rne=a("strong"),_mo=o("canine"),bmo=o(" \u2014 "),XP=a("a"),vmo=o("CanineModel"),Fmo=o(" (Canine model)"),Tmo=l(),rp=a("li"),tne=a("strong"),Mmo=o("clip"),Emo=o(" \u2014 "),zP=a("a"),Cmo=o("CLIPModel"),wmo=o(" (CLIP model)"),Amo=l(),tp=a("li"),ane=a("strong"),ymo=o("convbert"),Lmo=o(" \u2014 "),QP=a("a"),xmo=o("ConvBertModel"),$mo=o(" (ConvBERT model)"),kmo=l(),ap=a("li"),nne=a("strong"),Smo=o("convnext"),Rmo=o(" \u2014 "),WP=a("a"),Bmo=o("ConvNextModel"),Pmo=o(" (ConvNext model)"),Imo=l(),np=a("li"),sne=a("strong"),qmo=o("ctrl"),Nmo=o(" \u2014 "),HP=a("a"),jmo=o("CTRLModel"),Dmo=o(" (CTRL model)"),Gmo=l(),sp=a("li"),lne=a("strong"),Omo=o("data2vec-audio"),Vmo=o(" \u2014 "),UP=a("a"),Xmo=o("Data2VecAudioModel"),zmo=o(" (Data2VecAudio model)"),Qmo=l(),lp=a("li"),ine=a("strong"),Wmo=o("data2vec-text"),Hmo=o(" \u2014 "),JP=a("a"),Umo=o("Data2VecTextModel"),Jmo=o(" (Data2VecText model)"),Ymo=l(),ip=a("li"),dne=a("strong"),Kmo=o("data2vec-vision"),Zmo=o(" \u2014 "),YP=a("a"),ego=o("Data2VecVisionModel"),ogo=o(" (Data2VecVision model)"),rgo=l(),dp=a("li"),cne=a("strong"),tgo=o("deberta"),ago=o(" \u2014 "),KP=a("a"),ngo=o("DebertaModel"),sgo=o(" (DeBERTa model)"),lgo=l(),cp=a("li"),fne=a("strong"),igo=o("deberta-v2"),dgo=o(" \u2014 "),ZP=a("a"),cgo=o("DebertaV2Model"),fgo=o(" (DeBERTa-v2 model)"),mgo=l(),fp=a("li"),mne=a("strong"),ggo=o("decision_transformer"),hgo=o(" \u2014 "),eI=a("a"),pgo=o("DecisionTransformerModel"),ugo=o(" (Decision Transformer model)"),_go=l(),mp=a("li"),gne=a("strong"),bgo=o("deit"),vgo=o(" \u2014 "),oI=a("a"),Fgo=o("DeiTModel"),Tgo=o(" (DeiT model)"),Mgo=l(),gp=a("li"),hne=a("strong"),Ego=o("detr"),Cgo=o(" \u2014 "),rI=a("a"),wgo=o("DetrModel"),Ago=o(" (DETR model)"),ygo=l(),hp=a("li"),pne=a("strong"),Lgo=o("distilbert"),xgo=o(" \u2014 "),tI=a("a"),$go=o("DistilBertModel"),kgo=o(" (DistilBERT model)"),Sgo=l(),pp=a("li"),une=a("strong"),Rgo=o("dpr"),Bgo=o(" \u2014 "),aI=a("a"),Pgo=o("DPRQuestionEncoder"),Igo=o(" (DPR model)"),qgo=l(),up=a("li"),_ne=a("strong"),Ngo=o("dpt"),jgo=o(" \u2014 "),nI=a("a"),Dgo=o("DPTModel"),Ggo=o(" (DPT model)"),Ogo=l(),_p=a("li"),bne=a("strong"),Vgo=o("electra"),Xgo=o(" \u2014 "),sI=a("a"),zgo=o("ElectraModel"),Qgo=o(" (ELECTRA model)"),Wgo=l(),bp=a("li"),vne=a("strong"),Hgo=o("flaubert"),Ugo=o(" \u2014 "),lI=a("a"),Jgo=o("FlaubertModel"),Ygo=o(" (FlauBERT model)"),Kgo=l(),vp=a("li"),Fne=a("strong"),Zgo=o("flava"),eho=o(" \u2014 "),iI=a("a"),oho=o("FlavaModel"),rho=o(" (Flava model)"),tho=l(),Fp=a("li"),Tne=a("strong"),aho=o("fnet"),nho=o(" \u2014 "),dI=a("a"),sho=o("FNetModel"),lho=o(" (FNet model)"),iho=l(),Tp=a("li"),Mne=a("strong"),dho=o("fsmt"),cho=o(" \u2014 "),cI=a("a"),fho=o("FSMTModel"),mho=o(" (FairSeq Machine-Translation model)"),gho=l(),Ss=a("li"),Ene=a("strong"),hho=o("funnel"),pho=o(" \u2014 "),fI=a("a"),uho=o("FunnelModel"),_ho=o(" or "),mI=a("a"),bho=o("FunnelBaseModel"),vho=o(" (Funnel Transformer model)"),Fho=l(),Mp=a("li"),Cne=a("strong"),Tho=o("glpn"),Mho=o(" \u2014 "),gI=a("a"),Eho=o("GLPNModel"),Cho=o(" (GLPN model)"),who=l(),Ep=a("li"),wne=a("strong"),Aho=o("gpt2"),yho=o(" \u2014 "),hI=a("a"),Lho=o("GPT2Model"),xho=o(" (OpenAI GPT-2 model)"),$ho=l(),Cp=a("li"),Ane=a("strong"),kho=o("gpt_neo"),Sho=o(" \u2014 "),pI=a("a"),Rho=o("GPTNeoModel"),Bho=o(" (GPT Neo model)"),Pho=l(),wp=a("li"),yne=a("strong"),Iho=o("gptj"),qho=o(" \u2014 "),uI=a("a"),Nho=o("GPTJModel"),jho=o(" (GPT-J model)"),Dho=l(),Ap=a("li"),Lne=a("strong"),Gho=o("hubert"),Oho=o(" \u2014 "),_I=a("a"),Vho=o("HubertModel"),Xho=o(" (Hubert model)"),zho=l(),yp=a("li"),xne=a("strong"),Qho=o("ibert"),Who=o(" \u2014 "),bI=a("a"),Hho=o("IBertModel"),Uho=o(" (I-BERT model)"),Jho=l(),Lp=a("li"),$ne=a("strong"),Yho=o("imagegpt"),Kho=o(" \u2014 "),vI=a("a"),Zho=o("ImageGPTModel"),epo=o(" (ImageGPT model)"),opo=l(),xp=a("li"),kne=a("strong"),rpo=o("layoutlm"),tpo=o(" \u2014 "),FI=a("a"),apo=o("LayoutLMModel"),npo=o(" (LayoutLM model)"),spo=l(),$p=a("li"),Sne=a("strong"),lpo=o("layoutlmv2"),ipo=o(" \u2014 "),TI=a("a"),dpo=o("LayoutLMv2Model"),cpo=o(" (LayoutLMv2 model)"),fpo=l(),kp=a("li"),Rne=a("strong"),mpo=o("led"),gpo=o(" \u2014 "),MI=a("a"),hpo=o("LEDModel"),ppo=o(" (LED model)"),upo=l(),Sp=a("li"),Bne=a("strong"),_po=o("longformer"),bpo=o(" \u2014 "),EI=a("a"),vpo=o("LongformerModel"),Fpo=o(" (Longformer model)"),Tpo=l(),Rp=a("li"),Pne=a("strong"),Mpo=o("luke"),Epo=o(" \u2014 "),CI=a("a"),Cpo=o("LukeModel"),wpo=o(" (LUKE model)"),Apo=l(),Bp=a("li"),Ine=a("strong"),ypo=o("lxmert"),Lpo=o(" \u2014 "),wI=a("a"),xpo=o("LxmertModel"),$po=o(" (LXMERT model)"),kpo=l(),Pp=a("li"),qne=a("strong"),Spo=o("m2m_100"),Rpo=o(" \u2014 "),AI=a("a"),Bpo=o("M2M100Model"),Ppo=o(" (M2M100 model)"),Ipo=l(),Ip=a("li"),Nne=a("strong"),qpo=o("marian"),Npo=o(" \u2014 "),yI=a("a"),jpo=o("MarianModel"),Dpo=o(" (Marian model)"),Gpo=l(),qp=a("li"),jne=a("strong"),Opo=o("maskformer"),Vpo=o(" \u2014 "),LI=a("a"),Xpo=o("MaskFormerModel"),zpo=o(" (MaskFormer model)"),Qpo=l(),Np=a("li"),Dne=a("strong"),Wpo=o("mbart"),Hpo=o(" \u2014 "),xI=a("a"),Upo=o("MBartModel"),Jpo=o(" (mBART model)"),Ypo=l(),jp=a("li"),Gne=a("strong"),Kpo=o("megatron-bert"),Zpo=o(" \u2014 "),$I=a("a"),euo=o("MegatronBertModel"),ouo=o(" (MegatronBert model)"),ruo=l(),Dp=a("li"),One=a("strong"),tuo=o("mobilebert"),auo=o(" \u2014 "),kI=a("a"),nuo=o("MobileBertModel"),suo=o(" (MobileBERT model)"),luo=l(),Gp=a("li"),Vne=a("strong"),iuo=o("mpnet"),duo=o(" \u2014 "),SI=a("a"),cuo=o("MPNetModel"),fuo=o(" (MPNet model)"),muo=l(),Op=a("li"),Xne=a("strong"),guo=o("mt5"),huo=o(" \u2014 "),RI=a("a"),puo=o("MT5Model"),uuo=o(" (mT5 model)"),_uo=l(),Vp=a("li"),zne=a("strong"),buo=o("nystromformer"),vuo=o(" \u2014 "),BI=a("a"),Fuo=o("NystromformerModel"),Tuo=o(" (Nystromformer model)"),Muo=l(),Xp=a("li"),Qne=a("strong"),Euo=o("openai-gpt"),Cuo=o(" \u2014 "),PI=a("a"),wuo=o("OpenAIGPTModel"),Auo=o(" (OpenAI GPT model)"),yuo=l(),zp=a("li"),Wne=a("strong"),Luo=o("pegasus"),xuo=o(" \u2014 "),II=a("a"),$uo=o("PegasusModel"),kuo=o(" (Pegasus model)"),Suo=l(),Qp=a("li"),Hne=a("strong"),Ruo=o("perceiver"),Buo=o(" \u2014 "),qI=a("a"),Puo=o("PerceiverModel"),Iuo=o(" (Perceiver model)"),quo=l(),Wp=a("li"),Une=a("strong"),Nuo=o("plbart"),juo=o(" \u2014 "),NI=a("a"),Duo=o("PLBartModel"),Guo=o(" (PLBart model)"),Ouo=l(),Hp=a("li"),Jne=a("strong"),Vuo=o("poolformer"),Xuo=o(" \u2014 "),jI=a("a"),zuo=o("PoolFormerModel"),Quo=o(" (PoolFormer model)"),Wuo=l(),Up=a("li"),Yne=a("strong"),Huo=o("prophetnet"),Uuo=o(" \u2014 "),DI=a("a"),Juo=o("ProphetNetModel"),Yuo=o(" (ProphetNet model)"),Kuo=l(),Jp=a("li"),Kne=a("strong"),Zuo=o("qdqbert"),e_o=o(" \u2014 "),GI=a("a"),o_o=o("QDQBertModel"),r_o=o(" (QDQBert model)"),t_o=l(),Yp=a("li"),Zne=a("strong"),a_o=o("reformer"),n_o=o(" \u2014 "),OI=a("a"),s_o=o("ReformerModel"),l_o=o(" (Reformer model)"),i_o=l(),Kp=a("li"),ese=a("strong"),d_o=o("regnet"),c_o=o(" \u2014 "),VI=a("a"),f_o=o("RegNetModel"),m_o=o(" (RegNet model)"),g_o=l(),Zp=a("li"),ose=a("strong"),h_o=o("rembert"),p_o=o(" \u2014 "),XI=a("a"),u_o=o("RemBertModel"),__o=o(" (RemBERT model)"),b_o=l(),eu=a("li"),rse=a("strong"),v_o=o("resnet"),F_o=o(" \u2014 "),zI=a("a"),T_o=o("ResNetModel"),M_o=o(" (ResNet model)"),E_o=l(),ou=a("li"),tse=a("strong"),C_o=o("retribert"),w_o=o(" \u2014 "),QI=a("a"),A_o=o("RetriBertModel"),y_o=o(" (RetriBERT model)"),L_o=l(),ru=a("li"),ase=a("strong"),x_o=o("roberta"),$_o=o(" \u2014 "),WI=a("a"),k_o=o("RobertaModel"),S_o=o(" (RoBERTa model)"),R_o=l(),tu=a("li"),nse=a("strong"),B_o=o("roformer"),P_o=o(" \u2014 "),HI=a("a"),I_o=o("RoFormerModel"),q_o=o(" (RoFormer model)"),N_o=l(),au=a("li"),sse=a("strong"),j_o=o("segformer"),D_o=o(" \u2014 "),UI=a("a"),G_o=o("SegformerModel"),O_o=o(" (SegFormer model)"),V_o=l(),nu=a("li"),lse=a("strong"),X_o=o("sew"),z_o=o(" \u2014 "),JI=a("a"),Q_o=o("SEWModel"),W_o=o(" (SEW model)"),H_o=l(),su=a("li"),ise=a("strong"),U_o=o("sew-d"),J_o=o(" \u2014 "),YI=a("a"),Y_o=o("SEWDModel"),K_o=o(" (SEW-D model)"),Z_o=l(),lu=a("li"),dse=a("strong"),e6o=o("speech_to_text"),o6o=o(" \u2014 "),KI=a("a"),r6o=o("Speech2TextModel"),t6o=o(" (Speech2Text model)"),a6o=l(),iu=a("li"),cse=a("strong"),n6o=o("splinter"),s6o=o(" \u2014 "),ZI=a("a"),l6o=o("SplinterModel"),i6o=o(" (Splinter model)"),d6o=l(),du=a("li"),fse=a("strong"),c6o=o("squeezebert"),f6o=o(" \u2014 "),eq=a("a"),m6o=o("SqueezeBertModel"),g6o=o(" (SqueezeBERT model)"),h6o=l(),cu=a("li"),mse=a("strong"),p6o=o("swin"),u6o=o(" \u2014 "),oq=a("a"),_6o=o("SwinModel"),b6o=o(" (Swin model)"),v6o=l(),fu=a("li"),gse=a("strong"),F6o=o("t5"),T6o=o(" \u2014 "),rq=a("a"),M6o=o("T5Model"),E6o=o(" (T5 model)"),C6o=l(),mu=a("li"),hse=a("strong"),w6o=o("tapas"),A6o=o(" \u2014 "),tq=a("a"),y6o=o("TapasModel"),L6o=o(" (TAPAS model)"),x6o=l(),gu=a("li"),pse=a("strong"),$6o=o("transfo-xl"),k6o=o(" \u2014 "),aq=a("a"),S6o=o("TransfoXLModel"),R6o=o(" (Transformer-XL model)"),B6o=l(),hu=a("li"),use=a("strong"),P6o=o("unispeech"),I6o=o(" \u2014 "),nq=a("a"),q6o=o("UniSpeechModel"),N6o=o(" (UniSpeech model)"),j6o=l(),pu=a("li"),_se=a("strong"),D6o=o("unispeech-sat"),G6o=o(" \u2014 "),sq=a("a"),O6o=o("UniSpeechSatModel"),V6o=o(" (UniSpeechSat model)"),X6o=l(),uu=a("li"),bse=a("strong"),z6o=o("van"),Q6o=o(" \u2014 "),lq=a("a"),W6o=o("VanModel"),H6o=o(" (VAN model)"),U6o=l(),_u=a("li"),vse=a("strong"),J6o=o("vilt"),Y6o=o(" \u2014 "),iq=a("a"),K6o=o("ViltModel"),Z6o=o(" (ViLT model)"),e1o=l(),bu=a("li"),Fse=a("strong"),o1o=o("vision-text-dual-encoder"),r1o=o(" \u2014 "),dq=a("a"),t1o=o("VisionTextDualEncoderModel"),a1o=o(" (VisionTextDualEncoder model)"),n1o=l(),vu=a("li"),Tse=a("strong"),s1o=o("visual_bert"),l1o=o(" \u2014 "),cq=a("a"),i1o=o("VisualBertModel"),d1o=o(" (VisualBert model)"),c1o=l(),Fu=a("li"),Mse=a("strong"),f1o=o("vit"),m1o=o(" \u2014 "),fq=a("a"),g1o=o("ViTModel"),h1o=o(" (ViT model)"),p1o=l(),Tu=a("li"),Ese=a("strong"),u1o=o("vit_mae"),_1o=o(" \u2014 "),mq=a("a"),b1o=o("ViTMAEModel"),v1o=o(" (ViTMAE model)"),F1o=l(),Mu=a("li"),Cse=a("strong"),T1o=o("wav2vec2"),M1o=o(" \u2014 "),gq=a("a"),E1o=o("Wav2Vec2Model"),C1o=o(" (Wav2Vec2 model)"),w1o=l(),Eu=a("li"),wse=a("strong"),A1o=o("wavlm"),y1o=o(" \u2014 "),hq=a("a"),L1o=o("WavLMModel"),x1o=o(" (WavLM model)"),$1o=l(),Cu=a("li"),Ase=a("strong"),k1o=o("xglm"),S1o=o(" \u2014 "),pq=a("a"),R1o=o("XGLMModel"),B1o=o(" (XGLM model)"),P1o=l(),wu=a("li"),yse=a("strong"),I1o=o("xlm"),q1o=o(" \u2014 "),uq=a("a"),N1o=o("XLMModel"),j1o=o(" (XLM model)"),D1o=l(),Au=a("li"),Lse=a("strong"),G1o=o("xlm-prophetnet"),O1o=o(" \u2014 "),_q=a("a"),V1o=o("XLMProphetNetModel"),X1o=o(" (XLMProphetNet model)"),z1o=l(),yu=a("li"),xse=a("strong"),Q1o=o("xlm-roberta"),W1o=o(" \u2014 "),bq=a("a"),H1o=o("XLMRobertaModel"),U1o=o(" (XLM-RoBERTa model)"),J1o=l(),Lu=a("li"),$se=a("strong"),Y1o=o("xlm-roberta-xl"),K1o=o(" \u2014 "),vq=a("a"),Z1o=o("XLMRobertaXLModel"),ebo=o(" (XLM-RoBERTa-XL model)"),obo=l(),xu=a("li"),kse=a("strong"),rbo=o("xlnet"),tbo=o(" \u2014 "),Fq=a("a"),abo=o("XLNetModel"),nbo=o(" (XLNet model)"),sbo=l(),$u=a("li"),Sse=a("strong"),lbo=o("yolos"),ibo=o(" \u2014 "),Tq=a("a"),dbo=o("YolosModel"),cbo=o(" (YOLOS model)"),fbo=l(),ku=a("li"),Rse=a("strong"),mbo=o("yoso"),gbo=o(" \u2014 "),Mq=a("a"),hbo=o("YosoModel"),pbo=o(" (YOSO model)"),ubo=l(),Su=a("p"),_bo=o("The model is set in evaluation mode by default using "),Bse=a("code"),bbo=o("model.eval()"),vbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pse=a("code"),Fbo=o("model.train()"),Tbo=l(),F(Ru.$$.fragment),NPe=l(),Ci=a("h2"),Bu=a("a"),Ise=a("span"),F(Ey.$$.fragment),Mbo=l(),qse=a("span"),Ebo=o("AutoModelForPreTraining"),jPe=l(),xo=a("div"),F(Cy.$$.fragment),Cbo=l(),wi=a("p"),wbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Eq=a("a"),Abo=o("from_pretrained()"),ybo=o(" class method or the "),Cq=a("a"),Lbo=o("from_config()"),xbo=o(` class
method.`),$bo=l(),wy=a("p"),kbo=o("This class cannot be instantiated directly using "),Nse=a("code"),Sbo=o("__init__()"),Rbo=o(" (throws an error)."),Bbo=l(),rt=a("div"),F(Ay.$$.fragment),Pbo=l(),jse=a("p"),Ibo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qbo=l(),Ai=a("p"),Nbo=o(`Note:
Loading a model from its configuration file does `),Dse=a("strong"),jbo=o("not"),Dbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wq=a("a"),Gbo=o("from_pretrained()"),Obo=o(" to load the model weights."),Vbo=l(),F(Pu.$$.fragment),Xbo=l(),Ue=a("div"),F(yy.$$.fragment),zbo=l(),Gse=a("p"),Qbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wbo=l(),ya=a("p"),Hbo=o("The model class to instantiate is selected based on the "),Ose=a("code"),Ubo=o("model_type"),Jbo=o(` property of the config object (either
passed as an argument or loaded from `),Vse=a("code"),Ybo=o("pretrained_model_name_or_path"),Kbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=a("code"),Zbo=o("pretrained_model_name_or_path"),e4o=o(":"),o4o=l(),G=a("ul"),Iu=a("li"),zse=a("strong"),r4o=o("albert"),t4o=o(" \u2014 "),Aq=a("a"),a4o=o("AlbertForPreTraining"),n4o=o(" (ALBERT model)"),s4o=l(),qu=a("li"),Qse=a("strong"),l4o=o("bart"),i4o=o(" \u2014 "),yq=a("a"),d4o=o("BartForConditionalGeneration"),c4o=o(" (BART model)"),f4o=l(),Nu=a("li"),Wse=a("strong"),m4o=o("bert"),g4o=o(" \u2014 "),Lq=a("a"),h4o=o("BertForPreTraining"),p4o=o(" (BERT model)"),u4o=l(),ju=a("li"),Hse=a("strong"),_4o=o("big_bird"),b4o=o(" \u2014 "),xq=a("a"),v4o=o("BigBirdForPreTraining"),F4o=o(" (BigBird model)"),T4o=l(),Du=a("li"),Use=a("strong"),M4o=o("camembert"),E4o=o(" \u2014 "),$q=a("a"),C4o=o("CamembertForMaskedLM"),w4o=o(" (CamemBERT model)"),A4o=l(),Gu=a("li"),Jse=a("strong"),y4o=o("ctrl"),L4o=o(" \u2014 "),kq=a("a"),x4o=o("CTRLLMHeadModel"),$4o=o(" (CTRL model)"),k4o=l(),Ou=a("li"),Yse=a("strong"),S4o=o("data2vec-text"),R4o=o(" \u2014 "),Sq=a("a"),B4o=o("Data2VecTextForMaskedLM"),P4o=o(" (Data2VecText model)"),I4o=l(),Vu=a("li"),Kse=a("strong"),q4o=o("deberta"),N4o=o(" \u2014 "),Rq=a("a"),j4o=o("DebertaForMaskedLM"),D4o=o(" (DeBERTa model)"),G4o=l(),Xu=a("li"),Zse=a("strong"),O4o=o("deberta-v2"),V4o=o(" \u2014 "),Bq=a("a"),X4o=o("DebertaV2ForMaskedLM"),z4o=o(" (DeBERTa-v2 model)"),Q4o=l(),zu=a("li"),ele=a("strong"),W4o=o("distilbert"),H4o=o(" \u2014 "),Pq=a("a"),U4o=o("DistilBertForMaskedLM"),J4o=o(" (DistilBERT model)"),Y4o=l(),Qu=a("li"),ole=a("strong"),K4o=o("electra"),Z4o=o(" \u2014 "),Iq=a("a"),e2o=o("ElectraForPreTraining"),o2o=o(" (ELECTRA model)"),r2o=l(),Wu=a("li"),rle=a("strong"),t2o=o("flaubert"),a2o=o(" \u2014 "),qq=a("a"),n2o=o("FlaubertWithLMHeadModel"),s2o=o(" (FlauBERT model)"),l2o=l(),Hu=a("li"),tle=a("strong"),i2o=o("flava"),d2o=o(" \u2014 "),Nq=a("a"),c2o=o("FlavaForPreTraining"),f2o=o(" (Flava model)"),m2o=l(),Uu=a("li"),ale=a("strong"),g2o=o("fnet"),h2o=o(" \u2014 "),jq=a("a"),p2o=o("FNetForPreTraining"),u2o=o(" (FNet model)"),_2o=l(),Ju=a("li"),nle=a("strong"),b2o=o("fsmt"),v2o=o(" \u2014 "),Dq=a("a"),F2o=o("FSMTForConditionalGeneration"),T2o=o(" (FairSeq Machine-Translation model)"),M2o=l(),Yu=a("li"),sle=a("strong"),E2o=o("funnel"),C2o=o(" \u2014 "),Gq=a("a"),w2o=o("FunnelForPreTraining"),A2o=o(" (Funnel Transformer model)"),y2o=l(),Ku=a("li"),lle=a("strong"),L2o=o("gpt2"),x2o=o(" \u2014 "),Oq=a("a"),$2o=o("GPT2LMHeadModel"),k2o=o(" (OpenAI GPT-2 model)"),S2o=l(),Zu=a("li"),ile=a("strong"),R2o=o("ibert"),B2o=o(" \u2014 "),Vq=a("a"),P2o=o("IBertForMaskedLM"),I2o=o(" (I-BERT model)"),q2o=l(),e_=a("li"),dle=a("strong"),N2o=o("layoutlm"),j2o=o(" \u2014 "),Xq=a("a"),D2o=o("LayoutLMForMaskedLM"),G2o=o(" (LayoutLM model)"),O2o=l(),o_=a("li"),cle=a("strong"),V2o=o("longformer"),X2o=o(" \u2014 "),zq=a("a"),z2o=o("LongformerForMaskedLM"),Q2o=o(" (Longformer model)"),W2o=l(),r_=a("li"),fle=a("strong"),H2o=o("lxmert"),U2o=o(" \u2014 "),Qq=a("a"),J2o=o("LxmertForPreTraining"),Y2o=o(" (LXMERT model)"),K2o=l(),t_=a("li"),mle=a("strong"),Z2o=o("megatron-bert"),e5o=o(" \u2014 "),Wq=a("a"),o5o=o("MegatronBertForPreTraining"),r5o=o(" (MegatronBert model)"),t5o=l(),a_=a("li"),gle=a("strong"),a5o=o("mobilebert"),n5o=o(" \u2014 "),Hq=a("a"),s5o=o("MobileBertForPreTraining"),l5o=o(" (MobileBERT model)"),i5o=l(),n_=a("li"),hle=a("strong"),d5o=o("mpnet"),c5o=o(" \u2014 "),Uq=a("a"),f5o=o("MPNetForMaskedLM"),m5o=o(" (MPNet model)"),g5o=l(),s_=a("li"),ple=a("strong"),h5o=o("openai-gpt"),p5o=o(" \u2014 "),Jq=a("a"),u5o=o("OpenAIGPTLMHeadModel"),_5o=o(" (OpenAI GPT model)"),b5o=l(),l_=a("li"),ule=a("strong"),v5o=o("retribert"),F5o=o(" \u2014 "),Yq=a("a"),T5o=o("RetriBertModel"),M5o=o(" (RetriBERT model)"),E5o=l(),i_=a("li"),_le=a("strong"),C5o=o("roberta"),w5o=o(" \u2014 "),Kq=a("a"),A5o=o("RobertaForMaskedLM"),y5o=o(" (RoBERTa model)"),L5o=l(),d_=a("li"),ble=a("strong"),x5o=o("squeezebert"),$5o=o(" \u2014 "),Zq=a("a"),k5o=o("SqueezeBertForMaskedLM"),S5o=o(" (SqueezeBERT model)"),R5o=l(),c_=a("li"),vle=a("strong"),B5o=o("t5"),P5o=o(" \u2014 "),eN=a("a"),I5o=o("T5ForConditionalGeneration"),q5o=o(" (T5 model)"),N5o=l(),f_=a("li"),Fle=a("strong"),j5o=o("tapas"),D5o=o(" \u2014 "),oN=a("a"),G5o=o("TapasForMaskedLM"),O5o=o(" (TAPAS model)"),V5o=l(),m_=a("li"),Tle=a("strong"),X5o=o("transfo-xl"),z5o=o(" \u2014 "),rN=a("a"),Q5o=o("TransfoXLLMHeadModel"),W5o=o(" (Transformer-XL model)"),H5o=l(),g_=a("li"),Mle=a("strong"),U5o=o("unispeech"),J5o=o(" \u2014 "),tN=a("a"),Y5o=o("UniSpeechForPreTraining"),K5o=o(" (UniSpeech model)"),Z5o=l(),h_=a("li"),Ele=a("strong"),evo=o("unispeech-sat"),ovo=o(" \u2014 "),aN=a("a"),rvo=o("UniSpeechSatForPreTraining"),tvo=o(" (UniSpeechSat model)"),avo=l(),p_=a("li"),Cle=a("strong"),nvo=o("visual_bert"),svo=o(" \u2014 "),nN=a("a"),lvo=o("VisualBertForPreTraining"),ivo=o(" (VisualBert model)"),dvo=l(),u_=a("li"),wle=a("strong"),cvo=o("vit_mae"),fvo=o(" \u2014 "),sN=a("a"),mvo=o("ViTMAEForPreTraining"),gvo=o(" (ViTMAE model)"),hvo=l(),__=a("li"),Ale=a("strong"),pvo=o("wav2vec2"),uvo=o(" \u2014 "),lN=a("a"),_vo=o("Wav2Vec2ForPreTraining"),bvo=o(" (Wav2Vec2 model)"),vvo=l(),b_=a("li"),yle=a("strong"),Fvo=o("xlm"),Tvo=o(" \u2014 "),iN=a("a"),Mvo=o("XLMWithLMHeadModel"),Evo=o(" (XLM model)"),Cvo=l(),v_=a("li"),Lle=a("strong"),wvo=o("xlm-roberta"),Avo=o(" \u2014 "),dN=a("a"),yvo=o("XLMRobertaForMaskedLM"),Lvo=o(" (XLM-RoBERTa model)"),xvo=l(),F_=a("li"),xle=a("strong"),$vo=o("xlm-roberta-xl"),kvo=o(" \u2014 "),cN=a("a"),Svo=o("XLMRobertaXLForMaskedLM"),Rvo=o(" (XLM-RoBERTa-XL model)"),Bvo=l(),T_=a("li"),$le=a("strong"),Pvo=o("xlnet"),Ivo=o(" \u2014 "),fN=a("a"),qvo=o("XLNetLMHeadModel"),Nvo=o(" (XLNet model)"),jvo=l(),M_=a("p"),Dvo=o("The model is set in evaluation mode by default using "),kle=a("code"),Gvo=o("model.eval()"),Ovo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sle=a("code"),Vvo=o("model.train()"),Xvo=l(),F(E_.$$.fragment),DPe=l(),yi=a("h2"),C_=a("a"),Rle=a("span"),F(Ly.$$.fragment),zvo=l(),Ble=a("span"),Qvo=o("AutoModelForCausalLM"),GPe=l(),$o=a("div"),F(xy.$$.fragment),Wvo=l(),Li=a("p"),Hvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mN=a("a"),Uvo=o("from_pretrained()"),Jvo=o(" class method or the "),gN=a("a"),Yvo=o("from_config()"),Kvo=o(` class
method.`),Zvo=l(),$y=a("p"),eFo=o("This class cannot be instantiated directly using "),Ple=a("code"),oFo=o("__init__()"),rFo=o(" (throws an error)."),tFo=l(),tt=a("div"),F(ky.$$.fragment),aFo=l(),Ile=a("p"),nFo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sFo=l(),xi=a("p"),lFo=o(`Note:
Loading a model from its configuration file does `),qle=a("strong"),iFo=o("not"),dFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=a("a"),cFo=o("from_pretrained()"),fFo=o(" to load the model weights."),mFo=l(),F(w_.$$.fragment),gFo=l(),Je=a("div"),F(Sy.$$.fragment),hFo=l(),Nle=a("p"),pFo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uFo=l(),La=a("p"),_Fo=o("The model class to instantiate is selected based on the "),jle=a("code"),bFo=o("model_type"),vFo=o(` property of the config object (either
passed as an argument or loaded from `),Dle=a("code"),FFo=o("pretrained_model_name_or_path"),TFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gle=a("code"),MFo=o("pretrained_model_name_or_path"),EFo=o(":"),CFo=l(),z=a("ul"),A_=a("li"),Ole=a("strong"),wFo=o("bart"),AFo=o(" \u2014 "),pN=a("a"),yFo=o("BartForCausalLM"),LFo=o(" (BART model)"),xFo=l(),y_=a("li"),Vle=a("strong"),$Fo=o("bert"),kFo=o(" \u2014 "),uN=a("a"),SFo=o("BertLMHeadModel"),RFo=o(" (BERT model)"),BFo=l(),L_=a("li"),Xle=a("strong"),PFo=o("bert-generation"),IFo=o(" \u2014 "),_N=a("a"),qFo=o("BertGenerationDecoder"),NFo=o(" (Bert Generation model)"),jFo=l(),x_=a("li"),zle=a("strong"),DFo=o("big_bird"),GFo=o(" \u2014 "),bN=a("a"),OFo=o("BigBirdForCausalLM"),VFo=o(" (BigBird model)"),XFo=l(),$_=a("li"),Qle=a("strong"),zFo=o("bigbird_pegasus"),QFo=o(" \u2014 "),vN=a("a"),WFo=o("BigBirdPegasusForCausalLM"),HFo=o(" (BigBirdPegasus model)"),UFo=l(),k_=a("li"),Wle=a("strong"),JFo=o("blenderbot"),YFo=o(" \u2014 "),FN=a("a"),KFo=o("BlenderbotForCausalLM"),ZFo=o(" (Blenderbot model)"),eTo=l(),S_=a("li"),Hle=a("strong"),oTo=o("blenderbot-small"),rTo=o(" \u2014 "),TN=a("a"),tTo=o("BlenderbotSmallForCausalLM"),aTo=o(" (BlenderbotSmall model)"),nTo=l(),R_=a("li"),Ule=a("strong"),sTo=o("camembert"),lTo=o(" \u2014 "),MN=a("a"),iTo=o("CamembertForCausalLM"),dTo=o(" (CamemBERT model)"),cTo=l(),B_=a("li"),Jle=a("strong"),fTo=o("ctrl"),mTo=o(" \u2014 "),EN=a("a"),gTo=o("CTRLLMHeadModel"),hTo=o(" (CTRL model)"),pTo=l(),P_=a("li"),Yle=a("strong"),uTo=o("data2vec-text"),_To=o(" \u2014 "),CN=a("a"),bTo=o("Data2VecTextForCausalLM"),vTo=o(" (Data2VecText model)"),FTo=l(),I_=a("li"),Kle=a("strong"),TTo=o("electra"),MTo=o(" \u2014 "),wN=a("a"),ETo=o("ElectraForCausalLM"),CTo=o(" (ELECTRA model)"),wTo=l(),q_=a("li"),Zle=a("strong"),ATo=o("gpt2"),yTo=o(" \u2014 "),AN=a("a"),LTo=o("GPT2LMHeadModel"),xTo=o(" (OpenAI GPT-2 model)"),$To=l(),N_=a("li"),eie=a("strong"),kTo=o("gpt_neo"),STo=o(" \u2014 "),yN=a("a"),RTo=o("GPTNeoForCausalLM"),BTo=o(" (GPT Neo model)"),PTo=l(),j_=a("li"),oie=a("strong"),ITo=o("gptj"),qTo=o(" \u2014 "),LN=a("a"),NTo=o("GPTJForCausalLM"),jTo=o(" (GPT-J model)"),DTo=l(),D_=a("li"),rie=a("strong"),GTo=o("marian"),OTo=o(" \u2014 "),xN=a("a"),VTo=o("MarianForCausalLM"),XTo=o(" (Marian model)"),zTo=l(),G_=a("li"),tie=a("strong"),QTo=o("mbart"),WTo=o(" \u2014 "),$N=a("a"),HTo=o("MBartForCausalLM"),UTo=o(" (mBART model)"),JTo=l(),O_=a("li"),aie=a("strong"),YTo=o("megatron-bert"),KTo=o(" \u2014 "),kN=a("a"),ZTo=o("MegatronBertForCausalLM"),eMo=o(" (MegatronBert model)"),oMo=l(),V_=a("li"),nie=a("strong"),rMo=o("openai-gpt"),tMo=o(" \u2014 "),SN=a("a"),aMo=o("OpenAIGPTLMHeadModel"),nMo=o(" (OpenAI GPT model)"),sMo=l(),X_=a("li"),sie=a("strong"),lMo=o("pegasus"),iMo=o(" \u2014 "),RN=a("a"),dMo=o("PegasusForCausalLM"),cMo=o(" (Pegasus model)"),fMo=l(),z_=a("li"),lie=a("strong"),mMo=o("plbart"),gMo=o(" \u2014 "),BN=a("a"),hMo=o("PLBartForCausalLM"),pMo=o(" (PLBart model)"),uMo=l(),Q_=a("li"),iie=a("strong"),_Mo=o("prophetnet"),bMo=o(" \u2014 "),PN=a("a"),vMo=o("ProphetNetForCausalLM"),FMo=o(" (ProphetNet model)"),TMo=l(),W_=a("li"),die=a("strong"),MMo=o("qdqbert"),EMo=o(" \u2014 "),IN=a("a"),CMo=o("QDQBertLMHeadModel"),wMo=o(" (QDQBert model)"),AMo=l(),H_=a("li"),cie=a("strong"),yMo=o("reformer"),LMo=o(" \u2014 "),qN=a("a"),xMo=o("ReformerModelWithLMHead"),$Mo=o(" (Reformer model)"),kMo=l(),U_=a("li"),fie=a("strong"),SMo=o("rembert"),RMo=o(" \u2014 "),NN=a("a"),BMo=o("RemBertForCausalLM"),PMo=o(" (RemBERT model)"),IMo=l(),J_=a("li"),mie=a("strong"),qMo=o("roberta"),NMo=o(" \u2014 "),jN=a("a"),jMo=o("RobertaForCausalLM"),DMo=o(" (RoBERTa model)"),GMo=l(),Y_=a("li"),gie=a("strong"),OMo=o("roformer"),VMo=o(" \u2014 "),DN=a("a"),XMo=o("RoFormerForCausalLM"),zMo=o(" (RoFormer model)"),QMo=l(),K_=a("li"),hie=a("strong"),WMo=o("speech_to_text_2"),HMo=o(" \u2014 "),GN=a("a"),UMo=o("Speech2Text2ForCausalLM"),JMo=o(" (Speech2Text2 model)"),YMo=l(),Z_=a("li"),pie=a("strong"),KMo=o("transfo-xl"),ZMo=o(" \u2014 "),ON=a("a"),eEo=o("TransfoXLLMHeadModel"),oEo=o(" (Transformer-XL model)"),rEo=l(),e6=a("li"),uie=a("strong"),tEo=o("trocr"),aEo=o(" \u2014 "),VN=a("a"),nEo=o("TrOCRForCausalLM"),sEo=o(" (TrOCR model)"),lEo=l(),o6=a("li"),_ie=a("strong"),iEo=o("xglm"),dEo=o(" \u2014 "),XN=a("a"),cEo=o("XGLMForCausalLM"),fEo=o(" (XGLM model)"),mEo=l(),r6=a("li"),bie=a("strong"),gEo=o("xlm"),hEo=o(" \u2014 "),zN=a("a"),pEo=o("XLMWithLMHeadModel"),uEo=o(" (XLM model)"),_Eo=l(),t6=a("li"),vie=a("strong"),bEo=o("xlm-prophetnet"),vEo=o(" \u2014 "),QN=a("a"),FEo=o("XLMProphetNetForCausalLM"),TEo=o(" (XLMProphetNet model)"),MEo=l(),a6=a("li"),Fie=a("strong"),EEo=o("xlm-roberta"),CEo=o(" \u2014 "),WN=a("a"),wEo=o("XLMRobertaForCausalLM"),AEo=o(" (XLM-RoBERTa model)"),yEo=l(),n6=a("li"),Tie=a("strong"),LEo=o("xlm-roberta-xl"),xEo=o(" \u2014 "),HN=a("a"),$Eo=o("XLMRobertaXLForCausalLM"),kEo=o(" (XLM-RoBERTa-XL model)"),SEo=l(),s6=a("li"),Mie=a("strong"),REo=o("xlnet"),BEo=o(" \u2014 "),UN=a("a"),PEo=o("XLNetLMHeadModel"),IEo=o(" (XLNet model)"),qEo=l(),l6=a("p"),NEo=o("The model is set in evaluation mode by default using "),Eie=a("code"),jEo=o("model.eval()"),DEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=a("code"),GEo=o("model.train()"),OEo=l(),F(i6.$$.fragment),OPe=l(),$i=a("h2"),d6=a("a"),wie=a("span"),F(Ry.$$.fragment),VEo=l(),Aie=a("span"),XEo=o("AutoModelForMaskedLM"),VPe=l(),ko=a("div"),F(By.$$.fragment),zEo=l(),ki=a("p"),QEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JN=a("a"),WEo=o("from_pretrained()"),HEo=o(" class method or the "),YN=a("a"),UEo=o("from_config()"),JEo=o(` class
method.`),YEo=l(),Py=a("p"),KEo=o("This class cannot be instantiated directly using "),yie=a("code"),ZEo=o("__init__()"),eCo=o(" (throws an error)."),oCo=l(),at=a("div"),F(Iy.$$.fragment),rCo=l(),Lie=a("p"),tCo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aCo=l(),Si=a("p"),nCo=o(`Note:
Loading a model from its configuration file does `),xie=a("strong"),sCo=o("not"),lCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=a("a"),iCo=o("from_pretrained()"),dCo=o(" to load the model weights."),cCo=l(),F(c6.$$.fragment),fCo=l(),Ye=a("div"),F(qy.$$.fragment),mCo=l(),$ie=a("p"),gCo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hCo=l(),xa=a("p"),pCo=o("The model class to instantiate is selected based on the "),kie=a("code"),uCo=o("model_type"),_Co=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),bCo=o("pretrained_model_name_or_path"),vCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=a("code"),FCo=o("pretrained_model_name_or_path"),TCo=o(":"),MCo=l(),Q=a("ul"),f6=a("li"),Bie=a("strong"),ECo=o("albert"),CCo=o(" \u2014 "),ZN=a("a"),wCo=o("AlbertForMaskedLM"),ACo=o(" (ALBERT model)"),yCo=l(),m6=a("li"),Pie=a("strong"),LCo=o("bart"),xCo=o(" \u2014 "),ej=a("a"),$Co=o("BartForConditionalGeneration"),kCo=o(" (BART model)"),SCo=l(),g6=a("li"),Iie=a("strong"),RCo=o("bert"),BCo=o(" \u2014 "),oj=a("a"),PCo=o("BertForMaskedLM"),ICo=o(" (BERT model)"),qCo=l(),h6=a("li"),qie=a("strong"),NCo=o("big_bird"),jCo=o(" \u2014 "),rj=a("a"),DCo=o("BigBirdForMaskedLM"),GCo=o(" (BigBird model)"),OCo=l(),p6=a("li"),Nie=a("strong"),VCo=o("camembert"),XCo=o(" \u2014 "),tj=a("a"),zCo=o("CamembertForMaskedLM"),QCo=o(" (CamemBERT model)"),WCo=l(),u6=a("li"),jie=a("strong"),HCo=o("convbert"),UCo=o(" \u2014 "),aj=a("a"),JCo=o("ConvBertForMaskedLM"),YCo=o(" (ConvBERT model)"),KCo=l(),_6=a("li"),Die=a("strong"),ZCo=o("data2vec-text"),e3o=o(" \u2014 "),nj=a("a"),o3o=o("Data2VecTextForMaskedLM"),r3o=o(" (Data2VecText model)"),t3o=l(),b6=a("li"),Gie=a("strong"),a3o=o("deberta"),n3o=o(" \u2014 "),sj=a("a"),s3o=o("DebertaForMaskedLM"),l3o=o(" (DeBERTa model)"),i3o=l(),v6=a("li"),Oie=a("strong"),d3o=o("deberta-v2"),c3o=o(" \u2014 "),lj=a("a"),f3o=o("DebertaV2ForMaskedLM"),m3o=o(" (DeBERTa-v2 model)"),g3o=l(),F6=a("li"),Vie=a("strong"),h3o=o("distilbert"),p3o=o(" \u2014 "),ij=a("a"),u3o=o("DistilBertForMaskedLM"),_3o=o(" (DistilBERT model)"),b3o=l(),T6=a("li"),Xie=a("strong"),v3o=o("electra"),F3o=o(" \u2014 "),dj=a("a"),T3o=o("ElectraForMaskedLM"),M3o=o(" (ELECTRA model)"),E3o=l(),M6=a("li"),zie=a("strong"),C3o=o("flaubert"),w3o=o(" \u2014 "),cj=a("a"),A3o=o("FlaubertWithLMHeadModel"),y3o=o(" (FlauBERT model)"),L3o=l(),E6=a("li"),Qie=a("strong"),x3o=o("fnet"),$3o=o(" \u2014 "),fj=a("a"),k3o=o("FNetForMaskedLM"),S3o=o(" (FNet model)"),R3o=l(),C6=a("li"),Wie=a("strong"),B3o=o("funnel"),P3o=o(" \u2014 "),mj=a("a"),I3o=o("FunnelForMaskedLM"),q3o=o(" (Funnel Transformer model)"),N3o=l(),w6=a("li"),Hie=a("strong"),j3o=o("ibert"),D3o=o(" \u2014 "),gj=a("a"),G3o=o("IBertForMaskedLM"),O3o=o(" (I-BERT model)"),V3o=l(),A6=a("li"),Uie=a("strong"),X3o=o("layoutlm"),z3o=o(" \u2014 "),hj=a("a"),Q3o=o("LayoutLMForMaskedLM"),W3o=o(" (LayoutLM model)"),H3o=l(),y6=a("li"),Jie=a("strong"),U3o=o("longformer"),J3o=o(" \u2014 "),pj=a("a"),Y3o=o("LongformerForMaskedLM"),K3o=o(" (Longformer model)"),Z3o=l(),L6=a("li"),Yie=a("strong"),ewo=o("mbart"),owo=o(" \u2014 "),uj=a("a"),rwo=o("MBartForConditionalGeneration"),two=o(" (mBART model)"),awo=l(),x6=a("li"),Kie=a("strong"),nwo=o("megatron-bert"),swo=o(" \u2014 "),_j=a("a"),lwo=o("MegatronBertForMaskedLM"),iwo=o(" (MegatronBert model)"),dwo=l(),$6=a("li"),Zie=a("strong"),cwo=o("mobilebert"),fwo=o(" \u2014 "),bj=a("a"),mwo=o("MobileBertForMaskedLM"),gwo=o(" (MobileBERT model)"),hwo=l(),k6=a("li"),ede=a("strong"),pwo=o("mpnet"),uwo=o(" \u2014 "),vj=a("a"),_wo=o("MPNetForMaskedLM"),bwo=o(" (MPNet model)"),vwo=l(),S6=a("li"),ode=a("strong"),Fwo=o("nystromformer"),Two=o(" \u2014 "),Fj=a("a"),Mwo=o("NystromformerForMaskedLM"),Ewo=o(" (Nystromformer model)"),Cwo=l(),R6=a("li"),rde=a("strong"),wwo=o("perceiver"),Awo=o(" \u2014 "),Tj=a("a"),ywo=o("PerceiverForMaskedLM"),Lwo=o(" (Perceiver model)"),xwo=l(),B6=a("li"),tde=a("strong"),$wo=o("qdqbert"),kwo=o(" \u2014 "),Mj=a("a"),Swo=o("QDQBertForMaskedLM"),Rwo=o(" (QDQBert model)"),Bwo=l(),P6=a("li"),ade=a("strong"),Pwo=o("reformer"),Iwo=o(" \u2014 "),Ej=a("a"),qwo=o("ReformerForMaskedLM"),Nwo=o(" (Reformer model)"),jwo=l(),I6=a("li"),nde=a("strong"),Dwo=o("rembert"),Gwo=o(" \u2014 "),Cj=a("a"),Owo=o("RemBertForMaskedLM"),Vwo=o(" (RemBERT model)"),Xwo=l(),q6=a("li"),sde=a("strong"),zwo=o("roberta"),Qwo=o(" \u2014 "),wj=a("a"),Wwo=o("RobertaForMaskedLM"),Hwo=o(" (RoBERTa model)"),Uwo=l(),N6=a("li"),lde=a("strong"),Jwo=o("roformer"),Ywo=o(" \u2014 "),Aj=a("a"),Kwo=o("RoFormerForMaskedLM"),Zwo=o(" (RoFormer model)"),eAo=l(),j6=a("li"),ide=a("strong"),oAo=o("squeezebert"),rAo=o(" \u2014 "),yj=a("a"),tAo=o("SqueezeBertForMaskedLM"),aAo=o(" (SqueezeBERT model)"),nAo=l(),D6=a("li"),dde=a("strong"),sAo=o("tapas"),lAo=o(" \u2014 "),Lj=a("a"),iAo=o("TapasForMaskedLM"),dAo=o(" (TAPAS model)"),cAo=l(),G6=a("li"),cde=a("strong"),fAo=o("wav2vec2"),mAo=o(" \u2014 "),fde=a("code"),gAo=o("Wav2Vec2ForMaskedLM"),hAo=o(" (Wav2Vec2 model)"),pAo=l(),O6=a("li"),mde=a("strong"),uAo=o("xlm"),_Ao=o(" \u2014 "),xj=a("a"),bAo=o("XLMWithLMHeadModel"),vAo=o(" (XLM model)"),FAo=l(),V6=a("li"),gde=a("strong"),TAo=o("xlm-roberta"),MAo=o(" \u2014 "),$j=a("a"),EAo=o("XLMRobertaForMaskedLM"),CAo=o(" (XLM-RoBERTa model)"),wAo=l(),X6=a("li"),hde=a("strong"),AAo=o("xlm-roberta-xl"),yAo=o(" \u2014 "),kj=a("a"),LAo=o("XLMRobertaXLForMaskedLM"),xAo=o(" (XLM-RoBERTa-XL model)"),$Ao=l(),z6=a("li"),pde=a("strong"),kAo=o("yoso"),SAo=o(" \u2014 "),Sj=a("a"),RAo=o("YosoForMaskedLM"),BAo=o(" (YOSO model)"),PAo=l(),Q6=a("p"),IAo=o("The model is set in evaluation mode by default using "),ude=a("code"),qAo=o("model.eval()"),NAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),jAo=o("model.train()"),DAo=l(),F(W6.$$.fragment),XPe=l(),Ri=a("h2"),H6=a("a"),bde=a("span"),F(Ny.$$.fragment),GAo=l(),vde=a("span"),OAo=o("AutoModelForSeq2SeqLM"),zPe=l(),So=a("div"),F(jy.$$.fragment),VAo=l(),Bi=a("p"),XAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Rj=a("a"),zAo=o("from_pretrained()"),QAo=o(" class method or the "),Bj=a("a"),WAo=o("from_config()"),HAo=o(` class
method.`),UAo=l(),Dy=a("p"),JAo=o("This class cannot be instantiated directly using "),Fde=a("code"),YAo=o("__init__()"),KAo=o(" (throws an error)."),ZAo=l(),nt=a("div"),F(Gy.$$.fragment),e0o=l(),Tde=a("p"),o0o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),r0o=l(),Pi=a("p"),t0o=o(`Note:
Loading a model from its configuration file does `),Mde=a("strong"),a0o=o("not"),n0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pj=a("a"),s0o=o("from_pretrained()"),l0o=o(" to load the model weights."),i0o=l(),F(U6.$$.fragment),d0o=l(),Ke=a("div"),F(Oy.$$.fragment),c0o=l(),Ede=a("p"),f0o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m0o=l(),$a=a("p"),g0o=o("The model class to instantiate is selected based on the "),Cde=a("code"),h0o=o("model_type"),p0o=o(` property of the config object (either
passed as an argument or loaded from `),wde=a("code"),u0o=o("pretrained_model_name_or_path"),_0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=a("code"),b0o=o("pretrained_model_name_or_path"),v0o=o(":"),F0o=l(),he=a("ul"),J6=a("li"),yde=a("strong"),T0o=o("bart"),M0o=o(" \u2014 "),Ij=a("a"),E0o=o("BartForConditionalGeneration"),C0o=o(" (BART model)"),w0o=l(),Y6=a("li"),Lde=a("strong"),A0o=o("bigbird_pegasus"),y0o=o(" \u2014 "),qj=a("a"),L0o=o("BigBirdPegasusForConditionalGeneration"),x0o=o(" (BigBirdPegasus model)"),$0o=l(),K6=a("li"),xde=a("strong"),k0o=o("blenderbot"),S0o=o(" \u2014 "),Nj=a("a"),R0o=o("BlenderbotForConditionalGeneration"),B0o=o(" (Blenderbot model)"),P0o=l(),Z6=a("li"),$de=a("strong"),I0o=o("blenderbot-small"),q0o=o(" \u2014 "),jj=a("a"),N0o=o("BlenderbotSmallForConditionalGeneration"),j0o=o(" (BlenderbotSmall model)"),D0o=l(),e1=a("li"),kde=a("strong"),G0o=o("encoder-decoder"),O0o=o(" \u2014 "),Dj=a("a"),V0o=o("EncoderDecoderModel"),X0o=o(" (Encoder decoder model)"),z0o=l(),o1=a("li"),Sde=a("strong"),Q0o=o("fsmt"),W0o=o(" \u2014 "),Gj=a("a"),H0o=o("FSMTForConditionalGeneration"),U0o=o(" (FairSeq Machine-Translation model)"),J0o=l(),r1=a("li"),Rde=a("strong"),Y0o=o("led"),K0o=o(" \u2014 "),Oj=a("a"),Z0o=o("LEDForConditionalGeneration"),eyo=o(" (LED model)"),oyo=l(),t1=a("li"),Bde=a("strong"),ryo=o("m2m_100"),tyo=o(" \u2014 "),Vj=a("a"),ayo=o("M2M100ForConditionalGeneration"),nyo=o(" (M2M100 model)"),syo=l(),a1=a("li"),Pde=a("strong"),lyo=o("marian"),iyo=o(" \u2014 "),Xj=a("a"),dyo=o("MarianMTModel"),cyo=o(" (Marian model)"),fyo=l(),n1=a("li"),Ide=a("strong"),myo=o("mbart"),gyo=o(" \u2014 "),zj=a("a"),hyo=o("MBartForConditionalGeneration"),pyo=o(" (mBART model)"),uyo=l(),s1=a("li"),qde=a("strong"),_yo=o("mt5"),byo=o(" \u2014 "),Qj=a("a"),vyo=o("MT5ForConditionalGeneration"),Fyo=o(" (mT5 model)"),Tyo=l(),l1=a("li"),Nde=a("strong"),Myo=o("pegasus"),Eyo=o(" \u2014 "),Wj=a("a"),Cyo=o("PegasusForConditionalGeneration"),wyo=o(" (Pegasus model)"),Ayo=l(),i1=a("li"),jde=a("strong"),yyo=o("plbart"),Lyo=o(" \u2014 "),Hj=a("a"),xyo=o("PLBartForConditionalGeneration"),$yo=o(" (PLBart model)"),kyo=l(),d1=a("li"),Dde=a("strong"),Syo=o("prophetnet"),Ryo=o(" \u2014 "),Uj=a("a"),Byo=o("ProphetNetForConditionalGeneration"),Pyo=o(" (ProphetNet model)"),Iyo=l(),c1=a("li"),Gde=a("strong"),qyo=o("t5"),Nyo=o(" \u2014 "),Jj=a("a"),jyo=o("T5ForConditionalGeneration"),Dyo=o(" (T5 model)"),Gyo=l(),f1=a("li"),Ode=a("strong"),Oyo=o("tapex"),Vyo=o(" \u2014 "),Yj=a("a"),Xyo=o("BartForConditionalGeneration"),zyo=o(" (TAPEX model)"),Qyo=l(),m1=a("li"),Vde=a("strong"),Wyo=o("xlm-prophetnet"),Hyo=o(" \u2014 "),Kj=a("a"),Uyo=o("XLMProphetNetForConditionalGeneration"),Jyo=o(" (XLMProphetNet model)"),Yyo=l(),g1=a("p"),Kyo=o("The model is set in evaluation mode by default using "),Xde=a("code"),Zyo=o("model.eval()"),eLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),oLo=o("model.train()"),rLo=l(),F(h1.$$.fragment),QPe=l(),Ii=a("h2"),p1=a("a"),Qde=a("span"),F(Vy.$$.fragment),tLo=l(),Wde=a("span"),aLo=o("AutoModelForSequenceClassification"),WPe=l(),Ro=a("div"),F(Xy.$$.fragment),nLo=l(),qi=a("p"),sLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zj=a("a"),lLo=o("from_pretrained()"),iLo=o(" class method or the "),eD=a("a"),dLo=o("from_config()"),cLo=o(` class
method.`),fLo=l(),zy=a("p"),mLo=o("This class cannot be instantiated directly using "),Hde=a("code"),gLo=o("__init__()"),hLo=o(" (throws an error)."),pLo=l(),st=a("div"),F(Qy.$$.fragment),uLo=l(),Ude=a("p"),_Lo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bLo=l(),Ni=a("p"),vLo=o(`Note:
Loading a model from its configuration file does `),Jde=a("strong"),FLo=o("not"),TLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oD=a("a"),MLo=o("from_pretrained()"),ELo=o(" to load the model weights."),CLo=l(),F(u1.$$.fragment),wLo=l(),Ze=a("div"),F(Wy.$$.fragment),ALo=l(),Yde=a("p"),yLo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LLo=l(),ka=a("p"),xLo=o("The model class to instantiate is selected based on the "),Kde=a("code"),$Lo=o("model_type"),kLo=o(` property of the config object (either
passed as an argument or loaded from `),Zde=a("code"),SLo=o("pretrained_model_name_or_path"),RLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=a("code"),BLo=o("pretrained_model_name_or_path"),PLo=o(":"),ILo=l(),q=a("ul"),_1=a("li"),oce=a("strong"),qLo=o("albert"),NLo=o(" \u2014 "),rD=a("a"),jLo=o("AlbertForSequenceClassification"),DLo=o(" (ALBERT model)"),GLo=l(),b1=a("li"),rce=a("strong"),OLo=o("bart"),VLo=o(" \u2014 "),tD=a("a"),XLo=o("BartForSequenceClassification"),zLo=o(" (BART model)"),QLo=l(),v1=a("li"),tce=a("strong"),WLo=o("bert"),HLo=o(" \u2014 "),aD=a("a"),ULo=o("BertForSequenceClassification"),JLo=o(" (BERT model)"),YLo=l(),F1=a("li"),ace=a("strong"),KLo=o("big_bird"),ZLo=o(" \u2014 "),nD=a("a"),e8o=o("BigBirdForSequenceClassification"),o8o=o(" (BigBird model)"),r8o=l(),T1=a("li"),nce=a("strong"),t8o=o("bigbird_pegasus"),a8o=o(" \u2014 "),sD=a("a"),n8o=o("BigBirdPegasusForSequenceClassification"),s8o=o(" (BigBirdPegasus model)"),l8o=l(),M1=a("li"),sce=a("strong"),i8o=o("camembert"),d8o=o(" \u2014 "),lD=a("a"),c8o=o("CamembertForSequenceClassification"),f8o=o(" (CamemBERT model)"),m8o=l(),E1=a("li"),lce=a("strong"),g8o=o("canine"),h8o=o(" \u2014 "),iD=a("a"),p8o=o("CanineForSequenceClassification"),u8o=o(" (Canine model)"),_8o=l(),C1=a("li"),ice=a("strong"),b8o=o("convbert"),v8o=o(" \u2014 "),dD=a("a"),F8o=o("ConvBertForSequenceClassification"),T8o=o(" (ConvBERT model)"),M8o=l(),w1=a("li"),dce=a("strong"),E8o=o("ctrl"),C8o=o(" \u2014 "),cD=a("a"),w8o=o("CTRLForSequenceClassification"),A8o=o(" (CTRL model)"),y8o=l(),A1=a("li"),cce=a("strong"),L8o=o("data2vec-text"),x8o=o(" \u2014 "),fD=a("a"),$8o=o("Data2VecTextForSequenceClassification"),k8o=o(" (Data2VecText model)"),S8o=l(),y1=a("li"),fce=a("strong"),R8o=o("deberta"),B8o=o(" \u2014 "),mD=a("a"),P8o=o("DebertaForSequenceClassification"),I8o=o(" (DeBERTa model)"),q8o=l(),L1=a("li"),mce=a("strong"),N8o=o("deberta-v2"),j8o=o(" \u2014 "),gD=a("a"),D8o=o("DebertaV2ForSequenceClassification"),G8o=o(" (DeBERTa-v2 model)"),O8o=l(),x1=a("li"),gce=a("strong"),V8o=o("distilbert"),X8o=o(" \u2014 "),hD=a("a"),z8o=o("DistilBertForSequenceClassification"),Q8o=o(" (DistilBERT model)"),W8o=l(),$1=a("li"),hce=a("strong"),H8o=o("electra"),U8o=o(" \u2014 "),pD=a("a"),J8o=o("ElectraForSequenceClassification"),Y8o=o(" (ELECTRA model)"),K8o=l(),k1=a("li"),pce=a("strong"),Z8o=o("flaubert"),exo=o(" \u2014 "),uD=a("a"),oxo=o("FlaubertForSequenceClassification"),rxo=o(" (FlauBERT model)"),txo=l(),S1=a("li"),uce=a("strong"),axo=o("fnet"),nxo=o(" \u2014 "),_D=a("a"),sxo=o("FNetForSequenceClassification"),lxo=o(" (FNet model)"),ixo=l(),R1=a("li"),_ce=a("strong"),dxo=o("funnel"),cxo=o(" \u2014 "),bD=a("a"),fxo=o("FunnelForSequenceClassification"),mxo=o(" (Funnel Transformer model)"),gxo=l(),B1=a("li"),bce=a("strong"),hxo=o("gpt2"),pxo=o(" \u2014 "),vD=a("a"),uxo=o("GPT2ForSequenceClassification"),_xo=o(" (OpenAI GPT-2 model)"),bxo=l(),P1=a("li"),vce=a("strong"),vxo=o("gpt_neo"),Fxo=o(" \u2014 "),FD=a("a"),Txo=o("GPTNeoForSequenceClassification"),Mxo=o(" (GPT Neo model)"),Exo=l(),I1=a("li"),Fce=a("strong"),Cxo=o("gptj"),wxo=o(" \u2014 "),TD=a("a"),Axo=o("GPTJForSequenceClassification"),yxo=o(" (GPT-J model)"),Lxo=l(),q1=a("li"),Tce=a("strong"),xxo=o("ibert"),$xo=o(" \u2014 "),MD=a("a"),kxo=o("IBertForSequenceClassification"),Sxo=o(" (I-BERT model)"),Rxo=l(),N1=a("li"),Mce=a("strong"),Bxo=o("layoutlm"),Pxo=o(" \u2014 "),ED=a("a"),Ixo=o("LayoutLMForSequenceClassification"),qxo=o(" (LayoutLM model)"),Nxo=l(),j1=a("li"),Ece=a("strong"),jxo=o("layoutlmv2"),Dxo=o(" \u2014 "),CD=a("a"),Gxo=o("LayoutLMv2ForSequenceClassification"),Oxo=o(" (LayoutLMv2 model)"),Vxo=l(),D1=a("li"),Cce=a("strong"),Xxo=o("led"),zxo=o(" \u2014 "),wD=a("a"),Qxo=o("LEDForSequenceClassification"),Wxo=o(" (LED model)"),Hxo=l(),G1=a("li"),wce=a("strong"),Uxo=o("longformer"),Jxo=o(" \u2014 "),AD=a("a"),Yxo=o("LongformerForSequenceClassification"),Kxo=o(" (Longformer model)"),Zxo=l(),O1=a("li"),Ace=a("strong"),e7o=o("mbart"),o7o=o(" \u2014 "),yD=a("a"),r7o=o("MBartForSequenceClassification"),t7o=o(" (mBART model)"),a7o=l(),V1=a("li"),yce=a("strong"),n7o=o("megatron-bert"),s7o=o(" \u2014 "),LD=a("a"),l7o=o("MegatronBertForSequenceClassification"),i7o=o(" (MegatronBert model)"),d7o=l(),X1=a("li"),Lce=a("strong"),c7o=o("mobilebert"),f7o=o(" \u2014 "),xD=a("a"),m7o=o("MobileBertForSequenceClassification"),g7o=o(" (MobileBERT model)"),h7o=l(),z1=a("li"),xce=a("strong"),p7o=o("mpnet"),u7o=o(" \u2014 "),$D=a("a"),_7o=o("MPNetForSequenceClassification"),b7o=o(" (MPNet model)"),v7o=l(),Q1=a("li"),$ce=a("strong"),F7o=o("nystromformer"),T7o=o(" \u2014 "),kD=a("a"),M7o=o("NystromformerForSequenceClassification"),E7o=o(" (Nystromformer model)"),C7o=l(),W1=a("li"),kce=a("strong"),w7o=o("openai-gpt"),A7o=o(" \u2014 "),SD=a("a"),y7o=o("OpenAIGPTForSequenceClassification"),L7o=o(" (OpenAI GPT model)"),x7o=l(),H1=a("li"),Sce=a("strong"),$7o=o("perceiver"),k7o=o(" \u2014 "),RD=a("a"),S7o=o("PerceiverForSequenceClassification"),R7o=o(" (Perceiver model)"),B7o=l(),U1=a("li"),Rce=a("strong"),P7o=o("plbart"),I7o=o(" \u2014 "),BD=a("a"),q7o=o("PLBartForSequenceClassification"),N7o=o(" (PLBart model)"),j7o=l(),J1=a("li"),Bce=a("strong"),D7o=o("qdqbert"),G7o=o(" \u2014 "),PD=a("a"),O7o=o("QDQBertForSequenceClassification"),V7o=o(" (QDQBert model)"),X7o=l(),Y1=a("li"),Pce=a("strong"),z7o=o("reformer"),Q7o=o(" \u2014 "),ID=a("a"),W7o=o("ReformerForSequenceClassification"),H7o=o(" (Reformer model)"),U7o=l(),K1=a("li"),Ice=a("strong"),J7o=o("rembert"),Y7o=o(" \u2014 "),qD=a("a"),K7o=o("RemBertForSequenceClassification"),Z7o=o(" (RemBERT model)"),e9o=l(),Z1=a("li"),qce=a("strong"),o9o=o("roberta"),r9o=o(" \u2014 "),ND=a("a"),t9o=o("RobertaForSequenceClassification"),a9o=o(" (RoBERTa model)"),n9o=l(),eb=a("li"),Nce=a("strong"),s9o=o("roformer"),l9o=o(" \u2014 "),jD=a("a"),i9o=o("RoFormerForSequenceClassification"),d9o=o(" (RoFormer model)"),c9o=l(),ob=a("li"),jce=a("strong"),f9o=o("squeezebert"),m9o=o(" \u2014 "),DD=a("a"),g9o=o("SqueezeBertForSequenceClassification"),h9o=o(" (SqueezeBERT model)"),p9o=l(),rb=a("li"),Dce=a("strong"),u9o=o("tapas"),_9o=o(" \u2014 "),GD=a("a"),b9o=o("TapasForSequenceClassification"),v9o=o(" (TAPAS model)"),F9o=l(),tb=a("li"),Gce=a("strong"),T9o=o("tapex"),M9o=o(" \u2014 "),OD=a("a"),E9o=o("BartForSequenceClassification"),C9o=o(" (TAPEX model)"),w9o=l(),ab=a("li"),Oce=a("strong"),A9o=o("transfo-xl"),y9o=o(" \u2014 "),VD=a("a"),L9o=o("TransfoXLForSequenceClassification"),x9o=o(" (Transformer-XL model)"),$9o=l(),nb=a("li"),Vce=a("strong"),k9o=o("xlm"),S9o=o(" \u2014 "),XD=a("a"),R9o=o("XLMForSequenceClassification"),B9o=o(" (XLM model)"),P9o=l(),sb=a("li"),Xce=a("strong"),I9o=o("xlm-roberta"),q9o=o(" \u2014 "),zD=a("a"),N9o=o("XLMRobertaForSequenceClassification"),j9o=o(" (XLM-RoBERTa model)"),D9o=l(),lb=a("li"),zce=a("strong"),G9o=o("xlm-roberta-xl"),O9o=o(" \u2014 "),QD=a("a"),V9o=o("XLMRobertaXLForSequenceClassification"),X9o=o(" (XLM-RoBERTa-XL model)"),z9o=l(),ib=a("li"),Qce=a("strong"),Q9o=o("xlnet"),W9o=o(" \u2014 "),WD=a("a"),H9o=o("XLNetForSequenceClassification"),U9o=o(" (XLNet model)"),J9o=l(),db=a("li"),Wce=a("strong"),Y9o=o("yoso"),K9o=o(" \u2014 "),HD=a("a"),Z9o=o("YosoForSequenceClassification"),e$o=o(" (YOSO model)"),o$o=l(),cb=a("p"),r$o=o("The model is set in evaluation mode by default using "),Hce=a("code"),t$o=o("model.eval()"),a$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=a("code"),n$o=o("model.train()"),s$o=l(),F(fb.$$.fragment),HPe=l(),ji=a("h2"),mb=a("a"),Jce=a("span"),F(Hy.$$.fragment),l$o=l(),Yce=a("span"),i$o=o("AutoModelForMultipleChoice"),UPe=l(),Bo=a("div"),F(Uy.$$.fragment),d$o=l(),Di=a("p"),c$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UD=a("a"),f$o=o("from_pretrained()"),m$o=o(" class method or the "),JD=a("a"),g$o=o("from_config()"),h$o=o(` class
method.`),p$o=l(),Jy=a("p"),u$o=o("This class cannot be instantiated directly using "),Kce=a("code"),_$o=o("__init__()"),b$o=o(" (throws an error)."),v$o=l(),lt=a("div"),F(Yy.$$.fragment),F$o=l(),Zce=a("p"),T$o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),M$o=l(),Gi=a("p"),E$o=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),C$o=o("not"),w$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=a("a"),A$o=o("from_pretrained()"),y$o=o(" to load the model weights."),L$o=l(),F(gb.$$.fragment),x$o=l(),eo=a("div"),F(Ky.$$.fragment),$$o=l(),ofe=a("p"),k$o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S$o=l(),Sa=a("p"),R$o=o("The model class to instantiate is selected based on the "),rfe=a("code"),B$o=o("model_type"),P$o=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),I$o=o("pretrained_model_name_or_path"),q$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),N$o=o("pretrained_model_name_or_path"),j$o=o(":"),D$o=l(),Y=a("ul"),hb=a("li"),nfe=a("strong"),G$o=o("albert"),O$o=o(" \u2014 "),KD=a("a"),V$o=o("AlbertForMultipleChoice"),X$o=o(" (ALBERT model)"),z$o=l(),pb=a("li"),sfe=a("strong"),Q$o=o("bert"),W$o=o(" \u2014 "),ZD=a("a"),H$o=o("BertForMultipleChoice"),U$o=o(" (BERT model)"),J$o=l(),ub=a("li"),lfe=a("strong"),Y$o=o("big_bird"),K$o=o(" \u2014 "),eG=a("a"),Z$o=o("BigBirdForMultipleChoice"),eko=o(" (BigBird model)"),oko=l(),_b=a("li"),ife=a("strong"),rko=o("camembert"),tko=o(" \u2014 "),oG=a("a"),ako=o("CamembertForMultipleChoice"),nko=o(" (CamemBERT model)"),sko=l(),bb=a("li"),dfe=a("strong"),lko=o("canine"),iko=o(" \u2014 "),rG=a("a"),dko=o("CanineForMultipleChoice"),cko=o(" (Canine model)"),fko=l(),vb=a("li"),cfe=a("strong"),mko=o("convbert"),gko=o(" \u2014 "),tG=a("a"),hko=o("ConvBertForMultipleChoice"),pko=o(" (ConvBERT model)"),uko=l(),Fb=a("li"),ffe=a("strong"),_ko=o("data2vec-text"),bko=o(" \u2014 "),aG=a("a"),vko=o("Data2VecTextForMultipleChoice"),Fko=o(" (Data2VecText model)"),Tko=l(),Tb=a("li"),mfe=a("strong"),Mko=o("distilbert"),Eko=o(" \u2014 "),nG=a("a"),Cko=o("DistilBertForMultipleChoice"),wko=o(" (DistilBERT model)"),Ako=l(),Mb=a("li"),gfe=a("strong"),yko=o("electra"),Lko=o(" \u2014 "),sG=a("a"),xko=o("ElectraForMultipleChoice"),$ko=o(" (ELECTRA model)"),kko=l(),Eb=a("li"),hfe=a("strong"),Sko=o("flaubert"),Rko=o(" \u2014 "),lG=a("a"),Bko=o("FlaubertForMultipleChoice"),Pko=o(" (FlauBERT model)"),Iko=l(),Cb=a("li"),pfe=a("strong"),qko=o("fnet"),Nko=o(" \u2014 "),iG=a("a"),jko=o("FNetForMultipleChoice"),Dko=o(" (FNet model)"),Gko=l(),wb=a("li"),ufe=a("strong"),Oko=o("funnel"),Vko=o(" \u2014 "),dG=a("a"),Xko=o("FunnelForMultipleChoice"),zko=o(" (Funnel Transformer model)"),Qko=l(),Ab=a("li"),_fe=a("strong"),Wko=o("ibert"),Hko=o(" \u2014 "),cG=a("a"),Uko=o("IBertForMultipleChoice"),Jko=o(" (I-BERT model)"),Yko=l(),yb=a("li"),bfe=a("strong"),Kko=o("longformer"),Zko=o(" \u2014 "),fG=a("a"),eSo=o("LongformerForMultipleChoice"),oSo=o(" (Longformer model)"),rSo=l(),Lb=a("li"),vfe=a("strong"),tSo=o("megatron-bert"),aSo=o(" \u2014 "),mG=a("a"),nSo=o("MegatronBertForMultipleChoice"),sSo=o(" (MegatronBert model)"),lSo=l(),xb=a("li"),Ffe=a("strong"),iSo=o("mobilebert"),dSo=o(" \u2014 "),gG=a("a"),cSo=o("MobileBertForMultipleChoice"),fSo=o(" (MobileBERT model)"),mSo=l(),$b=a("li"),Tfe=a("strong"),gSo=o("mpnet"),hSo=o(" \u2014 "),hG=a("a"),pSo=o("MPNetForMultipleChoice"),uSo=o(" (MPNet model)"),_So=l(),kb=a("li"),Mfe=a("strong"),bSo=o("nystromformer"),vSo=o(" \u2014 "),pG=a("a"),FSo=o("NystromformerForMultipleChoice"),TSo=o(" (Nystromformer model)"),MSo=l(),Sb=a("li"),Efe=a("strong"),ESo=o("qdqbert"),CSo=o(" \u2014 "),uG=a("a"),wSo=o("QDQBertForMultipleChoice"),ASo=o(" (QDQBert model)"),ySo=l(),Rb=a("li"),Cfe=a("strong"),LSo=o("rembert"),xSo=o(" \u2014 "),_G=a("a"),$So=o("RemBertForMultipleChoice"),kSo=o(" (RemBERT model)"),SSo=l(),Bb=a("li"),wfe=a("strong"),RSo=o("roberta"),BSo=o(" \u2014 "),bG=a("a"),PSo=o("RobertaForMultipleChoice"),ISo=o(" (RoBERTa model)"),qSo=l(),Pb=a("li"),Afe=a("strong"),NSo=o("roformer"),jSo=o(" \u2014 "),vG=a("a"),DSo=o("RoFormerForMultipleChoice"),GSo=o(" (RoFormer model)"),OSo=l(),Ib=a("li"),yfe=a("strong"),VSo=o("squeezebert"),XSo=o(" \u2014 "),FG=a("a"),zSo=o("SqueezeBertForMultipleChoice"),QSo=o(" (SqueezeBERT model)"),WSo=l(),qb=a("li"),Lfe=a("strong"),HSo=o("xlm"),USo=o(" \u2014 "),TG=a("a"),JSo=o("XLMForMultipleChoice"),YSo=o(" (XLM model)"),KSo=l(),Nb=a("li"),xfe=a("strong"),ZSo=o("xlm-roberta"),eRo=o(" \u2014 "),MG=a("a"),oRo=o("XLMRobertaForMultipleChoice"),rRo=o(" (XLM-RoBERTa model)"),tRo=l(),jb=a("li"),$fe=a("strong"),aRo=o("xlm-roberta-xl"),nRo=o(" \u2014 "),EG=a("a"),sRo=o("XLMRobertaXLForMultipleChoice"),lRo=o(" (XLM-RoBERTa-XL model)"),iRo=l(),Db=a("li"),kfe=a("strong"),dRo=o("xlnet"),cRo=o(" \u2014 "),CG=a("a"),fRo=o("XLNetForMultipleChoice"),mRo=o(" (XLNet model)"),gRo=l(),Gb=a("li"),Sfe=a("strong"),hRo=o("yoso"),pRo=o(" \u2014 "),wG=a("a"),uRo=o("YosoForMultipleChoice"),_Ro=o(" (YOSO model)"),bRo=l(),Ob=a("p"),vRo=o("The model is set in evaluation mode by default using "),Rfe=a("code"),FRo=o("model.eval()"),TRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=a("code"),MRo=o("model.train()"),ERo=l(),F(Vb.$$.fragment),JPe=l(),Oi=a("h2"),Xb=a("a"),Pfe=a("span"),F(Zy.$$.fragment),CRo=l(),Ife=a("span"),wRo=o("AutoModelForNextSentencePrediction"),YPe=l(),Po=a("div"),F(eL.$$.fragment),ARo=l(),Vi=a("p"),yRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AG=a("a"),LRo=o("from_pretrained()"),xRo=o(" class method or the "),yG=a("a"),$Ro=o("from_config()"),kRo=o(` class
method.`),SRo=l(),oL=a("p"),RRo=o("This class cannot be instantiated directly using "),qfe=a("code"),BRo=o("__init__()"),PRo=o(" (throws an error)."),IRo=l(),it=a("div"),F(rL.$$.fragment),qRo=l(),Nfe=a("p"),NRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jRo=l(),Xi=a("p"),DRo=o(`Note:
Loading a model from its configuration file does `),jfe=a("strong"),GRo=o("not"),ORo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),VRo=o("from_pretrained()"),XRo=o(" to load the model weights."),zRo=l(),F(zb.$$.fragment),QRo=l(),oo=a("div"),F(tL.$$.fragment),WRo=l(),Dfe=a("p"),HRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),URo=l(),Ra=a("p"),JRo=o("The model class to instantiate is selected based on the "),Gfe=a("code"),YRo=o("model_type"),KRo=o(` property of the config object (either
passed as an argument or loaded from `),Ofe=a("code"),ZRo=o("pretrained_model_name_or_path"),eBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=a("code"),oBo=o("pretrained_model_name_or_path"),rBo=o(":"),tBo=l(),Yr=a("ul"),Qb=a("li"),Xfe=a("strong"),aBo=o("bert"),nBo=o(" \u2014 "),xG=a("a"),sBo=o("BertForNextSentencePrediction"),lBo=o(" (BERT model)"),iBo=l(),Wb=a("li"),zfe=a("strong"),dBo=o("fnet"),cBo=o(" \u2014 "),$G=a("a"),fBo=o("FNetForNextSentencePrediction"),mBo=o(" (FNet model)"),gBo=l(),Hb=a("li"),Qfe=a("strong"),hBo=o("megatron-bert"),pBo=o(" \u2014 "),kG=a("a"),uBo=o("MegatronBertForNextSentencePrediction"),_Bo=o(" (MegatronBert model)"),bBo=l(),Ub=a("li"),Wfe=a("strong"),vBo=o("mobilebert"),FBo=o(" \u2014 "),SG=a("a"),TBo=o("MobileBertForNextSentencePrediction"),MBo=o(" (MobileBERT model)"),EBo=l(),Jb=a("li"),Hfe=a("strong"),CBo=o("qdqbert"),wBo=o(" \u2014 "),RG=a("a"),ABo=o("QDQBertForNextSentencePrediction"),yBo=o(" (QDQBert model)"),LBo=l(),Yb=a("p"),xBo=o("The model is set in evaluation mode by default using "),Ufe=a("code"),$Bo=o("model.eval()"),kBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),SBo=o("model.train()"),RBo=l(),F(Kb.$$.fragment),KPe=l(),zi=a("h2"),Zb=a("a"),Yfe=a("span"),F(aL.$$.fragment),BBo=l(),Kfe=a("span"),PBo=o("AutoModelForTokenClassification"),ZPe=l(),Io=a("div"),F(nL.$$.fragment),IBo=l(),Qi=a("p"),qBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BG=a("a"),NBo=o("from_pretrained()"),jBo=o(" class method or the "),PG=a("a"),DBo=o("from_config()"),GBo=o(` class
method.`),OBo=l(),sL=a("p"),VBo=o("This class cannot be instantiated directly using "),Zfe=a("code"),XBo=o("__init__()"),zBo=o(" (throws an error)."),QBo=l(),dt=a("div"),F(lL.$$.fragment),WBo=l(),eme=a("p"),HBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UBo=l(),Wi=a("p"),JBo=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),YBo=o("not"),KBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),ZBo=o("from_pretrained()"),ePo=o(" to load the model weights."),oPo=l(),F(e4.$$.fragment),rPo=l(),ro=a("div"),F(iL.$$.fragment),tPo=l(),rme=a("p"),aPo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nPo=l(),Ba=a("p"),sPo=o("The model class to instantiate is selected based on the "),tme=a("code"),lPo=o("model_type"),iPo=o(` property of the config object (either
passed as an argument or loaded from `),ame=a("code"),dPo=o("pretrained_model_name_or_path"),cPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=a("code"),fPo=o("pretrained_model_name_or_path"),mPo=o(":"),gPo=l(),U=a("ul"),o4=a("li"),sme=a("strong"),hPo=o("albert"),pPo=o(" \u2014 "),qG=a("a"),uPo=o("AlbertForTokenClassification"),_Po=o(" (ALBERT model)"),bPo=l(),r4=a("li"),lme=a("strong"),vPo=o("bert"),FPo=o(" \u2014 "),NG=a("a"),TPo=o("BertForTokenClassification"),MPo=o(" (BERT model)"),EPo=l(),t4=a("li"),ime=a("strong"),CPo=o("big_bird"),wPo=o(" \u2014 "),jG=a("a"),APo=o("BigBirdForTokenClassification"),yPo=o(" (BigBird model)"),LPo=l(),a4=a("li"),dme=a("strong"),xPo=o("camembert"),$Po=o(" \u2014 "),DG=a("a"),kPo=o("CamembertForTokenClassification"),SPo=o(" (CamemBERT model)"),RPo=l(),n4=a("li"),cme=a("strong"),BPo=o("canine"),PPo=o(" \u2014 "),GG=a("a"),IPo=o("CanineForTokenClassification"),qPo=o(" (Canine model)"),NPo=l(),s4=a("li"),fme=a("strong"),jPo=o("convbert"),DPo=o(" \u2014 "),OG=a("a"),GPo=o("ConvBertForTokenClassification"),OPo=o(" (ConvBERT model)"),VPo=l(),l4=a("li"),mme=a("strong"),XPo=o("data2vec-text"),zPo=o(" \u2014 "),VG=a("a"),QPo=o("Data2VecTextForTokenClassification"),WPo=o(" (Data2VecText model)"),HPo=l(),i4=a("li"),gme=a("strong"),UPo=o("deberta"),JPo=o(" \u2014 "),XG=a("a"),YPo=o("DebertaForTokenClassification"),KPo=o(" (DeBERTa model)"),ZPo=l(),d4=a("li"),hme=a("strong"),eIo=o("deberta-v2"),oIo=o(" \u2014 "),zG=a("a"),rIo=o("DebertaV2ForTokenClassification"),tIo=o(" (DeBERTa-v2 model)"),aIo=l(),c4=a("li"),pme=a("strong"),nIo=o("distilbert"),sIo=o(" \u2014 "),QG=a("a"),lIo=o("DistilBertForTokenClassification"),iIo=o(" (DistilBERT model)"),dIo=l(),f4=a("li"),ume=a("strong"),cIo=o("electra"),fIo=o(" \u2014 "),WG=a("a"),mIo=o("ElectraForTokenClassification"),gIo=o(" (ELECTRA model)"),hIo=l(),m4=a("li"),_me=a("strong"),pIo=o("flaubert"),uIo=o(" \u2014 "),HG=a("a"),_Io=o("FlaubertForTokenClassification"),bIo=o(" (FlauBERT model)"),vIo=l(),g4=a("li"),bme=a("strong"),FIo=o("fnet"),TIo=o(" \u2014 "),UG=a("a"),MIo=o("FNetForTokenClassification"),EIo=o(" (FNet model)"),CIo=l(),h4=a("li"),vme=a("strong"),wIo=o("funnel"),AIo=o(" \u2014 "),JG=a("a"),yIo=o("FunnelForTokenClassification"),LIo=o(" (Funnel Transformer model)"),xIo=l(),p4=a("li"),Fme=a("strong"),$Io=o("gpt2"),kIo=o(" \u2014 "),YG=a("a"),SIo=o("GPT2ForTokenClassification"),RIo=o(" (OpenAI GPT-2 model)"),BIo=l(),u4=a("li"),Tme=a("strong"),PIo=o("ibert"),IIo=o(" \u2014 "),KG=a("a"),qIo=o("IBertForTokenClassification"),NIo=o(" (I-BERT model)"),jIo=l(),_4=a("li"),Mme=a("strong"),DIo=o("layoutlm"),GIo=o(" \u2014 "),ZG=a("a"),OIo=o("LayoutLMForTokenClassification"),VIo=o(" (LayoutLM model)"),XIo=l(),b4=a("li"),Eme=a("strong"),zIo=o("layoutlmv2"),QIo=o(" \u2014 "),eO=a("a"),WIo=o("LayoutLMv2ForTokenClassification"),HIo=o(" (LayoutLMv2 model)"),UIo=l(),v4=a("li"),Cme=a("strong"),JIo=o("longformer"),YIo=o(" \u2014 "),oO=a("a"),KIo=o("LongformerForTokenClassification"),ZIo=o(" (Longformer model)"),eqo=l(),F4=a("li"),wme=a("strong"),oqo=o("megatron-bert"),rqo=o(" \u2014 "),rO=a("a"),tqo=o("MegatronBertForTokenClassification"),aqo=o(" (MegatronBert model)"),nqo=l(),T4=a("li"),Ame=a("strong"),sqo=o("mobilebert"),lqo=o(" \u2014 "),tO=a("a"),iqo=o("MobileBertForTokenClassification"),dqo=o(" (MobileBERT model)"),cqo=l(),M4=a("li"),yme=a("strong"),fqo=o("mpnet"),mqo=o(" \u2014 "),aO=a("a"),gqo=o("MPNetForTokenClassification"),hqo=o(" (MPNet model)"),pqo=l(),E4=a("li"),Lme=a("strong"),uqo=o("nystromformer"),_qo=o(" \u2014 "),nO=a("a"),bqo=o("NystromformerForTokenClassification"),vqo=o(" (Nystromformer model)"),Fqo=l(),C4=a("li"),xme=a("strong"),Tqo=o("qdqbert"),Mqo=o(" \u2014 "),sO=a("a"),Eqo=o("QDQBertForTokenClassification"),Cqo=o(" (QDQBert model)"),wqo=l(),w4=a("li"),$me=a("strong"),Aqo=o("rembert"),yqo=o(" \u2014 "),lO=a("a"),Lqo=o("RemBertForTokenClassification"),xqo=o(" (RemBERT model)"),$qo=l(),A4=a("li"),kme=a("strong"),kqo=o("roberta"),Sqo=o(" \u2014 "),iO=a("a"),Rqo=o("RobertaForTokenClassification"),Bqo=o(" (RoBERTa model)"),Pqo=l(),y4=a("li"),Sme=a("strong"),Iqo=o("roformer"),qqo=o(" \u2014 "),dO=a("a"),Nqo=o("RoFormerForTokenClassification"),jqo=o(" (RoFormer model)"),Dqo=l(),L4=a("li"),Rme=a("strong"),Gqo=o("squeezebert"),Oqo=o(" \u2014 "),cO=a("a"),Vqo=o("SqueezeBertForTokenClassification"),Xqo=o(" (SqueezeBERT model)"),zqo=l(),x4=a("li"),Bme=a("strong"),Qqo=o("xlm"),Wqo=o(" \u2014 "),fO=a("a"),Hqo=o("XLMForTokenClassification"),Uqo=o(" (XLM model)"),Jqo=l(),$4=a("li"),Pme=a("strong"),Yqo=o("xlm-roberta"),Kqo=o(" \u2014 "),mO=a("a"),Zqo=o("XLMRobertaForTokenClassification"),eNo=o(" (XLM-RoBERTa model)"),oNo=l(),k4=a("li"),Ime=a("strong"),rNo=o("xlm-roberta-xl"),tNo=o(" \u2014 "),gO=a("a"),aNo=o("XLMRobertaXLForTokenClassification"),nNo=o(" (XLM-RoBERTa-XL model)"),sNo=l(),S4=a("li"),qme=a("strong"),lNo=o("xlnet"),iNo=o(" \u2014 "),hO=a("a"),dNo=o("XLNetForTokenClassification"),cNo=o(" (XLNet model)"),fNo=l(),R4=a("li"),Nme=a("strong"),mNo=o("yoso"),gNo=o(" \u2014 "),pO=a("a"),hNo=o("YosoForTokenClassification"),pNo=o(" (YOSO model)"),uNo=l(),B4=a("p"),_No=o("The model is set in evaluation mode by default using "),jme=a("code"),bNo=o("model.eval()"),vNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),FNo=o("model.train()"),TNo=l(),F(P4.$$.fragment),eIe=l(),Hi=a("h2"),I4=a("a"),Gme=a("span"),F(dL.$$.fragment),MNo=l(),Ome=a("span"),ENo=o("AutoModelForQuestionAnswering"),oIe=l(),qo=a("div"),F(cL.$$.fragment),CNo=l(),Ui=a("p"),wNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uO=a("a"),ANo=o("from_pretrained()"),yNo=o(" class method or the "),_O=a("a"),LNo=o("from_config()"),xNo=o(` class
method.`),$No=l(),fL=a("p"),kNo=o("This class cannot be instantiated directly using "),Vme=a("code"),SNo=o("__init__()"),RNo=o(" (throws an error)."),BNo=l(),ct=a("div"),F(mL.$$.fragment),PNo=l(),Xme=a("p"),INo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qNo=l(),Ji=a("p"),NNo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),jNo=o("not"),DNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),GNo=o("from_pretrained()"),ONo=o(" to load the model weights."),VNo=l(),F(q4.$$.fragment),XNo=l(),to=a("div"),F(gL.$$.fragment),zNo=l(),Qme=a("p"),QNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WNo=l(),Pa=a("p"),HNo=o("The model class to instantiate is selected based on the "),Wme=a("code"),UNo=o("model_type"),JNo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),YNo=o("pretrained_model_name_or_path"),KNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),ZNo=o("pretrained_model_name_or_path"),ejo=o(":"),ojo=l(),O=a("ul"),N4=a("li"),Jme=a("strong"),rjo=o("albert"),tjo=o(" \u2014 "),vO=a("a"),ajo=o("AlbertForQuestionAnswering"),njo=o(" (ALBERT model)"),sjo=l(),j4=a("li"),Yme=a("strong"),ljo=o("bart"),ijo=o(" \u2014 "),FO=a("a"),djo=o("BartForQuestionAnswering"),cjo=o(" (BART model)"),fjo=l(),D4=a("li"),Kme=a("strong"),mjo=o("bert"),gjo=o(" \u2014 "),TO=a("a"),hjo=o("BertForQuestionAnswering"),pjo=o(" (BERT model)"),ujo=l(),G4=a("li"),Zme=a("strong"),_jo=o("big_bird"),bjo=o(" \u2014 "),MO=a("a"),vjo=o("BigBirdForQuestionAnswering"),Fjo=o(" (BigBird model)"),Tjo=l(),O4=a("li"),ege=a("strong"),Mjo=o("bigbird_pegasus"),Ejo=o(" \u2014 "),EO=a("a"),Cjo=o("BigBirdPegasusForQuestionAnswering"),wjo=o(" (BigBirdPegasus model)"),Ajo=l(),V4=a("li"),oge=a("strong"),yjo=o("camembert"),Ljo=o(" \u2014 "),CO=a("a"),xjo=o("CamembertForQuestionAnswering"),$jo=o(" (CamemBERT model)"),kjo=l(),X4=a("li"),rge=a("strong"),Sjo=o("canine"),Rjo=o(" \u2014 "),wO=a("a"),Bjo=o("CanineForQuestionAnswering"),Pjo=o(" (Canine model)"),Ijo=l(),z4=a("li"),tge=a("strong"),qjo=o("convbert"),Njo=o(" \u2014 "),AO=a("a"),jjo=o("ConvBertForQuestionAnswering"),Djo=o(" (ConvBERT model)"),Gjo=l(),Q4=a("li"),age=a("strong"),Ojo=o("data2vec-text"),Vjo=o(" \u2014 "),yO=a("a"),Xjo=o("Data2VecTextForQuestionAnswering"),zjo=o(" (Data2VecText model)"),Qjo=l(),W4=a("li"),nge=a("strong"),Wjo=o("deberta"),Hjo=o(" \u2014 "),LO=a("a"),Ujo=o("DebertaForQuestionAnswering"),Jjo=o(" (DeBERTa model)"),Yjo=l(),H4=a("li"),sge=a("strong"),Kjo=o("deberta-v2"),Zjo=o(" \u2014 "),xO=a("a"),eDo=o("DebertaV2ForQuestionAnswering"),oDo=o(" (DeBERTa-v2 model)"),rDo=l(),U4=a("li"),lge=a("strong"),tDo=o("distilbert"),aDo=o(" \u2014 "),$O=a("a"),nDo=o("DistilBertForQuestionAnswering"),sDo=o(" (DistilBERT model)"),lDo=l(),J4=a("li"),ige=a("strong"),iDo=o("electra"),dDo=o(" \u2014 "),kO=a("a"),cDo=o("ElectraForQuestionAnswering"),fDo=o(" (ELECTRA model)"),mDo=l(),Y4=a("li"),dge=a("strong"),gDo=o("flaubert"),hDo=o(" \u2014 "),SO=a("a"),pDo=o("FlaubertForQuestionAnsweringSimple"),uDo=o(" (FlauBERT model)"),_Do=l(),K4=a("li"),cge=a("strong"),bDo=o("fnet"),vDo=o(" \u2014 "),RO=a("a"),FDo=o("FNetForQuestionAnswering"),TDo=o(" (FNet model)"),MDo=l(),Z4=a("li"),fge=a("strong"),EDo=o("funnel"),CDo=o(" \u2014 "),BO=a("a"),wDo=o("FunnelForQuestionAnswering"),ADo=o(" (Funnel Transformer model)"),yDo=l(),e2=a("li"),mge=a("strong"),LDo=o("gptj"),xDo=o(" \u2014 "),PO=a("a"),$Do=o("GPTJForQuestionAnswering"),kDo=o(" (GPT-J model)"),SDo=l(),o2=a("li"),gge=a("strong"),RDo=o("ibert"),BDo=o(" \u2014 "),IO=a("a"),PDo=o("IBertForQuestionAnswering"),IDo=o(" (I-BERT model)"),qDo=l(),r2=a("li"),hge=a("strong"),NDo=o("layoutlmv2"),jDo=o(" \u2014 "),qO=a("a"),DDo=o("LayoutLMv2ForQuestionAnswering"),GDo=o(" (LayoutLMv2 model)"),ODo=l(),t2=a("li"),pge=a("strong"),VDo=o("led"),XDo=o(" \u2014 "),NO=a("a"),zDo=o("LEDForQuestionAnswering"),QDo=o(" (LED model)"),WDo=l(),a2=a("li"),uge=a("strong"),HDo=o("longformer"),UDo=o(" \u2014 "),jO=a("a"),JDo=o("LongformerForQuestionAnswering"),YDo=o(" (Longformer model)"),KDo=l(),n2=a("li"),_ge=a("strong"),ZDo=o("lxmert"),eGo=o(" \u2014 "),DO=a("a"),oGo=o("LxmertForQuestionAnswering"),rGo=o(" (LXMERT model)"),tGo=l(),s2=a("li"),bge=a("strong"),aGo=o("mbart"),nGo=o(" \u2014 "),GO=a("a"),sGo=o("MBartForQuestionAnswering"),lGo=o(" (mBART model)"),iGo=l(),l2=a("li"),vge=a("strong"),dGo=o("megatron-bert"),cGo=o(" \u2014 "),OO=a("a"),fGo=o("MegatronBertForQuestionAnswering"),mGo=o(" (MegatronBert model)"),gGo=l(),i2=a("li"),Fge=a("strong"),hGo=o("mobilebert"),pGo=o(" \u2014 "),VO=a("a"),uGo=o("MobileBertForQuestionAnswering"),_Go=o(" (MobileBERT model)"),bGo=l(),d2=a("li"),Tge=a("strong"),vGo=o("mpnet"),FGo=o(" \u2014 "),XO=a("a"),TGo=o("MPNetForQuestionAnswering"),MGo=o(" (MPNet model)"),EGo=l(),c2=a("li"),Mge=a("strong"),CGo=o("nystromformer"),wGo=o(" \u2014 "),zO=a("a"),AGo=o("NystromformerForQuestionAnswering"),yGo=o(" (Nystromformer model)"),LGo=l(),f2=a("li"),Ege=a("strong"),xGo=o("qdqbert"),$Go=o(" \u2014 "),QO=a("a"),kGo=o("QDQBertForQuestionAnswering"),SGo=o(" (QDQBert model)"),RGo=l(),m2=a("li"),Cge=a("strong"),BGo=o("reformer"),PGo=o(" \u2014 "),WO=a("a"),IGo=o("ReformerForQuestionAnswering"),qGo=o(" (Reformer model)"),NGo=l(),g2=a("li"),wge=a("strong"),jGo=o("rembert"),DGo=o(" \u2014 "),HO=a("a"),GGo=o("RemBertForQuestionAnswering"),OGo=o(" (RemBERT model)"),VGo=l(),h2=a("li"),Age=a("strong"),XGo=o("roberta"),zGo=o(" \u2014 "),UO=a("a"),QGo=o("RobertaForQuestionAnswering"),WGo=o(" (RoBERTa model)"),HGo=l(),p2=a("li"),yge=a("strong"),UGo=o("roformer"),JGo=o(" \u2014 "),JO=a("a"),YGo=o("RoFormerForQuestionAnswering"),KGo=o(" (RoFormer model)"),ZGo=l(),u2=a("li"),Lge=a("strong"),eOo=o("splinter"),oOo=o(" \u2014 "),YO=a("a"),rOo=o("SplinterForQuestionAnswering"),tOo=o(" (Splinter model)"),aOo=l(),_2=a("li"),xge=a("strong"),nOo=o("squeezebert"),sOo=o(" \u2014 "),KO=a("a"),lOo=o("SqueezeBertForQuestionAnswering"),iOo=o(" (SqueezeBERT model)"),dOo=l(),b2=a("li"),$ge=a("strong"),cOo=o("xlm"),fOo=o(" \u2014 "),ZO=a("a"),mOo=o("XLMForQuestionAnsweringSimple"),gOo=o(" (XLM model)"),hOo=l(),v2=a("li"),kge=a("strong"),pOo=o("xlm-roberta"),uOo=o(" \u2014 "),eV=a("a"),_Oo=o("XLMRobertaForQuestionAnswering"),bOo=o(" (XLM-RoBERTa model)"),vOo=l(),F2=a("li"),Sge=a("strong"),FOo=o("xlm-roberta-xl"),TOo=o(" \u2014 "),oV=a("a"),MOo=o("XLMRobertaXLForQuestionAnswering"),EOo=o(" (XLM-RoBERTa-XL model)"),COo=l(),T2=a("li"),Rge=a("strong"),wOo=o("xlnet"),AOo=o(" \u2014 "),rV=a("a"),yOo=o("XLNetForQuestionAnsweringSimple"),LOo=o(" (XLNet model)"),xOo=l(),M2=a("li"),Bge=a("strong"),$Oo=o("yoso"),kOo=o(" \u2014 "),tV=a("a"),SOo=o("YosoForQuestionAnswering"),ROo=o(" (YOSO model)"),BOo=l(),E2=a("p"),POo=o("The model is set in evaluation mode by default using "),Pge=a("code"),IOo=o("model.eval()"),qOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),NOo=o("model.train()"),jOo=l(),F(C2.$$.fragment),rIe=l(),Yi=a("h2"),w2=a("a"),qge=a("span"),F(hL.$$.fragment),DOo=l(),Nge=a("span"),GOo=o("AutoModelForTableQuestionAnswering"),tIe=l(),No=a("div"),F(pL.$$.fragment),OOo=l(),Ki=a("p"),VOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aV=a("a"),XOo=o("from_pretrained()"),zOo=o(" class method or the "),nV=a("a"),QOo=o("from_config()"),WOo=o(` class
method.`),HOo=l(),uL=a("p"),UOo=o("This class cannot be instantiated directly using "),jge=a("code"),JOo=o("__init__()"),YOo=o(" (throws an error)."),KOo=l(),ft=a("div"),F(_L.$$.fragment),ZOo=l(),Dge=a("p"),eVo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oVo=l(),Zi=a("p"),rVo=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),tVo=o("not"),aVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),nVo=o("from_pretrained()"),sVo=o(" to load the model weights."),lVo=l(),F(A2.$$.fragment),iVo=l(),ao=a("div"),F(bL.$$.fragment),dVo=l(),Oge=a("p"),cVo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fVo=l(),Ia=a("p"),mVo=o("The model class to instantiate is selected based on the "),Vge=a("code"),gVo=o("model_type"),hVo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),pVo=o("pretrained_model_name_or_path"),uVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),_Vo=o("pretrained_model_name_or_path"),bVo=o(":"),vVo=l(),Qge=a("ul"),y2=a("li"),Wge=a("strong"),FVo=o("tapas"),TVo=o(" \u2014 "),lV=a("a"),MVo=o("TapasForQuestionAnswering"),EVo=o(" (TAPAS model)"),CVo=l(),L2=a("p"),wVo=o("The model is set in evaluation mode by default using "),Hge=a("code"),AVo=o("model.eval()"),yVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=a("code"),LVo=o("model.train()"),xVo=l(),F(x2.$$.fragment),aIe=l(),ed=a("h2"),$2=a("a"),Jge=a("span"),F(vL.$$.fragment),$Vo=l(),Yge=a("span"),kVo=o("AutoModelForImageClassification"),nIe=l(),jo=a("div"),F(FL.$$.fragment),SVo=l(),od=a("p"),RVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iV=a("a"),BVo=o("from_pretrained()"),PVo=o(" class method or the "),dV=a("a"),IVo=o("from_config()"),qVo=o(` class
method.`),NVo=l(),TL=a("p"),jVo=o("This class cannot be instantiated directly using "),Kge=a("code"),DVo=o("__init__()"),GVo=o(" (throws an error)."),OVo=l(),mt=a("div"),F(ML.$$.fragment),VVo=l(),Zge=a("p"),XVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zVo=l(),rd=a("p"),QVo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),WVo=o("not"),HVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),UVo=o("from_pretrained()"),JVo=o(" to load the model weights."),YVo=l(),F(k2.$$.fragment),KVo=l(),no=a("div"),F(EL.$$.fragment),ZVo=l(),ohe=a("p"),eXo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oXo=l(),qa=a("p"),rXo=o("The model class to instantiate is selected based on the "),rhe=a("code"),tXo=o("model_type"),aXo=o(` property of the config object (either
passed as an argument or loaded from `),the=a("code"),nXo=o("pretrained_model_name_or_path"),sXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=a("code"),lXo=o("pretrained_model_name_or_path"),iXo=o(":"),dXo=l(),Fe=a("ul"),S2=a("li"),nhe=a("strong"),cXo=o("beit"),fXo=o(" \u2014 "),fV=a("a"),mXo=o("BeitForImageClassification"),gXo=o(" (BEiT model)"),hXo=l(),R2=a("li"),she=a("strong"),pXo=o("convnext"),uXo=o(" \u2014 "),mV=a("a"),_Xo=o("ConvNextForImageClassification"),bXo=o(" (ConvNext model)"),vXo=l(),B2=a("li"),lhe=a("strong"),FXo=o("data2vec-vision"),TXo=o(" \u2014 "),gV=a("a"),MXo=o("Data2VecVisionForImageClassification"),EXo=o(" (Data2VecVision model)"),CXo=l(),Rs=a("li"),ihe=a("strong"),wXo=o("deit"),AXo=o(" \u2014 "),hV=a("a"),yXo=o("DeiTForImageClassification"),LXo=o(" or "),pV=a("a"),xXo=o("DeiTForImageClassificationWithTeacher"),$Xo=o(" (DeiT model)"),kXo=l(),P2=a("li"),dhe=a("strong"),SXo=o("imagegpt"),RXo=o(" \u2014 "),uV=a("a"),BXo=o("ImageGPTForImageClassification"),PXo=o(" (ImageGPT model)"),IXo=l(),gt=a("li"),che=a("strong"),qXo=o("perceiver"),NXo=o(" \u2014 "),_V=a("a"),jXo=o("PerceiverForImageClassificationLearned"),DXo=o(" or "),bV=a("a"),GXo=o("PerceiverForImageClassificationFourier"),OXo=o(" or "),vV=a("a"),VXo=o("PerceiverForImageClassificationConvProcessing"),XXo=o(" (Perceiver model)"),zXo=l(),I2=a("li"),fhe=a("strong"),QXo=o("poolformer"),WXo=o(" \u2014 "),FV=a("a"),HXo=o("PoolFormerForImageClassification"),UXo=o(" (PoolFormer model)"),JXo=l(),q2=a("li"),mhe=a("strong"),YXo=o("regnet"),KXo=o(" \u2014 "),TV=a("a"),ZXo=o("RegNetForImageClassification"),ezo=o(" (RegNet model)"),ozo=l(),N2=a("li"),ghe=a("strong"),rzo=o("resnet"),tzo=o(" \u2014 "),MV=a("a"),azo=o("ResNetForImageClassification"),nzo=o(" (ResNet model)"),szo=l(),j2=a("li"),hhe=a("strong"),lzo=o("segformer"),izo=o(" \u2014 "),EV=a("a"),dzo=o("SegformerForImageClassification"),czo=o(" (SegFormer model)"),fzo=l(),D2=a("li"),phe=a("strong"),mzo=o("swin"),gzo=o(" \u2014 "),CV=a("a"),hzo=o("SwinForImageClassification"),pzo=o(" (Swin model)"),uzo=l(),G2=a("li"),uhe=a("strong"),_zo=o("van"),bzo=o(" \u2014 "),wV=a("a"),vzo=o("VanForImageClassification"),Fzo=o(" (VAN model)"),Tzo=l(),O2=a("li"),_he=a("strong"),Mzo=o("vit"),Ezo=o(" \u2014 "),AV=a("a"),Czo=o("ViTForImageClassification"),wzo=o(" (ViT model)"),Azo=l(),V2=a("p"),yzo=o("The model is set in evaluation mode by default using "),bhe=a("code"),Lzo=o("model.eval()"),xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),$zo=o("model.train()"),kzo=l(),F(X2.$$.fragment),sIe=l(),td=a("h2"),z2=a("a"),Fhe=a("span"),F(CL.$$.fragment),Szo=l(),The=a("span"),Rzo=o("AutoModelForVision2Seq"),lIe=l(),Do=a("div"),F(wL.$$.fragment),Bzo=l(),ad=a("p"),Pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yV=a("a"),Izo=o("from_pretrained()"),qzo=o(" class method or the "),LV=a("a"),Nzo=o("from_config()"),jzo=o(` class
method.`),Dzo=l(),AL=a("p"),Gzo=o("This class cannot be instantiated directly using "),Mhe=a("code"),Ozo=o("__init__()"),Vzo=o(" (throws an error)."),Xzo=l(),ht=a("div"),F(yL.$$.fragment),zzo=l(),Ehe=a("p"),Qzo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wzo=l(),nd=a("p"),Hzo=o(`Note:
Loading a model from its configuration file does `),Che=a("strong"),Uzo=o("not"),Jzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),Yzo=o("from_pretrained()"),Kzo=o(" to load the model weights."),Zzo=l(),F(Q2.$$.fragment),eQo=l(),so=a("div"),F(LL.$$.fragment),oQo=l(),whe=a("p"),rQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tQo=l(),Na=a("p"),aQo=o("The model class to instantiate is selected based on the "),Ahe=a("code"),nQo=o("model_type"),sQo=o(` property of the config object (either
passed as an argument or loaded from `),yhe=a("code"),lQo=o("pretrained_model_name_or_path"),iQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=a("code"),dQo=o("pretrained_model_name_or_path"),cQo=o(":"),fQo=l(),xhe=a("ul"),W2=a("li"),$he=a("strong"),mQo=o("vision-encoder-decoder"),gQo=o(" \u2014 "),$V=a("a"),hQo=o("VisionEncoderDecoderModel"),pQo=o(" (Vision Encoder decoder model)"),uQo=l(),H2=a("p"),_Qo=o("The model is set in evaluation mode by default using "),khe=a("code"),bQo=o("model.eval()"),vQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=a("code"),FQo=o("model.train()"),TQo=l(),F(U2.$$.fragment),iIe=l(),sd=a("h2"),J2=a("a"),Rhe=a("span"),F(xL.$$.fragment),MQo=l(),Bhe=a("span"),EQo=o("AutoModelForAudioClassification"),dIe=l(),Go=a("div"),F($L.$$.fragment),CQo=l(),ld=a("p"),wQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),kV=a("a"),AQo=o("from_pretrained()"),yQo=o(" class method or the "),SV=a("a"),LQo=o("from_config()"),xQo=o(` class
method.`),$Qo=l(),kL=a("p"),kQo=o("This class cannot be instantiated directly using "),Phe=a("code"),SQo=o("__init__()"),RQo=o(" (throws an error)."),BQo=l(),pt=a("div"),F(SL.$$.fragment),PQo=l(),Ihe=a("p"),IQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),qQo=l(),id=a("p"),NQo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),jQo=o("not"),DQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),GQo=o("from_pretrained()"),OQo=o(" to load the model weights."),VQo=l(),F(Y2.$$.fragment),XQo=l(),lo=a("div"),F(RL.$$.fragment),zQo=l(),Nhe=a("p"),QQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),WQo=l(),ja=a("p"),HQo=o("The model class to instantiate is selected based on the "),jhe=a("code"),UQo=o("model_type"),JQo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),YQo=o("pretrained_model_name_or_path"),KQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),ZQo=o("pretrained_model_name_or_path"),eWo=o(":"),oWo=l(),Ne=a("ul"),K2=a("li"),Ohe=a("strong"),rWo=o("data2vec-audio"),tWo=o(" \u2014 "),BV=a("a"),aWo=o("Data2VecAudioForSequenceClassification"),nWo=o(" (Data2VecAudio model)"),sWo=l(),Z2=a("li"),Vhe=a("strong"),lWo=o("hubert"),iWo=o(" \u2014 "),PV=a("a"),dWo=o("HubertForSequenceClassification"),cWo=o(" (Hubert model)"),fWo=l(),e5=a("li"),Xhe=a("strong"),mWo=o("sew"),gWo=o(" \u2014 "),IV=a("a"),hWo=o("SEWForSequenceClassification"),pWo=o(" (SEW model)"),uWo=l(),o5=a("li"),zhe=a("strong"),_Wo=o("sew-d"),bWo=o(" \u2014 "),qV=a("a"),vWo=o("SEWDForSequenceClassification"),FWo=o(" (SEW-D model)"),TWo=l(),r5=a("li"),Qhe=a("strong"),MWo=o("unispeech"),EWo=o(" \u2014 "),NV=a("a"),CWo=o("UniSpeechForSequenceClassification"),wWo=o(" (UniSpeech model)"),AWo=l(),t5=a("li"),Whe=a("strong"),yWo=o("unispeech-sat"),LWo=o(" \u2014 "),jV=a("a"),xWo=o("UniSpeechSatForSequenceClassification"),$Wo=o(" (UniSpeechSat model)"),kWo=l(),a5=a("li"),Hhe=a("strong"),SWo=o("wav2vec2"),RWo=o(" \u2014 "),DV=a("a"),BWo=o("Wav2Vec2ForSequenceClassification"),PWo=o(" (Wav2Vec2 model)"),IWo=l(),n5=a("li"),Uhe=a("strong"),qWo=o("wavlm"),NWo=o(" \u2014 "),GV=a("a"),jWo=o("WavLMForSequenceClassification"),DWo=o(" (WavLM model)"),GWo=l(),s5=a("p"),OWo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),VWo=o("model.eval()"),XWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),zWo=o("model.train()"),QWo=l(),F(l5.$$.fragment),cIe=l(),dd=a("h2"),i5=a("a"),Khe=a("span"),F(BL.$$.fragment),WWo=l(),Zhe=a("span"),HWo=o("AutoModelForAudioFrameClassification"),fIe=l(),Oo=a("div"),F(PL.$$.fragment),UWo=l(),cd=a("p"),JWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),OV=a("a"),YWo=o("from_pretrained()"),KWo=o(" class method or the "),VV=a("a"),ZWo=o("from_config()"),eHo=o(` class
method.`),oHo=l(),IL=a("p"),rHo=o("This class cannot be instantiated directly using "),epe=a("code"),tHo=o("__init__()"),aHo=o(" (throws an error)."),nHo=l(),ut=a("div"),F(qL.$$.fragment),sHo=l(),ope=a("p"),lHo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),iHo=l(),fd=a("p"),dHo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),cHo=o("not"),fHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),mHo=o("from_pretrained()"),gHo=o(" to load the model weights."),hHo=l(),F(d5.$$.fragment),pHo=l(),io=a("div"),F(NL.$$.fragment),uHo=l(),tpe=a("p"),_Ho=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),bHo=l(),Da=a("p"),vHo=o("The model class to instantiate is selected based on the "),ape=a("code"),FHo=o("model_type"),THo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),MHo=o("pretrained_model_name_or_path"),EHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),CHo=o("pretrained_model_name_or_path"),wHo=o(":"),AHo=l(),Ga=a("ul"),c5=a("li"),lpe=a("strong"),yHo=o("data2vec-audio"),LHo=o(" \u2014 "),zV=a("a"),xHo=o("Data2VecAudioForAudioFrameClassification"),$Ho=o(" (Data2VecAudio model)"),kHo=l(),f5=a("li"),ipe=a("strong"),SHo=o("unispeech-sat"),RHo=o(" \u2014 "),QV=a("a"),BHo=o("UniSpeechSatForAudioFrameClassification"),PHo=o(" (UniSpeechSat model)"),IHo=l(),m5=a("li"),dpe=a("strong"),qHo=o("wav2vec2"),NHo=o(" \u2014 "),WV=a("a"),jHo=o("Wav2Vec2ForAudioFrameClassification"),DHo=o(" (Wav2Vec2 model)"),GHo=l(),g5=a("li"),cpe=a("strong"),OHo=o("wavlm"),VHo=o(" \u2014 "),HV=a("a"),XHo=o("WavLMForAudioFrameClassification"),zHo=o(" (WavLM model)"),QHo=l(),h5=a("p"),WHo=o("The model is set in evaluation mode by default using "),fpe=a("code"),HHo=o("model.eval()"),UHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),JHo=o("model.train()"),YHo=l(),F(p5.$$.fragment),mIe=l(),md=a("h2"),u5=a("a"),gpe=a("span"),F(jL.$$.fragment),KHo=l(),hpe=a("span"),ZHo=o("AutoModelForCTC"),gIe=l(),Vo=a("div"),F(DL.$$.fragment),eUo=l(),gd=a("p"),oUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),UV=a("a"),rUo=o("from_pretrained()"),tUo=o(" class method or the "),JV=a("a"),aUo=o("from_config()"),nUo=o(` class
method.`),sUo=l(),GL=a("p"),lUo=o("This class cannot be instantiated directly using "),ppe=a("code"),iUo=o("__init__()"),dUo=o(" (throws an error)."),cUo=l(),_t=a("div"),F(OL.$$.fragment),fUo=l(),upe=a("p"),mUo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gUo=l(),hd=a("p"),hUo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),pUo=o("not"),uUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),_Uo=o("from_pretrained()"),bUo=o(" to load the model weights."),vUo=l(),F(_5.$$.fragment),FUo=l(),co=a("div"),F(VL.$$.fragment),TUo=l(),bpe=a("p"),MUo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),EUo=l(),Oa=a("p"),CUo=o("The model class to instantiate is selected based on the "),vpe=a("code"),wUo=o("model_type"),AUo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),yUo=o("pretrained_model_name_or_path"),LUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),xUo=o("pretrained_model_name_or_path"),$Uo=o(":"),kUo=l(),je=a("ul"),b5=a("li"),Mpe=a("strong"),SUo=o("data2vec-audio"),RUo=o(" \u2014 "),KV=a("a"),BUo=o("Data2VecAudioForCTC"),PUo=o(" (Data2VecAudio model)"),IUo=l(),v5=a("li"),Epe=a("strong"),qUo=o("hubert"),NUo=o(" \u2014 "),ZV=a("a"),jUo=o("HubertForCTC"),DUo=o(" (Hubert model)"),GUo=l(),F5=a("li"),Cpe=a("strong"),OUo=o("sew"),VUo=o(" \u2014 "),eX=a("a"),XUo=o("SEWForCTC"),zUo=o(" (SEW model)"),QUo=l(),T5=a("li"),wpe=a("strong"),WUo=o("sew-d"),HUo=o(" \u2014 "),oX=a("a"),UUo=o("SEWDForCTC"),JUo=o(" (SEW-D model)"),YUo=l(),M5=a("li"),Ape=a("strong"),KUo=o("unispeech"),ZUo=o(" \u2014 "),rX=a("a"),eJo=o("UniSpeechForCTC"),oJo=o(" (UniSpeech model)"),rJo=l(),E5=a("li"),ype=a("strong"),tJo=o("unispeech-sat"),aJo=o(" \u2014 "),tX=a("a"),nJo=o("UniSpeechSatForCTC"),sJo=o(" (UniSpeechSat model)"),lJo=l(),C5=a("li"),Lpe=a("strong"),iJo=o("wav2vec2"),dJo=o(" \u2014 "),aX=a("a"),cJo=o("Wav2Vec2ForCTC"),fJo=o(" (Wav2Vec2 model)"),mJo=l(),w5=a("li"),xpe=a("strong"),gJo=o("wavlm"),hJo=o(" \u2014 "),nX=a("a"),pJo=o("WavLMForCTC"),uJo=o(" (WavLM model)"),_Jo=l(),A5=a("p"),bJo=o("The model is set in evaluation mode by default using "),$pe=a("code"),vJo=o("model.eval()"),FJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),TJo=o("model.train()"),MJo=l(),F(y5.$$.fragment),hIe=l(),pd=a("h2"),L5=a("a"),Spe=a("span"),F(XL.$$.fragment),EJo=l(),Rpe=a("span"),CJo=o("AutoModelForSpeechSeq2Seq"),pIe=l(),Xo=a("div"),F(zL.$$.fragment),wJo=l(),ud=a("p"),AJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),sX=a("a"),yJo=o("from_pretrained()"),LJo=o(" class method or the "),lX=a("a"),xJo=o("from_config()"),$Jo=o(` class
method.`),kJo=l(),QL=a("p"),SJo=o("This class cannot be instantiated directly using "),Bpe=a("code"),RJo=o("__init__()"),BJo=o(" (throws an error)."),PJo=l(),bt=a("div"),F(WL.$$.fragment),IJo=l(),Ppe=a("p"),qJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NJo=l(),_d=a("p"),jJo=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),DJo=o("not"),GJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),OJo=o("from_pretrained()"),VJo=o(" to load the model weights."),XJo=l(),F(x5.$$.fragment),zJo=l(),fo=a("div"),F(HL.$$.fragment),QJo=l(),qpe=a("p"),WJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HJo=l(),Va=a("p"),UJo=o("The model class to instantiate is selected based on the "),Npe=a("code"),JJo=o("model_type"),YJo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),eYo=o("pretrained_model_name_or_path"),oYo=o(":"),rYo=l(),UL=a("ul"),$5=a("li"),Gpe=a("strong"),tYo=o("speech-encoder-decoder"),aYo=o(" \u2014 "),dX=a("a"),nYo=o("SpeechEncoderDecoderModel"),sYo=o(" (Speech Encoder decoder model)"),lYo=l(),k5=a("li"),Ope=a("strong"),iYo=o("speech_to_text"),dYo=o(" \u2014 "),cX=a("a"),cYo=o("Speech2TextForConditionalGeneration"),fYo=o(" (Speech2Text model)"),mYo=l(),S5=a("p"),gYo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),hYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),uYo=o("model.train()"),_Yo=l(),F(R5.$$.fragment),uIe=l(),bd=a("h2"),B5=a("a"),zpe=a("span"),F(JL.$$.fragment),bYo=l(),Qpe=a("span"),vYo=o("AutoModelForAudioXVector"),_Ie=l(),zo=a("div"),F(YL.$$.fragment),FYo=l(),vd=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),fX=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),mX=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),KL=a("p"),yYo=o("This class cannot be instantiated directly using "),Wpe=a("code"),LYo=o("__init__()"),xYo=o(" (throws an error)."),$Yo=l(),vt=a("div"),F(ZL.$$.fragment),kYo=l(),Hpe=a("p"),SYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),RYo=l(),Fd=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),PYo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),qYo=o("from_pretrained()"),NYo=o(" to load the model weights."),jYo=l(),F(P5.$$.fragment),DYo=l(),mo=a("div"),F(e8.$$.fragment),GYo=l(),Jpe=a("p"),OYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),VYo=l(),Xa=a("p"),XYo=o("The model class to instantiate is selected based on the "),Ype=a("code"),zYo=o("model_type"),QYo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),WYo=o("pretrained_model_name_or_path"),HYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(":"),YYo=l(),za=a("ul"),I5=a("li"),eue=a("strong"),KYo=o("data2vec-audio"),ZYo=o(" \u2014 "),hX=a("a"),eKo=o("Data2VecAudioForXVector"),oKo=o(" (Data2VecAudio model)"),rKo=l(),q5=a("li"),oue=a("strong"),tKo=o("unispeech-sat"),aKo=o(" \u2014 "),pX=a("a"),nKo=o("UniSpeechSatForXVector"),sKo=o(" (UniSpeechSat model)"),lKo=l(),N5=a("li"),rue=a("strong"),iKo=o("wav2vec2"),dKo=o(" \u2014 "),uX=a("a"),cKo=o("Wav2Vec2ForXVector"),fKo=o(" (Wav2Vec2 model)"),mKo=l(),j5=a("li"),tue=a("strong"),gKo=o("wavlm"),hKo=o(" \u2014 "),_X=a("a"),pKo=o("WavLMForXVector"),uKo=o(" (WavLM model)"),_Ko=l(),D5=a("p"),bKo=o("The model is set in evaluation mode by default using "),aue=a("code"),vKo=o("model.eval()"),FKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=a("code"),TKo=o("model.train()"),MKo=l(),F(G5.$$.fragment),bIe=l(),Td=a("h2"),O5=a("a"),sue=a("span"),F(o8.$$.fragment),EKo=l(),lue=a("span"),CKo=o("AutoModelForMaskedImageModeling"),vIe=l(),Qo=a("div"),F(r8.$$.fragment),wKo=l(),Md=a("p"),AKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bX=a("a"),yKo=o("from_pretrained()"),LKo=o(" class method or the "),vX=a("a"),xKo=o("from_config()"),$Ko=o(` class
method.`),kKo=l(),t8=a("p"),SKo=o("This class cannot be instantiated directly using "),iue=a("code"),RKo=o("__init__()"),BKo=o(" (throws an error)."),PKo=l(),Ft=a("div"),F(a8.$$.fragment),IKo=l(),due=a("p"),qKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),NKo=l(),Ed=a("p"),jKo=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),DKo=o("not"),GKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=a("a"),OKo=o("from_pretrained()"),VKo=o(" to load the model weights."),XKo=l(),F(V5.$$.fragment),zKo=l(),go=a("div"),F(n8.$$.fragment),QKo=l(),fue=a("p"),WKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),HKo=l(),Qa=a("p"),UKo=o("The model class to instantiate is selected based on the "),mue=a("code"),JKo=o("model_type"),YKo=o(` property of the config object (either
passed as an argument or loaded from `),gue=a("code"),KKo=o("pretrained_model_name_or_path"),ZKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=a("code"),eZo=o("pretrained_model_name_or_path"),oZo=o(":"),rZo=l(),Cd=a("ul"),X5=a("li"),pue=a("strong"),tZo=o("deit"),aZo=o(" \u2014 "),TX=a("a"),nZo=o("DeiTForMaskedImageModeling"),sZo=o(" (DeiT model)"),lZo=l(),z5=a("li"),uue=a("strong"),iZo=o("swin"),dZo=o(" \u2014 "),MX=a("a"),cZo=o("SwinForMaskedImageModeling"),fZo=o(" (Swin model)"),mZo=l(),Q5=a("li"),_ue=a("strong"),gZo=o("vit"),hZo=o(" \u2014 "),EX=a("a"),pZo=o("ViTForMaskedImageModeling"),uZo=o(" (ViT model)"),_Zo=l(),W5=a("p"),bZo=o("The model is set in evaluation mode by default using "),bue=a("code"),vZo=o("model.eval()"),FZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),TZo=o("model.train()"),MZo=l(),F(H5.$$.fragment),FIe=l(),wd=a("h2"),U5=a("a"),Fue=a("span"),F(s8.$$.fragment),EZo=l(),Tue=a("span"),CZo=o("AutoModelForObjectDetection"),TIe=l(),Wo=a("div"),F(l8.$$.fragment),wZo=l(),Ad=a("p"),AZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),CX=a("a"),yZo=o("from_pretrained()"),LZo=o(" class method or the "),wX=a("a"),xZo=o("from_config()"),$Zo=o(` class
method.`),kZo=l(),i8=a("p"),SZo=o("This class cannot be instantiated directly using "),Mue=a("code"),RZo=o("__init__()"),BZo=o(" (throws an error)."),PZo=l(),Tt=a("div"),F(d8.$$.fragment),IZo=l(),Eue=a("p"),qZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),NZo=l(),yd=a("p"),jZo=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),DZo=o("not"),GZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),OZo=o("from_pretrained()"),VZo=o(" to load the model weights."),XZo=l(),F(J5.$$.fragment),zZo=l(),ho=a("div"),F(c8.$$.fragment),QZo=l(),wue=a("p"),WZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),HZo=l(),Wa=a("p"),UZo=o("The model class to instantiate is selected based on the "),Aue=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),f8=a("ul"),Y5=a("li"),xue=a("strong"),ter=o("detr"),aer=o(" \u2014 "),yX=a("a"),ner=o("DetrForObjectDetection"),ser=o(" (DETR model)"),ler=l(),K5=a("li"),$ue=a("strong"),ier=o("yolos"),der=o(" \u2014 "),LX=a("a"),cer=o("YolosForObjectDetection"),fer=o(" (YOLOS model)"),mer=l(),Z5=a("p"),ger=o("The model is set in evaluation mode by default using "),kue=a("code"),her=o("model.eval()"),per=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=a("code"),uer=o("model.train()"),_er=l(),F(ev.$$.fragment),MIe=l(),Ld=a("h2"),ov=a("a"),Rue=a("span"),F(m8.$$.fragment),ber=l(),Bue=a("span"),ver=o("AutoModelForImageSegmentation"),EIe=l(),Ho=a("div"),F(g8.$$.fragment),Fer=l(),xd=a("p"),Ter=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),xX=a("a"),Mer=o("from_pretrained()"),Eer=o(" class method or the "),$X=a("a"),Cer=o("from_config()"),wer=o(` class
method.`),Aer=l(),h8=a("p"),yer=o("This class cannot be instantiated directly using "),Pue=a("code"),Ler=o("__init__()"),xer=o(" (throws an error)."),$er=l(),Mt=a("div"),F(p8.$$.fragment),ker=l(),Iue=a("p"),Ser=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rer=l(),$d=a("p"),Ber=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),Per=o("not"),Ier=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=a("a"),qer=o("from_pretrained()"),Ner=o(" to load the model weights."),jer=l(),F(rv.$$.fragment),Der=l(),po=a("div"),F(u8.$$.fragment),Ger=l(),Nue=a("p"),Oer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ver=l(),Ha=a("p"),Xer=o("The model class to instantiate is selected based on the "),jue=a("code"),zer=o("model_type"),Qer=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),Wer=o("pretrained_model_name_or_path"),Her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),Uer=o("pretrained_model_name_or_path"),Jer=o(":"),Yer=l(),Oue=a("ul"),tv=a("li"),Vue=a("strong"),Ker=o("detr"),Zer=o(" \u2014 "),SX=a("a"),eor=o("DetrForSegmentation"),oor=o(" (DETR model)"),ror=l(),av=a("p"),tor=o("The model is set in evaluation mode by default using "),Xue=a("code"),aor=o("model.eval()"),nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),sor=o("model.train()"),lor=l(),F(nv.$$.fragment),CIe=l(),kd=a("h2"),sv=a("a"),Que=a("span"),F(_8.$$.fragment),ior=l(),Wue=a("span"),dor=o("AutoModelForSemanticSegmentation"),wIe=l(),Uo=a("div"),F(b8.$$.fragment),cor=l(),Sd=a("p"),mor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),RX=a("a"),gor=o("from_pretrained()"),hor=o(" class method or the "),BX=a("a"),por=o("from_config()"),uor=o(` class
method.`),_or=l(),v8=a("p"),bor=o("This class cannot be instantiated directly using "),Hue=a("code"),vor=o("__init__()"),For=o(" (throws an error)."),Tor=l(),Et=a("div"),F(F8.$$.fragment),Mor=l(),Uue=a("p"),Eor=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Cor=l(),Rd=a("p"),wor=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Aor=o("not"),yor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Lor=o("from_pretrained()"),xor=o(" to load the model weights."),$or=l(),F(lv.$$.fragment),kor=l(),uo=a("div"),F(T8.$$.fragment),Sor=l(),Yue=a("p"),Ror=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Bor=l(),Ua=a("p"),Por=o("The model class to instantiate is selected based on the "),Kue=a("code"),Ior=o("model_type"),qor=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),Nor=o("pretrained_model_name_or_path"),jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),Dor=o("pretrained_model_name_or_path"),Gor=o(":"),Oor=l(),Ja=a("ul"),iv=a("li"),o_e=a("strong"),Vor=o("beit"),Xor=o(" \u2014 "),IX=a("a"),zor=o("BeitForSemanticSegmentation"),Qor=o(" (BEiT model)"),Wor=l(),dv=a("li"),r_e=a("strong"),Hor=o("data2vec-vision"),Uor=o(" \u2014 "),qX=a("a"),Jor=o("Data2VecVisionForSemanticSegmentation"),Yor=o(" (Data2VecVision model)"),Kor=l(),cv=a("li"),t_e=a("strong"),Zor=o("dpt"),err=o(" \u2014 "),NX=a("a"),orr=o("DPTForSemanticSegmentation"),rrr=o(" (DPT model)"),trr=l(),fv=a("li"),a_e=a("strong"),arr=o("segformer"),nrr=o(" \u2014 "),jX=a("a"),srr=o("SegformerForSemanticSegmentation"),lrr=o(" (SegFormer model)"),irr=l(),mv=a("p"),drr=o("The model is set in evaluation mode by default using "),n_e=a("code"),crr=o("model.eval()"),frr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=a("code"),mrr=o("model.train()"),grr=l(),F(gv.$$.fragment),AIe=l(),Bd=a("h2"),hv=a("a"),l_e=a("span"),F(M8.$$.fragment),hrr=l(),i_e=a("span"),prr=o("AutoModelForInstanceSegmentation"),yIe=l(),Jo=a("div"),F(E8.$$.fragment),urr=l(),Pd=a("p"),_rr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),DX=a("a"),brr=o("from_pretrained()"),vrr=o(" class method or the "),GX=a("a"),Frr=o("from_config()"),Trr=o(` class
method.`),Mrr=l(),C8=a("p"),Err=o("This class cannot be instantiated directly using "),d_e=a("code"),Crr=o("__init__()"),wrr=o(" (throws an error)."),Arr=l(),Ct=a("div"),F(w8.$$.fragment),yrr=l(),c_e=a("p"),Lrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xrr=l(),Id=a("p"),$rr=o(`Note:
Loading a model from its configuration file does `),f_e=a("strong"),krr=o("not"),Srr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),Rrr=o("from_pretrained()"),Brr=o(" to load the model weights."),Prr=l(),F(pv.$$.fragment),Irr=l(),_o=a("div"),F(A8.$$.fragment),qrr=l(),m_e=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jrr=l(),Ya=a("p"),Drr=o("The model class to instantiate is selected based on the "),g_e=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),h_e=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=a("code"),zrr=o("pretrained_model_name_or_path"),Qrr=o(":"),Wrr=l(),u_e=a("ul"),uv=a("li"),__e=a("strong"),Hrr=o("maskformer"),Urr=o(" \u2014 "),VX=a("a"),Jrr=o("MaskFormerForInstanceSegmentation"),Yrr=o(" (MaskFormer model)"),Krr=l(),_v=a("p"),Zrr=o("The model is set in evaluation mode by default using "),b_e=a("code"),etr=o("model.eval()"),otr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=a("code"),rtr=o("model.train()"),ttr=l(),F(bv.$$.fragment),LIe=l(),qd=a("h2"),vv=a("a"),F_e=a("span"),F(y8.$$.fragment),atr=l(),T_e=a("span"),ntr=o("TFAutoModel"),xIe=l(),Yo=a("div"),F(L8.$$.fragment),str=l(),Nd=a("p"),ltr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XX=a("a"),itr=o("from_pretrained()"),dtr=o(" class method or the "),zX=a("a"),ctr=o("from_config()"),ftr=o(` class
method.`),mtr=l(),x8=a("p"),gtr=o("This class cannot be instantiated directly using "),M_e=a("code"),htr=o("__init__()"),ptr=o(" (throws an error)."),utr=l(),wt=a("div"),F($8.$$.fragment),_tr=l(),E_e=a("p"),btr=o("Instantiates one of the base model classes of the library from a configuration."),vtr=l(),jd=a("p"),Ftr=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),Ttr=o("not"),Mtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),Etr=o("from_pretrained()"),Ctr=o(" to load the model weights."),wtr=l(),F(Fv.$$.fragment),Atr=l(),wr=a("div"),F(k8.$$.fragment),ytr=l(),w_e=a("p"),Ltr=o("Instantiate one of the base model classes of the library from a pretrained model."),xtr=l(),Ka=a("p"),$tr=o("The model class to instantiate is selected based on the "),A_e=a("code"),ktr=o("model_type"),Str=o(` property of the config object (either
passed as an argument or loaded from `),y_e=a("code"),Rtr=o("pretrained_model_name_or_path"),Btr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=a("code"),Ptr=o("pretrained_model_name_or_path"),Itr=o(":"),qtr=l(),j=a("ul"),Tv=a("li"),x_e=a("strong"),Ntr=o("albert"),jtr=o(" \u2014 "),WX=a("a"),Dtr=o("TFAlbertModel"),Gtr=o(" (ALBERT model)"),Otr=l(),Mv=a("li"),$_e=a("strong"),Vtr=o("bart"),Xtr=o(" \u2014 "),HX=a("a"),ztr=o("TFBartModel"),Qtr=o(" (BART model)"),Wtr=l(),Ev=a("li"),k_e=a("strong"),Htr=o("bert"),Utr=o(" \u2014 "),UX=a("a"),Jtr=o("TFBertModel"),Ytr=o(" (BERT model)"),Ktr=l(),Cv=a("li"),S_e=a("strong"),Ztr=o("blenderbot"),ear=o(" \u2014 "),JX=a("a"),oar=o("TFBlenderbotModel"),rar=o(" (Blenderbot model)"),tar=l(),wv=a("li"),R_e=a("strong"),aar=o("blenderbot-small"),nar=o(" \u2014 "),YX=a("a"),sar=o("TFBlenderbotSmallModel"),lar=o(" (BlenderbotSmall model)"),iar=l(),Av=a("li"),B_e=a("strong"),dar=o("camembert"),car=o(" \u2014 "),KX=a("a"),far=o("TFCamembertModel"),mar=o(" (CamemBERT model)"),gar=l(),yv=a("li"),P_e=a("strong"),har=o("clip"),par=o(" \u2014 "),ZX=a("a"),uar=o("TFCLIPModel"),_ar=o(" (CLIP model)"),bar=l(),Lv=a("li"),I_e=a("strong"),Far=o("convbert"),Tar=o(" \u2014 "),ez=a("a"),Mar=o("TFConvBertModel"),Ear=o(" (ConvBERT model)"),Car=l(),xv=a("li"),q_e=a("strong"),war=o("convnext"),Aar=o(" \u2014 "),oz=a("a"),yar=o("TFConvNextModel"),Lar=o(" (ConvNext model)"),xar=l(),$v=a("li"),N_e=a("strong"),$ar=o("ctrl"),kar=o(" \u2014 "),rz=a("a"),Sar=o("TFCTRLModel"),Rar=o(" (CTRL model)"),Bar=l(),kv=a("li"),j_e=a("strong"),Par=o("data2vec-vision"),Iar=o(" \u2014 "),tz=a("a"),qar=o("TFData2VecVisionModel"),Nar=o(" (Data2VecVision model)"),jar=l(),Sv=a("li"),D_e=a("strong"),Dar=o("deberta"),Gar=o(" \u2014 "),az=a("a"),Oar=o("TFDebertaModel"),Var=o(" (DeBERTa model)"),Xar=l(),Rv=a("li"),G_e=a("strong"),zar=o("deberta-v2"),Qar=o(" \u2014 "),nz=a("a"),War=o("TFDebertaV2Model"),Har=o(" (DeBERTa-v2 model)"),Uar=l(),Bv=a("li"),O_e=a("strong"),Jar=o("distilbert"),Yar=o(" \u2014 "),sz=a("a"),Kar=o("TFDistilBertModel"),Zar=o(" (DistilBERT model)"),enr=l(),Pv=a("li"),V_e=a("strong"),onr=o("dpr"),rnr=o(" \u2014 "),lz=a("a"),tnr=o("TFDPRQuestionEncoder"),anr=o(" (DPR model)"),nnr=l(),Iv=a("li"),X_e=a("strong"),snr=o("electra"),lnr=o(" \u2014 "),iz=a("a"),inr=o("TFElectraModel"),dnr=o(" (ELECTRA model)"),cnr=l(),qv=a("li"),z_e=a("strong"),fnr=o("flaubert"),mnr=o(" \u2014 "),dz=a("a"),gnr=o("TFFlaubertModel"),hnr=o(" (FlauBERT model)"),pnr=l(),Bs=a("li"),Q_e=a("strong"),unr=o("funnel"),_nr=o(" \u2014 "),cz=a("a"),bnr=o("TFFunnelModel"),vnr=o(" or "),fz=a("a"),Fnr=o("TFFunnelBaseModel"),Tnr=o(" (Funnel Transformer model)"),Mnr=l(),Nv=a("li"),W_e=a("strong"),Enr=o("gpt2"),Cnr=o(" \u2014 "),mz=a("a"),wnr=o("TFGPT2Model"),Anr=o(" (OpenAI GPT-2 model)"),ynr=l(),jv=a("li"),H_e=a("strong"),Lnr=o("gptj"),xnr=o(" \u2014 "),gz=a("a"),$nr=o("TFGPTJModel"),knr=o(" (GPT-J model)"),Snr=l(),Dv=a("li"),U_e=a("strong"),Rnr=o("hubert"),Bnr=o(" \u2014 "),hz=a("a"),Pnr=o("TFHubertModel"),Inr=o(" (Hubert model)"),qnr=l(),Gv=a("li"),J_e=a("strong"),Nnr=o("layoutlm"),jnr=o(" \u2014 "),pz=a("a"),Dnr=o("TFLayoutLMModel"),Gnr=o(" (LayoutLM model)"),Onr=l(),Ov=a("li"),Y_e=a("strong"),Vnr=o("led"),Xnr=o(" \u2014 "),uz=a("a"),znr=o("TFLEDModel"),Qnr=o(" (LED model)"),Wnr=l(),Vv=a("li"),K_e=a("strong"),Hnr=o("longformer"),Unr=o(" \u2014 "),_z=a("a"),Jnr=o("TFLongformerModel"),Ynr=o(" (Longformer model)"),Knr=l(),Xv=a("li"),Z_e=a("strong"),Znr=o("lxmert"),esr=o(" \u2014 "),bz=a("a"),osr=o("TFLxmertModel"),rsr=o(" (LXMERT model)"),tsr=l(),zv=a("li"),e6e=a("strong"),asr=o("marian"),nsr=o(" \u2014 "),vz=a("a"),ssr=o("TFMarianModel"),lsr=o(" (Marian model)"),isr=l(),Qv=a("li"),o6e=a("strong"),dsr=o("mbart"),csr=o(" \u2014 "),Fz=a("a"),fsr=o("TFMBartModel"),msr=o(" (mBART model)"),gsr=l(),Wv=a("li"),r6e=a("strong"),hsr=o("mobilebert"),psr=o(" \u2014 "),Tz=a("a"),usr=o("TFMobileBertModel"),_sr=o(" (MobileBERT model)"),bsr=l(),Hv=a("li"),t6e=a("strong"),vsr=o("mpnet"),Fsr=o(" \u2014 "),Mz=a("a"),Tsr=o("TFMPNetModel"),Msr=o(" (MPNet model)"),Esr=l(),Uv=a("li"),a6e=a("strong"),Csr=o("mt5"),wsr=o(" \u2014 "),Ez=a("a"),Asr=o("TFMT5Model"),ysr=o(" (mT5 model)"),Lsr=l(),Jv=a("li"),n6e=a("strong"),xsr=o("openai-gpt"),$sr=o(" \u2014 "),Cz=a("a"),ksr=o("TFOpenAIGPTModel"),Ssr=o(" (OpenAI GPT model)"),Rsr=l(),Yv=a("li"),s6e=a("strong"),Bsr=o("pegasus"),Psr=o(" \u2014 "),wz=a("a"),Isr=o("TFPegasusModel"),qsr=o(" (Pegasus model)"),Nsr=l(),Kv=a("li"),l6e=a("strong"),jsr=o("rembert"),Dsr=o(" \u2014 "),Az=a("a"),Gsr=o("TFRemBertModel"),Osr=o(" (RemBERT model)"),Vsr=l(),Zv=a("li"),i6e=a("strong"),Xsr=o("roberta"),zsr=o(" \u2014 "),yz=a("a"),Qsr=o("TFRobertaModel"),Wsr=o(" (RoBERTa model)"),Hsr=l(),eF=a("li"),d6e=a("strong"),Usr=o("roformer"),Jsr=o(" \u2014 "),Lz=a("a"),Ysr=o("TFRoFormerModel"),Ksr=o(" (RoFormer model)"),Zsr=l(),oF=a("li"),c6e=a("strong"),elr=o("speech_to_text"),olr=o(" \u2014 "),xz=a("a"),rlr=o("TFSpeech2TextModel"),tlr=o(" (Speech2Text model)"),alr=l(),rF=a("li"),f6e=a("strong"),nlr=o("t5"),slr=o(" \u2014 "),$z=a("a"),llr=o("TFT5Model"),ilr=o(" (T5 model)"),dlr=l(),tF=a("li"),m6e=a("strong"),clr=o("tapas"),flr=o(" \u2014 "),kz=a("a"),mlr=o("TFTapasModel"),glr=o(" (TAPAS model)"),hlr=l(),aF=a("li"),g6e=a("strong"),plr=o("transfo-xl"),ulr=o(" \u2014 "),Sz=a("a"),_lr=o("TFTransfoXLModel"),blr=o(" (Transformer-XL model)"),vlr=l(),nF=a("li"),h6e=a("strong"),Flr=o("vit"),Tlr=o(" \u2014 "),Rz=a("a"),Mlr=o("TFViTModel"),Elr=o(" (ViT model)"),Clr=l(),sF=a("li"),p6e=a("strong"),wlr=o("vit_mae"),Alr=o(" \u2014 "),Bz=a("a"),ylr=o("TFViTMAEModel"),Llr=o(" (ViTMAE model)"),xlr=l(),lF=a("li"),u6e=a("strong"),$lr=o("wav2vec2"),klr=o(" \u2014 "),Pz=a("a"),Slr=o("TFWav2Vec2Model"),Rlr=o(" (Wav2Vec2 model)"),Blr=l(),iF=a("li"),_6e=a("strong"),Plr=o("xlm"),Ilr=o(" \u2014 "),Iz=a("a"),qlr=o("TFXLMModel"),Nlr=o(" (XLM model)"),jlr=l(),dF=a("li"),b6e=a("strong"),Dlr=o("xlm-roberta"),Glr=o(" \u2014 "),qz=a("a"),Olr=o("TFXLMRobertaModel"),Vlr=o(" (XLM-RoBERTa model)"),Xlr=l(),cF=a("li"),v6e=a("strong"),zlr=o("xlnet"),Qlr=o(" \u2014 "),Nz=a("a"),Wlr=o("TFXLNetModel"),Hlr=o(" (XLNet model)"),Ulr=l(),F(fF.$$.fragment),$Ie=l(),Dd=a("h2"),mF=a("a"),F6e=a("span"),F(S8.$$.fragment),Jlr=l(),T6e=a("span"),Ylr=o("TFAutoModelForPreTraining"),kIe=l(),Ko=a("div"),F(R8.$$.fragment),Klr=l(),Gd=a("p"),Zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jz=a("a"),eir=o("from_pretrained()"),oir=o(" class method or the "),Dz=a("a"),rir=o("from_config()"),tir=o(` class
method.`),air=l(),B8=a("p"),nir=o("This class cannot be instantiated directly using "),M6e=a("code"),sir=o("__init__()"),lir=o(" (throws an error)."),iir=l(),At=a("div"),F(P8.$$.fragment),dir=l(),E6e=a("p"),cir=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fir=l(),Od=a("p"),mir=o(`Note:
Loading a model from its configuration file does `),C6e=a("strong"),gir=o("not"),hir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),pir=o("from_pretrained()"),uir=o(" to load the model weights."),_ir=l(),F(gF.$$.fragment),bir=l(),Ar=a("div"),F(I8.$$.fragment),vir=l(),w6e=a("p"),Fir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tir=l(),Za=a("p"),Mir=o("The model class to instantiate is selected based on the "),A6e=a("code"),Eir=o("model_type"),Cir=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),wir=o("pretrained_model_name_or_path"),Air=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),yir=o("pretrained_model_name_or_path"),Lir=o(":"),xir=l(),se=a("ul"),hF=a("li"),x6e=a("strong"),$ir=o("albert"),kir=o(" \u2014 "),Oz=a("a"),Sir=o("TFAlbertForPreTraining"),Rir=o(" (ALBERT model)"),Bir=l(),pF=a("li"),$6e=a("strong"),Pir=o("bart"),Iir=o(" \u2014 "),Vz=a("a"),qir=o("TFBartForConditionalGeneration"),Nir=o(" (BART model)"),jir=l(),uF=a("li"),k6e=a("strong"),Dir=o("bert"),Gir=o(" \u2014 "),Xz=a("a"),Oir=o("TFBertForPreTraining"),Vir=o(" (BERT model)"),Xir=l(),_F=a("li"),S6e=a("strong"),zir=o("camembert"),Qir=o(" \u2014 "),zz=a("a"),Wir=o("TFCamembertForMaskedLM"),Hir=o(" (CamemBERT model)"),Uir=l(),bF=a("li"),R6e=a("strong"),Jir=o("ctrl"),Yir=o(" \u2014 "),Qz=a("a"),Kir=o("TFCTRLLMHeadModel"),Zir=o(" (CTRL model)"),edr=l(),vF=a("li"),B6e=a("strong"),odr=o("distilbert"),rdr=o(" \u2014 "),Wz=a("a"),tdr=o("TFDistilBertForMaskedLM"),adr=o(" (DistilBERT model)"),ndr=l(),FF=a("li"),P6e=a("strong"),sdr=o("electra"),ldr=o(" \u2014 "),Hz=a("a"),idr=o("TFElectraForPreTraining"),ddr=o(" (ELECTRA model)"),cdr=l(),TF=a("li"),I6e=a("strong"),fdr=o("flaubert"),mdr=o(" \u2014 "),Uz=a("a"),gdr=o("TFFlaubertWithLMHeadModel"),hdr=o(" (FlauBERT model)"),pdr=l(),MF=a("li"),q6e=a("strong"),udr=o("funnel"),_dr=o(" \u2014 "),Jz=a("a"),bdr=o("TFFunnelForPreTraining"),vdr=o(" (Funnel Transformer model)"),Fdr=l(),EF=a("li"),N6e=a("strong"),Tdr=o("gpt2"),Mdr=o(" \u2014 "),Yz=a("a"),Edr=o("TFGPT2LMHeadModel"),Cdr=o(" (OpenAI GPT-2 model)"),wdr=l(),CF=a("li"),j6e=a("strong"),Adr=o("layoutlm"),ydr=o(" \u2014 "),Kz=a("a"),Ldr=o("TFLayoutLMForMaskedLM"),xdr=o(" (LayoutLM model)"),$dr=l(),wF=a("li"),D6e=a("strong"),kdr=o("lxmert"),Sdr=o(" \u2014 "),Zz=a("a"),Rdr=o("TFLxmertForPreTraining"),Bdr=o(" (LXMERT model)"),Pdr=l(),AF=a("li"),G6e=a("strong"),Idr=o("mobilebert"),qdr=o(" \u2014 "),eQ=a("a"),Ndr=o("TFMobileBertForPreTraining"),jdr=o(" (MobileBERT model)"),Ddr=l(),yF=a("li"),O6e=a("strong"),Gdr=o("mpnet"),Odr=o(" \u2014 "),oQ=a("a"),Vdr=o("TFMPNetForMaskedLM"),Xdr=o(" (MPNet model)"),zdr=l(),LF=a("li"),V6e=a("strong"),Qdr=o("openai-gpt"),Wdr=o(" \u2014 "),rQ=a("a"),Hdr=o("TFOpenAIGPTLMHeadModel"),Udr=o(" (OpenAI GPT model)"),Jdr=l(),xF=a("li"),X6e=a("strong"),Ydr=o("roberta"),Kdr=o(" \u2014 "),tQ=a("a"),Zdr=o("TFRobertaForMaskedLM"),ecr=o(" (RoBERTa model)"),ocr=l(),$F=a("li"),z6e=a("strong"),rcr=o("t5"),tcr=o(" \u2014 "),aQ=a("a"),acr=o("TFT5ForConditionalGeneration"),ncr=o(" (T5 model)"),scr=l(),kF=a("li"),Q6e=a("strong"),lcr=o("tapas"),icr=o(" \u2014 "),nQ=a("a"),dcr=o("TFTapasForMaskedLM"),ccr=o(" (TAPAS model)"),fcr=l(),SF=a("li"),W6e=a("strong"),mcr=o("transfo-xl"),gcr=o(" \u2014 "),sQ=a("a"),hcr=o("TFTransfoXLLMHeadModel"),pcr=o(" (Transformer-XL model)"),ucr=l(),RF=a("li"),H6e=a("strong"),_cr=o("vit_mae"),bcr=o(" \u2014 "),lQ=a("a"),vcr=o("TFViTMAEForPreTraining"),Fcr=o(" (ViTMAE model)"),Tcr=l(),BF=a("li"),U6e=a("strong"),Mcr=o("xlm"),Ecr=o(" \u2014 "),iQ=a("a"),Ccr=o("TFXLMWithLMHeadModel"),wcr=o(" (XLM model)"),Acr=l(),PF=a("li"),J6e=a("strong"),ycr=o("xlm-roberta"),Lcr=o(" \u2014 "),dQ=a("a"),xcr=o("TFXLMRobertaForMaskedLM"),$cr=o(" (XLM-RoBERTa model)"),kcr=l(),IF=a("li"),Y6e=a("strong"),Scr=o("xlnet"),Rcr=o(" \u2014 "),cQ=a("a"),Bcr=o("TFXLNetLMHeadModel"),Pcr=o(" (XLNet model)"),Icr=l(),F(qF.$$.fragment),SIe=l(),Vd=a("h2"),NF=a("a"),K6e=a("span"),F(q8.$$.fragment),qcr=l(),Z6e=a("span"),Ncr=o("TFAutoModelForCausalLM"),RIe=l(),Zo=a("div"),F(N8.$$.fragment),jcr=l(),Xd=a("p"),Dcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fQ=a("a"),Gcr=o("from_pretrained()"),Ocr=o(" class method or the "),mQ=a("a"),Vcr=o("from_config()"),Xcr=o(` class
method.`),zcr=l(),j8=a("p"),Qcr=o("This class cannot be instantiated directly using "),e1e=a("code"),Wcr=o("__init__()"),Hcr=o(" (throws an error)."),Ucr=l(),yt=a("div"),F(D8.$$.fragment),Jcr=l(),o1e=a("p"),Ycr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kcr=l(),zd=a("p"),Zcr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),efr=o("not"),ofr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),rfr=o("from_pretrained()"),tfr=o(" to load the model weights."),afr=l(),F(jF.$$.fragment),nfr=l(),yr=a("div"),F(G8.$$.fragment),sfr=l(),t1e=a("p"),lfr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ifr=l(),en=a("p"),dfr=o("The model class to instantiate is selected based on the "),a1e=a("code"),cfr=o("model_type"),ffr=o(` property of the config object (either
passed as an argument or loaded from `),n1e=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=a("code"),hfr=o("pretrained_model_name_or_path"),pfr=o(":"),ufr=l(),Te=a("ul"),DF=a("li"),l1e=a("strong"),_fr=o("bert"),bfr=o(" \u2014 "),hQ=a("a"),vfr=o("TFBertLMHeadModel"),Ffr=o(" (BERT model)"),Tfr=l(),GF=a("li"),i1e=a("strong"),Mfr=o("camembert"),Efr=o(" \u2014 "),pQ=a("a"),Cfr=o("TFCamembertForCausalLM"),wfr=o(" (CamemBERT model)"),Afr=l(),OF=a("li"),d1e=a("strong"),yfr=o("ctrl"),Lfr=o(" \u2014 "),uQ=a("a"),xfr=o("TFCTRLLMHeadModel"),$fr=o(" (CTRL model)"),kfr=l(),VF=a("li"),c1e=a("strong"),Sfr=o("gpt2"),Rfr=o(" \u2014 "),_Q=a("a"),Bfr=o("TFGPT2LMHeadModel"),Pfr=o(" (OpenAI GPT-2 model)"),Ifr=l(),XF=a("li"),f1e=a("strong"),qfr=o("gptj"),Nfr=o(" \u2014 "),bQ=a("a"),jfr=o("TFGPTJForCausalLM"),Dfr=o(" (GPT-J model)"),Gfr=l(),zF=a("li"),m1e=a("strong"),Ofr=o("openai-gpt"),Vfr=o(" \u2014 "),vQ=a("a"),Xfr=o("TFOpenAIGPTLMHeadModel"),zfr=o(" (OpenAI GPT model)"),Qfr=l(),QF=a("li"),g1e=a("strong"),Wfr=o("rembert"),Hfr=o(" \u2014 "),FQ=a("a"),Ufr=o("TFRemBertForCausalLM"),Jfr=o(" (RemBERT model)"),Yfr=l(),WF=a("li"),h1e=a("strong"),Kfr=o("roberta"),Zfr=o(" \u2014 "),TQ=a("a"),emr=o("TFRobertaForCausalLM"),omr=o(" (RoBERTa model)"),rmr=l(),HF=a("li"),p1e=a("strong"),tmr=o("roformer"),amr=o(" \u2014 "),MQ=a("a"),nmr=o("TFRoFormerForCausalLM"),smr=o(" (RoFormer model)"),lmr=l(),UF=a("li"),u1e=a("strong"),imr=o("transfo-xl"),dmr=o(" \u2014 "),EQ=a("a"),cmr=o("TFTransfoXLLMHeadModel"),fmr=o(" (Transformer-XL model)"),mmr=l(),JF=a("li"),_1e=a("strong"),gmr=o("xlm"),hmr=o(" \u2014 "),CQ=a("a"),pmr=o("TFXLMWithLMHeadModel"),umr=o(" (XLM model)"),_mr=l(),YF=a("li"),b1e=a("strong"),bmr=o("xlnet"),vmr=o(" \u2014 "),wQ=a("a"),Fmr=o("TFXLNetLMHeadModel"),Tmr=o(" (XLNet model)"),Mmr=l(),F(KF.$$.fragment),BIe=l(),Qd=a("h2"),ZF=a("a"),v1e=a("span"),F(O8.$$.fragment),Emr=l(),F1e=a("span"),Cmr=o("TFAutoModelForImageClassification"),PIe=l(),er=a("div"),F(V8.$$.fragment),wmr=l(),Wd=a("p"),Amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AQ=a("a"),ymr=o("from_pretrained()"),Lmr=o(" class method or the "),yQ=a("a"),xmr=o("from_config()"),$mr=o(` class
method.`),kmr=l(),X8=a("p"),Smr=o("This class cannot be instantiated directly using "),T1e=a("code"),Rmr=o("__init__()"),Bmr=o(" (throws an error)."),Pmr=l(),Lt=a("div"),F(z8.$$.fragment),Imr=l(),M1e=a("p"),qmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nmr=l(),Hd=a("p"),jmr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),Dmr=o("not"),Gmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),Omr=o("from_pretrained()"),Vmr=o(" to load the model weights."),Xmr=l(),F(eT.$$.fragment),zmr=l(),Lr=a("div"),F(Q8.$$.fragment),Qmr=l(),C1e=a("p"),Wmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hmr=l(),on=a("p"),Umr=o("The model class to instantiate is selected based on the "),w1e=a("code"),Jmr=o("model_type"),Ymr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),Kmr=o("pretrained_model_name_or_path"),Zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),egr=o("pretrained_model_name_or_path"),ogr=o(":"),rgr=l(),Ud=a("ul"),oT=a("li"),L1e=a("strong"),tgr=o("convnext"),agr=o(" \u2014 "),xQ=a("a"),ngr=o("TFConvNextForImageClassification"),sgr=o(" (ConvNext model)"),lgr=l(),rT=a("li"),x1e=a("strong"),igr=o("data2vec-vision"),dgr=o(" \u2014 "),$Q=a("a"),cgr=o("TFData2VecVisionForImageClassification"),fgr=o(" (Data2VecVision model)"),mgr=l(),tT=a("li"),$1e=a("strong"),ggr=o("vit"),hgr=o(" \u2014 "),kQ=a("a"),pgr=o("TFViTForImageClassification"),ugr=o(" (ViT model)"),_gr=l(),F(aT.$$.fragment),IIe=l(),Jd=a("h2"),nT=a("a"),k1e=a("span"),F(W8.$$.fragment),bgr=l(),S1e=a("span"),vgr=o("TFAutoModelForMaskedLM"),qIe=l(),or=a("div"),F(H8.$$.fragment),Fgr=l(),Yd=a("p"),Tgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SQ=a("a"),Mgr=o("from_pretrained()"),Egr=o(" class method or the "),RQ=a("a"),Cgr=o("from_config()"),wgr=o(` class
method.`),Agr=l(),U8=a("p"),ygr=o("This class cannot be instantiated directly using "),R1e=a("code"),Lgr=o("__init__()"),xgr=o(" (throws an error)."),$gr=l(),xt=a("div"),F(J8.$$.fragment),kgr=l(),B1e=a("p"),Sgr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rgr=l(),Kd=a("p"),Bgr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),Pgr=o("not"),Igr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=a("a"),qgr=o("from_pretrained()"),Ngr=o(" to load the model weights."),jgr=l(),F(sT.$$.fragment),Dgr=l(),xr=a("div"),F(Y8.$$.fragment),Ggr=l(),I1e=a("p"),Ogr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vgr=l(),rn=a("p"),Xgr=o("The model class to instantiate is selected based on the "),q1e=a("code"),zgr=o("model_type"),Qgr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),Wgr=o("pretrained_model_name_or_path"),Hgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(":"),Ygr=l(),ie=a("ul"),lT=a("li"),D1e=a("strong"),Kgr=o("albert"),Zgr=o(" \u2014 "),PQ=a("a"),ehr=o("TFAlbertForMaskedLM"),ohr=o(" (ALBERT model)"),rhr=l(),iT=a("li"),G1e=a("strong"),thr=o("bert"),ahr=o(" \u2014 "),IQ=a("a"),nhr=o("TFBertForMaskedLM"),shr=o(" (BERT model)"),lhr=l(),dT=a("li"),O1e=a("strong"),ihr=o("camembert"),dhr=o(" \u2014 "),qQ=a("a"),chr=o("TFCamembertForMaskedLM"),fhr=o(" (CamemBERT model)"),mhr=l(),cT=a("li"),V1e=a("strong"),ghr=o("convbert"),hhr=o(" \u2014 "),NQ=a("a"),phr=o("TFConvBertForMaskedLM"),uhr=o(" (ConvBERT model)"),_hr=l(),fT=a("li"),X1e=a("strong"),bhr=o("deberta"),vhr=o(" \u2014 "),jQ=a("a"),Fhr=o("TFDebertaForMaskedLM"),Thr=o(" (DeBERTa model)"),Mhr=l(),mT=a("li"),z1e=a("strong"),Ehr=o("deberta-v2"),Chr=o(" \u2014 "),DQ=a("a"),whr=o("TFDebertaV2ForMaskedLM"),Ahr=o(" (DeBERTa-v2 model)"),yhr=l(),gT=a("li"),Q1e=a("strong"),Lhr=o("distilbert"),xhr=o(" \u2014 "),GQ=a("a"),$hr=o("TFDistilBertForMaskedLM"),khr=o(" (DistilBERT model)"),Shr=l(),hT=a("li"),W1e=a("strong"),Rhr=o("electra"),Bhr=o(" \u2014 "),OQ=a("a"),Phr=o("TFElectraForMaskedLM"),Ihr=o(" (ELECTRA model)"),qhr=l(),pT=a("li"),H1e=a("strong"),Nhr=o("flaubert"),jhr=o(" \u2014 "),VQ=a("a"),Dhr=o("TFFlaubertWithLMHeadModel"),Ghr=o(" (FlauBERT model)"),Ohr=l(),uT=a("li"),U1e=a("strong"),Vhr=o("funnel"),Xhr=o(" \u2014 "),XQ=a("a"),zhr=o("TFFunnelForMaskedLM"),Qhr=o(" (Funnel Transformer model)"),Whr=l(),_T=a("li"),J1e=a("strong"),Hhr=o("layoutlm"),Uhr=o(" \u2014 "),zQ=a("a"),Jhr=o("TFLayoutLMForMaskedLM"),Yhr=o(" (LayoutLM model)"),Khr=l(),bT=a("li"),Y1e=a("strong"),Zhr=o("longformer"),epr=o(" \u2014 "),QQ=a("a"),opr=o("TFLongformerForMaskedLM"),rpr=o(" (Longformer model)"),tpr=l(),vT=a("li"),K1e=a("strong"),apr=o("mobilebert"),npr=o(" \u2014 "),WQ=a("a"),spr=o("TFMobileBertForMaskedLM"),lpr=o(" (MobileBERT model)"),ipr=l(),FT=a("li"),Z1e=a("strong"),dpr=o("mpnet"),cpr=o(" \u2014 "),HQ=a("a"),fpr=o("TFMPNetForMaskedLM"),mpr=o(" (MPNet model)"),gpr=l(),TT=a("li"),ebe=a("strong"),hpr=o("rembert"),ppr=o(" \u2014 "),UQ=a("a"),upr=o("TFRemBertForMaskedLM"),_pr=o(" (RemBERT model)"),bpr=l(),MT=a("li"),obe=a("strong"),vpr=o("roberta"),Fpr=o(" \u2014 "),JQ=a("a"),Tpr=o("TFRobertaForMaskedLM"),Mpr=o(" (RoBERTa model)"),Epr=l(),ET=a("li"),rbe=a("strong"),Cpr=o("roformer"),wpr=o(" \u2014 "),YQ=a("a"),Apr=o("TFRoFormerForMaskedLM"),ypr=o(" (RoFormer model)"),Lpr=l(),CT=a("li"),tbe=a("strong"),xpr=o("tapas"),$pr=o(" \u2014 "),KQ=a("a"),kpr=o("TFTapasForMaskedLM"),Spr=o(" (TAPAS model)"),Rpr=l(),wT=a("li"),abe=a("strong"),Bpr=o("xlm"),Ppr=o(" \u2014 "),ZQ=a("a"),Ipr=o("TFXLMWithLMHeadModel"),qpr=o(" (XLM model)"),Npr=l(),AT=a("li"),nbe=a("strong"),jpr=o("xlm-roberta"),Dpr=o(" \u2014 "),eW=a("a"),Gpr=o("TFXLMRobertaForMaskedLM"),Opr=o(" (XLM-RoBERTa model)"),Vpr=l(),F(yT.$$.fragment),NIe=l(),Zd=a("h2"),LT=a("a"),sbe=a("span"),F(K8.$$.fragment),Xpr=l(),lbe=a("span"),zpr=o("TFAutoModelForSeq2SeqLM"),jIe=l(),rr=a("div"),F(Z8.$$.fragment),Qpr=l(),ec=a("p"),Wpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oW=a("a"),Hpr=o("from_pretrained()"),Upr=o(" class method or the "),rW=a("a"),Jpr=o("from_config()"),Ypr=o(` class
method.`),Kpr=l(),ex=a("p"),Zpr=o("This class cannot be instantiated directly using "),ibe=a("code"),eur=o("__init__()"),our=o(" (throws an error)."),rur=l(),$t=a("div"),F(ox.$$.fragment),tur=l(),dbe=a("p"),aur=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nur=l(),oc=a("p"),sur=o(`Note:
Loading a model from its configuration file does `),cbe=a("strong"),lur=o("not"),iur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),dur=o("from_pretrained()"),cur=o(" to load the model weights."),fur=l(),F(xT.$$.fragment),mur=l(),$r=a("div"),F(rx.$$.fragment),gur=l(),fbe=a("p"),hur=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pur=l(),tn=a("p"),uur=o("The model class to instantiate is selected based on the "),mbe=a("code"),_ur=o("model_type"),bur=o(` property of the config object (either
passed as an argument or loaded from `),gbe=a("code"),vur=o("pretrained_model_name_or_path"),Fur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=a("code"),Tur=o("pretrained_model_name_or_path"),Mur=o(":"),Eur=l(),ye=a("ul"),$T=a("li"),pbe=a("strong"),Cur=o("bart"),wur=o(" \u2014 "),aW=a("a"),Aur=o("TFBartForConditionalGeneration"),yur=o(" (BART model)"),Lur=l(),kT=a("li"),ube=a("strong"),xur=o("blenderbot"),$ur=o(" \u2014 "),nW=a("a"),kur=o("TFBlenderbotForConditionalGeneration"),Sur=o(" (Blenderbot model)"),Rur=l(),ST=a("li"),_be=a("strong"),Bur=o("blenderbot-small"),Pur=o(" \u2014 "),sW=a("a"),Iur=o("TFBlenderbotSmallForConditionalGeneration"),qur=o(" (BlenderbotSmall model)"),Nur=l(),RT=a("li"),bbe=a("strong"),jur=o("encoder-decoder"),Dur=o(" \u2014 "),lW=a("a"),Gur=o("TFEncoderDecoderModel"),Our=o(" (Encoder decoder model)"),Vur=l(),BT=a("li"),vbe=a("strong"),Xur=o("led"),zur=o(" \u2014 "),iW=a("a"),Qur=o("TFLEDForConditionalGeneration"),Wur=o(" (LED model)"),Hur=l(),PT=a("li"),Fbe=a("strong"),Uur=o("marian"),Jur=o(" \u2014 "),dW=a("a"),Yur=o("TFMarianMTModel"),Kur=o(" (Marian model)"),Zur=l(),IT=a("li"),Tbe=a("strong"),e_r=o("mbart"),o_r=o(" \u2014 "),cW=a("a"),r_r=o("TFMBartForConditionalGeneration"),t_r=o(" (mBART model)"),a_r=l(),qT=a("li"),Mbe=a("strong"),n_r=o("mt5"),s_r=o(" \u2014 "),fW=a("a"),l_r=o("TFMT5ForConditionalGeneration"),i_r=o(" (mT5 model)"),d_r=l(),NT=a("li"),Ebe=a("strong"),c_r=o("pegasus"),f_r=o(" \u2014 "),mW=a("a"),m_r=o("TFPegasusForConditionalGeneration"),g_r=o(" (Pegasus model)"),h_r=l(),jT=a("li"),Cbe=a("strong"),p_r=o("t5"),u_r=o(" \u2014 "),gW=a("a"),__r=o("TFT5ForConditionalGeneration"),b_r=o(" (T5 model)"),v_r=l(),F(DT.$$.fragment),DIe=l(),rc=a("h2"),GT=a("a"),wbe=a("span"),F(tx.$$.fragment),F_r=l(),Abe=a("span"),T_r=o("TFAutoModelForSequenceClassification"),GIe=l(),tr=a("div"),F(ax.$$.fragment),M_r=l(),tc=a("p"),E_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hW=a("a"),C_r=o("from_pretrained()"),w_r=o(" class method or the "),pW=a("a"),A_r=o("from_config()"),y_r=o(` class
method.`),L_r=l(),nx=a("p"),x_r=o("This class cannot be instantiated directly using "),ybe=a("code"),$_r=o("__init__()"),k_r=o(" (throws an error)."),S_r=l(),kt=a("div"),F(sx.$$.fragment),R_r=l(),Lbe=a("p"),B_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P_r=l(),ac=a("p"),I_r=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),q_r=o("not"),N_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),j_r=o("from_pretrained()"),D_r=o(" to load the model weights."),G_r=l(),F(OT.$$.fragment),O_r=l(),kr=a("div"),F(lx.$$.fragment),V_r=l(),$be=a("p"),X_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z_r=l(),an=a("p"),Q_r=o("The model class to instantiate is selected based on the "),kbe=a("code"),W_r=o("model_type"),H_r=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),Y_r=o("pretrained_model_name_or_path"),K_r=o(":"),Z_r=l(),Z=a("ul"),VT=a("li"),Bbe=a("strong"),e6r=o("albert"),o6r=o(" \u2014 "),_W=a("a"),r6r=o("TFAlbertForSequenceClassification"),t6r=o(" (ALBERT model)"),a6r=l(),XT=a("li"),Pbe=a("strong"),n6r=o("bert"),s6r=o(" \u2014 "),bW=a("a"),l6r=o("TFBertForSequenceClassification"),i6r=o(" (BERT model)"),d6r=l(),zT=a("li"),Ibe=a("strong"),c6r=o("camembert"),f6r=o(" \u2014 "),vW=a("a"),m6r=o("TFCamembertForSequenceClassification"),g6r=o(" (CamemBERT model)"),h6r=l(),QT=a("li"),qbe=a("strong"),p6r=o("convbert"),u6r=o(" \u2014 "),FW=a("a"),_6r=o("TFConvBertForSequenceClassification"),b6r=o(" (ConvBERT model)"),v6r=l(),WT=a("li"),Nbe=a("strong"),F6r=o("ctrl"),T6r=o(" \u2014 "),TW=a("a"),M6r=o("TFCTRLForSequenceClassification"),E6r=o(" (CTRL model)"),C6r=l(),HT=a("li"),jbe=a("strong"),w6r=o("deberta"),A6r=o(" \u2014 "),MW=a("a"),y6r=o("TFDebertaForSequenceClassification"),L6r=o(" (DeBERTa model)"),x6r=l(),UT=a("li"),Dbe=a("strong"),$6r=o("deberta-v2"),k6r=o(" \u2014 "),EW=a("a"),S6r=o("TFDebertaV2ForSequenceClassification"),R6r=o(" (DeBERTa-v2 model)"),B6r=l(),JT=a("li"),Gbe=a("strong"),P6r=o("distilbert"),I6r=o(" \u2014 "),CW=a("a"),q6r=o("TFDistilBertForSequenceClassification"),N6r=o(" (DistilBERT model)"),j6r=l(),YT=a("li"),Obe=a("strong"),D6r=o("electra"),G6r=o(" \u2014 "),wW=a("a"),O6r=o("TFElectraForSequenceClassification"),V6r=o(" (ELECTRA model)"),X6r=l(),KT=a("li"),Vbe=a("strong"),z6r=o("flaubert"),Q6r=o(" \u2014 "),AW=a("a"),W6r=o("TFFlaubertForSequenceClassification"),H6r=o(" (FlauBERT model)"),U6r=l(),ZT=a("li"),Xbe=a("strong"),J6r=o("funnel"),Y6r=o(" \u2014 "),yW=a("a"),K6r=o("TFFunnelForSequenceClassification"),Z6r=o(" (Funnel Transformer model)"),e1r=l(),eM=a("li"),zbe=a("strong"),o1r=o("gpt2"),r1r=o(" \u2014 "),LW=a("a"),t1r=o("TFGPT2ForSequenceClassification"),a1r=o(" (OpenAI GPT-2 model)"),n1r=l(),oM=a("li"),Qbe=a("strong"),s1r=o("gptj"),l1r=o(" \u2014 "),xW=a("a"),i1r=o("TFGPTJForSequenceClassification"),d1r=o(" (GPT-J model)"),c1r=l(),rM=a("li"),Wbe=a("strong"),f1r=o("layoutlm"),m1r=o(" \u2014 "),$W=a("a"),g1r=o("TFLayoutLMForSequenceClassification"),h1r=o(" (LayoutLM model)"),p1r=l(),tM=a("li"),Hbe=a("strong"),u1r=o("longformer"),_1r=o(" \u2014 "),kW=a("a"),b1r=o("TFLongformerForSequenceClassification"),v1r=o(" (Longformer model)"),F1r=l(),aM=a("li"),Ube=a("strong"),T1r=o("mobilebert"),M1r=o(" \u2014 "),SW=a("a"),E1r=o("TFMobileBertForSequenceClassification"),C1r=o(" (MobileBERT model)"),w1r=l(),nM=a("li"),Jbe=a("strong"),A1r=o("mpnet"),y1r=o(" \u2014 "),RW=a("a"),L1r=o("TFMPNetForSequenceClassification"),x1r=o(" (MPNet model)"),$1r=l(),sM=a("li"),Ybe=a("strong"),k1r=o("openai-gpt"),S1r=o(" \u2014 "),BW=a("a"),R1r=o("TFOpenAIGPTForSequenceClassification"),B1r=o(" (OpenAI GPT model)"),P1r=l(),lM=a("li"),Kbe=a("strong"),I1r=o("rembert"),q1r=o(" \u2014 "),PW=a("a"),N1r=o("TFRemBertForSequenceClassification"),j1r=o(" (RemBERT model)"),D1r=l(),iM=a("li"),Zbe=a("strong"),G1r=o("roberta"),O1r=o(" \u2014 "),IW=a("a"),V1r=o("TFRobertaForSequenceClassification"),X1r=o(" (RoBERTa model)"),z1r=l(),dM=a("li"),e4e=a("strong"),Q1r=o("roformer"),W1r=o(" \u2014 "),qW=a("a"),H1r=o("TFRoFormerForSequenceClassification"),U1r=o(" (RoFormer model)"),J1r=l(),cM=a("li"),o4e=a("strong"),Y1r=o("tapas"),K1r=o(" \u2014 "),NW=a("a"),Z1r=o("TFTapasForSequenceClassification"),ebr=o(" (TAPAS model)"),obr=l(),fM=a("li"),r4e=a("strong"),rbr=o("transfo-xl"),tbr=o(" \u2014 "),jW=a("a"),abr=o("TFTransfoXLForSequenceClassification"),nbr=o(" (Transformer-XL model)"),sbr=l(),mM=a("li"),t4e=a("strong"),lbr=o("xlm"),ibr=o(" \u2014 "),DW=a("a"),dbr=o("TFXLMForSequenceClassification"),cbr=o(" (XLM model)"),fbr=l(),gM=a("li"),a4e=a("strong"),mbr=o("xlm-roberta"),gbr=o(" \u2014 "),GW=a("a"),hbr=o("TFXLMRobertaForSequenceClassification"),pbr=o(" (XLM-RoBERTa model)"),ubr=l(),hM=a("li"),n4e=a("strong"),_br=o("xlnet"),bbr=o(" \u2014 "),OW=a("a"),vbr=o("TFXLNetForSequenceClassification"),Fbr=o(" (XLNet model)"),Tbr=l(),F(pM.$$.fragment),OIe=l(),nc=a("h2"),uM=a("a"),s4e=a("span"),F(ix.$$.fragment),Mbr=l(),l4e=a("span"),Ebr=o("TFAutoModelForMultipleChoice"),VIe=l(),ar=a("div"),F(dx.$$.fragment),Cbr=l(),sc=a("p"),wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VW=a("a"),Abr=o("from_pretrained()"),ybr=o(" class method or the "),XW=a("a"),Lbr=o("from_config()"),xbr=o(` class
method.`),$br=l(),cx=a("p"),kbr=o("This class cannot be instantiated directly using "),i4e=a("code"),Sbr=o("__init__()"),Rbr=o(" (throws an error)."),Bbr=l(),St=a("div"),F(fx.$$.fragment),Pbr=l(),d4e=a("p"),Ibr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qbr=l(),lc=a("p"),Nbr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),jbr=o("not"),Dbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),Gbr=o("from_pretrained()"),Obr=o(" to load the model weights."),Vbr=l(),F(_M.$$.fragment),Xbr=l(),Sr=a("div"),F(mx.$$.fragment),zbr=l(),f4e=a("p"),Qbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wbr=l(),nn=a("p"),Hbr=o("The model class to instantiate is selected based on the "),m4e=a("code"),Ubr=o("model_type"),Jbr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),Zbr=o("pretrained_model_name_or_path"),e4r=o(":"),o4r=l(),pe=a("ul"),bM=a("li"),p4e=a("strong"),r4r=o("albert"),t4r=o(" \u2014 "),QW=a("a"),a4r=o("TFAlbertForMultipleChoice"),n4r=o(" (ALBERT model)"),s4r=l(),vM=a("li"),u4e=a("strong"),l4r=o("bert"),i4r=o(" \u2014 "),WW=a("a"),d4r=o("TFBertForMultipleChoice"),c4r=o(" (BERT model)"),f4r=l(),FM=a("li"),_4e=a("strong"),m4r=o("camembert"),g4r=o(" \u2014 "),HW=a("a"),h4r=o("TFCamembertForMultipleChoice"),p4r=o(" (CamemBERT model)"),u4r=l(),TM=a("li"),b4e=a("strong"),_4r=o("convbert"),b4r=o(" \u2014 "),UW=a("a"),v4r=o("TFConvBertForMultipleChoice"),F4r=o(" (ConvBERT model)"),T4r=l(),MM=a("li"),v4e=a("strong"),M4r=o("distilbert"),E4r=o(" \u2014 "),JW=a("a"),C4r=o("TFDistilBertForMultipleChoice"),w4r=o(" (DistilBERT model)"),A4r=l(),EM=a("li"),F4e=a("strong"),y4r=o("electra"),L4r=o(" \u2014 "),YW=a("a"),x4r=o("TFElectraForMultipleChoice"),$4r=o(" (ELECTRA model)"),k4r=l(),CM=a("li"),T4e=a("strong"),S4r=o("flaubert"),R4r=o(" \u2014 "),KW=a("a"),B4r=o("TFFlaubertForMultipleChoice"),P4r=o(" (FlauBERT model)"),I4r=l(),wM=a("li"),M4e=a("strong"),q4r=o("funnel"),N4r=o(" \u2014 "),ZW=a("a"),j4r=o("TFFunnelForMultipleChoice"),D4r=o(" (Funnel Transformer model)"),G4r=l(),AM=a("li"),E4e=a("strong"),O4r=o("longformer"),V4r=o(" \u2014 "),eH=a("a"),X4r=o("TFLongformerForMultipleChoice"),z4r=o(" (Longformer model)"),Q4r=l(),yM=a("li"),C4e=a("strong"),W4r=o("mobilebert"),H4r=o(" \u2014 "),oH=a("a"),U4r=o("TFMobileBertForMultipleChoice"),J4r=o(" (MobileBERT model)"),Y4r=l(),LM=a("li"),w4e=a("strong"),K4r=o("mpnet"),Z4r=o(" \u2014 "),rH=a("a"),e2r=o("TFMPNetForMultipleChoice"),o2r=o(" (MPNet model)"),r2r=l(),xM=a("li"),A4e=a("strong"),t2r=o("rembert"),a2r=o(" \u2014 "),tH=a("a"),n2r=o("TFRemBertForMultipleChoice"),s2r=o(" (RemBERT model)"),l2r=l(),$M=a("li"),y4e=a("strong"),i2r=o("roberta"),d2r=o(" \u2014 "),aH=a("a"),c2r=o("TFRobertaForMultipleChoice"),f2r=o(" (RoBERTa model)"),m2r=l(),kM=a("li"),L4e=a("strong"),g2r=o("roformer"),h2r=o(" \u2014 "),nH=a("a"),p2r=o("TFRoFormerForMultipleChoice"),u2r=o(" (RoFormer model)"),_2r=l(),SM=a("li"),x4e=a("strong"),b2r=o("xlm"),v2r=o(" \u2014 "),sH=a("a"),F2r=o("TFXLMForMultipleChoice"),T2r=o(" (XLM model)"),M2r=l(),RM=a("li"),$4e=a("strong"),E2r=o("xlm-roberta"),C2r=o(" \u2014 "),lH=a("a"),w2r=o("TFXLMRobertaForMultipleChoice"),A2r=o(" (XLM-RoBERTa model)"),y2r=l(),BM=a("li"),k4e=a("strong"),L2r=o("xlnet"),x2r=o(" \u2014 "),iH=a("a"),$2r=o("TFXLNetForMultipleChoice"),k2r=o(" (XLNet model)"),S2r=l(),F(PM.$$.fragment),XIe=l(),ic=a("h2"),IM=a("a"),S4e=a("span"),F(gx.$$.fragment),R2r=l(),R4e=a("span"),B2r=o("TFAutoModelForNextSentencePrediction"),zIe=l(),nr=a("div"),F(hx.$$.fragment),P2r=l(),dc=a("p"),I2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dH=a("a"),q2r=o("from_pretrained()"),N2r=o(" class method or the "),cH=a("a"),j2r=o("from_config()"),D2r=o(` class
method.`),G2r=l(),px=a("p"),O2r=o("This class cannot be instantiated directly using "),B4e=a("code"),V2r=o("__init__()"),X2r=o(" (throws an error)."),z2r=l(),Rt=a("div"),F(ux.$$.fragment),Q2r=l(),P4e=a("p"),W2r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),H2r=l(),cc=a("p"),U2r=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),J2r=o("not"),Y2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),K2r=o("from_pretrained()"),Z2r=o(" to load the model weights."),e5r=l(),F(qM.$$.fragment),o5r=l(),Rr=a("div"),F(_x.$$.fragment),r5r=l(),q4e=a("p"),t5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),a5r=l(),sn=a("p"),n5r=o("The model class to instantiate is selected based on the "),N4e=a("code"),s5r=o("model_type"),l5r=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),i5r=o("pretrained_model_name_or_path"),d5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),c5r=o("pretrained_model_name_or_path"),f5r=o(":"),m5r=l(),bx=a("ul"),NM=a("li"),G4e=a("strong"),g5r=o("bert"),h5r=o(" \u2014 "),mH=a("a"),p5r=o("TFBertForNextSentencePrediction"),u5r=o(" (BERT model)"),_5r=l(),jM=a("li"),O4e=a("strong"),b5r=o("mobilebert"),v5r=o(" \u2014 "),gH=a("a"),F5r=o("TFMobileBertForNextSentencePrediction"),T5r=o(" (MobileBERT model)"),M5r=l(),F(DM.$$.fragment),QIe=l(),fc=a("h2"),GM=a("a"),V4e=a("span"),F(vx.$$.fragment),E5r=l(),X4e=a("span"),C5r=o("TFAutoModelForTableQuestionAnswering"),WIe=l(),sr=a("div"),F(Fx.$$.fragment),w5r=l(),mc=a("p"),A5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hH=a("a"),y5r=o("from_pretrained()"),L5r=o(" class method or the "),pH=a("a"),x5r=o("from_config()"),$5r=o(` class
method.`),k5r=l(),Tx=a("p"),S5r=o("This class cannot be instantiated directly using "),z4e=a("code"),R5r=o("__init__()"),B5r=o(" (throws an error)."),P5r=l(),Bt=a("div"),F(Mx.$$.fragment),I5r=l(),Q4e=a("p"),q5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N5r=l(),gc=a("p"),j5r=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),D5r=o("not"),G5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),O5r=o("from_pretrained()"),V5r=o(" to load the model weights."),X5r=l(),F(OM.$$.fragment),z5r=l(),Br=a("div"),F(Ex.$$.fragment),Q5r=l(),H4e=a("p"),W5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),H5r=l(),ln=a("p"),U5r=o("The model class to instantiate is selected based on the "),U4e=a("code"),J5r=o("model_type"),Y5r=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(":"),rvr=l(),K4e=a("ul"),VM=a("li"),Z4e=a("strong"),tvr=o("tapas"),avr=o(" \u2014 "),_H=a("a"),nvr=o("TFTapasForQuestionAnswering"),svr=o(" (TAPAS model)"),lvr=l(),F(XM.$$.fragment),HIe=l(),hc=a("h2"),zM=a("a"),e2e=a("span"),F(Cx.$$.fragment),ivr=l(),o2e=a("span"),dvr=o("TFAutoModelForTokenClassification"),UIe=l(),lr=a("div"),F(wx.$$.fragment),cvr=l(),pc=a("p"),fvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bH=a("a"),mvr=o("from_pretrained()"),gvr=o(" class method or the "),vH=a("a"),hvr=o("from_config()"),pvr=o(` class
method.`),uvr=l(),Ax=a("p"),_vr=o("This class cannot be instantiated directly using "),r2e=a("code"),bvr=o("__init__()"),vvr=o(" (throws an error)."),Fvr=l(),Pt=a("div"),F(yx.$$.fragment),Tvr=l(),t2e=a("p"),Mvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Evr=l(),uc=a("p"),Cvr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),wvr=o("not"),Avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),yvr=o("from_pretrained()"),Lvr=o(" to load the model weights."),xvr=l(),F(QM.$$.fragment),$vr=l(),Pr=a("div"),F(Lx.$$.fragment),kvr=l(),n2e=a("p"),Svr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Rvr=l(),dn=a("p"),Bvr=o("The model class to instantiate is selected based on the "),s2e=a("code"),Pvr=o("model_type"),Ivr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),qvr=o("pretrained_model_name_or_path"),Nvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),jvr=o("pretrained_model_name_or_path"),Dvr=o(":"),Gvr=l(),de=a("ul"),WM=a("li"),d2e=a("strong"),Ovr=o("albert"),Vvr=o(" \u2014 "),TH=a("a"),Xvr=o("TFAlbertForTokenClassification"),zvr=o(" (ALBERT model)"),Qvr=l(),HM=a("li"),c2e=a("strong"),Wvr=o("bert"),Hvr=o(" \u2014 "),MH=a("a"),Uvr=o("TFBertForTokenClassification"),Jvr=o(" (BERT model)"),Yvr=l(),UM=a("li"),f2e=a("strong"),Kvr=o("camembert"),Zvr=o(" \u2014 "),EH=a("a"),eFr=o("TFCamembertForTokenClassification"),oFr=o(" (CamemBERT model)"),rFr=l(),JM=a("li"),m2e=a("strong"),tFr=o("convbert"),aFr=o(" \u2014 "),CH=a("a"),nFr=o("TFConvBertForTokenClassification"),sFr=o(" (ConvBERT model)"),lFr=l(),YM=a("li"),g2e=a("strong"),iFr=o("deberta"),dFr=o(" \u2014 "),wH=a("a"),cFr=o("TFDebertaForTokenClassification"),fFr=o(" (DeBERTa model)"),mFr=l(),KM=a("li"),h2e=a("strong"),gFr=o("deberta-v2"),hFr=o(" \u2014 "),AH=a("a"),pFr=o("TFDebertaV2ForTokenClassification"),uFr=o(" (DeBERTa-v2 model)"),_Fr=l(),ZM=a("li"),p2e=a("strong"),bFr=o("distilbert"),vFr=o(" \u2014 "),yH=a("a"),FFr=o("TFDistilBertForTokenClassification"),TFr=o(" (DistilBERT model)"),MFr=l(),eE=a("li"),u2e=a("strong"),EFr=o("electra"),CFr=o(" \u2014 "),LH=a("a"),wFr=o("TFElectraForTokenClassification"),AFr=o(" (ELECTRA model)"),yFr=l(),oE=a("li"),_2e=a("strong"),LFr=o("flaubert"),xFr=o(" \u2014 "),xH=a("a"),$Fr=o("TFFlaubertForTokenClassification"),kFr=o(" (FlauBERT model)"),SFr=l(),rE=a("li"),b2e=a("strong"),RFr=o("funnel"),BFr=o(" \u2014 "),$H=a("a"),PFr=o("TFFunnelForTokenClassification"),IFr=o(" (Funnel Transformer model)"),qFr=l(),tE=a("li"),v2e=a("strong"),NFr=o("layoutlm"),jFr=o(" \u2014 "),kH=a("a"),DFr=o("TFLayoutLMForTokenClassification"),GFr=o(" (LayoutLM model)"),OFr=l(),aE=a("li"),F2e=a("strong"),VFr=o("longformer"),XFr=o(" \u2014 "),SH=a("a"),zFr=o("TFLongformerForTokenClassification"),QFr=o(" (Longformer model)"),WFr=l(),nE=a("li"),T2e=a("strong"),HFr=o("mobilebert"),UFr=o(" \u2014 "),RH=a("a"),JFr=o("TFMobileBertForTokenClassification"),YFr=o(" (MobileBERT model)"),KFr=l(),sE=a("li"),M2e=a("strong"),ZFr=o("mpnet"),eTr=o(" \u2014 "),BH=a("a"),oTr=o("TFMPNetForTokenClassification"),rTr=o(" (MPNet model)"),tTr=l(),lE=a("li"),E2e=a("strong"),aTr=o("rembert"),nTr=o(" \u2014 "),PH=a("a"),sTr=o("TFRemBertForTokenClassification"),lTr=o(" (RemBERT model)"),iTr=l(),iE=a("li"),C2e=a("strong"),dTr=o("roberta"),cTr=o(" \u2014 "),IH=a("a"),fTr=o("TFRobertaForTokenClassification"),mTr=o(" (RoBERTa model)"),gTr=l(),dE=a("li"),w2e=a("strong"),hTr=o("roformer"),pTr=o(" \u2014 "),qH=a("a"),uTr=o("TFRoFormerForTokenClassification"),_Tr=o(" (RoFormer model)"),bTr=l(),cE=a("li"),A2e=a("strong"),vTr=o("xlm"),FTr=o(" \u2014 "),NH=a("a"),TTr=o("TFXLMForTokenClassification"),MTr=o(" (XLM model)"),ETr=l(),fE=a("li"),y2e=a("strong"),CTr=o("xlm-roberta"),wTr=o(" \u2014 "),jH=a("a"),ATr=o("TFXLMRobertaForTokenClassification"),yTr=o(" (XLM-RoBERTa model)"),LTr=l(),mE=a("li"),L2e=a("strong"),xTr=o("xlnet"),$Tr=o(" \u2014 "),DH=a("a"),kTr=o("TFXLNetForTokenClassification"),STr=o(" (XLNet model)"),RTr=l(),F(gE.$$.fragment),JIe=l(),_c=a("h2"),hE=a("a"),x2e=a("span"),F(xx.$$.fragment),BTr=l(),$2e=a("span"),PTr=o("TFAutoModelForQuestionAnswering"),YIe=l(),ir=a("div"),F($x.$$.fragment),ITr=l(),bc=a("p"),qTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GH=a("a"),NTr=o("from_pretrained()"),jTr=o(" class method or the "),OH=a("a"),DTr=o("from_config()"),GTr=o(` class
method.`),OTr=l(),kx=a("p"),VTr=o("This class cannot be instantiated directly using "),k2e=a("code"),XTr=o("__init__()"),zTr=o(" (throws an error)."),QTr=l(),It=a("div"),F(Sx.$$.fragment),WTr=l(),S2e=a("p"),HTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UTr=l(),vc=a("p"),JTr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),YTr=o("not"),KTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),ZTr=o("from_pretrained()"),eMr=o(" to load the model weights."),oMr=l(),F(pE.$$.fragment),rMr=l(),Ir=a("div"),F(Rx.$$.fragment),tMr=l(),B2e=a("p"),aMr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nMr=l(),cn=a("p"),sMr=o("The model class to instantiate is selected based on the "),P2e=a("code"),lMr=o("model_type"),iMr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),dMr=o("pretrained_model_name_or_path"),cMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),fMr=o("pretrained_model_name_or_path"),mMr=o(":"),gMr=l(),ce=a("ul"),uE=a("li"),N2e=a("strong"),hMr=o("albert"),pMr=o(" \u2014 "),XH=a("a"),uMr=o("TFAlbertForQuestionAnswering"),_Mr=o(" (ALBERT model)"),bMr=l(),_E=a("li"),j2e=a("strong"),vMr=o("bert"),FMr=o(" \u2014 "),zH=a("a"),TMr=o("TFBertForQuestionAnswering"),MMr=o(" (BERT model)"),EMr=l(),bE=a("li"),D2e=a("strong"),CMr=o("camembert"),wMr=o(" \u2014 "),QH=a("a"),AMr=o("TFCamembertForQuestionAnswering"),yMr=o(" (CamemBERT model)"),LMr=l(),vE=a("li"),G2e=a("strong"),xMr=o("convbert"),$Mr=o(" \u2014 "),WH=a("a"),kMr=o("TFConvBertForQuestionAnswering"),SMr=o(" (ConvBERT model)"),RMr=l(),FE=a("li"),O2e=a("strong"),BMr=o("deberta"),PMr=o(" \u2014 "),HH=a("a"),IMr=o("TFDebertaForQuestionAnswering"),qMr=o(" (DeBERTa model)"),NMr=l(),TE=a("li"),V2e=a("strong"),jMr=o("deberta-v2"),DMr=o(" \u2014 "),UH=a("a"),GMr=o("TFDebertaV2ForQuestionAnswering"),OMr=o(" (DeBERTa-v2 model)"),VMr=l(),ME=a("li"),X2e=a("strong"),XMr=o("distilbert"),zMr=o(" \u2014 "),JH=a("a"),QMr=o("TFDistilBertForQuestionAnswering"),WMr=o(" (DistilBERT model)"),HMr=l(),EE=a("li"),z2e=a("strong"),UMr=o("electra"),JMr=o(" \u2014 "),YH=a("a"),YMr=o("TFElectraForQuestionAnswering"),KMr=o(" (ELECTRA model)"),ZMr=l(),CE=a("li"),Q2e=a("strong"),eEr=o("flaubert"),oEr=o(" \u2014 "),KH=a("a"),rEr=o("TFFlaubertForQuestionAnsweringSimple"),tEr=o(" (FlauBERT model)"),aEr=l(),wE=a("li"),W2e=a("strong"),nEr=o("funnel"),sEr=o(" \u2014 "),ZH=a("a"),lEr=o("TFFunnelForQuestionAnswering"),iEr=o(" (Funnel Transformer model)"),dEr=l(),AE=a("li"),H2e=a("strong"),cEr=o("gptj"),fEr=o(" \u2014 "),eU=a("a"),mEr=o("TFGPTJForQuestionAnswering"),gEr=o(" (GPT-J model)"),hEr=l(),yE=a("li"),U2e=a("strong"),pEr=o("longformer"),uEr=o(" \u2014 "),oU=a("a"),_Er=o("TFLongformerForQuestionAnswering"),bEr=o(" (Longformer model)"),vEr=l(),LE=a("li"),J2e=a("strong"),FEr=o("mobilebert"),TEr=o(" \u2014 "),rU=a("a"),MEr=o("TFMobileBertForQuestionAnswering"),EEr=o(" (MobileBERT model)"),CEr=l(),xE=a("li"),Y2e=a("strong"),wEr=o("mpnet"),AEr=o(" \u2014 "),tU=a("a"),yEr=o("TFMPNetForQuestionAnswering"),LEr=o(" (MPNet model)"),xEr=l(),$E=a("li"),K2e=a("strong"),$Er=o("rembert"),kEr=o(" \u2014 "),aU=a("a"),SEr=o("TFRemBertForQuestionAnswering"),REr=o(" (RemBERT model)"),BEr=l(),kE=a("li"),Z2e=a("strong"),PEr=o("roberta"),IEr=o(" \u2014 "),nU=a("a"),qEr=o("TFRobertaForQuestionAnswering"),NEr=o(" (RoBERTa model)"),jEr=l(),SE=a("li"),e5e=a("strong"),DEr=o("roformer"),GEr=o(" \u2014 "),sU=a("a"),OEr=o("TFRoFormerForQuestionAnswering"),VEr=o(" (RoFormer model)"),XEr=l(),RE=a("li"),o5e=a("strong"),zEr=o("xlm"),QEr=o(" \u2014 "),lU=a("a"),WEr=o("TFXLMForQuestionAnsweringSimple"),HEr=o(" (XLM model)"),UEr=l(),BE=a("li"),r5e=a("strong"),JEr=o("xlm-roberta"),YEr=o(" \u2014 "),iU=a("a"),KEr=o("TFXLMRobertaForQuestionAnswering"),ZEr=o(" (XLM-RoBERTa model)"),eCr=l(),PE=a("li"),t5e=a("strong"),oCr=o("xlnet"),rCr=o(" \u2014 "),dU=a("a"),tCr=o("TFXLNetForQuestionAnsweringSimple"),aCr=o(" (XLNet model)"),nCr=l(),F(IE.$$.fragment),KIe=l(),Fc=a("h2"),qE=a("a"),a5e=a("span"),F(Bx.$$.fragment),sCr=l(),n5e=a("span"),lCr=o("TFAutoModelForVision2Seq"),ZIe=l(),dr=a("div"),F(Px.$$.fragment),iCr=l(),Tc=a("p"),dCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cU=a("a"),cCr=o("from_pretrained()"),fCr=o(" class method or the "),fU=a("a"),mCr=o("from_config()"),gCr=o(` class
method.`),hCr=l(),Ix=a("p"),pCr=o("This class cannot be instantiated directly using "),s5e=a("code"),uCr=o("__init__()"),_Cr=o(" (throws an error)."),bCr=l(),qt=a("div"),F(qx.$$.fragment),vCr=l(),l5e=a("p"),FCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TCr=l(),Mc=a("p"),MCr=o(`Note:
Loading a model from its configuration file does `),i5e=a("strong"),ECr=o("not"),CCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),wCr=o("from_pretrained()"),ACr=o(" to load the model weights."),yCr=l(),F(NE.$$.fragment),LCr=l(),qr=a("div"),F(Nx.$$.fragment),xCr=l(),d5e=a("p"),$Cr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kCr=l(),fn=a("p"),SCr=o("The model class to instantiate is selected based on the "),c5e=a("code"),RCr=o("model_type"),BCr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),PCr=o("pretrained_model_name_or_path"),ICr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),qCr=o("pretrained_model_name_or_path"),NCr=o(":"),jCr=l(),g5e=a("ul"),jE=a("li"),h5e=a("strong"),DCr=o("vision-encoder-decoder"),GCr=o(" \u2014 "),gU=a("a"),OCr=o("TFVisionEncoderDecoderModel"),VCr=o(" (Vision Encoder decoder model)"),XCr=l(),F(DE.$$.fragment),eqe=l(),Ec=a("h2"),GE=a("a"),p5e=a("span"),F(jx.$$.fragment),zCr=l(),u5e=a("span"),QCr=o("TFAutoModelForSpeechSeq2Seq"),oqe=l(),cr=a("div"),F(Dx.$$.fragment),WCr=l(),Cc=a("p"),HCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hU=a("a"),UCr=o("from_pretrained()"),JCr=o(" class method or the "),pU=a("a"),YCr=o("from_config()"),KCr=o(` class
method.`),ZCr=l(),Gx=a("p"),e3r=o("This class cannot be instantiated directly using "),_5e=a("code"),o3r=o("__init__()"),r3r=o(" (throws an error)."),t3r=l(),Nt=a("div"),F(Ox.$$.fragment),a3r=l(),b5e=a("p"),n3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),s3r=l(),wc=a("p"),l3r=o(`Note:
Loading a model from its configuration file does `),v5e=a("strong"),i3r=o("not"),d3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),c3r=o("from_pretrained()"),f3r=o(" to load the model weights."),m3r=l(),F(OE.$$.fragment),g3r=l(),Nr=a("div"),F(Vx.$$.fragment),h3r=l(),F5e=a("p"),p3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),u3r=l(),mn=a("p"),_3r=o("The model class to instantiate is selected based on the "),T5e=a("code"),b3r=o("model_type"),v3r=o(` property of the config object (either
passed as an argument or loaded from `),M5e=a("code"),F3r=o("pretrained_model_name_or_path"),T3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(":"),C3r=l(),C5e=a("ul"),VE=a("li"),w5e=a("strong"),w3r=o("speech_to_text"),A3r=o(" \u2014 "),_U=a("a"),y3r=o("TFSpeech2TextForConditionalGeneration"),L3r=o(" (Speech2Text model)"),x3r=l(),F(XE.$$.fragment),rqe=l(),Ac=a("h2"),zE=a("a"),A5e=a("span"),F(Xx.$$.fragment),$3r=l(),y5e=a("span"),k3r=o("FlaxAutoModel"),tqe=l(),fr=a("div"),F(zx.$$.fragment),S3r=l(),yc=a("p"),R3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bU=a("a"),B3r=o("from_pretrained()"),P3r=o(" class method or the "),vU=a("a"),I3r=o("from_config()"),q3r=o(` class
method.`),N3r=l(),Qx=a("p"),j3r=o("This class cannot be instantiated directly using "),L5e=a("code"),D3r=o("__init__()"),G3r=o(" (throws an error)."),O3r=l(),jt=a("div"),F(Wx.$$.fragment),V3r=l(),x5e=a("p"),X3r=o("Instantiates one of the base model classes of the library from a configuration."),z3r=l(),Lc=a("p"),Q3r=o(`Note:
Loading a model from its configuration file does `),$5e=a("strong"),W3r=o("not"),H3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),U3r=o("from_pretrained()"),J3r=o(" to load the model weights."),Y3r=l(),F(QE.$$.fragment),K3r=l(),jr=a("div"),F(Hx.$$.fragment),Z3r=l(),k5e=a("p"),ewr=o("Instantiate one of the base model classes of the library from a pretrained model."),owr=l(),gn=a("p"),rwr=o("The model class to instantiate is selected based on the "),S5e=a("code"),twr=o("model_type"),awr=o(` property of the config object (either
passed as an argument or loaded from `),R5e=a("code"),nwr=o("pretrained_model_name_or_path"),swr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(":"),dwr=l(),re=a("ul"),WE=a("li"),P5e=a("strong"),cwr=o("albert"),fwr=o(" \u2014 "),TU=a("a"),mwr=o("FlaxAlbertModel"),gwr=o(" (ALBERT model)"),hwr=l(),HE=a("li"),I5e=a("strong"),pwr=o("bart"),uwr=o(" \u2014 "),MU=a("a"),_wr=o("FlaxBartModel"),bwr=o(" (BART model)"),vwr=l(),UE=a("li"),q5e=a("strong"),Fwr=o("beit"),Twr=o(" \u2014 "),EU=a("a"),Mwr=o("FlaxBeitModel"),Ewr=o(" (BEiT model)"),Cwr=l(),JE=a("li"),N5e=a("strong"),wwr=o("bert"),Awr=o(" \u2014 "),CU=a("a"),ywr=o("FlaxBertModel"),Lwr=o(" (BERT model)"),xwr=l(),YE=a("li"),j5e=a("strong"),$wr=o("big_bird"),kwr=o(" \u2014 "),wU=a("a"),Swr=o("FlaxBigBirdModel"),Rwr=o(" (BigBird model)"),Bwr=l(),KE=a("li"),D5e=a("strong"),Pwr=o("blenderbot"),Iwr=o(" \u2014 "),AU=a("a"),qwr=o("FlaxBlenderbotModel"),Nwr=o(" (Blenderbot model)"),jwr=l(),ZE=a("li"),G5e=a("strong"),Dwr=o("blenderbot-small"),Gwr=o(" \u2014 "),yU=a("a"),Owr=o("FlaxBlenderbotSmallModel"),Vwr=o(" (BlenderbotSmall model)"),Xwr=l(),eC=a("li"),O5e=a("strong"),zwr=o("clip"),Qwr=o(" \u2014 "),LU=a("a"),Wwr=o("FlaxCLIPModel"),Hwr=o(" (CLIP model)"),Uwr=l(),oC=a("li"),V5e=a("strong"),Jwr=o("distilbert"),Ywr=o(" \u2014 "),xU=a("a"),Kwr=o("FlaxDistilBertModel"),Zwr=o(" (DistilBERT model)"),eAr=l(),rC=a("li"),X5e=a("strong"),oAr=o("electra"),rAr=o(" \u2014 "),$U=a("a"),tAr=o("FlaxElectraModel"),aAr=o(" (ELECTRA model)"),nAr=l(),tC=a("li"),z5e=a("strong"),sAr=o("gpt2"),lAr=o(" \u2014 "),kU=a("a"),iAr=o("FlaxGPT2Model"),dAr=o(" (OpenAI GPT-2 model)"),cAr=l(),aC=a("li"),Q5e=a("strong"),fAr=o("gpt_neo"),mAr=o(" \u2014 "),SU=a("a"),gAr=o("FlaxGPTNeoModel"),hAr=o(" (GPT Neo model)"),pAr=l(),nC=a("li"),W5e=a("strong"),uAr=o("gptj"),_Ar=o(" \u2014 "),RU=a("a"),bAr=o("FlaxGPTJModel"),vAr=o(" (GPT-J model)"),FAr=l(),sC=a("li"),H5e=a("strong"),TAr=o("marian"),MAr=o(" \u2014 "),BU=a("a"),EAr=o("FlaxMarianModel"),CAr=o(" (Marian model)"),wAr=l(),lC=a("li"),U5e=a("strong"),AAr=o("mbart"),yAr=o(" \u2014 "),PU=a("a"),LAr=o("FlaxMBartModel"),xAr=o(" (mBART model)"),$Ar=l(),iC=a("li"),J5e=a("strong"),kAr=o("mt5"),SAr=o(" \u2014 "),IU=a("a"),RAr=o("FlaxMT5Model"),BAr=o(" (mT5 model)"),PAr=l(),dC=a("li"),Y5e=a("strong"),IAr=o("pegasus"),qAr=o(" \u2014 "),qU=a("a"),NAr=o("FlaxPegasusModel"),jAr=o(" (Pegasus model)"),DAr=l(),cC=a("li"),K5e=a("strong"),GAr=o("roberta"),OAr=o(" \u2014 "),NU=a("a"),VAr=o("FlaxRobertaModel"),XAr=o(" (RoBERTa model)"),zAr=l(),fC=a("li"),Z5e=a("strong"),QAr=o("roformer"),WAr=o(" \u2014 "),jU=a("a"),HAr=o("FlaxRoFormerModel"),UAr=o(" (RoFormer model)"),JAr=l(),mC=a("li"),eve=a("strong"),YAr=o("t5"),KAr=o(" \u2014 "),DU=a("a"),ZAr=o("FlaxT5Model"),e0r=o(" (T5 model)"),o0r=l(),gC=a("li"),ove=a("strong"),r0r=o("vision-text-dual-encoder"),t0r=o(" \u2014 "),GU=a("a"),a0r=o("FlaxVisionTextDualEncoderModel"),n0r=o(" (VisionTextDualEncoder model)"),s0r=l(),hC=a("li"),rve=a("strong"),l0r=o("vit"),i0r=o(" \u2014 "),OU=a("a"),d0r=o("FlaxViTModel"),c0r=o(" (ViT model)"),f0r=l(),pC=a("li"),tve=a("strong"),m0r=o("wav2vec2"),g0r=o(" \u2014 "),VU=a("a"),h0r=o("FlaxWav2Vec2Model"),p0r=o(" (Wav2Vec2 model)"),u0r=l(),uC=a("li"),ave=a("strong"),_0r=o("xglm"),b0r=o(" \u2014 "),XU=a("a"),v0r=o("FlaxXGLMModel"),F0r=o(" (XGLM model)"),T0r=l(),_C=a("li"),nve=a("strong"),M0r=o("xlm-roberta"),E0r=o(" \u2014 "),zU=a("a"),C0r=o("FlaxXLMRobertaModel"),w0r=o(" (XLM-RoBERTa model)"),A0r=l(),F(bC.$$.fragment),aqe=l(),xc=a("h2"),vC=a("a"),sve=a("span"),F(Ux.$$.fragment),y0r=l(),lve=a("span"),L0r=o("FlaxAutoModelForCausalLM"),nqe=l(),mr=a("div"),F(Jx.$$.fragment),x0r=l(),$c=a("p"),$0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QU=a("a"),k0r=o("from_pretrained()"),S0r=o(" class method or the "),WU=a("a"),R0r=o("from_config()"),B0r=o(` class
method.`),P0r=l(),Yx=a("p"),I0r=o("This class cannot be instantiated directly using "),ive=a("code"),q0r=o("__init__()"),N0r=o(" (throws an error)."),j0r=l(),Dt=a("div"),F(Kx.$$.fragment),D0r=l(),dve=a("p"),G0r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),O0r=l(),kc=a("p"),V0r=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),X0r=o("not"),z0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=a("a"),Q0r=o("from_pretrained()"),W0r=o(" to load the model weights."),H0r=l(),F(FC.$$.fragment),U0r=l(),Dr=a("div"),F(Zx.$$.fragment),J0r=l(),fve=a("p"),Y0r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),K0r=l(),hn=a("p"),Z0r=o("The model class to instantiate is selected based on the "),mve=a("code"),eyr=o("model_type"),oyr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),ryr=o("pretrained_model_name_or_path"),tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(":"),syr=l(),ke=a("ul"),TC=a("li"),pve=a("strong"),lyr=o("bart"),iyr=o(" \u2014 "),UU=a("a"),dyr=o("FlaxBartForCausalLM"),cyr=o(" (BART model)"),fyr=l(),MC=a("li"),uve=a("strong"),myr=o("bert"),gyr=o(" \u2014 "),JU=a("a"),hyr=o("FlaxBertForCausalLM"),pyr=o(" (BERT model)"),uyr=l(),EC=a("li"),_ve=a("strong"),_yr=o("big_bird"),byr=o(" \u2014 "),YU=a("a"),vyr=o("FlaxBigBirdForCausalLM"),Fyr=o(" (BigBird model)"),Tyr=l(),CC=a("li"),bve=a("strong"),Myr=o("electra"),Eyr=o(" \u2014 "),KU=a("a"),Cyr=o("FlaxElectraForCausalLM"),wyr=o(" (ELECTRA model)"),Ayr=l(),wC=a("li"),vve=a("strong"),yyr=o("gpt2"),Lyr=o(" \u2014 "),ZU=a("a"),xyr=o("FlaxGPT2LMHeadModel"),$yr=o(" (OpenAI GPT-2 model)"),kyr=l(),AC=a("li"),Fve=a("strong"),Syr=o("gpt_neo"),Ryr=o(" \u2014 "),eJ=a("a"),Byr=o("FlaxGPTNeoForCausalLM"),Pyr=o(" (GPT Neo model)"),Iyr=l(),yC=a("li"),Tve=a("strong"),qyr=o("gptj"),Nyr=o(" \u2014 "),oJ=a("a"),jyr=o("FlaxGPTJForCausalLM"),Dyr=o(" (GPT-J model)"),Gyr=l(),LC=a("li"),Mve=a("strong"),Oyr=o("roberta"),Vyr=o(" \u2014 "),rJ=a("a"),Xyr=o("FlaxRobertaForCausalLM"),zyr=o(" (RoBERTa model)"),Qyr=l(),xC=a("li"),Eve=a("strong"),Wyr=o("xglm"),Hyr=o(" \u2014 "),tJ=a("a"),Uyr=o("FlaxXGLMForCausalLM"),Jyr=o(" (XGLM model)"),Yyr=l(),F($C.$$.fragment),sqe=l(),Sc=a("h2"),kC=a("a"),Cve=a("span"),F(e7.$$.fragment),Kyr=l(),wve=a("span"),Zyr=o("FlaxAutoModelForPreTraining"),lqe=l(),gr=a("div"),F(o7.$$.fragment),eLr=l(),Rc=a("p"),oLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aJ=a("a"),rLr=o("from_pretrained()"),tLr=o(" class method or the "),nJ=a("a"),aLr=o("from_config()"),nLr=o(` class
method.`),sLr=l(),r7=a("p"),lLr=o("This class cannot be instantiated directly using "),Ave=a("code"),iLr=o("__init__()"),dLr=o(" (throws an error)."),cLr=l(),Gt=a("div"),F(t7.$$.fragment),fLr=l(),yve=a("p"),mLr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gLr=l(),Bc=a("p"),hLr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),pLr=o("not"),uLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),_Lr=o("from_pretrained()"),bLr=o(" to load the model weights."),vLr=l(),F(SC.$$.fragment),FLr=l(),Gr=a("div"),F(a7.$$.fragment),TLr=l(),xve=a("p"),MLr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ELr=l(),pn=a("p"),CLr=o("The model class to instantiate is selected based on the "),$ve=a("code"),wLr=o("model_type"),ALr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),yLr=o("pretrained_model_name_or_path"),LLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),xLr=o("pretrained_model_name_or_path"),$Lr=o(":"),kLr=l(),Me=a("ul"),RC=a("li"),Rve=a("strong"),SLr=o("albert"),RLr=o(" \u2014 "),lJ=a("a"),BLr=o("FlaxAlbertForPreTraining"),PLr=o(" (ALBERT model)"),ILr=l(),BC=a("li"),Bve=a("strong"),qLr=o("bart"),NLr=o(" \u2014 "),iJ=a("a"),jLr=o("FlaxBartForConditionalGeneration"),DLr=o(" (BART model)"),GLr=l(),PC=a("li"),Pve=a("strong"),OLr=o("bert"),VLr=o(" \u2014 "),dJ=a("a"),XLr=o("FlaxBertForPreTraining"),zLr=o(" (BERT model)"),QLr=l(),IC=a("li"),Ive=a("strong"),WLr=o("big_bird"),HLr=o(" \u2014 "),cJ=a("a"),ULr=o("FlaxBigBirdForPreTraining"),JLr=o(" (BigBird model)"),YLr=l(),qC=a("li"),qve=a("strong"),KLr=o("electra"),ZLr=o(" \u2014 "),fJ=a("a"),e8r=o("FlaxElectraForPreTraining"),o8r=o(" (ELECTRA model)"),r8r=l(),NC=a("li"),Nve=a("strong"),t8r=o("mbart"),a8r=o(" \u2014 "),mJ=a("a"),n8r=o("FlaxMBartForConditionalGeneration"),s8r=o(" (mBART model)"),l8r=l(),jC=a("li"),jve=a("strong"),i8r=o("mt5"),d8r=o(" \u2014 "),gJ=a("a"),c8r=o("FlaxMT5ForConditionalGeneration"),f8r=o(" (mT5 model)"),m8r=l(),DC=a("li"),Dve=a("strong"),g8r=o("roberta"),h8r=o(" \u2014 "),hJ=a("a"),p8r=o("FlaxRobertaForMaskedLM"),u8r=o(" (RoBERTa model)"),_8r=l(),GC=a("li"),Gve=a("strong"),b8r=o("roformer"),v8r=o(" \u2014 "),pJ=a("a"),F8r=o("FlaxRoFormerForMaskedLM"),T8r=o(" (RoFormer model)"),M8r=l(),OC=a("li"),Ove=a("strong"),E8r=o("t5"),C8r=o(" \u2014 "),uJ=a("a"),w8r=o("FlaxT5ForConditionalGeneration"),A8r=o(" (T5 model)"),y8r=l(),VC=a("li"),Vve=a("strong"),L8r=o("wav2vec2"),x8r=o(" \u2014 "),_J=a("a"),$8r=o("FlaxWav2Vec2ForPreTraining"),k8r=o(" (Wav2Vec2 model)"),S8r=l(),XC=a("li"),Xve=a("strong"),R8r=o("xlm-roberta"),B8r=o(" \u2014 "),bJ=a("a"),P8r=o("FlaxXLMRobertaForMaskedLM"),I8r=o(" (XLM-RoBERTa model)"),q8r=l(),F(zC.$$.fragment),iqe=l(),Pc=a("h2"),QC=a("a"),zve=a("span"),F(n7.$$.fragment),N8r=l(),Qve=a("span"),j8r=o("FlaxAutoModelForMaskedLM"),dqe=l(),hr=a("div"),F(s7.$$.fragment),D8r=l(),Ic=a("p"),G8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vJ=a("a"),O8r=o("from_pretrained()"),V8r=o(" class method or the "),FJ=a("a"),X8r=o("from_config()"),z8r=o(` class
method.`),Q8r=l(),l7=a("p"),W8r=o("This class cannot be instantiated directly using "),Wve=a("code"),H8r=o("__init__()"),U8r=o(" (throws an error)."),J8r=l(),Ot=a("div"),F(i7.$$.fragment),Y8r=l(),Hve=a("p"),K8r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Z8r=l(),qc=a("p"),exr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),oxr=o("not"),rxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),txr=o("from_pretrained()"),axr=o(" to load the model weights."),nxr=l(),F(WC.$$.fragment),sxr=l(),Or=a("div"),F(d7.$$.fragment),lxr=l(),Jve=a("p"),ixr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dxr=l(),un=a("p"),cxr=o("The model class to instantiate is selected based on the "),Yve=a("code"),fxr=o("model_type"),mxr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),pxr=o("pretrained_model_name_or_path"),uxr=o(":"),_xr=l(),Le=a("ul"),HC=a("li"),eFe=a("strong"),bxr=o("albert"),vxr=o(" \u2014 "),MJ=a("a"),Fxr=o("FlaxAlbertForMaskedLM"),Txr=o(" (ALBERT model)"),Mxr=l(),UC=a("li"),oFe=a("strong"),Exr=o("bart"),Cxr=o(" \u2014 "),EJ=a("a"),wxr=o("FlaxBartForConditionalGeneration"),Axr=o(" (BART model)"),yxr=l(),JC=a("li"),rFe=a("strong"),Lxr=o("bert"),xxr=o(" \u2014 "),CJ=a("a"),$xr=o("FlaxBertForMaskedLM"),kxr=o(" (BERT model)"),Sxr=l(),YC=a("li"),tFe=a("strong"),Rxr=o("big_bird"),Bxr=o(" \u2014 "),wJ=a("a"),Pxr=o("FlaxBigBirdForMaskedLM"),Ixr=o(" (BigBird model)"),qxr=l(),KC=a("li"),aFe=a("strong"),Nxr=o("distilbert"),jxr=o(" \u2014 "),AJ=a("a"),Dxr=o("FlaxDistilBertForMaskedLM"),Gxr=o(" (DistilBERT model)"),Oxr=l(),ZC=a("li"),nFe=a("strong"),Vxr=o("electra"),Xxr=o(" \u2014 "),yJ=a("a"),zxr=o("FlaxElectraForMaskedLM"),Qxr=o(" (ELECTRA model)"),Wxr=l(),e3=a("li"),sFe=a("strong"),Hxr=o("mbart"),Uxr=o(" \u2014 "),LJ=a("a"),Jxr=o("FlaxMBartForConditionalGeneration"),Yxr=o(" (mBART model)"),Kxr=l(),o3=a("li"),lFe=a("strong"),Zxr=o("roberta"),e7r=o(" \u2014 "),xJ=a("a"),o7r=o("FlaxRobertaForMaskedLM"),r7r=o(" (RoBERTa model)"),t7r=l(),r3=a("li"),iFe=a("strong"),a7r=o("roformer"),n7r=o(" \u2014 "),$J=a("a"),s7r=o("FlaxRoFormerForMaskedLM"),l7r=o(" (RoFormer model)"),i7r=l(),t3=a("li"),dFe=a("strong"),d7r=o("xlm-roberta"),c7r=o(" \u2014 "),kJ=a("a"),f7r=o("FlaxXLMRobertaForMaskedLM"),m7r=o(" (XLM-RoBERTa model)"),g7r=l(),F(a3.$$.fragment),cqe=l(),Nc=a("h2"),n3=a("a"),cFe=a("span"),F(c7.$$.fragment),h7r=l(),fFe=a("span"),p7r=o("FlaxAutoModelForSeq2SeqLM"),fqe=l(),pr=a("div"),F(f7.$$.fragment),u7r=l(),jc=a("p"),_7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SJ=a("a"),b7r=o("from_pretrained()"),v7r=o(" class method or the "),RJ=a("a"),F7r=o("from_config()"),T7r=o(` class
method.`),M7r=l(),m7=a("p"),E7r=o("This class cannot be instantiated directly using "),mFe=a("code"),C7r=o("__init__()"),w7r=o(" (throws an error)."),A7r=l(),Vt=a("div"),F(g7.$$.fragment),y7r=l(),gFe=a("p"),L7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x7r=l(),Dc=a("p"),$7r=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),k7r=o("not"),S7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),R7r=o("from_pretrained()"),B7r=o(" to load the model weights."),P7r=l(),F(s3.$$.fragment),I7r=l(),Vr=a("div"),F(h7.$$.fragment),q7r=l(),pFe=a("p"),N7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j7r=l(),_n=a("p"),D7r=o("The model class to instantiate is selected based on the "),uFe=a("code"),G7r=o("model_type"),O7r=o(` property of the config object (either
passed as an argument or loaded from `),_Fe=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=a("code"),z7r=o("pretrained_model_name_or_path"),Q7r=o(":"),W7r=l(),Se=a("ul"),l3=a("li"),vFe=a("strong"),H7r=o("bart"),U7r=o(" \u2014 "),PJ=a("a"),J7r=o("FlaxBartForConditionalGeneration"),Y7r=o(" (BART model)"),K7r=l(),i3=a("li"),FFe=a("strong"),Z7r=o("blenderbot"),e9r=o(" \u2014 "),IJ=a("a"),o9r=o("FlaxBlenderbotForConditionalGeneration"),r9r=o(" (Blenderbot model)"),t9r=l(),d3=a("li"),TFe=a("strong"),a9r=o("blenderbot-small"),n9r=o(" \u2014 "),qJ=a("a"),s9r=o("FlaxBlenderbotSmallForConditionalGeneration"),l9r=o(" (BlenderbotSmall model)"),i9r=l(),c3=a("li"),MFe=a("strong"),d9r=o("encoder-decoder"),c9r=o(" \u2014 "),NJ=a("a"),f9r=o("FlaxEncoderDecoderModel"),m9r=o(" (Encoder decoder model)"),g9r=l(),f3=a("li"),EFe=a("strong"),h9r=o("marian"),p9r=o(" \u2014 "),jJ=a("a"),u9r=o("FlaxMarianMTModel"),_9r=o(" (Marian model)"),b9r=l(),m3=a("li"),CFe=a("strong"),v9r=o("mbart"),F9r=o(" \u2014 "),DJ=a("a"),T9r=o("FlaxMBartForConditionalGeneration"),M9r=o(" (mBART model)"),E9r=l(),g3=a("li"),wFe=a("strong"),C9r=o("mt5"),w9r=o(" \u2014 "),GJ=a("a"),A9r=o("FlaxMT5ForConditionalGeneration"),y9r=o(" (mT5 model)"),L9r=l(),h3=a("li"),AFe=a("strong"),x9r=o("pegasus"),$9r=o(" \u2014 "),OJ=a("a"),k9r=o("FlaxPegasusForConditionalGeneration"),S9r=o(" (Pegasus model)"),R9r=l(),p3=a("li"),yFe=a("strong"),B9r=o("t5"),P9r=o(" \u2014 "),VJ=a("a"),I9r=o("FlaxT5ForConditionalGeneration"),q9r=o(" (T5 model)"),N9r=l(),F(u3.$$.fragment),mqe=l(),Gc=a("h2"),_3=a("a"),LFe=a("span"),F(p7.$$.fragment),j9r=l(),xFe=a("span"),D9r=o("FlaxAutoModelForSequenceClassification"),gqe=l(),ur=a("div"),F(u7.$$.fragment),G9r=l(),Oc=a("p"),O9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XJ=a("a"),V9r=o("from_pretrained()"),X9r=o(" class method or the "),zJ=a("a"),z9r=o("from_config()"),Q9r=o(` class
method.`),W9r=l(),_7=a("p"),H9r=o("This class cannot be instantiated directly using "),$Fe=a("code"),U9r=o("__init__()"),J9r=o(" (throws an error)."),Y9r=l(),Xt=a("div"),F(b7.$$.fragment),K9r=l(),kFe=a("p"),Z9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),e$r=l(),Vc=a("p"),o$r=o(`Note:
Loading a model from its configuration file does `),SFe=a("strong"),r$r=o("not"),t$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=a("a"),a$r=o("from_pretrained()"),n$r=o(" to load the model weights."),s$r=l(),F(b3.$$.fragment),l$r=l(),Xr=a("div"),F(v7.$$.fragment),i$r=l(),RFe=a("p"),d$r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),c$r=l(),bn=a("p"),f$r=o("The model class to instantiate is selected based on the "),BFe=a("code"),m$r=o("model_type"),g$r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),h$r=o("pretrained_model_name_or_path"),p$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=a("code"),u$r=o("pretrained_model_name_or_path"),_$r=o(":"),b$r=l(),xe=a("ul"),v3=a("li"),qFe=a("strong"),v$r=o("albert"),F$r=o(" \u2014 "),WJ=a("a"),T$r=o("FlaxAlbertForSequenceClassification"),M$r=o(" (ALBERT model)"),E$r=l(),F3=a("li"),NFe=a("strong"),C$r=o("bart"),w$r=o(" \u2014 "),HJ=a("a"),A$r=o("FlaxBartForSequenceClassification"),y$r=o(" (BART model)"),L$r=l(),T3=a("li"),jFe=a("strong"),x$r=o("bert"),$$r=o(" \u2014 "),UJ=a("a"),k$r=o("FlaxBertForSequenceClassification"),S$r=o(" (BERT model)"),R$r=l(),M3=a("li"),DFe=a("strong"),B$r=o("big_bird"),P$r=o(" \u2014 "),JJ=a("a"),I$r=o("FlaxBigBirdForSequenceClassification"),q$r=o(" (BigBird model)"),N$r=l(),E3=a("li"),GFe=a("strong"),j$r=o("distilbert"),D$r=o(" \u2014 "),YJ=a("a"),G$r=o("FlaxDistilBertForSequenceClassification"),O$r=o(" (DistilBERT model)"),V$r=l(),C3=a("li"),OFe=a("strong"),X$r=o("electra"),z$r=o(" \u2014 "),KJ=a("a"),Q$r=o("FlaxElectraForSequenceClassification"),W$r=o(" (ELECTRA model)"),H$r=l(),w3=a("li"),VFe=a("strong"),U$r=o("mbart"),J$r=o(" \u2014 "),ZJ=a("a"),Y$r=o("FlaxMBartForSequenceClassification"),K$r=o(" (mBART model)"),Z$r=l(),A3=a("li"),XFe=a("strong"),ekr=o("roberta"),okr=o(" \u2014 "),eY=a("a"),rkr=o("FlaxRobertaForSequenceClassification"),tkr=o(" (RoBERTa model)"),akr=l(),y3=a("li"),zFe=a("strong"),nkr=o("roformer"),skr=o(" \u2014 "),oY=a("a"),lkr=o("FlaxRoFormerForSequenceClassification"),ikr=o(" (RoFormer model)"),dkr=l(),L3=a("li"),QFe=a("strong"),ckr=o("xlm-roberta"),fkr=o(" \u2014 "),rY=a("a"),mkr=o("FlaxXLMRobertaForSequenceClassification"),gkr=o(" (XLM-RoBERTa model)"),hkr=l(),F(x3.$$.fragment),hqe=l(),Xc=a("h2"),$3=a("a"),WFe=a("span"),F(F7.$$.fragment),pkr=l(),HFe=a("span"),ukr=o("FlaxAutoModelForQuestionAnswering"),pqe=l(),_r=a("div"),F(T7.$$.fragment),_kr=l(),zc=a("p"),bkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tY=a("a"),vkr=o("from_pretrained()"),Fkr=o(" class method or the "),aY=a("a"),Tkr=o("from_config()"),Mkr=o(` class
method.`),Ekr=l(),M7=a("p"),Ckr=o("This class cannot be instantiated directly using "),UFe=a("code"),wkr=o("__init__()"),Akr=o(" (throws an error)."),ykr=l(),zt=a("div"),F(E7.$$.fragment),Lkr=l(),JFe=a("p"),xkr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$kr=l(),Qc=a("p"),kkr=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),Skr=o("not"),Rkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),Bkr=o("from_pretrained()"),Pkr=o(" to load the model weights."),Ikr=l(),F(k3.$$.fragment),qkr=l(),zr=a("div"),F(C7.$$.fragment),Nkr=l(),KFe=a("p"),jkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dkr=l(),vn=a("p"),Gkr=o("The model class to instantiate is selected based on the "),ZFe=a("code"),Okr=o("model_type"),Vkr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),Xkr=o("pretrained_model_name_or_path"),zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),Qkr=o("pretrained_model_name_or_path"),Wkr=o(":"),Hkr=l(),$e=a("ul"),S3=a("li"),rTe=a("strong"),Ukr=o("albert"),Jkr=o(" \u2014 "),sY=a("a"),Ykr=o("FlaxAlbertForQuestionAnswering"),Kkr=o(" (ALBERT model)"),Zkr=l(),R3=a("li"),tTe=a("strong"),eSr=o("bart"),oSr=o(" \u2014 "),lY=a("a"),rSr=o("FlaxBartForQuestionAnswering"),tSr=o(" (BART model)"),aSr=l(),B3=a("li"),aTe=a("strong"),nSr=o("bert"),sSr=o(" \u2014 "),iY=a("a"),lSr=o("FlaxBertForQuestionAnswering"),iSr=o(" (BERT model)"),dSr=l(),P3=a("li"),nTe=a("strong"),cSr=o("big_bird"),fSr=o(" \u2014 "),dY=a("a"),mSr=o("FlaxBigBirdForQuestionAnswering"),gSr=o(" (BigBird model)"),hSr=l(),I3=a("li"),sTe=a("strong"),pSr=o("distilbert"),uSr=o(" \u2014 "),cY=a("a"),_Sr=o("FlaxDistilBertForQuestionAnswering"),bSr=o(" (DistilBERT model)"),vSr=l(),q3=a("li"),lTe=a("strong"),FSr=o("electra"),TSr=o(" \u2014 "),fY=a("a"),MSr=o("FlaxElectraForQuestionAnswering"),ESr=o(" (ELECTRA model)"),CSr=l(),N3=a("li"),iTe=a("strong"),wSr=o("mbart"),ASr=o(" \u2014 "),mY=a("a"),ySr=o("FlaxMBartForQuestionAnswering"),LSr=o(" (mBART model)"),xSr=l(),j3=a("li"),dTe=a("strong"),$Sr=o("roberta"),kSr=o(" \u2014 "),gY=a("a"),SSr=o("FlaxRobertaForQuestionAnswering"),RSr=o(" (RoBERTa model)"),BSr=l(),D3=a("li"),cTe=a("strong"),PSr=o("roformer"),ISr=o(" \u2014 "),hY=a("a"),qSr=o("FlaxRoFormerForQuestionAnswering"),NSr=o(" (RoFormer model)"),jSr=l(),G3=a("li"),fTe=a("strong"),DSr=o("xlm-roberta"),GSr=o(" \u2014 "),pY=a("a"),OSr=o("FlaxXLMRobertaForQuestionAnswering"),VSr=o(" (XLM-RoBERTa model)"),XSr=l(),F(O3.$$.fragment),uqe=l(),Wc=a("h2"),V3=a("a"),mTe=a("span"),F(w7.$$.fragment),zSr=l(),gTe=a("span"),QSr=o("FlaxAutoModelForTokenClassification"),_qe=l(),br=a("div"),F(A7.$$.fragment),WSr=l(),Hc=a("p"),HSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uY=a("a"),USr=o("from_pretrained()"),JSr=o(" class method or the "),_Y=a("a"),YSr=o("from_config()"),KSr=o(` class
method.`),ZSr=l(),y7=a("p"),eRr=o("This class cannot be instantiated directly using "),hTe=a("code"),oRr=o("__init__()"),rRr=o(" (throws an error)."),tRr=l(),Qt=a("div"),F(L7.$$.fragment),aRr=l(),pTe=a("p"),nRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),sRr=l(),Uc=a("p"),lRr=o(`Note:
Loading a model from its configuration file does `),uTe=a("strong"),iRr=o("not"),dRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=a("a"),cRr=o("from_pretrained()"),fRr=o(" to load the model weights."),mRr=l(),F(X3.$$.fragment),gRr=l(),Qr=a("div"),F(x7.$$.fragment),hRr=l(),_Te=a("p"),pRr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uRr=l(),Fn=a("p"),_Rr=o("The model class to instantiate is selected based on the "),bTe=a("code"),bRr=o("model_type"),vRr=o(` property of the config object (either
passed as an argument or loaded from `),vTe=a("code"),FRr=o("pretrained_model_name_or_path"),TRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(":"),CRr=l(),De=a("ul"),z3=a("li"),TTe=a("strong"),wRr=o("albert"),ARr=o(" \u2014 "),vY=a("a"),yRr=o("FlaxAlbertForTokenClassification"),LRr=o(" (ALBERT model)"),xRr=l(),Q3=a("li"),MTe=a("strong"),$Rr=o("bert"),kRr=o(" \u2014 "),FY=a("a"),SRr=o("FlaxBertForTokenClassification"),RRr=o(" (BERT model)"),BRr=l(),W3=a("li"),ETe=a("strong"),PRr=o("big_bird"),IRr=o(" \u2014 "),TY=a("a"),qRr=o("FlaxBigBirdForTokenClassification"),NRr=o(" (BigBird model)"),jRr=l(),H3=a("li"),CTe=a("strong"),DRr=o("distilbert"),GRr=o(" \u2014 "),MY=a("a"),ORr=o("FlaxDistilBertForTokenClassification"),VRr=o(" (DistilBERT model)"),XRr=l(),U3=a("li"),wTe=a("strong"),zRr=o("electra"),QRr=o(" \u2014 "),EY=a("a"),WRr=o("FlaxElectraForTokenClassification"),HRr=o(" (ELECTRA model)"),URr=l(),J3=a("li"),ATe=a("strong"),JRr=o("roberta"),YRr=o(" \u2014 "),CY=a("a"),KRr=o("FlaxRobertaForTokenClassification"),ZRr=o(" (RoBERTa model)"),eBr=l(),Y3=a("li"),yTe=a("strong"),oBr=o("roformer"),rBr=o(" \u2014 "),wY=a("a"),tBr=o("FlaxRoFormerForTokenClassification"),aBr=o(" (RoFormer model)"),nBr=l(),K3=a("li"),LTe=a("strong"),sBr=o("xlm-roberta"),lBr=o(" \u2014 "),AY=a("a"),iBr=o("FlaxXLMRobertaForTokenClassification"),dBr=o(" (XLM-RoBERTa model)"),cBr=l(),F(Z3.$$.fragment),bqe=l(),Jc=a("h2"),ew=a("a"),xTe=a("span"),F($7.$$.fragment),fBr=l(),$Te=a("span"),mBr=o("FlaxAutoModelForMultipleChoice"),vqe=l(),vr=a("div"),F(k7.$$.fragment),gBr=l(),Yc=a("p"),hBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yY=a("a"),pBr=o("from_pretrained()"),uBr=o(" class method or the "),LY=a("a"),_Br=o("from_config()"),bBr=o(` class
method.`),vBr=l(),S7=a("p"),FBr=o("This class cannot be instantiated directly using "),kTe=a("code"),TBr=o("__init__()"),MBr=o(" (throws an error)."),EBr=l(),Wt=a("div"),F(R7.$$.fragment),CBr=l(),STe=a("p"),wBr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ABr=l(),Kc=a("p"),yBr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),LBr=o("not"),xBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),$Br=o("from_pretrained()"),kBr=o(" to load the model weights."),SBr=l(),F(ow.$$.fragment),RBr=l(),Wr=a("div"),F(B7.$$.fragment),BBr=l(),BTe=a("p"),PBr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IBr=l(),Tn=a("p"),qBr=o("The model class to instantiate is selected based on the "),PTe=a("code"),NBr=o("model_type"),jBr=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=a("code"),OBr=o("pretrained_model_name_or_path"),VBr=o(":"),XBr=l(),Ge=a("ul"),rw=a("li"),NTe=a("strong"),zBr=o("albert"),QBr=o(" \u2014 "),$Y=a("a"),WBr=o("FlaxAlbertForMultipleChoice"),HBr=o(" (ALBERT model)"),UBr=l(),tw=a("li"),jTe=a("strong"),JBr=o("bert"),YBr=o(" \u2014 "),kY=a("a"),KBr=o("FlaxBertForMultipleChoice"),ZBr=o(" (BERT model)"),ePr=l(),aw=a("li"),DTe=a("strong"),oPr=o("big_bird"),rPr=o(" \u2014 "),SY=a("a"),tPr=o("FlaxBigBirdForMultipleChoice"),aPr=o(" (BigBird model)"),nPr=l(),nw=a("li"),GTe=a("strong"),sPr=o("distilbert"),lPr=o(" \u2014 "),RY=a("a"),iPr=o("FlaxDistilBertForMultipleChoice"),dPr=o(" (DistilBERT model)"),cPr=l(),sw=a("li"),OTe=a("strong"),fPr=o("electra"),mPr=o(" \u2014 "),BY=a("a"),gPr=o("FlaxElectraForMultipleChoice"),hPr=o(" (ELECTRA model)"),pPr=l(),lw=a("li"),VTe=a("strong"),uPr=o("roberta"),_Pr=o(" \u2014 "),PY=a("a"),bPr=o("FlaxRobertaForMultipleChoice"),vPr=o(" (RoBERTa model)"),FPr=l(),iw=a("li"),XTe=a("strong"),TPr=o("roformer"),MPr=o(" \u2014 "),IY=a("a"),EPr=o("FlaxRoFormerForMultipleChoice"),CPr=o(" (RoFormer model)"),wPr=l(),dw=a("li"),zTe=a("strong"),APr=o("xlm-roberta"),yPr=o(" \u2014 "),qY=a("a"),LPr=o("FlaxXLMRobertaForMultipleChoice"),xPr=o(" (XLM-RoBERTa model)"),$Pr=l(),F(cw.$$.fragment),Fqe=l(),Zc=a("h2"),fw=a("a"),QTe=a("span"),F(P7.$$.fragment),kPr=l(),WTe=a("span"),SPr=o("FlaxAutoModelForNextSentencePrediction"),Tqe=l(),Fr=a("div"),F(I7.$$.fragment),RPr=l(),ef=a("p"),BPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NY=a("a"),PPr=o("from_pretrained()"),IPr=o(" class method or the "),jY=a("a"),qPr=o("from_config()"),NPr=o(` class
method.`),jPr=l(),q7=a("p"),DPr=o("This class cannot be instantiated directly using "),HTe=a("code"),GPr=o("__init__()"),OPr=o(" (throws an error)."),VPr=l(),Ht=a("div"),F(N7.$$.fragment),XPr=l(),UTe=a("p"),zPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),QPr=l(),of=a("p"),WPr=o(`Note:
Loading a model from its configuration file does `),JTe=a("strong"),HPr=o("not"),UPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),JPr=o("from_pretrained()"),YPr=o(" to load the model weights."),KPr=l(),F(mw.$$.fragment),ZPr=l(),Hr=a("div"),F(j7.$$.fragment),eIr=l(),YTe=a("p"),oIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),rIr=l(),Mn=a("p"),tIr=o("The model class to instantiate is selected based on the "),KTe=a("code"),aIr=o("model_type"),nIr=o(` property of the config object (either
passed as an argument or loaded from `),ZTe=a("code"),sIr=o("pretrained_model_name_or_path"),lIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=a("code"),iIr=o("pretrained_model_name_or_path"),dIr=o(":"),cIr=l(),oMe=a("ul"),gw=a("li"),rMe=a("strong"),fIr=o("bert"),mIr=o(" \u2014 "),GY=a("a"),gIr=o("FlaxBertForNextSentencePrediction"),hIr=o(" (BERT model)"),pIr=l(),F(hw.$$.fragment),Mqe=l(),rf=a("h2"),pw=a("a"),tMe=a("span"),F(D7.$$.fragment),uIr=l(),aMe=a("span"),_Ir=o("FlaxAutoModelForImageClassification"),Eqe=l(),Tr=a("div"),F(G7.$$.fragment),bIr=l(),tf=a("p"),vIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OY=a("a"),FIr=o("from_pretrained()"),TIr=o(" class method or the "),VY=a("a"),MIr=o("from_config()"),EIr=o(` class
method.`),CIr=l(),O7=a("p"),wIr=o("This class cannot be instantiated directly using "),nMe=a("code"),AIr=o("__init__()"),yIr=o(" (throws an error)."),LIr=l(),Ut=a("div"),F(V7.$$.fragment),xIr=l(),sMe=a("p"),$Ir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kIr=l(),af=a("p"),SIr=o(`Note:
Loading a model from its configuration file does `),lMe=a("strong"),RIr=o("not"),BIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=a("a"),PIr=o("from_pretrained()"),IIr=o(" to load the model weights."),qIr=l(),F(uw.$$.fragment),NIr=l(),Ur=a("div"),F(X7.$$.fragment),jIr=l(),iMe=a("p"),DIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GIr=l(),En=a("p"),OIr=o("The model class to instantiate is selected based on the "),dMe=a("code"),VIr=o("model_type"),XIr=o(` property of the config object (either
passed as an argument or loaded from `),cMe=a("code"),zIr=o("pretrained_model_name_or_path"),QIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=a("code"),WIr=o("pretrained_model_name_or_path"),HIr=o(":"),UIr=l(),z7=a("ul"),_w=a("li"),mMe=a("strong"),JIr=o("beit"),YIr=o(" \u2014 "),zY=a("a"),KIr=o("FlaxBeitForImageClassification"),ZIr=o(" (BEiT model)"),eqr=l(),bw=a("li"),gMe=a("strong"),oqr=o("vit"),rqr=o(" \u2014 "),QY=a("a"),tqr=o("FlaxViTForImageClassification"),aqr=o(" (ViT model)"),nqr=l(),F(vw.$$.fragment),Cqe=l(),nf=a("h2"),Fw=a("a"),hMe=a("span"),F(Q7.$$.fragment),sqr=l(),pMe=a("span"),lqr=o("FlaxAutoModelForVision2Seq"),wqe=l(),Mr=a("div"),F(W7.$$.fragment),iqr=l(),sf=a("p"),dqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WY=a("a"),cqr=o("from_pretrained()"),fqr=o(" class method or the "),HY=a("a"),mqr=o("from_config()"),gqr=o(` class
method.`),hqr=l(),H7=a("p"),pqr=o("This class cannot be instantiated directly using "),uMe=a("code"),uqr=o("__init__()"),_qr=o(" (throws an error)."),bqr=l(),Jt=a("div"),F(U7.$$.fragment),vqr=l(),_Me=a("p"),Fqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Tqr=l(),lf=a("p"),Mqr=o(`Note:
Loading a model from its configuration file does `),bMe=a("strong"),Eqr=o("not"),Cqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),wqr=o("from_pretrained()"),Aqr=o(" to load the model weights."),yqr=l(),F(Tw.$$.fragment),Lqr=l(),Jr=a("div"),F(J7.$$.fragment),xqr=l(),vMe=a("p"),$qr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kqr=l(),Cn=a("p"),Sqr=o("The model class to instantiate is selected based on the "),FMe=a("code"),Rqr=o("model_type"),Bqr=o(` property of the config object (either
passed as an argument or loaded from `),TMe=a("code"),Pqr=o("pretrained_model_name_or_path"),Iqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=a("code"),qqr=o("pretrained_model_name_or_path"),Nqr=o(":"),jqr=l(),EMe=a("ul"),Mw=a("li"),CMe=a("strong"),Dqr=o("vision-encoder-decoder"),Gqr=o(" \u2014 "),JY=a("a"),Oqr=o("FlaxVisionEncoderDecoderModel"),Vqr=o(" (Vision Encoder decoder model)"),Xqr=l(),F(Ew.$$.fragment),this.h()},l(f){const _=d0t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Y7=s(p);m=n(Y7,"A",{id:!0,class:!0,href:!0});var wMe=s(m);u=n(wMe,"SPAN",{});var AMe=s(u);T(d.$$.fragment,AMe),AMe.forEach(t),wMe.forEach(t),h=i(Y7),Mo=n(Y7,"SPAN",{});var yMe=s(Mo);li=r(yMe,"Auto Classes"),yMe.forEach(t),Y7.forEach(t),mf=i(f),et=n(f,"P",{});var K7=s(et);ii=r(K7,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(K7,"CODE",{});var LMe=s(di);O0=r(LMe,"from_pretrained()"),LMe.forEach(t),gf=r(K7,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),K7.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var xMe=s(An);V0=r(xMe,"AutoConfig"),xMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var $Me=s(Ln);X0=r($Me,"AutoModel"),$Me.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var kMe=s(xn);z0=r(kMe,"AutoTokenizer"),kMe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Z7=s(Ae);d$=r(Z7,"will create a model that is an instance of "),gi=n(Z7,"A",{href:!0});var SMe=s(gi);c$=r(SMe,"BertModel"),SMe.forEach(t),f$=r(Z7,"."),Z7.forEach(t),Eo=i(f),Ea=n(f,"P",{});var e9=s(Ea);m$=r(e9,"There is one class of "),pf=n(e9,"CODE",{});var RMe=s(pf);g$=r(RMe,"AutoModel"),RMe.forEach(t),Bje=r(e9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),e9.forEach(t),EPe=i(f),hi=n(f,"H2",{class:!0});var o9=s(hi);uf=n(o9,"A",{id:!0,class:!0,href:!0});var BMe=s(uf);XZ=n(BMe,"SPAN",{});var PMe=s(XZ);T(Q0.$$.fragment,PMe),PMe.forEach(t),BMe.forEach(t),Pje=i(o9),zZ=n(o9,"SPAN",{});var IMe=s(zZ);Ije=r(IMe,"Extending the Auto Classes"),IMe.forEach(t),o9.forEach(t),CPe=i(f),$n=n(f,"P",{});var df=s($n);qje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QZ=n(df,"CODE",{});var qMe=s(QZ);Nje=r(qMe,"NewModel"),qMe.forEach(t),jje=r(df,", make sure you have a "),WZ=n(df,"CODE",{});var NMe=s(WZ);Dje=r(NMe,"NewModelConfig"),NMe.forEach(t),Gje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),wPe=i(f),T(W0.$$.fragment,f),APe=i(f),h$=n(f,"P",{});var jMe=s(h$);Oje=r(jMe,"You will then be able to use the auto classes like you would usually do!"),jMe.forEach(t),yPe=i(f),T(_f.$$.fragment,f),LPe=i(f),pi=n(f,"H2",{class:!0});var r9=s(pi);bf=n(r9,"A",{id:!0,class:!0,href:!0});var DMe=s(bf);HZ=n(DMe,"SPAN",{});var GMe=s(HZ);T(H0.$$.fragment,GMe),GMe.forEach(t),DMe.forEach(t),Vje=i(r9),UZ=n(r9,"SPAN",{});var OMe=s(UZ);Xje=r(OMe,"AutoConfig"),OMe.forEach(t),r9.forEach(t),xPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(U0.$$.fragment,Kr),zje=i(Kr),J0=n(Kr,"P",{});var t9=s(J0);Qje=r(t9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),p$=n(t9,"A",{href:!0});var VMe=s(p$);Wje=r(VMe,"from_pretrained()"),VMe.forEach(t),Hje=r(t9," class method."),t9.forEach(t),Uje=i(Kr),Y0=n(Kr,"P",{});var a9=s(Y0);Jje=r(a9,"This class cannot be instantiated directly using "),JZ=n(a9,"CODE",{});var XMe=s(JZ);Yje=r(XMe,"__init__()"),XMe.forEach(t),Kje=r(a9," (throws an error)."),a9.forEach(t),Zje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(K0.$$.fragment,Zr),eDe=i(Zr),YZ=n(Zr,"P",{});var zMe=s(YZ);oDe=r(zMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),zMe.forEach(t),rDe=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);tDe=r(cf,"The configuration class to instantiate is selected based on the "),KZ=n(cf,"CODE",{});var QMe=s(KZ);aDe=r(QMe,"model_type"),QMe.forEach(t),nDe=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ZZ=n(cf,"CODE",{});var WMe=s(ZZ);sDe=r(WMe,"pretrained_model_name_or_path"),WMe.forEach(t),lDe=r(cf,":"),cf.forEach(t),iDe=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var Cw=s(vf);eee=n(Cw,"STRONG",{});var HMe=s(eee);dDe=r(HMe,"albert"),HMe.forEach(t),cDe=r(Cw," \u2014 "),u$=n(Cw,"A",{href:!0});var UMe=s(u$);fDe=r(UMe,"AlbertConfig"),UMe.forEach(t),mDe=r(Cw," (ALBERT model)"),Cw.forEach(t),gDe=i(L),Ff=n(L,"LI",{});var ww=s(Ff);oee=n(ww,"STRONG",{});var JMe=s(oee);hDe=r(JMe,"bart"),JMe.forEach(t),pDe=r(ww," \u2014 "),_$=n(ww,"A",{href:!0});var YMe=s(_$);uDe=r(YMe,"BartConfig"),YMe.forEach(t),_De=r(ww," (BART model)"),ww.forEach(t),bDe=i(L),Tf=n(L,"LI",{});var Aw=s(Tf);ree=n(Aw,"STRONG",{});var KMe=s(ree);vDe=r(KMe,"beit"),KMe.forEach(t),FDe=r(Aw," \u2014 "),b$=n(Aw,"A",{href:!0});var ZMe=s(b$);TDe=r(ZMe,"BeitConfig"),ZMe.forEach(t),MDe=r(Aw," (BEiT model)"),Aw.forEach(t),EDe=i(L),Mf=n(L,"LI",{});var yw=s(Mf);tee=n(yw,"STRONG",{});var eEe=s(tee);CDe=r(eEe,"bert"),eEe.forEach(t),wDe=r(yw," \u2014 "),v$=n(yw,"A",{href:!0});var oEe=s(v$);ADe=r(oEe,"BertConfig"),oEe.forEach(t),yDe=r(yw," (BERT model)"),yw.forEach(t),LDe=i(L),Ef=n(L,"LI",{});var Lw=s(Ef);aee=n(Lw,"STRONG",{});var rEe=s(aee);xDe=r(rEe,"bert-generation"),rEe.forEach(t),$De=r(Lw," \u2014 "),F$=n(Lw,"A",{href:!0});var tEe=s(F$);kDe=r(tEe,"BertGenerationConfig"),tEe.forEach(t),SDe=r(Lw," (Bert Generation model)"),Lw.forEach(t),RDe=i(L),Cf=n(L,"LI",{});var xw=s(Cf);nee=n(xw,"STRONG",{});var aEe=s(nee);BDe=r(aEe,"big_bird"),aEe.forEach(t),PDe=r(xw," \u2014 "),T$=n(xw,"A",{href:!0});var nEe=s(T$);IDe=r(nEe,"BigBirdConfig"),nEe.forEach(t),qDe=r(xw," (BigBird model)"),xw.forEach(t),NDe=i(L),wf=n(L,"LI",{});var $w=s(wf);see=n($w,"STRONG",{});var sEe=s(see);jDe=r(sEe,"bigbird_pegasus"),sEe.forEach(t),DDe=r($w," \u2014 "),M$=n($w,"A",{href:!0});var lEe=s(M$);GDe=r(lEe,"BigBirdPegasusConfig"),lEe.forEach(t),ODe=r($w," (BigBirdPegasus model)"),$w.forEach(t),VDe=i(L),Af=n(L,"LI",{});var kw=s(Af);lee=n(kw,"STRONG",{});var iEe=s(lee);XDe=r(iEe,"blenderbot"),iEe.forEach(t),zDe=r(kw," \u2014 "),E$=n(kw,"A",{href:!0});var dEe=s(E$);QDe=r(dEe,"BlenderbotConfig"),dEe.forEach(t),WDe=r(kw," (Blenderbot model)"),kw.forEach(t),HDe=i(L),yf=n(L,"LI",{});var Sw=s(yf);iee=n(Sw,"STRONG",{});var cEe=s(iee);UDe=r(cEe,"blenderbot-small"),cEe.forEach(t),JDe=r(Sw," \u2014 "),C$=n(Sw,"A",{href:!0});var fEe=s(C$);YDe=r(fEe,"BlenderbotSmallConfig"),fEe.forEach(t),KDe=r(Sw," (BlenderbotSmall model)"),Sw.forEach(t),ZDe=i(L),Lf=n(L,"LI",{});var Rw=s(Lf);dee=n(Rw,"STRONG",{});var mEe=s(dee);eGe=r(mEe,"camembert"),mEe.forEach(t),oGe=r(Rw," \u2014 "),w$=n(Rw,"A",{href:!0});var gEe=s(w$);rGe=r(gEe,"CamembertConfig"),gEe.forEach(t),tGe=r(Rw," (CamemBERT model)"),Rw.forEach(t),aGe=i(L),xf=n(L,"LI",{});var Bw=s(xf);cee=n(Bw,"STRONG",{});var hEe=s(cee);nGe=r(hEe,"canine"),hEe.forEach(t),sGe=r(Bw," \u2014 "),A$=n(Bw,"A",{href:!0});var pEe=s(A$);lGe=r(pEe,"CanineConfig"),pEe.forEach(t),iGe=r(Bw," (Canine model)"),Bw.forEach(t),dGe=i(L),$f=n(L,"LI",{});var Pw=s($f);fee=n(Pw,"STRONG",{});var uEe=s(fee);cGe=r(uEe,"clip"),uEe.forEach(t),fGe=r(Pw," \u2014 "),y$=n(Pw,"A",{href:!0});var _Ee=s(y$);mGe=r(_Ee,"CLIPConfig"),_Ee.forEach(t),gGe=r(Pw," (CLIP model)"),Pw.forEach(t),hGe=i(L),kf=n(L,"LI",{});var Iw=s(kf);mee=n(Iw,"STRONG",{});var bEe=s(mee);pGe=r(bEe,"convbert"),bEe.forEach(t),uGe=r(Iw," \u2014 "),L$=n(Iw,"A",{href:!0});var vEe=s(L$);_Ge=r(vEe,"ConvBertConfig"),vEe.forEach(t),bGe=r(Iw," (ConvBERT model)"),Iw.forEach(t),vGe=i(L),Sf=n(L,"LI",{});var qw=s(Sf);gee=n(qw,"STRONG",{});var FEe=s(gee);FGe=r(FEe,"convnext"),FEe.forEach(t),TGe=r(qw," \u2014 "),x$=n(qw,"A",{href:!0});var TEe=s(x$);MGe=r(TEe,"ConvNextConfig"),TEe.forEach(t),EGe=r(qw," (ConvNext model)"),qw.forEach(t),CGe=i(L),Rf=n(L,"LI",{});var Nw=s(Rf);hee=n(Nw,"STRONG",{});var MEe=s(hee);wGe=r(MEe,"ctrl"),MEe.forEach(t),AGe=r(Nw," \u2014 "),$$=n(Nw,"A",{href:!0});var EEe=s($$);yGe=r(EEe,"CTRLConfig"),EEe.forEach(t),LGe=r(Nw," (CTRL model)"),Nw.forEach(t),xGe=i(L),Bf=n(L,"LI",{});var jw=s(Bf);pee=n(jw,"STRONG",{});var CEe=s(pee);$Ge=r(CEe,"data2vec-audio"),CEe.forEach(t),kGe=r(jw," \u2014 "),k$=n(jw,"A",{href:!0});var wEe=s(k$);SGe=r(wEe,"Data2VecAudioConfig"),wEe.forEach(t),RGe=r(jw," (Data2VecAudio model)"),jw.forEach(t),BGe=i(L),Pf=n(L,"LI",{});var Dw=s(Pf);uee=n(Dw,"STRONG",{});var AEe=s(uee);PGe=r(AEe,"data2vec-text"),AEe.forEach(t),IGe=r(Dw," \u2014 "),S$=n(Dw,"A",{href:!0});var yEe=s(S$);qGe=r(yEe,"Data2VecTextConfig"),yEe.forEach(t),NGe=r(Dw," (Data2VecText model)"),Dw.forEach(t),jGe=i(L),If=n(L,"LI",{});var Gw=s(If);_ee=n(Gw,"STRONG",{});var LEe=s(_ee);DGe=r(LEe,"data2vec-vision"),LEe.forEach(t),GGe=r(Gw," \u2014 "),R$=n(Gw,"A",{href:!0});var xEe=s(R$);OGe=r(xEe,"Data2VecVisionConfig"),xEe.forEach(t),VGe=r(Gw," (Data2VecVision model)"),Gw.forEach(t),XGe=i(L),qf=n(L,"LI",{});var Ow=s(qf);bee=n(Ow,"STRONG",{});var $Ee=s(bee);zGe=r($Ee,"deberta"),$Ee.forEach(t),QGe=r(Ow," \u2014 "),B$=n(Ow,"A",{href:!0});var kEe=s(B$);WGe=r(kEe,"DebertaConfig"),kEe.forEach(t),HGe=r(Ow," (DeBERTa model)"),Ow.forEach(t),UGe=i(L),Nf=n(L,"LI",{});var Vw=s(Nf);vee=n(Vw,"STRONG",{});var SEe=s(vee);JGe=r(SEe,"deberta-v2"),SEe.forEach(t),YGe=r(Vw," \u2014 "),P$=n(Vw,"A",{href:!0});var REe=s(P$);KGe=r(REe,"DebertaV2Config"),REe.forEach(t),ZGe=r(Vw," (DeBERTa-v2 model)"),Vw.forEach(t),eOe=i(L),jf=n(L,"LI",{});var Xw=s(jf);Fee=n(Xw,"STRONG",{});var BEe=s(Fee);oOe=r(BEe,"decision_transformer"),BEe.forEach(t),rOe=r(Xw," \u2014 "),I$=n(Xw,"A",{href:!0});var PEe=s(I$);tOe=r(PEe,"DecisionTransformerConfig"),PEe.forEach(t),aOe=r(Xw," (Decision Transformer model)"),Xw.forEach(t),nOe=i(L),Df=n(L,"LI",{});var zw=s(Df);Tee=n(zw,"STRONG",{});var IEe=s(Tee);sOe=r(IEe,"deit"),IEe.forEach(t),lOe=r(zw," \u2014 "),q$=n(zw,"A",{href:!0});var qEe=s(q$);iOe=r(qEe,"DeiTConfig"),qEe.forEach(t),dOe=r(zw," (DeiT model)"),zw.forEach(t),cOe=i(L),Gf=n(L,"LI",{});var Qw=s(Gf);Mee=n(Qw,"STRONG",{});var NEe=s(Mee);fOe=r(NEe,"detr"),NEe.forEach(t),mOe=r(Qw," \u2014 "),N$=n(Qw,"A",{href:!0});var Qqr=s(N$);gOe=r(Qqr,"DetrConfig"),Qqr.forEach(t),hOe=r(Qw," (DETR model)"),Qw.forEach(t),pOe=i(L),Of=n(L,"LI",{});var jEe=s(Of);Eee=n(jEe,"STRONG",{});var Wqr=s(Eee);uOe=r(Wqr,"distilbert"),Wqr.forEach(t),_Oe=r(jEe," \u2014 "),j$=n(jEe,"A",{href:!0});var Hqr=s(j$);bOe=r(Hqr,"DistilBertConfig"),Hqr.forEach(t),vOe=r(jEe," (DistilBERT model)"),jEe.forEach(t),FOe=i(L),Vf=n(L,"LI",{});var DEe=s(Vf);Cee=n(DEe,"STRONG",{});var Uqr=s(Cee);TOe=r(Uqr,"dpr"),Uqr.forEach(t),MOe=r(DEe," \u2014 "),D$=n(DEe,"A",{href:!0});var Jqr=s(D$);EOe=r(Jqr,"DPRConfig"),Jqr.forEach(t),COe=r(DEe," (DPR model)"),DEe.forEach(t),wOe=i(L),Xf=n(L,"LI",{});var GEe=s(Xf);wee=n(GEe,"STRONG",{});var Yqr=s(wee);AOe=r(Yqr,"dpt"),Yqr.forEach(t),yOe=r(GEe," \u2014 "),G$=n(GEe,"A",{href:!0});var Kqr=s(G$);LOe=r(Kqr,"DPTConfig"),Kqr.forEach(t),xOe=r(GEe," (DPT model)"),GEe.forEach(t),$Oe=i(L),zf=n(L,"LI",{});var OEe=s(zf);Aee=n(OEe,"STRONG",{});var Zqr=s(Aee);kOe=r(Zqr,"electra"),Zqr.forEach(t),SOe=r(OEe," \u2014 "),O$=n(OEe,"A",{href:!0});var eNr=s(O$);ROe=r(eNr,"ElectraConfig"),eNr.forEach(t),BOe=r(OEe," (ELECTRA model)"),OEe.forEach(t),POe=i(L),Qf=n(L,"LI",{});var VEe=s(Qf);yee=n(VEe,"STRONG",{});var oNr=s(yee);IOe=r(oNr,"encoder-decoder"),oNr.forEach(t),qOe=r(VEe," \u2014 "),V$=n(VEe,"A",{href:!0});var rNr=s(V$);NOe=r(rNr,"EncoderDecoderConfig"),rNr.forEach(t),jOe=r(VEe," (Encoder decoder model)"),VEe.forEach(t),DOe=i(L),Wf=n(L,"LI",{});var XEe=s(Wf);Lee=n(XEe,"STRONG",{});var tNr=s(Lee);GOe=r(tNr,"flaubert"),tNr.forEach(t),OOe=r(XEe," \u2014 "),X$=n(XEe,"A",{href:!0});var aNr=s(X$);VOe=r(aNr,"FlaubertConfig"),aNr.forEach(t),XOe=r(XEe," (FlauBERT model)"),XEe.forEach(t),zOe=i(L),Hf=n(L,"LI",{});var zEe=s(Hf);xee=n(zEe,"STRONG",{});var nNr=s(xee);QOe=r(nNr,"flava"),nNr.forEach(t),WOe=r(zEe," \u2014 "),z$=n(zEe,"A",{href:!0});var sNr=s(z$);HOe=r(sNr,"FlavaConfig"),sNr.forEach(t),UOe=r(zEe," (Flava model)"),zEe.forEach(t),JOe=i(L),Uf=n(L,"LI",{});var QEe=s(Uf);$ee=n(QEe,"STRONG",{});var lNr=s($ee);YOe=r(lNr,"fnet"),lNr.forEach(t),KOe=r(QEe," \u2014 "),Q$=n(QEe,"A",{href:!0});var iNr=s(Q$);ZOe=r(iNr,"FNetConfig"),iNr.forEach(t),eVe=r(QEe," (FNet model)"),QEe.forEach(t),oVe=i(L),Jf=n(L,"LI",{});var WEe=s(Jf);kee=n(WEe,"STRONG",{});var dNr=s(kee);rVe=r(dNr,"fsmt"),dNr.forEach(t),tVe=r(WEe," \u2014 "),W$=n(WEe,"A",{href:!0});var cNr=s(W$);aVe=r(cNr,"FSMTConfig"),cNr.forEach(t),nVe=r(WEe," (FairSeq Machine-Translation model)"),WEe.forEach(t),sVe=i(L),Yf=n(L,"LI",{});var HEe=s(Yf);See=n(HEe,"STRONG",{});var fNr=s(See);lVe=r(fNr,"funnel"),fNr.forEach(t),iVe=r(HEe," \u2014 "),H$=n(HEe,"A",{href:!0});var mNr=s(H$);dVe=r(mNr,"FunnelConfig"),mNr.forEach(t),cVe=r(HEe," (Funnel Transformer model)"),HEe.forEach(t),fVe=i(L),Kf=n(L,"LI",{});var UEe=s(Kf);Ree=n(UEe,"STRONG",{});var gNr=s(Ree);mVe=r(gNr,"glpn"),gNr.forEach(t),gVe=r(UEe," \u2014 "),U$=n(UEe,"A",{href:!0});var hNr=s(U$);hVe=r(hNr,"GLPNConfig"),hNr.forEach(t),pVe=r(UEe," (GLPN model)"),UEe.forEach(t),uVe=i(L),Zf=n(L,"LI",{});var JEe=s(Zf);Bee=n(JEe,"STRONG",{});var pNr=s(Bee);_Ve=r(pNr,"gpt2"),pNr.forEach(t),bVe=r(JEe," \u2014 "),J$=n(JEe,"A",{href:!0});var uNr=s(J$);vVe=r(uNr,"GPT2Config"),uNr.forEach(t),FVe=r(JEe," (OpenAI GPT-2 model)"),JEe.forEach(t),TVe=i(L),em=n(L,"LI",{});var YEe=s(em);Pee=n(YEe,"STRONG",{});var _Nr=s(Pee);MVe=r(_Nr,"gpt_neo"),_Nr.forEach(t),EVe=r(YEe," \u2014 "),Y$=n(YEe,"A",{href:!0});var bNr=s(Y$);CVe=r(bNr,"GPTNeoConfig"),bNr.forEach(t),wVe=r(YEe," (GPT Neo model)"),YEe.forEach(t),AVe=i(L),om=n(L,"LI",{});var KEe=s(om);Iee=n(KEe,"STRONG",{});var vNr=s(Iee);yVe=r(vNr,"gptj"),vNr.forEach(t),LVe=r(KEe," \u2014 "),K$=n(KEe,"A",{href:!0});var FNr=s(K$);xVe=r(FNr,"GPTJConfig"),FNr.forEach(t),$Ve=r(KEe," (GPT-J model)"),KEe.forEach(t),kVe=i(L),rm=n(L,"LI",{});var ZEe=s(rm);qee=n(ZEe,"STRONG",{});var TNr=s(qee);SVe=r(TNr,"hubert"),TNr.forEach(t),RVe=r(ZEe," \u2014 "),Z$=n(ZEe,"A",{href:!0});var MNr=s(Z$);BVe=r(MNr,"HubertConfig"),MNr.forEach(t),PVe=r(ZEe," (Hubert model)"),ZEe.forEach(t),IVe=i(L),tm=n(L,"LI",{});var eCe=s(tm);Nee=n(eCe,"STRONG",{});var ENr=s(Nee);qVe=r(ENr,"ibert"),ENr.forEach(t),NVe=r(eCe," \u2014 "),ek=n(eCe,"A",{href:!0});var CNr=s(ek);jVe=r(CNr,"IBertConfig"),CNr.forEach(t),DVe=r(eCe," (I-BERT model)"),eCe.forEach(t),GVe=i(L),am=n(L,"LI",{});var oCe=s(am);jee=n(oCe,"STRONG",{});var wNr=s(jee);OVe=r(wNr,"imagegpt"),wNr.forEach(t),VVe=r(oCe," \u2014 "),ok=n(oCe,"A",{href:!0});var ANr=s(ok);XVe=r(ANr,"ImageGPTConfig"),ANr.forEach(t),zVe=r(oCe," (ImageGPT model)"),oCe.forEach(t),QVe=i(L),nm=n(L,"LI",{});var rCe=s(nm);Dee=n(rCe,"STRONG",{});var yNr=s(Dee);WVe=r(yNr,"layoutlm"),yNr.forEach(t),HVe=r(rCe," \u2014 "),rk=n(rCe,"A",{href:!0});var LNr=s(rk);UVe=r(LNr,"LayoutLMConfig"),LNr.forEach(t),JVe=r(rCe," (LayoutLM model)"),rCe.forEach(t),YVe=i(L),sm=n(L,"LI",{});var tCe=s(sm);Gee=n(tCe,"STRONG",{});var xNr=s(Gee);KVe=r(xNr,"layoutlmv2"),xNr.forEach(t),ZVe=r(tCe," \u2014 "),tk=n(tCe,"A",{href:!0});var $Nr=s(tk);eXe=r($Nr,"LayoutLMv2Config"),$Nr.forEach(t),oXe=r(tCe," (LayoutLMv2 model)"),tCe.forEach(t),rXe=i(L),lm=n(L,"LI",{});var aCe=s(lm);Oee=n(aCe,"STRONG",{});var kNr=s(Oee);tXe=r(kNr,"led"),kNr.forEach(t),aXe=r(aCe," \u2014 "),ak=n(aCe,"A",{href:!0});var SNr=s(ak);nXe=r(SNr,"LEDConfig"),SNr.forEach(t),sXe=r(aCe," (LED model)"),aCe.forEach(t),lXe=i(L),im=n(L,"LI",{});var nCe=s(im);Vee=n(nCe,"STRONG",{});var RNr=s(Vee);iXe=r(RNr,"longformer"),RNr.forEach(t),dXe=r(nCe," \u2014 "),nk=n(nCe,"A",{href:!0});var BNr=s(nk);cXe=r(BNr,"LongformerConfig"),BNr.forEach(t),fXe=r(nCe," (Longformer model)"),nCe.forEach(t),mXe=i(L),dm=n(L,"LI",{});var sCe=s(dm);Xee=n(sCe,"STRONG",{});var PNr=s(Xee);gXe=r(PNr,"luke"),PNr.forEach(t),hXe=r(sCe," \u2014 "),sk=n(sCe,"A",{href:!0});var INr=s(sk);pXe=r(INr,"LukeConfig"),INr.forEach(t),uXe=r(sCe," (LUKE model)"),sCe.forEach(t),_Xe=i(L),cm=n(L,"LI",{});var lCe=s(cm);zee=n(lCe,"STRONG",{});var qNr=s(zee);bXe=r(qNr,"lxmert"),qNr.forEach(t),vXe=r(lCe," \u2014 "),lk=n(lCe,"A",{href:!0});var NNr=s(lk);FXe=r(NNr,"LxmertConfig"),NNr.forEach(t),TXe=r(lCe," (LXMERT model)"),lCe.forEach(t),MXe=i(L),fm=n(L,"LI",{});var iCe=s(fm);Qee=n(iCe,"STRONG",{});var jNr=s(Qee);EXe=r(jNr,"m2m_100"),jNr.forEach(t),CXe=r(iCe," \u2014 "),ik=n(iCe,"A",{href:!0});var DNr=s(ik);wXe=r(DNr,"M2M100Config"),DNr.forEach(t),AXe=r(iCe," (M2M100 model)"),iCe.forEach(t),yXe=i(L),mm=n(L,"LI",{});var dCe=s(mm);Wee=n(dCe,"STRONG",{});var GNr=s(Wee);LXe=r(GNr,"marian"),GNr.forEach(t),xXe=r(dCe," \u2014 "),dk=n(dCe,"A",{href:!0});var ONr=s(dk);$Xe=r(ONr,"MarianConfig"),ONr.forEach(t),kXe=r(dCe," (Marian model)"),dCe.forEach(t),SXe=i(L),gm=n(L,"LI",{});var cCe=s(gm);Hee=n(cCe,"STRONG",{});var VNr=s(Hee);RXe=r(VNr,"maskformer"),VNr.forEach(t),BXe=r(cCe," \u2014 "),ck=n(cCe,"A",{href:!0});var XNr=s(ck);PXe=r(XNr,"MaskFormerConfig"),XNr.forEach(t),IXe=r(cCe," (MaskFormer model)"),cCe.forEach(t),qXe=i(L),hm=n(L,"LI",{});var fCe=s(hm);Uee=n(fCe,"STRONG",{});var zNr=s(Uee);NXe=r(zNr,"mbart"),zNr.forEach(t),jXe=r(fCe," \u2014 "),fk=n(fCe,"A",{href:!0});var QNr=s(fk);DXe=r(QNr,"MBartConfig"),QNr.forEach(t),GXe=r(fCe," (mBART model)"),fCe.forEach(t),OXe=i(L),pm=n(L,"LI",{});var mCe=s(pm);Jee=n(mCe,"STRONG",{});var WNr=s(Jee);VXe=r(WNr,"megatron-bert"),WNr.forEach(t),XXe=r(mCe," \u2014 "),mk=n(mCe,"A",{href:!0});var HNr=s(mk);zXe=r(HNr,"MegatronBertConfig"),HNr.forEach(t),QXe=r(mCe," (MegatronBert model)"),mCe.forEach(t),WXe=i(L),um=n(L,"LI",{});var gCe=s(um);Yee=n(gCe,"STRONG",{});var UNr=s(Yee);HXe=r(UNr,"mobilebert"),UNr.forEach(t),UXe=r(gCe," \u2014 "),gk=n(gCe,"A",{href:!0});var JNr=s(gk);JXe=r(JNr,"MobileBertConfig"),JNr.forEach(t),YXe=r(gCe," (MobileBERT model)"),gCe.forEach(t),KXe=i(L),_m=n(L,"LI",{});var hCe=s(_m);Kee=n(hCe,"STRONG",{});var YNr=s(Kee);ZXe=r(YNr,"mpnet"),YNr.forEach(t),eze=r(hCe," \u2014 "),hk=n(hCe,"A",{href:!0});var KNr=s(hk);oze=r(KNr,"MPNetConfig"),KNr.forEach(t),rze=r(hCe," (MPNet model)"),hCe.forEach(t),tze=i(L),bm=n(L,"LI",{});var pCe=s(bm);Zee=n(pCe,"STRONG",{});var ZNr=s(Zee);aze=r(ZNr,"mt5"),ZNr.forEach(t),nze=r(pCe," \u2014 "),pk=n(pCe,"A",{href:!0});var ejr=s(pk);sze=r(ejr,"MT5Config"),ejr.forEach(t),lze=r(pCe," (mT5 model)"),pCe.forEach(t),ize=i(L),vm=n(L,"LI",{});var uCe=s(vm);eoe=n(uCe,"STRONG",{});var ojr=s(eoe);dze=r(ojr,"nystromformer"),ojr.forEach(t),cze=r(uCe," \u2014 "),uk=n(uCe,"A",{href:!0});var rjr=s(uk);fze=r(rjr,"NystromformerConfig"),rjr.forEach(t),mze=r(uCe," (Nystromformer model)"),uCe.forEach(t),gze=i(L),Fm=n(L,"LI",{});var _Ce=s(Fm);ooe=n(_Ce,"STRONG",{});var tjr=s(ooe);hze=r(tjr,"openai-gpt"),tjr.forEach(t),pze=r(_Ce," \u2014 "),_k=n(_Ce,"A",{href:!0});var ajr=s(_k);uze=r(ajr,"OpenAIGPTConfig"),ajr.forEach(t),_ze=r(_Ce," (OpenAI GPT model)"),_Ce.forEach(t),bze=i(L),Tm=n(L,"LI",{});var bCe=s(Tm);roe=n(bCe,"STRONG",{});var njr=s(roe);vze=r(njr,"pegasus"),njr.forEach(t),Fze=r(bCe," \u2014 "),bk=n(bCe,"A",{href:!0});var sjr=s(bk);Tze=r(sjr,"PegasusConfig"),sjr.forEach(t),Mze=r(bCe," (Pegasus model)"),bCe.forEach(t),Eze=i(L),Mm=n(L,"LI",{});var vCe=s(Mm);toe=n(vCe,"STRONG",{});var ljr=s(toe);Cze=r(ljr,"perceiver"),ljr.forEach(t),wze=r(vCe," \u2014 "),vk=n(vCe,"A",{href:!0});var ijr=s(vk);Aze=r(ijr,"PerceiverConfig"),ijr.forEach(t),yze=r(vCe," (Perceiver model)"),vCe.forEach(t),Lze=i(L),Em=n(L,"LI",{});var FCe=s(Em);aoe=n(FCe,"STRONG",{});var djr=s(aoe);xze=r(djr,"plbart"),djr.forEach(t),$ze=r(FCe," \u2014 "),Fk=n(FCe,"A",{href:!0});var cjr=s(Fk);kze=r(cjr,"PLBartConfig"),cjr.forEach(t),Sze=r(FCe," (PLBart model)"),FCe.forEach(t),Rze=i(L),Cm=n(L,"LI",{});var TCe=s(Cm);noe=n(TCe,"STRONG",{});var fjr=s(noe);Bze=r(fjr,"poolformer"),fjr.forEach(t),Pze=r(TCe," \u2014 "),Tk=n(TCe,"A",{href:!0});var mjr=s(Tk);Ize=r(mjr,"PoolFormerConfig"),mjr.forEach(t),qze=r(TCe," (PoolFormer model)"),TCe.forEach(t),Nze=i(L),wm=n(L,"LI",{});var MCe=s(wm);soe=n(MCe,"STRONG",{});var gjr=s(soe);jze=r(gjr,"prophetnet"),gjr.forEach(t),Dze=r(MCe," \u2014 "),Mk=n(MCe,"A",{href:!0});var hjr=s(Mk);Gze=r(hjr,"ProphetNetConfig"),hjr.forEach(t),Oze=r(MCe," (ProphetNet model)"),MCe.forEach(t),Vze=i(L),Am=n(L,"LI",{});var ECe=s(Am);loe=n(ECe,"STRONG",{});var pjr=s(loe);Xze=r(pjr,"qdqbert"),pjr.forEach(t),zze=r(ECe," \u2014 "),Ek=n(ECe,"A",{href:!0});var ujr=s(Ek);Qze=r(ujr,"QDQBertConfig"),ujr.forEach(t),Wze=r(ECe," (QDQBert model)"),ECe.forEach(t),Hze=i(L),ym=n(L,"LI",{});var CCe=s(ym);ioe=n(CCe,"STRONG",{});var _jr=s(ioe);Uze=r(_jr,"rag"),_jr.forEach(t),Jze=r(CCe," \u2014 "),Ck=n(CCe,"A",{href:!0});var bjr=s(Ck);Yze=r(bjr,"RagConfig"),bjr.forEach(t),Kze=r(CCe," (RAG model)"),CCe.forEach(t),Zze=i(L),Lm=n(L,"LI",{});var wCe=s(Lm);doe=n(wCe,"STRONG",{});var vjr=s(doe);eQe=r(vjr,"realm"),vjr.forEach(t),oQe=r(wCe," \u2014 "),wk=n(wCe,"A",{href:!0});var Fjr=s(wk);rQe=r(Fjr,"RealmConfig"),Fjr.forEach(t),tQe=r(wCe," (Realm model)"),wCe.forEach(t),aQe=i(L),xm=n(L,"LI",{});var ACe=s(xm);coe=n(ACe,"STRONG",{});var Tjr=s(coe);nQe=r(Tjr,"reformer"),Tjr.forEach(t),sQe=r(ACe," \u2014 "),Ak=n(ACe,"A",{href:!0});var Mjr=s(Ak);lQe=r(Mjr,"ReformerConfig"),Mjr.forEach(t),iQe=r(ACe," (Reformer model)"),ACe.forEach(t),dQe=i(L),$m=n(L,"LI",{});var yCe=s($m);foe=n(yCe,"STRONG",{});var Ejr=s(foe);cQe=r(Ejr,"regnet"),Ejr.forEach(t),fQe=r(yCe," \u2014 "),yk=n(yCe,"A",{href:!0});var Cjr=s(yk);mQe=r(Cjr,"RegNetConfig"),Cjr.forEach(t),gQe=r(yCe," (RegNet model)"),yCe.forEach(t),hQe=i(L),km=n(L,"LI",{});var LCe=s(km);moe=n(LCe,"STRONG",{});var wjr=s(moe);pQe=r(wjr,"rembert"),wjr.forEach(t),uQe=r(LCe," \u2014 "),Lk=n(LCe,"A",{href:!0});var Ajr=s(Lk);_Qe=r(Ajr,"RemBertConfig"),Ajr.forEach(t),bQe=r(LCe," (RemBERT model)"),LCe.forEach(t),vQe=i(L),Sm=n(L,"LI",{});var xCe=s(Sm);goe=n(xCe,"STRONG",{});var yjr=s(goe);FQe=r(yjr,"resnet"),yjr.forEach(t),TQe=r(xCe," \u2014 "),xk=n(xCe,"A",{href:!0});var Ljr=s(xk);MQe=r(Ljr,"ResNetConfig"),Ljr.forEach(t),EQe=r(xCe," (ResNet model)"),xCe.forEach(t),CQe=i(L),Rm=n(L,"LI",{});var $Ce=s(Rm);hoe=n($Ce,"STRONG",{});var xjr=s(hoe);wQe=r(xjr,"retribert"),xjr.forEach(t),AQe=r($Ce," \u2014 "),$k=n($Ce,"A",{href:!0});var $jr=s($k);yQe=r($jr,"RetriBertConfig"),$jr.forEach(t),LQe=r($Ce," (RetriBERT model)"),$Ce.forEach(t),xQe=i(L),Bm=n(L,"LI",{});var kCe=s(Bm);poe=n(kCe,"STRONG",{});var kjr=s(poe);$Qe=r(kjr,"roberta"),kjr.forEach(t),kQe=r(kCe," \u2014 "),kk=n(kCe,"A",{href:!0});var Sjr=s(kk);SQe=r(Sjr,"RobertaConfig"),Sjr.forEach(t),RQe=r(kCe," (RoBERTa model)"),kCe.forEach(t),BQe=i(L),Pm=n(L,"LI",{});var SCe=s(Pm);uoe=n(SCe,"STRONG",{});var Rjr=s(uoe);PQe=r(Rjr,"roformer"),Rjr.forEach(t),IQe=r(SCe," \u2014 "),Sk=n(SCe,"A",{href:!0});var Bjr=s(Sk);qQe=r(Bjr,"RoFormerConfig"),Bjr.forEach(t),NQe=r(SCe," (RoFormer model)"),SCe.forEach(t),jQe=i(L),Im=n(L,"LI",{});var RCe=s(Im);_oe=n(RCe,"STRONG",{});var Pjr=s(_oe);DQe=r(Pjr,"segformer"),Pjr.forEach(t),GQe=r(RCe," \u2014 "),Rk=n(RCe,"A",{href:!0});var Ijr=s(Rk);OQe=r(Ijr,"SegformerConfig"),Ijr.forEach(t),VQe=r(RCe," (SegFormer model)"),RCe.forEach(t),XQe=i(L),qm=n(L,"LI",{});var BCe=s(qm);boe=n(BCe,"STRONG",{});var qjr=s(boe);zQe=r(qjr,"sew"),qjr.forEach(t),QQe=r(BCe," \u2014 "),Bk=n(BCe,"A",{href:!0});var Njr=s(Bk);WQe=r(Njr,"SEWConfig"),Njr.forEach(t),HQe=r(BCe," (SEW model)"),BCe.forEach(t),UQe=i(L),Nm=n(L,"LI",{});var PCe=s(Nm);voe=n(PCe,"STRONG",{});var jjr=s(voe);JQe=r(jjr,"sew-d"),jjr.forEach(t),YQe=r(PCe," \u2014 "),Pk=n(PCe,"A",{href:!0});var Djr=s(Pk);KQe=r(Djr,"SEWDConfig"),Djr.forEach(t),ZQe=r(PCe," (SEW-D model)"),PCe.forEach(t),eWe=i(L),jm=n(L,"LI",{});var ICe=s(jm);Foe=n(ICe,"STRONG",{});var Gjr=s(Foe);oWe=r(Gjr,"speech-encoder-decoder"),Gjr.forEach(t),rWe=r(ICe," \u2014 "),Ik=n(ICe,"A",{href:!0});var Ojr=s(Ik);tWe=r(Ojr,"SpeechEncoderDecoderConfig"),Ojr.forEach(t),aWe=r(ICe," (Speech Encoder decoder model)"),ICe.forEach(t),nWe=i(L),Dm=n(L,"LI",{});var qCe=s(Dm);Toe=n(qCe,"STRONG",{});var Vjr=s(Toe);sWe=r(Vjr,"speech_to_text"),Vjr.forEach(t),lWe=r(qCe," \u2014 "),qk=n(qCe,"A",{href:!0});var Xjr=s(qk);iWe=r(Xjr,"Speech2TextConfig"),Xjr.forEach(t),dWe=r(qCe," (Speech2Text model)"),qCe.forEach(t),cWe=i(L),Gm=n(L,"LI",{});var NCe=s(Gm);Moe=n(NCe,"STRONG",{});var zjr=s(Moe);fWe=r(zjr,"speech_to_text_2"),zjr.forEach(t),mWe=r(NCe," \u2014 "),Nk=n(NCe,"A",{href:!0});var Qjr=s(Nk);gWe=r(Qjr,"Speech2Text2Config"),Qjr.forEach(t),hWe=r(NCe," (Speech2Text2 model)"),NCe.forEach(t),pWe=i(L),Om=n(L,"LI",{});var jCe=s(Om);Eoe=n(jCe,"STRONG",{});var Wjr=s(Eoe);uWe=r(Wjr,"splinter"),Wjr.forEach(t),_We=r(jCe," \u2014 "),jk=n(jCe,"A",{href:!0});var Hjr=s(jk);bWe=r(Hjr,"SplinterConfig"),Hjr.forEach(t),vWe=r(jCe," (Splinter model)"),jCe.forEach(t),FWe=i(L),Vm=n(L,"LI",{});var DCe=s(Vm);Coe=n(DCe,"STRONG",{});var Ujr=s(Coe);TWe=r(Ujr,"squeezebert"),Ujr.forEach(t),MWe=r(DCe," \u2014 "),Dk=n(DCe,"A",{href:!0});var Jjr=s(Dk);EWe=r(Jjr,"SqueezeBertConfig"),Jjr.forEach(t),CWe=r(DCe," (SqueezeBERT model)"),DCe.forEach(t),wWe=i(L),Xm=n(L,"LI",{});var GCe=s(Xm);woe=n(GCe,"STRONG",{});var Yjr=s(woe);AWe=r(Yjr,"swin"),Yjr.forEach(t),yWe=r(GCe," \u2014 "),Gk=n(GCe,"A",{href:!0});var Kjr=s(Gk);LWe=r(Kjr,"SwinConfig"),Kjr.forEach(t),xWe=r(GCe," (Swin model)"),GCe.forEach(t),$We=i(L),zm=n(L,"LI",{});var OCe=s(zm);Aoe=n(OCe,"STRONG",{});var Zjr=s(Aoe);kWe=r(Zjr,"t5"),Zjr.forEach(t),SWe=r(OCe," \u2014 "),Ok=n(OCe,"A",{href:!0});var eDr=s(Ok);RWe=r(eDr,"T5Config"),eDr.forEach(t),BWe=r(OCe," (T5 model)"),OCe.forEach(t),PWe=i(L),Qm=n(L,"LI",{});var VCe=s(Qm);yoe=n(VCe,"STRONG",{});var oDr=s(yoe);IWe=r(oDr,"tapas"),oDr.forEach(t),qWe=r(VCe," \u2014 "),Vk=n(VCe,"A",{href:!0});var rDr=s(Vk);NWe=r(rDr,"TapasConfig"),rDr.forEach(t),jWe=r(VCe," (TAPAS model)"),VCe.forEach(t),DWe=i(L),Wm=n(L,"LI",{});var XCe=s(Wm);Loe=n(XCe,"STRONG",{});var tDr=s(Loe);GWe=r(tDr,"tapex"),tDr.forEach(t),OWe=r(XCe," \u2014 "),Xk=n(XCe,"A",{href:!0});var aDr=s(Xk);VWe=r(aDr,"BartConfig"),aDr.forEach(t),XWe=r(XCe," (TAPEX model)"),XCe.forEach(t),zWe=i(L),Hm=n(L,"LI",{});var zCe=s(Hm);xoe=n(zCe,"STRONG",{});var nDr=s(xoe);QWe=r(nDr,"transfo-xl"),nDr.forEach(t),WWe=r(zCe," \u2014 "),zk=n(zCe,"A",{href:!0});var sDr=s(zk);HWe=r(sDr,"TransfoXLConfig"),sDr.forEach(t),UWe=r(zCe," (Transformer-XL model)"),zCe.forEach(t),JWe=i(L),Um=n(L,"LI",{});var QCe=s(Um);$oe=n(QCe,"STRONG",{});var lDr=s($oe);YWe=r(lDr,"trocr"),lDr.forEach(t),KWe=r(QCe," \u2014 "),Qk=n(QCe,"A",{href:!0});var iDr=s(Qk);ZWe=r(iDr,"TrOCRConfig"),iDr.forEach(t),eHe=r(QCe," (TrOCR model)"),QCe.forEach(t),oHe=i(L),Jm=n(L,"LI",{});var WCe=s(Jm);koe=n(WCe,"STRONG",{});var dDr=s(koe);rHe=r(dDr,"unispeech"),dDr.forEach(t),tHe=r(WCe," \u2014 "),Wk=n(WCe,"A",{href:!0});var cDr=s(Wk);aHe=r(cDr,"UniSpeechConfig"),cDr.forEach(t),nHe=r(WCe," (UniSpeech model)"),WCe.forEach(t),sHe=i(L),Ym=n(L,"LI",{});var HCe=s(Ym);Soe=n(HCe,"STRONG",{});var fDr=s(Soe);lHe=r(fDr,"unispeech-sat"),fDr.forEach(t),iHe=r(HCe," \u2014 "),Hk=n(HCe,"A",{href:!0});var mDr=s(Hk);dHe=r(mDr,"UniSpeechSatConfig"),mDr.forEach(t),cHe=r(HCe," (UniSpeechSat model)"),HCe.forEach(t),fHe=i(L),Km=n(L,"LI",{});var UCe=s(Km);Roe=n(UCe,"STRONG",{});var gDr=s(Roe);mHe=r(gDr,"van"),gDr.forEach(t),gHe=r(UCe," \u2014 "),Uk=n(UCe,"A",{href:!0});var hDr=s(Uk);hHe=r(hDr,"VanConfig"),hDr.forEach(t),pHe=r(UCe," (VAN model)"),UCe.forEach(t),uHe=i(L),Zm=n(L,"LI",{});var JCe=s(Zm);Boe=n(JCe,"STRONG",{});var pDr=s(Boe);_He=r(pDr,"vilt"),pDr.forEach(t),bHe=r(JCe," \u2014 "),Jk=n(JCe,"A",{href:!0});var uDr=s(Jk);vHe=r(uDr,"ViltConfig"),uDr.forEach(t),FHe=r(JCe," (ViLT model)"),JCe.forEach(t),THe=i(L),eg=n(L,"LI",{});var YCe=s(eg);Poe=n(YCe,"STRONG",{});var _Dr=s(Poe);MHe=r(_Dr,"vision-encoder-decoder"),_Dr.forEach(t),EHe=r(YCe," \u2014 "),Yk=n(YCe,"A",{href:!0});var bDr=s(Yk);CHe=r(bDr,"VisionEncoderDecoderConfig"),bDr.forEach(t),wHe=r(YCe," (Vision Encoder decoder model)"),YCe.forEach(t),AHe=i(L),og=n(L,"LI",{});var KCe=s(og);Ioe=n(KCe,"STRONG",{});var vDr=s(Ioe);yHe=r(vDr,"vision-text-dual-encoder"),vDr.forEach(t),LHe=r(KCe," \u2014 "),Kk=n(KCe,"A",{href:!0});var FDr=s(Kk);xHe=r(FDr,"VisionTextDualEncoderConfig"),FDr.forEach(t),$He=r(KCe," (VisionTextDualEncoder model)"),KCe.forEach(t),kHe=i(L),rg=n(L,"LI",{});var ZCe=s(rg);qoe=n(ZCe,"STRONG",{});var TDr=s(qoe);SHe=r(TDr,"visual_bert"),TDr.forEach(t),RHe=r(ZCe," \u2014 "),Zk=n(ZCe,"A",{href:!0});var MDr=s(Zk);BHe=r(MDr,"VisualBertConfig"),MDr.forEach(t),PHe=r(ZCe," (VisualBert model)"),ZCe.forEach(t),IHe=i(L),tg=n(L,"LI",{});var e3e=s(tg);Noe=n(e3e,"STRONG",{});var EDr=s(Noe);qHe=r(EDr,"vit"),EDr.forEach(t),NHe=r(e3e," \u2014 "),eS=n(e3e,"A",{href:!0});var CDr=s(eS);jHe=r(CDr,"ViTConfig"),CDr.forEach(t),DHe=r(e3e," (ViT model)"),e3e.forEach(t),GHe=i(L),ag=n(L,"LI",{});var o3e=s(ag);joe=n(o3e,"STRONG",{});var wDr=s(joe);OHe=r(wDr,"vit_mae"),wDr.forEach(t),VHe=r(o3e," \u2014 "),oS=n(o3e,"A",{href:!0});var ADr=s(oS);XHe=r(ADr,"ViTMAEConfig"),ADr.forEach(t),zHe=r(o3e," (ViTMAE model)"),o3e.forEach(t),QHe=i(L),ng=n(L,"LI",{});var r3e=s(ng);Doe=n(r3e,"STRONG",{});var yDr=s(Doe);WHe=r(yDr,"wav2vec2"),yDr.forEach(t),HHe=r(r3e," \u2014 "),rS=n(r3e,"A",{href:!0});var LDr=s(rS);UHe=r(LDr,"Wav2Vec2Config"),LDr.forEach(t),JHe=r(r3e," (Wav2Vec2 model)"),r3e.forEach(t),YHe=i(L),sg=n(L,"LI",{});var t3e=s(sg);Goe=n(t3e,"STRONG",{});var xDr=s(Goe);KHe=r(xDr,"wavlm"),xDr.forEach(t),ZHe=r(t3e," \u2014 "),tS=n(t3e,"A",{href:!0});var $Dr=s(tS);eUe=r($Dr,"WavLMConfig"),$Dr.forEach(t),oUe=r(t3e," (WavLM model)"),t3e.forEach(t),rUe=i(L),lg=n(L,"LI",{});var a3e=s(lg);Ooe=n(a3e,"STRONG",{});var kDr=s(Ooe);tUe=r(kDr,"xglm"),kDr.forEach(t),aUe=r(a3e," \u2014 "),aS=n(a3e,"A",{href:!0});var SDr=s(aS);nUe=r(SDr,"XGLMConfig"),SDr.forEach(t),sUe=r(a3e," (XGLM model)"),a3e.forEach(t),lUe=i(L),ig=n(L,"LI",{});var n3e=s(ig);Voe=n(n3e,"STRONG",{});var RDr=s(Voe);iUe=r(RDr,"xlm"),RDr.forEach(t),dUe=r(n3e," \u2014 "),nS=n(n3e,"A",{href:!0});var BDr=s(nS);cUe=r(BDr,"XLMConfig"),BDr.forEach(t),fUe=r(n3e," (XLM model)"),n3e.forEach(t),mUe=i(L),dg=n(L,"LI",{});var s3e=s(dg);Xoe=n(s3e,"STRONG",{});var PDr=s(Xoe);gUe=r(PDr,"xlm-prophetnet"),PDr.forEach(t),hUe=r(s3e," \u2014 "),sS=n(s3e,"A",{href:!0});var IDr=s(sS);pUe=r(IDr,"XLMProphetNetConfig"),IDr.forEach(t),uUe=r(s3e," (XLMProphetNet model)"),s3e.forEach(t),_Ue=i(L),cg=n(L,"LI",{});var l3e=s(cg);zoe=n(l3e,"STRONG",{});var qDr=s(zoe);bUe=r(qDr,"xlm-roberta"),qDr.forEach(t),vUe=r(l3e," \u2014 "),lS=n(l3e,"A",{href:!0});var NDr=s(lS);FUe=r(NDr,"XLMRobertaConfig"),NDr.forEach(t),TUe=r(l3e," (XLM-RoBERTa model)"),l3e.forEach(t),MUe=i(L),fg=n(L,"LI",{});var i3e=s(fg);Qoe=n(i3e,"STRONG",{});var jDr=s(Qoe);EUe=r(jDr,"xlm-roberta-xl"),jDr.forEach(t),CUe=r(i3e," \u2014 "),iS=n(i3e,"A",{href:!0});var DDr=s(iS);wUe=r(DDr,"XLMRobertaXLConfig"),DDr.forEach(t),AUe=r(i3e," (XLM-RoBERTa-XL model)"),i3e.forEach(t),yUe=i(L),mg=n(L,"LI",{});var d3e=s(mg);Woe=n(d3e,"STRONG",{});var GDr=s(Woe);LUe=r(GDr,"xlnet"),GDr.forEach(t),xUe=r(d3e," \u2014 "),dS=n(d3e,"A",{href:!0});var ODr=s(dS);$Ue=r(ODr,"XLNetConfig"),ODr.forEach(t),kUe=r(d3e," (XLNet model)"),d3e.forEach(t),SUe=i(L),gg=n(L,"LI",{});var c3e=s(gg);Hoe=n(c3e,"STRONG",{});var VDr=s(Hoe);RUe=r(VDr,"yolos"),VDr.forEach(t),BUe=r(c3e," \u2014 "),cS=n(c3e,"A",{href:!0});var XDr=s(cS);PUe=r(XDr,"YolosConfig"),XDr.forEach(t),IUe=r(c3e," (YOLOS model)"),c3e.forEach(t),qUe=i(L),hg=n(L,"LI",{});var f3e=s(hg);Uoe=n(f3e,"STRONG",{});var zDr=s(Uoe);NUe=r(zDr,"yoso"),zDr.forEach(t),jUe=r(f3e," \u2014 "),fS=n(f3e,"A",{href:!0});var QDr=s(fS);DUe=r(QDr,"YosoConfig"),QDr.forEach(t),GUe=r(f3e," (YOSO model)"),f3e.forEach(t),L.forEach(t),OUe=i(Zr),T(pg.$$.fragment,Zr),Zr.forEach(t),VUe=i(Kr),ug=n(Kr,"DIV",{class:!0});var yqe=s(ug);T(Z0.$$.fragment,yqe),XUe=i(yqe),Joe=n(yqe,"P",{});var WDr=s(Joe);zUe=r(WDr,"Register a new configuration for this class."),WDr.forEach(t),yqe.forEach(t),Kr.forEach(t),$Pe=i(f),_i=n(f,"H2",{class:!0});var Lqe=s(_i);_g=n(Lqe,"A",{id:!0,class:!0,href:!0});var HDr=s(_g);Yoe=n(HDr,"SPAN",{});var UDr=s(Yoe);T(ey.$$.fragment,UDr),UDr.forEach(t),HDr.forEach(t),QUe=i(Lqe),Koe=n(Lqe,"SPAN",{});var JDr=s(Koe);WUe=r(JDr,"AutoTokenizer"),JDr.forEach(t),Lqe.forEach(t),kPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(oy.$$.fragment,Ps),HUe=i(Ps),ry=n(Ps,"P",{});var xqe=s(ry);UUe=r(xqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mS=n(xqe,"A",{href:!0});var YDr=s(mS);JUe=r(YDr,"AutoTokenizer.from_pretrained()"),YDr.forEach(t),YUe=r(xqe," class method."),xqe.forEach(t),KUe=i(Ps),ty=n(Ps,"P",{});var $qe=s(ty);ZUe=r($qe,"This class cannot be instantiated directly using "),Zoe=n($qe,"CODE",{});var KDr=s(Zoe);eJe=r(KDr,"__init__()"),KDr.forEach(t),oJe=r($qe," (throws an error)."),$qe.forEach(t),rJe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(ay.$$.fragment,Is),tJe=i(Is),ere=n(Is,"P",{});var ZDr=s(ere);aJe=r(ZDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZDr.forEach(t),nJe=i(Is),Ca=n(Is,"P",{});var Ww=s(Ca);sJe=r(Ww,"The tokenizer class to instantiate is selected based on the "),ore=n(Ww,"CODE",{});var eGr=s(ore);lJe=r(eGr,"model_type"),eGr.forEach(t),iJe=r(Ww,` property of the config object (either
passed as an argument or loaded from `),rre=n(Ww,"CODE",{});var oGr=s(rre);dJe=r(oGr,"pretrained_model_name_or_path"),oGr.forEach(t),cJe=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tre=n(Ww,"CODE",{});var rGr=s(tre);fJe=r(rGr,"pretrained_model_name_or_path"),rGr.forEach(t),mJe=r(Ww,":"),Ww.forEach(t),gJe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var n9=s(kn);are=n(n9,"STRONG",{});var tGr=s(are);hJe=r(tGr,"albert"),tGr.forEach(t),pJe=r(n9," \u2014 "),gS=n(n9,"A",{href:!0});var aGr=s(gS);uJe=r(aGr,"AlbertTokenizer"),aGr.forEach(t),_Je=r(n9," or "),hS=n(n9,"A",{href:!0});var nGr=s(hS);bJe=r(nGr,"AlbertTokenizerFast"),nGr.forEach(t),vJe=r(n9," (ALBERT model)"),n9.forEach(t),FJe=i(S),Sn=n(S,"LI",{});var s9=s(Sn);nre=n(s9,"STRONG",{});var sGr=s(nre);TJe=r(sGr,"bart"),sGr.forEach(t),MJe=r(s9," \u2014 "),pS=n(s9,"A",{href:!0});var lGr=s(pS);EJe=r(lGr,"BartTokenizer"),lGr.forEach(t),CJe=r(s9," or "),uS=n(s9,"A",{href:!0});var iGr=s(uS);wJe=r(iGr,"BartTokenizerFast"),iGr.forEach(t),AJe=r(s9," (BART model)"),s9.forEach(t),yJe=i(S),Rn=n(S,"LI",{});var l9=s(Rn);sre=n(l9,"STRONG",{});var dGr=s(sre);LJe=r(dGr,"barthez"),dGr.forEach(t),xJe=r(l9," \u2014 "),_S=n(l9,"A",{href:!0});var cGr=s(_S);$Je=r(cGr,"BarthezTokenizer"),cGr.forEach(t),kJe=r(l9," or "),bS=n(l9,"A",{href:!0});var fGr=s(bS);SJe=r(fGr,"BarthezTokenizerFast"),fGr.forEach(t),RJe=r(l9," (BARThez model)"),l9.forEach(t),BJe=i(S),bg=n(S,"LI",{});var m3e=s(bg);lre=n(m3e,"STRONG",{});var mGr=s(lre);PJe=r(mGr,"bartpho"),mGr.forEach(t),IJe=r(m3e," \u2014 "),vS=n(m3e,"A",{href:!0});var gGr=s(vS);qJe=r(gGr,"BartphoTokenizer"),gGr.forEach(t),NJe=r(m3e," (BARTpho model)"),m3e.forEach(t),jJe=i(S),Bn=n(S,"LI",{});var i9=s(Bn);ire=n(i9,"STRONG",{});var hGr=s(ire);DJe=r(hGr,"bert"),hGr.forEach(t),GJe=r(i9," \u2014 "),FS=n(i9,"A",{href:!0});var pGr=s(FS);OJe=r(pGr,"BertTokenizer"),pGr.forEach(t),VJe=r(i9," or "),TS=n(i9,"A",{href:!0});var uGr=s(TS);XJe=r(uGr,"BertTokenizerFast"),uGr.forEach(t),zJe=r(i9," (BERT model)"),i9.forEach(t),QJe=i(S),vg=n(S,"LI",{});var g3e=s(vg);dre=n(g3e,"STRONG",{});var _Gr=s(dre);WJe=r(_Gr,"bert-generation"),_Gr.forEach(t),HJe=r(g3e," \u2014 "),MS=n(g3e,"A",{href:!0});var bGr=s(MS);UJe=r(bGr,"BertGenerationTokenizer"),bGr.forEach(t),JJe=r(g3e," (Bert Generation model)"),g3e.forEach(t),YJe=i(S),Fg=n(S,"LI",{});var h3e=s(Fg);cre=n(h3e,"STRONG",{});var vGr=s(cre);KJe=r(vGr,"bert-japanese"),vGr.forEach(t),ZJe=r(h3e," \u2014 "),ES=n(h3e,"A",{href:!0});var FGr=s(ES);eYe=r(FGr,"BertJapaneseTokenizer"),FGr.forEach(t),oYe=r(h3e," (BertJapanese model)"),h3e.forEach(t),rYe=i(S),Tg=n(S,"LI",{});var p3e=s(Tg);fre=n(p3e,"STRONG",{});var TGr=s(fre);tYe=r(TGr,"bertweet"),TGr.forEach(t),aYe=r(p3e," \u2014 "),CS=n(p3e,"A",{href:!0});var MGr=s(CS);nYe=r(MGr,"BertweetTokenizer"),MGr.forEach(t),sYe=r(p3e," (Bertweet model)"),p3e.forEach(t),lYe=i(S),Pn=n(S,"LI",{});var d9=s(Pn);mre=n(d9,"STRONG",{});var EGr=s(mre);iYe=r(EGr,"big_bird"),EGr.forEach(t),dYe=r(d9," \u2014 "),wS=n(d9,"A",{href:!0});var CGr=s(wS);cYe=r(CGr,"BigBirdTokenizer"),CGr.forEach(t),fYe=r(d9," or "),AS=n(d9,"A",{href:!0});var wGr=s(AS);mYe=r(wGr,"BigBirdTokenizerFast"),wGr.forEach(t),gYe=r(d9," (BigBird model)"),d9.forEach(t),hYe=i(S),In=n(S,"LI",{});var c9=s(In);gre=n(c9,"STRONG",{});var AGr=s(gre);pYe=r(AGr,"bigbird_pegasus"),AGr.forEach(t),uYe=r(c9," \u2014 "),yS=n(c9,"A",{href:!0});var yGr=s(yS);_Ye=r(yGr,"PegasusTokenizer"),yGr.forEach(t),bYe=r(c9," or "),LS=n(c9,"A",{href:!0});var LGr=s(LS);vYe=r(LGr,"PegasusTokenizerFast"),LGr.forEach(t),FYe=r(c9," (BigBirdPegasus model)"),c9.forEach(t),TYe=i(S),qn=n(S,"LI",{});var f9=s(qn);hre=n(f9,"STRONG",{});var xGr=s(hre);MYe=r(xGr,"blenderbot"),xGr.forEach(t),EYe=r(f9," \u2014 "),xS=n(f9,"A",{href:!0});var $Gr=s(xS);CYe=r($Gr,"BlenderbotTokenizer"),$Gr.forEach(t),wYe=r(f9," or "),$S=n(f9,"A",{href:!0});var kGr=s($S);AYe=r(kGr,"BlenderbotTokenizerFast"),kGr.forEach(t),yYe=r(f9," (Blenderbot model)"),f9.forEach(t),LYe=i(S),Mg=n(S,"LI",{});var u3e=s(Mg);pre=n(u3e,"STRONG",{});var SGr=s(pre);xYe=r(SGr,"blenderbot-small"),SGr.forEach(t),$Ye=r(u3e," \u2014 "),kS=n(u3e,"A",{href:!0});var RGr=s(kS);kYe=r(RGr,"BlenderbotSmallTokenizer"),RGr.forEach(t),SYe=r(u3e," (BlenderbotSmall model)"),u3e.forEach(t),RYe=i(S),Eg=n(S,"LI",{});var _3e=s(Eg);ure=n(_3e,"STRONG",{});var BGr=s(ure);BYe=r(BGr,"byt5"),BGr.forEach(t),PYe=r(_3e," \u2014 "),SS=n(_3e,"A",{href:!0});var PGr=s(SS);IYe=r(PGr,"ByT5Tokenizer"),PGr.forEach(t),qYe=r(_3e," (ByT5 model)"),_3e.forEach(t),NYe=i(S),Nn=n(S,"LI",{});var m9=s(Nn);_re=n(m9,"STRONG",{});var IGr=s(_re);jYe=r(IGr,"camembert"),IGr.forEach(t),DYe=r(m9," \u2014 "),RS=n(m9,"A",{href:!0});var qGr=s(RS);GYe=r(qGr,"CamembertTokenizer"),qGr.forEach(t),OYe=r(m9," or "),BS=n(m9,"A",{href:!0});var NGr=s(BS);VYe=r(NGr,"CamembertTokenizerFast"),NGr.forEach(t),XYe=r(m9," (CamemBERT model)"),m9.forEach(t),zYe=i(S),Cg=n(S,"LI",{});var b3e=s(Cg);bre=n(b3e,"STRONG",{});var jGr=s(bre);QYe=r(jGr,"canine"),jGr.forEach(t),WYe=r(b3e," \u2014 "),PS=n(b3e,"A",{href:!0});var DGr=s(PS);HYe=r(DGr,"CanineTokenizer"),DGr.forEach(t),UYe=r(b3e," (Canine model)"),b3e.forEach(t),JYe=i(S),jn=n(S,"LI",{});var g9=s(jn);vre=n(g9,"STRONG",{});var GGr=s(vre);YYe=r(GGr,"clip"),GGr.forEach(t),KYe=r(g9," \u2014 "),IS=n(g9,"A",{href:!0});var OGr=s(IS);ZYe=r(OGr,"CLIPTokenizer"),OGr.forEach(t),eKe=r(g9," or "),qS=n(g9,"A",{href:!0});var VGr=s(qS);oKe=r(VGr,"CLIPTokenizerFast"),VGr.forEach(t),rKe=r(g9," (CLIP model)"),g9.forEach(t),tKe=i(S),Dn=n(S,"LI",{});var h9=s(Dn);Fre=n(h9,"STRONG",{});var XGr=s(Fre);aKe=r(XGr,"convbert"),XGr.forEach(t),nKe=r(h9," \u2014 "),NS=n(h9,"A",{href:!0});var zGr=s(NS);sKe=r(zGr,"ConvBertTokenizer"),zGr.forEach(t),lKe=r(h9," or "),jS=n(h9,"A",{href:!0});var QGr=s(jS);iKe=r(QGr,"ConvBertTokenizerFast"),QGr.forEach(t),dKe=r(h9," (ConvBERT model)"),h9.forEach(t),cKe=i(S),Gn=n(S,"LI",{});var p9=s(Gn);Tre=n(p9,"STRONG",{});var WGr=s(Tre);fKe=r(WGr,"cpm"),WGr.forEach(t),mKe=r(p9," \u2014 "),DS=n(p9,"A",{href:!0});var HGr=s(DS);gKe=r(HGr,"CpmTokenizer"),HGr.forEach(t),hKe=r(p9," or "),GS=n(p9,"A",{href:!0});var UGr=s(GS);pKe=r(UGr,"CpmTokenizerFast"),UGr.forEach(t),uKe=r(p9," (CPM model)"),p9.forEach(t),_Ke=i(S),wg=n(S,"LI",{});var v3e=s(wg);Mre=n(v3e,"STRONG",{});var JGr=s(Mre);bKe=r(JGr,"ctrl"),JGr.forEach(t),vKe=r(v3e," \u2014 "),OS=n(v3e,"A",{href:!0});var YGr=s(OS);FKe=r(YGr,"CTRLTokenizer"),YGr.forEach(t),TKe=r(v3e," (CTRL model)"),v3e.forEach(t),MKe=i(S),On=n(S,"LI",{});var u9=s(On);Ere=n(u9,"STRONG",{});var KGr=s(Ere);EKe=r(KGr,"data2vec-text"),KGr.forEach(t),CKe=r(u9," \u2014 "),VS=n(u9,"A",{href:!0});var ZGr=s(VS);wKe=r(ZGr,"RobertaTokenizer"),ZGr.forEach(t),AKe=r(u9," or "),XS=n(u9,"A",{href:!0});var eOr=s(XS);yKe=r(eOr,"RobertaTokenizerFast"),eOr.forEach(t),LKe=r(u9," (Data2VecText model)"),u9.forEach(t),xKe=i(S),Vn=n(S,"LI",{});var _9=s(Vn);Cre=n(_9,"STRONG",{});var oOr=s(Cre);$Ke=r(oOr,"deberta"),oOr.forEach(t),kKe=r(_9," \u2014 "),zS=n(_9,"A",{href:!0});var rOr=s(zS);SKe=r(rOr,"DebertaTokenizer"),rOr.forEach(t),RKe=r(_9," or "),QS=n(_9,"A",{href:!0});var tOr=s(QS);BKe=r(tOr,"DebertaTokenizerFast"),tOr.forEach(t),PKe=r(_9," (DeBERTa model)"),_9.forEach(t),IKe=i(S),Xn=n(S,"LI",{});var b9=s(Xn);wre=n(b9,"STRONG",{});var aOr=s(wre);qKe=r(aOr,"deberta-v2"),aOr.forEach(t),NKe=r(b9," \u2014 "),WS=n(b9,"A",{href:!0});var nOr=s(WS);jKe=r(nOr,"DebertaV2Tokenizer"),nOr.forEach(t),DKe=r(b9," or "),HS=n(b9,"A",{href:!0});var sOr=s(HS);GKe=r(sOr,"DebertaV2TokenizerFast"),sOr.forEach(t),OKe=r(b9," (DeBERTa-v2 model)"),b9.forEach(t),VKe=i(S),zn=n(S,"LI",{});var v9=s(zn);Are=n(v9,"STRONG",{});var lOr=s(Are);XKe=r(lOr,"distilbert"),lOr.forEach(t),zKe=r(v9," \u2014 "),US=n(v9,"A",{href:!0});var iOr=s(US);QKe=r(iOr,"DistilBertTokenizer"),iOr.forEach(t),WKe=r(v9," or "),JS=n(v9,"A",{href:!0});var dOr=s(JS);HKe=r(dOr,"DistilBertTokenizerFast"),dOr.forEach(t),UKe=r(v9," (DistilBERT model)"),v9.forEach(t),JKe=i(S),Qn=n(S,"LI",{});var F9=s(Qn);yre=n(F9,"STRONG",{});var cOr=s(yre);YKe=r(cOr,"dpr"),cOr.forEach(t),KKe=r(F9," \u2014 "),YS=n(F9,"A",{href:!0});var fOr=s(YS);ZKe=r(fOr,"DPRQuestionEncoderTokenizer"),fOr.forEach(t),eZe=r(F9," or "),KS=n(F9,"A",{href:!0});var mOr=s(KS);oZe=r(mOr,"DPRQuestionEncoderTokenizerFast"),mOr.forEach(t),rZe=r(F9," (DPR model)"),F9.forEach(t),tZe=i(S),Wn=n(S,"LI",{});var T9=s(Wn);Lre=n(T9,"STRONG",{});var gOr=s(Lre);aZe=r(gOr,"electra"),gOr.forEach(t),nZe=r(T9," \u2014 "),ZS=n(T9,"A",{href:!0});var hOr=s(ZS);sZe=r(hOr,"ElectraTokenizer"),hOr.forEach(t),lZe=r(T9," or "),eR=n(T9,"A",{href:!0});var pOr=s(eR);iZe=r(pOr,"ElectraTokenizerFast"),pOr.forEach(t),dZe=r(T9," (ELECTRA model)"),T9.forEach(t),cZe=i(S),Ag=n(S,"LI",{});var F3e=s(Ag);xre=n(F3e,"STRONG",{});var uOr=s(xre);fZe=r(uOr,"flaubert"),uOr.forEach(t),mZe=r(F3e," \u2014 "),oR=n(F3e,"A",{href:!0});var _Or=s(oR);gZe=r(_Or,"FlaubertTokenizer"),_Or.forEach(t),hZe=r(F3e," (FlauBERT model)"),F3e.forEach(t),pZe=i(S),Hn=n(S,"LI",{});var M9=s(Hn);$re=n(M9,"STRONG",{});var bOr=s($re);uZe=r(bOr,"fnet"),bOr.forEach(t),_Ze=r(M9," \u2014 "),rR=n(M9,"A",{href:!0});var vOr=s(rR);bZe=r(vOr,"FNetTokenizer"),vOr.forEach(t),vZe=r(M9," or "),tR=n(M9,"A",{href:!0});var FOr=s(tR);FZe=r(FOr,"FNetTokenizerFast"),FOr.forEach(t),TZe=r(M9," (FNet model)"),M9.forEach(t),MZe=i(S),yg=n(S,"LI",{});var T3e=s(yg);kre=n(T3e,"STRONG",{});var TOr=s(kre);EZe=r(TOr,"fsmt"),TOr.forEach(t),CZe=r(T3e," \u2014 "),aR=n(T3e,"A",{href:!0});var MOr=s(aR);wZe=r(MOr,"FSMTTokenizer"),MOr.forEach(t),AZe=r(T3e," (FairSeq Machine-Translation model)"),T3e.forEach(t),yZe=i(S),Un=n(S,"LI",{});var E9=s(Un);Sre=n(E9,"STRONG",{});var EOr=s(Sre);LZe=r(EOr,"funnel"),EOr.forEach(t),xZe=r(E9," \u2014 "),nR=n(E9,"A",{href:!0});var COr=s(nR);$Ze=r(COr,"FunnelTokenizer"),COr.forEach(t),kZe=r(E9," or "),sR=n(E9,"A",{href:!0});var wOr=s(sR);SZe=r(wOr,"FunnelTokenizerFast"),wOr.forEach(t),RZe=r(E9," (Funnel Transformer model)"),E9.forEach(t),BZe=i(S),Jn=n(S,"LI",{});var C9=s(Jn);Rre=n(C9,"STRONG",{});var AOr=s(Rre);PZe=r(AOr,"gpt2"),AOr.forEach(t),IZe=r(C9," \u2014 "),lR=n(C9,"A",{href:!0});var yOr=s(lR);qZe=r(yOr,"GPT2Tokenizer"),yOr.forEach(t),NZe=r(C9," or "),iR=n(C9,"A",{href:!0});var LOr=s(iR);jZe=r(LOr,"GPT2TokenizerFast"),LOr.forEach(t),DZe=r(C9," (OpenAI GPT-2 model)"),C9.forEach(t),GZe=i(S),Yn=n(S,"LI",{});var w9=s(Yn);Bre=n(w9,"STRONG",{});var xOr=s(Bre);OZe=r(xOr,"gpt_neo"),xOr.forEach(t),VZe=r(w9," \u2014 "),dR=n(w9,"A",{href:!0});var $Or=s(dR);XZe=r($Or,"GPT2Tokenizer"),$Or.forEach(t),zZe=r(w9," or "),cR=n(w9,"A",{href:!0});var kOr=s(cR);QZe=r(kOr,"GPT2TokenizerFast"),kOr.forEach(t),WZe=r(w9," (GPT Neo model)"),w9.forEach(t),HZe=i(S),Kn=n(S,"LI",{});var A9=s(Kn);Pre=n(A9,"STRONG",{});var SOr=s(Pre);UZe=r(SOr,"gptj"),SOr.forEach(t),JZe=r(A9," \u2014 "),fR=n(A9,"A",{href:!0});var ROr=s(fR);YZe=r(ROr,"GPT2Tokenizer"),ROr.forEach(t),KZe=r(A9," or "),mR=n(A9,"A",{href:!0});var BOr=s(mR);ZZe=r(BOr,"GPT2TokenizerFast"),BOr.forEach(t),eeo=r(A9," (GPT-J model)"),A9.forEach(t),oeo=i(S),Zn=n(S,"LI",{});var y9=s(Zn);Ire=n(y9,"STRONG",{});var POr=s(Ire);reo=r(POr,"herbert"),POr.forEach(t),teo=r(y9," \u2014 "),gR=n(y9,"A",{href:!0});var IOr=s(gR);aeo=r(IOr,"HerbertTokenizer"),IOr.forEach(t),neo=r(y9," or "),hR=n(y9,"A",{href:!0});var qOr=s(hR);seo=r(qOr,"HerbertTokenizerFast"),qOr.forEach(t),leo=r(y9," (HerBERT model)"),y9.forEach(t),ieo=i(S),Lg=n(S,"LI",{});var M3e=s(Lg);qre=n(M3e,"STRONG",{});var NOr=s(qre);deo=r(NOr,"hubert"),NOr.forEach(t),ceo=r(M3e," \u2014 "),pR=n(M3e,"A",{href:!0});var jOr=s(pR);feo=r(jOr,"Wav2Vec2CTCTokenizer"),jOr.forEach(t),meo=r(M3e," (Hubert model)"),M3e.forEach(t),geo=i(S),es=n(S,"LI",{});var L9=s(es);Nre=n(L9,"STRONG",{});var DOr=s(Nre);heo=r(DOr,"ibert"),DOr.forEach(t),peo=r(L9," \u2014 "),uR=n(L9,"A",{href:!0});var GOr=s(uR);ueo=r(GOr,"RobertaTokenizer"),GOr.forEach(t),_eo=r(L9," or "),_R=n(L9,"A",{href:!0});var OOr=s(_R);beo=r(OOr,"RobertaTokenizerFast"),OOr.forEach(t),veo=r(L9," (I-BERT model)"),L9.forEach(t),Feo=i(S),os=n(S,"LI",{});var x9=s(os);jre=n(x9,"STRONG",{});var VOr=s(jre);Teo=r(VOr,"layoutlm"),VOr.forEach(t),Meo=r(x9," \u2014 "),bR=n(x9,"A",{href:!0});var XOr=s(bR);Eeo=r(XOr,"LayoutLMTokenizer"),XOr.forEach(t),Ceo=r(x9," or "),vR=n(x9,"A",{href:!0});var zOr=s(vR);weo=r(zOr,"LayoutLMTokenizerFast"),zOr.forEach(t),Aeo=r(x9," (LayoutLM model)"),x9.forEach(t),yeo=i(S),rs=n(S,"LI",{});var $9=s(rs);Dre=n($9,"STRONG",{});var QOr=s(Dre);Leo=r(QOr,"layoutlmv2"),QOr.forEach(t),xeo=r($9," \u2014 "),FR=n($9,"A",{href:!0});var WOr=s(FR);$eo=r(WOr,"LayoutLMv2Tokenizer"),WOr.forEach(t),keo=r($9," or "),TR=n($9,"A",{href:!0});var HOr=s(TR);Seo=r(HOr,"LayoutLMv2TokenizerFast"),HOr.forEach(t),Reo=r($9," (LayoutLMv2 model)"),$9.forEach(t),Beo=i(S),ts=n(S,"LI",{});var k9=s(ts);Gre=n(k9,"STRONG",{});var UOr=s(Gre);Peo=r(UOr,"layoutxlm"),UOr.forEach(t),Ieo=r(k9," \u2014 "),MR=n(k9,"A",{href:!0});var JOr=s(MR);qeo=r(JOr,"LayoutXLMTokenizer"),JOr.forEach(t),Neo=r(k9," or "),ER=n(k9,"A",{href:!0});var YOr=s(ER);jeo=r(YOr,"LayoutXLMTokenizerFast"),YOr.forEach(t),Deo=r(k9," (LayoutXLM model)"),k9.forEach(t),Geo=i(S),as=n(S,"LI",{});var S9=s(as);Ore=n(S9,"STRONG",{});var KOr=s(Ore);Oeo=r(KOr,"led"),KOr.forEach(t),Veo=r(S9," \u2014 "),CR=n(S9,"A",{href:!0});var ZOr=s(CR);Xeo=r(ZOr,"LEDTokenizer"),ZOr.forEach(t),zeo=r(S9," or "),wR=n(S9,"A",{href:!0});var eVr=s(wR);Qeo=r(eVr,"LEDTokenizerFast"),eVr.forEach(t),Weo=r(S9," (LED model)"),S9.forEach(t),Heo=i(S),ns=n(S,"LI",{});var R9=s(ns);Vre=n(R9,"STRONG",{});var oVr=s(Vre);Ueo=r(oVr,"longformer"),oVr.forEach(t),Jeo=r(R9," \u2014 "),AR=n(R9,"A",{href:!0});var rVr=s(AR);Yeo=r(rVr,"LongformerTokenizer"),rVr.forEach(t),Keo=r(R9," or "),yR=n(R9,"A",{href:!0});var tVr=s(yR);Zeo=r(tVr,"LongformerTokenizerFast"),tVr.forEach(t),eoo=r(R9," (Longformer model)"),R9.forEach(t),ooo=i(S),xg=n(S,"LI",{});var E3e=s(xg);Xre=n(E3e,"STRONG",{});var aVr=s(Xre);roo=r(aVr,"luke"),aVr.forEach(t),too=r(E3e," \u2014 "),LR=n(E3e,"A",{href:!0});var nVr=s(LR);aoo=r(nVr,"LukeTokenizer"),nVr.forEach(t),noo=r(E3e," (LUKE model)"),E3e.forEach(t),soo=i(S),ss=n(S,"LI",{});var B9=s(ss);zre=n(B9,"STRONG",{});var sVr=s(zre);loo=r(sVr,"lxmert"),sVr.forEach(t),ioo=r(B9," \u2014 "),xR=n(B9,"A",{href:!0});var lVr=s(xR);doo=r(lVr,"LxmertTokenizer"),lVr.forEach(t),coo=r(B9," or "),$R=n(B9,"A",{href:!0});var iVr=s($R);foo=r(iVr,"LxmertTokenizerFast"),iVr.forEach(t),moo=r(B9," (LXMERT model)"),B9.forEach(t),goo=i(S),$g=n(S,"LI",{});var C3e=s($g);Qre=n(C3e,"STRONG",{});var dVr=s(Qre);hoo=r(dVr,"m2m_100"),dVr.forEach(t),poo=r(C3e," \u2014 "),kR=n(C3e,"A",{href:!0});var cVr=s(kR);uoo=r(cVr,"M2M100Tokenizer"),cVr.forEach(t),_oo=r(C3e," (M2M100 model)"),C3e.forEach(t),boo=i(S),kg=n(S,"LI",{});var w3e=s(kg);Wre=n(w3e,"STRONG",{});var fVr=s(Wre);voo=r(fVr,"marian"),fVr.forEach(t),Foo=r(w3e," \u2014 "),SR=n(w3e,"A",{href:!0});var mVr=s(SR);Too=r(mVr,"MarianTokenizer"),mVr.forEach(t),Moo=r(w3e," (Marian model)"),w3e.forEach(t),Eoo=i(S),ls=n(S,"LI",{});var P9=s(ls);Hre=n(P9,"STRONG",{});var gVr=s(Hre);Coo=r(gVr,"mbart"),gVr.forEach(t),woo=r(P9," \u2014 "),RR=n(P9,"A",{href:!0});var hVr=s(RR);Aoo=r(hVr,"MBartTokenizer"),hVr.forEach(t),yoo=r(P9," or "),BR=n(P9,"A",{href:!0});var pVr=s(BR);Loo=r(pVr,"MBartTokenizerFast"),pVr.forEach(t),xoo=r(P9," (mBART model)"),P9.forEach(t),$oo=i(S),is=n(S,"LI",{});var I9=s(is);Ure=n(I9,"STRONG",{});var uVr=s(Ure);koo=r(uVr,"mbart50"),uVr.forEach(t),Soo=r(I9," \u2014 "),PR=n(I9,"A",{href:!0});var _Vr=s(PR);Roo=r(_Vr,"MBart50Tokenizer"),_Vr.forEach(t),Boo=r(I9," or "),IR=n(I9,"A",{href:!0});var bVr=s(IR);Poo=r(bVr,"MBart50TokenizerFast"),bVr.forEach(t),Ioo=r(I9," (mBART-50 model)"),I9.forEach(t),qoo=i(S),ds=n(S,"LI",{});var q9=s(ds);Jre=n(q9,"STRONG",{});var vVr=s(Jre);Noo=r(vVr,"megatron-bert"),vVr.forEach(t),joo=r(q9," \u2014 "),qR=n(q9,"A",{href:!0});var FVr=s(qR);Doo=r(FVr,"BertTokenizer"),FVr.forEach(t),Goo=r(q9," or "),NR=n(q9,"A",{href:!0});var TVr=s(NR);Ooo=r(TVr,"BertTokenizerFast"),TVr.forEach(t),Voo=r(q9," (MegatronBert model)"),q9.forEach(t),Xoo=i(S),Sg=n(S,"LI",{});var A3e=s(Sg);Yre=n(A3e,"STRONG",{});var MVr=s(Yre);zoo=r(MVr,"mluke"),MVr.forEach(t),Qoo=r(A3e," \u2014 "),jR=n(A3e,"A",{href:!0});var EVr=s(jR);Woo=r(EVr,"MLukeTokenizer"),EVr.forEach(t),Hoo=r(A3e," (mLUKE model)"),A3e.forEach(t),Uoo=i(S),cs=n(S,"LI",{});var N9=s(cs);Kre=n(N9,"STRONG",{});var CVr=s(Kre);Joo=r(CVr,"mobilebert"),CVr.forEach(t),Yoo=r(N9," \u2014 "),DR=n(N9,"A",{href:!0});var wVr=s(DR);Koo=r(wVr,"MobileBertTokenizer"),wVr.forEach(t),Zoo=r(N9," or "),GR=n(N9,"A",{href:!0});var AVr=s(GR);ero=r(AVr,"MobileBertTokenizerFast"),AVr.forEach(t),oro=r(N9," (MobileBERT model)"),N9.forEach(t),rro=i(S),fs=n(S,"LI",{});var j9=s(fs);Zre=n(j9,"STRONG",{});var yVr=s(Zre);tro=r(yVr,"mpnet"),yVr.forEach(t),aro=r(j9," \u2014 "),OR=n(j9,"A",{href:!0});var LVr=s(OR);nro=r(LVr,"MPNetTokenizer"),LVr.forEach(t),sro=r(j9," or "),VR=n(j9,"A",{href:!0});var xVr=s(VR);lro=r(xVr,"MPNetTokenizerFast"),xVr.forEach(t),iro=r(j9," (MPNet model)"),j9.forEach(t),dro=i(S),ms=n(S,"LI",{});var D9=s(ms);ete=n(D9,"STRONG",{});var $Vr=s(ete);cro=r($Vr,"mt5"),$Vr.forEach(t),fro=r(D9," \u2014 "),XR=n(D9,"A",{href:!0});var kVr=s(XR);mro=r(kVr,"MT5Tokenizer"),kVr.forEach(t),gro=r(D9," or "),zR=n(D9,"A",{href:!0});var SVr=s(zR);hro=r(SVr,"MT5TokenizerFast"),SVr.forEach(t),pro=r(D9," (mT5 model)"),D9.forEach(t),uro=i(S),gs=n(S,"LI",{});var G9=s(gs);ote=n(G9,"STRONG",{});var RVr=s(ote);_ro=r(RVr,"nystromformer"),RVr.forEach(t),bro=r(G9," \u2014 "),QR=n(G9,"A",{href:!0});var BVr=s(QR);vro=r(BVr,"AlbertTokenizer"),BVr.forEach(t),Fro=r(G9," or "),WR=n(G9,"A",{href:!0});var PVr=s(WR);Tro=r(PVr,"AlbertTokenizerFast"),PVr.forEach(t),Mro=r(G9," (Nystromformer model)"),G9.forEach(t),Ero=i(S),hs=n(S,"LI",{});var O9=s(hs);rte=n(O9,"STRONG",{});var IVr=s(rte);Cro=r(IVr,"openai-gpt"),IVr.forEach(t),wro=r(O9," \u2014 "),HR=n(O9,"A",{href:!0});var qVr=s(HR);Aro=r(qVr,"OpenAIGPTTokenizer"),qVr.forEach(t),yro=r(O9," or "),UR=n(O9,"A",{href:!0});var NVr=s(UR);Lro=r(NVr,"OpenAIGPTTokenizerFast"),NVr.forEach(t),xro=r(O9," (OpenAI GPT model)"),O9.forEach(t),$ro=i(S),ps=n(S,"LI",{});var V9=s(ps);tte=n(V9,"STRONG",{});var jVr=s(tte);kro=r(jVr,"pegasus"),jVr.forEach(t),Sro=r(V9," \u2014 "),JR=n(V9,"A",{href:!0});var DVr=s(JR);Rro=r(DVr,"PegasusTokenizer"),DVr.forEach(t),Bro=r(V9," or "),YR=n(V9,"A",{href:!0});var GVr=s(YR);Pro=r(GVr,"PegasusTokenizerFast"),GVr.forEach(t),Iro=r(V9," (Pegasus model)"),V9.forEach(t),qro=i(S),Rg=n(S,"LI",{});var y3e=s(Rg);ate=n(y3e,"STRONG",{});var OVr=s(ate);Nro=r(OVr,"perceiver"),OVr.forEach(t),jro=r(y3e," \u2014 "),KR=n(y3e,"A",{href:!0});var VVr=s(KR);Dro=r(VVr,"PerceiverTokenizer"),VVr.forEach(t),Gro=r(y3e," (Perceiver model)"),y3e.forEach(t),Oro=i(S),Bg=n(S,"LI",{});var L3e=s(Bg);nte=n(L3e,"STRONG",{});var XVr=s(nte);Vro=r(XVr,"phobert"),XVr.forEach(t),Xro=r(L3e," \u2014 "),ZR=n(L3e,"A",{href:!0});var zVr=s(ZR);zro=r(zVr,"PhobertTokenizer"),zVr.forEach(t),Qro=r(L3e," (PhoBERT model)"),L3e.forEach(t),Wro=i(S),Pg=n(S,"LI",{});var x3e=s(Pg);ste=n(x3e,"STRONG",{});var QVr=s(ste);Hro=r(QVr,"plbart"),QVr.forEach(t),Uro=r(x3e," \u2014 "),eB=n(x3e,"A",{href:!0});var WVr=s(eB);Jro=r(WVr,"PLBartTokenizer"),WVr.forEach(t),Yro=r(x3e," (PLBart model)"),x3e.forEach(t),Kro=i(S),Ig=n(S,"LI",{});var $3e=s(Ig);lte=n($3e,"STRONG",{});var HVr=s(lte);Zro=r(HVr,"prophetnet"),HVr.forEach(t),eto=r($3e," \u2014 "),oB=n($3e,"A",{href:!0});var UVr=s(oB);oto=r(UVr,"ProphetNetTokenizer"),UVr.forEach(t),rto=r($3e," (ProphetNet model)"),$3e.forEach(t),tto=i(S),us=n(S,"LI",{});var X9=s(us);ite=n(X9,"STRONG",{});var JVr=s(ite);ato=r(JVr,"qdqbert"),JVr.forEach(t),nto=r(X9," \u2014 "),rB=n(X9,"A",{href:!0});var YVr=s(rB);sto=r(YVr,"BertTokenizer"),YVr.forEach(t),lto=r(X9," or "),tB=n(X9,"A",{href:!0});var KVr=s(tB);ito=r(KVr,"BertTokenizerFast"),KVr.forEach(t),dto=r(X9," (QDQBert model)"),X9.forEach(t),cto=i(S),qg=n(S,"LI",{});var k3e=s(qg);dte=n(k3e,"STRONG",{});var ZVr=s(dte);fto=r(ZVr,"rag"),ZVr.forEach(t),mto=r(k3e," \u2014 "),aB=n(k3e,"A",{href:!0});var eXr=s(aB);gto=r(eXr,"RagTokenizer"),eXr.forEach(t),hto=r(k3e," (RAG model)"),k3e.forEach(t),pto=i(S),_s=n(S,"LI",{});var z9=s(_s);cte=n(z9,"STRONG",{});var oXr=s(cte);uto=r(oXr,"realm"),oXr.forEach(t),_to=r(z9," \u2014 "),nB=n(z9,"A",{href:!0});var rXr=s(nB);bto=r(rXr,"RealmTokenizer"),rXr.forEach(t),vto=r(z9," or "),sB=n(z9,"A",{href:!0});var tXr=s(sB);Fto=r(tXr,"RealmTokenizerFast"),tXr.forEach(t),Tto=r(z9," (Realm model)"),z9.forEach(t),Mto=i(S),bs=n(S,"LI",{});var Q9=s(bs);fte=n(Q9,"STRONG",{});var aXr=s(fte);Eto=r(aXr,"reformer"),aXr.forEach(t),Cto=r(Q9," \u2014 "),lB=n(Q9,"A",{href:!0});var nXr=s(lB);wto=r(nXr,"ReformerTokenizer"),nXr.forEach(t),Ato=r(Q9," or "),iB=n(Q9,"A",{href:!0});var sXr=s(iB);yto=r(sXr,"ReformerTokenizerFast"),sXr.forEach(t),Lto=r(Q9," (Reformer model)"),Q9.forEach(t),xto=i(S),vs=n(S,"LI",{});var W9=s(vs);mte=n(W9,"STRONG",{});var lXr=s(mte);$to=r(lXr,"rembert"),lXr.forEach(t),kto=r(W9," \u2014 "),dB=n(W9,"A",{href:!0});var iXr=s(dB);Sto=r(iXr,"RemBertTokenizer"),iXr.forEach(t),Rto=r(W9," or "),cB=n(W9,"A",{href:!0});var dXr=s(cB);Bto=r(dXr,"RemBertTokenizerFast"),dXr.forEach(t),Pto=r(W9," (RemBERT model)"),W9.forEach(t),Ito=i(S),Fs=n(S,"LI",{});var H9=s(Fs);gte=n(H9,"STRONG",{});var cXr=s(gte);qto=r(cXr,"retribert"),cXr.forEach(t),Nto=r(H9," \u2014 "),fB=n(H9,"A",{href:!0});var fXr=s(fB);jto=r(fXr,"RetriBertTokenizer"),fXr.forEach(t),Dto=r(H9," or "),mB=n(H9,"A",{href:!0});var mXr=s(mB);Gto=r(mXr,"RetriBertTokenizerFast"),mXr.forEach(t),Oto=r(H9," (RetriBERT model)"),H9.forEach(t),Vto=i(S),Ts=n(S,"LI",{});var U9=s(Ts);hte=n(U9,"STRONG",{});var gXr=s(hte);Xto=r(gXr,"roberta"),gXr.forEach(t),zto=r(U9," \u2014 "),gB=n(U9,"A",{href:!0});var hXr=s(gB);Qto=r(hXr,"RobertaTokenizer"),hXr.forEach(t),Wto=r(U9," or "),hB=n(U9,"A",{href:!0});var pXr=s(hB);Hto=r(pXr,"RobertaTokenizerFast"),pXr.forEach(t),Uto=r(U9," (RoBERTa model)"),U9.forEach(t),Jto=i(S),Ms=n(S,"LI",{});var J9=s(Ms);pte=n(J9,"STRONG",{});var uXr=s(pte);Yto=r(uXr,"roformer"),uXr.forEach(t),Kto=r(J9," \u2014 "),pB=n(J9,"A",{href:!0});var _Xr=s(pB);Zto=r(_Xr,"RoFormerTokenizer"),_Xr.forEach(t),eao=r(J9," or "),uB=n(J9,"A",{href:!0});var bXr=s(uB);oao=r(bXr,"RoFormerTokenizerFast"),bXr.forEach(t),rao=r(J9," (RoFormer model)"),J9.forEach(t),tao=i(S),Ng=n(S,"LI",{});var S3e=s(Ng);ute=n(S3e,"STRONG",{});var vXr=s(ute);aao=r(vXr,"speech_to_text"),vXr.forEach(t),nao=r(S3e," \u2014 "),_B=n(S3e,"A",{href:!0});var FXr=s(_B);sao=r(FXr,"Speech2TextTokenizer"),FXr.forEach(t),lao=r(S3e," (Speech2Text model)"),S3e.forEach(t),iao=i(S),jg=n(S,"LI",{});var R3e=s(jg);_te=n(R3e,"STRONG",{});var TXr=s(_te);dao=r(TXr,"speech_to_text_2"),TXr.forEach(t),cao=r(R3e," \u2014 "),bB=n(R3e,"A",{href:!0});var MXr=s(bB);fao=r(MXr,"Speech2Text2Tokenizer"),MXr.forEach(t),mao=r(R3e," (Speech2Text2 model)"),R3e.forEach(t),gao=i(S),Es=n(S,"LI",{});var Y9=s(Es);bte=n(Y9,"STRONG",{});var EXr=s(bte);hao=r(EXr,"splinter"),EXr.forEach(t),pao=r(Y9," \u2014 "),vB=n(Y9,"A",{href:!0});var CXr=s(vB);uao=r(CXr,"SplinterTokenizer"),CXr.forEach(t),_ao=r(Y9," or "),FB=n(Y9,"A",{href:!0});var wXr=s(FB);bao=r(wXr,"SplinterTokenizerFast"),wXr.forEach(t),vao=r(Y9," (Splinter model)"),Y9.forEach(t),Fao=i(S),Cs=n(S,"LI",{});var K9=s(Cs);vte=n(K9,"STRONG",{});var AXr=s(vte);Tao=r(AXr,"squeezebert"),AXr.forEach(t),Mao=r(K9," \u2014 "),TB=n(K9,"A",{href:!0});var yXr=s(TB);Eao=r(yXr,"SqueezeBertTokenizer"),yXr.forEach(t),Cao=r(K9," or "),MB=n(K9,"A",{href:!0});var LXr=s(MB);wao=r(LXr,"SqueezeBertTokenizerFast"),LXr.forEach(t),Aao=r(K9," (SqueezeBERT model)"),K9.forEach(t),yao=i(S),ws=n(S,"LI",{});var Z9=s(ws);Fte=n(Z9,"STRONG",{});var xXr=s(Fte);Lao=r(xXr,"t5"),xXr.forEach(t),xao=r(Z9," \u2014 "),EB=n(Z9,"A",{href:!0});var $Xr=s(EB);$ao=r($Xr,"T5Tokenizer"),$Xr.forEach(t),kao=r(Z9," or "),CB=n(Z9,"A",{href:!0});var kXr=s(CB);Sao=r(kXr,"T5TokenizerFast"),kXr.forEach(t),Rao=r(Z9," (T5 model)"),Z9.forEach(t),Bao=i(S),Dg=n(S,"LI",{});var B3e=s(Dg);Tte=n(B3e,"STRONG",{});var SXr=s(Tte);Pao=r(SXr,"tapas"),SXr.forEach(t),Iao=r(B3e," \u2014 "),wB=n(B3e,"A",{href:!0});var RXr=s(wB);qao=r(RXr,"TapasTokenizer"),RXr.forEach(t),Nao=r(B3e," (TAPAS model)"),B3e.forEach(t),jao=i(S),Gg=n(S,"LI",{});var P3e=s(Gg);Mte=n(P3e,"STRONG",{});var BXr=s(Mte);Dao=r(BXr,"tapex"),BXr.forEach(t),Gao=r(P3e," \u2014 "),AB=n(P3e,"A",{href:!0});var PXr=s(AB);Oao=r(PXr,"TapexTokenizer"),PXr.forEach(t),Vao=r(P3e," (TAPEX model)"),P3e.forEach(t),Xao=i(S),Og=n(S,"LI",{});var I3e=s(Og);Ete=n(I3e,"STRONG",{});var IXr=s(Ete);zao=r(IXr,"transfo-xl"),IXr.forEach(t),Qao=r(I3e," \u2014 "),yB=n(I3e,"A",{href:!0});var qXr=s(yB);Wao=r(qXr,"TransfoXLTokenizer"),qXr.forEach(t),Hao=r(I3e," (Transformer-XL model)"),I3e.forEach(t),Uao=i(S),As=n(S,"LI",{});var e$=s(As);Cte=n(e$,"STRONG",{});var NXr=s(Cte);Jao=r(NXr,"visual_bert"),NXr.forEach(t),Yao=r(e$," \u2014 "),LB=n(e$,"A",{href:!0});var jXr=s(LB);Kao=r(jXr,"BertTokenizer"),jXr.forEach(t),Zao=r(e$," or "),xB=n(e$,"A",{href:!0});var DXr=s(xB);eno=r(DXr,"BertTokenizerFast"),DXr.forEach(t),ono=r(e$," (VisualBert model)"),e$.forEach(t),rno=i(S),Vg=n(S,"LI",{});var q3e=s(Vg);wte=n(q3e,"STRONG",{});var GXr=s(wte);tno=r(GXr,"wav2vec2"),GXr.forEach(t),ano=r(q3e," \u2014 "),$B=n(q3e,"A",{href:!0});var OXr=s($B);nno=r(OXr,"Wav2Vec2CTCTokenizer"),OXr.forEach(t),sno=r(q3e," (Wav2Vec2 model)"),q3e.forEach(t),lno=i(S),Xg=n(S,"LI",{});var N3e=s(Xg);Ate=n(N3e,"STRONG",{});var VXr=s(Ate);ino=r(VXr,"wav2vec2_phoneme"),VXr.forEach(t),dno=r(N3e," \u2014 "),kB=n(N3e,"A",{href:!0});var XXr=s(kB);cno=r(XXr,"Wav2Vec2PhonemeCTCTokenizer"),XXr.forEach(t),fno=r(N3e," (Wav2Vec2Phoneme model)"),N3e.forEach(t),mno=i(S),ys=n(S,"LI",{});var o$=s(ys);yte=n(o$,"STRONG",{});var zXr=s(yte);gno=r(zXr,"xglm"),zXr.forEach(t),hno=r(o$," \u2014 "),SB=n(o$,"A",{href:!0});var QXr=s(SB);pno=r(QXr,"XGLMTokenizer"),QXr.forEach(t),uno=r(o$," or "),RB=n(o$,"A",{href:!0});var WXr=s(RB);_no=r(WXr,"XGLMTokenizerFast"),WXr.forEach(t),bno=r(o$," (XGLM model)"),o$.forEach(t),vno=i(S),zg=n(S,"LI",{});var j3e=s(zg);Lte=n(j3e,"STRONG",{});var HXr=s(Lte);Fno=r(HXr,"xlm"),HXr.forEach(t),Tno=r(j3e," \u2014 "),BB=n(j3e,"A",{href:!0});var UXr=s(BB);Mno=r(UXr,"XLMTokenizer"),UXr.forEach(t),Eno=r(j3e," (XLM model)"),j3e.forEach(t),Cno=i(S),Qg=n(S,"LI",{});var D3e=s(Qg);xte=n(D3e,"STRONG",{});var JXr=s(xte);wno=r(JXr,"xlm-prophetnet"),JXr.forEach(t),Ano=r(D3e," \u2014 "),PB=n(D3e,"A",{href:!0});var YXr=s(PB);yno=r(YXr,"XLMProphetNetTokenizer"),YXr.forEach(t),Lno=r(D3e," (XLMProphetNet model)"),D3e.forEach(t),xno=i(S),Ls=n(S,"LI",{});var r$=s(Ls);$te=n(r$,"STRONG",{});var KXr=s($te);$no=r(KXr,"xlm-roberta"),KXr.forEach(t),kno=r(r$," \u2014 "),IB=n(r$,"A",{href:!0});var ZXr=s(IB);Sno=r(ZXr,"XLMRobertaTokenizer"),ZXr.forEach(t),Rno=r(r$," or "),qB=n(r$,"A",{href:!0});var ezr=s(qB);Bno=r(ezr,"XLMRobertaTokenizerFast"),ezr.forEach(t),Pno=r(r$," (XLM-RoBERTa model)"),r$.forEach(t),Ino=i(S),xs=n(S,"LI",{});var t$=s(xs);kte=n(t$,"STRONG",{});var ozr=s(kte);qno=r(ozr,"xlm-roberta-xl"),ozr.forEach(t),Nno=r(t$," \u2014 "),NB=n(t$,"A",{href:!0});var rzr=s(NB);jno=r(rzr,"RobertaTokenizer"),rzr.forEach(t),Dno=r(t$," or "),jB=n(t$,"A",{href:!0});var tzr=s(jB);Gno=r(tzr,"RobertaTokenizerFast"),tzr.forEach(t),Ono=r(t$," (XLM-RoBERTa-XL model)"),t$.forEach(t),Vno=i(S),$s=n(S,"LI",{});var a$=s($s);Ste=n(a$,"STRONG",{});var azr=s(Ste);Xno=r(azr,"xlnet"),azr.forEach(t),zno=r(a$," \u2014 "),DB=n(a$,"A",{href:!0});var nzr=s(DB);Qno=r(nzr,"XLNetTokenizer"),nzr.forEach(t),Wno=r(a$," or "),GB=n(a$,"A",{href:!0});var szr=s(GB);Hno=r(szr,"XLNetTokenizerFast"),szr.forEach(t),Uno=r(a$," (XLNet model)"),a$.forEach(t),Jno=i(S),ks=n(S,"LI",{});var n$=s(ks);Rte=n(n$,"STRONG",{});var lzr=s(Rte);Yno=r(lzr,"yoso"),lzr.forEach(t),Kno=r(n$," \u2014 "),OB=n(n$,"A",{href:!0});var izr=s(OB);Zno=r(izr,"AlbertTokenizer"),izr.forEach(t),eso=r(n$," or "),VB=n(n$,"A",{href:!0});var dzr=s(VB);oso=r(dzr,"AlbertTokenizerFast"),dzr.forEach(t),rso=r(n$," (YOSO model)"),n$.forEach(t),S.forEach(t),tso=i(Is),T(Wg.$$.fragment,Is),Is.forEach(t),aso=i(Ps),Hg=n(Ps,"DIV",{class:!0});var kqe=s(Hg);T(ny.$$.fragment,kqe),nso=i(kqe),Bte=n(kqe,"P",{});var czr=s(Bte);sso=r(czr,"Register a new tokenizer in this mapping."),czr.forEach(t),kqe.forEach(t),Ps.forEach(t),SPe=i(f),bi=n(f,"H2",{class:!0});var Sqe=s(bi);Ug=n(Sqe,"A",{id:!0,class:!0,href:!0});var fzr=s(Ug);Pte=n(fzr,"SPAN",{});var mzr=s(Pte);T(sy.$$.fragment,mzr),mzr.forEach(t),fzr.forEach(t),lso=i(Sqe),Ite=n(Sqe,"SPAN",{});var gzr=s(Ite);iso=r(gzr,"AutoFeatureExtractor"),gzr.forEach(t),Sqe.forEach(t),RPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(ly.$$.fragment,qs),dso=i(qs),iy=n(qs,"P",{});var Rqe=s(iy);cso=r(Rqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),XB=n(Rqe,"A",{href:!0});var hzr=s(XB);fso=r(hzr,"AutoFeatureExtractor.from_pretrained()"),hzr.forEach(t),mso=r(Rqe," class method."),Rqe.forEach(t),gso=i(qs),dy=n(qs,"P",{});var Bqe=s(dy);hso=r(Bqe,"This class cannot be instantiated directly using "),qte=n(Bqe,"CODE",{});var pzr=s(qte);pso=r(pzr,"__init__()"),pzr.forEach(t),uso=r(Bqe," (throws an error)."),Bqe.forEach(t),_so=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(cy.$$.fragment,Yt),bso=i(Yt),Nte=n(Yt,"P",{});var uzr=s(Nte);vso=r(uzr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),uzr.forEach(t),Fso=i(Yt),wa=n(Yt,"P",{});var Hw=s(wa);Tso=r(Hw,"The feature extractor class to instantiate is selected based on the "),jte=n(Hw,"CODE",{});var _zr=s(jte);Mso=r(_zr,"model_type"),_zr.forEach(t),Eso=r(Hw,` property of the config object
(either passed as an argument or loaded from `),Dte=n(Hw,"CODE",{});var bzr=s(Dte);Cso=r(bzr,"pretrained_model_name_or_path"),bzr.forEach(t),wso=r(Hw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gte=n(Hw,"CODE",{});var vzr=s(Gte);Aso=r(vzr,"pretrained_model_name_or_path"),vzr.forEach(t),yso=r(Hw,":"),Hw.forEach(t),Lso=i(Yt),oe=n(Yt,"UL",{});var ae=s(oe);Jg=n(ae,"LI",{});var G3e=s(Jg);Ote=n(G3e,"STRONG",{});var Fzr=s(Ote);xso=r(Fzr,"beit"),Fzr.forEach(t),$so=r(G3e," \u2014 "),zB=n(G3e,"A",{href:!0});var Tzr=s(zB);kso=r(Tzr,"BeitFeatureExtractor"),Tzr.forEach(t),Sso=r(G3e," (BEiT model)"),G3e.forEach(t),Rso=i(ae),Yg=n(ae,"LI",{});var O3e=s(Yg);Vte=n(O3e,"STRONG",{});var Mzr=s(Vte);Bso=r(Mzr,"clip"),Mzr.forEach(t),Pso=r(O3e," \u2014 "),QB=n(O3e,"A",{href:!0});var Ezr=s(QB);Iso=r(Ezr,"CLIPFeatureExtractor"),Ezr.forEach(t),qso=r(O3e," (CLIP model)"),O3e.forEach(t),Nso=i(ae),Kg=n(ae,"LI",{});var V3e=s(Kg);Xte=n(V3e,"STRONG",{});var Czr=s(Xte);jso=r(Czr,"convnext"),Czr.forEach(t),Dso=r(V3e," \u2014 "),WB=n(V3e,"A",{href:!0});var wzr=s(WB);Gso=r(wzr,"ConvNextFeatureExtractor"),wzr.forEach(t),Oso=r(V3e," (ConvNext model)"),V3e.forEach(t),Vso=i(ae),Zg=n(ae,"LI",{});var X3e=s(Zg);zte=n(X3e,"STRONG",{});var Azr=s(zte);Xso=r(Azr,"data2vec-audio"),Azr.forEach(t),zso=r(X3e," \u2014 "),HB=n(X3e,"A",{href:!0});var yzr=s(HB);Qso=r(yzr,"Wav2Vec2FeatureExtractor"),yzr.forEach(t),Wso=r(X3e," (Data2VecAudio model)"),X3e.forEach(t),Hso=i(ae),eh=n(ae,"LI",{});var z3e=s(eh);Qte=n(z3e,"STRONG",{});var Lzr=s(Qte);Uso=r(Lzr,"data2vec-vision"),Lzr.forEach(t),Jso=r(z3e," \u2014 "),UB=n(z3e,"A",{href:!0});var xzr=s(UB);Yso=r(xzr,"BeitFeatureExtractor"),xzr.forEach(t),Kso=r(z3e," (Data2VecVision model)"),z3e.forEach(t),Zso=i(ae),oh=n(ae,"LI",{});var Q3e=s(oh);Wte=n(Q3e,"STRONG",{});var $zr=s(Wte);elo=r($zr,"deit"),$zr.forEach(t),olo=r(Q3e," \u2014 "),JB=n(Q3e,"A",{href:!0});var kzr=s(JB);rlo=r(kzr,"DeiTFeatureExtractor"),kzr.forEach(t),tlo=r(Q3e," (DeiT model)"),Q3e.forEach(t),alo=i(ae),rh=n(ae,"LI",{});var W3e=s(rh);Hte=n(W3e,"STRONG",{});var Szr=s(Hte);nlo=r(Szr,"detr"),Szr.forEach(t),slo=r(W3e," \u2014 "),YB=n(W3e,"A",{href:!0});var Rzr=s(YB);llo=r(Rzr,"DetrFeatureExtractor"),Rzr.forEach(t),ilo=r(W3e," (DETR model)"),W3e.forEach(t),dlo=i(ae),th=n(ae,"LI",{});var H3e=s(th);Ute=n(H3e,"STRONG",{});var Bzr=s(Ute);clo=r(Bzr,"dpt"),Bzr.forEach(t),flo=r(H3e," \u2014 "),KB=n(H3e,"A",{href:!0});var Pzr=s(KB);mlo=r(Pzr,"DPTFeatureExtractor"),Pzr.forEach(t),glo=r(H3e," (DPT model)"),H3e.forEach(t),hlo=i(ae),ah=n(ae,"LI",{});var U3e=s(ah);Jte=n(U3e,"STRONG",{});var Izr=s(Jte);plo=r(Izr,"flava"),Izr.forEach(t),ulo=r(U3e," \u2014 "),ZB=n(U3e,"A",{href:!0});var qzr=s(ZB);_lo=r(qzr,"FlavaFeatureExtractor"),qzr.forEach(t),blo=r(U3e," (Flava model)"),U3e.forEach(t),vlo=i(ae),nh=n(ae,"LI",{});var J3e=s(nh);Yte=n(J3e,"STRONG",{});var Nzr=s(Yte);Flo=r(Nzr,"glpn"),Nzr.forEach(t),Tlo=r(J3e," \u2014 "),eP=n(J3e,"A",{href:!0});var jzr=s(eP);Mlo=r(jzr,"GLPNFeatureExtractor"),jzr.forEach(t),Elo=r(J3e," (GLPN model)"),J3e.forEach(t),Clo=i(ae),sh=n(ae,"LI",{});var Y3e=s(sh);Kte=n(Y3e,"STRONG",{});var Dzr=s(Kte);wlo=r(Dzr,"hubert"),Dzr.forEach(t),Alo=r(Y3e," \u2014 "),oP=n(Y3e,"A",{href:!0});var Gzr=s(oP);ylo=r(Gzr,"Wav2Vec2FeatureExtractor"),Gzr.forEach(t),Llo=r(Y3e," (Hubert model)"),Y3e.forEach(t),xlo=i(ae),lh=n(ae,"LI",{});var K3e=s(lh);Zte=n(K3e,"STRONG",{});var Ozr=s(Zte);$lo=r(Ozr,"layoutlmv2"),Ozr.forEach(t),klo=r(K3e," \u2014 "),rP=n(K3e,"A",{href:!0});var Vzr=s(rP);Slo=r(Vzr,"LayoutLMv2FeatureExtractor"),Vzr.forEach(t),Rlo=r(K3e," (LayoutLMv2 model)"),K3e.forEach(t),Blo=i(ae),ih=n(ae,"LI",{});var Z3e=s(ih);eae=n(Z3e,"STRONG",{});var Xzr=s(eae);Plo=r(Xzr,"maskformer"),Xzr.forEach(t),Ilo=r(Z3e," \u2014 "),tP=n(Z3e,"A",{href:!0});var zzr=s(tP);qlo=r(zzr,"MaskFormerFeatureExtractor"),zzr.forEach(t),Nlo=r(Z3e," (MaskFormer model)"),Z3e.forEach(t),jlo=i(ae),dh=n(ae,"LI",{});var ewe=s(dh);oae=n(ewe,"STRONG",{});var Qzr=s(oae);Dlo=r(Qzr,"perceiver"),Qzr.forEach(t),Glo=r(ewe," \u2014 "),aP=n(ewe,"A",{href:!0});var Wzr=s(aP);Olo=r(Wzr,"PerceiverFeatureExtractor"),Wzr.forEach(t),Vlo=r(ewe," (Perceiver model)"),ewe.forEach(t),Xlo=i(ae),ch=n(ae,"LI",{});var owe=s(ch);rae=n(owe,"STRONG",{});var Hzr=s(rae);zlo=r(Hzr,"poolformer"),Hzr.forEach(t),Qlo=r(owe," \u2014 "),nP=n(owe,"A",{href:!0});var Uzr=s(nP);Wlo=r(Uzr,"PoolFormerFeatureExtractor"),Uzr.forEach(t),Hlo=r(owe," (PoolFormer model)"),owe.forEach(t),Ulo=i(ae),fh=n(ae,"LI",{});var rwe=s(fh);tae=n(rwe,"STRONG",{});var Jzr=s(tae);Jlo=r(Jzr,"regnet"),Jzr.forEach(t),Ylo=r(rwe," \u2014 "),sP=n(rwe,"A",{href:!0});var Yzr=s(sP);Klo=r(Yzr,"ConvNextFeatureExtractor"),Yzr.forEach(t),Zlo=r(rwe," (RegNet model)"),rwe.forEach(t),eio=i(ae),mh=n(ae,"LI",{});var twe=s(mh);aae=n(twe,"STRONG",{});var Kzr=s(aae);oio=r(Kzr,"resnet"),Kzr.forEach(t),rio=r(twe," \u2014 "),lP=n(twe,"A",{href:!0});var Zzr=s(lP);tio=r(Zzr,"ConvNextFeatureExtractor"),Zzr.forEach(t),aio=r(twe," (ResNet model)"),twe.forEach(t),nio=i(ae),gh=n(ae,"LI",{});var awe=s(gh);nae=n(awe,"STRONG",{});var eQr=s(nae);sio=r(eQr,"segformer"),eQr.forEach(t),lio=r(awe," \u2014 "),iP=n(awe,"A",{href:!0});var oQr=s(iP);iio=r(oQr,"SegformerFeatureExtractor"),oQr.forEach(t),dio=r(awe," (SegFormer model)"),awe.forEach(t),cio=i(ae),hh=n(ae,"LI",{});var nwe=s(hh);sae=n(nwe,"STRONG",{});var rQr=s(sae);fio=r(rQr,"speech_to_text"),rQr.forEach(t),mio=r(nwe," \u2014 "),dP=n(nwe,"A",{href:!0});var tQr=s(dP);gio=r(tQr,"Speech2TextFeatureExtractor"),tQr.forEach(t),hio=r(nwe," (Speech2Text model)"),nwe.forEach(t),pio=i(ae),ph=n(ae,"LI",{});var swe=s(ph);lae=n(swe,"STRONG",{});var aQr=s(lae);uio=r(aQr,"swin"),aQr.forEach(t),_io=r(swe," \u2014 "),cP=n(swe,"A",{href:!0});var nQr=s(cP);bio=r(nQr,"ViTFeatureExtractor"),nQr.forEach(t),vio=r(swe," (Swin model)"),swe.forEach(t),Fio=i(ae),uh=n(ae,"LI",{});var lwe=s(uh);iae=n(lwe,"STRONG",{});var sQr=s(iae);Tio=r(sQr,"van"),sQr.forEach(t),Mio=r(lwe," \u2014 "),fP=n(lwe,"A",{href:!0});var lQr=s(fP);Eio=r(lQr,"ConvNextFeatureExtractor"),lQr.forEach(t),Cio=r(lwe," (VAN model)"),lwe.forEach(t),wio=i(ae),_h=n(ae,"LI",{});var iwe=s(_h);dae=n(iwe,"STRONG",{});var iQr=s(dae);Aio=r(iQr,"vit"),iQr.forEach(t),yio=r(iwe," \u2014 "),mP=n(iwe,"A",{href:!0});var dQr=s(mP);Lio=r(dQr,"ViTFeatureExtractor"),dQr.forEach(t),xio=r(iwe," (ViT model)"),iwe.forEach(t),$io=i(ae),bh=n(ae,"LI",{});var dwe=s(bh);cae=n(dwe,"STRONG",{});var cQr=s(cae);kio=r(cQr,"vit_mae"),cQr.forEach(t),Sio=r(dwe," \u2014 "),gP=n(dwe,"A",{href:!0});var fQr=s(gP);Rio=r(fQr,"ViTFeatureExtractor"),fQr.forEach(t),Bio=r(dwe," (ViTMAE model)"),dwe.forEach(t),Pio=i(ae),vh=n(ae,"LI",{});var cwe=s(vh);fae=n(cwe,"STRONG",{});var mQr=s(fae);Iio=r(mQr,"wav2vec2"),mQr.forEach(t),qio=r(cwe," \u2014 "),hP=n(cwe,"A",{href:!0});var gQr=s(hP);Nio=r(gQr,"Wav2Vec2FeatureExtractor"),gQr.forEach(t),jio=r(cwe," (Wav2Vec2 model)"),cwe.forEach(t),Dio=i(ae),Fh=n(ae,"LI",{});var fwe=s(Fh);mae=n(fwe,"STRONG",{});var hQr=s(mae);Gio=r(hQr,"yolos"),hQr.forEach(t),Oio=r(fwe," \u2014 "),pP=n(fwe,"A",{href:!0});var pQr=s(pP);Vio=r(pQr,"YolosFeatureExtractor"),pQr.forEach(t),Xio=r(fwe," (YOLOS model)"),fwe.forEach(t),ae.forEach(t),zio=i(Yt),T(Th.$$.fragment,Yt),Qio=i(Yt),T(Mh.$$.fragment,Yt),Yt.forEach(t),Wio=i(qs),Eh=n(qs,"DIV",{class:!0});var Pqe=s(Eh);T(fy.$$.fragment,Pqe),Hio=i(Pqe),gae=n(Pqe,"P",{});var uQr=s(gae);Uio=r(uQr,"Register a new feature extractor for this class."),uQr.forEach(t),Pqe.forEach(t),qs.forEach(t),BPe=i(f),vi=n(f,"H2",{class:!0});var Iqe=s(vi);Ch=n(Iqe,"A",{id:!0,class:!0,href:!0});var _Qr=s(Ch);hae=n(_Qr,"SPAN",{});var bQr=s(hae);T(my.$$.fragment,bQr),bQr.forEach(t),_Qr.forEach(t),Jio=i(Iqe),pae=n(Iqe,"SPAN",{});var vQr=s(pae);Yio=r(vQr,"AutoProcessor"),vQr.forEach(t),Iqe.forEach(t),PPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(gy.$$.fragment,Ns),Kio=i(Ns),hy=n(Ns,"P",{});var qqe=s(hy);Zio=r(qqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uP=n(qqe,"A",{href:!0});var FQr=s(uP);edo=r(FQr,"AutoProcessor.from_pretrained()"),FQr.forEach(t),odo=r(qqe," class method."),qqe.forEach(t),rdo=i(Ns),py=n(Ns,"P",{});var Nqe=s(py);tdo=r(Nqe,"This class cannot be instantiated directly using "),uae=n(Nqe,"CODE",{});var TQr=s(uae);ado=r(TQr,"__init__()"),TQr.forEach(t),ndo=r(Nqe," (throws an error)."),Nqe.forEach(t),sdo=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(uy.$$.fragment,Kt),ldo=i(Kt),_ae=n(Kt,"P",{});var MQr=s(_ae);ido=r(MQr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),MQr.forEach(t),ddo=i(Kt),Fi=n(Kt,"P",{});var YY=s(Fi);cdo=r(YY,"The processor class to instantiate is selected based on the "),bae=n(YY,"CODE",{});var EQr=s(bae);fdo=r(EQr,"model_type"),EQr.forEach(t),mdo=r(YY,` property of the config object (either
passed as an argument or loaded from `),vae=n(YY,"CODE",{});var CQr=s(vae);gdo=r(CQr,"pretrained_model_name_or_path"),CQr.forEach(t),hdo=r(YY," if possible):"),YY.forEach(t),pdo=i(Kt),be=n(Kt,"UL",{});var ve=s(be);wh=n(ve,"LI",{});var mwe=s(wh);Fae=n(mwe,"STRONG",{});var wQr=s(Fae);udo=r(wQr,"clip"),wQr.forEach(t),_do=r(mwe," \u2014 "),_P=n(mwe,"A",{href:!0});var AQr=s(_P);bdo=r(AQr,"CLIPProcessor"),AQr.forEach(t),vdo=r(mwe," (CLIP model)"),mwe.forEach(t),Fdo=i(ve),Ah=n(ve,"LI",{});var gwe=s(Ah);Tae=n(gwe,"STRONG",{});var yQr=s(Tae);Tdo=r(yQr,"flava"),yQr.forEach(t),Mdo=r(gwe," \u2014 "),Mae=n(gwe,"CODE",{});var LQr=s(Mae);Edo=r(LQr,"FLAVAProcessor"),LQr.forEach(t),Cdo=r(gwe," (Flava model)"),gwe.forEach(t),wdo=i(ve),yh=n(ve,"LI",{});var hwe=s(yh);Eae=n(hwe,"STRONG",{});var xQr=s(Eae);Ado=r(xQr,"layoutlmv2"),xQr.forEach(t),ydo=r(hwe," \u2014 "),bP=n(hwe,"A",{href:!0});var $Qr=s(bP);Ldo=r($Qr,"LayoutLMv2Processor"),$Qr.forEach(t),xdo=r(hwe," (LayoutLMv2 model)"),hwe.forEach(t),$do=i(ve),Lh=n(ve,"LI",{});var pwe=s(Lh);Cae=n(pwe,"STRONG",{});var kQr=s(Cae);kdo=r(kQr,"layoutxlm"),kQr.forEach(t),Sdo=r(pwe," \u2014 "),vP=n(pwe,"A",{href:!0});var SQr=s(vP);Rdo=r(SQr,"LayoutXLMProcessor"),SQr.forEach(t),Bdo=r(pwe," (LayoutXLM model)"),pwe.forEach(t),Pdo=i(ve),xh=n(ve,"LI",{});var uwe=s(xh);wae=n(uwe,"STRONG",{});var RQr=s(wae);Ido=r(RQr,"sew"),RQr.forEach(t),qdo=r(uwe," \u2014 "),FP=n(uwe,"A",{href:!0});var BQr=s(FP);Ndo=r(BQr,"Wav2Vec2Processor"),BQr.forEach(t),jdo=r(uwe," (SEW model)"),uwe.forEach(t),Ddo=i(ve),$h=n(ve,"LI",{});var _we=s($h);Aae=n(_we,"STRONG",{});var PQr=s(Aae);Gdo=r(PQr,"sew-d"),PQr.forEach(t),Odo=r(_we," \u2014 "),TP=n(_we,"A",{href:!0});var IQr=s(TP);Vdo=r(IQr,"Wav2Vec2Processor"),IQr.forEach(t),Xdo=r(_we," (SEW-D model)"),_we.forEach(t),zdo=i(ve),kh=n(ve,"LI",{});var bwe=s(kh);yae=n(bwe,"STRONG",{});var qQr=s(yae);Qdo=r(qQr,"speech_to_text"),qQr.forEach(t),Wdo=r(bwe," \u2014 "),MP=n(bwe,"A",{href:!0});var NQr=s(MP);Hdo=r(NQr,"Speech2TextProcessor"),NQr.forEach(t),Udo=r(bwe," (Speech2Text model)"),bwe.forEach(t),Jdo=i(ve),Sh=n(ve,"LI",{});var vwe=s(Sh);Lae=n(vwe,"STRONG",{});var jQr=s(Lae);Ydo=r(jQr,"speech_to_text_2"),jQr.forEach(t),Kdo=r(vwe," \u2014 "),EP=n(vwe,"A",{href:!0});var DQr=s(EP);Zdo=r(DQr,"Speech2Text2Processor"),DQr.forEach(t),eco=r(vwe," (Speech2Text2 model)"),vwe.forEach(t),oco=i(ve),Rh=n(ve,"LI",{});var Fwe=s(Rh);xae=n(Fwe,"STRONG",{});var GQr=s(xae);rco=r(GQr,"trocr"),GQr.forEach(t),tco=r(Fwe," \u2014 "),CP=n(Fwe,"A",{href:!0});var OQr=s(CP);aco=r(OQr,"TrOCRProcessor"),OQr.forEach(t),nco=r(Fwe," (TrOCR model)"),Fwe.forEach(t),sco=i(ve),Bh=n(ve,"LI",{});var Twe=s(Bh);$ae=n(Twe,"STRONG",{});var VQr=s($ae);lco=r(VQr,"unispeech"),VQr.forEach(t),ico=r(Twe," \u2014 "),wP=n(Twe,"A",{href:!0});var XQr=s(wP);dco=r(XQr,"Wav2Vec2Processor"),XQr.forEach(t),cco=r(Twe," (UniSpeech model)"),Twe.forEach(t),fco=i(ve),Ph=n(ve,"LI",{});var Mwe=s(Ph);kae=n(Mwe,"STRONG",{});var zQr=s(kae);mco=r(zQr,"unispeech-sat"),zQr.forEach(t),gco=r(Mwe," \u2014 "),AP=n(Mwe,"A",{href:!0});var QQr=s(AP);hco=r(QQr,"Wav2Vec2Processor"),QQr.forEach(t),pco=r(Mwe," (UniSpeechSat model)"),Mwe.forEach(t),uco=i(ve),Ih=n(ve,"LI",{});var Ewe=s(Ih);Sae=n(Ewe,"STRONG",{});var WQr=s(Sae);_co=r(WQr,"vilt"),WQr.forEach(t),bco=r(Ewe," \u2014 "),yP=n(Ewe,"A",{href:!0});var HQr=s(yP);vco=r(HQr,"ViltProcessor"),HQr.forEach(t),Fco=r(Ewe," (ViLT model)"),Ewe.forEach(t),Tco=i(ve),qh=n(ve,"LI",{});var Cwe=s(qh);Rae=n(Cwe,"STRONG",{});var UQr=s(Rae);Mco=r(UQr,"vision-text-dual-encoder"),UQr.forEach(t),Eco=r(Cwe," \u2014 "),LP=n(Cwe,"A",{href:!0});var JQr=s(LP);Cco=r(JQr,"VisionTextDualEncoderProcessor"),JQr.forEach(t),wco=r(Cwe," (VisionTextDualEncoder model)"),Cwe.forEach(t),Aco=i(ve),Nh=n(ve,"LI",{});var wwe=s(Nh);Bae=n(wwe,"STRONG",{});var YQr=s(Bae);yco=r(YQr,"wav2vec2"),YQr.forEach(t),Lco=r(wwe," \u2014 "),xP=n(wwe,"A",{href:!0});var KQr=s(xP);xco=r(KQr,"Wav2Vec2Processor"),KQr.forEach(t),$co=r(wwe," (Wav2Vec2 model)"),wwe.forEach(t),kco=i(ve),jh=n(ve,"LI",{});var Awe=s(jh);Pae=n(Awe,"STRONG",{});var ZQr=s(Pae);Sco=r(ZQr,"wavlm"),ZQr.forEach(t),Rco=r(Awe," \u2014 "),$P=n(Awe,"A",{href:!0});var eWr=s($P);Bco=r(eWr,"Wav2Vec2Processor"),eWr.forEach(t),Pco=r(Awe," (WavLM model)"),Awe.forEach(t),ve.forEach(t),Ico=i(Kt),T(Dh.$$.fragment,Kt),qco=i(Kt),T(Gh.$$.fragment,Kt),Kt.forEach(t),Nco=i(Ns),Oh=n(Ns,"DIV",{class:!0});var jqe=s(Oh);T(_y.$$.fragment,jqe),jco=i(jqe),Iae=n(jqe,"P",{});var oWr=s(Iae);Dco=r(oWr,"Register a new processor for this class."),oWr.forEach(t),jqe.forEach(t),Ns.forEach(t),IPe=i(f),Ti=n(f,"H2",{class:!0});var Dqe=s(Ti);Vh=n(Dqe,"A",{id:!0,class:!0,href:!0});var rWr=s(Vh);qae=n(rWr,"SPAN",{});var tWr=s(qae);T(by.$$.fragment,tWr),tWr.forEach(t),rWr.forEach(t),Gco=i(Dqe),Nae=n(Dqe,"SPAN",{});var aWr=s(Nae);Oco=r(aWr,"AutoModel"),aWr.forEach(t),Dqe.forEach(t),qPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(vy.$$.fragment,js),Vco=i(js),Mi=n(js,"P",{});var KY=s(Mi);Xco=r(KY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kP=n(KY,"A",{href:!0});var nWr=s(kP);zco=r(nWr,"from_pretrained()"),nWr.forEach(t),Qco=r(KY," class method or the "),SP=n(KY,"A",{href:!0});var sWr=s(SP);Wco=r(sWr,"from_config()"),sWr.forEach(t),Hco=r(KY,` class
method.`),KY.forEach(t),Uco=i(js),Fy=n(js,"P",{});var Gqe=s(Fy);Jco=r(Gqe,"This class cannot be instantiated directly using "),jae=n(Gqe,"CODE",{});var lWr=s(jae);Yco=r(lWr,"__init__()"),lWr.forEach(t),Kco=r(Gqe," (throws an error)."),Gqe.forEach(t),Zco=i(js),ot=n(js,"DIV",{class:!0});var Uw=s(ot);T(Ty.$$.fragment,Uw),efo=i(Uw),Dae=n(Uw,"P",{});var iWr=s(Dae);ofo=r(iWr,"Instantiates one of the base model classes of the library from a configuration."),iWr.forEach(t),rfo=i(Uw),Ei=n(Uw,"P",{});var ZY=s(Ei);tfo=r(ZY,`Note:
Loading a model from its configuration file does `),Gae=n(ZY,"STRONG",{});var dWr=s(Gae);afo=r(dWr,"not"),dWr.forEach(t),nfo=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RP=n(ZY,"A",{href:!0});var cWr=s(RP);sfo=r(cWr,"from_pretrained()"),cWr.forEach(t),lfo=r(ZY," to load the model weights."),ZY.forEach(t),ifo=i(Uw),T(Xh.$$.fragment,Uw),Uw.forEach(t),dfo=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(My.$$.fragment,Zt),cfo=i(Zt),Oae=n(Zt,"P",{});var fWr=s(Oae);ffo=r(fWr,"Instantiate one of the base model classes of the library from a pretrained model."),fWr.forEach(t),mfo=i(Zt),Aa=n(Zt,"P",{});var Jw=s(Aa);gfo=r(Jw,"The model class to instantiate is selected based on the "),Vae=n(Jw,"CODE",{});var mWr=s(Vae);hfo=r(mWr,"model_type"),mWr.forEach(t),pfo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Xae=n(Jw,"CODE",{});var gWr=s(Xae);ufo=r(gWr,"pretrained_model_name_or_path"),gWr.forEach(t),_fo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zae=n(Jw,"CODE",{});var hWr=s(zae);bfo=r(hWr,"pretrained_model_name_or_path"),hWr.forEach(t),vfo=r(Jw,":"),Jw.forEach(t),Ffo=i(Zt),x=n(Zt,"UL",{});var $=s(x);zh=n($,"LI",{});var ywe=s(zh);Qae=n(ywe,"STRONG",{});var pWr=s(Qae);Tfo=r(pWr,"albert"),pWr.forEach(t),Mfo=r(ywe," \u2014 "),BP=n(ywe,"A",{href:!0});var uWr=s(BP);Efo=r(uWr,"AlbertModel"),uWr.forEach(t),Cfo=r(ywe," (ALBERT model)"),ywe.forEach(t),wfo=i($),Qh=n($,"LI",{});var Lwe=s(Qh);Wae=n(Lwe,"STRONG",{});var _Wr=s(Wae);Afo=r(_Wr,"bart"),_Wr.forEach(t),yfo=r(Lwe," \u2014 "),PP=n(Lwe,"A",{href:!0});var bWr=s(PP);Lfo=r(bWr,"BartModel"),bWr.forEach(t),xfo=r(Lwe," (BART model)"),Lwe.forEach(t),$fo=i($),Wh=n($,"LI",{});var xwe=s(Wh);Hae=n(xwe,"STRONG",{});var vWr=s(Hae);kfo=r(vWr,"beit"),vWr.forEach(t),Sfo=r(xwe," \u2014 "),IP=n(xwe,"A",{href:!0});var FWr=s(IP);Rfo=r(FWr,"BeitModel"),FWr.forEach(t),Bfo=r(xwe," (BEiT model)"),xwe.forEach(t),Pfo=i($),Hh=n($,"LI",{});var $we=s(Hh);Uae=n($we,"STRONG",{});var TWr=s(Uae);Ifo=r(TWr,"bert"),TWr.forEach(t),qfo=r($we," \u2014 "),qP=n($we,"A",{href:!0});var MWr=s(qP);Nfo=r(MWr,"BertModel"),MWr.forEach(t),jfo=r($we," (BERT model)"),$we.forEach(t),Dfo=i($),Uh=n($,"LI",{});var kwe=s(Uh);Jae=n(kwe,"STRONG",{});var EWr=s(Jae);Gfo=r(EWr,"bert-generation"),EWr.forEach(t),Ofo=r(kwe," \u2014 "),NP=n(kwe,"A",{href:!0});var CWr=s(NP);Vfo=r(CWr,"BertGenerationEncoder"),CWr.forEach(t),Xfo=r(kwe," (Bert Generation model)"),kwe.forEach(t),zfo=i($),Jh=n($,"LI",{});var Swe=s(Jh);Yae=n(Swe,"STRONG",{});var wWr=s(Yae);Qfo=r(wWr,"big_bird"),wWr.forEach(t),Wfo=r(Swe," \u2014 "),jP=n(Swe,"A",{href:!0});var AWr=s(jP);Hfo=r(AWr,"BigBirdModel"),AWr.forEach(t),Ufo=r(Swe," (BigBird model)"),Swe.forEach(t),Jfo=i($),Yh=n($,"LI",{});var Rwe=s(Yh);Kae=n(Rwe,"STRONG",{});var yWr=s(Kae);Yfo=r(yWr,"bigbird_pegasus"),yWr.forEach(t),Kfo=r(Rwe," \u2014 "),DP=n(Rwe,"A",{href:!0});var LWr=s(DP);Zfo=r(LWr,"BigBirdPegasusModel"),LWr.forEach(t),emo=r(Rwe," (BigBirdPegasus model)"),Rwe.forEach(t),omo=i($),Kh=n($,"LI",{});var Bwe=s(Kh);Zae=n(Bwe,"STRONG",{});var xWr=s(Zae);rmo=r(xWr,"blenderbot"),xWr.forEach(t),tmo=r(Bwe," \u2014 "),GP=n(Bwe,"A",{href:!0});var $Wr=s(GP);amo=r($Wr,"BlenderbotModel"),$Wr.forEach(t),nmo=r(Bwe," (Blenderbot model)"),Bwe.forEach(t),smo=i($),Zh=n($,"LI",{});var Pwe=s(Zh);ene=n(Pwe,"STRONG",{});var kWr=s(ene);lmo=r(kWr,"blenderbot-small"),kWr.forEach(t),imo=r(Pwe," \u2014 "),OP=n(Pwe,"A",{href:!0});var SWr=s(OP);dmo=r(SWr,"BlenderbotSmallModel"),SWr.forEach(t),cmo=r(Pwe," (BlenderbotSmall model)"),Pwe.forEach(t),fmo=i($),ep=n($,"LI",{});var Iwe=s(ep);one=n(Iwe,"STRONG",{});var RWr=s(one);mmo=r(RWr,"camembert"),RWr.forEach(t),gmo=r(Iwe," \u2014 "),VP=n(Iwe,"A",{href:!0});var BWr=s(VP);hmo=r(BWr,"CamembertModel"),BWr.forEach(t),pmo=r(Iwe," (CamemBERT model)"),Iwe.forEach(t),umo=i($),op=n($,"LI",{});var qwe=s(op);rne=n(qwe,"STRONG",{});var PWr=s(rne);_mo=r(PWr,"canine"),PWr.forEach(t),bmo=r(qwe," \u2014 "),XP=n(qwe,"A",{href:!0});var IWr=s(XP);vmo=r(IWr,"CanineModel"),IWr.forEach(t),Fmo=r(qwe," (Canine model)"),qwe.forEach(t),Tmo=i($),rp=n($,"LI",{});var Nwe=s(rp);tne=n(Nwe,"STRONG",{});var qWr=s(tne);Mmo=r(qWr,"clip"),qWr.forEach(t),Emo=r(Nwe," \u2014 "),zP=n(Nwe,"A",{href:!0});var NWr=s(zP);Cmo=r(NWr,"CLIPModel"),NWr.forEach(t),wmo=r(Nwe," (CLIP model)"),Nwe.forEach(t),Amo=i($),tp=n($,"LI",{});var jwe=s(tp);ane=n(jwe,"STRONG",{});var jWr=s(ane);ymo=r(jWr,"convbert"),jWr.forEach(t),Lmo=r(jwe," \u2014 "),QP=n(jwe,"A",{href:!0});var DWr=s(QP);xmo=r(DWr,"ConvBertModel"),DWr.forEach(t),$mo=r(jwe," (ConvBERT model)"),jwe.forEach(t),kmo=i($),ap=n($,"LI",{});var Dwe=s(ap);nne=n(Dwe,"STRONG",{});var GWr=s(nne);Smo=r(GWr,"convnext"),GWr.forEach(t),Rmo=r(Dwe," \u2014 "),WP=n(Dwe,"A",{href:!0});var OWr=s(WP);Bmo=r(OWr,"ConvNextModel"),OWr.forEach(t),Pmo=r(Dwe," (ConvNext model)"),Dwe.forEach(t),Imo=i($),np=n($,"LI",{});var Gwe=s(np);sne=n(Gwe,"STRONG",{});var VWr=s(sne);qmo=r(VWr,"ctrl"),VWr.forEach(t),Nmo=r(Gwe," \u2014 "),HP=n(Gwe,"A",{href:!0});var XWr=s(HP);jmo=r(XWr,"CTRLModel"),XWr.forEach(t),Dmo=r(Gwe," (CTRL model)"),Gwe.forEach(t),Gmo=i($),sp=n($,"LI",{});var Owe=s(sp);lne=n(Owe,"STRONG",{});var zWr=s(lne);Omo=r(zWr,"data2vec-audio"),zWr.forEach(t),Vmo=r(Owe," \u2014 "),UP=n(Owe,"A",{href:!0});var QWr=s(UP);Xmo=r(QWr,"Data2VecAudioModel"),QWr.forEach(t),zmo=r(Owe," (Data2VecAudio model)"),Owe.forEach(t),Qmo=i($),lp=n($,"LI",{});var Vwe=s(lp);ine=n(Vwe,"STRONG",{});var WWr=s(ine);Wmo=r(WWr,"data2vec-text"),WWr.forEach(t),Hmo=r(Vwe," \u2014 "),JP=n(Vwe,"A",{href:!0});var HWr=s(JP);Umo=r(HWr,"Data2VecTextModel"),HWr.forEach(t),Jmo=r(Vwe," (Data2VecText model)"),Vwe.forEach(t),Ymo=i($),ip=n($,"LI",{});var Xwe=s(ip);dne=n(Xwe,"STRONG",{});var UWr=s(dne);Kmo=r(UWr,"data2vec-vision"),UWr.forEach(t),Zmo=r(Xwe," \u2014 "),YP=n(Xwe,"A",{href:!0});var JWr=s(YP);ego=r(JWr,"Data2VecVisionModel"),JWr.forEach(t),ogo=r(Xwe," (Data2VecVision model)"),Xwe.forEach(t),rgo=i($),dp=n($,"LI",{});var zwe=s(dp);cne=n(zwe,"STRONG",{});var YWr=s(cne);tgo=r(YWr,"deberta"),YWr.forEach(t),ago=r(zwe," \u2014 "),KP=n(zwe,"A",{href:!0});var KWr=s(KP);ngo=r(KWr,"DebertaModel"),KWr.forEach(t),sgo=r(zwe," (DeBERTa model)"),zwe.forEach(t),lgo=i($),cp=n($,"LI",{});var Qwe=s(cp);fne=n(Qwe,"STRONG",{});var ZWr=s(fne);igo=r(ZWr,"deberta-v2"),ZWr.forEach(t),dgo=r(Qwe," \u2014 "),ZP=n(Qwe,"A",{href:!0});var eHr=s(ZP);cgo=r(eHr,"DebertaV2Model"),eHr.forEach(t),fgo=r(Qwe," (DeBERTa-v2 model)"),Qwe.forEach(t),mgo=i($),fp=n($,"LI",{});var Wwe=s(fp);mne=n(Wwe,"STRONG",{});var oHr=s(mne);ggo=r(oHr,"decision_transformer"),oHr.forEach(t),hgo=r(Wwe," \u2014 "),eI=n(Wwe,"A",{href:!0});var rHr=s(eI);pgo=r(rHr,"DecisionTransformerModel"),rHr.forEach(t),ugo=r(Wwe," (Decision Transformer model)"),Wwe.forEach(t),_go=i($),mp=n($,"LI",{});var Hwe=s(mp);gne=n(Hwe,"STRONG",{});var tHr=s(gne);bgo=r(tHr,"deit"),tHr.forEach(t),vgo=r(Hwe," \u2014 "),oI=n(Hwe,"A",{href:!0});var aHr=s(oI);Fgo=r(aHr,"DeiTModel"),aHr.forEach(t),Tgo=r(Hwe," (DeiT model)"),Hwe.forEach(t),Mgo=i($),gp=n($,"LI",{});var Uwe=s(gp);hne=n(Uwe,"STRONG",{});var nHr=s(hne);Ego=r(nHr,"detr"),nHr.forEach(t),Cgo=r(Uwe," \u2014 "),rI=n(Uwe,"A",{href:!0});var sHr=s(rI);wgo=r(sHr,"DetrModel"),sHr.forEach(t),Ago=r(Uwe," (DETR model)"),Uwe.forEach(t),ygo=i($),hp=n($,"LI",{});var Jwe=s(hp);pne=n(Jwe,"STRONG",{});var lHr=s(pne);Lgo=r(lHr,"distilbert"),lHr.forEach(t),xgo=r(Jwe," \u2014 "),tI=n(Jwe,"A",{href:!0});var iHr=s(tI);$go=r(iHr,"DistilBertModel"),iHr.forEach(t),kgo=r(Jwe," (DistilBERT model)"),Jwe.forEach(t),Sgo=i($),pp=n($,"LI",{});var Ywe=s(pp);une=n(Ywe,"STRONG",{});var dHr=s(une);Rgo=r(dHr,"dpr"),dHr.forEach(t),Bgo=r(Ywe," \u2014 "),aI=n(Ywe,"A",{href:!0});var cHr=s(aI);Pgo=r(cHr,"DPRQuestionEncoder"),cHr.forEach(t),Igo=r(Ywe," (DPR model)"),Ywe.forEach(t),qgo=i($),up=n($,"LI",{});var Kwe=s(up);_ne=n(Kwe,"STRONG",{});var fHr=s(_ne);Ngo=r(fHr,"dpt"),fHr.forEach(t),jgo=r(Kwe," \u2014 "),nI=n(Kwe,"A",{href:!0});var mHr=s(nI);Dgo=r(mHr,"DPTModel"),mHr.forEach(t),Ggo=r(Kwe," (DPT model)"),Kwe.forEach(t),Ogo=i($),_p=n($,"LI",{});var Zwe=s(_p);bne=n(Zwe,"STRONG",{});var gHr=s(bne);Vgo=r(gHr,"electra"),gHr.forEach(t),Xgo=r(Zwe," \u2014 "),sI=n(Zwe,"A",{href:!0});var hHr=s(sI);zgo=r(hHr,"ElectraModel"),hHr.forEach(t),Qgo=r(Zwe," (ELECTRA model)"),Zwe.forEach(t),Wgo=i($),bp=n($,"LI",{});var eAe=s(bp);vne=n(eAe,"STRONG",{});var pHr=s(vne);Hgo=r(pHr,"flaubert"),pHr.forEach(t),Ugo=r(eAe," \u2014 "),lI=n(eAe,"A",{href:!0});var uHr=s(lI);Jgo=r(uHr,"FlaubertModel"),uHr.forEach(t),Ygo=r(eAe," (FlauBERT model)"),eAe.forEach(t),Kgo=i($),vp=n($,"LI",{});var oAe=s(vp);Fne=n(oAe,"STRONG",{});var _Hr=s(Fne);Zgo=r(_Hr,"flava"),_Hr.forEach(t),eho=r(oAe," \u2014 "),iI=n(oAe,"A",{href:!0});var bHr=s(iI);oho=r(bHr,"FlavaModel"),bHr.forEach(t),rho=r(oAe," (Flava model)"),oAe.forEach(t),tho=i($),Fp=n($,"LI",{});var rAe=s(Fp);Tne=n(rAe,"STRONG",{});var vHr=s(Tne);aho=r(vHr,"fnet"),vHr.forEach(t),nho=r(rAe," \u2014 "),dI=n(rAe,"A",{href:!0});var FHr=s(dI);sho=r(FHr,"FNetModel"),FHr.forEach(t),lho=r(rAe," (FNet model)"),rAe.forEach(t),iho=i($),Tp=n($,"LI",{});var tAe=s(Tp);Mne=n(tAe,"STRONG",{});var THr=s(Mne);dho=r(THr,"fsmt"),THr.forEach(t),cho=r(tAe," \u2014 "),cI=n(tAe,"A",{href:!0});var MHr=s(cI);fho=r(MHr,"FSMTModel"),MHr.forEach(t),mho=r(tAe," (FairSeq Machine-Translation model)"),tAe.forEach(t),gho=i($),Ss=n($,"LI",{});var s$=s(Ss);Ene=n(s$,"STRONG",{});var EHr=s(Ene);hho=r(EHr,"funnel"),EHr.forEach(t),pho=r(s$," \u2014 "),fI=n(s$,"A",{href:!0});var CHr=s(fI);uho=r(CHr,"FunnelModel"),CHr.forEach(t),_ho=r(s$," or "),mI=n(s$,"A",{href:!0});var wHr=s(mI);bho=r(wHr,"FunnelBaseModel"),wHr.forEach(t),vho=r(s$," (Funnel Transformer model)"),s$.forEach(t),Fho=i($),Mp=n($,"LI",{});var aAe=s(Mp);Cne=n(aAe,"STRONG",{});var AHr=s(Cne);Tho=r(AHr,"glpn"),AHr.forEach(t),Mho=r(aAe," \u2014 "),gI=n(aAe,"A",{href:!0});var yHr=s(gI);Eho=r(yHr,"GLPNModel"),yHr.forEach(t),Cho=r(aAe," (GLPN model)"),aAe.forEach(t),who=i($),Ep=n($,"LI",{});var nAe=s(Ep);wne=n(nAe,"STRONG",{});var LHr=s(wne);Aho=r(LHr,"gpt2"),LHr.forEach(t),yho=r(nAe," \u2014 "),hI=n(nAe,"A",{href:!0});var xHr=s(hI);Lho=r(xHr,"GPT2Model"),xHr.forEach(t),xho=r(nAe," (OpenAI GPT-2 model)"),nAe.forEach(t),$ho=i($),Cp=n($,"LI",{});var sAe=s(Cp);Ane=n(sAe,"STRONG",{});var $Hr=s(Ane);kho=r($Hr,"gpt_neo"),$Hr.forEach(t),Sho=r(sAe," \u2014 "),pI=n(sAe,"A",{href:!0});var kHr=s(pI);Rho=r(kHr,"GPTNeoModel"),kHr.forEach(t),Bho=r(sAe," (GPT Neo model)"),sAe.forEach(t),Pho=i($),wp=n($,"LI",{});var lAe=s(wp);yne=n(lAe,"STRONG",{});var SHr=s(yne);Iho=r(SHr,"gptj"),SHr.forEach(t),qho=r(lAe," \u2014 "),uI=n(lAe,"A",{href:!0});var RHr=s(uI);Nho=r(RHr,"GPTJModel"),RHr.forEach(t),jho=r(lAe," (GPT-J model)"),lAe.forEach(t),Dho=i($),Ap=n($,"LI",{});var iAe=s(Ap);Lne=n(iAe,"STRONG",{});var BHr=s(Lne);Gho=r(BHr,"hubert"),BHr.forEach(t),Oho=r(iAe," \u2014 "),_I=n(iAe,"A",{href:!0});var PHr=s(_I);Vho=r(PHr,"HubertModel"),PHr.forEach(t),Xho=r(iAe," (Hubert model)"),iAe.forEach(t),zho=i($),yp=n($,"LI",{});var dAe=s(yp);xne=n(dAe,"STRONG",{});var IHr=s(xne);Qho=r(IHr,"ibert"),IHr.forEach(t),Who=r(dAe," \u2014 "),bI=n(dAe,"A",{href:!0});var qHr=s(bI);Hho=r(qHr,"IBertModel"),qHr.forEach(t),Uho=r(dAe," (I-BERT model)"),dAe.forEach(t),Jho=i($),Lp=n($,"LI",{});var cAe=s(Lp);$ne=n(cAe,"STRONG",{});var NHr=s($ne);Yho=r(NHr,"imagegpt"),NHr.forEach(t),Kho=r(cAe," \u2014 "),vI=n(cAe,"A",{href:!0});var jHr=s(vI);Zho=r(jHr,"ImageGPTModel"),jHr.forEach(t),epo=r(cAe," (ImageGPT model)"),cAe.forEach(t),opo=i($),xp=n($,"LI",{});var fAe=s(xp);kne=n(fAe,"STRONG",{});var DHr=s(kne);rpo=r(DHr,"layoutlm"),DHr.forEach(t),tpo=r(fAe," \u2014 "),FI=n(fAe,"A",{href:!0});var GHr=s(FI);apo=r(GHr,"LayoutLMModel"),GHr.forEach(t),npo=r(fAe," (LayoutLM model)"),fAe.forEach(t),spo=i($),$p=n($,"LI",{});var mAe=s($p);Sne=n(mAe,"STRONG",{});var OHr=s(Sne);lpo=r(OHr,"layoutlmv2"),OHr.forEach(t),ipo=r(mAe," \u2014 "),TI=n(mAe,"A",{href:!0});var VHr=s(TI);dpo=r(VHr,"LayoutLMv2Model"),VHr.forEach(t),cpo=r(mAe," (LayoutLMv2 model)"),mAe.forEach(t),fpo=i($),kp=n($,"LI",{});var gAe=s(kp);Rne=n(gAe,"STRONG",{});var XHr=s(Rne);mpo=r(XHr,"led"),XHr.forEach(t),gpo=r(gAe," \u2014 "),MI=n(gAe,"A",{href:!0});var zHr=s(MI);hpo=r(zHr,"LEDModel"),zHr.forEach(t),ppo=r(gAe," (LED model)"),gAe.forEach(t),upo=i($),Sp=n($,"LI",{});var hAe=s(Sp);Bne=n(hAe,"STRONG",{});var QHr=s(Bne);_po=r(QHr,"longformer"),QHr.forEach(t),bpo=r(hAe," \u2014 "),EI=n(hAe,"A",{href:!0});var WHr=s(EI);vpo=r(WHr,"LongformerModel"),WHr.forEach(t),Fpo=r(hAe," (Longformer model)"),hAe.forEach(t),Tpo=i($),Rp=n($,"LI",{});var pAe=s(Rp);Pne=n(pAe,"STRONG",{});var HHr=s(Pne);Mpo=r(HHr,"luke"),HHr.forEach(t),Epo=r(pAe," \u2014 "),CI=n(pAe,"A",{href:!0});var UHr=s(CI);Cpo=r(UHr,"LukeModel"),UHr.forEach(t),wpo=r(pAe," (LUKE model)"),pAe.forEach(t),Apo=i($),Bp=n($,"LI",{});var uAe=s(Bp);Ine=n(uAe,"STRONG",{});var JHr=s(Ine);ypo=r(JHr,"lxmert"),JHr.forEach(t),Lpo=r(uAe," \u2014 "),wI=n(uAe,"A",{href:!0});var YHr=s(wI);xpo=r(YHr,"LxmertModel"),YHr.forEach(t),$po=r(uAe," (LXMERT model)"),uAe.forEach(t),kpo=i($),Pp=n($,"LI",{});var _Ae=s(Pp);qne=n(_Ae,"STRONG",{});var KHr=s(qne);Spo=r(KHr,"m2m_100"),KHr.forEach(t),Rpo=r(_Ae," \u2014 "),AI=n(_Ae,"A",{href:!0});var ZHr=s(AI);Bpo=r(ZHr,"M2M100Model"),ZHr.forEach(t),Ppo=r(_Ae," (M2M100 model)"),_Ae.forEach(t),Ipo=i($),Ip=n($,"LI",{});var bAe=s(Ip);Nne=n(bAe,"STRONG",{});var eUr=s(Nne);qpo=r(eUr,"marian"),eUr.forEach(t),Npo=r(bAe," \u2014 "),yI=n(bAe,"A",{href:!0});var oUr=s(yI);jpo=r(oUr,"MarianModel"),oUr.forEach(t),Dpo=r(bAe," (Marian model)"),bAe.forEach(t),Gpo=i($),qp=n($,"LI",{});var vAe=s(qp);jne=n(vAe,"STRONG",{});var rUr=s(jne);Opo=r(rUr,"maskformer"),rUr.forEach(t),Vpo=r(vAe," \u2014 "),LI=n(vAe,"A",{href:!0});var tUr=s(LI);Xpo=r(tUr,"MaskFormerModel"),tUr.forEach(t),zpo=r(vAe," (MaskFormer model)"),vAe.forEach(t),Qpo=i($),Np=n($,"LI",{});var FAe=s(Np);Dne=n(FAe,"STRONG",{});var aUr=s(Dne);Wpo=r(aUr,"mbart"),aUr.forEach(t),Hpo=r(FAe," \u2014 "),xI=n(FAe,"A",{href:!0});var nUr=s(xI);Upo=r(nUr,"MBartModel"),nUr.forEach(t),Jpo=r(FAe," (mBART model)"),FAe.forEach(t),Ypo=i($),jp=n($,"LI",{});var TAe=s(jp);Gne=n(TAe,"STRONG",{});var sUr=s(Gne);Kpo=r(sUr,"megatron-bert"),sUr.forEach(t),Zpo=r(TAe," \u2014 "),$I=n(TAe,"A",{href:!0});var lUr=s($I);euo=r(lUr,"MegatronBertModel"),lUr.forEach(t),ouo=r(TAe," (MegatronBert model)"),TAe.forEach(t),ruo=i($),Dp=n($,"LI",{});var MAe=s(Dp);One=n(MAe,"STRONG",{});var iUr=s(One);tuo=r(iUr,"mobilebert"),iUr.forEach(t),auo=r(MAe," \u2014 "),kI=n(MAe,"A",{href:!0});var dUr=s(kI);nuo=r(dUr,"MobileBertModel"),dUr.forEach(t),suo=r(MAe," (MobileBERT model)"),MAe.forEach(t),luo=i($),Gp=n($,"LI",{});var EAe=s(Gp);Vne=n(EAe,"STRONG",{});var cUr=s(Vne);iuo=r(cUr,"mpnet"),cUr.forEach(t),duo=r(EAe," \u2014 "),SI=n(EAe,"A",{href:!0});var fUr=s(SI);cuo=r(fUr,"MPNetModel"),fUr.forEach(t),fuo=r(EAe," (MPNet model)"),EAe.forEach(t),muo=i($),Op=n($,"LI",{});var CAe=s(Op);Xne=n(CAe,"STRONG",{});var mUr=s(Xne);guo=r(mUr,"mt5"),mUr.forEach(t),huo=r(CAe," \u2014 "),RI=n(CAe,"A",{href:!0});var gUr=s(RI);puo=r(gUr,"MT5Model"),gUr.forEach(t),uuo=r(CAe," (mT5 model)"),CAe.forEach(t),_uo=i($),Vp=n($,"LI",{});var wAe=s(Vp);zne=n(wAe,"STRONG",{});var hUr=s(zne);buo=r(hUr,"nystromformer"),hUr.forEach(t),vuo=r(wAe," \u2014 "),BI=n(wAe,"A",{href:!0});var pUr=s(BI);Fuo=r(pUr,"NystromformerModel"),pUr.forEach(t),Tuo=r(wAe," (Nystromformer model)"),wAe.forEach(t),Muo=i($),Xp=n($,"LI",{});var AAe=s(Xp);Qne=n(AAe,"STRONG",{});var uUr=s(Qne);Euo=r(uUr,"openai-gpt"),uUr.forEach(t),Cuo=r(AAe," \u2014 "),PI=n(AAe,"A",{href:!0});var _Ur=s(PI);wuo=r(_Ur,"OpenAIGPTModel"),_Ur.forEach(t),Auo=r(AAe," (OpenAI GPT model)"),AAe.forEach(t),yuo=i($),zp=n($,"LI",{});var yAe=s(zp);Wne=n(yAe,"STRONG",{});var bUr=s(Wne);Luo=r(bUr,"pegasus"),bUr.forEach(t),xuo=r(yAe," \u2014 "),II=n(yAe,"A",{href:!0});var vUr=s(II);$uo=r(vUr,"PegasusModel"),vUr.forEach(t),kuo=r(yAe," (Pegasus model)"),yAe.forEach(t),Suo=i($),Qp=n($,"LI",{});var LAe=s(Qp);Hne=n(LAe,"STRONG",{});var FUr=s(Hne);Ruo=r(FUr,"perceiver"),FUr.forEach(t),Buo=r(LAe," \u2014 "),qI=n(LAe,"A",{href:!0});var TUr=s(qI);Puo=r(TUr,"PerceiverModel"),TUr.forEach(t),Iuo=r(LAe," (Perceiver model)"),LAe.forEach(t),quo=i($),Wp=n($,"LI",{});var xAe=s(Wp);Une=n(xAe,"STRONG",{});var MUr=s(Une);Nuo=r(MUr,"plbart"),MUr.forEach(t),juo=r(xAe," \u2014 "),NI=n(xAe,"A",{href:!0});var EUr=s(NI);Duo=r(EUr,"PLBartModel"),EUr.forEach(t),Guo=r(xAe," (PLBart model)"),xAe.forEach(t),Ouo=i($),Hp=n($,"LI",{});var $Ae=s(Hp);Jne=n($Ae,"STRONG",{});var CUr=s(Jne);Vuo=r(CUr,"poolformer"),CUr.forEach(t),Xuo=r($Ae," \u2014 "),jI=n($Ae,"A",{href:!0});var wUr=s(jI);zuo=r(wUr,"PoolFormerModel"),wUr.forEach(t),Quo=r($Ae," (PoolFormer model)"),$Ae.forEach(t),Wuo=i($),Up=n($,"LI",{});var kAe=s(Up);Yne=n(kAe,"STRONG",{});var AUr=s(Yne);Huo=r(AUr,"prophetnet"),AUr.forEach(t),Uuo=r(kAe," \u2014 "),DI=n(kAe,"A",{href:!0});var yUr=s(DI);Juo=r(yUr,"ProphetNetModel"),yUr.forEach(t),Yuo=r(kAe," (ProphetNet model)"),kAe.forEach(t),Kuo=i($),Jp=n($,"LI",{});var SAe=s(Jp);Kne=n(SAe,"STRONG",{});var LUr=s(Kne);Zuo=r(LUr,"qdqbert"),LUr.forEach(t),e_o=r(SAe," \u2014 "),GI=n(SAe,"A",{href:!0});var xUr=s(GI);o_o=r(xUr,"QDQBertModel"),xUr.forEach(t),r_o=r(SAe," (QDQBert model)"),SAe.forEach(t),t_o=i($),Yp=n($,"LI",{});var RAe=s(Yp);Zne=n(RAe,"STRONG",{});var $Ur=s(Zne);a_o=r($Ur,"reformer"),$Ur.forEach(t),n_o=r(RAe," \u2014 "),OI=n(RAe,"A",{href:!0});var kUr=s(OI);s_o=r(kUr,"ReformerModel"),kUr.forEach(t),l_o=r(RAe," (Reformer model)"),RAe.forEach(t),i_o=i($),Kp=n($,"LI",{});var BAe=s(Kp);ese=n(BAe,"STRONG",{});var SUr=s(ese);d_o=r(SUr,"regnet"),SUr.forEach(t),c_o=r(BAe," \u2014 "),VI=n(BAe,"A",{href:!0});var RUr=s(VI);f_o=r(RUr,"RegNetModel"),RUr.forEach(t),m_o=r(BAe," (RegNet model)"),BAe.forEach(t),g_o=i($),Zp=n($,"LI",{});var PAe=s(Zp);ose=n(PAe,"STRONG",{});var BUr=s(ose);h_o=r(BUr,"rembert"),BUr.forEach(t),p_o=r(PAe," \u2014 "),XI=n(PAe,"A",{href:!0});var PUr=s(XI);u_o=r(PUr,"RemBertModel"),PUr.forEach(t),__o=r(PAe," (RemBERT model)"),PAe.forEach(t),b_o=i($),eu=n($,"LI",{});var IAe=s(eu);rse=n(IAe,"STRONG",{});var IUr=s(rse);v_o=r(IUr,"resnet"),IUr.forEach(t),F_o=r(IAe," \u2014 "),zI=n(IAe,"A",{href:!0});var qUr=s(zI);T_o=r(qUr,"ResNetModel"),qUr.forEach(t),M_o=r(IAe," (ResNet model)"),IAe.forEach(t),E_o=i($),ou=n($,"LI",{});var qAe=s(ou);tse=n(qAe,"STRONG",{});var NUr=s(tse);C_o=r(NUr,"retribert"),NUr.forEach(t),w_o=r(qAe," \u2014 "),QI=n(qAe,"A",{href:!0});var jUr=s(QI);A_o=r(jUr,"RetriBertModel"),jUr.forEach(t),y_o=r(qAe," (RetriBERT model)"),qAe.forEach(t),L_o=i($),ru=n($,"LI",{});var NAe=s(ru);ase=n(NAe,"STRONG",{});var DUr=s(ase);x_o=r(DUr,"roberta"),DUr.forEach(t),$_o=r(NAe," \u2014 "),WI=n(NAe,"A",{href:!0});var GUr=s(WI);k_o=r(GUr,"RobertaModel"),GUr.forEach(t),S_o=r(NAe," (RoBERTa model)"),NAe.forEach(t),R_o=i($),tu=n($,"LI",{});var jAe=s(tu);nse=n(jAe,"STRONG",{});var OUr=s(nse);B_o=r(OUr,"roformer"),OUr.forEach(t),P_o=r(jAe," \u2014 "),HI=n(jAe,"A",{href:!0});var VUr=s(HI);I_o=r(VUr,"RoFormerModel"),VUr.forEach(t),q_o=r(jAe," (RoFormer model)"),jAe.forEach(t),N_o=i($),au=n($,"LI",{});var DAe=s(au);sse=n(DAe,"STRONG",{});var XUr=s(sse);j_o=r(XUr,"segformer"),XUr.forEach(t),D_o=r(DAe," \u2014 "),UI=n(DAe,"A",{href:!0});var zUr=s(UI);G_o=r(zUr,"SegformerModel"),zUr.forEach(t),O_o=r(DAe," (SegFormer model)"),DAe.forEach(t),V_o=i($),nu=n($,"LI",{});var GAe=s(nu);lse=n(GAe,"STRONG",{});var QUr=s(lse);X_o=r(QUr,"sew"),QUr.forEach(t),z_o=r(GAe," \u2014 "),JI=n(GAe,"A",{href:!0});var WUr=s(JI);Q_o=r(WUr,"SEWModel"),WUr.forEach(t),W_o=r(GAe," (SEW model)"),GAe.forEach(t),H_o=i($),su=n($,"LI",{});var OAe=s(su);ise=n(OAe,"STRONG",{});var HUr=s(ise);U_o=r(HUr,"sew-d"),HUr.forEach(t),J_o=r(OAe," \u2014 "),YI=n(OAe,"A",{href:!0});var UUr=s(YI);Y_o=r(UUr,"SEWDModel"),UUr.forEach(t),K_o=r(OAe," (SEW-D model)"),OAe.forEach(t),Z_o=i($),lu=n($,"LI",{});var VAe=s(lu);dse=n(VAe,"STRONG",{});var JUr=s(dse);e6o=r(JUr,"speech_to_text"),JUr.forEach(t),o6o=r(VAe," \u2014 "),KI=n(VAe,"A",{href:!0});var YUr=s(KI);r6o=r(YUr,"Speech2TextModel"),YUr.forEach(t),t6o=r(VAe," (Speech2Text model)"),VAe.forEach(t),a6o=i($),iu=n($,"LI",{});var XAe=s(iu);cse=n(XAe,"STRONG",{});var KUr=s(cse);n6o=r(KUr,"splinter"),KUr.forEach(t),s6o=r(XAe," \u2014 "),ZI=n(XAe,"A",{href:!0});var ZUr=s(ZI);l6o=r(ZUr,"SplinterModel"),ZUr.forEach(t),i6o=r(XAe," (Splinter model)"),XAe.forEach(t),d6o=i($),du=n($,"LI",{});var zAe=s(du);fse=n(zAe,"STRONG",{});var eJr=s(fse);c6o=r(eJr,"squeezebert"),eJr.forEach(t),f6o=r(zAe," \u2014 "),eq=n(zAe,"A",{href:!0});var oJr=s(eq);m6o=r(oJr,"SqueezeBertModel"),oJr.forEach(t),g6o=r(zAe," (SqueezeBERT model)"),zAe.forEach(t),h6o=i($),cu=n($,"LI",{});var QAe=s(cu);mse=n(QAe,"STRONG",{});var rJr=s(mse);p6o=r(rJr,"swin"),rJr.forEach(t),u6o=r(QAe," \u2014 "),oq=n(QAe,"A",{href:!0});var tJr=s(oq);_6o=r(tJr,"SwinModel"),tJr.forEach(t),b6o=r(QAe," (Swin model)"),QAe.forEach(t),v6o=i($),fu=n($,"LI",{});var WAe=s(fu);gse=n(WAe,"STRONG",{});var aJr=s(gse);F6o=r(aJr,"t5"),aJr.forEach(t),T6o=r(WAe," \u2014 "),rq=n(WAe,"A",{href:!0});var nJr=s(rq);M6o=r(nJr,"T5Model"),nJr.forEach(t),E6o=r(WAe," (T5 model)"),WAe.forEach(t),C6o=i($),mu=n($,"LI",{});var HAe=s(mu);hse=n(HAe,"STRONG",{});var sJr=s(hse);w6o=r(sJr,"tapas"),sJr.forEach(t),A6o=r(HAe," \u2014 "),tq=n(HAe,"A",{href:!0});var lJr=s(tq);y6o=r(lJr,"TapasModel"),lJr.forEach(t),L6o=r(HAe," (TAPAS model)"),HAe.forEach(t),x6o=i($),gu=n($,"LI",{});var UAe=s(gu);pse=n(UAe,"STRONG",{});var iJr=s(pse);$6o=r(iJr,"transfo-xl"),iJr.forEach(t),k6o=r(UAe," \u2014 "),aq=n(UAe,"A",{href:!0});var dJr=s(aq);S6o=r(dJr,"TransfoXLModel"),dJr.forEach(t),R6o=r(UAe," (Transformer-XL model)"),UAe.forEach(t),B6o=i($),hu=n($,"LI",{});var JAe=s(hu);use=n(JAe,"STRONG",{});var cJr=s(use);P6o=r(cJr,"unispeech"),cJr.forEach(t),I6o=r(JAe," \u2014 "),nq=n(JAe,"A",{href:!0});var fJr=s(nq);q6o=r(fJr,"UniSpeechModel"),fJr.forEach(t),N6o=r(JAe," (UniSpeech model)"),JAe.forEach(t),j6o=i($),pu=n($,"LI",{});var YAe=s(pu);_se=n(YAe,"STRONG",{});var mJr=s(_se);D6o=r(mJr,"unispeech-sat"),mJr.forEach(t),G6o=r(YAe," \u2014 "),sq=n(YAe,"A",{href:!0});var gJr=s(sq);O6o=r(gJr,"UniSpeechSatModel"),gJr.forEach(t),V6o=r(YAe," (UniSpeechSat model)"),YAe.forEach(t),X6o=i($),uu=n($,"LI",{});var KAe=s(uu);bse=n(KAe,"STRONG",{});var hJr=s(bse);z6o=r(hJr,"van"),hJr.forEach(t),Q6o=r(KAe," \u2014 "),lq=n(KAe,"A",{href:!0});var pJr=s(lq);W6o=r(pJr,"VanModel"),pJr.forEach(t),H6o=r(KAe," (VAN model)"),KAe.forEach(t),U6o=i($),_u=n($,"LI",{});var ZAe=s(_u);vse=n(ZAe,"STRONG",{});var uJr=s(vse);J6o=r(uJr,"vilt"),uJr.forEach(t),Y6o=r(ZAe," \u2014 "),iq=n(ZAe,"A",{href:!0});var _Jr=s(iq);K6o=r(_Jr,"ViltModel"),_Jr.forEach(t),Z6o=r(ZAe," (ViLT model)"),ZAe.forEach(t),e1o=i($),bu=n($,"LI",{});var e0e=s(bu);Fse=n(e0e,"STRONG",{});var bJr=s(Fse);o1o=r(bJr,"vision-text-dual-encoder"),bJr.forEach(t),r1o=r(e0e," \u2014 "),dq=n(e0e,"A",{href:!0});var vJr=s(dq);t1o=r(vJr,"VisionTextDualEncoderModel"),vJr.forEach(t),a1o=r(e0e," (VisionTextDualEncoder model)"),e0e.forEach(t),n1o=i($),vu=n($,"LI",{});var o0e=s(vu);Tse=n(o0e,"STRONG",{});var FJr=s(Tse);s1o=r(FJr,"visual_bert"),FJr.forEach(t),l1o=r(o0e," \u2014 "),cq=n(o0e,"A",{href:!0});var TJr=s(cq);i1o=r(TJr,"VisualBertModel"),TJr.forEach(t),d1o=r(o0e," (VisualBert model)"),o0e.forEach(t),c1o=i($),Fu=n($,"LI",{});var r0e=s(Fu);Mse=n(r0e,"STRONG",{});var MJr=s(Mse);f1o=r(MJr,"vit"),MJr.forEach(t),m1o=r(r0e," \u2014 "),fq=n(r0e,"A",{href:!0});var EJr=s(fq);g1o=r(EJr,"ViTModel"),EJr.forEach(t),h1o=r(r0e," (ViT model)"),r0e.forEach(t),p1o=i($),Tu=n($,"LI",{});var t0e=s(Tu);Ese=n(t0e,"STRONG",{});var CJr=s(Ese);u1o=r(CJr,"vit_mae"),CJr.forEach(t),_1o=r(t0e," \u2014 "),mq=n(t0e,"A",{href:!0});var wJr=s(mq);b1o=r(wJr,"ViTMAEModel"),wJr.forEach(t),v1o=r(t0e," (ViTMAE model)"),t0e.forEach(t),F1o=i($),Mu=n($,"LI",{});var a0e=s(Mu);Cse=n(a0e,"STRONG",{});var AJr=s(Cse);T1o=r(AJr,"wav2vec2"),AJr.forEach(t),M1o=r(a0e," \u2014 "),gq=n(a0e,"A",{href:!0});var yJr=s(gq);E1o=r(yJr,"Wav2Vec2Model"),yJr.forEach(t),C1o=r(a0e," (Wav2Vec2 model)"),a0e.forEach(t),w1o=i($),Eu=n($,"LI",{});var n0e=s(Eu);wse=n(n0e,"STRONG",{});var LJr=s(wse);A1o=r(LJr,"wavlm"),LJr.forEach(t),y1o=r(n0e," \u2014 "),hq=n(n0e,"A",{href:!0});var xJr=s(hq);L1o=r(xJr,"WavLMModel"),xJr.forEach(t),x1o=r(n0e," (WavLM model)"),n0e.forEach(t),$1o=i($),Cu=n($,"LI",{});var s0e=s(Cu);Ase=n(s0e,"STRONG",{});var $Jr=s(Ase);k1o=r($Jr,"xglm"),$Jr.forEach(t),S1o=r(s0e," \u2014 "),pq=n(s0e,"A",{href:!0});var kJr=s(pq);R1o=r(kJr,"XGLMModel"),kJr.forEach(t),B1o=r(s0e," (XGLM model)"),s0e.forEach(t),P1o=i($),wu=n($,"LI",{});var l0e=s(wu);yse=n(l0e,"STRONG",{});var SJr=s(yse);I1o=r(SJr,"xlm"),SJr.forEach(t),q1o=r(l0e," \u2014 "),uq=n(l0e,"A",{href:!0});var RJr=s(uq);N1o=r(RJr,"XLMModel"),RJr.forEach(t),j1o=r(l0e," (XLM model)"),l0e.forEach(t),D1o=i($),Au=n($,"LI",{});var i0e=s(Au);Lse=n(i0e,"STRONG",{});var BJr=s(Lse);G1o=r(BJr,"xlm-prophetnet"),BJr.forEach(t),O1o=r(i0e," \u2014 "),_q=n(i0e,"A",{href:!0});var PJr=s(_q);V1o=r(PJr,"XLMProphetNetModel"),PJr.forEach(t),X1o=r(i0e," (XLMProphetNet model)"),i0e.forEach(t),z1o=i($),yu=n($,"LI",{});var d0e=s(yu);xse=n(d0e,"STRONG",{});var IJr=s(xse);Q1o=r(IJr,"xlm-roberta"),IJr.forEach(t),W1o=r(d0e," \u2014 "),bq=n(d0e,"A",{href:!0});var qJr=s(bq);H1o=r(qJr,"XLMRobertaModel"),qJr.forEach(t),U1o=r(d0e," (XLM-RoBERTa model)"),d0e.forEach(t),J1o=i($),Lu=n($,"LI",{});var c0e=s(Lu);$se=n(c0e,"STRONG",{});var NJr=s($se);Y1o=r(NJr,"xlm-roberta-xl"),NJr.forEach(t),K1o=r(c0e," \u2014 "),vq=n(c0e,"A",{href:!0});var jJr=s(vq);Z1o=r(jJr,"XLMRobertaXLModel"),jJr.forEach(t),ebo=r(c0e," (XLM-RoBERTa-XL model)"),c0e.forEach(t),obo=i($),xu=n($,"LI",{});var f0e=s(xu);kse=n(f0e,"STRONG",{});var DJr=s(kse);rbo=r(DJr,"xlnet"),DJr.forEach(t),tbo=r(f0e," \u2014 "),Fq=n(f0e,"A",{href:!0});var GJr=s(Fq);abo=r(GJr,"XLNetModel"),GJr.forEach(t),nbo=r(f0e," (XLNet model)"),f0e.forEach(t),sbo=i($),$u=n($,"LI",{});var m0e=s($u);Sse=n(m0e,"STRONG",{});var OJr=s(Sse);lbo=r(OJr,"yolos"),OJr.forEach(t),ibo=r(m0e," \u2014 "),Tq=n(m0e,"A",{href:!0});var VJr=s(Tq);dbo=r(VJr,"YolosModel"),VJr.forEach(t),cbo=r(m0e," (YOLOS model)"),m0e.forEach(t),fbo=i($),ku=n($,"LI",{});var g0e=s(ku);Rse=n(g0e,"STRONG",{});var XJr=s(Rse);mbo=r(XJr,"yoso"),XJr.forEach(t),gbo=r(g0e," \u2014 "),Mq=n(g0e,"A",{href:!0});var zJr=s(Mq);hbo=r(zJr,"YosoModel"),zJr.forEach(t),pbo=r(g0e," (YOSO model)"),g0e.forEach(t),$.forEach(t),ubo=i(Zt),Su=n(Zt,"P",{});var h0e=s(Su);_bo=r(h0e,"The model is set in evaluation mode by default using "),Bse=n(h0e,"CODE",{});var QJr=s(Bse);bbo=r(QJr,"model.eval()"),QJr.forEach(t),vbo=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pse=n(h0e,"CODE",{});var WJr=s(Pse);Fbo=r(WJr,"model.train()"),WJr.forEach(t),h0e.forEach(t),Tbo=i(Zt),T(Ru.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),NPe=i(f),Ci=n(f,"H2",{class:!0});var Oqe=s(Ci);Bu=n(Oqe,"A",{id:!0,class:!0,href:!0});var HJr=s(Bu);Ise=n(HJr,"SPAN",{});var UJr=s(Ise);T(Ey.$$.fragment,UJr),UJr.forEach(t),HJr.forEach(t),Mbo=i(Oqe),qse=n(Oqe,"SPAN",{});var JJr=s(qse);Ebo=r(JJr,"AutoModelForPreTraining"),JJr.forEach(t),Oqe.forEach(t),jPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(Cy.$$.fragment,Ds),Cbo=i(Ds),wi=n(Ds,"P",{});var eK=s(wi);wbo=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Eq=n(eK,"A",{href:!0});var YJr=s(Eq);Abo=r(YJr,"from_pretrained()"),YJr.forEach(t),ybo=r(eK," class method or the "),Cq=n(eK,"A",{href:!0});var KJr=s(Cq);Lbo=r(KJr,"from_config()"),KJr.forEach(t),xbo=r(eK,` class
method.`),eK.forEach(t),$bo=i(Ds),wy=n(Ds,"P",{});var Vqe=s(wy);kbo=r(Vqe,"This class cannot be instantiated directly using "),Nse=n(Vqe,"CODE",{});var ZJr=s(Nse);Sbo=r(ZJr,"__init__()"),ZJr.forEach(t),Rbo=r(Vqe," (throws an error)."),Vqe.forEach(t),Bbo=i(Ds),rt=n(Ds,"DIV",{class:!0});var Yw=s(rt);T(Ay.$$.fragment,Yw),Pbo=i(Yw),jse=n(Yw,"P",{});var eYr=s(jse);Ibo=r(eYr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),eYr.forEach(t),qbo=i(Yw),Ai=n(Yw,"P",{});var oK=s(Ai);Nbo=r(oK,`Note:
Loading a model from its configuration file does `),Dse=n(oK,"STRONG",{});var oYr=s(Dse);jbo=r(oYr,"not"),oYr.forEach(t),Dbo=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wq=n(oK,"A",{href:!0});var rYr=s(wq);Gbo=r(rYr,"from_pretrained()"),rYr.forEach(t),Obo=r(oK," to load the model weights."),oK.forEach(t),Vbo=i(Yw),T(Pu.$$.fragment,Yw),Yw.forEach(t),Xbo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(yy.$$.fragment,ea),zbo=i(ea),Gse=n(ea,"P",{});var tYr=s(Gse);Qbo=r(tYr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tYr.forEach(t),Wbo=i(ea),ya=n(ea,"P",{});var Kw=s(ya);Hbo=r(Kw,"The model class to instantiate is selected based on the "),Ose=n(Kw,"CODE",{});var aYr=s(Ose);Ubo=r(aYr,"model_type"),aYr.forEach(t),Jbo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Vse=n(Kw,"CODE",{});var nYr=s(Vse);Ybo=r(nYr,"pretrained_model_name_or_path"),nYr.forEach(t),Kbo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xse=n(Kw,"CODE",{});var sYr=s(Xse);Zbo=r(sYr,"pretrained_model_name_or_path"),sYr.forEach(t),e4o=r(Kw,":"),Kw.forEach(t),o4o=i(ea),G=n(ea,"UL",{});var V=s(G);Iu=n(V,"LI",{});var p0e=s(Iu);zse=n(p0e,"STRONG",{});var lYr=s(zse);r4o=r(lYr,"albert"),lYr.forEach(t),t4o=r(p0e," \u2014 "),Aq=n(p0e,"A",{href:!0});var iYr=s(Aq);a4o=r(iYr,"AlbertForPreTraining"),iYr.forEach(t),n4o=r(p0e," (ALBERT model)"),p0e.forEach(t),s4o=i(V),qu=n(V,"LI",{});var u0e=s(qu);Qse=n(u0e,"STRONG",{});var dYr=s(Qse);l4o=r(dYr,"bart"),dYr.forEach(t),i4o=r(u0e," \u2014 "),yq=n(u0e,"A",{href:!0});var cYr=s(yq);d4o=r(cYr,"BartForConditionalGeneration"),cYr.forEach(t),c4o=r(u0e," (BART model)"),u0e.forEach(t),f4o=i(V),Nu=n(V,"LI",{});var _0e=s(Nu);Wse=n(_0e,"STRONG",{});var fYr=s(Wse);m4o=r(fYr,"bert"),fYr.forEach(t),g4o=r(_0e," \u2014 "),Lq=n(_0e,"A",{href:!0});var mYr=s(Lq);h4o=r(mYr,"BertForPreTraining"),mYr.forEach(t),p4o=r(_0e," (BERT model)"),_0e.forEach(t),u4o=i(V),ju=n(V,"LI",{});var b0e=s(ju);Hse=n(b0e,"STRONG",{});var gYr=s(Hse);_4o=r(gYr,"big_bird"),gYr.forEach(t),b4o=r(b0e," \u2014 "),xq=n(b0e,"A",{href:!0});var hYr=s(xq);v4o=r(hYr,"BigBirdForPreTraining"),hYr.forEach(t),F4o=r(b0e," (BigBird model)"),b0e.forEach(t),T4o=i(V),Du=n(V,"LI",{});var v0e=s(Du);Use=n(v0e,"STRONG",{});var pYr=s(Use);M4o=r(pYr,"camembert"),pYr.forEach(t),E4o=r(v0e," \u2014 "),$q=n(v0e,"A",{href:!0});var uYr=s($q);C4o=r(uYr,"CamembertForMaskedLM"),uYr.forEach(t),w4o=r(v0e," (CamemBERT model)"),v0e.forEach(t),A4o=i(V),Gu=n(V,"LI",{});var F0e=s(Gu);Jse=n(F0e,"STRONG",{});var _Yr=s(Jse);y4o=r(_Yr,"ctrl"),_Yr.forEach(t),L4o=r(F0e," \u2014 "),kq=n(F0e,"A",{href:!0});var bYr=s(kq);x4o=r(bYr,"CTRLLMHeadModel"),bYr.forEach(t),$4o=r(F0e," (CTRL model)"),F0e.forEach(t),k4o=i(V),Ou=n(V,"LI",{});var T0e=s(Ou);Yse=n(T0e,"STRONG",{});var vYr=s(Yse);S4o=r(vYr,"data2vec-text"),vYr.forEach(t),R4o=r(T0e," \u2014 "),Sq=n(T0e,"A",{href:!0});var FYr=s(Sq);B4o=r(FYr,"Data2VecTextForMaskedLM"),FYr.forEach(t),P4o=r(T0e," (Data2VecText model)"),T0e.forEach(t),I4o=i(V),Vu=n(V,"LI",{});var M0e=s(Vu);Kse=n(M0e,"STRONG",{});var TYr=s(Kse);q4o=r(TYr,"deberta"),TYr.forEach(t),N4o=r(M0e," \u2014 "),Rq=n(M0e,"A",{href:!0});var MYr=s(Rq);j4o=r(MYr,"DebertaForMaskedLM"),MYr.forEach(t),D4o=r(M0e," (DeBERTa model)"),M0e.forEach(t),G4o=i(V),Xu=n(V,"LI",{});var E0e=s(Xu);Zse=n(E0e,"STRONG",{});var EYr=s(Zse);O4o=r(EYr,"deberta-v2"),EYr.forEach(t),V4o=r(E0e," \u2014 "),Bq=n(E0e,"A",{href:!0});var CYr=s(Bq);X4o=r(CYr,"DebertaV2ForMaskedLM"),CYr.forEach(t),z4o=r(E0e," (DeBERTa-v2 model)"),E0e.forEach(t),Q4o=i(V),zu=n(V,"LI",{});var C0e=s(zu);ele=n(C0e,"STRONG",{});var wYr=s(ele);W4o=r(wYr,"distilbert"),wYr.forEach(t),H4o=r(C0e," \u2014 "),Pq=n(C0e,"A",{href:!0});var AYr=s(Pq);U4o=r(AYr,"DistilBertForMaskedLM"),AYr.forEach(t),J4o=r(C0e," (DistilBERT model)"),C0e.forEach(t),Y4o=i(V),Qu=n(V,"LI",{});var w0e=s(Qu);ole=n(w0e,"STRONG",{});var yYr=s(ole);K4o=r(yYr,"electra"),yYr.forEach(t),Z4o=r(w0e," \u2014 "),Iq=n(w0e,"A",{href:!0});var LYr=s(Iq);e2o=r(LYr,"ElectraForPreTraining"),LYr.forEach(t),o2o=r(w0e," (ELECTRA model)"),w0e.forEach(t),r2o=i(V),Wu=n(V,"LI",{});var A0e=s(Wu);rle=n(A0e,"STRONG",{});var xYr=s(rle);t2o=r(xYr,"flaubert"),xYr.forEach(t),a2o=r(A0e," \u2014 "),qq=n(A0e,"A",{href:!0});var $Yr=s(qq);n2o=r($Yr,"FlaubertWithLMHeadModel"),$Yr.forEach(t),s2o=r(A0e," (FlauBERT model)"),A0e.forEach(t),l2o=i(V),Hu=n(V,"LI",{});var y0e=s(Hu);tle=n(y0e,"STRONG",{});var kYr=s(tle);i2o=r(kYr,"flava"),kYr.forEach(t),d2o=r(y0e," \u2014 "),Nq=n(y0e,"A",{href:!0});var SYr=s(Nq);c2o=r(SYr,"FlavaForPreTraining"),SYr.forEach(t),f2o=r(y0e," (Flava model)"),y0e.forEach(t),m2o=i(V),Uu=n(V,"LI",{});var L0e=s(Uu);ale=n(L0e,"STRONG",{});var RYr=s(ale);g2o=r(RYr,"fnet"),RYr.forEach(t),h2o=r(L0e," \u2014 "),jq=n(L0e,"A",{href:!0});var BYr=s(jq);p2o=r(BYr,"FNetForPreTraining"),BYr.forEach(t),u2o=r(L0e," (FNet model)"),L0e.forEach(t),_2o=i(V),Ju=n(V,"LI",{});var x0e=s(Ju);nle=n(x0e,"STRONG",{});var PYr=s(nle);b2o=r(PYr,"fsmt"),PYr.forEach(t),v2o=r(x0e," \u2014 "),Dq=n(x0e,"A",{href:!0});var IYr=s(Dq);F2o=r(IYr,"FSMTForConditionalGeneration"),IYr.forEach(t),T2o=r(x0e," (FairSeq Machine-Translation model)"),x0e.forEach(t),M2o=i(V),Yu=n(V,"LI",{});var $0e=s(Yu);sle=n($0e,"STRONG",{});var qYr=s(sle);E2o=r(qYr,"funnel"),qYr.forEach(t),C2o=r($0e," \u2014 "),Gq=n($0e,"A",{href:!0});var NYr=s(Gq);w2o=r(NYr,"FunnelForPreTraining"),NYr.forEach(t),A2o=r($0e," (Funnel Transformer model)"),$0e.forEach(t),y2o=i(V),Ku=n(V,"LI",{});var k0e=s(Ku);lle=n(k0e,"STRONG",{});var jYr=s(lle);L2o=r(jYr,"gpt2"),jYr.forEach(t),x2o=r(k0e," \u2014 "),Oq=n(k0e,"A",{href:!0});var DYr=s(Oq);$2o=r(DYr,"GPT2LMHeadModel"),DYr.forEach(t),k2o=r(k0e," (OpenAI GPT-2 model)"),k0e.forEach(t),S2o=i(V),Zu=n(V,"LI",{});var S0e=s(Zu);ile=n(S0e,"STRONG",{});var GYr=s(ile);R2o=r(GYr,"ibert"),GYr.forEach(t),B2o=r(S0e," \u2014 "),Vq=n(S0e,"A",{href:!0});var OYr=s(Vq);P2o=r(OYr,"IBertForMaskedLM"),OYr.forEach(t),I2o=r(S0e," (I-BERT model)"),S0e.forEach(t),q2o=i(V),e_=n(V,"LI",{});var R0e=s(e_);dle=n(R0e,"STRONG",{});var VYr=s(dle);N2o=r(VYr,"layoutlm"),VYr.forEach(t),j2o=r(R0e," \u2014 "),Xq=n(R0e,"A",{href:!0});var XYr=s(Xq);D2o=r(XYr,"LayoutLMForMaskedLM"),XYr.forEach(t),G2o=r(R0e," (LayoutLM model)"),R0e.forEach(t),O2o=i(V),o_=n(V,"LI",{});var B0e=s(o_);cle=n(B0e,"STRONG",{});var zYr=s(cle);V2o=r(zYr,"longformer"),zYr.forEach(t),X2o=r(B0e," \u2014 "),zq=n(B0e,"A",{href:!0});var QYr=s(zq);z2o=r(QYr,"LongformerForMaskedLM"),QYr.forEach(t),Q2o=r(B0e," (Longformer model)"),B0e.forEach(t),W2o=i(V),r_=n(V,"LI",{});var P0e=s(r_);fle=n(P0e,"STRONG",{});var WYr=s(fle);H2o=r(WYr,"lxmert"),WYr.forEach(t),U2o=r(P0e," \u2014 "),Qq=n(P0e,"A",{href:!0});var HYr=s(Qq);J2o=r(HYr,"LxmertForPreTraining"),HYr.forEach(t),Y2o=r(P0e," (LXMERT model)"),P0e.forEach(t),K2o=i(V),t_=n(V,"LI",{});var I0e=s(t_);mle=n(I0e,"STRONG",{});var UYr=s(mle);Z2o=r(UYr,"megatron-bert"),UYr.forEach(t),e5o=r(I0e," \u2014 "),Wq=n(I0e,"A",{href:!0});var JYr=s(Wq);o5o=r(JYr,"MegatronBertForPreTraining"),JYr.forEach(t),r5o=r(I0e," (MegatronBert model)"),I0e.forEach(t),t5o=i(V),a_=n(V,"LI",{});var q0e=s(a_);gle=n(q0e,"STRONG",{});var YYr=s(gle);a5o=r(YYr,"mobilebert"),YYr.forEach(t),n5o=r(q0e," \u2014 "),Hq=n(q0e,"A",{href:!0});var KYr=s(Hq);s5o=r(KYr,"MobileBertForPreTraining"),KYr.forEach(t),l5o=r(q0e," (MobileBERT model)"),q0e.forEach(t),i5o=i(V),n_=n(V,"LI",{});var N0e=s(n_);hle=n(N0e,"STRONG",{});var ZYr=s(hle);d5o=r(ZYr,"mpnet"),ZYr.forEach(t),c5o=r(N0e," \u2014 "),Uq=n(N0e,"A",{href:!0});var eKr=s(Uq);f5o=r(eKr,"MPNetForMaskedLM"),eKr.forEach(t),m5o=r(N0e," (MPNet model)"),N0e.forEach(t),g5o=i(V),s_=n(V,"LI",{});var j0e=s(s_);ple=n(j0e,"STRONG",{});var oKr=s(ple);h5o=r(oKr,"openai-gpt"),oKr.forEach(t),p5o=r(j0e," \u2014 "),Jq=n(j0e,"A",{href:!0});var rKr=s(Jq);u5o=r(rKr,"OpenAIGPTLMHeadModel"),rKr.forEach(t),_5o=r(j0e," (OpenAI GPT model)"),j0e.forEach(t),b5o=i(V),l_=n(V,"LI",{});var D0e=s(l_);ule=n(D0e,"STRONG",{});var tKr=s(ule);v5o=r(tKr,"retribert"),tKr.forEach(t),F5o=r(D0e," \u2014 "),Yq=n(D0e,"A",{href:!0});var aKr=s(Yq);T5o=r(aKr,"RetriBertModel"),aKr.forEach(t),M5o=r(D0e," (RetriBERT model)"),D0e.forEach(t),E5o=i(V),i_=n(V,"LI",{});var G0e=s(i_);_le=n(G0e,"STRONG",{});var nKr=s(_le);C5o=r(nKr,"roberta"),nKr.forEach(t),w5o=r(G0e," \u2014 "),Kq=n(G0e,"A",{href:!0});var sKr=s(Kq);A5o=r(sKr,"RobertaForMaskedLM"),sKr.forEach(t),y5o=r(G0e," (RoBERTa model)"),G0e.forEach(t),L5o=i(V),d_=n(V,"LI",{});var O0e=s(d_);ble=n(O0e,"STRONG",{});var lKr=s(ble);x5o=r(lKr,"squeezebert"),lKr.forEach(t),$5o=r(O0e," \u2014 "),Zq=n(O0e,"A",{href:!0});var iKr=s(Zq);k5o=r(iKr,"SqueezeBertForMaskedLM"),iKr.forEach(t),S5o=r(O0e," (SqueezeBERT model)"),O0e.forEach(t),R5o=i(V),c_=n(V,"LI",{});var V0e=s(c_);vle=n(V0e,"STRONG",{});var dKr=s(vle);B5o=r(dKr,"t5"),dKr.forEach(t),P5o=r(V0e," \u2014 "),eN=n(V0e,"A",{href:!0});var cKr=s(eN);I5o=r(cKr,"T5ForConditionalGeneration"),cKr.forEach(t),q5o=r(V0e," (T5 model)"),V0e.forEach(t),N5o=i(V),f_=n(V,"LI",{});var X0e=s(f_);Fle=n(X0e,"STRONG",{});var fKr=s(Fle);j5o=r(fKr,"tapas"),fKr.forEach(t),D5o=r(X0e," \u2014 "),oN=n(X0e,"A",{href:!0});var mKr=s(oN);G5o=r(mKr,"TapasForMaskedLM"),mKr.forEach(t),O5o=r(X0e," (TAPAS model)"),X0e.forEach(t),V5o=i(V),m_=n(V,"LI",{});var z0e=s(m_);Tle=n(z0e,"STRONG",{});var gKr=s(Tle);X5o=r(gKr,"transfo-xl"),gKr.forEach(t),z5o=r(z0e," \u2014 "),rN=n(z0e,"A",{href:!0});var hKr=s(rN);Q5o=r(hKr,"TransfoXLLMHeadModel"),hKr.forEach(t),W5o=r(z0e," (Transformer-XL model)"),z0e.forEach(t),H5o=i(V),g_=n(V,"LI",{});var Q0e=s(g_);Mle=n(Q0e,"STRONG",{});var pKr=s(Mle);U5o=r(pKr,"unispeech"),pKr.forEach(t),J5o=r(Q0e," \u2014 "),tN=n(Q0e,"A",{href:!0});var uKr=s(tN);Y5o=r(uKr,"UniSpeechForPreTraining"),uKr.forEach(t),K5o=r(Q0e," (UniSpeech model)"),Q0e.forEach(t),Z5o=i(V),h_=n(V,"LI",{});var W0e=s(h_);Ele=n(W0e,"STRONG",{});var _Kr=s(Ele);evo=r(_Kr,"unispeech-sat"),_Kr.forEach(t),ovo=r(W0e," \u2014 "),aN=n(W0e,"A",{href:!0});var bKr=s(aN);rvo=r(bKr,"UniSpeechSatForPreTraining"),bKr.forEach(t),tvo=r(W0e," (UniSpeechSat model)"),W0e.forEach(t),avo=i(V),p_=n(V,"LI",{});var H0e=s(p_);Cle=n(H0e,"STRONG",{});var vKr=s(Cle);nvo=r(vKr,"visual_bert"),vKr.forEach(t),svo=r(H0e," \u2014 "),nN=n(H0e,"A",{href:!0});var FKr=s(nN);lvo=r(FKr,"VisualBertForPreTraining"),FKr.forEach(t),ivo=r(H0e," (VisualBert model)"),H0e.forEach(t),dvo=i(V),u_=n(V,"LI",{});var U0e=s(u_);wle=n(U0e,"STRONG",{});var TKr=s(wle);cvo=r(TKr,"vit_mae"),TKr.forEach(t),fvo=r(U0e," \u2014 "),sN=n(U0e,"A",{href:!0});var MKr=s(sN);mvo=r(MKr,"ViTMAEForPreTraining"),MKr.forEach(t),gvo=r(U0e," (ViTMAE model)"),U0e.forEach(t),hvo=i(V),__=n(V,"LI",{});var J0e=s(__);Ale=n(J0e,"STRONG",{});var EKr=s(Ale);pvo=r(EKr,"wav2vec2"),EKr.forEach(t),uvo=r(J0e," \u2014 "),lN=n(J0e,"A",{href:!0});var CKr=s(lN);_vo=r(CKr,"Wav2Vec2ForPreTraining"),CKr.forEach(t),bvo=r(J0e," (Wav2Vec2 model)"),J0e.forEach(t),vvo=i(V),b_=n(V,"LI",{});var Y0e=s(b_);yle=n(Y0e,"STRONG",{});var wKr=s(yle);Fvo=r(wKr,"xlm"),wKr.forEach(t),Tvo=r(Y0e," \u2014 "),iN=n(Y0e,"A",{href:!0});var AKr=s(iN);Mvo=r(AKr,"XLMWithLMHeadModel"),AKr.forEach(t),Evo=r(Y0e," (XLM model)"),Y0e.forEach(t),Cvo=i(V),v_=n(V,"LI",{});var K0e=s(v_);Lle=n(K0e,"STRONG",{});var yKr=s(Lle);wvo=r(yKr,"xlm-roberta"),yKr.forEach(t),Avo=r(K0e," \u2014 "),dN=n(K0e,"A",{href:!0});var LKr=s(dN);yvo=r(LKr,"XLMRobertaForMaskedLM"),LKr.forEach(t),Lvo=r(K0e," (XLM-RoBERTa model)"),K0e.forEach(t),xvo=i(V),F_=n(V,"LI",{});var Z0e=s(F_);xle=n(Z0e,"STRONG",{});var xKr=s(xle);$vo=r(xKr,"xlm-roberta-xl"),xKr.forEach(t),kvo=r(Z0e," \u2014 "),cN=n(Z0e,"A",{href:!0});var $Kr=s(cN);Svo=r($Kr,"XLMRobertaXLForMaskedLM"),$Kr.forEach(t),Rvo=r(Z0e," (XLM-RoBERTa-XL model)"),Z0e.forEach(t),Bvo=i(V),T_=n(V,"LI",{});var eye=s(T_);$le=n(eye,"STRONG",{});var kKr=s($le);Pvo=r(kKr,"xlnet"),kKr.forEach(t),Ivo=r(eye," \u2014 "),fN=n(eye,"A",{href:!0});var SKr=s(fN);qvo=r(SKr,"XLNetLMHeadModel"),SKr.forEach(t),Nvo=r(eye," (XLNet model)"),eye.forEach(t),V.forEach(t),jvo=i(ea),M_=n(ea,"P",{});var oye=s(M_);Dvo=r(oye,"The model is set in evaluation mode by default using "),kle=n(oye,"CODE",{});var RKr=s(kle);Gvo=r(RKr,"model.eval()"),RKr.forEach(t),Ovo=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sle=n(oye,"CODE",{});var BKr=s(Sle);Vvo=r(BKr,"model.train()"),BKr.forEach(t),oye.forEach(t),Xvo=i(ea),T(E_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),DPe=i(f),yi=n(f,"H2",{class:!0});var Xqe=s(yi);C_=n(Xqe,"A",{id:!0,class:!0,href:!0});var PKr=s(C_);Rle=n(PKr,"SPAN",{});var IKr=s(Rle);T(Ly.$$.fragment,IKr),IKr.forEach(t),PKr.forEach(t),zvo=i(Xqe),Ble=n(Xqe,"SPAN",{});var qKr=s(Ble);Qvo=r(qKr,"AutoModelForCausalLM"),qKr.forEach(t),Xqe.forEach(t),GPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(xy.$$.fragment,Gs),Wvo=i(Gs),Li=n(Gs,"P",{});var rK=s(Li);Hvo=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mN=n(rK,"A",{href:!0});var NKr=s(mN);Uvo=r(NKr,"from_pretrained()"),NKr.forEach(t),Jvo=r(rK," class method or the "),gN=n(rK,"A",{href:!0});var jKr=s(gN);Yvo=r(jKr,"from_config()"),jKr.forEach(t),Kvo=r(rK,` class
method.`),rK.forEach(t),Zvo=i(Gs),$y=n(Gs,"P",{});var zqe=s($y);eFo=r(zqe,"This class cannot be instantiated directly using "),Ple=n(zqe,"CODE",{});var DKr=s(Ple);oFo=r(DKr,"__init__()"),DKr.forEach(t),rFo=r(zqe," (throws an error)."),zqe.forEach(t),tFo=i(Gs),tt=n(Gs,"DIV",{class:!0});var Zw=s(tt);T(ky.$$.fragment,Zw),aFo=i(Zw),Ile=n(Zw,"P",{});var GKr=s(Ile);nFo=r(GKr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),GKr.forEach(t),sFo=i(Zw),xi=n(Zw,"P",{});var tK=s(xi);lFo=r(tK,`Note:
Loading a model from its configuration file does `),qle=n(tK,"STRONG",{});var OKr=s(qle);iFo=r(OKr,"not"),OKr.forEach(t),dFo=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=n(tK,"A",{href:!0});var VKr=s(hN);cFo=r(VKr,"from_pretrained()"),VKr.forEach(t),fFo=r(tK," to load the model weights."),tK.forEach(t),mFo=i(Zw),T(w_.$$.fragment,Zw),Zw.forEach(t),gFo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(Sy.$$.fragment,oa),hFo=i(oa),Nle=n(oa,"P",{});var XKr=s(Nle);pFo=r(XKr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XKr.forEach(t),uFo=i(oa),La=n(oa,"P",{});var eA=s(La);_Fo=r(eA,"The model class to instantiate is selected based on the "),jle=n(eA,"CODE",{});var zKr=s(jle);bFo=r(zKr,"model_type"),zKr.forEach(t),vFo=r(eA,` property of the config object (either
passed as an argument or loaded from `),Dle=n(eA,"CODE",{});var QKr=s(Dle);FFo=r(QKr,"pretrained_model_name_or_path"),QKr.forEach(t),TFo=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gle=n(eA,"CODE",{});var WKr=s(Gle);MFo=r(WKr,"pretrained_model_name_or_path"),WKr.forEach(t),EFo=r(eA,":"),eA.forEach(t),CFo=i(oa),z=n(oa,"UL",{});var W=s(z);A_=n(W,"LI",{});var rye=s(A_);Ole=n(rye,"STRONG",{});var HKr=s(Ole);wFo=r(HKr,"bart"),HKr.forEach(t),AFo=r(rye," \u2014 "),pN=n(rye,"A",{href:!0});var UKr=s(pN);yFo=r(UKr,"BartForCausalLM"),UKr.forEach(t),LFo=r(rye," (BART model)"),rye.forEach(t),xFo=i(W),y_=n(W,"LI",{});var tye=s(y_);Vle=n(tye,"STRONG",{});var JKr=s(Vle);$Fo=r(JKr,"bert"),JKr.forEach(t),kFo=r(tye," \u2014 "),uN=n(tye,"A",{href:!0});var YKr=s(uN);SFo=r(YKr,"BertLMHeadModel"),YKr.forEach(t),RFo=r(tye," (BERT model)"),tye.forEach(t),BFo=i(W),L_=n(W,"LI",{});var aye=s(L_);Xle=n(aye,"STRONG",{});var KKr=s(Xle);PFo=r(KKr,"bert-generation"),KKr.forEach(t),IFo=r(aye," \u2014 "),_N=n(aye,"A",{href:!0});var ZKr=s(_N);qFo=r(ZKr,"BertGenerationDecoder"),ZKr.forEach(t),NFo=r(aye," (Bert Generation model)"),aye.forEach(t),jFo=i(W),x_=n(W,"LI",{});var nye=s(x_);zle=n(nye,"STRONG",{});var eZr=s(zle);DFo=r(eZr,"big_bird"),eZr.forEach(t),GFo=r(nye," \u2014 "),bN=n(nye,"A",{href:!0});var oZr=s(bN);OFo=r(oZr,"BigBirdForCausalLM"),oZr.forEach(t),VFo=r(nye," (BigBird model)"),nye.forEach(t),XFo=i(W),$_=n(W,"LI",{});var sye=s($_);Qle=n(sye,"STRONG",{});var rZr=s(Qle);zFo=r(rZr,"bigbird_pegasus"),rZr.forEach(t),QFo=r(sye," \u2014 "),vN=n(sye,"A",{href:!0});var tZr=s(vN);WFo=r(tZr,"BigBirdPegasusForCausalLM"),tZr.forEach(t),HFo=r(sye," (BigBirdPegasus model)"),sye.forEach(t),UFo=i(W),k_=n(W,"LI",{});var lye=s(k_);Wle=n(lye,"STRONG",{});var aZr=s(Wle);JFo=r(aZr,"blenderbot"),aZr.forEach(t),YFo=r(lye," \u2014 "),FN=n(lye,"A",{href:!0});var nZr=s(FN);KFo=r(nZr,"BlenderbotForCausalLM"),nZr.forEach(t),ZFo=r(lye," (Blenderbot model)"),lye.forEach(t),eTo=i(W),S_=n(W,"LI",{});var iye=s(S_);Hle=n(iye,"STRONG",{});var sZr=s(Hle);oTo=r(sZr,"blenderbot-small"),sZr.forEach(t),rTo=r(iye," \u2014 "),TN=n(iye,"A",{href:!0});var lZr=s(TN);tTo=r(lZr,"BlenderbotSmallForCausalLM"),lZr.forEach(t),aTo=r(iye," (BlenderbotSmall model)"),iye.forEach(t),nTo=i(W),R_=n(W,"LI",{});var dye=s(R_);Ule=n(dye,"STRONG",{});var iZr=s(Ule);sTo=r(iZr,"camembert"),iZr.forEach(t),lTo=r(dye," \u2014 "),MN=n(dye,"A",{href:!0});var dZr=s(MN);iTo=r(dZr,"CamembertForCausalLM"),dZr.forEach(t),dTo=r(dye," (CamemBERT model)"),dye.forEach(t),cTo=i(W),B_=n(W,"LI",{});var cye=s(B_);Jle=n(cye,"STRONG",{});var cZr=s(Jle);fTo=r(cZr,"ctrl"),cZr.forEach(t),mTo=r(cye," \u2014 "),EN=n(cye,"A",{href:!0});var fZr=s(EN);gTo=r(fZr,"CTRLLMHeadModel"),fZr.forEach(t),hTo=r(cye," (CTRL model)"),cye.forEach(t),pTo=i(W),P_=n(W,"LI",{});var fye=s(P_);Yle=n(fye,"STRONG",{});var mZr=s(Yle);uTo=r(mZr,"data2vec-text"),mZr.forEach(t),_To=r(fye," \u2014 "),CN=n(fye,"A",{href:!0});var gZr=s(CN);bTo=r(gZr,"Data2VecTextForCausalLM"),gZr.forEach(t),vTo=r(fye," (Data2VecText model)"),fye.forEach(t),FTo=i(W),I_=n(W,"LI",{});var mye=s(I_);Kle=n(mye,"STRONG",{});var hZr=s(Kle);TTo=r(hZr,"electra"),hZr.forEach(t),MTo=r(mye," \u2014 "),wN=n(mye,"A",{href:!0});var pZr=s(wN);ETo=r(pZr,"ElectraForCausalLM"),pZr.forEach(t),CTo=r(mye," (ELECTRA model)"),mye.forEach(t),wTo=i(W),q_=n(W,"LI",{});var gye=s(q_);Zle=n(gye,"STRONG",{});var uZr=s(Zle);ATo=r(uZr,"gpt2"),uZr.forEach(t),yTo=r(gye," \u2014 "),AN=n(gye,"A",{href:!0});var _Zr=s(AN);LTo=r(_Zr,"GPT2LMHeadModel"),_Zr.forEach(t),xTo=r(gye," (OpenAI GPT-2 model)"),gye.forEach(t),$To=i(W),N_=n(W,"LI",{});var hye=s(N_);eie=n(hye,"STRONG",{});var bZr=s(eie);kTo=r(bZr,"gpt_neo"),bZr.forEach(t),STo=r(hye," \u2014 "),yN=n(hye,"A",{href:!0});var vZr=s(yN);RTo=r(vZr,"GPTNeoForCausalLM"),vZr.forEach(t),BTo=r(hye," (GPT Neo model)"),hye.forEach(t),PTo=i(W),j_=n(W,"LI",{});var pye=s(j_);oie=n(pye,"STRONG",{});var FZr=s(oie);ITo=r(FZr,"gptj"),FZr.forEach(t),qTo=r(pye," \u2014 "),LN=n(pye,"A",{href:!0});var TZr=s(LN);NTo=r(TZr,"GPTJForCausalLM"),TZr.forEach(t),jTo=r(pye," (GPT-J model)"),pye.forEach(t),DTo=i(W),D_=n(W,"LI",{});var uye=s(D_);rie=n(uye,"STRONG",{});var MZr=s(rie);GTo=r(MZr,"marian"),MZr.forEach(t),OTo=r(uye," \u2014 "),xN=n(uye,"A",{href:!0});var EZr=s(xN);VTo=r(EZr,"MarianForCausalLM"),EZr.forEach(t),XTo=r(uye," (Marian model)"),uye.forEach(t),zTo=i(W),G_=n(W,"LI",{});var _ye=s(G_);tie=n(_ye,"STRONG",{});var CZr=s(tie);QTo=r(CZr,"mbart"),CZr.forEach(t),WTo=r(_ye," \u2014 "),$N=n(_ye,"A",{href:!0});var wZr=s($N);HTo=r(wZr,"MBartForCausalLM"),wZr.forEach(t),UTo=r(_ye," (mBART model)"),_ye.forEach(t),JTo=i(W),O_=n(W,"LI",{});var bye=s(O_);aie=n(bye,"STRONG",{});var AZr=s(aie);YTo=r(AZr,"megatron-bert"),AZr.forEach(t),KTo=r(bye," \u2014 "),kN=n(bye,"A",{href:!0});var yZr=s(kN);ZTo=r(yZr,"MegatronBertForCausalLM"),yZr.forEach(t),eMo=r(bye," (MegatronBert model)"),bye.forEach(t),oMo=i(W),V_=n(W,"LI",{});var vye=s(V_);nie=n(vye,"STRONG",{});var LZr=s(nie);rMo=r(LZr,"openai-gpt"),LZr.forEach(t),tMo=r(vye," \u2014 "),SN=n(vye,"A",{href:!0});var xZr=s(SN);aMo=r(xZr,"OpenAIGPTLMHeadModel"),xZr.forEach(t),nMo=r(vye," (OpenAI GPT model)"),vye.forEach(t),sMo=i(W),X_=n(W,"LI",{});var Fye=s(X_);sie=n(Fye,"STRONG",{});var $Zr=s(sie);lMo=r($Zr,"pegasus"),$Zr.forEach(t),iMo=r(Fye," \u2014 "),RN=n(Fye,"A",{href:!0});var kZr=s(RN);dMo=r(kZr,"PegasusForCausalLM"),kZr.forEach(t),cMo=r(Fye," (Pegasus model)"),Fye.forEach(t),fMo=i(W),z_=n(W,"LI",{});var Tye=s(z_);lie=n(Tye,"STRONG",{});var SZr=s(lie);mMo=r(SZr,"plbart"),SZr.forEach(t),gMo=r(Tye," \u2014 "),BN=n(Tye,"A",{href:!0});var RZr=s(BN);hMo=r(RZr,"PLBartForCausalLM"),RZr.forEach(t),pMo=r(Tye," (PLBart model)"),Tye.forEach(t),uMo=i(W),Q_=n(W,"LI",{});var Mye=s(Q_);iie=n(Mye,"STRONG",{});var BZr=s(iie);_Mo=r(BZr,"prophetnet"),BZr.forEach(t),bMo=r(Mye," \u2014 "),PN=n(Mye,"A",{href:!0});var PZr=s(PN);vMo=r(PZr,"ProphetNetForCausalLM"),PZr.forEach(t),FMo=r(Mye," (ProphetNet model)"),Mye.forEach(t),TMo=i(W),W_=n(W,"LI",{});var Eye=s(W_);die=n(Eye,"STRONG",{});var IZr=s(die);MMo=r(IZr,"qdqbert"),IZr.forEach(t),EMo=r(Eye," \u2014 "),IN=n(Eye,"A",{href:!0});var qZr=s(IN);CMo=r(qZr,"QDQBertLMHeadModel"),qZr.forEach(t),wMo=r(Eye," (QDQBert model)"),Eye.forEach(t),AMo=i(W),H_=n(W,"LI",{});var Cye=s(H_);cie=n(Cye,"STRONG",{});var NZr=s(cie);yMo=r(NZr,"reformer"),NZr.forEach(t),LMo=r(Cye," \u2014 "),qN=n(Cye,"A",{href:!0});var jZr=s(qN);xMo=r(jZr,"ReformerModelWithLMHead"),jZr.forEach(t),$Mo=r(Cye," (Reformer model)"),Cye.forEach(t),kMo=i(W),U_=n(W,"LI",{});var wye=s(U_);fie=n(wye,"STRONG",{});var DZr=s(fie);SMo=r(DZr,"rembert"),DZr.forEach(t),RMo=r(wye," \u2014 "),NN=n(wye,"A",{href:!0});var GZr=s(NN);BMo=r(GZr,"RemBertForCausalLM"),GZr.forEach(t),PMo=r(wye," (RemBERT model)"),wye.forEach(t),IMo=i(W),J_=n(W,"LI",{});var Aye=s(J_);mie=n(Aye,"STRONG",{});var OZr=s(mie);qMo=r(OZr,"roberta"),OZr.forEach(t),NMo=r(Aye," \u2014 "),jN=n(Aye,"A",{href:!0});var VZr=s(jN);jMo=r(VZr,"RobertaForCausalLM"),VZr.forEach(t),DMo=r(Aye," (RoBERTa model)"),Aye.forEach(t),GMo=i(W),Y_=n(W,"LI",{});var yye=s(Y_);gie=n(yye,"STRONG",{});var XZr=s(gie);OMo=r(XZr,"roformer"),XZr.forEach(t),VMo=r(yye," \u2014 "),DN=n(yye,"A",{href:!0});var zZr=s(DN);XMo=r(zZr,"RoFormerForCausalLM"),zZr.forEach(t),zMo=r(yye," (RoFormer model)"),yye.forEach(t),QMo=i(W),K_=n(W,"LI",{});var Lye=s(K_);hie=n(Lye,"STRONG",{});var QZr=s(hie);WMo=r(QZr,"speech_to_text_2"),QZr.forEach(t),HMo=r(Lye," \u2014 "),GN=n(Lye,"A",{href:!0});var WZr=s(GN);UMo=r(WZr,"Speech2Text2ForCausalLM"),WZr.forEach(t),JMo=r(Lye," (Speech2Text2 model)"),Lye.forEach(t),YMo=i(W),Z_=n(W,"LI",{});var xye=s(Z_);pie=n(xye,"STRONG",{});var HZr=s(pie);KMo=r(HZr,"transfo-xl"),HZr.forEach(t),ZMo=r(xye," \u2014 "),ON=n(xye,"A",{href:!0});var UZr=s(ON);eEo=r(UZr,"TransfoXLLMHeadModel"),UZr.forEach(t),oEo=r(xye," (Transformer-XL model)"),xye.forEach(t),rEo=i(W),e6=n(W,"LI",{});var $ye=s(e6);uie=n($ye,"STRONG",{});var JZr=s(uie);tEo=r(JZr,"trocr"),JZr.forEach(t),aEo=r($ye," \u2014 "),VN=n($ye,"A",{href:!0});var YZr=s(VN);nEo=r(YZr,"TrOCRForCausalLM"),YZr.forEach(t),sEo=r($ye," (TrOCR model)"),$ye.forEach(t),lEo=i(W),o6=n(W,"LI",{});var kye=s(o6);_ie=n(kye,"STRONG",{});var KZr=s(_ie);iEo=r(KZr,"xglm"),KZr.forEach(t),dEo=r(kye," \u2014 "),XN=n(kye,"A",{href:!0});var ZZr=s(XN);cEo=r(ZZr,"XGLMForCausalLM"),ZZr.forEach(t),fEo=r(kye," (XGLM model)"),kye.forEach(t),mEo=i(W),r6=n(W,"LI",{});var Sye=s(r6);bie=n(Sye,"STRONG",{});var eet=s(bie);gEo=r(eet,"xlm"),eet.forEach(t),hEo=r(Sye," \u2014 "),zN=n(Sye,"A",{href:!0});var oet=s(zN);pEo=r(oet,"XLMWithLMHeadModel"),oet.forEach(t),uEo=r(Sye," (XLM model)"),Sye.forEach(t),_Eo=i(W),t6=n(W,"LI",{});var Rye=s(t6);vie=n(Rye,"STRONG",{});var ret=s(vie);bEo=r(ret,"xlm-prophetnet"),ret.forEach(t),vEo=r(Rye," \u2014 "),QN=n(Rye,"A",{href:!0});var tet=s(QN);FEo=r(tet,"XLMProphetNetForCausalLM"),tet.forEach(t),TEo=r(Rye," (XLMProphetNet model)"),Rye.forEach(t),MEo=i(W),a6=n(W,"LI",{});var Bye=s(a6);Fie=n(Bye,"STRONG",{});var aet=s(Fie);EEo=r(aet,"xlm-roberta"),aet.forEach(t),CEo=r(Bye," \u2014 "),WN=n(Bye,"A",{href:!0});var net=s(WN);wEo=r(net,"XLMRobertaForCausalLM"),net.forEach(t),AEo=r(Bye," (XLM-RoBERTa model)"),Bye.forEach(t),yEo=i(W),n6=n(W,"LI",{});var Pye=s(n6);Tie=n(Pye,"STRONG",{});var set=s(Tie);LEo=r(set,"xlm-roberta-xl"),set.forEach(t),xEo=r(Pye," \u2014 "),HN=n(Pye,"A",{href:!0});var iet=s(HN);$Eo=r(iet,"XLMRobertaXLForCausalLM"),iet.forEach(t),kEo=r(Pye," (XLM-RoBERTa-XL model)"),Pye.forEach(t),SEo=i(W),s6=n(W,"LI",{});var Iye=s(s6);Mie=n(Iye,"STRONG",{});var det=s(Mie);REo=r(det,"xlnet"),det.forEach(t),BEo=r(Iye," \u2014 "),UN=n(Iye,"A",{href:!0});var cet=s(UN);PEo=r(cet,"XLNetLMHeadModel"),cet.forEach(t),IEo=r(Iye," (XLNet model)"),Iye.forEach(t),W.forEach(t),qEo=i(oa),l6=n(oa,"P",{});var qye=s(l6);NEo=r(qye,"The model is set in evaluation mode by default using "),Eie=n(qye,"CODE",{});var fet=s(Eie);jEo=r(fet,"model.eval()"),fet.forEach(t),DEo=r(qye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=n(qye,"CODE",{});var met=s(Cie);GEo=r(met,"model.train()"),met.forEach(t),qye.forEach(t),OEo=i(oa),T(i6.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),OPe=i(f),$i=n(f,"H2",{class:!0});var Qqe=s($i);d6=n(Qqe,"A",{id:!0,class:!0,href:!0});var get=s(d6);wie=n(get,"SPAN",{});var het=s(wie);T(Ry.$$.fragment,het),het.forEach(t),get.forEach(t),VEo=i(Qqe),Aie=n(Qqe,"SPAN",{});var pet=s(Aie);XEo=r(pet,"AutoModelForMaskedLM"),pet.forEach(t),Qqe.forEach(t),VPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(By.$$.fragment,Os),zEo=i(Os),ki=n(Os,"P",{});var aK=s(ki);QEo=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JN=n(aK,"A",{href:!0});var uet=s(JN);WEo=r(uet,"from_pretrained()"),uet.forEach(t),HEo=r(aK," class method or the "),YN=n(aK,"A",{href:!0});var _et=s(YN);UEo=r(_et,"from_config()"),_et.forEach(t),JEo=r(aK,` class
method.`),aK.forEach(t),YEo=i(Os),Py=n(Os,"P",{});var Wqe=s(Py);KEo=r(Wqe,"This class cannot be instantiated directly using "),yie=n(Wqe,"CODE",{});var bet=s(yie);ZEo=r(bet,"__init__()"),bet.forEach(t),eCo=r(Wqe," (throws an error)."),Wqe.forEach(t),oCo=i(Os),at=n(Os,"DIV",{class:!0});var oA=s(at);T(Iy.$$.fragment,oA),rCo=i(oA),Lie=n(oA,"P",{});var vet=s(Lie);tCo=r(vet,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vet.forEach(t),aCo=i(oA),Si=n(oA,"P",{});var nK=s(Si);nCo=r(nK,`Note:
Loading a model from its configuration file does `),xie=n(nK,"STRONG",{});var Fet=s(xie);sCo=r(Fet,"not"),Fet.forEach(t),lCo=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=n(nK,"A",{href:!0});var Tet=s(KN);iCo=r(Tet,"from_pretrained()"),Tet.forEach(t),dCo=r(nK," to load the model weights."),nK.forEach(t),cCo=i(oA),T(c6.$$.fragment,oA),oA.forEach(t),fCo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(qy.$$.fragment,ra),mCo=i(ra),$ie=n(ra,"P",{});var Met=s($ie);gCo=r(Met,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Met.forEach(t),hCo=i(ra),xa=n(ra,"P",{});var rA=s(xa);pCo=r(rA,"The model class to instantiate is selected based on the "),kie=n(rA,"CODE",{});var Eet=s(kie);uCo=r(Eet,"model_type"),Eet.forEach(t),_Co=r(rA,` property of the config object (either
passed as an argument or loaded from `),Sie=n(rA,"CODE",{});var Cet=s(Sie);bCo=r(Cet,"pretrained_model_name_or_path"),Cet.forEach(t),vCo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=n(rA,"CODE",{});var wet=s(Rie);FCo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),TCo=r(rA,":"),rA.forEach(t),MCo=i(ra),Q=n(ra,"UL",{});var H=s(Q);f6=n(H,"LI",{});var Nye=s(f6);Bie=n(Nye,"STRONG",{});var Aet=s(Bie);ECo=r(Aet,"albert"),Aet.forEach(t),CCo=r(Nye," \u2014 "),ZN=n(Nye,"A",{href:!0});var yet=s(ZN);wCo=r(yet,"AlbertForMaskedLM"),yet.forEach(t),ACo=r(Nye," (ALBERT model)"),Nye.forEach(t),yCo=i(H),m6=n(H,"LI",{});var jye=s(m6);Pie=n(jye,"STRONG",{});var Let=s(Pie);LCo=r(Let,"bart"),Let.forEach(t),xCo=r(jye," \u2014 "),ej=n(jye,"A",{href:!0});var xet=s(ej);$Co=r(xet,"BartForConditionalGeneration"),xet.forEach(t),kCo=r(jye," (BART model)"),jye.forEach(t),SCo=i(H),g6=n(H,"LI",{});var Dye=s(g6);Iie=n(Dye,"STRONG",{});var $et=s(Iie);RCo=r($et,"bert"),$et.forEach(t),BCo=r(Dye," \u2014 "),oj=n(Dye,"A",{href:!0});var ket=s(oj);PCo=r(ket,"BertForMaskedLM"),ket.forEach(t),ICo=r(Dye," (BERT model)"),Dye.forEach(t),qCo=i(H),h6=n(H,"LI",{});var Gye=s(h6);qie=n(Gye,"STRONG",{});var Set=s(qie);NCo=r(Set,"big_bird"),Set.forEach(t),jCo=r(Gye," \u2014 "),rj=n(Gye,"A",{href:!0});var Ret=s(rj);DCo=r(Ret,"BigBirdForMaskedLM"),Ret.forEach(t),GCo=r(Gye," (BigBird model)"),Gye.forEach(t),OCo=i(H),p6=n(H,"LI",{});var Oye=s(p6);Nie=n(Oye,"STRONG",{});var Bet=s(Nie);VCo=r(Bet,"camembert"),Bet.forEach(t),XCo=r(Oye," \u2014 "),tj=n(Oye,"A",{href:!0});var Pet=s(tj);zCo=r(Pet,"CamembertForMaskedLM"),Pet.forEach(t),QCo=r(Oye," (CamemBERT model)"),Oye.forEach(t),WCo=i(H),u6=n(H,"LI",{});var Vye=s(u6);jie=n(Vye,"STRONG",{});var Iet=s(jie);HCo=r(Iet,"convbert"),Iet.forEach(t),UCo=r(Vye," \u2014 "),aj=n(Vye,"A",{href:!0});var qet=s(aj);JCo=r(qet,"ConvBertForMaskedLM"),qet.forEach(t),YCo=r(Vye," (ConvBERT model)"),Vye.forEach(t),KCo=i(H),_6=n(H,"LI",{});var Xye=s(_6);Die=n(Xye,"STRONG",{});var Net=s(Die);ZCo=r(Net,"data2vec-text"),Net.forEach(t),e3o=r(Xye," \u2014 "),nj=n(Xye,"A",{href:!0});var jet=s(nj);o3o=r(jet,"Data2VecTextForMaskedLM"),jet.forEach(t),r3o=r(Xye," (Data2VecText model)"),Xye.forEach(t),t3o=i(H),b6=n(H,"LI",{});var zye=s(b6);Gie=n(zye,"STRONG",{});var Det=s(Gie);a3o=r(Det,"deberta"),Det.forEach(t),n3o=r(zye," \u2014 "),sj=n(zye,"A",{href:!0});var Get=s(sj);s3o=r(Get,"DebertaForMaskedLM"),Get.forEach(t),l3o=r(zye," (DeBERTa model)"),zye.forEach(t),i3o=i(H),v6=n(H,"LI",{});var Qye=s(v6);Oie=n(Qye,"STRONG",{});var Oet=s(Oie);d3o=r(Oet,"deberta-v2"),Oet.forEach(t),c3o=r(Qye," \u2014 "),lj=n(Qye,"A",{href:!0});var Vet=s(lj);f3o=r(Vet,"DebertaV2ForMaskedLM"),Vet.forEach(t),m3o=r(Qye," (DeBERTa-v2 model)"),Qye.forEach(t),g3o=i(H),F6=n(H,"LI",{});var Wye=s(F6);Vie=n(Wye,"STRONG",{});var Xet=s(Vie);h3o=r(Xet,"distilbert"),Xet.forEach(t),p3o=r(Wye," \u2014 "),ij=n(Wye,"A",{href:!0});var zet=s(ij);u3o=r(zet,"DistilBertForMaskedLM"),zet.forEach(t),_3o=r(Wye," (DistilBERT model)"),Wye.forEach(t),b3o=i(H),T6=n(H,"LI",{});var Hye=s(T6);Xie=n(Hye,"STRONG",{});var Qet=s(Xie);v3o=r(Qet,"electra"),Qet.forEach(t),F3o=r(Hye," \u2014 "),dj=n(Hye,"A",{href:!0});var Wet=s(dj);T3o=r(Wet,"ElectraForMaskedLM"),Wet.forEach(t),M3o=r(Hye," (ELECTRA model)"),Hye.forEach(t),E3o=i(H),M6=n(H,"LI",{});var Uye=s(M6);zie=n(Uye,"STRONG",{});var Het=s(zie);C3o=r(Het,"flaubert"),Het.forEach(t),w3o=r(Uye," \u2014 "),cj=n(Uye,"A",{href:!0});var Uet=s(cj);A3o=r(Uet,"FlaubertWithLMHeadModel"),Uet.forEach(t),y3o=r(Uye," (FlauBERT model)"),Uye.forEach(t),L3o=i(H),E6=n(H,"LI",{});var Jye=s(E6);Qie=n(Jye,"STRONG",{});var Jet=s(Qie);x3o=r(Jet,"fnet"),Jet.forEach(t),$3o=r(Jye," \u2014 "),fj=n(Jye,"A",{href:!0});var Yet=s(fj);k3o=r(Yet,"FNetForMaskedLM"),Yet.forEach(t),S3o=r(Jye," (FNet model)"),Jye.forEach(t),R3o=i(H),C6=n(H,"LI",{});var Yye=s(C6);Wie=n(Yye,"STRONG",{});var Ket=s(Wie);B3o=r(Ket,"funnel"),Ket.forEach(t),P3o=r(Yye," \u2014 "),mj=n(Yye,"A",{href:!0});var Zet=s(mj);I3o=r(Zet,"FunnelForMaskedLM"),Zet.forEach(t),q3o=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),N3o=i(H),w6=n(H,"LI",{});var Kye=s(w6);Hie=n(Kye,"STRONG",{});var eot=s(Hie);j3o=r(eot,"ibert"),eot.forEach(t),D3o=r(Kye," \u2014 "),gj=n(Kye,"A",{href:!0});var oot=s(gj);G3o=r(oot,"IBertForMaskedLM"),oot.forEach(t),O3o=r(Kye," (I-BERT model)"),Kye.forEach(t),V3o=i(H),A6=n(H,"LI",{});var Zye=s(A6);Uie=n(Zye,"STRONG",{});var rot=s(Uie);X3o=r(rot,"layoutlm"),rot.forEach(t),z3o=r(Zye," \u2014 "),hj=n(Zye,"A",{href:!0});var tot=s(hj);Q3o=r(tot,"LayoutLMForMaskedLM"),tot.forEach(t),W3o=r(Zye," (LayoutLM model)"),Zye.forEach(t),H3o=i(H),y6=n(H,"LI",{});var eLe=s(y6);Jie=n(eLe,"STRONG",{});var aot=s(Jie);U3o=r(aot,"longformer"),aot.forEach(t),J3o=r(eLe," \u2014 "),pj=n(eLe,"A",{href:!0});var not=s(pj);Y3o=r(not,"LongformerForMaskedLM"),not.forEach(t),K3o=r(eLe," (Longformer model)"),eLe.forEach(t),Z3o=i(H),L6=n(H,"LI",{});var oLe=s(L6);Yie=n(oLe,"STRONG",{});var sot=s(Yie);ewo=r(sot,"mbart"),sot.forEach(t),owo=r(oLe," \u2014 "),uj=n(oLe,"A",{href:!0});var lot=s(uj);rwo=r(lot,"MBartForConditionalGeneration"),lot.forEach(t),two=r(oLe," (mBART model)"),oLe.forEach(t),awo=i(H),x6=n(H,"LI",{});var rLe=s(x6);Kie=n(rLe,"STRONG",{});var iot=s(Kie);nwo=r(iot,"megatron-bert"),iot.forEach(t),swo=r(rLe," \u2014 "),_j=n(rLe,"A",{href:!0});var dot=s(_j);lwo=r(dot,"MegatronBertForMaskedLM"),dot.forEach(t),iwo=r(rLe," (MegatronBert model)"),rLe.forEach(t),dwo=i(H),$6=n(H,"LI",{});var tLe=s($6);Zie=n(tLe,"STRONG",{});var cot=s(Zie);cwo=r(cot,"mobilebert"),cot.forEach(t),fwo=r(tLe," \u2014 "),bj=n(tLe,"A",{href:!0});var fot=s(bj);mwo=r(fot,"MobileBertForMaskedLM"),fot.forEach(t),gwo=r(tLe," (MobileBERT model)"),tLe.forEach(t),hwo=i(H),k6=n(H,"LI",{});var aLe=s(k6);ede=n(aLe,"STRONG",{});var mot=s(ede);pwo=r(mot,"mpnet"),mot.forEach(t),uwo=r(aLe," \u2014 "),vj=n(aLe,"A",{href:!0});var got=s(vj);_wo=r(got,"MPNetForMaskedLM"),got.forEach(t),bwo=r(aLe," (MPNet model)"),aLe.forEach(t),vwo=i(H),S6=n(H,"LI",{});var nLe=s(S6);ode=n(nLe,"STRONG",{});var hot=s(ode);Fwo=r(hot,"nystromformer"),hot.forEach(t),Two=r(nLe," \u2014 "),Fj=n(nLe,"A",{href:!0});var pot=s(Fj);Mwo=r(pot,"NystromformerForMaskedLM"),pot.forEach(t),Ewo=r(nLe," (Nystromformer model)"),nLe.forEach(t),Cwo=i(H),R6=n(H,"LI",{});var sLe=s(R6);rde=n(sLe,"STRONG",{});var uot=s(rde);wwo=r(uot,"perceiver"),uot.forEach(t),Awo=r(sLe," \u2014 "),Tj=n(sLe,"A",{href:!0});var _ot=s(Tj);ywo=r(_ot,"PerceiverForMaskedLM"),_ot.forEach(t),Lwo=r(sLe," (Perceiver model)"),sLe.forEach(t),xwo=i(H),B6=n(H,"LI",{});var lLe=s(B6);tde=n(lLe,"STRONG",{});var bot=s(tde);$wo=r(bot,"qdqbert"),bot.forEach(t),kwo=r(lLe," \u2014 "),Mj=n(lLe,"A",{href:!0});var vot=s(Mj);Swo=r(vot,"QDQBertForMaskedLM"),vot.forEach(t),Rwo=r(lLe," (QDQBert model)"),lLe.forEach(t),Bwo=i(H),P6=n(H,"LI",{});var iLe=s(P6);ade=n(iLe,"STRONG",{});var Fot=s(ade);Pwo=r(Fot,"reformer"),Fot.forEach(t),Iwo=r(iLe," \u2014 "),Ej=n(iLe,"A",{href:!0});var Tot=s(Ej);qwo=r(Tot,"ReformerForMaskedLM"),Tot.forEach(t),Nwo=r(iLe," (Reformer model)"),iLe.forEach(t),jwo=i(H),I6=n(H,"LI",{});var dLe=s(I6);nde=n(dLe,"STRONG",{});var Mot=s(nde);Dwo=r(Mot,"rembert"),Mot.forEach(t),Gwo=r(dLe," \u2014 "),Cj=n(dLe,"A",{href:!0});var Eot=s(Cj);Owo=r(Eot,"RemBertForMaskedLM"),Eot.forEach(t),Vwo=r(dLe," (RemBERT model)"),dLe.forEach(t),Xwo=i(H),q6=n(H,"LI",{});var cLe=s(q6);sde=n(cLe,"STRONG",{});var Cot=s(sde);zwo=r(Cot,"roberta"),Cot.forEach(t),Qwo=r(cLe," \u2014 "),wj=n(cLe,"A",{href:!0});var wot=s(wj);Wwo=r(wot,"RobertaForMaskedLM"),wot.forEach(t),Hwo=r(cLe," (RoBERTa model)"),cLe.forEach(t),Uwo=i(H),N6=n(H,"LI",{});var fLe=s(N6);lde=n(fLe,"STRONG",{});var Aot=s(lde);Jwo=r(Aot,"roformer"),Aot.forEach(t),Ywo=r(fLe," \u2014 "),Aj=n(fLe,"A",{href:!0});var yot=s(Aj);Kwo=r(yot,"RoFormerForMaskedLM"),yot.forEach(t),Zwo=r(fLe," (RoFormer model)"),fLe.forEach(t),eAo=i(H),j6=n(H,"LI",{});var mLe=s(j6);ide=n(mLe,"STRONG",{});var Lot=s(ide);oAo=r(Lot,"squeezebert"),Lot.forEach(t),rAo=r(mLe," \u2014 "),yj=n(mLe,"A",{href:!0});var xot=s(yj);tAo=r(xot,"SqueezeBertForMaskedLM"),xot.forEach(t),aAo=r(mLe," (SqueezeBERT model)"),mLe.forEach(t),nAo=i(H),D6=n(H,"LI",{});var gLe=s(D6);dde=n(gLe,"STRONG",{});var $ot=s(dde);sAo=r($ot,"tapas"),$ot.forEach(t),lAo=r(gLe," \u2014 "),Lj=n(gLe,"A",{href:!0});var kot=s(Lj);iAo=r(kot,"TapasForMaskedLM"),kot.forEach(t),dAo=r(gLe," (TAPAS model)"),gLe.forEach(t),cAo=i(H),G6=n(H,"LI",{});var hLe=s(G6);cde=n(hLe,"STRONG",{});var Sot=s(cde);fAo=r(Sot,"wav2vec2"),Sot.forEach(t),mAo=r(hLe," \u2014 "),fde=n(hLe,"CODE",{});var Rot=s(fde);gAo=r(Rot,"Wav2Vec2ForMaskedLM"),Rot.forEach(t),hAo=r(hLe," (Wav2Vec2 model)"),hLe.forEach(t),pAo=i(H),O6=n(H,"LI",{});var pLe=s(O6);mde=n(pLe,"STRONG",{});var Bot=s(mde);uAo=r(Bot,"xlm"),Bot.forEach(t),_Ao=r(pLe," \u2014 "),xj=n(pLe,"A",{href:!0});var Pot=s(xj);bAo=r(Pot,"XLMWithLMHeadModel"),Pot.forEach(t),vAo=r(pLe," (XLM model)"),pLe.forEach(t),FAo=i(H),V6=n(H,"LI",{});var uLe=s(V6);gde=n(uLe,"STRONG",{});var Iot=s(gde);TAo=r(Iot,"xlm-roberta"),Iot.forEach(t),MAo=r(uLe," \u2014 "),$j=n(uLe,"A",{href:!0});var qot=s($j);EAo=r(qot,"XLMRobertaForMaskedLM"),qot.forEach(t),CAo=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),wAo=i(H),X6=n(H,"LI",{});var _Le=s(X6);hde=n(_Le,"STRONG",{});var Not=s(hde);AAo=r(Not,"xlm-roberta-xl"),Not.forEach(t),yAo=r(_Le," \u2014 "),kj=n(_Le,"A",{href:!0});var jot=s(kj);LAo=r(jot,"XLMRobertaXLForMaskedLM"),jot.forEach(t),xAo=r(_Le," (XLM-RoBERTa-XL model)"),_Le.forEach(t),$Ao=i(H),z6=n(H,"LI",{});var bLe=s(z6);pde=n(bLe,"STRONG",{});var Dot=s(pde);kAo=r(Dot,"yoso"),Dot.forEach(t),SAo=r(bLe," \u2014 "),Sj=n(bLe,"A",{href:!0});var Got=s(Sj);RAo=r(Got,"YosoForMaskedLM"),Got.forEach(t),BAo=r(bLe," (YOSO model)"),bLe.forEach(t),H.forEach(t),PAo=i(ra),Q6=n(ra,"P",{});var vLe=s(Q6);IAo=r(vLe,"The model is set in evaluation mode by default using "),ude=n(vLe,"CODE",{});var Oot=s(ude);qAo=r(Oot,"model.eval()"),Oot.forEach(t),NAo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(vLe,"CODE",{});var Vot=s(_de);jAo=r(Vot,"model.train()"),Vot.forEach(t),vLe.forEach(t),DAo=i(ra),T(W6.$$.fragment,ra),ra.forEach(t),Os.forEach(t),XPe=i(f),Ri=n(f,"H2",{class:!0});var Hqe=s(Ri);H6=n(Hqe,"A",{id:!0,class:!0,href:!0});var Xot=s(H6);bde=n(Xot,"SPAN",{});var zot=s(bde);T(Ny.$$.fragment,zot),zot.forEach(t),Xot.forEach(t),GAo=i(Hqe),vde=n(Hqe,"SPAN",{});var Qot=s(vde);OAo=r(Qot,"AutoModelForSeq2SeqLM"),Qot.forEach(t),Hqe.forEach(t),zPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(jy.$$.fragment,Vs),VAo=i(Vs),Bi=n(Vs,"P",{});var sK=s(Bi);XAo=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Rj=n(sK,"A",{href:!0});var Wot=s(Rj);zAo=r(Wot,"from_pretrained()"),Wot.forEach(t),QAo=r(sK," class method or the "),Bj=n(sK,"A",{href:!0});var Hot=s(Bj);WAo=r(Hot,"from_config()"),Hot.forEach(t),HAo=r(sK,` class
method.`),sK.forEach(t),UAo=i(Vs),Dy=n(Vs,"P",{});var Uqe=s(Dy);JAo=r(Uqe,"This class cannot be instantiated directly using "),Fde=n(Uqe,"CODE",{});var Uot=s(Fde);YAo=r(Uot,"__init__()"),Uot.forEach(t),KAo=r(Uqe," (throws an error)."),Uqe.forEach(t),ZAo=i(Vs),nt=n(Vs,"DIV",{class:!0});var tA=s(nt);T(Gy.$$.fragment,tA),e0o=i(tA),Tde=n(tA,"P",{});var Jot=s(Tde);o0o=r(Jot,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jot.forEach(t),r0o=i(tA),Pi=n(tA,"P",{});var lK=s(Pi);t0o=r(lK,`Note:
Loading a model from its configuration file does `),Mde=n(lK,"STRONG",{});var Yot=s(Mde);a0o=r(Yot,"not"),Yot.forEach(t),n0o=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pj=n(lK,"A",{href:!0});var Kot=s(Pj);s0o=r(Kot,"from_pretrained()"),Kot.forEach(t),l0o=r(lK," to load the model weights."),lK.forEach(t),i0o=i(tA),T(U6.$$.fragment,tA),tA.forEach(t),d0o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(Oy.$$.fragment,ta),c0o=i(ta),Ede=n(ta,"P",{});var Zot=s(Ede);f0o=r(Zot,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zot.forEach(t),m0o=i(ta),$a=n(ta,"P",{});var aA=s($a);g0o=r(aA,"The model class to instantiate is selected based on the "),Cde=n(aA,"CODE",{});var ert=s(Cde);h0o=r(ert,"model_type"),ert.forEach(t),p0o=r(aA,` property of the config object (either
passed as an argument or loaded from `),wde=n(aA,"CODE",{});var ort=s(wde);u0o=r(ort,"pretrained_model_name_or_path"),ort.forEach(t),_0o=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ade=n(aA,"CODE",{});var rrt=s(Ade);b0o=r(rrt,"pretrained_model_name_or_path"),rrt.forEach(t),v0o=r(aA,":"),aA.forEach(t),F0o=i(ta),he=n(ta,"UL",{});var ue=s(he);J6=n(ue,"LI",{});var FLe=s(J6);yde=n(FLe,"STRONG",{});var trt=s(yde);T0o=r(trt,"bart"),trt.forEach(t),M0o=r(FLe," \u2014 "),Ij=n(FLe,"A",{href:!0});var art=s(Ij);E0o=r(art,"BartForConditionalGeneration"),art.forEach(t),C0o=r(FLe," (BART model)"),FLe.forEach(t),w0o=i(ue),Y6=n(ue,"LI",{});var TLe=s(Y6);Lde=n(TLe,"STRONG",{});var nrt=s(Lde);A0o=r(nrt,"bigbird_pegasus"),nrt.forEach(t),y0o=r(TLe," \u2014 "),qj=n(TLe,"A",{href:!0});var srt=s(qj);L0o=r(srt,"BigBirdPegasusForConditionalGeneration"),srt.forEach(t),x0o=r(TLe," (BigBirdPegasus model)"),TLe.forEach(t),$0o=i(ue),K6=n(ue,"LI",{});var MLe=s(K6);xde=n(MLe,"STRONG",{});var lrt=s(xde);k0o=r(lrt,"blenderbot"),lrt.forEach(t),S0o=r(MLe," \u2014 "),Nj=n(MLe,"A",{href:!0});var irt=s(Nj);R0o=r(irt,"BlenderbotForConditionalGeneration"),irt.forEach(t),B0o=r(MLe," (Blenderbot model)"),MLe.forEach(t),P0o=i(ue),Z6=n(ue,"LI",{});var ELe=s(Z6);$de=n(ELe,"STRONG",{});var drt=s($de);I0o=r(drt,"blenderbot-small"),drt.forEach(t),q0o=r(ELe," \u2014 "),jj=n(ELe,"A",{href:!0});var crt=s(jj);N0o=r(crt,"BlenderbotSmallForConditionalGeneration"),crt.forEach(t),j0o=r(ELe," (BlenderbotSmall model)"),ELe.forEach(t),D0o=i(ue),e1=n(ue,"LI",{});var CLe=s(e1);kde=n(CLe,"STRONG",{});var frt=s(kde);G0o=r(frt,"encoder-decoder"),frt.forEach(t),O0o=r(CLe," \u2014 "),Dj=n(CLe,"A",{href:!0});var mrt=s(Dj);V0o=r(mrt,"EncoderDecoderModel"),mrt.forEach(t),X0o=r(CLe," (Encoder decoder model)"),CLe.forEach(t),z0o=i(ue),o1=n(ue,"LI",{});var wLe=s(o1);Sde=n(wLe,"STRONG",{});var grt=s(Sde);Q0o=r(grt,"fsmt"),grt.forEach(t),W0o=r(wLe," \u2014 "),Gj=n(wLe,"A",{href:!0});var hrt=s(Gj);H0o=r(hrt,"FSMTForConditionalGeneration"),hrt.forEach(t),U0o=r(wLe," (FairSeq Machine-Translation model)"),wLe.forEach(t),J0o=i(ue),r1=n(ue,"LI",{});var ALe=s(r1);Rde=n(ALe,"STRONG",{});var prt=s(Rde);Y0o=r(prt,"led"),prt.forEach(t),K0o=r(ALe," \u2014 "),Oj=n(ALe,"A",{href:!0});var urt=s(Oj);Z0o=r(urt,"LEDForConditionalGeneration"),urt.forEach(t),eyo=r(ALe," (LED model)"),ALe.forEach(t),oyo=i(ue),t1=n(ue,"LI",{});var yLe=s(t1);Bde=n(yLe,"STRONG",{});var _rt=s(Bde);ryo=r(_rt,"m2m_100"),_rt.forEach(t),tyo=r(yLe," \u2014 "),Vj=n(yLe,"A",{href:!0});var brt=s(Vj);ayo=r(brt,"M2M100ForConditionalGeneration"),brt.forEach(t),nyo=r(yLe," (M2M100 model)"),yLe.forEach(t),syo=i(ue),a1=n(ue,"LI",{});var LLe=s(a1);Pde=n(LLe,"STRONG",{});var vrt=s(Pde);lyo=r(vrt,"marian"),vrt.forEach(t),iyo=r(LLe," \u2014 "),Xj=n(LLe,"A",{href:!0});var Frt=s(Xj);dyo=r(Frt,"MarianMTModel"),Frt.forEach(t),cyo=r(LLe," (Marian model)"),LLe.forEach(t),fyo=i(ue),n1=n(ue,"LI",{});var xLe=s(n1);Ide=n(xLe,"STRONG",{});var Trt=s(Ide);myo=r(Trt,"mbart"),Trt.forEach(t),gyo=r(xLe," \u2014 "),zj=n(xLe,"A",{href:!0});var Mrt=s(zj);hyo=r(Mrt,"MBartForConditionalGeneration"),Mrt.forEach(t),pyo=r(xLe," (mBART model)"),xLe.forEach(t),uyo=i(ue),s1=n(ue,"LI",{});var $Le=s(s1);qde=n($Le,"STRONG",{});var Ert=s(qde);_yo=r(Ert,"mt5"),Ert.forEach(t),byo=r($Le," \u2014 "),Qj=n($Le,"A",{href:!0});var Crt=s(Qj);vyo=r(Crt,"MT5ForConditionalGeneration"),Crt.forEach(t),Fyo=r($Le," (mT5 model)"),$Le.forEach(t),Tyo=i(ue),l1=n(ue,"LI",{});var kLe=s(l1);Nde=n(kLe,"STRONG",{});var wrt=s(Nde);Myo=r(wrt,"pegasus"),wrt.forEach(t),Eyo=r(kLe," \u2014 "),Wj=n(kLe,"A",{href:!0});var Art=s(Wj);Cyo=r(Art,"PegasusForConditionalGeneration"),Art.forEach(t),wyo=r(kLe," (Pegasus model)"),kLe.forEach(t),Ayo=i(ue),i1=n(ue,"LI",{});var SLe=s(i1);jde=n(SLe,"STRONG",{});var yrt=s(jde);yyo=r(yrt,"plbart"),yrt.forEach(t),Lyo=r(SLe," \u2014 "),Hj=n(SLe,"A",{href:!0});var Lrt=s(Hj);xyo=r(Lrt,"PLBartForConditionalGeneration"),Lrt.forEach(t),$yo=r(SLe," (PLBart model)"),SLe.forEach(t),kyo=i(ue),d1=n(ue,"LI",{});var RLe=s(d1);Dde=n(RLe,"STRONG",{});var xrt=s(Dde);Syo=r(xrt,"prophetnet"),xrt.forEach(t),Ryo=r(RLe," \u2014 "),Uj=n(RLe,"A",{href:!0});var $rt=s(Uj);Byo=r($rt,"ProphetNetForConditionalGeneration"),$rt.forEach(t),Pyo=r(RLe," (ProphetNet model)"),RLe.forEach(t),Iyo=i(ue),c1=n(ue,"LI",{});var BLe=s(c1);Gde=n(BLe,"STRONG",{});var krt=s(Gde);qyo=r(krt,"t5"),krt.forEach(t),Nyo=r(BLe," \u2014 "),Jj=n(BLe,"A",{href:!0});var Srt=s(Jj);jyo=r(Srt,"T5ForConditionalGeneration"),Srt.forEach(t),Dyo=r(BLe," (T5 model)"),BLe.forEach(t),Gyo=i(ue),f1=n(ue,"LI",{});var PLe=s(f1);Ode=n(PLe,"STRONG",{});var Rrt=s(Ode);Oyo=r(Rrt,"tapex"),Rrt.forEach(t),Vyo=r(PLe," \u2014 "),Yj=n(PLe,"A",{href:!0});var Brt=s(Yj);Xyo=r(Brt,"BartForConditionalGeneration"),Brt.forEach(t),zyo=r(PLe," (TAPEX model)"),PLe.forEach(t),Qyo=i(ue),m1=n(ue,"LI",{});var ILe=s(m1);Vde=n(ILe,"STRONG",{});var Prt=s(Vde);Wyo=r(Prt,"xlm-prophetnet"),Prt.forEach(t),Hyo=r(ILe," \u2014 "),Kj=n(ILe,"A",{href:!0});var Irt=s(Kj);Uyo=r(Irt,"XLMProphetNetForConditionalGeneration"),Irt.forEach(t),Jyo=r(ILe," (XLMProphetNet model)"),ILe.forEach(t),ue.forEach(t),Yyo=i(ta),g1=n(ta,"P",{});var qLe=s(g1);Kyo=r(qLe,"The model is set in evaluation mode by default using "),Xde=n(qLe,"CODE",{});var qrt=s(Xde);Zyo=r(qrt,"model.eval()"),qrt.forEach(t),eLo=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=n(qLe,"CODE",{});var Nrt=s(zde);oLo=r(Nrt,"model.train()"),Nrt.forEach(t),qLe.forEach(t),rLo=i(ta),T(h1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),QPe=i(f),Ii=n(f,"H2",{class:!0});var Jqe=s(Ii);p1=n(Jqe,"A",{id:!0,class:!0,href:!0});var jrt=s(p1);Qde=n(jrt,"SPAN",{});var Drt=s(Qde);T(Vy.$$.fragment,Drt),Drt.forEach(t),jrt.forEach(t),tLo=i(Jqe),Wde=n(Jqe,"SPAN",{});var Grt=s(Wde);aLo=r(Grt,"AutoModelForSequenceClassification"),Grt.forEach(t),Jqe.forEach(t),WPe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(Xy.$$.fragment,Xs),nLo=i(Xs),qi=n(Xs,"P",{});var iK=s(qi);sLo=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Zj=n(iK,"A",{href:!0});var Ort=s(Zj);lLo=r(Ort,"from_pretrained()"),Ort.forEach(t),iLo=r(iK," class method or the "),eD=n(iK,"A",{href:!0});var Vrt=s(eD);dLo=r(Vrt,"from_config()"),Vrt.forEach(t),cLo=r(iK,` class
method.`),iK.forEach(t),fLo=i(Xs),zy=n(Xs,"P",{});var Yqe=s(zy);mLo=r(Yqe,"This class cannot be instantiated directly using "),Hde=n(Yqe,"CODE",{});var Xrt=s(Hde);gLo=r(Xrt,"__init__()"),Xrt.forEach(t),hLo=r(Yqe," (throws an error)."),Yqe.forEach(t),pLo=i(Xs),st=n(Xs,"DIV",{class:!0});var nA=s(st);T(Qy.$$.fragment,nA),uLo=i(nA),Ude=n(nA,"P",{});var zrt=s(Ude);_Lo=r(zrt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zrt.forEach(t),bLo=i(nA),Ni=n(nA,"P",{});var dK=s(Ni);vLo=r(dK,`Note:
Loading a model from its configuration file does `),Jde=n(dK,"STRONG",{});var Qrt=s(Jde);FLo=r(Qrt,"not"),Qrt.forEach(t),TLo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oD=n(dK,"A",{href:!0});var Wrt=s(oD);MLo=r(Wrt,"from_pretrained()"),Wrt.forEach(t),ELo=r(dK," to load the model weights."),dK.forEach(t),CLo=i(nA),T(u1.$$.fragment,nA),nA.forEach(t),wLo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Wy.$$.fragment,aa),ALo=i(aa),Yde=n(aa,"P",{});var Hrt=s(Yde);yLo=r(Hrt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hrt.forEach(t),LLo=i(aa),ka=n(aa,"P",{});var sA=s(ka);xLo=r(sA,"The model class to instantiate is selected based on the "),Kde=n(sA,"CODE",{});var Urt=s(Kde);$Lo=r(Urt,"model_type"),Urt.forEach(t),kLo=r(sA,` property of the config object (either
passed as an argument or loaded from `),Zde=n(sA,"CODE",{});var Jrt=s(Zde);SLo=r(Jrt,"pretrained_model_name_or_path"),Jrt.forEach(t),RLo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=n(sA,"CODE",{});var Yrt=s(ece);BLo=r(Yrt,"pretrained_model_name_or_path"),Yrt.forEach(t),PLo=r(sA,":"),sA.forEach(t),ILo=i(aa),q=n(aa,"UL",{});var N=s(q);_1=n(N,"LI",{});var NLe=s(_1);oce=n(NLe,"STRONG",{});var Krt=s(oce);qLo=r(Krt,"albert"),Krt.forEach(t),NLo=r(NLe," \u2014 "),rD=n(NLe,"A",{href:!0});var Zrt=s(rD);jLo=r(Zrt,"AlbertForSequenceClassification"),Zrt.forEach(t),DLo=r(NLe," (ALBERT model)"),NLe.forEach(t),GLo=i(N),b1=n(N,"LI",{});var jLe=s(b1);rce=n(jLe,"STRONG",{});var ett=s(rce);OLo=r(ett,"bart"),ett.forEach(t),VLo=r(jLe," \u2014 "),tD=n(jLe,"A",{href:!0});var ott=s(tD);XLo=r(ott,"BartForSequenceClassification"),ott.forEach(t),zLo=r(jLe," (BART model)"),jLe.forEach(t),QLo=i(N),v1=n(N,"LI",{});var DLe=s(v1);tce=n(DLe,"STRONG",{});var rtt=s(tce);WLo=r(rtt,"bert"),rtt.forEach(t),HLo=r(DLe," \u2014 "),aD=n(DLe,"A",{href:!0});var ttt=s(aD);ULo=r(ttt,"BertForSequenceClassification"),ttt.forEach(t),JLo=r(DLe," (BERT model)"),DLe.forEach(t),YLo=i(N),F1=n(N,"LI",{});var GLe=s(F1);ace=n(GLe,"STRONG",{});var att=s(ace);KLo=r(att,"big_bird"),att.forEach(t),ZLo=r(GLe," \u2014 "),nD=n(GLe,"A",{href:!0});var ntt=s(nD);e8o=r(ntt,"BigBirdForSequenceClassification"),ntt.forEach(t),o8o=r(GLe," (BigBird model)"),GLe.forEach(t),r8o=i(N),T1=n(N,"LI",{});var OLe=s(T1);nce=n(OLe,"STRONG",{});var stt=s(nce);t8o=r(stt,"bigbird_pegasus"),stt.forEach(t),a8o=r(OLe," \u2014 "),sD=n(OLe,"A",{href:!0});var ltt=s(sD);n8o=r(ltt,"BigBirdPegasusForSequenceClassification"),ltt.forEach(t),s8o=r(OLe," (BigBirdPegasus model)"),OLe.forEach(t),l8o=i(N),M1=n(N,"LI",{});var VLe=s(M1);sce=n(VLe,"STRONG",{});var itt=s(sce);i8o=r(itt,"camembert"),itt.forEach(t),d8o=r(VLe," \u2014 "),lD=n(VLe,"A",{href:!0});var dtt=s(lD);c8o=r(dtt,"CamembertForSequenceClassification"),dtt.forEach(t),f8o=r(VLe," (CamemBERT model)"),VLe.forEach(t),m8o=i(N),E1=n(N,"LI",{});var XLe=s(E1);lce=n(XLe,"STRONG",{});var ctt=s(lce);g8o=r(ctt,"canine"),ctt.forEach(t),h8o=r(XLe," \u2014 "),iD=n(XLe,"A",{href:!0});var ftt=s(iD);p8o=r(ftt,"CanineForSequenceClassification"),ftt.forEach(t),u8o=r(XLe," (Canine model)"),XLe.forEach(t),_8o=i(N),C1=n(N,"LI",{});var zLe=s(C1);ice=n(zLe,"STRONG",{});var mtt=s(ice);b8o=r(mtt,"convbert"),mtt.forEach(t),v8o=r(zLe," \u2014 "),dD=n(zLe,"A",{href:!0});var gtt=s(dD);F8o=r(gtt,"ConvBertForSequenceClassification"),gtt.forEach(t),T8o=r(zLe," (ConvBERT model)"),zLe.forEach(t),M8o=i(N),w1=n(N,"LI",{});var QLe=s(w1);dce=n(QLe,"STRONG",{});var htt=s(dce);E8o=r(htt,"ctrl"),htt.forEach(t),C8o=r(QLe," \u2014 "),cD=n(QLe,"A",{href:!0});var ptt=s(cD);w8o=r(ptt,"CTRLForSequenceClassification"),ptt.forEach(t),A8o=r(QLe," (CTRL model)"),QLe.forEach(t),y8o=i(N),A1=n(N,"LI",{});var WLe=s(A1);cce=n(WLe,"STRONG",{});var utt=s(cce);L8o=r(utt,"data2vec-text"),utt.forEach(t),x8o=r(WLe," \u2014 "),fD=n(WLe,"A",{href:!0});var _tt=s(fD);$8o=r(_tt,"Data2VecTextForSequenceClassification"),_tt.forEach(t),k8o=r(WLe," (Data2VecText model)"),WLe.forEach(t),S8o=i(N),y1=n(N,"LI",{});var HLe=s(y1);fce=n(HLe,"STRONG",{});var btt=s(fce);R8o=r(btt,"deberta"),btt.forEach(t),B8o=r(HLe," \u2014 "),mD=n(HLe,"A",{href:!0});var vtt=s(mD);P8o=r(vtt,"DebertaForSequenceClassification"),vtt.forEach(t),I8o=r(HLe," (DeBERTa model)"),HLe.forEach(t),q8o=i(N),L1=n(N,"LI",{});var ULe=s(L1);mce=n(ULe,"STRONG",{});var Ftt=s(mce);N8o=r(Ftt,"deberta-v2"),Ftt.forEach(t),j8o=r(ULe," \u2014 "),gD=n(ULe,"A",{href:!0});var Ttt=s(gD);D8o=r(Ttt,"DebertaV2ForSequenceClassification"),Ttt.forEach(t),G8o=r(ULe," (DeBERTa-v2 model)"),ULe.forEach(t),O8o=i(N),x1=n(N,"LI",{});var JLe=s(x1);gce=n(JLe,"STRONG",{});var Mtt=s(gce);V8o=r(Mtt,"distilbert"),Mtt.forEach(t),X8o=r(JLe," \u2014 "),hD=n(JLe,"A",{href:!0});var Ett=s(hD);z8o=r(Ett,"DistilBertForSequenceClassification"),Ett.forEach(t),Q8o=r(JLe," (DistilBERT model)"),JLe.forEach(t),W8o=i(N),$1=n(N,"LI",{});var YLe=s($1);hce=n(YLe,"STRONG",{});var Ctt=s(hce);H8o=r(Ctt,"electra"),Ctt.forEach(t),U8o=r(YLe," \u2014 "),pD=n(YLe,"A",{href:!0});var wtt=s(pD);J8o=r(wtt,"ElectraForSequenceClassification"),wtt.forEach(t),Y8o=r(YLe," (ELECTRA model)"),YLe.forEach(t),K8o=i(N),k1=n(N,"LI",{});var KLe=s(k1);pce=n(KLe,"STRONG",{});var Att=s(pce);Z8o=r(Att,"flaubert"),Att.forEach(t),exo=r(KLe," \u2014 "),uD=n(KLe,"A",{href:!0});var ytt=s(uD);oxo=r(ytt,"FlaubertForSequenceClassification"),ytt.forEach(t),rxo=r(KLe," (FlauBERT model)"),KLe.forEach(t),txo=i(N),S1=n(N,"LI",{});var ZLe=s(S1);uce=n(ZLe,"STRONG",{});var Ltt=s(uce);axo=r(Ltt,"fnet"),Ltt.forEach(t),nxo=r(ZLe," \u2014 "),_D=n(ZLe,"A",{href:!0});var xtt=s(_D);sxo=r(xtt,"FNetForSequenceClassification"),xtt.forEach(t),lxo=r(ZLe," (FNet model)"),ZLe.forEach(t),ixo=i(N),R1=n(N,"LI",{});var e8e=s(R1);_ce=n(e8e,"STRONG",{});var $tt=s(_ce);dxo=r($tt,"funnel"),$tt.forEach(t),cxo=r(e8e," \u2014 "),bD=n(e8e,"A",{href:!0});var ktt=s(bD);fxo=r(ktt,"FunnelForSequenceClassification"),ktt.forEach(t),mxo=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),gxo=i(N),B1=n(N,"LI",{});var o8e=s(B1);bce=n(o8e,"STRONG",{});var Stt=s(bce);hxo=r(Stt,"gpt2"),Stt.forEach(t),pxo=r(o8e," \u2014 "),vD=n(o8e,"A",{href:!0});var Rtt=s(vD);uxo=r(Rtt,"GPT2ForSequenceClassification"),Rtt.forEach(t),_xo=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),bxo=i(N),P1=n(N,"LI",{});var r8e=s(P1);vce=n(r8e,"STRONG",{});var Btt=s(vce);vxo=r(Btt,"gpt_neo"),Btt.forEach(t),Fxo=r(r8e," \u2014 "),FD=n(r8e,"A",{href:!0});var Ptt=s(FD);Txo=r(Ptt,"GPTNeoForSequenceClassification"),Ptt.forEach(t),Mxo=r(r8e," (GPT Neo model)"),r8e.forEach(t),Exo=i(N),I1=n(N,"LI",{});var t8e=s(I1);Fce=n(t8e,"STRONG",{});var Itt=s(Fce);Cxo=r(Itt,"gptj"),Itt.forEach(t),wxo=r(t8e," \u2014 "),TD=n(t8e,"A",{href:!0});var qtt=s(TD);Axo=r(qtt,"GPTJForSequenceClassification"),qtt.forEach(t),yxo=r(t8e," (GPT-J model)"),t8e.forEach(t),Lxo=i(N),q1=n(N,"LI",{});var a8e=s(q1);Tce=n(a8e,"STRONG",{});var Ntt=s(Tce);xxo=r(Ntt,"ibert"),Ntt.forEach(t),$xo=r(a8e," \u2014 "),MD=n(a8e,"A",{href:!0});var jtt=s(MD);kxo=r(jtt,"IBertForSequenceClassification"),jtt.forEach(t),Sxo=r(a8e," (I-BERT model)"),a8e.forEach(t),Rxo=i(N),N1=n(N,"LI",{});var n8e=s(N1);Mce=n(n8e,"STRONG",{});var Dtt=s(Mce);Bxo=r(Dtt,"layoutlm"),Dtt.forEach(t),Pxo=r(n8e," \u2014 "),ED=n(n8e,"A",{href:!0});var Gtt=s(ED);Ixo=r(Gtt,"LayoutLMForSequenceClassification"),Gtt.forEach(t),qxo=r(n8e," (LayoutLM model)"),n8e.forEach(t),Nxo=i(N),j1=n(N,"LI",{});var s8e=s(j1);Ece=n(s8e,"STRONG",{});var Ott=s(Ece);jxo=r(Ott,"layoutlmv2"),Ott.forEach(t),Dxo=r(s8e," \u2014 "),CD=n(s8e,"A",{href:!0});var Vtt=s(CD);Gxo=r(Vtt,"LayoutLMv2ForSequenceClassification"),Vtt.forEach(t),Oxo=r(s8e," (LayoutLMv2 model)"),s8e.forEach(t),Vxo=i(N),D1=n(N,"LI",{});var l8e=s(D1);Cce=n(l8e,"STRONG",{});var Xtt=s(Cce);Xxo=r(Xtt,"led"),Xtt.forEach(t),zxo=r(l8e," \u2014 "),wD=n(l8e,"A",{href:!0});var ztt=s(wD);Qxo=r(ztt,"LEDForSequenceClassification"),ztt.forEach(t),Wxo=r(l8e," (LED model)"),l8e.forEach(t),Hxo=i(N),G1=n(N,"LI",{});var i8e=s(G1);wce=n(i8e,"STRONG",{});var Qtt=s(wce);Uxo=r(Qtt,"longformer"),Qtt.forEach(t),Jxo=r(i8e," \u2014 "),AD=n(i8e,"A",{href:!0});var Wtt=s(AD);Yxo=r(Wtt,"LongformerForSequenceClassification"),Wtt.forEach(t),Kxo=r(i8e," (Longformer model)"),i8e.forEach(t),Zxo=i(N),O1=n(N,"LI",{});var d8e=s(O1);Ace=n(d8e,"STRONG",{});var Htt=s(Ace);e7o=r(Htt,"mbart"),Htt.forEach(t),o7o=r(d8e," \u2014 "),yD=n(d8e,"A",{href:!0});var Utt=s(yD);r7o=r(Utt,"MBartForSequenceClassification"),Utt.forEach(t),t7o=r(d8e," (mBART model)"),d8e.forEach(t),a7o=i(N),V1=n(N,"LI",{});var c8e=s(V1);yce=n(c8e,"STRONG",{});var Jtt=s(yce);n7o=r(Jtt,"megatron-bert"),Jtt.forEach(t),s7o=r(c8e," \u2014 "),LD=n(c8e,"A",{href:!0});var Ytt=s(LD);l7o=r(Ytt,"MegatronBertForSequenceClassification"),Ytt.forEach(t),i7o=r(c8e," (MegatronBert model)"),c8e.forEach(t),d7o=i(N),X1=n(N,"LI",{});var f8e=s(X1);Lce=n(f8e,"STRONG",{});var Ktt=s(Lce);c7o=r(Ktt,"mobilebert"),Ktt.forEach(t),f7o=r(f8e," \u2014 "),xD=n(f8e,"A",{href:!0});var Ztt=s(xD);m7o=r(Ztt,"MobileBertForSequenceClassification"),Ztt.forEach(t),g7o=r(f8e," (MobileBERT model)"),f8e.forEach(t),h7o=i(N),z1=n(N,"LI",{});var m8e=s(z1);xce=n(m8e,"STRONG",{});var eat=s(xce);p7o=r(eat,"mpnet"),eat.forEach(t),u7o=r(m8e," \u2014 "),$D=n(m8e,"A",{href:!0});var oat=s($D);_7o=r(oat,"MPNetForSequenceClassification"),oat.forEach(t),b7o=r(m8e," (MPNet model)"),m8e.forEach(t),v7o=i(N),Q1=n(N,"LI",{});var g8e=s(Q1);$ce=n(g8e,"STRONG",{});var rat=s($ce);F7o=r(rat,"nystromformer"),rat.forEach(t),T7o=r(g8e," \u2014 "),kD=n(g8e,"A",{href:!0});var tat=s(kD);M7o=r(tat,"NystromformerForSequenceClassification"),tat.forEach(t),E7o=r(g8e," (Nystromformer model)"),g8e.forEach(t),C7o=i(N),W1=n(N,"LI",{});var h8e=s(W1);kce=n(h8e,"STRONG",{});var aat=s(kce);w7o=r(aat,"openai-gpt"),aat.forEach(t),A7o=r(h8e," \u2014 "),SD=n(h8e,"A",{href:!0});var nat=s(SD);y7o=r(nat,"OpenAIGPTForSequenceClassification"),nat.forEach(t),L7o=r(h8e," (OpenAI GPT model)"),h8e.forEach(t),x7o=i(N),H1=n(N,"LI",{});var p8e=s(H1);Sce=n(p8e,"STRONG",{});var sat=s(Sce);$7o=r(sat,"perceiver"),sat.forEach(t),k7o=r(p8e," \u2014 "),RD=n(p8e,"A",{href:!0});var lat=s(RD);S7o=r(lat,"PerceiverForSequenceClassification"),lat.forEach(t),R7o=r(p8e," (Perceiver model)"),p8e.forEach(t),B7o=i(N),U1=n(N,"LI",{});var u8e=s(U1);Rce=n(u8e,"STRONG",{});var iat=s(Rce);P7o=r(iat,"plbart"),iat.forEach(t),I7o=r(u8e," \u2014 "),BD=n(u8e,"A",{href:!0});var dat=s(BD);q7o=r(dat,"PLBartForSequenceClassification"),dat.forEach(t),N7o=r(u8e," (PLBart model)"),u8e.forEach(t),j7o=i(N),J1=n(N,"LI",{});var _8e=s(J1);Bce=n(_8e,"STRONG",{});var cat=s(Bce);D7o=r(cat,"qdqbert"),cat.forEach(t),G7o=r(_8e," \u2014 "),PD=n(_8e,"A",{href:!0});var fat=s(PD);O7o=r(fat,"QDQBertForSequenceClassification"),fat.forEach(t),V7o=r(_8e," (QDQBert model)"),_8e.forEach(t),X7o=i(N),Y1=n(N,"LI",{});var b8e=s(Y1);Pce=n(b8e,"STRONG",{});var mat=s(Pce);z7o=r(mat,"reformer"),mat.forEach(t),Q7o=r(b8e," \u2014 "),ID=n(b8e,"A",{href:!0});var gat=s(ID);W7o=r(gat,"ReformerForSequenceClassification"),gat.forEach(t),H7o=r(b8e," (Reformer model)"),b8e.forEach(t),U7o=i(N),K1=n(N,"LI",{});var v8e=s(K1);Ice=n(v8e,"STRONG",{});var hat=s(Ice);J7o=r(hat,"rembert"),hat.forEach(t),Y7o=r(v8e," \u2014 "),qD=n(v8e,"A",{href:!0});var pat=s(qD);K7o=r(pat,"RemBertForSequenceClassification"),pat.forEach(t),Z7o=r(v8e," (RemBERT model)"),v8e.forEach(t),e9o=i(N),Z1=n(N,"LI",{});var F8e=s(Z1);qce=n(F8e,"STRONG",{});var uat=s(qce);o9o=r(uat,"roberta"),uat.forEach(t),r9o=r(F8e," \u2014 "),ND=n(F8e,"A",{href:!0});var _at=s(ND);t9o=r(_at,"RobertaForSequenceClassification"),_at.forEach(t),a9o=r(F8e," (RoBERTa model)"),F8e.forEach(t),n9o=i(N),eb=n(N,"LI",{});var T8e=s(eb);Nce=n(T8e,"STRONG",{});var bat=s(Nce);s9o=r(bat,"roformer"),bat.forEach(t),l9o=r(T8e," \u2014 "),jD=n(T8e,"A",{href:!0});var vat=s(jD);i9o=r(vat,"RoFormerForSequenceClassification"),vat.forEach(t),d9o=r(T8e," (RoFormer model)"),T8e.forEach(t),c9o=i(N),ob=n(N,"LI",{});var M8e=s(ob);jce=n(M8e,"STRONG",{});var Fat=s(jce);f9o=r(Fat,"squeezebert"),Fat.forEach(t),m9o=r(M8e," \u2014 "),DD=n(M8e,"A",{href:!0});var Tat=s(DD);g9o=r(Tat,"SqueezeBertForSequenceClassification"),Tat.forEach(t),h9o=r(M8e," (SqueezeBERT model)"),M8e.forEach(t),p9o=i(N),rb=n(N,"LI",{});var E8e=s(rb);Dce=n(E8e,"STRONG",{});var Mat=s(Dce);u9o=r(Mat,"tapas"),Mat.forEach(t),_9o=r(E8e," \u2014 "),GD=n(E8e,"A",{href:!0});var Eat=s(GD);b9o=r(Eat,"TapasForSequenceClassification"),Eat.forEach(t),v9o=r(E8e," (TAPAS model)"),E8e.forEach(t),F9o=i(N),tb=n(N,"LI",{});var C8e=s(tb);Gce=n(C8e,"STRONG",{});var Cat=s(Gce);T9o=r(Cat,"tapex"),Cat.forEach(t),M9o=r(C8e," \u2014 "),OD=n(C8e,"A",{href:!0});var wat=s(OD);E9o=r(wat,"BartForSequenceClassification"),wat.forEach(t),C9o=r(C8e," (TAPEX model)"),C8e.forEach(t),w9o=i(N),ab=n(N,"LI",{});var w8e=s(ab);Oce=n(w8e,"STRONG",{});var Aat=s(Oce);A9o=r(Aat,"transfo-xl"),Aat.forEach(t),y9o=r(w8e," \u2014 "),VD=n(w8e,"A",{href:!0});var yat=s(VD);L9o=r(yat,"TransfoXLForSequenceClassification"),yat.forEach(t),x9o=r(w8e," (Transformer-XL model)"),w8e.forEach(t),$9o=i(N),nb=n(N,"LI",{});var A8e=s(nb);Vce=n(A8e,"STRONG",{});var Lat=s(Vce);k9o=r(Lat,"xlm"),Lat.forEach(t),S9o=r(A8e," \u2014 "),XD=n(A8e,"A",{href:!0});var xat=s(XD);R9o=r(xat,"XLMForSequenceClassification"),xat.forEach(t),B9o=r(A8e," (XLM model)"),A8e.forEach(t),P9o=i(N),sb=n(N,"LI",{});var y8e=s(sb);Xce=n(y8e,"STRONG",{});var $at=s(Xce);I9o=r($at,"xlm-roberta"),$at.forEach(t),q9o=r(y8e," \u2014 "),zD=n(y8e,"A",{href:!0});var kat=s(zD);N9o=r(kat,"XLMRobertaForSequenceClassification"),kat.forEach(t),j9o=r(y8e," (XLM-RoBERTa model)"),y8e.forEach(t),D9o=i(N),lb=n(N,"LI",{});var L8e=s(lb);zce=n(L8e,"STRONG",{});var Sat=s(zce);G9o=r(Sat,"xlm-roberta-xl"),Sat.forEach(t),O9o=r(L8e," \u2014 "),QD=n(L8e,"A",{href:!0});var Rat=s(QD);V9o=r(Rat,"XLMRobertaXLForSequenceClassification"),Rat.forEach(t),X9o=r(L8e," (XLM-RoBERTa-XL model)"),L8e.forEach(t),z9o=i(N),ib=n(N,"LI",{});var x8e=s(ib);Qce=n(x8e,"STRONG",{});var Bat=s(Qce);Q9o=r(Bat,"xlnet"),Bat.forEach(t),W9o=r(x8e," \u2014 "),WD=n(x8e,"A",{href:!0});var Pat=s(WD);H9o=r(Pat,"XLNetForSequenceClassification"),Pat.forEach(t),U9o=r(x8e," (XLNet model)"),x8e.forEach(t),J9o=i(N),db=n(N,"LI",{});var $8e=s(db);Wce=n($8e,"STRONG",{});var Iat=s(Wce);Y9o=r(Iat,"yoso"),Iat.forEach(t),K9o=r($8e," \u2014 "),HD=n($8e,"A",{href:!0});var qat=s(HD);Z9o=r(qat,"YosoForSequenceClassification"),qat.forEach(t),e$o=r($8e," (YOSO model)"),$8e.forEach(t),N.forEach(t),o$o=i(aa),cb=n(aa,"P",{});var k8e=s(cb);r$o=r(k8e,"The model is set in evaluation mode by default using "),Hce=n(k8e,"CODE",{});var Nat=s(Hce);t$o=r(Nat,"model.eval()"),Nat.forEach(t),a$o=r(k8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uce=n(k8e,"CODE",{});var jat=s(Uce);n$o=r(jat,"model.train()"),jat.forEach(t),k8e.forEach(t),s$o=i(aa),T(fb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),HPe=i(f),ji=n(f,"H2",{class:!0});var Kqe=s(ji);mb=n(Kqe,"A",{id:!0,class:!0,href:!0});var Dat=s(mb);Jce=n(Dat,"SPAN",{});var Gat=s(Jce);T(Hy.$$.fragment,Gat),Gat.forEach(t),Dat.forEach(t),l$o=i(Kqe),Yce=n(Kqe,"SPAN",{});var Oat=s(Yce);i$o=r(Oat,"AutoModelForMultipleChoice"),Oat.forEach(t),Kqe.forEach(t),UPe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(Uy.$$.fragment,zs),d$o=i(zs),Di=n(zs,"P",{});var cK=s(Di);c$o=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UD=n(cK,"A",{href:!0});var Vat=s(UD);f$o=r(Vat,"from_pretrained()"),Vat.forEach(t),m$o=r(cK," class method or the "),JD=n(cK,"A",{href:!0});var Xat=s(JD);g$o=r(Xat,"from_config()"),Xat.forEach(t),h$o=r(cK,` class
method.`),cK.forEach(t),p$o=i(zs),Jy=n(zs,"P",{});var Zqe=s(Jy);u$o=r(Zqe,"This class cannot be instantiated directly using "),Kce=n(Zqe,"CODE",{});var zat=s(Kce);_$o=r(zat,"__init__()"),zat.forEach(t),b$o=r(Zqe," (throws an error)."),Zqe.forEach(t),v$o=i(zs),lt=n(zs,"DIV",{class:!0});var lA=s(lt);T(Yy.$$.fragment,lA),F$o=i(lA),Zce=n(lA,"P",{});var Qat=s(Zce);T$o=r(Qat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qat.forEach(t),M$o=i(lA),Gi=n(lA,"P",{});var fK=s(Gi);E$o=r(fK,`Note:
Loading a model from its configuration file does `),efe=n(fK,"STRONG",{});var Wat=s(efe);C$o=r(Wat,"not"),Wat.forEach(t),w$o=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YD=n(fK,"A",{href:!0});var Hat=s(YD);A$o=r(Hat,"from_pretrained()"),Hat.forEach(t),y$o=r(fK," to load the model weights."),fK.forEach(t),L$o=i(lA),T(gb.$$.fragment,lA),lA.forEach(t),x$o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Ky.$$.fragment,na),$$o=i(na),ofe=n(na,"P",{});var Uat=s(ofe);k$o=r(Uat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Uat.forEach(t),S$o=i(na),Sa=n(na,"P",{});var iA=s(Sa);R$o=r(iA,"The model class to instantiate is selected based on the "),rfe=n(iA,"CODE",{});var Jat=s(rfe);B$o=r(Jat,"model_type"),Jat.forEach(t),P$o=r(iA,` property of the config object (either
passed as an argument or loaded from `),tfe=n(iA,"CODE",{});var Yat=s(tfe);I$o=r(Yat,"pretrained_model_name_or_path"),Yat.forEach(t),q$o=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(iA,"CODE",{});var Kat=s(afe);N$o=r(Kat,"pretrained_model_name_or_path"),Kat.forEach(t),j$o=r(iA,":"),iA.forEach(t),D$o=i(na),Y=n(na,"UL",{});var K=s(Y);hb=n(K,"LI",{});var S8e=s(hb);nfe=n(S8e,"STRONG",{});var Zat=s(nfe);G$o=r(Zat,"albert"),Zat.forEach(t),O$o=r(S8e," \u2014 "),KD=n(S8e,"A",{href:!0});var ent=s(KD);V$o=r(ent,"AlbertForMultipleChoice"),ent.forEach(t),X$o=r(S8e," (ALBERT model)"),S8e.forEach(t),z$o=i(K),pb=n(K,"LI",{});var R8e=s(pb);sfe=n(R8e,"STRONG",{});var ont=s(sfe);Q$o=r(ont,"bert"),ont.forEach(t),W$o=r(R8e," \u2014 "),ZD=n(R8e,"A",{href:!0});var rnt=s(ZD);H$o=r(rnt,"BertForMultipleChoice"),rnt.forEach(t),U$o=r(R8e," (BERT model)"),R8e.forEach(t),J$o=i(K),ub=n(K,"LI",{});var B8e=s(ub);lfe=n(B8e,"STRONG",{});var tnt=s(lfe);Y$o=r(tnt,"big_bird"),tnt.forEach(t),K$o=r(B8e," \u2014 "),eG=n(B8e,"A",{href:!0});var ant=s(eG);Z$o=r(ant,"BigBirdForMultipleChoice"),ant.forEach(t),eko=r(B8e," (BigBird model)"),B8e.forEach(t),oko=i(K),_b=n(K,"LI",{});var P8e=s(_b);ife=n(P8e,"STRONG",{});var nnt=s(ife);rko=r(nnt,"camembert"),nnt.forEach(t),tko=r(P8e," \u2014 "),oG=n(P8e,"A",{href:!0});var snt=s(oG);ako=r(snt,"CamembertForMultipleChoice"),snt.forEach(t),nko=r(P8e," (CamemBERT model)"),P8e.forEach(t),sko=i(K),bb=n(K,"LI",{});var I8e=s(bb);dfe=n(I8e,"STRONG",{});var lnt=s(dfe);lko=r(lnt,"canine"),lnt.forEach(t),iko=r(I8e," \u2014 "),rG=n(I8e,"A",{href:!0});var int=s(rG);dko=r(int,"CanineForMultipleChoice"),int.forEach(t),cko=r(I8e," (Canine model)"),I8e.forEach(t),fko=i(K),vb=n(K,"LI",{});var q8e=s(vb);cfe=n(q8e,"STRONG",{});var dnt=s(cfe);mko=r(dnt,"convbert"),dnt.forEach(t),gko=r(q8e," \u2014 "),tG=n(q8e,"A",{href:!0});var cnt=s(tG);hko=r(cnt,"ConvBertForMultipleChoice"),cnt.forEach(t),pko=r(q8e," (ConvBERT model)"),q8e.forEach(t),uko=i(K),Fb=n(K,"LI",{});var N8e=s(Fb);ffe=n(N8e,"STRONG",{});var fnt=s(ffe);_ko=r(fnt,"data2vec-text"),fnt.forEach(t),bko=r(N8e," \u2014 "),aG=n(N8e,"A",{href:!0});var mnt=s(aG);vko=r(mnt,"Data2VecTextForMultipleChoice"),mnt.forEach(t),Fko=r(N8e," (Data2VecText model)"),N8e.forEach(t),Tko=i(K),Tb=n(K,"LI",{});var j8e=s(Tb);mfe=n(j8e,"STRONG",{});var gnt=s(mfe);Mko=r(gnt,"distilbert"),gnt.forEach(t),Eko=r(j8e," \u2014 "),nG=n(j8e,"A",{href:!0});var hnt=s(nG);Cko=r(hnt,"DistilBertForMultipleChoice"),hnt.forEach(t),wko=r(j8e," (DistilBERT model)"),j8e.forEach(t),Ako=i(K),Mb=n(K,"LI",{});var D8e=s(Mb);gfe=n(D8e,"STRONG",{});var pnt=s(gfe);yko=r(pnt,"electra"),pnt.forEach(t),Lko=r(D8e," \u2014 "),sG=n(D8e,"A",{href:!0});var unt=s(sG);xko=r(unt,"ElectraForMultipleChoice"),unt.forEach(t),$ko=r(D8e," (ELECTRA model)"),D8e.forEach(t),kko=i(K),Eb=n(K,"LI",{});var G8e=s(Eb);hfe=n(G8e,"STRONG",{});var _nt=s(hfe);Sko=r(_nt,"flaubert"),_nt.forEach(t),Rko=r(G8e," \u2014 "),lG=n(G8e,"A",{href:!0});var bnt=s(lG);Bko=r(bnt,"FlaubertForMultipleChoice"),bnt.forEach(t),Pko=r(G8e," (FlauBERT model)"),G8e.forEach(t),Iko=i(K),Cb=n(K,"LI",{});var O8e=s(Cb);pfe=n(O8e,"STRONG",{});var vnt=s(pfe);qko=r(vnt,"fnet"),vnt.forEach(t),Nko=r(O8e," \u2014 "),iG=n(O8e,"A",{href:!0});var Fnt=s(iG);jko=r(Fnt,"FNetForMultipleChoice"),Fnt.forEach(t),Dko=r(O8e," (FNet model)"),O8e.forEach(t),Gko=i(K),wb=n(K,"LI",{});var V8e=s(wb);ufe=n(V8e,"STRONG",{});var Tnt=s(ufe);Oko=r(Tnt,"funnel"),Tnt.forEach(t),Vko=r(V8e," \u2014 "),dG=n(V8e,"A",{href:!0});var Mnt=s(dG);Xko=r(Mnt,"FunnelForMultipleChoice"),Mnt.forEach(t),zko=r(V8e," (Funnel Transformer model)"),V8e.forEach(t),Qko=i(K),Ab=n(K,"LI",{});var X8e=s(Ab);_fe=n(X8e,"STRONG",{});var Ent=s(_fe);Wko=r(Ent,"ibert"),Ent.forEach(t),Hko=r(X8e," \u2014 "),cG=n(X8e,"A",{href:!0});var Cnt=s(cG);Uko=r(Cnt,"IBertForMultipleChoice"),Cnt.forEach(t),Jko=r(X8e," (I-BERT model)"),X8e.forEach(t),Yko=i(K),yb=n(K,"LI",{});var z8e=s(yb);bfe=n(z8e,"STRONG",{});var wnt=s(bfe);Kko=r(wnt,"longformer"),wnt.forEach(t),Zko=r(z8e," \u2014 "),fG=n(z8e,"A",{href:!0});var Ant=s(fG);eSo=r(Ant,"LongformerForMultipleChoice"),Ant.forEach(t),oSo=r(z8e," (Longformer model)"),z8e.forEach(t),rSo=i(K),Lb=n(K,"LI",{});var Q8e=s(Lb);vfe=n(Q8e,"STRONG",{});var ynt=s(vfe);tSo=r(ynt,"megatron-bert"),ynt.forEach(t),aSo=r(Q8e," \u2014 "),mG=n(Q8e,"A",{href:!0});var Lnt=s(mG);nSo=r(Lnt,"MegatronBertForMultipleChoice"),Lnt.forEach(t),sSo=r(Q8e," (MegatronBert model)"),Q8e.forEach(t),lSo=i(K),xb=n(K,"LI",{});var W8e=s(xb);Ffe=n(W8e,"STRONG",{});var xnt=s(Ffe);iSo=r(xnt,"mobilebert"),xnt.forEach(t),dSo=r(W8e," \u2014 "),gG=n(W8e,"A",{href:!0});var $nt=s(gG);cSo=r($nt,"MobileBertForMultipleChoice"),$nt.forEach(t),fSo=r(W8e," (MobileBERT model)"),W8e.forEach(t),mSo=i(K),$b=n(K,"LI",{});var H8e=s($b);Tfe=n(H8e,"STRONG",{});var knt=s(Tfe);gSo=r(knt,"mpnet"),knt.forEach(t),hSo=r(H8e," \u2014 "),hG=n(H8e,"A",{href:!0});var Snt=s(hG);pSo=r(Snt,"MPNetForMultipleChoice"),Snt.forEach(t),uSo=r(H8e," (MPNet model)"),H8e.forEach(t),_So=i(K),kb=n(K,"LI",{});var U8e=s(kb);Mfe=n(U8e,"STRONG",{});var Rnt=s(Mfe);bSo=r(Rnt,"nystromformer"),Rnt.forEach(t),vSo=r(U8e," \u2014 "),pG=n(U8e,"A",{href:!0});var Bnt=s(pG);FSo=r(Bnt,"NystromformerForMultipleChoice"),Bnt.forEach(t),TSo=r(U8e," (Nystromformer model)"),U8e.forEach(t),MSo=i(K),Sb=n(K,"LI",{});var J8e=s(Sb);Efe=n(J8e,"STRONG",{});var Pnt=s(Efe);ESo=r(Pnt,"qdqbert"),Pnt.forEach(t),CSo=r(J8e," \u2014 "),uG=n(J8e,"A",{href:!0});var Int=s(uG);wSo=r(Int,"QDQBertForMultipleChoice"),Int.forEach(t),ASo=r(J8e," (QDQBert model)"),J8e.forEach(t),ySo=i(K),Rb=n(K,"LI",{});var Y8e=s(Rb);Cfe=n(Y8e,"STRONG",{});var qnt=s(Cfe);LSo=r(qnt,"rembert"),qnt.forEach(t),xSo=r(Y8e," \u2014 "),_G=n(Y8e,"A",{href:!0});var Nnt=s(_G);$So=r(Nnt,"RemBertForMultipleChoice"),Nnt.forEach(t),kSo=r(Y8e," (RemBERT model)"),Y8e.forEach(t),SSo=i(K),Bb=n(K,"LI",{});var K8e=s(Bb);wfe=n(K8e,"STRONG",{});var jnt=s(wfe);RSo=r(jnt,"roberta"),jnt.forEach(t),BSo=r(K8e," \u2014 "),bG=n(K8e,"A",{href:!0});var Dnt=s(bG);PSo=r(Dnt,"RobertaForMultipleChoice"),Dnt.forEach(t),ISo=r(K8e," (RoBERTa model)"),K8e.forEach(t),qSo=i(K),Pb=n(K,"LI",{});var Z8e=s(Pb);Afe=n(Z8e,"STRONG",{});var Gnt=s(Afe);NSo=r(Gnt,"roformer"),Gnt.forEach(t),jSo=r(Z8e," \u2014 "),vG=n(Z8e,"A",{href:!0});var Ont=s(vG);DSo=r(Ont,"RoFormerForMultipleChoice"),Ont.forEach(t),GSo=r(Z8e," (RoFormer model)"),Z8e.forEach(t),OSo=i(K),Ib=n(K,"LI",{});var exe=s(Ib);yfe=n(exe,"STRONG",{});var Vnt=s(yfe);VSo=r(Vnt,"squeezebert"),Vnt.forEach(t),XSo=r(exe," \u2014 "),FG=n(exe,"A",{href:!0});var Xnt=s(FG);zSo=r(Xnt,"SqueezeBertForMultipleChoice"),Xnt.forEach(t),QSo=r(exe," (SqueezeBERT model)"),exe.forEach(t),WSo=i(K),qb=n(K,"LI",{});var oxe=s(qb);Lfe=n(oxe,"STRONG",{});var znt=s(Lfe);HSo=r(znt,"xlm"),znt.forEach(t),USo=r(oxe," \u2014 "),TG=n(oxe,"A",{href:!0});var Qnt=s(TG);JSo=r(Qnt,"XLMForMultipleChoice"),Qnt.forEach(t),YSo=r(oxe," (XLM model)"),oxe.forEach(t),KSo=i(K),Nb=n(K,"LI",{});var rxe=s(Nb);xfe=n(rxe,"STRONG",{});var Wnt=s(xfe);ZSo=r(Wnt,"xlm-roberta"),Wnt.forEach(t),eRo=r(rxe," \u2014 "),MG=n(rxe,"A",{href:!0});var Hnt=s(MG);oRo=r(Hnt,"XLMRobertaForMultipleChoice"),Hnt.forEach(t),rRo=r(rxe," (XLM-RoBERTa model)"),rxe.forEach(t),tRo=i(K),jb=n(K,"LI",{});var txe=s(jb);$fe=n(txe,"STRONG",{});var Unt=s($fe);aRo=r(Unt,"xlm-roberta-xl"),Unt.forEach(t),nRo=r(txe," \u2014 "),EG=n(txe,"A",{href:!0});var Jnt=s(EG);sRo=r(Jnt,"XLMRobertaXLForMultipleChoice"),Jnt.forEach(t),lRo=r(txe," (XLM-RoBERTa-XL model)"),txe.forEach(t),iRo=i(K),Db=n(K,"LI",{});var axe=s(Db);kfe=n(axe,"STRONG",{});var Ynt=s(kfe);dRo=r(Ynt,"xlnet"),Ynt.forEach(t),cRo=r(axe," \u2014 "),CG=n(axe,"A",{href:!0});var Knt=s(CG);fRo=r(Knt,"XLNetForMultipleChoice"),Knt.forEach(t),mRo=r(axe," (XLNet model)"),axe.forEach(t),gRo=i(K),Gb=n(K,"LI",{});var nxe=s(Gb);Sfe=n(nxe,"STRONG",{});var Znt=s(Sfe);hRo=r(Znt,"yoso"),Znt.forEach(t),pRo=r(nxe," \u2014 "),wG=n(nxe,"A",{href:!0});var est=s(wG);uRo=r(est,"YosoForMultipleChoice"),est.forEach(t),_Ro=r(nxe," (YOSO model)"),nxe.forEach(t),K.forEach(t),bRo=i(na),Ob=n(na,"P",{});var sxe=s(Ob);vRo=r(sxe,"The model is set in evaluation mode by default using "),Rfe=n(sxe,"CODE",{});var ost=s(Rfe);FRo=r(ost,"model.eval()"),ost.forEach(t),TRo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=n(sxe,"CODE",{});var rst=s(Bfe);MRo=r(rst,"model.train()"),rst.forEach(t),sxe.forEach(t),ERo=i(na),T(Vb.$$.fragment,na),na.forEach(t),zs.forEach(t),JPe=i(f),Oi=n(f,"H2",{class:!0});var eNe=s(Oi);Xb=n(eNe,"A",{id:!0,class:!0,href:!0});var tst=s(Xb);Pfe=n(tst,"SPAN",{});var ast=s(Pfe);T(Zy.$$.fragment,ast),ast.forEach(t),tst.forEach(t),CRo=i(eNe),Ife=n(eNe,"SPAN",{});var nst=s(Ife);wRo=r(nst,"AutoModelForNextSentencePrediction"),nst.forEach(t),eNe.forEach(t),YPe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(eL.$$.fragment,Qs),ARo=i(Qs),Vi=n(Qs,"P",{});var mK=s(Vi);yRo=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),AG=n(mK,"A",{href:!0});var sst=s(AG);LRo=r(sst,"from_pretrained()"),sst.forEach(t),xRo=r(mK," class method or the "),yG=n(mK,"A",{href:!0});var lst=s(yG);$Ro=r(lst,"from_config()"),lst.forEach(t),kRo=r(mK,` class
method.`),mK.forEach(t),SRo=i(Qs),oL=n(Qs,"P",{});var oNe=s(oL);RRo=r(oNe,"This class cannot be instantiated directly using "),qfe=n(oNe,"CODE",{});var ist=s(qfe);BRo=r(ist,"__init__()"),ist.forEach(t),PRo=r(oNe," (throws an error)."),oNe.forEach(t),IRo=i(Qs),it=n(Qs,"DIV",{class:!0});var dA=s(it);T(rL.$$.fragment,dA),qRo=i(dA),Nfe=n(dA,"P",{});var dst=s(Nfe);NRo=r(dst,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dst.forEach(t),jRo=i(dA),Xi=n(dA,"P",{});var gK=s(Xi);DRo=r(gK,`Note:
Loading a model from its configuration file does `),jfe=n(gK,"STRONG",{});var cst=s(jfe);GRo=r(cst,"not"),cst.forEach(t),ORo=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(gK,"A",{href:!0});var fst=s(LG);VRo=r(fst,"from_pretrained()"),fst.forEach(t),XRo=r(gK," to load the model weights."),gK.forEach(t),zRo=i(dA),T(zb.$$.fragment,dA),dA.forEach(t),QRo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(tL.$$.fragment,sa),WRo=i(sa),Dfe=n(sa,"P",{});var mst=s(Dfe);HRo=r(mst,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mst.forEach(t),URo=i(sa),Ra=n(sa,"P",{});var cA=s(Ra);JRo=r(cA,"The model class to instantiate is selected based on the "),Gfe=n(cA,"CODE",{});var gst=s(Gfe);YRo=r(gst,"model_type"),gst.forEach(t),KRo=r(cA,` property of the config object (either
passed as an argument or loaded from `),Ofe=n(cA,"CODE",{});var hst=s(Ofe);ZRo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),eBo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=n(cA,"CODE",{});var pst=s(Vfe);oBo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),rBo=r(cA,":"),cA.forEach(t),tBo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Qb=n(Ws,"LI",{});var lxe=s(Qb);Xfe=n(lxe,"STRONG",{});var ust=s(Xfe);aBo=r(ust,"bert"),ust.forEach(t),nBo=r(lxe," \u2014 "),xG=n(lxe,"A",{href:!0});var _st=s(xG);sBo=r(_st,"BertForNextSentencePrediction"),_st.forEach(t),lBo=r(lxe," (BERT model)"),lxe.forEach(t),iBo=i(Ws),Wb=n(Ws,"LI",{});var ixe=s(Wb);zfe=n(ixe,"STRONG",{});var bst=s(zfe);dBo=r(bst,"fnet"),bst.forEach(t),cBo=r(ixe," \u2014 "),$G=n(ixe,"A",{href:!0});var vst=s($G);fBo=r(vst,"FNetForNextSentencePrediction"),vst.forEach(t),mBo=r(ixe," (FNet model)"),ixe.forEach(t),gBo=i(Ws),Hb=n(Ws,"LI",{});var dxe=s(Hb);Qfe=n(dxe,"STRONG",{});var Fst=s(Qfe);hBo=r(Fst,"megatron-bert"),Fst.forEach(t),pBo=r(dxe," \u2014 "),kG=n(dxe,"A",{href:!0});var Tst=s(kG);uBo=r(Tst,"MegatronBertForNextSentencePrediction"),Tst.forEach(t),_Bo=r(dxe," (MegatronBert model)"),dxe.forEach(t),bBo=i(Ws),Ub=n(Ws,"LI",{});var cxe=s(Ub);Wfe=n(cxe,"STRONG",{});var Mst=s(Wfe);vBo=r(Mst,"mobilebert"),Mst.forEach(t),FBo=r(cxe," \u2014 "),SG=n(cxe,"A",{href:!0});var Est=s(SG);TBo=r(Est,"MobileBertForNextSentencePrediction"),Est.forEach(t),MBo=r(cxe," (MobileBERT model)"),cxe.forEach(t),EBo=i(Ws),Jb=n(Ws,"LI",{});var fxe=s(Jb);Hfe=n(fxe,"STRONG",{});var Cst=s(Hfe);CBo=r(Cst,"qdqbert"),Cst.forEach(t),wBo=r(fxe," \u2014 "),RG=n(fxe,"A",{href:!0});var wst=s(RG);ABo=r(wst,"QDQBertForNextSentencePrediction"),wst.forEach(t),yBo=r(fxe," (QDQBert model)"),fxe.forEach(t),Ws.forEach(t),LBo=i(sa),Yb=n(sa,"P",{});var mxe=s(Yb);xBo=r(mxe,"The model is set in evaluation mode by default using "),Ufe=n(mxe,"CODE",{});var Ast=s(Ufe);$Bo=r(Ast,"model.eval()"),Ast.forEach(t),kBo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(mxe,"CODE",{});var yst=s(Jfe);SBo=r(yst,"model.train()"),yst.forEach(t),mxe.forEach(t),RBo=i(sa),T(Kb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),KPe=i(f),zi=n(f,"H2",{class:!0});var rNe=s(zi);Zb=n(rNe,"A",{id:!0,class:!0,href:!0});var Lst=s(Zb);Yfe=n(Lst,"SPAN",{});var xst=s(Yfe);T(aL.$$.fragment,xst),xst.forEach(t),Lst.forEach(t),BBo=i(rNe),Kfe=n(rNe,"SPAN",{});var $st=s(Kfe);PBo=r($st,"AutoModelForTokenClassification"),$st.forEach(t),rNe.forEach(t),ZPe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(nL.$$.fragment,Hs),IBo=i(Hs),Qi=n(Hs,"P",{});var hK=s(Qi);qBo=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),BG=n(hK,"A",{href:!0});var kst=s(BG);NBo=r(kst,"from_pretrained()"),kst.forEach(t),jBo=r(hK," class method or the "),PG=n(hK,"A",{href:!0});var Sst=s(PG);DBo=r(Sst,"from_config()"),Sst.forEach(t),GBo=r(hK,` class
method.`),hK.forEach(t),OBo=i(Hs),sL=n(Hs,"P",{});var tNe=s(sL);VBo=r(tNe,"This class cannot be instantiated directly using "),Zfe=n(tNe,"CODE",{});var Rst=s(Zfe);XBo=r(Rst,"__init__()"),Rst.forEach(t),zBo=r(tNe," (throws an error)."),tNe.forEach(t),QBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var fA=s(dt);T(lL.$$.fragment,fA),WBo=i(fA),eme=n(fA,"P",{});var Bst=s(eme);HBo=r(Bst,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bst.forEach(t),UBo=i(fA),Wi=n(fA,"P",{});var pK=s(Wi);JBo=r(pK,`Note:
Loading a model from its configuration file does `),ome=n(pK,"STRONG",{});var Pst=s(ome);YBo=r(Pst,"not"),Pst.forEach(t),KBo=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(pK,"A",{href:!0});var Ist=s(IG);ZBo=r(Ist,"from_pretrained()"),Ist.forEach(t),ePo=r(pK," to load the model weights."),pK.forEach(t),oPo=i(fA),T(e4.$$.fragment,fA),fA.forEach(t),rPo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(iL.$$.fragment,la),tPo=i(la),rme=n(la,"P",{});var qst=s(rme);aPo=r(qst,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qst.forEach(t),nPo=i(la),Ba=n(la,"P",{});var mA=s(Ba);sPo=r(mA,"The model class to instantiate is selected based on the "),tme=n(mA,"CODE",{});var Nst=s(tme);lPo=r(Nst,"model_type"),Nst.forEach(t),iPo=r(mA,` property of the config object (either
passed as an argument or loaded from `),ame=n(mA,"CODE",{});var jst=s(ame);dPo=r(jst,"pretrained_model_name_or_path"),jst.forEach(t),cPo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nme=n(mA,"CODE",{});var Dst=s(nme);fPo=r(Dst,"pretrained_model_name_or_path"),Dst.forEach(t),mPo=r(mA,":"),mA.forEach(t),gPo=i(la),U=n(la,"UL",{});var J=s(U);o4=n(J,"LI",{});var gxe=s(o4);sme=n(gxe,"STRONG",{});var Gst=s(sme);hPo=r(Gst,"albert"),Gst.forEach(t),pPo=r(gxe," \u2014 "),qG=n(gxe,"A",{href:!0});var Ost=s(qG);uPo=r(Ost,"AlbertForTokenClassification"),Ost.forEach(t),_Po=r(gxe," (ALBERT model)"),gxe.forEach(t),bPo=i(J),r4=n(J,"LI",{});var hxe=s(r4);lme=n(hxe,"STRONG",{});var Vst=s(lme);vPo=r(Vst,"bert"),Vst.forEach(t),FPo=r(hxe," \u2014 "),NG=n(hxe,"A",{href:!0});var Xst=s(NG);TPo=r(Xst,"BertForTokenClassification"),Xst.forEach(t),MPo=r(hxe," (BERT model)"),hxe.forEach(t),EPo=i(J),t4=n(J,"LI",{});var pxe=s(t4);ime=n(pxe,"STRONG",{});var zst=s(ime);CPo=r(zst,"big_bird"),zst.forEach(t),wPo=r(pxe," \u2014 "),jG=n(pxe,"A",{href:!0});var Qst=s(jG);APo=r(Qst,"BigBirdForTokenClassification"),Qst.forEach(t),yPo=r(pxe," (BigBird model)"),pxe.forEach(t),LPo=i(J),a4=n(J,"LI",{});var uxe=s(a4);dme=n(uxe,"STRONG",{});var Wst=s(dme);xPo=r(Wst,"camembert"),Wst.forEach(t),$Po=r(uxe," \u2014 "),DG=n(uxe,"A",{href:!0});var Hst=s(DG);kPo=r(Hst,"CamembertForTokenClassification"),Hst.forEach(t),SPo=r(uxe," (CamemBERT model)"),uxe.forEach(t),RPo=i(J),n4=n(J,"LI",{});var _xe=s(n4);cme=n(_xe,"STRONG",{});var Ust=s(cme);BPo=r(Ust,"canine"),Ust.forEach(t),PPo=r(_xe," \u2014 "),GG=n(_xe,"A",{href:!0});var Jst=s(GG);IPo=r(Jst,"CanineForTokenClassification"),Jst.forEach(t),qPo=r(_xe," (Canine model)"),_xe.forEach(t),NPo=i(J),s4=n(J,"LI",{});var bxe=s(s4);fme=n(bxe,"STRONG",{});var Yst=s(fme);jPo=r(Yst,"convbert"),Yst.forEach(t),DPo=r(bxe," \u2014 "),OG=n(bxe,"A",{href:!0});var Kst=s(OG);GPo=r(Kst,"ConvBertForTokenClassification"),Kst.forEach(t),OPo=r(bxe," (ConvBERT model)"),bxe.forEach(t),VPo=i(J),l4=n(J,"LI",{});var vxe=s(l4);mme=n(vxe,"STRONG",{});var Zst=s(mme);XPo=r(Zst,"data2vec-text"),Zst.forEach(t),zPo=r(vxe," \u2014 "),VG=n(vxe,"A",{href:!0});var elt=s(VG);QPo=r(elt,"Data2VecTextForTokenClassification"),elt.forEach(t),WPo=r(vxe," (Data2VecText model)"),vxe.forEach(t),HPo=i(J),i4=n(J,"LI",{});var Fxe=s(i4);gme=n(Fxe,"STRONG",{});var olt=s(gme);UPo=r(olt,"deberta"),olt.forEach(t),JPo=r(Fxe," \u2014 "),XG=n(Fxe,"A",{href:!0});var rlt=s(XG);YPo=r(rlt,"DebertaForTokenClassification"),rlt.forEach(t),KPo=r(Fxe," (DeBERTa model)"),Fxe.forEach(t),ZPo=i(J),d4=n(J,"LI",{});var Txe=s(d4);hme=n(Txe,"STRONG",{});var tlt=s(hme);eIo=r(tlt,"deberta-v2"),tlt.forEach(t),oIo=r(Txe," \u2014 "),zG=n(Txe,"A",{href:!0});var alt=s(zG);rIo=r(alt,"DebertaV2ForTokenClassification"),alt.forEach(t),tIo=r(Txe," (DeBERTa-v2 model)"),Txe.forEach(t),aIo=i(J),c4=n(J,"LI",{});var Mxe=s(c4);pme=n(Mxe,"STRONG",{});var nlt=s(pme);nIo=r(nlt,"distilbert"),nlt.forEach(t),sIo=r(Mxe," \u2014 "),QG=n(Mxe,"A",{href:!0});var slt=s(QG);lIo=r(slt,"DistilBertForTokenClassification"),slt.forEach(t),iIo=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),dIo=i(J),f4=n(J,"LI",{});var Exe=s(f4);ume=n(Exe,"STRONG",{});var llt=s(ume);cIo=r(llt,"electra"),llt.forEach(t),fIo=r(Exe," \u2014 "),WG=n(Exe,"A",{href:!0});var ilt=s(WG);mIo=r(ilt,"ElectraForTokenClassification"),ilt.forEach(t),gIo=r(Exe," (ELECTRA model)"),Exe.forEach(t),hIo=i(J),m4=n(J,"LI",{});var Cxe=s(m4);_me=n(Cxe,"STRONG",{});var dlt=s(_me);pIo=r(dlt,"flaubert"),dlt.forEach(t),uIo=r(Cxe," \u2014 "),HG=n(Cxe,"A",{href:!0});var clt=s(HG);_Io=r(clt,"FlaubertForTokenClassification"),clt.forEach(t),bIo=r(Cxe," (FlauBERT model)"),Cxe.forEach(t),vIo=i(J),g4=n(J,"LI",{});var wxe=s(g4);bme=n(wxe,"STRONG",{});var flt=s(bme);FIo=r(flt,"fnet"),flt.forEach(t),TIo=r(wxe," \u2014 "),UG=n(wxe,"A",{href:!0});var mlt=s(UG);MIo=r(mlt,"FNetForTokenClassification"),mlt.forEach(t),EIo=r(wxe," (FNet model)"),wxe.forEach(t),CIo=i(J),h4=n(J,"LI",{});var Axe=s(h4);vme=n(Axe,"STRONG",{});var glt=s(vme);wIo=r(glt,"funnel"),glt.forEach(t),AIo=r(Axe," \u2014 "),JG=n(Axe,"A",{href:!0});var hlt=s(JG);yIo=r(hlt,"FunnelForTokenClassification"),hlt.forEach(t),LIo=r(Axe," (Funnel Transformer model)"),Axe.forEach(t),xIo=i(J),p4=n(J,"LI",{});var yxe=s(p4);Fme=n(yxe,"STRONG",{});var plt=s(Fme);$Io=r(plt,"gpt2"),plt.forEach(t),kIo=r(yxe," \u2014 "),YG=n(yxe,"A",{href:!0});var ult=s(YG);SIo=r(ult,"GPT2ForTokenClassification"),ult.forEach(t),RIo=r(yxe," (OpenAI GPT-2 model)"),yxe.forEach(t),BIo=i(J),u4=n(J,"LI",{});var Lxe=s(u4);Tme=n(Lxe,"STRONG",{});var _lt=s(Tme);PIo=r(_lt,"ibert"),_lt.forEach(t),IIo=r(Lxe," \u2014 "),KG=n(Lxe,"A",{href:!0});var blt=s(KG);qIo=r(blt,"IBertForTokenClassification"),blt.forEach(t),NIo=r(Lxe," (I-BERT model)"),Lxe.forEach(t),jIo=i(J),_4=n(J,"LI",{});var xxe=s(_4);Mme=n(xxe,"STRONG",{});var vlt=s(Mme);DIo=r(vlt,"layoutlm"),vlt.forEach(t),GIo=r(xxe," \u2014 "),ZG=n(xxe,"A",{href:!0});var Flt=s(ZG);OIo=r(Flt,"LayoutLMForTokenClassification"),Flt.forEach(t),VIo=r(xxe," (LayoutLM model)"),xxe.forEach(t),XIo=i(J),b4=n(J,"LI",{});var $xe=s(b4);Eme=n($xe,"STRONG",{});var Tlt=s(Eme);zIo=r(Tlt,"layoutlmv2"),Tlt.forEach(t),QIo=r($xe," \u2014 "),eO=n($xe,"A",{href:!0});var Mlt=s(eO);WIo=r(Mlt,"LayoutLMv2ForTokenClassification"),Mlt.forEach(t),HIo=r($xe," (LayoutLMv2 model)"),$xe.forEach(t),UIo=i(J),v4=n(J,"LI",{});var kxe=s(v4);Cme=n(kxe,"STRONG",{});var Elt=s(Cme);JIo=r(Elt,"longformer"),Elt.forEach(t),YIo=r(kxe," \u2014 "),oO=n(kxe,"A",{href:!0});var Clt=s(oO);KIo=r(Clt,"LongformerForTokenClassification"),Clt.forEach(t),ZIo=r(kxe," (Longformer model)"),kxe.forEach(t),eqo=i(J),F4=n(J,"LI",{});var Sxe=s(F4);wme=n(Sxe,"STRONG",{});var wlt=s(wme);oqo=r(wlt,"megatron-bert"),wlt.forEach(t),rqo=r(Sxe," \u2014 "),rO=n(Sxe,"A",{href:!0});var Alt=s(rO);tqo=r(Alt,"MegatronBertForTokenClassification"),Alt.forEach(t),aqo=r(Sxe," (MegatronBert model)"),Sxe.forEach(t),nqo=i(J),T4=n(J,"LI",{});var Rxe=s(T4);Ame=n(Rxe,"STRONG",{});var ylt=s(Ame);sqo=r(ylt,"mobilebert"),ylt.forEach(t),lqo=r(Rxe," \u2014 "),tO=n(Rxe,"A",{href:!0});var Llt=s(tO);iqo=r(Llt,"MobileBertForTokenClassification"),Llt.forEach(t),dqo=r(Rxe," (MobileBERT model)"),Rxe.forEach(t),cqo=i(J),M4=n(J,"LI",{});var Bxe=s(M4);yme=n(Bxe,"STRONG",{});var xlt=s(yme);fqo=r(xlt,"mpnet"),xlt.forEach(t),mqo=r(Bxe," \u2014 "),aO=n(Bxe,"A",{href:!0});var $lt=s(aO);gqo=r($lt,"MPNetForTokenClassification"),$lt.forEach(t),hqo=r(Bxe," (MPNet model)"),Bxe.forEach(t),pqo=i(J),E4=n(J,"LI",{});var Pxe=s(E4);Lme=n(Pxe,"STRONG",{});var klt=s(Lme);uqo=r(klt,"nystromformer"),klt.forEach(t),_qo=r(Pxe," \u2014 "),nO=n(Pxe,"A",{href:!0});var Slt=s(nO);bqo=r(Slt,"NystromformerForTokenClassification"),Slt.forEach(t),vqo=r(Pxe," (Nystromformer model)"),Pxe.forEach(t),Fqo=i(J),C4=n(J,"LI",{});var Ixe=s(C4);xme=n(Ixe,"STRONG",{});var Rlt=s(xme);Tqo=r(Rlt,"qdqbert"),Rlt.forEach(t),Mqo=r(Ixe," \u2014 "),sO=n(Ixe,"A",{href:!0});var Blt=s(sO);Eqo=r(Blt,"QDQBertForTokenClassification"),Blt.forEach(t),Cqo=r(Ixe," (QDQBert model)"),Ixe.forEach(t),wqo=i(J),w4=n(J,"LI",{});var qxe=s(w4);$me=n(qxe,"STRONG",{});var Plt=s($me);Aqo=r(Plt,"rembert"),Plt.forEach(t),yqo=r(qxe," \u2014 "),lO=n(qxe,"A",{href:!0});var Ilt=s(lO);Lqo=r(Ilt,"RemBertForTokenClassification"),Ilt.forEach(t),xqo=r(qxe," (RemBERT model)"),qxe.forEach(t),$qo=i(J),A4=n(J,"LI",{});var Nxe=s(A4);kme=n(Nxe,"STRONG",{});var qlt=s(kme);kqo=r(qlt,"roberta"),qlt.forEach(t),Sqo=r(Nxe," \u2014 "),iO=n(Nxe,"A",{href:!0});var Nlt=s(iO);Rqo=r(Nlt,"RobertaForTokenClassification"),Nlt.forEach(t),Bqo=r(Nxe," (RoBERTa model)"),Nxe.forEach(t),Pqo=i(J),y4=n(J,"LI",{});var jxe=s(y4);Sme=n(jxe,"STRONG",{});var jlt=s(Sme);Iqo=r(jlt,"roformer"),jlt.forEach(t),qqo=r(jxe," \u2014 "),dO=n(jxe,"A",{href:!0});var Dlt=s(dO);Nqo=r(Dlt,"RoFormerForTokenClassification"),Dlt.forEach(t),jqo=r(jxe," (RoFormer model)"),jxe.forEach(t),Dqo=i(J),L4=n(J,"LI",{});var Dxe=s(L4);Rme=n(Dxe,"STRONG",{});var Glt=s(Rme);Gqo=r(Glt,"squeezebert"),Glt.forEach(t),Oqo=r(Dxe," \u2014 "),cO=n(Dxe,"A",{href:!0});var Olt=s(cO);Vqo=r(Olt,"SqueezeBertForTokenClassification"),Olt.forEach(t),Xqo=r(Dxe," (SqueezeBERT model)"),Dxe.forEach(t),zqo=i(J),x4=n(J,"LI",{});var Gxe=s(x4);Bme=n(Gxe,"STRONG",{});var Vlt=s(Bme);Qqo=r(Vlt,"xlm"),Vlt.forEach(t),Wqo=r(Gxe," \u2014 "),fO=n(Gxe,"A",{href:!0});var Xlt=s(fO);Hqo=r(Xlt,"XLMForTokenClassification"),Xlt.forEach(t),Uqo=r(Gxe," (XLM model)"),Gxe.forEach(t),Jqo=i(J),$4=n(J,"LI",{});var Oxe=s($4);Pme=n(Oxe,"STRONG",{});var zlt=s(Pme);Yqo=r(zlt,"xlm-roberta"),zlt.forEach(t),Kqo=r(Oxe," \u2014 "),mO=n(Oxe,"A",{href:!0});var Qlt=s(mO);Zqo=r(Qlt,"XLMRobertaForTokenClassification"),Qlt.forEach(t),eNo=r(Oxe," (XLM-RoBERTa model)"),Oxe.forEach(t),oNo=i(J),k4=n(J,"LI",{});var Vxe=s(k4);Ime=n(Vxe,"STRONG",{});var Wlt=s(Ime);rNo=r(Wlt,"xlm-roberta-xl"),Wlt.forEach(t),tNo=r(Vxe," \u2014 "),gO=n(Vxe,"A",{href:!0});var Hlt=s(gO);aNo=r(Hlt,"XLMRobertaXLForTokenClassification"),Hlt.forEach(t),nNo=r(Vxe," (XLM-RoBERTa-XL model)"),Vxe.forEach(t),sNo=i(J),S4=n(J,"LI",{});var Xxe=s(S4);qme=n(Xxe,"STRONG",{});var Ult=s(qme);lNo=r(Ult,"xlnet"),Ult.forEach(t),iNo=r(Xxe," \u2014 "),hO=n(Xxe,"A",{href:!0});var Jlt=s(hO);dNo=r(Jlt,"XLNetForTokenClassification"),Jlt.forEach(t),cNo=r(Xxe," (XLNet model)"),Xxe.forEach(t),fNo=i(J),R4=n(J,"LI",{});var zxe=s(R4);Nme=n(zxe,"STRONG",{});var Ylt=s(Nme);mNo=r(Ylt,"yoso"),Ylt.forEach(t),gNo=r(zxe," \u2014 "),pO=n(zxe,"A",{href:!0});var Klt=s(pO);hNo=r(Klt,"YosoForTokenClassification"),Klt.forEach(t),pNo=r(zxe," (YOSO model)"),zxe.forEach(t),J.forEach(t),uNo=i(la),B4=n(la,"P",{});var Qxe=s(B4);_No=r(Qxe,"The model is set in evaluation mode by default using "),jme=n(Qxe,"CODE",{});var Zlt=s(jme);bNo=r(Zlt,"model.eval()"),Zlt.forEach(t),vNo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(Qxe,"CODE",{});var eit=s(Dme);FNo=r(eit,"model.train()"),eit.forEach(t),Qxe.forEach(t),TNo=i(la),T(P4.$$.fragment,la),la.forEach(t),Hs.forEach(t),eIe=i(f),Hi=n(f,"H2",{class:!0});var aNe=s(Hi);I4=n(aNe,"A",{id:!0,class:!0,href:!0});var oit=s(I4);Gme=n(oit,"SPAN",{});var rit=s(Gme);T(dL.$$.fragment,rit),rit.forEach(t),oit.forEach(t),MNo=i(aNe),Ome=n(aNe,"SPAN",{});var tit=s(Ome);ENo=r(tit,"AutoModelForQuestionAnswering"),tit.forEach(t),aNe.forEach(t),oIe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(cL.$$.fragment,Us),CNo=i(Us),Ui=n(Us,"P",{});var uK=s(Ui);wNo=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uO=n(uK,"A",{href:!0});var ait=s(uO);ANo=r(ait,"from_pretrained()"),ait.forEach(t),yNo=r(uK," class method or the "),_O=n(uK,"A",{href:!0});var nit=s(_O);LNo=r(nit,"from_config()"),nit.forEach(t),xNo=r(uK,` class
method.`),uK.forEach(t),$No=i(Us),fL=n(Us,"P",{});var nNe=s(fL);kNo=r(nNe,"This class cannot be instantiated directly using "),Vme=n(nNe,"CODE",{});var sit=s(Vme);SNo=r(sit,"__init__()"),sit.forEach(t),RNo=r(nNe," (throws an error)."),nNe.forEach(t),BNo=i(Us),ct=n(Us,"DIV",{class:!0});var gA=s(ct);T(mL.$$.fragment,gA),PNo=i(gA),Xme=n(gA,"P",{});var lit=s(Xme);INo=r(lit,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lit.forEach(t),qNo=i(gA),Ji=n(gA,"P",{});var _K=s(Ji);NNo=r(_K,`Note:
Loading a model from its configuration file does `),zme=n(_K,"STRONG",{});var iit=s(zme);jNo=r(iit,"not"),iit.forEach(t),DNo=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(_K,"A",{href:!0});var dit=s(bO);GNo=r(dit,"from_pretrained()"),dit.forEach(t),ONo=r(_K," to load the model weights."),_K.forEach(t),VNo=i(gA),T(q4.$$.fragment,gA),gA.forEach(t),XNo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(gL.$$.fragment,ia),zNo=i(ia),Qme=n(ia,"P",{});var cit=s(Qme);QNo=r(cit,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cit.forEach(t),WNo=i(ia),Pa=n(ia,"P",{});var hA=s(Pa);HNo=r(hA,"The model class to instantiate is selected based on the "),Wme=n(hA,"CODE",{});var fit=s(Wme);UNo=r(fit,"model_type"),fit.forEach(t),JNo=r(hA,` property of the config object (either
passed as an argument or loaded from `),Hme=n(hA,"CODE",{});var mit=s(Hme);YNo=r(mit,"pretrained_model_name_or_path"),mit.forEach(t),KNo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(hA,"CODE",{});var git=s(Ume);ZNo=r(git,"pretrained_model_name_or_path"),git.forEach(t),ejo=r(hA,":"),hA.forEach(t),ojo=i(ia),O=n(ia,"UL",{});var X=s(O);N4=n(X,"LI",{});var Wxe=s(N4);Jme=n(Wxe,"STRONG",{});var hit=s(Jme);rjo=r(hit,"albert"),hit.forEach(t),tjo=r(Wxe," \u2014 "),vO=n(Wxe,"A",{href:!0});var pit=s(vO);ajo=r(pit,"AlbertForQuestionAnswering"),pit.forEach(t),njo=r(Wxe," (ALBERT model)"),Wxe.forEach(t),sjo=i(X),j4=n(X,"LI",{});var Hxe=s(j4);Yme=n(Hxe,"STRONG",{});var uit=s(Yme);ljo=r(uit,"bart"),uit.forEach(t),ijo=r(Hxe," \u2014 "),FO=n(Hxe,"A",{href:!0});var _it=s(FO);djo=r(_it,"BartForQuestionAnswering"),_it.forEach(t),cjo=r(Hxe," (BART model)"),Hxe.forEach(t),fjo=i(X),D4=n(X,"LI",{});var Uxe=s(D4);Kme=n(Uxe,"STRONG",{});var bit=s(Kme);mjo=r(bit,"bert"),bit.forEach(t),gjo=r(Uxe," \u2014 "),TO=n(Uxe,"A",{href:!0});var vit=s(TO);hjo=r(vit,"BertForQuestionAnswering"),vit.forEach(t),pjo=r(Uxe," (BERT model)"),Uxe.forEach(t),ujo=i(X),G4=n(X,"LI",{});var Jxe=s(G4);Zme=n(Jxe,"STRONG",{});var Fit=s(Zme);_jo=r(Fit,"big_bird"),Fit.forEach(t),bjo=r(Jxe," \u2014 "),MO=n(Jxe,"A",{href:!0});var Tit=s(MO);vjo=r(Tit,"BigBirdForQuestionAnswering"),Tit.forEach(t),Fjo=r(Jxe," (BigBird model)"),Jxe.forEach(t),Tjo=i(X),O4=n(X,"LI",{});var Yxe=s(O4);ege=n(Yxe,"STRONG",{});var Mit=s(ege);Mjo=r(Mit,"bigbird_pegasus"),Mit.forEach(t),Ejo=r(Yxe," \u2014 "),EO=n(Yxe,"A",{href:!0});var Eit=s(EO);Cjo=r(Eit,"BigBirdPegasusForQuestionAnswering"),Eit.forEach(t),wjo=r(Yxe," (BigBirdPegasus model)"),Yxe.forEach(t),Ajo=i(X),V4=n(X,"LI",{});var Kxe=s(V4);oge=n(Kxe,"STRONG",{});var Cit=s(oge);yjo=r(Cit,"camembert"),Cit.forEach(t),Ljo=r(Kxe," \u2014 "),CO=n(Kxe,"A",{href:!0});var wit=s(CO);xjo=r(wit,"CamembertForQuestionAnswering"),wit.forEach(t),$jo=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),kjo=i(X),X4=n(X,"LI",{});var Zxe=s(X4);rge=n(Zxe,"STRONG",{});var Ait=s(rge);Sjo=r(Ait,"canine"),Ait.forEach(t),Rjo=r(Zxe," \u2014 "),wO=n(Zxe,"A",{href:!0});var yit=s(wO);Bjo=r(yit,"CanineForQuestionAnswering"),yit.forEach(t),Pjo=r(Zxe," (Canine model)"),Zxe.forEach(t),Ijo=i(X),z4=n(X,"LI",{});var e7e=s(z4);tge=n(e7e,"STRONG",{});var Lit=s(tge);qjo=r(Lit,"convbert"),Lit.forEach(t),Njo=r(e7e," \u2014 "),AO=n(e7e,"A",{href:!0});var xit=s(AO);jjo=r(xit,"ConvBertForQuestionAnswering"),xit.forEach(t),Djo=r(e7e," (ConvBERT model)"),e7e.forEach(t),Gjo=i(X),Q4=n(X,"LI",{});var o7e=s(Q4);age=n(o7e,"STRONG",{});var $it=s(age);Ojo=r($it,"data2vec-text"),$it.forEach(t),Vjo=r(o7e," \u2014 "),yO=n(o7e,"A",{href:!0});var kit=s(yO);Xjo=r(kit,"Data2VecTextForQuestionAnswering"),kit.forEach(t),zjo=r(o7e," (Data2VecText model)"),o7e.forEach(t),Qjo=i(X),W4=n(X,"LI",{});var r7e=s(W4);nge=n(r7e,"STRONG",{});var Sit=s(nge);Wjo=r(Sit,"deberta"),Sit.forEach(t),Hjo=r(r7e," \u2014 "),LO=n(r7e,"A",{href:!0});var Rit=s(LO);Ujo=r(Rit,"DebertaForQuestionAnswering"),Rit.forEach(t),Jjo=r(r7e," (DeBERTa model)"),r7e.forEach(t),Yjo=i(X),H4=n(X,"LI",{});var t7e=s(H4);sge=n(t7e,"STRONG",{});var Bit=s(sge);Kjo=r(Bit,"deberta-v2"),Bit.forEach(t),Zjo=r(t7e," \u2014 "),xO=n(t7e,"A",{href:!0});var Pit=s(xO);eDo=r(Pit,"DebertaV2ForQuestionAnswering"),Pit.forEach(t),oDo=r(t7e," (DeBERTa-v2 model)"),t7e.forEach(t),rDo=i(X),U4=n(X,"LI",{});var a7e=s(U4);lge=n(a7e,"STRONG",{});var Iit=s(lge);tDo=r(Iit,"distilbert"),Iit.forEach(t),aDo=r(a7e," \u2014 "),$O=n(a7e,"A",{href:!0});var qit=s($O);nDo=r(qit,"DistilBertForQuestionAnswering"),qit.forEach(t),sDo=r(a7e," (DistilBERT model)"),a7e.forEach(t),lDo=i(X),J4=n(X,"LI",{});var n7e=s(J4);ige=n(n7e,"STRONG",{});var Nit=s(ige);iDo=r(Nit,"electra"),Nit.forEach(t),dDo=r(n7e," \u2014 "),kO=n(n7e,"A",{href:!0});var jit=s(kO);cDo=r(jit,"ElectraForQuestionAnswering"),jit.forEach(t),fDo=r(n7e," (ELECTRA model)"),n7e.forEach(t),mDo=i(X),Y4=n(X,"LI",{});var s7e=s(Y4);dge=n(s7e,"STRONG",{});var Dit=s(dge);gDo=r(Dit,"flaubert"),Dit.forEach(t),hDo=r(s7e," \u2014 "),SO=n(s7e,"A",{href:!0});var Git=s(SO);pDo=r(Git,"FlaubertForQuestionAnsweringSimple"),Git.forEach(t),uDo=r(s7e," (FlauBERT model)"),s7e.forEach(t),_Do=i(X),K4=n(X,"LI",{});var l7e=s(K4);cge=n(l7e,"STRONG",{});var Oit=s(cge);bDo=r(Oit,"fnet"),Oit.forEach(t),vDo=r(l7e," \u2014 "),RO=n(l7e,"A",{href:!0});var Vit=s(RO);FDo=r(Vit,"FNetForQuestionAnswering"),Vit.forEach(t),TDo=r(l7e," (FNet model)"),l7e.forEach(t),MDo=i(X),Z4=n(X,"LI",{});var i7e=s(Z4);fge=n(i7e,"STRONG",{});var Xit=s(fge);EDo=r(Xit,"funnel"),Xit.forEach(t),CDo=r(i7e," \u2014 "),BO=n(i7e,"A",{href:!0});var zit=s(BO);wDo=r(zit,"FunnelForQuestionAnswering"),zit.forEach(t),ADo=r(i7e," (Funnel Transformer model)"),i7e.forEach(t),yDo=i(X),e2=n(X,"LI",{});var d7e=s(e2);mge=n(d7e,"STRONG",{});var Qit=s(mge);LDo=r(Qit,"gptj"),Qit.forEach(t),xDo=r(d7e," \u2014 "),PO=n(d7e,"A",{href:!0});var Wit=s(PO);$Do=r(Wit,"GPTJForQuestionAnswering"),Wit.forEach(t),kDo=r(d7e," (GPT-J model)"),d7e.forEach(t),SDo=i(X),o2=n(X,"LI",{});var c7e=s(o2);gge=n(c7e,"STRONG",{});var Hit=s(gge);RDo=r(Hit,"ibert"),Hit.forEach(t),BDo=r(c7e," \u2014 "),IO=n(c7e,"A",{href:!0});var Uit=s(IO);PDo=r(Uit,"IBertForQuestionAnswering"),Uit.forEach(t),IDo=r(c7e," (I-BERT model)"),c7e.forEach(t),qDo=i(X),r2=n(X,"LI",{});var f7e=s(r2);hge=n(f7e,"STRONG",{});var Jit=s(hge);NDo=r(Jit,"layoutlmv2"),Jit.forEach(t),jDo=r(f7e," \u2014 "),qO=n(f7e,"A",{href:!0});var Yit=s(qO);DDo=r(Yit,"LayoutLMv2ForQuestionAnswering"),Yit.forEach(t),GDo=r(f7e," (LayoutLMv2 model)"),f7e.forEach(t),ODo=i(X),t2=n(X,"LI",{});var m7e=s(t2);pge=n(m7e,"STRONG",{});var Kit=s(pge);VDo=r(Kit,"led"),Kit.forEach(t),XDo=r(m7e," \u2014 "),NO=n(m7e,"A",{href:!0});var Zit=s(NO);zDo=r(Zit,"LEDForQuestionAnswering"),Zit.forEach(t),QDo=r(m7e," (LED model)"),m7e.forEach(t),WDo=i(X),a2=n(X,"LI",{});var g7e=s(a2);uge=n(g7e,"STRONG",{});var edt=s(uge);HDo=r(edt,"longformer"),edt.forEach(t),UDo=r(g7e," \u2014 "),jO=n(g7e,"A",{href:!0});var odt=s(jO);JDo=r(odt,"LongformerForQuestionAnswering"),odt.forEach(t),YDo=r(g7e," (Longformer model)"),g7e.forEach(t),KDo=i(X),n2=n(X,"LI",{});var h7e=s(n2);_ge=n(h7e,"STRONG",{});var rdt=s(_ge);ZDo=r(rdt,"lxmert"),rdt.forEach(t),eGo=r(h7e," \u2014 "),DO=n(h7e,"A",{href:!0});var tdt=s(DO);oGo=r(tdt,"LxmertForQuestionAnswering"),tdt.forEach(t),rGo=r(h7e," (LXMERT model)"),h7e.forEach(t),tGo=i(X),s2=n(X,"LI",{});var p7e=s(s2);bge=n(p7e,"STRONG",{});var adt=s(bge);aGo=r(adt,"mbart"),adt.forEach(t),nGo=r(p7e," \u2014 "),GO=n(p7e,"A",{href:!0});var ndt=s(GO);sGo=r(ndt,"MBartForQuestionAnswering"),ndt.forEach(t),lGo=r(p7e," (mBART model)"),p7e.forEach(t),iGo=i(X),l2=n(X,"LI",{});var u7e=s(l2);vge=n(u7e,"STRONG",{});var sdt=s(vge);dGo=r(sdt,"megatron-bert"),sdt.forEach(t),cGo=r(u7e," \u2014 "),OO=n(u7e,"A",{href:!0});var ldt=s(OO);fGo=r(ldt,"MegatronBertForQuestionAnswering"),ldt.forEach(t),mGo=r(u7e," (MegatronBert model)"),u7e.forEach(t),gGo=i(X),i2=n(X,"LI",{});var _7e=s(i2);Fge=n(_7e,"STRONG",{});var idt=s(Fge);hGo=r(idt,"mobilebert"),idt.forEach(t),pGo=r(_7e," \u2014 "),VO=n(_7e,"A",{href:!0});var ddt=s(VO);uGo=r(ddt,"MobileBertForQuestionAnswering"),ddt.forEach(t),_Go=r(_7e," (MobileBERT model)"),_7e.forEach(t),bGo=i(X),d2=n(X,"LI",{});var b7e=s(d2);Tge=n(b7e,"STRONG",{});var cdt=s(Tge);vGo=r(cdt,"mpnet"),cdt.forEach(t),FGo=r(b7e," \u2014 "),XO=n(b7e,"A",{href:!0});var fdt=s(XO);TGo=r(fdt,"MPNetForQuestionAnswering"),fdt.forEach(t),MGo=r(b7e," (MPNet model)"),b7e.forEach(t),EGo=i(X),c2=n(X,"LI",{});var v7e=s(c2);Mge=n(v7e,"STRONG",{});var mdt=s(Mge);CGo=r(mdt,"nystromformer"),mdt.forEach(t),wGo=r(v7e," \u2014 "),zO=n(v7e,"A",{href:!0});var gdt=s(zO);AGo=r(gdt,"NystromformerForQuestionAnswering"),gdt.forEach(t),yGo=r(v7e," (Nystromformer model)"),v7e.forEach(t),LGo=i(X),f2=n(X,"LI",{});var F7e=s(f2);Ege=n(F7e,"STRONG",{});var hdt=s(Ege);xGo=r(hdt,"qdqbert"),hdt.forEach(t),$Go=r(F7e," \u2014 "),QO=n(F7e,"A",{href:!0});var pdt=s(QO);kGo=r(pdt,"QDQBertForQuestionAnswering"),pdt.forEach(t),SGo=r(F7e," (QDQBert model)"),F7e.forEach(t),RGo=i(X),m2=n(X,"LI",{});var T7e=s(m2);Cge=n(T7e,"STRONG",{});var udt=s(Cge);BGo=r(udt,"reformer"),udt.forEach(t),PGo=r(T7e," \u2014 "),WO=n(T7e,"A",{href:!0});var _dt=s(WO);IGo=r(_dt,"ReformerForQuestionAnswering"),_dt.forEach(t),qGo=r(T7e," (Reformer model)"),T7e.forEach(t),NGo=i(X),g2=n(X,"LI",{});var M7e=s(g2);wge=n(M7e,"STRONG",{});var bdt=s(wge);jGo=r(bdt,"rembert"),bdt.forEach(t),DGo=r(M7e," \u2014 "),HO=n(M7e,"A",{href:!0});var vdt=s(HO);GGo=r(vdt,"RemBertForQuestionAnswering"),vdt.forEach(t),OGo=r(M7e," (RemBERT model)"),M7e.forEach(t),VGo=i(X),h2=n(X,"LI",{});var E7e=s(h2);Age=n(E7e,"STRONG",{});var Fdt=s(Age);XGo=r(Fdt,"roberta"),Fdt.forEach(t),zGo=r(E7e," \u2014 "),UO=n(E7e,"A",{href:!0});var Tdt=s(UO);QGo=r(Tdt,"RobertaForQuestionAnswering"),Tdt.forEach(t),WGo=r(E7e," (RoBERTa model)"),E7e.forEach(t),HGo=i(X),p2=n(X,"LI",{});var C7e=s(p2);yge=n(C7e,"STRONG",{});var Mdt=s(yge);UGo=r(Mdt,"roformer"),Mdt.forEach(t),JGo=r(C7e," \u2014 "),JO=n(C7e,"A",{href:!0});var Edt=s(JO);YGo=r(Edt,"RoFormerForQuestionAnswering"),Edt.forEach(t),KGo=r(C7e," (RoFormer model)"),C7e.forEach(t),ZGo=i(X),u2=n(X,"LI",{});var w7e=s(u2);Lge=n(w7e,"STRONG",{});var Cdt=s(Lge);eOo=r(Cdt,"splinter"),Cdt.forEach(t),oOo=r(w7e," \u2014 "),YO=n(w7e,"A",{href:!0});var wdt=s(YO);rOo=r(wdt,"SplinterForQuestionAnswering"),wdt.forEach(t),tOo=r(w7e," (Splinter model)"),w7e.forEach(t),aOo=i(X),_2=n(X,"LI",{});var A7e=s(_2);xge=n(A7e,"STRONG",{});var Adt=s(xge);nOo=r(Adt,"squeezebert"),Adt.forEach(t),sOo=r(A7e," \u2014 "),KO=n(A7e,"A",{href:!0});var ydt=s(KO);lOo=r(ydt,"SqueezeBertForQuestionAnswering"),ydt.forEach(t),iOo=r(A7e," (SqueezeBERT model)"),A7e.forEach(t),dOo=i(X),b2=n(X,"LI",{});var y7e=s(b2);$ge=n(y7e,"STRONG",{});var Ldt=s($ge);cOo=r(Ldt,"xlm"),Ldt.forEach(t),fOo=r(y7e," \u2014 "),ZO=n(y7e,"A",{href:!0});var xdt=s(ZO);mOo=r(xdt,"XLMForQuestionAnsweringSimple"),xdt.forEach(t),gOo=r(y7e," (XLM model)"),y7e.forEach(t),hOo=i(X),v2=n(X,"LI",{});var L7e=s(v2);kge=n(L7e,"STRONG",{});var $dt=s(kge);pOo=r($dt,"xlm-roberta"),$dt.forEach(t),uOo=r(L7e," \u2014 "),eV=n(L7e,"A",{href:!0});var kdt=s(eV);_Oo=r(kdt,"XLMRobertaForQuestionAnswering"),kdt.forEach(t),bOo=r(L7e," (XLM-RoBERTa model)"),L7e.forEach(t),vOo=i(X),F2=n(X,"LI",{});var x7e=s(F2);Sge=n(x7e,"STRONG",{});var Sdt=s(Sge);FOo=r(Sdt,"xlm-roberta-xl"),Sdt.forEach(t),TOo=r(x7e," \u2014 "),oV=n(x7e,"A",{href:!0});var Rdt=s(oV);MOo=r(Rdt,"XLMRobertaXLForQuestionAnswering"),Rdt.forEach(t),EOo=r(x7e," (XLM-RoBERTa-XL model)"),x7e.forEach(t),COo=i(X),T2=n(X,"LI",{});var $7e=s(T2);Rge=n($7e,"STRONG",{});var Bdt=s(Rge);wOo=r(Bdt,"xlnet"),Bdt.forEach(t),AOo=r($7e," \u2014 "),rV=n($7e,"A",{href:!0});var Pdt=s(rV);yOo=r(Pdt,"XLNetForQuestionAnsweringSimple"),Pdt.forEach(t),LOo=r($7e," (XLNet model)"),$7e.forEach(t),xOo=i(X),M2=n(X,"LI",{});var k7e=s(M2);Bge=n(k7e,"STRONG",{});var Idt=s(Bge);$Oo=r(Idt,"yoso"),Idt.forEach(t),kOo=r(k7e," \u2014 "),tV=n(k7e,"A",{href:!0});var qdt=s(tV);SOo=r(qdt,"YosoForQuestionAnswering"),qdt.forEach(t),ROo=r(k7e," (YOSO model)"),k7e.forEach(t),X.forEach(t),BOo=i(ia),E2=n(ia,"P",{});var S7e=s(E2);POo=r(S7e,"The model is set in evaluation mode by default using "),Pge=n(S7e,"CODE",{});var Ndt=s(Pge);IOo=r(Ndt,"model.eval()"),Ndt.forEach(t),qOo=r(S7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(S7e,"CODE",{});var jdt=s(Ige);NOo=r(jdt,"model.train()"),jdt.forEach(t),S7e.forEach(t),jOo=i(ia),T(C2.$$.fragment,ia),ia.forEach(t),Us.forEach(t),rIe=i(f),Yi=n(f,"H2",{class:!0});var sNe=s(Yi);w2=n(sNe,"A",{id:!0,class:!0,href:!0});var Ddt=s(w2);qge=n(Ddt,"SPAN",{});var Gdt=s(qge);T(hL.$$.fragment,Gdt),Gdt.forEach(t),Ddt.forEach(t),DOo=i(sNe),Nge=n(sNe,"SPAN",{});var Odt=s(Nge);GOo=r(Odt,"AutoModelForTableQuestionAnswering"),Odt.forEach(t),sNe.forEach(t),tIe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(pL.$$.fragment,Js),OOo=i(Js),Ki=n(Js,"P",{});var bK=s(Ki);VOo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aV=n(bK,"A",{href:!0});var Vdt=s(aV);XOo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),zOo=r(bK," class method or the "),nV=n(bK,"A",{href:!0});var Xdt=s(nV);QOo=r(Xdt,"from_config()"),Xdt.forEach(t),WOo=r(bK,` class
method.`),bK.forEach(t),HOo=i(Js),uL=n(Js,"P",{});var lNe=s(uL);UOo=r(lNe,"This class cannot be instantiated directly using "),jge=n(lNe,"CODE",{});var zdt=s(jge);JOo=r(zdt,"__init__()"),zdt.forEach(t),YOo=r(lNe," (throws an error)."),lNe.forEach(t),KOo=i(Js),ft=n(Js,"DIV",{class:!0});var pA=s(ft);T(_L.$$.fragment,pA),ZOo=i(pA),Dge=n(pA,"P",{});var Qdt=s(Dge);eVo=r(Qdt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qdt.forEach(t),oVo=i(pA),Zi=n(pA,"P",{});var vK=s(Zi);rVo=r(vK,`Note:
Loading a model from its configuration file does `),Gge=n(vK,"STRONG",{});var Wdt=s(Gge);tVo=r(Wdt,"not"),Wdt.forEach(t),aVo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(vK,"A",{href:!0});var Hdt=s(sV);nVo=r(Hdt,"from_pretrained()"),Hdt.forEach(t),sVo=r(vK," to load the model weights."),vK.forEach(t),lVo=i(pA),T(A2.$$.fragment,pA),pA.forEach(t),iVo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(bL.$$.fragment,da),dVo=i(da),Oge=n(da,"P",{});var Udt=s(Oge);cVo=r(Udt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Udt.forEach(t),fVo=i(da),Ia=n(da,"P",{});var uA=s(Ia);mVo=r(uA,"The model class to instantiate is selected based on the "),Vge=n(uA,"CODE",{});var Jdt=s(Vge);gVo=r(Jdt,"model_type"),Jdt.forEach(t),hVo=r(uA,` property of the config object (either
passed as an argument or loaded from `),Xge=n(uA,"CODE",{});var Ydt=s(Xge);pVo=r(Ydt,"pretrained_model_name_or_path"),Ydt.forEach(t),uVo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(uA,"CODE",{});var Kdt=s(zge);_Vo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),bVo=r(uA,":"),uA.forEach(t),vVo=i(da),Qge=n(da,"UL",{});var Zdt=s(Qge);y2=n(Zdt,"LI",{});var R7e=s(y2);Wge=n(R7e,"STRONG",{});var ect=s(Wge);FVo=r(ect,"tapas"),ect.forEach(t),TVo=r(R7e," \u2014 "),lV=n(R7e,"A",{href:!0});var oct=s(lV);MVo=r(oct,"TapasForQuestionAnswering"),oct.forEach(t),EVo=r(R7e," (TAPAS model)"),R7e.forEach(t),Zdt.forEach(t),CVo=i(da),L2=n(da,"P",{});var B7e=s(L2);wVo=r(B7e,"The model is set in evaluation mode by default using "),Hge=n(B7e,"CODE",{});var rct=s(Hge);AVo=r(rct,"model.eval()"),rct.forEach(t),yVo=r(B7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=n(B7e,"CODE",{});var tct=s(Uge);LVo=r(tct,"model.train()"),tct.forEach(t),B7e.forEach(t),xVo=i(da),T(x2.$$.fragment,da),da.forEach(t),Js.forEach(t),aIe=i(f),ed=n(f,"H2",{class:!0});var iNe=s(ed);$2=n(iNe,"A",{id:!0,class:!0,href:!0});var act=s($2);Jge=n(act,"SPAN",{});var nct=s(Jge);T(vL.$$.fragment,nct),nct.forEach(t),act.forEach(t),$Vo=i(iNe),Yge=n(iNe,"SPAN",{});var sct=s(Yge);kVo=r(sct,"AutoModelForImageClassification"),sct.forEach(t),iNe.forEach(t),nIe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(FL.$$.fragment,Ys),SVo=i(Ys),od=n(Ys,"P",{});var FK=s(od);RVo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iV=n(FK,"A",{href:!0});var lct=s(iV);BVo=r(lct,"from_pretrained()"),lct.forEach(t),PVo=r(FK," class method or the "),dV=n(FK,"A",{href:!0});var ict=s(dV);IVo=r(ict,"from_config()"),ict.forEach(t),qVo=r(FK,` class
method.`),FK.forEach(t),NVo=i(Ys),TL=n(Ys,"P",{});var dNe=s(TL);jVo=r(dNe,"This class cannot be instantiated directly using "),Kge=n(dNe,"CODE",{});var dct=s(Kge);DVo=r(dct,"__init__()"),dct.forEach(t),GVo=r(dNe," (throws an error)."),dNe.forEach(t),OVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var _A=s(mt);T(ML.$$.fragment,_A),VVo=i(_A),Zge=n(_A,"P",{});var cct=s(Zge);XVo=r(cct,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cct.forEach(t),zVo=i(_A),rd=n(_A,"P",{});var TK=s(rd);QVo=r(TK,`Note:
Loading a model from its configuration file does `),ehe=n(TK,"STRONG",{});var fct=s(ehe);WVo=r(fct,"not"),fct.forEach(t),HVo=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(TK,"A",{href:!0});var mct=s(cV);UVo=r(mct,"from_pretrained()"),mct.forEach(t),JVo=r(TK," to load the model weights."),TK.forEach(t),YVo=i(_A),T(k2.$$.fragment,_A),_A.forEach(t),KVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(EL.$$.fragment,ca),ZVo=i(ca),ohe=n(ca,"P",{});var gct=s(ohe);eXo=r(gct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gct.forEach(t),oXo=i(ca),qa=n(ca,"P",{});var bA=s(qa);rXo=r(bA,"The model class to instantiate is selected based on the "),rhe=n(bA,"CODE",{});var hct=s(rhe);tXo=r(hct,"model_type"),hct.forEach(t),aXo=r(bA,` property of the config object (either
passed as an argument or loaded from `),the=n(bA,"CODE",{});var pct=s(the);nXo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),sXo=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=n(bA,"CODE",{});var uct=s(ahe);lXo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),iXo=r(bA,":"),bA.forEach(t),dXo=i(ca),Fe=n(ca,"UL",{});var Ee=s(Fe);S2=n(Ee,"LI",{});var P7e=s(S2);nhe=n(P7e,"STRONG",{});var _ct=s(nhe);cXo=r(_ct,"beit"),_ct.forEach(t),fXo=r(P7e," \u2014 "),fV=n(P7e,"A",{href:!0});var bct=s(fV);mXo=r(bct,"BeitForImageClassification"),bct.forEach(t),gXo=r(P7e," (BEiT model)"),P7e.forEach(t),hXo=i(Ee),R2=n(Ee,"LI",{});var I7e=s(R2);she=n(I7e,"STRONG",{});var vct=s(she);pXo=r(vct,"convnext"),vct.forEach(t),uXo=r(I7e," \u2014 "),mV=n(I7e,"A",{href:!0});var Fct=s(mV);_Xo=r(Fct,"ConvNextForImageClassification"),Fct.forEach(t),bXo=r(I7e," (ConvNext model)"),I7e.forEach(t),vXo=i(Ee),B2=n(Ee,"LI",{});var q7e=s(B2);lhe=n(q7e,"STRONG",{});var Tct=s(lhe);FXo=r(Tct,"data2vec-vision"),Tct.forEach(t),TXo=r(q7e," \u2014 "),gV=n(q7e,"A",{href:!0});var Mct=s(gV);MXo=r(Mct,"Data2VecVisionForImageClassification"),Mct.forEach(t),EXo=r(q7e," (Data2VecVision model)"),q7e.forEach(t),CXo=i(Ee),Rs=n(Ee,"LI",{});var l$=s(Rs);ihe=n(l$,"STRONG",{});var Ect=s(ihe);wXo=r(Ect,"deit"),Ect.forEach(t),AXo=r(l$," \u2014 "),hV=n(l$,"A",{href:!0});var Cct=s(hV);yXo=r(Cct,"DeiTForImageClassification"),Cct.forEach(t),LXo=r(l$," or "),pV=n(l$,"A",{href:!0});var wct=s(pV);xXo=r(wct,"DeiTForImageClassificationWithTeacher"),wct.forEach(t),$Xo=r(l$," (DeiT model)"),l$.forEach(t),kXo=i(Ee),P2=n(Ee,"LI",{});var N7e=s(P2);dhe=n(N7e,"STRONG",{});var Act=s(dhe);SXo=r(Act,"imagegpt"),Act.forEach(t),RXo=r(N7e," \u2014 "),uV=n(N7e,"A",{href:!0});var yct=s(uV);BXo=r(yct,"ImageGPTForImageClassification"),yct.forEach(t),PXo=r(N7e," (ImageGPT model)"),N7e.forEach(t),IXo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);che=n(ff,"STRONG",{});var Lct=s(che);qXo=r(Lct,"perceiver"),Lct.forEach(t),NXo=r(ff," \u2014 "),_V=n(ff,"A",{href:!0});var xct=s(_V);jXo=r(xct,"PerceiverForImageClassificationLearned"),xct.forEach(t),DXo=r(ff," or "),bV=n(ff,"A",{href:!0});var $ct=s(bV);GXo=r($ct,"PerceiverForImageClassificationFourier"),$ct.forEach(t),OXo=r(ff," or "),vV=n(ff,"A",{href:!0});var kct=s(vV);VXo=r(kct,"PerceiverForImageClassificationConvProcessing"),kct.forEach(t),XXo=r(ff," (Perceiver model)"),ff.forEach(t),zXo=i(Ee),I2=n(Ee,"LI",{});var j7e=s(I2);fhe=n(j7e,"STRONG",{});var Sct=s(fhe);QXo=r(Sct,"poolformer"),Sct.forEach(t),WXo=r(j7e," \u2014 "),FV=n(j7e,"A",{href:!0});var Rct=s(FV);HXo=r(Rct,"PoolFormerForImageClassification"),Rct.forEach(t),UXo=r(j7e," (PoolFormer model)"),j7e.forEach(t),JXo=i(Ee),q2=n(Ee,"LI",{});var D7e=s(q2);mhe=n(D7e,"STRONG",{});var Bct=s(mhe);YXo=r(Bct,"regnet"),Bct.forEach(t),KXo=r(D7e," \u2014 "),TV=n(D7e,"A",{href:!0});var Pct=s(TV);ZXo=r(Pct,"RegNetForImageClassification"),Pct.forEach(t),ezo=r(D7e," (RegNet model)"),D7e.forEach(t),ozo=i(Ee),N2=n(Ee,"LI",{});var G7e=s(N2);ghe=n(G7e,"STRONG",{});var Ict=s(ghe);rzo=r(Ict,"resnet"),Ict.forEach(t),tzo=r(G7e," \u2014 "),MV=n(G7e,"A",{href:!0});var qct=s(MV);azo=r(qct,"ResNetForImageClassification"),qct.forEach(t),nzo=r(G7e," (ResNet model)"),G7e.forEach(t),szo=i(Ee),j2=n(Ee,"LI",{});var O7e=s(j2);hhe=n(O7e,"STRONG",{});var Nct=s(hhe);lzo=r(Nct,"segformer"),Nct.forEach(t),izo=r(O7e," \u2014 "),EV=n(O7e,"A",{href:!0});var jct=s(EV);dzo=r(jct,"SegformerForImageClassification"),jct.forEach(t),czo=r(O7e," (SegFormer model)"),O7e.forEach(t),fzo=i(Ee),D2=n(Ee,"LI",{});var V7e=s(D2);phe=n(V7e,"STRONG",{});var Dct=s(phe);mzo=r(Dct,"swin"),Dct.forEach(t),gzo=r(V7e," \u2014 "),CV=n(V7e,"A",{href:!0});var Gct=s(CV);hzo=r(Gct,"SwinForImageClassification"),Gct.forEach(t),pzo=r(V7e," (Swin model)"),V7e.forEach(t),uzo=i(Ee),G2=n(Ee,"LI",{});var X7e=s(G2);uhe=n(X7e,"STRONG",{});var Oct=s(uhe);_zo=r(Oct,"van"),Oct.forEach(t),bzo=r(X7e," \u2014 "),wV=n(X7e,"A",{href:!0});var Vct=s(wV);vzo=r(Vct,"VanForImageClassification"),Vct.forEach(t),Fzo=r(X7e," (VAN model)"),X7e.forEach(t),Tzo=i(Ee),O2=n(Ee,"LI",{});var z7e=s(O2);_he=n(z7e,"STRONG",{});var Xct=s(_he);Mzo=r(Xct,"vit"),Xct.forEach(t),Ezo=r(z7e," \u2014 "),AV=n(z7e,"A",{href:!0});var zct=s(AV);Czo=r(zct,"ViTForImageClassification"),zct.forEach(t),wzo=r(z7e," (ViT model)"),z7e.forEach(t),Ee.forEach(t),Azo=i(ca),V2=n(ca,"P",{});var Q7e=s(V2);yzo=r(Q7e,"The model is set in evaluation mode by default using "),bhe=n(Q7e,"CODE",{});var Qct=s(bhe);Lzo=r(Qct,"model.eval()"),Qct.forEach(t),xzo=r(Q7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(Q7e,"CODE",{});var Wct=s(vhe);$zo=r(Wct,"model.train()"),Wct.forEach(t),Q7e.forEach(t),kzo=i(ca),T(X2.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),sIe=i(f),td=n(f,"H2",{class:!0});var cNe=s(td);z2=n(cNe,"A",{id:!0,class:!0,href:!0});var Hct=s(z2);Fhe=n(Hct,"SPAN",{});var Uct=s(Fhe);T(CL.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),Szo=i(cNe),The=n(cNe,"SPAN",{});var Jct=s(The);Rzo=r(Jct,"AutoModelForVision2Seq"),Jct.forEach(t),cNe.forEach(t),lIe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(wL.$$.fragment,Ks),Bzo=i(Ks),ad=n(Ks,"P",{});var MK=s(ad);Pzo=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),yV=n(MK,"A",{href:!0});var Yct=s(yV);Izo=r(Yct,"from_pretrained()"),Yct.forEach(t),qzo=r(MK," class method or the "),LV=n(MK,"A",{href:!0});var Kct=s(LV);Nzo=r(Kct,"from_config()"),Kct.forEach(t),jzo=r(MK,` class
method.`),MK.forEach(t),Dzo=i(Ks),AL=n(Ks,"P",{});var fNe=s(AL);Gzo=r(fNe,"This class cannot be instantiated directly using "),Mhe=n(fNe,"CODE",{});var Zct=s(Mhe);Ozo=r(Zct,"__init__()"),Zct.forEach(t),Vzo=r(fNe," (throws an error)."),fNe.forEach(t),Xzo=i(Ks),ht=n(Ks,"DIV",{class:!0});var vA=s(ht);T(yL.$$.fragment,vA),zzo=i(vA),Ehe=n(vA,"P",{});var eft=s(Ehe);Qzo=r(eft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eft.forEach(t),Wzo=i(vA),nd=n(vA,"P",{});var EK=s(nd);Hzo=r(EK,`Note:
Loading a model from its configuration file does `),Che=n(EK,"STRONG",{});var oft=s(Che);Uzo=r(oft,"not"),oft.forEach(t),Jzo=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(EK,"A",{href:!0});var rft=s(xV);Yzo=r(rft,"from_pretrained()"),rft.forEach(t),Kzo=r(EK," to load the model weights."),EK.forEach(t),Zzo=i(vA),T(Q2.$$.fragment,vA),vA.forEach(t),eQo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(LL.$$.fragment,fa),oQo=i(fa),whe=n(fa,"P",{});var tft=s(whe);rQo=r(tft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tft.forEach(t),tQo=i(fa),Na=n(fa,"P",{});var FA=s(Na);aQo=r(FA,"The model class to instantiate is selected based on the "),Ahe=n(FA,"CODE",{});var aft=s(Ahe);nQo=r(aft,"model_type"),aft.forEach(t),sQo=r(FA,` property of the config object (either
passed as an argument or loaded from `),yhe=n(FA,"CODE",{});var nft=s(yhe);lQo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),iQo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=n(FA,"CODE",{});var sft=s(Lhe);dQo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),cQo=r(FA,":"),FA.forEach(t),fQo=i(fa),xhe=n(fa,"UL",{});var lft=s(xhe);W2=n(lft,"LI",{});var W7e=s(W2);$he=n(W7e,"STRONG",{});var ift=s($he);mQo=r(ift,"vision-encoder-decoder"),ift.forEach(t),gQo=r(W7e," \u2014 "),$V=n(W7e,"A",{href:!0});var dft=s($V);hQo=r(dft,"VisionEncoderDecoderModel"),dft.forEach(t),pQo=r(W7e," (Vision Encoder decoder model)"),W7e.forEach(t),lft.forEach(t),uQo=i(fa),H2=n(fa,"P",{});var H7e=s(H2);_Qo=r(H7e,"The model is set in evaluation mode by default using "),khe=n(H7e,"CODE",{});var cft=s(khe);bQo=r(cft,"model.eval()"),cft.forEach(t),vQo=r(H7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=n(H7e,"CODE",{});var fft=s(She);FQo=r(fft,"model.train()"),fft.forEach(t),H7e.forEach(t),TQo=i(fa),T(U2.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),iIe=i(f),sd=n(f,"H2",{class:!0});var mNe=s(sd);J2=n(mNe,"A",{id:!0,class:!0,href:!0});var mft=s(J2);Rhe=n(mft,"SPAN",{});var gft=s(Rhe);T(xL.$$.fragment,gft),gft.forEach(t),mft.forEach(t),MQo=i(mNe),Bhe=n(mNe,"SPAN",{});var hft=s(Bhe);EQo=r(hft,"AutoModelForAudioClassification"),hft.forEach(t),mNe.forEach(t),dIe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T($L.$$.fragment,Zs),CQo=i(Zs),ld=n(Zs,"P",{});var CK=s(ld);wQo=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),kV=n(CK,"A",{href:!0});var pft=s(kV);AQo=r(pft,"from_pretrained()"),pft.forEach(t),yQo=r(CK," class method or the "),SV=n(CK,"A",{href:!0});var uft=s(SV);LQo=r(uft,"from_config()"),uft.forEach(t),xQo=r(CK,` class
method.`),CK.forEach(t),$Qo=i(Zs),kL=n(Zs,"P",{});var gNe=s(kL);kQo=r(gNe,"This class cannot be instantiated directly using "),Phe=n(gNe,"CODE",{});var _ft=s(Phe);SQo=r(_ft,"__init__()"),_ft.forEach(t),RQo=r(gNe," (throws an error)."),gNe.forEach(t),BQo=i(Zs),pt=n(Zs,"DIV",{class:!0});var TA=s(pt);T(SL.$$.fragment,TA),PQo=i(TA),Ihe=n(TA,"P",{});var bft=s(Ihe);IQo=r(bft,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bft.forEach(t),qQo=i(TA),id=n(TA,"P",{});var wK=s(id);NQo=r(wK,`Note:
Loading a model from its configuration file does `),qhe=n(wK,"STRONG",{});var vft=s(qhe);jQo=r(vft,"not"),vft.forEach(t),DQo=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(wK,"A",{href:!0});var Fft=s(RV);GQo=r(Fft,"from_pretrained()"),Fft.forEach(t),OQo=r(wK," to load the model weights."),wK.forEach(t),VQo=i(TA),T(Y2.$$.fragment,TA),TA.forEach(t),XQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(RL.$$.fragment,ma),zQo=i(ma),Nhe=n(ma,"P",{});var Tft=s(Nhe);QQo=r(Tft,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Tft.forEach(t),WQo=i(ma),ja=n(ma,"P",{});var MA=s(ja);HQo=r(MA,"The model class to instantiate is selected based on the "),jhe=n(MA,"CODE",{});var Mft=s(jhe);UQo=r(Mft,"model_type"),Mft.forEach(t),JQo=r(MA,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(MA,"CODE",{});var Eft=s(Dhe);YQo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),KQo=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(MA,"CODE",{});var Cft=s(Ghe);ZQo=r(Cft,"pretrained_model_name_or_path"),Cft.forEach(t),eWo=r(MA,":"),MA.forEach(t),oWo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);K2=n(bo,"LI",{});var U7e=s(K2);Ohe=n(U7e,"STRONG",{});var wft=s(Ohe);rWo=r(wft,"data2vec-audio"),wft.forEach(t),tWo=r(U7e," \u2014 "),BV=n(U7e,"A",{href:!0});var Aft=s(BV);aWo=r(Aft,"Data2VecAudioForSequenceClassification"),Aft.forEach(t),nWo=r(U7e," (Data2VecAudio model)"),U7e.forEach(t),sWo=i(bo),Z2=n(bo,"LI",{});var J7e=s(Z2);Vhe=n(J7e,"STRONG",{});var yft=s(Vhe);lWo=r(yft,"hubert"),yft.forEach(t),iWo=r(J7e," \u2014 "),PV=n(J7e,"A",{href:!0});var Lft=s(PV);dWo=r(Lft,"HubertForSequenceClassification"),Lft.forEach(t),cWo=r(J7e," (Hubert model)"),J7e.forEach(t),fWo=i(bo),e5=n(bo,"LI",{});var Y7e=s(e5);Xhe=n(Y7e,"STRONG",{});var xft=s(Xhe);mWo=r(xft,"sew"),xft.forEach(t),gWo=r(Y7e," \u2014 "),IV=n(Y7e,"A",{href:!0});var $ft=s(IV);hWo=r($ft,"SEWForSequenceClassification"),$ft.forEach(t),pWo=r(Y7e," (SEW model)"),Y7e.forEach(t),uWo=i(bo),o5=n(bo,"LI",{});var K7e=s(o5);zhe=n(K7e,"STRONG",{});var kft=s(zhe);_Wo=r(kft,"sew-d"),kft.forEach(t),bWo=r(K7e," \u2014 "),qV=n(K7e,"A",{href:!0});var Sft=s(qV);vWo=r(Sft,"SEWDForSequenceClassification"),Sft.forEach(t),FWo=r(K7e," (SEW-D model)"),K7e.forEach(t),TWo=i(bo),r5=n(bo,"LI",{});var Z7e=s(r5);Qhe=n(Z7e,"STRONG",{});var Rft=s(Qhe);MWo=r(Rft,"unispeech"),Rft.forEach(t),EWo=r(Z7e," \u2014 "),NV=n(Z7e,"A",{href:!0});var Bft=s(NV);CWo=r(Bft,"UniSpeechForSequenceClassification"),Bft.forEach(t),wWo=r(Z7e," (UniSpeech model)"),Z7e.forEach(t),AWo=i(bo),t5=n(bo,"LI",{});var e9e=s(t5);Whe=n(e9e,"STRONG",{});var Pft=s(Whe);yWo=r(Pft,"unispeech-sat"),Pft.forEach(t),LWo=r(e9e," \u2014 "),jV=n(e9e,"A",{href:!0});var Ift=s(jV);xWo=r(Ift,"UniSpeechSatForSequenceClassification"),Ift.forEach(t),$Wo=r(e9e," (UniSpeechSat model)"),e9e.forEach(t),kWo=i(bo),a5=n(bo,"LI",{});var o9e=s(a5);Hhe=n(o9e,"STRONG",{});var qft=s(Hhe);SWo=r(qft,"wav2vec2"),qft.forEach(t),RWo=r(o9e," \u2014 "),DV=n(o9e,"A",{href:!0});var Nft=s(DV);BWo=r(Nft,"Wav2Vec2ForSequenceClassification"),Nft.forEach(t),PWo=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),IWo=i(bo),n5=n(bo,"LI",{});var r9e=s(n5);Uhe=n(r9e,"STRONG",{});var jft=s(Uhe);qWo=r(jft,"wavlm"),jft.forEach(t),NWo=r(r9e," \u2014 "),GV=n(r9e,"A",{href:!0});var Dft=s(GV);jWo=r(Dft,"WavLMForSequenceClassification"),Dft.forEach(t),DWo=r(r9e," (WavLM model)"),r9e.forEach(t),bo.forEach(t),GWo=i(ma),s5=n(ma,"P",{});var t9e=s(s5);OWo=r(t9e,"The model is set in evaluation mode by default using "),Jhe=n(t9e,"CODE",{});var Gft=s(Jhe);VWo=r(Gft,"model.eval()"),Gft.forEach(t),XWo=r(t9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(t9e,"CODE",{});var Oft=s(Yhe);zWo=r(Oft,"model.train()"),Oft.forEach(t),t9e.forEach(t),QWo=i(ma),T(l5.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),cIe=i(f),dd=n(f,"H2",{class:!0});var hNe=s(dd);i5=n(hNe,"A",{id:!0,class:!0,href:!0});var Vft=s(i5);Khe=n(Vft,"SPAN",{});var Xft=s(Khe);T(BL.$$.fragment,Xft),Xft.forEach(t),Vft.forEach(t),WWo=i(hNe),Zhe=n(hNe,"SPAN",{});var zft=s(Zhe);HWo=r(zft,"AutoModelForAudioFrameClassification"),zft.forEach(t),hNe.forEach(t),fIe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(PL.$$.fragment,el),UWo=i(el),cd=n(el,"P",{});var AK=s(cd);JWo=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),OV=n(AK,"A",{href:!0});var Qft=s(OV);YWo=r(Qft,"from_pretrained()"),Qft.forEach(t),KWo=r(AK," class method or the "),VV=n(AK,"A",{href:!0});var Wft=s(VV);ZWo=r(Wft,"from_config()"),Wft.forEach(t),eHo=r(AK,` class
method.`),AK.forEach(t),oHo=i(el),IL=n(el,"P",{});var pNe=s(IL);rHo=r(pNe,"This class cannot be instantiated directly using "),epe=n(pNe,"CODE",{});var Hft=s(epe);tHo=r(Hft,"__init__()"),Hft.forEach(t),aHo=r(pNe," (throws an error)."),pNe.forEach(t),nHo=i(el),ut=n(el,"DIV",{class:!0});var EA=s(ut);T(qL.$$.fragment,EA),sHo=i(EA),ope=n(EA,"P",{});var Uft=s(ope);lHo=r(Uft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Uft.forEach(t),iHo=i(EA),fd=n(EA,"P",{});var yK=s(fd);dHo=r(yK,`Note:
Loading a model from its configuration file does `),rpe=n(yK,"STRONG",{});var Jft=s(rpe);cHo=r(Jft,"not"),Jft.forEach(t),fHo=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(yK,"A",{href:!0});var Yft=s(XV);mHo=r(Yft,"from_pretrained()"),Yft.forEach(t),gHo=r(yK," to load the model weights."),yK.forEach(t),hHo=i(EA),T(d5.$$.fragment,EA),EA.forEach(t),pHo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(NL.$$.fragment,ga),uHo=i(ga),tpe=n(ga,"P",{});var Kft=s(tpe);_Ho=r(Kft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Kft.forEach(t),bHo=i(ga),Da=n(ga,"P",{});var CA=s(Da);vHo=r(CA,"The model class to instantiate is selected based on the "),ape=n(CA,"CODE",{});var Zft=s(ape);FHo=r(Zft,"model_type"),Zft.forEach(t),THo=r(CA,` property of the config object (either
passed as an argument or loaded from `),npe=n(CA,"CODE",{});var emt=s(npe);MHo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),EHo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(CA,"CODE",{});var omt=s(spe);CHo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),wHo=r(CA,":"),CA.forEach(t),AHo=i(ga),Ga=n(ga,"UL",{});var wA=s(Ga);c5=n(wA,"LI",{});var a9e=s(c5);lpe=n(a9e,"STRONG",{});var rmt=s(lpe);yHo=r(rmt,"data2vec-audio"),rmt.forEach(t),LHo=r(a9e," \u2014 "),zV=n(a9e,"A",{href:!0});var tmt=s(zV);xHo=r(tmt,"Data2VecAudioForAudioFrameClassification"),tmt.forEach(t),$Ho=r(a9e," (Data2VecAudio model)"),a9e.forEach(t),kHo=i(wA),f5=n(wA,"LI",{});var n9e=s(f5);ipe=n(n9e,"STRONG",{});var amt=s(ipe);SHo=r(amt,"unispeech-sat"),amt.forEach(t),RHo=r(n9e," \u2014 "),QV=n(n9e,"A",{href:!0});var nmt=s(QV);BHo=r(nmt,"UniSpeechSatForAudioFrameClassification"),nmt.forEach(t),PHo=r(n9e," (UniSpeechSat model)"),n9e.forEach(t),IHo=i(wA),m5=n(wA,"LI",{});var s9e=s(m5);dpe=n(s9e,"STRONG",{});var smt=s(dpe);qHo=r(smt,"wav2vec2"),smt.forEach(t),NHo=r(s9e," \u2014 "),WV=n(s9e,"A",{href:!0});var lmt=s(WV);jHo=r(lmt,"Wav2Vec2ForAudioFrameClassification"),lmt.forEach(t),DHo=r(s9e," (Wav2Vec2 model)"),s9e.forEach(t),GHo=i(wA),g5=n(wA,"LI",{});var l9e=s(g5);cpe=n(l9e,"STRONG",{});var imt=s(cpe);OHo=r(imt,"wavlm"),imt.forEach(t),VHo=r(l9e," \u2014 "),HV=n(l9e,"A",{href:!0});var dmt=s(HV);XHo=r(dmt,"WavLMForAudioFrameClassification"),dmt.forEach(t),zHo=r(l9e," (WavLM model)"),l9e.forEach(t),wA.forEach(t),QHo=i(ga),h5=n(ga,"P",{});var i9e=s(h5);WHo=r(i9e,"The model is set in evaluation mode by default using "),fpe=n(i9e,"CODE",{});var cmt=s(fpe);HHo=r(cmt,"model.eval()"),cmt.forEach(t),UHo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(i9e,"CODE",{});var fmt=s(mpe);JHo=r(fmt,"model.train()"),fmt.forEach(t),i9e.forEach(t),YHo=i(ga),T(p5.$$.fragment,ga),ga.forEach(t),el.forEach(t),mIe=i(f),md=n(f,"H2",{class:!0});var uNe=s(md);u5=n(uNe,"A",{id:!0,class:!0,href:!0});var mmt=s(u5);gpe=n(mmt,"SPAN",{});var gmt=s(gpe);T(jL.$$.fragment,gmt),gmt.forEach(t),mmt.forEach(t),KHo=i(uNe),hpe=n(uNe,"SPAN",{});var hmt=s(hpe);ZHo=r(hmt,"AutoModelForCTC"),hmt.forEach(t),uNe.forEach(t),gIe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(DL.$$.fragment,ol),eUo=i(ol),gd=n(ol,"P",{});var LK=s(gd);oUo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),UV=n(LK,"A",{href:!0});var pmt=s(UV);rUo=r(pmt,"from_pretrained()"),pmt.forEach(t),tUo=r(LK," class method or the "),JV=n(LK,"A",{href:!0});var umt=s(JV);aUo=r(umt,"from_config()"),umt.forEach(t),nUo=r(LK,` class
method.`),LK.forEach(t),sUo=i(ol),GL=n(ol,"P",{});var _Ne=s(GL);lUo=r(_Ne,"This class cannot be instantiated directly using "),ppe=n(_Ne,"CODE",{});var _mt=s(ppe);iUo=r(_mt,"__init__()"),_mt.forEach(t),dUo=r(_Ne," (throws an error)."),_Ne.forEach(t),cUo=i(ol),_t=n(ol,"DIV",{class:!0});var AA=s(_t);T(OL.$$.fragment,AA),fUo=i(AA),upe=n(AA,"P",{});var bmt=s(upe);mUo=r(bmt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bmt.forEach(t),gUo=i(AA),hd=n(AA,"P",{});var xK=s(hd);hUo=r(xK,`Note:
Loading a model from its configuration file does `),_pe=n(xK,"STRONG",{});var vmt=s(_pe);pUo=r(vmt,"not"),vmt.forEach(t),uUo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(xK,"A",{href:!0});var Fmt=s(YV);_Uo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),bUo=r(xK," to load the model weights."),xK.forEach(t),vUo=i(AA),T(_5.$$.fragment,AA),AA.forEach(t),FUo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(VL.$$.fragment,ha),TUo=i(ha),bpe=n(ha,"P",{});var Tmt=s(bpe);MUo=r(Tmt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Tmt.forEach(t),EUo=i(ha),Oa=n(ha,"P",{});var yA=s(Oa);CUo=r(yA,"The model class to instantiate is selected based on the "),vpe=n(yA,"CODE",{});var Mmt=s(vpe);wUo=r(Mmt,"model_type"),Mmt.forEach(t),AUo=r(yA,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(yA,"CODE",{});var Emt=s(Fpe);yUo=r(Emt,"pretrained_model_name_or_path"),Emt.forEach(t),LUo=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(yA,"CODE",{});var Cmt=s(Tpe);xUo=r(Cmt,"pretrained_model_name_or_path"),Cmt.forEach(t),$Uo=r(yA,":"),yA.forEach(t),kUo=i(ha),je=n(ha,"UL",{});var vo=s(je);b5=n(vo,"LI",{});var d9e=s(b5);Mpe=n(d9e,"STRONG",{});var wmt=s(Mpe);SUo=r(wmt,"data2vec-audio"),wmt.forEach(t),RUo=r(d9e," \u2014 "),KV=n(d9e,"A",{href:!0});var Amt=s(KV);BUo=r(Amt,"Data2VecAudioForCTC"),Amt.forEach(t),PUo=r(d9e," (Data2VecAudio model)"),d9e.forEach(t),IUo=i(vo),v5=n(vo,"LI",{});var c9e=s(v5);Epe=n(c9e,"STRONG",{});var ymt=s(Epe);qUo=r(ymt,"hubert"),ymt.forEach(t),NUo=r(c9e," \u2014 "),ZV=n(c9e,"A",{href:!0});var Lmt=s(ZV);jUo=r(Lmt,"HubertForCTC"),Lmt.forEach(t),DUo=r(c9e," (Hubert model)"),c9e.forEach(t),GUo=i(vo),F5=n(vo,"LI",{});var f9e=s(F5);Cpe=n(f9e,"STRONG",{});var xmt=s(Cpe);OUo=r(xmt,"sew"),xmt.forEach(t),VUo=r(f9e," \u2014 "),eX=n(f9e,"A",{href:!0});var $mt=s(eX);XUo=r($mt,"SEWForCTC"),$mt.forEach(t),zUo=r(f9e," (SEW model)"),f9e.forEach(t),QUo=i(vo),T5=n(vo,"LI",{});var m9e=s(T5);wpe=n(m9e,"STRONG",{});var kmt=s(wpe);WUo=r(kmt,"sew-d"),kmt.forEach(t),HUo=r(m9e," \u2014 "),oX=n(m9e,"A",{href:!0});var Smt=s(oX);UUo=r(Smt,"SEWDForCTC"),Smt.forEach(t),JUo=r(m9e," (SEW-D model)"),m9e.forEach(t),YUo=i(vo),M5=n(vo,"LI",{});var g9e=s(M5);Ape=n(g9e,"STRONG",{});var Rmt=s(Ape);KUo=r(Rmt,"unispeech"),Rmt.forEach(t),ZUo=r(g9e," \u2014 "),rX=n(g9e,"A",{href:!0});var Bmt=s(rX);eJo=r(Bmt,"UniSpeechForCTC"),Bmt.forEach(t),oJo=r(g9e," (UniSpeech model)"),g9e.forEach(t),rJo=i(vo),E5=n(vo,"LI",{});var h9e=s(E5);ype=n(h9e,"STRONG",{});var Pmt=s(ype);tJo=r(Pmt,"unispeech-sat"),Pmt.forEach(t),aJo=r(h9e," \u2014 "),tX=n(h9e,"A",{href:!0});var Imt=s(tX);nJo=r(Imt,"UniSpeechSatForCTC"),Imt.forEach(t),sJo=r(h9e," (UniSpeechSat model)"),h9e.forEach(t),lJo=i(vo),C5=n(vo,"LI",{});var p9e=s(C5);Lpe=n(p9e,"STRONG",{});var qmt=s(Lpe);iJo=r(qmt,"wav2vec2"),qmt.forEach(t),dJo=r(p9e," \u2014 "),aX=n(p9e,"A",{href:!0});var Nmt=s(aX);cJo=r(Nmt,"Wav2Vec2ForCTC"),Nmt.forEach(t),fJo=r(p9e," (Wav2Vec2 model)"),p9e.forEach(t),mJo=i(vo),w5=n(vo,"LI",{});var u9e=s(w5);xpe=n(u9e,"STRONG",{});var jmt=s(xpe);gJo=r(jmt,"wavlm"),jmt.forEach(t),hJo=r(u9e," \u2014 "),nX=n(u9e,"A",{href:!0});var Dmt=s(nX);pJo=r(Dmt,"WavLMForCTC"),Dmt.forEach(t),uJo=r(u9e," (WavLM model)"),u9e.forEach(t),vo.forEach(t),_Jo=i(ha),A5=n(ha,"P",{});var _9e=s(A5);bJo=r(_9e,"The model is set in evaluation mode by default using "),$pe=n(_9e,"CODE",{});var Gmt=s($pe);vJo=r(Gmt,"model.eval()"),Gmt.forEach(t),FJo=r(_9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(_9e,"CODE",{});var Omt=s(kpe);TJo=r(Omt,"model.train()"),Omt.forEach(t),_9e.forEach(t),MJo=i(ha),T(y5.$$.fragment,ha),ha.forEach(t),ol.forEach(t),hIe=i(f),pd=n(f,"H2",{class:!0});var bNe=s(pd);L5=n(bNe,"A",{id:!0,class:!0,href:!0});var Vmt=s(L5);Spe=n(Vmt,"SPAN",{});var Xmt=s(Spe);T(XL.$$.fragment,Xmt),Xmt.forEach(t),Vmt.forEach(t),EJo=i(bNe),Rpe=n(bNe,"SPAN",{});var zmt=s(Rpe);CJo=r(zmt,"AutoModelForSpeechSeq2Seq"),zmt.forEach(t),bNe.forEach(t),pIe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(zL.$$.fragment,rl),wJo=i(rl),ud=n(rl,"P",{});var $K=s(ud);AJo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),sX=n($K,"A",{href:!0});var Qmt=s(sX);yJo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),LJo=r($K," class method or the "),lX=n($K,"A",{href:!0});var Wmt=s(lX);xJo=r(Wmt,"from_config()"),Wmt.forEach(t),$Jo=r($K,` class
method.`),$K.forEach(t),kJo=i(rl),QL=n(rl,"P",{});var vNe=s(QL);SJo=r(vNe,"This class cannot be instantiated directly using "),Bpe=n(vNe,"CODE",{});var Hmt=s(Bpe);RJo=r(Hmt,"__init__()"),Hmt.forEach(t),BJo=r(vNe," (throws an error)."),vNe.forEach(t),PJo=i(rl),bt=n(rl,"DIV",{class:!0});var LA=s(bt);T(WL.$$.fragment,LA),IJo=i(LA),Ppe=n(LA,"P",{});var Umt=s(Ppe);qJo=r(Umt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Umt.forEach(t),NJo=i(LA),_d=n(LA,"P",{});var kK=s(_d);jJo=r(kK,`Note:
Loading a model from its configuration file does `),Ipe=n(kK,"STRONG",{});var Jmt=s(Ipe);DJo=r(Jmt,"not"),Jmt.forEach(t),GJo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(kK,"A",{href:!0});var Ymt=s(iX);OJo=r(Ymt,"from_pretrained()"),Ymt.forEach(t),VJo=r(kK," to load the model weights."),kK.forEach(t),XJo=i(LA),T(x5.$$.fragment,LA),LA.forEach(t),zJo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(HL.$$.fragment,pa),QJo=i(pa),qpe=n(pa,"P",{});var Kmt=s(qpe);WJo=r(Kmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Kmt.forEach(t),HJo=i(pa),Va=n(pa,"P",{});var xA=s(Va);UJo=r(xA,"The model class to instantiate is selected based on the "),Npe=n(xA,"CODE",{});var Zmt=s(Npe);JJo=r(Zmt,"model_type"),Zmt.forEach(t),YJo=r(xA,` property of the config object (either
passed as an argument or loaded from `),jpe=n(xA,"CODE",{});var egt=s(jpe);KJo=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),ZJo=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(xA,"CODE",{});var ogt=s(Dpe);eYo=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),oYo=r(xA,":"),xA.forEach(t),rYo=i(pa),UL=n(pa,"UL",{});var FNe=s(UL);$5=n(FNe,"LI",{});var b9e=s($5);Gpe=n(b9e,"STRONG",{});var rgt=s(Gpe);tYo=r(rgt,"speech-encoder-decoder"),rgt.forEach(t),aYo=r(b9e," \u2014 "),dX=n(b9e,"A",{href:!0});var tgt=s(dX);nYo=r(tgt,"SpeechEncoderDecoderModel"),tgt.forEach(t),sYo=r(b9e," (Speech Encoder decoder model)"),b9e.forEach(t),lYo=i(FNe),k5=n(FNe,"LI",{});var v9e=s(k5);Ope=n(v9e,"STRONG",{});var agt=s(Ope);iYo=r(agt,"speech_to_text"),agt.forEach(t),dYo=r(v9e," \u2014 "),cX=n(v9e,"A",{href:!0});var ngt=s(cX);cYo=r(ngt,"Speech2TextForConditionalGeneration"),ngt.forEach(t),fYo=r(v9e," (Speech2Text model)"),v9e.forEach(t),FNe.forEach(t),mYo=i(pa),S5=n(pa,"P",{});var F9e=s(S5);gYo=r(F9e,"The model is set in evaluation mode by default using "),Vpe=n(F9e,"CODE",{});var sgt=s(Vpe);hYo=r(sgt,"model.eval()"),sgt.forEach(t),pYo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(F9e,"CODE",{});var lgt=s(Xpe);uYo=r(lgt,"model.train()"),lgt.forEach(t),F9e.forEach(t),_Yo=i(pa),T(R5.$$.fragment,pa),pa.forEach(t),rl.forEach(t),uIe=i(f),bd=n(f,"H2",{class:!0});var TNe=s(bd);B5=n(TNe,"A",{id:!0,class:!0,href:!0});var igt=s(B5);zpe=n(igt,"SPAN",{});var dgt=s(zpe);T(JL.$$.fragment,dgt),dgt.forEach(t),igt.forEach(t),bYo=i(TNe),Qpe=n(TNe,"SPAN",{});var cgt=s(Qpe);vYo=r(cgt,"AutoModelForAudioXVector"),cgt.forEach(t),TNe.forEach(t),_Ie=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(YL.$$.fragment,tl),FYo=i(tl),vd=n(tl,"P",{});var SK=s(vd);TYo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),fX=n(SK,"A",{href:!0});var fgt=s(fX);MYo=r(fgt,"from_pretrained()"),fgt.forEach(t),EYo=r(SK," class method or the "),mX=n(SK,"A",{href:!0});var mgt=s(mX);CYo=r(mgt,"from_config()"),mgt.forEach(t),wYo=r(SK,` class
method.`),SK.forEach(t),AYo=i(tl),KL=n(tl,"P",{});var MNe=s(KL);yYo=r(MNe,"This class cannot be instantiated directly using "),Wpe=n(MNe,"CODE",{});var ggt=s(Wpe);LYo=r(ggt,"__init__()"),ggt.forEach(t),xYo=r(MNe," (throws an error)."),MNe.forEach(t),$Yo=i(tl),vt=n(tl,"DIV",{class:!0});var $A=s(vt);T(ZL.$$.fragment,$A),kYo=i($A),Hpe=n($A,"P",{});var hgt=s(Hpe);SYo=r(hgt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),hgt.forEach(t),RYo=i($A),Fd=n($A,"P",{});var RK=s(Fd);BYo=r(RK,`Note:
Loading a model from its configuration file does `),Upe=n(RK,"STRONG",{});var pgt=s(Upe);PYo=r(pgt,"not"),pgt.forEach(t),IYo=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(RK,"A",{href:!0});var ugt=s(gX);qYo=r(ugt,"from_pretrained()"),ugt.forEach(t),NYo=r(RK," to load the model weights."),RK.forEach(t),jYo=i($A),T(P5.$$.fragment,$A),$A.forEach(t),DYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(e8.$$.fragment,ua),GYo=i(ua),Jpe=n(ua,"P",{});var _gt=s(Jpe);OYo=r(_gt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_gt.forEach(t),VYo=i(ua),Xa=n(ua,"P",{});var kA=s(Xa);XYo=r(kA,"The model class to instantiate is selected based on the "),Ype=n(kA,"CODE",{});var bgt=s(Ype);zYo=r(bgt,"model_type"),bgt.forEach(t),QYo=r(kA,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(kA,"CODE",{});var vgt=s(Kpe);WYo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),HYo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(kA,"CODE",{});var Fgt=s(Zpe);UYo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),JYo=r(kA,":"),kA.forEach(t),YYo=i(ua),za=n(ua,"UL",{});var SA=s(za);I5=n(SA,"LI",{});var T9e=s(I5);eue=n(T9e,"STRONG",{});var Tgt=s(eue);KYo=r(Tgt,"data2vec-audio"),Tgt.forEach(t),ZYo=r(T9e," \u2014 "),hX=n(T9e,"A",{href:!0});var Mgt=s(hX);eKo=r(Mgt,"Data2VecAudioForXVector"),Mgt.forEach(t),oKo=r(T9e," (Data2VecAudio model)"),T9e.forEach(t),rKo=i(SA),q5=n(SA,"LI",{});var M9e=s(q5);oue=n(M9e,"STRONG",{});var Egt=s(oue);tKo=r(Egt,"unispeech-sat"),Egt.forEach(t),aKo=r(M9e," \u2014 "),pX=n(M9e,"A",{href:!0});var Cgt=s(pX);nKo=r(Cgt,"UniSpeechSatForXVector"),Cgt.forEach(t),sKo=r(M9e," (UniSpeechSat model)"),M9e.forEach(t),lKo=i(SA),N5=n(SA,"LI",{});var E9e=s(N5);rue=n(E9e,"STRONG",{});var wgt=s(rue);iKo=r(wgt,"wav2vec2"),wgt.forEach(t),dKo=r(E9e," \u2014 "),uX=n(E9e,"A",{href:!0});var Agt=s(uX);cKo=r(Agt,"Wav2Vec2ForXVector"),Agt.forEach(t),fKo=r(E9e," (Wav2Vec2 model)"),E9e.forEach(t),mKo=i(SA),j5=n(SA,"LI",{});var C9e=s(j5);tue=n(C9e,"STRONG",{});var ygt=s(tue);gKo=r(ygt,"wavlm"),ygt.forEach(t),hKo=r(C9e," \u2014 "),_X=n(C9e,"A",{href:!0});var Lgt=s(_X);pKo=r(Lgt,"WavLMForXVector"),Lgt.forEach(t),uKo=r(C9e," (WavLM model)"),C9e.forEach(t),SA.forEach(t),_Ko=i(ua),D5=n(ua,"P",{});var w9e=s(D5);bKo=r(w9e,"The model is set in evaluation mode by default using "),aue=n(w9e,"CODE",{});var xgt=s(aue);vKo=r(xgt,"model.eval()"),xgt.forEach(t),FKo=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nue=n(w9e,"CODE",{});var $gt=s(nue);TKo=r($gt,"model.train()"),$gt.forEach(t),w9e.forEach(t),MKo=i(ua),T(G5.$$.fragment,ua),ua.forEach(t),tl.forEach(t),bIe=i(f),Td=n(f,"H2",{class:!0});var ENe=s(Td);O5=n(ENe,"A",{id:!0,class:!0,href:!0});var kgt=s(O5);sue=n(kgt,"SPAN",{});var Sgt=s(sue);T(o8.$$.fragment,Sgt),Sgt.forEach(t),kgt.forEach(t),EKo=i(ENe),lue=n(ENe,"SPAN",{});var Rgt=s(lue);CKo=r(Rgt,"AutoModelForMaskedImageModeling"),Rgt.forEach(t),ENe.forEach(t),vIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(r8.$$.fragment,al),wKo=i(al),Md=n(al,"P",{});var BK=s(Md);AKo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),bX=n(BK,"A",{href:!0});var Bgt=s(bX);yKo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),LKo=r(BK," class method or the "),vX=n(BK,"A",{href:!0});var Pgt=s(vX);xKo=r(Pgt,"from_config()"),Pgt.forEach(t),$Ko=r(BK,` class
method.`),BK.forEach(t),kKo=i(al),t8=n(al,"P",{});var CNe=s(t8);SKo=r(CNe,"This class cannot be instantiated directly using "),iue=n(CNe,"CODE",{});var Igt=s(iue);RKo=r(Igt,"__init__()"),Igt.forEach(t),BKo=r(CNe," (throws an error)."),CNe.forEach(t),PKo=i(al),Ft=n(al,"DIV",{class:!0});var RA=s(Ft);T(a8.$$.fragment,RA),IKo=i(RA),due=n(RA,"P",{});var qgt=s(due);qKo=r(qgt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),qgt.forEach(t),NKo=i(RA),Ed=n(RA,"P",{});var PK=s(Ed);jKo=r(PK,`Note:
Loading a model from its configuration file does `),cue=n(PK,"STRONG",{});var Ngt=s(cue);DKo=r(Ngt,"not"),Ngt.forEach(t),GKo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FX=n(PK,"A",{href:!0});var jgt=s(FX);OKo=r(jgt,"from_pretrained()"),jgt.forEach(t),VKo=r(PK," to load the model weights."),PK.forEach(t),XKo=i(RA),T(V5.$$.fragment,RA),RA.forEach(t),zKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(n8.$$.fragment,_a),QKo=i(_a),fue=n(_a,"P",{});var Dgt=s(fue);WKo=r(Dgt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Dgt.forEach(t),HKo=i(_a),Qa=n(_a,"P",{});var BA=s(Qa);UKo=r(BA,"The model class to instantiate is selected based on the "),mue=n(BA,"CODE",{});var Ggt=s(mue);JKo=r(Ggt,"model_type"),Ggt.forEach(t),YKo=r(BA,` property of the config object (either
passed as an argument or loaded from `),gue=n(BA,"CODE",{});var Ogt=s(gue);KKo=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),ZKo=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hue=n(BA,"CODE",{});var Vgt=s(hue);eZo=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),oZo=r(BA,":"),BA.forEach(t),rZo=i(_a),Cd=n(_a,"UL",{});var IK=s(Cd);X5=n(IK,"LI",{});var A9e=s(X5);pue=n(A9e,"STRONG",{});var Xgt=s(pue);tZo=r(Xgt,"deit"),Xgt.forEach(t),aZo=r(A9e," \u2014 "),TX=n(A9e,"A",{href:!0});var zgt=s(TX);nZo=r(zgt,"DeiTForMaskedImageModeling"),zgt.forEach(t),sZo=r(A9e," (DeiT model)"),A9e.forEach(t),lZo=i(IK),z5=n(IK,"LI",{});var y9e=s(z5);uue=n(y9e,"STRONG",{});var Qgt=s(uue);iZo=r(Qgt,"swin"),Qgt.forEach(t),dZo=r(y9e," \u2014 "),MX=n(y9e,"A",{href:!0});var Wgt=s(MX);cZo=r(Wgt,"SwinForMaskedImageModeling"),Wgt.forEach(t),fZo=r(y9e," (Swin model)"),y9e.forEach(t),mZo=i(IK),Q5=n(IK,"LI",{});var L9e=s(Q5);_ue=n(L9e,"STRONG",{});var Hgt=s(_ue);gZo=r(Hgt,"vit"),Hgt.forEach(t),hZo=r(L9e," \u2014 "),EX=n(L9e,"A",{href:!0});var Ugt=s(EX);pZo=r(Ugt,"ViTForMaskedImageModeling"),Ugt.forEach(t),uZo=r(L9e," (ViT model)"),L9e.forEach(t),IK.forEach(t),_Zo=i(_a),W5=n(_a,"P",{});var x9e=s(W5);bZo=r(x9e,"The model is set in evaluation mode by default using "),bue=n(x9e,"CODE",{});var Jgt=s(bue);vZo=r(Jgt,"model.eval()"),Jgt.forEach(t),FZo=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(x9e,"CODE",{});var Ygt=s(vue);TZo=r(Ygt,"model.train()"),Ygt.forEach(t),x9e.forEach(t),MZo=i(_a),T(H5.$$.fragment,_a),_a.forEach(t),al.forEach(t),FIe=i(f),wd=n(f,"H2",{class:!0});var wNe=s(wd);U5=n(wNe,"A",{id:!0,class:!0,href:!0});var Kgt=s(U5);Fue=n(Kgt,"SPAN",{});var Zgt=s(Fue);T(s8.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),EZo=i(wNe),Tue=n(wNe,"SPAN",{});var eht=s(Tue);CZo=r(eht,"AutoModelForObjectDetection"),eht.forEach(t),wNe.forEach(t),TIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(l8.$$.fragment,nl),wZo=i(nl),Ad=n(nl,"P",{});var qK=s(Ad);AZo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),CX=n(qK,"A",{href:!0});var oht=s(CX);yZo=r(oht,"from_pretrained()"),oht.forEach(t),LZo=r(qK," class method or the "),wX=n(qK,"A",{href:!0});var rht=s(wX);xZo=r(rht,"from_config()"),rht.forEach(t),$Zo=r(qK,` class
method.`),qK.forEach(t),kZo=i(nl),i8=n(nl,"P",{});var ANe=s(i8);SZo=r(ANe,"This class cannot be instantiated directly using "),Mue=n(ANe,"CODE",{});var tht=s(Mue);RZo=r(tht,"__init__()"),tht.forEach(t),BZo=r(ANe," (throws an error)."),ANe.forEach(t),PZo=i(nl),Tt=n(nl,"DIV",{class:!0});var PA=s(Tt);T(d8.$$.fragment,PA),IZo=i(PA),Eue=n(PA,"P",{});var aht=s(Eue);qZo=r(aht,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),aht.forEach(t),NZo=i(PA),yd=n(PA,"P",{});var NK=s(yd);jZo=r(NK,`Note:
Loading a model from its configuration file does `),Cue=n(NK,"STRONG",{});var nht=s(Cue);DZo=r(nht,"not"),nht.forEach(t),GZo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(NK,"A",{href:!0});var sht=s(AX);OZo=r(sht,"from_pretrained()"),sht.forEach(t),VZo=r(NK," to load the model weights."),NK.forEach(t),XZo=i(PA),T(J5.$$.fragment,PA),PA.forEach(t),zZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(c8.$$.fragment,ba),QZo=i(ba),wue=n(ba,"P",{});var lht=s(wue);WZo=r(lht,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lht.forEach(t),HZo=i(ba),Wa=n(ba,"P",{});var IA=s(Wa);UZo=r(IA,"The model class to instantiate is selected based on the "),Aue=n(IA,"CODE",{});var iht=s(Aue);JZo=r(iht,"model_type"),iht.forEach(t),YZo=r(IA,` property of the config object (either
passed as an argument or loaded from `),yue=n(IA,"CODE",{});var dht=s(yue);KZo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),ZZo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(IA,"CODE",{});var cht=s(Lue);eer=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),oer=r(IA,":"),IA.forEach(t),rer=i(ba),f8=n(ba,"UL",{});var yNe=s(f8);Y5=n(yNe,"LI",{});var $9e=s(Y5);xue=n($9e,"STRONG",{});var fht=s(xue);ter=r(fht,"detr"),fht.forEach(t),aer=r($9e," \u2014 "),yX=n($9e,"A",{href:!0});var mht=s(yX);ner=r(mht,"DetrForObjectDetection"),mht.forEach(t),ser=r($9e," (DETR model)"),$9e.forEach(t),ler=i(yNe),K5=n(yNe,"LI",{});var k9e=s(K5);$ue=n(k9e,"STRONG",{});var ght=s($ue);ier=r(ght,"yolos"),ght.forEach(t),der=r(k9e," \u2014 "),LX=n(k9e,"A",{href:!0});var hht=s(LX);cer=r(hht,"YolosForObjectDetection"),hht.forEach(t),fer=r(k9e," (YOLOS model)"),k9e.forEach(t),yNe.forEach(t),mer=i(ba),Z5=n(ba,"P",{});var S9e=s(Z5);ger=r(S9e,"The model is set in evaluation mode by default using "),kue=n(S9e,"CODE",{});var pht=s(kue);her=r(pht,"model.eval()"),pht.forEach(t),per=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sue=n(S9e,"CODE",{});var uht=s(Sue);uer=r(uht,"model.train()"),uht.forEach(t),S9e.forEach(t),_er=i(ba),T(ev.$$.fragment,ba),ba.forEach(t),nl.forEach(t),MIe=i(f),Ld=n(f,"H2",{class:!0});var LNe=s(Ld);ov=n(LNe,"A",{id:!0,class:!0,href:!0});var _ht=s(ov);Rue=n(_ht,"SPAN",{});var bht=s(Rue);T(m8.$$.fragment,bht),bht.forEach(t),_ht.forEach(t),ber=i(LNe),Bue=n(LNe,"SPAN",{});var vht=s(Bue);ver=r(vht,"AutoModelForImageSegmentation"),vht.forEach(t),LNe.forEach(t),EIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(g8.$$.fragment,sl),Fer=i(sl),xd=n(sl,"P",{});var jK=s(xd);Ter=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),xX=n(jK,"A",{href:!0});var Fht=s(xX);Mer=r(Fht,"from_pretrained()"),Fht.forEach(t),Eer=r(jK," class method or the "),$X=n(jK,"A",{href:!0});var Tht=s($X);Cer=r(Tht,"from_config()"),Tht.forEach(t),wer=r(jK,` class
method.`),jK.forEach(t),Aer=i(sl),h8=n(sl,"P",{});var xNe=s(h8);yer=r(xNe,"This class cannot be instantiated directly using "),Pue=n(xNe,"CODE",{});var Mht=s(Pue);Ler=r(Mht,"__init__()"),Mht.forEach(t),xer=r(xNe," (throws an error)."),xNe.forEach(t),$er=i(sl),Mt=n(sl,"DIV",{class:!0});var qA=s(Mt);T(p8.$$.fragment,qA),ker=i(qA),Iue=n(qA,"P",{});var Eht=s(Iue);Ser=r(Eht,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Eht.forEach(t),Rer=i(qA),$d=n(qA,"P",{});var DK=s($d);Ber=r(DK,`Note:
Loading a model from its configuration file does `),que=n(DK,"STRONG",{});var Cht=s(que);Per=r(Cht,"not"),Cht.forEach(t),Ier=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kX=n(DK,"A",{href:!0});var wht=s(kX);qer=r(wht,"from_pretrained()"),wht.forEach(t),Ner=r(DK," to load the model weights."),DK.forEach(t),jer=i(qA),T(rv.$$.fragment,qA),qA.forEach(t),Der=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(u8.$$.fragment,va),Ger=i(va),Nue=n(va,"P",{});var Aht=s(Nue);Oer=r(Aht,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Aht.forEach(t),Ver=i(va),Ha=n(va,"P",{});var NA=s(Ha);Xer=r(NA,"The model class to instantiate is selected based on the "),jue=n(NA,"CODE",{});var yht=s(jue);zer=r(yht,"model_type"),yht.forEach(t),Qer=r(NA,` property of the config object (either
passed as an argument or loaded from `),Due=n(NA,"CODE",{});var Lht=s(Due);Wer=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),Her=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(NA,"CODE",{});var xht=s(Gue);Uer=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),Jer=r(NA,":"),NA.forEach(t),Yer=i(va),Oue=n(va,"UL",{});var $ht=s(Oue);tv=n($ht,"LI",{});var R9e=s(tv);Vue=n(R9e,"STRONG",{});var kht=s(Vue);Ker=r(kht,"detr"),kht.forEach(t),Zer=r(R9e," \u2014 "),SX=n(R9e,"A",{href:!0});var Sht=s(SX);eor=r(Sht,"DetrForSegmentation"),Sht.forEach(t),oor=r(R9e," (DETR model)"),R9e.forEach(t),$ht.forEach(t),ror=i(va),av=n(va,"P",{});var B9e=s(av);tor=r(B9e,"The model is set in evaluation mode by default using "),Xue=n(B9e,"CODE",{});var Rht=s(Xue);aor=r(Rht,"model.eval()"),Rht.forEach(t),nor=r(B9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(B9e,"CODE",{});var Bht=s(zue);sor=r(Bht,"model.train()"),Bht.forEach(t),B9e.forEach(t),lor=i(va),T(nv.$$.fragment,va),va.forEach(t),sl.forEach(t),CIe=i(f),kd=n(f,"H2",{class:!0});var $Ne=s(kd);sv=n($Ne,"A",{id:!0,class:!0,href:!0});var Pht=s(sv);Que=n(Pht,"SPAN",{});var Iht=s(Que);T(_8.$$.fragment,Iht),Iht.forEach(t),Pht.forEach(t),ior=i($Ne),Wue=n($Ne,"SPAN",{});var qht=s(Wue);dor=r(qht,"AutoModelForSemanticSegmentation"),qht.forEach(t),$Ne.forEach(t),wIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(b8.$$.fragment,ll),cor=i(ll),Sd=n(ll,"P",{});var GK=s(Sd);mor=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),RX=n(GK,"A",{href:!0});var Nht=s(RX);gor=r(Nht,"from_pretrained()"),Nht.forEach(t),hor=r(GK," class method or the "),BX=n(GK,"A",{href:!0});var jht=s(BX);por=r(jht,"from_config()"),jht.forEach(t),uor=r(GK,` class
method.`),GK.forEach(t),_or=i(ll),v8=n(ll,"P",{});var kNe=s(v8);bor=r(kNe,"This class cannot be instantiated directly using "),Hue=n(kNe,"CODE",{});var Dht=s(Hue);vor=r(Dht,"__init__()"),Dht.forEach(t),For=r(kNe," (throws an error)."),kNe.forEach(t),Tor=i(ll),Et=n(ll,"DIV",{class:!0});var jA=s(Et);T(F8.$$.fragment,jA),Mor=i(jA),Uue=n(jA,"P",{});var Ght=s(Uue);Eor=r(Ght,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ght.forEach(t),Cor=i(jA),Rd=n(jA,"P",{});var OK=s(Rd);wor=r(OK,`Note:
Loading a model from its configuration file does `),Jue=n(OK,"STRONG",{});var Oht=s(Jue);Aor=r(Oht,"not"),Oht.forEach(t),yor=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(OK,"A",{href:!0});var Vht=s(PX);Lor=r(Vht,"from_pretrained()"),Vht.forEach(t),xor=r(OK," to load the model weights."),OK.forEach(t),$or=i(jA),T(lv.$$.fragment,jA),jA.forEach(t),kor=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(T8.$$.fragment,Fa),Sor=i(Fa),Yue=n(Fa,"P",{});var Xht=s(Yue);Ror=r(Xht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Xht.forEach(t),Bor=i(Fa),Ua=n(Fa,"P",{});var DA=s(Ua);Por=r(DA,"The model class to instantiate is selected based on the "),Kue=n(DA,"CODE",{});var zht=s(Kue);Ior=r(zht,"model_type"),zht.forEach(t),qor=r(DA,` property of the config object (either
passed as an argument or loaded from `),Zue=n(DA,"CODE",{});var Qht=s(Zue);Nor=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),jor=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(DA,"CODE",{});var Wht=s(e_e);Dor=r(Wht,"pretrained_model_name_or_path"),Wht.forEach(t),Gor=r(DA,":"),DA.forEach(t),Oor=i(Fa),Ja=n(Fa,"UL",{});var GA=s(Ja);iv=n(GA,"LI",{});var P9e=s(iv);o_e=n(P9e,"STRONG",{});var Hht=s(o_e);Vor=r(Hht,"beit"),Hht.forEach(t),Xor=r(P9e," \u2014 "),IX=n(P9e,"A",{href:!0});var Uht=s(IX);zor=r(Uht,"BeitForSemanticSegmentation"),Uht.forEach(t),Qor=r(P9e," (BEiT model)"),P9e.forEach(t),Wor=i(GA),dv=n(GA,"LI",{});var I9e=s(dv);r_e=n(I9e,"STRONG",{});var Jht=s(r_e);Hor=r(Jht,"data2vec-vision"),Jht.forEach(t),Uor=r(I9e," \u2014 "),qX=n(I9e,"A",{href:!0});var Yht=s(qX);Jor=r(Yht,"Data2VecVisionForSemanticSegmentation"),Yht.forEach(t),Yor=r(I9e," (Data2VecVision model)"),I9e.forEach(t),Kor=i(GA),cv=n(GA,"LI",{});var q9e=s(cv);t_e=n(q9e,"STRONG",{});var Kht=s(t_e);Zor=r(Kht,"dpt"),Kht.forEach(t),err=r(q9e," \u2014 "),NX=n(q9e,"A",{href:!0});var Zht=s(NX);orr=r(Zht,"DPTForSemanticSegmentation"),Zht.forEach(t),rrr=r(q9e," (DPT model)"),q9e.forEach(t),trr=i(GA),fv=n(GA,"LI",{});var N9e=s(fv);a_e=n(N9e,"STRONG",{});var ept=s(a_e);arr=r(ept,"segformer"),ept.forEach(t),nrr=r(N9e," \u2014 "),jX=n(N9e,"A",{href:!0});var opt=s(jX);srr=r(opt,"SegformerForSemanticSegmentation"),opt.forEach(t),lrr=r(N9e," (SegFormer model)"),N9e.forEach(t),GA.forEach(t),irr=i(Fa),mv=n(Fa,"P",{});var j9e=s(mv);drr=r(j9e,"The model is set in evaluation mode by default using "),n_e=n(j9e,"CODE",{});var rpt=s(n_e);crr=r(rpt,"model.eval()"),rpt.forEach(t),frr=r(j9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),s_e=n(j9e,"CODE",{});var tpt=s(s_e);mrr=r(tpt,"model.train()"),tpt.forEach(t),j9e.forEach(t),grr=i(Fa),T(gv.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),AIe=i(f),Bd=n(f,"H2",{class:!0});var SNe=s(Bd);hv=n(SNe,"A",{id:!0,class:!0,href:!0});var apt=s(hv);l_e=n(apt,"SPAN",{});var npt=s(l_e);T(M8.$$.fragment,npt),npt.forEach(t),apt.forEach(t),hrr=i(SNe),i_e=n(SNe,"SPAN",{});var spt=s(i_e);prr=r(spt,"AutoModelForInstanceSegmentation"),spt.forEach(t),SNe.forEach(t),yIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(E8.$$.fragment,il),urr=i(il),Pd=n(il,"P",{});var VK=s(Pd);_rr=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),DX=n(VK,"A",{href:!0});var lpt=s(DX);brr=r(lpt,"from_pretrained()"),lpt.forEach(t),vrr=r(VK," class method or the "),GX=n(VK,"A",{href:!0});var ipt=s(GX);Frr=r(ipt,"from_config()"),ipt.forEach(t),Trr=r(VK,` class
method.`),VK.forEach(t),Mrr=i(il),C8=n(il,"P",{});var RNe=s(C8);Err=r(RNe,"This class cannot be instantiated directly using "),d_e=n(RNe,"CODE",{});var dpt=s(d_e);Crr=r(dpt,"__init__()"),dpt.forEach(t),wrr=r(RNe," (throws an error)."),RNe.forEach(t),Arr=i(il),Ct=n(il,"DIV",{class:!0});var OA=s(Ct);T(w8.$$.fragment,OA),yrr=i(OA),c_e=n(OA,"P",{});var cpt=s(c_e);Lrr=r(cpt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cpt.forEach(t),xrr=i(OA),Id=n(OA,"P",{});var XK=s(Id);$rr=r(XK,`Note:
Loading a model from its configuration file does `),f_e=n(XK,"STRONG",{});var fpt=s(f_e);krr=r(fpt,"not"),fpt.forEach(t),Srr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(XK,"A",{href:!0});var mpt=s(OX);Rrr=r(mpt,"from_pretrained()"),mpt.forEach(t),Brr=r(XK," to load the model weights."),XK.forEach(t),Prr=i(OA),T(pv.$$.fragment,OA),OA.forEach(t),Irr=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(A8.$$.fragment,Ta),qrr=i(Ta),m_e=n(Ta,"P",{});var gpt=s(m_e);Nrr=r(gpt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),gpt.forEach(t),jrr=i(Ta),Ya=n(Ta,"P",{});var VA=s(Ya);Drr=r(VA,"The model class to instantiate is selected based on the "),g_e=n(VA,"CODE",{});var hpt=s(g_e);Grr=r(hpt,"model_type"),hpt.forEach(t),Orr=r(VA,` property of the config object (either
passed as an argument or loaded from `),h_e=n(VA,"CODE",{});var ppt=s(h_e);Vrr=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),Xrr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p_e=n(VA,"CODE",{});var upt=s(p_e);zrr=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),Qrr=r(VA,":"),VA.forEach(t),Wrr=i(Ta),u_e=n(Ta,"UL",{});var _pt=s(u_e);uv=n(_pt,"LI",{});var D9e=s(uv);__e=n(D9e,"STRONG",{});var bpt=s(__e);Hrr=r(bpt,"maskformer"),bpt.forEach(t),Urr=r(D9e," \u2014 "),VX=n(D9e,"A",{href:!0});var vpt=s(VX);Jrr=r(vpt,"MaskFormerForInstanceSegmentation"),vpt.forEach(t),Yrr=r(D9e," (MaskFormer model)"),D9e.forEach(t),_pt.forEach(t),Krr=i(Ta),_v=n(Ta,"P",{});var G9e=s(_v);Zrr=r(G9e,"The model is set in evaluation mode by default using "),b_e=n(G9e,"CODE",{});var Fpt=s(b_e);etr=r(Fpt,"model.eval()"),Fpt.forEach(t),otr=r(G9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),v_e=n(G9e,"CODE",{});var Tpt=s(v_e);rtr=r(Tpt,"model.train()"),Tpt.forEach(t),G9e.forEach(t),ttr=i(Ta),T(bv.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),LIe=i(f),qd=n(f,"H2",{class:!0});var BNe=s(qd);vv=n(BNe,"A",{id:!0,class:!0,href:!0});var Mpt=s(vv);F_e=n(Mpt,"SPAN",{});var Ept=s(F_e);T(y8.$$.fragment,Ept),Ept.forEach(t),Mpt.forEach(t),atr=i(BNe),T_e=n(BNe,"SPAN",{});var Cpt=s(T_e);ntr=r(Cpt,"TFAutoModel"),Cpt.forEach(t),BNe.forEach(t),xIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(L8.$$.fragment,dl),str=i(dl),Nd=n(dl,"P",{});var zK=s(Nd);ltr=r(zK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XX=n(zK,"A",{href:!0});var wpt=s(XX);itr=r(wpt,"from_pretrained()"),wpt.forEach(t),dtr=r(zK," class method or the "),zX=n(zK,"A",{href:!0});var Apt=s(zX);ctr=r(Apt,"from_config()"),Apt.forEach(t),ftr=r(zK,` class
method.`),zK.forEach(t),mtr=i(dl),x8=n(dl,"P",{});var PNe=s(x8);gtr=r(PNe,"This class cannot be instantiated directly using "),M_e=n(PNe,"CODE",{});var ypt=s(M_e);htr=r(ypt,"__init__()"),ypt.forEach(t),ptr=r(PNe," (throws an error)."),PNe.forEach(t),utr=i(dl),wt=n(dl,"DIV",{class:!0});var XA=s(wt);T($8.$$.fragment,XA),_tr=i(XA),E_e=n(XA,"P",{});var Lpt=s(E_e);btr=r(Lpt,"Instantiates one of the base model classes of the library from a configuration."),Lpt.forEach(t),vtr=i(XA),jd=n(XA,"P",{});var QK=s(jd);Ftr=r(QK,`Note:
Loading a model from its configuration file does `),C_e=n(QK,"STRONG",{});var xpt=s(C_e);Ttr=r(xpt,"not"),xpt.forEach(t),Mtr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(QK,"A",{href:!0});var $pt=s(QX);Etr=r($pt,"from_pretrained()"),$pt.forEach(t),Ctr=r(QK," to load the model weights."),QK.forEach(t),wtr=i(XA),T(Fv.$$.fragment,XA),XA.forEach(t),Atr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(k8.$$.fragment,cl),ytr=i(cl),w_e=n(cl,"P",{});var kpt=s(w_e);Ltr=r(kpt,"Instantiate one of the base model classes of the library from a pretrained model."),kpt.forEach(t),xtr=i(cl),Ka=n(cl,"P",{});var zA=s(Ka);$tr=r(zA,"The model class to instantiate is selected based on the "),A_e=n(zA,"CODE",{});var Spt=s(A_e);ktr=r(Spt,"model_type"),Spt.forEach(t),Str=r(zA,` property of the config object (either
passed as an argument or loaded from `),y_e=n(zA,"CODE",{});var Rpt=s(y_e);Rtr=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),Btr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L_e=n(zA,"CODE",{});var Bpt=s(L_e);Ptr=r(Bpt,"pretrained_model_name_or_path"),Bpt.forEach(t),Itr=r(zA,":"),zA.forEach(t),qtr=i(cl),j=n(cl,"UL",{});var D=s(j);Tv=n(D,"LI",{});var O9e=s(Tv);x_e=n(O9e,"STRONG",{});var Ppt=s(x_e);Ntr=r(Ppt,"albert"),Ppt.forEach(t),jtr=r(O9e," \u2014 "),WX=n(O9e,"A",{href:!0});var Ipt=s(WX);Dtr=r(Ipt,"TFAlbertModel"),Ipt.forEach(t),Gtr=r(O9e," (ALBERT model)"),O9e.forEach(t),Otr=i(D),Mv=n(D,"LI",{});var V9e=s(Mv);$_e=n(V9e,"STRONG",{});var qpt=s($_e);Vtr=r(qpt,"bart"),qpt.forEach(t),Xtr=r(V9e," \u2014 "),HX=n(V9e,"A",{href:!0});var Npt=s(HX);ztr=r(Npt,"TFBartModel"),Npt.forEach(t),Qtr=r(V9e," (BART model)"),V9e.forEach(t),Wtr=i(D),Ev=n(D,"LI",{});var X9e=s(Ev);k_e=n(X9e,"STRONG",{});var jpt=s(k_e);Htr=r(jpt,"bert"),jpt.forEach(t),Utr=r(X9e," \u2014 "),UX=n(X9e,"A",{href:!0});var Dpt=s(UX);Jtr=r(Dpt,"TFBertModel"),Dpt.forEach(t),Ytr=r(X9e," (BERT model)"),X9e.forEach(t),Ktr=i(D),Cv=n(D,"LI",{});var z9e=s(Cv);S_e=n(z9e,"STRONG",{});var Gpt=s(S_e);Ztr=r(Gpt,"blenderbot"),Gpt.forEach(t),ear=r(z9e," \u2014 "),JX=n(z9e,"A",{href:!0});var Opt=s(JX);oar=r(Opt,"TFBlenderbotModel"),Opt.forEach(t),rar=r(z9e," (Blenderbot model)"),z9e.forEach(t),tar=i(D),wv=n(D,"LI",{});var Q9e=s(wv);R_e=n(Q9e,"STRONG",{});var Vpt=s(R_e);aar=r(Vpt,"blenderbot-small"),Vpt.forEach(t),nar=r(Q9e," \u2014 "),YX=n(Q9e,"A",{href:!0});var Xpt=s(YX);sar=r(Xpt,"TFBlenderbotSmallModel"),Xpt.forEach(t),lar=r(Q9e," (BlenderbotSmall model)"),Q9e.forEach(t),iar=i(D),Av=n(D,"LI",{});var W9e=s(Av);B_e=n(W9e,"STRONG",{});var zpt=s(B_e);dar=r(zpt,"camembert"),zpt.forEach(t),car=r(W9e," \u2014 "),KX=n(W9e,"A",{href:!0});var Qpt=s(KX);far=r(Qpt,"TFCamembertModel"),Qpt.forEach(t),mar=r(W9e," (CamemBERT model)"),W9e.forEach(t),gar=i(D),yv=n(D,"LI",{});var H9e=s(yv);P_e=n(H9e,"STRONG",{});var Wpt=s(P_e);har=r(Wpt,"clip"),Wpt.forEach(t),par=r(H9e," \u2014 "),ZX=n(H9e,"A",{href:!0});var Hpt=s(ZX);uar=r(Hpt,"TFCLIPModel"),Hpt.forEach(t),_ar=r(H9e," (CLIP model)"),H9e.forEach(t),bar=i(D),Lv=n(D,"LI",{});var U9e=s(Lv);I_e=n(U9e,"STRONG",{});var Upt=s(I_e);Far=r(Upt,"convbert"),Upt.forEach(t),Tar=r(U9e," \u2014 "),ez=n(U9e,"A",{href:!0});var Jpt=s(ez);Mar=r(Jpt,"TFConvBertModel"),Jpt.forEach(t),Ear=r(U9e," (ConvBERT model)"),U9e.forEach(t),Car=i(D),xv=n(D,"LI",{});var J9e=s(xv);q_e=n(J9e,"STRONG",{});var Ypt=s(q_e);war=r(Ypt,"convnext"),Ypt.forEach(t),Aar=r(J9e," \u2014 "),oz=n(J9e,"A",{href:!0});var Kpt=s(oz);yar=r(Kpt,"TFConvNextModel"),Kpt.forEach(t),Lar=r(J9e," (ConvNext model)"),J9e.forEach(t),xar=i(D),$v=n(D,"LI",{});var Y9e=s($v);N_e=n(Y9e,"STRONG",{});var Zpt=s(N_e);$ar=r(Zpt,"ctrl"),Zpt.forEach(t),kar=r(Y9e," \u2014 "),rz=n(Y9e,"A",{href:!0});var eut=s(rz);Sar=r(eut,"TFCTRLModel"),eut.forEach(t),Rar=r(Y9e," (CTRL model)"),Y9e.forEach(t),Bar=i(D),kv=n(D,"LI",{});var K9e=s(kv);j_e=n(K9e,"STRONG",{});var out=s(j_e);Par=r(out,"data2vec-vision"),out.forEach(t),Iar=r(K9e," \u2014 "),tz=n(K9e,"A",{href:!0});var rut=s(tz);qar=r(rut,"TFData2VecVisionModel"),rut.forEach(t),Nar=r(K9e," (Data2VecVision model)"),K9e.forEach(t),jar=i(D),Sv=n(D,"LI",{});var Z9e=s(Sv);D_e=n(Z9e,"STRONG",{});var tut=s(D_e);Dar=r(tut,"deberta"),tut.forEach(t),Gar=r(Z9e," \u2014 "),az=n(Z9e,"A",{href:!0});var aut=s(az);Oar=r(aut,"TFDebertaModel"),aut.forEach(t),Var=r(Z9e," (DeBERTa model)"),Z9e.forEach(t),Xar=i(D),Rv=n(D,"LI",{});var e$e=s(Rv);G_e=n(e$e,"STRONG",{});var nut=s(G_e);zar=r(nut,"deberta-v2"),nut.forEach(t),Qar=r(e$e," \u2014 "),nz=n(e$e,"A",{href:!0});var sut=s(nz);War=r(sut,"TFDebertaV2Model"),sut.forEach(t),Har=r(e$e," (DeBERTa-v2 model)"),e$e.forEach(t),Uar=i(D),Bv=n(D,"LI",{});var o$e=s(Bv);O_e=n(o$e,"STRONG",{});var lut=s(O_e);Jar=r(lut,"distilbert"),lut.forEach(t),Yar=r(o$e," \u2014 "),sz=n(o$e,"A",{href:!0});var iut=s(sz);Kar=r(iut,"TFDistilBertModel"),iut.forEach(t),Zar=r(o$e," (DistilBERT model)"),o$e.forEach(t),enr=i(D),Pv=n(D,"LI",{});var r$e=s(Pv);V_e=n(r$e,"STRONG",{});var dut=s(V_e);onr=r(dut,"dpr"),dut.forEach(t),rnr=r(r$e," \u2014 "),lz=n(r$e,"A",{href:!0});var cut=s(lz);tnr=r(cut,"TFDPRQuestionEncoder"),cut.forEach(t),anr=r(r$e," (DPR model)"),r$e.forEach(t),nnr=i(D),Iv=n(D,"LI",{});var t$e=s(Iv);X_e=n(t$e,"STRONG",{});var fut=s(X_e);snr=r(fut,"electra"),fut.forEach(t),lnr=r(t$e," \u2014 "),iz=n(t$e,"A",{href:!0});var mut=s(iz);inr=r(mut,"TFElectraModel"),mut.forEach(t),dnr=r(t$e," (ELECTRA model)"),t$e.forEach(t),cnr=i(D),qv=n(D,"LI",{});var a$e=s(qv);z_e=n(a$e,"STRONG",{});var gut=s(z_e);fnr=r(gut,"flaubert"),gut.forEach(t),mnr=r(a$e," \u2014 "),dz=n(a$e,"A",{href:!0});var hut=s(dz);gnr=r(hut,"TFFlaubertModel"),hut.forEach(t),hnr=r(a$e," (FlauBERT model)"),a$e.forEach(t),pnr=i(D),Bs=n(D,"LI",{});var i$=s(Bs);Q_e=n(i$,"STRONG",{});var put=s(Q_e);unr=r(put,"funnel"),put.forEach(t),_nr=r(i$," \u2014 "),cz=n(i$,"A",{href:!0});var uut=s(cz);bnr=r(uut,"TFFunnelModel"),uut.forEach(t),vnr=r(i$," or "),fz=n(i$,"A",{href:!0});var _ut=s(fz);Fnr=r(_ut,"TFFunnelBaseModel"),_ut.forEach(t),Tnr=r(i$," (Funnel Transformer model)"),i$.forEach(t),Mnr=i(D),Nv=n(D,"LI",{});var n$e=s(Nv);W_e=n(n$e,"STRONG",{});var but=s(W_e);Enr=r(but,"gpt2"),but.forEach(t),Cnr=r(n$e," \u2014 "),mz=n(n$e,"A",{href:!0});var vut=s(mz);wnr=r(vut,"TFGPT2Model"),vut.forEach(t),Anr=r(n$e," (OpenAI GPT-2 model)"),n$e.forEach(t),ynr=i(D),jv=n(D,"LI",{});var s$e=s(jv);H_e=n(s$e,"STRONG",{});var Fut=s(H_e);Lnr=r(Fut,"gptj"),Fut.forEach(t),xnr=r(s$e," \u2014 "),gz=n(s$e,"A",{href:!0});var Tut=s(gz);$nr=r(Tut,"TFGPTJModel"),Tut.forEach(t),knr=r(s$e," (GPT-J model)"),s$e.forEach(t),Snr=i(D),Dv=n(D,"LI",{});var l$e=s(Dv);U_e=n(l$e,"STRONG",{});var Mut=s(U_e);Rnr=r(Mut,"hubert"),Mut.forEach(t),Bnr=r(l$e," \u2014 "),hz=n(l$e,"A",{href:!0});var Eut=s(hz);Pnr=r(Eut,"TFHubertModel"),Eut.forEach(t),Inr=r(l$e," (Hubert model)"),l$e.forEach(t),qnr=i(D),Gv=n(D,"LI",{});var i$e=s(Gv);J_e=n(i$e,"STRONG",{});var Cut=s(J_e);Nnr=r(Cut,"layoutlm"),Cut.forEach(t),jnr=r(i$e," \u2014 "),pz=n(i$e,"A",{href:!0});var wut=s(pz);Dnr=r(wut,"TFLayoutLMModel"),wut.forEach(t),Gnr=r(i$e," (LayoutLM model)"),i$e.forEach(t),Onr=i(D),Ov=n(D,"LI",{});var d$e=s(Ov);Y_e=n(d$e,"STRONG",{});var Aut=s(Y_e);Vnr=r(Aut,"led"),Aut.forEach(t),Xnr=r(d$e," \u2014 "),uz=n(d$e,"A",{href:!0});var yut=s(uz);znr=r(yut,"TFLEDModel"),yut.forEach(t),Qnr=r(d$e," (LED model)"),d$e.forEach(t),Wnr=i(D),Vv=n(D,"LI",{});var c$e=s(Vv);K_e=n(c$e,"STRONG",{});var Lut=s(K_e);Hnr=r(Lut,"longformer"),Lut.forEach(t),Unr=r(c$e," \u2014 "),_z=n(c$e,"A",{href:!0});var xut=s(_z);Jnr=r(xut,"TFLongformerModel"),xut.forEach(t),Ynr=r(c$e," (Longformer model)"),c$e.forEach(t),Knr=i(D),Xv=n(D,"LI",{});var f$e=s(Xv);Z_e=n(f$e,"STRONG",{});var $ut=s(Z_e);Znr=r($ut,"lxmert"),$ut.forEach(t),esr=r(f$e," \u2014 "),bz=n(f$e,"A",{href:!0});var kut=s(bz);osr=r(kut,"TFLxmertModel"),kut.forEach(t),rsr=r(f$e," (LXMERT model)"),f$e.forEach(t),tsr=i(D),zv=n(D,"LI",{});var m$e=s(zv);e6e=n(m$e,"STRONG",{});var Sut=s(e6e);asr=r(Sut,"marian"),Sut.forEach(t),nsr=r(m$e," \u2014 "),vz=n(m$e,"A",{href:!0});var Rut=s(vz);ssr=r(Rut,"TFMarianModel"),Rut.forEach(t),lsr=r(m$e," (Marian model)"),m$e.forEach(t),isr=i(D),Qv=n(D,"LI",{});var g$e=s(Qv);o6e=n(g$e,"STRONG",{});var But=s(o6e);dsr=r(But,"mbart"),But.forEach(t),csr=r(g$e," \u2014 "),Fz=n(g$e,"A",{href:!0});var Put=s(Fz);fsr=r(Put,"TFMBartModel"),Put.forEach(t),msr=r(g$e," (mBART model)"),g$e.forEach(t),gsr=i(D),Wv=n(D,"LI",{});var h$e=s(Wv);r6e=n(h$e,"STRONG",{});var Iut=s(r6e);hsr=r(Iut,"mobilebert"),Iut.forEach(t),psr=r(h$e," \u2014 "),Tz=n(h$e,"A",{href:!0});var qut=s(Tz);usr=r(qut,"TFMobileBertModel"),qut.forEach(t),_sr=r(h$e," (MobileBERT model)"),h$e.forEach(t),bsr=i(D),Hv=n(D,"LI",{});var p$e=s(Hv);t6e=n(p$e,"STRONG",{});var Nut=s(t6e);vsr=r(Nut,"mpnet"),Nut.forEach(t),Fsr=r(p$e," \u2014 "),Mz=n(p$e,"A",{href:!0});var jut=s(Mz);Tsr=r(jut,"TFMPNetModel"),jut.forEach(t),Msr=r(p$e," (MPNet model)"),p$e.forEach(t),Esr=i(D),Uv=n(D,"LI",{});var u$e=s(Uv);a6e=n(u$e,"STRONG",{});var Dut=s(a6e);Csr=r(Dut,"mt5"),Dut.forEach(t),wsr=r(u$e," \u2014 "),Ez=n(u$e,"A",{href:!0});var Gut=s(Ez);Asr=r(Gut,"TFMT5Model"),Gut.forEach(t),ysr=r(u$e," (mT5 model)"),u$e.forEach(t),Lsr=i(D),Jv=n(D,"LI",{});var _$e=s(Jv);n6e=n(_$e,"STRONG",{});var Out=s(n6e);xsr=r(Out,"openai-gpt"),Out.forEach(t),$sr=r(_$e," \u2014 "),Cz=n(_$e,"A",{href:!0});var Vut=s(Cz);ksr=r(Vut,"TFOpenAIGPTModel"),Vut.forEach(t),Ssr=r(_$e," (OpenAI GPT model)"),_$e.forEach(t),Rsr=i(D),Yv=n(D,"LI",{});var b$e=s(Yv);s6e=n(b$e,"STRONG",{});var Xut=s(s6e);Bsr=r(Xut,"pegasus"),Xut.forEach(t),Psr=r(b$e," \u2014 "),wz=n(b$e,"A",{href:!0});var zut=s(wz);Isr=r(zut,"TFPegasusModel"),zut.forEach(t),qsr=r(b$e," (Pegasus model)"),b$e.forEach(t),Nsr=i(D),Kv=n(D,"LI",{});var v$e=s(Kv);l6e=n(v$e,"STRONG",{});var Qut=s(l6e);jsr=r(Qut,"rembert"),Qut.forEach(t),Dsr=r(v$e," \u2014 "),Az=n(v$e,"A",{href:!0});var Wut=s(Az);Gsr=r(Wut,"TFRemBertModel"),Wut.forEach(t),Osr=r(v$e," (RemBERT model)"),v$e.forEach(t),Vsr=i(D),Zv=n(D,"LI",{});var F$e=s(Zv);i6e=n(F$e,"STRONG",{});var Hut=s(i6e);Xsr=r(Hut,"roberta"),Hut.forEach(t),zsr=r(F$e," \u2014 "),yz=n(F$e,"A",{href:!0});var Uut=s(yz);Qsr=r(Uut,"TFRobertaModel"),Uut.forEach(t),Wsr=r(F$e," (RoBERTa model)"),F$e.forEach(t),Hsr=i(D),eF=n(D,"LI",{});var T$e=s(eF);d6e=n(T$e,"STRONG",{});var Jut=s(d6e);Usr=r(Jut,"roformer"),Jut.forEach(t),Jsr=r(T$e," \u2014 "),Lz=n(T$e,"A",{href:!0});var Yut=s(Lz);Ysr=r(Yut,"TFRoFormerModel"),Yut.forEach(t),Ksr=r(T$e," (RoFormer model)"),T$e.forEach(t),Zsr=i(D),oF=n(D,"LI",{});var M$e=s(oF);c6e=n(M$e,"STRONG",{});var Kut=s(c6e);elr=r(Kut,"speech_to_text"),Kut.forEach(t),olr=r(M$e," \u2014 "),xz=n(M$e,"A",{href:!0});var Zut=s(xz);rlr=r(Zut,"TFSpeech2TextModel"),Zut.forEach(t),tlr=r(M$e," (Speech2Text model)"),M$e.forEach(t),alr=i(D),rF=n(D,"LI",{});var E$e=s(rF);f6e=n(E$e,"STRONG",{});var e_t=s(f6e);nlr=r(e_t,"t5"),e_t.forEach(t),slr=r(E$e," \u2014 "),$z=n(E$e,"A",{href:!0});var o_t=s($z);llr=r(o_t,"TFT5Model"),o_t.forEach(t),ilr=r(E$e," (T5 model)"),E$e.forEach(t),dlr=i(D),tF=n(D,"LI",{});var C$e=s(tF);m6e=n(C$e,"STRONG",{});var r_t=s(m6e);clr=r(r_t,"tapas"),r_t.forEach(t),flr=r(C$e," \u2014 "),kz=n(C$e,"A",{href:!0});var t_t=s(kz);mlr=r(t_t,"TFTapasModel"),t_t.forEach(t),glr=r(C$e," (TAPAS model)"),C$e.forEach(t),hlr=i(D),aF=n(D,"LI",{});var w$e=s(aF);g6e=n(w$e,"STRONG",{});var a_t=s(g6e);plr=r(a_t,"transfo-xl"),a_t.forEach(t),ulr=r(w$e," \u2014 "),Sz=n(w$e,"A",{href:!0});var n_t=s(Sz);_lr=r(n_t,"TFTransfoXLModel"),n_t.forEach(t),blr=r(w$e," (Transformer-XL model)"),w$e.forEach(t),vlr=i(D),nF=n(D,"LI",{});var A$e=s(nF);h6e=n(A$e,"STRONG",{});var s_t=s(h6e);Flr=r(s_t,"vit"),s_t.forEach(t),Tlr=r(A$e," \u2014 "),Rz=n(A$e,"A",{href:!0});var l_t=s(Rz);Mlr=r(l_t,"TFViTModel"),l_t.forEach(t),Elr=r(A$e," (ViT model)"),A$e.forEach(t),Clr=i(D),sF=n(D,"LI",{});var y$e=s(sF);p6e=n(y$e,"STRONG",{});var i_t=s(p6e);wlr=r(i_t,"vit_mae"),i_t.forEach(t),Alr=r(y$e," \u2014 "),Bz=n(y$e,"A",{href:!0});var d_t=s(Bz);ylr=r(d_t,"TFViTMAEModel"),d_t.forEach(t),Llr=r(y$e," (ViTMAE model)"),y$e.forEach(t),xlr=i(D),lF=n(D,"LI",{});var L$e=s(lF);u6e=n(L$e,"STRONG",{});var c_t=s(u6e);$lr=r(c_t,"wav2vec2"),c_t.forEach(t),klr=r(L$e," \u2014 "),Pz=n(L$e,"A",{href:!0});var f_t=s(Pz);Slr=r(f_t,"TFWav2Vec2Model"),f_t.forEach(t),Rlr=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),Blr=i(D),iF=n(D,"LI",{});var x$e=s(iF);_6e=n(x$e,"STRONG",{});var m_t=s(_6e);Plr=r(m_t,"xlm"),m_t.forEach(t),Ilr=r(x$e," \u2014 "),Iz=n(x$e,"A",{href:!0});var g_t=s(Iz);qlr=r(g_t,"TFXLMModel"),g_t.forEach(t),Nlr=r(x$e," (XLM model)"),x$e.forEach(t),jlr=i(D),dF=n(D,"LI",{});var $$e=s(dF);b6e=n($$e,"STRONG",{});var h_t=s(b6e);Dlr=r(h_t,"xlm-roberta"),h_t.forEach(t),Glr=r($$e," \u2014 "),qz=n($$e,"A",{href:!0});var p_t=s(qz);Olr=r(p_t,"TFXLMRobertaModel"),p_t.forEach(t),Vlr=r($$e," (XLM-RoBERTa model)"),$$e.forEach(t),Xlr=i(D),cF=n(D,"LI",{});var k$e=s(cF);v6e=n(k$e,"STRONG",{});var u_t=s(v6e);zlr=r(u_t,"xlnet"),u_t.forEach(t),Qlr=r(k$e," \u2014 "),Nz=n(k$e,"A",{href:!0});var __t=s(Nz);Wlr=r(__t,"TFXLNetModel"),__t.forEach(t),Hlr=r(k$e," (XLNet model)"),k$e.forEach(t),D.forEach(t),Ulr=i(cl),T(fF.$$.fragment,cl),cl.forEach(t),dl.forEach(t),$Ie=i(f),Dd=n(f,"H2",{class:!0});var INe=s(Dd);mF=n(INe,"A",{id:!0,class:!0,href:!0});var b_t=s(mF);F6e=n(b_t,"SPAN",{});var v_t=s(F6e);T(S8.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),Jlr=i(INe),T6e=n(INe,"SPAN",{});var F_t=s(T6e);Ylr=r(F_t,"TFAutoModelForPreTraining"),F_t.forEach(t),INe.forEach(t),kIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(R8.$$.fragment,fl),Klr=i(fl),Gd=n(fl,"P",{});var WK=s(Gd);Zlr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),jz=n(WK,"A",{href:!0});var T_t=s(jz);eir=r(T_t,"from_pretrained()"),T_t.forEach(t),oir=r(WK," class method or the "),Dz=n(WK,"A",{href:!0});var M_t=s(Dz);rir=r(M_t,"from_config()"),M_t.forEach(t),tir=r(WK,` class
method.`),WK.forEach(t),air=i(fl),B8=n(fl,"P",{});var qNe=s(B8);nir=r(qNe,"This class cannot be instantiated directly using "),M6e=n(qNe,"CODE",{});var E_t=s(M6e);sir=r(E_t,"__init__()"),E_t.forEach(t),lir=r(qNe," (throws an error)."),qNe.forEach(t),iir=i(fl),At=n(fl,"DIV",{class:!0});var QA=s(At);T(P8.$$.fragment,QA),dir=i(QA),E6e=n(QA,"P",{});var C_t=s(E6e);cir=r(C_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),C_t.forEach(t),fir=i(QA),Od=n(QA,"P",{});var HK=s(Od);mir=r(HK,`Note:
Loading a model from its configuration file does `),C6e=n(HK,"STRONG",{});var w_t=s(C6e);gir=r(w_t,"not"),w_t.forEach(t),hir=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(HK,"A",{href:!0});var A_t=s(Gz);pir=r(A_t,"from_pretrained()"),A_t.forEach(t),uir=r(HK," to load the model weights."),HK.forEach(t),_ir=i(QA),T(gF.$$.fragment,QA),QA.forEach(t),bir=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(I8.$$.fragment,ml),vir=i(ml),w6e=n(ml,"P",{});var y_t=s(w6e);Fir=r(y_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),y_t.forEach(t),Tir=i(ml),Za=n(ml,"P",{});var WA=s(Za);Mir=r(WA,"The model class to instantiate is selected based on the "),A6e=n(WA,"CODE",{});var L_t=s(A6e);Eir=r(L_t,"model_type"),L_t.forEach(t),Cir=r(WA,` property of the config object (either
passed as an argument or loaded from `),y6e=n(WA,"CODE",{});var x_t=s(y6e);wir=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),Air=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(WA,"CODE",{});var $_t=s(L6e);yir=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Lir=r(WA,":"),WA.forEach(t),xir=i(ml),se=n(ml,"UL",{});var le=s(se);hF=n(le,"LI",{});var S$e=s(hF);x6e=n(S$e,"STRONG",{});var k_t=s(x6e);$ir=r(k_t,"albert"),k_t.forEach(t),kir=r(S$e," \u2014 "),Oz=n(S$e,"A",{href:!0});var S_t=s(Oz);Sir=r(S_t,"TFAlbertForPreTraining"),S_t.forEach(t),Rir=r(S$e," (ALBERT model)"),S$e.forEach(t),Bir=i(le),pF=n(le,"LI",{});var R$e=s(pF);$6e=n(R$e,"STRONG",{});var R_t=s($6e);Pir=r(R_t,"bart"),R_t.forEach(t),Iir=r(R$e," \u2014 "),Vz=n(R$e,"A",{href:!0});var B_t=s(Vz);qir=r(B_t,"TFBartForConditionalGeneration"),B_t.forEach(t),Nir=r(R$e," (BART model)"),R$e.forEach(t),jir=i(le),uF=n(le,"LI",{});var B$e=s(uF);k6e=n(B$e,"STRONG",{});var P_t=s(k6e);Dir=r(P_t,"bert"),P_t.forEach(t),Gir=r(B$e," \u2014 "),Xz=n(B$e,"A",{href:!0});var I_t=s(Xz);Oir=r(I_t,"TFBertForPreTraining"),I_t.forEach(t),Vir=r(B$e," (BERT model)"),B$e.forEach(t),Xir=i(le),_F=n(le,"LI",{});var P$e=s(_F);S6e=n(P$e,"STRONG",{});var q_t=s(S6e);zir=r(q_t,"camembert"),q_t.forEach(t),Qir=r(P$e," \u2014 "),zz=n(P$e,"A",{href:!0});var N_t=s(zz);Wir=r(N_t,"TFCamembertForMaskedLM"),N_t.forEach(t),Hir=r(P$e," (CamemBERT model)"),P$e.forEach(t),Uir=i(le),bF=n(le,"LI",{});var I$e=s(bF);R6e=n(I$e,"STRONG",{});var j_t=s(R6e);Jir=r(j_t,"ctrl"),j_t.forEach(t),Yir=r(I$e," \u2014 "),Qz=n(I$e,"A",{href:!0});var D_t=s(Qz);Kir=r(D_t,"TFCTRLLMHeadModel"),D_t.forEach(t),Zir=r(I$e," (CTRL model)"),I$e.forEach(t),edr=i(le),vF=n(le,"LI",{});var q$e=s(vF);B6e=n(q$e,"STRONG",{});var G_t=s(B6e);odr=r(G_t,"distilbert"),G_t.forEach(t),rdr=r(q$e," \u2014 "),Wz=n(q$e,"A",{href:!0});var O_t=s(Wz);tdr=r(O_t,"TFDistilBertForMaskedLM"),O_t.forEach(t),adr=r(q$e," (DistilBERT model)"),q$e.forEach(t),ndr=i(le),FF=n(le,"LI",{});var N$e=s(FF);P6e=n(N$e,"STRONG",{});var V_t=s(P6e);sdr=r(V_t,"electra"),V_t.forEach(t),ldr=r(N$e," \u2014 "),Hz=n(N$e,"A",{href:!0});var X_t=s(Hz);idr=r(X_t,"TFElectraForPreTraining"),X_t.forEach(t),ddr=r(N$e," (ELECTRA model)"),N$e.forEach(t),cdr=i(le),TF=n(le,"LI",{});var j$e=s(TF);I6e=n(j$e,"STRONG",{});var z_t=s(I6e);fdr=r(z_t,"flaubert"),z_t.forEach(t),mdr=r(j$e," \u2014 "),Uz=n(j$e,"A",{href:!0});var Q_t=s(Uz);gdr=r(Q_t,"TFFlaubertWithLMHeadModel"),Q_t.forEach(t),hdr=r(j$e," (FlauBERT model)"),j$e.forEach(t),pdr=i(le),MF=n(le,"LI",{});var D$e=s(MF);q6e=n(D$e,"STRONG",{});var W_t=s(q6e);udr=r(W_t,"funnel"),W_t.forEach(t),_dr=r(D$e," \u2014 "),Jz=n(D$e,"A",{href:!0});var H_t=s(Jz);bdr=r(H_t,"TFFunnelForPreTraining"),H_t.forEach(t),vdr=r(D$e," (Funnel Transformer model)"),D$e.forEach(t),Fdr=i(le),EF=n(le,"LI",{});var G$e=s(EF);N6e=n(G$e,"STRONG",{});var U_t=s(N6e);Tdr=r(U_t,"gpt2"),U_t.forEach(t),Mdr=r(G$e," \u2014 "),Yz=n(G$e,"A",{href:!0});var J_t=s(Yz);Edr=r(J_t,"TFGPT2LMHeadModel"),J_t.forEach(t),Cdr=r(G$e," (OpenAI GPT-2 model)"),G$e.forEach(t),wdr=i(le),CF=n(le,"LI",{});var O$e=s(CF);j6e=n(O$e,"STRONG",{});var Y_t=s(j6e);Adr=r(Y_t,"layoutlm"),Y_t.forEach(t),ydr=r(O$e," \u2014 "),Kz=n(O$e,"A",{href:!0});var K_t=s(Kz);Ldr=r(K_t,"TFLayoutLMForMaskedLM"),K_t.forEach(t),xdr=r(O$e," (LayoutLM model)"),O$e.forEach(t),$dr=i(le),wF=n(le,"LI",{});var V$e=s(wF);D6e=n(V$e,"STRONG",{});var Z_t=s(D6e);kdr=r(Z_t,"lxmert"),Z_t.forEach(t),Sdr=r(V$e," \u2014 "),Zz=n(V$e,"A",{href:!0});var e6t=s(Zz);Rdr=r(e6t,"TFLxmertForPreTraining"),e6t.forEach(t),Bdr=r(V$e," (LXMERT model)"),V$e.forEach(t),Pdr=i(le),AF=n(le,"LI",{});var X$e=s(AF);G6e=n(X$e,"STRONG",{});var o6t=s(G6e);Idr=r(o6t,"mobilebert"),o6t.forEach(t),qdr=r(X$e," \u2014 "),eQ=n(X$e,"A",{href:!0});var r6t=s(eQ);Ndr=r(r6t,"TFMobileBertForPreTraining"),r6t.forEach(t),jdr=r(X$e," (MobileBERT model)"),X$e.forEach(t),Ddr=i(le),yF=n(le,"LI",{});var z$e=s(yF);O6e=n(z$e,"STRONG",{});var t6t=s(O6e);Gdr=r(t6t,"mpnet"),t6t.forEach(t),Odr=r(z$e," \u2014 "),oQ=n(z$e,"A",{href:!0});var a6t=s(oQ);Vdr=r(a6t,"TFMPNetForMaskedLM"),a6t.forEach(t),Xdr=r(z$e," (MPNet model)"),z$e.forEach(t),zdr=i(le),LF=n(le,"LI",{});var Q$e=s(LF);V6e=n(Q$e,"STRONG",{});var n6t=s(V6e);Qdr=r(n6t,"openai-gpt"),n6t.forEach(t),Wdr=r(Q$e," \u2014 "),rQ=n(Q$e,"A",{href:!0});var s6t=s(rQ);Hdr=r(s6t,"TFOpenAIGPTLMHeadModel"),s6t.forEach(t),Udr=r(Q$e," (OpenAI GPT model)"),Q$e.forEach(t),Jdr=i(le),xF=n(le,"LI",{});var W$e=s(xF);X6e=n(W$e,"STRONG",{});var l6t=s(X6e);Ydr=r(l6t,"roberta"),l6t.forEach(t),Kdr=r(W$e," \u2014 "),tQ=n(W$e,"A",{href:!0});var i6t=s(tQ);Zdr=r(i6t,"TFRobertaForMaskedLM"),i6t.forEach(t),ecr=r(W$e," (RoBERTa model)"),W$e.forEach(t),ocr=i(le),$F=n(le,"LI",{});var H$e=s($F);z6e=n(H$e,"STRONG",{});var d6t=s(z6e);rcr=r(d6t,"t5"),d6t.forEach(t),tcr=r(H$e," \u2014 "),aQ=n(H$e,"A",{href:!0});var c6t=s(aQ);acr=r(c6t,"TFT5ForConditionalGeneration"),c6t.forEach(t),ncr=r(H$e," (T5 model)"),H$e.forEach(t),scr=i(le),kF=n(le,"LI",{});var U$e=s(kF);Q6e=n(U$e,"STRONG",{});var f6t=s(Q6e);lcr=r(f6t,"tapas"),f6t.forEach(t),icr=r(U$e," \u2014 "),nQ=n(U$e,"A",{href:!0});var m6t=s(nQ);dcr=r(m6t,"TFTapasForMaskedLM"),m6t.forEach(t),ccr=r(U$e," (TAPAS model)"),U$e.forEach(t),fcr=i(le),SF=n(le,"LI",{});var J$e=s(SF);W6e=n(J$e,"STRONG",{});var g6t=s(W6e);mcr=r(g6t,"transfo-xl"),g6t.forEach(t),gcr=r(J$e," \u2014 "),sQ=n(J$e,"A",{href:!0});var h6t=s(sQ);hcr=r(h6t,"TFTransfoXLLMHeadModel"),h6t.forEach(t),pcr=r(J$e," (Transformer-XL model)"),J$e.forEach(t),ucr=i(le),RF=n(le,"LI",{});var Y$e=s(RF);H6e=n(Y$e,"STRONG",{});var p6t=s(H6e);_cr=r(p6t,"vit_mae"),p6t.forEach(t),bcr=r(Y$e," \u2014 "),lQ=n(Y$e,"A",{href:!0});var u6t=s(lQ);vcr=r(u6t,"TFViTMAEForPreTraining"),u6t.forEach(t),Fcr=r(Y$e," (ViTMAE model)"),Y$e.forEach(t),Tcr=i(le),BF=n(le,"LI",{});var K$e=s(BF);U6e=n(K$e,"STRONG",{});var _6t=s(U6e);Mcr=r(_6t,"xlm"),_6t.forEach(t),Ecr=r(K$e," \u2014 "),iQ=n(K$e,"A",{href:!0});var b6t=s(iQ);Ccr=r(b6t,"TFXLMWithLMHeadModel"),b6t.forEach(t),wcr=r(K$e," (XLM model)"),K$e.forEach(t),Acr=i(le),PF=n(le,"LI",{});var Z$e=s(PF);J6e=n(Z$e,"STRONG",{});var v6t=s(J6e);ycr=r(v6t,"xlm-roberta"),v6t.forEach(t),Lcr=r(Z$e," \u2014 "),dQ=n(Z$e,"A",{href:!0});var F6t=s(dQ);xcr=r(F6t,"TFXLMRobertaForMaskedLM"),F6t.forEach(t),$cr=r(Z$e," (XLM-RoBERTa model)"),Z$e.forEach(t),kcr=i(le),IF=n(le,"LI",{});var eke=s(IF);Y6e=n(eke,"STRONG",{});var T6t=s(Y6e);Scr=r(T6t,"xlnet"),T6t.forEach(t),Rcr=r(eke," \u2014 "),cQ=n(eke,"A",{href:!0});var M6t=s(cQ);Bcr=r(M6t,"TFXLNetLMHeadModel"),M6t.forEach(t),Pcr=r(eke," (XLNet model)"),eke.forEach(t),le.forEach(t),Icr=i(ml),T(qF.$$.fragment,ml),ml.forEach(t),fl.forEach(t),SIe=i(f),Vd=n(f,"H2",{class:!0});var NNe=s(Vd);NF=n(NNe,"A",{id:!0,class:!0,href:!0});var E6t=s(NF);K6e=n(E6t,"SPAN",{});var C6t=s(K6e);T(q8.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),qcr=i(NNe),Z6e=n(NNe,"SPAN",{});var w6t=s(Z6e);Ncr=r(w6t,"TFAutoModelForCausalLM"),w6t.forEach(t),NNe.forEach(t),RIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(N8.$$.fragment,gl),jcr=i(gl),Xd=n(gl,"P",{});var UK=s(Xd);Dcr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),fQ=n(UK,"A",{href:!0});var A6t=s(fQ);Gcr=r(A6t,"from_pretrained()"),A6t.forEach(t),Ocr=r(UK," class method or the "),mQ=n(UK,"A",{href:!0});var y6t=s(mQ);Vcr=r(y6t,"from_config()"),y6t.forEach(t),Xcr=r(UK,` class
method.`),UK.forEach(t),zcr=i(gl),j8=n(gl,"P",{});var jNe=s(j8);Qcr=r(jNe,"This class cannot be instantiated directly using "),e1e=n(jNe,"CODE",{});var L6t=s(e1e);Wcr=r(L6t,"__init__()"),L6t.forEach(t),Hcr=r(jNe," (throws an error)."),jNe.forEach(t),Ucr=i(gl),yt=n(gl,"DIV",{class:!0});var HA=s(yt);T(D8.$$.fragment,HA),Jcr=i(HA),o1e=n(HA,"P",{});var x6t=s(o1e);Ycr=r(x6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),x6t.forEach(t),Kcr=i(HA),zd=n(HA,"P",{});var JK=s(zd);Zcr=r(JK,`Note:
Loading a model from its configuration file does `),r1e=n(JK,"STRONG",{});var $6t=s(r1e);efr=r($6t,"not"),$6t.forEach(t),ofr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(JK,"A",{href:!0});var k6t=s(gQ);rfr=r(k6t,"from_pretrained()"),k6t.forEach(t),tfr=r(JK," to load the model weights."),JK.forEach(t),afr=i(HA),T(jF.$$.fragment,HA),HA.forEach(t),nfr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(G8.$$.fragment,hl),sfr=i(hl),t1e=n(hl,"P",{});var S6t=s(t1e);lfr=r(S6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),S6t.forEach(t),ifr=i(hl),en=n(hl,"P",{});var UA=s(en);dfr=r(UA,"The model class to instantiate is selected based on the "),a1e=n(UA,"CODE",{});var R6t=s(a1e);cfr=r(R6t,"model_type"),R6t.forEach(t),ffr=r(UA,` property of the config object (either
passed as an argument or loaded from `),n1e=n(UA,"CODE",{});var B6t=s(n1e);mfr=r(B6t,"pretrained_model_name_or_path"),B6t.forEach(t),gfr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s1e=n(UA,"CODE",{});var P6t=s(s1e);hfr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),pfr=r(UA,":"),UA.forEach(t),ufr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);DF=n(Ce,"LI",{});var oke=s(DF);l1e=n(oke,"STRONG",{});var I6t=s(l1e);_fr=r(I6t,"bert"),I6t.forEach(t),bfr=r(oke," \u2014 "),hQ=n(oke,"A",{href:!0});var q6t=s(hQ);vfr=r(q6t,"TFBertLMHeadModel"),q6t.forEach(t),Ffr=r(oke," (BERT model)"),oke.forEach(t),Tfr=i(Ce),GF=n(Ce,"LI",{});var rke=s(GF);i1e=n(rke,"STRONG",{});var N6t=s(i1e);Mfr=r(N6t,"camembert"),N6t.forEach(t),Efr=r(rke," \u2014 "),pQ=n(rke,"A",{href:!0});var j6t=s(pQ);Cfr=r(j6t,"TFCamembertForCausalLM"),j6t.forEach(t),wfr=r(rke," (CamemBERT model)"),rke.forEach(t),Afr=i(Ce),OF=n(Ce,"LI",{});var tke=s(OF);d1e=n(tke,"STRONG",{});var D6t=s(d1e);yfr=r(D6t,"ctrl"),D6t.forEach(t),Lfr=r(tke," \u2014 "),uQ=n(tke,"A",{href:!0});var G6t=s(uQ);xfr=r(G6t,"TFCTRLLMHeadModel"),G6t.forEach(t),$fr=r(tke," (CTRL model)"),tke.forEach(t),kfr=i(Ce),VF=n(Ce,"LI",{});var ake=s(VF);c1e=n(ake,"STRONG",{});var O6t=s(c1e);Sfr=r(O6t,"gpt2"),O6t.forEach(t),Rfr=r(ake," \u2014 "),_Q=n(ake,"A",{href:!0});var V6t=s(_Q);Bfr=r(V6t,"TFGPT2LMHeadModel"),V6t.forEach(t),Pfr=r(ake," (OpenAI GPT-2 model)"),ake.forEach(t),Ifr=i(Ce),XF=n(Ce,"LI",{});var nke=s(XF);f1e=n(nke,"STRONG",{});var X6t=s(f1e);qfr=r(X6t,"gptj"),X6t.forEach(t),Nfr=r(nke," \u2014 "),bQ=n(nke,"A",{href:!0});var z6t=s(bQ);jfr=r(z6t,"TFGPTJForCausalLM"),z6t.forEach(t),Dfr=r(nke," (GPT-J model)"),nke.forEach(t),Gfr=i(Ce),zF=n(Ce,"LI",{});var ske=s(zF);m1e=n(ske,"STRONG",{});var Q6t=s(m1e);Ofr=r(Q6t,"openai-gpt"),Q6t.forEach(t),Vfr=r(ske," \u2014 "),vQ=n(ske,"A",{href:!0});var W6t=s(vQ);Xfr=r(W6t,"TFOpenAIGPTLMHeadModel"),W6t.forEach(t),zfr=r(ske," (OpenAI GPT model)"),ske.forEach(t),Qfr=i(Ce),QF=n(Ce,"LI",{});var lke=s(QF);g1e=n(lke,"STRONG",{});var H6t=s(g1e);Wfr=r(H6t,"rembert"),H6t.forEach(t),Hfr=r(lke," \u2014 "),FQ=n(lke,"A",{href:!0});var U6t=s(FQ);Ufr=r(U6t,"TFRemBertForCausalLM"),U6t.forEach(t),Jfr=r(lke," (RemBERT model)"),lke.forEach(t),Yfr=i(Ce),WF=n(Ce,"LI",{});var ike=s(WF);h1e=n(ike,"STRONG",{});var J6t=s(h1e);Kfr=r(J6t,"roberta"),J6t.forEach(t),Zfr=r(ike," \u2014 "),TQ=n(ike,"A",{href:!0});var Y6t=s(TQ);emr=r(Y6t,"TFRobertaForCausalLM"),Y6t.forEach(t),omr=r(ike," (RoBERTa model)"),ike.forEach(t),rmr=i(Ce),HF=n(Ce,"LI",{});var dke=s(HF);p1e=n(dke,"STRONG",{});var K6t=s(p1e);tmr=r(K6t,"roformer"),K6t.forEach(t),amr=r(dke," \u2014 "),MQ=n(dke,"A",{href:!0});var Z6t=s(MQ);nmr=r(Z6t,"TFRoFormerForCausalLM"),Z6t.forEach(t),smr=r(dke," (RoFormer model)"),dke.forEach(t),lmr=i(Ce),UF=n(Ce,"LI",{});var cke=s(UF);u1e=n(cke,"STRONG",{});var e1t=s(u1e);imr=r(e1t,"transfo-xl"),e1t.forEach(t),dmr=r(cke," \u2014 "),EQ=n(cke,"A",{href:!0});var o1t=s(EQ);cmr=r(o1t,"TFTransfoXLLMHeadModel"),o1t.forEach(t),fmr=r(cke," (Transformer-XL model)"),cke.forEach(t),mmr=i(Ce),JF=n(Ce,"LI",{});var fke=s(JF);_1e=n(fke,"STRONG",{});var r1t=s(_1e);gmr=r(r1t,"xlm"),r1t.forEach(t),hmr=r(fke," \u2014 "),CQ=n(fke,"A",{href:!0});var t1t=s(CQ);pmr=r(t1t,"TFXLMWithLMHeadModel"),t1t.forEach(t),umr=r(fke," (XLM model)"),fke.forEach(t),_mr=i(Ce),YF=n(Ce,"LI",{});var mke=s(YF);b1e=n(mke,"STRONG",{});var a1t=s(b1e);bmr=r(a1t,"xlnet"),a1t.forEach(t),vmr=r(mke," \u2014 "),wQ=n(mke,"A",{href:!0});var n1t=s(wQ);Fmr=r(n1t,"TFXLNetLMHeadModel"),n1t.forEach(t),Tmr=r(mke," (XLNet model)"),mke.forEach(t),Ce.forEach(t),Mmr=i(hl),T(KF.$$.fragment,hl),hl.forEach(t),gl.forEach(t),BIe=i(f),Qd=n(f,"H2",{class:!0});var DNe=s(Qd);ZF=n(DNe,"A",{id:!0,class:!0,href:!0});var s1t=s(ZF);v1e=n(s1t,"SPAN",{});var l1t=s(v1e);T(O8.$$.fragment,l1t),l1t.forEach(t),s1t.forEach(t),Emr=i(DNe),F1e=n(DNe,"SPAN",{});var i1t=s(F1e);Cmr=r(i1t,"TFAutoModelForImageClassification"),i1t.forEach(t),DNe.forEach(t),PIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(V8.$$.fragment,pl),wmr=i(pl),Wd=n(pl,"P",{});var YK=s(Wd);Amr=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),AQ=n(YK,"A",{href:!0});var d1t=s(AQ);ymr=r(d1t,"from_pretrained()"),d1t.forEach(t),Lmr=r(YK," class method or the "),yQ=n(YK,"A",{href:!0});var c1t=s(yQ);xmr=r(c1t,"from_config()"),c1t.forEach(t),$mr=r(YK,` class
method.`),YK.forEach(t),kmr=i(pl),X8=n(pl,"P",{});var GNe=s(X8);Smr=r(GNe,"This class cannot be instantiated directly using "),T1e=n(GNe,"CODE",{});var f1t=s(T1e);Rmr=r(f1t,"__init__()"),f1t.forEach(t),Bmr=r(GNe," (throws an error)."),GNe.forEach(t),Pmr=i(pl),Lt=n(pl,"DIV",{class:!0});var JA=s(Lt);T(z8.$$.fragment,JA),Imr=i(JA),M1e=n(JA,"P",{});var m1t=s(M1e);qmr=r(m1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),m1t.forEach(t),Nmr=i(JA),Hd=n(JA,"P",{});var KK=s(Hd);jmr=r(KK,`Note:
Loading a model from its configuration file does `),E1e=n(KK,"STRONG",{});var g1t=s(E1e);Dmr=r(g1t,"not"),g1t.forEach(t),Gmr=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(KK,"A",{href:!0});var h1t=s(LQ);Omr=r(h1t,"from_pretrained()"),h1t.forEach(t),Vmr=r(KK," to load the model weights."),KK.forEach(t),Xmr=i(JA),T(eT.$$.fragment,JA),JA.forEach(t),zmr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(Q8.$$.fragment,ul),Qmr=i(ul),C1e=n(ul,"P",{});var p1t=s(C1e);Wmr=r(p1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p1t.forEach(t),Hmr=i(ul),on=n(ul,"P",{});var YA=s(on);Umr=r(YA,"The model class to instantiate is selected based on the "),w1e=n(YA,"CODE",{});var u1t=s(w1e);Jmr=r(u1t,"model_type"),u1t.forEach(t),Ymr=r(YA,` property of the config object (either
passed as an argument or loaded from `),A1e=n(YA,"CODE",{});var _1t=s(A1e);Kmr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),Zmr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n(YA,"CODE",{});var b1t=s(y1e);egr=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),ogr=r(YA,":"),YA.forEach(t),rgr=i(ul),Ud=n(ul,"UL",{});var ZK=s(Ud);oT=n(ZK,"LI",{});var gke=s(oT);L1e=n(gke,"STRONG",{});var v1t=s(L1e);tgr=r(v1t,"convnext"),v1t.forEach(t),agr=r(gke," \u2014 "),xQ=n(gke,"A",{href:!0});var F1t=s(xQ);ngr=r(F1t,"TFConvNextForImageClassification"),F1t.forEach(t),sgr=r(gke," (ConvNext model)"),gke.forEach(t),lgr=i(ZK),rT=n(ZK,"LI",{});var hke=s(rT);x1e=n(hke,"STRONG",{});var T1t=s(x1e);igr=r(T1t,"data2vec-vision"),T1t.forEach(t),dgr=r(hke," \u2014 "),$Q=n(hke,"A",{href:!0});var M1t=s($Q);cgr=r(M1t,"TFData2VecVisionForImageClassification"),M1t.forEach(t),fgr=r(hke," (Data2VecVision model)"),hke.forEach(t),mgr=i(ZK),tT=n(ZK,"LI",{});var pke=s(tT);$1e=n(pke,"STRONG",{});var E1t=s($1e);ggr=r(E1t,"vit"),E1t.forEach(t),hgr=r(pke," \u2014 "),kQ=n(pke,"A",{href:!0});var C1t=s(kQ);pgr=r(C1t,"TFViTForImageClassification"),C1t.forEach(t),ugr=r(pke," (ViT model)"),pke.forEach(t),ZK.forEach(t),_gr=i(ul),T(aT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),IIe=i(f),Jd=n(f,"H2",{class:!0});var ONe=s(Jd);nT=n(ONe,"A",{id:!0,class:!0,href:!0});var w1t=s(nT);k1e=n(w1t,"SPAN",{});var A1t=s(k1e);T(W8.$$.fragment,A1t),A1t.forEach(t),w1t.forEach(t),bgr=i(ONe),S1e=n(ONe,"SPAN",{});var y1t=s(S1e);vgr=r(y1t,"TFAutoModelForMaskedLM"),y1t.forEach(t),ONe.forEach(t),qIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(H8.$$.fragment,_l),Fgr=i(_l),Yd=n(_l,"P",{});var eZ=s(Yd);Tgr=r(eZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SQ=n(eZ,"A",{href:!0});var L1t=s(SQ);Mgr=r(L1t,"from_pretrained()"),L1t.forEach(t),Egr=r(eZ," class method or the "),RQ=n(eZ,"A",{href:!0});var x1t=s(RQ);Cgr=r(x1t,"from_config()"),x1t.forEach(t),wgr=r(eZ,` class
method.`),eZ.forEach(t),Agr=i(_l),U8=n(_l,"P",{});var VNe=s(U8);ygr=r(VNe,"This class cannot be instantiated directly using "),R1e=n(VNe,"CODE",{});var $1t=s(R1e);Lgr=r($1t,"__init__()"),$1t.forEach(t),xgr=r(VNe," (throws an error)."),VNe.forEach(t),$gr=i(_l),xt=n(_l,"DIV",{class:!0});var KA=s(xt);T(J8.$$.fragment,KA),kgr=i(KA),B1e=n(KA,"P",{});var k1t=s(B1e);Sgr=r(k1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),k1t.forEach(t),Rgr=i(KA),Kd=n(KA,"P",{});var oZ=s(Kd);Bgr=r(oZ,`Note:
Loading a model from its configuration file does `),P1e=n(oZ,"STRONG",{});var S1t=s(P1e);Pgr=r(S1t,"not"),S1t.forEach(t),Igr=r(oZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BQ=n(oZ,"A",{href:!0});var R1t=s(BQ);qgr=r(R1t,"from_pretrained()"),R1t.forEach(t),Ngr=r(oZ," to load the model weights."),oZ.forEach(t),jgr=i(KA),T(sT.$$.fragment,KA),KA.forEach(t),Dgr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(Y8.$$.fragment,bl),Ggr=i(bl),I1e=n(bl,"P",{});var B1t=s(I1e);Ogr=r(B1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B1t.forEach(t),Vgr=i(bl),rn=n(bl,"P",{});var ZA=s(rn);Xgr=r(ZA,"The model class to instantiate is selected based on the "),q1e=n(ZA,"CODE",{});var P1t=s(q1e);zgr=r(P1t,"model_type"),P1t.forEach(t),Qgr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),N1e=n(ZA,"CODE",{});var I1t=s(N1e);Wgr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),Hgr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(ZA,"CODE",{});var q1t=s(j1e);Ugr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),Jgr=r(ZA,":"),ZA.forEach(t),Ygr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);lT=n(fe,"LI",{});var uke=s(lT);D1e=n(uke,"STRONG",{});var N1t=s(D1e);Kgr=r(N1t,"albert"),N1t.forEach(t),Zgr=r(uke," \u2014 "),PQ=n(uke,"A",{href:!0});var j1t=s(PQ);ehr=r(j1t,"TFAlbertForMaskedLM"),j1t.forEach(t),ohr=r(uke," (ALBERT model)"),uke.forEach(t),rhr=i(fe),iT=n(fe,"LI",{});var _ke=s(iT);G1e=n(_ke,"STRONG",{});var D1t=s(G1e);thr=r(D1t,"bert"),D1t.forEach(t),ahr=r(_ke," \u2014 "),IQ=n(_ke,"A",{href:!0});var G1t=s(IQ);nhr=r(G1t,"TFBertForMaskedLM"),G1t.forEach(t),shr=r(_ke," (BERT model)"),_ke.forEach(t),lhr=i(fe),dT=n(fe,"LI",{});var bke=s(dT);O1e=n(bke,"STRONG",{});var O1t=s(O1e);ihr=r(O1t,"camembert"),O1t.forEach(t),dhr=r(bke," \u2014 "),qQ=n(bke,"A",{href:!0});var V1t=s(qQ);chr=r(V1t,"TFCamembertForMaskedLM"),V1t.forEach(t),fhr=r(bke," (CamemBERT model)"),bke.forEach(t),mhr=i(fe),cT=n(fe,"LI",{});var vke=s(cT);V1e=n(vke,"STRONG",{});var X1t=s(V1e);ghr=r(X1t,"convbert"),X1t.forEach(t),hhr=r(vke," \u2014 "),NQ=n(vke,"A",{href:!0});var z1t=s(NQ);phr=r(z1t,"TFConvBertForMaskedLM"),z1t.forEach(t),uhr=r(vke," (ConvBERT model)"),vke.forEach(t),_hr=i(fe),fT=n(fe,"LI",{});var Fke=s(fT);X1e=n(Fke,"STRONG",{});var Q1t=s(X1e);bhr=r(Q1t,"deberta"),Q1t.forEach(t),vhr=r(Fke," \u2014 "),jQ=n(Fke,"A",{href:!0});var W1t=s(jQ);Fhr=r(W1t,"TFDebertaForMaskedLM"),W1t.forEach(t),Thr=r(Fke," (DeBERTa model)"),Fke.forEach(t),Mhr=i(fe),mT=n(fe,"LI",{});var Tke=s(mT);z1e=n(Tke,"STRONG",{});var H1t=s(z1e);Ehr=r(H1t,"deberta-v2"),H1t.forEach(t),Chr=r(Tke," \u2014 "),DQ=n(Tke,"A",{href:!0});var U1t=s(DQ);whr=r(U1t,"TFDebertaV2ForMaskedLM"),U1t.forEach(t),Ahr=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),yhr=i(fe),gT=n(fe,"LI",{});var Mke=s(gT);Q1e=n(Mke,"STRONG",{});var J1t=s(Q1e);Lhr=r(J1t,"distilbert"),J1t.forEach(t),xhr=r(Mke," \u2014 "),GQ=n(Mke,"A",{href:!0});var Y1t=s(GQ);$hr=r(Y1t,"TFDistilBertForMaskedLM"),Y1t.forEach(t),khr=r(Mke," (DistilBERT model)"),Mke.forEach(t),Shr=i(fe),hT=n(fe,"LI",{});var Eke=s(hT);W1e=n(Eke,"STRONG",{});var K1t=s(W1e);Rhr=r(K1t,"electra"),K1t.forEach(t),Bhr=r(Eke," \u2014 "),OQ=n(Eke,"A",{href:!0});var Z1t=s(OQ);Phr=r(Z1t,"TFElectraForMaskedLM"),Z1t.forEach(t),Ihr=r(Eke," (ELECTRA model)"),Eke.forEach(t),qhr=i(fe),pT=n(fe,"LI",{});var Cke=s(pT);H1e=n(Cke,"STRONG",{});var ebt=s(H1e);Nhr=r(ebt,"flaubert"),ebt.forEach(t),jhr=r(Cke," \u2014 "),VQ=n(Cke,"A",{href:!0});var obt=s(VQ);Dhr=r(obt,"TFFlaubertWithLMHeadModel"),obt.forEach(t),Ghr=r(Cke," (FlauBERT model)"),Cke.forEach(t),Ohr=i(fe),uT=n(fe,"LI",{});var wke=s(uT);U1e=n(wke,"STRONG",{});var rbt=s(U1e);Vhr=r(rbt,"funnel"),rbt.forEach(t),Xhr=r(wke," \u2014 "),XQ=n(wke,"A",{href:!0});var tbt=s(XQ);zhr=r(tbt,"TFFunnelForMaskedLM"),tbt.forEach(t),Qhr=r(wke," (Funnel Transformer model)"),wke.forEach(t),Whr=i(fe),_T=n(fe,"LI",{});var Ake=s(_T);J1e=n(Ake,"STRONG",{});var abt=s(J1e);Hhr=r(abt,"layoutlm"),abt.forEach(t),Uhr=r(Ake," \u2014 "),zQ=n(Ake,"A",{href:!0});var nbt=s(zQ);Jhr=r(nbt,"TFLayoutLMForMaskedLM"),nbt.forEach(t),Yhr=r(Ake," (LayoutLM model)"),Ake.forEach(t),Khr=i(fe),bT=n(fe,"LI",{});var yke=s(bT);Y1e=n(yke,"STRONG",{});var sbt=s(Y1e);Zhr=r(sbt,"longformer"),sbt.forEach(t),epr=r(yke," \u2014 "),QQ=n(yke,"A",{href:!0});var lbt=s(QQ);opr=r(lbt,"TFLongformerForMaskedLM"),lbt.forEach(t),rpr=r(yke," (Longformer model)"),yke.forEach(t),tpr=i(fe),vT=n(fe,"LI",{});var Lke=s(vT);K1e=n(Lke,"STRONG",{});var ibt=s(K1e);apr=r(ibt,"mobilebert"),ibt.forEach(t),npr=r(Lke," \u2014 "),WQ=n(Lke,"A",{href:!0});var dbt=s(WQ);spr=r(dbt,"TFMobileBertForMaskedLM"),dbt.forEach(t),lpr=r(Lke," (MobileBERT model)"),Lke.forEach(t),ipr=i(fe),FT=n(fe,"LI",{});var xke=s(FT);Z1e=n(xke,"STRONG",{});var cbt=s(Z1e);dpr=r(cbt,"mpnet"),cbt.forEach(t),cpr=r(xke," \u2014 "),HQ=n(xke,"A",{href:!0});var fbt=s(HQ);fpr=r(fbt,"TFMPNetForMaskedLM"),fbt.forEach(t),mpr=r(xke," (MPNet model)"),xke.forEach(t),gpr=i(fe),TT=n(fe,"LI",{});var $ke=s(TT);ebe=n($ke,"STRONG",{});var mbt=s(ebe);hpr=r(mbt,"rembert"),mbt.forEach(t),ppr=r($ke," \u2014 "),UQ=n($ke,"A",{href:!0});var gbt=s(UQ);upr=r(gbt,"TFRemBertForMaskedLM"),gbt.forEach(t),_pr=r($ke," (RemBERT model)"),$ke.forEach(t),bpr=i(fe),MT=n(fe,"LI",{});var kke=s(MT);obe=n(kke,"STRONG",{});var hbt=s(obe);vpr=r(hbt,"roberta"),hbt.forEach(t),Fpr=r(kke," \u2014 "),JQ=n(kke,"A",{href:!0});var pbt=s(JQ);Tpr=r(pbt,"TFRobertaForMaskedLM"),pbt.forEach(t),Mpr=r(kke," (RoBERTa model)"),kke.forEach(t),Epr=i(fe),ET=n(fe,"LI",{});var Ske=s(ET);rbe=n(Ske,"STRONG",{});var ubt=s(rbe);Cpr=r(ubt,"roformer"),ubt.forEach(t),wpr=r(Ske," \u2014 "),YQ=n(Ske,"A",{href:!0});var _bt=s(YQ);Apr=r(_bt,"TFRoFormerForMaskedLM"),_bt.forEach(t),ypr=r(Ske," (RoFormer model)"),Ske.forEach(t),Lpr=i(fe),CT=n(fe,"LI",{});var Rke=s(CT);tbe=n(Rke,"STRONG",{});var bbt=s(tbe);xpr=r(bbt,"tapas"),bbt.forEach(t),$pr=r(Rke," \u2014 "),KQ=n(Rke,"A",{href:!0});var vbt=s(KQ);kpr=r(vbt,"TFTapasForMaskedLM"),vbt.forEach(t),Spr=r(Rke," (TAPAS model)"),Rke.forEach(t),Rpr=i(fe),wT=n(fe,"LI",{});var Bke=s(wT);abe=n(Bke,"STRONG",{});var Fbt=s(abe);Bpr=r(Fbt,"xlm"),Fbt.forEach(t),Ppr=r(Bke," \u2014 "),ZQ=n(Bke,"A",{href:!0});var Tbt=s(ZQ);Ipr=r(Tbt,"TFXLMWithLMHeadModel"),Tbt.forEach(t),qpr=r(Bke," (XLM model)"),Bke.forEach(t),Npr=i(fe),AT=n(fe,"LI",{});var Pke=s(AT);nbe=n(Pke,"STRONG",{});var Mbt=s(nbe);jpr=r(Mbt,"xlm-roberta"),Mbt.forEach(t),Dpr=r(Pke," \u2014 "),eW=n(Pke,"A",{href:!0});var Ebt=s(eW);Gpr=r(Ebt,"TFXLMRobertaForMaskedLM"),Ebt.forEach(t),Opr=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),fe.forEach(t),Vpr=i(bl),T(yT.$$.fragment,bl),bl.forEach(t),_l.forEach(t),NIe=i(f),Zd=n(f,"H2",{class:!0});var XNe=s(Zd);LT=n(XNe,"A",{id:!0,class:!0,href:!0});var Cbt=s(LT);sbe=n(Cbt,"SPAN",{});var wbt=s(sbe);T(K8.$$.fragment,wbt),wbt.forEach(t),Cbt.forEach(t),Xpr=i(XNe),lbe=n(XNe,"SPAN",{});var Abt=s(lbe);zpr=r(Abt,"TFAutoModelForSeq2SeqLM"),Abt.forEach(t),XNe.forEach(t),jIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(Z8.$$.fragment,vl),Qpr=i(vl),ec=n(vl,"P",{});var rZ=s(ec);Wpr=r(rZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),oW=n(rZ,"A",{href:!0});var ybt=s(oW);Hpr=r(ybt,"from_pretrained()"),ybt.forEach(t),Upr=r(rZ," class method or the "),rW=n(rZ,"A",{href:!0});var Lbt=s(rW);Jpr=r(Lbt,"from_config()"),Lbt.forEach(t),Ypr=r(rZ,` class
method.`),rZ.forEach(t),Kpr=i(vl),ex=n(vl,"P",{});var zNe=s(ex);Zpr=r(zNe,"This class cannot be instantiated directly using "),ibe=n(zNe,"CODE",{});var xbt=s(ibe);eur=r(xbt,"__init__()"),xbt.forEach(t),our=r(zNe," (throws an error)."),zNe.forEach(t),rur=i(vl),$t=n(vl,"DIV",{class:!0});var e0=s($t);T(ox.$$.fragment,e0),tur=i(e0),dbe=n(e0,"P",{});var $bt=s(dbe);aur=r($bt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$bt.forEach(t),nur=i(e0),oc=n(e0,"P",{});var tZ=s(oc);sur=r(tZ,`Note:
Loading a model from its configuration file does `),cbe=n(tZ,"STRONG",{});var kbt=s(cbe);lur=r(kbt,"not"),kbt.forEach(t),iur=r(tZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(tZ,"A",{href:!0});var Sbt=s(tW);dur=r(Sbt,"from_pretrained()"),Sbt.forEach(t),cur=r(tZ," to load the model weights."),tZ.forEach(t),fur=i(e0),T(xT.$$.fragment,e0),e0.forEach(t),mur=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(rx.$$.fragment,Fl),gur=i(Fl),fbe=n(Fl,"P",{});var Rbt=s(fbe);hur=r(Rbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rbt.forEach(t),pur=i(Fl),tn=n(Fl,"P",{});var o0=s(tn);uur=r(o0,"The model class to instantiate is selected based on the "),mbe=n(o0,"CODE",{});var Bbt=s(mbe);_ur=r(Bbt,"model_type"),Bbt.forEach(t),bur=r(o0,` property of the config object (either
passed as an argument or loaded from `),gbe=n(o0,"CODE",{});var Pbt=s(gbe);vur=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),Fur=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hbe=n(o0,"CODE",{});var Ibt=s(hbe);Tur=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),Mur=r(o0,":"),o0.forEach(t),Eur=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);$T=n(Re,"LI",{});var Ike=s($T);pbe=n(Ike,"STRONG",{});var qbt=s(pbe);Cur=r(qbt,"bart"),qbt.forEach(t),wur=r(Ike," \u2014 "),aW=n(Ike,"A",{href:!0});var Nbt=s(aW);Aur=r(Nbt,"TFBartForConditionalGeneration"),Nbt.forEach(t),yur=r(Ike," (BART model)"),Ike.forEach(t),Lur=i(Re),kT=n(Re,"LI",{});var qke=s(kT);ube=n(qke,"STRONG",{});var jbt=s(ube);xur=r(jbt,"blenderbot"),jbt.forEach(t),$ur=r(qke," \u2014 "),nW=n(qke,"A",{href:!0});var Dbt=s(nW);kur=r(Dbt,"TFBlenderbotForConditionalGeneration"),Dbt.forEach(t),Sur=r(qke," (Blenderbot model)"),qke.forEach(t),Rur=i(Re),ST=n(Re,"LI",{});var Nke=s(ST);_be=n(Nke,"STRONG",{});var Gbt=s(_be);Bur=r(Gbt,"blenderbot-small"),Gbt.forEach(t),Pur=r(Nke," \u2014 "),sW=n(Nke,"A",{href:!0});var Obt=s(sW);Iur=r(Obt,"TFBlenderbotSmallForConditionalGeneration"),Obt.forEach(t),qur=r(Nke," (BlenderbotSmall model)"),Nke.forEach(t),Nur=i(Re),RT=n(Re,"LI",{});var jke=s(RT);bbe=n(jke,"STRONG",{});var Vbt=s(bbe);jur=r(Vbt,"encoder-decoder"),Vbt.forEach(t),Dur=r(jke," \u2014 "),lW=n(jke,"A",{href:!0});var Xbt=s(lW);Gur=r(Xbt,"TFEncoderDecoderModel"),Xbt.forEach(t),Our=r(jke," (Encoder decoder model)"),jke.forEach(t),Vur=i(Re),BT=n(Re,"LI",{});var Dke=s(BT);vbe=n(Dke,"STRONG",{});var zbt=s(vbe);Xur=r(zbt,"led"),zbt.forEach(t),zur=r(Dke," \u2014 "),iW=n(Dke,"A",{href:!0});var Qbt=s(iW);Qur=r(Qbt,"TFLEDForConditionalGeneration"),Qbt.forEach(t),Wur=r(Dke," (LED model)"),Dke.forEach(t),Hur=i(Re),PT=n(Re,"LI",{});var Gke=s(PT);Fbe=n(Gke,"STRONG",{});var Wbt=s(Fbe);Uur=r(Wbt,"marian"),Wbt.forEach(t),Jur=r(Gke," \u2014 "),dW=n(Gke,"A",{href:!0});var Hbt=s(dW);Yur=r(Hbt,"TFMarianMTModel"),Hbt.forEach(t),Kur=r(Gke," (Marian model)"),Gke.forEach(t),Zur=i(Re),IT=n(Re,"LI",{});var Oke=s(IT);Tbe=n(Oke,"STRONG",{});var Ubt=s(Tbe);e_r=r(Ubt,"mbart"),Ubt.forEach(t),o_r=r(Oke," \u2014 "),cW=n(Oke,"A",{href:!0});var Jbt=s(cW);r_r=r(Jbt,"TFMBartForConditionalGeneration"),Jbt.forEach(t),t_r=r(Oke," (mBART model)"),Oke.forEach(t),a_r=i(Re),qT=n(Re,"LI",{});var Vke=s(qT);Mbe=n(Vke,"STRONG",{});var Ybt=s(Mbe);n_r=r(Ybt,"mt5"),Ybt.forEach(t),s_r=r(Vke," \u2014 "),fW=n(Vke,"A",{href:!0});var Kbt=s(fW);l_r=r(Kbt,"TFMT5ForConditionalGeneration"),Kbt.forEach(t),i_r=r(Vke," (mT5 model)"),Vke.forEach(t),d_r=i(Re),NT=n(Re,"LI",{});var Xke=s(NT);Ebe=n(Xke,"STRONG",{});var Zbt=s(Ebe);c_r=r(Zbt,"pegasus"),Zbt.forEach(t),f_r=r(Xke," \u2014 "),mW=n(Xke,"A",{href:!0});var e4t=s(mW);m_r=r(e4t,"TFPegasusForConditionalGeneration"),e4t.forEach(t),g_r=r(Xke," (Pegasus model)"),Xke.forEach(t),h_r=i(Re),jT=n(Re,"LI",{});var zke=s(jT);Cbe=n(zke,"STRONG",{});var o4t=s(Cbe);p_r=r(o4t,"t5"),o4t.forEach(t),u_r=r(zke," \u2014 "),gW=n(zke,"A",{href:!0});var r4t=s(gW);__r=r(r4t,"TFT5ForConditionalGeneration"),r4t.forEach(t),b_r=r(zke," (T5 model)"),zke.forEach(t),Re.forEach(t),v_r=i(Fl),T(DT.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),DIe=i(f),rc=n(f,"H2",{class:!0});var QNe=s(rc);GT=n(QNe,"A",{id:!0,class:!0,href:!0});var t4t=s(GT);wbe=n(t4t,"SPAN",{});var a4t=s(wbe);T(tx.$$.fragment,a4t),a4t.forEach(t),t4t.forEach(t),F_r=i(QNe),Abe=n(QNe,"SPAN",{});var n4t=s(Abe);T_r=r(n4t,"TFAutoModelForSequenceClassification"),n4t.forEach(t),QNe.forEach(t),GIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(ax.$$.fragment,Tl),M_r=i(Tl),tc=n(Tl,"P",{});var aZ=s(tc);E_r=r(aZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hW=n(aZ,"A",{href:!0});var s4t=s(hW);C_r=r(s4t,"from_pretrained()"),s4t.forEach(t),w_r=r(aZ," class method or the "),pW=n(aZ,"A",{href:!0});var l4t=s(pW);A_r=r(l4t,"from_config()"),l4t.forEach(t),y_r=r(aZ,` class
method.`),aZ.forEach(t),L_r=i(Tl),nx=n(Tl,"P",{});var WNe=s(nx);x_r=r(WNe,"This class cannot be instantiated directly using "),ybe=n(WNe,"CODE",{});var i4t=s(ybe);$_r=r(i4t,"__init__()"),i4t.forEach(t),k_r=r(WNe," (throws an error)."),WNe.forEach(t),S_r=i(Tl),kt=n(Tl,"DIV",{class:!0});var r0=s(kt);T(sx.$$.fragment,r0),R_r=i(r0),Lbe=n(r0,"P",{});var d4t=s(Lbe);B_r=r(d4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d4t.forEach(t),P_r=i(r0),ac=n(r0,"P",{});var nZ=s(ac);I_r=r(nZ,`Note:
Loading a model from its configuration file does `),xbe=n(nZ,"STRONG",{});var c4t=s(xbe);q_r=r(c4t,"not"),c4t.forEach(t),N_r=r(nZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(nZ,"A",{href:!0});var f4t=s(uW);j_r=r(f4t,"from_pretrained()"),f4t.forEach(t),D_r=r(nZ," to load the model weights."),nZ.forEach(t),G_r=i(r0),T(OT.$$.fragment,r0),r0.forEach(t),O_r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(lx.$$.fragment,Ml),V_r=i(Ml),$be=n(Ml,"P",{});var m4t=s($be);X_r=r(m4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),m4t.forEach(t),z_r=i(Ml),an=n(Ml,"P",{});var t0=s(an);Q_r=r(t0,"The model class to instantiate is selected based on the "),kbe=n(t0,"CODE",{});var g4t=s(kbe);W_r=r(g4t,"model_type"),g4t.forEach(t),H_r=r(t0,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(t0,"CODE",{});var h4t=s(Sbe);U_r=r(h4t,"pretrained_model_name_or_path"),h4t.forEach(t),J_r=r(t0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(t0,"CODE",{});var p4t=s(Rbe);Y_r=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),K_r=r(t0,":"),t0.forEach(t),Z_r=i(Ml),Z=n(Ml,"UL",{});var te=s(Z);VT=n(te,"LI",{});var Qke=s(VT);Bbe=n(Qke,"STRONG",{});var u4t=s(Bbe);e6r=r(u4t,"albert"),u4t.forEach(t),o6r=r(Qke," \u2014 "),_W=n(Qke,"A",{href:!0});var _4t=s(_W);r6r=r(_4t,"TFAlbertForSequenceClassification"),_4t.forEach(t),t6r=r(Qke," (ALBERT model)"),Qke.forEach(t),a6r=i(te),XT=n(te,"LI",{});var Wke=s(XT);Pbe=n(Wke,"STRONG",{});var b4t=s(Pbe);n6r=r(b4t,"bert"),b4t.forEach(t),s6r=r(Wke," \u2014 "),bW=n(Wke,"A",{href:!0});var v4t=s(bW);l6r=r(v4t,"TFBertForSequenceClassification"),v4t.forEach(t),i6r=r(Wke," (BERT model)"),Wke.forEach(t),d6r=i(te),zT=n(te,"LI",{});var Hke=s(zT);Ibe=n(Hke,"STRONG",{});var F4t=s(Ibe);c6r=r(F4t,"camembert"),F4t.forEach(t),f6r=r(Hke," \u2014 "),vW=n(Hke,"A",{href:!0});var T4t=s(vW);m6r=r(T4t,"TFCamembertForSequenceClassification"),T4t.forEach(t),g6r=r(Hke," (CamemBERT model)"),Hke.forEach(t),h6r=i(te),QT=n(te,"LI",{});var Uke=s(QT);qbe=n(Uke,"STRONG",{});var M4t=s(qbe);p6r=r(M4t,"convbert"),M4t.forEach(t),u6r=r(Uke," \u2014 "),FW=n(Uke,"A",{href:!0});var E4t=s(FW);_6r=r(E4t,"TFConvBertForSequenceClassification"),E4t.forEach(t),b6r=r(Uke," (ConvBERT model)"),Uke.forEach(t),v6r=i(te),WT=n(te,"LI",{});var Jke=s(WT);Nbe=n(Jke,"STRONG",{});var C4t=s(Nbe);F6r=r(C4t,"ctrl"),C4t.forEach(t),T6r=r(Jke," \u2014 "),TW=n(Jke,"A",{href:!0});var w4t=s(TW);M6r=r(w4t,"TFCTRLForSequenceClassification"),w4t.forEach(t),E6r=r(Jke," (CTRL model)"),Jke.forEach(t),C6r=i(te),HT=n(te,"LI",{});var Yke=s(HT);jbe=n(Yke,"STRONG",{});var A4t=s(jbe);w6r=r(A4t,"deberta"),A4t.forEach(t),A6r=r(Yke," \u2014 "),MW=n(Yke,"A",{href:!0});var y4t=s(MW);y6r=r(y4t,"TFDebertaForSequenceClassification"),y4t.forEach(t),L6r=r(Yke," (DeBERTa model)"),Yke.forEach(t),x6r=i(te),UT=n(te,"LI",{});var Kke=s(UT);Dbe=n(Kke,"STRONG",{});var L4t=s(Dbe);$6r=r(L4t,"deberta-v2"),L4t.forEach(t),k6r=r(Kke," \u2014 "),EW=n(Kke,"A",{href:!0});var x4t=s(EW);S6r=r(x4t,"TFDebertaV2ForSequenceClassification"),x4t.forEach(t),R6r=r(Kke," (DeBERTa-v2 model)"),Kke.forEach(t),B6r=i(te),JT=n(te,"LI",{});var Zke=s(JT);Gbe=n(Zke,"STRONG",{});var $4t=s(Gbe);P6r=r($4t,"distilbert"),$4t.forEach(t),I6r=r(Zke," \u2014 "),CW=n(Zke,"A",{href:!0});var k4t=s(CW);q6r=r(k4t,"TFDistilBertForSequenceClassification"),k4t.forEach(t),N6r=r(Zke," (DistilBERT model)"),Zke.forEach(t),j6r=i(te),YT=n(te,"LI",{});var eSe=s(YT);Obe=n(eSe,"STRONG",{});var S4t=s(Obe);D6r=r(S4t,"electra"),S4t.forEach(t),G6r=r(eSe," \u2014 "),wW=n(eSe,"A",{href:!0});var R4t=s(wW);O6r=r(R4t,"TFElectraForSequenceClassification"),R4t.forEach(t),V6r=r(eSe," (ELECTRA model)"),eSe.forEach(t),X6r=i(te),KT=n(te,"LI",{});var oSe=s(KT);Vbe=n(oSe,"STRONG",{});var B4t=s(Vbe);z6r=r(B4t,"flaubert"),B4t.forEach(t),Q6r=r(oSe," \u2014 "),AW=n(oSe,"A",{href:!0});var P4t=s(AW);W6r=r(P4t,"TFFlaubertForSequenceClassification"),P4t.forEach(t),H6r=r(oSe," (FlauBERT model)"),oSe.forEach(t),U6r=i(te),ZT=n(te,"LI",{});var rSe=s(ZT);Xbe=n(rSe,"STRONG",{});var I4t=s(Xbe);J6r=r(I4t,"funnel"),I4t.forEach(t),Y6r=r(rSe," \u2014 "),yW=n(rSe,"A",{href:!0});var q4t=s(yW);K6r=r(q4t,"TFFunnelForSequenceClassification"),q4t.forEach(t),Z6r=r(rSe," (Funnel Transformer model)"),rSe.forEach(t),e1r=i(te),eM=n(te,"LI",{});var tSe=s(eM);zbe=n(tSe,"STRONG",{});var N4t=s(zbe);o1r=r(N4t,"gpt2"),N4t.forEach(t),r1r=r(tSe," \u2014 "),LW=n(tSe,"A",{href:!0});var j4t=s(LW);t1r=r(j4t,"TFGPT2ForSequenceClassification"),j4t.forEach(t),a1r=r(tSe," (OpenAI GPT-2 model)"),tSe.forEach(t),n1r=i(te),oM=n(te,"LI",{});var aSe=s(oM);Qbe=n(aSe,"STRONG",{});var D4t=s(Qbe);s1r=r(D4t,"gptj"),D4t.forEach(t),l1r=r(aSe," \u2014 "),xW=n(aSe,"A",{href:!0});var G4t=s(xW);i1r=r(G4t,"TFGPTJForSequenceClassification"),G4t.forEach(t),d1r=r(aSe," (GPT-J model)"),aSe.forEach(t),c1r=i(te),rM=n(te,"LI",{});var nSe=s(rM);Wbe=n(nSe,"STRONG",{});var O4t=s(Wbe);f1r=r(O4t,"layoutlm"),O4t.forEach(t),m1r=r(nSe," \u2014 "),$W=n(nSe,"A",{href:!0});var V4t=s($W);g1r=r(V4t,"TFLayoutLMForSequenceClassification"),V4t.forEach(t),h1r=r(nSe," (LayoutLM model)"),nSe.forEach(t),p1r=i(te),tM=n(te,"LI",{});var sSe=s(tM);Hbe=n(sSe,"STRONG",{});var X4t=s(Hbe);u1r=r(X4t,"longformer"),X4t.forEach(t),_1r=r(sSe," \u2014 "),kW=n(sSe,"A",{href:!0});var z4t=s(kW);b1r=r(z4t,"TFLongformerForSequenceClassification"),z4t.forEach(t),v1r=r(sSe," (Longformer model)"),sSe.forEach(t),F1r=i(te),aM=n(te,"LI",{});var lSe=s(aM);Ube=n(lSe,"STRONG",{});var Q4t=s(Ube);T1r=r(Q4t,"mobilebert"),Q4t.forEach(t),M1r=r(lSe," \u2014 "),SW=n(lSe,"A",{href:!0});var W4t=s(SW);E1r=r(W4t,"TFMobileBertForSequenceClassification"),W4t.forEach(t),C1r=r(lSe," (MobileBERT model)"),lSe.forEach(t),w1r=i(te),nM=n(te,"LI",{});var iSe=s(nM);Jbe=n(iSe,"STRONG",{});var H4t=s(Jbe);A1r=r(H4t,"mpnet"),H4t.forEach(t),y1r=r(iSe," \u2014 "),RW=n(iSe,"A",{href:!0});var U4t=s(RW);L1r=r(U4t,"TFMPNetForSequenceClassification"),U4t.forEach(t),x1r=r(iSe," (MPNet model)"),iSe.forEach(t),$1r=i(te),sM=n(te,"LI",{});var dSe=s(sM);Ybe=n(dSe,"STRONG",{});var J4t=s(Ybe);k1r=r(J4t,"openai-gpt"),J4t.forEach(t),S1r=r(dSe," \u2014 "),BW=n(dSe,"A",{href:!0});var Y4t=s(BW);R1r=r(Y4t,"TFOpenAIGPTForSequenceClassification"),Y4t.forEach(t),B1r=r(dSe," (OpenAI GPT model)"),dSe.forEach(t),P1r=i(te),lM=n(te,"LI",{});var cSe=s(lM);Kbe=n(cSe,"STRONG",{});var K4t=s(Kbe);I1r=r(K4t,"rembert"),K4t.forEach(t),q1r=r(cSe," \u2014 "),PW=n(cSe,"A",{href:!0});var Z4t=s(PW);N1r=r(Z4t,"TFRemBertForSequenceClassification"),Z4t.forEach(t),j1r=r(cSe," (RemBERT model)"),cSe.forEach(t),D1r=i(te),iM=n(te,"LI",{});var fSe=s(iM);Zbe=n(fSe,"STRONG",{});var e2t=s(Zbe);G1r=r(e2t,"roberta"),e2t.forEach(t),O1r=r(fSe," \u2014 "),IW=n(fSe,"A",{href:!0});var o2t=s(IW);V1r=r(o2t,"TFRobertaForSequenceClassification"),o2t.forEach(t),X1r=r(fSe," (RoBERTa model)"),fSe.forEach(t),z1r=i(te),dM=n(te,"LI",{});var mSe=s(dM);e4e=n(mSe,"STRONG",{});var r2t=s(e4e);Q1r=r(r2t,"roformer"),r2t.forEach(t),W1r=r(mSe," \u2014 "),qW=n(mSe,"A",{href:!0});var t2t=s(qW);H1r=r(t2t,"TFRoFormerForSequenceClassification"),t2t.forEach(t),U1r=r(mSe," (RoFormer model)"),mSe.forEach(t),J1r=i(te),cM=n(te,"LI",{});var gSe=s(cM);o4e=n(gSe,"STRONG",{});var a2t=s(o4e);Y1r=r(a2t,"tapas"),a2t.forEach(t),K1r=r(gSe," \u2014 "),NW=n(gSe,"A",{href:!0});var n2t=s(NW);Z1r=r(n2t,"TFTapasForSequenceClassification"),n2t.forEach(t),ebr=r(gSe," (TAPAS model)"),gSe.forEach(t),obr=i(te),fM=n(te,"LI",{});var hSe=s(fM);r4e=n(hSe,"STRONG",{});var s2t=s(r4e);rbr=r(s2t,"transfo-xl"),s2t.forEach(t),tbr=r(hSe," \u2014 "),jW=n(hSe,"A",{href:!0});var l2t=s(jW);abr=r(l2t,"TFTransfoXLForSequenceClassification"),l2t.forEach(t),nbr=r(hSe," (Transformer-XL model)"),hSe.forEach(t),sbr=i(te),mM=n(te,"LI",{});var pSe=s(mM);t4e=n(pSe,"STRONG",{});var i2t=s(t4e);lbr=r(i2t,"xlm"),i2t.forEach(t),ibr=r(pSe," \u2014 "),DW=n(pSe,"A",{href:!0});var d2t=s(DW);dbr=r(d2t,"TFXLMForSequenceClassification"),d2t.forEach(t),cbr=r(pSe," (XLM model)"),pSe.forEach(t),fbr=i(te),gM=n(te,"LI",{});var uSe=s(gM);a4e=n(uSe,"STRONG",{});var c2t=s(a4e);mbr=r(c2t,"xlm-roberta"),c2t.forEach(t),gbr=r(uSe," \u2014 "),GW=n(uSe,"A",{href:!0});var f2t=s(GW);hbr=r(f2t,"TFXLMRobertaForSequenceClassification"),f2t.forEach(t),pbr=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),ubr=i(te),hM=n(te,"LI",{});var _Se=s(hM);n4e=n(_Se,"STRONG",{});var m2t=s(n4e);_br=r(m2t,"xlnet"),m2t.forEach(t),bbr=r(_Se," \u2014 "),OW=n(_Se,"A",{href:!0});var g2t=s(OW);vbr=r(g2t,"TFXLNetForSequenceClassification"),g2t.forEach(t),Fbr=r(_Se," (XLNet model)"),_Se.forEach(t),te.forEach(t),Tbr=i(Ml),T(pM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),OIe=i(f),nc=n(f,"H2",{class:!0});var HNe=s(nc);uM=n(HNe,"A",{id:!0,class:!0,href:!0});var h2t=s(uM);s4e=n(h2t,"SPAN",{});var p2t=s(s4e);T(ix.$$.fragment,p2t),p2t.forEach(t),h2t.forEach(t),Mbr=i(HNe),l4e=n(HNe,"SPAN",{});var u2t=s(l4e);Ebr=r(u2t,"TFAutoModelForMultipleChoice"),u2t.forEach(t),HNe.forEach(t),VIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(dx.$$.fragment,El),Cbr=i(El),sc=n(El,"P",{});var sZ=s(sc);wbr=r(sZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VW=n(sZ,"A",{href:!0});var _2t=s(VW);Abr=r(_2t,"from_pretrained()"),_2t.forEach(t),ybr=r(sZ," class method or the "),XW=n(sZ,"A",{href:!0});var b2t=s(XW);Lbr=r(b2t,"from_config()"),b2t.forEach(t),xbr=r(sZ,` class
method.`),sZ.forEach(t),$br=i(El),cx=n(El,"P",{});var UNe=s(cx);kbr=r(UNe,"This class cannot be instantiated directly using "),i4e=n(UNe,"CODE",{});var v2t=s(i4e);Sbr=r(v2t,"__init__()"),v2t.forEach(t),Rbr=r(UNe," (throws an error)."),UNe.forEach(t),Bbr=i(El),St=n(El,"DIV",{class:!0});var a0=s(St);T(fx.$$.fragment,a0),Pbr=i(a0),d4e=n(a0,"P",{});var F2t=s(d4e);Ibr=r(F2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F2t.forEach(t),qbr=i(a0),lc=n(a0,"P",{});var lZ=s(lc);Nbr=r(lZ,`Note:
Loading a model from its configuration file does `),c4e=n(lZ,"STRONG",{});var T2t=s(c4e);jbr=r(T2t,"not"),T2t.forEach(t),Dbr=r(lZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(lZ,"A",{href:!0});var M2t=s(zW);Gbr=r(M2t,"from_pretrained()"),M2t.forEach(t),Obr=r(lZ," to load the model weights."),lZ.forEach(t),Vbr=i(a0),T(_M.$$.fragment,a0),a0.forEach(t),Xbr=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(mx.$$.fragment,Cl),zbr=i(Cl),f4e=n(Cl,"P",{});var E2t=s(f4e);Qbr=r(E2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),E2t.forEach(t),Wbr=i(Cl),nn=n(Cl,"P",{});var n0=s(nn);Hbr=r(n0,"The model class to instantiate is selected based on the "),m4e=n(n0,"CODE",{});var C2t=s(m4e);Ubr=r(C2t,"model_type"),C2t.forEach(t),Jbr=r(n0,` property of the config object (either
passed as an argument or loaded from `),g4e=n(n0,"CODE",{});var w2t=s(g4e);Ybr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Kbr=r(n0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(n0,"CODE",{});var A2t=s(h4e);Zbr=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),e4r=r(n0,":"),n0.forEach(t),o4r=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);bM=n(_e,"LI",{});var bSe=s(bM);p4e=n(bSe,"STRONG",{});var y2t=s(p4e);r4r=r(y2t,"albert"),y2t.forEach(t),t4r=r(bSe," \u2014 "),QW=n(bSe,"A",{href:!0});var L2t=s(QW);a4r=r(L2t,"TFAlbertForMultipleChoice"),L2t.forEach(t),n4r=r(bSe," (ALBERT model)"),bSe.forEach(t),s4r=i(_e),vM=n(_e,"LI",{});var vSe=s(vM);u4e=n(vSe,"STRONG",{});var x2t=s(u4e);l4r=r(x2t,"bert"),x2t.forEach(t),i4r=r(vSe," \u2014 "),WW=n(vSe,"A",{href:!0});var $2t=s(WW);d4r=r($2t,"TFBertForMultipleChoice"),$2t.forEach(t),c4r=r(vSe," (BERT model)"),vSe.forEach(t),f4r=i(_e),FM=n(_e,"LI",{});var FSe=s(FM);_4e=n(FSe,"STRONG",{});var k2t=s(_4e);m4r=r(k2t,"camembert"),k2t.forEach(t),g4r=r(FSe," \u2014 "),HW=n(FSe,"A",{href:!0});var S2t=s(HW);h4r=r(S2t,"TFCamembertForMultipleChoice"),S2t.forEach(t),p4r=r(FSe," (CamemBERT model)"),FSe.forEach(t),u4r=i(_e),TM=n(_e,"LI",{});var TSe=s(TM);b4e=n(TSe,"STRONG",{});var R2t=s(b4e);_4r=r(R2t,"convbert"),R2t.forEach(t),b4r=r(TSe," \u2014 "),UW=n(TSe,"A",{href:!0});var B2t=s(UW);v4r=r(B2t,"TFConvBertForMultipleChoice"),B2t.forEach(t),F4r=r(TSe," (ConvBERT model)"),TSe.forEach(t),T4r=i(_e),MM=n(_e,"LI",{});var MSe=s(MM);v4e=n(MSe,"STRONG",{});var P2t=s(v4e);M4r=r(P2t,"distilbert"),P2t.forEach(t),E4r=r(MSe," \u2014 "),JW=n(MSe,"A",{href:!0});var I2t=s(JW);C4r=r(I2t,"TFDistilBertForMultipleChoice"),I2t.forEach(t),w4r=r(MSe," (DistilBERT model)"),MSe.forEach(t),A4r=i(_e),EM=n(_e,"LI",{});var ESe=s(EM);F4e=n(ESe,"STRONG",{});var q2t=s(F4e);y4r=r(q2t,"electra"),q2t.forEach(t),L4r=r(ESe," \u2014 "),YW=n(ESe,"A",{href:!0});var N2t=s(YW);x4r=r(N2t,"TFElectraForMultipleChoice"),N2t.forEach(t),$4r=r(ESe," (ELECTRA model)"),ESe.forEach(t),k4r=i(_e),CM=n(_e,"LI",{});var CSe=s(CM);T4e=n(CSe,"STRONG",{});var j2t=s(T4e);S4r=r(j2t,"flaubert"),j2t.forEach(t),R4r=r(CSe," \u2014 "),KW=n(CSe,"A",{href:!0});var D2t=s(KW);B4r=r(D2t,"TFFlaubertForMultipleChoice"),D2t.forEach(t),P4r=r(CSe," (FlauBERT model)"),CSe.forEach(t),I4r=i(_e),wM=n(_e,"LI",{});var wSe=s(wM);M4e=n(wSe,"STRONG",{});var G2t=s(M4e);q4r=r(G2t,"funnel"),G2t.forEach(t),N4r=r(wSe," \u2014 "),ZW=n(wSe,"A",{href:!0});var O2t=s(ZW);j4r=r(O2t,"TFFunnelForMultipleChoice"),O2t.forEach(t),D4r=r(wSe," (Funnel Transformer model)"),wSe.forEach(t),G4r=i(_e),AM=n(_e,"LI",{});var ASe=s(AM);E4e=n(ASe,"STRONG",{});var V2t=s(E4e);O4r=r(V2t,"longformer"),V2t.forEach(t),V4r=r(ASe," \u2014 "),eH=n(ASe,"A",{href:!0});var X2t=s(eH);X4r=r(X2t,"TFLongformerForMultipleChoice"),X2t.forEach(t),z4r=r(ASe," (Longformer model)"),ASe.forEach(t),Q4r=i(_e),yM=n(_e,"LI",{});var ySe=s(yM);C4e=n(ySe,"STRONG",{});var z2t=s(C4e);W4r=r(z2t,"mobilebert"),z2t.forEach(t),H4r=r(ySe," \u2014 "),oH=n(ySe,"A",{href:!0});var Q2t=s(oH);U4r=r(Q2t,"TFMobileBertForMultipleChoice"),Q2t.forEach(t),J4r=r(ySe," (MobileBERT model)"),ySe.forEach(t),Y4r=i(_e),LM=n(_e,"LI",{});var LSe=s(LM);w4e=n(LSe,"STRONG",{});var W2t=s(w4e);K4r=r(W2t,"mpnet"),W2t.forEach(t),Z4r=r(LSe," \u2014 "),rH=n(LSe,"A",{href:!0});var H2t=s(rH);e2r=r(H2t,"TFMPNetForMultipleChoice"),H2t.forEach(t),o2r=r(LSe," (MPNet model)"),LSe.forEach(t),r2r=i(_e),xM=n(_e,"LI",{});var xSe=s(xM);A4e=n(xSe,"STRONG",{});var U2t=s(A4e);t2r=r(U2t,"rembert"),U2t.forEach(t),a2r=r(xSe," \u2014 "),tH=n(xSe,"A",{href:!0});var J2t=s(tH);n2r=r(J2t,"TFRemBertForMultipleChoice"),J2t.forEach(t),s2r=r(xSe," (RemBERT model)"),xSe.forEach(t),l2r=i(_e),$M=n(_e,"LI",{});var $Se=s($M);y4e=n($Se,"STRONG",{});var Y2t=s(y4e);i2r=r(Y2t,"roberta"),Y2t.forEach(t),d2r=r($Se," \u2014 "),aH=n($Se,"A",{href:!0});var K2t=s(aH);c2r=r(K2t,"TFRobertaForMultipleChoice"),K2t.forEach(t),f2r=r($Se," (RoBERTa model)"),$Se.forEach(t),m2r=i(_e),kM=n(_e,"LI",{});var kSe=s(kM);L4e=n(kSe,"STRONG",{});var Z2t=s(L4e);g2r=r(Z2t,"roformer"),Z2t.forEach(t),h2r=r(kSe," \u2014 "),nH=n(kSe,"A",{href:!0});var e5t=s(nH);p2r=r(e5t,"TFRoFormerForMultipleChoice"),e5t.forEach(t),u2r=r(kSe," (RoFormer model)"),kSe.forEach(t),_2r=i(_e),SM=n(_e,"LI",{});var SSe=s(SM);x4e=n(SSe,"STRONG",{});var o5t=s(x4e);b2r=r(o5t,"xlm"),o5t.forEach(t),v2r=r(SSe," \u2014 "),sH=n(SSe,"A",{href:!0});var r5t=s(sH);F2r=r(r5t,"TFXLMForMultipleChoice"),r5t.forEach(t),T2r=r(SSe," (XLM model)"),SSe.forEach(t),M2r=i(_e),RM=n(_e,"LI",{});var RSe=s(RM);$4e=n(RSe,"STRONG",{});var t5t=s($4e);E2r=r(t5t,"xlm-roberta"),t5t.forEach(t),C2r=r(RSe," \u2014 "),lH=n(RSe,"A",{href:!0});var a5t=s(lH);w2r=r(a5t,"TFXLMRobertaForMultipleChoice"),a5t.forEach(t),A2r=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),y2r=i(_e),BM=n(_e,"LI",{});var BSe=s(BM);k4e=n(BSe,"STRONG",{});var n5t=s(k4e);L2r=r(n5t,"xlnet"),n5t.forEach(t),x2r=r(BSe," \u2014 "),iH=n(BSe,"A",{href:!0});var s5t=s(iH);$2r=r(s5t,"TFXLNetForMultipleChoice"),s5t.forEach(t),k2r=r(BSe," (XLNet model)"),BSe.forEach(t),_e.forEach(t),S2r=i(Cl),T(PM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),XIe=i(f),ic=n(f,"H2",{class:!0});var JNe=s(ic);IM=n(JNe,"A",{id:!0,class:!0,href:!0});var l5t=s(IM);S4e=n(l5t,"SPAN",{});var i5t=s(S4e);T(gx.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),R2r=i(JNe),R4e=n(JNe,"SPAN",{});var d5t=s(R4e);B2r=r(d5t,"TFAutoModelForNextSentencePrediction"),d5t.forEach(t),JNe.forEach(t),zIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(hx.$$.fragment,wl),P2r=i(wl),dc=n(wl,"P",{});var iZ=s(dc);I2r=r(iZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dH=n(iZ,"A",{href:!0});var c5t=s(dH);q2r=r(c5t,"from_pretrained()"),c5t.forEach(t),N2r=r(iZ," class method or the "),cH=n(iZ,"A",{href:!0});var f5t=s(cH);j2r=r(f5t,"from_config()"),f5t.forEach(t),D2r=r(iZ,` class
method.`),iZ.forEach(t),G2r=i(wl),px=n(wl,"P",{});var YNe=s(px);O2r=r(YNe,"This class cannot be instantiated directly using "),B4e=n(YNe,"CODE",{});var m5t=s(B4e);V2r=r(m5t,"__init__()"),m5t.forEach(t),X2r=r(YNe," (throws an error)."),YNe.forEach(t),z2r=i(wl),Rt=n(wl,"DIV",{class:!0});var s0=s(Rt);T(ux.$$.fragment,s0),Q2r=i(s0),P4e=n(s0,"P",{});var g5t=s(P4e);W2r=r(g5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),g5t.forEach(t),H2r=i(s0),cc=n(s0,"P",{});var dZ=s(cc);U2r=r(dZ,`Note:
Loading a model from its configuration file does `),I4e=n(dZ,"STRONG",{});var h5t=s(I4e);J2r=r(h5t,"not"),h5t.forEach(t),Y2r=r(dZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(dZ,"A",{href:!0});var p5t=s(fH);K2r=r(p5t,"from_pretrained()"),p5t.forEach(t),Z2r=r(dZ," to load the model weights."),dZ.forEach(t),e5r=i(s0),T(qM.$$.fragment,s0),s0.forEach(t),o5r=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(_x.$$.fragment,Al),r5r=i(Al),q4e=n(Al,"P",{});var u5t=s(q4e);t5r=r(u5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),u5t.forEach(t),a5r=i(Al),sn=n(Al,"P",{});var l0=s(sn);n5r=r(l0,"The model class to instantiate is selected based on the "),N4e=n(l0,"CODE",{});var _5t=s(N4e);s5r=r(_5t,"model_type"),_5t.forEach(t),l5r=r(l0,` property of the config object (either
passed as an argument or loaded from `),j4e=n(l0,"CODE",{});var b5t=s(j4e);i5r=r(b5t,"pretrained_model_name_or_path"),b5t.forEach(t),d5r=r(l0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(l0,"CODE",{});var v5t=s(D4e);c5r=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),f5r=r(l0,":"),l0.forEach(t),m5r=i(Al),bx=n(Al,"UL",{});var KNe=s(bx);NM=n(KNe,"LI",{});var PSe=s(NM);G4e=n(PSe,"STRONG",{});var F5t=s(G4e);g5r=r(F5t,"bert"),F5t.forEach(t),h5r=r(PSe," \u2014 "),mH=n(PSe,"A",{href:!0});var T5t=s(mH);p5r=r(T5t,"TFBertForNextSentencePrediction"),T5t.forEach(t),u5r=r(PSe," (BERT model)"),PSe.forEach(t),_5r=i(KNe),jM=n(KNe,"LI",{});var ISe=s(jM);O4e=n(ISe,"STRONG",{});var M5t=s(O4e);b5r=r(M5t,"mobilebert"),M5t.forEach(t),v5r=r(ISe," \u2014 "),gH=n(ISe,"A",{href:!0});var E5t=s(gH);F5r=r(E5t,"TFMobileBertForNextSentencePrediction"),E5t.forEach(t),T5r=r(ISe," (MobileBERT model)"),ISe.forEach(t),KNe.forEach(t),M5r=i(Al),T(DM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),QIe=i(f),fc=n(f,"H2",{class:!0});var ZNe=s(fc);GM=n(ZNe,"A",{id:!0,class:!0,href:!0});var C5t=s(GM);V4e=n(C5t,"SPAN",{});var w5t=s(V4e);T(vx.$$.fragment,w5t),w5t.forEach(t),C5t.forEach(t),E5r=i(ZNe),X4e=n(ZNe,"SPAN",{});var A5t=s(X4e);C5r=r(A5t,"TFAutoModelForTableQuestionAnswering"),A5t.forEach(t),ZNe.forEach(t),WIe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(Fx.$$.fragment,yl),w5r=i(yl),mc=n(yl,"P",{});var cZ=s(mc);A5r=r(cZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hH=n(cZ,"A",{href:!0});var y5t=s(hH);y5r=r(y5t,"from_pretrained()"),y5t.forEach(t),L5r=r(cZ," class method or the "),pH=n(cZ,"A",{href:!0});var L5t=s(pH);x5r=r(L5t,"from_config()"),L5t.forEach(t),$5r=r(cZ,` class
method.`),cZ.forEach(t),k5r=i(yl),Tx=n(yl,"P",{});var eje=s(Tx);S5r=r(eje,"This class cannot be instantiated directly using "),z4e=n(eje,"CODE",{});var x5t=s(z4e);R5r=r(x5t,"__init__()"),x5t.forEach(t),B5r=r(eje," (throws an error)."),eje.forEach(t),P5r=i(yl),Bt=n(yl,"DIV",{class:!0});var i0=s(Bt);T(Mx.$$.fragment,i0),I5r=i(i0),Q4e=n(i0,"P",{});var $5t=s(Q4e);q5r=r($5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$5t.forEach(t),N5r=i(i0),gc=n(i0,"P",{});var fZ=s(gc);j5r=r(fZ,`Note:
Loading a model from its configuration file does `),W4e=n(fZ,"STRONG",{});var k5t=s(W4e);D5r=r(k5t,"not"),k5t.forEach(t),G5r=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(fZ,"A",{href:!0});var S5t=s(uH);O5r=r(S5t,"from_pretrained()"),S5t.forEach(t),V5r=r(fZ," to load the model weights."),fZ.forEach(t),X5r=i(i0),T(OM.$$.fragment,i0),i0.forEach(t),z5r=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(Ex.$$.fragment,Ll),Q5r=i(Ll),H4e=n(Ll,"P",{});var R5t=s(H4e);W5r=r(R5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R5t.forEach(t),H5r=i(Ll),ln=n(Ll,"P",{});var d0=s(ln);U5r=r(d0,"The model class to instantiate is selected based on the "),U4e=n(d0,"CODE",{});var B5t=s(U4e);J5r=r(B5t,"model_type"),B5t.forEach(t),Y5r=r(d0,` property of the config object (either
passed as an argument or loaded from `),J4e=n(d0,"CODE",{});var P5t=s(J4e);K5r=r(P5t,"pretrained_model_name_or_path"),P5t.forEach(t),Z5r=r(d0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(d0,"CODE",{});var I5t=s(Y4e);evr=r(I5t,"pretrained_model_name_or_path"),I5t.forEach(t),ovr=r(d0,":"),d0.forEach(t),rvr=i(Ll),K4e=n(Ll,"UL",{});var q5t=s(K4e);VM=n(q5t,"LI",{});var qSe=s(VM);Z4e=n(qSe,"STRONG",{});var N5t=s(Z4e);tvr=r(N5t,"tapas"),N5t.forEach(t),avr=r(qSe," \u2014 "),_H=n(qSe,"A",{href:!0});var j5t=s(_H);nvr=r(j5t,"TFTapasForQuestionAnswering"),j5t.forEach(t),svr=r(qSe," (TAPAS model)"),qSe.forEach(t),q5t.forEach(t),lvr=i(Ll),T(XM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),HIe=i(f),hc=n(f,"H2",{class:!0});var oje=s(hc);zM=n(oje,"A",{id:!0,class:!0,href:!0});var D5t=s(zM);e2e=n(D5t,"SPAN",{});var G5t=s(e2e);T(Cx.$$.fragment,G5t),G5t.forEach(t),D5t.forEach(t),ivr=i(oje),o2e=n(oje,"SPAN",{});var O5t=s(o2e);dvr=r(O5t,"TFAutoModelForTokenClassification"),O5t.forEach(t),oje.forEach(t),UIe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(wx.$$.fragment,xl),cvr=i(xl),pc=n(xl,"P",{});var mZ=s(pc);fvr=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bH=n(mZ,"A",{href:!0});var V5t=s(bH);mvr=r(V5t,"from_pretrained()"),V5t.forEach(t),gvr=r(mZ," class method or the "),vH=n(mZ,"A",{href:!0});var X5t=s(vH);hvr=r(X5t,"from_config()"),X5t.forEach(t),pvr=r(mZ,` class
method.`),mZ.forEach(t),uvr=i(xl),Ax=n(xl,"P",{});var rje=s(Ax);_vr=r(rje,"This class cannot be instantiated directly using "),r2e=n(rje,"CODE",{});var z5t=s(r2e);bvr=r(z5t,"__init__()"),z5t.forEach(t),vvr=r(rje," (throws an error)."),rje.forEach(t),Fvr=i(xl),Pt=n(xl,"DIV",{class:!0});var c0=s(Pt);T(yx.$$.fragment,c0),Tvr=i(c0),t2e=n(c0,"P",{});var Q5t=s(t2e);Mvr=r(Q5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Q5t.forEach(t),Evr=i(c0),uc=n(c0,"P",{});var gZ=s(uc);Cvr=r(gZ,`Note:
Loading a model from its configuration file does `),a2e=n(gZ,"STRONG",{});var W5t=s(a2e);wvr=r(W5t,"not"),W5t.forEach(t),Avr=r(gZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(gZ,"A",{href:!0});var H5t=s(FH);yvr=r(H5t,"from_pretrained()"),H5t.forEach(t),Lvr=r(gZ," to load the model weights."),gZ.forEach(t),xvr=i(c0),T(QM.$$.fragment,c0),c0.forEach(t),$vr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(Lx.$$.fragment,$l),kvr=i($l),n2e=n($l,"P",{});var U5t=s(n2e);Svr=r(U5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U5t.forEach(t),Rvr=i($l),dn=n($l,"P",{});var f0=s(dn);Bvr=r(f0,"The model class to instantiate is selected based on the "),s2e=n(f0,"CODE",{});var J5t=s(s2e);Pvr=r(J5t,"model_type"),J5t.forEach(t),Ivr=r(f0,` property of the config object (either
passed as an argument or loaded from `),l2e=n(f0,"CODE",{});var Y5t=s(l2e);qvr=r(Y5t,"pretrained_model_name_or_path"),Y5t.forEach(t),Nvr=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(f0,"CODE",{});var K5t=s(i2e);jvr=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),Dvr=r(f0,":"),f0.forEach(t),Gvr=i($l),de=n($l,"UL",{});var me=s(de);WM=n(me,"LI",{});var NSe=s(WM);d2e=n(NSe,"STRONG",{});var Z5t=s(d2e);Ovr=r(Z5t,"albert"),Z5t.forEach(t),Vvr=r(NSe," \u2014 "),TH=n(NSe,"A",{href:!0});var evt=s(TH);Xvr=r(evt,"TFAlbertForTokenClassification"),evt.forEach(t),zvr=r(NSe," (ALBERT model)"),NSe.forEach(t),Qvr=i(me),HM=n(me,"LI",{});var jSe=s(HM);c2e=n(jSe,"STRONG",{});var ovt=s(c2e);Wvr=r(ovt,"bert"),ovt.forEach(t),Hvr=r(jSe," \u2014 "),MH=n(jSe,"A",{href:!0});var rvt=s(MH);Uvr=r(rvt,"TFBertForTokenClassification"),rvt.forEach(t),Jvr=r(jSe," (BERT model)"),jSe.forEach(t),Yvr=i(me),UM=n(me,"LI",{});var DSe=s(UM);f2e=n(DSe,"STRONG",{});var tvt=s(f2e);Kvr=r(tvt,"camembert"),tvt.forEach(t),Zvr=r(DSe," \u2014 "),EH=n(DSe,"A",{href:!0});var avt=s(EH);eFr=r(avt,"TFCamembertForTokenClassification"),avt.forEach(t),oFr=r(DSe," (CamemBERT model)"),DSe.forEach(t),rFr=i(me),JM=n(me,"LI",{});var GSe=s(JM);m2e=n(GSe,"STRONG",{});var nvt=s(m2e);tFr=r(nvt,"convbert"),nvt.forEach(t),aFr=r(GSe," \u2014 "),CH=n(GSe,"A",{href:!0});var svt=s(CH);nFr=r(svt,"TFConvBertForTokenClassification"),svt.forEach(t),sFr=r(GSe," (ConvBERT model)"),GSe.forEach(t),lFr=i(me),YM=n(me,"LI",{});var OSe=s(YM);g2e=n(OSe,"STRONG",{});var lvt=s(g2e);iFr=r(lvt,"deberta"),lvt.forEach(t),dFr=r(OSe," \u2014 "),wH=n(OSe,"A",{href:!0});var ivt=s(wH);cFr=r(ivt,"TFDebertaForTokenClassification"),ivt.forEach(t),fFr=r(OSe," (DeBERTa model)"),OSe.forEach(t),mFr=i(me),KM=n(me,"LI",{});var VSe=s(KM);h2e=n(VSe,"STRONG",{});var dvt=s(h2e);gFr=r(dvt,"deberta-v2"),dvt.forEach(t),hFr=r(VSe," \u2014 "),AH=n(VSe,"A",{href:!0});var cvt=s(AH);pFr=r(cvt,"TFDebertaV2ForTokenClassification"),cvt.forEach(t),uFr=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),_Fr=i(me),ZM=n(me,"LI",{});var XSe=s(ZM);p2e=n(XSe,"STRONG",{});var fvt=s(p2e);bFr=r(fvt,"distilbert"),fvt.forEach(t),vFr=r(XSe," \u2014 "),yH=n(XSe,"A",{href:!0});var mvt=s(yH);FFr=r(mvt,"TFDistilBertForTokenClassification"),mvt.forEach(t),TFr=r(XSe," (DistilBERT model)"),XSe.forEach(t),MFr=i(me),eE=n(me,"LI",{});var zSe=s(eE);u2e=n(zSe,"STRONG",{});var gvt=s(u2e);EFr=r(gvt,"electra"),gvt.forEach(t),CFr=r(zSe," \u2014 "),LH=n(zSe,"A",{href:!0});var hvt=s(LH);wFr=r(hvt,"TFElectraForTokenClassification"),hvt.forEach(t),AFr=r(zSe," (ELECTRA model)"),zSe.forEach(t),yFr=i(me),oE=n(me,"LI",{});var QSe=s(oE);_2e=n(QSe,"STRONG",{});var pvt=s(_2e);LFr=r(pvt,"flaubert"),pvt.forEach(t),xFr=r(QSe," \u2014 "),xH=n(QSe,"A",{href:!0});var uvt=s(xH);$Fr=r(uvt,"TFFlaubertForTokenClassification"),uvt.forEach(t),kFr=r(QSe," (FlauBERT model)"),QSe.forEach(t),SFr=i(me),rE=n(me,"LI",{});var WSe=s(rE);b2e=n(WSe,"STRONG",{});var _vt=s(b2e);RFr=r(_vt,"funnel"),_vt.forEach(t),BFr=r(WSe," \u2014 "),$H=n(WSe,"A",{href:!0});var bvt=s($H);PFr=r(bvt,"TFFunnelForTokenClassification"),bvt.forEach(t),IFr=r(WSe," (Funnel Transformer model)"),WSe.forEach(t),qFr=i(me),tE=n(me,"LI",{});var HSe=s(tE);v2e=n(HSe,"STRONG",{});var vvt=s(v2e);NFr=r(vvt,"layoutlm"),vvt.forEach(t),jFr=r(HSe," \u2014 "),kH=n(HSe,"A",{href:!0});var Fvt=s(kH);DFr=r(Fvt,"TFLayoutLMForTokenClassification"),Fvt.forEach(t),GFr=r(HSe," (LayoutLM model)"),HSe.forEach(t),OFr=i(me),aE=n(me,"LI",{});var USe=s(aE);F2e=n(USe,"STRONG",{});var Tvt=s(F2e);VFr=r(Tvt,"longformer"),Tvt.forEach(t),XFr=r(USe," \u2014 "),SH=n(USe,"A",{href:!0});var Mvt=s(SH);zFr=r(Mvt,"TFLongformerForTokenClassification"),Mvt.forEach(t),QFr=r(USe," (Longformer model)"),USe.forEach(t),WFr=i(me),nE=n(me,"LI",{});var JSe=s(nE);T2e=n(JSe,"STRONG",{});var Evt=s(T2e);HFr=r(Evt,"mobilebert"),Evt.forEach(t),UFr=r(JSe," \u2014 "),RH=n(JSe,"A",{href:!0});var Cvt=s(RH);JFr=r(Cvt,"TFMobileBertForTokenClassification"),Cvt.forEach(t),YFr=r(JSe," (MobileBERT model)"),JSe.forEach(t),KFr=i(me),sE=n(me,"LI",{});var YSe=s(sE);M2e=n(YSe,"STRONG",{});var wvt=s(M2e);ZFr=r(wvt,"mpnet"),wvt.forEach(t),eTr=r(YSe," \u2014 "),BH=n(YSe,"A",{href:!0});var Avt=s(BH);oTr=r(Avt,"TFMPNetForTokenClassification"),Avt.forEach(t),rTr=r(YSe," (MPNet model)"),YSe.forEach(t),tTr=i(me),lE=n(me,"LI",{});var KSe=s(lE);E2e=n(KSe,"STRONG",{});var yvt=s(E2e);aTr=r(yvt,"rembert"),yvt.forEach(t),nTr=r(KSe," \u2014 "),PH=n(KSe,"A",{href:!0});var Lvt=s(PH);sTr=r(Lvt,"TFRemBertForTokenClassification"),Lvt.forEach(t),lTr=r(KSe," (RemBERT model)"),KSe.forEach(t),iTr=i(me),iE=n(me,"LI",{});var ZSe=s(iE);C2e=n(ZSe,"STRONG",{});var xvt=s(C2e);dTr=r(xvt,"roberta"),xvt.forEach(t),cTr=r(ZSe," \u2014 "),IH=n(ZSe,"A",{href:!0});var $vt=s(IH);fTr=r($vt,"TFRobertaForTokenClassification"),$vt.forEach(t),mTr=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),gTr=i(me),dE=n(me,"LI",{});var eRe=s(dE);w2e=n(eRe,"STRONG",{});var kvt=s(w2e);hTr=r(kvt,"roformer"),kvt.forEach(t),pTr=r(eRe," \u2014 "),qH=n(eRe,"A",{href:!0});var Svt=s(qH);uTr=r(Svt,"TFRoFormerForTokenClassification"),Svt.forEach(t),_Tr=r(eRe," (RoFormer model)"),eRe.forEach(t),bTr=i(me),cE=n(me,"LI",{});var oRe=s(cE);A2e=n(oRe,"STRONG",{});var Rvt=s(A2e);vTr=r(Rvt,"xlm"),Rvt.forEach(t),FTr=r(oRe," \u2014 "),NH=n(oRe,"A",{href:!0});var Bvt=s(NH);TTr=r(Bvt,"TFXLMForTokenClassification"),Bvt.forEach(t),MTr=r(oRe," (XLM model)"),oRe.forEach(t),ETr=i(me),fE=n(me,"LI",{});var rRe=s(fE);y2e=n(rRe,"STRONG",{});var Pvt=s(y2e);CTr=r(Pvt,"xlm-roberta"),Pvt.forEach(t),wTr=r(rRe," \u2014 "),jH=n(rRe,"A",{href:!0});var Ivt=s(jH);ATr=r(Ivt,"TFXLMRobertaForTokenClassification"),Ivt.forEach(t),yTr=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),LTr=i(me),mE=n(me,"LI",{});var tRe=s(mE);L2e=n(tRe,"STRONG",{});var qvt=s(L2e);xTr=r(qvt,"xlnet"),qvt.forEach(t),$Tr=r(tRe," \u2014 "),DH=n(tRe,"A",{href:!0});var Nvt=s(DH);kTr=r(Nvt,"TFXLNetForTokenClassification"),Nvt.forEach(t),STr=r(tRe," (XLNet model)"),tRe.forEach(t),me.forEach(t),RTr=i($l),T(gE.$$.fragment,$l),$l.forEach(t),xl.forEach(t),JIe=i(f),_c=n(f,"H2",{class:!0});var tje=s(_c);hE=n(tje,"A",{id:!0,class:!0,href:!0});var jvt=s(hE);x2e=n(jvt,"SPAN",{});var Dvt=s(x2e);T(xx.$$.fragment,Dvt),Dvt.forEach(t),jvt.forEach(t),BTr=i(tje),$2e=n(tje,"SPAN",{});var Gvt=s($2e);PTr=r(Gvt,"TFAutoModelForQuestionAnswering"),Gvt.forEach(t),tje.forEach(t),YIe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T($x.$$.fragment,kl),ITr=i(kl),bc=n(kl,"P",{});var hZ=s(bc);qTr=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GH=n(hZ,"A",{href:!0});var Ovt=s(GH);NTr=r(Ovt,"from_pretrained()"),Ovt.forEach(t),jTr=r(hZ," class method or the "),OH=n(hZ,"A",{href:!0});var Vvt=s(OH);DTr=r(Vvt,"from_config()"),Vvt.forEach(t),GTr=r(hZ,` class
method.`),hZ.forEach(t),OTr=i(kl),kx=n(kl,"P",{});var aje=s(kx);VTr=r(aje,"This class cannot be instantiated directly using "),k2e=n(aje,"CODE",{});var Xvt=s(k2e);XTr=r(Xvt,"__init__()"),Xvt.forEach(t),zTr=r(aje," (throws an error)."),aje.forEach(t),QTr=i(kl),It=n(kl,"DIV",{class:!0});var m0=s(It);T(Sx.$$.fragment,m0),WTr=i(m0),S2e=n(m0,"P",{});var zvt=s(S2e);HTr=r(zvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zvt.forEach(t),UTr=i(m0),vc=n(m0,"P",{});var pZ=s(vc);JTr=r(pZ,`Note:
Loading a model from its configuration file does `),R2e=n(pZ,"STRONG",{});var Qvt=s(R2e);YTr=r(Qvt,"not"),Qvt.forEach(t),KTr=r(pZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(pZ,"A",{href:!0});var Wvt=s(VH);ZTr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),eMr=r(pZ," to load the model weights."),pZ.forEach(t),oMr=i(m0),T(pE.$$.fragment,m0),m0.forEach(t),rMr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(Rx.$$.fragment,Sl),tMr=i(Sl),B2e=n(Sl,"P",{});var Hvt=s(B2e);aMr=r(Hvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Hvt.forEach(t),nMr=i(Sl),cn=n(Sl,"P",{});var g0=s(cn);sMr=r(g0,"The model class to instantiate is selected based on the "),P2e=n(g0,"CODE",{});var Uvt=s(P2e);lMr=r(Uvt,"model_type"),Uvt.forEach(t),iMr=r(g0,` property of the config object (either
passed as an argument or loaded from `),I2e=n(g0,"CODE",{});var Jvt=s(I2e);dMr=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),cMr=r(g0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(g0,"CODE",{});var Yvt=s(q2e);fMr=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),mMr=r(g0,":"),g0.forEach(t),gMr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);uE=n(ge,"LI",{});var aRe=s(uE);N2e=n(aRe,"STRONG",{});var Kvt=s(N2e);hMr=r(Kvt,"albert"),Kvt.forEach(t),pMr=r(aRe," \u2014 "),XH=n(aRe,"A",{href:!0});var Zvt=s(XH);uMr=r(Zvt,"TFAlbertForQuestionAnswering"),Zvt.forEach(t),_Mr=r(aRe," (ALBERT model)"),aRe.forEach(t),bMr=i(ge),_E=n(ge,"LI",{});var nRe=s(_E);j2e=n(nRe,"STRONG",{});var eFt=s(j2e);vMr=r(eFt,"bert"),eFt.forEach(t),FMr=r(nRe," \u2014 "),zH=n(nRe,"A",{href:!0});var oFt=s(zH);TMr=r(oFt,"TFBertForQuestionAnswering"),oFt.forEach(t),MMr=r(nRe," (BERT model)"),nRe.forEach(t),EMr=i(ge),bE=n(ge,"LI",{});var sRe=s(bE);D2e=n(sRe,"STRONG",{});var rFt=s(D2e);CMr=r(rFt,"camembert"),rFt.forEach(t),wMr=r(sRe," \u2014 "),QH=n(sRe,"A",{href:!0});var tFt=s(QH);AMr=r(tFt,"TFCamembertForQuestionAnswering"),tFt.forEach(t),yMr=r(sRe," (CamemBERT model)"),sRe.forEach(t),LMr=i(ge),vE=n(ge,"LI",{});var lRe=s(vE);G2e=n(lRe,"STRONG",{});var aFt=s(G2e);xMr=r(aFt,"convbert"),aFt.forEach(t),$Mr=r(lRe," \u2014 "),WH=n(lRe,"A",{href:!0});var nFt=s(WH);kMr=r(nFt,"TFConvBertForQuestionAnswering"),nFt.forEach(t),SMr=r(lRe," (ConvBERT model)"),lRe.forEach(t),RMr=i(ge),FE=n(ge,"LI",{});var iRe=s(FE);O2e=n(iRe,"STRONG",{});var sFt=s(O2e);BMr=r(sFt,"deberta"),sFt.forEach(t),PMr=r(iRe," \u2014 "),HH=n(iRe,"A",{href:!0});var lFt=s(HH);IMr=r(lFt,"TFDebertaForQuestionAnswering"),lFt.forEach(t),qMr=r(iRe," (DeBERTa model)"),iRe.forEach(t),NMr=i(ge),TE=n(ge,"LI",{});var dRe=s(TE);V2e=n(dRe,"STRONG",{});var iFt=s(V2e);jMr=r(iFt,"deberta-v2"),iFt.forEach(t),DMr=r(dRe," \u2014 "),UH=n(dRe,"A",{href:!0});var dFt=s(UH);GMr=r(dFt,"TFDebertaV2ForQuestionAnswering"),dFt.forEach(t),OMr=r(dRe," (DeBERTa-v2 model)"),dRe.forEach(t),VMr=i(ge),ME=n(ge,"LI",{});var cRe=s(ME);X2e=n(cRe,"STRONG",{});var cFt=s(X2e);XMr=r(cFt,"distilbert"),cFt.forEach(t),zMr=r(cRe," \u2014 "),JH=n(cRe,"A",{href:!0});var fFt=s(JH);QMr=r(fFt,"TFDistilBertForQuestionAnswering"),fFt.forEach(t),WMr=r(cRe," (DistilBERT model)"),cRe.forEach(t),HMr=i(ge),EE=n(ge,"LI",{});var fRe=s(EE);z2e=n(fRe,"STRONG",{});var mFt=s(z2e);UMr=r(mFt,"electra"),mFt.forEach(t),JMr=r(fRe," \u2014 "),YH=n(fRe,"A",{href:!0});var gFt=s(YH);YMr=r(gFt,"TFElectraForQuestionAnswering"),gFt.forEach(t),KMr=r(fRe," (ELECTRA model)"),fRe.forEach(t),ZMr=i(ge),CE=n(ge,"LI",{});var mRe=s(CE);Q2e=n(mRe,"STRONG",{});var hFt=s(Q2e);eEr=r(hFt,"flaubert"),hFt.forEach(t),oEr=r(mRe," \u2014 "),KH=n(mRe,"A",{href:!0});var pFt=s(KH);rEr=r(pFt,"TFFlaubertForQuestionAnsweringSimple"),pFt.forEach(t),tEr=r(mRe," (FlauBERT model)"),mRe.forEach(t),aEr=i(ge),wE=n(ge,"LI",{});var gRe=s(wE);W2e=n(gRe,"STRONG",{});var uFt=s(W2e);nEr=r(uFt,"funnel"),uFt.forEach(t),sEr=r(gRe," \u2014 "),ZH=n(gRe,"A",{href:!0});var _Ft=s(ZH);lEr=r(_Ft,"TFFunnelForQuestionAnswering"),_Ft.forEach(t),iEr=r(gRe," (Funnel Transformer model)"),gRe.forEach(t),dEr=i(ge),AE=n(ge,"LI",{});var hRe=s(AE);H2e=n(hRe,"STRONG",{});var bFt=s(H2e);cEr=r(bFt,"gptj"),bFt.forEach(t),fEr=r(hRe," \u2014 "),eU=n(hRe,"A",{href:!0});var vFt=s(eU);mEr=r(vFt,"TFGPTJForQuestionAnswering"),vFt.forEach(t),gEr=r(hRe," (GPT-J model)"),hRe.forEach(t),hEr=i(ge),yE=n(ge,"LI",{});var pRe=s(yE);U2e=n(pRe,"STRONG",{});var FFt=s(U2e);pEr=r(FFt,"longformer"),FFt.forEach(t),uEr=r(pRe," \u2014 "),oU=n(pRe,"A",{href:!0});var TFt=s(oU);_Er=r(TFt,"TFLongformerForQuestionAnswering"),TFt.forEach(t),bEr=r(pRe," (Longformer model)"),pRe.forEach(t),vEr=i(ge),LE=n(ge,"LI",{});var uRe=s(LE);J2e=n(uRe,"STRONG",{});var MFt=s(J2e);FEr=r(MFt,"mobilebert"),MFt.forEach(t),TEr=r(uRe," \u2014 "),rU=n(uRe,"A",{href:!0});var EFt=s(rU);MEr=r(EFt,"TFMobileBertForQuestionAnswering"),EFt.forEach(t),EEr=r(uRe," (MobileBERT model)"),uRe.forEach(t),CEr=i(ge),xE=n(ge,"LI",{});var _Re=s(xE);Y2e=n(_Re,"STRONG",{});var CFt=s(Y2e);wEr=r(CFt,"mpnet"),CFt.forEach(t),AEr=r(_Re," \u2014 "),tU=n(_Re,"A",{href:!0});var wFt=s(tU);yEr=r(wFt,"TFMPNetForQuestionAnswering"),wFt.forEach(t),LEr=r(_Re," (MPNet model)"),_Re.forEach(t),xEr=i(ge),$E=n(ge,"LI",{});var bRe=s($E);K2e=n(bRe,"STRONG",{});var AFt=s(K2e);$Er=r(AFt,"rembert"),AFt.forEach(t),kEr=r(bRe," \u2014 "),aU=n(bRe,"A",{href:!0});var yFt=s(aU);SEr=r(yFt,"TFRemBertForQuestionAnswering"),yFt.forEach(t),REr=r(bRe," (RemBERT model)"),bRe.forEach(t),BEr=i(ge),kE=n(ge,"LI",{});var vRe=s(kE);Z2e=n(vRe,"STRONG",{});var LFt=s(Z2e);PEr=r(LFt,"roberta"),LFt.forEach(t),IEr=r(vRe," \u2014 "),nU=n(vRe,"A",{href:!0});var xFt=s(nU);qEr=r(xFt,"TFRobertaForQuestionAnswering"),xFt.forEach(t),NEr=r(vRe," (RoBERTa model)"),vRe.forEach(t),jEr=i(ge),SE=n(ge,"LI",{});var FRe=s(SE);e5e=n(FRe,"STRONG",{});var $Ft=s(e5e);DEr=r($Ft,"roformer"),$Ft.forEach(t),GEr=r(FRe," \u2014 "),sU=n(FRe,"A",{href:!0});var kFt=s(sU);OEr=r(kFt,"TFRoFormerForQuestionAnswering"),kFt.forEach(t),VEr=r(FRe," (RoFormer model)"),FRe.forEach(t),XEr=i(ge),RE=n(ge,"LI",{});var TRe=s(RE);o5e=n(TRe,"STRONG",{});var SFt=s(o5e);zEr=r(SFt,"xlm"),SFt.forEach(t),QEr=r(TRe," \u2014 "),lU=n(TRe,"A",{href:!0});var RFt=s(lU);WEr=r(RFt,"TFXLMForQuestionAnsweringSimple"),RFt.forEach(t),HEr=r(TRe," (XLM model)"),TRe.forEach(t),UEr=i(ge),BE=n(ge,"LI",{});var MRe=s(BE);r5e=n(MRe,"STRONG",{});var BFt=s(r5e);JEr=r(BFt,"xlm-roberta"),BFt.forEach(t),YEr=r(MRe," \u2014 "),iU=n(MRe,"A",{href:!0});var PFt=s(iU);KEr=r(PFt,"TFXLMRobertaForQuestionAnswering"),PFt.forEach(t),ZEr=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),eCr=i(ge),PE=n(ge,"LI",{});var ERe=s(PE);t5e=n(ERe,"STRONG",{});var IFt=s(t5e);oCr=r(IFt,"xlnet"),IFt.forEach(t),rCr=r(ERe," \u2014 "),dU=n(ERe,"A",{href:!0});var qFt=s(dU);tCr=r(qFt,"TFXLNetForQuestionAnsweringSimple"),qFt.forEach(t),aCr=r(ERe," (XLNet model)"),ERe.forEach(t),ge.forEach(t),nCr=i(Sl),T(IE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),KIe=i(f),Fc=n(f,"H2",{class:!0});var nje=s(Fc);qE=n(nje,"A",{id:!0,class:!0,href:!0});var NFt=s(qE);a5e=n(NFt,"SPAN",{});var jFt=s(a5e);T(Bx.$$.fragment,jFt),jFt.forEach(t),NFt.forEach(t),sCr=i(nje),n5e=n(nje,"SPAN",{});var DFt=s(n5e);lCr=r(DFt,"TFAutoModelForVision2Seq"),DFt.forEach(t),nje.forEach(t),ZIe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(Px.$$.fragment,Rl),iCr=i(Rl),Tc=n(Rl,"P",{});var uZ=s(Tc);dCr=r(uZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cU=n(uZ,"A",{href:!0});var GFt=s(cU);cCr=r(GFt,"from_pretrained()"),GFt.forEach(t),fCr=r(uZ," class method or the "),fU=n(uZ,"A",{href:!0});var OFt=s(fU);mCr=r(OFt,"from_config()"),OFt.forEach(t),gCr=r(uZ,` class
method.`),uZ.forEach(t),hCr=i(Rl),Ix=n(Rl,"P",{});var sje=s(Ix);pCr=r(sje,"This class cannot be instantiated directly using "),s5e=n(sje,"CODE",{});var VFt=s(s5e);uCr=r(VFt,"__init__()"),VFt.forEach(t),_Cr=r(sje," (throws an error)."),sje.forEach(t),bCr=i(Rl),qt=n(Rl,"DIV",{class:!0});var h0=s(qt);T(qx.$$.fragment,h0),vCr=i(h0),l5e=n(h0,"P",{});var XFt=s(l5e);FCr=r(XFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XFt.forEach(t),TCr=i(h0),Mc=n(h0,"P",{});var _Z=s(Mc);MCr=r(_Z,`Note:
Loading a model from its configuration file does `),i5e=n(_Z,"STRONG",{});var zFt=s(i5e);ECr=r(zFt,"not"),zFt.forEach(t),CCr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(_Z,"A",{href:!0});var QFt=s(mU);wCr=r(QFt,"from_pretrained()"),QFt.forEach(t),ACr=r(_Z," to load the model weights."),_Z.forEach(t),yCr=i(h0),T(NE.$$.fragment,h0),h0.forEach(t),LCr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(Nx.$$.fragment,Bl),xCr=i(Bl),d5e=n(Bl,"P",{});var WFt=s(d5e);$Cr=r(WFt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WFt.forEach(t),kCr=i(Bl),fn=n(Bl,"P",{});var p0=s(fn);SCr=r(p0,"The model class to instantiate is selected based on the "),c5e=n(p0,"CODE",{});var HFt=s(c5e);RCr=r(HFt,"model_type"),HFt.forEach(t),BCr=r(p0,` property of the config object (either
passed as an argument or loaded from `),f5e=n(p0,"CODE",{});var UFt=s(f5e);PCr=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),ICr=r(p0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(p0,"CODE",{});var JFt=s(m5e);qCr=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),NCr=r(p0,":"),p0.forEach(t),jCr=i(Bl),g5e=n(Bl,"UL",{});var YFt=s(g5e);jE=n(YFt,"LI",{});var CRe=s(jE);h5e=n(CRe,"STRONG",{});var KFt=s(h5e);DCr=r(KFt,"vision-encoder-decoder"),KFt.forEach(t),GCr=r(CRe," \u2014 "),gU=n(CRe,"A",{href:!0});var ZFt=s(gU);OCr=r(ZFt,"TFVisionEncoderDecoderModel"),ZFt.forEach(t),VCr=r(CRe," (Vision Encoder decoder model)"),CRe.forEach(t),YFt.forEach(t),XCr=i(Bl),T(DE.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),eqe=i(f),Ec=n(f,"H2",{class:!0});var lje=s(Ec);GE=n(lje,"A",{id:!0,class:!0,href:!0});var eTt=s(GE);p5e=n(eTt,"SPAN",{});var oTt=s(p5e);T(jx.$$.fragment,oTt),oTt.forEach(t),eTt.forEach(t),zCr=i(lje),u5e=n(lje,"SPAN",{});var rTt=s(u5e);QCr=r(rTt,"TFAutoModelForSpeechSeq2Seq"),rTt.forEach(t),lje.forEach(t),oqe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(Dx.$$.fragment,Pl),WCr=i(Pl),Cc=n(Pl,"P",{});var bZ=s(Cc);HCr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hU=n(bZ,"A",{href:!0});var tTt=s(hU);UCr=r(tTt,"from_pretrained()"),tTt.forEach(t),JCr=r(bZ," class method or the "),pU=n(bZ,"A",{href:!0});var aTt=s(pU);YCr=r(aTt,"from_config()"),aTt.forEach(t),KCr=r(bZ,` class
method.`),bZ.forEach(t),ZCr=i(Pl),Gx=n(Pl,"P",{});var ije=s(Gx);e3r=r(ije,"This class cannot be instantiated directly using "),_5e=n(ije,"CODE",{});var nTt=s(_5e);o3r=r(nTt,"__init__()"),nTt.forEach(t),r3r=r(ije," (throws an error)."),ije.forEach(t),t3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var u0=s(Nt);T(Ox.$$.fragment,u0),a3r=i(u0),b5e=n(u0,"P",{});var sTt=s(b5e);n3r=r(sTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sTt.forEach(t),s3r=i(u0),wc=n(u0,"P",{});var vZ=s(wc);l3r=r(vZ,`Note:
Loading a model from its configuration file does `),v5e=n(vZ,"STRONG",{});var lTt=s(v5e);i3r=r(lTt,"not"),lTt.forEach(t),d3r=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(vZ,"A",{href:!0});var iTt=s(uU);c3r=r(iTt,"from_pretrained()"),iTt.forEach(t),f3r=r(vZ," to load the model weights."),vZ.forEach(t),m3r=i(u0),T(OE.$$.fragment,u0),u0.forEach(t),g3r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(Vx.$$.fragment,Il),h3r=i(Il),F5e=n(Il,"P",{});var dTt=s(F5e);p3r=r(dTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dTt.forEach(t),u3r=i(Il),mn=n(Il,"P",{});var _0=s(mn);_3r=r(_0,"The model class to instantiate is selected based on the "),T5e=n(_0,"CODE",{});var cTt=s(T5e);b3r=r(cTt,"model_type"),cTt.forEach(t),v3r=r(_0,` property of the config object (either
passed as an argument or loaded from `),M5e=n(_0,"CODE",{});var fTt=s(M5e);F3r=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),T3r=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E5e=n(_0,"CODE",{});var mTt=s(E5e);M3r=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),E3r=r(_0,":"),_0.forEach(t),C3r=i(Il),C5e=n(Il,"UL",{});var gTt=s(C5e);VE=n(gTt,"LI",{});var wRe=s(VE);w5e=n(wRe,"STRONG",{});var hTt=s(w5e);w3r=r(hTt,"speech_to_text"),hTt.forEach(t),A3r=r(wRe," \u2014 "),_U=n(wRe,"A",{href:!0});var pTt=s(_U);y3r=r(pTt,"TFSpeech2TextForConditionalGeneration"),pTt.forEach(t),L3r=r(wRe," (Speech2Text model)"),wRe.forEach(t),gTt.forEach(t),x3r=i(Il),T(XE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),rqe=i(f),Ac=n(f,"H2",{class:!0});var dje=s(Ac);zE=n(dje,"A",{id:!0,class:!0,href:!0});var uTt=s(zE);A5e=n(uTt,"SPAN",{});var _Tt=s(A5e);T(Xx.$$.fragment,_Tt),_Tt.forEach(t),uTt.forEach(t),$3r=i(dje),y5e=n(dje,"SPAN",{});var bTt=s(y5e);k3r=r(bTt,"FlaxAutoModel"),bTt.forEach(t),dje.forEach(t),tqe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(zx.$$.fragment,ql),S3r=i(ql),yc=n(ql,"P",{});var FZ=s(yc);R3r=r(FZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bU=n(FZ,"A",{href:!0});var vTt=s(bU);B3r=r(vTt,"from_pretrained()"),vTt.forEach(t),P3r=r(FZ," class method or the "),vU=n(FZ,"A",{href:!0});var FTt=s(vU);I3r=r(FTt,"from_config()"),FTt.forEach(t),q3r=r(FZ,` class
method.`),FZ.forEach(t),N3r=i(ql),Qx=n(ql,"P",{});var cje=s(Qx);j3r=r(cje,"This class cannot be instantiated directly using "),L5e=n(cje,"CODE",{});var TTt=s(L5e);D3r=r(TTt,"__init__()"),TTt.forEach(t),G3r=r(cje," (throws an error)."),cje.forEach(t),O3r=i(ql),jt=n(ql,"DIV",{class:!0});var b0=s(jt);T(Wx.$$.fragment,b0),V3r=i(b0),x5e=n(b0,"P",{});var MTt=s(x5e);X3r=r(MTt,"Instantiates one of the base model classes of the library from a configuration."),MTt.forEach(t),z3r=i(b0),Lc=n(b0,"P",{});var TZ=s(Lc);Q3r=r(TZ,`Note:
Loading a model from its configuration file does `),$5e=n(TZ,"STRONG",{});var ETt=s($5e);W3r=r(ETt,"not"),ETt.forEach(t),H3r=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(TZ,"A",{href:!0});var CTt=s(FU);U3r=r(CTt,"from_pretrained()"),CTt.forEach(t),J3r=r(TZ," to load the model weights."),TZ.forEach(t),Y3r=i(b0),T(QE.$$.fragment,b0),b0.forEach(t),K3r=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(Hx.$$.fragment,Nl),Z3r=i(Nl),k5e=n(Nl,"P",{});var wTt=s(k5e);ewr=r(wTt,"Instantiate one of the base model classes of the library from a pretrained model."),wTt.forEach(t),owr=i(Nl),gn=n(Nl,"P",{});var v0=s(gn);rwr=r(v0,"The model class to instantiate is selected based on the "),S5e=n(v0,"CODE",{});var ATt=s(S5e);twr=r(ATt,"model_type"),ATt.forEach(t),awr=r(v0,` property of the config object (either
passed as an argument or loaded from `),R5e=n(v0,"CODE",{});var yTt=s(R5e);nwr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),swr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(v0,"CODE",{});var LTt=s(B5e);lwr=r(LTt,"pretrained_model_name_or_path"),LTt.forEach(t),iwr=r(v0,":"),v0.forEach(t),dwr=i(Nl),re=n(Nl,"UL",{});var ne=s(re);WE=n(ne,"LI",{});var ARe=s(WE);P5e=n(ARe,"STRONG",{});var xTt=s(P5e);cwr=r(xTt,"albert"),xTt.forEach(t),fwr=r(ARe," \u2014 "),TU=n(ARe,"A",{href:!0});var $Tt=s(TU);mwr=r($Tt,"FlaxAlbertModel"),$Tt.forEach(t),gwr=r(ARe," (ALBERT model)"),ARe.forEach(t),hwr=i(ne),HE=n(ne,"LI",{});var yRe=s(HE);I5e=n(yRe,"STRONG",{});var kTt=s(I5e);pwr=r(kTt,"bart"),kTt.forEach(t),uwr=r(yRe," \u2014 "),MU=n(yRe,"A",{href:!0});var STt=s(MU);_wr=r(STt,"FlaxBartModel"),STt.forEach(t),bwr=r(yRe," (BART model)"),yRe.forEach(t),vwr=i(ne),UE=n(ne,"LI",{});var LRe=s(UE);q5e=n(LRe,"STRONG",{});var RTt=s(q5e);Fwr=r(RTt,"beit"),RTt.forEach(t),Twr=r(LRe," \u2014 "),EU=n(LRe,"A",{href:!0});var BTt=s(EU);Mwr=r(BTt,"FlaxBeitModel"),BTt.forEach(t),Ewr=r(LRe," (BEiT model)"),LRe.forEach(t),Cwr=i(ne),JE=n(ne,"LI",{});var xRe=s(JE);N5e=n(xRe,"STRONG",{});var PTt=s(N5e);wwr=r(PTt,"bert"),PTt.forEach(t),Awr=r(xRe," \u2014 "),CU=n(xRe,"A",{href:!0});var ITt=s(CU);ywr=r(ITt,"FlaxBertModel"),ITt.forEach(t),Lwr=r(xRe," (BERT model)"),xRe.forEach(t),xwr=i(ne),YE=n(ne,"LI",{});var $Re=s(YE);j5e=n($Re,"STRONG",{});var qTt=s(j5e);$wr=r(qTt,"big_bird"),qTt.forEach(t),kwr=r($Re," \u2014 "),wU=n($Re,"A",{href:!0});var NTt=s(wU);Swr=r(NTt,"FlaxBigBirdModel"),NTt.forEach(t),Rwr=r($Re," (BigBird model)"),$Re.forEach(t),Bwr=i(ne),KE=n(ne,"LI",{});var kRe=s(KE);D5e=n(kRe,"STRONG",{});var jTt=s(D5e);Pwr=r(jTt,"blenderbot"),jTt.forEach(t),Iwr=r(kRe," \u2014 "),AU=n(kRe,"A",{href:!0});var DTt=s(AU);qwr=r(DTt,"FlaxBlenderbotModel"),DTt.forEach(t),Nwr=r(kRe," (Blenderbot model)"),kRe.forEach(t),jwr=i(ne),ZE=n(ne,"LI",{});var SRe=s(ZE);G5e=n(SRe,"STRONG",{});var GTt=s(G5e);Dwr=r(GTt,"blenderbot-small"),GTt.forEach(t),Gwr=r(SRe," \u2014 "),yU=n(SRe,"A",{href:!0});var OTt=s(yU);Owr=r(OTt,"FlaxBlenderbotSmallModel"),OTt.forEach(t),Vwr=r(SRe," (BlenderbotSmall model)"),SRe.forEach(t),Xwr=i(ne),eC=n(ne,"LI",{});var RRe=s(eC);O5e=n(RRe,"STRONG",{});var VTt=s(O5e);zwr=r(VTt,"clip"),VTt.forEach(t),Qwr=r(RRe," \u2014 "),LU=n(RRe,"A",{href:!0});var XTt=s(LU);Wwr=r(XTt,"FlaxCLIPModel"),XTt.forEach(t),Hwr=r(RRe," (CLIP model)"),RRe.forEach(t),Uwr=i(ne),oC=n(ne,"LI",{});var BRe=s(oC);V5e=n(BRe,"STRONG",{});var zTt=s(V5e);Jwr=r(zTt,"distilbert"),zTt.forEach(t),Ywr=r(BRe," \u2014 "),xU=n(BRe,"A",{href:!0});var QTt=s(xU);Kwr=r(QTt,"FlaxDistilBertModel"),QTt.forEach(t),Zwr=r(BRe," (DistilBERT model)"),BRe.forEach(t),eAr=i(ne),rC=n(ne,"LI",{});var PRe=s(rC);X5e=n(PRe,"STRONG",{});var WTt=s(X5e);oAr=r(WTt,"electra"),WTt.forEach(t),rAr=r(PRe," \u2014 "),$U=n(PRe,"A",{href:!0});var HTt=s($U);tAr=r(HTt,"FlaxElectraModel"),HTt.forEach(t),aAr=r(PRe," (ELECTRA model)"),PRe.forEach(t),nAr=i(ne),tC=n(ne,"LI",{});var IRe=s(tC);z5e=n(IRe,"STRONG",{});var UTt=s(z5e);sAr=r(UTt,"gpt2"),UTt.forEach(t),lAr=r(IRe," \u2014 "),kU=n(IRe,"A",{href:!0});var JTt=s(kU);iAr=r(JTt,"FlaxGPT2Model"),JTt.forEach(t),dAr=r(IRe," (OpenAI GPT-2 model)"),IRe.forEach(t),cAr=i(ne),aC=n(ne,"LI",{});var qRe=s(aC);Q5e=n(qRe,"STRONG",{});var YTt=s(Q5e);fAr=r(YTt,"gpt_neo"),YTt.forEach(t),mAr=r(qRe," \u2014 "),SU=n(qRe,"A",{href:!0});var KTt=s(SU);gAr=r(KTt,"FlaxGPTNeoModel"),KTt.forEach(t),hAr=r(qRe," (GPT Neo model)"),qRe.forEach(t),pAr=i(ne),nC=n(ne,"LI",{});var NRe=s(nC);W5e=n(NRe,"STRONG",{});var ZTt=s(W5e);uAr=r(ZTt,"gptj"),ZTt.forEach(t),_Ar=r(NRe," \u2014 "),RU=n(NRe,"A",{href:!0});var eMt=s(RU);bAr=r(eMt,"FlaxGPTJModel"),eMt.forEach(t),vAr=r(NRe," (GPT-J model)"),NRe.forEach(t),FAr=i(ne),sC=n(ne,"LI",{});var jRe=s(sC);H5e=n(jRe,"STRONG",{});var oMt=s(H5e);TAr=r(oMt,"marian"),oMt.forEach(t),MAr=r(jRe," \u2014 "),BU=n(jRe,"A",{href:!0});var rMt=s(BU);EAr=r(rMt,"FlaxMarianModel"),rMt.forEach(t),CAr=r(jRe," (Marian model)"),jRe.forEach(t),wAr=i(ne),lC=n(ne,"LI",{});var DRe=s(lC);U5e=n(DRe,"STRONG",{});var tMt=s(U5e);AAr=r(tMt,"mbart"),tMt.forEach(t),yAr=r(DRe," \u2014 "),PU=n(DRe,"A",{href:!0});var aMt=s(PU);LAr=r(aMt,"FlaxMBartModel"),aMt.forEach(t),xAr=r(DRe," (mBART model)"),DRe.forEach(t),$Ar=i(ne),iC=n(ne,"LI",{});var GRe=s(iC);J5e=n(GRe,"STRONG",{});var nMt=s(J5e);kAr=r(nMt,"mt5"),nMt.forEach(t),SAr=r(GRe," \u2014 "),IU=n(GRe,"A",{href:!0});var sMt=s(IU);RAr=r(sMt,"FlaxMT5Model"),sMt.forEach(t),BAr=r(GRe," (mT5 model)"),GRe.forEach(t),PAr=i(ne),dC=n(ne,"LI",{});var ORe=s(dC);Y5e=n(ORe,"STRONG",{});var lMt=s(Y5e);IAr=r(lMt,"pegasus"),lMt.forEach(t),qAr=r(ORe," \u2014 "),qU=n(ORe,"A",{href:!0});var iMt=s(qU);NAr=r(iMt,"FlaxPegasusModel"),iMt.forEach(t),jAr=r(ORe," (Pegasus model)"),ORe.forEach(t),DAr=i(ne),cC=n(ne,"LI",{});var VRe=s(cC);K5e=n(VRe,"STRONG",{});var dMt=s(K5e);GAr=r(dMt,"roberta"),dMt.forEach(t),OAr=r(VRe," \u2014 "),NU=n(VRe,"A",{href:!0});var cMt=s(NU);VAr=r(cMt,"FlaxRobertaModel"),cMt.forEach(t),XAr=r(VRe," (RoBERTa model)"),VRe.forEach(t),zAr=i(ne),fC=n(ne,"LI",{});var XRe=s(fC);Z5e=n(XRe,"STRONG",{});var fMt=s(Z5e);QAr=r(fMt,"roformer"),fMt.forEach(t),WAr=r(XRe," \u2014 "),jU=n(XRe,"A",{href:!0});var mMt=s(jU);HAr=r(mMt,"FlaxRoFormerModel"),mMt.forEach(t),UAr=r(XRe," (RoFormer model)"),XRe.forEach(t),JAr=i(ne),mC=n(ne,"LI",{});var zRe=s(mC);eve=n(zRe,"STRONG",{});var gMt=s(eve);YAr=r(gMt,"t5"),gMt.forEach(t),KAr=r(zRe," \u2014 "),DU=n(zRe,"A",{href:!0});var hMt=s(DU);ZAr=r(hMt,"FlaxT5Model"),hMt.forEach(t),e0r=r(zRe," (T5 model)"),zRe.forEach(t),o0r=i(ne),gC=n(ne,"LI",{});var QRe=s(gC);ove=n(QRe,"STRONG",{});var pMt=s(ove);r0r=r(pMt,"vision-text-dual-encoder"),pMt.forEach(t),t0r=r(QRe," \u2014 "),GU=n(QRe,"A",{href:!0});var uMt=s(GU);a0r=r(uMt,"FlaxVisionTextDualEncoderModel"),uMt.forEach(t),n0r=r(QRe," (VisionTextDualEncoder model)"),QRe.forEach(t),s0r=i(ne),hC=n(ne,"LI",{});var WRe=s(hC);rve=n(WRe,"STRONG",{});var _Mt=s(rve);l0r=r(_Mt,"vit"),_Mt.forEach(t),i0r=r(WRe," \u2014 "),OU=n(WRe,"A",{href:!0});var bMt=s(OU);d0r=r(bMt,"FlaxViTModel"),bMt.forEach(t),c0r=r(WRe," (ViT model)"),WRe.forEach(t),f0r=i(ne),pC=n(ne,"LI",{});var HRe=s(pC);tve=n(HRe,"STRONG",{});var vMt=s(tve);m0r=r(vMt,"wav2vec2"),vMt.forEach(t),g0r=r(HRe," \u2014 "),VU=n(HRe,"A",{href:!0});var FMt=s(VU);h0r=r(FMt,"FlaxWav2Vec2Model"),FMt.forEach(t),p0r=r(HRe," (Wav2Vec2 model)"),HRe.forEach(t),u0r=i(ne),uC=n(ne,"LI",{});var URe=s(uC);ave=n(URe,"STRONG",{});var TMt=s(ave);_0r=r(TMt,"xglm"),TMt.forEach(t),b0r=r(URe," \u2014 "),XU=n(URe,"A",{href:!0});var MMt=s(XU);v0r=r(MMt,"FlaxXGLMModel"),MMt.forEach(t),F0r=r(URe," (XGLM model)"),URe.forEach(t),T0r=i(ne),_C=n(ne,"LI",{});var JRe=s(_C);nve=n(JRe,"STRONG",{});var EMt=s(nve);M0r=r(EMt,"xlm-roberta"),EMt.forEach(t),E0r=r(JRe," \u2014 "),zU=n(JRe,"A",{href:!0});var CMt=s(zU);C0r=r(CMt,"FlaxXLMRobertaModel"),CMt.forEach(t),w0r=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),ne.forEach(t),A0r=i(Nl),T(bC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),aqe=i(f),xc=n(f,"H2",{class:!0});var fje=s(xc);vC=n(fje,"A",{id:!0,class:!0,href:!0});var wMt=s(vC);sve=n(wMt,"SPAN",{});var AMt=s(sve);T(Ux.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),y0r=i(fje),lve=n(fje,"SPAN",{});var yMt=s(lve);L0r=r(yMt,"FlaxAutoModelForCausalLM"),yMt.forEach(t),fje.forEach(t),nqe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(Jx.$$.fragment,jl),x0r=i(jl),$c=n(jl,"P",{});var MZ=s($c);$0r=r(MZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QU=n(MZ,"A",{href:!0});var LMt=s(QU);k0r=r(LMt,"from_pretrained()"),LMt.forEach(t),S0r=r(MZ," class method or the "),WU=n(MZ,"A",{href:!0});var xMt=s(WU);R0r=r(xMt,"from_config()"),xMt.forEach(t),B0r=r(MZ,` class
method.`),MZ.forEach(t),P0r=i(jl),Yx=n(jl,"P",{});var mje=s(Yx);I0r=r(mje,"This class cannot be instantiated directly using "),ive=n(mje,"CODE",{});var $Mt=s(ive);q0r=r($Mt,"__init__()"),$Mt.forEach(t),N0r=r(mje," (throws an error)."),mje.forEach(t),j0r=i(jl),Dt=n(jl,"DIV",{class:!0});var F0=s(Dt);T(Kx.$$.fragment,F0),D0r=i(F0),dve=n(F0,"P",{});var kMt=s(dve);G0r=r(kMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kMt.forEach(t),O0r=i(F0),kc=n(F0,"P",{});var EZ=s(kc);V0r=r(EZ,`Note:
Loading a model from its configuration file does `),cve=n(EZ,"STRONG",{});var SMt=s(cve);X0r=r(SMt,"not"),SMt.forEach(t),z0r=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HU=n(EZ,"A",{href:!0});var RMt=s(HU);Q0r=r(RMt,"from_pretrained()"),RMt.forEach(t),W0r=r(EZ," to load the model weights."),EZ.forEach(t),H0r=i(F0),T(FC.$$.fragment,F0),F0.forEach(t),U0r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(Zx.$$.fragment,Dl),J0r=i(Dl),fve=n(Dl,"P",{});var BMt=s(fve);Y0r=r(BMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BMt.forEach(t),K0r=i(Dl),hn=n(Dl,"P",{});var T0=s(hn);Z0r=r(T0,"The model class to instantiate is selected based on the "),mve=n(T0,"CODE",{});var PMt=s(mve);eyr=r(PMt,"model_type"),PMt.forEach(t),oyr=r(T0,` property of the config object (either
passed as an argument or loaded from `),gve=n(T0,"CODE",{});var IMt=s(gve);ryr=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),tyr=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(T0,"CODE",{});var qMt=s(hve);ayr=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),nyr=r(T0,":"),T0.forEach(t),syr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);TC=n(Oe,"LI",{});var YRe=s(TC);pve=n(YRe,"STRONG",{});var NMt=s(pve);lyr=r(NMt,"bart"),NMt.forEach(t),iyr=r(YRe," \u2014 "),UU=n(YRe,"A",{href:!0});var jMt=s(UU);dyr=r(jMt,"FlaxBartForCausalLM"),jMt.forEach(t),cyr=r(YRe," (BART model)"),YRe.forEach(t),fyr=i(Oe),MC=n(Oe,"LI",{});var KRe=s(MC);uve=n(KRe,"STRONG",{});var DMt=s(uve);myr=r(DMt,"bert"),DMt.forEach(t),gyr=r(KRe," \u2014 "),JU=n(KRe,"A",{href:!0});var GMt=s(JU);hyr=r(GMt,"FlaxBertForCausalLM"),GMt.forEach(t),pyr=r(KRe," (BERT model)"),KRe.forEach(t),uyr=i(Oe),EC=n(Oe,"LI",{});var ZRe=s(EC);_ve=n(ZRe,"STRONG",{});var OMt=s(_ve);_yr=r(OMt,"big_bird"),OMt.forEach(t),byr=r(ZRe," \u2014 "),YU=n(ZRe,"A",{href:!0});var VMt=s(YU);vyr=r(VMt,"FlaxBigBirdForCausalLM"),VMt.forEach(t),Fyr=r(ZRe," (BigBird model)"),ZRe.forEach(t),Tyr=i(Oe),CC=n(Oe,"LI",{});var eBe=s(CC);bve=n(eBe,"STRONG",{});var XMt=s(bve);Myr=r(XMt,"electra"),XMt.forEach(t),Eyr=r(eBe," \u2014 "),KU=n(eBe,"A",{href:!0});var zMt=s(KU);Cyr=r(zMt,"FlaxElectraForCausalLM"),zMt.forEach(t),wyr=r(eBe," (ELECTRA model)"),eBe.forEach(t),Ayr=i(Oe),wC=n(Oe,"LI",{});var oBe=s(wC);vve=n(oBe,"STRONG",{});var QMt=s(vve);yyr=r(QMt,"gpt2"),QMt.forEach(t),Lyr=r(oBe," \u2014 "),ZU=n(oBe,"A",{href:!0});var WMt=s(ZU);xyr=r(WMt,"FlaxGPT2LMHeadModel"),WMt.forEach(t),$yr=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),kyr=i(Oe),AC=n(Oe,"LI",{});var rBe=s(AC);Fve=n(rBe,"STRONG",{});var HMt=s(Fve);Syr=r(HMt,"gpt_neo"),HMt.forEach(t),Ryr=r(rBe," \u2014 "),eJ=n(rBe,"A",{href:!0});var UMt=s(eJ);Byr=r(UMt,"FlaxGPTNeoForCausalLM"),UMt.forEach(t),Pyr=r(rBe," (GPT Neo model)"),rBe.forEach(t),Iyr=i(Oe),yC=n(Oe,"LI",{});var tBe=s(yC);Tve=n(tBe,"STRONG",{});var JMt=s(Tve);qyr=r(JMt,"gptj"),JMt.forEach(t),Nyr=r(tBe," \u2014 "),oJ=n(tBe,"A",{href:!0});var YMt=s(oJ);jyr=r(YMt,"FlaxGPTJForCausalLM"),YMt.forEach(t),Dyr=r(tBe," (GPT-J model)"),tBe.forEach(t),Gyr=i(Oe),LC=n(Oe,"LI",{});var aBe=s(LC);Mve=n(aBe,"STRONG",{});var KMt=s(Mve);Oyr=r(KMt,"roberta"),KMt.forEach(t),Vyr=r(aBe," \u2014 "),rJ=n(aBe,"A",{href:!0});var ZMt=s(rJ);Xyr=r(ZMt,"FlaxRobertaForCausalLM"),ZMt.forEach(t),zyr=r(aBe," (RoBERTa model)"),aBe.forEach(t),Qyr=i(Oe),xC=n(Oe,"LI",{});var nBe=s(xC);Eve=n(nBe,"STRONG",{});var eEt=s(Eve);Wyr=r(eEt,"xglm"),eEt.forEach(t),Hyr=r(nBe," \u2014 "),tJ=n(nBe,"A",{href:!0});var oEt=s(tJ);Uyr=r(oEt,"FlaxXGLMForCausalLM"),oEt.forEach(t),Jyr=r(nBe," (XGLM model)"),nBe.forEach(t),Oe.forEach(t),Yyr=i(Dl),T($C.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),sqe=i(f),Sc=n(f,"H2",{class:!0});var gje=s(Sc);kC=n(gje,"A",{id:!0,class:!0,href:!0});var rEt=s(kC);Cve=n(rEt,"SPAN",{});var tEt=s(Cve);T(e7.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),Kyr=i(gje),wve=n(gje,"SPAN",{});var aEt=s(wve);Zyr=r(aEt,"FlaxAutoModelForPreTraining"),aEt.forEach(t),gje.forEach(t),lqe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(o7.$$.fragment,Gl),eLr=i(Gl),Rc=n(Gl,"P",{});var CZ=s(Rc);oLr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aJ=n(CZ,"A",{href:!0});var nEt=s(aJ);rLr=r(nEt,"from_pretrained()"),nEt.forEach(t),tLr=r(CZ," class method or the "),nJ=n(CZ,"A",{href:!0});var sEt=s(nJ);aLr=r(sEt,"from_config()"),sEt.forEach(t),nLr=r(CZ,` class
method.`),CZ.forEach(t),sLr=i(Gl),r7=n(Gl,"P",{});var hje=s(r7);lLr=r(hje,"This class cannot be instantiated directly using "),Ave=n(hje,"CODE",{});var lEt=s(Ave);iLr=r(lEt,"__init__()"),lEt.forEach(t),dLr=r(hje," (throws an error)."),hje.forEach(t),cLr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var M0=s(Gt);T(t7.$$.fragment,M0),fLr=i(M0),yve=n(M0,"P",{});var iEt=s(yve);mLr=r(iEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iEt.forEach(t),gLr=i(M0),Bc=n(M0,"P",{});var wZ=s(Bc);hLr=r(wZ,`Note:
Loading a model from its configuration file does `),Lve=n(wZ,"STRONG",{});var dEt=s(Lve);pLr=r(dEt,"not"),dEt.forEach(t),uLr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(wZ,"A",{href:!0});var cEt=s(sJ);_Lr=r(cEt,"from_pretrained()"),cEt.forEach(t),bLr=r(wZ," to load the model weights."),wZ.forEach(t),vLr=i(M0),T(SC.$$.fragment,M0),M0.forEach(t),FLr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(a7.$$.fragment,Ol),TLr=i(Ol),xve=n(Ol,"P",{});var fEt=s(xve);MLr=r(fEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fEt.forEach(t),ELr=i(Ol),pn=n(Ol,"P",{});var E0=s(pn);CLr=r(E0,"The model class to instantiate is selected based on the "),$ve=n(E0,"CODE",{});var mEt=s($ve);wLr=r(mEt,"model_type"),mEt.forEach(t),ALr=r(E0,` property of the config object (either
passed as an argument or loaded from `),kve=n(E0,"CODE",{});var gEt=s(kve);yLr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),LLr=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(E0,"CODE",{});var hEt=s(Sve);xLr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),$Lr=r(E0,":"),E0.forEach(t),kLr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);RC=n(we,"LI",{});var sBe=s(RC);Rve=n(sBe,"STRONG",{});var pEt=s(Rve);SLr=r(pEt,"albert"),pEt.forEach(t),RLr=r(sBe," \u2014 "),lJ=n(sBe,"A",{href:!0});var uEt=s(lJ);BLr=r(uEt,"FlaxAlbertForPreTraining"),uEt.forEach(t),PLr=r(sBe," (ALBERT model)"),sBe.forEach(t),ILr=i(we),BC=n(we,"LI",{});var lBe=s(BC);Bve=n(lBe,"STRONG",{});var _Et=s(Bve);qLr=r(_Et,"bart"),_Et.forEach(t),NLr=r(lBe," \u2014 "),iJ=n(lBe,"A",{href:!0});var bEt=s(iJ);jLr=r(bEt,"FlaxBartForConditionalGeneration"),bEt.forEach(t),DLr=r(lBe," (BART model)"),lBe.forEach(t),GLr=i(we),PC=n(we,"LI",{});var iBe=s(PC);Pve=n(iBe,"STRONG",{});var vEt=s(Pve);OLr=r(vEt,"bert"),vEt.forEach(t),VLr=r(iBe," \u2014 "),dJ=n(iBe,"A",{href:!0});var FEt=s(dJ);XLr=r(FEt,"FlaxBertForPreTraining"),FEt.forEach(t),zLr=r(iBe," (BERT model)"),iBe.forEach(t),QLr=i(we),IC=n(we,"LI",{});var dBe=s(IC);Ive=n(dBe,"STRONG",{});var TEt=s(Ive);WLr=r(TEt,"big_bird"),TEt.forEach(t),HLr=r(dBe," \u2014 "),cJ=n(dBe,"A",{href:!0});var MEt=s(cJ);ULr=r(MEt,"FlaxBigBirdForPreTraining"),MEt.forEach(t),JLr=r(dBe," (BigBird model)"),dBe.forEach(t),YLr=i(we),qC=n(we,"LI",{});var cBe=s(qC);qve=n(cBe,"STRONG",{});var EEt=s(qve);KLr=r(EEt,"electra"),EEt.forEach(t),ZLr=r(cBe," \u2014 "),fJ=n(cBe,"A",{href:!0});var CEt=s(fJ);e8r=r(CEt,"FlaxElectraForPreTraining"),CEt.forEach(t),o8r=r(cBe," (ELECTRA model)"),cBe.forEach(t),r8r=i(we),NC=n(we,"LI",{});var fBe=s(NC);Nve=n(fBe,"STRONG",{});var wEt=s(Nve);t8r=r(wEt,"mbart"),wEt.forEach(t),a8r=r(fBe," \u2014 "),mJ=n(fBe,"A",{href:!0});var AEt=s(mJ);n8r=r(AEt,"FlaxMBartForConditionalGeneration"),AEt.forEach(t),s8r=r(fBe," (mBART model)"),fBe.forEach(t),l8r=i(we),jC=n(we,"LI",{});var mBe=s(jC);jve=n(mBe,"STRONG",{});var yEt=s(jve);i8r=r(yEt,"mt5"),yEt.forEach(t),d8r=r(mBe," \u2014 "),gJ=n(mBe,"A",{href:!0});var LEt=s(gJ);c8r=r(LEt,"FlaxMT5ForConditionalGeneration"),LEt.forEach(t),f8r=r(mBe," (mT5 model)"),mBe.forEach(t),m8r=i(we),DC=n(we,"LI",{});var gBe=s(DC);Dve=n(gBe,"STRONG",{});var xEt=s(Dve);g8r=r(xEt,"roberta"),xEt.forEach(t),h8r=r(gBe," \u2014 "),hJ=n(gBe,"A",{href:!0});var $Et=s(hJ);p8r=r($Et,"FlaxRobertaForMaskedLM"),$Et.forEach(t),u8r=r(gBe," (RoBERTa model)"),gBe.forEach(t),_8r=i(we),GC=n(we,"LI",{});var hBe=s(GC);Gve=n(hBe,"STRONG",{});var kEt=s(Gve);b8r=r(kEt,"roformer"),kEt.forEach(t),v8r=r(hBe," \u2014 "),pJ=n(hBe,"A",{href:!0});var SEt=s(pJ);F8r=r(SEt,"FlaxRoFormerForMaskedLM"),SEt.forEach(t),T8r=r(hBe," (RoFormer model)"),hBe.forEach(t),M8r=i(we),OC=n(we,"LI",{});var pBe=s(OC);Ove=n(pBe,"STRONG",{});var REt=s(Ove);E8r=r(REt,"t5"),REt.forEach(t),C8r=r(pBe," \u2014 "),uJ=n(pBe,"A",{href:!0});var BEt=s(uJ);w8r=r(BEt,"FlaxT5ForConditionalGeneration"),BEt.forEach(t),A8r=r(pBe," (T5 model)"),pBe.forEach(t),y8r=i(we),VC=n(we,"LI",{});var uBe=s(VC);Vve=n(uBe,"STRONG",{});var PEt=s(Vve);L8r=r(PEt,"wav2vec2"),PEt.forEach(t),x8r=r(uBe," \u2014 "),_J=n(uBe,"A",{href:!0});var IEt=s(_J);$8r=r(IEt,"FlaxWav2Vec2ForPreTraining"),IEt.forEach(t),k8r=r(uBe," (Wav2Vec2 model)"),uBe.forEach(t),S8r=i(we),XC=n(we,"LI",{});var _Be=s(XC);Xve=n(_Be,"STRONG",{});var qEt=s(Xve);R8r=r(qEt,"xlm-roberta"),qEt.forEach(t),B8r=r(_Be," \u2014 "),bJ=n(_Be,"A",{href:!0});var NEt=s(bJ);P8r=r(NEt,"FlaxXLMRobertaForMaskedLM"),NEt.forEach(t),I8r=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),we.forEach(t),q8r=i(Ol),T(zC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),iqe=i(f),Pc=n(f,"H2",{class:!0});var pje=s(Pc);QC=n(pje,"A",{id:!0,class:!0,href:!0});var jEt=s(QC);zve=n(jEt,"SPAN",{});var DEt=s(zve);T(n7.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),N8r=i(pje),Qve=n(pje,"SPAN",{});var GEt=s(Qve);j8r=r(GEt,"FlaxAutoModelForMaskedLM"),GEt.forEach(t),pje.forEach(t),dqe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(s7.$$.fragment,Vl),D8r=i(Vl),Ic=n(Vl,"P",{});var AZ=s(Ic);G8r=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vJ=n(AZ,"A",{href:!0});var OEt=s(vJ);O8r=r(OEt,"from_pretrained()"),OEt.forEach(t),V8r=r(AZ," class method or the "),FJ=n(AZ,"A",{href:!0});var VEt=s(FJ);X8r=r(VEt,"from_config()"),VEt.forEach(t),z8r=r(AZ,` class
method.`),AZ.forEach(t),Q8r=i(Vl),l7=n(Vl,"P",{});var uje=s(l7);W8r=r(uje,"This class cannot be instantiated directly using "),Wve=n(uje,"CODE",{});var XEt=s(Wve);H8r=r(XEt,"__init__()"),XEt.forEach(t),U8r=r(uje," (throws an error)."),uje.forEach(t),J8r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var C0=s(Ot);T(i7.$$.fragment,C0),Y8r=i(C0),Hve=n(C0,"P",{});var zEt=s(Hve);K8r=r(zEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zEt.forEach(t),Z8r=i(C0),qc=n(C0,"P",{});var yZ=s(qc);exr=r(yZ,`Note:
Loading a model from its configuration file does `),Uve=n(yZ,"STRONG",{});var QEt=s(Uve);oxr=r(QEt,"not"),QEt.forEach(t),rxr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(yZ,"A",{href:!0});var WEt=s(TJ);txr=r(WEt,"from_pretrained()"),WEt.forEach(t),axr=r(yZ," to load the model weights."),yZ.forEach(t),nxr=i(C0),T(WC.$$.fragment,C0),C0.forEach(t),sxr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(d7.$$.fragment,Xl),lxr=i(Xl),Jve=n(Xl,"P",{});var HEt=s(Jve);ixr=r(HEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HEt.forEach(t),dxr=i(Xl),un=n(Xl,"P",{});var w0=s(un);cxr=r(w0,"The model class to instantiate is selected based on the "),Yve=n(w0,"CODE",{});var UEt=s(Yve);fxr=r(UEt,"model_type"),UEt.forEach(t),mxr=r(w0,` property of the config object (either
passed as an argument or loaded from `),Kve=n(w0,"CODE",{});var JEt=s(Kve);gxr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),hxr=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(w0,"CODE",{});var YEt=s(Zve);pxr=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),uxr=r(w0,":"),w0.forEach(t),_xr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);HC=n(Be,"LI",{});var bBe=s(HC);eFe=n(bBe,"STRONG",{});var KEt=s(eFe);bxr=r(KEt,"albert"),KEt.forEach(t),vxr=r(bBe," \u2014 "),MJ=n(bBe,"A",{href:!0});var ZEt=s(MJ);Fxr=r(ZEt,"FlaxAlbertForMaskedLM"),ZEt.forEach(t),Txr=r(bBe," (ALBERT model)"),bBe.forEach(t),Mxr=i(Be),UC=n(Be,"LI",{});var vBe=s(UC);oFe=n(vBe,"STRONG",{});var eCt=s(oFe);Exr=r(eCt,"bart"),eCt.forEach(t),Cxr=r(vBe," \u2014 "),EJ=n(vBe,"A",{href:!0});var oCt=s(EJ);wxr=r(oCt,"FlaxBartForConditionalGeneration"),oCt.forEach(t),Axr=r(vBe," (BART model)"),vBe.forEach(t),yxr=i(Be),JC=n(Be,"LI",{});var FBe=s(JC);rFe=n(FBe,"STRONG",{});var rCt=s(rFe);Lxr=r(rCt,"bert"),rCt.forEach(t),xxr=r(FBe," \u2014 "),CJ=n(FBe,"A",{href:!0});var tCt=s(CJ);$xr=r(tCt,"FlaxBertForMaskedLM"),tCt.forEach(t),kxr=r(FBe," (BERT model)"),FBe.forEach(t),Sxr=i(Be),YC=n(Be,"LI",{});var TBe=s(YC);tFe=n(TBe,"STRONG",{});var aCt=s(tFe);Rxr=r(aCt,"big_bird"),aCt.forEach(t),Bxr=r(TBe," \u2014 "),wJ=n(TBe,"A",{href:!0});var nCt=s(wJ);Pxr=r(nCt,"FlaxBigBirdForMaskedLM"),nCt.forEach(t),Ixr=r(TBe," (BigBird model)"),TBe.forEach(t),qxr=i(Be),KC=n(Be,"LI",{});var MBe=s(KC);aFe=n(MBe,"STRONG",{});var sCt=s(aFe);Nxr=r(sCt,"distilbert"),sCt.forEach(t),jxr=r(MBe," \u2014 "),AJ=n(MBe,"A",{href:!0});var lCt=s(AJ);Dxr=r(lCt,"FlaxDistilBertForMaskedLM"),lCt.forEach(t),Gxr=r(MBe," (DistilBERT model)"),MBe.forEach(t),Oxr=i(Be),ZC=n(Be,"LI",{});var EBe=s(ZC);nFe=n(EBe,"STRONG",{});var iCt=s(nFe);Vxr=r(iCt,"electra"),iCt.forEach(t),Xxr=r(EBe," \u2014 "),yJ=n(EBe,"A",{href:!0});var dCt=s(yJ);zxr=r(dCt,"FlaxElectraForMaskedLM"),dCt.forEach(t),Qxr=r(EBe," (ELECTRA model)"),EBe.forEach(t),Wxr=i(Be),e3=n(Be,"LI",{});var CBe=s(e3);sFe=n(CBe,"STRONG",{});var cCt=s(sFe);Hxr=r(cCt,"mbart"),cCt.forEach(t),Uxr=r(CBe," \u2014 "),LJ=n(CBe,"A",{href:!0});var fCt=s(LJ);Jxr=r(fCt,"FlaxMBartForConditionalGeneration"),fCt.forEach(t),Yxr=r(CBe," (mBART model)"),CBe.forEach(t),Kxr=i(Be),o3=n(Be,"LI",{});var wBe=s(o3);lFe=n(wBe,"STRONG",{});var mCt=s(lFe);Zxr=r(mCt,"roberta"),mCt.forEach(t),e7r=r(wBe," \u2014 "),xJ=n(wBe,"A",{href:!0});var gCt=s(xJ);o7r=r(gCt,"FlaxRobertaForMaskedLM"),gCt.forEach(t),r7r=r(wBe," (RoBERTa model)"),wBe.forEach(t),t7r=i(Be),r3=n(Be,"LI",{});var ABe=s(r3);iFe=n(ABe,"STRONG",{});var hCt=s(iFe);a7r=r(hCt,"roformer"),hCt.forEach(t),n7r=r(ABe," \u2014 "),$J=n(ABe,"A",{href:!0});var pCt=s($J);s7r=r(pCt,"FlaxRoFormerForMaskedLM"),pCt.forEach(t),l7r=r(ABe," (RoFormer model)"),ABe.forEach(t),i7r=i(Be),t3=n(Be,"LI",{});var yBe=s(t3);dFe=n(yBe,"STRONG",{});var uCt=s(dFe);d7r=r(uCt,"xlm-roberta"),uCt.forEach(t),c7r=r(yBe," \u2014 "),kJ=n(yBe,"A",{href:!0});var _Ct=s(kJ);f7r=r(_Ct,"FlaxXLMRobertaForMaskedLM"),_Ct.forEach(t),m7r=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),Be.forEach(t),g7r=i(Xl),T(a3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),cqe=i(f),Nc=n(f,"H2",{class:!0});var _je=s(Nc);n3=n(_je,"A",{id:!0,class:!0,href:!0});var bCt=s(n3);cFe=n(bCt,"SPAN",{});var vCt=s(cFe);T(c7.$$.fragment,vCt),vCt.forEach(t),bCt.forEach(t),h7r=i(_je),fFe=n(_je,"SPAN",{});var FCt=s(fFe);p7r=r(FCt,"FlaxAutoModelForSeq2SeqLM"),FCt.forEach(t),_je.forEach(t),fqe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(f7.$$.fragment,zl),u7r=i(zl),jc=n(zl,"P",{});var LZ=s(jc);_7r=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SJ=n(LZ,"A",{href:!0});var TCt=s(SJ);b7r=r(TCt,"from_pretrained()"),TCt.forEach(t),v7r=r(LZ," class method or the "),RJ=n(LZ,"A",{href:!0});var MCt=s(RJ);F7r=r(MCt,"from_config()"),MCt.forEach(t),T7r=r(LZ,` class
method.`),LZ.forEach(t),M7r=i(zl),m7=n(zl,"P",{});var bje=s(m7);E7r=r(bje,"This class cannot be instantiated directly using "),mFe=n(bje,"CODE",{});var ECt=s(mFe);C7r=r(ECt,"__init__()"),ECt.forEach(t),w7r=r(bje," (throws an error)."),bje.forEach(t),A7r=i(zl),Vt=n(zl,"DIV",{class:!0});var A0=s(Vt);T(g7.$$.fragment,A0),y7r=i(A0),gFe=n(A0,"P",{});var CCt=s(gFe);L7r=r(CCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CCt.forEach(t),x7r=i(A0),Dc=n(A0,"P",{});var xZ=s(Dc);$7r=r(xZ,`Note:
Loading a model from its configuration file does `),hFe=n(xZ,"STRONG",{});var wCt=s(hFe);k7r=r(wCt,"not"),wCt.forEach(t),S7r=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(xZ,"A",{href:!0});var ACt=s(BJ);R7r=r(ACt,"from_pretrained()"),ACt.forEach(t),B7r=r(xZ," to load the model weights."),xZ.forEach(t),P7r=i(A0),T(s3.$$.fragment,A0),A0.forEach(t),I7r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(h7.$$.fragment,Ql),q7r=i(Ql),pFe=n(Ql,"P",{});var yCt=s(pFe);N7r=r(yCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yCt.forEach(t),j7r=i(Ql),_n=n(Ql,"P",{});var y0=s(_n);D7r=r(y0,"The model class to instantiate is selected based on the "),uFe=n(y0,"CODE",{});var LCt=s(uFe);G7r=r(LCt,"model_type"),LCt.forEach(t),O7r=r(y0,` property of the config object (either
passed as an argument or loaded from `),_Fe=n(y0,"CODE",{});var xCt=s(_Fe);V7r=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),X7r=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bFe=n(y0,"CODE",{});var $Ct=s(bFe);z7r=r($Ct,"pretrained_model_name_or_path"),$Ct.forEach(t),Q7r=r(y0,":"),y0.forEach(t),W7r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);l3=n(Ve,"LI",{});var LBe=s(l3);vFe=n(LBe,"STRONG",{});var kCt=s(vFe);H7r=r(kCt,"bart"),kCt.forEach(t),U7r=r(LBe," \u2014 "),PJ=n(LBe,"A",{href:!0});var SCt=s(PJ);J7r=r(SCt,"FlaxBartForConditionalGeneration"),SCt.forEach(t),Y7r=r(LBe," (BART model)"),LBe.forEach(t),K7r=i(Ve),i3=n(Ve,"LI",{});var xBe=s(i3);FFe=n(xBe,"STRONG",{});var RCt=s(FFe);Z7r=r(RCt,"blenderbot"),RCt.forEach(t),e9r=r(xBe," \u2014 "),IJ=n(xBe,"A",{href:!0});var BCt=s(IJ);o9r=r(BCt,"FlaxBlenderbotForConditionalGeneration"),BCt.forEach(t),r9r=r(xBe," (Blenderbot model)"),xBe.forEach(t),t9r=i(Ve),d3=n(Ve,"LI",{});var $Be=s(d3);TFe=n($Be,"STRONG",{});var PCt=s(TFe);a9r=r(PCt,"blenderbot-small"),PCt.forEach(t),n9r=r($Be," \u2014 "),qJ=n($Be,"A",{href:!0});var ICt=s(qJ);s9r=r(ICt,"FlaxBlenderbotSmallForConditionalGeneration"),ICt.forEach(t),l9r=r($Be," (BlenderbotSmall model)"),$Be.forEach(t),i9r=i(Ve),c3=n(Ve,"LI",{});var kBe=s(c3);MFe=n(kBe,"STRONG",{});var qCt=s(MFe);d9r=r(qCt,"encoder-decoder"),qCt.forEach(t),c9r=r(kBe," \u2014 "),NJ=n(kBe,"A",{href:!0});var NCt=s(NJ);f9r=r(NCt,"FlaxEncoderDecoderModel"),NCt.forEach(t),m9r=r(kBe," (Encoder decoder model)"),kBe.forEach(t),g9r=i(Ve),f3=n(Ve,"LI",{});var SBe=s(f3);EFe=n(SBe,"STRONG",{});var jCt=s(EFe);h9r=r(jCt,"marian"),jCt.forEach(t),p9r=r(SBe," \u2014 "),jJ=n(SBe,"A",{href:!0});var DCt=s(jJ);u9r=r(DCt,"FlaxMarianMTModel"),DCt.forEach(t),_9r=r(SBe," (Marian model)"),SBe.forEach(t),b9r=i(Ve),m3=n(Ve,"LI",{});var RBe=s(m3);CFe=n(RBe,"STRONG",{});var GCt=s(CFe);v9r=r(GCt,"mbart"),GCt.forEach(t),F9r=r(RBe," \u2014 "),DJ=n(RBe,"A",{href:!0});var OCt=s(DJ);T9r=r(OCt,"FlaxMBartForConditionalGeneration"),OCt.forEach(t),M9r=r(RBe," (mBART model)"),RBe.forEach(t),E9r=i(Ve),g3=n(Ve,"LI",{});var BBe=s(g3);wFe=n(BBe,"STRONG",{});var VCt=s(wFe);C9r=r(VCt,"mt5"),VCt.forEach(t),w9r=r(BBe," \u2014 "),GJ=n(BBe,"A",{href:!0});var XCt=s(GJ);A9r=r(XCt,"FlaxMT5ForConditionalGeneration"),XCt.forEach(t),y9r=r(BBe," (mT5 model)"),BBe.forEach(t),L9r=i(Ve),h3=n(Ve,"LI",{});var PBe=s(h3);AFe=n(PBe,"STRONG",{});var zCt=s(AFe);x9r=r(zCt,"pegasus"),zCt.forEach(t),$9r=r(PBe," \u2014 "),OJ=n(PBe,"A",{href:!0});var QCt=s(OJ);k9r=r(QCt,"FlaxPegasusForConditionalGeneration"),QCt.forEach(t),S9r=r(PBe," (Pegasus model)"),PBe.forEach(t),R9r=i(Ve),p3=n(Ve,"LI",{});var IBe=s(p3);yFe=n(IBe,"STRONG",{});var WCt=s(yFe);B9r=r(WCt,"t5"),WCt.forEach(t),P9r=r(IBe," \u2014 "),VJ=n(IBe,"A",{href:!0});var HCt=s(VJ);I9r=r(HCt,"FlaxT5ForConditionalGeneration"),HCt.forEach(t),q9r=r(IBe," (T5 model)"),IBe.forEach(t),Ve.forEach(t),N9r=i(Ql),T(u3.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),mqe=i(f),Gc=n(f,"H2",{class:!0});var vje=s(Gc);_3=n(vje,"A",{id:!0,class:!0,href:!0});var UCt=s(_3);LFe=n(UCt,"SPAN",{});var JCt=s(LFe);T(p7.$$.fragment,JCt),JCt.forEach(t),UCt.forEach(t),j9r=i(vje),xFe=n(vje,"SPAN",{});var YCt=s(xFe);D9r=r(YCt,"FlaxAutoModelForSequenceClassification"),YCt.forEach(t),vje.forEach(t),gqe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(u7.$$.fragment,Wl),G9r=i(Wl),Oc=n(Wl,"P",{});var $Z=s(Oc);O9r=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XJ=n($Z,"A",{href:!0});var KCt=s(XJ);V9r=r(KCt,"from_pretrained()"),KCt.forEach(t),X9r=r($Z," class method or the "),zJ=n($Z,"A",{href:!0});var ZCt=s(zJ);z9r=r(ZCt,"from_config()"),ZCt.forEach(t),Q9r=r($Z,` class
method.`),$Z.forEach(t),W9r=i(Wl),_7=n(Wl,"P",{});var Fje=s(_7);H9r=r(Fje,"This class cannot be instantiated directly using "),$Fe=n(Fje,"CODE",{});var e3t=s($Fe);U9r=r(e3t,"__init__()"),e3t.forEach(t),J9r=r(Fje," (throws an error)."),Fje.forEach(t),Y9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var L0=s(Xt);T(b7.$$.fragment,L0),K9r=i(L0),kFe=n(L0,"P",{});var o3t=s(kFe);Z9r=r(o3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o3t.forEach(t),e$r=i(L0),Vc=n(L0,"P",{});var kZ=s(Vc);o$r=r(kZ,`Note:
Loading a model from its configuration file does `),SFe=n(kZ,"STRONG",{});var r3t=s(SFe);r$r=r(r3t,"not"),r3t.forEach(t),t$r=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QJ=n(kZ,"A",{href:!0});var t3t=s(QJ);a$r=r(t3t,"from_pretrained()"),t3t.forEach(t),n$r=r(kZ," to load the model weights."),kZ.forEach(t),s$r=i(L0),T(b3.$$.fragment,L0),L0.forEach(t),l$r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(v7.$$.fragment,Hl),i$r=i(Hl),RFe=n(Hl,"P",{});var a3t=s(RFe);d$r=r(a3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),a3t.forEach(t),c$r=i(Hl),bn=n(Hl,"P",{});var x0=s(bn);f$r=r(x0,"The model class to instantiate is selected based on the "),BFe=n(x0,"CODE",{});var n3t=s(BFe);m$r=r(n3t,"model_type"),n3t.forEach(t),g$r=r(x0,` property of the config object (either
passed as an argument or loaded from `),PFe=n(x0,"CODE",{});var s3t=s(PFe);h$r=r(s3t,"pretrained_model_name_or_path"),s3t.forEach(t),p$r=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IFe=n(x0,"CODE",{});var l3t=s(IFe);u$r=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),_$r=r(x0,":"),x0.forEach(t),b$r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);v3=n(Pe,"LI",{});var qBe=s(v3);qFe=n(qBe,"STRONG",{});var i3t=s(qFe);v$r=r(i3t,"albert"),i3t.forEach(t),F$r=r(qBe," \u2014 "),WJ=n(qBe,"A",{href:!0});var d3t=s(WJ);T$r=r(d3t,"FlaxAlbertForSequenceClassification"),d3t.forEach(t),M$r=r(qBe," (ALBERT model)"),qBe.forEach(t),E$r=i(Pe),F3=n(Pe,"LI",{});var NBe=s(F3);NFe=n(NBe,"STRONG",{});var c3t=s(NFe);C$r=r(c3t,"bart"),c3t.forEach(t),w$r=r(NBe," \u2014 "),HJ=n(NBe,"A",{href:!0});var f3t=s(HJ);A$r=r(f3t,"FlaxBartForSequenceClassification"),f3t.forEach(t),y$r=r(NBe," (BART model)"),NBe.forEach(t),L$r=i(Pe),T3=n(Pe,"LI",{});var jBe=s(T3);jFe=n(jBe,"STRONG",{});var m3t=s(jFe);x$r=r(m3t,"bert"),m3t.forEach(t),$$r=r(jBe," \u2014 "),UJ=n(jBe,"A",{href:!0});var g3t=s(UJ);k$r=r(g3t,"FlaxBertForSequenceClassification"),g3t.forEach(t),S$r=r(jBe," (BERT model)"),jBe.forEach(t),R$r=i(Pe),M3=n(Pe,"LI",{});var DBe=s(M3);DFe=n(DBe,"STRONG",{});var h3t=s(DFe);B$r=r(h3t,"big_bird"),h3t.forEach(t),P$r=r(DBe," \u2014 "),JJ=n(DBe,"A",{href:!0});var p3t=s(JJ);I$r=r(p3t,"FlaxBigBirdForSequenceClassification"),p3t.forEach(t),q$r=r(DBe," (BigBird model)"),DBe.forEach(t),N$r=i(Pe),E3=n(Pe,"LI",{});var GBe=s(E3);GFe=n(GBe,"STRONG",{});var u3t=s(GFe);j$r=r(u3t,"distilbert"),u3t.forEach(t),D$r=r(GBe," \u2014 "),YJ=n(GBe,"A",{href:!0});var _3t=s(YJ);G$r=r(_3t,"FlaxDistilBertForSequenceClassification"),_3t.forEach(t),O$r=r(GBe," (DistilBERT model)"),GBe.forEach(t),V$r=i(Pe),C3=n(Pe,"LI",{});var OBe=s(C3);OFe=n(OBe,"STRONG",{});var b3t=s(OFe);X$r=r(b3t,"electra"),b3t.forEach(t),z$r=r(OBe," \u2014 "),KJ=n(OBe,"A",{href:!0});var v3t=s(KJ);Q$r=r(v3t,"FlaxElectraForSequenceClassification"),v3t.forEach(t),W$r=r(OBe," (ELECTRA model)"),OBe.forEach(t),H$r=i(Pe),w3=n(Pe,"LI",{});var VBe=s(w3);VFe=n(VBe,"STRONG",{});var F3t=s(VFe);U$r=r(F3t,"mbart"),F3t.forEach(t),J$r=r(VBe," \u2014 "),ZJ=n(VBe,"A",{href:!0});var T3t=s(ZJ);Y$r=r(T3t,"FlaxMBartForSequenceClassification"),T3t.forEach(t),K$r=r(VBe," (mBART model)"),VBe.forEach(t),Z$r=i(Pe),A3=n(Pe,"LI",{});var XBe=s(A3);XFe=n(XBe,"STRONG",{});var M3t=s(XFe);ekr=r(M3t,"roberta"),M3t.forEach(t),okr=r(XBe," \u2014 "),eY=n(XBe,"A",{href:!0});var E3t=s(eY);rkr=r(E3t,"FlaxRobertaForSequenceClassification"),E3t.forEach(t),tkr=r(XBe," (RoBERTa model)"),XBe.forEach(t),akr=i(Pe),y3=n(Pe,"LI",{});var zBe=s(y3);zFe=n(zBe,"STRONG",{});var C3t=s(zFe);nkr=r(C3t,"roformer"),C3t.forEach(t),skr=r(zBe," \u2014 "),oY=n(zBe,"A",{href:!0});var w3t=s(oY);lkr=r(w3t,"FlaxRoFormerForSequenceClassification"),w3t.forEach(t),ikr=r(zBe," (RoFormer model)"),zBe.forEach(t),dkr=i(Pe),L3=n(Pe,"LI",{});var QBe=s(L3);QFe=n(QBe,"STRONG",{});var A3t=s(QFe);ckr=r(A3t,"xlm-roberta"),A3t.forEach(t),fkr=r(QBe," \u2014 "),rY=n(QBe,"A",{href:!0});var y3t=s(rY);mkr=r(y3t,"FlaxXLMRobertaForSequenceClassification"),y3t.forEach(t),gkr=r(QBe," (XLM-RoBERTa model)"),QBe.forEach(t),Pe.forEach(t),hkr=i(Hl),T(x3.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),hqe=i(f),Xc=n(f,"H2",{class:!0});var Tje=s(Xc);$3=n(Tje,"A",{id:!0,class:!0,href:!0});var L3t=s($3);WFe=n(L3t,"SPAN",{});var x3t=s(WFe);T(F7.$$.fragment,x3t),x3t.forEach(t),L3t.forEach(t),pkr=i(Tje),HFe=n(Tje,"SPAN",{});var $3t=s(HFe);ukr=r($3t,"FlaxAutoModelForQuestionAnswering"),$3t.forEach(t),Tje.forEach(t),pqe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(T7.$$.fragment,Ul),_kr=i(Ul),zc=n(Ul,"P",{});var SZ=s(zc);bkr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tY=n(SZ,"A",{href:!0});var k3t=s(tY);vkr=r(k3t,"from_pretrained()"),k3t.forEach(t),Fkr=r(SZ," class method or the "),aY=n(SZ,"A",{href:!0});var S3t=s(aY);Tkr=r(S3t,"from_config()"),S3t.forEach(t),Mkr=r(SZ,` class
method.`),SZ.forEach(t),Ekr=i(Ul),M7=n(Ul,"P",{});var Mje=s(M7);Ckr=r(Mje,"This class cannot be instantiated directly using "),UFe=n(Mje,"CODE",{});var R3t=s(UFe);wkr=r(R3t,"__init__()"),R3t.forEach(t),Akr=r(Mje," (throws an error)."),Mje.forEach(t),ykr=i(Ul),zt=n(Ul,"DIV",{class:!0});var $0=s(zt);T(E7.$$.fragment,$0),Lkr=i($0),JFe=n($0,"P",{});var B3t=s(JFe);xkr=r(B3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),B3t.forEach(t),$kr=i($0),Qc=n($0,"P",{});var RZ=s(Qc);kkr=r(RZ,`Note:
Loading a model from its configuration file does `),YFe=n(RZ,"STRONG",{});var P3t=s(YFe);Skr=r(P3t,"not"),P3t.forEach(t),Rkr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(RZ,"A",{href:!0});var I3t=s(nY);Bkr=r(I3t,"from_pretrained()"),I3t.forEach(t),Pkr=r(RZ," to load the model weights."),RZ.forEach(t),Ikr=i($0),T(k3.$$.fragment,$0),$0.forEach(t),qkr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(C7.$$.fragment,Jl),Nkr=i(Jl),KFe=n(Jl,"P",{});var q3t=s(KFe);jkr=r(q3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q3t.forEach(t),Dkr=i(Jl),vn=n(Jl,"P",{});var k0=s(vn);Gkr=r(k0,"The model class to instantiate is selected based on the "),ZFe=n(k0,"CODE",{});var N3t=s(ZFe);Okr=r(N3t,"model_type"),N3t.forEach(t),Vkr=r(k0,` property of the config object (either
passed as an argument or loaded from `),eTe=n(k0,"CODE",{});var j3t=s(eTe);Xkr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),zkr=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(k0,"CODE",{});var D3t=s(oTe);Qkr=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),Wkr=r(k0,":"),k0.forEach(t),Hkr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);S3=n(Ie,"LI",{});var WBe=s(S3);rTe=n(WBe,"STRONG",{});var G3t=s(rTe);Ukr=r(G3t,"albert"),G3t.forEach(t),Jkr=r(WBe," \u2014 "),sY=n(WBe,"A",{href:!0});var O3t=s(sY);Ykr=r(O3t,"FlaxAlbertForQuestionAnswering"),O3t.forEach(t),Kkr=r(WBe," (ALBERT model)"),WBe.forEach(t),Zkr=i(Ie),R3=n(Ie,"LI",{});var HBe=s(R3);tTe=n(HBe,"STRONG",{});var V3t=s(tTe);eSr=r(V3t,"bart"),V3t.forEach(t),oSr=r(HBe," \u2014 "),lY=n(HBe,"A",{href:!0});var X3t=s(lY);rSr=r(X3t,"FlaxBartForQuestionAnswering"),X3t.forEach(t),tSr=r(HBe," (BART model)"),HBe.forEach(t),aSr=i(Ie),B3=n(Ie,"LI",{});var UBe=s(B3);aTe=n(UBe,"STRONG",{});var z3t=s(aTe);nSr=r(z3t,"bert"),z3t.forEach(t),sSr=r(UBe," \u2014 "),iY=n(UBe,"A",{href:!0});var Q3t=s(iY);lSr=r(Q3t,"FlaxBertForQuestionAnswering"),Q3t.forEach(t),iSr=r(UBe," (BERT model)"),UBe.forEach(t),dSr=i(Ie),P3=n(Ie,"LI",{});var JBe=s(P3);nTe=n(JBe,"STRONG",{});var W3t=s(nTe);cSr=r(W3t,"big_bird"),W3t.forEach(t),fSr=r(JBe," \u2014 "),dY=n(JBe,"A",{href:!0});var H3t=s(dY);mSr=r(H3t,"FlaxBigBirdForQuestionAnswering"),H3t.forEach(t),gSr=r(JBe," (BigBird model)"),JBe.forEach(t),hSr=i(Ie),I3=n(Ie,"LI",{});var YBe=s(I3);sTe=n(YBe,"STRONG",{});var U3t=s(sTe);pSr=r(U3t,"distilbert"),U3t.forEach(t),uSr=r(YBe," \u2014 "),cY=n(YBe,"A",{href:!0});var J3t=s(cY);_Sr=r(J3t,"FlaxDistilBertForQuestionAnswering"),J3t.forEach(t),bSr=r(YBe," (DistilBERT model)"),YBe.forEach(t),vSr=i(Ie),q3=n(Ie,"LI",{});var KBe=s(q3);lTe=n(KBe,"STRONG",{});var Y3t=s(lTe);FSr=r(Y3t,"electra"),Y3t.forEach(t),TSr=r(KBe," \u2014 "),fY=n(KBe,"A",{href:!0});var K3t=s(fY);MSr=r(K3t,"FlaxElectraForQuestionAnswering"),K3t.forEach(t),ESr=r(KBe," (ELECTRA model)"),KBe.forEach(t),CSr=i(Ie),N3=n(Ie,"LI",{});var ZBe=s(N3);iTe=n(ZBe,"STRONG",{});var Z3t=s(iTe);wSr=r(Z3t,"mbart"),Z3t.forEach(t),ASr=r(ZBe," \u2014 "),mY=n(ZBe,"A",{href:!0});var ewt=s(mY);ySr=r(ewt,"FlaxMBartForQuestionAnswering"),ewt.forEach(t),LSr=r(ZBe," (mBART model)"),ZBe.forEach(t),xSr=i(Ie),j3=n(Ie,"LI",{});var ePe=s(j3);dTe=n(ePe,"STRONG",{});var owt=s(dTe);$Sr=r(owt,"roberta"),owt.forEach(t),kSr=r(ePe," \u2014 "),gY=n(ePe,"A",{href:!0});var rwt=s(gY);SSr=r(rwt,"FlaxRobertaForQuestionAnswering"),rwt.forEach(t),RSr=r(ePe," (RoBERTa model)"),ePe.forEach(t),BSr=i(Ie),D3=n(Ie,"LI",{});var oPe=s(D3);cTe=n(oPe,"STRONG",{});var twt=s(cTe);PSr=r(twt,"roformer"),twt.forEach(t),ISr=r(oPe," \u2014 "),hY=n(oPe,"A",{href:!0});var awt=s(hY);qSr=r(awt,"FlaxRoFormerForQuestionAnswering"),awt.forEach(t),NSr=r(oPe," (RoFormer model)"),oPe.forEach(t),jSr=i(Ie),G3=n(Ie,"LI",{});var rPe=s(G3);fTe=n(rPe,"STRONG",{});var nwt=s(fTe);DSr=r(nwt,"xlm-roberta"),nwt.forEach(t),GSr=r(rPe," \u2014 "),pY=n(rPe,"A",{href:!0});var swt=s(pY);OSr=r(swt,"FlaxXLMRobertaForQuestionAnswering"),swt.forEach(t),VSr=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),Ie.forEach(t),XSr=i(Jl),T(O3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),uqe=i(f),Wc=n(f,"H2",{class:!0});var Eje=s(Wc);V3=n(Eje,"A",{id:!0,class:!0,href:!0});var lwt=s(V3);mTe=n(lwt,"SPAN",{});var iwt=s(mTe);T(w7.$$.fragment,iwt),iwt.forEach(t),lwt.forEach(t),zSr=i(Eje),gTe=n(Eje,"SPAN",{});var dwt=s(gTe);QSr=r(dwt,"FlaxAutoModelForTokenClassification"),dwt.forEach(t),Eje.forEach(t),_qe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(A7.$$.fragment,Yl),WSr=i(Yl),Hc=n(Yl,"P",{});var BZ=s(Hc);HSr=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uY=n(BZ,"A",{href:!0});var cwt=s(uY);USr=r(cwt,"from_pretrained()"),cwt.forEach(t),JSr=r(BZ," class method or the "),_Y=n(BZ,"A",{href:!0});var fwt=s(_Y);YSr=r(fwt,"from_config()"),fwt.forEach(t),KSr=r(BZ,` class
method.`),BZ.forEach(t),ZSr=i(Yl),y7=n(Yl,"P",{});var Cje=s(y7);eRr=r(Cje,"This class cannot be instantiated directly using "),hTe=n(Cje,"CODE",{});var mwt=s(hTe);oRr=r(mwt,"__init__()"),mwt.forEach(t),rRr=r(Cje," (throws an error)."),Cje.forEach(t),tRr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var S0=s(Qt);T(L7.$$.fragment,S0),aRr=i(S0),pTe=n(S0,"P",{});var gwt=s(pTe);nRr=r(gwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gwt.forEach(t),sRr=i(S0),Uc=n(S0,"P",{});var PZ=s(Uc);lRr=r(PZ,`Note:
Loading a model from its configuration file does `),uTe=n(PZ,"STRONG",{});var hwt=s(uTe);iRr=r(hwt,"not"),hwt.forEach(t),dRr=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bY=n(PZ,"A",{href:!0});var pwt=s(bY);cRr=r(pwt,"from_pretrained()"),pwt.forEach(t),fRr=r(PZ," to load the model weights."),PZ.forEach(t),mRr=i(S0),T(X3.$$.fragment,S0),S0.forEach(t),gRr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(x7.$$.fragment,Kl),hRr=i(Kl),_Te=n(Kl,"P",{});var uwt=s(_Te);pRr=r(uwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uwt.forEach(t),uRr=i(Kl),Fn=n(Kl,"P",{});var R0=s(Fn);_Rr=r(R0,"The model class to instantiate is selected based on the "),bTe=n(R0,"CODE",{});var _wt=s(bTe);bRr=r(_wt,"model_type"),_wt.forEach(t),vRr=r(R0,` property of the config object (either
passed as an argument or loaded from `),vTe=n(R0,"CODE",{});var bwt=s(vTe);FRr=r(bwt,"pretrained_model_name_or_path"),bwt.forEach(t),TRr=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FTe=n(R0,"CODE",{});var vwt=s(FTe);MRr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),ERr=r(R0,":"),R0.forEach(t),CRr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);z3=n(Fo,"LI",{});var tPe=s(z3);TTe=n(tPe,"STRONG",{});var Fwt=s(TTe);wRr=r(Fwt,"albert"),Fwt.forEach(t),ARr=r(tPe," \u2014 "),vY=n(tPe,"A",{href:!0});var Twt=s(vY);yRr=r(Twt,"FlaxAlbertForTokenClassification"),Twt.forEach(t),LRr=r(tPe," (ALBERT model)"),tPe.forEach(t),xRr=i(Fo),Q3=n(Fo,"LI",{});var aPe=s(Q3);MTe=n(aPe,"STRONG",{});var Mwt=s(MTe);$Rr=r(Mwt,"bert"),Mwt.forEach(t),kRr=r(aPe," \u2014 "),FY=n(aPe,"A",{href:!0});var Ewt=s(FY);SRr=r(Ewt,"FlaxBertForTokenClassification"),Ewt.forEach(t),RRr=r(aPe," (BERT model)"),aPe.forEach(t),BRr=i(Fo),W3=n(Fo,"LI",{});var nPe=s(W3);ETe=n(nPe,"STRONG",{});var Cwt=s(ETe);PRr=r(Cwt,"big_bird"),Cwt.forEach(t),IRr=r(nPe," \u2014 "),TY=n(nPe,"A",{href:!0});var wwt=s(TY);qRr=r(wwt,"FlaxBigBirdForTokenClassification"),wwt.forEach(t),NRr=r(nPe," (BigBird model)"),nPe.forEach(t),jRr=i(Fo),H3=n(Fo,"LI",{});var sPe=s(H3);CTe=n(sPe,"STRONG",{});var Awt=s(CTe);DRr=r(Awt,"distilbert"),Awt.forEach(t),GRr=r(sPe," \u2014 "),MY=n(sPe,"A",{href:!0});var ywt=s(MY);ORr=r(ywt,"FlaxDistilBertForTokenClassification"),ywt.forEach(t),VRr=r(sPe," (DistilBERT model)"),sPe.forEach(t),XRr=i(Fo),U3=n(Fo,"LI",{});var lPe=s(U3);wTe=n(lPe,"STRONG",{});var Lwt=s(wTe);zRr=r(Lwt,"electra"),Lwt.forEach(t),QRr=r(lPe," \u2014 "),EY=n(lPe,"A",{href:!0});var xwt=s(EY);WRr=r(xwt,"FlaxElectraForTokenClassification"),xwt.forEach(t),HRr=r(lPe," (ELECTRA model)"),lPe.forEach(t),URr=i(Fo),J3=n(Fo,"LI",{});var iPe=s(J3);ATe=n(iPe,"STRONG",{});var $wt=s(ATe);JRr=r($wt,"roberta"),$wt.forEach(t),YRr=r(iPe," \u2014 "),CY=n(iPe,"A",{href:!0});var kwt=s(CY);KRr=r(kwt,"FlaxRobertaForTokenClassification"),kwt.forEach(t),ZRr=r(iPe," (RoBERTa model)"),iPe.forEach(t),eBr=i(Fo),Y3=n(Fo,"LI",{});var dPe=s(Y3);yTe=n(dPe,"STRONG",{});var Swt=s(yTe);oBr=r(Swt,"roformer"),Swt.forEach(t),rBr=r(dPe," \u2014 "),wY=n(dPe,"A",{href:!0});var Rwt=s(wY);tBr=r(Rwt,"FlaxRoFormerForTokenClassification"),Rwt.forEach(t),aBr=r(dPe," (RoFormer model)"),dPe.forEach(t),nBr=i(Fo),K3=n(Fo,"LI",{});var cPe=s(K3);LTe=n(cPe,"STRONG",{});var Bwt=s(LTe);sBr=r(Bwt,"xlm-roberta"),Bwt.forEach(t),lBr=r(cPe," \u2014 "),AY=n(cPe,"A",{href:!0});var Pwt=s(AY);iBr=r(Pwt,"FlaxXLMRobertaForTokenClassification"),Pwt.forEach(t),dBr=r(cPe," (XLM-RoBERTa model)"),cPe.forEach(t),Fo.forEach(t),cBr=i(Kl),T(Z3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),bqe=i(f),Jc=n(f,"H2",{class:!0});var wje=s(Jc);ew=n(wje,"A",{id:!0,class:!0,href:!0});var Iwt=s(ew);xTe=n(Iwt,"SPAN",{});var qwt=s(xTe);T($7.$$.fragment,qwt),qwt.forEach(t),Iwt.forEach(t),fBr=i(wje),$Te=n(wje,"SPAN",{});var Nwt=s($Te);mBr=r(Nwt,"FlaxAutoModelForMultipleChoice"),Nwt.forEach(t),wje.forEach(t),vqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(k7.$$.fragment,Zl),gBr=i(Zl),Yc=n(Zl,"P",{});var IZ=s(Yc);hBr=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yY=n(IZ,"A",{href:!0});var jwt=s(yY);pBr=r(jwt,"from_pretrained()"),jwt.forEach(t),uBr=r(IZ," class method or the "),LY=n(IZ,"A",{href:!0});var Dwt=s(LY);_Br=r(Dwt,"from_config()"),Dwt.forEach(t),bBr=r(IZ,` class
method.`),IZ.forEach(t),vBr=i(Zl),S7=n(Zl,"P",{});var Aje=s(S7);FBr=r(Aje,"This class cannot be instantiated directly using "),kTe=n(Aje,"CODE",{});var Gwt=s(kTe);TBr=r(Gwt,"__init__()"),Gwt.forEach(t),MBr=r(Aje," (throws an error)."),Aje.forEach(t),EBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var B0=s(Wt);T(R7.$$.fragment,B0),CBr=i(B0),STe=n(B0,"P",{});var Owt=s(STe);wBr=r(Owt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Owt.forEach(t),ABr=i(B0),Kc=n(B0,"P",{});var qZ=s(Kc);yBr=r(qZ,`Note:
Loading a model from its configuration file does `),RTe=n(qZ,"STRONG",{});var Vwt=s(RTe);LBr=r(Vwt,"not"),Vwt.forEach(t),xBr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(qZ,"A",{href:!0});var Xwt=s(xY);$Br=r(Xwt,"from_pretrained()"),Xwt.forEach(t),kBr=r(qZ," to load the model weights."),qZ.forEach(t),SBr=i(B0),T(ow.$$.fragment,B0),B0.forEach(t),RBr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(B7.$$.fragment,ei),BBr=i(ei),BTe=n(ei,"P",{});var zwt=s(BTe);PBr=r(zwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zwt.forEach(t),IBr=i(ei),Tn=n(ei,"P",{});var P0=s(Tn);qBr=r(P0,"The model class to instantiate is selected based on the "),PTe=n(P0,"CODE",{});var Qwt=s(PTe);NBr=r(Qwt,"model_type"),Qwt.forEach(t),jBr=r(P0,` property of the config object (either
passed as an argument or loaded from `),ITe=n(P0,"CODE",{});var Wwt=s(ITe);DBr=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),GBr=r(P0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qTe=n(P0,"CODE",{});var Hwt=s(qTe);OBr=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),VBr=r(P0,":"),P0.forEach(t),XBr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);rw=n(To,"LI",{});var fPe=s(rw);NTe=n(fPe,"STRONG",{});var Uwt=s(NTe);zBr=r(Uwt,"albert"),Uwt.forEach(t),QBr=r(fPe," \u2014 "),$Y=n(fPe,"A",{href:!0});var Jwt=s($Y);WBr=r(Jwt,"FlaxAlbertForMultipleChoice"),Jwt.forEach(t),HBr=r(fPe," (ALBERT model)"),fPe.forEach(t),UBr=i(To),tw=n(To,"LI",{});var mPe=s(tw);jTe=n(mPe,"STRONG",{});var Ywt=s(jTe);JBr=r(Ywt,"bert"),Ywt.forEach(t),YBr=r(mPe," \u2014 "),kY=n(mPe,"A",{href:!0});var Kwt=s(kY);KBr=r(Kwt,"FlaxBertForMultipleChoice"),Kwt.forEach(t),ZBr=r(mPe," (BERT model)"),mPe.forEach(t),ePr=i(To),aw=n(To,"LI",{});var gPe=s(aw);DTe=n(gPe,"STRONG",{});var Zwt=s(DTe);oPr=r(Zwt,"big_bird"),Zwt.forEach(t),rPr=r(gPe," \u2014 "),SY=n(gPe,"A",{href:!0});var eAt=s(SY);tPr=r(eAt,"FlaxBigBirdForMultipleChoice"),eAt.forEach(t),aPr=r(gPe," (BigBird model)"),gPe.forEach(t),nPr=i(To),nw=n(To,"LI",{});var hPe=s(nw);GTe=n(hPe,"STRONG",{});var oAt=s(GTe);sPr=r(oAt,"distilbert"),oAt.forEach(t),lPr=r(hPe," \u2014 "),RY=n(hPe,"A",{href:!0});var rAt=s(RY);iPr=r(rAt,"FlaxDistilBertForMultipleChoice"),rAt.forEach(t),dPr=r(hPe," (DistilBERT model)"),hPe.forEach(t),cPr=i(To),sw=n(To,"LI",{});var pPe=s(sw);OTe=n(pPe,"STRONG",{});var tAt=s(OTe);fPr=r(tAt,"electra"),tAt.forEach(t),mPr=r(pPe," \u2014 "),BY=n(pPe,"A",{href:!0});var aAt=s(BY);gPr=r(aAt,"FlaxElectraForMultipleChoice"),aAt.forEach(t),hPr=r(pPe," (ELECTRA model)"),pPe.forEach(t),pPr=i(To),lw=n(To,"LI",{});var uPe=s(lw);VTe=n(uPe,"STRONG",{});var nAt=s(VTe);uPr=r(nAt,"roberta"),nAt.forEach(t),_Pr=r(uPe," \u2014 "),PY=n(uPe,"A",{href:!0});var sAt=s(PY);bPr=r(sAt,"FlaxRobertaForMultipleChoice"),sAt.forEach(t),vPr=r(uPe," (RoBERTa model)"),uPe.forEach(t),FPr=i(To),iw=n(To,"LI",{});var _Pe=s(iw);XTe=n(_Pe,"STRONG",{});var lAt=s(XTe);TPr=r(lAt,"roformer"),lAt.forEach(t),MPr=r(_Pe," \u2014 "),IY=n(_Pe,"A",{href:!0});var iAt=s(IY);EPr=r(iAt,"FlaxRoFormerForMultipleChoice"),iAt.forEach(t),CPr=r(_Pe," (RoFormer model)"),_Pe.forEach(t),wPr=i(To),dw=n(To,"LI",{});var bPe=s(dw);zTe=n(bPe,"STRONG",{});var dAt=s(zTe);APr=r(dAt,"xlm-roberta"),dAt.forEach(t),yPr=r(bPe," \u2014 "),qY=n(bPe,"A",{href:!0});var cAt=s(qY);LPr=r(cAt,"FlaxXLMRobertaForMultipleChoice"),cAt.forEach(t),xPr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),To.forEach(t),$Pr=i(ei),T(cw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),Fqe=i(f),Zc=n(f,"H2",{class:!0});var yje=s(Zc);fw=n(yje,"A",{id:!0,class:!0,href:!0});var fAt=s(fw);QTe=n(fAt,"SPAN",{});var mAt=s(QTe);T(P7.$$.fragment,mAt),mAt.forEach(t),fAt.forEach(t),kPr=i(yje),WTe=n(yje,"SPAN",{});var gAt=s(WTe);SPr=r(gAt,"FlaxAutoModelForNextSentencePrediction"),gAt.forEach(t),yje.forEach(t),Tqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(I7.$$.fragment,oi),RPr=i(oi),ef=n(oi,"P",{});var NZ=s(ef);BPr=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NY=n(NZ,"A",{href:!0});var hAt=s(NY);PPr=r(hAt,"from_pretrained()"),hAt.forEach(t),IPr=r(NZ," class method or the "),jY=n(NZ,"A",{href:!0});var pAt=s(jY);qPr=r(pAt,"from_config()"),pAt.forEach(t),NPr=r(NZ,` class
method.`),NZ.forEach(t),jPr=i(oi),q7=n(oi,"P",{});var Lje=s(q7);DPr=r(Lje,"This class cannot be instantiated directly using "),HTe=n(Lje,"CODE",{});var uAt=s(HTe);GPr=r(uAt,"__init__()"),uAt.forEach(t),OPr=r(Lje," (throws an error)."),Lje.forEach(t),VPr=i(oi),Ht=n(oi,"DIV",{class:!0});var I0=s(Ht);T(N7.$$.fragment,I0),XPr=i(I0),UTe=n(I0,"P",{});var _At=s(UTe);zPr=r(_At,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_At.forEach(t),QPr=i(I0),of=n(I0,"P",{});var jZ=s(of);WPr=r(jZ,`Note:
Loading a model from its configuration file does `),JTe=n(jZ,"STRONG",{});var bAt=s(JTe);HPr=r(bAt,"not"),bAt.forEach(t),UPr=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(jZ,"A",{href:!0});var vAt=s(DY);JPr=r(vAt,"from_pretrained()"),vAt.forEach(t),YPr=r(jZ," to load the model weights."),jZ.forEach(t),KPr=i(I0),T(mw.$$.fragment,I0),I0.forEach(t),ZPr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(j7.$$.fragment,ri),eIr=i(ri),YTe=n(ri,"P",{});var FAt=s(YTe);oIr=r(FAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FAt.forEach(t),rIr=i(ri),Mn=n(ri,"P",{});var q0=s(Mn);tIr=r(q0,"The model class to instantiate is selected based on the "),KTe=n(q0,"CODE",{});var TAt=s(KTe);aIr=r(TAt,"model_type"),TAt.forEach(t),nIr=r(q0,` property of the config object (either
passed as an argument or loaded from `),ZTe=n(q0,"CODE",{});var MAt=s(ZTe);sIr=r(MAt,"pretrained_model_name_or_path"),MAt.forEach(t),lIr=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eMe=n(q0,"CODE",{});var EAt=s(eMe);iIr=r(EAt,"pretrained_model_name_or_path"),EAt.forEach(t),dIr=r(q0,":"),q0.forEach(t),cIr=i(ri),oMe=n(ri,"UL",{});var CAt=s(oMe);gw=n(CAt,"LI",{});var vPe=s(gw);rMe=n(vPe,"STRONG",{});var wAt=s(rMe);fIr=r(wAt,"bert"),wAt.forEach(t),mIr=r(vPe," \u2014 "),GY=n(vPe,"A",{href:!0});var AAt=s(GY);gIr=r(AAt,"FlaxBertForNextSentencePrediction"),AAt.forEach(t),hIr=r(vPe," (BERT model)"),vPe.forEach(t),CAt.forEach(t),pIr=i(ri),T(hw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),Mqe=i(f),rf=n(f,"H2",{class:!0});var xje=s(rf);pw=n(xje,"A",{id:!0,class:!0,href:!0});var yAt=s(pw);tMe=n(yAt,"SPAN",{});var LAt=s(tMe);T(D7.$$.fragment,LAt),LAt.forEach(t),yAt.forEach(t),uIr=i(xje),aMe=n(xje,"SPAN",{});var xAt=s(aMe);_Ir=r(xAt,"FlaxAutoModelForImageClassification"),xAt.forEach(t),xje.forEach(t),Eqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(G7.$$.fragment,ti),bIr=i(ti),tf=n(ti,"P",{});var DZ=s(tf);vIr=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OY=n(DZ,"A",{href:!0});var $At=s(OY);FIr=r($At,"from_pretrained()"),$At.forEach(t),TIr=r(DZ," class method or the "),VY=n(DZ,"A",{href:!0});var kAt=s(VY);MIr=r(kAt,"from_config()"),kAt.forEach(t),EIr=r(DZ,` class
method.`),DZ.forEach(t),CIr=i(ti),O7=n(ti,"P",{});var $je=s(O7);wIr=r($je,"This class cannot be instantiated directly using "),nMe=n($je,"CODE",{});var SAt=s(nMe);AIr=r(SAt,"__init__()"),SAt.forEach(t),yIr=r($je," (throws an error)."),$je.forEach(t),LIr=i(ti),Ut=n(ti,"DIV",{class:!0});var N0=s(Ut);T(V7.$$.fragment,N0),xIr=i(N0),sMe=n(N0,"P",{});var RAt=s(sMe);$Ir=r(RAt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),RAt.forEach(t),kIr=i(N0),af=n(N0,"P",{});var GZ=s(af);SIr=r(GZ,`Note:
Loading a model from its configuration file does `),lMe=n(GZ,"STRONG",{});var BAt=s(lMe);RIr=r(BAt,"not"),BAt.forEach(t),BIr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XY=n(GZ,"A",{href:!0});var PAt=s(XY);PIr=r(PAt,"from_pretrained()"),PAt.forEach(t),IIr=r(GZ," to load the model weights."),GZ.forEach(t),qIr=i(N0),T(uw.$$.fragment,N0),N0.forEach(t),NIr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(X7.$$.fragment,ai),jIr=i(ai),iMe=n(ai,"P",{});var IAt=s(iMe);DIr=r(IAt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),IAt.forEach(t),GIr=i(ai),En=n(ai,"P",{});var j0=s(En);OIr=r(j0,"The model class to instantiate is selected based on the "),dMe=n(j0,"CODE",{});var qAt=s(dMe);VIr=r(qAt,"model_type"),qAt.forEach(t),XIr=r(j0,` property of the config object (either
passed as an argument or loaded from `),cMe=n(j0,"CODE",{});var NAt=s(cMe);zIr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),QIr=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fMe=n(j0,"CODE",{});var jAt=s(fMe);WIr=r(jAt,"pretrained_model_name_or_path"),jAt.forEach(t),HIr=r(j0,":"),j0.forEach(t),UIr=i(ai),z7=n(ai,"UL",{});var kje=s(z7);_w=n(kje,"LI",{});var FPe=s(_w);mMe=n(FPe,"STRONG",{});var DAt=s(mMe);JIr=r(DAt,"beit"),DAt.forEach(t),YIr=r(FPe," \u2014 "),zY=n(FPe,"A",{href:!0});var GAt=s(zY);KIr=r(GAt,"FlaxBeitForImageClassification"),GAt.forEach(t),ZIr=r(FPe," (BEiT model)"),FPe.forEach(t),eqr=i(kje),bw=n(kje,"LI",{});var TPe=s(bw);gMe=n(TPe,"STRONG",{});var OAt=s(gMe);oqr=r(OAt,"vit"),OAt.forEach(t),rqr=r(TPe," \u2014 "),QY=n(TPe,"A",{href:!0});var VAt=s(QY);tqr=r(VAt,"FlaxViTForImageClassification"),VAt.forEach(t),aqr=r(TPe," (ViT model)"),TPe.forEach(t),kje.forEach(t),nqr=i(ai),T(vw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),Cqe=i(f),nf=n(f,"H2",{class:!0});var Sje=s(nf);Fw=n(Sje,"A",{id:!0,class:!0,href:!0});var XAt=s(Fw);hMe=n(XAt,"SPAN",{});var zAt=s(hMe);T(Q7.$$.fragment,zAt),zAt.forEach(t),XAt.forEach(t),sqr=i(Sje),pMe=n(Sje,"SPAN",{});var QAt=s(pMe);lqr=r(QAt,"FlaxAutoModelForVision2Seq"),QAt.forEach(t),Sje.forEach(t),wqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(W7.$$.fragment,ni),iqr=i(ni),sf=n(ni,"P",{});var OZ=s(sf);dqr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),WY=n(OZ,"A",{href:!0});var WAt=s(WY);cqr=r(WAt,"from_pretrained()"),WAt.forEach(t),fqr=r(OZ," class method or the "),HY=n(OZ,"A",{href:!0});var HAt=s(HY);mqr=r(HAt,"from_config()"),HAt.forEach(t),gqr=r(OZ,` class
method.`),OZ.forEach(t),hqr=i(ni),H7=n(ni,"P",{});var Rje=s(H7);pqr=r(Rje,"This class cannot be instantiated directly using "),uMe=n(Rje,"CODE",{});var UAt=s(uMe);uqr=r(UAt,"__init__()"),UAt.forEach(t),_qr=r(Rje," (throws an error)."),Rje.forEach(t),bqr=i(ni),Jt=n(ni,"DIV",{class:!0});var D0=s(Jt);T(U7.$$.fragment,D0),vqr=i(D0),_Me=n(D0,"P",{});var JAt=s(_Me);Fqr=r(JAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JAt.forEach(t),Tqr=i(D0),lf=n(D0,"P",{});var VZ=s(lf);Mqr=r(VZ,`Note:
Loading a model from its configuration file does `),bMe=n(VZ,"STRONG",{});var YAt=s(bMe);Eqr=r(YAt,"not"),YAt.forEach(t),Cqr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(VZ,"A",{href:!0});var KAt=s(UY);wqr=r(KAt,"from_pretrained()"),KAt.forEach(t),Aqr=r(VZ," to load the model weights."),VZ.forEach(t),yqr=i(D0),T(Tw.$$.fragment,D0),D0.forEach(t),Lqr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(J7.$$.fragment,si),xqr=i(si),vMe=n(si,"P",{});var ZAt=s(vMe);$qr=r(ZAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZAt.forEach(t),kqr=i(si),Cn=n(si,"P",{});var G0=s(Cn);Sqr=r(G0,"The model class to instantiate is selected based on the "),FMe=n(G0,"CODE",{});var e0t=s(FMe);Rqr=r(e0t,"model_type"),e0t.forEach(t),Bqr=r(G0,` property of the config object (either
passed as an argument or loaded from `),TMe=n(G0,"CODE",{});var o0t=s(TMe);Pqr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),Iqr=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MMe=n(G0,"CODE",{});var r0t=s(MMe);qqr=r(r0t,"pretrained_model_name_or_path"),r0t.forEach(t),Nqr=r(G0,":"),G0.forEach(t),jqr=i(si),EMe=n(si,"UL",{});var t0t=s(EMe);Mw=n(t0t,"LI",{});var MPe=s(Mw);CMe=n(MPe,"STRONG",{});var a0t=s(CMe);Dqr=r(a0t,"vision-encoder-decoder"),a0t.forEach(t),Gqr=r(MPe," \u2014 "),JY=n(MPe,"A",{href:!0});var n0t=s(JY);Oqr=r(n0t,"FlaxVisionEncoderDecoderModel"),n0t.forEach(t),Vqr=r(MPe," (Vision Encoder decoder model)"),MPe.forEach(t),t0t.forEach(t),Xqr=i(si),T(Ew.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dLt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(p$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(u$,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig"),c(_$,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig"),c(b$,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig"),c(v$,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig"),c(F$,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(T$,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig"),c(M$,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(E$,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(C$,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(w$,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig"),c(A$,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig"),c(y$,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig"),c(L$,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig"),c(x$,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig"),c($$,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig"),c(k$,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(S$,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(R$,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(B$,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig"),c(P$,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(I$,"href","/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(q$,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig"),c(N$,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig"),c(j$,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig"),c(D$,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig"),c(G$,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig"),c(O$,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig"),c(V$,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(X$,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig"),c(z$,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig"),c(Q$,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig"),c(W$,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig"),c(H$,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig"),c(U$,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNConfig"),c(J$,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config"),c(Y$,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(K$,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig"),c(Z$,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig"),c(ek,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig"),c(ok,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(rk,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(tk,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(ak,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig"),c(nk,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig"),c(sk,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeConfig"),c(lk,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig"),c(ik,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config"),c(dk,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig"),c(ck,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(fk,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig"),c(mk,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(gk,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(hk,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig"),c(pk,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config"),c(uk,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(_k,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(bk,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig"),c(vk,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Fk,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig"),c(Tk,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Mk,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Ek,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Ck,"href","/docs/transformers/pr_16654/en/model_doc/rag#transformers.RagConfig"),c(wk,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmConfig"),c(Ak,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig"),c(yk,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig"),c(Lk,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig"),c(xk,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig"),c($k,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig"),c(kk,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig"),c(Sk,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig"),c(Rk,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig"),c(Bk,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig"),c(Pk,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig"),c(Ik,"href","/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(qk,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Nk,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(jk,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig"),c(Dk,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Gk,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig"),c(Ok,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config"),c(Vk,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig"),c(Xk,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig"),c(zk,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Qk,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRConfig"),c(Wk,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Hk,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Uk,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig"),c(Jk,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltConfig"),c(Yk,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Kk,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Zk,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(eS,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig"),c(oS,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(rS,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(tS,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig"),c(aS,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig"),c(nS,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig"),c(sS,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(lS,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(iS,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(dS,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig"),c(cS,"href","/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosConfig"),c(fS,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_g,"id","transformers.AutoTokenizer"),c(_g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_g,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(mS,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(gS,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizer"),c(hS,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(pS,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartTokenizer"),c(uS,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartTokenizerFast"),c(_S,"href","/docs/transformers/pr_16654/en/model_doc/barthez#transformers.BarthezTokenizer"),c(bS,"href","/docs/transformers/pr_16654/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(vS,"href","/docs/transformers/pr_16654/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(FS,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),c(TS,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),c(MS,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(ES,"href","/docs/transformers/pr_16654/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(CS,"href","/docs/transformers/pr_16654/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(wS,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(AS,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(yS,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(LS,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xS,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c($S,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(kS,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(SS,"href","/docs/transformers/pr_16654/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(RS,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertTokenizer"),c(BS,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(PS,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineTokenizer"),c(IS,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPTokenizer"),c(qS,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(NS,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(jS,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(DS,"href","/docs/transformers/pr_16654/en/model_doc/cpm#transformers.CpmTokenizer"),c(GS,"href","/docs/transformers/pr_16654/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(OS,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(VS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zS,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaTokenizer"),c(QS,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(WS,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(HS,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(US,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(JS,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(YS,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(KS,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraTokenizer"),c(eR,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(oR,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(rR,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetTokenizer"),c(tR,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(aR,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(nR,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelTokenizer"),c(sR,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(lR,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iR,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dR,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cR,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fR,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(mR,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(gR,"href","/docs/transformers/pr_16654/en/model_doc/herbert#transformers.HerbertTokenizer"),c(hR,"href","/docs/transformers/pr_16654/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(pR,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uR,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_R,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bR,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(vR,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(FR,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(TR,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(MR,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(ER,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(CR,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDTokenizer"),c(wR,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDTokenizerFast"),c(AR,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerTokenizer"),c(yR,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(LR,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeTokenizer"),c(xR,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertTokenizer"),c($R,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(kR,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(SR,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianTokenizer"),c(RR,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartTokenizer"),c(BR,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(PR,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(IR,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(qR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),c(NR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),c(jR,"href","/docs/transformers/pr_16654/en/model_doc/mluke#transformers.MLukeTokenizer"),c(DR,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(GR,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(OR,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(VR,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(XR,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5Tokenizer"),c(zR,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5TokenizerFast"),c(QR,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizer"),c(WR,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(HR,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(UR,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(JR,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(YR,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(KR,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(ZR,"href","/docs/transformers/pr_16654/en/model_doc/phobert#transformers.PhobertTokenizer"),c(eB,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartTokenizer"),c(oB,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(rB,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),c(tB,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),c(aB,"href","/docs/transformers/pr_16654/en/model_doc/rag#transformers.RagTokenizer"),c(nB,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmTokenizer"),c(sB,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmTokenizerFast"),c(lB,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerTokenizer"),c(iB,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(dB,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertTokenizer"),c(cB,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(fB,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(mB,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(gB,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),c(hB,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(pB,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(uB,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(_B,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(bB,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(vB,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterTokenizer"),c(FB,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(TB,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(MB,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(EB,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5Tokenizer"),c(CB,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5TokenizerFast"),c(wB,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasTokenizer"),c(AB,"href","/docs/transformers/pr_16654/en/model_doc/tapex#transformers.TapexTokenizer"),c(yB,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(LB,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),c(xB,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),c($B,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(SB,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMTokenizer"),c(RB,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BB,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMTokenizer"),c(PB,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(IB,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qB,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(NB,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jB,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DB,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(GB,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(OB,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizer"),c(VB,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ug,"id","transformers.AutoFeatureExtractor"),c(Ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ug,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(XB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(zB,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(QB,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(YB,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(eP,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(oP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rP,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(tP,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(aP,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(nP,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(sP,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lP,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iP,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(dP,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(cP,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fP,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mP,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(gP,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(hP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(pP,"href","/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoProcessor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(uP,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(_P,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPProcessor"),c(bP,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(vP,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(FP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(MP,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(EP,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(CP,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRProcessor"),c(wP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yP,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltProcessor"),c(LP,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(xP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($P,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"id","transformers.AutoModel"),c(Vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(kP,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SP,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RP,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BP,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertModel"),c(PP,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartModel"),c(IP,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitModel"),c(qP,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel"),c(NP,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jP,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdModel"),c(DP,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GP,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OP,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VP,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertModel"),c(XP,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineModel"),c(zP,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPModel"),c(QP,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertModel"),c(WP,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextModel"),c(HP,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLModel"),c(UP,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(JP,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(YP,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(KP,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaModel"),c(ZP,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(eI,"href","/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(oI,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTModel"),c(rI,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrModel"),c(tI,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertModel"),c(aI,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(nI,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTModel"),c(sI,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraModel"),c(lI,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertModel"),c(iI,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaModel"),c(dI,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetModel"),c(cI,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTModel"),c(fI,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelModel"),c(mI,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelBaseModel"),c(gI,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNModel"),c(hI,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Model"),c(pI,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(uI,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJModel"),c(_I,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertModel"),c(bI,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertModel"),c(vI,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(FI,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(TI,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(MI,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDModel"),c(EI,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerModel"),c(CI,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeModel"),c(wI,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertModel"),c(AI,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Model"),c(yI,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianModel"),c(LI,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerModel"),c(xI,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartModel"),c($I,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(kI,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertModel"),c(SI,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetModel"),c(RI,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Model"),c(BI,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerModel"),c(PI,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(II,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusModel"),c(qI,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverModel"),c(NI,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartModel"),c(jI,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerModel"),c(DI,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(GI,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertModel"),c(OI,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModel"),c(VI,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetModel"),c(XI,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertModel"),c(zI,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetModel"),c(QI,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel"),c(WI,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaModel"),c(HI,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerModel"),c(UI,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerModel"),c(JI,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWModel"),c(YI,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDModel"),c(KI,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(ZI,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterModel"),c(eq,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(oq,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinModel"),c(rq,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Model"),c(tq,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasModel"),c(aq,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(nq,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechModel"),c(sq,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(lq,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanModel"),c(iq,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltModel"),c(dq,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(cq,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertModel"),c(fq,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTModel"),c(mq,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(gq,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(hq,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMModel"),c(pq,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMModel"),c(uq,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMModel"),c(_q,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(bq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(vq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Fq,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetModel"),c(Tq,"href","/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosModel"),c(Mq,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bu,"id","transformers.AutoModelForPreTraining"),c(Bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bu,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(Eq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Cq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aq,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForPreTraining"),c(yq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Lq,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForPreTraining"),c(xq,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c($q,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(kq,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Sq,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Rq,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Bq,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Pq,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Iq,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForPreTraining"),c(qq,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Nq,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaForPreTraining"),c(jq,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Dq,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Gq,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Oq,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Vq,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Xq,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(zq,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Qq,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Wq,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Hq,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Uq,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Jq,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Yq,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel"),c(Kq,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Zq,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(eN,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(oN,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(rN,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(tN,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(aN,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(nN,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(sN,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(lN,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(iN,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(dN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(cN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(fN,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C_,"id","transformers.AutoModelForCausalLM"),c(C_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(mN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pN,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForCausalLM"),c(uN,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertLMHeadModel"),c(_N,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(bN,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(vN,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(FN,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(TN,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(MN,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(EN,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(CN,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(wN,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForCausalLM"),c(AN,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(yN,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(LN,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(xN,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianForCausalLM"),c($N,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForCausalLM"),c(kN,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(SN,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(RN,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(BN,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(PN,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(IN,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(qN,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(NN,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(jN,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(DN,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(GN,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(ON,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(VN,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(XN,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(zN,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(WN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(HN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(UN,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForMaskedLM"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(JN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZN,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ej,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMaskedLM"),c(rj,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(tj,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(aj,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(nj,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(sj,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ij,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(cj,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(fj,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(mj,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(gj,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(pj,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uj,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_j,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(bj,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Fj,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Mj,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Ej,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(wj,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Aj,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(yj,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Lj,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(xj,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($j,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Sj,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H6,"id","transformers.AutoModelForSeq2SeqLM"),c(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H6,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Rj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ij,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qj,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Gj,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianMTModel"),c(zj,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Qj,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Wj,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Uj,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Yj,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Kj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p1,"id","transformers.AutoModelForSequenceClassification"),c(p1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(Zj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rD,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(GD,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(OD,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification"),c(VD,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(XD,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(zD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(QD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(WD,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(HD,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mb,"id","transformers.AutoModelForMultipleChoice"),c(mb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(UD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KD,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(oG,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(tG,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(nG,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(lG,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(dG,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(cG,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(mG,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(gG,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(pG,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(uG,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(_G,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(bG,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(vG,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(FG,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(MG,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(EG,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(CG,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(wG,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForNextSentencePrediction"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(AG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xG,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c($G,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(kG,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(SG,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(RG,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zb,"id","transformers.AutoModelForTokenClassification"),c(Zb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zb,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(BG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qG,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(NG,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForTokenClassification"),c(jG,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(DG,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(GG,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForTokenClassification"),c(OG,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(VG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(XG,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(zG,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(QG,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(WG,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(HG,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(UG,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(JG,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(YG,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(KG,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(eO,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(oO,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(rO,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(tO,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(aO,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(nO,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(sO,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(lO,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(iO,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(dO,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(cO,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(fO,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(mO,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(gO,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(hO,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(pO,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I4,"id","transformers.AutoModelForQuestionAnswering"),c(I4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I4,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(uO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_O,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vO,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c($O,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(RO,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JO,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YO,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KO,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZO,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eV,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oV,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rV,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tV,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w2,"id","transformers.AutoModelForTableQuestionAnswering"),c(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(aV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($2,"id","transformers.AutoModelForImageClassification"),c($2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($2,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(iV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fV,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForImageClassification"),c(mV,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(gV,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(hV,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassification"),c(pV,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(uV,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(_V,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(bV,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(vV,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(FV,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(TV,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(MV,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(EV,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(CV,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForImageClassification"),c(wV,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanForImageClassification"),c(AV,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z2,"id","transformers.AutoModelForVision2Seq"),c(z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z2,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(yV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J2,"id","transformers.AutoModelForAudioClassification"),c(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J2,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(kV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(PV,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(IV,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(qV,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(NV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(jV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(DV,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(GV,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.AutoModelForAudioFrameClassification"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(OV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(QV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(WV,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(HV,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.AutoModelForCTC"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(UV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(ZV,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForCTC"),c(eX,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForCTC"),c(oX,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForCTC"),c(rX,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(tX,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(aX,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(nX,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.AutoModelForSpeechSeq2Seq"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(sX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(cX,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.AutoModelForAudioXVector"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(fX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(pX,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(uX,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(_X,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O5,"id","transformers.AutoModelForMaskedImageModeling"),c(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O5,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(bX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TX,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(MX,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(EX,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U5,"id","transformers.AutoModelForObjectDetection"),c(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U5,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(CX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForObjectDetection"),c(LX,"href","/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForImageSegmentation"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(xX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($X,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SX,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForSemanticSegmentation"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(RX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(qX,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(NX,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(jX,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForInstanceSegmentation"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(DX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.TFAutoModel"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(XX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertModel"),c(HX,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartModel"),c(UX,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertModel"),c(JX,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(YX,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(KX,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertModel"),c(ZX,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.TFCLIPModel"),c(ez,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertModel"),c(oz,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextModel"),c(rz,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLModel"),c(tz,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(az,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaModel"),c(nz,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(sz,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(lz,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(iz,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraModel"),c(dz,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(cz,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelModel"),c(fz,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(mz,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2Model"),c(gz,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJModel"),c(hz,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.TFHubertModel"),c(pz,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(uz,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDModel"),c(_z,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerModel"),c(bz,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertModel"),c(vz,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianModel"),c(Fz,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartModel"),c(Tz,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Mz,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Ez,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5Model"),c(Cz,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(wz,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Az,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertModel"),c(yz,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaModel"),c(Lz,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerModel"),c(xz,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c($z,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5Model"),c(kz,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasModel"),c(Sz,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Rz,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTModel"),c(Bz,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Pz,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(Iz,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMModel"),c(qz,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Nz,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mF,"id","transformers.TFAutoModelForPreTraining"),c(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mF,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(jz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Vz,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Xz,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForPreTraining"),c(zz,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Qz,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Wz,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Uz,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Jz,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Yz,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Kz,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(eQ,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(oQ,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tQ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(nQ,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(iQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(dQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NF,"id","transformers.TFAutoModelForCausalLM"),c(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NF,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(fQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hQ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(pQ,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(uQ,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(_Q,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(bQ,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(vQ,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(FQ,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(TQ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(MQ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(EQ,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(CQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(wQ,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.TFAutoModelForImageClassification"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(AQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c($Q,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(kQ,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.TFAutoModelForMaskedLM"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(SQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(qQ,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(DQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(OQ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(VQ,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(XQ,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(zQ,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(QQ,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(WQ,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(HQ,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(UQ,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(JQ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(YQ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(KQ,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(ZQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eW,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(LT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(oW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(nW,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(sW,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(lW,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(iW,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(dW,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianMTModel"),c(cW,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(fW,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(mW,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(gW,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.TFAutoModelForSequenceClassification"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(hW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(vW,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(TW,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(MW,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(EW,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(CW,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(wW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(AW,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(LW,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(xW,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c($W,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(kW,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(SW,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(RW,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(BW,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(PW,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(IW,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(qW,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(NW,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(jW,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(DW,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(GW,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(OW,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uM,"id","transformers.TFAutoModelForMultipleChoice"),c(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(VW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(WW,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(HW,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(JW,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(KW,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(eH,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(oH,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(rH,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(tH,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(aH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(nH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(sH,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(lH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(iH,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(dH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(gH,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(hH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_H,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForTokenClassification"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(bH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(MH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(EH,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(CH,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(wH,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(AH,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(yH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(LH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(xH,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c($H,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(kH,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(SH,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(RH,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(BH,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(PH,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(IH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(qH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(NH,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(jH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(DH,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForQuestionAnswering"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(GH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(zH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(QH,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(ZH,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(oU,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(tU,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(aU,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(nU,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(sU,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(lU,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(iU,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(dU,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qE,"id","transformers.TFAutoModelForVision2Seq"),c(qE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qE,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(cU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(hU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.FlaxAutoModel"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(bU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertModel"),c(MU,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartModel"),c(EU,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitModel"),c(CU,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertModel"),c(wU,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(AU,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(yU,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(LU,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.FlaxCLIPModel"),c(xU,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c($U,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraModel"),c(kU,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(SU,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(RU,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(BU,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianModel"),c(PU,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartModel"),c(IU,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5Model"),c(qU,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(NU,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(jU,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(DU,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5Model"),c(GU,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(OU,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTModel"),c(VU,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(XU,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(zU,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vC,"id","transformers.FlaxAutoModelForCausalLM"),c(vC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vC,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(QU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UU,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(JU,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(YU,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(KU,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(ZU,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(eJ,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(oJ,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(rJ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(tJ,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kC,"id","transformers.FlaxAutoModelForPreTraining"),c(kC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(aJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(iJ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(cJ,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(fJ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(mJ,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(pJ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(uJ,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(bJ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.FlaxAutoModelForMaskedLM"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(EJ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(wJ,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(AJ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(yJ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(LJ,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c($J,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(kJ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(qJ,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(NJ,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(jJ,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(DJ,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(GJ,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(OJ,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(VJ,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(XJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WJ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(JJ,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(YJ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(KJ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(ZJ,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(eY,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(oY,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(rY,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(tY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(dY,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(cY,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(fY,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(mY,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(gY,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(hY,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(pY,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V3,"id","transformers.FlaxAutoModelForTokenClassification"),c(V3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(uY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_Y,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vY,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(FY,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(TY,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(MY,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(EY,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(CY,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(wY,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(AY,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ew,"id","transformers.FlaxAutoModelForMultipleChoice"),c(ew,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ew,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(yY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(kY,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(SY,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(RY,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(BY,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(PY,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(IY,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(qY,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(NY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForImageClassification"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(OY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zY,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(QY,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fw,"id","transformers.FlaxAutoModelForVision2Seq"),c(Fw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(WY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,O0),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,V0),e(Xe,yn),e(Xe,Ln),e(Ln,X0),e(Xe,fi),e(Xe,xn),e(xn,z0),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,d$),e(Ae,gi),e(gi,c$),e(Ae,f$),b(f,Eo,_),b(f,Ea,_),e(Ea,m$),e(Ea,pf),e(pf,g$),e(Ea,Bje),b(f,EPe,_),b(f,hi,_),e(hi,uf),e(uf,XZ),M(Q0,XZ,null),e(hi,Pje),e(hi,zZ),e(zZ,Ije),b(f,CPe,_),b(f,$n,_),e($n,qje),e($n,QZ),e(QZ,Nje),e($n,jje),e($n,WZ),e(WZ,Dje),e($n,Gje),b(f,wPe,_),M(W0,f,_),b(f,APe,_),b(f,h$,_),e(h$,Oje),b(f,yPe,_),M(_f,f,_),b(f,LPe,_),b(f,pi,_),e(pi,bf),e(bf,HZ),M(H0,HZ,null),e(pi,Vje),e(pi,UZ),e(UZ,Xje),b(f,xPe,_),b(f,Co,_),M(U0,Co,null),e(Co,zje),e(Co,J0),e(J0,Qje),e(J0,p$),e(p$,Wje),e(J0,Hje),e(Co,Uje),e(Co,Y0),e(Y0,Jje),e(Y0,JZ),e(JZ,Yje),e(Y0,Kje),e(Co,Zje),e(Co,Er),M(K0,Er,null),e(Er,eDe),e(Er,YZ),e(YZ,oDe),e(Er,rDe),e(Er,ui),e(ui,tDe),e(ui,KZ),e(KZ,aDe),e(ui,nDe),e(ui,ZZ),e(ZZ,sDe),e(ui,lDe),e(Er,iDe),e(Er,y),e(y,vf),e(vf,eee),e(eee,dDe),e(vf,cDe),e(vf,u$),e(u$,fDe),e(vf,mDe),e(y,gDe),e(y,Ff),e(Ff,oee),e(oee,hDe),e(Ff,pDe),e(Ff,_$),e(_$,uDe),e(Ff,_De),e(y,bDe),e(y,Tf),e(Tf,ree),e(ree,vDe),e(Tf,FDe),e(Tf,b$),e(b$,TDe),e(Tf,MDe),e(y,EDe),e(y,Mf),e(Mf,tee),e(tee,CDe),e(Mf,wDe),e(Mf,v$),e(v$,ADe),e(Mf,yDe),e(y,LDe),e(y,Ef),e(Ef,aee),e(aee,xDe),e(Ef,$De),e(Ef,F$),e(F$,kDe),e(Ef,SDe),e(y,RDe),e(y,Cf),e(Cf,nee),e(nee,BDe),e(Cf,PDe),e(Cf,T$),e(T$,IDe),e(Cf,qDe),e(y,NDe),e(y,wf),e(wf,see),e(see,jDe),e(wf,DDe),e(wf,M$),e(M$,GDe),e(wf,ODe),e(y,VDe),e(y,Af),e(Af,lee),e(lee,XDe),e(Af,zDe),e(Af,E$),e(E$,QDe),e(Af,WDe),e(y,HDe),e(y,yf),e(yf,iee),e(iee,UDe),e(yf,JDe),e(yf,C$),e(C$,YDe),e(yf,KDe),e(y,ZDe),e(y,Lf),e(Lf,dee),e(dee,eGe),e(Lf,oGe),e(Lf,w$),e(w$,rGe),e(Lf,tGe),e(y,aGe),e(y,xf),e(xf,cee),e(cee,nGe),e(xf,sGe),e(xf,A$),e(A$,lGe),e(xf,iGe),e(y,dGe),e(y,$f),e($f,fee),e(fee,cGe),e($f,fGe),e($f,y$),e(y$,mGe),e($f,gGe),e(y,hGe),e(y,kf),e(kf,mee),e(mee,pGe),e(kf,uGe),e(kf,L$),e(L$,_Ge),e(kf,bGe),e(y,vGe),e(y,Sf),e(Sf,gee),e(gee,FGe),e(Sf,TGe),e(Sf,x$),e(x$,MGe),e(Sf,EGe),e(y,CGe),e(y,Rf),e(Rf,hee),e(hee,wGe),e(Rf,AGe),e(Rf,$$),e($$,yGe),e(Rf,LGe),e(y,xGe),e(y,Bf),e(Bf,pee),e(pee,$Ge),e(Bf,kGe),e(Bf,k$),e(k$,SGe),e(Bf,RGe),e(y,BGe),e(y,Pf),e(Pf,uee),e(uee,PGe),e(Pf,IGe),e(Pf,S$),e(S$,qGe),e(Pf,NGe),e(y,jGe),e(y,If),e(If,_ee),e(_ee,DGe),e(If,GGe),e(If,R$),e(R$,OGe),e(If,VGe),e(y,XGe),e(y,qf),e(qf,bee),e(bee,zGe),e(qf,QGe),e(qf,B$),e(B$,WGe),e(qf,HGe),e(y,UGe),e(y,Nf),e(Nf,vee),e(vee,JGe),e(Nf,YGe),e(Nf,P$),e(P$,KGe),e(Nf,ZGe),e(y,eOe),e(y,jf),e(jf,Fee),e(Fee,oOe),e(jf,rOe),e(jf,I$),e(I$,tOe),e(jf,aOe),e(y,nOe),e(y,Df),e(Df,Tee),e(Tee,sOe),e(Df,lOe),e(Df,q$),e(q$,iOe),e(Df,dOe),e(y,cOe),e(y,Gf),e(Gf,Mee),e(Mee,fOe),e(Gf,mOe),e(Gf,N$),e(N$,gOe),e(Gf,hOe),e(y,pOe),e(y,Of),e(Of,Eee),e(Eee,uOe),e(Of,_Oe),e(Of,j$),e(j$,bOe),e(Of,vOe),e(y,FOe),e(y,Vf),e(Vf,Cee),e(Cee,TOe),e(Vf,MOe),e(Vf,D$),e(D$,EOe),e(Vf,COe),e(y,wOe),e(y,Xf),e(Xf,wee),e(wee,AOe),e(Xf,yOe),e(Xf,G$),e(G$,LOe),e(Xf,xOe),e(y,$Oe),e(y,zf),e(zf,Aee),e(Aee,kOe),e(zf,SOe),e(zf,O$),e(O$,ROe),e(zf,BOe),e(y,POe),e(y,Qf),e(Qf,yee),e(yee,IOe),e(Qf,qOe),e(Qf,V$),e(V$,NOe),e(Qf,jOe),e(y,DOe),e(y,Wf),e(Wf,Lee),e(Lee,GOe),e(Wf,OOe),e(Wf,X$),e(X$,VOe),e(Wf,XOe),e(y,zOe),e(y,Hf),e(Hf,xee),e(xee,QOe),e(Hf,WOe),e(Hf,z$),e(z$,HOe),e(Hf,UOe),e(y,JOe),e(y,Uf),e(Uf,$ee),e($ee,YOe),e(Uf,KOe),e(Uf,Q$),e(Q$,ZOe),e(Uf,eVe),e(y,oVe),e(y,Jf),e(Jf,kee),e(kee,rVe),e(Jf,tVe),e(Jf,W$),e(W$,aVe),e(Jf,nVe),e(y,sVe),e(y,Yf),e(Yf,See),e(See,lVe),e(Yf,iVe),e(Yf,H$),e(H$,dVe),e(Yf,cVe),e(y,fVe),e(y,Kf),e(Kf,Ree),e(Ree,mVe),e(Kf,gVe),e(Kf,U$),e(U$,hVe),e(Kf,pVe),e(y,uVe),e(y,Zf),e(Zf,Bee),e(Bee,_Ve),e(Zf,bVe),e(Zf,J$),e(J$,vVe),e(Zf,FVe),e(y,TVe),e(y,em),e(em,Pee),e(Pee,MVe),e(em,EVe),e(em,Y$),e(Y$,CVe),e(em,wVe),e(y,AVe),e(y,om),e(om,Iee),e(Iee,yVe),e(om,LVe),e(om,K$),e(K$,xVe),e(om,$Ve),e(y,kVe),e(y,rm),e(rm,qee),e(qee,SVe),e(rm,RVe),e(rm,Z$),e(Z$,BVe),e(rm,PVe),e(y,IVe),e(y,tm),e(tm,Nee),e(Nee,qVe),e(tm,NVe),e(tm,ek),e(ek,jVe),e(tm,DVe),e(y,GVe),e(y,am),e(am,jee),e(jee,OVe),e(am,VVe),e(am,ok),e(ok,XVe),e(am,zVe),e(y,QVe),e(y,nm),e(nm,Dee),e(Dee,WVe),e(nm,HVe),e(nm,rk),e(rk,UVe),e(nm,JVe),e(y,YVe),e(y,sm),e(sm,Gee),e(Gee,KVe),e(sm,ZVe),e(sm,tk),e(tk,eXe),e(sm,oXe),e(y,rXe),e(y,lm),e(lm,Oee),e(Oee,tXe),e(lm,aXe),e(lm,ak),e(ak,nXe),e(lm,sXe),e(y,lXe),e(y,im),e(im,Vee),e(Vee,iXe),e(im,dXe),e(im,nk),e(nk,cXe),e(im,fXe),e(y,mXe),e(y,dm),e(dm,Xee),e(Xee,gXe),e(dm,hXe),e(dm,sk),e(sk,pXe),e(dm,uXe),e(y,_Xe),e(y,cm),e(cm,zee),e(zee,bXe),e(cm,vXe),e(cm,lk),e(lk,FXe),e(cm,TXe),e(y,MXe),e(y,fm),e(fm,Qee),e(Qee,EXe),e(fm,CXe),e(fm,ik),e(ik,wXe),e(fm,AXe),e(y,yXe),e(y,mm),e(mm,Wee),e(Wee,LXe),e(mm,xXe),e(mm,dk),e(dk,$Xe),e(mm,kXe),e(y,SXe),e(y,gm),e(gm,Hee),e(Hee,RXe),e(gm,BXe),e(gm,ck),e(ck,PXe),e(gm,IXe),e(y,qXe),e(y,hm),e(hm,Uee),e(Uee,NXe),e(hm,jXe),e(hm,fk),e(fk,DXe),e(hm,GXe),e(y,OXe),e(y,pm),e(pm,Jee),e(Jee,VXe),e(pm,XXe),e(pm,mk),e(mk,zXe),e(pm,QXe),e(y,WXe),e(y,um),e(um,Yee),e(Yee,HXe),e(um,UXe),e(um,gk),e(gk,JXe),e(um,YXe),e(y,KXe),e(y,_m),e(_m,Kee),e(Kee,ZXe),e(_m,eze),e(_m,hk),e(hk,oze),e(_m,rze),e(y,tze),e(y,bm),e(bm,Zee),e(Zee,aze),e(bm,nze),e(bm,pk),e(pk,sze),e(bm,lze),e(y,ize),e(y,vm),e(vm,eoe),e(eoe,dze),e(vm,cze),e(vm,uk),e(uk,fze),e(vm,mze),e(y,gze),e(y,Fm),e(Fm,ooe),e(ooe,hze),e(Fm,pze),e(Fm,_k),e(_k,uze),e(Fm,_ze),e(y,bze),e(y,Tm),e(Tm,roe),e(roe,vze),e(Tm,Fze),e(Tm,bk),e(bk,Tze),e(Tm,Mze),e(y,Eze),e(y,Mm),e(Mm,toe),e(toe,Cze),e(Mm,wze),e(Mm,vk),e(vk,Aze),e(Mm,yze),e(y,Lze),e(y,Em),e(Em,aoe),e(aoe,xze),e(Em,$ze),e(Em,Fk),e(Fk,kze),e(Em,Sze),e(y,Rze),e(y,Cm),e(Cm,noe),e(noe,Bze),e(Cm,Pze),e(Cm,Tk),e(Tk,Ize),e(Cm,qze),e(y,Nze),e(y,wm),e(wm,soe),e(soe,jze),e(wm,Dze),e(wm,Mk),e(Mk,Gze),e(wm,Oze),e(y,Vze),e(y,Am),e(Am,loe),e(loe,Xze),e(Am,zze),e(Am,Ek),e(Ek,Qze),e(Am,Wze),e(y,Hze),e(y,ym),e(ym,ioe),e(ioe,Uze),e(ym,Jze),e(ym,Ck),e(Ck,Yze),e(ym,Kze),e(y,Zze),e(y,Lm),e(Lm,doe),e(doe,eQe),e(Lm,oQe),e(Lm,wk),e(wk,rQe),e(Lm,tQe),e(y,aQe),e(y,xm),e(xm,coe),e(coe,nQe),e(xm,sQe),e(xm,Ak),e(Ak,lQe),e(xm,iQe),e(y,dQe),e(y,$m),e($m,foe),e(foe,cQe),e($m,fQe),e($m,yk),e(yk,mQe),e($m,gQe),e(y,hQe),e(y,km),e(km,moe),e(moe,pQe),e(km,uQe),e(km,Lk),e(Lk,_Qe),e(km,bQe),e(y,vQe),e(y,Sm),e(Sm,goe),e(goe,FQe),e(Sm,TQe),e(Sm,xk),e(xk,MQe),e(Sm,EQe),e(y,CQe),e(y,Rm),e(Rm,hoe),e(hoe,wQe),e(Rm,AQe),e(Rm,$k),e($k,yQe),e(Rm,LQe),e(y,xQe),e(y,Bm),e(Bm,poe),e(poe,$Qe),e(Bm,kQe),e(Bm,kk),e(kk,SQe),e(Bm,RQe),e(y,BQe),e(y,Pm),e(Pm,uoe),e(uoe,PQe),e(Pm,IQe),e(Pm,Sk),e(Sk,qQe),e(Pm,NQe),e(y,jQe),e(y,Im),e(Im,_oe),e(_oe,DQe),e(Im,GQe),e(Im,Rk),e(Rk,OQe),e(Im,VQe),e(y,XQe),e(y,qm),e(qm,boe),e(boe,zQe),e(qm,QQe),e(qm,Bk),e(Bk,WQe),e(qm,HQe),e(y,UQe),e(y,Nm),e(Nm,voe),e(voe,JQe),e(Nm,YQe),e(Nm,Pk),e(Pk,KQe),e(Nm,ZQe),e(y,eWe),e(y,jm),e(jm,Foe),e(Foe,oWe),e(jm,rWe),e(jm,Ik),e(Ik,tWe),e(jm,aWe),e(y,nWe),e(y,Dm),e(Dm,Toe),e(Toe,sWe),e(Dm,lWe),e(Dm,qk),e(qk,iWe),e(Dm,dWe),e(y,cWe),e(y,Gm),e(Gm,Moe),e(Moe,fWe),e(Gm,mWe),e(Gm,Nk),e(Nk,gWe),e(Gm,hWe),e(y,pWe),e(y,Om),e(Om,Eoe),e(Eoe,uWe),e(Om,_We),e(Om,jk),e(jk,bWe),e(Om,vWe),e(y,FWe),e(y,Vm),e(Vm,Coe),e(Coe,TWe),e(Vm,MWe),e(Vm,Dk),e(Dk,EWe),e(Vm,CWe),e(y,wWe),e(y,Xm),e(Xm,woe),e(woe,AWe),e(Xm,yWe),e(Xm,Gk),e(Gk,LWe),e(Xm,xWe),e(y,$We),e(y,zm),e(zm,Aoe),e(Aoe,kWe),e(zm,SWe),e(zm,Ok),e(Ok,RWe),e(zm,BWe),e(y,PWe),e(y,Qm),e(Qm,yoe),e(yoe,IWe),e(Qm,qWe),e(Qm,Vk),e(Vk,NWe),e(Qm,jWe),e(y,DWe),e(y,Wm),e(Wm,Loe),e(Loe,GWe),e(Wm,OWe),e(Wm,Xk),e(Xk,VWe),e(Wm,XWe),e(y,zWe),e(y,Hm),e(Hm,xoe),e(xoe,QWe),e(Hm,WWe),e(Hm,zk),e(zk,HWe),e(Hm,UWe),e(y,JWe),e(y,Um),e(Um,$oe),e($oe,YWe),e(Um,KWe),e(Um,Qk),e(Qk,ZWe),e(Um,eHe),e(y,oHe),e(y,Jm),e(Jm,koe),e(koe,rHe),e(Jm,tHe),e(Jm,Wk),e(Wk,aHe),e(Jm,nHe),e(y,sHe),e(y,Ym),e(Ym,Soe),e(Soe,lHe),e(Ym,iHe),e(Ym,Hk),e(Hk,dHe),e(Ym,cHe),e(y,fHe),e(y,Km),e(Km,Roe),e(Roe,mHe),e(Km,gHe),e(Km,Uk),e(Uk,hHe),e(Km,pHe),e(y,uHe),e(y,Zm),e(Zm,Boe),e(Boe,_He),e(Zm,bHe),e(Zm,Jk),e(Jk,vHe),e(Zm,FHe),e(y,THe),e(y,eg),e(eg,Poe),e(Poe,MHe),e(eg,EHe),e(eg,Yk),e(Yk,CHe),e(eg,wHe),e(y,AHe),e(y,og),e(og,Ioe),e(Ioe,yHe),e(og,LHe),e(og,Kk),e(Kk,xHe),e(og,$He),e(y,kHe),e(y,rg),e(rg,qoe),e(qoe,SHe),e(rg,RHe),e(rg,Zk),e(Zk,BHe),e(rg,PHe),e(y,IHe),e(y,tg),e(tg,Noe),e(Noe,qHe),e(tg,NHe),e(tg,eS),e(eS,jHe),e(tg,DHe),e(y,GHe),e(y,ag),e(ag,joe),e(joe,OHe),e(ag,VHe),e(ag,oS),e(oS,XHe),e(ag,zHe),e(y,QHe),e(y,ng),e(ng,Doe),e(Doe,WHe),e(ng,HHe),e(ng,rS),e(rS,UHe),e(ng,JHe),e(y,YHe),e(y,sg),e(sg,Goe),e(Goe,KHe),e(sg,ZHe),e(sg,tS),e(tS,eUe),e(sg,oUe),e(y,rUe),e(y,lg),e(lg,Ooe),e(Ooe,tUe),e(lg,aUe),e(lg,aS),e(aS,nUe),e(lg,sUe),e(y,lUe),e(y,ig),e(ig,Voe),e(Voe,iUe),e(ig,dUe),e(ig,nS),e(nS,cUe),e(ig,fUe),e(y,mUe),e(y,dg),e(dg,Xoe),e(Xoe,gUe),e(dg,hUe),e(dg,sS),e(sS,pUe),e(dg,uUe),e(y,_Ue),e(y,cg),e(cg,zoe),e(zoe,bUe),e(cg,vUe),e(cg,lS),e(lS,FUe),e(cg,TUe),e(y,MUe),e(y,fg),e(fg,Qoe),e(Qoe,EUe),e(fg,CUe),e(fg,iS),e(iS,wUe),e(fg,AUe),e(y,yUe),e(y,mg),e(mg,Woe),e(Woe,LUe),e(mg,xUe),e(mg,dS),e(dS,$Ue),e(mg,kUe),e(y,SUe),e(y,gg),e(gg,Hoe),e(Hoe,RUe),e(gg,BUe),e(gg,cS),e(cS,PUe),e(gg,IUe),e(y,qUe),e(y,hg),e(hg,Uoe),e(Uoe,NUe),e(hg,jUe),e(hg,fS),e(fS,DUe),e(hg,GUe),e(Er,OUe),M(pg,Er,null),e(Co,VUe),e(Co,ug),M(Z0,ug,null),e(ug,XUe),e(ug,Joe),e(Joe,zUe),b(f,$Pe,_),b(f,_i,_),e(_i,_g),e(_g,Yoe),M(ey,Yoe,null),e(_i,QUe),e(_i,Koe),e(Koe,WUe),b(f,kPe,_),b(f,wo,_),M(oy,wo,null),e(wo,HUe),e(wo,ry),e(ry,UUe),e(ry,mS),e(mS,JUe),e(ry,YUe),e(wo,KUe),e(wo,ty),e(ty,ZUe),e(ty,Zoe),e(Zoe,eJe),e(ty,oJe),e(wo,rJe),e(wo,Cr),M(ay,Cr,null),e(Cr,tJe),e(Cr,ere),e(ere,aJe),e(Cr,nJe),e(Cr,Ca),e(Ca,sJe),e(Ca,ore),e(ore,lJe),e(Ca,iJe),e(Ca,rre),e(rre,dJe),e(Ca,cJe),e(Ca,tre),e(tre,fJe),e(Ca,mJe),e(Cr,gJe),e(Cr,k),e(k,kn),e(kn,are),e(are,hJe),e(kn,pJe),e(kn,gS),e(gS,uJe),e(kn,_Je),e(kn,hS),e(hS,bJe),e(kn,vJe),e(k,FJe),e(k,Sn),e(Sn,nre),e(nre,TJe),e(Sn,MJe),e(Sn,pS),e(pS,EJe),e(Sn,CJe),e(Sn,uS),e(uS,wJe),e(Sn,AJe),e(k,yJe),e(k,Rn),e(Rn,sre),e(sre,LJe),e(Rn,xJe),e(Rn,_S),e(_S,$Je),e(Rn,kJe),e(Rn,bS),e(bS,SJe),e(Rn,RJe),e(k,BJe),e(k,bg),e(bg,lre),e(lre,PJe),e(bg,IJe),e(bg,vS),e(vS,qJe),e(bg,NJe),e(k,jJe),e(k,Bn),e(Bn,ire),e(ire,DJe),e(Bn,GJe),e(Bn,FS),e(FS,OJe),e(Bn,VJe),e(Bn,TS),e(TS,XJe),e(Bn,zJe),e(k,QJe),e(k,vg),e(vg,dre),e(dre,WJe),e(vg,HJe),e(vg,MS),e(MS,UJe),e(vg,JJe),e(k,YJe),e(k,Fg),e(Fg,cre),e(cre,KJe),e(Fg,ZJe),e(Fg,ES),e(ES,eYe),e(Fg,oYe),e(k,rYe),e(k,Tg),e(Tg,fre),e(fre,tYe),e(Tg,aYe),e(Tg,CS),e(CS,nYe),e(Tg,sYe),e(k,lYe),e(k,Pn),e(Pn,mre),e(mre,iYe),e(Pn,dYe),e(Pn,wS),e(wS,cYe),e(Pn,fYe),e(Pn,AS),e(AS,mYe),e(Pn,gYe),e(k,hYe),e(k,In),e(In,gre),e(gre,pYe),e(In,uYe),e(In,yS),e(yS,_Ye),e(In,bYe),e(In,LS),e(LS,vYe),e(In,FYe),e(k,TYe),e(k,qn),e(qn,hre),e(hre,MYe),e(qn,EYe),e(qn,xS),e(xS,CYe),e(qn,wYe),e(qn,$S),e($S,AYe),e(qn,yYe),e(k,LYe),e(k,Mg),e(Mg,pre),e(pre,xYe),e(Mg,$Ye),e(Mg,kS),e(kS,kYe),e(Mg,SYe),e(k,RYe),e(k,Eg),e(Eg,ure),e(ure,BYe),e(Eg,PYe),e(Eg,SS),e(SS,IYe),e(Eg,qYe),e(k,NYe),e(k,Nn),e(Nn,_re),e(_re,jYe),e(Nn,DYe),e(Nn,RS),e(RS,GYe),e(Nn,OYe),e(Nn,BS),e(BS,VYe),e(Nn,XYe),e(k,zYe),e(k,Cg),e(Cg,bre),e(bre,QYe),e(Cg,WYe),e(Cg,PS),e(PS,HYe),e(Cg,UYe),e(k,JYe),e(k,jn),e(jn,vre),e(vre,YYe),e(jn,KYe),e(jn,IS),e(IS,ZYe),e(jn,eKe),e(jn,qS),e(qS,oKe),e(jn,rKe),e(k,tKe),e(k,Dn),e(Dn,Fre),e(Fre,aKe),e(Dn,nKe),e(Dn,NS),e(NS,sKe),e(Dn,lKe),e(Dn,jS),e(jS,iKe),e(Dn,dKe),e(k,cKe),e(k,Gn),e(Gn,Tre),e(Tre,fKe),e(Gn,mKe),e(Gn,DS),e(DS,gKe),e(Gn,hKe),e(Gn,GS),e(GS,pKe),e(Gn,uKe),e(k,_Ke),e(k,wg),e(wg,Mre),e(Mre,bKe),e(wg,vKe),e(wg,OS),e(OS,FKe),e(wg,TKe),e(k,MKe),e(k,On),e(On,Ere),e(Ere,EKe),e(On,CKe),e(On,VS),e(VS,wKe),e(On,AKe),e(On,XS),e(XS,yKe),e(On,LKe),e(k,xKe),e(k,Vn),e(Vn,Cre),e(Cre,$Ke),e(Vn,kKe),e(Vn,zS),e(zS,SKe),e(Vn,RKe),e(Vn,QS),e(QS,BKe),e(Vn,PKe),e(k,IKe),e(k,Xn),e(Xn,wre),e(wre,qKe),e(Xn,NKe),e(Xn,WS),e(WS,jKe),e(Xn,DKe),e(Xn,HS),e(HS,GKe),e(Xn,OKe),e(k,VKe),e(k,zn),e(zn,Are),e(Are,XKe),e(zn,zKe),e(zn,US),e(US,QKe),e(zn,WKe),e(zn,JS),e(JS,HKe),e(zn,UKe),e(k,JKe),e(k,Qn),e(Qn,yre),e(yre,YKe),e(Qn,KKe),e(Qn,YS),e(YS,ZKe),e(Qn,eZe),e(Qn,KS),e(KS,oZe),e(Qn,rZe),e(k,tZe),e(k,Wn),e(Wn,Lre),e(Lre,aZe),e(Wn,nZe),e(Wn,ZS),e(ZS,sZe),e(Wn,lZe),e(Wn,eR),e(eR,iZe),e(Wn,dZe),e(k,cZe),e(k,Ag),e(Ag,xre),e(xre,fZe),e(Ag,mZe),e(Ag,oR),e(oR,gZe),e(Ag,hZe),e(k,pZe),e(k,Hn),e(Hn,$re),e($re,uZe),e(Hn,_Ze),e(Hn,rR),e(rR,bZe),e(Hn,vZe),e(Hn,tR),e(tR,FZe),e(Hn,TZe),e(k,MZe),e(k,yg),e(yg,kre),e(kre,EZe),e(yg,CZe),e(yg,aR),e(aR,wZe),e(yg,AZe),e(k,yZe),e(k,Un),e(Un,Sre),e(Sre,LZe),e(Un,xZe),e(Un,nR),e(nR,$Ze),e(Un,kZe),e(Un,sR),e(sR,SZe),e(Un,RZe),e(k,BZe),e(k,Jn),e(Jn,Rre),e(Rre,PZe),e(Jn,IZe),e(Jn,lR),e(lR,qZe),e(Jn,NZe),e(Jn,iR),e(iR,jZe),e(Jn,DZe),e(k,GZe),e(k,Yn),e(Yn,Bre),e(Bre,OZe),e(Yn,VZe),e(Yn,dR),e(dR,XZe),e(Yn,zZe),e(Yn,cR),e(cR,QZe),e(Yn,WZe),e(k,HZe),e(k,Kn),e(Kn,Pre),e(Pre,UZe),e(Kn,JZe),e(Kn,fR),e(fR,YZe),e(Kn,KZe),e(Kn,mR),e(mR,ZZe),e(Kn,eeo),e(k,oeo),e(k,Zn),e(Zn,Ire),e(Ire,reo),e(Zn,teo),e(Zn,gR),e(gR,aeo),e(Zn,neo),e(Zn,hR),e(hR,seo),e(Zn,leo),e(k,ieo),e(k,Lg),e(Lg,qre),e(qre,deo),e(Lg,ceo),e(Lg,pR),e(pR,feo),e(Lg,meo),e(k,geo),e(k,es),e(es,Nre),e(Nre,heo),e(es,peo),e(es,uR),e(uR,ueo),e(es,_eo),e(es,_R),e(_R,beo),e(es,veo),e(k,Feo),e(k,os),e(os,jre),e(jre,Teo),e(os,Meo),e(os,bR),e(bR,Eeo),e(os,Ceo),e(os,vR),e(vR,weo),e(os,Aeo),e(k,yeo),e(k,rs),e(rs,Dre),e(Dre,Leo),e(rs,xeo),e(rs,FR),e(FR,$eo),e(rs,keo),e(rs,TR),e(TR,Seo),e(rs,Reo),e(k,Beo),e(k,ts),e(ts,Gre),e(Gre,Peo),e(ts,Ieo),e(ts,MR),e(MR,qeo),e(ts,Neo),e(ts,ER),e(ER,jeo),e(ts,Deo),e(k,Geo),e(k,as),e(as,Ore),e(Ore,Oeo),e(as,Veo),e(as,CR),e(CR,Xeo),e(as,zeo),e(as,wR),e(wR,Qeo),e(as,Weo),e(k,Heo),e(k,ns),e(ns,Vre),e(Vre,Ueo),e(ns,Jeo),e(ns,AR),e(AR,Yeo),e(ns,Keo),e(ns,yR),e(yR,Zeo),e(ns,eoo),e(k,ooo),e(k,xg),e(xg,Xre),e(Xre,roo),e(xg,too),e(xg,LR),e(LR,aoo),e(xg,noo),e(k,soo),e(k,ss),e(ss,zre),e(zre,loo),e(ss,ioo),e(ss,xR),e(xR,doo),e(ss,coo),e(ss,$R),e($R,foo),e(ss,moo),e(k,goo),e(k,$g),e($g,Qre),e(Qre,hoo),e($g,poo),e($g,kR),e(kR,uoo),e($g,_oo),e(k,boo),e(k,kg),e(kg,Wre),e(Wre,voo),e(kg,Foo),e(kg,SR),e(SR,Too),e(kg,Moo),e(k,Eoo),e(k,ls),e(ls,Hre),e(Hre,Coo),e(ls,woo),e(ls,RR),e(RR,Aoo),e(ls,yoo),e(ls,BR),e(BR,Loo),e(ls,xoo),e(k,$oo),e(k,is),e(is,Ure),e(Ure,koo),e(is,Soo),e(is,PR),e(PR,Roo),e(is,Boo),e(is,IR),e(IR,Poo),e(is,Ioo),e(k,qoo),e(k,ds),e(ds,Jre),e(Jre,Noo),e(ds,joo),e(ds,qR),e(qR,Doo),e(ds,Goo),e(ds,NR),e(NR,Ooo),e(ds,Voo),e(k,Xoo),e(k,Sg),e(Sg,Yre),e(Yre,zoo),e(Sg,Qoo),e(Sg,jR),e(jR,Woo),e(Sg,Hoo),e(k,Uoo),e(k,cs),e(cs,Kre),e(Kre,Joo),e(cs,Yoo),e(cs,DR),e(DR,Koo),e(cs,Zoo),e(cs,GR),e(GR,ero),e(cs,oro),e(k,rro),e(k,fs),e(fs,Zre),e(Zre,tro),e(fs,aro),e(fs,OR),e(OR,nro),e(fs,sro),e(fs,VR),e(VR,lro),e(fs,iro),e(k,dro),e(k,ms),e(ms,ete),e(ete,cro),e(ms,fro),e(ms,XR),e(XR,mro),e(ms,gro),e(ms,zR),e(zR,hro),e(ms,pro),e(k,uro),e(k,gs),e(gs,ote),e(ote,_ro),e(gs,bro),e(gs,QR),e(QR,vro),e(gs,Fro),e(gs,WR),e(WR,Tro),e(gs,Mro),e(k,Ero),e(k,hs),e(hs,rte),e(rte,Cro),e(hs,wro),e(hs,HR),e(HR,Aro),e(hs,yro),e(hs,UR),e(UR,Lro),e(hs,xro),e(k,$ro),e(k,ps),e(ps,tte),e(tte,kro),e(ps,Sro),e(ps,JR),e(JR,Rro),e(ps,Bro),e(ps,YR),e(YR,Pro),e(ps,Iro),e(k,qro),e(k,Rg),e(Rg,ate),e(ate,Nro),e(Rg,jro),e(Rg,KR),e(KR,Dro),e(Rg,Gro),e(k,Oro),e(k,Bg),e(Bg,nte),e(nte,Vro),e(Bg,Xro),e(Bg,ZR),e(ZR,zro),e(Bg,Qro),e(k,Wro),e(k,Pg),e(Pg,ste),e(ste,Hro),e(Pg,Uro),e(Pg,eB),e(eB,Jro),e(Pg,Yro),e(k,Kro),e(k,Ig),e(Ig,lte),e(lte,Zro),e(Ig,eto),e(Ig,oB),e(oB,oto),e(Ig,rto),e(k,tto),e(k,us),e(us,ite),e(ite,ato),e(us,nto),e(us,rB),e(rB,sto),e(us,lto),e(us,tB),e(tB,ito),e(us,dto),e(k,cto),e(k,qg),e(qg,dte),e(dte,fto),e(qg,mto),e(qg,aB),e(aB,gto),e(qg,hto),e(k,pto),e(k,_s),e(_s,cte),e(cte,uto),e(_s,_to),e(_s,nB),e(nB,bto),e(_s,vto),e(_s,sB),e(sB,Fto),e(_s,Tto),e(k,Mto),e(k,bs),e(bs,fte),e(fte,Eto),e(bs,Cto),e(bs,lB),e(lB,wto),e(bs,Ato),e(bs,iB),e(iB,yto),e(bs,Lto),e(k,xto),e(k,vs),e(vs,mte),e(mte,$to),e(vs,kto),e(vs,dB),e(dB,Sto),e(vs,Rto),e(vs,cB),e(cB,Bto),e(vs,Pto),e(k,Ito),e(k,Fs),e(Fs,gte),e(gte,qto),e(Fs,Nto),e(Fs,fB),e(fB,jto),e(Fs,Dto),e(Fs,mB),e(mB,Gto),e(Fs,Oto),e(k,Vto),e(k,Ts),e(Ts,hte),e(hte,Xto),e(Ts,zto),e(Ts,gB),e(gB,Qto),e(Ts,Wto),e(Ts,hB),e(hB,Hto),e(Ts,Uto),e(k,Jto),e(k,Ms),e(Ms,pte),e(pte,Yto),e(Ms,Kto),e(Ms,pB),e(pB,Zto),e(Ms,eao),e(Ms,uB),e(uB,oao),e(Ms,rao),e(k,tao),e(k,Ng),e(Ng,ute),e(ute,aao),e(Ng,nao),e(Ng,_B),e(_B,sao),e(Ng,lao),e(k,iao),e(k,jg),e(jg,_te),e(_te,dao),e(jg,cao),e(jg,bB),e(bB,fao),e(jg,mao),e(k,gao),e(k,Es),e(Es,bte),e(bte,hao),e(Es,pao),e(Es,vB),e(vB,uao),e(Es,_ao),e(Es,FB),e(FB,bao),e(Es,vao),e(k,Fao),e(k,Cs),e(Cs,vte),e(vte,Tao),e(Cs,Mao),e(Cs,TB),e(TB,Eao),e(Cs,Cao),e(Cs,MB),e(MB,wao),e(Cs,Aao),e(k,yao),e(k,ws),e(ws,Fte),e(Fte,Lao),e(ws,xao),e(ws,EB),e(EB,$ao),e(ws,kao),e(ws,CB),e(CB,Sao),e(ws,Rao),e(k,Bao),e(k,Dg),e(Dg,Tte),e(Tte,Pao),e(Dg,Iao),e(Dg,wB),e(wB,qao),e(Dg,Nao),e(k,jao),e(k,Gg),e(Gg,Mte),e(Mte,Dao),e(Gg,Gao),e(Gg,AB),e(AB,Oao),e(Gg,Vao),e(k,Xao),e(k,Og),e(Og,Ete),e(Ete,zao),e(Og,Qao),e(Og,yB),e(yB,Wao),e(Og,Hao),e(k,Uao),e(k,As),e(As,Cte),e(Cte,Jao),e(As,Yao),e(As,LB),e(LB,Kao),e(As,Zao),e(As,xB),e(xB,eno),e(As,ono),e(k,rno),e(k,Vg),e(Vg,wte),e(wte,tno),e(Vg,ano),e(Vg,$B),e($B,nno),e(Vg,sno),e(k,lno),e(k,Xg),e(Xg,Ate),e(Ate,ino),e(Xg,dno),e(Xg,kB),e(kB,cno),e(Xg,fno),e(k,mno),e(k,ys),e(ys,yte),e(yte,gno),e(ys,hno),e(ys,SB),e(SB,pno),e(ys,uno),e(ys,RB),e(RB,_no),e(ys,bno),e(k,vno),e(k,zg),e(zg,Lte),e(Lte,Fno),e(zg,Tno),e(zg,BB),e(BB,Mno),e(zg,Eno),e(k,Cno),e(k,Qg),e(Qg,xte),e(xte,wno),e(Qg,Ano),e(Qg,PB),e(PB,yno),e(Qg,Lno),e(k,xno),e(k,Ls),e(Ls,$te),e($te,$no),e(Ls,kno),e(Ls,IB),e(IB,Sno),e(Ls,Rno),e(Ls,qB),e(qB,Bno),e(Ls,Pno),e(k,Ino),e(k,xs),e(xs,kte),e(kte,qno),e(xs,Nno),e(xs,NB),e(NB,jno),e(xs,Dno),e(xs,jB),e(jB,Gno),e(xs,Ono),e(k,Vno),e(k,$s),e($s,Ste),e(Ste,Xno),e($s,zno),e($s,DB),e(DB,Qno),e($s,Wno),e($s,GB),e(GB,Hno),e($s,Uno),e(k,Jno),e(k,ks),e(ks,Rte),e(Rte,Yno),e(ks,Kno),e(ks,OB),e(OB,Zno),e(ks,eso),e(ks,VB),e(VB,oso),e(ks,rso),e(Cr,tso),M(Wg,Cr,null),e(wo,aso),e(wo,Hg),M(ny,Hg,null),e(Hg,nso),e(Hg,Bte),e(Bte,sso),b(f,SPe,_),b(f,bi,_),e(bi,Ug),e(Ug,Pte),M(sy,Pte,null),e(bi,lso),e(bi,Ite),e(Ite,iso),b(f,RPe,_),b(f,Ao,_),M(ly,Ao,null),e(Ao,dso),e(Ao,iy),e(iy,cso),e(iy,XB),e(XB,fso),e(iy,mso),e(Ao,gso),e(Ao,dy),e(dy,hso),e(dy,qte),e(qte,pso),e(dy,uso),e(Ao,_so),e(Ao,Qe),M(cy,Qe,null),e(Qe,bso),e(Qe,Nte),e(Nte,vso),e(Qe,Fso),e(Qe,wa),e(wa,Tso),e(wa,jte),e(jte,Mso),e(wa,Eso),e(wa,Dte),e(Dte,Cso),e(wa,wso),e(wa,Gte),e(Gte,Aso),e(wa,yso),e(Qe,Lso),e(Qe,oe),e(oe,Jg),e(Jg,Ote),e(Ote,xso),e(Jg,$so),e(Jg,zB),e(zB,kso),e(Jg,Sso),e(oe,Rso),e(oe,Yg),e(Yg,Vte),e(Vte,Bso),e(Yg,Pso),e(Yg,QB),e(QB,Iso),e(Yg,qso),e(oe,Nso),e(oe,Kg),e(Kg,Xte),e(Xte,jso),e(Kg,Dso),e(Kg,WB),e(WB,Gso),e(Kg,Oso),e(oe,Vso),e(oe,Zg),e(Zg,zte),e(zte,Xso),e(Zg,zso),e(Zg,HB),e(HB,Qso),e(Zg,Wso),e(oe,Hso),e(oe,eh),e(eh,Qte),e(Qte,Uso),e(eh,Jso),e(eh,UB),e(UB,Yso),e(eh,Kso),e(oe,Zso),e(oe,oh),e(oh,Wte),e(Wte,elo),e(oh,olo),e(oh,JB),e(JB,rlo),e(oh,tlo),e(oe,alo),e(oe,rh),e(rh,Hte),e(Hte,nlo),e(rh,slo),e(rh,YB),e(YB,llo),e(rh,ilo),e(oe,dlo),e(oe,th),e(th,Ute),e(Ute,clo),e(th,flo),e(th,KB),e(KB,mlo),e(th,glo),e(oe,hlo),e(oe,ah),e(ah,Jte),e(Jte,plo),e(ah,ulo),e(ah,ZB),e(ZB,_lo),e(ah,blo),e(oe,vlo),e(oe,nh),e(nh,Yte),e(Yte,Flo),e(nh,Tlo),e(nh,eP),e(eP,Mlo),e(nh,Elo),e(oe,Clo),e(oe,sh),e(sh,Kte),e(Kte,wlo),e(sh,Alo),e(sh,oP),e(oP,ylo),e(sh,Llo),e(oe,xlo),e(oe,lh),e(lh,Zte),e(Zte,$lo),e(lh,klo),e(lh,rP),e(rP,Slo),e(lh,Rlo),e(oe,Blo),e(oe,ih),e(ih,eae),e(eae,Plo),e(ih,Ilo),e(ih,tP),e(tP,qlo),e(ih,Nlo),e(oe,jlo),e(oe,dh),e(dh,oae),e(oae,Dlo),e(dh,Glo),e(dh,aP),e(aP,Olo),e(dh,Vlo),e(oe,Xlo),e(oe,ch),e(ch,rae),e(rae,zlo),e(ch,Qlo),e(ch,nP),e(nP,Wlo),e(ch,Hlo),e(oe,Ulo),e(oe,fh),e(fh,tae),e(tae,Jlo),e(fh,Ylo),e(fh,sP),e(sP,Klo),e(fh,Zlo),e(oe,eio),e(oe,mh),e(mh,aae),e(aae,oio),e(mh,rio),e(mh,lP),e(lP,tio),e(mh,aio),e(oe,nio),e(oe,gh),e(gh,nae),e(nae,sio),e(gh,lio),e(gh,iP),e(iP,iio),e(gh,dio),e(oe,cio),e(oe,hh),e(hh,sae),e(sae,fio),e(hh,mio),e(hh,dP),e(dP,gio),e(hh,hio),e(oe,pio),e(oe,ph),e(ph,lae),e(lae,uio),e(ph,_io),e(ph,cP),e(cP,bio),e(ph,vio),e(oe,Fio),e(oe,uh),e(uh,iae),e(iae,Tio),e(uh,Mio),e(uh,fP),e(fP,Eio),e(uh,Cio),e(oe,wio),e(oe,_h),e(_h,dae),e(dae,Aio),e(_h,yio),e(_h,mP),e(mP,Lio),e(_h,xio),e(oe,$io),e(oe,bh),e(bh,cae),e(cae,kio),e(bh,Sio),e(bh,gP),e(gP,Rio),e(bh,Bio),e(oe,Pio),e(oe,vh),e(vh,fae),e(fae,Iio),e(vh,qio),e(vh,hP),e(hP,Nio),e(vh,jio),e(oe,Dio),e(oe,Fh),e(Fh,mae),e(mae,Gio),e(Fh,Oio),e(Fh,pP),e(pP,Vio),e(Fh,Xio),e(Qe,zio),M(Th,Qe,null),e(Qe,Qio),M(Mh,Qe,null),e(Ao,Wio),e(Ao,Eh),M(fy,Eh,null),e(Eh,Hio),e(Eh,gae),e(gae,Uio),b(f,BPe,_),b(f,vi,_),e(vi,Ch),e(Ch,hae),M(my,hae,null),e(vi,Jio),e(vi,pae),e(pae,Yio),b(f,PPe,_),b(f,yo,_),M(gy,yo,null),e(yo,Kio),e(yo,hy),e(hy,Zio),e(hy,uP),e(uP,edo),e(hy,odo),e(yo,rdo),e(yo,py),e(py,tdo),e(py,uae),e(uae,ado),e(py,ndo),e(yo,sdo),e(yo,We),M(uy,We,null),e(We,ldo),e(We,_ae),e(_ae,ido),e(We,ddo),e(We,Fi),e(Fi,cdo),e(Fi,bae),e(bae,fdo),e(Fi,mdo),e(Fi,vae),e(vae,gdo),e(Fi,hdo),e(We,pdo),e(We,be),e(be,wh),e(wh,Fae),e(Fae,udo),e(wh,_do),e(wh,_P),e(_P,bdo),e(wh,vdo),e(be,Fdo),e(be,Ah),e(Ah,Tae),e(Tae,Tdo),e(Ah,Mdo),e(Ah,Mae),e(Mae,Edo),e(Ah,Cdo),e(be,wdo),e(be,yh),e(yh,Eae),e(Eae,Ado),e(yh,ydo),e(yh,bP),e(bP,Ldo),e(yh,xdo),e(be,$do),e(be,Lh),e(Lh,Cae),e(Cae,kdo),e(Lh,Sdo),e(Lh,vP),e(vP,Rdo),e(Lh,Bdo),e(be,Pdo),e(be,xh),e(xh,wae),e(wae,Ido),e(xh,qdo),e(xh,FP),e(FP,Ndo),e(xh,jdo),e(be,Ddo),e(be,$h),e($h,Aae),e(Aae,Gdo),e($h,Odo),e($h,TP),e(TP,Vdo),e($h,Xdo),e(be,zdo),e(be,kh),e(kh,yae),e(yae,Qdo),e(kh,Wdo),e(kh,MP),e(MP,Hdo),e(kh,Udo),e(be,Jdo),e(be,Sh),e(Sh,Lae),e(Lae,Ydo),e(Sh,Kdo),e(Sh,EP),e(EP,Zdo),e(Sh,eco),e(be,oco),e(be,Rh),e(Rh,xae),e(xae,rco),e(Rh,tco),e(Rh,CP),e(CP,aco),e(Rh,nco),e(be,sco),e(be,Bh),e(Bh,$ae),e($ae,lco),e(Bh,ico),e(Bh,wP),e(wP,dco),e(Bh,cco),e(be,fco),e(be,Ph),e(Ph,kae),e(kae,mco),e(Ph,gco),e(Ph,AP),e(AP,hco),e(Ph,pco),e(be,uco),e(be,Ih),e(Ih,Sae),e(Sae,_co),e(Ih,bco),e(Ih,yP),e(yP,vco),e(Ih,Fco),e(be,Tco),e(be,qh),e(qh,Rae),e(Rae,Mco),e(qh,Eco),e(qh,LP),e(LP,Cco),e(qh,wco),e(be,Aco),e(be,Nh),e(Nh,Bae),e(Bae,yco),e(Nh,Lco),e(Nh,xP),e(xP,xco),e(Nh,$co),e(be,kco),e(be,jh),e(jh,Pae),e(Pae,Sco),e(jh,Rco),e(jh,$P),e($P,Bco),e(jh,Pco),e(We,Ico),M(Dh,We,null),e(We,qco),M(Gh,We,null),e(yo,Nco),e(yo,Oh),M(_y,Oh,null),e(Oh,jco),e(Oh,Iae),e(Iae,Dco),b(f,IPe,_),b(f,Ti,_),e(Ti,Vh),e(Vh,qae),M(by,qae,null),e(Ti,Gco),e(Ti,Nae),e(Nae,Oco),b(f,qPe,_),b(f,Lo,_),M(vy,Lo,null),e(Lo,Vco),e(Lo,Mi),e(Mi,Xco),e(Mi,kP),e(kP,zco),e(Mi,Qco),e(Mi,SP),e(SP,Wco),e(Mi,Hco),e(Lo,Uco),e(Lo,Fy),e(Fy,Jco),e(Fy,jae),e(jae,Yco),e(Fy,Kco),e(Lo,Zco),e(Lo,ot),M(Ty,ot,null),e(ot,efo),e(ot,Dae),e(Dae,ofo),e(ot,rfo),e(ot,Ei),e(Ei,tfo),e(Ei,Gae),e(Gae,afo),e(Ei,nfo),e(Ei,RP),e(RP,sfo),e(Ei,lfo),e(ot,ifo),M(Xh,ot,null),e(Lo,dfo),e(Lo,He),M(My,He,null),e(He,cfo),e(He,Oae),e(Oae,ffo),e(He,mfo),e(He,Aa),e(Aa,gfo),e(Aa,Vae),e(Vae,hfo),e(Aa,pfo),e(Aa,Xae),e(Xae,ufo),e(Aa,_fo),e(Aa,zae),e(zae,bfo),e(Aa,vfo),e(He,Ffo),e(He,x),e(x,zh),e(zh,Qae),e(Qae,Tfo),e(zh,Mfo),e(zh,BP),e(BP,Efo),e(zh,Cfo),e(x,wfo),e(x,Qh),e(Qh,Wae),e(Wae,Afo),e(Qh,yfo),e(Qh,PP),e(PP,Lfo),e(Qh,xfo),e(x,$fo),e(x,Wh),e(Wh,Hae),e(Hae,kfo),e(Wh,Sfo),e(Wh,IP),e(IP,Rfo),e(Wh,Bfo),e(x,Pfo),e(x,Hh),e(Hh,Uae),e(Uae,Ifo),e(Hh,qfo),e(Hh,qP),e(qP,Nfo),e(Hh,jfo),e(x,Dfo),e(x,Uh),e(Uh,Jae),e(Jae,Gfo),e(Uh,Ofo),e(Uh,NP),e(NP,Vfo),e(Uh,Xfo),e(x,zfo),e(x,Jh),e(Jh,Yae),e(Yae,Qfo),e(Jh,Wfo),e(Jh,jP),e(jP,Hfo),e(Jh,Ufo),e(x,Jfo),e(x,Yh),e(Yh,Kae),e(Kae,Yfo),e(Yh,Kfo),e(Yh,DP),e(DP,Zfo),e(Yh,emo),e(x,omo),e(x,Kh),e(Kh,Zae),e(Zae,rmo),e(Kh,tmo),e(Kh,GP),e(GP,amo),e(Kh,nmo),e(x,smo),e(x,Zh),e(Zh,ene),e(ene,lmo),e(Zh,imo),e(Zh,OP),e(OP,dmo),e(Zh,cmo),e(x,fmo),e(x,ep),e(ep,one),e(one,mmo),e(ep,gmo),e(ep,VP),e(VP,hmo),e(ep,pmo),e(x,umo),e(x,op),e(op,rne),e(rne,_mo),e(op,bmo),e(op,XP),e(XP,vmo),e(op,Fmo),e(x,Tmo),e(x,rp),e(rp,tne),e(tne,Mmo),e(rp,Emo),e(rp,zP),e(zP,Cmo),e(rp,wmo),e(x,Amo),e(x,tp),e(tp,ane),e(ane,ymo),e(tp,Lmo),e(tp,QP),e(QP,xmo),e(tp,$mo),e(x,kmo),e(x,ap),e(ap,nne),e(nne,Smo),e(ap,Rmo),e(ap,WP),e(WP,Bmo),e(ap,Pmo),e(x,Imo),e(x,np),e(np,sne),e(sne,qmo),e(np,Nmo),e(np,HP),e(HP,jmo),e(np,Dmo),e(x,Gmo),e(x,sp),e(sp,lne),e(lne,Omo),e(sp,Vmo),e(sp,UP),e(UP,Xmo),e(sp,zmo),e(x,Qmo),e(x,lp),e(lp,ine),e(ine,Wmo),e(lp,Hmo),e(lp,JP),e(JP,Umo),e(lp,Jmo),e(x,Ymo),e(x,ip),e(ip,dne),e(dne,Kmo),e(ip,Zmo),e(ip,YP),e(YP,ego),e(ip,ogo),e(x,rgo),e(x,dp),e(dp,cne),e(cne,tgo),e(dp,ago),e(dp,KP),e(KP,ngo),e(dp,sgo),e(x,lgo),e(x,cp),e(cp,fne),e(fne,igo),e(cp,dgo),e(cp,ZP),e(ZP,cgo),e(cp,fgo),e(x,mgo),e(x,fp),e(fp,mne),e(mne,ggo),e(fp,hgo),e(fp,eI),e(eI,pgo),e(fp,ugo),e(x,_go),e(x,mp),e(mp,gne),e(gne,bgo),e(mp,vgo),e(mp,oI),e(oI,Fgo),e(mp,Tgo),e(x,Mgo),e(x,gp),e(gp,hne),e(hne,Ego),e(gp,Cgo),e(gp,rI),e(rI,wgo),e(gp,Ago),e(x,ygo),e(x,hp),e(hp,pne),e(pne,Lgo),e(hp,xgo),e(hp,tI),e(tI,$go),e(hp,kgo),e(x,Sgo),e(x,pp),e(pp,une),e(une,Rgo),e(pp,Bgo),e(pp,aI),e(aI,Pgo),e(pp,Igo),e(x,qgo),e(x,up),e(up,_ne),e(_ne,Ngo),e(up,jgo),e(up,nI),e(nI,Dgo),e(up,Ggo),e(x,Ogo),e(x,_p),e(_p,bne),e(bne,Vgo),e(_p,Xgo),e(_p,sI),e(sI,zgo),e(_p,Qgo),e(x,Wgo),e(x,bp),e(bp,vne),e(vne,Hgo),e(bp,Ugo),e(bp,lI),e(lI,Jgo),e(bp,Ygo),e(x,Kgo),e(x,vp),e(vp,Fne),e(Fne,Zgo),e(vp,eho),e(vp,iI),e(iI,oho),e(vp,rho),e(x,tho),e(x,Fp),e(Fp,Tne),e(Tne,aho),e(Fp,nho),e(Fp,dI),e(dI,sho),e(Fp,lho),e(x,iho),e(x,Tp),e(Tp,Mne),e(Mne,dho),e(Tp,cho),e(Tp,cI),e(cI,fho),e(Tp,mho),e(x,gho),e(x,Ss),e(Ss,Ene),e(Ene,hho),e(Ss,pho),e(Ss,fI),e(fI,uho),e(Ss,_ho),e(Ss,mI),e(mI,bho),e(Ss,vho),e(x,Fho),e(x,Mp),e(Mp,Cne),e(Cne,Tho),e(Mp,Mho),e(Mp,gI),e(gI,Eho),e(Mp,Cho),e(x,who),e(x,Ep),e(Ep,wne),e(wne,Aho),e(Ep,yho),e(Ep,hI),e(hI,Lho),e(Ep,xho),e(x,$ho),e(x,Cp),e(Cp,Ane),e(Ane,kho),e(Cp,Sho),e(Cp,pI),e(pI,Rho),e(Cp,Bho),e(x,Pho),e(x,wp),e(wp,yne),e(yne,Iho),e(wp,qho),e(wp,uI),e(uI,Nho),e(wp,jho),e(x,Dho),e(x,Ap),e(Ap,Lne),e(Lne,Gho),e(Ap,Oho),e(Ap,_I),e(_I,Vho),e(Ap,Xho),e(x,zho),e(x,yp),e(yp,xne),e(xne,Qho),e(yp,Who),e(yp,bI),e(bI,Hho),e(yp,Uho),e(x,Jho),e(x,Lp),e(Lp,$ne),e($ne,Yho),e(Lp,Kho),e(Lp,vI),e(vI,Zho),e(Lp,epo),e(x,opo),e(x,xp),e(xp,kne),e(kne,rpo),e(xp,tpo),e(xp,FI),e(FI,apo),e(xp,npo),e(x,spo),e(x,$p),e($p,Sne),e(Sne,lpo),e($p,ipo),e($p,TI),e(TI,dpo),e($p,cpo),e(x,fpo),e(x,kp),e(kp,Rne),e(Rne,mpo),e(kp,gpo),e(kp,MI),e(MI,hpo),e(kp,ppo),e(x,upo),e(x,Sp),e(Sp,Bne),e(Bne,_po),e(Sp,bpo),e(Sp,EI),e(EI,vpo),e(Sp,Fpo),e(x,Tpo),e(x,Rp),e(Rp,Pne),e(Pne,Mpo),e(Rp,Epo),e(Rp,CI),e(CI,Cpo),e(Rp,wpo),e(x,Apo),e(x,Bp),e(Bp,Ine),e(Ine,ypo),e(Bp,Lpo),e(Bp,wI),e(wI,xpo),e(Bp,$po),e(x,kpo),e(x,Pp),e(Pp,qne),e(qne,Spo),e(Pp,Rpo),e(Pp,AI),e(AI,Bpo),e(Pp,Ppo),e(x,Ipo),e(x,Ip),e(Ip,Nne),e(Nne,qpo),e(Ip,Npo),e(Ip,yI),e(yI,jpo),e(Ip,Dpo),e(x,Gpo),e(x,qp),e(qp,jne),e(jne,Opo),e(qp,Vpo),e(qp,LI),e(LI,Xpo),e(qp,zpo),e(x,Qpo),e(x,Np),e(Np,Dne),e(Dne,Wpo),e(Np,Hpo),e(Np,xI),e(xI,Upo),e(Np,Jpo),e(x,Ypo),e(x,jp),e(jp,Gne),e(Gne,Kpo),e(jp,Zpo),e(jp,$I),e($I,euo),e(jp,ouo),e(x,ruo),e(x,Dp),e(Dp,One),e(One,tuo),e(Dp,auo),e(Dp,kI),e(kI,nuo),e(Dp,suo),e(x,luo),e(x,Gp),e(Gp,Vne),e(Vne,iuo),e(Gp,duo),e(Gp,SI),e(SI,cuo),e(Gp,fuo),e(x,muo),e(x,Op),e(Op,Xne),e(Xne,guo),e(Op,huo),e(Op,RI),e(RI,puo),e(Op,uuo),e(x,_uo),e(x,Vp),e(Vp,zne),e(zne,buo),e(Vp,vuo),e(Vp,BI),e(BI,Fuo),e(Vp,Tuo),e(x,Muo),e(x,Xp),e(Xp,Qne),e(Qne,Euo),e(Xp,Cuo),e(Xp,PI),e(PI,wuo),e(Xp,Auo),e(x,yuo),e(x,zp),e(zp,Wne),e(Wne,Luo),e(zp,xuo),e(zp,II),e(II,$uo),e(zp,kuo),e(x,Suo),e(x,Qp),e(Qp,Hne),e(Hne,Ruo),e(Qp,Buo),e(Qp,qI),e(qI,Puo),e(Qp,Iuo),e(x,quo),e(x,Wp),e(Wp,Une),e(Une,Nuo),e(Wp,juo),e(Wp,NI),e(NI,Duo),e(Wp,Guo),e(x,Ouo),e(x,Hp),e(Hp,Jne),e(Jne,Vuo),e(Hp,Xuo),e(Hp,jI),e(jI,zuo),e(Hp,Quo),e(x,Wuo),e(x,Up),e(Up,Yne),e(Yne,Huo),e(Up,Uuo),e(Up,DI),e(DI,Juo),e(Up,Yuo),e(x,Kuo),e(x,Jp),e(Jp,Kne),e(Kne,Zuo),e(Jp,e_o),e(Jp,GI),e(GI,o_o),e(Jp,r_o),e(x,t_o),e(x,Yp),e(Yp,Zne),e(Zne,a_o),e(Yp,n_o),e(Yp,OI),e(OI,s_o),e(Yp,l_o),e(x,i_o),e(x,Kp),e(Kp,ese),e(ese,d_o),e(Kp,c_o),e(Kp,VI),e(VI,f_o),e(Kp,m_o),e(x,g_o),e(x,Zp),e(Zp,ose),e(ose,h_o),e(Zp,p_o),e(Zp,XI),e(XI,u_o),e(Zp,__o),e(x,b_o),e(x,eu),e(eu,rse),e(rse,v_o),e(eu,F_o),e(eu,zI),e(zI,T_o),e(eu,M_o),e(x,E_o),e(x,ou),e(ou,tse),e(tse,C_o),e(ou,w_o),e(ou,QI),e(QI,A_o),e(ou,y_o),e(x,L_o),e(x,ru),e(ru,ase),e(ase,x_o),e(ru,$_o),e(ru,WI),e(WI,k_o),e(ru,S_o),e(x,R_o),e(x,tu),e(tu,nse),e(nse,B_o),e(tu,P_o),e(tu,HI),e(HI,I_o),e(tu,q_o),e(x,N_o),e(x,au),e(au,sse),e(sse,j_o),e(au,D_o),e(au,UI),e(UI,G_o),e(au,O_o),e(x,V_o),e(x,nu),e(nu,lse),e(lse,X_o),e(nu,z_o),e(nu,JI),e(JI,Q_o),e(nu,W_o),e(x,H_o),e(x,su),e(su,ise),e(ise,U_o),e(su,J_o),e(su,YI),e(YI,Y_o),e(su,K_o),e(x,Z_o),e(x,lu),e(lu,dse),e(dse,e6o),e(lu,o6o),e(lu,KI),e(KI,r6o),e(lu,t6o),e(x,a6o),e(x,iu),e(iu,cse),e(cse,n6o),e(iu,s6o),e(iu,ZI),e(ZI,l6o),e(iu,i6o),e(x,d6o),e(x,du),e(du,fse),e(fse,c6o),e(du,f6o),e(du,eq),e(eq,m6o),e(du,g6o),e(x,h6o),e(x,cu),e(cu,mse),e(mse,p6o),e(cu,u6o),e(cu,oq),e(oq,_6o),e(cu,b6o),e(x,v6o),e(x,fu),e(fu,gse),e(gse,F6o),e(fu,T6o),e(fu,rq),e(rq,M6o),e(fu,E6o),e(x,C6o),e(x,mu),e(mu,hse),e(hse,w6o),e(mu,A6o),e(mu,tq),e(tq,y6o),e(mu,L6o),e(x,x6o),e(x,gu),e(gu,pse),e(pse,$6o),e(gu,k6o),e(gu,aq),e(aq,S6o),e(gu,R6o),e(x,B6o),e(x,hu),e(hu,use),e(use,P6o),e(hu,I6o),e(hu,nq),e(nq,q6o),e(hu,N6o),e(x,j6o),e(x,pu),e(pu,_se),e(_se,D6o),e(pu,G6o),e(pu,sq),e(sq,O6o),e(pu,V6o),e(x,X6o),e(x,uu),e(uu,bse),e(bse,z6o),e(uu,Q6o),e(uu,lq),e(lq,W6o),e(uu,H6o),e(x,U6o),e(x,_u),e(_u,vse),e(vse,J6o),e(_u,Y6o),e(_u,iq),e(iq,K6o),e(_u,Z6o),e(x,e1o),e(x,bu),e(bu,Fse),e(Fse,o1o),e(bu,r1o),e(bu,dq),e(dq,t1o),e(bu,a1o),e(x,n1o),e(x,vu),e(vu,Tse),e(Tse,s1o),e(vu,l1o),e(vu,cq),e(cq,i1o),e(vu,d1o),e(x,c1o),e(x,Fu),e(Fu,Mse),e(Mse,f1o),e(Fu,m1o),e(Fu,fq),e(fq,g1o),e(Fu,h1o),e(x,p1o),e(x,Tu),e(Tu,Ese),e(Ese,u1o),e(Tu,_1o),e(Tu,mq),e(mq,b1o),e(Tu,v1o),e(x,F1o),e(x,Mu),e(Mu,Cse),e(Cse,T1o),e(Mu,M1o),e(Mu,gq),e(gq,E1o),e(Mu,C1o),e(x,w1o),e(x,Eu),e(Eu,wse),e(wse,A1o),e(Eu,y1o),e(Eu,hq),e(hq,L1o),e(Eu,x1o),e(x,$1o),e(x,Cu),e(Cu,Ase),e(Ase,k1o),e(Cu,S1o),e(Cu,pq),e(pq,R1o),e(Cu,B1o),e(x,P1o),e(x,wu),e(wu,yse),e(yse,I1o),e(wu,q1o),e(wu,uq),e(uq,N1o),e(wu,j1o),e(x,D1o),e(x,Au),e(Au,Lse),e(Lse,G1o),e(Au,O1o),e(Au,_q),e(_q,V1o),e(Au,X1o),e(x,z1o),e(x,yu),e(yu,xse),e(xse,Q1o),e(yu,W1o),e(yu,bq),e(bq,H1o),e(yu,U1o),e(x,J1o),e(x,Lu),e(Lu,$se),e($se,Y1o),e(Lu,K1o),e(Lu,vq),e(vq,Z1o),e(Lu,ebo),e(x,obo),e(x,xu),e(xu,kse),e(kse,rbo),e(xu,tbo),e(xu,Fq),e(Fq,abo),e(xu,nbo),e(x,sbo),e(x,$u),e($u,Sse),e(Sse,lbo),e($u,ibo),e($u,Tq),e(Tq,dbo),e($u,cbo),e(x,fbo),e(x,ku),e(ku,Rse),e(Rse,mbo),e(ku,gbo),e(ku,Mq),e(Mq,hbo),e(ku,pbo),e(He,ubo),e(He,Su),e(Su,_bo),e(Su,Bse),e(Bse,bbo),e(Su,vbo),e(Su,Pse),e(Pse,Fbo),e(He,Tbo),M(Ru,He,null),b(f,NPe,_),b(f,Ci,_),e(Ci,Bu),e(Bu,Ise),M(Ey,Ise,null),e(Ci,Mbo),e(Ci,qse),e(qse,Ebo),b(f,jPe,_),b(f,xo,_),M(Cy,xo,null),e(xo,Cbo),e(xo,wi),e(wi,wbo),e(wi,Eq),e(Eq,Abo),e(wi,ybo),e(wi,Cq),e(Cq,Lbo),e(wi,xbo),e(xo,$bo),e(xo,wy),e(wy,kbo),e(wy,Nse),e(Nse,Sbo),e(wy,Rbo),e(xo,Bbo),e(xo,rt),M(Ay,rt,null),e(rt,Pbo),e(rt,jse),e(jse,Ibo),e(rt,qbo),e(rt,Ai),e(Ai,Nbo),e(Ai,Dse),e(Dse,jbo),e(Ai,Dbo),e(Ai,wq),e(wq,Gbo),e(Ai,Obo),e(rt,Vbo),M(Pu,rt,null),e(xo,Xbo),e(xo,Ue),M(yy,Ue,null),e(Ue,zbo),e(Ue,Gse),e(Gse,Qbo),e(Ue,Wbo),e(Ue,ya),e(ya,Hbo),e(ya,Ose),e(Ose,Ubo),e(ya,Jbo),e(ya,Vse),e(Vse,Ybo),e(ya,Kbo),e(ya,Xse),e(Xse,Zbo),e(ya,e4o),e(Ue,o4o),e(Ue,G),e(G,Iu),e(Iu,zse),e(zse,r4o),e(Iu,t4o),e(Iu,Aq),e(Aq,a4o),e(Iu,n4o),e(G,s4o),e(G,qu),e(qu,Qse),e(Qse,l4o),e(qu,i4o),e(qu,yq),e(yq,d4o),e(qu,c4o),e(G,f4o),e(G,Nu),e(Nu,Wse),e(Wse,m4o),e(Nu,g4o),e(Nu,Lq),e(Lq,h4o),e(Nu,p4o),e(G,u4o),e(G,ju),e(ju,Hse),e(Hse,_4o),e(ju,b4o),e(ju,xq),e(xq,v4o),e(ju,F4o),e(G,T4o),e(G,Du),e(Du,Use),e(Use,M4o),e(Du,E4o),e(Du,$q),e($q,C4o),e(Du,w4o),e(G,A4o),e(G,Gu),e(Gu,Jse),e(Jse,y4o),e(Gu,L4o),e(Gu,kq),e(kq,x4o),e(Gu,$4o),e(G,k4o),e(G,Ou),e(Ou,Yse),e(Yse,S4o),e(Ou,R4o),e(Ou,Sq),e(Sq,B4o),e(Ou,P4o),e(G,I4o),e(G,Vu),e(Vu,Kse),e(Kse,q4o),e(Vu,N4o),e(Vu,Rq),e(Rq,j4o),e(Vu,D4o),e(G,G4o),e(G,Xu),e(Xu,Zse),e(Zse,O4o),e(Xu,V4o),e(Xu,Bq),e(Bq,X4o),e(Xu,z4o),e(G,Q4o),e(G,zu),e(zu,ele),e(ele,W4o),e(zu,H4o),e(zu,Pq),e(Pq,U4o),e(zu,J4o),e(G,Y4o),e(G,Qu),e(Qu,ole),e(ole,K4o),e(Qu,Z4o),e(Qu,Iq),e(Iq,e2o),e(Qu,o2o),e(G,r2o),e(G,Wu),e(Wu,rle),e(rle,t2o),e(Wu,a2o),e(Wu,qq),e(qq,n2o),e(Wu,s2o),e(G,l2o),e(G,Hu),e(Hu,tle),e(tle,i2o),e(Hu,d2o),e(Hu,Nq),e(Nq,c2o),e(Hu,f2o),e(G,m2o),e(G,Uu),e(Uu,ale),e(ale,g2o),e(Uu,h2o),e(Uu,jq),e(jq,p2o),e(Uu,u2o),e(G,_2o),e(G,Ju),e(Ju,nle),e(nle,b2o),e(Ju,v2o),e(Ju,Dq),e(Dq,F2o),e(Ju,T2o),e(G,M2o),e(G,Yu),e(Yu,sle),e(sle,E2o),e(Yu,C2o),e(Yu,Gq),e(Gq,w2o),e(Yu,A2o),e(G,y2o),e(G,Ku),e(Ku,lle),e(lle,L2o),e(Ku,x2o),e(Ku,Oq),e(Oq,$2o),e(Ku,k2o),e(G,S2o),e(G,Zu),e(Zu,ile),e(ile,R2o),e(Zu,B2o),e(Zu,Vq),e(Vq,P2o),e(Zu,I2o),e(G,q2o),e(G,e_),e(e_,dle),e(dle,N2o),e(e_,j2o),e(e_,Xq),e(Xq,D2o),e(e_,G2o),e(G,O2o),e(G,o_),e(o_,cle),e(cle,V2o),e(o_,X2o),e(o_,zq),e(zq,z2o),e(o_,Q2o),e(G,W2o),e(G,r_),e(r_,fle),e(fle,H2o),e(r_,U2o),e(r_,Qq),e(Qq,J2o),e(r_,Y2o),e(G,K2o),e(G,t_),e(t_,mle),e(mle,Z2o),e(t_,e5o),e(t_,Wq),e(Wq,o5o),e(t_,r5o),e(G,t5o),e(G,a_),e(a_,gle),e(gle,a5o),e(a_,n5o),e(a_,Hq),e(Hq,s5o),e(a_,l5o),e(G,i5o),e(G,n_),e(n_,hle),e(hle,d5o),e(n_,c5o),e(n_,Uq),e(Uq,f5o),e(n_,m5o),e(G,g5o),e(G,s_),e(s_,ple),e(ple,h5o),e(s_,p5o),e(s_,Jq),e(Jq,u5o),e(s_,_5o),e(G,b5o),e(G,l_),e(l_,ule),e(ule,v5o),e(l_,F5o),e(l_,Yq),e(Yq,T5o),e(l_,M5o),e(G,E5o),e(G,i_),e(i_,_le),e(_le,C5o),e(i_,w5o),e(i_,Kq),e(Kq,A5o),e(i_,y5o),e(G,L5o),e(G,d_),e(d_,ble),e(ble,x5o),e(d_,$5o),e(d_,Zq),e(Zq,k5o),e(d_,S5o),e(G,R5o),e(G,c_),e(c_,vle),e(vle,B5o),e(c_,P5o),e(c_,eN),e(eN,I5o),e(c_,q5o),e(G,N5o),e(G,f_),e(f_,Fle),e(Fle,j5o),e(f_,D5o),e(f_,oN),e(oN,G5o),e(f_,O5o),e(G,V5o),e(G,m_),e(m_,Tle),e(Tle,X5o),e(m_,z5o),e(m_,rN),e(rN,Q5o),e(m_,W5o),e(G,H5o),e(G,g_),e(g_,Mle),e(Mle,U5o),e(g_,J5o),e(g_,tN),e(tN,Y5o),e(g_,K5o),e(G,Z5o),e(G,h_),e(h_,Ele),e(Ele,evo),e(h_,ovo),e(h_,aN),e(aN,rvo),e(h_,tvo),e(G,avo),e(G,p_),e(p_,Cle),e(Cle,nvo),e(p_,svo),e(p_,nN),e(nN,lvo),e(p_,ivo),e(G,dvo),e(G,u_),e(u_,wle),e(wle,cvo),e(u_,fvo),e(u_,sN),e(sN,mvo),e(u_,gvo),e(G,hvo),e(G,__),e(__,Ale),e(Ale,pvo),e(__,uvo),e(__,lN),e(lN,_vo),e(__,bvo),e(G,vvo),e(G,b_),e(b_,yle),e(yle,Fvo),e(b_,Tvo),e(b_,iN),e(iN,Mvo),e(b_,Evo),e(G,Cvo),e(G,v_),e(v_,Lle),e(Lle,wvo),e(v_,Avo),e(v_,dN),e(dN,yvo),e(v_,Lvo),e(G,xvo),e(G,F_),e(F_,xle),e(xle,$vo),e(F_,kvo),e(F_,cN),e(cN,Svo),e(F_,Rvo),e(G,Bvo),e(G,T_),e(T_,$le),e($le,Pvo),e(T_,Ivo),e(T_,fN),e(fN,qvo),e(T_,Nvo),e(Ue,jvo),e(Ue,M_),e(M_,Dvo),e(M_,kle),e(kle,Gvo),e(M_,Ovo),e(M_,Sle),e(Sle,Vvo),e(Ue,Xvo),M(E_,Ue,null),b(f,DPe,_),b(f,yi,_),e(yi,C_),e(C_,Rle),M(Ly,Rle,null),e(yi,zvo),e(yi,Ble),e(Ble,Qvo),b(f,GPe,_),b(f,$o,_),M(xy,$o,null),e($o,Wvo),e($o,Li),e(Li,Hvo),e(Li,mN),e(mN,Uvo),e(Li,Jvo),e(Li,gN),e(gN,Yvo),e(Li,Kvo),e($o,Zvo),e($o,$y),e($y,eFo),e($y,Ple),e(Ple,oFo),e($y,rFo),e($o,tFo),e($o,tt),M(ky,tt,null),e(tt,aFo),e(tt,Ile),e(Ile,nFo),e(tt,sFo),e(tt,xi),e(xi,lFo),e(xi,qle),e(qle,iFo),e(xi,dFo),e(xi,hN),e(hN,cFo),e(xi,fFo),e(tt,mFo),M(w_,tt,null),e($o,gFo),e($o,Je),M(Sy,Je,null),e(Je,hFo),e(Je,Nle),e(Nle,pFo),e(Je,uFo),e(Je,La),e(La,_Fo),e(La,jle),e(jle,bFo),e(La,vFo),e(La,Dle),e(Dle,FFo),e(La,TFo),e(La,Gle),e(Gle,MFo),e(La,EFo),e(Je,CFo),e(Je,z),e(z,A_),e(A_,Ole),e(Ole,wFo),e(A_,AFo),e(A_,pN),e(pN,yFo),e(A_,LFo),e(z,xFo),e(z,y_),e(y_,Vle),e(Vle,$Fo),e(y_,kFo),e(y_,uN),e(uN,SFo),e(y_,RFo),e(z,BFo),e(z,L_),e(L_,Xle),e(Xle,PFo),e(L_,IFo),e(L_,_N),e(_N,qFo),e(L_,NFo),e(z,jFo),e(z,x_),e(x_,zle),e(zle,DFo),e(x_,GFo),e(x_,bN),e(bN,OFo),e(x_,VFo),e(z,XFo),e(z,$_),e($_,Qle),e(Qle,zFo),e($_,QFo),e($_,vN),e(vN,WFo),e($_,HFo),e(z,UFo),e(z,k_),e(k_,Wle),e(Wle,JFo),e(k_,YFo),e(k_,FN),e(FN,KFo),e(k_,ZFo),e(z,eTo),e(z,S_),e(S_,Hle),e(Hle,oTo),e(S_,rTo),e(S_,TN),e(TN,tTo),e(S_,aTo),e(z,nTo),e(z,R_),e(R_,Ule),e(Ule,sTo),e(R_,lTo),e(R_,MN),e(MN,iTo),e(R_,dTo),e(z,cTo),e(z,B_),e(B_,Jle),e(Jle,fTo),e(B_,mTo),e(B_,EN),e(EN,gTo),e(B_,hTo),e(z,pTo),e(z,P_),e(P_,Yle),e(Yle,uTo),e(P_,_To),e(P_,CN),e(CN,bTo),e(P_,vTo),e(z,FTo),e(z,I_),e(I_,Kle),e(Kle,TTo),e(I_,MTo),e(I_,wN),e(wN,ETo),e(I_,CTo),e(z,wTo),e(z,q_),e(q_,Zle),e(Zle,ATo),e(q_,yTo),e(q_,AN),e(AN,LTo),e(q_,xTo),e(z,$To),e(z,N_),e(N_,eie),e(eie,kTo),e(N_,STo),e(N_,yN),e(yN,RTo),e(N_,BTo),e(z,PTo),e(z,j_),e(j_,oie),e(oie,ITo),e(j_,qTo),e(j_,LN),e(LN,NTo),e(j_,jTo),e(z,DTo),e(z,D_),e(D_,rie),e(rie,GTo),e(D_,OTo),e(D_,xN),e(xN,VTo),e(D_,XTo),e(z,zTo),e(z,G_),e(G_,tie),e(tie,QTo),e(G_,WTo),e(G_,$N),e($N,HTo),e(G_,UTo),e(z,JTo),e(z,O_),e(O_,aie),e(aie,YTo),e(O_,KTo),e(O_,kN),e(kN,ZTo),e(O_,eMo),e(z,oMo),e(z,V_),e(V_,nie),e(nie,rMo),e(V_,tMo),e(V_,SN),e(SN,aMo),e(V_,nMo),e(z,sMo),e(z,X_),e(X_,sie),e(sie,lMo),e(X_,iMo),e(X_,RN),e(RN,dMo),e(X_,cMo),e(z,fMo),e(z,z_),e(z_,lie),e(lie,mMo),e(z_,gMo),e(z_,BN),e(BN,hMo),e(z_,pMo),e(z,uMo),e(z,Q_),e(Q_,iie),e(iie,_Mo),e(Q_,bMo),e(Q_,PN),e(PN,vMo),e(Q_,FMo),e(z,TMo),e(z,W_),e(W_,die),e(die,MMo),e(W_,EMo),e(W_,IN),e(IN,CMo),e(W_,wMo),e(z,AMo),e(z,H_),e(H_,cie),e(cie,yMo),e(H_,LMo),e(H_,qN),e(qN,xMo),e(H_,$Mo),e(z,kMo),e(z,U_),e(U_,fie),e(fie,SMo),e(U_,RMo),e(U_,NN),e(NN,BMo),e(U_,PMo),e(z,IMo),e(z,J_),e(J_,mie),e(mie,qMo),e(J_,NMo),e(J_,jN),e(jN,jMo),e(J_,DMo),e(z,GMo),e(z,Y_),e(Y_,gie),e(gie,OMo),e(Y_,VMo),e(Y_,DN),e(DN,XMo),e(Y_,zMo),e(z,QMo),e(z,K_),e(K_,hie),e(hie,WMo),e(K_,HMo),e(K_,GN),e(GN,UMo),e(K_,JMo),e(z,YMo),e(z,Z_),e(Z_,pie),e(pie,KMo),e(Z_,ZMo),e(Z_,ON),e(ON,eEo),e(Z_,oEo),e(z,rEo),e(z,e6),e(e6,uie),e(uie,tEo),e(e6,aEo),e(e6,VN),e(VN,nEo),e(e6,sEo),e(z,lEo),e(z,o6),e(o6,_ie),e(_ie,iEo),e(o6,dEo),e(o6,XN),e(XN,cEo),e(o6,fEo),e(z,mEo),e(z,r6),e(r6,bie),e(bie,gEo),e(r6,hEo),e(r6,zN),e(zN,pEo),e(r6,uEo),e(z,_Eo),e(z,t6),e(t6,vie),e(vie,bEo),e(t6,vEo),e(t6,QN),e(QN,FEo),e(t6,TEo),e(z,MEo),e(z,a6),e(a6,Fie),e(Fie,EEo),e(a6,CEo),e(a6,WN),e(WN,wEo),e(a6,AEo),e(z,yEo),e(z,n6),e(n6,Tie),e(Tie,LEo),e(n6,xEo),e(n6,HN),e(HN,$Eo),e(n6,kEo),e(z,SEo),e(z,s6),e(s6,Mie),e(Mie,REo),e(s6,BEo),e(s6,UN),e(UN,PEo),e(s6,IEo),e(Je,qEo),e(Je,l6),e(l6,NEo),e(l6,Eie),e(Eie,jEo),e(l6,DEo),e(l6,Cie),e(Cie,GEo),e(Je,OEo),M(i6,Je,null),b(f,OPe,_),b(f,$i,_),e($i,d6),e(d6,wie),M(Ry,wie,null),e($i,VEo),e($i,Aie),e(Aie,XEo),b(f,VPe,_),b(f,ko,_),M(By,ko,null),e(ko,zEo),e(ko,ki),e(ki,QEo),e(ki,JN),e(JN,WEo),e(ki,HEo),e(ki,YN),e(YN,UEo),e(ki,JEo),e(ko,YEo),e(ko,Py),e(Py,KEo),e(Py,yie),e(yie,ZEo),e(Py,eCo),e(ko,oCo),e(ko,at),M(Iy,at,null),e(at,rCo),e(at,Lie),e(Lie,tCo),e(at,aCo),e(at,Si),e(Si,nCo),e(Si,xie),e(xie,sCo),e(Si,lCo),e(Si,KN),e(KN,iCo),e(Si,dCo),e(at,cCo),M(c6,at,null),e(ko,fCo),e(ko,Ye),M(qy,Ye,null),e(Ye,mCo),e(Ye,$ie),e($ie,gCo),e(Ye,hCo),e(Ye,xa),e(xa,pCo),e(xa,kie),e(kie,uCo),e(xa,_Co),e(xa,Sie),e(Sie,bCo),e(xa,vCo),e(xa,Rie),e(Rie,FCo),e(xa,TCo),e(Ye,MCo),e(Ye,Q),e(Q,f6),e(f6,Bie),e(Bie,ECo),e(f6,CCo),e(f6,ZN),e(ZN,wCo),e(f6,ACo),e(Q,yCo),e(Q,m6),e(m6,Pie),e(Pie,LCo),e(m6,xCo),e(m6,ej),e(ej,$Co),e(m6,kCo),e(Q,SCo),e(Q,g6),e(g6,Iie),e(Iie,RCo),e(g6,BCo),e(g6,oj),e(oj,PCo),e(g6,ICo),e(Q,qCo),e(Q,h6),e(h6,qie),e(qie,NCo),e(h6,jCo),e(h6,rj),e(rj,DCo),e(h6,GCo),e(Q,OCo),e(Q,p6),e(p6,Nie),e(Nie,VCo),e(p6,XCo),e(p6,tj),e(tj,zCo),e(p6,QCo),e(Q,WCo),e(Q,u6),e(u6,jie),e(jie,HCo),e(u6,UCo),e(u6,aj),e(aj,JCo),e(u6,YCo),e(Q,KCo),e(Q,_6),e(_6,Die),e(Die,ZCo),e(_6,e3o),e(_6,nj),e(nj,o3o),e(_6,r3o),e(Q,t3o),e(Q,b6),e(b6,Gie),e(Gie,a3o),e(b6,n3o),e(b6,sj),e(sj,s3o),e(b6,l3o),e(Q,i3o),e(Q,v6),e(v6,Oie),e(Oie,d3o),e(v6,c3o),e(v6,lj),e(lj,f3o),e(v6,m3o),e(Q,g3o),e(Q,F6),e(F6,Vie),e(Vie,h3o),e(F6,p3o),e(F6,ij),e(ij,u3o),e(F6,_3o),e(Q,b3o),e(Q,T6),e(T6,Xie),e(Xie,v3o),e(T6,F3o),e(T6,dj),e(dj,T3o),e(T6,M3o),e(Q,E3o),e(Q,M6),e(M6,zie),e(zie,C3o),e(M6,w3o),e(M6,cj),e(cj,A3o),e(M6,y3o),e(Q,L3o),e(Q,E6),e(E6,Qie),e(Qie,x3o),e(E6,$3o),e(E6,fj),e(fj,k3o),e(E6,S3o),e(Q,R3o),e(Q,C6),e(C6,Wie),e(Wie,B3o),e(C6,P3o),e(C6,mj),e(mj,I3o),e(C6,q3o),e(Q,N3o),e(Q,w6),e(w6,Hie),e(Hie,j3o),e(w6,D3o),e(w6,gj),e(gj,G3o),e(w6,O3o),e(Q,V3o),e(Q,A6),e(A6,Uie),e(Uie,X3o),e(A6,z3o),e(A6,hj),e(hj,Q3o),e(A6,W3o),e(Q,H3o),e(Q,y6),e(y6,Jie),e(Jie,U3o),e(y6,J3o),e(y6,pj),e(pj,Y3o),e(y6,K3o),e(Q,Z3o),e(Q,L6),e(L6,Yie),e(Yie,ewo),e(L6,owo),e(L6,uj),e(uj,rwo),e(L6,two),e(Q,awo),e(Q,x6),e(x6,Kie),e(Kie,nwo),e(x6,swo),e(x6,_j),e(_j,lwo),e(x6,iwo),e(Q,dwo),e(Q,$6),e($6,Zie),e(Zie,cwo),e($6,fwo),e($6,bj),e(bj,mwo),e($6,gwo),e(Q,hwo),e(Q,k6),e(k6,ede),e(ede,pwo),e(k6,uwo),e(k6,vj),e(vj,_wo),e(k6,bwo),e(Q,vwo),e(Q,S6),e(S6,ode),e(ode,Fwo),e(S6,Two),e(S6,Fj),e(Fj,Mwo),e(S6,Ewo),e(Q,Cwo),e(Q,R6),e(R6,rde),e(rde,wwo),e(R6,Awo),e(R6,Tj),e(Tj,ywo),e(R6,Lwo),e(Q,xwo),e(Q,B6),e(B6,tde),e(tde,$wo),e(B6,kwo),e(B6,Mj),e(Mj,Swo),e(B6,Rwo),e(Q,Bwo),e(Q,P6),e(P6,ade),e(ade,Pwo),e(P6,Iwo),e(P6,Ej),e(Ej,qwo),e(P6,Nwo),e(Q,jwo),e(Q,I6),e(I6,nde),e(nde,Dwo),e(I6,Gwo),e(I6,Cj),e(Cj,Owo),e(I6,Vwo),e(Q,Xwo),e(Q,q6),e(q6,sde),e(sde,zwo),e(q6,Qwo),e(q6,wj),e(wj,Wwo),e(q6,Hwo),e(Q,Uwo),e(Q,N6),e(N6,lde),e(lde,Jwo),e(N6,Ywo),e(N6,Aj),e(Aj,Kwo),e(N6,Zwo),e(Q,eAo),e(Q,j6),e(j6,ide),e(ide,oAo),e(j6,rAo),e(j6,yj),e(yj,tAo),e(j6,aAo),e(Q,nAo),e(Q,D6),e(D6,dde),e(dde,sAo),e(D6,lAo),e(D6,Lj),e(Lj,iAo),e(D6,dAo),e(Q,cAo),e(Q,G6),e(G6,cde),e(cde,fAo),e(G6,mAo),e(G6,fde),e(fde,gAo),e(G6,hAo),e(Q,pAo),e(Q,O6),e(O6,mde),e(mde,uAo),e(O6,_Ao),e(O6,xj),e(xj,bAo),e(O6,vAo),e(Q,FAo),e(Q,V6),e(V6,gde),e(gde,TAo),e(V6,MAo),e(V6,$j),e($j,EAo),e(V6,CAo),e(Q,wAo),e(Q,X6),e(X6,hde),e(hde,AAo),e(X6,yAo),e(X6,kj),e(kj,LAo),e(X6,xAo),e(Q,$Ao),e(Q,z6),e(z6,pde),e(pde,kAo),e(z6,SAo),e(z6,Sj),e(Sj,RAo),e(z6,BAo),e(Ye,PAo),e(Ye,Q6),e(Q6,IAo),e(Q6,ude),e(ude,qAo),e(Q6,NAo),e(Q6,_de),e(_de,jAo),e(Ye,DAo),M(W6,Ye,null),b(f,XPe,_),b(f,Ri,_),e(Ri,H6),e(H6,bde),M(Ny,bde,null),e(Ri,GAo),e(Ri,vde),e(vde,OAo),b(f,zPe,_),b(f,So,_),M(jy,So,null),e(So,VAo),e(So,Bi),e(Bi,XAo),e(Bi,Rj),e(Rj,zAo),e(Bi,QAo),e(Bi,Bj),e(Bj,WAo),e(Bi,HAo),e(So,UAo),e(So,Dy),e(Dy,JAo),e(Dy,Fde),e(Fde,YAo),e(Dy,KAo),e(So,ZAo),e(So,nt),M(Gy,nt,null),e(nt,e0o),e(nt,Tde),e(Tde,o0o),e(nt,r0o),e(nt,Pi),e(Pi,t0o),e(Pi,Mde),e(Mde,a0o),e(Pi,n0o),e(Pi,Pj),e(Pj,s0o),e(Pi,l0o),e(nt,i0o),M(U6,nt,null),e(So,d0o),e(So,Ke),M(Oy,Ke,null),e(Ke,c0o),e(Ke,Ede),e(Ede,f0o),e(Ke,m0o),e(Ke,$a),e($a,g0o),e($a,Cde),e(Cde,h0o),e($a,p0o),e($a,wde),e(wde,u0o),e($a,_0o),e($a,Ade),e(Ade,b0o),e($a,v0o),e(Ke,F0o),e(Ke,he),e(he,J6),e(J6,yde),e(yde,T0o),e(J6,M0o),e(J6,Ij),e(Ij,E0o),e(J6,C0o),e(he,w0o),e(he,Y6),e(Y6,Lde),e(Lde,A0o),e(Y6,y0o),e(Y6,qj),e(qj,L0o),e(Y6,x0o),e(he,$0o),e(he,K6),e(K6,xde),e(xde,k0o),e(K6,S0o),e(K6,Nj),e(Nj,R0o),e(K6,B0o),e(he,P0o),e(he,Z6),e(Z6,$de),e($de,I0o),e(Z6,q0o),e(Z6,jj),e(jj,N0o),e(Z6,j0o),e(he,D0o),e(he,e1),e(e1,kde),e(kde,G0o),e(e1,O0o),e(e1,Dj),e(Dj,V0o),e(e1,X0o),e(he,z0o),e(he,o1),e(o1,Sde),e(Sde,Q0o),e(o1,W0o),e(o1,Gj),e(Gj,H0o),e(o1,U0o),e(he,J0o),e(he,r1),e(r1,Rde),e(Rde,Y0o),e(r1,K0o),e(r1,Oj),e(Oj,Z0o),e(r1,eyo),e(he,oyo),e(he,t1),e(t1,Bde),e(Bde,ryo),e(t1,tyo),e(t1,Vj),e(Vj,ayo),e(t1,nyo),e(he,syo),e(he,a1),e(a1,Pde),e(Pde,lyo),e(a1,iyo),e(a1,Xj),e(Xj,dyo),e(a1,cyo),e(he,fyo),e(he,n1),e(n1,Ide),e(Ide,myo),e(n1,gyo),e(n1,zj),e(zj,hyo),e(n1,pyo),e(he,uyo),e(he,s1),e(s1,qde),e(qde,_yo),e(s1,byo),e(s1,Qj),e(Qj,vyo),e(s1,Fyo),e(he,Tyo),e(he,l1),e(l1,Nde),e(Nde,Myo),e(l1,Eyo),e(l1,Wj),e(Wj,Cyo),e(l1,wyo),e(he,Ayo),e(he,i1),e(i1,jde),e(jde,yyo),e(i1,Lyo),e(i1,Hj),e(Hj,xyo),e(i1,$yo),e(he,kyo),e(he,d1),e(d1,Dde),e(Dde,Syo),e(d1,Ryo),e(d1,Uj),e(Uj,Byo),e(d1,Pyo),e(he,Iyo),e(he,c1),e(c1,Gde),e(Gde,qyo),e(c1,Nyo),e(c1,Jj),e(Jj,jyo),e(c1,Dyo),e(he,Gyo),e(he,f1),e(f1,Ode),e(Ode,Oyo),e(f1,Vyo),e(f1,Yj),e(Yj,Xyo),e(f1,zyo),e(he,Qyo),e(he,m1),e(m1,Vde),e(Vde,Wyo),e(m1,Hyo),e(m1,Kj),e(Kj,Uyo),e(m1,Jyo),e(Ke,Yyo),e(Ke,g1),e(g1,Kyo),e(g1,Xde),e(Xde,Zyo),e(g1,eLo),e(g1,zde),e(zde,oLo),e(Ke,rLo),M(h1,Ke,null),b(f,QPe,_),b(f,Ii,_),e(Ii,p1),e(p1,Qde),M(Vy,Qde,null),e(Ii,tLo),e(Ii,Wde),e(Wde,aLo),b(f,WPe,_),b(f,Ro,_),M(Xy,Ro,null),e(Ro,nLo),e(Ro,qi),e(qi,sLo),e(qi,Zj),e(Zj,lLo),e(qi,iLo),e(qi,eD),e(eD,dLo),e(qi,cLo),e(Ro,fLo),e(Ro,zy),e(zy,mLo),e(zy,Hde),e(Hde,gLo),e(zy,hLo),e(Ro,pLo),e(Ro,st),M(Qy,st,null),e(st,uLo),e(st,Ude),e(Ude,_Lo),e(st,bLo),e(st,Ni),e(Ni,vLo),e(Ni,Jde),e(Jde,FLo),e(Ni,TLo),e(Ni,oD),e(oD,MLo),e(Ni,ELo),e(st,CLo),M(u1,st,null),e(Ro,wLo),e(Ro,Ze),M(Wy,Ze,null),e(Ze,ALo),e(Ze,Yde),e(Yde,yLo),e(Ze,LLo),e(Ze,ka),e(ka,xLo),e(ka,Kde),e(Kde,$Lo),e(ka,kLo),e(ka,Zde),e(Zde,SLo),e(ka,RLo),e(ka,ece),e(ece,BLo),e(ka,PLo),e(Ze,ILo),e(Ze,q),e(q,_1),e(_1,oce),e(oce,qLo),e(_1,NLo),e(_1,rD),e(rD,jLo),e(_1,DLo),e(q,GLo),e(q,b1),e(b1,rce),e(rce,OLo),e(b1,VLo),e(b1,tD),e(tD,XLo),e(b1,zLo),e(q,QLo),e(q,v1),e(v1,tce),e(tce,WLo),e(v1,HLo),e(v1,aD),e(aD,ULo),e(v1,JLo),e(q,YLo),e(q,F1),e(F1,ace),e(ace,KLo),e(F1,ZLo),e(F1,nD),e(nD,e8o),e(F1,o8o),e(q,r8o),e(q,T1),e(T1,nce),e(nce,t8o),e(T1,a8o),e(T1,sD),e(sD,n8o),e(T1,s8o),e(q,l8o),e(q,M1),e(M1,sce),e(sce,i8o),e(M1,d8o),e(M1,lD),e(lD,c8o),e(M1,f8o),e(q,m8o),e(q,E1),e(E1,lce),e(lce,g8o),e(E1,h8o),e(E1,iD),e(iD,p8o),e(E1,u8o),e(q,_8o),e(q,C1),e(C1,ice),e(ice,b8o),e(C1,v8o),e(C1,dD),e(dD,F8o),e(C1,T8o),e(q,M8o),e(q,w1),e(w1,dce),e(dce,E8o),e(w1,C8o),e(w1,cD),e(cD,w8o),e(w1,A8o),e(q,y8o),e(q,A1),e(A1,cce),e(cce,L8o),e(A1,x8o),e(A1,fD),e(fD,$8o),e(A1,k8o),e(q,S8o),e(q,y1),e(y1,fce),e(fce,R8o),e(y1,B8o),e(y1,mD),e(mD,P8o),e(y1,I8o),e(q,q8o),e(q,L1),e(L1,mce),e(mce,N8o),e(L1,j8o),e(L1,gD),e(gD,D8o),e(L1,G8o),e(q,O8o),e(q,x1),e(x1,gce),e(gce,V8o),e(x1,X8o),e(x1,hD),e(hD,z8o),e(x1,Q8o),e(q,W8o),e(q,$1),e($1,hce),e(hce,H8o),e($1,U8o),e($1,pD),e(pD,J8o),e($1,Y8o),e(q,K8o),e(q,k1),e(k1,pce),e(pce,Z8o),e(k1,exo),e(k1,uD),e(uD,oxo),e(k1,rxo),e(q,txo),e(q,S1),e(S1,uce),e(uce,axo),e(S1,nxo),e(S1,_D),e(_D,sxo),e(S1,lxo),e(q,ixo),e(q,R1),e(R1,_ce),e(_ce,dxo),e(R1,cxo),e(R1,bD),e(bD,fxo),e(R1,mxo),e(q,gxo),e(q,B1),e(B1,bce),e(bce,hxo),e(B1,pxo),e(B1,vD),e(vD,uxo),e(B1,_xo),e(q,bxo),e(q,P1),e(P1,vce),e(vce,vxo),e(P1,Fxo),e(P1,FD),e(FD,Txo),e(P1,Mxo),e(q,Exo),e(q,I1),e(I1,Fce),e(Fce,Cxo),e(I1,wxo),e(I1,TD),e(TD,Axo),e(I1,yxo),e(q,Lxo),e(q,q1),e(q1,Tce),e(Tce,xxo),e(q1,$xo),e(q1,MD),e(MD,kxo),e(q1,Sxo),e(q,Rxo),e(q,N1),e(N1,Mce),e(Mce,Bxo),e(N1,Pxo),e(N1,ED),e(ED,Ixo),e(N1,qxo),e(q,Nxo),e(q,j1),e(j1,Ece),e(Ece,jxo),e(j1,Dxo),e(j1,CD),e(CD,Gxo),e(j1,Oxo),e(q,Vxo),e(q,D1),e(D1,Cce),e(Cce,Xxo),e(D1,zxo),e(D1,wD),e(wD,Qxo),e(D1,Wxo),e(q,Hxo),e(q,G1),e(G1,wce),e(wce,Uxo),e(G1,Jxo),e(G1,AD),e(AD,Yxo),e(G1,Kxo),e(q,Zxo),e(q,O1),e(O1,Ace),e(Ace,e7o),e(O1,o7o),e(O1,yD),e(yD,r7o),e(O1,t7o),e(q,a7o),e(q,V1),e(V1,yce),e(yce,n7o),e(V1,s7o),e(V1,LD),e(LD,l7o),e(V1,i7o),e(q,d7o),e(q,X1),e(X1,Lce),e(Lce,c7o),e(X1,f7o),e(X1,xD),e(xD,m7o),e(X1,g7o),e(q,h7o),e(q,z1),e(z1,xce),e(xce,p7o),e(z1,u7o),e(z1,$D),e($D,_7o),e(z1,b7o),e(q,v7o),e(q,Q1),e(Q1,$ce),e($ce,F7o),e(Q1,T7o),e(Q1,kD),e(kD,M7o),e(Q1,E7o),e(q,C7o),e(q,W1),e(W1,kce),e(kce,w7o),e(W1,A7o),e(W1,SD),e(SD,y7o),e(W1,L7o),e(q,x7o),e(q,H1),e(H1,Sce),e(Sce,$7o),e(H1,k7o),e(H1,RD),e(RD,S7o),e(H1,R7o),e(q,B7o),e(q,U1),e(U1,Rce),e(Rce,P7o),e(U1,I7o),e(U1,BD),e(BD,q7o),e(U1,N7o),e(q,j7o),e(q,J1),e(J1,Bce),e(Bce,D7o),e(J1,G7o),e(J1,PD),e(PD,O7o),e(J1,V7o),e(q,X7o),e(q,Y1),e(Y1,Pce),e(Pce,z7o),e(Y1,Q7o),e(Y1,ID),e(ID,W7o),e(Y1,H7o),e(q,U7o),e(q,K1),e(K1,Ice),e(Ice,J7o),e(K1,Y7o),e(K1,qD),e(qD,K7o),e(K1,Z7o),e(q,e9o),e(q,Z1),e(Z1,qce),e(qce,o9o),e(Z1,r9o),e(Z1,ND),e(ND,t9o),e(Z1,a9o),e(q,n9o),e(q,eb),e(eb,Nce),e(Nce,s9o),e(eb,l9o),e(eb,jD),e(jD,i9o),e(eb,d9o),e(q,c9o),e(q,ob),e(ob,jce),e(jce,f9o),e(ob,m9o),e(ob,DD),e(DD,g9o),e(ob,h9o),e(q,p9o),e(q,rb),e(rb,Dce),e(Dce,u9o),e(rb,_9o),e(rb,GD),e(GD,b9o),e(rb,v9o),e(q,F9o),e(q,tb),e(tb,Gce),e(Gce,T9o),e(tb,M9o),e(tb,OD),e(OD,E9o),e(tb,C9o),e(q,w9o),e(q,ab),e(ab,Oce),e(Oce,A9o),e(ab,y9o),e(ab,VD),e(VD,L9o),e(ab,x9o),e(q,$9o),e(q,nb),e(nb,Vce),e(Vce,k9o),e(nb,S9o),e(nb,XD),e(XD,R9o),e(nb,B9o),e(q,P9o),e(q,sb),e(sb,Xce),e(Xce,I9o),e(sb,q9o),e(sb,zD),e(zD,N9o),e(sb,j9o),e(q,D9o),e(q,lb),e(lb,zce),e(zce,G9o),e(lb,O9o),e(lb,QD),e(QD,V9o),e(lb,X9o),e(q,z9o),e(q,ib),e(ib,Qce),e(Qce,Q9o),e(ib,W9o),e(ib,WD),e(WD,H9o),e(ib,U9o),e(q,J9o),e(q,db),e(db,Wce),e(Wce,Y9o),e(db,K9o),e(db,HD),e(HD,Z9o),e(db,e$o),e(Ze,o$o),e(Ze,cb),e(cb,r$o),e(cb,Hce),e(Hce,t$o),e(cb,a$o),e(cb,Uce),e(Uce,n$o),e(Ze,s$o),M(fb,Ze,null),b(f,HPe,_),b(f,ji,_),e(ji,mb),e(mb,Jce),M(Hy,Jce,null),e(ji,l$o),e(ji,Yce),e(Yce,i$o),b(f,UPe,_),b(f,Bo,_),M(Uy,Bo,null),e(Bo,d$o),e(Bo,Di),e(Di,c$o),e(Di,UD),e(UD,f$o),e(Di,m$o),e(Di,JD),e(JD,g$o),e(Di,h$o),e(Bo,p$o),e(Bo,Jy),e(Jy,u$o),e(Jy,Kce),e(Kce,_$o),e(Jy,b$o),e(Bo,v$o),e(Bo,lt),M(Yy,lt,null),e(lt,F$o),e(lt,Zce),e(Zce,T$o),e(lt,M$o),e(lt,Gi),e(Gi,E$o),e(Gi,efe),e(efe,C$o),e(Gi,w$o),e(Gi,YD),e(YD,A$o),e(Gi,y$o),e(lt,L$o),M(gb,lt,null),e(Bo,x$o),e(Bo,eo),M(Ky,eo,null),e(eo,$$o),e(eo,ofe),e(ofe,k$o),e(eo,S$o),e(eo,Sa),e(Sa,R$o),e(Sa,rfe),e(rfe,B$o),e(Sa,P$o),e(Sa,tfe),e(tfe,I$o),e(Sa,q$o),e(Sa,afe),e(afe,N$o),e(Sa,j$o),e(eo,D$o),e(eo,Y),e(Y,hb),e(hb,nfe),e(nfe,G$o),e(hb,O$o),e(hb,KD),e(KD,V$o),e(hb,X$o),e(Y,z$o),e(Y,pb),e(pb,sfe),e(sfe,Q$o),e(pb,W$o),e(pb,ZD),e(ZD,H$o),e(pb,U$o),e(Y,J$o),e(Y,ub),e(ub,lfe),e(lfe,Y$o),e(ub,K$o),e(ub,eG),e(eG,Z$o),e(ub,eko),e(Y,oko),e(Y,_b),e(_b,ife),e(ife,rko),e(_b,tko),e(_b,oG),e(oG,ako),e(_b,nko),e(Y,sko),e(Y,bb),e(bb,dfe),e(dfe,lko),e(bb,iko),e(bb,rG),e(rG,dko),e(bb,cko),e(Y,fko),e(Y,vb),e(vb,cfe),e(cfe,mko),e(vb,gko),e(vb,tG),e(tG,hko),e(vb,pko),e(Y,uko),e(Y,Fb),e(Fb,ffe),e(ffe,_ko),e(Fb,bko),e(Fb,aG),e(aG,vko),e(Fb,Fko),e(Y,Tko),e(Y,Tb),e(Tb,mfe),e(mfe,Mko),e(Tb,Eko),e(Tb,nG),e(nG,Cko),e(Tb,wko),e(Y,Ako),e(Y,Mb),e(Mb,gfe),e(gfe,yko),e(Mb,Lko),e(Mb,sG),e(sG,xko),e(Mb,$ko),e(Y,kko),e(Y,Eb),e(Eb,hfe),e(hfe,Sko),e(Eb,Rko),e(Eb,lG),e(lG,Bko),e(Eb,Pko),e(Y,Iko),e(Y,Cb),e(Cb,pfe),e(pfe,qko),e(Cb,Nko),e(Cb,iG),e(iG,jko),e(Cb,Dko),e(Y,Gko),e(Y,wb),e(wb,ufe),e(ufe,Oko),e(wb,Vko),e(wb,dG),e(dG,Xko),e(wb,zko),e(Y,Qko),e(Y,Ab),e(Ab,_fe),e(_fe,Wko),e(Ab,Hko),e(Ab,cG),e(cG,Uko),e(Ab,Jko),e(Y,Yko),e(Y,yb),e(yb,bfe),e(bfe,Kko),e(yb,Zko),e(yb,fG),e(fG,eSo),e(yb,oSo),e(Y,rSo),e(Y,Lb),e(Lb,vfe),e(vfe,tSo),e(Lb,aSo),e(Lb,mG),e(mG,nSo),e(Lb,sSo),e(Y,lSo),e(Y,xb),e(xb,Ffe),e(Ffe,iSo),e(xb,dSo),e(xb,gG),e(gG,cSo),e(xb,fSo),e(Y,mSo),e(Y,$b),e($b,Tfe),e(Tfe,gSo),e($b,hSo),e($b,hG),e(hG,pSo),e($b,uSo),e(Y,_So),e(Y,kb),e(kb,Mfe),e(Mfe,bSo),e(kb,vSo),e(kb,pG),e(pG,FSo),e(kb,TSo),e(Y,MSo),e(Y,Sb),e(Sb,Efe),e(Efe,ESo),e(Sb,CSo),e(Sb,uG),e(uG,wSo),e(Sb,ASo),e(Y,ySo),e(Y,Rb),e(Rb,Cfe),e(Cfe,LSo),e(Rb,xSo),e(Rb,_G),e(_G,$So),e(Rb,kSo),e(Y,SSo),e(Y,Bb),e(Bb,wfe),e(wfe,RSo),e(Bb,BSo),e(Bb,bG),e(bG,PSo),e(Bb,ISo),e(Y,qSo),e(Y,Pb),e(Pb,Afe),e(Afe,NSo),e(Pb,jSo),e(Pb,vG),e(vG,DSo),e(Pb,GSo),e(Y,OSo),e(Y,Ib),e(Ib,yfe),e(yfe,VSo),e(Ib,XSo),e(Ib,FG),e(FG,zSo),e(Ib,QSo),e(Y,WSo),e(Y,qb),e(qb,Lfe),e(Lfe,HSo),e(qb,USo),e(qb,TG),e(TG,JSo),e(qb,YSo),e(Y,KSo),e(Y,Nb),e(Nb,xfe),e(xfe,ZSo),e(Nb,eRo),e(Nb,MG),e(MG,oRo),e(Nb,rRo),e(Y,tRo),e(Y,jb),e(jb,$fe),e($fe,aRo),e(jb,nRo),e(jb,EG),e(EG,sRo),e(jb,lRo),e(Y,iRo),e(Y,Db),e(Db,kfe),e(kfe,dRo),e(Db,cRo),e(Db,CG),e(CG,fRo),e(Db,mRo),e(Y,gRo),e(Y,Gb),e(Gb,Sfe),e(Sfe,hRo),e(Gb,pRo),e(Gb,wG),e(wG,uRo),e(Gb,_Ro),e(eo,bRo),e(eo,Ob),e(Ob,vRo),e(Ob,Rfe),e(Rfe,FRo),e(Ob,TRo),e(Ob,Bfe),e(Bfe,MRo),e(eo,ERo),M(Vb,eo,null),b(f,JPe,_),b(f,Oi,_),e(Oi,Xb),e(Xb,Pfe),M(Zy,Pfe,null),e(Oi,CRo),e(Oi,Ife),e(Ife,wRo),b(f,YPe,_),b(f,Po,_),M(eL,Po,null),e(Po,ARo),e(Po,Vi),e(Vi,yRo),e(Vi,AG),e(AG,LRo),e(Vi,xRo),e(Vi,yG),e(yG,$Ro),e(Vi,kRo),e(Po,SRo),e(Po,oL),e(oL,RRo),e(oL,qfe),e(qfe,BRo),e(oL,PRo),e(Po,IRo),e(Po,it),M(rL,it,null),e(it,qRo),e(it,Nfe),e(Nfe,NRo),e(it,jRo),e(it,Xi),e(Xi,DRo),e(Xi,jfe),e(jfe,GRo),e(Xi,ORo),e(Xi,LG),e(LG,VRo),e(Xi,XRo),e(it,zRo),M(zb,it,null),e(Po,QRo),e(Po,oo),M(tL,oo,null),e(oo,WRo),e(oo,Dfe),e(Dfe,HRo),e(oo,URo),e(oo,Ra),e(Ra,JRo),e(Ra,Gfe),e(Gfe,YRo),e(Ra,KRo),e(Ra,Ofe),e(Ofe,ZRo),e(Ra,eBo),e(Ra,Vfe),e(Vfe,oBo),e(Ra,rBo),e(oo,tBo),e(oo,Yr),e(Yr,Qb),e(Qb,Xfe),e(Xfe,aBo),e(Qb,nBo),e(Qb,xG),e(xG,sBo),e(Qb,lBo),e(Yr,iBo),e(Yr,Wb),e(Wb,zfe),e(zfe,dBo),e(Wb,cBo),e(Wb,$G),e($G,fBo),e(Wb,mBo),e(Yr,gBo),e(Yr,Hb),e(Hb,Qfe),e(Qfe,hBo),e(Hb,pBo),e(Hb,kG),e(kG,uBo),e(Hb,_Bo),e(Yr,bBo),e(Yr,Ub),e(Ub,Wfe),e(Wfe,vBo),e(Ub,FBo),e(Ub,SG),e(SG,TBo),e(Ub,MBo),e(Yr,EBo),e(Yr,Jb),e(Jb,Hfe),e(Hfe,CBo),e(Jb,wBo),e(Jb,RG),e(RG,ABo),e(Jb,yBo),e(oo,LBo),e(oo,Yb),e(Yb,xBo),e(Yb,Ufe),e(Ufe,$Bo),e(Yb,kBo),e(Yb,Jfe),e(Jfe,SBo),e(oo,RBo),M(Kb,oo,null),b(f,KPe,_),b(f,zi,_),e(zi,Zb),e(Zb,Yfe),M(aL,Yfe,null),e(zi,BBo),e(zi,Kfe),e(Kfe,PBo),b(f,ZPe,_),b(f,Io,_),M(nL,Io,null),e(Io,IBo),e(Io,Qi),e(Qi,qBo),e(Qi,BG),e(BG,NBo),e(Qi,jBo),e(Qi,PG),e(PG,DBo),e(Qi,GBo),e(Io,OBo),e(Io,sL),e(sL,VBo),e(sL,Zfe),e(Zfe,XBo),e(sL,zBo),e(Io,QBo),e(Io,dt),M(lL,dt,null),e(dt,WBo),e(dt,eme),e(eme,HBo),e(dt,UBo),e(dt,Wi),e(Wi,JBo),e(Wi,ome),e(ome,YBo),e(Wi,KBo),e(Wi,IG),e(IG,ZBo),e(Wi,ePo),e(dt,oPo),M(e4,dt,null),e(Io,rPo),e(Io,ro),M(iL,ro,null),e(ro,tPo),e(ro,rme),e(rme,aPo),e(ro,nPo),e(ro,Ba),e(Ba,sPo),e(Ba,tme),e(tme,lPo),e(Ba,iPo),e(Ba,ame),e(ame,dPo),e(Ba,cPo),e(Ba,nme),e(nme,fPo),e(Ba,mPo),e(ro,gPo),e(ro,U),e(U,o4),e(o4,sme),e(sme,hPo),e(o4,pPo),e(o4,qG),e(qG,uPo),e(o4,_Po),e(U,bPo),e(U,r4),e(r4,lme),e(lme,vPo),e(r4,FPo),e(r4,NG),e(NG,TPo),e(r4,MPo),e(U,EPo),e(U,t4),e(t4,ime),e(ime,CPo),e(t4,wPo),e(t4,jG),e(jG,APo),e(t4,yPo),e(U,LPo),e(U,a4),e(a4,dme),e(dme,xPo),e(a4,$Po),e(a4,DG),e(DG,kPo),e(a4,SPo),e(U,RPo),e(U,n4),e(n4,cme),e(cme,BPo),e(n4,PPo),e(n4,GG),e(GG,IPo),e(n4,qPo),e(U,NPo),e(U,s4),e(s4,fme),e(fme,jPo),e(s4,DPo),e(s4,OG),e(OG,GPo),e(s4,OPo),e(U,VPo),e(U,l4),e(l4,mme),e(mme,XPo),e(l4,zPo),e(l4,VG),e(VG,QPo),e(l4,WPo),e(U,HPo),e(U,i4),e(i4,gme),e(gme,UPo),e(i4,JPo),e(i4,XG),e(XG,YPo),e(i4,KPo),e(U,ZPo),e(U,d4),e(d4,hme),e(hme,eIo),e(d4,oIo),e(d4,zG),e(zG,rIo),e(d4,tIo),e(U,aIo),e(U,c4),e(c4,pme),e(pme,nIo),e(c4,sIo),e(c4,QG),e(QG,lIo),e(c4,iIo),e(U,dIo),e(U,f4),e(f4,ume),e(ume,cIo),e(f4,fIo),e(f4,WG),e(WG,mIo),e(f4,gIo),e(U,hIo),e(U,m4),e(m4,_me),e(_me,pIo),e(m4,uIo),e(m4,HG),e(HG,_Io),e(m4,bIo),e(U,vIo),e(U,g4),e(g4,bme),e(bme,FIo),e(g4,TIo),e(g4,UG),e(UG,MIo),e(g4,EIo),e(U,CIo),e(U,h4),e(h4,vme),e(vme,wIo),e(h4,AIo),e(h4,JG),e(JG,yIo),e(h4,LIo),e(U,xIo),e(U,p4),e(p4,Fme),e(Fme,$Io),e(p4,kIo),e(p4,YG),e(YG,SIo),e(p4,RIo),e(U,BIo),e(U,u4),e(u4,Tme),e(Tme,PIo),e(u4,IIo),e(u4,KG),e(KG,qIo),e(u4,NIo),e(U,jIo),e(U,_4),e(_4,Mme),e(Mme,DIo),e(_4,GIo),e(_4,ZG),e(ZG,OIo),e(_4,VIo),e(U,XIo),e(U,b4),e(b4,Eme),e(Eme,zIo),e(b4,QIo),e(b4,eO),e(eO,WIo),e(b4,HIo),e(U,UIo),e(U,v4),e(v4,Cme),e(Cme,JIo),e(v4,YIo),e(v4,oO),e(oO,KIo),e(v4,ZIo),e(U,eqo),e(U,F4),e(F4,wme),e(wme,oqo),e(F4,rqo),e(F4,rO),e(rO,tqo),e(F4,aqo),e(U,nqo),e(U,T4),e(T4,Ame),e(Ame,sqo),e(T4,lqo),e(T4,tO),e(tO,iqo),e(T4,dqo),e(U,cqo),e(U,M4),e(M4,yme),e(yme,fqo),e(M4,mqo),e(M4,aO),e(aO,gqo),e(M4,hqo),e(U,pqo),e(U,E4),e(E4,Lme),e(Lme,uqo),e(E4,_qo),e(E4,nO),e(nO,bqo),e(E4,vqo),e(U,Fqo),e(U,C4),e(C4,xme),e(xme,Tqo),e(C4,Mqo),e(C4,sO),e(sO,Eqo),e(C4,Cqo),e(U,wqo),e(U,w4),e(w4,$me),e($me,Aqo),e(w4,yqo),e(w4,lO),e(lO,Lqo),e(w4,xqo),e(U,$qo),e(U,A4),e(A4,kme),e(kme,kqo),e(A4,Sqo),e(A4,iO),e(iO,Rqo),e(A4,Bqo),e(U,Pqo),e(U,y4),e(y4,Sme),e(Sme,Iqo),e(y4,qqo),e(y4,dO),e(dO,Nqo),e(y4,jqo),e(U,Dqo),e(U,L4),e(L4,Rme),e(Rme,Gqo),e(L4,Oqo),e(L4,cO),e(cO,Vqo),e(L4,Xqo),e(U,zqo),e(U,x4),e(x4,Bme),e(Bme,Qqo),e(x4,Wqo),e(x4,fO),e(fO,Hqo),e(x4,Uqo),e(U,Jqo),e(U,$4),e($4,Pme),e(Pme,Yqo),e($4,Kqo),e($4,mO),e(mO,Zqo),e($4,eNo),e(U,oNo),e(U,k4),e(k4,Ime),e(Ime,rNo),e(k4,tNo),e(k4,gO),e(gO,aNo),e(k4,nNo),e(U,sNo),e(U,S4),e(S4,qme),e(qme,lNo),e(S4,iNo),e(S4,hO),e(hO,dNo),e(S4,cNo),e(U,fNo),e(U,R4),e(R4,Nme),e(Nme,mNo),e(R4,gNo),e(R4,pO),e(pO,hNo),e(R4,pNo),e(ro,uNo),e(ro,B4),e(B4,_No),e(B4,jme),e(jme,bNo),e(B4,vNo),e(B4,Dme),e(Dme,FNo),e(ro,TNo),M(P4,ro,null),b(f,eIe,_),b(f,Hi,_),e(Hi,I4),e(I4,Gme),M(dL,Gme,null),e(Hi,MNo),e(Hi,Ome),e(Ome,ENo),b(f,oIe,_),b(f,qo,_),M(cL,qo,null),e(qo,CNo),e(qo,Ui),e(Ui,wNo),e(Ui,uO),e(uO,ANo),e(Ui,yNo),e(Ui,_O),e(_O,LNo),e(Ui,xNo),e(qo,$No),e(qo,fL),e(fL,kNo),e(fL,Vme),e(Vme,SNo),e(fL,RNo),e(qo,BNo),e(qo,ct),M(mL,ct,null),e(ct,PNo),e(ct,Xme),e(Xme,INo),e(ct,qNo),e(ct,Ji),e(Ji,NNo),e(Ji,zme),e(zme,jNo),e(Ji,DNo),e(Ji,bO),e(bO,GNo),e(Ji,ONo),e(ct,VNo),M(q4,ct,null),e(qo,XNo),e(qo,to),M(gL,to,null),e(to,zNo),e(to,Qme),e(Qme,QNo),e(to,WNo),e(to,Pa),e(Pa,HNo),e(Pa,Wme),e(Wme,UNo),e(Pa,JNo),e(Pa,Hme),e(Hme,YNo),e(Pa,KNo),e(Pa,Ume),e(Ume,ZNo),e(Pa,ejo),e(to,ojo),e(to,O),e(O,N4),e(N4,Jme),e(Jme,rjo),e(N4,tjo),e(N4,vO),e(vO,ajo),e(N4,njo),e(O,sjo),e(O,j4),e(j4,Yme),e(Yme,ljo),e(j4,ijo),e(j4,FO),e(FO,djo),e(j4,cjo),e(O,fjo),e(O,D4),e(D4,Kme),e(Kme,mjo),e(D4,gjo),e(D4,TO),e(TO,hjo),e(D4,pjo),e(O,ujo),e(O,G4),e(G4,Zme),e(Zme,_jo),e(G4,bjo),e(G4,MO),e(MO,vjo),e(G4,Fjo),e(O,Tjo),e(O,O4),e(O4,ege),e(ege,Mjo),e(O4,Ejo),e(O4,EO),e(EO,Cjo),e(O4,wjo),e(O,Ajo),e(O,V4),e(V4,oge),e(oge,yjo),e(V4,Ljo),e(V4,CO),e(CO,xjo),e(V4,$jo),e(O,kjo),e(O,X4),e(X4,rge),e(rge,Sjo),e(X4,Rjo),e(X4,wO),e(wO,Bjo),e(X4,Pjo),e(O,Ijo),e(O,z4),e(z4,tge),e(tge,qjo),e(z4,Njo),e(z4,AO),e(AO,jjo),e(z4,Djo),e(O,Gjo),e(O,Q4),e(Q4,age),e(age,Ojo),e(Q4,Vjo),e(Q4,yO),e(yO,Xjo),e(Q4,zjo),e(O,Qjo),e(O,W4),e(W4,nge),e(nge,Wjo),e(W4,Hjo),e(W4,LO),e(LO,Ujo),e(W4,Jjo),e(O,Yjo),e(O,H4),e(H4,sge),e(sge,Kjo),e(H4,Zjo),e(H4,xO),e(xO,eDo),e(H4,oDo),e(O,rDo),e(O,U4),e(U4,lge),e(lge,tDo),e(U4,aDo),e(U4,$O),e($O,nDo),e(U4,sDo),e(O,lDo),e(O,J4),e(J4,ige),e(ige,iDo),e(J4,dDo),e(J4,kO),e(kO,cDo),e(J4,fDo),e(O,mDo),e(O,Y4),e(Y4,dge),e(dge,gDo),e(Y4,hDo),e(Y4,SO),e(SO,pDo),e(Y4,uDo),e(O,_Do),e(O,K4),e(K4,cge),e(cge,bDo),e(K4,vDo),e(K4,RO),e(RO,FDo),e(K4,TDo),e(O,MDo),e(O,Z4),e(Z4,fge),e(fge,EDo),e(Z4,CDo),e(Z4,BO),e(BO,wDo),e(Z4,ADo),e(O,yDo),e(O,e2),e(e2,mge),e(mge,LDo),e(e2,xDo),e(e2,PO),e(PO,$Do),e(e2,kDo),e(O,SDo),e(O,o2),e(o2,gge),e(gge,RDo),e(o2,BDo),e(o2,IO),e(IO,PDo),e(o2,IDo),e(O,qDo),e(O,r2),e(r2,hge),e(hge,NDo),e(r2,jDo),e(r2,qO),e(qO,DDo),e(r2,GDo),e(O,ODo),e(O,t2),e(t2,pge),e(pge,VDo),e(t2,XDo),e(t2,NO),e(NO,zDo),e(t2,QDo),e(O,WDo),e(O,a2),e(a2,uge),e(uge,HDo),e(a2,UDo),e(a2,jO),e(jO,JDo),e(a2,YDo),e(O,KDo),e(O,n2),e(n2,_ge),e(_ge,ZDo),e(n2,eGo),e(n2,DO),e(DO,oGo),e(n2,rGo),e(O,tGo),e(O,s2),e(s2,bge),e(bge,aGo),e(s2,nGo),e(s2,GO),e(GO,sGo),e(s2,lGo),e(O,iGo),e(O,l2),e(l2,vge),e(vge,dGo),e(l2,cGo),e(l2,OO),e(OO,fGo),e(l2,mGo),e(O,gGo),e(O,i2),e(i2,Fge),e(Fge,hGo),e(i2,pGo),e(i2,VO),e(VO,uGo),e(i2,_Go),e(O,bGo),e(O,d2),e(d2,Tge),e(Tge,vGo),e(d2,FGo),e(d2,XO),e(XO,TGo),e(d2,MGo),e(O,EGo),e(O,c2),e(c2,Mge),e(Mge,CGo),e(c2,wGo),e(c2,zO),e(zO,AGo),e(c2,yGo),e(O,LGo),e(O,f2),e(f2,Ege),e(Ege,xGo),e(f2,$Go),e(f2,QO),e(QO,kGo),e(f2,SGo),e(O,RGo),e(O,m2),e(m2,Cge),e(Cge,BGo),e(m2,PGo),e(m2,WO),e(WO,IGo),e(m2,qGo),e(O,NGo),e(O,g2),e(g2,wge),e(wge,jGo),e(g2,DGo),e(g2,HO),e(HO,GGo),e(g2,OGo),e(O,VGo),e(O,h2),e(h2,Age),e(Age,XGo),e(h2,zGo),e(h2,UO),e(UO,QGo),e(h2,WGo),e(O,HGo),e(O,p2),e(p2,yge),e(yge,UGo),e(p2,JGo),e(p2,JO),e(JO,YGo),e(p2,KGo),e(O,ZGo),e(O,u2),e(u2,Lge),e(Lge,eOo),e(u2,oOo),e(u2,YO),e(YO,rOo),e(u2,tOo),e(O,aOo),e(O,_2),e(_2,xge),e(xge,nOo),e(_2,sOo),e(_2,KO),e(KO,lOo),e(_2,iOo),e(O,dOo),e(O,b2),e(b2,$ge),e($ge,cOo),e(b2,fOo),e(b2,ZO),e(ZO,mOo),e(b2,gOo),e(O,hOo),e(O,v2),e(v2,kge),e(kge,pOo),e(v2,uOo),e(v2,eV),e(eV,_Oo),e(v2,bOo),e(O,vOo),e(O,F2),e(F2,Sge),e(Sge,FOo),e(F2,TOo),e(F2,oV),e(oV,MOo),e(F2,EOo),e(O,COo),e(O,T2),e(T2,Rge),e(Rge,wOo),e(T2,AOo),e(T2,rV),e(rV,yOo),e(T2,LOo),e(O,xOo),e(O,M2),e(M2,Bge),e(Bge,$Oo),e(M2,kOo),e(M2,tV),e(tV,SOo),e(M2,ROo),e(to,BOo),e(to,E2),e(E2,POo),e(E2,Pge),e(Pge,IOo),e(E2,qOo),e(E2,Ige),e(Ige,NOo),e(to,jOo),M(C2,to,null),b(f,rIe,_),b(f,Yi,_),e(Yi,w2),e(w2,qge),M(hL,qge,null),e(Yi,DOo),e(Yi,Nge),e(Nge,GOo),b(f,tIe,_),b(f,No,_),M(pL,No,null),e(No,OOo),e(No,Ki),e(Ki,VOo),e(Ki,aV),e(aV,XOo),e(Ki,zOo),e(Ki,nV),e(nV,QOo),e(Ki,WOo),e(No,HOo),e(No,uL),e(uL,UOo),e(uL,jge),e(jge,JOo),e(uL,YOo),e(No,KOo),e(No,ft),M(_L,ft,null),e(ft,ZOo),e(ft,Dge),e(Dge,eVo),e(ft,oVo),e(ft,Zi),e(Zi,rVo),e(Zi,Gge),e(Gge,tVo),e(Zi,aVo),e(Zi,sV),e(sV,nVo),e(Zi,sVo),e(ft,lVo),M(A2,ft,null),e(No,iVo),e(No,ao),M(bL,ao,null),e(ao,dVo),e(ao,Oge),e(Oge,cVo),e(ao,fVo),e(ao,Ia),e(Ia,mVo),e(Ia,Vge),e(Vge,gVo),e(Ia,hVo),e(Ia,Xge),e(Xge,pVo),e(Ia,uVo),e(Ia,zge),e(zge,_Vo),e(Ia,bVo),e(ao,vVo),e(ao,Qge),e(Qge,y2),e(y2,Wge),e(Wge,FVo),e(y2,TVo),e(y2,lV),e(lV,MVo),e(y2,EVo),e(ao,CVo),e(ao,L2),e(L2,wVo),e(L2,Hge),e(Hge,AVo),e(L2,yVo),e(L2,Uge),e(Uge,LVo),e(ao,xVo),M(x2,ao,null),b(f,aIe,_),b(f,ed,_),e(ed,$2),e($2,Jge),M(vL,Jge,null),e(ed,$Vo),e(ed,Yge),e(Yge,kVo),b(f,nIe,_),b(f,jo,_),M(FL,jo,null),e(jo,SVo),e(jo,od),e(od,RVo),e(od,iV),e(iV,BVo),e(od,PVo),e(od,dV),e(dV,IVo),e(od,qVo),e(jo,NVo),e(jo,TL),e(TL,jVo),e(TL,Kge),e(Kge,DVo),e(TL,GVo),e(jo,OVo),e(jo,mt),M(ML,mt,null),e(mt,VVo),e(mt,Zge),e(Zge,XVo),e(mt,zVo),e(mt,rd),e(rd,QVo),e(rd,ehe),e(ehe,WVo),e(rd,HVo),e(rd,cV),e(cV,UVo),e(rd,JVo),e(mt,YVo),M(k2,mt,null),e(jo,KVo),e(jo,no),M(EL,no,null),e(no,ZVo),e(no,ohe),e(ohe,eXo),e(no,oXo),e(no,qa),e(qa,rXo),e(qa,rhe),e(rhe,tXo),e(qa,aXo),e(qa,the),e(the,nXo),e(qa,sXo),e(qa,ahe),e(ahe,lXo),e(qa,iXo),e(no,dXo),e(no,Fe),e(Fe,S2),e(S2,nhe),e(nhe,cXo),e(S2,fXo),e(S2,fV),e(fV,mXo),e(S2,gXo),e(Fe,hXo),e(Fe,R2),e(R2,she),e(she,pXo),e(R2,uXo),e(R2,mV),e(mV,_Xo),e(R2,bXo),e(Fe,vXo),e(Fe,B2),e(B2,lhe),e(lhe,FXo),e(B2,TXo),e(B2,gV),e(gV,MXo),e(B2,EXo),e(Fe,CXo),e(Fe,Rs),e(Rs,ihe),e(ihe,wXo),e(Rs,AXo),e(Rs,hV),e(hV,yXo),e(Rs,LXo),e(Rs,pV),e(pV,xXo),e(Rs,$Xo),e(Fe,kXo),e(Fe,P2),e(P2,dhe),e(dhe,SXo),e(P2,RXo),e(P2,uV),e(uV,BXo),e(P2,PXo),e(Fe,IXo),e(Fe,gt),e(gt,che),e(che,qXo),e(gt,NXo),e(gt,_V),e(_V,jXo),e(gt,DXo),e(gt,bV),e(bV,GXo),e(gt,OXo),e(gt,vV),e(vV,VXo),e(gt,XXo),e(Fe,zXo),e(Fe,I2),e(I2,fhe),e(fhe,QXo),e(I2,WXo),e(I2,FV),e(FV,HXo),e(I2,UXo),e(Fe,JXo),e(Fe,q2),e(q2,mhe),e(mhe,YXo),e(q2,KXo),e(q2,TV),e(TV,ZXo),e(q2,ezo),e(Fe,ozo),e(Fe,N2),e(N2,ghe),e(ghe,rzo),e(N2,tzo),e(N2,MV),e(MV,azo),e(N2,nzo),e(Fe,szo),e(Fe,j2),e(j2,hhe),e(hhe,lzo),e(j2,izo),e(j2,EV),e(EV,dzo),e(j2,czo),e(Fe,fzo),e(Fe,D2),e(D2,phe),e(phe,mzo),e(D2,gzo),e(D2,CV),e(CV,hzo),e(D2,pzo),e(Fe,uzo),e(Fe,G2),e(G2,uhe),e(uhe,_zo),e(G2,bzo),e(G2,wV),e(wV,vzo),e(G2,Fzo),e(Fe,Tzo),e(Fe,O2),e(O2,_he),e(_he,Mzo),e(O2,Ezo),e(O2,AV),e(AV,Czo),e(O2,wzo),e(no,Azo),e(no,V2),e(V2,yzo),e(V2,bhe),e(bhe,Lzo),e(V2,xzo),e(V2,vhe),e(vhe,$zo),e(no,kzo),M(X2,no,null),b(f,sIe,_),b(f,td,_),e(td,z2),e(z2,Fhe),M(CL,Fhe,null),e(td,Szo),e(td,The),e(The,Rzo),b(f,lIe,_),b(f,Do,_),M(wL,Do,null),e(Do,Bzo),e(Do,ad),e(ad,Pzo),e(ad,yV),e(yV,Izo),e(ad,qzo),e(ad,LV),e(LV,Nzo),e(ad,jzo),e(Do,Dzo),e(Do,AL),e(AL,Gzo),e(AL,Mhe),e(Mhe,Ozo),e(AL,Vzo),e(Do,Xzo),e(Do,ht),M(yL,ht,null),e(ht,zzo),e(ht,Ehe),e(Ehe,Qzo),e(ht,Wzo),e(ht,nd),e(nd,Hzo),e(nd,Che),e(Che,Uzo),e(nd,Jzo),e(nd,xV),e(xV,Yzo),e(nd,Kzo),e(ht,Zzo),M(Q2,ht,null),e(Do,eQo),e(Do,so),M(LL,so,null),e(so,oQo),e(so,whe),e(whe,rQo),e(so,tQo),e(so,Na),e(Na,aQo),e(Na,Ahe),e(Ahe,nQo),e(Na,sQo),e(Na,yhe),e(yhe,lQo),e(Na,iQo),e(Na,Lhe),e(Lhe,dQo),e(Na,cQo),e(so,fQo),e(so,xhe),e(xhe,W2),e(W2,$he),e($he,mQo),e(W2,gQo),e(W2,$V),e($V,hQo),e(W2,pQo),e(so,uQo),e(so,H2),e(H2,_Qo),e(H2,khe),e(khe,bQo),e(H2,vQo),e(H2,She),e(She,FQo),e(so,TQo),M(U2,so,null),b(f,iIe,_),b(f,sd,_),e(sd,J2),e(J2,Rhe),M(xL,Rhe,null),e(sd,MQo),e(sd,Bhe),e(Bhe,EQo),b(f,dIe,_),b(f,Go,_),M($L,Go,null),e(Go,CQo),e(Go,ld),e(ld,wQo),e(ld,kV),e(kV,AQo),e(ld,yQo),e(ld,SV),e(SV,LQo),e(ld,xQo),e(Go,$Qo),e(Go,kL),e(kL,kQo),e(kL,Phe),e(Phe,SQo),e(kL,RQo),e(Go,BQo),e(Go,pt),M(SL,pt,null),e(pt,PQo),e(pt,Ihe),e(Ihe,IQo),e(pt,qQo),e(pt,id),e(id,NQo),e(id,qhe),e(qhe,jQo),e(id,DQo),e(id,RV),e(RV,GQo),e(id,OQo),e(pt,VQo),M(Y2,pt,null),e(Go,XQo),e(Go,lo),M(RL,lo,null),e(lo,zQo),e(lo,Nhe),e(Nhe,QQo),e(lo,WQo),e(lo,ja),e(ja,HQo),e(ja,jhe),e(jhe,UQo),e(ja,JQo),e(ja,Dhe),e(Dhe,YQo),e(ja,KQo),e(ja,Ghe),e(Ghe,ZQo),e(ja,eWo),e(lo,oWo),e(lo,Ne),e(Ne,K2),e(K2,Ohe),e(Ohe,rWo),e(K2,tWo),e(K2,BV),e(BV,aWo),e(K2,nWo),e(Ne,sWo),e(Ne,Z2),e(Z2,Vhe),e(Vhe,lWo),e(Z2,iWo),e(Z2,PV),e(PV,dWo),e(Z2,cWo),e(Ne,fWo),e(Ne,e5),e(e5,Xhe),e(Xhe,mWo),e(e5,gWo),e(e5,IV),e(IV,hWo),e(e5,pWo),e(Ne,uWo),e(Ne,o5),e(o5,zhe),e(zhe,_Wo),e(o5,bWo),e(o5,qV),e(qV,vWo),e(o5,FWo),e(Ne,TWo),e(Ne,r5),e(r5,Qhe),e(Qhe,MWo),e(r5,EWo),e(r5,NV),e(NV,CWo),e(r5,wWo),e(Ne,AWo),e(Ne,t5),e(t5,Whe),e(Whe,yWo),e(t5,LWo),e(t5,jV),e(jV,xWo),e(t5,$Wo),e(Ne,kWo),e(Ne,a5),e(a5,Hhe),e(Hhe,SWo),e(a5,RWo),e(a5,DV),e(DV,BWo),e(a5,PWo),e(Ne,IWo),e(Ne,n5),e(n5,Uhe),e(Uhe,qWo),e(n5,NWo),e(n5,GV),e(GV,jWo),e(n5,DWo),e(lo,GWo),e(lo,s5),e(s5,OWo),e(s5,Jhe),e(Jhe,VWo),e(s5,XWo),e(s5,Yhe),e(Yhe,zWo),e(lo,QWo),M(l5,lo,null),b(f,cIe,_),b(f,dd,_),e(dd,i5),e(i5,Khe),M(BL,Khe,null),e(dd,WWo),e(dd,Zhe),e(Zhe,HWo),b(f,fIe,_),b(f,Oo,_),M(PL,Oo,null),e(Oo,UWo),e(Oo,cd),e(cd,JWo),e(cd,OV),e(OV,YWo),e(cd,KWo),e(cd,VV),e(VV,ZWo),e(cd,eHo),e(Oo,oHo),e(Oo,IL),e(IL,rHo),e(IL,epe),e(epe,tHo),e(IL,aHo),e(Oo,nHo),e(Oo,ut),M(qL,ut,null),e(ut,sHo),e(ut,ope),e(ope,lHo),e(ut,iHo),e(ut,fd),e(fd,dHo),e(fd,rpe),e(rpe,cHo),e(fd,fHo),e(fd,XV),e(XV,mHo),e(fd,gHo),e(ut,hHo),M(d5,ut,null),e(Oo,pHo),e(Oo,io),M(NL,io,null),e(io,uHo),e(io,tpe),e(tpe,_Ho),e(io,bHo),e(io,Da),e(Da,vHo),e(Da,ape),e(ape,FHo),e(Da,THo),e(Da,npe),e(npe,MHo),e(Da,EHo),e(Da,spe),e(spe,CHo),e(Da,wHo),e(io,AHo),e(io,Ga),e(Ga,c5),e(c5,lpe),e(lpe,yHo),e(c5,LHo),e(c5,zV),e(zV,xHo),e(c5,$Ho),e(Ga,kHo),e(Ga,f5),e(f5,ipe),e(ipe,SHo),e(f5,RHo),e(f5,QV),e(QV,BHo),e(f5,PHo),e(Ga,IHo),e(Ga,m5),e(m5,dpe),e(dpe,qHo),e(m5,NHo),e(m5,WV),e(WV,jHo),e(m5,DHo),e(Ga,GHo),e(Ga,g5),e(g5,cpe),e(cpe,OHo),e(g5,VHo),e(g5,HV),e(HV,XHo),e(g5,zHo),e(io,QHo),e(io,h5),e(h5,WHo),e(h5,fpe),e(fpe,HHo),e(h5,UHo),e(h5,mpe),e(mpe,JHo),e(io,YHo),M(p5,io,null),b(f,mIe,_),b(f,md,_),e(md,u5),e(u5,gpe),M(jL,gpe,null),e(md,KHo),e(md,hpe),e(hpe,ZHo),b(f,gIe,_),b(f,Vo,_),M(DL,Vo,null),e(Vo,eUo),e(Vo,gd),e(gd,oUo),e(gd,UV),e(UV,rUo),e(gd,tUo),e(gd,JV),e(JV,aUo),e(gd,nUo),e(Vo,sUo),e(Vo,GL),e(GL,lUo),e(GL,ppe),e(ppe,iUo),e(GL,dUo),e(Vo,cUo),e(Vo,_t),M(OL,_t,null),e(_t,fUo),e(_t,upe),e(upe,mUo),e(_t,gUo),e(_t,hd),e(hd,hUo),e(hd,_pe),e(_pe,pUo),e(hd,uUo),e(hd,YV),e(YV,_Uo),e(hd,bUo),e(_t,vUo),M(_5,_t,null),e(Vo,FUo),e(Vo,co),M(VL,co,null),e(co,TUo),e(co,bpe),e(bpe,MUo),e(co,EUo),e(co,Oa),e(Oa,CUo),e(Oa,vpe),e(vpe,wUo),e(Oa,AUo),e(Oa,Fpe),e(Fpe,yUo),e(Oa,LUo),e(Oa,Tpe),e(Tpe,xUo),e(Oa,$Uo),e(co,kUo),e(co,je),e(je,b5),e(b5,Mpe),e(Mpe,SUo),e(b5,RUo),e(b5,KV),e(KV,BUo),e(b5,PUo),e(je,IUo),e(je,v5),e(v5,Epe),e(Epe,qUo),e(v5,NUo),e(v5,ZV),e(ZV,jUo),e(v5,DUo),e(je,GUo),e(je,F5),e(F5,Cpe),e(Cpe,OUo),e(F5,VUo),e(F5,eX),e(eX,XUo),e(F5,zUo),e(je,QUo),e(je,T5),e(T5,wpe),e(wpe,WUo),e(T5,HUo),e(T5,oX),e(oX,UUo),e(T5,JUo),e(je,YUo),e(je,M5),e(M5,Ape),e(Ape,KUo),e(M5,ZUo),e(M5,rX),e(rX,eJo),e(M5,oJo),e(je,rJo),e(je,E5),e(E5,ype),e(ype,tJo),e(E5,aJo),e(E5,tX),e(tX,nJo),e(E5,sJo),e(je,lJo),e(je,C5),e(C5,Lpe),e(Lpe,iJo),e(C5,dJo),e(C5,aX),e(aX,cJo),e(C5,fJo),e(je,mJo),e(je,w5),e(w5,xpe),e(xpe,gJo),e(w5,hJo),e(w5,nX),e(nX,pJo),e(w5,uJo),e(co,_Jo),e(co,A5),e(A5,bJo),e(A5,$pe),e($pe,vJo),e(A5,FJo),e(A5,kpe),e(kpe,TJo),e(co,MJo),M(y5,co,null),b(f,hIe,_),b(f,pd,_),e(pd,L5),e(L5,Spe),M(XL,Spe,null),e(pd,EJo),e(pd,Rpe),e(Rpe,CJo),b(f,pIe,_),b(f,Xo,_),M(zL,Xo,null),e(Xo,wJo),e(Xo,ud),e(ud,AJo),e(ud,sX),e(sX,yJo),e(ud,LJo),e(ud,lX),e(lX,xJo),e(ud,$Jo),e(Xo,kJo),e(Xo,QL),e(QL,SJo),e(QL,Bpe),e(Bpe,RJo),e(QL,BJo),e(Xo,PJo),e(Xo,bt),M(WL,bt,null),e(bt,IJo),e(bt,Ppe),e(Ppe,qJo),e(bt,NJo),e(bt,_d),e(_d,jJo),e(_d,Ipe),e(Ipe,DJo),e(_d,GJo),e(_d,iX),e(iX,OJo),e(_d,VJo),e(bt,XJo),M(x5,bt,null),e(Xo,zJo),e(Xo,fo),M(HL,fo,null),e(fo,QJo),e(fo,qpe),e(qpe,WJo),e(fo,HJo),e(fo,Va),e(Va,UJo),e(Va,Npe),e(Npe,JJo),e(Va,YJo),e(Va,jpe),e(jpe,KJo),e(Va,ZJo),e(Va,Dpe),e(Dpe,eYo),e(Va,oYo),e(fo,rYo),e(fo,UL),e(UL,$5),e($5,Gpe),e(Gpe,tYo),e($5,aYo),e($5,dX),e(dX,nYo),e($5,sYo),e(UL,lYo),e(UL,k5),e(k5,Ope),e(Ope,iYo),e(k5,dYo),e(k5,cX),e(cX,cYo),e(k5,fYo),e(fo,mYo),e(fo,S5),e(S5,gYo),e(S5,Vpe),e(Vpe,hYo),e(S5,pYo),e(S5,Xpe),e(Xpe,uYo),e(fo,_Yo),M(R5,fo,null),b(f,uIe,_),b(f,bd,_),e(bd,B5),e(B5,zpe),M(JL,zpe,null),e(bd,bYo),e(bd,Qpe),e(Qpe,vYo),b(f,_Ie,_),b(f,zo,_),M(YL,zo,null),e(zo,FYo),e(zo,vd),e(vd,TYo),e(vd,fX),e(fX,MYo),e(vd,EYo),e(vd,mX),e(mX,CYo),e(vd,wYo),e(zo,AYo),e(zo,KL),e(KL,yYo),e(KL,Wpe),e(Wpe,LYo),e(KL,xYo),e(zo,$Yo),e(zo,vt),M(ZL,vt,null),e(vt,kYo),e(vt,Hpe),e(Hpe,SYo),e(vt,RYo),e(vt,Fd),e(Fd,BYo),e(Fd,Upe),e(Upe,PYo),e(Fd,IYo),e(Fd,gX),e(gX,qYo),e(Fd,NYo),e(vt,jYo),M(P5,vt,null),e(zo,DYo),e(zo,mo),M(e8,mo,null),e(mo,GYo),e(mo,Jpe),e(Jpe,OYo),e(mo,VYo),e(mo,Xa),e(Xa,XYo),e(Xa,Ype),e(Ype,zYo),e(Xa,QYo),e(Xa,Kpe),e(Kpe,WYo),e(Xa,HYo),e(Xa,Zpe),e(Zpe,UYo),e(Xa,JYo),e(mo,YYo),e(mo,za),e(za,I5),e(I5,eue),e(eue,KYo),e(I5,ZYo),e(I5,hX),e(hX,eKo),e(I5,oKo),e(za,rKo),e(za,q5),e(q5,oue),e(oue,tKo),e(q5,aKo),e(q5,pX),e(pX,nKo),e(q5,sKo),e(za,lKo),e(za,N5),e(N5,rue),e(rue,iKo),e(N5,dKo),e(N5,uX),e(uX,cKo),e(N5,fKo),e(za,mKo),e(za,j5),e(j5,tue),e(tue,gKo),e(j5,hKo),e(j5,_X),e(_X,pKo),e(j5,uKo),e(mo,_Ko),e(mo,D5),e(D5,bKo),e(D5,aue),e(aue,vKo),e(D5,FKo),e(D5,nue),e(nue,TKo),e(mo,MKo),M(G5,mo,null),b(f,bIe,_),b(f,Td,_),e(Td,O5),e(O5,sue),M(o8,sue,null),e(Td,EKo),e(Td,lue),e(lue,CKo),b(f,vIe,_),b(f,Qo,_),M(r8,Qo,null),e(Qo,wKo),e(Qo,Md),e(Md,AKo),e(Md,bX),e(bX,yKo),e(Md,LKo),e(Md,vX),e(vX,xKo),e(Md,$Ko),e(Qo,kKo),e(Qo,t8),e(t8,SKo),e(t8,iue),e(iue,RKo),e(t8,BKo),e(Qo,PKo),e(Qo,Ft),M(a8,Ft,null),e(Ft,IKo),e(Ft,due),e(due,qKo),e(Ft,NKo),e(Ft,Ed),e(Ed,jKo),e(Ed,cue),e(cue,DKo),e(Ed,GKo),e(Ed,FX),e(FX,OKo),e(Ed,VKo),e(Ft,XKo),M(V5,Ft,null),e(Qo,zKo),e(Qo,go),M(n8,go,null),e(go,QKo),e(go,fue),e(fue,WKo),e(go,HKo),e(go,Qa),e(Qa,UKo),e(Qa,mue),e(mue,JKo),e(Qa,YKo),e(Qa,gue),e(gue,KKo),e(Qa,ZKo),e(Qa,hue),e(hue,eZo),e(Qa,oZo),e(go,rZo),e(go,Cd),e(Cd,X5),e(X5,pue),e(pue,tZo),e(X5,aZo),e(X5,TX),e(TX,nZo),e(X5,sZo),e(Cd,lZo),e(Cd,z5),e(z5,uue),e(uue,iZo),e(z5,dZo),e(z5,MX),e(MX,cZo),e(z5,fZo),e(Cd,mZo),e(Cd,Q5),e(Q5,_ue),e(_ue,gZo),e(Q5,hZo),e(Q5,EX),e(EX,pZo),e(Q5,uZo),e(go,_Zo),e(go,W5),e(W5,bZo),e(W5,bue),e(bue,vZo),e(W5,FZo),e(W5,vue),e(vue,TZo),e(go,MZo),M(H5,go,null),b(f,FIe,_),b(f,wd,_),e(wd,U5),e(U5,Fue),M(s8,Fue,null),e(wd,EZo),e(wd,Tue),e(Tue,CZo),b(f,TIe,_),b(f,Wo,_),M(l8,Wo,null),e(Wo,wZo),e(Wo,Ad),e(Ad,AZo),e(Ad,CX),e(CX,yZo),e(Ad,LZo),e(Ad,wX),e(wX,xZo),e(Ad,$Zo),e(Wo,kZo),e(Wo,i8),e(i8,SZo),e(i8,Mue),e(Mue,RZo),e(i8,BZo),e(Wo,PZo),e(Wo,Tt),M(d8,Tt,null),e(Tt,IZo),e(Tt,Eue),e(Eue,qZo),e(Tt,NZo),e(Tt,yd),e(yd,jZo),e(yd,Cue),e(Cue,DZo),e(yd,GZo),e(yd,AX),e(AX,OZo),e(yd,VZo),e(Tt,XZo),M(J5,Tt,null),e(Wo,zZo),e(Wo,ho),M(c8,ho,null),e(ho,QZo),e(ho,wue),e(wue,WZo),e(ho,HZo),e(ho,Wa),e(Wa,UZo),e(Wa,Aue),e(Aue,JZo),e(Wa,YZo),e(Wa,yue),e(yue,KZo),e(Wa,ZZo),e(Wa,Lue),e(Lue,eer),e(Wa,oer),e(ho,rer),e(ho,f8),e(f8,Y5),e(Y5,xue),e(xue,ter),e(Y5,aer),e(Y5,yX),e(yX,ner),e(Y5,ser),e(f8,ler),e(f8,K5),e(K5,$ue),e($ue,ier),e(K5,der),e(K5,LX),e(LX,cer),e(K5,fer),e(ho,mer),e(ho,Z5),e(Z5,ger),e(Z5,kue),e(kue,her),e(Z5,per),e(Z5,Sue),e(Sue,uer),e(ho,_er),M(ev,ho,null),b(f,MIe,_),b(f,Ld,_),e(Ld,ov),e(ov,Rue),M(m8,Rue,null),e(Ld,ber),e(Ld,Bue),e(Bue,ver),b(f,EIe,_),b(f,Ho,_),M(g8,Ho,null),e(Ho,Fer),e(Ho,xd),e(xd,Ter),e(xd,xX),e(xX,Mer),e(xd,Eer),e(xd,$X),e($X,Cer),e(xd,wer),e(Ho,Aer),e(Ho,h8),e(h8,yer),e(h8,Pue),e(Pue,Ler),e(h8,xer),e(Ho,$er),e(Ho,Mt),M(p8,Mt,null),e(Mt,ker),e(Mt,Iue),e(Iue,Ser),e(Mt,Rer),e(Mt,$d),e($d,Ber),e($d,que),e(que,Per),e($d,Ier),e($d,kX),e(kX,qer),e($d,Ner),e(Mt,jer),M(rv,Mt,null),e(Ho,Der),e(Ho,po),M(u8,po,null),e(po,Ger),e(po,Nue),e(Nue,Oer),e(po,Ver),e(po,Ha),e(Ha,Xer),e(Ha,jue),e(jue,zer),e(Ha,Qer),e(Ha,Due),e(Due,Wer),e(Ha,Her),e(Ha,Gue),e(Gue,Uer),e(Ha,Jer),e(po,Yer),e(po,Oue),e(Oue,tv),e(tv,Vue),e(Vue,Ker),e(tv,Zer),e(tv,SX),e(SX,eor),e(tv,oor),e(po,ror),e(po,av),e(av,tor),e(av,Xue),e(Xue,aor),e(av,nor),e(av,zue),e(zue,sor),e(po,lor),M(nv,po,null),b(f,CIe,_),b(f,kd,_),e(kd,sv),e(sv,Que),M(_8,Que,null),e(kd,ior),e(kd,Wue),e(Wue,dor),b(f,wIe,_),b(f,Uo,_),M(b8,Uo,null),e(Uo,cor),e(Uo,Sd),e(Sd,mor),e(Sd,RX),e(RX,gor),e(Sd,hor),e(Sd,BX),e(BX,por),e(Sd,uor),e(Uo,_or),e(Uo,v8),e(v8,bor),e(v8,Hue),e(Hue,vor),e(v8,For),e(Uo,Tor),e(Uo,Et),M(F8,Et,null),e(Et,Mor),e(Et,Uue),e(Uue,Eor),e(Et,Cor),e(Et,Rd),e(Rd,wor),e(Rd,Jue),e(Jue,Aor),e(Rd,yor),e(Rd,PX),e(PX,Lor),e(Rd,xor),e(Et,$or),M(lv,Et,null),e(Uo,kor),e(Uo,uo),M(T8,uo,null),e(uo,Sor),e(uo,Yue),e(Yue,Ror),e(uo,Bor),e(uo,Ua),e(Ua,Por),e(Ua,Kue),e(Kue,Ior),e(Ua,qor),e(Ua,Zue),e(Zue,Nor),e(Ua,jor),e(Ua,e_e),e(e_e,Dor),e(Ua,Gor),e(uo,Oor),e(uo,Ja),e(Ja,iv),e(iv,o_e),e(o_e,Vor),e(iv,Xor),e(iv,IX),e(IX,zor),e(iv,Qor),e(Ja,Wor),e(Ja,dv),e(dv,r_e),e(r_e,Hor),e(dv,Uor),e(dv,qX),e(qX,Jor),e(dv,Yor),e(Ja,Kor),e(Ja,cv),e(cv,t_e),e(t_e,Zor),e(cv,err),e(cv,NX),e(NX,orr),e(cv,rrr),e(Ja,trr),e(Ja,fv),e(fv,a_e),e(a_e,arr),e(fv,nrr),e(fv,jX),e(jX,srr),e(fv,lrr),e(uo,irr),e(uo,mv),e(mv,drr),e(mv,n_e),e(n_e,crr),e(mv,frr),e(mv,s_e),e(s_e,mrr),e(uo,grr),M(gv,uo,null),b(f,AIe,_),b(f,Bd,_),e(Bd,hv),e(hv,l_e),M(M8,l_e,null),e(Bd,hrr),e(Bd,i_e),e(i_e,prr),b(f,yIe,_),b(f,Jo,_),M(E8,Jo,null),e(Jo,urr),e(Jo,Pd),e(Pd,_rr),e(Pd,DX),e(DX,brr),e(Pd,vrr),e(Pd,GX),e(GX,Frr),e(Pd,Trr),e(Jo,Mrr),e(Jo,C8),e(C8,Err),e(C8,d_e),e(d_e,Crr),e(C8,wrr),e(Jo,Arr),e(Jo,Ct),M(w8,Ct,null),e(Ct,yrr),e(Ct,c_e),e(c_e,Lrr),e(Ct,xrr),e(Ct,Id),e(Id,$rr),e(Id,f_e),e(f_e,krr),e(Id,Srr),e(Id,OX),e(OX,Rrr),e(Id,Brr),e(Ct,Prr),M(pv,Ct,null),e(Jo,Irr),e(Jo,_o),M(A8,_o,null),e(_o,qrr),e(_o,m_e),e(m_e,Nrr),e(_o,jrr),e(_o,Ya),e(Ya,Drr),e(Ya,g_e),e(g_e,Grr),e(Ya,Orr),e(Ya,h_e),e(h_e,Vrr),e(Ya,Xrr),e(Ya,p_e),e(p_e,zrr),e(Ya,Qrr),e(_o,Wrr),e(_o,u_e),e(u_e,uv),e(uv,__e),e(__e,Hrr),e(uv,Urr),e(uv,VX),e(VX,Jrr),e(uv,Yrr),e(_o,Krr),e(_o,_v),e(_v,Zrr),e(_v,b_e),e(b_e,etr),e(_v,otr),e(_v,v_e),e(v_e,rtr),e(_o,ttr),M(bv,_o,null),b(f,LIe,_),b(f,qd,_),e(qd,vv),e(vv,F_e),M(y8,F_e,null),e(qd,atr),e(qd,T_e),e(T_e,ntr),b(f,xIe,_),b(f,Yo,_),M(L8,Yo,null),e(Yo,str),e(Yo,Nd),e(Nd,ltr),e(Nd,XX),e(XX,itr),e(Nd,dtr),e(Nd,zX),e(zX,ctr),e(Nd,ftr),e(Yo,mtr),e(Yo,x8),e(x8,gtr),e(x8,M_e),e(M_e,htr),e(x8,ptr),e(Yo,utr),e(Yo,wt),M($8,wt,null),e(wt,_tr),e(wt,E_e),e(E_e,btr),e(wt,vtr),e(wt,jd),e(jd,Ftr),e(jd,C_e),e(C_e,Ttr),e(jd,Mtr),e(jd,QX),e(QX,Etr),e(jd,Ctr),e(wt,wtr),M(Fv,wt,null),e(Yo,Atr),e(Yo,wr),M(k8,wr,null),e(wr,ytr),e(wr,w_e),e(w_e,Ltr),e(wr,xtr),e(wr,Ka),e(Ka,$tr),e(Ka,A_e),e(A_e,ktr),e(Ka,Str),e(Ka,y_e),e(y_e,Rtr),e(Ka,Btr),e(Ka,L_e),e(L_e,Ptr),e(Ka,Itr),e(wr,qtr),e(wr,j),e(j,Tv),e(Tv,x_e),e(x_e,Ntr),e(Tv,jtr),e(Tv,WX),e(WX,Dtr),e(Tv,Gtr),e(j,Otr),e(j,Mv),e(Mv,$_e),e($_e,Vtr),e(Mv,Xtr),e(Mv,HX),e(HX,ztr),e(Mv,Qtr),e(j,Wtr),e(j,Ev),e(Ev,k_e),e(k_e,Htr),e(Ev,Utr),e(Ev,UX),e(UX,Jtr),e(Ev,Ytr),e(j,Ktr),e(j,Cv),e(Cv,S_e),e(S_e,Ztr),e(Cv,ear),e(Cv,JX),e(JX,oar),e(Cv,rar),e(j,tar),e(j,wv),e(wv,R_e),e(R_e,aar),e(wv,nar),e(wv,YX),e(YX,sar),e(wv,lar),e(j,iar),e(j,Av),e(Av,B_e),e(B_e,dar),e(Av,car),e(Av,KX),e(KX,far),e(Av,mar),e(j,gar),e(j,yv),e(yv,P_e),e(P_e,har),e(yv,par),e(yv,ZX),e(ZX,uar),e(yv,_ar),e(j,bar),e(j,Lv),e(Lv,I_e),e(I_e,Far),e(Lv,Tar),e(Lv,ez),e(ez,Mar),e(Lv,Ear),e(j,Car),e(j,xv),e(xv,q_e),e(q_e,war),e(xv,Aar),e(xv,oz),e(oz,yar),e(xv,Lar),e(j,xar),e(j,$v),e($v,N_e),e(N_e,$ar),e($v,kar),e($v,rz),e(rz,Sar),e($v,Rar),e(j,Bar),e(j,kv),e(kv,j_e),e(j_e,Par),e(kv,Iar),e(kv,tz),e(tz,qar),e(kv,Nar),e(j,jar),e(j,Sv),e(Sv,D_e),e(D_e,Dar),e(Sv,Gar),e(Sv,az),e(az,Oar),e(Sv,Var),e(j,Xar),e(j,Rv),e(Rv,G_e),e(G_e,zar),e(Rv,Qar),e(Rv,nz),e(nz,War),e(Rv,Har),e(j,Uar),e(j,Bv),e(Bv,O_e),e(O_e,Jar),e(Bv,Yar),e(Bv,sz),e(sz,Kar),e(Bv,Zar),e(j,enr),e(j,Pv),e(Pv,V_e),e(V_e,onr),e(Pv,rnr),e(Pv,lz),e(lz,tnr),e(Pv,anr),e(j,nnr),e(j,Iv),e(Iv,X_e),e(X_e,snr),e(Iv,lnr),e(Iv,iz),e(iz,inr),e(Iv,dnr),e(j,cnr),e(j,qv),e(qv,z_e),e(z_e,fnr),e(qv,mnr),e(qv,dz),e(dz,gnr),e(qv,hnr),e(j,pnr),e(j,Bs),e(Bs,Q_e),e(Q_e,unr),e(Bs,_nr),e(Bs,cz),e(cz,bnr),e(Bs,vnr),e(Bs,fz),e(fz,Fnr),e(Bs,Tnr),e(j,Mnr),e(j,Nv),e(Nv,W_e),e(W_e,Enr),e(Nv,Cnr),e(Nv,mz),e(mz,wnr),e(Nv,Anr),e(j,ynr),e(j,jv),e(jv,H_e),e(H_e,Lnr),e(jv,xnr),e(jv,gz),e(gz,$nr),e(jv,knr),e(j,Snr),e(j,Dv),e(Dv,U_e),e(U_e,Rnr),e(Dv,Bnr),e(Dv,hz),e(hz,Pnr),e(Dv,Inr),e(j,qnr),e(j,Gv),e(Gv,J_e),e(J_e,Nnr),e(Gv,jnr),e(Gv,pz),e(pz,Dnr),e(Gv,Gnr),e(j,Onr),e(j,Ov),e(Ov,Y_e),e(Y_e,Vnr),e(Ov,Xnr),e(Ov,uz),e(uz,znr),e(Ov,Qnr),e(j,Wnr),e(j,Vv),e(Vv,K_e),e(K_e,Hnr),e(Vv,Unr),e(Vv,_z),e(_z,Jnr),e(Vv,Ynr),e(j,Knr),e(j,Xv),e(Xv,Z_e),e(Z_e,Znr),e(Xv,esr),e(Xv,bz),e(bz,osr),e(Xv,rsr),e(j,tsr),e(j,zv),e(zv,e6e),e(e6e,asr),e(zv,nsr),e(zv,vz),e(vz,ssr),e(zv,lsr),e(j,isr),e(j,Qv),e(Qv,o6e),e(o6e,dsr),e(Qv,csr),e(Qv,Fz),e(Fz,fsr),e(Qv,msr),e(j,gsr),e(j,Wv),e(Wv,r6e),e(r6e,hsr),e(Wv,psr),e(Wv,Tz),e(Tz,usr),e(Wv,_sr),e(j,bsr),e(j,Hv),e(Hv,t6e),e(t6e,vsr),e(Hv,Fsr),e(Hv,Mz),e(Mz,Tsr),e(Hv,Msr),e(j,Esr),e(j,Uv),e(Uv,a6e),e(a6e,Csr),e(Uv,wsr),e(Uv,Ez),e(Ez,Asr),e(Uv,ysr),e(j,Lsr),e(j,Jv),e(Jv,n6e),e(n6e,xsr),e(Jv,$sr),e(Jv,Cz),e(Cz,ksr),e(Jv,Ssr),e(j,Rsr),e(j,Yv),e(Yv,s6e),e(s6e,Bsr),e(Yv,Psr),e(Yv,wz),e(wz,Isr),e(Yv,qsr),e(j,Nsr),e(j,Kv),e(Kv,l6e),e(l6e,jsr),e(Kv,Dsr),e(Kv,Az),e(Az,Gsr),e(Kv,Osr),e(j,Vsr),e(j,Zv),e(Zv,i6e),e(i6e,Xsr),e(Zv,zsr),e(Zv,yz),e(yz,Qsr),e(Zv,Wsr),e(j,Hsr),e(j,eF),e(eF,d6e),e(d6e,Usr),e(eF,Jsr),e(eF,Lz),e(Lz,Ysr),e(eF,Ksr),e(j,Zsr),e(j,oF),e(oF,c6e),e(c6e,elr),e(oF,olr),e(oF,xz),e(xz,rlr),e(oF,tlr),e(j,alr),e(j,rF),e(rF,f6e),e(f6e,nlr),e(rF,slr),e(rF,$z),e($z,llr),e(rF,ilr),e(j,dlr),e(j,tF),e(tF,m6e),e(m6e,clr),e(tF,flr),e(tF,kz),e(kz,mlr),e(tF,glr),e(j,hlr),e(j,aF),e(aF,g6e),e(g6e,plr),e(aF,ulr),e(aF,Sz),e(Sz,_lr),e(aF,blr),e(j,vlr),e(j,nF),e(nF,h6e),e(h6e,Flr),e(nF,Tlr),e(nF,Rz),e(Rz,Mlr),e(nF,Elr),e(j,Clr),e(j,sF),e(sF,p6e),e(p6e,wlr),e(sF,Alr),e(sF,Bz),e(Bz,ylr),e(sF,Llr),e(j,xlr),e(j,lF),e(lF,u6e),e(u6e,$lr),e(lF,klr),e(lF,Pz),e(Pz,Slr),e(lF,Rlr),e(j,Blr),e(j,iF),e(iF,_6e),e(_6e,Plr),e(iF,Ilr),e(iF,Iz),e(Iz,qlr),e(iF,Nlr),e(j,jlr),e(j,dF),e(dF,b6e),e(b6e,Dlr),e(dF,Glr),e(dF,qz),e(qz,Olr),e(dF,Vlr),e(j,Xlr),e(j,cF),e(cF,v6e),e(v6e,zlr),e(cF,Qlr),e(cF,Nz),e(Nz,Wlr),e(cF,Hlr),e(wr,Ulr),M(fF,wr,null),b(f,$Ie,_),b(f,Dd,_),e(Dd,mF),e(mF,F6e),M(S8,F6e,null),e(Dd,Jlr),e(Dd,T6e),e(T6e,Ylr),b(f,kIe,_),b(f,Ko,_),M(R8,Ko,null),e(Ko,Klr),e(Ko,Gd),e(Gd,Zlr),e(Gd,jz),e(jz,eir),e(Gd,oir),e(Gd,Dz),e(Dz,rir),e(Gd,tir),e(Ko,air),e(Ko,B8),e(B8,nir),e(B8,M6e),e(M6e,sir),e(B8,lir),e(Ko,iir),e(Ko,At),M(P8,At,null),e(At,dir),e(At,E6e),e(E6e,cir),e(At,fir),e(At,Od),e(Od,mir),e(Od,C6e),e(C6e,gir),e(Od,hir),e(Od,Gz),e(Gz,pir),e(Od,uir),e(At,_ir),M(gF,At,null),e(Ko,bir),e(Ko,Ar),M(I8,Ar,null),e(Ar,vir),e(Ar,w6e),e(w6e,Fir),e(Ar,Tir),e(Ar,Za),e(Za,Mir),e(Za,A6e),e(A6e,Eir),e(Za,Cir),e(Za,y6e),e(y6e,wir),e(Za,Air),e(Za,L6e),e(L6e,yir),e(Za,Lir),e(Ar,xir),e(Ar,se),e(se,hF),e(hF,x6e),e(x6e,$ir),e(hF,kir),e(hF,Oz),e(Oz,Sir),e(hF,Rir),e(se,Bir),e(se,pF),e(pF,$6e),e($6e,Pir),e(pF,Iir),e(pF,Vz),e(Vz,qir),e(pF,Nir),e(se,jir),e(se,uF),e(uF,k6e),e(k6e,Dir),e(uF,Gir),e(uF,Xz),e(Xz,Oir),e(uF,Vir),e(se,Xir),e(se,_F),e(_F,S6e),e(S6e,zir),e(_F,Qir),e(_F,zz),e(zz,Wir),e(_F,Hir),e(se,Uir),e(se,bF),e(bF,R6e),e(R6e,Jir),e(bF,Yir),e(bF,Qz),e(Qz,Kir),e(bF,Zir),e(se,edr),e(se,vF),e(vF,B6e),e(B6e,odr),e(vF,rdr),e(vF,Wz),e(Wz,tdr),e(vF,adr),e(se,ndr),e(se,FF),e(FF,P6e),e(P6e,sdr),e(FF,ldr),e(FF,Hz),e(Hz,idr),e(FF,ddr),e(se,cdr),e(se,TF),e(TF,I6e),e(I6e,fdr),e(TF,mdr),e(TF,Uz),e(Uz,gdr),e(TF,hdr),e(se,pdr),e(se,MF),e(MF,q6e),e(q6e,udr),e(MF,_dr),e(MF,Jz),e(Jz,bdr),e(MF,vdr),e(se,Fdr),e(se,EF),e(EF,N6e),e(N6e,Tdr),e(EF,Mdr),e(EF,Yz),e(Yz,Edr),e(EF,Cdr),e(se,wdr),e(se,CF),e(CF,j6e),e(j6e,Adr),e(CF,ydr),e(CF,Kz),e(Kz,Ldr),e(CF,xdr),e(se,$dr),e(se,wF),e(wF,D6e),e(D6e,kdr),e(wF,Sdr),e(wF,Zz),e(Zz,Rdr),e(wF,Bdr),e(se,Pdr),e(se,AF),e(AF,G6e),e(G6e,Idr),e(AF,qdr),e(AF,eQ),e(eQ,Ndr),e(AF,jdr),e(se,Ddr),e(se,yF),e(yF,O6e),e(O6e,Gdr),e(yF,Odr),e(yF,oQ),e(oQ,Vdr),e(yF,Xdr),e(se,zdr),e(se,LF),e(LF,V6e),e(V6e,Qdr),e(LF,Wdr),e(LF,rQ),e(rQ,Hdr),e(LF,Udr),e(se,Jdr),e(se,xF),e(xF,X6e),e(X6e,Ydr),e(xF,Kdr),e(xF,tQ),e(tQ,Zdr),e(xF,ecr),e(se,ocr),e(se,$F),e($F,z6e),e(z6e,rcr),e($F,tcr),e($F,aQ),e(aQ,acr),e($F,ncr),e(se,scr),e(se,kF),e(kF,Q6e),e(Q6e,lcr),e(kF,icr),e(kF,nQ),e(nQ,dcr),e(kF,ccr),e(se,fcr),e(se,SF),e(SF,W6e),e(W6e,mcr),e(SF,gcr),e(SF,sQ),e(sQ,hcr),e(SF,pcr),e(se,ucr),e(se,RF),e(RF,H6e),e(H6e,_cr),e(RF,bcr),e(RF,lQ),e(lQ,vcr),e(RF,Fcr),e(se,Tcr),e(se,BF),e(BF,U6e),e(U6e,Mcr),e(BF,Ecr),e(BF,iQ),e(iQ,Ccr),e(BF,wcr),e(se,Acr),e(se,PF),e(PF,J6e),e(J6e,ycr),e(PF,Lcr),e(PF,dQ),e(dQ,xcr),e(PF,$cr),e(se,kcr),e(se,IF),e(IF,Y6e),e(Y6e,Scr),e(IF,Rcr),e(IF,cQ),e(cQ,Bcr),e(IF,Pcr),e(Ar,Icr),M(qF,Ar,null),b(f,SIe,_),b(f,Vd,_),e(Vd,NF),e(NF,K6e),M(q8,K6e,null),e(Vd,qcr),e(Vd,Z6e),e(Z6e,Ncr),b(f,RIe,_),b(f,Zo,_),M(N8,Zo,null),e(Zo,jcr),e(Zo,Xd),e(Xd,Dcr),e(Xd,fQ),e(fQ,Gcr),e(Xd,Ocr),e(Xd,mQ),e(mQ,Vcr),e(Xd,Xcr),e(Zo,zcr),e(Zo,j8),e(j8,Qcr),e(j8,e1e),e(e1e,Wcr),e(j8,Hcr),e(Zo,Ucr),e(Zo,yt),M(D8,yt,null),e(yt,Jcr),e(yt,o1e),e(o1e,Ycr),e(yt,Kcr),e(yt,zd),e(zd,Zcr),e(zd,r1e),e(r1e,efr),e(zd,ofr),e(zd,gQ),e(gQ,rfr),e(zd,tfr),e(yt,afr),M(jF,yt,null),e(Zo,nfr),e(Zo,yr),M(G8,yr,null),e(yr,sfr),e(yr,t1e),e(t1e,lfr),e(yr,ifr),e(yr,en),e(en,dfr),e(en,a1e),e(a1e,cfr),e(en,ffr),e(en,n1e),e(n1e,mfr),e(en,gfr),e(en,s1e),e(s1e,hfr),e(en,pfr),e(yr,ufr),e(yr,Te),e(Te,DF),e(DF,l1e),e(l1e,_fr),e(DF,bfr),e(DF,hQ),e(hQ,vfr),e(DF,Ffr),e(Te,Tfr),e(Te,GF),e(GF,i1e),e(i1e,Mfr),e(GF,Efr),e(GF,pQ),e(pQ,Cfr),e(GF,wfr),e(Te,Afr),e(Te,OF),e(OF,d1e),e(d1e,yfr),e(OF,Lfr),e(OF,uQ),e(uQ,xfr),e(OF,$fr),e(Te,kfr),e(Te,VF),e(VF,c1e),e(c1e,Sfr),e(VF,Rfr),e(VF,_Q),e(_Q,Bfr),e(VF,Pfr),e(Te,Ifr),e(Te,XF),e(XF,f1e),e(f1e,qfr),e(XF,Nfr),e(XF,bQ),e(bQ,jfr),e(XF,Dfr),e(Te,Gfr),e(Te,zF),e(zF,m1e),e(m1e,Ofr),e(zF,Vfr),e(zF,vQ),e(vQ,Xfr),e(zF,zfr),e(Te,Qfr),e(Te,QF),e(QF,g1e),e(g1e,Wfr),e(QF,Hfr),e(QF,FQ),e(FQ,Ufr),e(QF,Jfr),e(Te,Yfr),e(Te,WF),e(WF,h1e),e(h1e,Kfr),e(WF,Zfr),e(WF,TQ),e(TQ,emr),e(WF,omr),e(Te,rmr),e(Te,HF),e(HF,p1e),e(p1e,tmr),e(HF,amr),e(HF,MQ),e(MQ,nmr),e(HF,smr),e(Te,lmr),e(Te,UF),e(UF,u1e),e(u1e,imr),e(UF,dmr),e(UF,EQ),e(EQ,cmr),e(UF,fmr),e(Te,mmr),e(Te,JF),e(JF,_1e),e(_1e,gmr),e(JF,hmr),e(JF,CQ),e(CQ,pmr),e(JF,umr),e(Te,_mr),e(Te,YF),e(YF,b1e),e(b1e,bmr),e(YF,vmr),e(YF,wQ),e(wQ,Fmr),e(YF,Tmr),e(yr,Mmr),M(KF,yr,null),b(f,BIe,_),b(f,Qd,_),e(Qd,ZF),e(ZF,v1e),M(O8,v1e,null),e(Qd,Emr),e(Qd,F1e),e(F1e,Cmr),b(f,PIe,_),b(f,er,_),M(V8,er,null),e(er,wmr),e(er,Wd),e(Wd,Amr),e(Wd,AQ),e(AQ,ymr),e(Wd,Lmr),e(Wd,yQ),e(yQ,xmr),e(Wd,$mr),e(er,kmr),e(er,X8),e(X8,Smr),e(X8,T1e),e(T1e,Rmr),e(X8,Bmr),e(er,Pmr),e(er,Lt),M(z8,Lt,null),e(Lt,Imr),e(Lt,M1e),e(M1e,qmr),e(Lt,Nmr),e(Lt,Hd),e(Hd,jmr),e(Hd,E1e),e(E1e,Dmr),e(Hd,Gmr),e(Hd,LQ),e(LQ,Omr),e(Hd,Vmr),e(Lt,Xmr),M(eT,Lt,null),e(er,zmr),e(er,Lr),M(Q8,Lr,null),e(Lr,Qmr),e(Lr,C1e),e(C1e,Wmr),e(Lr,Hmr),e(Lr,on),e(on,Umr),e(on,w1e),e(w1e,Jmr),e(on,Ymr),e(on,A1e),e(A1e,Kmr),e(on,Zmr),e(on,y1e),e(y1e,egr),e(on,ogr),e(Lr,rgr),e(Lr,Ud),e(Ud,oT),e(oT,L1e),e(L1e,tgr),e(oT,agr),e(oT,xQ),e(xQ,ngr),e(oT,sgr),e(Ud,lgr),e(Ud,rT),e(rT,x1e),e(x1e,igr),e(rT,dgr),e(rT,$Q),e($Q,cgr),e(rT,fgr),e(Ud,mgr),e(Ud,tT),e(tT,$1e),e($1e,ggr),e(tT,hgr),e(tT,kQ),e(kQ,pgr),e(tT,ugr),e(Lr,_gr),M(aT,Lr,null),b(f,IIe,_),b(f,Jd,_),e(Jd,nT),e(nT,k1e),M(W8,k1e,null),e(Jd,bgr),e(Jd,S1e),e(S1e,vgr),b(f,qIe,_),b(f,or,_),M(H8,or,null),e(or,Fgr),e(or,Yd),e(Yd,Tgr),e(Yd,SQ),e(SQ,Mgr),e(Yd,Egr),e(Yd,RQ),e(RQ,Cgr),e(Yd,wgr),e(or,Agr),e(or,U8),e(U8,ygr),e(U8,R1e),e(R1e,Lgr),e(U8,xgr),e(or,$gr),e(or,xt),M(J8,xt,null),e(xt,kgr),e(xt,B1e),e(B1e,Sgr),e(xt,Rgr),e(xt,Kd),e(Kd,Bgr),e(Kd,P1e),e(P1e,Pgr),e(Kd,Igr),e(Kd,BQ),e(BQ,qgr),e(Kd,Ngr),e(xt,jgr),M(sT,xt,null),e(or,Dgr),e(or,xr),M(Y8,xr,null),e(xr,Ggr),e(xr,I1e),e(I1e,Ogr),e(xr,Vgr),e(xr,rn),e(rn,Xgr),e(rn,q1e),e(q1e,zgr),e(rn,Qgr),e(rn,N1e),e(N1e,Wgr),e(rn,Hgr),e(rn,j1e),e(j1e,Ugr),e(rn,Jgr),e(xr,Ygr),e(xr,ie),e(ie,lT),e(lT,D1e),e(D1e,Kgr),e(lT,Zgr),e(lT,PQ),e(PQ,ehr),e(lT,ohr),e(ie,rhr),e(ie,iT),e(iT,G1e),e(G1e,thr),e(iT,ahr),e(iT,IQ),e(IQ,nhr),e(iT,shr),e(ie,lhr),e(ie,dT),e(dT,O1e),e(O1e,ihr),e(dT,dhr),e(dT,qQ),e(qQ,chr),e(dT,fhr),e(ie,mhr),e(ie,cT),e(cT,V1e),e(V1e,ghr),e(cT,hhr),e(cT,NQ),e(NQ,phr),e(cT,uhr),e(ie,_hr),e(ie,fT),e(fT,X1e),e(X1e,bhr),e(fT,vhr),e(fT,jQ),e(jQ,Fhr),e(fT,Thr),e(ie,Mhr),e(ie,mT),e(mT,z1e),e(z1e,Ehr),e(mT,Chr),e(mT,DQ),e(DQ,whr),e(mT,Ahr),e(ie,yhr),e(ie,gT),e(gT,Q1e),e(Q1e,Lhr),e(gT,xhr),e(gT,GQ),e(GQ,$hr),e(gT,khr),e(ie,Shr),e(ie,hT),e(hT,W1e),e(W1e,Rhr),e(hT,Bhr),e(hT,OQ),e(OQ,Phr),e(hT,Ihr),e(ie,qhr),e(ie,pT),e(pT,H1e),e(H1e,Nhr),e(pT,jhr),e(pT,VQ),e(VQ,Dhr),e(pT,Ghr),e(ie,Ohr),e(ie,uT),e(uT,U1e),e(U1e,Vhr),e(uT,Xhr),e(uT,XQ),e(XQ,zhr),e(uT,Qhr),e(ie,Whr),e(ie,_T),e(_T,J1e),e(J1e,Hhr),e(_T,Uhr),e(_T,zQ),e(zQ,Jhr),e(_T,Yhr),e(ie,Khr),e(ie,bT),e(bT,Y1e),e(Y1e,Zhr),e(bT,epr),e(bT,QQ),e(QQ,opr),e(bT,rpr),e(ie,tpr),e(ie,vT),e(vT,K1e),e(K1e,apr),e(vT,npr),e(vT,WQ),e(WQ,spr),e(vT,lpr),e(ie,ipr),e(ie,FT),e(FT,Z1e),e(Z1e,dpr),e(FT,cpr),e(FT,HQ),e(HQ,fpr),e(FT,mpr),e(ie,gpr),e(ie,TT),e(TT,ebe),e(ebe,hpr),e(TT,ppr),e(TT,UQ),e(UQ,upr),e(TT,_pr),e(ie,bpr),e(ie,MT),e(MT,obe),e(obe,vpr),e(MT,Fpr),e(MT,JQ),e(JQ,Tpr),e(MT,Mpr),e(ie,Epr),e(ie,ET),e(ET,rbe),e(rbe,Cpr),e(ET,wpr),e(ET,YQ),e(YQ,Apr),e(ET,ypr),e(ie,Lpr),e(ie,CT),e(CT,tbe),e(tbe,xpr),e(CT,$pr),e(CT,KQ),e(KQ,kpr),e(CT,Spr),e(ie,Rpr),e(ie,wT),e(wT,abe),e(abe,Bpr),e(wT,Ppr),e(wT,ZQ),e(ZQ,Ipr),e(wT,qpr),e(ie,Npr),e(ie,AT),e(AT,nbe),e(nbe,jpr),e(AT,Dpr),e(AT,eW),e(eW,Gpr),e(AT,Opr),e(xr,Vpr),M(yT,xr,null),b(f,NIe,_),b(f,Zd,_),e(Zd,LT),e(LT,sbe),M(K8,sbe,null),e(Zd,Xpr),e(Zd,lbe),e(lbe,zpr),b(f,jIe,_),b(f,rr,_),M(Z8,rr,null),e(rr,Qpr),e(rr,ec),e(ec,Wpr),e(ec,oW),e(oW,Hpr),e(ec,Upr),e(ec,rW),e(rW,Jpr),e(ec,Ypr),e(rr,Kpr),e(rr,ex),e(ex,Zpr),e(ex,ibe),e(ibe,eur),e(ex,our),e(rr,rur),e(rr,$t),M(ox,$t,null),e($t,tur),e($t,dbe),e(dbe,aur),e($t,nur),e($t,oc),e(oc,sur),e(oc,cbe),e(cbe,lur),e(oc,iur),e(oc,tW),e(tW,dur),e(oc,cur),e($t,fur),M(xT,$t,null),e(rr,mur),e(rr,$r),M(rx,$r,null),e($r,gur),e($r,fbe),e(fbe,hur),e($r,pur),e($r,tn),e(tn,uur),e(tn,mbe),e(mbe,_ur),e(tn,bur),e(tn,gbe),e(gbe,vur),e(tn,Fur),e(tn,hbe),e(hbe,Tur),e(tn,Mur),e($r,Eur),e($r,ye),e(ye,$T),e($T,pbe),e(pbe,Cur),e($T,wur),e($T,aW),e(aW,Aur),e($T,yur),e(ye,Lur),e(ye,kT),e(kT,ube),e(ube,xur),e(kT,$ur),e(kT,nW),e(nW,kur),e(kT,Sur),e(ye,Rur),e(ye,ST),e(ST,_be),e(_be,Bur),e(ST,Pur),e(ST,sW),e(sW,Iur),e(ST,qur),e(ye,Nur),e(ye,RT),e(RT,bbe),e(bbe,jur),e(RT,Dur),e(RT,lW),e(lW,Gur),e(RT,Our),e(ye,Vur),e(ye,BT),e(BT,vbe),e(vbe,Xur),e(BT,zur),e(BT,iW),e(iW,Qur),e(BT,Wur),e(ye,Hur),e(ye,PT),e(PT,Fbe),e(Fbe,Uur),e(PT,Jur),e(PT,dW),e(dW,Yur),e(PT,Kur),e(ye,Zur),e(ye,IT),e(IT,Tbe),e(Tbe,e_r),e(IT,o_r),e(IT,cW),e(cW,r_r),e(IT,t_r),e(ye,a_r),e(ye,qT),e(qT,Mbe),e(Mbe,n_r),e(qT,s_r),e(qT,fW),e(fW,l_r),e(qT,i_r),e(ye,d_r),e(ye,NT),e(NT,Ebe),e(Ebe,c_r),e(NT,f_r),e(NT,mW),e(mW,m_r),e(NT,g_r),e(ye,h_r),e(ye,jT),e(jT,Cbe),e(Cbe,p_r),e(jT,u_r),e(jT,gW),e(gW,__r),e(jT,b_r),e($r,v_r),M(DT,$r,null),b(f,DIe,_),b(f,rc,_),e(rc,GT),e(GT,wbe),M(tx,wbe,null),e(rc,F_r),e(rc,Abe),e(Abe,T_r),b(f,GIe,_),b(f,tr,_),M(ax,tr,null),e(tr,M_r),e(tr,tc),e(tc,E_r),e(tc,hW),e(hW,C_r),e(tc,w_r),e(tc,pW),e(pW,A_r),e(tc,y_r),e(tr,L_r),e(tr,nx),e(nx,x_r),e(nx,ybe),e(ybe,$_r),e(nx,k_r),e(tr,S_r),e(tr,kt),M(sx,kt,null),e(kt,R_r),e(kt,Lbe),e(Lbe,B_r),e(kt,P_r),e(kt,ac),e(ac,I_r),e(ac,xbe),e(xbe,q_r),e(ac,N_r),e(ac,uW),e(uW,j_r),e(ac,D_r),e(kt,G_r),M(OT,kt,null),e(tr,O_r),e(tr,kr),M(lx,kr,null),e(kr,V_r),e(kr,$be),e($be,X_r),e(kr,z_r),e(kr,an),e(an,Q_r),e(an,kbe),e(kbe,W_r),e(an,H_r),e(an,Sbe),e(Sbe,U_r),e(an,J_r),e(an,Rbe),e(Rbe,Y_r),e(an,K_r),e(kr,Z_r),e(kr,Z),e(Z,VT),e(VT,Bbe),e(Bbe,e6r),e(VT,o6r),e(VT,_W),e(_W,r6r),e(VT,t6r),e(Z,a6r),e(Z,XT),e(XT,Pbe),e(Pbe,n6r),e(XT,s6r),e(XT,bW),e(bW,l6r),e(XT,i6r),e(Z,d6r),e(Z,zT),e(zT,Ibe),e(Ibe,c6r),e(zT,f6r),e(zT,vW),e(vW,m6r),e(zT,g6r),e(Z,h6r),e(Z,QT),e(QT,qbe),e(qbe,p6r),e(QT,u6r),e(QT,FW),e(FW,_6r),e(QT,b6r),e(Z,v6r),e(Z,WT),e(WT,Nbe),e(Nbe,F6r),e(WT,T6r),e(WT,TW),e(TW,M6r),e(WT,E6r),e(Z,C6r),e(Z,HT),e(HT,jbe),e(jbe,w6r),e(HT,A6r),e(HT,MW),e(MW,y6r),e(HT,L6r),e(Z,x6r),e(Z,UT),e(UT,Dbe),e(Dbe,$6r),e(UT,k6r),e(UT,EW),e(EW,S6r),e(UT,R6r),e(Z,B6r),e(Z,JT),e(JT,Gbe),e(Gbe,P6r),e(JT,I6r),e(JT,CW),e(CW,q6r),e(JT,N6r),e(Z,j6r),e(Z,YT),e(YT,Obe),e(Obe,D6r),e(YT,G6r),e(YT,wW),e(wW,O6r),e(YT,V6r),e(Z,X6r),e(Z,KT),e(KT,Vbe),e(Vbe,z6r),e(KT,Q6r),e(KT,AW),e(AW,W6r),e(KT,H6r),e(Z,U6r),e(Z,ZT),e(ZT,Xbe),e(Xbe,J6r),e(ZT,Y6r),e(ZT,yW),e(yW,K6r),e(ZT,Z6r),e(Z,e1r),e(Z,eM),e(eM,zbe),e(zbe,o1r),e(eM,r1r),e(eM,LW),e(LW,t1r),e(eM,a1r),e(Z,n1r),e(Z,oM),e(oM,Qbe),e(Qbe,s1r),e(oM,l1r),e(oM,xW),e(xW,i1r),e(oM,d1r),e(Z,c1r),e(Z,rM),e(rM,Wbe),e(Wbe,f1r),e(rM,m1r),e(rM,$W),e($W,g1r),e(rM,h1r),e(Z,p1r),e(Z,tM),e(tM,Hbe),e(Hbe,u1r),e(tM,_1r),e(tM,kW),e(kW,b1r),e(tM,v1r),e(Z,F1r),e(Z,aM),e(aM,Ube),e(Ube,T1r),e(aM,M1r),e(aM,SW),e(SW,E1r),e(aM,C1r),e(Z,w1r),e(Z,nM),e(nM,Jbe),e(Jbe,A1r),e(nM,y1r),e(nM,RW),e(RW,L1r),e(nM,x1r),e(Z,$1r),e(Z,sM),e(sM,Ybe),e(Ybe,k1r),e(sM,S1r),e(sM,BW),e(BW,R1r),e(sM,B1r),e(Z,P1r),e(Z,lM),e(lM,Kbe),e(Kbe,I1r),e(lM,q1r),e(lM,PW),e(PW,N1r),e(lM,j1r),e(Z,D1r),e(Z,iM),e(iM,Zbe),e(Zbe,G1r),e(iM,O1r),e(iM,IW),e(IW,V1r),e(iM,X1r),e(Z,z1r),e(Z,dM),e(dM,e4e),e(e4e,Q1r),e(dM,W1r),e(dM,qW),e(qW,H1r),e(dM,U1r),e(Z,J1r),e(Z,cM),e(cM,o4e),e(o4e,Y1r),e(cM,K1r),e(cM,NW),e(NW,Z1r),e(cM,ebr),e(Z,obr),e(Z,fM),e(fM,r4e),e(r4e,rbr),e(fM,tbr),e(fM,jW),e(jW,abr),e(fM,nbr),e(Z,sbr),e(Z,mM),e(mM,t4e),e(t4e,lbr),e(mM,ibr),e(mM,DW),e(DW,dbr),e(mM,cbr),e(Z,fbr),e(Z,gM),e(gM,a4e),e(a4e,mbr),e(gM,gbr),e(gM,GW),e(GW,hbr),e(gM,pbr),e(Z,ubr),e(Z,hM),e(hM,n4e),e(n4e,_br),e(hM,bbr),e(hM,OW),e(OW,vbr),e(hM,Fbr),e(kr,Tbr),M(pM,kr,null),b(f,OIe,_),b(f,nc,_),e(nc,uM),e(uM,s4e),M(ix,s4e,null),e(nc,Mbr),e(nc,l4e),e(l4e,Ebr),b(f,VIe,_),b(f,ar,_),M(dx,ar,null),e(ar,Cbr),e(ar,sc),e(sc,wbr),e(sc,VW),e(VW,Abr),e(sc,ybr),e(sc,XW),e(XW,Lbr),e(sc,xbr),e(ar,$br),e(ar,cx),e(cx,kbr),e(cx,i4e),e(i4e,Sbr),e(cx,Rbr),e(ar,Bbr),e(ar,St),M(fx,St,null),e(St,Pbr),e(St,d4e),e(d4e,Ibr),e(St,qbr),e(St,lc),e(lc,Nbr),e(lc,c4e),e(c4e,jbr),e(lc,Dbr),e(lc,zW),e(zW,Gbr),e(lc,Obr),e(St,Vbr),M(_M,St,null),e(ar,Xbr),e(ar,Sr),M(mx,Sr,null),e(Sr,zbr),e(Sr,f4e),e(f4e,Qbr),e(Sr,Wbr),e(Sr,nn),e(nn,Hbr),e(nn,m4e),e(m4e,Ubr),e(nn,Jbr),e(nn,g4e),e(g4e,Ybr),e(nn,Kbr),e(nn,h4e),e(h4e,Zbr),e(nn,e4r),e(Sr,o4r),e(Sr,pe),e(pe,bM),e(bM,p4e),e(p4e,r4r),e(bM,t4r),e(bM,QW),e(QW,a4r),e(bM,n4r),e(pe,s4r),e(pe,vM),e(vM,u4e),e(u4e,l4r),e(vM,i4r),e(vM,WW),e(WW,d4r),e(vM,c4r),e(pe,f4r),e(pe,FM),e(FM,_4e),e(_4e,m4r),e(FM,g4r),e(FM,HW),e(HW,h4r),e(FM,p4r),e(pe,u4r),e(pe,TM),e(TM,b4e),e(b4e,_4r),e(TM,b4r),e(TM,UW),e(UW,v4r),e(TM,F4r),e(pe,T4r),e(pe,MM),e(MM,v4e),e(v4e,M4r),e(MM,E4r),e(MM,JW),e(JW,C4r),e(MM,w4r),e(pe,A4r),e(pe,EM),e(EM,F4e),e(F4e,y4r),e(EM,L4r),e(EM,YW),e(YW,x4r),e(EM,$4r),e(pe,k4r),e(pe,CM),e(CM,T4e),e(T4e,S4r),e(CM,R4r),e(CM,KW),e(KW,B4r),e(CM,P4r),e(pe,I4r),e(pe,wM),e(wM,M4e),e(M4e,q4r),e(wM,N4r),e(wM,ZW),e(ZW,j4r),e(wM,D4r),e(pe,G4r),e(pe,AM),e(AM,E4e),e(E4e,O4r),e(AM,V4r),e(AM,eH),e(eH,X4r),e(AM,z4r),e(pe,Q4r),e(pe,yM),e(yM,C4e),e(C4e,W4r),e(yM,H4r),e(yM,oH),e(oH,U4r),e(yM,J4r),e(pe,Y4r),e(pe,LM),e(LM,w4e),e(w4e,K4r),e(LM,Z4r),e(LM,rH),e(rH,e2r),e(LM,o2r),e(pe,r2r),e(pe,xM),e(xM,A4e),e(A4e,t2r),e(xM,a2r),e(xM,tH),e(tH,n2r),e(xM,s2r),e(pe,l2r),e(pe,$M),e($M,y4e),e(y4e,i2r),e($M,d2r),e($M,aH),e(aH,c2r),e($M,f2r),e(pe,m2r),e(pe,kM),e(kM,L4e),e(L4e,g2r),e(kM,h2r),e(kM,nH),e(nH,p2r),e(kM,u2r),e(pe,_2r),e(pe,SM),e(SM,x4e),e(x4e,b2r),e(SM,v2r),e(SM,sH),e(sH,F2r),e(SM,T2r),e(pe,M2r),e(pe,RM),e(RM,$4e),e($4e,E2r),e(RM,C2r),e(RM,lH),e(lH,w2r),e(RM,A2r),e(pe,y2r),e(pe,BM),e(BM,k4e),e(k4e,L2r),e(BM,x2r),e(BM,iH),e(iH,$2r),e(BM,k2r),e(Sr,S2r),M(PM,Sr,null),b(f,XIe,_),b(f,ic,_),e(ic,IM),e(IM,S4e),M(gx,S4e,null),e(ic,R2r),e(ic,R4e),e(R4e,B2r),b(f,zIe,_),b(f,nr,_),M(hx,nr,null),e(nr,P2r),e(nr,dc),e(dc,I2r),e(dc,dH),e(dH,q2r),e(dc,N2r),e(dc,cH),e(cH,j2r),e(dc,D2r),e(nr,G2r),e(nr,px),e(px,O2r),e(px,B4e),e(B4e,V2r),e(px,X2r),e(nr,z2r),e(nr,Rt),M(ux,Rt,null),e(Rt,Q2r),e(Rt,P4e),e(P4e,W2r),e(Rt,H2r),e(Rt,cc),e(cc,U2r),e(cc,I4e),e(I4e,J2r),e(cc,Y2r),e(cc,fH),e(fH,K2r),e(cc,Z2r),e(Rt,e5r),M(qM,Rt,null),e(nr,o5r),e(nr,Rr),M(_x,Rr,null),e(Rr,r5r),e(Rr,q4e),e(q4e,t5r),e(Rr,a5r),e(Rr,sn),e(sn,n5r),e(sn,N4e),e(N4e,s5r),e(sn,l5r),e(sn,j4e),e(j4e,i5r),e(sn,d5r),e(sn,D4e),e(D4e,c5r),e(sn,f5r),e(Rr,m5r),e(Rr,bx),e(bx,NM),e(NM,G4e),e(G4e,g5r),e(NM,h5r),e(NM,mH),e(mH,p5r),e(NM,u5r),e(bx,_5r),e(bx,jM),e(jM,O4e),e(O4e,b5r),e(jM,v5r),e(jM,gH),e(gH,F5r),e(jM,T5r),e(Rr,M5r),M(DM,Rr,null),b(f,QIe,_),b(f,fc,_),e(fc,GM),e(GM,V4e),M(vx,V4e,null),e(fc,E5r),e(fc,X4e),e(X4e,C5r),b(f,WIe,_),b(f,sr,_),M(Fx,sr,null),e(sr,w5r),e(sr,mc),e(mc,A5r),e(mc,hH),e(hH,y5r),e(mc,L5r),e(mc,pH),e(pH,x5r),e(mc,$5r),e(sr,k5r),e(sr,Tx),e(Tx,S5r),e(Tx,z4e),e(z4e,R5r),e(Tx,B5r),e(sr,P5r),e(sr,Bt),M(Mx,Bt,null),e(Bt,I5r),e(Bt,Q4e),e(Q4e,q5r),e(Bt,N5r),e(Bt,gc),e(gc,j5r),e(gc,W4e),e(W4e,D5r),e(gc,G5r),e(gc,uH),e(uH,O5r),e(gc,V5r),e(Bt,X5r),M(OM,Bt,null),e(sr,z5r),e(sr,Br),M(Ex,Br,null),e(Br,Q5r),e(Br,H4e),e(H4e,W5r),e(Br,H5r),e(Br,ln),e(ln,U5r),e(ln,U4e),e(U4e,J5r),e(ln,Y5r),e(ln,J4e),e(J4e,K5r),e(ln,Z5r),e(ln,Y4e),e(Y4e,evr),e(ln,ovr),e(Br,rvr),e(Br,K4e),e(K4e,VM),e(VM,Z4e),e(Z4e,tvr),e(VM,avr),e(VM,_H),e(_H,nvr),e(VM,svr),e(Br,lvr),M(XM,Br,null),b(f,HIe,_),b(f,hc,_),e(hc,zM),e(zM,e2e),M(Cx,e2e,null),e(hc,ivr),e(hc,o2e),e(o2e,dvr),b(f,UIe,_),b(f,lr,_),M(wx,lr,null),e(lr,cvr),e(lr,pc),e(pc,fvr),e(pc,bH),e(bH,mvr),e(pc,gvr),e(pc,vH),e(vH,hvr),e(pc,pvr),e(lr,uvr),e(lr,Ax),e(Ax,_vr),e(Ax,r2e),e(r2e,bvr),e(Ax,vvr),e(lr,Fvr),e(lr,Pt),M(yx,Pt,null),e(Pt,Tvr),e(Pt,t2e),e(t2e,Mvr),e(Pt,Evr),e(Pt,uc),e(uc,Cvr),e(uc,a2e),e(a2e,wvr),e(uc,Avr),e(uc,FH),e(FH,yvr),e(uc,Lvr),e(Pt,xvr),M(QM,Pt,null),e(lr,$vr),e(lr,Pr),M(Lx,Pr,null),e(Pr,kvr),e(Pr,n2e),e(n2e,Svr),e(Pr,Rvr),e(Pr,dn),e(dn,Bvr),e(dn,s2e),e(s2e,Pvr),e(dn,Ivr),e(dn,l2e),e(l2e,qvr),e(dn,Nvr),e(dn,i2e),e(i2e,jvr),e(dn,Dvr),e(Pr,Gvr),e(Pr,de),e(de,WM),e(WM,d2e),e(d2e,Ovr),e(WM,Vvr),e(WM,TH),e(TH,Xvr),e(WM,zvr),e(de,Qvr),e(de,HM),e(HM,c2e),e(c2e,Wvr),e(HM,Hvr),e(HM,MH),e(MH,Uvr),e(HM,Jvr),e(de,Yvr),e(de,UM),e(UM,f2e),e(f2e,Kvr),e(UM,Zvr),e(UM,EH),e(EH,eFr),e(UM,oFr),e(de,rFr),e(de,JM),e(JM,m2e),e(m2e,tFr),e(JM,aFr),e(JM,CH),e(CH,nFr),e(JM,sFr),e(de,lFr),e(de,YM),e(YM,g2e),e(g2e,iFr),e(YM,dFr),e(YM,wH),e(wH,cFr),e(YM,fFr),e(de,mFr),e(de,KM),e(KM,h2e),e(h2e,gFr),e(KM,hFr),e(KM,AH),e(AH,pFr),e(KM,uFr),e(de,_Fr),e(de,ZM),e(ZM,p2e),e(p2e,bFr),e(ZM,vFr),e(ZM,yH),e(yH,FFr),e(ZM,TFr),e(de,MFr),e(de,eE),e(eE,u2e),e(u2e,EFr),e(eE,CFr),e(eE,LH),e(LH,wFr),e(eE,AFr),e(de,yFr),e(de,oE),e(oE,_2e),e(_2e,LFr),e(oE,xFr),e(oE,xH),e(xH,$Fr),e(oE,kFr),e(de,SFr),e(de,rE),e(rE,b2e),e(b2e,RFr),e(rE,BFr),e(rE,$H),e($H,PFr),e(rE,IFr),e(de,qFr),e(de,tE),e(tE,v2e),e(v2e,NFr),e(tE,jFr),e(tE,kH),e(kH,DFr),e(tE,GFr),e(de,OFr),e(de,aE),e(aE,F2e),e(F2e,VFr),e(aE,XFr),e(aE,SH),e(SH,zFr),e(aE,QFr),e(de,WFr),e(de,nE),e(nE,T2e),e(T2e,HFr),e(nE,UFr),e(nE,RH),e(RH,JFr),e(nE,YFr),e(de,KFr),e(de,sE),e(sE,M2e),e(M2e,ZFr),e(sE,eTr),e(sE,BH),e(BH,oTr),e(sE,rTr),e(de,tTr),e(de,lE),e(lE,E2e),e(E2e,aTr),e(lE,nTr),e(lE,PH),e(PH,sTr),e(lE,lTr),e(de,iTr),e(de,iE),e(iE,C2e),e(C2e,dTr),e(iE,cTr),e(iE,IH),e(IH,fTr),e(iE,mTr),e(de,gTr),e(de,dE),e(dE,w2e),e(w2e,hTr),e(dE,pTr),e(dE,qH),e(qH,uTr),e(dE,_Tr),e(de,bTr),e(de,cE),e(cE,A2e),e(A2e,vTr),e(cE,FTr),e(cE,NH),e(NH,TTr),e(cE,MTr),e(de,ETr),e(de,fE),e(fE,y2e),e(y2e,CTr),e(fE,wTr),e(fE,jH),e(jH,ATr),e(fE,yTr),e(de,LTr),e(de,mE),e(mE,L2e),e(L2e,xTr),e(mE,$Tr),e(mE,DH),e(DH,kTr),e(mE,STr),e(Pr,RTr),M(gE,Pr,null),b(f,JIe,_),b(f,_c,_),e(_c,hE),e(hE,x2e),M(xx,x2e,null),e(_c,BTr),e(_c,$2e),e($2e,PTr),b(f,YIe,_),b(f,ir,_),M($x,ir,null),e(ir,ITr),e(ir,bc),e(bc,qTr),e(bc,GH),e(GH,NTr),e(bc,jTr),e(bc,OH),e(OH,DTr),e(bc,GTr),e(ir,OTr),e(ir,kx),e(kx,VTr),e(kx,k2e),e(k2e,XTr),e(kx,zTr),e(ir,QTr),e(ir,It),M(Sx,It,null),e(It,WTr),e(It,S2e),e(S2e,HTr),e(It,UTr),e(It,vc),e(vc,JTr),e(vc,R2e),e(R2e,YTr),e(vc,KTr),e(vc,VH),e(VH,ZTr),e(vc,eMr),e(It,oMr),M(pE,It,null),e(ir,rMr),e(ir,Ir),M(Rx,Ir,null),e(Ir,tMr),e(Ir,B2e),e(B2e,aMr),e(Ir,nMr),e(Ir,cn),e(cn,sMr),e(cn,P2e),e(P2e,lMr),e(cn,iMr),e(cn,I2e),e(I2e,dMr),e(cn,cMr),e(cn,q2e),e(q2e,fMr),e(cn,mMr),e(Ir,gMr),e(Ir,ce),e(ce,uE),e(uE,N2e),e(N2e,hMr),e(uE,pMr),e(uE,XH),e(XH,uMr),e(uE,_Mr),e(ce,bMr),e(ce,_E),e(_E,j2e),e(j2e,vMr),e(_E,FMr),e(_E,zH),e(zH,TMr),e(_E,MMr),e(ce,EMr),e(ce,bE),e(bE,D2e),e(D2e,CMr),e(bE,wMr),e(bE,QH),e(QH,AMr),e(bE,yMr),e(ce,LMr),e(ce,vE),e(vE,G2e),e(G2e,xMr),e(vE,$Mr),e(vE,WH),e(WH,kMr),e(vE,SMr),e(ce,RMr),e(ce,FE),e(FE,O2e),e(O2e,BMr),e(FE,PMr),e(FE,HH),e(HH,IMr),e(FE,qMr),e(ce,NMr),e(ce,TE),e(TE,V2e),e(V2e,jMr),e(TE,DMr),e(TE,UH),e(UH,GMr),e(TE,OMr),e(ce,VMr),e(ce,ME),e(ME,X2e),e(X2e,XMr),e(ME,zMr),e(ME,JH),e(JH,QMr),e(ME,WMr),e(ce,HMr),e(ce,EE),e(EE,z2e),e(z2e,UMr),e(EE,JMr),e(EE,YH),e(YH,YMr),e(EE,KMr),e(ce,ZMr),e(ce,CE),e(CE,Q2e),e(Q2e,eEr),e(CE,oEr),e(CE,KH),e(KH,rEr),e(CE,tEr),e(ce,aEr),e(ce,wE),e(wE,W2e),e(W2e,nEr),e(wE,sEr),e(wE,ZH),e(ZH,lEr),e(wE,iEr),e(ce,dEr),e(ce,AE),e(AE,H2e),e(H2e,cEr),e(AE,fEr),e(AE,eU),e(eU,mEr),e(AE,gEr),e(ce,hEr),e(ce,yE),e(yE,U2e),e(U2e,pEr),e(yE,uEr),e(yE,oU),e(oU,_Er),e(yE,bEr),e(ce,vEr),e(ce,LE),e(LE,J2e),e(J2e,FEr),e(LE,TEr),e(LE,rU),e(rU,MEr),e(LE,EEr),e(ce,CEr),e(ce,xE),e(xE,Y2e),e(Y2e,wEr),e(xE,AEr),e(xE,tU),e(tU,yEr),e(xE,LEr),e(ce,xEr),e(ce,$E),e($E,K2e),e(K2e,$Er),e($E,kEr),e($E,aU),e(aU,SEr),e($E,REr),e(ce,BEr),e(ce,kE),e(kE,Z2e),e(Z2e,PEr),e(kE,IEr),e(kE,nU),e(nU,qEr),e(kE,NEr),e(ce,jEr),e(ce,SE),e(SE,e5e),e(e5e,DEr),e(SE,GEr),e(SE,sU),e(sU,OEr),e(SE,VEr),e(ce,XEr),e(ce,RE),e(RE,o5e),e(o5e,zEr),e(RE,QEr),e(RE,lU),e(lU,WEr),e(RE,HEr),e(ce,UEr),e(ce,BE),e(BE,r5e),e(r5e,JEr),e(BE,YEr),e(BE,iU),e(iU,KEr),e(BE,ZEr),e(ce,eCr),e(ce,PE),e(PE,t5e),e(t5e,oCr),e(PE,rCr),e(PE,dU),e(dU,tCr),e(PE,aCr),e(Ir,nCr),M(IE,Ir,null),b(f,KIe,_),b(f,Fc,_),e(Fc,qE),e(qE,a5e),M(Bx,a5e,null),e(Fc,sCr),e(Fc,n5e),e(n5e,lCr),b(f,ZIe,_),b(f,dr,_),M(Px,dr,null),e(dr,iCr),e(dr,Tc),e(Tc,dCr),e(Tc,cU),e(cU,cCr),e(Tc,fCr),e(Tc,fU),e(fU,mCr),e(Tc,gCr),e(dr,hCr),e(dr,Ix),e(Ix,pCr),e(Ix,s5e),e(s5e,uCr),e(Ix,_Cr),e(dr,bCr),e(dr,qt),M(qx,qt,null),e(qt,vCr),e(qt,l5e),e(l5e,FCr),e(qt,TCr),e(qt,Mc),e(Mc,MCr),e(Mc,i5e),e(i5e,ECr),e(Mc,CCr),e(Mc,mU),e(mU,wCr),e(Mc,ACr),e(qt,yCr),M(NE,qt,null),e(dr,LCr),e(dr,qr),M(Nx,qr,null),e(qr,xCr),e(qr,d5e),e(d5e,$Cr),e(qr,kCr),e(qr,fn),e(fn,SCr),e(fn,c5e),e(c5e,RCr),e(fn,BCr),e(fn,f5e),e(f5e,PCr),e(fn,ICr),e(fn,m5e),e(m5e,qCr),e(fn,NCr),e(qr,jCr),e(qr,g5e),e(g5e,jE),e(jE,h5e),e(h5e,DCr),e(jE,GCr),e(jE,gU),e(gU,OCr),e(jE,VCr),e(qr,XCr),M(DE,qr,null),b(f,eqe,_),b(f,Ec,_),e(Ec,GE),e(GE,p5e),M(jx,p5e,null),e(Ec,zCr),e(Ec,u5e),e(u5e,QCr),b(f,oqe,_),b(f,cr,_),M(Dx,cr,null),e(cr,WCr),e(cr,Cc),e(Cc,HCr),e(Cc,hU),e(hU,UCr),e(Cc,JCr),e(Cc,pU),e(pU,YCr),e(Cc,KCr),e(cr,ZCr),e(cr,Gx),e(Gx,e3r),e(Gx,_5e),e(_5e,o3r),e(Gx,r3r),e(cr,t3r),e(cr,Nt),M(Ox,Nt,null),e(Nt,a3r),e(Nt,b5e),e(b5e,n3r),e(Nt,s3r),e(Nt,wc),e(wc,l3r),e(wc,v5e),e(v5e,i3r),e(wc,d3r),e(wc,uU),e(uU,c3r),e(wc,f3r),e(Nt,m3r),M(OE,Nt,null),e(cr,g3r),e(cr,Nr),M(Vx,Nr,null),e(Nr,h3r),e(Nr,F5e),e(F5e,p3r),e(Nr,u3r),e(Nr,mn),e(mn,_3r),e(mn,T5e),e(T5e,b3r),e(mn,v3r),e(mn,M5e),e(M5e,F3r),e(mn,T3r),e(mn,E5e),e(E5e,M3r),e(mn,E3r),e(Nr,C3r),e(Nr,C5e),e(C5e,VE),e(VE,w5e),e(w5e,w3r),e(VE,A3r),e(VE,_U),e(_U,y3r),e(VE,L3r),e(Nr,x3r),M(XE,Nr,null),b(f,rqe,_),b(f,Ac,_),e(Ac,zE),e(zE,A5e),M(Xx,A5e,null),e(Ac,$3r),e(Ac,y5e),e(y5e,k3r),b(f,tqe,_),b(f,fr,_),M(zx,fr,null),e(fr,S3r),e(fr,yc),e(yc,R3r),e(yc,bU),e(bU,B3r),e(yc,P3r),e(yc,vU),e(vU,I3r),e(yc,q3r),e(fr,N3r),e(fr,Qx),e(Qx,j3r),e(Qx,L5e),e(L5e,D3r),e(Qx,G3r),e(fr,O3r),e(fr,jt),M(Wx,jt,null),e(jt,V3r),e(jt,x5e),e(x5e,X3r),e(jt,z3r),e(jt,Lc),e(Lc,Q3r),e(Lc,$5e),e($5e,W3r),e(Lc,H3r),e(Lc,FU),e(FU,U3r),e(Lc,J3r),e(jt,Y3r),M(QE,jt,null),e(fr,K3r),e(fr,jr),M(Hx,jr,null),e(jr,Z3r),e(jr,k5e),e(k5e,ewr),e(jr,owr),e(jr,gn),e(gn,rwr),e(gn,S5e),e(S5e,twr),e(gn,awr),e(gn,R5e),e(R5e,nwr),e(gn,swr),e(gn,B5e),e(B5e,lwr),e(gn,iwr),e(jr,dwr),e(jr,re),e(re,WE),e(WE,P5e),e(P5e,cwr),e(WE,fwr),e(WE,TU),e(TU,mwr),e(WE,gwr),e(re,hwr),e(re,HE),e(HE,I5e),e(I5e,pwr),e(HE,uwr),e(HE,MU),e(MU,_wr),e(HE,bwr),e(re,vwr),e(re,UE),e(UE,q5e),e(q5e,Fwr),e(UE,Twr),e(UE,EU),e(EU,Mwr),e(UE,Ewr),e(re,Cwr),e(re,JE),e(JE,N5e),e(N5e,wwr),e(JE,Awr),e(JE,CU),e(CU,ywr),e(JE,Lwr),e(re,xwr),e(re,YE),e(YE,j5e),e(j5e,$wr),e(YE,kwr),e(YE,wU),e(wU,Swr),e(YE,Rwr),e(re,Bwr),e(re,KE),e(KE,D5e),e(D5e,Pwr),e(KE,Iwr),e(KE,AU),e(AU,qwr),e(KE,Nwr),e(re,jwr),e(re,ZE),e(ZE,G5e),e(G5e,Dwr),e(ZE,Gwr),e(ZE,yU),e(yU,Owr),e(ZE,Vwr),e(re,Xwr),e(re,eC),e(eC,O5e),e(O5e,zwr),e(eC,Qwr),e(eC,LU),e(LU,Wwr),e(eC,Hwr),e(re,Uwr),e(re,oC),e(oC,V5e),e(V5e,Jwr),e(oC,Ywr),e(oC,xU),e(xU,Kwr),e(oC,Zwr),e(re,eAr),e(re,rC),e(rC,X5e),e(X5e,oAr),e(rC,rAr),e(rC,$U),e($U,tAr),e(rC,aAr),e(re,nAr),e(re,tC),e(tC,z5e),e(z5e,sAr),e(tC,lAr),e(tC,kU),e(kU,iAr),e(tC,dAr),e(re,cAr),e(re,aC),e(aC,Q5e),e(Q5e,fAr),e(aC,mAr),e(aC,SU),e(SU,gAr),e(aC,hAr),e(re,pAr),e(re,nC),e(nC,W5e),e(W5e,uAr),e(nC,_Ar),e(nC,RU),e(RU,bAr),e(nC,vAr),e(re,FAr),e(re,sC),e(sC,H5e),e(H5e,TAr),e(sC,MAr),e(sC,BU),e(BU,EAr),e(sC,CAr),e(re,wAr),e(re,lC),e(lC,U5e),e(U5e,AAr),e(lC,yAr),e(lC,PU),e(PU,LAr),e(lC,xAr),e(re,$Ar),e(re,iC),e(iC,J5e),e(J5e,kAr),e(iC,SAr),e(iC,IU),e(IU,RAr),e(iC,BAr),e(re,PAr),e(re,dC),e(dC,Y5e),e(Y5e,IAr),e(dC,qAr),e(dC,qU),e(qU,NAr),e(dC,jAr),e(re,DAr),e(re,cC),e(cC,K5e),e(K5e,GAr),e(cC,OAr),e(cC,NU),e(NU,VAr),e(cC,XAr),e(re,zAr),e(re,fC),e(fC,Z5e),e(Z5e,QAr),e(fC,WAr),e(fC,jU),e(jU,HAr),e(fC,UAr),e(re,JAr),e(re,mC),e(mC,eve),e(eve,YAr),e(mC,KAr),e(mC,DU),e(DU,ZAr),e(mC,e0r),e(re,o0r),e(re,gC),e(gC,ove),e(ove,r0r),e(gC,t0r),e(gC,GU),e(GU,a0r),e(gC,n0r),e(re,s0r),e(re,hC),e(hC,rve),e(rve,l0r),e(hC,i0r),e(hC,OU),e(OU,d0r),e(hC,c0r),e(re,f0r),e(re,pC),e(pC,tve),e(tve,m0r),e(pC,g0r),e(pC,VU),e(VU,h0r),e(pC,p0r),e(re,u0r),e(re,uC),e(uC,ave),e(ave,_0r),e(uC,b0r),e(uC,XU),e(XU,v0r),e(uC,F0r),e(re,T0r),e(re,_C),e(_C,nve),e(nve,M0r),e(_C,E0r),e(_C,zU),e(zU,C0r),e(_C,w0r),e(jr,A0r),M(bC,jr,null),b(f,aqe,_),b(f,xc,_),e(xc,vC),e(vC,sve),M(Ux,sve,null),e(xc,y0r),e(xc,lve),e(lve,L0r),b(f,nqe,_),b(f,mr,_),M(Jx,mr,null),e(mr,x0r),e(mr,$c),e($c,$0r),e($c,QU),e(QU,k0r),e($c,S0r),e($c,WU),e(WU,R0r),e($c,B0r),e(mr,P0r),e(mr,Yx),e(Yx,I0r),e(Yx,ive),e(ive,q0r),e(Yx,N0r),e(mr,j0r),e(mr,Dt),M(Kx,Dt,null),e(Dt,D0r),e(Dt,dve),e(dve,G0r),e(Dt,O0r),e(Dt,kc),e(kc,V0r),e(kc,cve),e(cve,X0r),e(kc,z0r),e(kc,HU),e(HU,Q0r),e(kc,W0r),e(Dt,H0r),M(FC,Dt,null),e(mr,U0r),e(mr,Dr),M(Zx,Dr,null),e(Dr,J0r),e(Dr,fve),e(fve,Y0r),e(Dr,K0r),e(Dr,hn),e(hn,Z0r),e(hn,mve),e(mve,eyr),e(hn,oyr),e(hn,gve),e(gve,ryr),e(hn,tyr),e(hn,hve),e(hve,ayr),e(hn,nyr),e(Dr,syr),e(Dr,ke),e(ke,TC),e(TC,pve),e(pve,lyr),e(TC,iyr),e(TC,UU),e(UU,dyr),e(TC,cyr),e(ke,fyr),e(ke,MC),e(MC,uve),e(uve,myr),e(MC,gyr),e(MC,JU),e(JU,hyr),e(MC,pyr),e(ke,uyr),e(ke,EC),e(EC,_ve),e(_ve,_yr),e(EC,byr),e(EC,YU),e(YU,vyr),e(EC,Fyr),e(ke,Tyr),e(ke,CC),e(CC,bve),e(bve,Myr),e(CC,Eyr),e(CC,KU),e(KU,Cyr),e(CC,wyr),e(ke,Ayr),e(ke,wC),e(wC,vve),e(vve,yyr),e(wC,Lyr),e(wC,ZU),e(ZU,xyr),e(wC,$yr),e(ke,kyr),e(ke,AC),e(AC,Fve),e(Fve,Syr),e(AC,Ryr),e(AC,eJ),e(eJ,Byr),e(AC,Pyr),e(ke,Iyr),e(ke,yC),e(yC,Tve),e(Tve,qyr),e(yC,Nyr),e(yC,oJ),e(oJ,jyr),e(yC,Dyr),e(ke,Gyr),e(ke,LC),e(LC,Mve),e(Mve,Oyr),e(LC,Vyr),e(LC,rJ),e(rJ,Xyr),e(LC,zyr),e(ke,Qyr),e(ke,xC),e(xC,Eve),e(Eve,Wyr),e(xC,Hyr),e(xC,tJ),e(tJ,Uyr),e(xC,Jyr),e(Dr,Yyr),M($C,Dr,null),b(f,sqe,_),b(f,Sc,_),e(Sc,kC),e(kC,Cve),M(e7,Cve,null),e(Sc,Kyr),e(Sc,wve),e(wve,Zyr),b(f,lqe,_),b(f,gr,_),M(o7,gr,null),e(gr,eLr),e(gr,Rc),e(Rc,oLr),e(Rc,aJ),e(aJ,rLr),e(Rc,tLr),e(Rc,nJ),e(nJ,aLr),e(Rc,nLr),e(gr,sLr),e(gr,r7),e(r7,lLr),e(r7,Ave),e(Ave,iLr),e(r7,dLr),e(gr,cLr),e(gr,Gt),M(t7,Gt,null),e(Gt,fLr),e(Gt,yve),e(yve,mLr),e(Gt,gLr),e(Gt,Bc),e(Bc,hLr),e(Bc,Lve),e(Lve,pLr),e(Bc,uLr),e(Bc,sJ),e(sJ,_Lr),e(Bc,bLr),e(Gt,vLr),M(SC,Gt,null),e(gr,FLr),e(gr,Gr),M(a7,Gr,null),e(Gr,TLr),e(Gr,xve),e(xve,MLr),e(Gr,ELr),e(Gr,pn),e(pn,CLr),e(pn,$ve),e($ve,wLr),e(pn,ALr),e(pn,kve),e(kve,yLr),e(pn,LLr),e(pn,Sve),e(Sve,xLr),e(pn,$Lr),e(Gr,kLr),e(Gr,Me),e(Me,RC),e(RC,Rve),e(Rve,SLr),e(RC,RLr),e(RC,lJ),e(lJ,BLr),e(RC,PLr),e(Me,ILr),e(Me,BC),e(BC,Bve),e(Bve,qLr),e(BC,NLr),e(BC,iJ),e(iJ,jLr),e(BC,DLr),e(Me,GLr),e(Me,PC),e(PC,Pve),e(Pve,OLr),e(PC,VLr),e(PC,dJ),e(dJ,XLr),e(PC,zLr),e(Me,QLr),e(Me,IC),e(IC,Ive),e(Ive,WLr),e(IC,HLr),e(IC,cJ),e(cJ,ULr),e(IC,JLr),e(Me,YLr),e(Me,qC),e(qC,qve),e(qve,KLr),e(qC,ZLr),e(qC,fJ),e(fJ,e8r),e(qC,o8r),e(Me,r8r),e(Me,NC),e(NC,Nve),e(Nve,t8r),e(NC,a8r),e(NC,mJ),e(mJ,n8r),e(NC,s8r),e(Me,l8r),e(Me,jC),e(jC,jve),e(jve,i8r),e(jC,d8r),e(jC,gJ),e(gJ,c8r),e(jC,f8r),e(Me,m8r),e(Me,DC),e(DC,Dve),e(Dve,g8r),e(DC,h8r),e(DC,hJ),e(hJ,p8r),e(DC,u8r),e(Me,_8r),e(Me,GC),e(GC,Gve),e(Gve,b8r),e(GC,v8r),e(GC,pJ),e(pJ,F8r),e(GC,T8r),e(Me,M8r),e(Me,OC),e(OC,Ove),e(Ove,E8r),e(OC,C8r),e(OC,uJ),e(uJ,w8r),e(OC,A8r),e(Me,y8r),e(Me,VC),e(VC,Vve),e(Vve,L8r),e(VC,x8r),e(VC,_J),e(_J,$8r),e(VC,k8r),e(Me,S8r),e(Me,XC),e(XC,Xve),e(Xve,R8r),e(XC,B8r),e(XC,bJ),e(bJ,P8r),e(XC,I8r),e(Gr,q8r),M(zC,Gr,null),b(f,iqe,_),b(f,Pc,_),e(Pc,QC),e(QC,zve),M(n7,zve,null),e(Pc,N8r),e(Pc,Qve),e(Qve,j8r),b(f,dqe,_),b(f,hr,_),M(s7,hr,null),e(hr,D8r),e(hr,Ic),e(Ic,G8r),e(Ic,vJ),e(vJ,O8r),e(Ic,V8r),e(Ic,FJ),e(FJ,X8r),e(Ic,z8r),e(hr,Q8r),e(hr,l7),e(l7,W8r),e(l7,Wve),e(Wve,H8r),e(l7,U8r),e(hr,J8r),e(hr,Ot),M(i7,Ot,null),e(Ot,Y8r),e(Ot,Hve),e(Hve,K8r),e(Ot,Z8r),e(Ot,qc),e(qc,exr),e(qc,Uve),e(Uve,oxr),e(qc,rxr),e(qc,TJ),e(TJ,txr),e(qc,axr),e(Ot,nxr),M(WC,Ot,null),e(hr,sxr),e(hr,Or),M(d7,Or,null),e(Or,lxr),e(Or,Jve),e(Jve,ixr),e(Or,dxr),e(Or,un),e(un,cxr),e(un,Yve),e(Yve,fxr),e(un,mxr),e(un,Kve),e(Kve,gxr),e(un,hxr),e(un,Zve),e(Zve,pxr),e(un,uxr),e(Or,_xr),e(Or,Le),e(Le,HC),e(HC,eFe),e(eFe,bxr),e(HC,vxr),e(HC,MJ),e(MJ,Fxr),e(HC,Txr),e(Le,Mxr),e(Le,UC),e(UC,oFe),e(oFe,Exr),e(UC,Cxr),e(UC,EJ),e(EJ,wxr),e(UC,Axr),e(Le,yxr),e(Le,JC),e(JC,rFe),e(rFe,Lxr),e(JC,xxr),e(JC,CJ),e(CJ,$xr),e(JC,kxr),e(Le,Sxr),e(Le,YC),e(YC,tFe),e(tFe,Rxr),e(YC,Bxr),e(YC,wJ),e(wJ,Pxr),e(YC,Ixr),e(Le,qxr),e(Le,KC),e(KC,aFe),e(aFe,Nxr),e(KC,jxr),e(KC,AJ),e(AJ,Dxr),e(KC,Gxr),e(Le,Oxr),e(Le,ZC),e(ZC,nFe),e(nFe,Vxr),e(ZC,Xxr),e(ZC,yJ),e(yJ,zxr),e(ZC,Qxr),e(Le,Wxr),e(Le,e3),e(e3,sFe),e(sFe,Hxr),e(e3,Uxr),e(e3,LJ),e(LJ,Jxr),e(e3,Yxr),e(Le,Kxr),e(Le,o3),e(o3,lFe),e(lFe,Zxr),e(o3,e7r),e(o3,xJ),e(xJ,o7r),e(o3,r7r),e(Le,t7r),e(Le,r3),e(r3,iFe),e(iFe,a7r),e(r3,n7r),e(r3,$J),e($J,s7r),e(r3,l7r),e(Le,i7r),e(Le,t3),e(t3,dFe),e(dFe,d7r),e(t3,c7r),e(t3,kJ),e(kJ,f7r),e(t3,m7r),e(Or,g7r),M(a3,Or,null),b(f,cqe,_),b(f,Nc,_),e(Nc,n3),e(n3,cFe),M(c7,cFe,null),e(Nc,h7r),e(Nc,fFe),e(fFe,p7r),b(f,fqe,_),b(f,pr,_),M(f7,pr,null),e(pr,u7r),e(pr,jc),e(jc,_7r),e(jc,SJ),e(SJ,b7r),e(jc,v7r),e(jc,RJ),e(RJ,F7r),e(jc,T7r),e(pr,M7r),e(pr,m7),e(m7,E7r),e(m7,mFe),e(mFe,C7r),e(m7,w7r),e(pr,A7r),e(pr,Vt),M(g7,Vt,null),e(Vt,y7r),e(Vt,gFe),e(gFe,L7r),e(Vt,x7r),e(Vt,Dc),e(Dc,$7r),e(Dc,hFe),e(hFe,k7r),e(Dc,S7r),e(Dc,BJ),e(BJ,R7r),e(Dc,B7r),e(Vt,P7r),M(s3,Vt,null),e(pr,I7r),e(pr,Vr),M(h7,Vr,null),e(Vr,q7r),e(Vr,pFe),e(pFe,N7r),e(Vr,j7r),e(Vr,_n),e(_n,D7r),e(_n,uFe),e(uFe,G7r),e(_n,O7r),e(_n,_Fe),e(_Fe,V7r),e(_n,X7r),e(_n,bFe),e(bFe,z7r),e(_n,Q7r),e(Vr,W7r),e(Vr,Se),e(Se,l3),e(l3,vFe),e(vFe,H7r),e(l3,U7r),e(l3,PJ),e(PJ,J7r),e(l3,Y7r),e(Se,K7r),e(Se,i3),e(i3,FFe),e(FFe,Z7r),e(i3,e9r),e(i3,IJ),e(IJ,o9r),e(i3,r9r),e(Se,t9r),e(Se,d3),e(d3,TFe),e(TFe,a9r),e(d3,n9r),e(d3,qJ),e(qJ,s9r),e(d3,l9r),e(Se,i9r),e(Se,c3),e(c3,MFe),e(MFe,d9r),e(c3,c9r),e(c3,NJ),e(NJ,f9r),e(c3,m9r),e(Se,g9r),e(Se,f3),e(f3,EFe),e(EFe,h9r),e(f3,p9r),e(f3,jJ),e(jJ,u9r),e(f3,_9r),e(Se,b9r),e(Se,m3),e(m3,CFe),e(CFe,v9r),e(m3,F9r),e(m3,DJ),e(DJ,T9r),e(m3,M9r),e(Se,E9r),e(Se,g3),e(g3,wFe),e(wFe,C9r),e(g3,w9r),e(g3,GJ),e(GJ,A9r),e(g3,y9r),e(Se,L9r),e(Se,h3),e(h3,AFe),e(AFe,x9r),e(h3,$9r),e(h3,OJ),e(OJ,k9r),e(h3,S9r),e(Se,R9r),e(Se,p3),e(p3,yFe),e(yFe,B9r),e(p3,P9r),e(p3,VJ),e(VJ,I9r),e(p3,q9r),e(Vr,N9r),M(u3,Vr,null),b(f,mqe,_),b(f,Gc,_),e(Gc,_3),e(_3,LFe),M(p7,LFe,null),e(Gc,j9r),e(Gc,xFe),e(xFe,D9r),b(f,gqe,_),b(f,ur,_),M(u7,ur,null),e(ur,G9r),e(ur,Oc),e(Oc,O9r),e(Oc,XJ),e(XJ,V9r),e(Oc,X9r),e(Oc,zJ),e(zJ,z9r),e(Oc,Q9r),e(ur,W9r),e(ur,_7),e(_7,H9r),e(_7,$Fe),e($Fe,U9r),e(_7,J9r),e(ur,Y9r),e(ur,Xt),M(b7,Xt,null),e(Xt,K9r),e(Xt,kFe),e(kFe,Z9r),e(Xt,e$r),e(Xt,Vc),e(Vc,o$r),e(Vc,SFe),e(SFe,r$r),e(Vc,t$r),e(Vc,QJ),e(QJ,a$r),e(Vc,n$r),e(Xt,s$r),M(b3,Xt,null),e(ur,l$r),e(ur,Xr),M(v7,Xr,null),e(Xr,i$r),e(Xr,RFe),e(RFe,d$r),e(Xr,c$r),e(Xr,bn),e(bn,f$r),e(bn,BFe),e(BFe,m$r),e(bn,g$r),e(bn,PFe),e(PFe,h$r),e(bn,p$r),e(bn,IFe),e(IFe,u$r),e(bn,_$r),e(Xr,b$r),e(Xr,xe),e(xe,v3),e(v3,qFe),e(qFe,v$r),e(v3,F$r),e(v3,WJ),e(WJ,T$r),e(v3,M$r),e(xe,E$r),e(xe,F3),e(F3,NFe),e(NFe,C$r),e(F3,w$r),e(F3,HJ),e(HJ,A$r),e(F3,y$r),e(xe,L$r),e(xe,T3),e(T3,jFe),e(jFe,x$r),e(T3,$$r),e(T3,UJ),e(UJ,k$r),e(T3,S$r),e(xe,R$r),e(xe,M3),e(M3,DFe),e(DFe,B$r),e(M3,P$r),e(M3,JJ),e(JJ,I$r),e(M3,q$r),e(xe,N$r),e(xe,E3),e(E3,GFe),e(GFe,j$r),e(E3,D$r),e(E3,YJ),e(YJ,G$r),e(E3,O$r),e(xe,V$r),e(xe,C3),e(C3,OFe),e(OFe,X$r),e(C3,z$r),e(C3,KJ),e(KJ,Q$r),e(C3,W$r),e(xe,H$r),e(xe,w3),e(w3,VFe),e(VFe,U$r),e(w3,J$r),e(w3,ZJ),e(ZJ,Y$r),e(w3,K$r),e(xe,Z$r),e(xe,A3),e(A3,XFe),e(XFe,ekr),e(A3,okr),e(A3,eY),e(eY,rkr),e(A3,tkr),e(xe,akr),e(xe,y3),e(y3,zFe),e(zFe,nkr),e(y3,skr),e(y3,oY),e(oY,lkr),e(y3,ikr),e(xe,dkr),e(xe,L3),e(L3,QFe),e(QFe,ckr),e(L3,fkr),e(L3,rY),e(rY,mkr),e(L3,gkr),e(Xr,hkr),M(x3,Xr,null),b(f,hqe,_),b(f,Xc,_),e(Xc,$3),e($3,WFe),M(F7,WFe,null),e(Xc,pkr),e(Xc,HFe),e(HFe,ukr),b(f,pqe,_),b(f,_r,_),M(T7,_r,null),e(_r,_kr),e(_r,zc),e(zc,bkr),e(zc,tY),e(tY,vkr),e(zc,Fkr),e(zc,aY),e(aY,Tkr),e(zc,Mkr),e(_r,Ekr),e(_r,M7),e(M7,Ckr),e(M7,UFe),e(UFe,wkr),e(M7,Akr),e(_r,ykr),e(_r,zt),M(E7,zt,null),e(zt,Lkr),e(zt,JFe),e(JFe,xkr),e(zt,$kr),e(zt,Qc),e(Qc,kkr),e(Qc,YFe),e(YFe,Skr),e(Qc,Rkr),e(Qc,nY),e(nY,Bkr),e(Qc,Pkr),e(zt,Ikr),M(k3,zt,null),e(_r,qkr),e(_r,zr),M(C7,zr,null),e(zr,Nkr),e(zr,KFe),e(KFe,jkr),e(zr,Dkr),e(zr,vn),e(vn,Gkr),e(vn,ZFe),e(ZFe,Okr),e(vn,Vkr),e(vn,eTe),e(eTe,Xkr),e(vn,zkr),e(vn,oTe),e(oTe,Qkr),e(vn,Wkr),e(zr,Hkr),e(zr,$e),e($e,S3),e(S3,rTe),e(rTe,Ukr),e(S3,Jkr),e(S3,sY),e(sY,Ykr),e(S3,Kkr),e($e,Zkr),e($e,R3),e(R3,tTe),e(tTe,eSr),e(R3,oSr),e(R3,lY),e(lY,rSr),e(R3,tSr),e($e,aSr),e($e,B3),e(B3,aTe),e(aTe,nSr),e(B3,sSr),e(B3,iY),e(iY,lSr),e(B3,iSr),e($e,dSr),e($e,P3),e(P3,nTe),e(nTe,cSr),e(P3,fSr),e(P3,dY),e(dY,mSr),e(P3,gSr),e($e,hSr),e($e,I3),e(I3,sTe),e(sTe,pSr),e(I3,uSr),e(I3,cY),e(cY,_Sr),e(I3,bSr),e($e,vSr),e($e,q3),e(q3,lTe),e(lTe,FSr),e(q3,TSr),e(q3,fY),e(fY,MSr),e(q3,ESr),e($e,CSr),e($e,N3),e(N3,iTe),e(iTe,wSr),e(N3,ASr),e(N3,mY),e(mY,ySr),e(N3,LSr),e($e,xSr),e($e,j3),e(j3,dTe),e(dTe,$Sr),e(j3,kSr),e(j3,gY),e(gY,SSr),e(j3,RSr),e($e,BSr),e($e,D3),e(D3,cTe),e(cTe,PSr),e(D3,ISr),e(D3,hY),e(hY,qSr),e(D3,NSr),e($e,jSr),e($e,G3),e(G3,fTe),e(fTe,DSr),e(G3,GSr),e(G3,pY),e(pY,OSr),e(G3,VSr),e(zr,XSr),M(O3,zr,null),b(f,uqe,_),b(f,Wc,_),e(Wc,V3),e(V3,mTe),M(w7,mTe,null),e(Wc,zSr),e(Wc,gTe),e(gTe,QSr),b(f,_qe,_),b(f,br,_),M(A7,br,null),e(br,WSr),e(br,Hc),e(Hc,HSr),e(Hc,uY),e(uY,USr),e(Hc,JSr),e(Hc,_Y),e(_Y,YSr),e(Hc,KSr),e(br,ZSr),e(br,y7),e(y7,eRr),e(y7,hTe),e(hTe,oRr),e(y7,rRr),e(br,tRr),e(br,Qt),M(L7,Qt,null),e(Qt,aRr),e(Qt,pTe),e(pTe,nRr),e(Qt,sRr),e(Qt,Uc),e(Uc,lRr),e(Uc,uTe),e(uTe,iRr),e(Uc,dRr),e(Uc,bY),e(bY,cRr),e(Uc,fRr),e(Qt,mRr),M(X3,Qt,null),e(br,gRr),e(br,Qr),M(x7,Qr,null),e(Qr,hRr),e(Qr,_Te),e(_Te,pRr),e(Qr,uRr),e(Qr,Fn),e(Fn,_Rr),e(Fn,bTe),e(bTe,bRr),e(Fn,vRr),e(Fn,vTe),e(vTe,FRr),e(Fn,TRr),e(Fn,FTe),e(FTe,MRr),e(Fn,ERr),e(Qr,CRr),e(Qr,De),e(De,z3),e(z3,TTe),e(TTe,wRr),e(z3,ARr),e(z3,vY),e(vY,yRr),e(z3,LRr),e(De,xRr),e(De,Q3),e(Q3,MTe),e(MTe,$Rr),e(Q3,kRr),e(Q3,FY),e(FY,SRr),e(Q3,RRr),e(De,BRr),e(De,W3),e(W3,ETe),e(ETe,PRr),e(W3,IRr),e(W3,TY),e(TY,qRr),e(W3,NRr),e(De,jRr),e(De,H3),e(H3,CTe),e(CTe,DRr),e(H3,GRr),e(H3,MY),e(MY,ORr),e(H3,VRr),e(De,XRr),e(De,U3),e(U3,wTe),e(wTe,zRr),e(U3,QRr),e(U3,EY),e(EY,WRr),e(U3,HRr),e(De,URr),e(De,J3),e(J3,ATe),e(ATe,JRr),e(J3,YRr),e(J3,CY),e(CY,KRr),e(J3,ZRr),e(De,eBr),e(De,Y3),e(Y3,yTe),e(yTe,oBr),e(Y3,rBr),e(Y3,wY),e(wY,tBr),e(Y3,aBr),e(De,nBr),e(De,K3),e(K3,LTe),e(LTe,sBr),e(K3,lBr),e(K3,AY),e(AY,iBr),e(K3,dBr),e(Qr,cBr),M(Z3,Qr,null),b(f,bqe,_),b(f,Jc,_),e(Jc,ew),e(ew,xTe),M($7,xTe,null),e(Jc,fBr),e(Jc,$Te),e($Te,mBr),b(f,vqe,_),b(f,vr,_),M(k7,vr,null),e(vr,gBr),e(vr,Yc),e(Yc,hBr),e(Yc,yY),e(yY,pBr),e(Yc,uBr),e(Yc,LY),e(LY,_Br),e(Yc,bBr),e(vr,vBr),e(vr,S7),e(S7,FBr),e(S7,kTe),e(kTe,TBr),e(S7,MBr),e(vr,EBr),e(vr,Wt),M(R7,Wt,null),e(Wt,CBr),e(Wt,STe),e(STe,wBr),e(Wt,ABr),e(Wt,Kc),e(Kc,yBr),e(Kc,RTe),e(RTe,LBr),e(Kc,xBr),e(Kc,xY),e(xY,$Br),e(Kc,kBr),e(Wt,SBr),M(ow,Wt,null),e(vr,RBr),e(vr,Wr),M(B7,Wr,null),e(Wr,BBr),e(Wr,BTe),e(BTe,PBr),e(Wr,IBr),e(Wr,Tn),e(Tn,qBr),e(Tn,PTe),e(PTe,NBr),e(Tn,jBr),e(Tn,ITe),e(ITe,DBr),e(Tn,GBr),e(Tn,qTe),e(qTe,OBr),e(Tn,VBr),e(Wr,XBr),e(Wr,Ge),e(Ge,rw),e(rw,NTe),e(NTe,zBr),e(rw,QBr),e(rw,$Y),e($Y,WBr),e(rw,HBr),e(Ge,UBr),e(Ge,tw),e(tw,jTe),e(jTe,JBr),e(tw,YBr),e(tw,kY),e(kY,KBr),e(tw,ZBr),e(Ge,ePr),e(Ge,aw),e(aw,DTe),e(DTe,oPr),e(aw,rPr),e(aw,SY),e(SY,tPr),e(aw,aPr),e(Ge,nPr),e(Ge,nw),e(nw,GTe),e(GTe,sPr),e(nw,lPr),e(nw,RY),e(RY,iPr),e(nw,dPr),e(Ge,cPr),e(Ge,sw),e(sw,OTe),e(OTe,fPr),e(sw,mPr),e(sw,BY),e(BY,gPr),e(sw,hPr),e(Ge,pPr),e(Ge,lw),e(lw,VTe),e(VTe,uPr),e(lw,_Pr),e(lw,PY),e(PY,bPr),e(lw,vPr),e(Ge,FPr),e(Ge,iw),e(iw,XTe),e(XTe,TPr),e(iw,MPr),e(iw,IY),e(IY,EPr),e(iw,CPr),e(Ge,wPr),e(Ge,dw),e(dw,zTe),e(zTe,APr),e(dw,yPr),e(dw,qY),e(qY,LPr),e(dw,xPr),e(Wr,$Pr),M(cw,Wr,null),b(f,Fqe,_),b(f,Zc,_),e(Zc,fw),e(fw,QTe),M(P7,QTe,null),e(Zc,kPr),e(Zc,WTe),e(WTe,SPr),b(f,Tqe,_),b(f,Fr,_),M(I7,Fr,null),e(Fr,RPr),e(Fr,ef),e(ef,BPr),e(ef,NY),e(NY,PPr),e(ef,IPr),e(ef,jY),e(jY,qPr),e(ef,NPr),e(Fr,jPr),e(Fr,q7),e(q7,DPr),e(q7,HTe),e(HTe,GPr),e(q7,OPr),e(Fr,VPr),e(Fr,Ht),M(N7,Ht,null),e(Ht,XPr),e(Ht,UTe),e(UTe,zPr),e(Ht,QPr),e(Ht,of),e(of,WPr),e(of,JTe),e(JTe,HPr),e(of,UPr),e(of,DY),e(DY,JPr),e(of,YPr),e(Ht,KPr),M(mw,Ht,null),e(Fr,ZPr),e(Fr,Hr),M(j7,Hr,null),e(Hr,eIr),e(Hr,YTe),e(YTe,oIr),e(Hr,rIr),e(Hr,Mn),e(Mn,tIr),e(Mn,KTe),e(KTe,aIr),e(Mn,nIr),e(Mn,ZTe),e(ZTe,sIr),e(Mn,lIr),e(Mn,eMe),e(eMe,iIr),e(Mn,dIr),e(Hr,cIr),e(Hr,oMe),e(oMe,gw),e(gw,rMe),e(rMe,fIr),e(gw,mIr),e(gw,GY),e(GY,gIr),e(gw,hIr),e(Hr,pIr),M(hw,Hr,null),b(f,Mqe,_),b(f,rf,_),e(rf,pw),e(pw,tMe),M(D7,tMe,null),e(rf,uIr),e(rf,aMe),e(aMe,_Ir),b(f,Eqe,_),b(f,Tr,_),M(G7,Tr,null),e(Tr,bIr),e(Tr,tf),e(tf,vIr),e(tf,OY),e(OY,FIr),e(tf,TIr),e(tf,VY),e(VY,MIr),e(tf,EIr),e(Tr,CIr),e(Tr,O7),e(O7,wIr),e(O7,nMe),e(nMe,AIr),e(O7,yIr),e(Tr,LIr),e(Tr,Ut),M(V7,Ut,null),e(Ut,xIr),e(Ut,sMe),e(sMe,$Ir),e(Ut,kIr),e(Ut,af),e(af,SIr),e(af,lMe),e(lMe,RIr),e(af,BIr),e(af,XY),e(XY,PIr),e(af,IIr),e(Ut,qIr),M(uw,Ut,null),e(Tr,NIr),e(Tr,Ur),M(X7,Ur,null),e(Ur,jIr),e(Ur,iMe),e(iMe,DIr),e(Ur,GIr),e(Ur,En),e(En,OIr),e(En,dMe),e(dMe,VIr),e(En,XIr),e(En,cMe),e(cMe,zIr),e(En,QIr),e(En,fMe),e(fMe,WIr),e(En,HIr),e(Ur,UIr),e(Ur,z7),e(z7,_w),e(_w,mMe),e(mMe,JIr),e(_w,YIr),e(_w,zY),e(zY,KIr),e(_w,ZIr),e(z7,eqr),e(z7,bw),e(bw,gMe),e(gMe,oqr),e(bw,rqr),e(bw,QY),e(QY,tqr),e(bw,aqr),e(Ur,nqr),M(vw,Ur,null),b(f,Cqe,_),b(f,nf,_),e(nf,Fw),e(Fw,hMe),M(Q7,hMe,null),e(nf,sqr),e(nf,pMe),e(pMe,lqr),b(f,wqe,_),b(f,Mr,_),M(W7,Mr,null),e(Mr,iqr),e(Mr,sf),e(sf,dqr),e(sf,WY),e(WY,cqr),e(sf,fqr),e(sf,HY),e(HY,mqr),e(sf,gqr),e(Mr,hqr),e(Mr,H7),e(H7,pqr),e(H7,uMe),e(uMe,uqr),e(H7,_qr),e(Mr,bqr),e(Mr,Jt),M(U7,Jt,null),e(Jt,vqr),e(Jt,_Me),e(_Me,Fqr),e(Jt,Tqr),e(Jt,lf),e(lf,Mqr),e(lf,bMe),e(bMe,Eqr),e(lf,Cqr),e(lf,UY),e(UY,wqr),e(lf,Aqr),e(Jt,yqr),M(Tw,Jt,null),e(Mr,Lqr),e(Mr,Jr),M(J7,Jr,null),e(Jr,xqr),e(Jr,vMe),e(vMe,$qr),e(Jr,kqr),e(Jr,Cn),e(Cn,Sqr),e(Cn,FMe),e(FMe,Rqr),e(Cn,Bqr),e(Cn,TMe),e(TMe,Pqr),e(Cn,Iqr),e(Cn,MMe),e(MMe,qqr),e(Cn,Nqr),e(Jr,jqr),e(Jr,EMe),e(EMe,Mw),e(Mw,CMe),e(CMe,Dqr),e(Mw,Gqr),e(Mw,JY),e(JY,Oqr),e(Mw,Vqr),e(Jr,Xqr),M(Ew,Jr,null),Aqe=!0},p(f,[_]){const Y7={};_&2&&(Y7.$$scope={dirty:_,ctx:f}),_f.$set(Y7);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),pg.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),Wg.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),Th.$set(yMe);const K7={};_&2&&(K7.$$scope={dirty:_,ctx:f}),Mh.$set(K7);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),Dh.$set(LMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Gh.$set(wn);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),Xh.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),Ru.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),Pu.$set(kMe);const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:f}),E_.$set(Z7);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),w_.$set(SMe);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),i6.$set(e9);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),c6.$set(RMe);const o9={};_&2&&(o9.$$scope={dirty:_,ctx:f}),W6.$set(o9);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),U6.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),h1.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),u1.$set(IMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),fb.$set(df);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),gb.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),Vb.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),zb.$set(jMe);const r9={};_&2&&(r9.$$scope={dirty:_,ctx:f}),Kb.$set(r9);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),e4.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),P4.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),q4.$set(OMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),C2.$set(Kr);const t9={};_&2&&(t9.$$scope={dirty:_,ctx:f}),A2.$set(t9);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),x2.$set(VMe);const a9={};_&2&&(a9.$$scope={dirty:_,ctx:f}),k2.$set(a9);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),X2.$set(XMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Q2.$set(Zr);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),U2.$set(zMe);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Y2.$set(cf);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),l5.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),d5.$set(WMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),p5.$set(L);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),_5.$set(Cw);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),y5.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),x5.$set(UMe);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),R5.$set(ww);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),P5.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),G5.$set(YMe);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),V5.$set(Aw);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),H5.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),J5.$set(ZMe);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),ev.$set(yw);const eEe={};_&2&&(eEe.$$scope={dirty:_,ctx:f}),rv.$set(eEe);const oEe={};_&2&&(oEe.$$scope={dirty:_,ctx:f}),nv.$set(oEe);const Lw={};_&2&&(Lw.$$scope={dirty:_,ctx:f}),lv.$set(Lw);const rEe={};_&2&&(rEe.$$scope={dirty:_,ctx:f}),gv.$set(rEe);const tEe={};_&2&&(tEe.$$scope={dirty:_,ctx:f}),pv.$set(tEe);const xw={};_&2&&(xw.$$scope={dirty:_,ctx:f}),bv.$set(xw);const aEe={};_&2&&(aEe.$$scope={dirty:_,ctx:f}),Fv.$set(aEe);const nEe={};_&2&&(nEe.$$scope={dirty:_,ctx:f}),fF.$set(nEe);const $w={};_&2&&($w.$$scope={dirty:_,ctx:f}),gF.$set($w);const sEe={};_&2&&(sEe.$$scope={dirty:_,ctx:f}),qF.$set(sEe);const lEe={};_&2&&(lEe.$$scope={dirty:_,ctx:f}),jF.$set(lEe);const kw={};_&2&&(kw.$$scope={dirty:_,ctx:f}),KF.$set(kw);const iEe={};_&2&&(iEe.$$scope={dirty:_,ctx:f}),eT.$set(iEe);const dEe={};_&2&&(dEe.$$scope={dirty:_,ctx:f}),aT.$set(dEe);const Sw={};_&2&&(Sw.$$scope={dirty:_,ctx:f}),sT.$set(Sw);const cEe={};_&2&&(cEe.$$scope={dirty:_,ctx:f}),yT.$set(cEe);const fEe={};_&2&&(fEe.$$scope={dirty:_,ctx:f}),xT.$set(fEe);const Rw={};_&2&&(Rw.$$scope={dirty:_,ctx:f}),DT.$set(Rw);const mEe={};_&2&&(mEe.$$scope={dirty:_,ctx:f}),OT.$set(mEe);const gEe={};_&2&&(gEe.$$scope={dirty:_,ctx:f}),pM.$set(gEe);const Bw={};_&2&&(Bw.$$scope={dirty:_,ctx:f}),_M.$set(Bw);const hEe={};_&2&&(hEe.$$scope={dirty:_,ctx:f}),PM.$set(hEe);const pEe={};_&2&&(pEe.$$scope={dirty:_,ctx:f}),qM.$set(pEe);const Pw={};_&2&&(Pw.$$scope={dirty:_,ctx:f}),DM.$set(Pw);const uEe={};_&2&&(uEe.$$scope={dirty:_,ctx:f}),OM.$set(uEe);const _Ee={};_&2&&(_Ee.$$scope={dirty:_,ctx:f}),XM.$set(_Ee);const Iw={};_&2&&(Iw.$$scope={dirty:_,ctx:f}),QM.$set(Iw);const bEe={};_&2&&(bEe.$$scope={dirty:_,ctx:f}),gE.$set(bEe);const vEe={};_&2&&(vEe.$$scope={dirty:_,ctx:f}),pE.$set(vEe);const qw={};_&2&&(qw.$$scope={dirty:_,ctx:f}),IE.$set(qw);const FEe={};_&2&&(FEe.$$scope={dirty:_,ctx:f}),NE.$set(FEe);const TEe={};_&2&&(TEe.$$scope={dirty:_,ctx:f}),DE.$set(TEe);const Nw={};_&2&&(Nw.$$scope={dirty:_,ctx:f}),OE.$set(Nw);const MEe={};_&2&&(MEe.$$scope={dirty:_,ctx:f}),XE.$set(MEe);const EEe={};_&2&&(EEe.$$scope={dirty:_,ctx:f}),QE.$set(EEe);const jw={};_&2&&(jw.$$scope={dirty:_,ctx:f}),bC.$set(jw);const CEe={};_&2&&(CEe.$$scope={dirty:_,ctx:f}),FC.$set(CEe);const wEe={};_&2&&(wEe.$$scope={dirty:_,ctx:f}),$C.$set(wEe);const Dw={};_&2&&(Dw.$$scope={dirty:_,ctx:f}),SC.$set(Dw);const AEe={};_&2&&(AEe.$$scope={dirty:_,ctx:f}),zC.$set(AEe);const yEe={};_&2&&(yEe.$$scope={dirty:_,ctx:f}),WC.$set(yEe);const Gw={};_&2&&(Gw.$$scope={dirty:_,ctx:f}),a3.$set(Gw);const LEe={};_&2&&(LEe.$$scope={dirty:_,ctx:f}),s3.$set(LEe);const xEe={};_&2&&(xEe.$$scope={dirty:_,ctx:f}),u3.$set(xEe);const Ow={};_&2&&(Ow.$$scope={dirty:_,ctx:f}),b3.$set(Ow);const $Ee={};_&2&&($Ee.$$scope={dirty:_,ctx:f}),x3.$set($Ee);const kEe={};_&2&&(kEe.$$scope={dirty:_,ctx:f}),k3.$set(kEe);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),O3.$set(Vw);const SEe={};_&2&&(SEe.$$scope={dirty:_,ctx:f}),X3.$set(SEe);const REe={};_&2&&(REe.$$scope={dirty:_,ctx:f}),Z3.$set(REe);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),ow.$set(Xw);const BEe={};_&2&&(BEe.$$scope={dirty:_,ctx:f}),cw.$set(BEe);const PEe={};_&2&&(PEe.$$scope={dirty:_,ctx:f}),mw.$set(PEe);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),hw.$set(zw);const IEe={};_&2&&(IEe.$$scope={dirty:_,ctx:f}),uw.$set(IEe);const qEe={};_&2&&(qEe.$$scope={dirty:_,ctx:f}),vw.$set(qEe);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),Tw.$set(Qw);const NEe={};_&2&&(NEe.$$scope={dirty:_,ctx:f}),Ew.$set(NEe)},i(f){Aqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(Q0.$$.fragment,f),E(W0.$$.fragment,f),E(_f.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(K0.$$.fragment,f),E(pg.$$.fragment,f),E(Z0.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ay.$$.fragment,f),E(Wg.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(cy.$$.fragment,f),E(Th.$$.fragment,f),E(Mh.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(uy.$$.fragment,f),E(Dh.$$.fragment,f),E(Gh.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(Xh.$$.fragment,f),E(My.$$.fragment,f),E(Ru.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(Pu.$$.fragment,f),E(yy.$$.fragment,f),E(E_.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(w_.$$.fragment,f),E(Sy.$$.fragment,f),E(i6.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(c6.$$.fragment,f),E(qy.$$.fragment,f),E(W6.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(U6.$$.fragment,f),E(Oy.$$.fragment,f),E(h1.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(u1.$$.fragment,f),E(Wy.$$.fragment,f),E(fb.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(gb.$$.fragment,f),E(Ky.$$.fragment,f),E(Vb.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(zb.$$.fragment,f),E(tL.$$.fragment,f),E(Kb.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(e4.$$.fragment,f),E(iL.$$.fragment,f),E(P4.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(q4.$$.fragment,f),E(gL.$$.fragment,f),E(C2.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(A2.$$.fragment,f),E(bL.$$.fragment,f),E(x2.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(k2.$$.fragment,f),E(EL.$$.fragment,f),E(X2.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(Q2.$$.fragment,f),E(LL.$$.fragment,f),E(U2.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(Y2.$$.fragment,f),E(RL.$$.fragment,f),E(l5.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(d5.$$.fragment,f),E(NL.$$.fragment,f),E(p5.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(_5.$$.fragment,f),E(VL.$$.fragment,f),E(y5.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(x5.$$.fragment,f),E(HL.$$.fragment,f),E(R5.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(P5.$$.fragment,f),E(e8.$$.fragment,f),E(G5.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(V5.$$.fragment,f),E(n8.$$.fragment,f),E(H5.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(J5.$$.fragment,f),E(c8.$$.fragment,f),E(ev.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(rv.$$.fragment,f),E(u8.$$.fragment,f),E(nv.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(lv.$$.fragment,f),E(T8.$$.fragment,f),E(gv.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(pv.$$.fragment,f),E(A8.$$.fragment,f),E(bv.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(Fv.$$.fragment,f),E(k8.$$.fragment,f),E(fF.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(gF.$$.fragment,f),E(I8.$$.fragment,f),E(qF.$$.fragment,f),E(q8.$$.fragment,f),E(N8.$$.fragment,f),E(D8.$$.fragment,f),E(jF.$$.fragment,f),E(G8.$$.fragment,f),E(KF.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(eT.$$.fragment,f),E(Q8.$$.fragment,f),E(aT.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(sT.$$.fragment,f),E(Y8.$$.fragment,f),E(yT.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(ox.$$.fragment,f),E(xT.$$.fragment,f),E(rx.$$.fragment,f),E(DT.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(OT.$$.fragment,f),E(lx.$$.fragment,f),E(pM.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(_M.$$.fragment,f),E(mx.$$.fragment,f),E(PM.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(ux.$$.fragment,f),E(qM.$$.fragment,f),E(_x.$$.fragment,f),E(DM.$$.fragment,f),E(vx.$$.fragment,f),E(Fx.$$.fragment,f),E(Mx.$$.fragment,f),E(OM.$$.fragment,f),E(Ex.$$.fragment,f),E(XM.$$.fragment,f),E(Cx.$$.fragment,f),E(wx.$$.fragment,f),E(yx.$$.fragment,f),E(QM.$$.fragment,f),E(Lx.$$.fragment,f),E(gE.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(pE.$$.fragment,f),E(Rx.$$.fragment,f),E(IE.$$.fragment,f),E(Bx.$$.fragment,f),E(Px.$$.fragment,f),E(qx.$$.fragment,f),E(NE.$$.fragment,f),E(Nx.$$.fragment,f),E(DE.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(OE.$$.fragment,f),E(Vx.$$.fragment,f),E(XE.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(QE.$$.fragment,f),E(Hx.$$.fragment,f),E(bC.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(FC.$$.fragment,f),E(Zx.$$.fragment,f),E($C.$$.fragment,f),E(e7.$$.fragment,f),E(o7.$$.fragment,f),E(t7.$$.fragment,f),E(SC.$$.fragment,f),E(a7.$$.fragment,f),E(zC.$$.fragment,f),E(n7.$$.fragment,f),E(s7.$$.fragment,f),E(i7.$$.fragment,f),E(WC.$$.fragment,f),E(d7.$$.fragment,f),E(a3.$$.fragment,f),E(c7.$$.fragment,f),E(f7.$$.fragment,f),E(g7.$$.fragment,f),E(s3.$$.fragment,f),E(h7.$$.fragment,f),E(u3.$$.fragment,f),E(p7.$$.fragment,f),E(u7.$$.fragment,f),E(b7.$$.fragment,f),E(b3.$$.fragment,f),E(v7.$$.fragment,f),E(x3.$$.fragment,f),E(F7.$$.fragment,f),E(T7.$$.fragment,f),E(E7.$$.fragment,f),E(k3.$$.fragment,f),E(C7.$$.fragment,f),E(O3.$$.fragment,f),E(w7.$$.fragment,f),E(A7.$$.fragment,f),E(L7.$$.fragment,f),E(X3.$$.fragment,f),E(x7.$$.fragment,f),E(Z3.$$.fragment,f),E($7.$$.fragment,f),E(k7.$$.fragment,f),E(R7.$$.fragment,f),E(ow.$$.fragment,f),E(B7.$$.fragment,f),E(cw.$$.fragment,f),E(P7.$$.fragment,f),E(I7.$$.fragment,f),E(N7.$$.fragment,f),E(mw.$$.fragment,f),E(j7.$$.fragment,f),E(hw.$$.fragment,f),E(D7.$$.fragment,f),E(G7.$$.fragment,f),E(V7.$$.fragment,f),E(uw.$$.fragment,f),E(X7.$$.fragment,f),E(vw.$$.fragment,f),E(Q7.$$.fragment,f),E(W7.$$.fragment,f),E(U7.$$.fragment,f),E(Tw.$$.fragment,f),E(J7.$$.fragment,f),E(Ew.$$.fragment,f),Aqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(Q0.$$.fragment,f),C(W0.$$.fragment,f),C(_f.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(K0.$$.fragment,f),C(pg.$$.fragment,f),C(Z0.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ay.$$.fragment,f),C(Wg.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(cy.$$.fragment,f),C(Th.$$.fragment,f),C(Mh.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(uy.$$.fragment,f),C(Dh.$$.fragment,f),C(Gh.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(Xh.$$.fragment,f),C(My.$$.fragment,f),C(Ru.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(Pu.$$.fragment,f),C(yy.$$.fragment,f),C(E_.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(w_.$$.fragment,f),C(Sy.$$.fragment,f),C(i6.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(c6.$$.fragment,f),C(qy.$$.fragment,f),C(W6.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(U6.$$.fragment,f),C(Oy.$$.fragment,f),C(h1.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(u1.$$.fragment,f),C(Wy.$$.fragment,f),C(fb.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(gb.$$.fragment,f),C(Ky.$$.fragment,f),C(Vb.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(zb.$$.fragment,f),C(tL.$$.fragment,f),C(Kb.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(e4.$$.fragment,f),C(iL.$$.fragment,f),C(P4.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(q4.$$.fragment,f),C(gL.$$.fragment,f),C(C2.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(A2.$$.fragment,f),C(bL.$$.fragment,f),C(x2.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(k2.$$.fragment,f),C(EL.$$.fragment,f),C(X2.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(Q2.$$.fragment,f),C(LL.$$.fragment,f),C(U2.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(Y2.$$.fragment,f),C(RL.$$.fragment,f),C(l5.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(d5.$$.fragment,f),C(NL.$$.fragment,f),C(p5.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(_5.$$.fragment,f),C(VL.$$.fragment,f),C(y5.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(x5.$$.fragment,f),C(HL.$$.fragment,f),C(R5.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(P5.$$.fragment,f),C(e8.$$.fragment,f),C(G5.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(V5.$$.fragment,f),C(n8.$$.fragment,f),C(H5.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(J5.$$.fragment,f),C(c8.$$.fragment,f),C(ev.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(rv.$$.fragment,f),C(u8.$$.fragment,f),C(nv.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(lv.$$.fragment,f),C(T8.$$.fragment,f),C(gv.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(pv.$$.fragment,f),C(A8.$$.fragment,f),C(bv.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(Fv.$$.fragment,f),C(k8.$$.fragment,f),C(fF.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(gF.$$.fragment,f),C(I8.$$.fragment,f),C(qF.$$.fragment,f),C(q8.$$.fragment,f),C(N8.$$.fragment,f),C(D8.$$.fragment,f),C(jF.$$.fragment,f),C(G8.$$.fragment,f),C(KF.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(eT.$$.fragment,f),C(Q8.$$.fragment,f),C(aT.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(sT.$$.fragment,f),C(Y8.$$.fragment,f),C(yT.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(ox.$$.fragment,f),C(xT.$$.fragment,f),C(rx.$$.fragment,f),C(DT.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(OT.$$.fragment,f),C(lx.$$.fragment,f),C(pM.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(_M.$$.fragment,f),C(mx.$$.fragment,f),C(PM.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(ux.$$.fragment,f),C(qM.$$.fragment,f),C(_x.$$.fragment,f),C(DM.$$.fragment,f),C(vx.$$.fragment,f),C(Fx.$$.fragment,f),C(Mx.$$.fragment,f),C(OM.$$.fragment,f),C(Ex.$$.fragment,f),C(XM.$$.fragment,f),C(Cx.$$.fragment,f),C(wx.$$.fragment,f),C(yx.$$.fragment,f),C(QM.$$.fragment,f),C(Lx.$$.fragment,f),C(gE.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(pE.$$.fragment,f),C(Rx.$$.fragment,f),C(IE.$$.fragment,f),C(Bx.$$.fragment,f),C(Px.$$.fragment,f),C(qx.$$.fragment,f),C(NE.$$.fragment,f),C(Nx.$$.fragment,f),C(DE.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(OE.$$.fragment,f),C(Vx.$$.fragment,f),C(XE.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(QE.$$.fragment,f),C(Hx.$$.fragment,f),C(bC.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(FC.$$.fragment,f),C(Zx.$$.fragment,f),C($C.$$.fragment,f),C(e7.$$.fragment,f),C(o7.$$.fragment,f),C(t7.$$.fragment,f),C(SC.$$.fragment,f),C(a7.$$.fragment,f),C(zC.$$.fragment,f),C(n7.$$.fragment,f),C(s7.$$.fragment,f),C(i7.$$.fragment,f),C(WC.$$.fragment,f),C(d7.$$.fragment,f),C(a3.$$.fragment,f),C(c7.$$.fragment,f),C(f7.$$.fragment,f),C(g7.$$.fragment,f),C(s3.$$.fragment,f),C(h7.$$.fragment,f),C(u3.$$.fragment,f),C(p7.$$.fragment,f),C(u7.$$.fragment,f),C(b7.$$.fragment,f),C(b3.$$.fragment,f),C(v7.$$.fragment,f),C(x3.$$.fragment,f),C(F7.$$.fragment,f),C(T7.$$.fragment,f),C(E7.$$.fragment,f),C(k3.$$.fragment,f),C(C7.$$.fragment,f),C(O3.$$.fragment,f),C(w7.$$.fragment,f),C(A7.$$.fragment,f),C(L7.$$.fragment,f),C(X3.$$.fragment,f),C(x7.$$.fragment,f),C(Z3.$$.fragment,f),C($7.$$.fragment,f),C(k7.$$.fragment,f),C(R7.$$.fragment,f),C(ow.$$.fragment,f),C(B7.$$.fragment,f),C(cw.$$.fragment,f),C(P7.$$.fragment,f),C(I7.$$.fragment,f),C(N7.$$.fragment,f),C(mw.$$.fragment,f),C(j7.$$.fragment,f),C(hw.$$.fragment,f),C(D7.$$.fragment,f),C(G7.$$.fragment,f),C(V7.$$.fragment,f),C(uw.$$.fragment,f),C(X7.$$.fragment,f),C(vw.$$.fragment,f),C(Q7.$$.fragment,f),C(W7.$$.fragment,f),C(U7.$$.fragment,f),C(Tw.$$.fragment,f),C(J7.$$.fragment,f),C(Ew.$$.fragment,f),Aqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(EPe),f&&t(hi),w(Q0),f&&t(CPe),f&&t($n),f&&t(wPe),w(W0,f),f&&t(APe),f&&t(h$),f&&t(yPe),w(_f,f),f&&t(LPe),f&&t(pi),w(H0),f&&t(xPe),f&&t(Co),w(U0),w(K0),w(pg),w(Z0),f&&t($Pe),f&&t(_i),w(ey),f&&t(kPe),f&&t(wo),w(oy),w(ay),w(Wg),w(ny),f&&t(SPe),f&&t(bi),w(sy),f&&t(RPe),f&&t(Ao),w(ly),w(cy),w(Th),w(Mh),w(fy),f&&t(BPe),f&&t(vi),w(my),f&&t(PPe),f&&t(yo),w(gy),w(uy),w(Dh),w(Gh),w(_y),f&&t(IPe),f&&t(Ti),w(by),f&&t(qPe),f&&t(Lo),w(vy),w(Ty),w(Xh),w(My),w(Ru),f&&t(NPe),f&&t(Ci),w(Ey),f&&t(jPe),f&&t(xo),w(Cy),w(Ay),w(Pu),w(yy),w(E_),f&&t(DPe),f&&t(yi),w(Ly),f&&t(GPe),f&&t($o),w(xy),w(ky),w(w_),w(Sy),w(i6),f&&t(OPe),f&&t($i),w(Ry),f&&t(VPe),f&&t(ko),w(By),w(Iy),w(c6),w(qy),w(W6),f&&t(XPe),f&&t(Ri),w(Ny),f&&t(zPe),f&&t(So),w(jy),w(Gy),w(U6),w(Oy),w(h1),f&&t(QPe),f&&t(Ii),w(Vy),f&&t(WPe),f&&t(Ro),w(Xy),w(Qy),w(u1),w(Wy),w(fb),f&&t(HPe),f&&t(ji),w(Hy),f&&t(UPe),f&&t(Bo),w(Uy),w(Yy),w(gb),w(Ky),w(Vb),f&&t(JPe),f&&t(Oi),w(Zy),f&&t(YPe),f&&t(Po),w(eL),w(rL),w(zb),w(tL),w(Kb),f&&t(KPe),f&&t(zi),w(aL),f&&t(ZPe),f&&t(Io),w(nL),w(lL),w(e4),w(iL),w(P4),f&&t(eIe),f&&t(Hi),w(dL),f&&t(oIe),f&&t(qo),w(cL),w(mL),w(q4),w(gL),w(C2),f&&t(rIe),f&&t(Yi),w(hL),f&&t(tIe),f&&t(No),w(pL),w(_L),w(A2),w(bL),w(x2),f&&t(aIe),f&&t(ed),w(vL),f&&t(nIe),f&&t(jo),w(FL),w(ML),w(k2),w(EL),w(X2),f&&t(sIe),f&&t(td),w(CL),f&&t(lIe),f&&t(Do),w(wL),w(yL),w(Q2),w(LL),w(U2),f&&t(iIe),f&&t(sd),w(xL),f&&t(dIe),f&&t(Go),w($L),w(SL),w(Y2),w(RL),w(l5),f&&t(cIe),f&&t(dd),w(BL),f&&t(fIe),f&&t(Oo),w(PL),w(qL),w(d5),w(NL),w(p5),f&&t(mIe),f&&t(md),w(jL),f&&t(gIe),f&&t(Vo),w(DL),w(OL),w(_5),w(VL),w(y5),f&&t(hIe),f&&t(pd),w(XL),f&&t(pIe),f&&t(Xo),w(zL),w(WL),w(x5),w(HL),w(R5),f&&t(uIe),f&&t(bd),w(JL),f&&t(_Ie),f&&t(zo),w(YL),w(ZL),w(P5),w(e8),w(G5),f&&t(bIe),f&&t(Td),w(o8),f&&t(vIe),f&&t(Qo),w(r8),w(a8),w(V5),w(n8),w(H5),f&&t(FIe),f&&t(wd),w(s8),f&&t(TIe),f&&t(Wo),w(l8),w(d8),w(J5),w(c8),w(ev),f&&t(MIe),f&&t(Ld),w(m8),f&&t(EIe),f&&t(Ho),w(g8),w(p8),w(rv),w(u8),w(nv),f&&t(CIe),f&&t(kd),w(_8),f&&t(wIe),f&&t(Uo),w(b8),w(F8),w(lv),w(T8),w(gv),f&&t(AIe),f&&t(Bd),w(M8),f&&t(yIe),f&&t(Jo),w(E8),w(w8),w(pv),w(A8),w(bv),f&&t(LIe),f&&t(qd),w(y8),f&&t(xIe),f&&t(Yo),w(L8),w($8),w(Fv),w(k8),w(fF),f&&t($Ie),f&&t(Dd),w(S8),f&&t(kIe),f&&t(Ko),w(R8),w(P8),w(gF),w(I8),w(qF),f&&t(SIe),f&&t(Vd),w(q8),f&&t(RIe),f&&t(Zo),w(N8),w(D8),w(jF),w(G8),w(KF),f&&t(BIe),f&&t(Qd),w(O8),f&&t(PIe),f&&t(er),w(V8),w(z8),w(eT),w(Q8),w(aT),f&&t(IIe),f&&t(Jd),w(W8),f&&t(qIe),f&&t(or),w(H8),w(J8),w(sT),w(Y8),w(yT),f&&t(NIe),f&&t(Zd),w(K8),f&&t(jIe),f&&t(rr),w(Z8),w(ox),w(xT),w(rx),w(DT),f&&t(DIe),f&&t(rc),w(tx),f&&t(GIe),f&&t(tr),w(ax),w(sx),w(OT),w(lx),w(pM),f&&t(OIe),f&&t(nc),w(ix),f&&t(VIe),f&&t(ar),w(dx),w(fx),w(_M),w(mx),w(PM),f&&t(XIe),f&&t(ic),w(gx),f&&t(zIe),f&&t(nr),w(hx),w(ux),w(qM),w(_x),w(DM),f&&t(QIe),f&&t(fc),w(vx),f&&t(WIe),f&&t(sr),w(Fx),w(Mx),w(OM),w(Ex),w(XM),f&&t(HIe),f&&t(hc),w(Cx),f&&t(UIe),f&&t(lr),w(wx),w(yx),w(QM),w(Lx),w(gE),f&&t(JIe),f&&t(_c),w(xx),f&&t(YIe),f&&t(ir),w($x),w(Sx),w(pE),w(Rx),w(IE),f&&t(KIe),f&&t(Fc),w(Bx),f&&t(ZIe),f&&t(dr),w(Px),w(qx),w(NE),w(Nx),w(DE),f&&t(eqe),f&&t(Ec),w(jx),f&&t(oqe),f&&t(cr),w(Dx),w(Ox),w(OE),w(Vx),w(XE),f&&t(rqe),f&&t(Ac),w(Xx),f&&t(tqe),f&&t(fr),w(zx),w(Wx),w(QE),w(Hx),w(bC),f&&t(aqe),f&&t(xc),w(Ux),f&&t(nqe),f&&t(mr),w(Jx),w(Kx),w(FC),w(Zx),w($C),f&&t(sqe),f&&t(Sc),w(e7),f&&t(lqe),f&&t(gr),w(o7),w(t7),w(SC),w(a7),w(zC),f&&t(iqe),f&&t(Pc),w(n7),f&&t(dqe),f&&t(hr),w(s7),w(i7),w(WC),w(d7),w(a3),f&&t(cqe),f&&t(Nc),w(c7),f&&t(fqe),f&&t(pr),w(f7),w(g7),w(s3),w(h7),w(u3),f&&t(mqe),f&&t(Gc),w(p7),f&&t(gqe),f&&t(ur),w(u7),w(b7),w(b3),w(v7),w(x3),f&&t(hqe),f&&t(Xc),w(F7),f&&t(pqe),f&&t(_r),w(T7),w(E7),w(k3),w(C7),w(O3),f&&t(uqe),f&&t(Wc),w(w7),f&&t(_qe),f&&t(br),w(A7),w(L7),w(X3),w(x7),w(Z3),f&&t(bqe),f&&t(Jc),w($7),f&&t(vqe),f&&t(vr),w(k7),w(R7),w(ow),w(B7),w(cw),f&&t(Fqe),f&&t(Zc),w(P7),f&&t(Tqe),f&&t(Fr),w(I7),w(N7),w(mw),w(j7),w(hw),f&&t(Mqe),f&&t(rf),w(D7),f&&t(Eqe),f&&t(Tr),w(G7),w(V7),w(uw),w(X7),w(vw),f&&t(Cqe),f&&t(nf),w(Q7),f&&t(wqe),f&&t(Mr),w(W7),w(U7),w(Tw),w(J7),w(Ew)}}}const dLt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cLt(A){return c0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _Lt extends s0t{constructor(g){super();l0t(this,g,cLt,iLt,i0t,{})}}export{_Lt as default,dLt as metadata};
