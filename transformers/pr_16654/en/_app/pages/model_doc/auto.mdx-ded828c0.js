import{S as swt,i as lwt,s as iwt,e as a,k as l,w as F,t as o,M as dwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as cwt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as lIr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function fwt(L){let g,v,p,m,u,d,h,Mo,oi,rf,Kr,ri,ti,w0,tf,qe,Xe,ai,Mn,A0,En,Cn,y0,ni,wn,L0,si,af,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),oi=a("code"),rf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),w0=o(")."),tf=l(),qe=a("p"),Xe=o("Likewise, if your "),ai=a("code"),Mn=o("NewModel"),A0=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),y0=o(`, make sure its
`),ni=a("code"),wn=o("config_class"),L0=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),af=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var D9=s(p);m=r(D9,"NewModelConfig"),D9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Mo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var G9=s(oi);rf=r(G9,"model_type"),G9.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var O9=s(ri);ti=r(O9,'"new-model"'),O9.forEach(t),w0=r(Ae,")."),Ae.forEach(t),tf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ai=n(Eo,"CODE",{});var Fa=s(ai);Mn=r(Fa,"NewModel"),Fa.forEach(t),A0=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var V9=s(En);Cn=r(V9,"PreTrainedModel"),V9.forEach(t),y0=r(Eo,`, make sure its
`),ni=n(Eo,"CODE",{});var nf=s(ni);wn=r(nf,"config_class"),nf.forEach(t),L0=r(Eo,` attribute is set to the same class you use when registering the model (here
`),si=n(Eo,"CODE",{});var X9=s(si);af=r(X9,"NewModelConfig"),X9.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,oi),e(oi,rf),e(g,Kr),e(g,ri),e(ri,ti),e(g,w0),b(ze,tf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ai),e(ai,Mn),e(qe,A0),e(qe,En),e(En,Cn),e(qe,y0),e(qe,ni),e(ni,wn),e(qe,L0),e(qe,si),e(si,af),e(qe,va)},d(ze){ze&&t(g),ze&&t(tf),ze&&t(qe)}}}function mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function _wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n0t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s0t(L){let g,v,p,m,u,d,h,Mo,oi,rf,Kr,ri,ti,w0,tf,qe,Xe,ai,Mn,A0,En,Cn,y0,ni,wn,L0,si,af,va,ze,Ae,D9,li,G9,O9,Eo,Fa,V9,nf,X9,DNe,BBe,ii,sf,gZ,x0,GNe,hZ,ONe,PBe,An,VNe,pZ,XNe,zNe,uZ,QNe,WNe,IBe,$0,qBe,z9,HNe,NBe,lf,jBe,di,df,_Z,k0,UNe,bZ,JNe,DBe,Co,S0,YNe,R0,KNe,Q9,ZNe,eje,oje,B0,rje,vZ,tje,aje,nje,Mr,P0,sje,FZ,lje,ije,ci,dje,TZ,cje,fje,MZ,mje,gje,hje,A,cf,EZ,pje,uje,W9,_je,bje,vje,ff,CZ,Fje,Tje,H9,Mje,Eje,Cje,mf,wZ,wje,Aje,U9,yje,Lje,xje,gf,AZ,$je,kje,J9,Sje,Rje,Bje,hf,yZ,Pje,Ije,Y9,qje,Nje,jje,pf,LZ,Dje,Gje,K9,Oje,Vje,Xje,uf,xZ,zje,Qje,Z9,Wje,Hje,Uje,_f,$Z,Jje,Yje,e$,Kje,Zje,eDe,bf,kZ,oDe,rDe,o$,tDe,aDe,nDe,vf,SZ,sDe,lDe,r$,iDe,dDe,cDe,Ff,RZ,fDe,mDe,t$,gDe,hDe,pDe,Tf,BZ,uDe,_De,a$,bDe,vDe,FDe,Mf,PZ,TDe,MDe,n$,EDe,CDe,wDe,Ef,IZ,ADe,yDe,s$,LDe,xDe,$De,Cf,qZ,kDe,SDe,l$,RDe,BDe,PDe,wf,NZ,IDe,qDe,i$,NDe,jDe,DDe,Af,jZ,GDe,ODe,d$,VDe,XDe,zDe,yf,DZ,QDe,WDe,c$,HDe,UDe,JDe,Lf,GZ,YDe,KDe,f$,ZDe,eGe,oGe,xf,OZ,rGe,tGe,m$,aGe,nGe,sGe,$f,VZ,lGe,iGe,g$,dGe,cGe,fGe,kf,XZ,mGe,gGe,h$,hGe,pGe,uGe,Sf,zZ,_Ge,bGe,p$,vGe,FGe,TGe,Rf,QZ,MGe,EGe,u$,CGe,wGe,AGe,Bf,WZ,yGe,LGe,_$,xGe,$Ge,kGe,Pf,HZ,SGe,RGe,b$,BGe,PGe,IGe,If,UZ,qGe,NGe,v$,jGe,DGe,GGe,qf,JZ,OGe,VGe,F$,XGe,zGe,QGe,Nf,YZ,WGe,HGe,T$,UGe,JGe,YGe,jf,KZ,KGe,ZGe,M$,eOe,oOe,rOe,Df,ZZ,tOe,aOe,E$,nOe,sOe,lOe,Gf,eee,iOe,dOe,C$,cOe,fOe,mOe,Of,oee,gOe,hOe,w$,pOe,uOe,_Oe,Vf,ree,bOe,vOe,A$,FOe,TOe,MOe,Xf,tee,EOe,COe,y$,wOe,AOe,yOe,zf,aee,LOe,xOe,L$,$Oe,kOe,SOe,Qf,nee,ROe,BOe,x$,POe,IOe,qOe,Wf,see,NOe,jOe,$$,DOe,GOe,OOe,Hf,lee,VOe,XOe,k$,zOe,QOe,WOe,Uf,iee,HOe,UOe,S$,JOe,YOe,KOe,Jf,dee,ZOe,eVe,R$,oVe,rVe,tVe,Yf,cee,aVe,nVe,B$,sVe,lVe,iVe,Kf,fee,dVe,cVe,P$,fVe,mVe,gVe,Zf,mee,hVe,pVe,I$,uVe,_Ve,bVe,em,gee,vVe,FVe,q$,TVe,MVe,EVe,om,hee,CVe,wVe,N$,AVe,yVe,LVe,rm,pee,xVe,$Ve,j$,kVe,SVe,RVe,tm,uee,BVe,PVe,D$,IVe,qVe,NVe,am,_ee,jVe,DVe,G$,GVe,OVe,VVe,nm,bee,XVe,zVe,O$,QVe,WVe,HVe,sm,vee,UVe,JVe,V$,YVe,KVe,ZVe,lm,Fee,eXe,oXe,X$,rXe,tXe,aXe,im,Tee,nXe,sXe,z$,lXe,iXe,dXe,dm,Mee,cXe,fXe,Q$,mXe,gXe,hXe,cm,Eee,pXe,uXe,W$,_Xe,bXe,vXe,fm,Cee,FXe,TXe,H$,MXe,EXe,CXe,mm,wee,wXe,AXe,U$,yXe,LXe,xXe,gm,Aee,$Xe,kXe,J$,SXe,RXe,BXe,hm,yee,PXe,IXe,Y$,qXe,NXe,jXe,pm,Lee,DXe,GXe,K$,OXe,VXe,XXe,um,xee,zXe,QXe,Z$,WXe,HXe,UXe,_m,$ee,JXe,YXe,ek,KXe,ZXe,eze,bm,kee,oze,rze,ok,tze,aze,nze,vm,See,sze,lze,rk,ize,dze,cze,Fm,Ree,fze,mze,tk,gze,hze,pze,Tm,Bee,uze,_ze,ak,bze,vze,Fze,Mm,Pee,Tze,Mze,nk,Eze,Cze,wze,Em,Iee,Aze,yze,sk,Lze,xze,$ze,Cm,qee,kze,Sze,lk,Rze,Bze,Pze,wm,Nee,Ize,qze,ik,Nze,jze,Dze,Am,jee,Gze,Oze,dk,Vze,Xze,zze,ym,Dee,Qze,Wze,ck,Hze,Uze,Jze,Lm,Gee,Yze,Kze,fk,Zze,eQe,oQe,xm,Oee,rQe,tQe,mk,aQe,nQe,sQe,$m,Vee,lQe,iQe,gk,dQe,cQe,fQe,km,Xee,mQe,gQe,hk,hQe,pQe,uQe,Sm,zee,_Qe,bQe,pk,vQe,FQe,TQe,Rm,Qee,MQe,EQe,uk,CQe,wQe,AQe,Bm,Wee,yQe,LQe,_k,xQe,$Qe,kQe,Pm,Hee,SQe,RQe,bk,BQe,PQe,IQe,Im,Uee,qQe,NQe,vk,jQe,DQe,GQe,qm,Jee,OQe,VQe,Fk,XQe,zQe,QQe,Nm,Yee,WQe,HQe,Tk,UQe,JQe,YQe,jm,Kee,KQe,ZQe,Mk,eWe,oWe,rWe,Dm,Zee,tWe,aWe,Ek,nWe,sWe,lWe,Gm,eoe,iWe,dWe,Ck,cWe,fWe,mWe,Om,ooe,gWe,hWe,wk,pWe,uWe,_We,Vm,roe,bWe,vWe,Ak,FWe,TWe,MWe,Xm,toe,EWe,CWe,yk,wWe,AWe,yWe,zm,aoe,LWe,xWe,Lk,$We,kWe,SWe,Qm,noe,RWe,BWe,xk,PWe,IWe,qWe,Wm,soe,NWe,jWe,$k,DWe,GWe,OWe,Hm,loe,VWe,XWe,kk,zWe,QWe,WWe,Um,ioe,HWe,UWe,Sk,JWe,YWe,KWe,Jm,doe,ZWe,eHe,Rk,oHe,rHe,tHe,Ym,coe,aHe,nHe,Bk,sHe,lHe,iHe,Km,foe,dHe,cHe,Pk,fHe,mHe,gHe,Zm,moe,hHe,pHe,Ik,uHe,_He,bHe,eg,goe,vHe,FHe,qk,THe,MHe,EHe,og,hoe,CHe,wHe,Nk,AHe,yHe,LHe,rg,poe,xHe,$He,jk,kHe,SHe,RHe,tg,uoe,BHe,PHe,Dk,IHe,qHe,NHe,ag,_oe,jHe,DHe,Gk,GHe,OHe,VHe,ng,boe,XHe,zHe,Ok,QHe,WHe,HHe,sg,UHe,lg,I0,JHe,voe,YHe,GBe,fi,ig,Foe,q0,KHe,Toe,ZHe,OBe,wo,N0,eUe,j0,oUe,Vk,rUe,tUe,aUe,D0,nUe,Moe,sUe,lUe,iUe,Er,G0,dUe,Eoe,cUe,fUe,Ta,mUe,Coe,gUe,hUe,woe,pUe,uUe,Aoe,_Ue,bUe,vUe,k,yn,yoe,FUe,TUe,Xk,MUe,EUe,zk,CUe,wUe,AUe,Ln,Loe,yUe,LUe,Qk,xUe,$Ue,Wk,kUe,SUe,RUe,xn,xoe,BUe,PUe,Hk,IUe,qUe,Uk,NUe,jUe,DUe,dg,$oe,GUe,OUe,Jk,VUe,XUe,zUe,$n,koe,QUe,WUe,Yk,HUe,UUe,Kk,JUe,YUe,KUe,cg,Soe,ZUe,eJe,Zk,oJe,rJe,tJe,fg,Roe,aJe,nJe,eS,sJe,lJe,iJe,mg,Boe,dJe,cJe,oS,fJe,mJe,gJe,kn,Poe,hJe,pJe,rS,uJe,_Je,tS,bJe,vJe,FJe,Sn,Ioe,TJe,MJe,aS,EJe,CJe,nS,wJe,AJe,yJe,Rn,qoe,LJe,xJe,sS,$Je,kJe,lS,SJe,RJe,BJe,gg,Noe,PJe,IJe,iS,qJe,NJe,jJe,hg,joe,DJe,GJe,dS,OJe,VJe,XJe,Bn,Doe,zJe,QJe,cS,WJe,HJe,fS,UJe,JJe,YJe,pg,Goe,KJe,ZJe,mS,eYe,oYe,rYe,Pn,Ooe,tYe,aYe,gS,nYe,sYe,hS,lYe,iYe,dYe,In,Voe,cYe,fYe,pS,mYe,gYe,uS,hYe,pYe,uYe,qn,Xoe,_Ye,bYe,_S,vYe,FYe,bS,TYe,MYe,EYe,ug,zoe,CYe,wYe,vS,AYe,yYe,LYe,Nn,Qoe,xYe,$Ye,FS,kYe,SYe,TS,RYe,BYe,PYe,jn,Woe,IYe,qYe,MS,NYe,jYe,ES,DYe,GYe,OYe,Dn,Hoe,VYe,XYe,CS,zYe,QYe,wS,WYe,HYe,UYe,Gn,Uoe,JYe,YYe,AS,KYe,ZYe,yS,eKe,oKe,rKe,On,Joe,tKe,aKe,LS,nKe,sKe,xS,lKe,iKe,dKe,Vn,Yoe,cKe,fKe,$S,mKe,gKe,kS,hKe,pKe,uKe,_g,Koe,_Ke,bKe,SS,vKe,FKe,TKe,Xn,Zoe,MKe,EKe,RS,CKe,wKe,BS,AKe,yKe,LKe,bg,ere,xKe,$Ke,PS,kKe,SKe,RKe,zn,ore,BKe,PKe,IS,IKe,qKe,qS,NKe,jKe,DKe,Qn,rre,GKe,OKe,NS,VKe,XKe,jS,zKe,QKe,WKe,Wn,tre,HKe,UKe,DS,JKe,YKe,GS,KKe,ZKe,eZe,Hn,are,oZe,rZe,OS,tZe,aZe,VS,nZe,sZe,lZe,Un,nre,iZe,dZe,XS,cZe,fZe,zS,mZe,gZe,hZe,vg,sre,pZe,uZe,QS,_Ze,bZe,vZe,Jn,lre,FZe,TZe,WS,MZe,EZe,HS,CZe,wZe,AZe,Yn,ire,yZe,LZe,US,xZe,$Ze,JS,kZe,SZe,RZe,Kn,dre,BZe,PZe,YS,IZe,qZe,KS,NZe,jZe,DZe,Zn,cre,GZe,OZe,ZS,VZe,XZe,eR,zZe,QZe,WZe,es,fre,HZe,UZe,oR,JZe,YZe,rR,KZe,ZZe,eeo,os,mre,oeo,reo,tR,teo,aeo,aR,neo,seo,leo,Fg,gre,ieo,deo,nR,ceo,feo,meo,rs,hre,geo,heo,sR,peo,ueo,lR,_eo,beo,veo,Tg,pre,Feo,Teo,iR,Meo,Eeo,Ceo,Mg,ure,weo,Aeo,dR,yeo,Leo,xeo,ts,_re,$eo,keo,cR,Seo,Reo,fR,Beo,Peo,Ieo,as,bre,qeo,Neo,mR,jeo,Deo,gR,Geo,Oeo,Veo,ns,vre,Xeo,zeo,hR,Qeo,Weo,pR,Heo,Ueo,Jeo,Eg,Fre,Yeo,Keo,uR,Zeo,eoo,ooo,ss,Tre,roo,too,_R,aoo,noo,bR,soo,loo,ioo,ls,Mre,doo,coo,vR,foo,moo,FR,goo,hoo,poo,is,Ere,uoo,_oo,TR,boo,voo,MR,Foo,Too,Moo,ds,Cre,Eoo,Coo,ER,woo,Aoo,CR,yoo,Loo,xoo,cs,wre,$oo,koo,wR,Soo,Roo,AR,Boo,Poo,Ioo,fs,Are,qoo,Noo,yR,joo,Doo,LR,Goo,Ooo,Voo,Cg,yre,Xoo,zoo,xR,Qoo,Woo,Hoo,wg,Lre,Uoo,Joo,$R,Yoo,Koo,Zoo,Ag,xre,ero,oro,kR,rro,tro,aro,yg,$re,nro,sro,SR,lro,iro,dro,ms,kre,cro,fro,RR,mro,gro,BR,hro,pro,uro,Lg,Sre,_ro,bro,PR,vro,Fro,Tro,gs,Rre,Mro,Ero,IR,Cro,wro,qR,Aro,yro,Lro,hs,Bre,xro,$ro,NR,kro,Sro,jR,Rro,Bro,Pro,ps,Pre,Iro,qro,DR,Nro,jro,GR,Dro,Gro,Oro,us,Ire,Vro,Xro,OR,zro,Qro,VR,Wro,Hro,Uro,_s,qre,Jro,Yro,XR,Kro,Zro,zR,eto,oto,rto,bs,Nre,tto,ato,QR,nto,sto,WR,lto,ito,dto,xg,jre,cto,fto,HR,mto,gto,hto,$g,Dre,pto,uto,UR,_to,bto,vto,vs,Gre,Fto,Tto,JR,Mto,Eto,YR,Cto,wto,Ato,Fs,Ore,yto,Lto,KR,xto,$to,ZR,kto,Sto,Rto,Ts,Vre,Bto,Pto,eB,Ito,qto,oB,Nto,jto,Dto,kg,Xre,Gto,Oto,rB,Vto,Xto,zto,Sg,zre,Qto,Wto,tB,Hto,Uto,Jto,Rg,Qre,Yto,Kto,aB,Zto,eao,oao,Ms,Wre,rao,tao,nB,aao,nao,sB,sao,lao,iao,Bg,Hre,dao,cao,lB,fao,mao,gao,Pg,Ure,hao,pao,iB,uao,_ao,bao,Es,Jre,vao,Fao,dB,Tao,Mao,cB,Eao,Cao,wao,Ig,Yre,Aao,yao,fB,Lao,xao,$ao,qg,Kre,kao,Sao,mB,Rao,Bao,Pao,Cs,Zre,Iao,qao,gB,Nao,jao,hB,Dao,Gao,Oao,ws,ete,Vao,Xao,pB,zao,Qao,uB,Wao,Hao,Uao,As,ote,Jao,Yao,_B,Kao,Zao,bB,eno,ono,rno,ys,rte,tno,ano,vB,nno,sno,FB,lno,ino,dno,Ng,cno,jg,O0,fno,tte,mno,VBe,mi,Dg,ate,V0,gno,nte,hno,XBe,Ao,X0,pno,z0,uno,TB,_no,bno,vno,Q0,Fno,ste,Tno,Mno,Eno,Qe,W0,Cno,lte,wno,Ano,Ma,yno,ite,Lno,xno,dte,$no,kno,cte,Sno,Rno,Bno,oe,Gg,fte,Pno,Ino,MB,qno,Nno,jno,Og,mte,Dno,Gno,EB,Ono,Vno,Xno,Vg,gte,zno,Qno,CB,Wno,Hno,Uno,Xg,hte,Jno,Yno,wB,Kno,Zno,eso,zg,pte,oso,rso,AB,tso,aso,nso,Qg,ute,sso,lso,yB,iso,dso,cso,Wg,_te,fso,mso,LB,gso,hso,pso,Hg,bte,uso,_so,xB,bso,vso,Fso,Ug,vte,Tso,Mso,Fte,Eso,Cso,wso,Jg,Tte,Aso,yso,$B,Lso,xso,$so,Yg,Mte,kso,Sso,kB,Rso,Bso,Pso,Kg,Ete,Iso,qso,SB,Nso,jso,Dso,Zg,Cte,Gso,Oso,RB,Vso,Xso,zso,eh,wte,Qso,Wso,BB,Hso,Uso,Jso,oh,Ate,Yso,Kso,PB,Zso,elo,olo,rh,yte,rlo,tlo,IB,alo,nlo,slo,th,Lte,llo,ilo,qB,dlo,clo,flo,ah,xte,mlo,glo,NB,hlo,plo,ulo,nh,$te,_lo,blo,jB,vlo,Flo,Tlo,sh,kte,Mlo,Elo,DB,Clo,wlo,Alo,lh,Ste,ylo,Llo,GB,xlo,$lo,klo,ih,Rte,Slo,Rlo,OB,Blo,Plo,Ilo,dh,Bte,qlo,Nlo,VB,jlo,Dlo,Glo,ch,Pte,Olo,Vlo,XB,Xlo,zlo,Qlo,fh,Ite,Wlo,Hlo,zB,Ulo,Jlo,Ylo,mh,Klo,gh,Zlo,hh,H0,eio,qte,oio,zBe,gi,ph,Nte,U0,rio,jte,tio,QBe,yo,J0,aio,Y0,nio,QB,sio,lio,iio,K0,dio,Dte,cio,fio,mio,We,Z0,gio,Gte,hio,pio,hi,uio,Ote,_io,bio,Vte,vio,Fio,Tio,be,uh,Xte,Mio,Eio,WB,Cio,wio,Aio,_h,zte,yio,Lio,Qte,xio,$io,kio,bh,Wte,Sio,Rio,HB,Bio,Pio,Iio,vh,Hte,qio,Nio,UB,jio,Dio,Gio,Fh,Ute,Oio,Vio,JB,Xio,zio,Qio,Th,Jte,Wio,Hio,YB,Uio,Jio,Yio,Mh,Yte,Kio,Zio,KB,edo,odo,rdo,Eh,Kte,tdo,ado,ZB,ndo,sdo,ldo,Ch,Zte,ido,ddo,eP,cdo,fdo,mdo,wh,eae,gdo,hdo,oP,pdo,udo,_do,Ah,oae,bdo,vdo,rP,Fdo,Tdo,Mdo,yh,rae,Edo,Cdo,tP,wdo,Ado,ydo,Lh,tae,Ldo,xdo,aP,$do,kdo,Sdo,xh,aae,Rdo,Bdo,nP,Pdo,Ido,qdo,$h,nae,Ndo,jdo,sP,Ddo,Gdo,Odo,kh,Vdo,Sh,Xdo,Rh,ey,zdo,sae,Qdo,WBe,pi,Bh,lae,oy,Wdo,iae,Hdo,HBe,Lo,ry,Udo,ui,Jdo,lP,Ydo,Kdo,iP,Zdo,eco,oco,ty,rco,dae,tco,aco,nco,Zr,ay,sco,cae,lco,ico,_i,dco,fae,cco,fco,dP,mco,gco,hco,Ph,pco,He,ny,uco,mae,_co,bco,Ea,vco,gae,Fco,Tco,hae,Mco,Eco,pae,Cco,wco,Aco,x,Ih,uae,yco,Lco,cP,xco,$co,kco,qh,_ae,Sco,Rco,fP,Bco,Pco,Ico,Nh,bae,qco,Nco,mP,jco,Dco,Gco,jh,vae,Oco,Vco,gP,Xco,zco,Qco,Dh,Fae,Wco,Hco,hP,Uco,Jco,Yco,Gh,Tae,Kco,Zco,pP,efo,ofo,rfo,Oh,Mae,tfo,afo,uP,nfo,sfo,lfo,Vh,Eae,ifo,dfo,_P,cfo,ffo,mfo,Xh,Cae,gfo,hfo,bP,pfo,ufo,_fo,zh,wae,bfo,vfo,vP,Ffo,Tfo,Mfo,Qh,Aae,Efo,Cfo,FP,wfo,Afo,yfo,Wh,yae,Lfo,xfo,TP,$fo,kfo,Sfo,Hh,Lae,Rfo,Bfo,MP,Pfo,Ifo,qfo,Uh,xae,Nfo,jfo,EP,Dfo,Gfo,Ofo,Jh,$ae,Vfo,Xfo,CP,zfo,Qfo,Wfo,Yh,kae,Hfo,Ufo,wP,Jfo,Yfo,Kfo,Kh,Sae,Zfo,emo,AP,omo,rmo,tmo,Zh,Rae,amo,nmo,yP,smo,lmo,imo,ep,Bae,dmo,cmo,LP,fmo,mmo,gmo,op,Pae,hmo,pmo,xP,umo,_mo,bmo,rp,Iae,vmo,Fmo,$P,Tmo,Mmo,Emo,tp,qae,Cmo,wmo,kP,Amo,ymo,Lmo,ap,Nae,xmo,$mo,SP,kmo,Smo,Rmo,np,jae,Bmo,Pmo,RP,Imo,qmo,Nmo,sp,Dae,jmo,Dmo,BP,Gmo,Omo,Vmo,lp,Gae,Xmo,zmo,PP,Qmo,Wmo,Hmo,ip,Oae,Umo,Jmo,IP,Ymo,Kmo,Zmo,dp,Vae,ego,ogo,qP,rgo,tgo,ago,cp,Xae,ngo,sgo,NP,lgo,igo,dgo,fp,zae,cgo,fgo,jP,mgo,ggo,hgo,mp,Qae,pgo,ugo,DP,_go,bgo,vgo,Ls,Wae,Fgo,Tgo,GP,Mgo,Ego,OP,Cgo,wgo,Ago,gp,Hae,ygo,Lgo,VP,xgo,$go,kgo,hp,Uae,Sgo,Rgo,XP,Bgo,Pgo,Igo,pp,Jae,qgo,Ngo,zP,jgo,Dgo,Ggo,up,Yae,Ogo,Vgo,QP,Xgo,zgo,Qgo,_p,Kae,Wgo,Hgo,WP,Ugo,Jgo,Ygo,bp,Zae,Kgo,Zgo,HP,eho,oho,rho,vp,ene,tho,aho,UP,nho,sho,lho,Fp,one,iho,dho,JP,cho,fho,mho,Tp,rne,gho,hho,YP,pho,uho,_ho,Mp,tne,bho,vho,KP,Fho,Tho,Mho,Ep,ane,Eho,Cho,ZP,who,Aho,yho,Cp,nne,Lho,xho,eI,$ho,kho,Sho,wp,sne,Rho,Bho,oI,Pho,Iho,qho,Ap,lne,Nho,jho,rI,Dho,Gho,Oho,yp,ine,Vho,Xho,tI,zho,Qho,Who,Lp,dne,Hho,Uho,aI,Jho,Yho,Kho,xp,cne,Zho,epo,nI,opo,rpo,tpo,$p,fne,apo,npo,sI,spo,lpo,ipo,kp,mne,dpo,cpo,lI,fpo,mpo,gpo,Sp,gne,hpo,ppo,iI,upo,_po,bpo,Rp,hne,vpo,Fpo,dI,Tpo,Mpo,Epo,Bp,pne,Cpo,wpo,cI,Apo,ypo,Lpo,Pp,une,xpo,$po,fI,kpo,Spo,Rpo,Ip,_ne,Bpo,Ppo,mI,Ipo,qpo,Npo,qp,bne,jpo,Dpo,gI,Gpo,Opo,Vpo,Np,vne,Xpo,zpo,hI,Qpo,Wpo,Hpo,jp,Fne,Upo,Jpo,pI,Ypo,Kpo,Zpo,Dp,Tne,euo,ouo,uI,ruo,tuo,auo,Gp,Mne,nuo,suo,_I,luo,iuo,duo,Op,Ene,cuo,fuo,bI,muo,guo,huo,Vp,Cne,puo,uuo,vI,_uo,buo,vuo,Xp,wne,Fuo,Tuo,FI,Muo,Euo,Cuo,zp,Ane,wuo,Auo,TI,yuo,Luo,xuo,Qp,yne,$uo,kuo,MI,Suo,Ruo,Buo,Wp,Lne,Puo,Iuo,EI,quo,Nuo,juo,Hp,xne,Duo,Guo,CI,Ouo,Vuo,Xuo,Up,$ne,zuo,Quo,wI,Wuo,Huo,Uuo,Jp,kne,Juo,Yuo,AI,Kuo,Zuo,e_o,Yp,Sne,o_o,r_o,yI,t_o,a_o,n_o,Kp,Rne,s_o,l_o,LI,i_o,d_o,c_o,Zp,Bne,f_o,m_o,xI,g_o,h_o,p_o,eu,Pne,u_o,__o,$I,b_o,v_o,F_o,ou,Ine,T_o,M_o,kI,E_o,C_o,w_o,ru,qne,A_o,y_o,SI,L_o,x_o,$_o,tu,Nne,k_o,S_o,RI,R_o,B_o,P_o,au,jne,I_o,q_o,BI,N_o,j_o,D_o,nu,Dne,G_o,O_o,PI,V_o,X_o,z_o,su,Gne,Q_o,W_o,II,H_o,U_o,J_o,lu,One,Y_o,K_o,qI,Z_o,e6o,o6o,iu,Vne,r6o,t6o,NI,a6o,n6o,s6o,du,Xne,l6o,i6o,jI,d6o,c6o,f6o,cu,zne,m6o,g6o,DI,h6o,p6o,u6o,fu,Qne,_6o,b6o,GI,v6o,F6o,T6o,mu,Wne,M6o,E6o,OI,C6o,w6o,A6o,gu,Hne,y6o,L6o,VI,x6o,$6o,k6o,hu,Une,S6o,R6o,XI,B6o,P6o,I6o,pu,Jne,q6o,N6o,zI,j6o,D6o,G6o,uu,Yne,O6o,V6o,QI,X6o,z6o,Q6o,_u,Kne,W6o,H6o,WI,U6o,J6o,Y6o,bu,Zne,K6o,Z6o,HI,e1o,o1o,r1o,vu,ese,t1o,a1o,UI,n1o,s1o,l1o,Fu,ose,i1o,d1o,JI,c1o,f1o,m1o,Tu,rse,g1o,h1o,YI,p1o,u1o,_1o,Mu,tse,b1o,v1o,KI,F1o,T1o,M1o,Eu,E1o,ase,C1o,w1o,nse,A1o,y1o,Cu,UBe,bi,wu,sse,sy,L1o,lse,x1o,JBe,xo,ly,$1o,vi,k1o,ZI,S1o,R1o,eq,B1o,P1o,I1o,iy,q1o,ise,N1o,j1o,D1o,et,dy,G1o,dse,O1o,V1o,Fi,X1o,cse,z1o,Q1o,oq,W1o,H1o,U1o,Au,J1o,Ue,cy,Y1o,fse,K1o,Z1o,Ca,ebo,mse,obo,rbo,gse,tbo,abo,hse,nbo,sbo,lbo,G,yu,pse,ibo,dbo,rq,cbo,fbo,mbo,Lu,use,gbo,hbo,tq,pbo,ubo,_bo,xu,_se,bbo,vbo,aq,Fbo,Tbo,Mbo,$u,bse,Ebo,Cbo,nq,wbo,Abo,ybo,ku,vse,Lbo,xbo,sq,$bo,kbo,Sbo,Su,Fse,Rbo,Bbo,lq,Pbo,Ibo,qbo,Ru,Tse,Nbo,jbo,iq,Dbo,Gbo,Obo,Bu,Mse,Vbo,Xbo,dq,zbo,Qbo,Wbo,Pu,Ese,Hbo,Ubo,cq,Jbo,Ybo,Kbo,Iu,Cse,Zbo,e4o,fq,o4o,r4o,t4o,qu,wse,a4o,n4o,mq,s4o,l4o,i4o,Nu,Ase,d4o,c4o,gq,f4o,m4o,g4o,ju,yse,h4o,p4o,hq,u4o,_4o,b4o,Du,Lse,v4o,F4o,pq,T4o,M4o,E4o,Gu,xse,C4o,w4o,uq,A4o,y4o,L4o,Ou,$se,x4o,$4o,_q,k4o,S4o,R4o,Vu,kse,B4o,P4o,bq,I4o,q4o,N4o,Xu,Sse,j4o,D4o,vq,G4o,O4o,V4o,zu,Rse,X4o,z4o,Fq,Q4o,W4o,H4o,Qu,Bse,U4o,J4o,Tq,Y4o,K4o,Z4o,Wu,Pse,e2o,o2o,Mq,r2o,t2o,a2o,Hu,Ise,n2o,s2o,Eq,l2o,i2o,d2o,Uu,qse,c2o,f2o,Cq,m2o,g2o,h2o,Ju,Nse,p2o,u2o,wq,_2o,b2o,v2o,Yu,jse,F2o,T2o,Aq,M2o,E2o,C2o,Ku,Dse,w2o,A2o,yq,y2o,L2o,x2o,Zu,Gse,$2o,k2o,Lq,S2o,R2o,B2o,e_,Ose,P2o,I2o,xq,q2o,N2o,j2o,o_,Vse,D2o,G2o,$q,O2o,V2o,X2o,r_,Xse,z2o,Q2o,kq,W2o,H2o,U2o,t_,zse,J2o,Y2o,Sq,K2o,Z2o,e5o,a_,Qse,o5o,r5o,Rq,t5o,a5o,n5o,n_,Wse,s5o,l5o,Bq,i5o,d5o,c5o,s_,Hse,f5o,m5o,Pq,g5o,h5o,p5o,l_,Use,u5o,_5o,Iq,b5o,v5o,F5o,i_,Jse,T5o,M5o,qq,E5o,C5o,w5o,d_,Yse,A5o,y5o,Nq,L5o,x5o,$5o,c_,Kse,k5o,S5o,jq,R5o,B5o,P5o,f_,Zse,I5o,q5o,Dq,N5o,j5o,D5o,m_,ele,G5o,O5o,Gq,V5o,X5o,z5o,g_,Q5o,ole,W5o,H5o,rle,U5o,J5o,h_,YBe,Ti,p_,tle,fy,Y5o,ale,K5o,KBe,$o,my,Z5o,Mi,evo,Oq,ovo,rvo,Vq,tvo,avo,nvo,gy,svo,nle,lvo,ivo,dvo,ot,hy,cvo,sle,fvo,mvo,Ei,gvo,lle,hvo,pvo,Xq,uvo,_vo,bvo,u_,vvo,Je,py,Fvo,ile,Tvo,Mvo,wa,Evo,dle,Cvo,wvo,cle,Avo,yvo,fle,Lvo,xvo,$vo,z,__,mle,kvo,Svo,zq,Rvo,Bvo,Pvo,b_,gle,Ivo,qvo,Qq,Nvo,jvo,Dvo,v_,hle,Gvo,Ovo,Wq,Vvo,Xvo,zvo,F_,ple,Qvo,Wvo,Hq,Hvo,Uvo,Jvo,T_,ule,Yvo,Kvo,Uq,Zvo,eFo,oFo,M_,_le,rFo,tFo,Jq,aFo,nFo,sFo,E_,ble,lFo,iFo,Yq,dFo,cFo,fFo,C_,vle,mFo,gFo,Kq,hFo,pFo,uFo,w_,Fle,_Fo,bFo,Zq,vFo,FFo,TFo,A_,Tle,MFo,EFo,eN,CFo,wFo,AFo,y_,Mle,yFo,LFo,oN,xFo,$Fo,kFo,L_,Ele,SFo,RFo,rN,BFo,PFo,IFo,x_,Cle,qFo,NFo,tN,jFo,DFo,GFo,$_,wle,OFo,VFo,aN,XFo,zFo,QFo,k_,Ale,WFo,HFo,nN,UFo,JFo,YFo,S_,yle,KFo,ZFo,sN,eTo,oTo,rTo,R_,Lle,tTo,aTo,lN,nTo,sTo,lTo,B_,xle,iTo,dTo,iN,cTo,fTo,mTo,P_,$le,gTo,hTo,dN,pTo,uTo,_To,I_,kle,bTo,vTo,cN,FTo,TTo,MTo,q_,Sle,ETo,CTo,fN,wTo,ATo,yTo,N_,Rle,LTo,xTo,mN,$To,kTo,STo,j_,Ble,RTo,BTo,gN,PTo,ITo,qTo,D_,Ple,NTo,jTo,hN,DTo,GTo,OTo,G_,Ile,VTo,XTo,pN,zTo,QTo,WTo,O_,qle,HTo,UTo,uN,JTo,YTo,KTo,V_,Nle,ZTo,eMo,_N,oMo,rMo,tMo,X_,jle,aMo,nMo,bN,sMo,lMo,iMo,z_,Dle,dMo,cMo,vN,fMo,mMo,gMo,Q_,Gle,hMo,pMo,FN,uMo,_Mo,bMo,W_,Ole,vMo,FMo,TN,TMo,MMo,EMo,H_,Vle,CMo,wMo,MN,AMo,yMo,LMo,U_,Xle,xMo,$Mo,EN,kMo,SMo,RMo,J_,zle,BMo,PMo,CN,IMo,qMo,NMo,Y_,Qle,jMo,DMo,wN,GMo,OMo,VMo,K_,XMo,Wle,zMo,QMo,Hle,WMo,HMo,Z_,ZBe,Ci,e6,Ule,uy,UMo,Jle,JMo,ePe,ko,_y,YMo,wi,KMo,AN,ZMo,eEo,yN,oEo,rEo,tEo,by,aEo,Yle,nEo,sEo,lEo,rt,vy,iEo,Kle,dEo,cEo,Ai,fEo,Zle,mEo,gEo,LN,hEo,pEo,uEo,o6,_Eo,Ye,Fy,bEo,eie,vEo,FEo,Aa,TEo,oie,MEo,EEo,rie,CEo,wEo,tie,AEo,yEo,LEo,Q,r6,aie,xEo,$Eo,xN,kEo,SEo,REo,t6,nie,BEo,PEo,$N,IEo,qEo,NEo,a6,sie,jEo,DEo,kN,GEo,OEo,VEo,n6,lie,XEo,zEo,SN,QEo,WEo,HEo,s6,iie,UEo,JEo,RN,YEo,KEo,ZEo,l6,die,eCo,oCo,BN,rCo,tCo,aCo,i6,cie,nCo,sCo,PN,lCo,iCo,dCo,d6,fie,cCo,fCo,IN,mCo,gCo,hCo,c6,mie,pCo,uCo,qN,_Co,bCo,vCo,f6,gie,FCo,TCo,NN,MCo,ECo,CCo,m6,hie,wCo,ACo,jN,yCo,LCo,xCo,g6,pie,$Co,kCo,DN,SCo,RCo,BCo,h6,uie,PCo,ICo,GN,qCo,NCo,jCo,p6,_ie,DCo,GCo,ON,OCo,VCo,XCo,u6,bie,zCo,QCo,VN,WCo,HCo,UCo,_6,vie,JCo,YCo,XN,KCo,ZCo,e3o,b6,Fie,o3o,r3o,zN,t3o,a3o,n3o,v6,Tie,s3o,l3o,QN,i3o,d3o,c3o,F6,Mie,f3o,m3o,WN,g3o,h3o,p3o,T6,Eie,u3o,_3o,HN,b3o,v3o,F3o,M6,Cie,T3o,M3o,UN,E3o,C3o,w3o,E6,wie,A3o,y3o,JN,L3o,x3o,$3o,C6,Aie,k3o,S3o,YN,R3o,B3o,P3o,w6,yie,I3o,q3o,KN,N3o,j3o,D3o,A6,Lie,G3o,O3o,ZN,V3o,X3o,z3o,y6,xie,Q3o,W3o,ej,H3o,U3o,J3o,L6,$ie,Y3o,K3o,oj,Z3o,ewo,owo,x6,kie,rwo,two,rj,awo,nwo,swo,$6,Sie,lwo,iwo,tj,dwo,cwo,fwo,k6,Rie,mwo,gwo,aj,hwo,pwo,uwo,S6,Bie,_wo,bwo,Pie,vwo,Fwo,Two,R6,Iie,Mwo,Ewo,nj,Cwo,wwo,Awo,B6,qie,ywo,Lwo,sj,xwo,$wo,kwo,P6,Nie,Swo,Rwo,lj,Bwo,Pwo,Iwo,I6,jie,qwo,Nwo,ij,jwo,Dwo,Gwo,q6,Owo,Die,Vwo,Xwo,Gie,zwo,Qwo,N6,oPe,yi,j6,Oie,Ty,Wwo,Vie,Hwo,rPe,So,My,Uwo,Li,Jwo,dj,Ywo,Kwo,cj,Zwo,eAo,oAo,Ey,rAo,Xie,tAo,aAo,nAo,tt,Cy,sAo,zie,lAo,iAo,xi,dAo,Qie,cAo,fAo,fj,mAo,gAo,hAo,D6,pAo,Ke,wy,uAo,Wie,_Ao,bAo,ya,vAo,Hie,FAo,TAo,Uie,MAo,EAo,Jie,CAo,wAo,AAo,he,G6,Yie,yAo,LAo,mj,xAo,$Ao,kAo,O6,Kie,SAo,RAo,gj,BAo,PAo,IAo,V6,Zie,qAo,NAo,hj,jAo,DAo,GAo,X6,ede,OAo,VAo,pj,XAo,zAo,QAo,z6,ode,WAo,HAo,uj,UAo,JAo,YAo,Q6,rde,KAo,ZAo,_j,e0o,o0o,r0o,W6,tde,t0o,a0o,bj,n0o,s0o,l0o,H6,ade,i0o,d0o,vj,c0o,f0o,m0o,U6,nde,g0o,h0o,Fj,p0o,u0o,_0o,J6,sde,b0o,v0o,Tj,F0o,T0o,M0o,Y6,lde,E0o,C0o,Mj,w0o,A0o,y0o,K6,ide,L0o,x0o,Ej,$0o,k0o,S0o,Z6,dde,R0o,B0o,Cj,P0o,I0o,q0o,e1,cde,N0o,j0o,wj,D0o,G0o,O0o,o1,fde,V0o,X0o,Aj,z0o,Q0o,W0o,r1,mde,H0o,U0o,yj,J0o,Y0o,K0o,t1,gde,Z0o,eyo,Lj,oyo,ryo,tyo,a1,ayo,hde,nyo,syo,pde,lyo,iyo,n1,tPe,$i,s1,ude,Ay,dyo,_de,cyo,aPe,Ro,yy,fyo,ki,myo,xj,gyo,hyo,$j,pyo,uyo,_yo,Ly,byo,bde,vyo,Fyo,Tyo,at,xy,Myo,vde,Eyo,Cyo,Si,wyo,Fde,Ayo,yyo,kj,Lyo,xyo,$yo,l1,kyo,Ze,$y,Syo,Tde,Ryo,Byo,La,Pyo,Mde,Iyo,qyo,Ede,Nyo,jyo,Cde,Dyo,Gyo,Oyo,q,i1,wde,Vyo,Xyo,Sj,zyo,Qyo,Wyo,d1,Ade,Hyo,Uyo,Rj,Jyo,Yyo,Kyo,c1,yde,Zyo,eLo,Bj,oLo,rLo,tLo,f1,Lde,aLo,nLo,Pj,sLo,lLo,iLo,m1,xde,dLo,cLo,Ij,fLo,mLo,gLo,g1,$de,hLo,pLo,qj,uLo,_Lo,bLo,h1,kde,vLo,FLo,Nj,TLo,MLo,ELo,p1,Sde,CLo,wLo,jj,ALo,yLo,LLo,u1,Rde,xLo,$Lo,Dj,kLo,SLo,RLo,_1,Bde,BLo,PLo,Gj,ILo,qLo,NLo,b1,Pde,jLo,DLo,Oj,GLo,OLo,VLo,v1,Ide,XLo,zLo,Vj,QLo,WLo,HLo,F1,qde,ULo,JLo,Xj,YLo,KLo,ZLo,T1,Nde,e8o,o8o,zj,r8o,t8o,a8o,M1,jde,n8o,s8o,Qj,l8o,i8o,d8o,E1,Dde,c8o,f8o,Wj,m8o,g8o,h8o,C1,Gde,p8o,u8o,Hj,_8o,b8o,v8o,w1,Ode,F8o,T8o,Uj,M8o,E8o,C8o,A1,Vde,w8o,A8o,Jj,y8o,L8o,x8o,y1,Xde,$8o,k8o,Yj,S8o,R8o,B8o,L1,zde,P8o,I8o,Kj,q8o,N8o,j8o,x1,Qde,D8o,G8o,Zj,O8o,V8o,X8o,$1,Wde,z8o,Q8o,eD,W8o,H8o,U8o,k1,Hde,J8o,Y8o,oD,K8o,Z8o,e7o,S1,Ude,o7o,r7o,rD,t7o,a7o,n7o,R1,Jde,s7o,l7o,tD,i7o,d7o,c7o,B1,Yde,f7o,m7o,aD,g7o,h7o,p7o,P1,Kde,u7o,_7o,nD,b7o,v7o,F7o,I1,Zde,T7o,M7o,sD,E7o,C7o,w7o,q1,ece,A7o,y7o,lD,L7o,x7o,$7o,N1,oce,k7o,S7o,iD,R7o,B7o,P7o,j1,rce,I7o,q7o,dD,N7o,j7o,D7o,D1,tce,G7o,O7o,cD,V7o,X7o,z7o,G1,ace,Q7o,W7o,fD,H7o,U7o,J7o,O1,nce,Y7o,K7o,mD,Z7o,exo,oxo,V1,sce,rxo,txo,gD,axo,nxo,sxo,X1,lce,lxo,ixo,hD,dxo,cxo,fxo,z1,ice,mxo,gxo,pD,hxo,pxo,uxo,Q1,dce,_xo,bxo,uD,vxo,Fxo,Txo,W1,cce,Mxo,Exo,_D,Cxo,wxo,Axo,H1,fce,yxo,Lxo,bD,xxo,$xo,kxo,U1,mce,Sxo,Rxo,vD,Bxo,Pxo,Ixo,J1,gce,qxo,Nxo,FD,jxo,Dxo,Gxo,Y1,hce,Oxo,Vxo,TD,Xxo,zxo,Qxo,K1,pce,Wxo,Hxo,MD,Uxo,Jxo,Yxo,Z1,uce,Kxo,Zxo,ED,e9o,o9o,r9o,eb,_ce,t9o,a9o,CD,n9o,s9o,l9o,ob,i9o,bce,d9o,c9o,vce,f9o,m9o,rb,nPe,Ri,tb,Fce,ky,g9o,Tce,h9o,sPe,Bo,Sy,p9o,Bi,u9o,wD,_9o,b9o,AD,v9o,F9o,T9o,Ry,M9o,Mce,E9o,C9o,w9o,nt,By,A9o,Ece,y9o,L9o,Pi,x9o,Cce,$9o,k9o,yD,S9o,R9o,B9o,ab,P9o,eo,Py,I9o,wce,q9o,N9o,xa,j9o,Ace,D9o,G9o,yce,O9o,V9o,Lce,X9o,z9o,Q9o,Y,nb,xce,W9o,H9o,LD,U9o,J9o,Y9o,sb,$ce,K9o,Z9o,xD,e$o,o$o,r$o,lb,kce,t$o,a$o,$D,n$o,s$o,l$o,ib,Sce,i$o,d$o,kD,c$o,f$o,m$o,db,Rce,g$o,h$o,SD,p$o,u$o,_$o,cb,Bce,b$o,v$o,RD,F$o,T$o,M$o,fb,Pce,E$o,C$o,BD,w$o,A$o,y$o,mb,Ice,L$o,x$o,PD,$$o,k$o,S$o,gb,qce,R$o,B$o,ID,P$o,I$o,q$o,hb,Nce,N$o,j$o,qD,D$o,G$o,O$o,pb,jce,V$o,X$o,ND,z$o,Q$o,W$o,ub,Dce,H$o,U$o,jD,J$o,Y$o,K$o,_b,Gce,Z$o,eko,DD,oko,rko,tko,bb,Oce,ako,nko,GD,sko,lko,iko,vb,Vce,dko,cko,OD,fko,mko,gko,Fb,Xce,hko,pko,VD,uko,_ko,bko,Tb,zce,vko,Fko,XD,Tko,Mko,Eko,Mb,Qce,Cko,wko,zD,Ako,yko,Lko,Eb,Wce,xko,$ko,QD,kko,Sko,Rko,Cb,Hce,Bko,Pko,WD,Iko,qko,Nko,wb,Uce,jko,Dko,HD,Gko,Oko,Vko,Ab,Jce,Xko,zko,UD,Qko,Wko,Hko,yb,Yce,Uko,Jko,JD,Yko,Kko,Zko,Lb,Kce,eSo,oSo,YD,rSo,tSo,aSo,xb,Zce,nSo,sSo,KD,lSo,iSo,dSo,$b,efe,cSo,fSo,ZD,mSo,gSo,hSo,kb,ofe,pSo,uSo,eG,_So,bSo,vSo,Sb,rfe,FSo,TSo,oG,MSo,ESo,CSo,Rb,wSo,tfe,ASo,ySo,afe,LSo,xSo,Bb,lPe,Ii,Pb,nfe,Iy,$So,sfe,kSo,iPe,Po,qy,SSo,qi,RSo,rG,BSo,PSo,tG,ISo,qSo,NSo,Ny,jSo,lfe,DSo,GSo,OSo,st,jy,VSo,ife,XSo,zSo,Ni,QSo,dfe,WSo,HSo,aG,USo,JSo,YSo,Ib,KSo,oo,Dy,ZSo,cfe,eRo,oRo,$a,rRo,ffe,tRo,aRo,mfe,nRo,sRo,gfe,lRo,iRo,dRo,Ur,qb,hfe,cRo,fRo,nG,mRo,gRo,hRo,Nb,pfe,pRo,uRo,sG,_Ro,bRo,vRo,jb,ufe,FRo,TRo,lG,MRo,ERo,CRo,Db,_fe,wRo,ARo,iG,yRo,LRo,xRo,Gb,bfe,$Ro,kRo,dG,SRo,RRo,BRo,Ob,PRo,vfe,IRo,qRo,Ffe,NRo,jRo,Vb,dPe,ji,Xb,Tfe,Gy,DRo,Mfe,GRo,cPe,Io,Oy,ORo,Di,VRo,cG,XRo,zRo,fG,QRo,WRo,HRo,Vy,URo,Efe,JRo,YRo,KRo,lt,Xy,ZRo,Cfe,eBo,oBo,Gi,rBo,wfe,tBo,aBo,mG,nBo,sBo,lBo,zb,iBo,ro,zy,dBo,Afe,cBo,fBo,ka,mBo,yfe,gBo,hBo,Lfe,pBo,uBo,xfe,_Bo,bBo,vBo,U,Qb,$fe,FBo,TBo,gG,MBo,EBo,CBo,Wb,kfe,wBo,ABo,hG,yBo,LBo,xBo,Hb,Sfe,$Bo,kBo,pG,SBo,RBo,BBo,Ub,Rfe,PBo,IBo,uG,qBo,NBo,jBo,Jb,Bfe,DBo,GBo,_G,OBo,VBo,XBo,Yb,Pfe,zBo,QBo,bG,WBo,HBo,UBo,Kb,Ife,JBo,YBo,vG,KBo,ZBo,ePo,Zb,qfe,oPo,rPo,FG,tPo,aPo,nPo,e4,Nfe,sPo,lPo,TG,iPo,dPo,cPo,o4,jfe,fPo,mPo,MG,gPo,hPo,pPo,r4,Dfe,uPo,_Po,EG,bPo,vPo,FPo,t4,Gfe,TPo,MPo,CG,EPo,CPo,wPo,a4,Ofe,APo,yPo,wG,LPo,xPo,$Po,n4,Vfe,kPo,SPo,AG,RPo,BPo,PPo,s4,Xfe,IPo,qPo,yG,NPo,jPo,DPo,l4,zfe,GPo,OPo,LG,VPo,XPo,zPo,i4,Qfe,QPo,WPo,xG,HPo,UPo,JPo,d4,Wfe,YPo,KPo,$G,ZPo,eIo,oIo,c4,Hfe,rIo,tIo,kG,aIo,nIo,sIo,f4,Ufe,lIo,iIo,SG,dIo,cIo,fIo,m4,Jfe,mIo,gIo,RG,hIo,pIo,uIo,g4,Yfe,_Io,bIo,BG,vIo,FIo,TIo,h4,Kfe,MIo,EIo,PG,CIo,wIo,AIo,p4,Zfe,yIo,LIo,IG,xIo,$Io,kIo,u4,eme,SIo,RIo,qG,BIo,PIo,IIo,_4,ome,qIo,NIo,NG,jIo,DIo,GIo,b4,rme,OIo,VIo,jG,XIo,zIo,QIo,v4,tme,WIo,HIo,DG,UIo,JIo,YIo,F4,ame,KIo,ZIo,GG,eqo,oqo,rqo,T4,nme,tqo,aqo,OG,nqo,sqo,lqo,M4,sme,iqo,dqo,VG,cqo,fqo,mqo,E4,lme,gqo,hqo,XG,pqo,uqo,_qo,C4,ime,bqo,vqo,zG,Fqo,Tqo,Mqo,w4,Eqo,dme,Cqo,wqo,cme,Aqo,yqo,A4,fPe,Oi,y4,fme,Qy,Lqo,mme,xqo,mPe,qo,Wy,$qo,Vi,kqo,QG,Sqo,Rqo,WG,Bqo,Pqo,Iqo,Hy,qqo,gme,Nqo,jqo,Dqo,it,Uy,Gqo,hme,Oqo,Vqo,Xi,Xqo,pme,zqo,Qqo,HG,Wqo,Hqo,Uqo,L4,Jqo,to,Jy,Yqo,ume,Kqo,Zqo,Sa,eNo,_me,oNo,rNo,bme,tNo,aNo,vme,nNo,sNo,lNo,O,x4,Fme,iNo,dNo,UG,cNo,fNo,mNo,$4,Tme,gNo,hNo,JG,pNo,uNo,_No,k4,Mme,bNo,vNo,YG,FNo,TNo,MNo,S4,Eme,ENo,CNo,KG,wNo,ANo,yNo,R4,Cme,LNo,xNo,ZG,$No,kNo,SNo,B4,wme,RNo,BNo,eO,PNo,INo,qNo,P4,Ame,NNo,jNo,oO,DNo,GNo,ONo,I4,yme,VNo,XNo,rO,zNo,QNo,WNo,q4,Lme,HNo,UNo,tO,JNo,YNo,KNo,N4,xme,ZNo,ejo,aO,ojo,rjo,tjo,j4,$me,ajo,njo,nO,sjo,ljo,ijo,D4,kme,djo,cjo,sO,fjo,mjo,gjo,G4,Sme,hjo,pjo,lO,ujo,_jo,bjo,O4,Rme,vjo,Fjo,iO,Tjo,Mjo,Ejo,V4,Bme,Cjo,wjo,dO,Ajo,yjo,Ljo,X4,Pme,xjo,$jo,cO,kjo,Sjo,Rjo,z4,Ime,Bjo,Pjo,fO,Ijo,qjo,Njo,Q4,qme,jjo,Djo,mO,Gjo,Ojo,Vjo,W4,Nme,Xjo,zjo,gO,Qjo,Wjo,Hjo,H4,jme,Ujo,Jjo,hO,Yjo,Kjo,Zjo,U4,Dme,eDo,oDo,pO,rDo,tDo,aDo,J4,Gme,nDo,sDo,uO,lDo,iDo,dDo,Y4,Ome,cDo,fDo,_O,mDo,gDo,hDo,K4,Vme,pDo,uDo,bO,_Do,bDo,vDo,Z4,Xme,FDo,TDo,vO,MDo,EDo,CDo,e2,zme,wDo,ADo,FO,yDo,LDo,xDo,o2,Qme,$Do,kDo,TO,SDo,RDo,BDo,r2,Wme,PDo,IDo,MO,qDo,NDo,jDo,t2,Hme,DDo,GDo,EO,ODo,VDo,XDo,a2,Ume,zDo,QDo,CO,WDo,HDo,UDo,n2,Jme,JDo,YDo,wO,KDo,ZDo,eGo,s2,Yme,oGo,rGo,AO,tGo,aGo,nGo,l2,Kme,sGo,lGo,yO,iGo,dGo,cGo,i2,Zme,fGo,mGo,LO,gGo,hGo,pGo,d2,ege,uGo,_Go,xO,bGo,vGo,FGo,c2,oge,TGo,MGo,$O,EGo,CGo,wGo,f2,rge,AGo,yGo,kO,LGo,xGo,$Go,m2,tge,kGo,SGo,SO,RGo,BGo,PGo,g2,age,IGo,qGo,RO,NGo,jGo,DGo,h2,GGo,nge,OGo,VGo,sge,XGo,zGo,p2,gPe,zi,u2,lge,Yy,QGo,ige,WGo,hPe,No,Ky,HGo,Qi,UGo,BO,JGo,YGo,PO,KGo,ZGo,eOo,Zy,oOo,dge,rOo,tOo,aOo,dt,eL,nOo,cge,sOo,lOo,Wi,iOo,fge,dOo,cOo,IO,fOo,mOo,gOo,_2,hOo,ao,oL,pOo,mge,uOo,_Oo,Ra,bOo,gge,vOo,FOo,hge,TOo,MOo,pge,EOo,COo,wOo,uge,b2,_ge,AOo,yOo,qO,LOo,xOo,$Oo,v2,kOo,bge,SOo,ROo,vge,BOo,POo,F2,pPe,Hi,T2,Fge,rL,IOo,Tge,qOo,uPe,jo,tL,NOo,Ui,jOo,NO,DOo,GOo,jO,OOo,VOo,XOo,aL,zOo,Mge,QOo,WOo,HOo,ct,nL,UOo,Ege,JOo,YOo,Ji,KOo,Cge,ZOo,eVo,DO,oVo,rVo,tVo,M2,aVo,no,sL,nVo,wge,sVo,lVo,Ba,iVo,Age,dVo,cVo,yge,fVo,mVo,Lge,gVo,hVo,pVo,Fe,E2,xge,uVo,_Vo,GO,bVo,vVo,FVo,C2,$ge,TVo,MVo,OO,EVo,CVo,wVo,w2,kge,AVo,yVo,VO,LVo,xVo,$Vo,xs,Sge,kVo,SVo,XO,RVo,BVo,zO,PVo,IVo,qVo,A2,Rge,NVo,jVo,QO,DVo,GVo,OVo,ft,Bge,VVo,XVo,WO,zVo,QVo,HO,WVo,HVo,UO,UVo,JVo,YVo,y2,Pge,KVo,ZVo,JO,eXo,oXo,rXo,L2,Ige,tXo,aXo,YO,nXo,sXo,lXo,x2,qge,iXo,dXo,KO,cXo,fXo,mXo,$2,Nge,gXo,hXo,ZO,pXo,uXo,_Xo,k2,jge,bXo,vXo,eV,FXo,TXo,MXo,S2,Dge,EXo,CXo,oV,wXo,AXo,yXo,R2,Gge,LXo,xXo,rV,$Xo,kXo,SXo,B2,RXo,Oge,BXo,PXo,Vge,IXo,qXo,P2,_Pe,Yi,I2,Xge,lL,NXo,zge,jXo,bPe,Do,iL,DXo,Ki,GXo,tV,OXo,VXo,aV,XXo,zXo,QXo,dL,WXo,Qge,HXo,UXo,JXo,mt,cL,YXo,Wge,KXo,ZXo,Zi,ezo,Hge,ozo,rzo,nV,tzo,azo,nzo,q2,szo,so,fL,lzo,Uge,izo,dzo,Pa,czo,Jge,fzo,mzo,Yge,gzo,hzo,Kge,pzo,uzo,_zo,Zge,N2,ehe,bzo,vzo,sV,Fzo,Tzo,Mzo,j2,Ezo,ohe,Czo,wzo,rhe,Azo,yzo,D2,vPe,ed,G2,the,mL,Lzo,ahe,xzo,FPe,Go,gL,$zo,od,kzo,lV,Szo,Rzo,iV,Bzo,Pzo,Izo,hL,qzo,nhe,Nzo,jzo,Dzo,gt,pL,Gzo,she,Ozo,Vzo,rd,Xzo,lhe,zzo,Qzo,dV,Wzo,Hzo,Uzo,O2,Jzo,lo,uL,Yzo,ihe,Kzo,Zzo,Ia,eQo,dhe,oQo,rQo,che,tQo,aQo,fhe,nQo,sQo,lQo,Ne,V2,mhe,iQo,dQo,cV,cQo,fQo,mQo,X2,ghe,gQo,hQo,fV,pQo,uQo,_Qo,z2,hhe,bQo,vQo,mV,FQo,TQo,MQo,Q2,phe,EQo,CQo,gV,wQo,AQo,yQo,W2,uhe,LQo,xQo,hV,$Qo,kQo,SQo,H2,_he,RQo,BQo,pV,PQo,IQo,qQo,U2,bhe,NQo,jQo,uV,DQo,GQo,OQo,J2,vhe,VQo,XQo,_V,zQo,QQo,WQo,Y2,HQo,Fhe,UQo,JQo,The,YQo,KQo,K2,TPe,td,Z2,Mhe,_L,ZQo,Ehe,eWo,MPe,Oo,bL,oWo,ad,rWo,bV,tWo,aWo,vV,nWo,sWo,lWo,vL,iWo,Che,dWo,cWo,fWo,ht,FL,mWo,whe,gWo,hWo,nd,pWo,Ahe,uWo,_Wo,FV,bWo,vWo,FWo,e5,TWo,io,TL,MWo,yhe,EWo,CWo,qa,wWo,Lhe,AWo,yWo,xhe,LWo,xWo,$he,$Wo,kWo,SWo,Na,o5,khe,RWo,BWo,TV,PWo,IWo,qWo,r5,She,NWo,jWo,MV,DWo,GWo,OWo,t5,Rhe,VWo,XWo,EV,zWo,QWo,WWo,a5,Bhe,HWo,UWo,CV,JWo,YWo,KWo,n5,ZWo,Phe,eHo,oHo,Ihe,rHo,tHo,s5,EPe,sd,l5,qhe,ML,aHo,Nhe,nHo,CPe,Vo,EL,sHo,ld,lHo,wV,iHo,dHo,AV,cHo,fHo,mHo,CL,gHo,jhe,hHo,pHo,uHo,pt,wL,_Ho,Dhe,bHo,vHo,id,FHo,Ghe,THo,MHo,yV,EHo,CHo,wHo,i5,AHo,co,AL,yHo,Ohe,LHo,xHo,ja,$Ho,Vhe,kHo,SHo,Xhe,RHo,BHo,zhe,PHo,IHo,qHo,je,d5,Qhe,NHo,jHo,LV,DHo,GHo,OHo,c5,Whe,VHo,XHo,xV,zHo,QHo,WHo,f5,Hhe,HHo,UHo,$V,JHo,YHo,KHo,m5,Uhe,ZHo,eUo,kV,oUo,rUo,tUo,g5,Jhe,aUo,nUo,SV,sUo,lUo,iUo,h5,Yhe,dUo,cUo,RV,fUo,mUo,gUo,p5,Khe,hUo,pUo,BV,uUo,_Uo,bUo,u5,Zhe,vUo,FUo,PV,TUo,MUo,EUo,_5,CUo,epe,wUo,AUo,ope,yUo,LUo,b5,wPe,dd,v5,rpe,yL,xUo,tpe,$Uo,APe,Xo,LL,kUo,cd,SUo,IV,RUo,BUo,qV,PUo,IUo,qUo,xL,NUo,ape,jUo,DUo,GUo,ut,$L,OUo,npe,VUo,XUo,fd,zUo,spe,QUo,WUo,NV,HUo,UUo,JUo,F5,YUo,fo,kL,KUo,lpe,ZUo,eJo,Da,oJo,ipe,rJo,tJo,dpe,aJo,nJo,cpe,sJo,lJo,iJo,SL,T5,fpe,dJo,cJo,jV,fJo,mJo,gJo,M5,mpe,hJo,pJo,DV,uJo,_Jo,bJo,E5,vJo,gpe,FJo,TJo,hpe,MJo,EJo,C5,yPe,md,w5,ppe,RL,CJo,upe,wJo,LPe,zo,BL,AJo,gd,yJo,GV,LJo,xJo,OV,$Jo,kJo,SJo,PL,RJo,_pe,BJo,PJo,IJo,_t,IL,qJo,bpe,NJo,jJo,hd,DJo,vpe,GJo,OJo,VV,VJo,XJo,zJo,A5,QJo,mo,qL,WJo,Fpe,HJo,UJo,Ga,JJo,Tpe,YJo,KJo,Mpe,ZJo,eYo,Epe,oYo,rYo,tYo,Oa,y5,Cpe,aYo,nYo,XV,sYo,lYo,iYo,L5,wpe,dYo,cYo,zV,fYo,mYo,gYo,x5,Ape,hYo,pYo,QV,uYo,_Yo,bYo,$5,ype,vYo,FYo,WV,TYo,MYo,EYo,k5,CYo,Lpe,wYo,AYo,xpe,yYo,LYo,S5,xPe,pd,R5,$pe,NL,xYo,kpe,$Yo,$Pe,Qo,jL,kYo,ud,SYo,HV,RYo,BYo,UV,PYo,IYo,qYo,DL,NYo,Spe,jYo,DYo,GYo,bt,GL,OYo,Rpe,VYo,XYo,_d,zYo,Bpe,QYo,WYo,JV,HYo,UYo,JYo,B5,YYo,go,OL,KYo,Ppe,ZYo,eKo,Va,oKo,Ipe,rKo,tKo,qpe,aKo,nKo,Npe,sKo,lKo,iKo,bd,P5,jpe,dKo,cKo,YV,fKo,mKo,gKo,I5,Dpe,hKo,pKo,KV,uKo,_Ko,bKo,q5,Gpe,vKo,FKo,ZV,TKo,MKo,EKo,N5,CKo,Ope,wKo,AKo,Vpe,yKo,LKo,j5,kPe,vd,D5,Xpe,VL,xKo,zpe,$Ko,SPe,Wo,XL,kKo,Fd,SKo,eX,RKo,BKo,oX,PKo,IKo,qKo,zL,NKo,Qpe,jKo,DKo,GKo,vt,QL,OKo,Wpe,VKo,XKo,Td,zKo,Hpe,QKo,WKo,rX,HKo,UKo,JKo,G5,YKo,ho,WL,KKo,Upe,ZKo,eZo,Xa,oZo,Jpe,rZo,tZo,Ype,aZo,nZo,Kpe,sZo,lZo,iZo,HL,O5,Zpe,dZo,cZo,tX,fZo,mZo,gZo,V5,eue,hZo,pZo,aX,uZo,_Zo,bZo,X5,vZo,oue,FZo,TZo,rue,MZo,EZo,z5,RPe,Md,Q5,tue,UL,CZo,aue,wZo,BPe,Ho,JL,AZo,Ed,yZo,nX,LZo,xZo,sX,$Zo,kZo,SZo,YL,RZo,nue,BZo,PZo,IZo,Ft,KL,qZo,sue,NZo,jZo,Cd,DZo,lue,GZo,OZo,lX,VZo,XZo,zZo,W5,QZo,po,ZL,WZo,iue,HZo,UZo,za,JZo,due,YZo,KZo,cue,ZZo,eer,fue,oer,rer,ter,mue,H5,gue,aer,ner,iX,ser,ler,ier,U5,der,hue,cer,fer,pue,mer,ger,J5,PPe,wd,Y5,uue,e8,her,_ue,per,IPe,Uo,o8,uer,Ad,_er,dX,ber,ver,cX,Fer,Ter,Mer,r8,Eer,bue,Cer,wer,Aer,Tt,t8,yer,vue,Ler,xer,yd,$er,Fue,ker,Ser,fX,Rer,Ber,Per,K5,Ier,uo,a8,qer,Tue,Ner,jer,Qa,Der,Mue,Ger,Oer,Eue,Ver,Xer,Cue,zer,Qer,Wer,Wa,Z5,wue,Her,Uer,mX,Jer,Yer,Ker,ev,Aue,Zer,eor,gX,oor,ror,tor,ov,yue,aor,nor,hX,sor,lor,ior,rv,Lue,dor,cor,pX,mor,gor,hor,tv,por,xue,uor,_or,$ue,bor,vor,av,qPe,Ld,nv,kue,n8,For,Sue,Tor,NPe,Jo,s8,Mor,xd,Eor,uX,Cor,wor,_X,Aor,yor,Lor,l8,xor,Rue,$or,kor,Sor,Mt,i8,Ror,Bue,Bor,Por,$d,Ior,Pue,qor,Nor,bX,jor,Dor,Gor,sv,Oor,_o,d8,Vor,Iue,Xor,zor,Ha,Qor,que,Wor,Hor,Nue,Uor,Jor,jue,Yor,Kor,Zor,Due,lv,Gue,err,orr,vX,rrr,trr,arr,iv,nrr,Oue,srr,lrr,Vue,irr,drr,dv,jPe,kd,cv,Xue,c8,crr,zue,frr,DPe,Yo,f8,mrr,Sd,grr,FX,hrr,prr,TX,urr,_rr,brr,m8,vrr,Que,Frr,Trr,Mrr,Et,g8,Err,Wue,Crr,wrr,Rd,Arr,Hue,yrr,Lrr,MX,xrr,$rr,krr,fv,Srr,Cr,h8,Rrr,Uue,Brr,Prr,Ua,Irr,Jue,qrr,Nrr,Yue,jrr,Drr,Kue,Grr,Orr,Vrr,j,mv,Zue,Xrr,zrr,EX,Qrr,Wrr,Hrr,gv,e_e,Urr,Jrr,CX,Yrr,Krr,Zrr,hv,o_e,etr,otr,wX,rtr,ttr,atr,pv,r_e,ntr,str,AX,ltr,itr,dtr,uv,t_e,ctr,ftr,yX,mtr,gtr,htr,_v,a_e,ptr,utr,LX,_tr,btr,vtr,bv,n_e,Ftr,Ttr,xX,Mtr,Etr,Ctr,vv,s_e,wtr,Atr,$X,ytr,Ltr,xtr,Fv,l_e,$tr,ktr,kX,Str,Rtr,Btr,Tv,i_e,Ptr,Itr,SX,qtr,Ntr,jtr,Mv,d_e,Dtr,Gtr,RX,Otr,Vtr,Xtr,Ev,c_e,ztr,Qtr,BX,Wtr,Htr,Utr,Cv,f_e,Jtr,Ytr,PX,Ktr,Ztr,ear,wv,m_e,oar,rar,IX,tar,aar,nar,Av,g_e,sar,lar,qX,iar,dar,car,yv,h_e,far,mar,NX,gar,har,par,Lv,p_e,uar,_ar,jX,bar,Far,Tar,$s,u_e,Mar,Ear,DX,Car,war,GX,Aar,yar,Lar,xv,__e,xar,$ar,OX,kar,Sar,Rar,$v,b_e,Bar,Par,VX,Iar,qar,Nar,kv,v_e,jar,Dar,XX,Gar,Oar,Var,Sv,F_e,Xar,zar,zX,Qar,War,Har,Rv,T_e,Uar,Jar,QX,Yar,Kar,Zar,Bv,M_e,enr,onr,WX,rnr,tnr,anr,Pv,E_e,nnr,snr,HX,lnr,inr,dnr,Iv,C_e,cnr,fnr,UX,mnr,gnr,hnr,qv,w_e,pnr,unr,JX,_nr,bnr,vnr,Nv,A_e,Fnr,Tnr,YX,Mnr,Enr,Cnr,jv,y_e,wnr,Anr,KX,ynr,Lnr,xnr,Dv,L_e,$nr,knr,ZX,Snr,Rnr,Bnr,Gv,x_e,Pnr,Inr,ez,qnr,Nnr,jnr,Ov,$_e,Dnr,Gnr,oz,Onr,Vnr,Xnr,Vv,k_e,znr,Qnr,rz,Wnr,Hnr,Unr,Xv,S_e,Jnr,Ynr,tz,Knr,Znr,esr,zv,R_e,osr,rsr,az,tsr,asr,nsr,Qv,B_e,ssr,lsr,nz,isr,dsr,csr,Wv,P_e,fsr,msr,sz,gsr,hsr,psr,Hv,I_e,usr,_sr,lz,bsr,vsr,Fsr,Uv,q_e,Tsr,Msr,iz,Esr,Csr,wsr,Jv,N_e,Asr,ysr,dz,Lsr,xsr,$sr,Yv,j_e,ksr,Ssr,cz,Rsr,Bsr,Psr,Kv,D_e,Isr,qsr,fz,Nsr,jsr,Dsr,Zv,G_e,Gsr,Osr,mz,Vsr,Xsr,zsr,eF,O_e,Qsr,Wsr,gz,Hsr,Usr,Jsr,oF,V_e,Ysr,Ksr,hz,Zsr,elr,olr,rF,GPe,Bd,tF,X_e,p8,rlr,z_e,tlr,OPe,Ko,u8,alr,Pd,nlr,pz,slr,llr,uz,ilr,dlr,clr,_8,flr,Q_e,mlr,glr,hlr,Ct,b8,plr,W_e,ulr,_lr,Id,blr,H_e,vlr,Flr,_z,Tlr,Mlr,Elr,aF,Clr,wr,v8,wlr,U_e,Alr,ylr,Ja,Llr,J_e,xlr,$lr,Y_e,klr,Slr,K_e,Rlr,Blr,Plr,se,nF,Z_e,Ilr,qlr,bz,Nlr,jlr,Dlr,sF,e6e,Glr,Olr,vz,Vlr,Xlr,zlr,lF,o6e,Qlr,Wlr,Fz,Hlr,Ulr,Jlr,iF,r6e,Ylr,Klr,Tz,Zlr,eir,oir,dF,t6e,rir,tir,Mz,air,nir,sir,cF,a6e,lir,iir,Ez,dir,cir,fir,fF,n6e,mir,gir,Cz,hir,pir,uir,mF,s6e,_ir,bir,wz,vir,Fir,Tir,gF,l6e,Mir,Eir,Az,Cir,wir,Air,hF,i6e,yir,Lir,yz,xir,$ir,kir,pF,d6e,Sir,Rir,Lz,Bir,Pir,Iir,uF,c6e,qir,Nir,xz,jir,Dir,Gir,_F,f6e,Oir,Vir,$z,Xir,zir,Qir,bF,m6e,Wir,Hir,kz,Uir,Jir,Yir,vF,g6e,Kir,Zir,Sz,edr,odr,rdr,FF,h6e,tdr,adr,Rz,ndr,sdr,ldr,TF,p6e,idr,ddr,Bz,cdr,fdr,mdr,MF,u6e,gdr,hdr,Pz,pdr,udr,_dr,EF,_6e,bdr,vdr,Iz,Fdr,Tdr,Mdr,CF,b6e,Edr,Cdr,qz,wdr,Adr,ydr,wF,v6e,Ldr,xdr,Nz,$dr,kdr,Sdr,AF,F6e,Rdr,Bdr,jz,Pdr,Idr,qdr,yF,T6e,Ndr,jdr,Dz,Ddr,Gdr,Odr,LF,VPe,qd,xF,M6e,F8,Vdr,E6e,Xdr,XPe,Zo,T8,zdr,Nd,Qdr,Gz,Wdr,Hdr,Oz,Udr,Jdr,Ydr,M8,Kdr,C6e,Zdr,ecr,ocr,wt,E8,rcr,w6e,tcr,acr,jd,ncr,A6e,scr,lcr,Vz,icr,dcr,ccr,$F,fcr,Ar,C8,mcr,y6e,gcr,hcr,Ya,pcr,L6e,ucr,_cr,x6e,bcr,vcr,$6e,Fcr,Tcr,Mcr,Te,kF,k6e,Ecr,Ccr,Xz,wcr,Acr,ycr,SF,S6e,Lcr,xcr,zz,$cr,kcr,Scr,RF,R6e,Rcr,Bcr,Qz,Pcr,Icr,qcr,BF,B6e,Ncr,jcr,Wz,Dcr,Gcr,Ocr,PF,P6e,Vcr,Xcr,Hz,zcr,Qcr,Wcr,IF,I6e,Hcr,Ucr,Uz,Jcr,Ycr,Kcr,qF,q6e,Zcr,efr,Jz,ofr,rfr,tfr,NF,N6e,afr,nfr,Yz,sfr,lfr,ifr,jF,j6e,dfr,cfr,Kz,ffr,mfr,gfr,DF,D6e,hfr,pfr,Zz,ufr,_fr,bfr,GF,G6e,vfr,Ffr,eQ,Tfr,Mfr,Efr,OF,O6e,Cfr,wfr,oQ,Afr,yfr,Lfr,VF,zPe,Dd,XF,V6e,w8,xfr,X6e,$fr,QPe,er,A8,kfr,Gd,Sfr,rQ,Rfr,Bfr,tQ,Pfr,Ifr,qfr,y8,Nfr,z6e,jfr,Dfr,Gfr,At,L8,Ofr,Q6e,Vfr,Xfr,Od,zfr,W6e,Qfr,Wfr,aQ,Hfr,Ufr,Jfr,zF,Yfr,yr,x8,Kfr,H6e,Zfr,emr,Ka,omr,U6e,rmr,tmr,J6e,amr,nmr,Y6e,smr,lmr,imr,Vd,QF,K6e,dmr,cmr,nQ,fmr,mmr,gmr,WF,Z6e,hmr,pmr,sQ,umr,_mr,bmr,HF,e1e,vmr,Fmr,lQ,Tmr,Mmr,Emr,UF,WPe,Xd,JF,o1e,$8,Cmr,r1e,wmr,HPe,or,k8,Amr,zd,ymr,iQ,Lmr,xmr,dQ,$mr,kmr,Smr,S8,Rmr,t1e,Bmr,Pmr,Imr,yt,R8,qmr,a1e,Nmr,jmr,Qd,Dmr,n1e,Gmr,Omr,cQ,Vmr,Xmr,zmr,YF,Qmr,Lr,B8,Wmr,s1e,Hmr,Umr,Za,Jmr,l1e,Ymr,Kmr,i1e,Zmr,egr,d1e,ogr,rgr,tgr,ie,KF,c1e,agr,ngr,fQ,sgr,lgr,igr,ZF,f1e,dgr,cgr,mQ,fgr,mgr,ggr,eT,m1e,hgr,pgr,gQ,ugr,_gr,bgr,oT,g1e,vgr,Fgr,hQ,Tgr,Mgr,Egr,rT,h1e,Cgr,wgr,pQ,Agr,ygr,Lgr,tT,p1e,xgr,$gr,uQ,kgr,Sgr,Rgr,aT,u1e,Bgr,Pgr,_Q,Igr,qgr,Ngr,nT,_1e,jgr,Dgr,bQ,Ggr,Ogr,Vgr,sT,b1e,Xgr,zgr,vQ,Qgr,Wgr,Hgr,lT,v1e,Ugr,Jgr,FQ,Ygr,Kgr,Zgr,iT,F1e,ehr,ohr,TQ,rhr,thr,ahr,dT,T1e,nhr,shr,MQ,lhr,ihr,dhr,cT,M1e,chr,fhr,EQ,mhr,ghr,hhr,fT,E1e,phr,uhr,CQ,_hr,bhr,vhr,mT,C1e,Fhr,Thr,wQ,Mhr,Ehr,Chr,gT,w1e,whr,Ahr,AQ,yhr,Lhr,xhr,hT,A1e,$hr,khr,yQ,Shr,Rhr,Bhr,pT,y1e,Phr,Ihr,LQ,qhr,Nhr,jhr,uT,L1e,Dhr,Ghr,xQ,Ohr,Vhr,Xhr,_T,x1e,zhr,Qhr,$Q,Whr,Hhr,Uhr,bT,UPe,Wd,vT,$1e,P8,Jhr,k1e,Yhr,JPe,rr,I8,Khr,Hd,Zhr,kQ,epr,opr,SQ,rpr,tpr,apr,q8,npr,S1e,spr,lpr,ipr,Lt,N8,dpr,R1e,cpr,fpr,Ud,mpr,B1e,gpr,hpr,RQ,ppr,upr,_pr,FT,bpr,xr,j8,vpr,P1e,Fpr,Tpr,en,Mpr,I1e,Epr,Cpr,q1e,wpr,Apr,N1e,ypr,Lpr,xpr,ye,TT,j1e,$pr,kpr,BQ,Spr,Rpr,Bpr,MT,D1e,Ppr,Ipr,PQ,qpr,Npr,jpr,ET,G1e,Dpr,Gpr,IQ,Opr,Vpr,Xpr,CT,O1e,zpr,Qpr,qQ,Wpr,Hpr,Upr,wT,V1e,Jpr,Ypr,NQ,Kpr,Zpr,eur,AT,X1e,our,rur,jQ,tur,aur,nur,yT,z1e,sur,lur,DQ,iur,dur,cur,LT,Q1e,fur,mur,GQ,gur,hur,pur,xT,W1e,uur,_ur,OQ,bur,vur,Fur,$T,H1e,Tur,Mur,VQ,Eur,Cur,wur,kT,YPe,Jd,ST,U1e,D8,Aur,J1e,yur,KPe,tr,G8,Lur,Yd,xur,XQ,$ur,kur,zQ,Sur,Rur,Bur,O8,Pur,Y1e,Iur,qur,Nur,xt,V8,jur,K1e,Dur,Gur,Kd,Our,Z1e,Vur,Xur,QQ,zur,Qur,Wur,RT,Hur,$r,X8,Uur,ebe,Jur,Yur,on,Kur,obe,Zur,e_r,rbe,o_r,r_r,tbe,t_r,a_r,n_r,Z,BT,abe,s_r,l_r,WQ,i_r,d_r,c_r,PT,nbe,f_r,m_r,HQ,g_r,h_r,p_r,IT,sbe,u_r,__r,UQ,b_r,v_r,F_r,qT,lbe,T_r,M_r,JQ,E_r,C_r,w_r,NT,ibe,A_r,y_r,YQ,L_r,x_r,$_r,jT,dbe,k_r,S_r,KQ,R_r,B_r,P_r,DT,cbe,I_r,q_r,ZQ,N_r,j_r,D_r,GT,fbe,G_r,O_r,eW,V_r,X_r,z_r,OT,mbe,Q_r,W_r,oW,H_r,U_r,J_r,VT,gbe,Y_r,K_r,rW,Z_r,e6r,o6r,XT,hbe,r6r,t6r,tW,a6r,n6r,s6r,zT,pbe,l6r,i6r,aW,d6r,c6r,f6r,QT,ube,m6r,g6r,nW,h6r,p6r,u6r,WT,_be,_6r,b6r,sW,v6r,F6r,T6r,HT,bbe,M6r,E6r,lW,C6r,w6r,A6r,UT,vbe,y6r,L6r,iW,x6r,$6r,k6r,JT,Fbe,S6r,R6r,dW,B6r,P6r,I6r,YT,Tbe,q6r,N6r,cW,j6r,D6r,G6r,KT,Mbe,O6r,V6r,fW,X6r,z6r,Q6r,ZT,Ebe,W6r,H6r,mW,U6r,J6r,Y6r,eM,Cbe,K6r,Z6r,gW,e1r,o1r,r1r,oM,wbe,t1r,a1r,hW,n1r,s1r,l1r,rM,Abe,i1r,d1r,pW,c1r,f1r,m1r,tM,ybe,g1r,h1r,uW,p1r,u1r,_1r,aM,Lbe,b1r,v1r,_W,F1r,T1r,M1r,nM,xbe,E1r,C1r,bW,w1r,A1r,y1r,sM,ZPe,Zd,lM,$be,z8,L1r,kbe,x1r,eIe,ar,Q8,$1r,ec,k1r,vW,S1r,R1r,FW,B1r,P1r,I1r,W8,q1r,Sbe,N1r,j1r,D1r,$t,H8,G1r,Rbe,O1r,V1r,oc,X1r,Bbe,z1r,Q1r,TW,W1r,H1r,U1r,iM,J1r,kr,U8,Y1r,Pbe,K1r,Z1r,rn,ebr,Ibe,obr,rbr,qbe,tbr,abr,Nbe,nbr,sbr,lbr,pe,dM,jbe,ibr,dbr,MW,cbr,fbr,mbr,cM,Dbe,gbr,hbr,EW,pbr,ubr,_br,fM,Gbe,bbr,vbr,CW,Fbr,Tbr,Mbr,mM,Obe,Ebr,Cbr,wW,wbr,Abr,ybr,gM,Vbe,Lbr,xbr,AW,$br,kbr,Sbr,hM,Xbe,Rbr,Bbr,yW,Pbr,Ibr,qbr,pM,zbe,Nbr,jbr,LW,Dbr,Gbr,Obr,uM,Qbe,Vbr,Xbr,xW,zbr,Qbr,Wbr,_M,Wbe,Hbr,Ubr,$W,Jbr,Ybr,Kbr,bM,Hbe,Zbr,e4r,kW,o4r,r4r,t4r,vM,Ube,a4r,n4r,SW,s4r,l4r,i4r,FM,Jbe,d4r,c4r,RW,f4r,m4r,g4r,TM,Ybe,h4r,p4r,BW,u4r,_4r,b4r,MM,Kbe,v4r,F4r,PW,T4r,M4r,E4r,EM,Zbe,C4r,w4r,IW,A4r,y4r,L4r,CM,e4e,x4r,$4r,qW,k4r,S4r,R4r,wM,o4e,B4r,P4r,NW,I4r,q4r,N4r,AM,oIe,rc,yM,r4e,J8,j4r,t4e,D4r,rIe,nr,Y8,G4r,tc,O4r,jW,V4r,X4r,DW,z4r,Q4r,W4r,K8,H4r,a4e,U4r,J4r,Y4r,kt,Z8,K4r,n4e,Z4r,e2r,ac,o2r,s4e,r2r,t2r,GW,a2r,n2r,s2r,LM,l2r,Sr,e7,i2r,l4e,d2r,c2r,tn,f2r,i4e,m2r,g2r,d4e,h2r,p2r,c4e,u2r,_2r,b2r,f4e,xM,m4e,v2r,F2r,OW,T2r,M2r,E2r,$M,tIe,nc,kM,g4e,o7,C2r,h4e,w2r,aIe,sr,r7,A2r,sc,y2r,VW,L2r,x2r,XW,$2r,k2r,S2r,t7,R2r,p4e,B2r,P2r,I2r,St,a7,q2r,u4e,N2r,j2r,lc,D2r,_4e,G2r,O2r,zW,V2r,X2r,z2r,SM,Q2r,Rr,n7,W2r,b4e,H2r,U2r,an,J2r,v4e,Y2r,K2r,F4e,Z2r,e5r,T4e,o5r,r5r,t5r,de,RM,M4e,a5r,n5r,QW,s5r,l5r,i5r,BM,E4e,d5r,c5r,WW,f5r,m5r,g5r,PM,C4e,h5r,p5r,HW,u5r,_5r,b5r,IM,w4e,v5r,F5r,UW,T5r,M5r,E5r,qM,A4e,C5r,w5r,JW,A5r,y5r,L5r,NM,y4e,x5r,$5r,YW,k5r,S5r,R5r,jM,L4e,B5r,P5r,KW,I5r,q5r,N5r,DM,x4e,j5r,D5r,ZW,G5r,O5r,V5r,GM,$4e,X5r,z5r,eH,Q5r,W5r,H5r,OM,k4e,U5r,J5r,oH,Y5r,K5r,Z5r,VM,S4e,evr,ovr,rH,rvr,tvr,avr,XM,R4e,nvr,svr,tH,lvr,ivr,dvr,zM,B4e,cvr,fvr,aH,mvr,gvr,hvr,QM,P4e,pvr,uvr,nH,_vr,bvr,vvr,WM,I4e,Fvr,Tvr,sH,Mvr,Evr,Cvr,HM,q4e,wvr,Avr,lH,yvr,Lvr,xvr,UM,N4e,$vr,kvr,iH,Svr,Rvr,Bvr,JM,j4e,Pvr,Ivr,dH,qvr,Nvr,jvr,YM,D4e,Dvr,Gvr,cH,Ovr,Vvr,Xvr,KM,G4e,zvr,Qvr,fH,Wvr,Hvr,Uvr,ZM,nIe,ic,eE,O4e,s7,Jvr,V4e,Yvr,sIe,lr,l7,Kvr,dc,Zvr,mH,eFr,oFr,gH,rFr,tFr,aFr,i7,nFr,X4e,sFr,lFr,iFr,Rt,d7,dFr,z4e,cFr,fFr,cc,mFr,Q4e,gFr,hFr,hH,pFr,uFr,_Fr,oE,bFr,Br,c7,vFr,W4e,FFr,TFr,nn,MFr,H4e,EFr,CFr,U4e,wFr,AFr,J4e,yFr,LFr,xFr,ce,rE,Y4e,$Fr,kFr,pH,SFr,RFr,BFr,tE,K4e,PFr,IFr,uH,qFr,NFr,jFr,aE,Z4e,DFr,GFr,_H,OFr,VFr,XFr,nE,e2e,zFr,QFr,bH,WFr,HFr,UFr,sE,o2e,JFr,YFr,vH,KFr,ZFr,eTr,lE,r2e,oTr,rTr,FH,tTr,aTr,nTr,iE,t2e,sTr,lTr,TH,iTr,dTr,cTr,dE,a2e,fTr,mTr,MH,gTr,hTr,pTr,cE,n2e,uTr,_Tr,EH,bTr,vTr,FTr,fE,s2e,TTr,MTr,CH,ETr,CTr,wTr,mE,l2e,ATr,yTr,wH,LTr,xTr,$Tr,gE,i2e,kTr,STr,AH,RTr,BTr,PTr,hE,d2e,ITr,qTr,yH,NTr,jTr,DTr,pE,c2e,GTr,OTr,LH,VTr,XTr,zTr,uE,f2e,QTr,WTr,xH,HTr,UTr,JTr,_E,m2e,YTr,KTr,$H,ZTr,eMr,oMr,bE,g2e,rMr,tMr,kH,aMr,nMr,sMr,vE,h2e,lMr,iMr,SH,dMr,cMr,fMr,FE,p2e,mMr,gMr,RH,hMr,pMr,uMr,TE,u2e,_Mr,bMr,BH,vMr,FMr,TMr,ME,lIe,fc,EE,_2e,f7,MMr,b2e,EMr,iIe,ir,m7,CMr,mc,wMr,PH,AMr,yMr,IH,LMr,xMr,$Mr,g7,kMr,v2e,SMr,RMr,BMr,Bt,h7,PMr,F2e,IMr,qMr,gc,NMr,T2e,jMr,DMr,qH,GMr,OMr,VMr,CE,XMr,Pr,p7,zMr,M2e,QMr,WMr,sn,HMr,E2e,UMr,JMr,C2e,YMr,KMr,w2e,ZMr,eEr,oEr,A2e,wE,y2e,rEr,tEr,NH,aEr,nEr,sEr,AE,dIe,hc,yE,L2e,u7,lEr,x2e,iEr,cIe,dr,_7,dEr,pc,cEr,jH,fEr,mEr,DH,gEr,hEr,pEr,b7,uEr,$2e,_Er,bEr,vEr,Pt,v7,FEr,k2e,TEr,MEr,uc,EEr,S2e,CEr,wEr,GH,AEr,yEr,LEr,LE,xEr,Ir,F7,$Er,R2e,kEr,SEr,ln,REr,B2e,BEr,PEr,P2e,IEr,qEr,I2e,NEr,jEr,DEr,q2e,xE,N2e,GEr,OEr,OH,VEr,XEr,zEr,$E,fIe,_c,kE,j2e,T7,QEr,D2e,WEr,mIe,cr,M7,HEr,bc,UEr,VH,JEr,YEr,XH,KEr,ZEr,eCr,E7,oCr,G2e,rCr,tCr,aCr,It,C7,nCr,O2e,sCr,lCr,vc,iCr,V2e,dCr,cCr,zH,fCr,mCr,gCr,SE,hCr,qr,w7,pCr,X2e,uCr,_Cr,dn,bCr,z2e,vCr,FCr,Q2e,TCr,MCr,W2e,ECr,CCr,wCr,re,RE,H2e,ACr,yCr,QH,LCr,xCr,$Cr,BE,U2e,kCr,SCr,WH,RCr,BCr,PCr,PE,J2e,ICr,qCr,HH,NCr,jCr,DCr,IE,Y2e,GCr,OCr,UH,VCr,XCr,zCr,qE,K2e,QCr,WCr,JH,HCr,UCr,JCr,NE,Z2e,YCr,KCr,YH,ZCr,e3r,o3r,jE,e5e,r3r,t3r,KH,a3r,n3r,s3r,DE,o5e,l3r,i3r,ZH,d3r,c3r,f3r,GE,r5e,m3r,g3r,eU,h3r,p3r,u3r,OE,t5e,_3r,b3r,oU,v3r,F3r,T3r,VE,a5e,M3r,E3r,rU,C3r,w3r,A3r,XE,n5e,y3r,L3r,tU,x3r,$3r,k3r,zE,s5e,S3r,R3r,aU,B3r,P3r,I3r,QE,l5e,q3r,N3r,nU,j3r,D3r,G3r,WE,i5e,O3r,V3r,sU,X3r,z3r,Q3r,HE,d5e,W3r,H3r,lU,U3r,J3r,Y3r,UE,c5e,K3r,Z3r,iU,ewr,owr,rwr,JE,f5e,twr,awr,dU,nwr,swr,lwr,YE,m5e,iwr,dwr,cU,cwr,fwr,mwr,KE,g5e,gwr,hwr,fU,pwr,uwr,_wr,ZE,h5e,bwr,vwr,mU,Fwr,Twr,Mwr,eC,p5e,Ewr,Cwr,gU,wwr,Awr,ywr,oC,u5e,Lwr,xwr,hU,$wr,kwr,Swr,rC,_5e,Rwr,Bwr,pU,Pwr,Iwr,qwr,tC,b5e,Nwr,jwr,uU,Dwr,Gwr,Owr,aC,gIe,Fc,nC,v5e,A7,Vwr,F5e,Xwr,hIe,fr,y7,zwr,Tc,Qwr,_U,Wwr,Hwr,bU,Uwr,Jwr,Ywr,L7,Kwr,T5e,Zwr,eAr,oAr,qt,x7,rAr,M5e,tAr,aAr,Mc,nAr,E5e,sAr,lAr,vU,iAr,dAr,cAr,sC,fAr,Nr,$7,mAr,C5e,gAr,hAr,cn,pAr,w5e,uAr,_Ar,A5e,bAr,vAr,y5e,FAr,TAr,MAr,ke,lC,L5e,EAr,CAr,FU,wAr,AAr,yAr,iC,x5e,LAr,xAr,TU,$Ar,kAr,SAr,dC,$5e,RAr,BAr,MU,PAr,IAr,qAr,cC,k5e,NAr,jAr,EU,DAr,GAr,OAr,fC,S5e,VAr,XAr,CU,zAr,QAr,WAr,mC,R5e,HAr,UAr,wU,JAr,YAr,KAr,gC,B5e,ZAr,e0r,AU,o0r,r0r,t0r,hC,P5e,a0r,n0r,yU,s0r,l0r,i0r,pC,I5e,d0r,c0r,LU,f0r,m0r,g0r,uC,pIe,Ec,_C,q5e,k7,h0r,N5e,p0r,uIe,mr,S7,u0r,Cc,_0r,xU,b0r,v0r,$U,F0r,T0r,M0r,R7,E0r,j5e,C0r,w0r,A0r,Nt,B7,y0r,D5e,L0r,x0r,wc,$0r,G5e,k0r,S0r,kU,R0r,B0r,P0r,bC,I0r,jr,P7,q0r,O5e,N0r,j0r,fn,D0r,V5e,G0r,O0r,X5e,V0r,X0r,z5e,z0r,Q0r,W0r,Me,vC,Q5e,H0r,U0r,SU,J0r,Y0r,K0r,FC,W5e,Z0r,eyr,RU,oyr,ryr,tyr,TC,H5e,ayr,nyr,BU,syr,lyr,iyr,MC,U5e,dyr,cyr,PU,fyr,myr,gyr,EC,J5e,hyr,pyr,IU,uyr,_yr,byr,CC,Y5e,vyr,Fyr,qU,Tyr,Myr,Eyr,wC,K5e,Cyr,wyr,NU,Ayr,yyr,Lyr,AC,Z5e,xyr,$yr,jU,kyr,Syr,Ryr,yC,eve,Byr,Pyr,DU,Iyr,qyr,Nyr,LC,ove,jyr,Dyr,GU,Gyr,Oyr,Vyr,xC,rve,Xyr,zyr,OU,Qyr,Wyr,Hyr,$C,tve,Uyr,Jyr,VU,Yyr,Kyr,Zyr,kC,_Ie,Ac,SC,ave,I7,eLr,nve,oLr,bIe,gr,q7,rLr,yc,tLr,XU,aLr,nLr,zU,sLr,lLr,iLr,N7,dLr,sve,cLr,fLr,mLr,jt,j7,gLr,lve,hLr,pLr,Lc,uLr,ive,_Lr,bLr,QU,vLr,FLr,TLr,RC,MLr,Dr,D7,ELr,dve,CLr,wLr,mn,ALr,cve,yLr,LLr,fve,xLr,$Lr,mve,kLr,SLr,RLr,Le,BC,gve,BLr,PLr,WU,ILr,qLr,NLr,PC,hve,jLr,DLr,HU,GLr,OLr,VLr,IC,pve,XLr,zLr,UU,QLr,WLr,HLr,qC,uve,ULr,JLr,JU,YLr,KLr,ZLr,NC,_ve,e8r,o8r,YU,r8r,t8r,a8r,jC,bve,n8r,s8r,KU,l8r,i8r,d8r,DC,vve,c8r,f8r,ZU,m8r,g8r,h8r,GC,Fve,p8r,u8r,eJ,_8r,b8r,v8r,OC,Tve,F8r,T8r,oJ,M8r,E8r,C8r,VC,Mve,w8r,A8r,rJ,y8r,L8r,x8r,XC,vIe,xc,zC,Eve,G7,$8r,Cve,k8r,FIe,hr,O7,S8r,$c,R8r,tJ,B8r,P8r,aJ,I8r,q8r,N8r,V7,j8r,wve,D8r,G8r,O8r,Dt,X7,V8r,Ave,X8r,z8r,kc,Q8r,yve,W8r,H8r,nJ,U8r,J8r,Y8r,QC,K8r,Gr,z7,Z8r,Lve,e7r,o7r,gn,r7r,xve,t7r,a7r,$ve,n7r,s7r,kve,l7r,i7r,d7r,Se,WC,Sve,c7r,f7r,sJ,m7r,g7r,h7r,HC,Rve,p7r,u7r,lJ,_7r,b7r,v7r,UC,Bve,F7r,T7r,iJ,M7r,E7r,C7r,JC,Pve,w7r,A7r,dJ,y7r,L7r,x7r,YC,Ive,$7r,k7r,cJ,S7r,R7r,B7r,KC,qve,P7r,I7r,fJ,q7r,N7r,j7r,ZC,Nve,D7r,G7r,mJ,O7r,V7r,X7r,e3,jve,z7r,Q7r,gJ,W7r,H7r,U7r,o3,Dve,J7r,Y7r,hJ,K7r,Z7r,exr,r3,TIe,Sc,t3,Gve,Q7,oxr,Ove,rxr,MIe,pr,W7,txr,Rc,axr,pJ,nxr,sxr,uJ,lxr,ixr,dxr,H7,cxr,Vve,fxr,mxr,gxr,Gt,U7,hxr,Xve,pxr,uxr,Bc,_xr,zve,bxr,vxr,_J,Fxr,Txr,Mxr,a3,Exr,Or,J7,Cxr,Qve,wxr,Axr,hn,yxr,Wve,Lxr,xxr,Hve,$xr,kxr,Uve,Sxr,Rxr,Bxr,xe,n3,Jve,Pxr,Ixr,bJ,qxr,Nxr,jxr,s3,Yve,Dxr,Gxr,vJ,Oxr,Vxr,Xxr,l3,Kve,zxr,Qxr,FJ,Wxr,Hxr,Uxr,i3,Zve,Jxr,Yxr,TJ,Kxr,Zxr,e9r,d3,eFe,o9r,r9r,MJ,t9r,a9r,n9r,c3,oFe,s9r,l9r,EJ,i9r,d9r,c9r,f3,rFe,f9r,m9r,CJ,g9r,h9r,p9r,m3,tFe,u9r,_9r,wJ,b9r,v9r,F9r,g3,aFe,T9r,M9r,AJ,E9r,C9r,w9r,h3,nFe,A9r,y9r,yJ,L9r,x9r,$9r,p3,EIe,Pc,u3,sFe,Y7,k9r,lFe,S9r,CIe,ur,K7,R9r,Ic,B9r,LJ,P9r,I9r,xJ,q9r,N9r,j9r,Z7,D9r,iFe,G9r,O9r,V9r,Ot,ex,X9r,dFe,z9r,Q9r,qc,W9r,cFe,H9r,U9r,$J,J9r,Y9r,K9r,_3,Z9r,Vr,ox,e$r,fFe,o$r,r$r,pn,t$r,mFe,a$r,n$r,gFe,s$r,l$r,hFe,i$r,d$r,c$r,$e,b3,pFe,f$r,m$r,kJ,g$r,h$r,p$r,v3,uFe,u$r,_$r,SJ,b$r,v$r,F$r,F3,_Fe,T$r,M$r,RJ,E$r,C$r,w$r,T3,bFe,A$r,y$r,BJ,L$r,x$r,$$r,M3,vFe,k$r,S$r,PJ,R$r,B$r,P$r,E3,FFe,I$r,q$r,IJ,N$r,j$r,D$r,C3,TFe,G$r,O$r,qJ,V$r,X$r,z$r,w3,MFe,Q$r,W$r,NJ,H$r,U$r,J$r,A3,EFe,Y$r,K$r,jJ,Z$r,ekr,okr,y3,CFe,rkr,tkr,DJ,akr,nkr,skr,L3,wIe,Nc,x3,wFe,rx,lkr,AFe,ikr,AIe,_r,tx,dkr,jc,ckr,GJ,fkr,mkr,OJ,gkr,hkr,pkr,ax,ukr,yFe,_kr,bkr,vkr,Vt,nx,Fkr,LFe,Tkr,Mkr,Dc,Ekr,xFe,Ckr,wkr,VJ,Akr,ykr,Lkr,$3,xkr,Xr,sx,$kr,$Fe,kkr,Skr,un,Rkr,kFe,Bkr,Pkr,SFe,Ikr,qkr,RFe,Nkr,jkr,Dkr,De,k3,BFe,Gkr,Okr,XJ,Vkr,Xkr,zkr,S3,PFe,Qkr,Wkr,zJ,Hkr,Ukr,Jkr,R3,IFe,Ykr,Kkr,QJ,Zkr,eSr,oSr,B3,qFe,rSr,tSr,WJ,aSr,nSr,sSr,P3,NFe,lSr,iSr,HJ,dSr,cSr,fSr,I3,jFe,mSr,gSr,UJ,hSr,pSr,uSr,q3,DFe,_Sr,bSr,JJ,vSr,FSr,TSr,N3,GFe,MSr,ESr,YJ,CSr,wSr,ASr,j3,yIe,Gc,D3,OFe,lx,ySr,VFe,LSr,LIe,br,ix,xSr,Oc,$Sr,KJ,kSr,SSr,ZJ,RSr,BSr,PSr,dx,ISr,XFe,qSr,NSr,jSr,Xt,cx,DSr,zFe,GSr,OSr,Vc,VSr,QFe,XSr,zSr,eY,QSr,WSr,HSr,G3,USr,zr,fx,JSr,WFe,YSr,KSr,_n,ZSr,HFe,eRr,oRr,UFe,rRr,tRr,JFe,aRr,nRr,sRr,Ge,O3,YFe,lRr,iRr,oY,dRr,cRr,fRr,V3,KFe,mRr,gRr,rY,hRr,pRr,uRr,X3,ZFe,_Rr,bRr,tY,vRr,FRr,TRr,z3,eTe,MRr,ERr,aY,CRr,wRr,ARr,Q3,oTe,yRr,LRr,nY,xRr,$Rr,kRr,W3,rTe,SRr,RRr,sY,BRr,PRr,IRr,H3,tTe,qRr,NRr,lY,jRr,DRr,GRr,U3,aTe,ORr,VRr,iY,XRr,zRr,QRr,J3,xIe,Xc,Y3,nTe,mx,WRr,sTe,HRr,$Ie,vr,gx,URr,zc,JRr,dY,YRr,KRr,cY,ZRr,eBr,oBr,hx,rBr,lTe,tBr,aBr,nBr,zt,px,sBr,iTe,lBr,iBr,Qc,dBr,dTe,cBr,fBr,fY,mBr,gBr,hBr,K3,pBr,Qr,ux,uBr,cTe,_Br,bBr,bn,vBr,fTe,FBr,TBr,mTe,MBr,EBr,gTe,CBr,wBr,ABr,hTe,Z3,pTe,yBr,LBr,mY,xBr,$Br,kBr,ew,kIe,Wc,ow,uTe,_x,SBr,_Te,RBr,SIe,Fr,bx,BBr,Hc,PBr,gY,IBr,qBr,hY,NBr,jBr,DBr,vx,GBr,bTe,OBr,VBr,XBr,Qt,Fx,zBr,vTe,QBr,WBr,Uc,HBr,FTe,UBr,JBr,pY,YBr,KBr,ZBr,rw,ePr,Wr,Tx,oPr,TTe,rPr,tPr,vn,aPr,MTe,nPr,sPr,ETe,lPr,iPr,CTe,dPr,cPr,fPr,Mx,tw,wTe,mPr,gPr,uY,hPr,pPr,uPr,aw,ATe,_Pr,bPr,_Y,vPr,FPr,TPr,nw,RIe,Jc,sw,yTe,Ex,MPr,LTe,EPr,BIe,Tr,Cx,CPr,Yc,wPr,bY,APr,yPr,vY,LPr,xPr,$Pr,wx,kPr,xTe,SPr,RPr,BPr,Wt,Ax,PPr,$Te,IPr,qPr,Kc,NPr,kTe,jPr,DPr,FY,GPr,OPr,VPr,lw,XPr,Hr,yx,zPr,STe,QPr,WPr,Fn,HPr,RTe,UPr,JPr,BTe,YPr,KPr,PTe,ZPr,eIr,oIr,ITe,iw,qTe,rIr,tIr,TY,aIr,nIr,sIr,dw,PIe;return d=new ee({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),x0=new ee({}),$0=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),lf=new lIr({props:{warning:!0,$$slots:{default:[fwt]},$$scope:{ctx:L}}}),k0=new ee({}),S0=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/configuration_auto.py#L566"}}),P0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/configuration_auto.py#L589"}}),sg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),I0=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/configuration_auto.py#L711"}}),q0=new ee({}),N0=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/tokenization_auto.py#L377"}}),G0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/tokenization_auto.py#L391"}}),Ng=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),O0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/tokenization_auto.py#L587"}}),V0=new ee({}),X0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/feature_extraction_auto.py#L178"}}),W0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/feature_extraction_auto.py#L192"}}),mh=new lIr({props:{$$slots:{default:[hwt]},$$scope:{ctx:L}}}),gh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),H0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/feature_extraction_auto.py#L319"}}),U0=new ee({}),J0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/processing_auto.py#L77"}}),Z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/processing_auto.py#L91"}}),kh=new lIr({props:{$$slots:{default:[uwt]},$$scope:{ctx:L}}}),Sh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),ey=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/processing_auto.py#L244"}}),oy=new ee({}),ry=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L718"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Ph=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Cu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),sy=new ee({}),ly=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L725"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Au=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),h_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Twt]},$$scope:{ctx:L}}}),fy=new ee({}),my=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L740"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),u_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Mwt]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Z_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Ewt]},$$scope:{ctx:L}}}),uy=new ee({}),_y=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L747"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Cwt]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),N6=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[wwt]},$$scope:{ctx:L}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L754"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),D6=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Awt]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),n1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ywt]},$$scope:{ctx:L}}}),Ay=new ee({}),yy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L763"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),l1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Lwt]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[xwt]},$$scope:{ctx:L}}}),ky=new ee({}),Sy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L797"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[$wt]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[kwt]},$$scope:{ctx:L}}}),Iy=new ee({}),qy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L804"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Ib=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Swt]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Rwt]},$$scope:{ctx:L}}}),Gy=new ee({}),Oy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L790"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Bwt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Pwt]},$$scope:{ctx:L}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L772"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Iwt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),p2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qwt]},$$scope:{ctx:L}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L779"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),_2=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Nwt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[jwt]},$$scope:{ctx:L}}}),rL=new ee({}),tL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L813"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Dwt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),P2=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Gwt]},$$scope:{ctx:L}}}),lL=new ee({}),iL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L852"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Owt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Vwt]},$$scope:{ctx:L}}}),mL=new ee({}),gL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L859"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Xwt]},$$scope:{ctx:L}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),K2=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[zwt]},$$scope:{ctx:L}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L882"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Qwt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Wwt]},$$scope:{ctx:L}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L866"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Hwt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Uwt]},$$scope:{ctx:L}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L873"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Jwt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),C5=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Ywt]},$$scope:{ctx:L}}}),RL=new ee({}),BL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L891"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),A5=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Kwt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Zwt]},$$scope:{ctx:L}}}),NL=new ee({}),jL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L898"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[eAt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),j5=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oAt]},$$scope:{ctx:L}}}),VL=new ee({}),XL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L845"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),G5=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rAt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tAt]},$$scope:{ctx:L}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L820"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[aAt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),J5=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nAt]},$$scope:{ctx:L}}}),e8=new ee({}),o8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L827"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sAt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),av=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lAt]},$$scope:{ctx:L}}}),n8=new ee({}),s8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_auto.py#L836"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),sv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iAt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dAt]},$$scope:{ctx:L}}}),c8=new ee({}),f8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[cAt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:L}}}),p8=new ee({}),u8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gAt]},$$scope:{ctx:L}}}),F8=new ee({}),T8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hAt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:L}}}),w8=new ee({}),A8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[uAt]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_At]},$$scope:{ctx:L}}}),$8=new ee({}),k8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bAt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vAt]},$$scope:{ctx:L}}}),P8=new ee({}),I8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FAt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),kT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TAt]},$$scope:{ctx:L}}}),D8=new ee({}),G8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),RT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MAt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EAt]},$$scope:{ctx:L}}}),z8=new ee({}),Q8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[CAt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wAt]},$$scope:{ctx:L}}}),J8=new ee({}),Y8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[AAt]},$$scope:{ctx:L}}}),e7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[yAt]},$$scope:{ctx:L}}}),o7=new ee({}),r7=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),a7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[LAt]},$$scope:{ctx:L}}}),n7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[xAt]},$$scope:{ctx:L}}}),s7=new ee({}),l7=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),d7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[$At]},$$scope:{ctx:L}}}),c7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[kAt]},$$scope:{ctx:L}}}),f7=new ee({}),m7=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),h7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[SAt]},$$scope:{ctx:L}}}),p7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[RAt]},$$scope:{ctx:L}}}),u7=new ee({}),_7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),v7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[BAt]},$$scope:{ctx:L}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),$E=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:L}}}),T7=new ee({}),M7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),C7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[IAt]},$$scope:{ctx:L}}}),w7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[qAt]},$$scope:{ctx:L}}}),A7=new ee({}),y7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),x7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[NAt]},$$scope:{ctx:L}}}),$7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[jAt]},$$scope:{ctx:L}}}),k7=new ee({}),S7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),B7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[DAt]},$$scope:{ctx:L}}}),P7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),kC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[GAt]},$$scope:{ctx:L}}}),I7=new ee({}),q7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),j7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[OAt]},$$scope:{ctx:L}}}),D7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[VAt]},$$scope:{ctx:L}}}),G7=new ee({}),O7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),X7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[XAt]},$$scope:{ctx:L}}}),z7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),r3=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[zAt]},$$scope:{ctx:L}}}),Q7=new ee({}),W7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),U7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),a3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[QAt]},$$scope:{ctx:L}}}),J7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[WAt]},$$scope:{ctx:L}}}),Y7=new ee({}),K7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[HAt]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),L3=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[UAt]},$$scope:{ctx:L}}}),rx=new ee({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),$3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[JAt]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[YAt]},$$scope:{ctx:L}}}),lx=new ee({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[KAt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ZAt]},$$scope:{ctx:L}}}),mx=new ee({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),K3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[e0t]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[o0t]},$$scope:{ctx:L}}}),_x=new ee({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[r0t]},$$scope:{ctx:L}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[t0t]},$$scope:{ctx:L}}}),Ex=new ee({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[a0t]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[n0t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),oi=o("Auto Classes"),rf=l(),Kr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),w0=o("from_pretrained()"),tf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ai=o("Instantiating one of "),Mn=a("a"),A0=o("AutoConfig"),En=o(", "),Cn=a("a"),y0=o("AutoModel"),ni=o(`, and
`),wn=a("a"),L0=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),af=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),D9=o("will create a model that is an instance of "),li=a("a"),G9=o("BertModel"),O9=o("."),Eo=l(),Fa=a("p"),V9=o("There is one class of "),nf=a("code"),X9=o("AutoModel"),DNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),BBe=l(),ii=a("h2"),sf=a("a"),gZ=a("span"),F(x0.$$.fragment),GNe=l(),hZ=a("span"),ONe=o("Extending the Auto Classes"),PBe=l(),An=a("p"),VNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pZ=a("code"),XNe=o("NewModel"),zNe=o(", make sure you have a "),uZ=a("code"),QNe=o("NewModelConfig"),WNe=o(` then you can add those to the auto
classes like this:`),IBe=l(),F($0.$$.fragment),qBe=l(),z9=a("p"),HNe=o("You will then be able to use the auto classes like you would usually do!"),NBe=l(),F(lf.$$.fragment),jBe=l(),di=a("h2"),df=a("a"),_Z=a("span"),F(k0.$$.fragment),UNe=l(),bZ=a("span"),JNe=o("AutoConfig"),DBe=l(),Co=a("div"),F(S0.$$.fragment),YNe=l(),R0=a("p"),KNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Q9=a("a"),ZNe=o("from_pretrained()"),eje=o(" class method."),oje=l(),B0=a("p"),rje=o("This class cannot be instantiated directly using "),vZ=a("code"),tje=o("__init__()"),aje=o(" (throws an error)."),nje=l(),Mr=a("div"),F(P0.$$.fragment),sje=l(),FZ=a("p"),lje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),ije=l(),ci=a("p"),dje=o("The configuration class to instantiate is selected based on the "),TZ=a("code"),cje=o("model_type"),fje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MZ=a("code"),mje=o("pretrained_model_name_or_path"),gje=o(":"),hje=l(),A=a("ul"),cf=a("li"),EZ=a("strong"),pje=o("albert"),uje=o(" \u2014 "),W9=a("a"),_je=o("AlbertConfig"),bje=o(" (ALBERT model)"),vje=l(),ff=a("li"),CZ=a("strong"),Fje=o("bart"),Tje=o(" \u2014 "),H9=a("a"),Mje=o("BartConfig"),Eje=o(" (BART model)"),Cje=l(),mf=a("li"),wZ=a("strong"),wje=o("beit"),Aje=o(" \u2014 "),U9=a("a"),yje=o("BeitConfig"),Lje=o(" (BEiT model)"),xje=l(),gf=a("li"),AZ=a("strong"),$je=o("bert"),kje=o(" \u2014 "),J9=a("a"),Sje=o("BertConfig"),Rje=o(" (BERT model)"),Bje=l(),hf=a("li"),yZ=a("strong"),Pje=o("bert-generation"),Ije=o(" \u2014 "),Y9=a("a"),qje=o("BertGenerationConfig"),Nje=o(" (Bert Generation model)"),jje=l(),pf=a("li"),LZ=a("strong"),Dje=o("big_bird"),Gje=o(" \u2014 "),K9=a("a"),Oje=o("BigBirdConfig"),Vje=o(" (BigBird model)"),Xje=l(),uf=a("li"),xZ=a("strong"),zje=o("bigbird_pegasus"),Qje=o(" \u2014 "),Z9=a("a"),Wje=o("BigBirdPegasusConfig"),Hje=o(" (BigBirdPegasus model)"),Uje=l(),_f=a("li"),$Z=a("strong"),Jje=o("blenderbot"),Yje=o(" \u2014 "),e$=a("a"),Kje=o("BlenderbotConfig"),Zje=o(" (Blenderbot model)"),eDe=l(),bf=a("li"),kZ=a("strong"),oDe=o("blenderbot-small"),rDe=o(" \u2014 "),o$=a("a"),tDe=o("BlenderbotSmallConfig"),aDe=o(" (BlenderbotSmall model)"),nDe=l(),vf=a("li"),SZ=a("strong"),sDe=o("camembert"),lDe=o(" \u2014 "),r$=a("a"),iDe=o("CamembertConfig"),dDe=o(" (CamemBERT model)"),cDe=l(),Ff=a("li"),RZ=a("strong"),fDe=o("canine"),mDe=o(" \u2014 "),t$=a("a"),gDe=o("CanineConfig"),hDe=o(" (Canine model)"),pDe=l(),Tf=a("li"),BZ=a("strong"),uDe=o("clip"),_De=o(" \u2014 "),a$=a("a"),bDe=o("CLIPConfig"),vDe=o(" (CLIP model)"),FDe=l(),Mf=a("li"),PZ=a("strong"),TDe=o("convbert"),MDe=o(" \u2014 "),n$=a("a"),EDe=o("ConvBertConfig"),CDe=o(" (ConvBERT model)"),wDe=l(),Ef=a("li"),IZ=a("strong"),ADe=o("convnext"),yDe=o(" \u2014 "),s$=a("a"),LDe=o("ConvNextConfig"),xDe=o(" (ConvNext model)"),$De=l(),Cf=a("li"),qZ=a("strong"),kDe=o("ctrl"),SDe=o(" \u2014 "),l$=a("a"),RDe=o("CTRLConfig"),BDe=o(" (CTRL model)"),PDe=l(),wf=a("li"),NZ=a("strong"),IDe=o("data2vec-audio"),qDe=o(" \u2014 "),i$=a("a"),NDe=o("Data2VecAudioConfig"),jDe=o(" (Data2VecAudio model)"),DDe=l(),Af=a("li"),jZ=a("strong"),GDe=o("data2vec-text"),ODe=o(" \u2014 "),d$=a("a"),VDe=o("Data2VecTextConfig"),XDe=o(" (Data2VecText model)"),zDe=l(),yf=a("li"),DZ=a("strong"),QDe=o("data2vec-vision"),WDe=o(" \u2014 "),c$=a("a"),HDe=o("Data2VecVisionConfig"),UDe=o(" (Data2VecVision model)"),JDe=l(),Lf=a("li"),GZ=a("strong"),YDe=o("deberta"),KDe=o(" \u2014 "),f$=a("a"),ZDe=o("DebertaConfig"),eGe=o(" (DeBERTa model)"),oGe=l(),xf=a("li"),OZ=a("strong"),rGe=o("deberta-v2"),tGe=o(" \u2014 "),m$=a("a"),aGe=o("DebertaV2Config"),nGe=o(" (DeBERTa-v2 model)"),sGe=l(),$f=a("li"),VZ=a("strong"),lGe=o("decision_transformer"),iGe=o(" \u2014 "),g$=a("a"),dGe=o("DecisionTransformerConfig"),cGe=o(" (Decision Transformer model)"),fGe=l(),kf=a("li"),XZ=a("strong"),mGe=o("deit"),gGe=o(" \u2014 "),h$=a("a"),hGe=o("DeiTConfig"),pGe=o(" (DeiT model)"),uGe=l(),Sf=a("li"),zZ=a("strong"),_Ge=o("detr"),bGe=o(" \u2014 "),p$=a("a"),vGe=o("DetrConfig"),FGe=o(" (DETR model)"),TGe=l(),Rf=a("li"),QZ=a("strong"),MGe=o("distilbert"),EGe=o(" \u2014 "),u$=a("a"),CGe=o("DistilBertConfig"),wGe=o(" (DistilBERT model)"),AGe=l(),Bf=a("li"),WZ=a("strong"),yGe=o("dpr"),LGe=o(" \u2014 "),_$=a("a"),xGe=o("DPRConfig"),$Ge=o(" (DPR model)"),kGe=l(),Pf=a("li"),HZ=a("strong"),SGe=o("dpt"),RGe=o(" \u2014 "),b$=a("a"),BGe=o("DPTConfig"),PGe=o(" (DPT model)"),IGe=l(),If=a("li"),UZ=a("strong"),qGe=o("electra"),NGe=o(" \u2014 "),v$=a("a"),jGe=o("ElectraConfig"),DGe=o(" (ELECTRA model)"),GGe=l(),qf=a("li"),JZ=a("strong"),OGe=o("encoder-decoder"),VGe=o(" \u2014 "),F$=a("a"),XGe=o("EncoderDecoderConfig"),zGe=o(" (Encoder decoder model)"),QGe=l(),Nf=a("li"),YZ=a("strong"),WGe=o("flaubert"),HGe=o(" \u2014 "),T$=a("a"),UGe=o("FlaubertConfig"),JGe=o(" (FlauBERT model)"),YGe=l(),jf=a("li"),KZ=a("strong"),KGe=o("flava"),ZGe=o(" \u2014 "),M$=a("a"),eOe=o("FlavaConfig"),oOe=o(" (Flava model)"),rOe=l(),Df=a("li"),ZZ=a("strong"),tOe=o("fnet"),aOe=o(" \u2014 "),E$=a("a"),nOe=o("FNetConfig"),sOe=o(" (FNet model)"),lOe=l(),Gf=a("li"),eee=a("strong"),iOe=o("fsmt"),dOe=o(" \u2014 "),C$=a("a"),cOe=o("FSMTConfig"),fOe=o(" (FairSeq Machine-Translation model)"),mOe=l(),Of=a("li"),oee=a("strong"),gOe=o("funnel"),hOe=o(" \u2014 "),w$=a("a"),pOe=o("FunnelConfig"),uOe=o(" (Funnel Transformer model)"),_Oe=l(),Vf=a("li"),ree=a("strong"),bOe=o("glpn"),vOe=o(" \u2014 "),A$=a("a"),FOe=o("GLPNConfig"),TOe=o(" (GLPN model)"),MOe=l(),Xf=a("li"),tee=a("strong"),EOe=o("gpt2"),COe=o(" \u2014 "),y$=a("a"),wOe=o("GPT2Config"),AOe=o(" (OpenAI GPT-2 model)"),yOe=l(),zf=a("li"),aee=a("strong"),LOe=o("gpt_neo"),xOe=o(" \u2014 "),L$=a("a"),$Oe=o("GPTNeoConfig"),kOe=o(" (GPT Neo model)"),SOe=l(),Qf=a("li"),nee=a("strong"),ROe=o("gptj"),BOe=o(" \u2014 "),x$=a("a"),POe=o("GPTJConfig"),IOe=o(" (GPT-J model)"),qOe=l(),Wf=a("li"),see=a("strong"),NOe=o("hubert"),jOe=o(" \u2014 "),$$=a("a"),DOe=o("HubertConfig"),GOe=o(" (Hubert model)"),OOe=l(),Hf=a("li"),lee=a("strong"),VOe=o("ibert"),XOe=o(" \u2014 "),k$=a("a"),zOe=o("IBertConfig"),QOe=o(" (I-BERT model)"),WOe=l(),Uf=a("li"),iee=a("strong"),HOe=o("imagegpt"),UOe=o(" \u2014 "),S$=a("a"),JOe=o("ImageGPTConfig"),YOe=o(" (ImageGPT model)"),KOe=l(),Jf=a("li"),dee=a("strong"),ZOe=o("layoutlm"),eVe=o(" \u2014 "),R$=a("a"),oVe=o("LayoutLMConfig"),rVe=o(" (LayoutLM model)"),tVe=l(),Yf=a("li"),cee=a("strong"),aVe=o("layoutlmv2"),nVe=o(" \u2014 "),B$=a("a"),sVe=o("LayoutLMv2Config"),lVe=o(" (LayoutLMv2 model)"),iVe=l(),Kf=a("li"),fee=a("strong"),dVe=o("led"),cVe=o(" \u2014 "),P$=a("a"),fVe=o("LEDConfig"),mVe=o(" (LED model)"),gVe=l(),Zf=a("li"),mee=a("strong"),hVe=o("longformer"),pVe=o(" \u2014 "),I$=a("a"),uVe=o("LongformerConfig"),_Ve=o(" (Longformer model)"),bVe=l(),em=a("li"),gee=a("strong"),vVe=o("luke"),FVe=o(" \u2014 "),q$=a("a"),TVe=o("LukeConfig"),MVe=o(" (LUKE model)"),EVe=l(),om=a("li"),hee=a("strong"),CVe=o("lxmert"),wVe=o(" \u2014 "),N$=a("a"),AVe=o("LxmertConfig"),yVe=o(" (LXMERT model)"),LVe=l(),rm=a("li"),pee=a("strong"),xVe=o("m2m_100"),$Ve=o(" \u2014 "),j$=a("a"),kVe=o("M2M100Config"),SVe=o(" (M2M100 model)"),RVe=l(),tm=a("li"),uee=a("strong"),BVe=o("marian"),PVe=o(" \u2014 "),D$=a("a"),IVe=o("MarianConfig"),qVe=o(" (Marian model)"),NVe=l(),am=a("li"),_ee=a("strong"),jVe=o("maskformer"),DVe=o(" \u2014 "),G$=a("a"),GVe=o("MaskFormerConfig"),OVe=o(" (MaskFormer model)"),VVe=l(),nm=a("li"),bee=a("strong"),XVe=o("mbart"),zVe=o(" \u2014 "),O$=a("a"),QVe=o("MBartConfig"),WVe=o(" (mBART model)"),HVe=l(),sm=a("li"),vee=a("strong"),UVe=o("megatron-bert"),JVe=o(" \u2014 "),V$=a("a"),YVe=o("MegatronBertConfig"),KVe=o(" (MegatronBert model)"),ZVe=l(),lm=a("li"),Fee=a("strong"),eXe=o("mobilebert"),oXe=o(" \u2014 "),X$=a("a"),rXe=o("MobileBertConfig"),tXe=o(" (MobileBERT model)"),aXe=l(),im=a("li"),Tee=a("strong"),nXe=o("mpnet"),sXe=o(" \u2014 "),z$=a("a"),lXe=o("MPNetConfig"),iXe=o(" (MPNet model)"),dXe=l(),dm=a("li"),Mee=a("strong"),cXe=o("mt5"),fXe=o(" \u2014 "),Q$=a("a"),mXe=o("MT5Config"),gXe=o(" (mT5 model)"),hXe=l(),cm=a("li"),Eee=a("strong"),pXe=o("nystromformer"),uXe=o(" \u2014 "),W$=a("a"),_Xe=o("NystromformerConfig"),bXe=o(" (Nystromformer model)"),vXe=l(),fm=a("li"),Cee=a("strong"),FXe=o("openai-gpt"),TXe=o(" \u2014 "),H$=a("a"),MXe=o("OpenAIGPTConfig"),EXe=o(" (OpenAI GPT model)"),CXe=l(),mm=a("li"),wee=a("strong"),wXe=o("pegasus"),AXe=o(" \u2014 "),U$=a("a"),yXe=o("PegasusConfig"),LXe=o(" (Pegasus model)"),xXe=l(),gm=a("li"),Aee=a("strong"),$Xe=o("perceiver"),kXe=o(" \u2014 "),J$=a("a"),SXe=o("PerceiverConfig"),RXe=o(" (Perceiver model)"),BXe=l(),hm=a("li"),yee=a("strong"),PXe=o("plbart"),IXe=o(" \u2014 "),Y$=a("a"),qXe=o("PLBartConfig"),NXe=o(" (PLBart model)"),jXe=l(),pm=a("li"),Lee=a("strong"),DXe=o("poolformer"),GXe=o(" \u2014 "),K$=a("a"),OXe=o("PoolFormerConfig"),VXe=o(" (PoolFormer model)"),XXe=l(),um=a("li"),xee=a("strong"),zXe=o("prophetnet"),QXe=o(" \u2014 "),Z$=a("a"),WXe=o("ProphetNetConfig"),HXe=o(" (ProphetNet model)"),UXe=l(),_m=a("li"),$ee=a("strong"),JXe=o("qdqbert"),YXe=o(" \u2014 "),ek=a("a"),KXe=o("QDQBertConfig"),ZXe=o(" (QDQBert model)"),eze=l(),bm=a("li"),kee=a("strong"),oze=o("rag"),rze=o(" \u2014 "),ok=a("a"),tze=o("RagConfig"),aze=o(" (RAG model)"),nze=l(),vm=a("li"),See=a("strong"),sze=o("realm"),lze=o(" \u2014 "),rk=a("a"),ize=o("RealmConfig"),dze=o(" (Realm model)"),cze=l(),Fm=a("li"),Ree=a("strong"),fze=o("reformer"),mze=o(" \u2014 "),tk=a("a"),gze=o("ReformerConfig"),hze=o(" (Reformer model)"),pze=l(),Tm=a("li"),Bee=a("strong"),uze=o("regnet"),_ze=o(" \u2014 "),ak=a("a"),bze=o("RegNetConfig"),vze=o(" (RegNet model)"),Fze=l(),Mm=a("li"),Pee=a("strong"),Tze=o("rembert"),Mze=o(" \u2014 "),nk=a("a"),Eze=o("RemBertConfig"),Cze=o(" (RemBERT model)"),wze=l(),Em=a("li"),Iee=a("strong"),Aze=o("resnet"),yze=o(" \u2014 "),sk=a("a"),Lze=o("ResNetConfig"),xze=o(" (ResNet model)"),$ze=l(),Cm=a("li"),qee=a("strong"),kze=o("retribert"),Sze=o(" \u2014 "),lk=a("a"),Rze=o("RetriBertConfig"),Bze=o(" (RetriBERT model)"),Pze=l(),wm=a("li"),Nee=a("strong"),Ize=o("roberta"),qze=o(" \u2014 "),ik=a("a"),Nze=o("RobertaConfig"),jze=o(" (RoBERTa model)"),Dze=l(),Am=a("li"),jee=a("strong"),Gze=o("roformer"),Oze=o(" \u2014 "),dk=a("a"),Vze=o("RoFormerConfig"),Xze=o(" (RoFormer model)"),zze=l(),ym=a("li"),Dee=a("strong"),Qze=o("segformer"),Wze=o(" \u2014 "),ck=a("a"),Hze=o("SegformerConfig"),Uze=o(" (SegFormer model)"),Jze=l(),Lm=a("li"),Gee=a("strong"),Yze=o("sew"),Kze=o(" \u2014 "),fk=a("a"),Zze=o("SEWConfig"),eQe=o(" (SEW model)"),oQe=l(),xm=a("li"),Oee=a("strong"),rQe=o("sew-d"),tQe=o(" \u2014 "),mk=a("a"),aQe=o("SEWDConfig"),nQe=o(" (SEW-D model)"),sQe=l(),$m=a("li"),Vee=a("strong"),lQe=o("speech-encoder-decoder"),iQe=o(" \u2014 "),gk=a("a"),dQe=o("SpeechEncoderDecoderConfig"),cQe=o(" (Speech Encoder decoder model)"),fQe=l(),km=a("li"),Xee=a("strong"),mQe=o("speech_to_text"),gQe=o(" \u2014 "),hk=a("a"),hQe=o("Speech2TextConfig"),pQe=o(" (Speech2Text model)"),uQe=l(),Sm=a("li"),zee=a("strong"),_Qe=o("speech_to_text_2"),bQe=o(" \u2014 "),pk=a("a"),vQe=o("Speech2Text2Config"),FQe=o(" (Speech2Text2 model)"),TQe=l(),Rm=a("li"),Qee=a("strong"),MQe=o("splinter"),EQe=o(" \u2014 "),uk=a("a"),CQe=o("SplinterConfig"),wQe=o(" (Splinter model)"),AQe=l(),Bm=a("li"),Wee=a("strong"),yQe=o("squeezebert"),LQe=o(" \u2014 "),_k=a("a"),xQe=o("SqueezeBertConfig"),$Qe=o(" (SqueezeBERT model)"),kQe=l(),Pm=a("li"),Hee=a("strong"),SQe=o("swin"),RQe=o(" \u2014 "),bk=a("a"),BQe=o("SwinConfig"),PQe=o(" (Swin model)"),IQe=l(),Im=a("li"),Uee=a("strong"),qQe=o("t5"),NQe=o(" \u2014 "),vk=a("a"),jQe=o("T5Config"),DQe=o(" (T5 model)"),GQe=l(),qm=a("li"),Jee=a("strong"),OQe=o("tapas"),VQe=o(" \u2014 "),Fk=a("a"),XQe=o("TapasConfig"),zQe=o(" (TAPAS model)"),QQe=l(),Nm=a("li"),Yee=a("strong"),WQe=o("tapex"),HQe=o(" \u2014 "),Tk=a("a"),UQe=o("BartConfig"),JQe=o(" (TAPEX model)"),YQe=l(),jm=a("li"),Kee=a("strong"),KQe=o("transfo-xl"),ZQe=o(" \u2014 "),Mk=a("a"),eWe=o("TransfoXLConfig"),oWe=o(" (Transformer-XL model)"),rWe=l(),Dm=a("li"),Zee=a("strong"),tWe=o("trocr"),aWe=o(" \u2014 "),Ek=a("a"),nWe=o("TrOCRConfig"),sWe=o(" (TrOCR model)"),lWe=l(),Gm=a("li"),eoe=a("strong"),iWe=o("unispeech"),dWe=o(" \u2014 "),Ck=a("a"),cWe=o("UniSpeechConfig"),fWe=o(" (UniSpeech model)"),mWe=l(),Om=a("li"),ooe=a("strong"),gWe=o("unispeech-sat"),hWe=o(" \u2014 "),wk=a("a"),pWe=o("UniSpeechSatConfig"),uWe=o(" (UniSpeechSat model)"),_We=l(),Vm=a("li"),roe=a("strong"),bWe=o("van"),vWe=o(" \u2014 "),Ak=a("a"),FWe=o("VanConfig"),TWe=o(" (VAN model)"),MWe=l(),Xm=a("li"),toe=a("strong"),EWe=o("vilt"),CWe=o(" \u2014 "),yk=a("a"),wWe=o("ViltConfig"),AWe=o(" (ViLT model)"),yWe=l(),zm=a("li"),aoe=a("strong"),LWe=o("vision-encoder-decoder"),xWe=o(" \u2014 "),Lk=a("a"),$We=o("VisionEncoderDecoderConfig"),kWe=o(" (Vision Encoder decoder model)"),SWe=l(),Qm=a("li"),noe=a("strong"),RWe=o("vision-text-dual-encoder"),BWe=o(" \u2014 "),xk=a("a"),PWe=o("VisionTextDualEncoderConfig"),IWe=o(" (VisionTextDualEncoder model)"),qWe=l(),Wm=a("li"),soe=a("strong"),NWe=o("visual_bert"),jWe=o(" \u2014 "),$k=a("a"),DWe=o("VisualBertConfig"),GWe=o(" (VisualBert model)"),OWe=l(),Hm=a("li"),loe=a("strong"),VWe=o("vit"),XWe=o(" \u2014 "),kk=a("a"),zWe=o("ViTConfig"),QWe=o(" (ViT model)"),WWe=l(),Um=a("li"),ioe=a("strong"),HWe=o("vit_mae"),UWe=o(" \u2014 "),Sk=a("a"),JWe=o("ViTMAEConfig"),YWe=o(" (ViTMAE model)"),KWe=l(),Jm=a("li"),doe=a("strong"),ZWe=o("wav2vec2"),eHe=o(" \u2014 "),Rk=a("a"),oHe=o("Wav2Vec2Config"),rHe=o(" (Wav2Vec2 model)"),tHe=l(),Ym=a("li"),coe=a("strong"),aHe=o("wavlm"),nHe=o(" \u2014 "),Bk=a("a"),sHe=o("WavLMConfig"),lHe=o(" (WavLM model)"),iHe=l(),Km=a("li"),foe=a("strong"),dHe=o("xglm"),cHe=o(" \u2014 "),Pk=a("a"),fHe=o("XGLMConfig"),mHe=o(" (XGLM model)"),gHe=l(),Zm=a("li"),moe=a("strong"),hHe=o("xlm"),pHe=o(" \u2014 "),Ik=a("a"),uHe=o("XLMConfig"),_He=o(" (XLM model)"),bHe=l(),eg=a("li"),goe=a("strong"),vHe=o("xlm-prophetnet"),FHe=o(" \u2014 "),qk=a("a"),THe=o("XLMProphetNetConfig"),MHe=o(" (XLMProphetNet model)"),EHe=l(),og=a("li"),hoe=a("strong"),CHe=o("xlm-roberta"),wHe=o(" \u2014 "),Nk=a("a"),AHe=o("XLMRobertaConfig"),yHe=o(" (XLM-RoBERTa model)"),LHe=l(),rg=a("li"),poe=a("strong"),xHe=o("xlm-roberta-xl"),$He=o(" \u2014 "),jk=a("a"),kHe=o("XLMRobertaXLConfig"),SHe=o(" (XLM-RoBERTa-XL model)"),RHe=l(),tg=a("li"),uoe=a("strong"),BHe=o("xlnet"),PHe=o(" \u2014 "),Dk=a("a"),IHe=o("XLNetConfig"),qHe=o(" (XLNet model)"),NHe=l(),ag=a("li"),_oe=a("strong"),jHe=o("yolos"),DHe=o(" \u2014 "),Gk=a("a"),GHe=o("YolosConfig"),OHe=o(" (YOLOS model)"),VHe=l(),ng=a("li"),boe=a("strong"),XHe=o("yoso"),zHe=o(" \u2014 "),Ok=a("a"),QHe=o("YosoConfig"),WHe=o(" (YOSO model)"),HHe=l(),F(sg.$$.fragment),UHe=l(),lg=a("div"),F(I0.$$.fragment),JHe=l(),voe=a("p"),YHe=o("Register a new configuration for this class."),GBe=l(),fi=a("h2"),ig=a("a"),Foe=a("span"),F(q0.$$.fragment),KHe=l(),Toe=a("span"),ZHe=o("AutoTokenizer"),OBe=l(),wo=a("div"),F(N0.$$.fragment),eUe=l(),j0=a("p"),oUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Vk=a("a"),rUe=o("AutoTokenizer.from_pretrained()"),tUe=o(" class method."),aUe=l(),D0=a("p"),nUe=o("This class cannot be instantiated directly using "),Moe=a("code"),sUe=o("__init__()"),lUe=o(" (throws an error)."),iUe=l(),Er=a("div"),F(G0.$$.fragment),dUe=l(),Eoe=a("p"),cUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fUe=l(),Ta=a("p"),mUe=o("The tokenizer class to instantiate is selected based on the "),Coe=a("code"),gUe=o("model_type"),hUe=o(` property of the config object (either
passed as an argument or loaded from `),woe=a("code"),pUe=o("pretrained_model_name_or_path"),uUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=a("code"),_Ue=o("pretrained_model_name_or_path"),bUe=o(":"),vUe=l(),k=a("ul"),yn=a("li"),yoe=a("strong"),FUe=o("albert"),TUe=o(" \u2014 "),Xk=a("a"),MUe=o("AlbertTokenizer"),EUe=o(" or "),zk=a("a"),CUe=o("AlbertTokenizerFast"),wUe=o(" (ALBERT model)"),AUe=l(),Ln=a("li"),Loe=a("strong"),yUe=o("bart"),LUe=o(" \u2014 "),Qk=a("a"),xUe=o("BartTokenizer"),$Ue=o(" or "),Wk=a("a"),kUe=o("BartTokenizerFast"),SUe=o(" (BART model)"),RUe=l(),xn=a("li"),xoe=a("strong"),BUe=o("barthez"),PUe=o(" \u2014 "),Hk=a("a"),IUe=o("BarthezTokenizer"),qUe=o(" or "),Uk=a("a"),NUe=o("BarthezTokenizerFast"),jUe=o(" (BARThez model)"),DUe=l(),dg=a("li"),$oe=a("strong"),GUe=o("bartpho"),OUe=o(" \u2014 "),Jk=a("a"),VUe=o("BartphoTokenizer"),XUe=o(" (BARTpho model)"),zUe=l(),$n=a("li"),koe=a("strong"),QUe=o("bert"),WUe=o(" \u2014 "),Yk=a("a"),HUe=o("BertTokenizer"),UUe=o(" or "),Kk=a("a"),JUe=o("BertTokenizerFast"),YUe=o(" (BERT model)"),KUe=l(),cg=a("li"),Soe=a("strong"),ZUe=o("bert-generation"),eJe=o(" \u2014 "),Zk=a("a"),oJe=o("BertGenerationTokenizer"),rJe=o(" (Bert Generation model)"),tJe=l(),fg=a("li"),Roe=a("strong"),aJe=o("bert-japanese"),nJe=o(" \u2014 "),eS=a("a"),sJe=o("BertJapaneseTokenizer"),lJe=o(" (BertJapanese model)"),iJe=l(),mg=a("li"),Boe=a("strong"),dJe=o("bertweet"),cJe=o(" \u2014 "),oS=a("a"),fJe=o("BertweetTokenizer"),mJe=o(" (Bertweet model)"),gJe=l(),kn=a("li"),Poe=a("strong"),hJe=o("big_bird"),pJe=o(" \u2014 "),rS=a("a"),uJe=o("BigBirdTokenizer"),_Je=o(" or "),tS=a("a"),bJe=o("BigBirdTokenizerFast"),vJe=o(" (BigBird model)"),FJe=l(),Sn=a("li"),Ioe=a("strong"),TJe=o("bigbird_pegasus"),MJe=o(" \u2014 "),aS=a("a"),EJe=o("PegasusTokenizer"),CJe=o(" or "),nS=a("a"),wJe=o("PegasusTokenizerFast"),AJe=o(" (BigBirdPegasus model)"),yJe=l(),Rn=a("li"),qoe=a("strong"),LJe=o("blenderbot"),xJe=o(" \u2014 "),sS=a("a"),$Je=o("BlenderbotTokenizer"),kJe=o(" or "),lS=a("a"),SJe=o("BlenderbotTokenizerFast"),RJe=o(" (Blenderbot model)"),BJe=l(),gg=a("li"),Noe=a("strong"),PJe=o("blenderbot-small"),IJe=o(" \u2014 "),iS=a("a"),qJe=o("BlenderbotSmallTokenizer"),NJe=o(" (BlenderbotSmall model)"),jJe=l(),hg=a("li"),joe=a("strong"),DJe=o("byt5"),GJe=o(" \u2014 "),dS=a("a"),OJe=o("ByT5Tokenizer"),VJe=o(" (ByT5 model)"),XJe=l(),Bn=a("li"),Doe=a("strong"),zJe=o("camembert"),QJe=o(" \u2014 "),cS=a("a"),WJe=o("CamembertTokenizer"),HJe=o(" or "),fS=a("a"),UJe=o("CamembertTokenizerFast"),JJe=o(" (CamemBERT model)"),YJe=l(),pg=a("li"),Goe=a("strong"),KJe=o("canine"),ZJe=o(" \u2014 "),mS=a("a"),eYe=o("CanineTokenizer"),oYe=o(" (Canine model)"),rYe=l(),Pn=a("li"),Ooe=a("strong"),tYe=o("clip"),aYe=o(" \u2014 "),gS=a("a"),nYe=o("CLIPTokenizer"),sYe=o(" or "),hS=a("a"),lYe=o("CLIPTokenizerFast"),iYe=o(" (CLIP model)"),dYe=l(),In=a("li"),Voe=a("strong"),cYe=o("convbert"),fYe=o(" \u2014 "),pS=a("a"),mYe=o("ConvBertTokenizer"),gYe=o(" or "),uS=a("a"),hYe=o("ConvBertTokenizerFast"),pYe=o(" (ConvBERT model)"),uYe=l(),qn=a("li"),Xoe=a("strong"),_Ye=o("cpm"),bYe=o(" \u2014 "),_S=a("a"),vYe=o("CpmTokenizer"),FYe=o(" or "),bS=a("a"),TYe=o("CpmTokenizerFast"),MYe=o(" (CPM model)"),EYe=l(),ug=a("li"),zoe=a("strong"),CYe=o("ctrl"),wYe=o(" \u2014 "),vS=a("a"),AYe=o("CTRLTokenizer"),yYe=o(" (CTRL model)"),LYe=l(),Nn=a("li"),Qoe=a("strong"),xYe=o("data2vec-text"),$Ye=o(" \u2014 "),FS=a("a"),kYe=o("RobertaTokenizer"),SYe=o(" or "),TS=a("a"),RYe=o("RobertaTokenizerFast"),BYe=o(" (Data2VecText model)"),PYe=l(),jn=a("li"),Woe=a("strong"),IYe=o("deberta"),qYe=o(" \u2014 "),MS=a("a"),NYe=o("DebertaTokenizer"),jYe=o(" or "),ES=a("a"),DYe=o("DebertaTokenizerFast"),GYe=o(" (DeBERTa model)"),OYe=l(),Dn=a("li"),Hoe=a("strong"),VYe=o("deberta-v2"),XYe=o(" \u2014 "),CS=a("a"),zYe=o("DebertaV2Tokenizer"),QYe=o(" or "),wS=a("a"),WYe=o("DebertaV2TokenizerFast"),HYe=o(" (DeBERTa-v2 model)"),UYe=l(),Gn=a("li"),Uoe=a("strong"),JYe=o("distilbert"),YYe=o(" \u2014 "),AS=a("a"),KYe=o("DistilBertTokenizer"),ZYe=o(" or "),yS=a("a"),eKe=o("DistilBertTokenizerFast"),oKe=o(" (DistilBERT model)"),rKe=l(),On=a("li"),Joe=a("strong"),tKe=o("dpr"),aKe=o(" \u2014 "),LS=a("a"),nKe=o("DPRQuestionEncoderTokenizer"),sKe=o(" or "),xS=a("a"),lKe=o("DPRQuestionEncoderTokenizerFast"),iKe=o(" (DPR model)"),dKe=l(),Vn=a("li"),Yoe=a("strong"),cKe=o("electra"),fKe=o(" \u2014 "),$S=a("a"),mKe=o("ElectraTokenizer"),gKe=o(" or "),kS=a("a"),hKe=o("ElectraTokenizerFast"),pKe=o(" (ELECTRA model)"),uKe=l(),_g=a("li"),Koe=a("strong"),_Ke=o("flaubert"),bKe=o(" \u2014 "),SS=a("a"),vKe=o("FlaubertTokenizer"),FKe=o(" (FlauBERT model)"),TKe=l(),Xn=a("li"),Zoe=a("strong"),MKe=o("fnet"),EKe=o(" \u2014 "),RS=a("a"),CKe=o("FNetTokenizer"),wKe=o(" or "),BS=a("a"),AKe=o("FNetTokenizerFast"),yKe=o(" (FNet model)"),LKe=l(),bg=a("li"),ere=a("strong"),xKe=o("fsmt"),$Ke=o(" \u2014 "),PS=a("a"),kKe=o("FSMTTokenizer"),SKe=o(" (FairSeq Machine-Translation model)"),RKe=l(),zn=a("li"),ore=a("strong"),BKe=o("funnel"),PKe=o(" \u2014 "),IS=a("a"),IKe=o("FunnelTokenizer"),qKe=o(" or "),qS=a("a"),NKe=o("FunnelTokenizerFast"),jKe=o(" (Funnel Transformer model)"),DKe=l(),Qn=a("li"),rre=a("strong"),GKe=o("gpt2"),OKe=o(" \u2014 "),NS=a("a"),VKe=o("GPT2Tokenizer"),XKe=o(" or "),jS=a("a"),zKe=o("GPT2TokenizerFast"),QKe=o(" (OpenAI GPT-2 model)"),WKe=l(),Wn=a("li"),tre=a("strong"),HKe=o("gpt_neo"),UKe=o(" \u2014 "),DS=a("a"),JKe=o("GPT2Tokenizer"),YKe=o(" or "),GS=a("a"),KKe=o("GPT2TokenizerFast"),ZKe=o(" (GPT Neo model)"),eZe=l(),Hn=a("li"),are=a("strong"),oZe=o("gptj"),rZe=o(" \u2014 "),OS=a("a"),tZe=o("GPT2Tokenizer"),aZe=o(" or "),VS=a("a"),nZe=o("GPT2TokenizerFast"),sZe=o(" (GPT-J model)"),lZe=l(),Un=a("li"),nre=a("strong"),iZe=o("herbert"),dZe=o(" \u2014 "),XS=a("a"),cZe=o("HerbertTokenizer"),fZe=o(" or "),zS=a("a"),mZe=o("HerbertTokenizerFast"),gZe=o(" (HerBERT model)"),hZe=l(),vg=a("li"),sre=a("strong"),pZe=o("hubert"),uZe=o(" \u2014 "),QS=a("a"),_Ze=o("Wav2Vec2CTCTokenizer"),bZe=o(" (Hubert model)"),vZe=l(),Jn=a("li"),lre=a("strong"),FZe=o("ibert"),TZe=o(" \u2014 "),WS=a("a"),MZe=o("RobertaTokenizer"),EZe=o(" or "),HS=a("a"),CZe=o("RobertaTokenizerFast"),wZe=o(" (I-BERT model)"),AZe=l(),Yn=a("li"),ire=a("strong"),yZe=o("layoutlm"),LZe=o(" \u2014 "),US=a("a"),xZe=o("LayoutLMTokenizer"),$Ze=o(" or "),JS=a("a"),kZe=o("LayoutLMTokenizerFast"),SZe=o(" (LayoutLM model)"),RZe=l(),Kn=a("li"),dre=a("strong"),BZe=o("layoutlmv2"),PZe=o(" \u2014 "),YS=a("a"),IZe=o("LayoutLMv2Tokenizer"),qZe=o(" or "),KS=a("a"),NZe=o("LayoutLMv2TokenizerFast"),jZe=o(" (LayoutLMv2 model)"),DZe=l(),Zn=a("li"),cre=a("strong"),GZe=o("layoutxlm"),OZe=o(" \u2014 "),ZS=a("a"),VZe=o("LayoutXLMTokenizer"),XZe=o(" or "),eR=a("a"),zZe=o("LayoutXLMTokenizerFast"),QZe=o(" (LayoutXLM model)"),WZe=l(),es=a("li"),fre=a("strong"),HZe=o("led"),UZe=o(" \u2014 "),oR=a("a"),JZe=o("LEDTokenizer"),YZe=o(" or "),rR=a("a"),KZe=o("LEDTokenizerFast"),ZZe=o(" (LED model)"),eeo=l(),os=a("li"),mre=a("strong"),oeo=o("longformer"),reo=o(" \u2014 "),tR=a("a"),teo=o("LongformerTokenizer"),aeo=o(" or "),aR=a("a"),neo=o("LongformerTokenizerFast"),seo=o(" (Longformer model)"),leo=l(),Fg=a("li"),gre=a("strong"),ieo=o("luke"),deo=o(" \u2014 "),nR=a("a"),ceo=o("LukeTokenizer"),feo=o(" (LUKE model)"),meo=l(),rs=a("li"),hre=a("strong"),geo=o("lxmert"),heo=o(" \u2014 "),sR=a("a"),peo=o("LxmertTokenizer"),ueo=o(" or "),lR=a("a"),_eo=o("LxmertTokenizerFast"),beo=o(" (LXMERT model)"),veo=l(),Tg=a("li"),pre=a("strong"),Feo=o("m2m_100"),Teo=o(" \u2014 "),iR=a("a"),Meo=o("M2M100Tokenizer"),Eeo=o(" (M2M100 model)"),Ceo=l(),Mg=a("li"),ure=a("strong"),weo=o("marian"),Aeo=o(" \u2014 "),dR=a("a"),yeo=o("MarianTokenizer"),Leo=o(" (Marian model)"),xeo=l(),ts=a("li"),_re=a("strong"),$eo=o("mbart"),keo=o(" \u2014 "),cR=a("a"),Seo=o("MBartTokenizer"),Reo=o(" or "),fR=a("a"),Beo=o("MBartTokenizerFast"),Peo=o(" (mBART model)"),Ieo=l(),as=a("li"),bre=a("strong"),qeo=o("mbart50"),Neo=o(" \u2014 "),mR=a("a"),jeo=o("MBart50Tokenizer"),Deo=o(" or "),gR=a("a"),Geo=o("MBart50TokenizerFast"),Oeo=o(" (mBART-50 model)"),Veo=l(),ns=a("li"),vre=a("strong"),Xeo=o("megatron-bert"),zeo=o(" \u2014 "),hR=a("a"),Qeo=o("BertTokenizer"),Weo=o(" or "),pR=a("a"),Heo=o("BertTokenizerFast"),Ueo=o(" (MegatronBert model)"),Jeo=l(),Eg=a("li"),Fre=a("strong"),Yeo=o("mluke"),Keo=o(" \u2014 "),uR=a("a"),Zeo=o("MLukeTokenizer"),eoo=o(" (mLUKE model)"),ooo=l(),ss=a("li"),Tre=a("strong"),roo=o("mobilebert"),too=o(" \u2014 "),_R=a("a"),aoo=o("MobileBertTokenizer"),noo=o(" or "),bR=a("a"),soo=o("MobileBertTokenizerFast"),loo=o(" (MobileBERT model)"),ioo=l(),ls=a("li"),Mre=a("strong"),doo=o("mpnet"),coo=o(" \u2014 "),vR=a("a"),foo=o("MPNetTokenizer"),moo=o(" or "),FR=a("a"),goo=o("MPNetTokenizerFast"),hoo=o(" (MPNet model)"),poo=l(),is=a("li"),Ere=a("strong"),uoo=o("mt5"),_oo=o(" \u2014 "),TR=a("a"),boo=o("MT5Tokenizer"),voo=o(" or "),MR=a("a"),Foo=o("MT5TokenizerFast"),Too=o(" (mT5 model)"),Moo=l(),ds=a("li"),Cre=a("strong"),Eoo=o("nystromformer"),Coo=o(" \u2014 "),ER=a("a"),woo=o("AlbertTokenizer"),Aoo=o(" or "),CR=a("a"),yoo=o("AlbertTokenizerFast"),Loo=o(" (Nystromformer model)"),xoo=l(),cs=a("li"),wre=a("strong"),$oo=o("openai-gpt"),koo=o(" \u2014 "),wR=a("a"),Soo=o("OpenAIGPTTokenizer"),Roo=o(" or "),AR=a("a"),Boo=o("OpenAIGPTTokenizerFast"),Poo=o(" (OpenAI GPT model)"),Ioo=l(),fs=a("li"),Are=a("strong"),qoo=o("pegasus"),Noo=o(" \u2014 "),yR=a("a"),joo=o("PegasusTokenizer"),Doo=o(" or "),LR=a("a"),Goo=o("PegasusTokenizerFast"),Ooo=o(" (Pegasus model)"),Voo=l(),Cg=a("li"),yre=a("strong"),Xoo=o("perceiver"),zoo=o(" \u2014 "),xR=a("a"),Qoo=o("PerceiverTokenizer"),Woo=o(" (Perceiver model)"),Hoo=l(),wg=a("li"),Lre=a("strong"),Uoo=o("phobert"),Joo=o(" \u2014 "),$R=a("a"),Yoo=o("PhobertTokenizer"),Koo=o(" (PhoBERT model)"),Zoo=l(),Ag=a("li"),xre=a("strong"),ero=o("plbart"),oro=o(" \u2014 "),kR=a("a"),rro=o("PLBartTokenizer"),tro=o(" (PLBart model)"),aro=l(),yg=a("li"),$re=a("strong"),nro=o("prophetnet"),sro=o(" \u2014 "),SR=a("a"),lro=o("ProphetNetTokenizer"),iro=o(" (ProphetNet model)"),dro=l(),ms=a("li"),kre=a("strong"),cro=o("qdqbert"),fro=o(" \u2014 "),RR=a("a"),mro=o("BertTokenizer"),gro=o(" or "),BR=a("a"),hro=o("BertTokenizerFast"),pro=o(" (QDQBert model)"),uro=l(),Lg=a("li"),Sre=a("strong"),_ro=o("rag"),bro=o(" \u2014 "),PR=a("a"),vro=o("RagTokenizer"),Fro=o(" (RAG model)"),Tro=l(),gs=a("li"),Rre=a("strong"),Mro=o("realm"),Ero=o(" \u2014 "),IR=a("a"),Cro=o("RealmTokenizer"),wro=o(" or "),qR=a("a"),Aro=o("RealmTokenizerFast"),yro=o(" (Realm model)"),Lro=l(),hs=a("li"),Bre=a("strong"),xro=o("reformer"),$ro=o(" \u2014 "),NR=a("a"),kro=o("ReformerTokenizer"),Sro=o(" or "),jR=a("a"),Rro=o("ReformerTokenizerFast"),Bro=o(" (Reformer model)"),Pro=l(),ps=a("li"),Pre=a("strong"),Iro=o("rembert"),qro=o(" \u2014 "),DR=a("a"),Nro=o("RemBertTokenizer"),jro=o(" or "),GR=a("a"),Dro=o("RemBertTokenizerFast"),Gro=o(" (RemBERT model)"),Oro=l(),us=a("li"),Ire=a("strong"),Vro=o("retribert"),Xro=o(" \u2014 "),OR=a("a"),zro=o("RetriBertTokenizer"),Qro=o(" or "),VR=a("a"),Wro=o("RetriBertTokenizerFast"),Hro=o(" (RetriBERT model)"),Uro=l(),_s=a("li"),qre=a("strong"),Jro=o("roberta"),Yro=o(" \u2014 "),XR=a("a"),Kro=o("RobertaTokenizer"),Zro=o(" or "),zR=a("a"),eto=o("RobertaTokenizerFast"),oto=o(" (RoBERTa model)"),rto=l(),bs=a("li"),Nre=a("strong"),tto=o("roformer"),ato=o(" \u2014 "),QR=a("a"),nto=o("RoFormerTokenizer"),sto=o(" or "),WR=a("a"),lto=o("RoFormerTokenizerFast"),ito=o(" (RoFormer model)"),dto=l(),xg=a("li"),jre=a("strong"),cto=o("speech_to_text"),fto=o(" \u2014 "),HR=a("a"),mto=o("Speech2TextTokenizer"),gto=o(" (Speech2Text model)"),hto=l(),$g=a("li"),Dre=a("strong"),pto=o("speech_to_text_2"),uto=o(" \u2014 "),UR=a("a"),_to=o("Speech2Text2Tokenizer"),bto=o(" (Speech2Text2 model)"),vto=l(),vs=a("li"),Gre=a("strong"),Fto=o("splinter"),Tto=o(" \u2014 "),JR=a("a"),Mto=o("SplinterTokenizer"),Eto=o(" or "),YR=a("a"),Cto=o("SplinterTokenizerFast"),wto=o(" (Splinter model)"),Ato=l(),Fs=a("li"),Ore=a("strong"),yto=o("squeezebert"),Lto=o(" \u2014 "),KR=a("a"),xto=o("SqueezeBertTokenizer"),$to=o(" or "),ZR=a("a"),kto=o("SqueezeBertTokenizerFast"),Sto=o(" (SqueezeBERT model)"),Rto=l(),Ts=a("li"),Vre=a("strong"),Bto=o("t5"),Pto=o(" \u2014 "),eB=a("a"),Ito=o("T5Tokenizer"),qto=o(" or "),oB=a("a"),Nto=o("T5TokenizerFast"),jto=o(" (T5 model)"),Dto=l(),kg=a("li"),Xre=a("strong"),Gto=o("tapas"),Oto=o(" \u2014 "),rB=a("a"),Vto=o("TapasTokenizer"),Xto=o(" (TAPAS model)"),zto=l(),Sg=a("li"),zre=a("strong"),Qto=o("tapex"),Wto=o(" \u2014 "),tB=a("a"),Hto=o("TapexTokenizer"),Uto=o(" (TAPEX model)"),Jto=l(),Rg=a("li"),Qre=a("strong"),Yto=o("transfo-xl"),Kto=o(" \u2014 "),aB=a("a"),Zto=o("TransfoXLTokenizer"),eao=o(" (Transformer-XL model)"),oao=l(),Ms=a("li"),Wre=a("strong"),rao=o("visual_bert"),tao=o(" \u2014 "),nB=a("a"),aao=o("BertTokenizer"),nao=o(" or "),sB=a("a"),sao=o("BertTokenizerFast"),lao=o(" (VisualBert model)"),iao=l(),Bg=a("li"),Hre=a("strong"),dao=o("wav2vec2"),cao=o(" \u2014 "),lB=a("a"),fao=o("Wav2Vec2CTCTokenizer"),mao=o(" (Wav2Vec2 model)"),gao=l(),Pg=a("li"),Ure=a("strong"),hao=o("wav2vec2_phoneme"),pao=o(" \u2014 "),iB=a("a"),uao=o("Wav2Vec2PhonemeCTCTokenizer"),_ao=o(" (Wav2Vec2Phoneme model)"),bao=l(),Es=a("li"),Jre=a("strong"),vao=o("xglm"),Fao=o(" \u2014 "),dB=a("a"),Tao=o("XGLMTokenizer"),Mao=o(" or "),cB=a("a"),Eao=o("XGLMTokenizerFast"),Cao=o(" (XGLM model)"),wao=l(),Ig=a("li"),Yre=a("strong"),Aao=o("xlm"),yao=o(" \u2014 "),fB=a("a"),Lao=o("XLMTokenizer"),xao=o(" (XLM model)"),$ao=l(),qg=a("li"),Kre=a("strong"),kao=o("xlm-prophetnet"),Sao=o(" \u2014 "),mB=a("a"),Rao=o("XLMProphetNetTokenizer"),Bao=o(" (XLMProphetNet model)"),Pao=l(),Cs=a("li"),Zre=a("strong"),Iao=o("xlm-roberta"),qao=o(" \u2014 "),gB=a("a"),Nao=o("XLMRobertaTokenizer"),jao=o(" or "),hB=a("a"),Dao=o("XLMRobertaTokenizerFast"),Gao=o(" (XLM-RoBERTa model)"),Oao=l(),ws=a("li"),ete=a("strong"),Vao=o("xlm-roberta-xl"),Xao=o(" \u2014 "),pB=a("a"),zao=o("RobertaTokenizer"),Qao=o(" or "),uB=a("a"),Wao=o("RobertaTokenizerFast"),Hao=o(" (XLM-RoBERTa-XL model)"),Uao=l(),As=a("li"),ote=a("strong"),Jao=o("xlnet"),Yao=o(" \u2014 "),_B=a("a"),Kao=o("XLNetTokenizer"),Zao=o(" or "),bB=a("a"),eno=o("XLNetTokenizerFast"),ono=o(" (XLNet model)"),rno=l(),ys=a("li"),rte=a("strong"),tno=o("yoso"),ano=o(" \u2014 "),vB=a("a"),nno=o("AlbertTokenizer"),sno=o(" or "),FB=a("a"),lno=o("AlbertTokenizerFast"),ino=o(" (YOSO model)"),dno=l(),F(Ng.$$.fragment),cno=l(),jg=a("div"),F(O0.$$.fragment),fno=l(),tte=a("p"),mno=o("Register a new tokenizer in this mapping."),VBe=l(),mi=a("h2"),Dg=a("a"),ate=a("span"),F(V0.$$.fragment),gno=l(),nte=a("span"),hno=o("AutoFeatureExtractor"),XBe=l(),Ao=a("div"),F(X0.$$.fragment),pno=l(),z0=a("p"),uno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TB=a("a"),_no=o("AutoFeatureExtractor.from_pretrained()"),bno=o(" class method."),vno=l(),Q0=a("p"),Fno=o("This class cannot be instantiated directly using "),ste=a("code"),Tno=o("__init__()"),Mno=o(" (throws an error)."),Eno=l(),Qe=a("div"),F(W0.$$.fragment),Cno=l(),lte=a("p"),wno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ano=l(),Ma=a("p"),yno=o("The feature extractor class to instantiate is selected based on the "),ite=a("code"),Lno=o("model_type"),xno=o(` property of the config object
(either passed as an argument or loaded from `),dte=a("code"),$no=o("pretrained_model_name_or_path"),kno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cte=a("code"),Sno=o("pretrained_model_name_or_path"),Rno=o(":"),Bno=l(),oe=a("ul"),Gg=a("li"),fte=a("strong"),Pno=o("beit"),Ino=o(" \u2014 "),MB=a("a"),qno=o("BeitFeatureExtractor"),Nno=o(" (BEiT model)"),jno=l(),Og=a("li"),mte=a("strong"),Dno=o("clip"),Gno=o(" \u2014 "),EB=a("a"),Ono=o("CLIPFeatureExtractor"),Vno=o(" (CLIP model)"),Xno=l(),Vg=a("li"),gte=a("strong"),zno=o("convnext"),Qno=o(" \u2014 "),CB=a("a"),Wno=o("ConvNextFeatureExtractor"),Hno=o(" (ConvNext model)"),Uno=l(),Xg=a("li"),hte=a("strong"),Jno=o("data2vec-audio"),Yno=o(" \u2014 "),wB=a("a"),Kno=o("Wav2Vec2FeatureExtractor"),Zno=o(" (Data2VecAudio model)"),eso=l(),zg=a("li"),pte=a("strong"),oso=o("data2vec-vision"),rso=o(" \u2014 "),AB=a("a"),tso=o("BeitFeatureExtractor"),aso=o(" (Data2VecVision model)"),nso=l(),Qg=a("li"),ute=a("strong"),sso=o("deit"),lso=o(" \u2014 "),yB=a("a"),iso=o("DeiTFeatureExtractor"),dso=o(" (DeiT model)"),cso=l(),Wg=a("li"),_te=a("strong"),fso=o("detr"),mso=o(" \u2014 "),LB=a("a"),gso=o("DetrFeatureExtractor"),hso=o(" (DETR model)"),pso=l(),Hg=a("li"),bte=a("strong"),uso=o("dpt"),_so=o(" \u2014 "),xB=a("a"),bso=o("DPTFeatureExtractor"),vso=o(" (DPT model)"),Fso=l(),Ug=a("li"),vte=a("strong"),Tso=o("flava"),Mso=o(" \u2014 "),Fte=a("code"),Eso=o("FLAVAFeatureExtractor"),Cso=o(" (Flava model)"),wso=l(),Jg=a("li"),Tte=a("strong"),Aso=o("glpn"),yso=o(" \u2014 "),$B=a("a"),Lso=o("GLPNFeatureExtractor"),xso=o(" (GLPN model)"),$so=l(),Yg=a("li"),Mte=a("strong"),kso=o("hubert"),Sso=o(" \u2014 "),kB=a("a"),Rso=o("Wav2Vec2FeatureExtractor"),Bso=o(" (Hubert model)"),Pso=l(),Kg=a("li"),Ete=a("strong"),Iso=o("layoutlmv2"),qso=o(" \u2014 "),SB=a("a"),Nso=o("LayoutLMv2FeatureExtractor"),jso=o(" (LayoutLMv2 model)"),Dso=l(),Zg=a("li"),Cte=a("strong"),Gso=o("maskformer"),Oso=o(" \u2014 "),RB=a("a"),Vso=o("MaskFormerFeatureExtractor"),Xso=o(" (MaskFormer model)"),zso=l(),eh=a("li"),wte=a("strong"),Qso=o("perceiver"),Wso=o(" \u2014 "),BB=a("a"),Hso=o("PerceiverFeatureExtractor"),Uso=o(" (Perceiver model)"),Jso=l(),oh=a("li"),Ate=a("strong"),Yso=o("poolformer"),Kso=o(" \u2014 "),PB=a("a"),Zso=o("PoolFormerFeatureExtractor"),elo=o(" (PoolFormer model)"),olo=l(),rh=a("li"),yte=a("strong"),rlo=o("regnet"),tlo=o(" \u2014 "),IB=a("a"),alo=o("ConvNextFeatureExtractor"),nlo=o(" (RegNet model)"),slo=l(),th=a("li"),Lte=a("strong"),llo=o("resnet"),ilo=o(" \u2014 "),qB=a("a"),dlo=o("ConvNextFeatureExtractor"),clo=o(" (ResNet model)"),flo=l(),ah=a("li"),xte=a("strong"),mlo=o("segformer"),glo=o(" \u2014 "),NB=a("a"),hlo=o("SegformerFeatureExtractor"),plo=o(" (SegFormer model)"),ulo=l(),nh=a("li"),$te=a("strong"),_lo=o("speech_to_text"),blo=o(" \u2014 "),jB=a("a"),vlo=o("Speech2TextFeatureExtractor"),Flo=o(" (Speech2Text model)"),Tlo=l(),sh=a("li"),kte=a("strong"),Mlo=o("swin"),Elo=o(" \u2014 "),DB=a("a"),Clo=o("ViTFeatureExtractor"),wlo=o(" (Swin model)"),Alo=l(),lh=a("li"),Ste=a("strong"),ylo=o("van"),Llo=o(" \u2014 "),GB=a("a"),xlo=o("ConvNextFeatureExtractor"),$lo=o(" (VAN model)"),klo=l(),ih=a("li"),Rte=a("strong"),Slo=o("vit"),Rlo=o(" \u2014 "),OB=a("a"),Blo=o("ViTFeatureExtractor"),Plo=o(" (ViT model)"),Ilo=l(),dh=a("li"),Bte=a("strong"),qlo=o("vit_mae"),Nlo=o(" \u2014 "),VB=a("a"),jlo=o("ViTFeatureExtractor"),Dlo=o(" (ViTMAE model)"),Glo=l(),ch=a("li"),Pte=a("strong"),Olo=o("wav2vec2"),Vlo=o(" \u2014 "),XB=a("a"),Xlo=o("Wav2Vec2FeatureExtractor"),zlo=o(" (Wav2Vec2 model)"),Qlo=l(),fh=a("li"),Ite=a("strong"),Wlo=o("yolos"),Hlo=o(" \u2014 "),zB=a("a"),Ulo=o("YolosFeatureExtractor"),Jlo=o(" (YOLOS model)"),Ylo=l(),F(mh.$$.fragment),Klo=l(),F(gh.$$.fragment),Zlo=l(),hh=a("div"),F(H0.$$.fragment),eio=l(),qte=a("p"),oio=o("Register a new feature extractor for this class."),zBe=l(),gi=a("h2"),ph=a("a"),Nte=a("span"),F(U0.$$.fragment),rio=l(),jte=a("span"),tio=o("AutoProcessor"),QBe=l(),yo=a("div"),F(J0.$$.fragment),aio=l(),Y0=a("p"),nio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=a("a"),sio=o("AutoProcessor.from_pretrained()"),lio=o(" class method."),iio=l(),K0=a("p"),dio=o("This class cannot be instantiated directly using "),Dte=a("code"),cio=o("__init__()"),fio=o(" (throws an error)."),mio=l(),We=a("div"),F(Z0.$$.fragment),gio=l(),Gte=a("p"),hio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),pio=l(),hi=a("p"),uio=o("The processor class to instantiate is selected based on the "),Ote=a("code"),_io=o("model_type"),bio=o(` property of the config object (either
passed as an argument or loaded from `),Vte=a("code"),vio=o("pretrained_model_name_or_path"),Fio=o(" if possible):"),Tio=l(),be=a("ul"),uh=a("li"),Xte=a("strong"),Mio=o("clip"),Eio=o(" \u2014 "),WB=a("a"),Cio=o("CLIPProcessor"),wio=o(" (CLIP model)"),Aio=l(),_h=a("li"),zte=a("strong"),yio=o("flava"),Lio=o(" \u2014 "),Qte=a("code"),xio=o("FLAVAProcessor"),$io=o(" (Flava model)"),kio=l(),bh=a("li"),Wte=a("strong"),Sio=o("layoutlmv2"),Rio=o(" \u2014 "),HB=a("a"),Bio=o("LayoutLMv2Processor"),Pio=o(" (LayoutLMv2 model)"),Iio=l(),vh=a("li"),Hte=a("strong"),qio=o("layoutxlm"),Nio=o(" \u2014 "),UB=a("a"),jio=o("LayoutXLMProcessor"),Dio=o(" (LayoutXLM model)"),Gio=l(),Fh=a("li"),Ute=a("strong"),Oio=o("sew"),Vio=o(" \u2014 "),JB=a("a"),Xio=o("Wav2Vec2Processor"),zio=o(" (SEW model)"),Qio=l(),Th=a("li"),Jte=a("strong"),Wio=o("sew-d"),Hio=o(" \u2014 "),YB=a("a"),Uio=o("Wav2Vec2Processor"),Jio=o(" (SEW-D model)"),Yio=l(),Mh=a("li"),Yte=a("strong"),Kio=o("speech_to_text"),Zio=o(" \u2014 "),KB=a("a"),edo=o("Speech2TextProcessor"),odo=o(" (Speech2Text model)"),rdo=l(),Eh=a("li"),Kte=a("strong"),tdo=o("speech_to_text_2"),ado=o(" \u2014 "),ZB=a("a"),ndo=o("Speech2Text2Processor"),sdo=o(" (Speech2Text2 model)"),ldo=l(),Ch=a("li"),Zte=a("strong"),ido=o("trocr"),ddo=o(" \u2014 "),eP=a("a"),cdo=o("TrOCRProcessor"),fdo=o(" (TrOCR model)"),mdo=l(),wh=a("li"),eae=a("strong"),gdo=o("unispeech"),hdo=o(" \u2014 "),oP=a("a"),pdo=o("Wav2Vec2Processor"),udo=o(" (UniSpeech model)"),_do=l(),Ah=a("li"),oae=a("strong"),bdo=o("unispeech-sat"),vdo=o(" \u2014 "),rP=a("a"),Fdo=o("Wav2Vec2Processor"),Tdo=o(" (UniSpeechSat model)"),Mdo=l(),yh=a("li"),rae=a("strong"),Edo=o("vilt"),Cdo=o(" \u2014 "),tP=a("a"),wdo=o("ViltProcessor"),Ado=o(" (ViLT model)"),ydo=l(),Lh=a("li"),tae=a("strong"),Ldo=o("vision-text-dual-encoder"),xdo=o(" \u2014 "),aP=a("a"),$do=o("VisionTextDualEncoderProcessor"),kdo=o(" (VisionTextDualEncoder model)"),Sdo=l(),xh=a("li"),aae=a("strong"),Rdo=o("wav2vec2"),Bdo=o(" \u2014 "),nP=a("a"),Pdo=o("Wav2Vec2Processor"),Ido=o(" (Wav2Vec2 model)"),qdo=l(),$h=a("li"),nae=a("strong"),Ndo=o("wavlm"),jdo=o(" \u2014 "),sP=a("a"),Ddo=o("Wav2Vec2Processor"),Gdo=o(" (WavLM model)"),Odo=l(),F(kh.$$.fragment),Vdo=l(),F(Sh.$$.fragment),Xdo=l(),Rh=a("div"),F(ey.$$.fragment),zdo=l(),sae=a("p"),Qdo=o("Register a new processor for this class."),WBe=l(),pi=a("h2"),Bh=a("a"),lae=a("span"),F(oy.$$.fragment),Wdo=l(),iae=a("span"),Hdo=o("AutoModel"),HBe=l(),Lo=a("div"),F(ry.$$.fragment),Udo=l(),ui=a("p"),Jdo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lP=a("a"),Ydo=o("from_pretrained()"),Kdo=o(" class method or the "),iP=a("a"),Zdo=o("from_config()"),eco=o(` class
method.`),oco=l(),ty=a("p"),rco=o("This class cannot be instantiated directly using "),dae=a("code"),tco=o("__init__()"),aco=o(" (throws an error)."),nco=l(),Zr=a("div"),F(ay.$$.fragment),sco=l(),cae=a("p"),lco=o("Instantiates one of the base model classes of the library from a configuration."),ico=l(),_i=a("p"),dco=o(`Note:
Loading a model from its configuration file does `),fae=a("strong"),cco=o("not"),fco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dP=a("a"),mco=o("from_pretrained()"),gco=o(" to load the model weights."),hco=l(),F(Ph.$$.fragment),pco=l(),He=a("div"),F(ny.$$.fragment),uco=l(),mae=a("p"),_co=o("Instantiate one of the base model classes of the library from a pretrained model."),bco=l(),Ea=a("p"),vco=o("The model class to instantiate is selected based on the "),gae=a("code"),Fco=o("model_type"),Tco=o(` property of the config object (either
passed as an argument or loaded from `),hae=a("code"),Mco=o("pretrained_model_name_or_path"),Eco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=a("code"),Cco=o("pretrained_model_name_or_path"),wco=o(":"),Aco=l(),x=a("ul"),Ih=a("li"),uae=a("strong"),yco=o("albert"),Lco=o(" \u2014 "),cP=a("a"),xco=o("AlbertModel"),$co=o(" (ALBERT model)"),kco=l(),qh=a("li"),_ae=a("strong"),Sco=o("bart"),Rco=o(" \u2014 "),fP=a("a"),Bco=o("BartModel"),Pco=o(" (BART model)"),Ico=l(),Nh=a("li"),bae=a("strong"),qco=o("beit"),Nco=o(" \u2014 "),mP=a("a"),jco=o("BeitModel"),Dco=o(" (BEiT model)"),Gco=l(),jh=a("li"),vae=a("strong"),Oco=o("bert"),Vco=o(" \u2014 "),gP=a("a"),Xco=o("BertModel"),zco=o(" (BERT model)"),Qco=l(),Dh=a("li"),Fae=a("strong"),Wco=o("bert-generation"),Hco=o(" \u2014 "),hP=a("a"),Uco=o("BertGenerationEncoder"),Jco=o(" (Bert Generation model)"),Yco=l(),Gh=a("li"),Tae=a("strong"),Kco=o("big_bird"),Zco=o(" \u2014 "),pP=a("a"),efo=o("BigBirdModel"),ofo=o(" (BigBird model)"),rfo=l(),Oh=a("li"),Mae=a("strong"),tfo=o("bigbird_pegasus"),afo=o(" \u2014 "),uP=a("a"),nfo=o("BigBirdPegasusModel"),sfo=o(" (BigBirdPegasus model)"),lfo=l(),Vh=a("li"),Eae=a("strong"),ifo=o("blenderbot"),dfo=o(" \u2014 "),_P=a("a"),cfo=o("BlenderbotModel"),ffo=o(" (Blenderbot model)"),mfo=l(),Xh=a("li"),Cae=a("strong"),gfo=o("blenderbot-small"),hfo=o(" \u2014 "),bP=a("a"),pfo=o("BlenderbotSmallModel"),ufo=o(" (BlenderbotSmall model)"),_fo=l(),zh=a("li"),wae=a("strong"),bfo=o("camembert"),vfo=o(" \u2014 "),vP=a("a"),Ffo=o("CamembertModel"),Tfo=o(" (CamemBERT model)"),Mfo=l(),Qh=a("li"),Aae=a("strong"),Efo=o("canine"),Cfo=o(" \u2014 "),FP=a("a"),wfo=o("CanineModel"),Afo=o(" (Canine model)"),yfo=l(),Wh=a("li"),yae=a("strong"),Lfo=o("clip"),xfo=o(" \u2014 "),TP=a("a"),$fo=o("CLIPModel"),kfo=o(" (CLIP model)"),Sfo=l(),Hh=a("li"),Lae=a("strong"),Rfo=o("convbert"),Bfo=o(" \u2014 "),MP=a("a"),Pfo=o("ConvBertModel"),Ifo=o(" (ConvBERT model)"),qfo=l(),Uh=a("li"),xae=a("strong"),Nfo=o("convnext"),jfo=o(" \u2014 "),EP=a("a"),Dfo=o("ConvNextModel"),Gfo=o(" (ConvNext model)"),Ofo=l(),Jh=a("li"),$ae=a("strong"),Vfo=o("ctrl"),Xfo=o(" \u2014 "),CP=a("a"),zfo=o("CTRLModel"),Qfo=o(" (CTRL model)"),Wfo=l(),Yh=a("li"),kae=a("strong"),Hfo=o("data2vec-audio"),Ufo=o(" \u2014 "),wP=a("a"),Jfo=o("Data2VecAudioModel"),Yfo=o(" (Data2VecAudio model)"),Kfo=l(),Kh=a("li"),Sae=a("strong"),Zfo=o("data2vec-text"),emo=o(" \u2014 "),AP=a("a"),omo=o("Data2VecTextModel"),rmo=o(" (Data2VecText model)"),tmo=l(),Zh=a("li"),Rae=a("strong"),amo=o("data2vec-vision"),nmo=o(" \u2014 "),yP=a("a"),smo=o("Data2VecVisionModel"),lmo=o(" (Data2VecVision model)"),imo=l(),ep=a("li"),Bae=a("strong"),dmo=o("deberta"),cmo=o(" \u2014 "),LP=a("a"),fmo=o("DebertaModel"),mmo=o(" (DeBERTa model)"),gmo=l(),op=a("li"),Pae=a("strong"),hmo=o("deberta-v2"),pmo=o(" \u2014 "),xP=a("a"),umo=o("DebertaV2Model"),_mo=o(" (DeBERTa-v2 model)"),bmo=l(),rp=a("li"),Iae=a("strong"),vmo=o("decision_transformer"),Fmo=o(" \u2014 "),$P=a("a"),Tmo=o("DecisionTransformerModel"),Mmo=o(" (Decision Transformer model)"),Emo=l(),tp=a("li"),qae=a("strong"),Cmo=o("deit"),wmo=o(" \u2014 "),kP=a("a"),Amo=o("DeiTModel"),ymo=o(" (DeiT model)"),Lmo=l(),ap=a("li"),Nae=a("strong"),xmo=o("detr"),$mo=o(" \u2014 "),SP=a("a"),kmo=o("DetrModel"),Smo=o(" (DETR model)"),Rmo=l(),np=a("li"),jae=a("strong"),Bmo=o("distilbert"),Pmo=o(" \u2014 "),RP=a("a"),Imo=o("DistilBertModel"),qmo=o(" (DistilBERT model)"),Nmo=l(),sp=a("li"),Dae=a("strong"),jmo=o("dpr"),Dmo=o(" \u2014 "),BP=a("a"),Gmo=o("DPRQuestionEncoder"),Omo=o(" (DPR model)"),Vmo=l(),lp=a("li"),Gae=a("strong"),Xmo=o("dpt"),zmo=o(" \u2014 "),PP=a("a"),Qmo=o("DPTModel"),Wmo=o(" (DPT model)"),Hmo=l(),ip=a("li"),Oae=a("strong"),Umo=o("electra"),Jmo=o(" \u2014 "),IP=a("a"),Ymo=o("ElectraModel"),Kmo=o(" (ELECTRA model)"),Zmo=l(),dp=a("li"),Vae=a("strong"),ego=o("flaubert"),ogo=o(" \u2014 "),qP=a("a"),rgo=o("FlaubertModel"),tgo=o(" (FlauBERT model)"),ago=l(),cp=a("li"),Xae=a("strong"),ngo=o("flava"),sgo=o(" \u2014 "),NP=a("a"),lgo=o("FlavaModel"),igo=o(" (Flava model)"),dgo=l(),fp=a("li"),zae=a("strong"),cgo=o("fnet"),fgo=o(" \u2014 "),jP=a("a"),mgo=o("FNetModel"),ggo=o(" (FNet model)"),hgo=l(),mp=a("li"),Qae=a("strong"),pgo=o("fsmt"),ugo=o(" \u2014 "),DP=a("a"),_go=o("FSMTModel"),bgo=o(" (FairSeq Machine-Translation model)"),vgo=l(),Ls=a("li"),Wae=a("strong"),Fgo=o("funnel"),Tgo=o(" \u2014 "),GP=a("a"),Mgo=o("FunnelModel"),Ego=o(" or "),OP=a("a"),Cgo=o("FunnelBaseModel"),wgo=o(" (Funnel Transformer model)"),Ago=l(),gp=a("li"),Hae=a("strong"),ygo=o("glpn"),Lgo=o(" \u2014 "),VP=a("a"),xgo=o("GLPNModel"),$go=o(" (GLPN model)"),kgo=l(),hp=a("li"),Uae=a("strong"),Sgo=o("gpt2"),Rgo=o(" \u2014 "),XP=a("a"),Bgo=o("GPT2Model"),Pgo=o(" (OpenAI GPT-2 model)"),Igo=l(),pp=a("li"),Jae=a("strong"),qgo=o("gpt_neo"),Ngo=o(" \u2014 "),zP=a("a"),jgo=o("GPTNeoModel"),Dgo=o(" (GPT Neo model)"),Ggo=l(),up=a("li"),Yae=a("strong"),Ogo=o("gptj"),Vgo=o(" \u2014 "),QP=a("a"),Xgo=o("GPTJModel"),zgo=o(" (GPT-J model)"),Qgo=l(),_p=a("li"),Kae=a("strong"),Wgo=o("hubert"),Hgo=o(" \u2014 "),WP=a("a"),Ugo=o("HubertModel"),Jgo=o(" (Hubert model)"),Ygo=l(),bp=a("li"),Zae=a("strong"),Kgo=o("ibert"),Zgo=o(" \u2014 "),HP=a("a"),eho=o("IBertModel"),oho=o(" (I-BERT model)"),rho=l(),vp=a("li"),ene=a("strong"),tho=o("imagegpt"),aho=o(" \u2014 "),UP=a("a"),nho=o("ImageGPTModel"),sho=o(" (ImageGPT model)"),lho=l(),Fp=a("li"),one=a("strong"),iho=o("layoutlm"),dho=o(" \u2014 "),JP=a("a"),cho=o("LayoutLMModel"),fho=o(" (LayoutLM model)"),mho=l(),Tp=a("li"),rne=a("strong"),gho=o("layoutlmv2"),hho=o(" \u2014 "),YP=a("a"),pho=o("LayoutLMv2Model"),uho=o(" (LayoutLMv2 model)"),_ho=l(),Mp=a("li"),tne=a("strong"),bho=o("led"),vho=o(" \u2014 "),KP=a("a"),Fho=o("LEDModel"),Tho=o(" (LED model)"),Mho=l(),Ep=a("li"),ane=a("strong"),Eho=o("longformer"),Cho=o(" \u2014 "),ZP=a("a"),who=o("LongformerModel"),Aho=o(" (Longformer model)"),yho=l(),Cp=a("li"),nne=a("strong"),Lho=o("luke"),xho=o(" \u2014 "),eI=a("a"),$ho=o("LukeModel"),kho=o(" (LUKE model)"),Sho=l(),wp=a("li"),sne=a("strong"),Rho=o("lxmert"),Bho=o(" \u2014 "),oI=a("a"),Pho=o("LxmertModel"),Iho=o(" (LXMERT model)"),qho=l(),Ap=a("li"),lne=a("strong"),Nho=o("m2m_100"),jho=o(" \u2014 "),rI=a("a"),Dho=o("M2M100Model"),Gho=o(" (M2M100 model)"),Oho=l(),yp=a("li"),ine=a("strong"),Vho=o("marian"),Xho=o(" \u2014 "),tI=a("a"),zho=o("MarianModel"),Qho=o(" (Marian model)"),Who=l(),Lp=a("li"),dne=a("strong"),Hho=o("maskformer"),Uho=o(" \u2014 "),aI=a("a"),Jho=o("MaskFormerModel"),Yho=o(" (MaskFormer model)"),Kho=l(),xp=a("li"),cne=a("strong"),Zho=o("mbart"),epo=o(" \u2014 "),nI=a("a"),opo=o("MBartModel"),rpo=o(" (mBART model)"),tpo=l(),$p=a("li"),fne=a("strong"),apo=o("megatron-bert"),npo=o(" \u2014 "),sI=a("a"),spo=o("MegatronBertModel"),lpo=o(" (MegatronBert model)"),ipo=l(),kp=a("li"),mne=a("strong"),dpo=o("mobilebert"),cpo=o(" \u2014 "),lI=a("a"),fpo=o("MobileBertModel"),mpo=o(" (MobileBERT model)"),gpo=l(),Sp=a("li"),gne=a("strong"),hpo=o("mpnet"),ppo=o(" \u2014 "),iI=a("a"),upo=o("MPNetModel"),_po=o(" (MPNet model)"),bpo=l(),Rp=a("li"),hne=a("strong"),vpo=o("mt5"),Fpo=o(" \u2014 "),dI=a("a"),Tpo=o("MT5Model"),Mpo=o(" (mT5 model)"),Epo=l(),Bp=a("li"),pne=a("strong"),Cpo=o("nystromformer"),wpo=o(" \u2014 "),cI=a("a"),Apo=o("NystromformerModel"),ypo=o(" (Nystromformer model)"),Lpo=l(),Pp=a("li"),une=a("strong"),xpo=o("openai-gpt"),$po=o(" \u2014 "),fI=a("a"),kpo=o("OpenAIGPTModel"),Spo=o(" (OpenAI GPT model)"),Rpo=l(),Ip=a("li"),_ne=a("strong"),Bpo=o("pegasus"),Ppo=o(" \u2014 "),mI=a("a"),Ipo=o("PegasusModel"),qpo=o(" (Pegasus model)"),Npo=l(),qp=a("li"),bne=a("strong"),jpo=o("perceiver"),Dpo=o(" \u2014 "),gI=a("a"),Gpo=o("PerceiverModel"),Opo=o(" (Perceiver model)"),Vpo=l(),Np=a("li"),vne=a("strong"),Xpo=o("plbart"),zpo=o(" \u2014 "),hI=a("a"),Qpo=o("PLBartModel"),Wpo=o(" (PLBart model)"),Hpo=l(),jp=a("li"),Fne=a("strong"),Upo=o("poolformer"),Jpo=o(" \u2014 "),pI=a("a"),Ypo=o("PoolFormerModel"),Kpo=o(" (PoolFormer model)"),Zpo=l(),Dp=a("li"),Tne=a("strong"),euo=o("prophetnet"),ouo=o(" \u2014 "),uI=a("a"),ruo=o("ProphetNetModel"),tuo=o(" (ProphetNet model)"),auo=l(),Gp=a("li"),Mne=a("strong"),nuo=o("qdqbert"),suo=o(" \u2014 "),_I=a("a"),luo=o("QDQBertModel"),iuo=o(" (QDQBert model)"),duo=l(),Op=a("li"),Ene=a("strong"),cuo=o("reformer"),fuo=o(" \u2014 "),bI=a("a"),muo=o("ReformerModel"),guo=o(" (Reformer model)"),huo=l(),Vp=a("li"),Cne=a("strong"),puo=o("regnet"),uuo=o(" \u2014 "),vI=a("a"),_uo=o("RegNetModel"),buo=o(" (RegNet model)"),vuo=l(),Xp=a("li"),wne=a("strong"),Fuo=o("rembert"),Tuo=o(" \u2014 "),FI=a("a"),Muo=o("RemBertModel"),Euo=o(" (RemBERT model)"),Cuo=l(),zp=a("li"),Ane=a("strong"),wuo=o("resnet"),Auo=o(" \u2014 "),TI=a("a"),yuo=o("ResNetModel"),Luo=o(" (ResNet model)"),xuo=l(),Qp=a("li"),yne=a("strong"),$uo=o("retribert"),kuo=o(" \u2014 "),MI=a("a"),Suo=o("RetriBertModel"),Ruo=o(" (RetriBERT model)"),Buo=l(),Wp=a("li"),Lne=a("strong"),Puo=o("roberta"),Iuo=o(" \u2014 "),EI=a("a"),quo=o("RobertaModel"),Nuo=o(" (RoBERTa model)"),juo=l(),Hp=a("li"),xne=a("strong"),Duo=o("roformer"),Guo=o(" \u2014 "),CI=a("a"),Ouo=o("RoFormerModel"),Vuo=o(" (RoFormer model)"),Xuo=l(),Up=a("li"),$ne=a("strong"),zuo=o("segformer"),Quo=o(" \u2014 "),wI=a("a"),Wuo=o("SegformerModel"),Huo=o(" (SegFormer model)"),Uuo=l(),Jp=a("li"),kne=a("strong"),Juo=o("sew"),Yuo=o(" \u2014 "),AI=a("a"),Kuo=o("SEWModel"),Zuo=o(" (SEW model)"),e_o=l(),Yp=a("li"),Sne=a("strong"),o_o=o("sew-d"),r_o=o(" \u2014 "),yI=a("a"),t_o=o("SEWDModel"),a_o=o(" (SEW-D model)"),n_o=l(),Kp=a("li"),Rne=a("strong"),s_o=o("speech_to_text"),l_o=o(" \u2014 "),LI=a("a"),i_o=o("Speech2TextModel"),d_o=o(" (Speech2Text model)"),c_o=l(),Zp=a("li"),Bne=a("strong"),f_o=o("splinter"),m_o=o(" \u2014 "),xI=a("a"),g_o=o("SplinterModel"),h_o=o(" (Splinter model)"),p_o=l(),eu=a("li"),Pne=a("strong"),u_o=o("squeezebert"),__o=o(" \u2014 "),$I=a("a"),b_o=o("SqueezeBertModel"),v_o=o(" (SqueezeBERT model)"),F_o=l(),ou=a("li"),Ine=a("strong"),T_o=o("swin"),M_o=o(" \u2014 "),kI=a("a"),E_o=o("SwinModel"),C_o=o(" (Swin model)"),w_o=l(),ru=a("li"),qne=a("strong"),A_o=o("t5"),y_o=o(" \u2014 "),SI=a("a"),L_o=o("T5Model"),x_o=o(" (T5 model)"),$_o=l(),tu=a("li"),Nne=a("strong"),k_o=o("tapas"),S_o=o(" \u2014 "),RI=a("a"),R_o=o("TapasModel"),B_o=o(" (TAPAS model)"),P_o=l(),au=a("li"),jne=a("strong"),I_o=o("transfo-xl"),q_o=o(" \u2014 "),BI=a("a"),N_o=o("TransfoXLModel"),j_o=o(" (Transformer-XL model)"),D_o=l(),nu=a("li"),Dne=a("strong"),G_o=o("unispeech"),O_o=o(" \u2014 "),PI=a("a"),V_o=o("UniSpeechModel"),X_o=o(" (UniSpeech model)"),z_o=l(),su=a("li"),Gne=a("strong"),Q_o=o("unispeech-sat"),W_o=o(" \u2014 "),II=a("a"),H_o=o("UniSpeechSatModel"),U_o=o(" (UniSpeechSat model)"),J_o=l(),lu=a("li"),One=a("strong"),Y_o=o("van"),K_o=o(" \u2014 "),qI=a("a"),Z_o=o("VanModel"),e6o=o(" (VAN model)"),o6o=l(),iu=a("li"),Vne=a("strong"),r6o=o("vilt"),t6o=o(" \u2014 "),NI=a("a"),a6o=o("ViltModel"),n6o=o(" (ViLT model)"),s6o=l(),du=a("li"),Xne=a("strong"),l6o=o("vision-text-dual-encoder"),i6o=o(" \u2014 "),jI=a("a"),d6o=o("VisionTextDualEncoderModel"),c6o=o(" (VisionTextDualEncoder model)"),f6o=l(),cu=a("li"),zne=a("strong"),m6o=o("visual_bert"),g6o=o(" \u2014 "),DI=a("a"),h6o=o("VisualBertModel"),p6o=o(" (VisualBert model)"),u6o=l(),fu=a("li"),Qne=a("strong"),_6o=o("vit"),b6o=o(" \u2014 "),GI=a("a"),v6o=o("ViTModel"),F6o=o(" (ViT model)"),T6o=l(),mu=a("li"),Wne=a("strong"),M6o=o("vit_mae"),E6o=o(" \u2014 "),OI=a("a"),C6o=o("ViTMAEModel"),w6o=o(" (ViTMAE model)"),A6o=l(),gu=a("li"),Hne=a("strong"),y6o=o("wav2vec2"),L6o=o(" \u2014 "),VI=a("a"),x6o=o("Wav2Vec2Model"),$6o=o(" (Wav2Vec2 model)"),k6o=l(),hu=a("li"),Une=a("strong"),S6o=o("wavlm"),R6o=o(" \u2014 "),XI=a("a"),B6o=o("WavLMModel"),P6o=o(" (WavLM model)"),I6o=l(),pu=a("li"),Jne=a("strong"),q6o=o("xglm"),N6o=o(" \u2014 "),zI=a("a"),j6o=o("XGLMModel"),D6o=o(" (XGLM model)"),G6o=l(),uu=a("li"),Yne=a("strong"),O6o=o("xlm"),V6o=o(" \u2014 "),QI=a("a"),X6o=o("XLMModel"),z6o=o(" (XLM model)"),Q6o=l(),_u=a("li"),Kne=a("strong"),W6o=o("xlm-prophetnet"),H6o=o(" \u2014 "),WI=a("a"),U6o=o("XLMProphetNetModel"),J6o=o(" (XLMProphetNet model)"),Y6o=l(),bu=a("li"),Zne=a("strong"),K6o=o("xlm-roberta"),Z6o=o(" \u2014 "),HI=a("a"),e1o=o("XLMRobertaModel"),o1o=o(" (XLM-RoBERTa model)"),r1o=l(),vu=a("li"),ese=a("strong"),t1o=o("xlm-roberta-xl"),a1o=o(" \u2014 "),UI=a("a"),n1o=o("XLMRobertaXLModel"),s1o=o(" (XLM-RoBERTa-XL model)"),l1o=l(),Fu=a("li"),ose=a("strong"),i1o=o("xlnet"),d1o=o(" \u2014 "),JI=a("a"),c1o=o("XLNetModel"),f1o=o(" (XLNet model)"),m1o=l(),Tu=a("li"),rse=a("strong"),g1o=o("yolos"),h1o=o(" \u2014 "),YI=a("a"),p1o=o("YolosModel"),u1o=o(" (YOLOS model)"),_1o=l(),Mu=a("li"),tse=a("strong"),b1o=o("yoso"),v1o=o(" \u2014 "),KI=a("a"),F1o=o("YosoModel"),T1o=o(" (YOSO model)"),M1o=l(),Eu=a("p"),E1o=o("The model is set in evaluation mode by default using "),ase=a("code"),C1o=o("model.eval()"),w1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nse=a("code"),A1o=o("model.train()"),y1o=l(),F(Cu.$$.fragment),UBe=l(),bi=a("h2"),wu=a("a"),sse=a("span"),F(sy.$$.fragment),L1o=l(),lse=a("span"),x1o=o("AutoModelForPreTraining"),JBe=l(),xo=a("div"),F(ly.$$.fragment),$1o=l(),vi=a("p"),k1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZI=a("a"),S1o=o("from_pretrained()"),R1o=o(" class method or the "),eq=a("a"),B1o=o("from_config()"),P1o=o(` class
method.`),I1o=l(),iy=a("p"),q1o=o("This class cannot be instantiated directly using "),ise=a("code"),N1o=o("__init__()"),j1o=o(" (throws an error)."),D1o=l(),et=a("div"),F(dy.$$.fragment),G1o=l(),dse=a("p"),O1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),V1o=l(),Fi=a("p"),X1o=o(`Note:
Loading a model from its configuration file does `),cse=a("strong"),z1o=o("not"),Q1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oq=a("a"),W1o=o("from_pretrained()"),H1o=o(" to load the model weights."),U1o=l(),F(Au.$$.fragment),J1o=l(),Ue=a("div"),F(cy.$$.fragment),Y1o=l(),fse=a("p"),K1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Z1o=l(),Ca=a("p"),ebo=o("The model class to instantiate is selected based on the "),mse=a("code"),obo=o("model_type"),rbo=o(` property of the config object (either
passed as an argument or loaded from `),gse=a("code"),tbo=o("pretrained_model_name_or_path"),abo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hse=a("code"),nbo=o("pretrained_model_name_or_path"),sbo=o(":"),lbo=l(),G=a("ul"),yu=a("li"),pse=a("strong"),ibo=o("albert"),dbo=o(" \u2014 "),rq=a("a"),cbo=o("AlbertForPreTraining"),fbo=o(" (ALBERT model)"),mbo=l(),Lu=a("li"),use=a("strong"),gbo=o("bart"),hbo=o(" \u2014 "),tq=a("a"),pbo=o("BartForConditionalGeneration"),ubo=o(" (BART model)"),_bo=l(),xu=a("li"),_se=a("strong"),bbo=o("bert"),vbo=o(" \u2014 "),aq=a("a"),Fbo=o("BertForPreTraining"),Tbo=o(" (BERT model)"),Mbo=l(),$u=a("li"),bse=a("strong"),Ebo=o("big_bird"),Cbo=o(" \u2014 "),nq=a("a"),wbo=o("BigBirdForPreTraining"),Abo=o(" (BigBird model)"),ybo=l(),ku=a("li"),vse=a("strong"),Lbo=o("camembert"),xbo=o(" \u2014 "),sq=a("a"),$bo=o("CamembertForMaskedLM"),kbo=o(" (CamemBERT model)"),Sbo=l(),Su=a("li"),Fse=a("strong"),Rbo=o("ctrl"),Bbo=o(" \u2014 "),lq=a("a"),Pbo=o("CTRLLMHeadModel"),Ibo=o(" (CTRL model)"),qbo=l(),Ru=a("li"),Tse=a("strong"),Nbo=o("data2vec-text"),jbo=o(" \u2014 "),iq=a("a"),Dbo=o("Data2VecTextForMaskedLM"),Gbo=o(" (Data2VecText model)"),Obo=l(),Bu=a("li"),Mse=a("strong"),Vbo=o("deberta"),Xbo=o(" \u2014 "),dq=a("a"),zbo=o("DebertaForMaskedLM"),Qbo=o(" (DeBERTa model)"),Wbo=l(),Pu=a("li"),Ese=a("strong"),Hbo=o("deberta-v2"),Ubo=o(" \u2014 "),cq=a("a"),Jbo=o("DebertaV2ForMaskedLM"),Ybo=o(" (DeBERTa-v2 model)"),Kbo=l(),Iu=a("li"),Cse=a("strong"),Zbo=o("distilbert"),e4o=o(" \u2014 "),fq=a("a"),o4o=o("DistilBertForMaskedLM"),r4o=o(" (DistilBERT model)"),t4o=l(),qu=a("li"),wse=a("strong"),a4o=o("electra"),n4o=o(" \u2014 "),mq=a("a"),s4o=o("ElectraForPreTraining"),l4o=o(" (ELECTRA model)"),i4o=l(),Nu=a("li"),Ase=a("strong"),d4o=o("flaubert"),c4o=o(" \u2014 "),gq=a("a"),f4o=o("FlaubertWithLMHeadModel"),m4o=o(" (FlauBERT model)"),g4o=l(),ju=a("li"),yse=a("strong"),h4o=o("flava"),p4o=o(" \u2014 "),hq=a("a"),u4o=o("FlavaForPreTraining"),_4o=o(" (Flava model)"),b4o=l(),Du=a("li"),Lse=a("strong"),v4o=o("fnet"),F4o=o(" \u2014 "),pq=a("a"),T4o=o("FNetForPreTraining"),M4o=o(" (FNet model)"),E4o=l(),Gu=a("li"),xse=a("strong"),C4o=o("fsmt"),w4o=o(" \u2014 "),uq=a("a"),A4o=o("FSMTForConditionalGeneration"),y4o=o(" (FairSeq Machine-Translation model)"),L4o=l(),Ou=a("li"),$se=a("strong"),x4o=o("funnel"),$4o=o(" \u2014 "),_q=a("a"),k4o=o("FunnelForPreTraining"),S4o=o(" (Funnel Transformer model)"),R4o=l(),Vu=a("li"),kse=a("strong"),B4o=o("gpt2"),P4o=o(" \u2014 "),bq=a("a"),I4o=o("GPT2LMHeadModel"),q4o=o(" (OpenAI GPT-2 model)"),N4o=l(),Xu=a("li"),Sse=a("strong"),j4o=o("ibert"),D4o=o(" \u2014 "),vq=a("a"),G4o=o("IBertForMaskedLM"),O4o=o(" (I-BERT model)"),V4o=l(),zu=a("li"),Rse=a("strong"),X4o=o("layoutlm"),z4o=o(" \u2014 "),Fq=a("a"),Q4o=o("LayoutLMForMaskedLM"),W4o=o(" (LayoutLM model)"),H4o=l(),Qu=a("li"),Bse=a("strong"),U4o=o("longformer"),J4o=o(" \u2014 "),Tq=a("a"),Y4o=o("LongformerForMaskedLM"),K4o=o(" (Longformer model)"),Z4o=l(),Wu=a("li"),Pse=a("strong"),e2o=o("lxmert"),o2o=o(" \u2014 "),Mq=a("a"),r2o=o("LxmertForPreTraining"),t2o=o(" (LXMERT model)"),a2o=l(),Hu=a("li"),Ise=a("strong"),n2o=o("megatron-bert"),s2o=o(" \u2014 "),Eq=a("a"),l2o=o("MegatronBertForPreTraining"),i2o=o(" (MegatronBert model)"),d2o=l(),Uu=a("li"),qse=a("strong"),c2o=o("mobilebert"),f2o=o(" \u2014 "),Cq=a("a"),m2o=o("MobileBertForPreTraining"),g2o=o(" (MobileBERT model)"),h2o=l(),Ju=a("li"),Nse=a("strong"),p2o=o("mpnet"),u2o=o(" \u2014 "),wq=a("a"),_2o=o("MPNetForMaskedLM"),b2o=o(" (MPNet model)"),v2o=l(),Yu=a("li"),jse=a("strong"),F2o=o("openai-gpt"),T2o=o(" \u2014 "),Aq=a("a"),M2o=o("OpenAIGPTLMHeadModel"),E2o=o(" (OpenAI GPT model)"),C2o=l(),Ku=a("li"),Dse=a("strong"),w2o=o("retribert"),A2o=o(" \u2014 "),yq=a("a"),y2o=o("RetriBertModel"),L2o=o(" (RetriBERT model)"),x2o=l(),Zu=a("li"),Gse=a("strong"),$2o=o("roberta"),k2o=o(" \u2014 "),Lq=a("a"),S2o=o("RobertaForMaskedLM"),R2o=o(" (RoBERTa model)"),B2o=l(),e_=a("li"),Ose=a("strong"),P2o=o("squeezebert"),I2o=o(" \u2014 "),xq=a("a"),q2o=o("SqueezeBertForMaskedLM"),N2o=o(" (SqueezeBERT model)"),j2o=l(),o_=a("li"),Vse=a("strong"),D2o=o("t5"),G2o=o(" \u2014 "),$q=a("a"),O2o=o("T5ForConditionalGeneration"),V2o=o(" (T5 model)"),X2o=l(),r_=a("li"),Xse=a("strong"),z2o=o("tapas"),Q2o=o(" \u2014 "),kq=a("a"),W2o=o("TapasForMaskedLM"),H2o=o(" (TAPAS model)"),U2o=l(),t_=a("li"),zse=a("strong"),J2o=o("transfo-xl"),Y2o=o(" \u2014 "),Sq=a("a"),K2o=o("TransfoXLLMHeadModel"),Z2o=o(" (Transformer-XL model)"),e5o=l(),a_=a("li"),Qse=a("strong"),o5o=o("unispeech"),r5o=o(" \u2014 "),Rq=a("a"),t5o=o("UniSpeechForPreTraining"),a5o=o(" (UniSpeech model)"),n5o=l(),n_=a("li"),Wse=a("strong"),s5o=o("unispeech-sat"),l5o=o(" \u2014 "),Bq=a("a"),i5o=o("UniSpeechSatForPreTraining"),d5o=o(" (UniSpeechSat model)"),c5o=l(),s_=a("li"),Hse=a("strong"),f5o=o("visual_bert"),m5o=o(" \u2014 "),Pq=a("a"),g5o=o("VisualBertForPreTraining"),h5o=o(" (VisualBert model)"),p5o=l(),l_=a("li"),Use=a("strong"),u5o=o("vit_mae"),_5o=o(" \u2014 "),Iq=a("a"),b5o=o("ViTMAEForPreTraining"),v5o=o(" (ViTMAE model)"),F5o=l(),i_=a("li"),Jse=a("strong"),T5o=o("wav2vec2"),M5o=o(" \u2014 "),qq=a("a"),E5o=o("Wav2Vec2ForPreTraining"),C5o=o(" (Wav2Vec2 model)"),w5o=l(),d_=a("li"),Yse=a("strong"),A5o=o("xlm"),y5o=o(" \u2014 "),Nq=a("a"),L5o=o("XLMWithLMHeadModel"),x5o=o(" (XLM model)"),$5o=l(),c_=a("li"),Kse=a("strong"),k5o=o("xlm-roberta"),S5o=o(" \u2014 "),jq=a("a"),R5o=o("XLMRobertaForMaskedLM"),B5o=o(" (XLM-RoBERTa model)"),P5o=l(),f_=a("li"),Zse=a("strong"),I5o=o("xlm-roberta-xl"),q5o=o(" \u2014 "),Dq=a("a"),N5o=o("XLMRobertaXLForMaskedLM"),j5o=o(" (XLM-RoBERTa-XL model)"),D5o=l(),m_=a("li"),ele=a("strong"),G5o=o("xlnet"),O5o=o(" \u2014 "),Gq=a("a"),V5o=o("XLNetLMHeadModel"),X5o=o(" (XLNet model)"),z5o=l(),g_=a("p"),Q5o=o("The model is set in evaluation mode by default using "),ole=a("code"),W5o=o("model.eval()"),H5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rle=a("code"),U5o=o("model.train()"),J5o=l(),F(h_.$$.fragment),YBe=l(),Ti=a("h2"),p_=a("a"),tle=a("span"),F(fy.$$.fragment),Y5o=l(),ale=a("span"),K5o=o("AutoModelForCausalLM"),KBe=l(),$o=a("div"),F(my.$$.fragment),Z5o=l(),Mi=a("p"),evo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oq=a("a"),ovo=o("from_pretrained()"),rvo=o(" class method or the "),Vq=a("a"),tvo=o("from_config()"),avo=o(` class
method.`),nvo=l(),gy=a("p"),svo=o("This class cannot be instantiated directly using "),nle=a("code"),lvo=o("__init__()"),ivo=o(" (throws an error)."),dvo=l(),ot=a("div"),F(hy.$$.fragment),cvo=l(),sle=a("p"),fvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mvo=l(),Ei=a("p"),gvo=o(`Note:
Loading a model from its configuration file does `),lle=a("strong"),hvo=o("not"),pvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=a("a"),uvo=o("from_pretrained()"),_vo=o(" to load the model weights."),bvo=l(),F(u_.$$.fragment),vvo=l(),Je=a("div"),F(py.$$.fragment),Fvo=l(),ile=a("p"),Tvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mvo=l(),wa=a("p"),Evo=o("The model class to instantiate is selected based on the "),dle=a("code"),Cvo=o("model_type"),wvo=o(` property of the config object (either
passed as an argument or loaded from `),cle=a("code"),Avo=o("pretrained_model_name_or_path"),yvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=a("code"),Lvo=o("pretrained_model_name_or_path"),xvo=o(":"),$vo=l(),z=a("ul"),__=a("li"),mle=a("strong"),kvo=o("bart"),Svo=o(" \u2014 "),zq=a("a"),Rvo=o("BartForCausalLM"),Bvo=o(" (BART model)"),Pvo=l(),b_=a("li"),gle=a("strong"),Ivo=o("bert"),qvo=o(" \u2014 "),Qq=a("a"),Nvo=o("BertLMHeadModel"),jvo=o(" (BERT model)"),Dvo=l(),v_=a("li"),hle=a("strong"),Gvo=o("bert-generation"),Ovo=o(" \u2014 "),Wq=a("a"),Vvo=o("BertGenerationDecoder"),Xvo=o(" (Bert Generation model)"),zvo=l(),F_=a("li"),ple=a("strong"),Qvo=o("big_bird"),Wvo=o(" \u2014 "),Hq=a("a"),Hvo=o("BigBirdForCausalLM"),Uvo=o(" (BigBird model)"),Jvo=l(),T_=a("li"),ule=a("strong"),Yvo=o("bigbird_pegasus"),Kvo=o(" \u2014 "),Uq=a("a"),Zvo=o("BigBirdPegasusForCausalLM"),eFo=o(" (BigBirdPegasus model)"),oFo=l(),M_=a("li"),_le=a("strong"),rFo=o("blenderbot"),tFo=o(" \u2014 "),Jq=a("a"),aFo=o("BlenderbotForCausalLM"),nFo=o(" (Blenderbot model)"),sFo=l(),E_=a("li"),ble=a("strong"),lFo=o("blenderbot-small"),iFo=o(" \u2014 "),Yq=a("a"),dFo=o("BlenderbotSmallForCausalLM"),cFo=o(" (BlenderbotSmall model)"),fFo=l(),C_=a("li"),vle=a("strong"),mFo=o("camembert"),gFo=o(" \u2014 "),Kq=a("a"),hFo=o("CamembertForCausalLM"),pFo=o(" (CamemBERT model)"),uFo=l(),w_=a("li"),Fle=a("strong"),_Fo=o("ctrl"),bFo=o(" \u2014 "),Zq=a("a"),vFo=o("CTRLLMHeadModel"),FFo=o(" (CTRL model)"),TFo=l(),A_=a("li"),Tle=a("strong"),MFo=o("data2vec-text"),EFo=o(" \u2014 "),eN=a("a"),CFo=o("Data2VecTextForCausalLM"),wFo=o(" (Data2VecText model)"),AFo=l(),y_=a("li"),Mle=a("strong"),yFo=o("electra"),LFo=o(" \u2014 "),oN=a("a"),xFo=o("ElectraForCausalLM"),$Fo=o(" (ELECTRA model)"),kFo=l(),L_=a("li"),Ele=a("strong"),SFo=o("gpt2"),RFo=o(" \u2014 "),rN=a("a"),BFo=o("GPT2LMHeadModel"),PFo=o(" (OpenAI GPT-2 model)"),IFo=l(),x_=a("li"),Cle=a("strong"),qFo=o("gpt_neo"),NFo=o(" \u2014 "),tN=a("a"),jFo=o("GPTNeoForCausalLM"),DFo=o(" (GPT Neo model)"),GFo=l(),$_=a("li"),wle=a("strong"),OFo=o("gptj"),VFo=o(" \u2014 "),aN=a("a"),XFo=o("GPTJForCausalLM"),zFo=o(" (GPT-J model)"),QFo=l(),k_=a("li"),Ale=a("strong"),WFo=o("marian"),HFo=o(" \u2014 "),nN=a("a"),UFo=o("MarianForCausalLM"),JFo=o(" (Marian model)"),YFo=l(),S_=a("li"),yle=a("strong"),KFo=o("mbart"),ZFo=o(" \u2014 "),sN=a("a"),eTo=o("MBartForCausalLM"),oTo=o(" (mBART model)"),rTo=l(),R_=a("li"),Lle=a("strong"),tTo=o("megatron-bert"),aTo=o(" \u2014 "),lN=a("a"),nTo=o("MegatronBertForCausalLM"),sTo=o(" (MegatronBert model)"),lTo=l(),B_=a("li"),xle=a("strong"),iTo=o("openai-gpt"),dTo=o(" \u2014 "),iN=a("a"),cTo=o("OpenAIGPTLMHeadModel"),fTo=o(" (OpenAI GPT model)"),mTo=l(),P_=a("li"),$le=a("strong"),gTo=o("pegasus"),hTo=o(" \u2014 "),dN=a("a"),pTo=o("PegasusForCausalLM"),uTo=o(" (Pegasus model)"),_To=l(),I_=a("li"),kle=a("strong"),bTo=o("plbart"),vTo=o(" \u2014 "),cN=a("a"),FTo=o("PLBartForCausalLM"),TTo=o(" (PLBart model)"),MTo=l(),q_=a("li"),Sle=a("strong"),ETo=o("prophetnet"),CTo=o(" \u2014 "),fN=a("a"),wTo=o("ProphetNetForCausalLM"),ATo=o(" (ProphetNet model)"),yTo=l(),N_=a("li"),Rle=a("strong"),LTo=o("qdqbert"),xTo=o(" \u2014 "),mN=a("a"),$To=o("QDQBertLMHeadModel"),kTo=o(" (QDQBert model)"),STo=l(),j_=a("li"),Ble=a("strong"),RTo=o("reformer"),BTo=o(" \u2014 "),gN=a("a"),PTo=o("ReformerModelWithLMHead"),ITo=o(" (Reformer model)"),qTo=l(),D_=a("li"),Ple=a("strong"),NTo=o("rembert"),jTo=o(" \u2014 "),hN=a("a"),DTo=o("RemBertForCausalLM"),GTo=o(" (RemBERT model)"),OTo=l(),G_=a("li"),Ile=a("strong"),VTo=o("roberta"),XTo=o(" \u2014 "),pN=a("a"),zTo=o("RobertaForCausalLM"),QTo=o(" (RoBERTa model)"),WTo=l(),O_=a("li"),qle=a("strong"),HTo=o("roformer"),UTo=o(" \u2014 "),uN=a("a"),JTo=o("RoFormerForCausalLM"),YTo=o(" (RoFormer model)"),KTo=l(),V_=a("li"),Nle=a("strong"),ZTo=o("speech_to_text_2"),eMo=o(" \u2014 "),_N=a("a"),oMo=o("Speech2Text2ForCausalLM"),rMo=o(" (Speech2Text2 model)"),tMo=l(),X_=a("li"),jle=a("strong"),aMo=o("transfo-xl"),nMo=o(" \u2014 "),bN=a("a"),sMo=o("TransfoXLLMHeadModel"),lMo=o(" (Transformer-XL model)"),iMo=l(),z_=a("li"),Dle=a("strong"),dMo=o("trocr"),cMo=o(" \u2014 "),vN=a("a"),fMo=o("TrOCRForCausalLM"),mMo=o(" (TrOCR model)"),gMo=l(),Q_=a("li"),Gle=a("strong"),hMo=o("xglm"),pMo=o(" \u2014 "),FN=a("a"),uMo=o("XGLMForCausalLM"),_Mo=o(" (XGLM model)"),bMo=l(),W_=a("li"),Ole=a("strong"),vMo=o("xlm"),FMo=o(" \u2014 "),TN=a("a"),TMo=o("XLMWithLMHeadModel"),MMo=o(" (XLM model)"),EMo=l(),H_=a("li"),Vle=a("strong"),CMo=o("xlm-prophetnet"),wMo=o(" \u2014 "),MN=a("a"),AMo=o("XLMProphetNetForCausalLM"),yMo=o(" (XLMProphetNet model)"),LMo=l(),U_=a("li"),Xle=a("strong"),xMo=o("xlm-roberta"),$Mo=o(" \u2014 "),EN=a("a"),kMo=o("XLMRobertaForCausalLM"),SMo=o(" (XLM-RoBERTa model)"),RMo=l(),J_=a("li"),zle=a("strong"),BMo=o("xlm-roberta-xl"),PMo=o(" \u2014 "),CN=a("a"),IMo=o("XLMRobertaXLForCausalLM"),qMo=o(" (XLM-RoBERTa-XL model)"),NMo=l(),Y_=a("li"),Qle=a("strong"),jMo=o("xlnet"),DMo=o(" \u2014 "),wN=a("a"),GMo=o("XLNetLMHeadModel"),OMo=o(" (XLNet model)"),VMo=l(),K_=a("p"),XMo=o("The model is set in evaluation mode by default using "),Wle=a("code"),zMo=o("model.eval()"),QMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=a("code"),WMo=o("model.train()"),HMo=l(),F(Z_.$$.fragment),ZBe=l(),Ci=a("h2"),e6=a("a"),Ule=a("span"),F(uy.$$.fragment),UMo=l(),Jle=a("span"),JMo=o("AutoModelForMaskedLM"),ePe=l(),ko=a("div"),F(_y.$$.fragment),YMo=l(),wi=a("p"),KMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AN=a("a"),ZMo=o("from_pretrained()"),eEo=o(" class method or the "),yN=a("a"),oEo=o("from_config()"),rEo=o(` class
method.`),tEo=l(),by=a("p"),aEo=o("This class cannot be instantiated directly using "),Yle=a("code"),nEo=o("__init__()"),sEo=o(" (throws an error)."),lEo=l(),rt=a("div"),F(vy.$$.fragment),iEo=l(),Kle=a("p"),dEo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cEo=l(),Ai=a("p"),fEo=o(`Note:
Loading a model from its configuration file does `),Zle=a("strong"),mEo=o("not"),gEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LN=a("a"),hEo=o("from_pretrained()"),pEo=o(" to load the model weights."),uEo=l(),F(o6.$$.fragment),_Eo=l(),Ye=a("div"),F(Fy.$$.fragment),bEo=l(),eie=a("p"),vEo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FEo=l(),Aa=a("p"),TEo=o("The model class to instantiate is selected based on the "),oie=a("code"),MEo=o("model_type"),EEo=o(` property of the config object (either
passed as an argument or loaded from `),rie=a("code"),CEo=o("pretrained_model_name_or_path"),wEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tie=a("code"),AEo=o("pretrained_model_name_or_path"),yEo=o(":"),LEo=l(),Q=a("ul"),r6=a("li"),aie=a("strong"),xEo=o("albert"),$Eo=o(" \u2014 "),xN=a("a"),kEo=o("AlbertForMaskedLM"),SEo=o(" (ALBERT model)"),REo=l(),t6=a("li"),nie=a("strong"),BEo=o("bart"),PEo=o(" \u2014 "),$N=a("a"),IEo=o("BartForConditionalGeneration"),qEo=o(" (BART model)"),NEo=l(),a6=a("li"),sie=a("strong"),jEo=o("bert"),DEo=o(" \u2014 "),kN=a("a"),GEo=o("BertForMaskedLM"),OEo=o(" (BERT model)"),VEo=l(),n6=a("li"),lie=a("strong"),XEo=o("big_bird"),zEo=o(" \u2014 "),SN=a("a"),QEo=o("BigBirdForMaskedLM"),WEo=o(" (BigBird model)"),HEo=l(),s6=a("li"),iie=a("strong"),UEo=o("camembert"),JEo=o(" \u2014 "),RN=a("a"),YEo=o("CamembertForMaskedLM"),KEo=o(" (CamemBERT model)"),ZEo=l(),l6=a("li"),die=a("strong"),eCo=o("convbert"),oCo=o(" \u2014 "),BN=a("a"),rCo=o("ConvBertForMaskedLM"),tCo=o(" (ConvBERT model)"),aCo=l(),i6=a("li"),cie=a("strong"),nCo=o("data2vec-text"),sCo=o(" \u2014 "),PN=a("a"),lCo=o("Data2VecTextForMaskedLM"),iCo=o(" (Data2VecText model)"),dCo=l(),d6=a("li"),fie=a("strong"),cCo=o("deberta"),fCo=o(" \u2014 "),IN=a("a"),mCo=o("DebertaForMaskedLM"),gCo=o(" (DeBERTa model)"),hCo=l(),c6=a("li"),mie=a("strong"),pCo=o("deberta-v2"),uCo=o(" \u2014 "),qN=a("a"),_Co=o("DebertaV2ForMaskedLM"),bCo=o(" (DeBERTa-v2 model)"),vCo=l(),f6=a("li"),gie=a("strong"),FCo=o("distilbert"),TCo=o(" \u2014 "),NN=a("a"),MCo=o("DistilBertForMaskedLM"),ECo=o(" (DistilBERT model)"),CCo=l(),m6=a("li"),hie=a("strong"),wCo=o("electra"),ACo=o(" \u2014 "),jN=a("a"),yCo=o("ElectraForMaskedLM"),LCo=o(" (ELECTRA model)"),xCo=l(),g6=a("li"),pie=a("strong"),$Co=o("flaubert"),kCo=o(" \u2014 "),DN=a("a"),SCo=o("FlaubertWithLMHeadModel"),RCo=o(" (FlauBERT model)"),BCo=l(),h6=a("li"),uie=a("strong"),PCo=o("fnet"),ICo=o(" \u2014 "),GN=a("a"),qCo=o("FNetForMaskedLM"),NCo=o(" (FNet model)"),jCo=l(),p6=a("li"),_ie=a("strong"),DCo=o("funnel"),GCo=o(" \u2014 "),ON=a("a"),OCo=o("FunnelForMaskedLM"),VCo=o(" (Funnel Transformer model)"),XCo=l(),u6=a("li"),bie=a("strong"),zCo=o("ibert"),QCo=o(" \u2014 "),VN=a("a"),WCo=o("IBertForMaskedLM"),HCo=o(" (I-BERT model)"),UCo=l(),_6=a("li"),vie=a("strong"),JCo=o("layoutlm"),YCo=o(" \u2014 "),XN=a("a"),KCo=o("LayoutLMForMaskedLM"),ZCo=o(" (LayoutLM model)"),e3o=l(),b6=a("li"),Fie=a("strong"),o3o=o("longformer"),r3o=o(" \u2014 "),zN=a("a"),t3o=o("LongformerForMaskedLM"),a3o=o(" (Longformer model)"),n3o=l(),v6=a("li"),Tie=a("strong"),s3o=o("mbart"),l3o=o(" \u2014 "),QN=a("a"),i3o=o("MBartForConditionalGeneration"),d3o=o(" (mBART model)"),c3o=l(),F6=a("li"),Mie=a("strong"),f3o=o("megatron-bert"),m3o=o(" \u2014 "),WN=a("a"),g3o=o("MegatronBertForMaskedLM"),h3o=o(" (MegatronBert model)"),p3o=l(),T6=a("li"),Eie=a("strong"),u3o=o("mobilebert"),_3o=o(" \u2014 "),HN=a("a"),b3o=o("MobileBertForMaskedLM"),v3o=o(" (MobileBERT model)"),F3o=l(),M6=a("li"),Cie=a("strong"),T3o=o("mpnet"),M3o=o(" \u2014 "),UN=a("a"),E3o=o("MPNetForMaskedLM"),C3o=o(" (MPNet model)"),w3o=l(),E6=a("li"),wie=a("strong"),A3o=o("nystromformer"),y3o=o(" \u2014 "),JN=a("a"),L3o=o("NystromformerForMaskedLM"),x3o=o(" (Nystromformer model)"),$3o=l(),C6=a("li"),Aie=a("strong"),k3o=o("perceiver"),S3o=o(" \u2014 "),YN=a("a"),R3o=o("PerceiverForMaskedLM"),B3o=o(" (Perceiver model)"),P3o=l(),w6=a("li"),yie=a("strong"),I3o=o("qdqbert"),q3o=o(" \u2014 "),KN=a("a"),N3o=o("QDQBertForMaskedLM"),j3o=o(" (QDQBert model)"),D3o=l(),A6=a("li"),Lie=a("strong"),G3o=o("reformer"),O3o=o(" \u2014 "),ZN=a("a"),V3o=o("ReformerForMaskedLM"),X3o=o(" (Reformer model)"),z3o=l(),y6=a("li"),xie=a("strong"),Q3o=o("rembert"),W3o=o(" \u2014 "),ej=a("a"),H3o=o("RemBertForMaskedLM"),U3o=o(" (RemBERT model)"),J3o=l(),L6=a("li"),$ie=a("strong"),Y3o=o("roberta"),K3o=o(" \u2014 "),oj=a("a"),Z3o=o("RobertaForMaskedLM"),ewo=o(" (RoBERTa model)"),owo=l(),x6=a("li"),kie=a("strong"),rwo=o("roformer"),two=o(" \u2014 "),rj=a("a"),awo=o("RoFormerForMaskedLM"),nwo=o(" (RoFormer model)"),swo=l(),$6=a("li"),Sie=a("strong"),lwo=o("squeezebert"),iwo=o(" \u2014 "),tj=a("a"),dwo=o("SqueezeBertForMaskedLM"),cwo=o(" (SqueezeBERT model)"),fwo=l(),k6=a("li"),Rie=a("strong"),mwo=o("tapas"),gwo=o(" \u2014 "),aj=a("a"),hwo=o("TapasForMaskedLM"),pwo=o(" (TAPAS model)"),uwo=l(),S6=a("li"),Bie=a("strong"),_wo=o("wav2vec2"),bwo=o(" \u2014 "),Pie=a("code"),vwo=o("Wav2Vec2ForMaskedLM"),Fwo=o(" (Wav2Vec2 model)"),Two=l(),R6=a("li"),Iie=a("strong"),Mwo=o("xlm"),Ewo=o(" \u2014 "),nj=a("a"),Cwo=o("XLMWithLMHeadModel"),wwo=o(" (XLM model)"),Awo=l(),B6=a("li"),qie=a("strong"),ywo=o("xlm-roberta"),Lwo=o(" \u2014 "),sj=a("a"),xwo=o("XLMRobertaForMaskedLM"),$wo=o(" (XLM-RoBERTa model)"),kwo=l(),P6=a("li"),Nie=a("strong"),Swo=o("xlm-roberta-xl"),Rwo=o(" \u2014 "),lj=a("a"),Bwo=o("XLMRobertaXLForMaskedLM"),Pwo=o(" (XLM-RoBERTa-XL model)"),Iwo=l(),I6=a("li"),jie=a("strong"),qwo=o("yoso"),Nwo=o(" \u2014 "),ij=a("a"),jwo=o("YosoForMaskedLM"),Dwo=o(" (YOSO model)"),Gwo=l(),q6=a("p"),Owo=o("The model is set in evaluation mode by default using "),Die=a("code"),Vwo=o("model.eval()"),Xwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),zwo=o("model.train()"),Qwo=l(),F(N6.$$.fragment),oPe=l(),yi=a("h2"),j6=a("a"),Oie=a("span"),F(Ty.$$.fragment),Wwo=l(),Vie=a("span"),Hwo=o("AutoModelForSeq2SeqLM"),rPe=l(),So=a("div"),F(My.$$.fragment),Uwo=l(),Li=a("p"),Jwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dj=a("a"),Ywo=o("from_pretrained()"),Kwo=o(" class method or the "),cj=a("a"),Zwo=o("from_config()"),eAo=o(` class
method.`),oAo=l(),Ey=a("p"),rAo=o("This class cannot be instantiated directly using "),Xie=a("code"),tAo=o("__init__()"),aAo=o(" (throws an error)."),nAo=l(),tt=a("div"),F(Cy.$$.fragment),sAo=l(),zie=a("p"),lAo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iAo=l(),xi=a("p"),dAo=o(`Note:
Loading a model from its configuration file does `),Qie=a("strong"),cAo=o("not"),fAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),mAo=o("from_pretrained()"),gAo=o(" to load the model weights."),hAo=l(),F(D6.$$.fragment),pAo=l(),Ke=a("div"),F(wy.$$.fragment),uAo=l(),Wie=a("p"),_Ao=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bAo=l(),ya=a("p"),vAo=o("The model class to instantiate is selected based on the "),Hie=a("code"),FAo=o("model_type"),TAo=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),MAo=o("pretrained_model_name_or_path"),EAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),CAo=o("pretrained_model_name_or_path"),wAo=o(":"),AAo=l(),he=a("ul"),G6=a("li"),Yie=a("strong"),yAo=o("bart"),LAo=o(" \u2014 "),mj=a("a"),xAo=o("BartForConditionalGeneration"),$Ao=o(" (BART model)"),kAo=l(),O6=a("li"),Kie=a("strong"),SAo=o("bigbird_pegasus"),RAo=o(" \u2014 "),gj=a("a"),BAo=o("BigBirdPegasusForConditionalGeneration"),PAo=o(" (BigBirdPegasus model)"),IAo=l(),V6=a("li"),Zie=a("strong"),qAo=o("blenderbot"),NAo=o(" \u2014 "),hj=a("a"),jAo=o("BlenderbotForConditionalGeneration"),DAo=o(" (Blenderbot model)"),GAo=l(),X6=a("li"),ede=a("strong"),OAo=o("blenderbot-small"),VAo=o(" \u2014 "),pj=a("a"),XAo=o("BlenderbotSmallForConditionalGeneration"),zAo=o(" (BlenderbotSmall model)"),QAo=l(),z6=a("li"),ode=a("strong"),WAo=o("encoder-decoder"),HAo=o(" \u2014 "),uj=a("a"),UAo=o("EncoderDecoderModel"),JAo=o(" (Encoder decoder model)"),YAo=l(),Q6=a("li"),rde=a("strong"),KAo=o("fsmt"),ZAo=o(" \u2014 "),_j=a("a"),e0o=o("FSMTForConditionalGeneration"),o0o=o(" (FairSeq Machine-Translation model)"),r0o=l(),W6=a("li"),tde=a("strong"),t0o=o("led"),a0o=o(" \u2014 "),bj=a("a"),n0o=o("LEDForConditionalGeneration"),s0o=o(" (LED model)"),l0o=l(),H6=a("li"),ade=a("strong"),i0o=o("m2m_100"),d0o=o(" \u2014 "),vj=a("a"),c0o=o("M2M100ForConditionalGeneration"),f0o=o(" (M2M100 model)"),m0o=l(),U6=a("li"),nde=a("strong"),g0o=o("marian"),h0o=o(" \u2014 "),Fj=a("a"),p0o=o("MarianMTModel"),u0o=o(" (Marian model)"),_0o=l(),J6=a("li"),sde=a("strong"),b0o=o("mbart"),v0o=o(" \u2014 "),Tj=a("a"),F0o=o("MBartForConditionalGeneration"),T0o=o(" (mBART model)"),M0o=l(),Y6=a("li"),lde=a("strong"),E0o=o("mt5"),C0o=o(" \u2014 "),Mj=a("a"),w0o=o("MT5ForConditionalGeneration"),A0o=o(" (mT5 model)"),y0o=l(),K6=a("li"),ide=a("strong"),L0o=o("pegasus"),x0o=o(" \u2014 "),Ej=a("a"),$0o=o("PegasusForConditionalGeneration"),k0o=o(" (Pegasus model)"),S0o=l(),Z6=a("li"),dde=a("strong"),R0o=o("plbart"),B0o=o(" \u2014 "),Cj=a("a"),P0o=o("PLBartForConditionalGeneration"),I0o=o(" (PLBart model)"),q0o=l(),e1=a("li"),cde=a("strong"),N0o=o("prophetnet"),j0o=o(" \u2014 "),wj=a("a"),D0o=o("ProphetNetForConditionalGeneration"),G0o=o(" (ProphetNet model)"),O0o=l(),o1=a("li"),fde=a("strong"),V0o=o("t5"),X0o=o(" \u2014 "),Aj=a("a"),z0o=o("T5ForConditionalGeneration"),Q0o=o(" (T5 model)"),W0o=l(),r1=a("li"),mde=a("strong"),H0o=o("tapex"),U0o=o(" \u2014 "),yj=a("a"),J0o=o("BartForConditionalGeneration"),Y0o=o(" (TAPEX model)"),K0o=l(),t1=a("li"),gde=a("strong"),Z0o=o("xlm-prophetnet"),eyo=o(" \u2014 "),Lj=a("a"),oyo=o("XLMProphetNetForConditionalGeneration"),ryo=o(" (XLMProphetNet model)"),tyo=l(),a1=a("p"),ayo=o("The model is set in evaluation mode by default using "),hde=a("code"),nyo=o("model.eval()"),syo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=a("code"),lyo=o("model.train()"),iyo=l(),F(n1.$$.fragment),tPe=l(),$i=a("h2"),s1=a("a"),ude=a("span"),F(Ay.$$.fragment),dyo=l(),_de=a("span"),cyo=o("AutoModelForSequenceClassification"),aPe=l(),Ro=a("div"),F(yy.$$.fragment),fyo=l(),ki=a("p"),myo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xj=a("a"),gyo=o("from_pretrained()"),hyo=o(" class method or the "),$j=a("a"),pyo=o("from_config()"),uyo=o(` class
method.`),_yo=l(),Ly=a("p"),byo=o("This class cannot be instantiated directly using "),bde=a("code"),vyo=o("__init__()"),Fyo=o(" (throws an error)."),Tyo=l(),at=a("div"),F(xy.$$.fragment),Myo=l(),vde=a("p"),Eyo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cyo=l(),Si=a("p"),wyo=o(`Note:
Loading a model from its configuration file does `),Fde=a("strong"),Ayo=o("not"),yyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=a("a"),Lyo=o("from_pretrained()"),xyo=o(" to load the model weights."),$yo=l(),F(l1.$$.fragment),kyo=l(),Ze=a("div"),F($y.$$.fragment),Syo=l(),Tde=a("p"),Ryo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Byo=l(),La=a("p"),Pyo=o("The model class to instantiate is selected based on the "),Mde=a("code"),Iyo=o("model_type"),qyo=o(` property of the config object (either
passed as an argument or loaded from `),Ede=a("code"),Nyo=o("pretrained_model_name_or_path"),jyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=a("code"),Dyo=o("pretrained_model_name_or_path"),Gyo=o(":"),Oyo=l(),q=a("ul"),i1=a("li"),wde=a("strong"),Vyo=o("albert"),Xyo=o(" \u2014 "),Sj=a("a"),zyo=o("AlbertForSequenceClassification"),Qyo=o(" (ALBERT model)"),Wyo=l(),d1=a("li"),Ade=a("strong"),Hyo=o("bart"),Uyo=o(" \u2014 "),Rj=a("a"),Jyo=o("BartForSequenceClassification"),Yyo=o(" (BART model)"),Kyo=l(),c1=a("li"),yde=a("strong"),Zyo=o("bert"),eLo=o(" \u2014 "),Bj=a("a"),oLo=o("BertForSequenceClassification"),rLo=o(" (BERT model)"),tLo=l(),f1=a("li"),Lde=a("strong"),aLo=o("big_bird"),nLo=o(" \u2014 "),Pj=a("a"),sLo=o("BigBirdForSequenceClassification"),lLo=o(" (BigBird model)"),iLo=l(),m1=a("li"),xde=a("strong"),dLo=o("bigbird_pegasus"),cLo=o(" \u2014 "),Ij=a("a"),fLo=o("BigBirdPegasusForSequenceClassification"),mLo=o(" (BigBirdPegasus model)"),gLo=l(),g1=a("li"),$de=a("strong"),hLo=o("camembert"),pLo=o(" \u2014 "),qj=a("a"),uLo=o("CamembertForSequenceClassification"),_Lo=o(" (CamemBERT model)"),bLo=l(),h1=a("li"),kde=a("strong"),vLo=o("canine"),FLo=o(" \u2014 "),Nj=a("a"),TLo=o("CanineForSequenceClassification"),MLo=o(" (Canine model)"),ELo=l(),p1=a("li"),Sde=a("strong"),CLo=o("convbert"),wLo=o(" \u2014 "),jj=a("a"),ALo=o("ConvBertForSequenceClassification"),yLo=o(" (ConvBERT model)"),LLo=l(),u1=a("li"),Rde=a("strong"),xLo=o("ctrl"),$Lo=o(" \u2014 "),Dj=a("a"),kLo=o("CTRLForSequenceClassification"),SLo=o(" (CTRL model)"),RLo=l(),_1=a("li"),Bde=a("strong"),BLo=o("data2vec-text"),PLo=o(" \u2014 "),Gj=a("a"),ILo=o("Data2VecTextForSequenceClassification"),qLo=o(" (Data2VecText model)"),NLo=l(),b1=a("li"),Pde=a("strong"),jLo=o("deberta"),DLo=o(" \u2014 "),Oj=a("a"),GLo=o("DebertaForSequenceClassification"),OLo=o(" (DeBERTa model)"),VLo=l(),v1=a("li"),Ide=a("strong"),XLo=o("deberta-v2"),zLo=o(" \u2014 "),Vj=a("a"),QLo=o("DebertaV2ForSequenceClassification"),WLo=o(" (DeBERTa-v2 model)"),HLo=l(),F1=a("li"),qde=a("strong"),ULo=o("distilbert"),JLo=o(" \u2014 "),Xj=a("a"),YLo=o("DistilBertForSequenceClassification"),KLo=o(" (DistilBERT model)"),ZLo=l(),T1=a("li"),Nde=a("strong"),e8o=o("electra"),o8o=o(" \u2014 "),zj=a("a"),r8o=o("ElectraForSequenceClassification"),t8o=o(" (ELECTRA model)"),a8o=l(),M1=a("li"),jde=a("strong"),n8o=o("flaubert"),s8o=o(" \u2014 "),Qj=a("a"),l8o=o("FlaubertForSequenceClassification"),i8o=o(" (FlauBERT model)"),d8o=l(),E1=a("li"),Dde=a("strong"),c8o=o("fnet"),f8o=o(" \u2014 "),Wj=a("a"),m8o=o("FNetForSequenceClassification"),g8o=o(" (FNet model)"),h8o=l(),C1=a("li"),Gde=a("strong"),p8o=o("funnel"),u8o=o(" \u2014 "),Hj=a("a"),_8o=o("FunnelForSequenceClassification"),b8o=o(" (Funnel Transformer model)"),v8o=l(),w1=a("li"),Ode=a("strong"),F8o=o("gpt2"),T8o=o(" \u2014 "),Uj=a("a"),M8o=o("GPT2ForSequenceClassification"),E8o=o(" (OpenAI GPT-2 model)"),C8o=l(),A1=a("li"),Vde=a("strong"),w8o=o("gpt_neo"),A8o=o(" \u2014 "),Jj=a("a"),y8o=o("GPTNeoForSequenceClassification"),L8o=o(" (GPT Neo model)"),x8o=l(),y1=a("li"),Xde=a("strong"),$8o=o("gptj"),k8o=o(" \u2014 "),Yj=a("a"),S8o=o("GPTJForSequenceClassification"),R8o=o(" (GPT-J model)"),B8o=l(),L1=a("li"),zde=a("strong"),P8o=o("ibert"),I8o=o(" \u2014 "),Kj=a("a"),q8o=o("IBertForSequenceClassification"),N8o=o(" (I-BERT model)"),j8o=l(),x1=a("li"),Qde=a("strong"),D8o=o("layoutlm"),G8o=o(" \u2014 "),Zj=a("a"),O8o=o("LayoutLMForSequenceClassification"),V8o=o(" (LayoutLM model)"),X8o=l(),$1=a("li"),Wde=a("strong"),z8o=o("layoutlmv2"),Q8o=o(" \u2014 "),eD=a("a"),W8o=o("LayoutLMv2ForSequenceClassification"),H8o=o(" (LayoutLMv2 model)"),U8o=l(),k1=a("li"),Hde=a("strong"),J8o=o("led"),Y8o=o(" \u2014 "),oD=a("a"),K8o=o("LEDForSequenceClassification"),Z8o=o(" (LED model)"),e7o=l(),S1=a("li"),Ude=a("strong"),o7o=o("longformer"),r7o=o(" \u2014 "),rD=a("a"),t7o=o("LongformerForSequenceClassification"),a7o=o(" (Longformer model)"),n7o=l(),R1=a("li"),Jde=a("strong"),s7o=o("mbart"),l7o=o(" \u2014 "),tD=a("a"),i7o=o("MBartForSequenceClassification"),d7o=o(" (mBART model)"),c7o=l(),B1=a("li"),Yde=a("strong"),f7o=o("megatron-bert"),m7o=o(" \u2014 "),aD=a("a"),g7o=o("MegatronBertForSequenceClassification"),h7o=o(" (MegatronBert model)"),p7o=l(),P1=a("li"),Kde=a("strong"),u7o=o("mobilebert"),_7o=o(" \u2014 "),nD=a("a"),b7o=o("MobileBertForSequenceClassification"),v7o=o(" (MobileBERT model)"),F7o=l(),I1=a("li"),Zde=a("strong"),T7o=o("mpnet"),M7o=o(" \u2014 "),sD=a("a"),E7o=o("MPNetForSequenceClassification"),C7o=o(" (MPNet model)"),w7o=l(),q1=a("li"),ece=a("strong"),A7o=o("nystromformer"),y7o=o(" \u2014 "),lD=a("a"),L7o=o("NystromformerForSequenceClassification"),x7o=o(" (Nystromformer model)"),$7o=l(),N1=a("li"),oce=a("strong"),k7o=o("openai-gpt"),S7o=o(" \u2014 "),iD=a("a"),R7o=o("OpenAIGPTForSequenceClassification"),B7o=o(" (OpenAI GPT model)"),P7o=l(),j1=a("li"),rce=a("strong"),I7o=o("perceiver"),q7o=o(" \u2014 "),dD=a("a"),N7o=o("PerceiverForSequenceClassification"),j7o=o(" (Perceiver model)"),D7o=l(),D1=a("li"),tce=a("strong"),G7o=o("plbart"),O7o=o(" \u2014 "),cD=a("a"),V7o=o("PLBartForSequenceClassification"),X7o=o(" (PLBart model)"),z7o=l(),G1=a("li"),ace=a("strong"),Q7o=o("qdqbert"),W7o=o(" \u2014 "),fD=a("a"),H7o=o("QDQBertForSequenceClassification"),U7o=o(" (QDQBert model)"),J7o=l(),O1=a("li"),nce=a("strong"),Y7o=o("reformer"),K7o=o(" \u2014 "),mD=a("a"),Z7o=o("ReformerForSequenceClassification"),exo=o(" (Reformer model)"),oxo=l(),V1=a("li"),sce=a("strong"),rxo=o("rembert"),txo=o(" \u2014 "),gD=a("a"),axo=o("RemBertForSequenceClassification"),nxo=o(" (RemBERT model)"),sxo=l(),X1=a("li"),lce=a("strong"),lxo=o("roberta"),ixo=o(" \u2014 "),hD=a("a"),dxo=o("RobertaForSequenceClassification"),cxo=o(" (RoBERTa model)"),fxo=l(),z1=a("li"),ice=a("strong"),mxo=o("roformer"),gxo=o(" \u2014 "),pD=a("a"),hxo=o("RoFormerForSequenceClassification"),pxo=o(" (RoFormer model)"),uxo=l(),Q1=a("li"),dce=a("strong"),_xo=o("squeezebert"),bxo=o(" \u2014 "),uD=a("a"),vxo=o("SqueezeBertForSequenceClassification"),Fxo=o(" (SqueezeBERT model)"),Txo=l(),W1=a("li"),cce=a("strong"),Mxo=o("tapas"),Exo=o(" \u2014 "),_D=a("a"),Cxo=o("TapasForSequenceClassification"),wxo=o(" (TAPAS model)"),Axo=l(),H1=a("li"),fce=a("strong"),yxo=o("tapex"),Lxo=o(" \u2014 "),bD=a("a"),xxo=o("BartForSequenceClassification"),$xo=o(" (TAPEX model)"),kxo=l(),U1=a("li"),mce=a("strong"),Sxo=o("transfo-xl"),Rxo=o(" \u2014 "),vD=a("a"),Bxo=o("TransfoXLForSequenceClassification"),Pxo=o(" (Transformer-XL model)"),Ixo=l(),J1=a("li"),gce=a("strong"),qxo=o("xlm"),Nxo=o(" \u2014 "),FD=a("a"),jxo=o("XLMForSequenceClassification"),Dxo=o(" (XLM model)"),Gxo=l(),Y1=a("li"),hce=a("strong"),Oxo=o("xlm-roberta"),Vxo=o(" \u2014 "),TD=a("a"),Xxo=o("XLMRobertaForSequenceClassification"),zxo=o(" (XLM-RoBERTa model)"),Qxo=l(),K1=a("li"),pce=a("strong"),Wxo=o("xlm-roberta-xl"),Hxo=o(" \u2014 "),MD=a("a"),Uxo=o("XLMRobertaXLForSequenceClassification"),Jxo=o(" (XLM-RoBERTa-XL model)"),Yxo=l(),Z1=a("li"),uce=a("strong"),Kxo=o("xlnet"),Zxo=o(" \u2014 "),ED=a("a"),e9o=o("XLNetForSequenceClassification"),o9o=o(" (XLNet model)"),r9o=l(),eb=a("li"),_ce=a("strong"),t9o=o("yoso"),a9o=o(" \u2014 "),CD=a("a"),n9o=o("YosoForSequenceClassification"),s9o=o(" (YOSO model)"),l9o=l(),ob=a("p"),i9o=o("The model is set in evaluation mode by default using "),bce=a("code"),d9o=o("model.eval()"),c9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),f9o=o("model.train()"),m9o=l(),F(rb.$$.fragment),nPe=l(),Ri=a("h2"),tb=a("a"),Fce=a("span"),F(ky.$$.fragment),g9o=l(),Tce=a("span"),h9o=o("AutoModelForMultipleChoice"),sPe=l(),Bo=a("div"),F(Sy.$$.fragment),p9o=l(),Bi=a("p"),u9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wD=a("a"),_9o=o("from_pretrained()"),b9o=o(" class method or the "),AD=a("a"),v9o=o("from_config()"),F9o=o(` class
method.`),T9o=l(),Ry=a("p"),M9o=o("This class cannot be instantiated directly using "),Mce=a("code"),E9o=o("__init__()"),C9o=o(" (throws an error)."),w9o=l(),nt=a("div"),F(By.$$.fragment),A9o=l(),Ece=a("p"),y9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L9o=l(),Pi=a("p"),x9o=o(`Note:
Loading a model from its configuration file does `),Cce=a("strong"),$9o=o("not"),k9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yD=a("a"),S9o=o("from_pretrained()"),R9o=o(" to load the model weights."),B9o=l(),F(ab.$$.fragment),P9o=l(),eo=a("div"),F(Py.$$.fragment),I9o=l(),wce=a("p"),q9o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),N9o=l(),xa=a("p"),j9o=o("The model class to instantiate is selected based on the "),Ace=a("code"),D9o=o("model_type"),G9o=o(` property of the config object (either
passed as an argument or loaded from `),yce=a("code"),O9o=o("pretrained_model_name_or_path"),V9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=a("code"),X9o=o("pretrained_model_name_or_path"),z9o=o(":"),Q9o=l(),Y=a("ul"),nb=a("li"),xce=a("strong"),W9o=o("albert"),H9o=o(" \u2014 "),LD=a("a"),U9o=o("AlbertForMultipleChoice"),J9o=o(" (ALBERT model)"),Y9o=l(),sb=a("li"),$ce=a("strong"),K9o=o("bert"),Z9o=o(" \u2014 "),xD=a("a"),e$o=o("BertForMultipleChoice"),o$o=o(" (BERT model)"),r$o=l(),lb=a("li"),kce=a("strong"),t$o=o("big_bird"),a$o=o(" \u2014 "),$D=a("a"),n$o=o("BigBirdForMultipleChoice"),s$o=o(" (BigBird model)"),l$o=l(),ib=a("li"),Sce=a("strong"),i$o=o("camembert"),d$o=o(" \u2014 "),kD=a("a"),c$o=o("CamembertForMultipleChoice"),f$o=o(" (CamemBERT model)"),m$o=l(),db=a("li"),Rce=a("strong"),g$o=o("canine"),h$o=o(" \u2014 "),SD=a("a"),p$o=o("CanineForMultipleChoice"),u$o=o(" (Canine model)"),_$o=l(),cb=a("li"),Bce=a("strong"),b$o=o("convbert"),v$o=o(" \u2014 "),RD=a("a"),F$o=o("ConvBertForMultipleChoice"),T$o=o(" (ConvBERT model)"),M$o=l(),fb=a("li"),Pce=a("strong"),E$o=o("data2vec-text"),C$o=o(" \u2014 "),BD=a("a"),w$o=o("Data2VecTextForMultipleChoice"),A$o=o(" (Data2VecText model)"),y$o=l(),mb=a("li"),Ice=a("strong"),L$o=o("distilbert"),x$o=o(" \u2014 "),PD=a("a"),$$o=o("DistilBertForMultipleChoice"),k$o=o(" (DistilBERT model)"),S$o=l(),gb=a("li"),qce=a("strong"),R$o=o("electra"),B$o=o(" \u2014 "),ID=a("a"),P$o=o("ElectraForMultipleChoice"),I$o=o(" (ELECTRA model)"),q$o=l(),hb=a("li"),Nce=a("strong"),N$o=o("flaubert"),j$o=o(" \u2014 "),qD=a("a"),D$o=o("FlaubertForMultipleChoice"),G$o=o(" (FlauBERT model)"),O$o=l(),pb=a("li"),jce=a("strong"),V$o=o("fnet"),X$o=o(" \u2014 "),ND=a("a"),z$o=o("FNetForMultipleChoice"),Q$o=o(" (FNet model)"),W$o=l(),ub=a("li"),Dce=a("strong"),H$o=o("funnel"),U$o=o(" \u2014 "),jD=a("a"),J$o=o("FunnelForMultipleChoice"),Y$o=o(" (Funnel Transformer model)"),K$o=l(),_b=a("li"),Gce=a("strong"),Z$o=o("ibert"),eko=o(" \u2014 "),DD=a("a"),oko=o("IBertForMultipleChoice"),rko=o(" (I-BERT model)"),tko=l(),bb=a("li"),Oce=a("strong"),ako=o("longformer"),nko=o(" \u2014 "),GD=a("a"),sko=o("LongformerForMultipleChoice"),lko=o(" (Longformer model)"),iko=l(),vb=a("li"),Vce=a("strong"),dko=o("megatron-bert"),cko=o(" \u2014 "),OD=a("a"),fko=o("MegatronBertForMultipleChoice"),mko=o(" (MegatronBert model)"),gko=l(),Fb=a("li"),Xce=a("strong"),hko=o("mobilebert"),pko=o(" \u2014 "),VD=a("a"),uko=o("MobileBertForMultipleChoice"),_ko=o(" (MobileBERT model)"),bko=l(),Tb=a("li"),zce=a("strong"),vko=o("mpnet"),Fko=o(" \u2014 "),XD=a("a"),Tko=o("MPNetForMultipleChoice"),Mko=o(" (MPNet model)"),Eko=l(),Mb=a("li"),Qce=a("strong"),Cko=o("nystromformer"),wko=o(" \u2014 "),zD=a("a"),Ako=o("NystromformerForMultipleChoice"),yko=o(" (Nystromformer model)"),Lko=l(),Eb=a("li"),Wce=a("strong"),xko=o("qdqbert"),$ko=o(" \u2014 "),QD=a("a"),kko=o("QDQBertForMultipleChoice"),Sko=o(" (QDQBert model)"),Rko=l(),Cb=a("li"),Hce=a("strong"),Bko=o("rembert"),Pko=o(" \u2014 "),WD=a("a"),Iko=o("RemBertForMultipleChoice"),qko=o(" (RemBERT model)"),Nko=l(),wb=a("li"),Uce=a("strong"),jko=o("roberta"),Dko=o(" \u2014 "),HD=a("a"),Gko=o("RobertaForMultipleChoice"),Oko=o(" (RoBERTa model)"),Vko=l(),Ab=a("li"),Jce=a("strong"),Xko=o("roformer"),zko=o(" \u2014 "),UD=a("a"),Qko=o("RoFormerForMultipleChoice"),Wko=o(" (RoFormer model)"),Hko=l(),yb=a("li"),Yce=a("strong"),Uko=o("squeezebert"),Jko=o(" \u2014 "),JD=a("a"),Yko=o("SqueezeBertForMultipleChoice"),Kko=o(" (SqueezeBERT model)"),Zko=l(),Lb=a("li"),Kce=a("strong"),eSo=o("xlm"),oSo=o(" \u2014 "),YD=a("a"),rSo=o("XLMForMultipleChoice"),tSo=o(" (XLM model)"),aSo=l(),xb=a("li"),Zce=a("strong"),nSo=o("xlm-roberta"),sSo=o(" \u2014 "),KD=a("a"),lSo=o("XLMRobertaForMultipleChoice"),iSo=o(" (XLM-RoBERTa model)"),dSo=l(),$b=a("li"),efe=a("strong"),cSo=o("xlm-roberta-xl"),fSo=o(" \u2014 "),ZD=a("a"),mSo=o("XLMRobertaXLForMultipleChoice"),gSo=o(" (XLM-RoBERTa-XL model)"),hSo=l(),kb=a("li"),ofe=a("strong"),pSo=o("xlnet"),uSo=o(" \u2014 "),eG=a("a"),_So=o("XLNetForMultipleChoice"),bSo=o(" (XLNet model)"),vSo=l(),Sb=a("li"),rfe=a("strong"),FSo=o("yoso"),TSo=o(" \u2014 "),oG=a("a"),MSo=o("YosoForMultipleChoice"),ESo=o(" (YOSO model)"),CSo=l(),Rb=a("p"),wSo=o("The model is set in evaluation mode by default using "),tfe=a("code"),ASo=o("model.eval()"),ySo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),LSo=o("model.train()"),xSo=l(),F(Bb.$$.fragment),lPe=l(),Ii=a("h2"),Pb=a("a"),nfe=a("span"),F(Iy.$$.fragment),$So=l(),sfe=a("span"),kSo=o("AutoModelForNextSentencePrediction"),iPe=l(),Po=a("div"),F(qy.$$.fragment),SSo=l(),qi=a("p"),RSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rG=a("a"),BSo=o("from_pretrained()"),PSo=o(" class method or the "),tG=a("a"),ISo=o("from_config()"),qSo=o(` class
method.`),NSo=l(),Ny=a("p"),jSo=o("This class cannot be instantiated directly using "),lfe=a("code"),DSo=o("__init__()"),GSo=o(" (throws an error)."),OSo=l(),st=a("div"),F(jy.$$.fragment),VSo=l(),ife=a("p"),XSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),zSo=l(),Ni=a("p"),QSo=o(`Note:
Loading a model from its configuration file does `),dfe=a("strong"),WSo=o("not"),HSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),USo=o("from_pretrained()"),JSo=o(" to load the model weights."),YSo=l(),F(Ib.$$.fragment),KSo=l(),oo=a("div"),F(Dy.$$.fragment),ZSo=l(),cfe=a("p"),eRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oRo=l(),$a=a("p"),rRo=o("The model class to instantiate is selected based on the "),ffe=a("code"),tRo=o("model_type"),aRo=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),nRo=o("pretrained_model_name_or_path"),sRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=a("code"),lRo=o("pretrained_model_name_or_path"),iRo=o(":"),dRo=l(),Ur=a("ul"),qb=a("li"),hfe=a("strong"),cRo=o("bert"),fRo=o(" \u2014 "),nG=a("a"),mRo=o("BertForNextSentencePrediction"),gRo=o(" (BERT model)"),hRo=l(),Nb=a("li"),pfe=a("strong"),pRo=o("fnet"),uRo=o(" \u2014 "),sG=a("a"),_Ro=o("FNetForNextSentencePrediction"),bRo=o(" (FNet model)"),vRo=l(),jb=a("li"),ufe=a("strong"),FRo=o("megatron-bert"),TRo=o(" \u2014 "),lG=a("a"),MRo=o("MegatronBertForNextSentencePrediction"),ERo=o(" (MegatronBert model)"),CRo=l(),Db=a("li"),_fe=a("strong"),wRo=o("mobilebert"),ARo=o(" \u2014 "),iG=a("a"),yRo=o("MobileBertForNextSentencePrediction"),LRo=o(" (MobileBERT model)"),xRo=l(),Gb=a("li"),bfe=a("strong"),$Ro=o("qdqbert"),kRo=o(" \u2014 "),dG=a("a"),SRo=o("QDQBertForNextSentencePrediction"),RRo=o(" (QDQBert model)"),BRo=l(),Ob=a("p"),PRo=o("The model is set in evaluation mode by default using "),vfe=a("code"),IRo=o("model.eval()"),qRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=a("code"),NRo=o("model.train()"),jRo=l(),F(Vb.$$.fragment),dPe=l(),ji=a("h2"),Xb=a("a"),Tfe=a("span"),F(Gy.$$.fragment),DRo=l(),Mfe=a("span"),GRo=o("AutoModelForTokenClassification"),cPe=l(),Io=a("div"),F(Oy.$$.fragment),ORo=l(),Di=a("p"),VRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cG=a("a"),XRo=o("from_pretrained()"),zRo=o(" class method or the "),fG=a("a"),QRo=o("from_config()"),WRo=o(` class
method.`),HRo=l(),Vy=a("p"),URo=o("This class cannot be instantiated directly using "),Efe=a("code"),JRo=o("__init__()"),YRo=o(" (throws an error)."),KRo=l(),lt=a("div"),F(Xy.$$.fragment),ZRo=l(),Cfe=a("p"),eBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),oBo=l(),Gi=a("p"),rBo=o(`Note:
Loading a model from its configuration file does `),wfe=a("strong"),tBo=o("not"),aBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),nBo=o("from_pretrained()"),sBo=o(" to load the model weights."),lBo=l(),F(zb.$$.fragment),iBo=l(),ro=a("div"),F(zy.$$.fragment),dBo=l(),Afe=a("p"),cBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),fBo=l(),ka=a("p"),mBo=o("The model class to instantiate is selected based on the "),yfe=a("code"),gBo=o("model_type"),hBo=o(` property of the config object (either
passed as an argument or loaded from `),Lfe=a("code"),pBo=o("pretrained_model_name_or_path"),uBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=a("code"),_Bo=o("pretrained_model_name_or_path"),bBo=o(":"),vBo=l(),U=a("ul"),Qb=a("li"),$fe=a("strong"),FBo=o("albert"),TBo=o(" \u2014 "),gG=a("a"),MBo=o("AlbertForTokenClassification"),EBo=o(" (ALBERT model)"),CBo=l(),Wb=a("li"),kfe=a("strong"),wBo=o("bert"),ABo=o(" \u2014 "),hG=a("a"),yBo=o("BertForTokenClassification"),LBo=o(" (BERT model)"),xBo=l(),Hb=a("li"),Sfe=a("strong"),$Bo=o("big_bird"),kBo=o(" \u2014 "),pG=a("a"),SBo=o("BigBirdForTokenClassification"),RBo=o(" (BigBird model)"),BBo=l(),Ub=a("li"),Rfe=a("strong"),PBo=o("camembert"),IBo=o(" \u2014 "),uG=a("a"),qBo=o("CamembertForTokenClassification"),NBo=o(" (CamemBERT model)"),jBo=l(),Jb=a("li"),Bfe=a("strong"),DBo=o("canine"),GBo=o(" \u2014 "),_G=a("a"),OBo=o("CanineForTokenClassification"),VBo=o(" (Canine model)"),XBo=l(),Yb=a("li"),Pfe=a("strong"),zBo=o("convbert"),QBo=o(" \u2014 "),bG=a("a"),WBo=o("ConvBertForTokenClassification"),HBo=o(" (ConvBERT model)"),UBo=l(),Kb=a("li"),Ife=a("strong"),JBo=o("data2vec-text"),YBo=o(" \u2014 "),vG=a("a"),KBo=o("Data2VecTextForTokenClassification"),ZBo=o(" (Data2VecText model)"),ePo=l(),Zb=a("li"),qfe=a("strong"),oPo=o("deberta"),rPo=o(" \u2014 "),FG=a("a"),tPo=o("DebertaForTokenClassification"),aPo=o(" (DeBERTa model)"),nPo=l(),e4=a("li"),Nfe=a("strong"),sPo=o("deberta-v2"),lPo=o(" \u2014 "),TG=a("a"),iPo=o("DebertaV2ForTokenClassification"),dPo=o(" (DeBERTa-v2 model)"),cPo=l(),o4=a("li"),jfe=a("strong"),fPo=o("distilbert"),mPo=o(" \u2014 "),MG=a("a"),gPo=o("DistilBertForTokenClassification"),hPo=o(" (DistilBERT model)"),pPo=l(),r4=a("li"),Dfe=a("strong"),uPo=o("electra"),_Po=o(" \u2014 "),EG=a("a"),bPo=o("ElectraForTokenClassification"),vPo=o(" (ELECTRA model)"),FPo=l(),t4=a("li"),Gfe=a("strong"),TPo=o("flaubert"),MPo=o(" \u2014 "),CG=a("a"),EPo=o("FlaubertForTokenClassification"),CPo=o(" (FlauBERT model)"),wPo=l(),a4=a("li"),Ofe=a("strong"),APo=o("fnet"),yPo=o(" \u2014 "),wG=a("a"),LPo=o("FNetForTokenClassification"),xPo=o(" (FNet model)"),$Po=l(),n4=a("li"),Vfe=a("strong"),kPo=o("funnel"),SPo=o(" \u2014 "),AG=a("a"),RPo=o("FunnelForTokenClassification"),BPo=o(" (Funnel Transformer model)"),PPo=l(),s4=a("li"),Xfe=a("strong"),IPo=o("gpt2"),qPo=o(" \u2014 "),yG=a("a"),NPo=o("GPT2ForTokenClassification"),jPo=o(" (OpenAI GPT-2 model)"),DPo=l(),l4=a("li"),zfe=a("strong"),GPo=o("ibert"),OPo=o(" \u2014 "),LG=a("a"),VPo=o("IBertForTokenClassification"),XPo=o(" (I-BERT model)"),zPo=l(),i4=a("li"),Qfe=a("strong"),QPo=o("layoutlm"),WPo=o(" \u2014 "),xG=a("a"),HPo=o("LayoutLMForTokenClassification"),UPo=o(" (LayoutLM model)"),JPo=l(),d4=a("li"),Wfe=a("strong"),YPo=o("layoutlmv2"),KPo=o(" \u2014 "),$G=a("a"),ZPo=o("LayoutLMv2ForTokenClassification"),eIo=o(" (LayoutLMv2 model)"),oIo=l(),c4=a("li"),Hfe=a("strong"),rIo=o("longformer"),tIo=o(" \u2014 "),kG=a("a"),aIo=o("LongformerForTokenClassification"),nIo=o(" (Longformer model)"),sIo=l(),f4=a("li"),Ufe=a("strong"),lIo=o("megatron-bert"),iIo=o(" \u2014 "),SG=a("a"),dIo=o("MegatronBertForTokenClassification"),cIo=o(" (MegatronBert model)"),fIo=l(),m4=a("li"),Jfe=a("strong"),mIo=o("mobilebert"),gIo=o(" \u2014 "),RG=a("a"),hIo=o("MobileBertForTokenClassification"),pIo=o(" (MobileBERT model)"),uIo=l(),g4=a("li"),Yfe=a("strong"),_Io=o("mpnet"),bIo=o(" \u2014 "),BG=a("a"),vIo=o("MPNetForTokenClassification"),FIo=o(" (MPNet model)"),TIo=l(),h4=a("li"),Kfe=a("strong"),MIo=o("nystromformer"),EIo=o(" \u2014 "),PG=a("a"),CIo=o("NystromformerForTokenClassification"),wIo=o(" (Nystromformer model)"),AIo=l(),p4=a("li"),Zfe=a("strong"),yIo=o("qdqbert"),LIo=o(" \u2014 "),IG=a("a"),xIo=o("QDQBertForTokenClassification"),$Io=o(" (QDQBert model)"),kIo=l(),u4=a("li"),eme=a("strong"),SIo=o("rembert"),RIo=o(" \u2014 "),qG=a("a"),BIo=o("RemBertForTokenClassification"),PIo=o(" (RemBERT model)"),IIo=l(),_4=a("li"),ome=a("strong"),qIo=o("roberta"),NIo=o(" \u2014 "),NG=a("a"),jIo=o("RobertaForTokenClassification"),DIo=o(" (RoBERTa model)"),GIo=l(),b4=a("li"),rme=a("strong"),OIo=o("roformer"),VIo=o(" \u2014 "),jG=a("a"),XIo=o("RoFormerForTokenClassification"),zIo=o(" (RoFormer model)"),QIo=l(),v4=a("li"),tme=a("strong"),WIo=o("squeezebert"),HIo=o(" \u2014 "),DG=a("a"),UIo=o("SqueezeBertForTokenClassification"),JIo=o(" (SqueezeBERT model)"),YIo=l(),F4=a("li"),ame=a("strong"),KIo=o("xlm"),ZIo=o(" \u2014 "),GG=a("a"),eqo=o("XLMForTokenClassification"),oqo=o(" (XLM model)"),rqo=l(),T4=a("li"),nme=a("strong"),tqo=o("xlm-roberta"),aqo=o(" \u2014 "),OG=a("a"),nqo=o("XLMRobertaForTokenClassification"),sqo=o(" (XLM-RoBERTa model)"),lqo=l(),M4=a("li"),sme=a("strong"),iqo=o("xlm-roberta-xl"),dqo=o(" \u2014 "),VG=a("a"),cqo=o("XLMRobertaXLForTokenClassification"),fqo=o(" (XLM-RoBERTa-XL model)"),mqo=l(),E4=a("li"),lme=a("strong"),gqo=o("xlnet"),hqo=o(" \u2014 "),XG=a("a"),pqo=o("XLNetForTokenClassification"),uqo=o(" (XLNet model)"),_qo=l(),C4=a("li"),ime=a("strong"),bqo=o("yoso"),vqo=o(" \u2014 "),zG=a("a"),Fqo=o("YosoForTokenClassification"),Tqo=o(" (YOSO model)"),Mqo=l(),w4=a("p"),Eqo=o("The model is set in evaluation mode by default using "),dme=a("code"),Cqo=o("model.eval()"),wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=a("code"),Aqo=o("model.train()"),yqo=l(),F(A4.$$.fragment),fPe=l(),Oi=a("h2"),y4=a("a"),fme=a("span"),F(Qy.$$.fragment),Lqo=l(),mme=a("span"),xqo=o("AutoModelForQuestionAnswering"),mPe=l(),qo=a("div"),F(Wy.$$.fragment),$qo=l(),Vi=a("p"),kqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QG=a("a"),Sqo=o("from_pretrained()"),Rqo=o(" class method or the "),WG=a("a"),Bqo=o("from_config()"),Pqo=o(` class
method.`),Iqo=l(),Hy=a("p"),qqo=o("This class cannot be instantiated directly using "),gme=a("code"),Nqo=o("__init__()"),jqo=o(" (throws an error)."),Dqo=l(),it=a("div"),F(Uy.$$.fragment),Gqo=l(),hme=a("p"),Oqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Vqo=l(),Xi=a("p"),Xqo=o(`Note:
Loading a model from its configuration file does `),pme=a("strong"),zqo=o("not"),Qqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),Wqo=o("from_pretrained()"),Hqo=o(" to load the model weights."),Uqo=l(),F(L4.$$.fragment),Jqo=l(),to=a("div"),F(Jy.$$.fragment),Yqo=l(),ume=a("p"),Kqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zqo=l(),Sa=a("p"),eNo=o("The model class to instantiate is selected based on the "),_me=a("code"),oNo=o("model_type"),rNo=o(` property of the config object (either
passed as an argument or loaded from `),bme=a("code"),tNo=o("pretrained_model_name_or_path"),aNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=a("code"),nNo=o("pretrained_model_name_or_path"),sNo=o(":"),lNo=l(),O=a("ul"),x4=a("li"),Fme=a("strong"),iNo=o("albert"),dNo=o(" \u2014 "),UG=a("a"),cNo=o("AlbertForQuestionAnswering"),fNo=o(" (ALBERT model)"),mNo=l(),$4=a("li"),Tme=a("strong"),gNo=o("bart"),hNo=o(" \u2014 "),JG=a("a"),pNo=o("BartForQuestionAnswering"),uNo=o(" (BART model)"),_No=l(),k4=a("li"),Mme=a("strong"),bNo=o("bert"),vNo=o(" \u2014 "),YG=a("a"),FNo=o("BertForQuestionAnswering"),TNo=o(" (BERT model)"),MNo=l(),S4=a("li"),Eme=a("strong"),ENo=o("big_bird"),CNo=o(" \u2014 "),KG=a("a"),wNo=o("BigBirdForQuestionAnswering"),ANo=o(" (BigBird model)"),yNo=l(),R4=a("li"),Cme=a("strong"),LNo=o("bigbird_pegasus"),xNo=o(" \u2014 "),ZG=a("a"),$No=o("BigBirdPegasusForQuestionAnswering"),kNo=o(" (BigBirdPegasus model)"),SNo=l(),B4=a("li"),wme=a("strong"),RNo=o("camembert"),BNo=o(" \u2014 "),eO=a("a"),PNo=o("CamembertForQuestionAnswering"),INo=o(" (CamemBERT model)"),qNo=l(),P4=a("li"),Ame=a("strong"),NNo=o("canine"),jNo=o(" \u2014 "),oO=a("a"),DNo=o("CanineForQuestionAnswering"),GNo=o(" (Canine model)"),ONo=l(),I4=a("li"),yme=a("strong"),VNo=o("convbert"),XNo=o(" \u2014 "),rO=a("a"),zNo=o("ConvBertForQuestionAnswering"),QNo=o(" (ConvBERT model)"),WNo=l(),q4=a("li"),Lme=a("strong"),HNo=o("data2vec-text"),UNo=o(" \u2014 "),tO=a("a"),JNo=o("Data2VecTextForQuestionAnswering"),YNo=o(" (Data2VecText model)"),KNo=l(),N4=a("li"),xme=a("strong"),ZNo=o("deberta"),ejo=o(" \u2014 "),aO=a("a"),ojo=o("DebertaForQuestionAnswering"),rjo=o(" (DeBERTa model)"),tjo=l(),j4=a("li"),$me=a("strong"),ajo=o("deberta-v2"),njo=o(" \u2014 "),nO=a("a"),sjo=o("DebertaV2ForQuestionAnswering"),ljo=o(" (DeBERTa-v2 model)"),ijo=l(),D4=a("li"),kme=a("strong"),djo=o("distilbert"),cjo=o(" \u2014 "),sO=a("a"),fjo=o("DistilBertForQuestionAnswering"),mjo=o(" (DistilBERT model)"),gjo=l(),G4=a("li"),Sme=a("strong"),hjo=o("electra"),pjo=o(" \u2014 "),lO=a("a"),ujo=o("ElectraForQuestionAnswering"),_jo=o(" (ELECTRA model)"),bjo=l(),O4=a("li"),Rme=a("strong"),vjo=o("flaubert"),Fjo=o(" \u2014 "),iO=a("a"),Tjo=o("FlaubertForQuestionAnsweringSimple"),Mjo=o(" (FlauBERT model)"),Ejo=l(),V4=a("li"),Bme=a("strong"),Cjo=o("fnet"),wjo=o(" \u2014 "),dO=a("a"),Ajo=o("FNetForQuestionAnswering"),yjo=o(" (FNet model)"),Ljo=l(),X4=a("li"),Pme=a("strong"),xjo=o("funnel"),$jo=o(" \u2014 "),cO=a("a"),kjo=o("FunnelForQuestionAnswering"),Sjo=o(" (Funnel Transformer model)"),Rjo=l(),z4=a("li"),Ime=a("strong"),Bjo=o("gptj"),Pjo=o(" \u2014 "),fO=a("a"),Ijo=o("GPTJForQuestionAnswering"),qjo=o(" (GPT-J model)"),Njo=l(),Q4=a("li"),qme=a("strong"),jjo=o("ibert"),Djo=o(" \u2014 "),mO=a("a"),Gjo=o("IBertForQuestionAnswering"),Ojo=o(" (I-BERT model)"),Vjo=l(),W4=a("li"),Nme=a("strong"),Xjo=o("layoutlmv2"),zjo=o(" \u2014 "),gO=a("a"),Qjo=o("LayoutLMv2ForQuestionAnswering"),Wjo=o(" (LayoutLMv2 model)"),Hjo=l(),H4=a("li"),jme=a("strong"),Ujo=o("led"),Jjo=o(" \u2014 "),hO=a("a"),Yjo=o("LEDForQuestionAnswering"),Kjo=o(" (LED model)"),Zjo=l(),U4=a("li"),Dme=a("strong"),eDo=o("longformer"),oDo=o(" \u2014 "),pO=a("a"),rDo=o("LongformerForQuestionAnswering"),tDo=o(" (Longformer model)"),aDo=l(),J4=a("li"),Gme=a("strong"),nDo=o("lxmert"),sDo=o(" \u2014 "),uO=a("a"),lDo=o("LxmertForQuestionAnswering"),iDo=o(" (LXMERT model)"),dDo=l(),Y4=a("li"),Ome=a("strong"),cDo=o("mbart"),fDo=o(" \u2014 "),_O=a("a"),mDo=o("MBartForQuestionAnswering"),gDo=o(" (mBART model)"),hDo=l(),K4=a("li"),Vme=a("strong"),pDo=o("megatron-bert"),uDo=o(" \u2014 "),bO=a("a"),_Do=o("MegatronBertForQuestionAnswering"),bDo=o(" (MegatronBert model)"),vDo=l(),Z4=a("li"),Xme=a("strong"),FDo=o("mobilebert"),TDo=o(" \u2014 "),vO=a("a"),MDo=o("MobileBertForQuestionAnswering"),EDo=o(" (MobileBERT model)"),CDo=l(),e2=a("li"),zme=a("strong"),wDo=o("mpnet"),ADo=o(" \u2014 "),FO=a("a"),yDo=o("MPNetForQuestionAnswering"),LDo=o(" (MPNet model)"),xDo=l(),o2=a("li"),Qme=a("strong"),$Do=o("nystromformer"),kDo=o(" \u2014 "),TO=a("a"),SDo=o("NystromformerForQuestionAnswering"),RDo=o(" (Nystromformer model)"),BDo=l(),r2=a("li"),Wme=a("strong"),PDo=o("qdqbert"),IDo=o(" \u2014 "),MO=a("a"),qDo=o("QDQBertForQuestionAnswering"),NDo=o(" (QDQBert model)"),jDo=l(),t2=a("li"),Hme=a("strong"),DDo=o("reformer"),GDo=o(" \u2014 "),EO=a("a"),ODo=o("ReformerForQuestionAnswering"),VDo=o(" (Reformer model)"),XDo=l(),a2=a("li"),Ume=a("strong"),zDo=o("rembert"),QDo=o(" \u2014 "),CO=a("a"),WDo=o("RemBertForQuestionAnswering"),HDo=o(" (RemBERT model)"),UDo=l(),n2=a("li"),Jme=a("strong"),JDo=o("roberta"),YDo=o(" \u2014 "),wO=a("a"),KDo=o("RobertaForQuestionAnswering"),ZDo=o(" (RoBERTa model)"),eGo=l(),s2=a("li"),Yme=a("strong"),oGo=o("roformer"),rGo=o(" \u2014 "),AO=a("a"),tGo=o("RoFormerForQuestionAnswering"),aGo=o(" (RoFormer model)"),nGo=l(),l2=a("li"),Kme=a("strong"),sGo=o("splinter"),lGo=o(" \u2014 "),yO=a("a"),iGo=o("SplinterForQuestionAnswering"),dGo=o(" (Splinter model)"),cGo=l(),i2=a("li"),Zme=a("strong"),fGo=o("squeezebert"),mGo=o(" \u2014 "),LO=a("a"),gGo=o("SqueezeBertForQuestionAnswering"),hGo=o(" (SqueezeBERT model)"),pGo=l(),d2=a("li"),ege=a("strong"),uGo=o("xlm"),_Go=o(" \u2014 "),xO=a("a"),bGo=o("XLMForQuestionAnsweringSimple"),vGo=o(" (XLM model)"),FGo=l(),c2=a("li"),oge=a("strong"),TGo=o("xlm-roberta"),MGo=o(" \u2014 "),$O=a("a"),EGo=o("XLMRobertaForQuestionAnswering"),CGo=o(" (XLM-RoBERTa model)"),wGo=l(),f2=a("li"),rge=a("strong"),AGo=o("xlm-roberta-xl"),yGo=o(" \u2014 "),kO=a("a"),LGo=o("XLMRobertaXLForQuestionAnswering"),xGo=o(" (XLM-RoBERTa-XL model)"),$Go=l(),m2=a("li"),tge=a("strong"),kGo=o("xlnet"),SGo=o(" \u2014 "),SO=a("a"),RGo=o("XLNetForQuestionAnsweringSimple"),BGo=o(" (XLNet model)"),PGo=l(),g2=a("li"),age=a("strong"),IGo=o("yoso"),qGo=o(" \u2014 "),RO=a("a"),NGo=o("YosoForQuestionAnswering"),jGo=o(" (YOSO model)"),DGo=l(),h2=a("p"),GGo=o("The model is set in evaluation mode by default using "),nge=a("code"),OGo=o("model.eval()"),VGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),XGo=o("model.train()"),zGo=l(),F(p2.$$.fragment),gPe=l(),zi=a("h2"),u2=a("a"),lge=a("span"),F(Yy.$$.fragment),QGo=l(),ige=a("span"),WGo=o("AutoModelForTableQuestionAnswering"),hPe=l(),No=a("div"),F(Ky.$$.fragment),HGo=l(),Qi=a("p"),UGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BO=a("a"),JGo=o("from_pretrained()"),YGo=o(" class method or the "),PO=a("a"),KGo=o("from_config()"),ZGo=o(` class
method.`),eOo=l(),Zy=a("p"),oOo=o("This class cannot be instantiated directly using "),dge=a("code"),rOo=o("__init__()"),tOo=o(" (throws an error)."),aOo=l(),dt=a("div"),F(eL.$$.fragment),nOo=l(),cge=a("p"),sOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lOo=l(),Wi=a("p"),iOo=o(`Note:
Loading a model from its configuration file does `),fge=a("strong"),dOo=o("not"),cOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),fOo=o("from_pretrained()"),mOo=o(" to load the model weights."),gOo=l(),F(_2.$$.fragment),hOo=l(),ao=a("div"),F(oL.$$.fragment),pOo=l(),mge=a("p"),uOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_Oo=l(),Ra=a("p"),bOo=o("The model class to instantiate is selected based on the "),gge=a("code"),vOo=o("model_type"),FOo=o(` property of the config object (either
passed as an argument or loaded from `),hge=a("code"),TOo=o("pretrained_model_name_or_path"),MOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=a("code"),EOo=o("pretrained_model_name_or_path"),COo=o(":"),wOo=l(),uge=a("ul"),b2=a("li"),_ge=a("strong"),AOo=o("tapas"),yOo=o(" \u2014 "),qO=a("a"),LOo=o("TapasForQuestionAnswering"),xOo=o(" (TAPAS model)"),$Oo=l(),v2=a("p"),kOo=o("The model is set in evaluation mode by default using "),bge=a("code"),SOo=o("model.eval()"),ROo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=a("code"),BOo=o("model.train()"),POo=l(),F(F2.$$.fragment),pPe=l(),Hi=a("h2"),T2=a("a"),Fge=a("span"),F(rL.$$.fragment),IOo=l(),Tge=a("span"),qOo=o("AutoModelForImageClassification"),uPe=l(),jo=a("div"),F(tL.$$.fragment),NOo=l(),Ui=a("p"),jOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NO=a("a"),DOo=o("from_pretrained()"),GOo=o(" class method or the "),jO=a("a"),OOo=o("from_config()"),VOo=o(` class
method.`),XOo=l(),aL=a("p"),zOo=o("This class cannot be instantiated directly using "),Mge=a("code"),QOo=o("__init__()"),WOo=o(" (throws an error)."),HOo=l(),ct=a("div"),F(nL.$$.fragment),UOo=l(),Ege=a("p"),JOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),YOo=l(),Ji=a("p"),KOo=o(`Note:
Loading a model from its configuration file does `),Cge=a("strong"),ZOo=o("not"),eVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),oVo=o("from_pretrained()"),rVo=o(" to load the model weights."),tVo=l(),F(M2.$$.fragment),aVo=l(),no=a("div"),F(sL.$$.fragment),nVo=l(),wge=a("p"),sVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lVo=l(),Ba=a("p"),iVo=o("The model class to instantiate is selected based on the "),Age=a("code"),dVo=o("model_type"),cVo=o(` property of the config object (either
passed as an argument or loaded from `),yge=a("code"),fVo=o("pretrained_model_name_or_path"),mVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),gVo=o("pretrained_model_name_or_path"),hVo=o(":"),pVo=l(),Fe=a("ul"),E2=a("li"),xge=a("strong"),uVo=o("beit"),_Vo=o(" \u2014 "),GO=a("a"),bVo=o("BeitForImageClassification"),vVo=o(" (BEiT model)"),FVo=l(),C2=a("li"),$ge=a("strong"),TVo=o("convnext"),MVo=o(" \u2014 "),OO=a("a"),EVo=o("ConvNextForImageClassification"),CVo=o(" (ConvNext model)"),wVo=l(),w2=a("li"),kge=a("strong"),AVo=o("data2vec-vision"),yVo=o(" \u2014 "),VO=a("a"),LVo=o("Data2VecVisionForImageClassification"),xVo=o(" (Data2VecVision model)"),$Vo=l(),xs=a("li"),Sge=a("strong"),kVo=o("deit"),SVo=o(" \u2014 "),XO=a("a"),RVo=o("DeiTForImageClassification"),BVo=o(" or "),zO=a("a"),PVo=o("DeiTForImageClassificationWithTeacher"),IVo=o(" (DeiT model)"),qVo=l(),A2=a("li"),Rge=a("strong"),NVo=o("imagegpt"),jVo=o(" \u2014 "),QO=a("a"),DVo=o("ImageGPTForImageClassification"),GVo=o(" (ImageGPT model)"),OVo=l(),ft=a("li"),Bge=a("strong"),VVo=o("perceiver"),XVo=o(" \u2014 "),WO=a("a"),zVo=o("PerceiverForImageClassificationLearned"),QVo=o(" or "),HO=a("a"),WVo=o("PerceiverForImageClassificationFourier"),HVo=o(" or "),UO=a("a"),UVo=o("PerceiverForImageClassificationConvProcessing"),JVo=o(" (Perceiver model)"),YVo=l(),y2=a("li"),Pge=a("strong"),KVo=o("poolformer"),ZVo=o(" \u2014 "),JO=a("a"),eXo=o("PoolFormerForImageClassification"),oXo=o(" (PoolFormer model)"),rXo=l(),L2=a("li"),Ige=a("strong"),tXo=o("regnet"),aXo=o(" \u2014 "),YO=a("a"),nXo=o("RegNetForImageClassification"),sXo=o(" (RegNet model)"),lXo=l(),x2=a("li"),qge=a("strong"),iXo=o("resnet"),dXo=o(" \u2014 "),KO=a("a"),cXo=o("ResNetForImageClassification"),fXo=o(" (ResNet model)"),mXo=l(),$2=a("li"),Nge=a("strong"),gXo=o("segformer"),hXo=o(" \u2014 "),ZO=a("a"),pXo=o("SegformerForImageClassification"),uXo=o(" (SegFormer model)"),_Xo=l(),k2=a("li"),jge=a("strong"),bXo=o("swin"),vXo=o(" \u2014 "),eV=a("a"),FXo=o("SwinForImageClassification"),TXo=o(" (Swin model)"),MXo=l(),S2=a("li"),Dge=a("strong"),EXo=o("van"),CXo=o(" \u2014 "),oV=a("a"),wXo=o("VanForImageClassification"),AXo=o(" (VAN model)"),yXo=l(),R2=a("li"),Gge=a("strong"),LXo=o("vit"),xXo=o(" \u2014 "),rV=a("a"),$Xo=o("ViTForImageClassification"),kXo=o(" (ViT model)"),SXo=l(),B2=a("p"),RXo=o("The model is set in evaluation mode by default using "),Oge=a("code"),BXo=o("model.eval()"),PXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),IXo=o("model.train()"),qXo=l(),F(P2.$$.fragment),_Pe=l(),Yi=a("h2"),I2=a("a"),Xge=a("span"),F(lL.$$.fragment),NXo=l(),zge=a("span"),jXo=o("AutoModelForVision2Seq"),bPe=l(),Do=a("div"),F(iL.$$.fragment),DXo=l(),Ki=a("p"),GXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tV=a("a"),OXo=o("from_pretrained()"),VXo=o(" class method or the "),aV=a("a"),XXo=o("from_config()"),zXo=o(` class
method.`),QXo=l(),dL=a("p"),WXo=o("This class cannot be instantiated directly using "),Qge=a("code"),HXo=o("__init__()"),UXo=o(" (throws an error)."),JXo=l(),mt=a("div"),F(cL.$$.fragment),YXo=l(),Wge=a("p"),KXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZXo=l(),Zi=a("p"),ezo=o(`Note:
Loading a model from its configuration file does `),Hge=a("strong"),ozo=o("not"),rzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=a("a"),tzo=o("from_pretrained()"),azo=o(" to load the model weights."),nzo=l(),F(q2.$$.fragment),szo=l(),so=a("div"),F(fL.$$.fragment),lzo=l(),Uge=a("p"),izo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dzo=l(),Pa=a("p"),czo=o("The model class to instantiate is selected based on the "),Jge=a("code"),fzo=o("model_type"),mzo=o(` property of the config object (either
passed as an argument or loaded from `),Yge=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=a("code"),pzo=o("pretrained_model_name_or_path"),uzo=o(":"),_zo=l(),Zge=a("ul"),N2=a("li"),ehe=a("strong"),bzo=o("vision-encoder-decoder"),vzo=o(" \u2014 "),sV=a("a"),Fzo=o("VisionEncoderDecoderModel"),Tzo=o(" (Vision Encoder decoder model)"),Mzo=l(),j2=a("p"),Ezo=o("The model is set in evaluation mode by default using "),ohe=a("code"),Czo=o("model.eval()"),wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=a("code"),Azo=o("model.train()"),yzo=l(),F(D2.$$.fragment),vPe=l(),ed=a("h2"),G2=a("a"),the=a("span"),F(mL.$$.fragment),Lzo=l(),ahe=a("span"),xzo=o("AutoModelForAudioClassification"),FPe=l(),Go=a("div"),F(gL.$$.fragment),$zo=l(),od=a("p"),kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lV=a("a"),Szo=o("from_pretrained()"),Rzo=o(" class method or the "),iV=a("a"),Bzo=o("from_config()"),Pzo=o(` class
method.`),Izo=l(),hL=a("p"),qzo=o("This class cannot be instantiated directly using "),nhe=a("code"),Nzo=o("__init__()"),jzo=o(" (throws an error)."),Dzo=l(),gt=a("div"),F(pL.$$.fragment),Gzo=l(),she=a("p"),Ozo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Vzo=l(),rd=a("p"),Xzo=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),zzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=a("a"),Wzo=o("from_pretrained()"),Hzo=o(" to load the model weights."),Uzo=l(),F(O2.$$.fragment),Jzo=l(),lo=a("div"),F(uL.$$.fragment),Yzo=l(),ihe=a("p"),Kzo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Zzo=l(),Ia=a("p"),eQo=o("The model class to instantiate is selected based on the "),dhe=a("code"),oQo=o("model_type"),rQo=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),tQo=o("pretrained_model_name_or_path"),aQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=a("code"),nQo=o("pretrained_model_name_or_path"),sQo=o(":"),lQo=l(),Ne=a("ul"),V2=a("li"),mhe=a("strong"),iQo=o("data2vec-audio"),dQo=o(" \u2014 "),cV=a("a"),cQo=o("Data2VecAudioForSequenceClassification"),fQo=o(" (Data2VecAudio model)"),mQo=l(),X2=a("li"),ghe=a("strong"),gQo=o("hubert"),hQo=o(" \u2014 "),fV=a("a"),pQo=o("HubertForSequenceClassification"),uQo=o(" (Hubert model)"),_Qo=l(),z2=a("li"),hhe=a("strong"),bQo=o("sew"),vQo=o(" \u2014 "),mV=a("a"),FQo=o("SEWForSequenceClassification"),TQo=o(" (SEW model)"),MQo=l(),Q2=a("li"),phe=a("strong"),EQo=o("sew-d"),CQo=o(" \u2014 "),gV=a("a"),wQo=o("SEWDForSequenceClassification"),AQo=o(" (SEW-D model)"),yQo=l(),W2=a("li"),uhe=a("strong"),LQo=o("unispeech"),xQo=o(" \u2014 "),hV=a("a"),$Qo=o("UniSpeechForSequenceClassification"),kQo=o(" (UniSpeech model)"),SQo=l(),H2=a("li"),_he=a("strong"),RQo=o("unispeech-sat"),BQo=o(" \u2014 "),pV=a("a"),PQo=o("UniSpeechSatForSequenceClassification"),IQo=o(" (UniSpeechSat model)"),qQo=l(),U2=a("li"),bhe=a("strong"),NQo=o("wav2vec2"),jQo=o(" \u2014 "),uV=a("a"),DQo=o("Wav2Vec2ForSequenceClassification"),GQo=o(" (Wav2Vec2 model)"),OQo=l(),J2=a("li"),vhe=a("strong"),VQo=o("wavlm"),XQo=o(" \u2014 "),_V=a("a"),zQo=o("WavLMForSequenceClassification"),QQo=o(" (WavLM model)"),WQo=l(),Y2=a("p"),HQo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),UQo=o("model.eval()"),JQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),YQo=o("model.train()"),KQo=l(),F(K2.$$.fragment),TPe=l(),td=a("h2"),Z2=a("a"),Mhe=a("span"),F(_L.$$.fragment),ZQo=l(),Ehe=a("span"),eWo=o("AutoModelForAudioFrameClassification"),MPe=l(),Oo=a("div"),F(bL.$$.fragment),oWo=l(),ad=a("p"),rWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bV=a("a"),tWo=o("from_pretrained()"),aWo=o(" class method or the "),vV=a("a"),nWo=o("from_config()"),sWo=o(` class
method.`),lWo=l(),vL=a("p"),iWo=o("This class cannot be instantiated directly using "),Che=a("code"),dWo=o("__init__()"),cWo=o(" (throws an error)."),fWo=l(),ht=a("div"),F(FL.$$.fragment),mWo=l(),whe=a("p"),gWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hWo=l(),nd=a("p"),pWo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),uWo=o("not"),_Wo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),bWo=o("from_pretrained()"),vWo=o(" to load the model weights."),FWo=l(),F(e5.$$.fragment),TWo=l(),io=a("div"),F(TL.$$.fragment),MWo=l(),yhe=a("p"),EWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),CWo=l(),qa=a("p"),wWo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),AWo=o("model_type"),yWo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),LWo=o("pretrained_model_name_or_path"),xWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),$Wo=o("pretrained_model_name_or_path"),kWo=o(":"),SWo=l(),Na=a("ul"),o5=a("li"),khe=a("strong"),RWo=o("data2vec-audio"),BWo=o(" \u2014 "),TV=a("a"),PWo=o("Data2VecAudioForAudioFrameClassification"),IWo=o(" (Data2VecAudio model)"),qWo=l(),r5=a("li"),She=a("strong"),NWo=o("unispeech-sat"),jWo=o(" \u2014 "),MV=a("a"),DWo=o("UniSpeechSatForAudioFrameClassification"),GWo=o(" (UniSpeechSat model)"),OWo=l(),t5=a("li"),Rhe=a("strong"),VWo=o("wav2vec2"),XWo=o(" \u2014 "),EV=a("a"),zWo=o("Wav2Vec2ForAudioFrameClassification"),QWo=o(" (Wav2Vec2 model)"),WWo=l(),a5=a("li"),Bhe=a("strong"),HWo=o("wavlm"),UWo=o(" \u2014 "),CV=a("a"),JWo=o("WavLMForAudioFrameClassification"),YWo=o(" (WavLM model)"),KWo=l(),n5=a("p"),ZWo=o("The model is set in evaluation mode by default using "),Phe=a("code"),eHo=o("model.eval()"),oHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),rHo=o("model.train()"),tHo=l(),F(s5.$$.fragment),EPe=l(),sd=a("h2"),l5=a("a"),qhe=a("span"),F(ML.$$.fragment),aHo=l(),Nhe=a("span"),nHo=o("AutoModelForCTC"),CPe=l(),Vo=a("div"),F(EL.$$.fragment),sHo=l(),ld=a("p"),lHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wV=a("a"),iHo=o("from_pretrained()"),dHo=o(" class method or the "),AV=a("a"),cHo=o("from_config()"),fHo=o(` class
method.`),mHo=l(),CL=a("p"),gHo=o("This class cannot be instantiated directly using "),jhe=a("code"),hHo=o("__init__()"),pHo=o(" (throws an error)."),uHo=l(),pt=a("div"),F(wL.$$.fragment),_Ho=l(),Dhe=a("p"),bHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),vHo=l(),id=a("p"),FHo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),THo=o("not"),MHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),EHo=o("from_pretrained()"),CHo=o(" to load the model weights."),wHo=l(),F(i5.$$.fragment),AHo=l(),co=a("div"),F(AL.$$.fragment),yHo=l(),Ohe=a("p"),LHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),xHo=l(),ja=a("p"),$Ho=o("The model class to instantiate is selected based on the "),Vhe=a("code"),kHo=o("model_type"),SHo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),RHo=o("pretrained_model_name_or_path"),BHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),PHo=o("pretrained_model_name_or_path"),IHo=o(":"),qHo=l(),je=a("ul"),d5=a("li"),Qhe=a("strong"),NHo=o("data2vec-audio"),jHo=o(" \u2014 "),LV=a("a"),DHo=o("Data2VecAudioForCTC"),GHo=o(" (Data2VecAudio model)"),OHo=l(),c5=a("li"),Whe=a("strong"),VHo=o("hubert"),XHo=o(" \u2014 "),xV=a("a"),zHo=o("HubertForCTC"),QHo=o(" (Hubert model)"),WHo=l(),f5=a("li"),Hhe=a("strong"),HHo=o("sew"),UHo=o(" \u2014 "),$V=a("a"),JHo=o("SEWForCTC"),YHo=o(" (SEW model)"),KHo=l(),m5=a("li"),Uhe=a("strong"),ZHo=o("sew-d"),eUo=o(" \u2014 "),kV=a("a"),oUo=o("SEWDForCTC"),rUo=o(" (SEW-D model)"),tUo=l(),g5=a("li"),Jhe=a("strong"),aUo=o("unispeech"),nUo=o(" \u2014 "),SV=a("a"),sUo=o("UniSpeechForCTC"),lUo=o(" (UniSpeech model)"),iUo=l(),h5=a("li"),Yhe=a("strong"),dUo=o("unispeech-sat"),cUo=o(" \u2014 "),RV=a("a"),fUo=o("UniSpeechSatForCTC"),mUo=o(" (UniSpeechSat model)"),gUo=l(),p5=a("li"),Khe=a("strong"),hUo=o("wav2vec2"),pUo=o(" \u2014 "),BV=a("a"),uUo=o("Wav2Vec2ForCTC"),_Uo=o(" (Wav2Vec2 model)"),bUo=l(),u5=a("li"),Zhe=a("strong"),vUo=o("wavlm"),FUo=o(" \u2014 "),PV=a("a"),TUo=o("WavLMForCTC"),MUo=o(" (WavLM model)"),EUo=l(),_5=a("p"),CUo=o("The model is set in evaluation mode by default using "),epe=a("code"),wUo=o("model.eval()"),AUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),yUo=o("model.train()"),LUo=l(),F(b5.$$.fragment),wPe=l(),dd=a("h2"),v5=a("a"),rpe=a("span"),F(yL.$$.fragment),xUo=l(),tpe=a("span"),$Uo=o("AutoModelForSpeechSeq2Seq"),APe=l(),Xo=a("div"),F(LL.$$.fragment),kUo=l(),cd=a("p"),SUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IV=a("a"),RUo=o("from_pretrained()"),BUo=o(" class method or the "),qV=a("a"),PUo=o("from_config()"),IUo=o(` class
method.`),qUo=l(),xL=a("p"),NUo=o("This class cannot be instantiated directly using "),ape=a("code"),jUo=o("__init__()"),DUo=o(" (throws an error)."),GUo=l(),ut=a("div"),F($L.$$.fragment),OUo=l(),npe=a("p"),VUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),XUo=l(),fd=a("p"),zUo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),QUo=o("not"),WUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),HUo=o("from_pretrained()"),UUo=o(" to load the model weights."),JUo=l(),F(F5.$$.fragment),YUo=l(),fo=a("div"),F(kL.$$.fragment),KUo=l(),lpe=a("p"),ZUo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eJo=l(),Da=a("p"),oJo=o("The model class to instantiate is selected based on the "),ipe=a("code"),rJo=o("model_type"),tJo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),aJo=o("pretrained_model_name_or_path"),nJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),sJo=o("pretrained_model_name_or_path"),lJo=o(":"),iJo=l(),SL=a("ul"),T5=a("li"),fpe=a("strong"),dJo=o("speech-encoder-decoder"),cJo=o(" \u2014 "),jV=a("a"),fJo=o("SpeechEncoderDecoderModel"),mJo=o(" (Speech Encoder decoder model)"),gJo=l(),M5=a("li"),mpe=a("strong"),hJo=o("speech_to_text"),pJo=o(" \u2014 "),DV=a("a"),uJo=o("Speech2TextForConditionalGeneration"),_Jo=o(" (Speech2Text model)"),bJo=l(),E5=a("p"),vJo=o("The model is set in evaluation mode by default using "),gpe=a("code"),FJo=o("model.eval()"),TJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=a("code"),MJo=o("model.train()"),EJo=l(),F(C5.$$.fragment),yPe=l(),md=a("h2"),w5=a("a"),ppe=a("span"),F(RL.$$.fragment),CJo=l(),upe=a("span"),wJo=o("AutoModelForAudioXVector"),LPe=l(),zo=a("div"),F(BL.$$.fragment),AJo=l(),gd=a("p"),yJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GV=a("a"),LJo=o("from_pretrained()"),xJo=o(" class method or the "),OV=a("a"),$Jo=o("from_config()"),kJo=o(` class
method.`),SJo=l(),PL=a("p"),RJo=o("This class cannot be instantiated directly using "),_pe=a("code"),BJo=o("__init__()"),PJo=o(" (throws an error)."),IJo=l(),_t=a("div"),F(IL.$$.fragment),qJo=l(),bpe=a("p"),NJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jJo=l(),hd=a("p"),DJo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),GJo=o("not"),OJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),VJo=o("from_pretrained()"),XJo=o(" to load the model weights."),zJo=l(),F(A5.$$.fragment),QJo=l(),mo=a("div"),F(qL.$$.fragment),WJo=l(),Fpe=a("p"),HJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),UJo=l(),Ga=a("p"),JJo=o("The model class to instantiate is selected based on the "),Tpe=a("code"),YJo=o("model_type"),KJo=o(` property of the config object (either
passed as an argument or loaded from `),Mpe=a("code"),ZJo=o("pretrained_model_name_or_path"),eYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(":"),tYo=l(),Oa=a("ul"),y5=a("li"),Cpe=a("strong"),aYo=o("data2vec-audio"),nYo=o(" \u2014 "),XV=a("a"),sYo=o("Data2VecAudioForXVector"),lYo=o(" (Data2VecAudio model)"),iYo=l(),L5=a("li"),wpe=a("strong"),dYo=o("unispeech-sat"),cYo=o(" \u2014 "),zV=a("a"),fYo=o("UniSpeechSatForXVector"),mYo=o(" (UniSpeechSat model)"),gYo=l(),x5=a("li"),Ape=a("strong"),hYo=o("wav2vec2"),pYo=o(" \u2014 "),QV=a("a"),uYo=o("Wav2Vec2ForXVector"),_Yo=o(" (Wav2Vec2 model)"),bYo=l(),$5=a("li"),ype=a("strong"),vYo=o("wavlm"),FYo=o(" \u2014 "),WV=a("a"),TYo=o("WavLMForXVector"),MYo=o(" (WavLM model)"),EYo=l(),k5=a("p"),CYo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),wYo=o("model.eval()"),AYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),yYo=o("model.train()"),LYo=l(),F(S5.$$.fragment),xPe=l(),pd=a("h2"),R5=a("a"),$pe=a("span"),F(NL.$$.fragment),xYo=l(),kpe=a("span"),$Yo=o("AutoModelForMaskedImageModeling"),$Pe=l(),Qo=a("div"),F(jL.$$.fragment),kYo=l(),ud=a("p"),SYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HV=a("a"),RYo=o("from_pretrained()"),BYo=o(" class method or the "),UV=a("a"),PYo=o("from_config()"),IYo=o(` class
method.`),qYo=l(),DL=a("p"),NYo=o("This class cannot be instantiated directly using "),Spe=a("code"),jYo=o("__init__()"),DYo=o(" (throws an error)."),GYo=l(),bt=a("div"),F(GL.$$.fragment),OYo=l(),Rpe=a("p"),VYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XYo=l(),_d=a("p"),zYo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),QYo=o("not"),WYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),HYo=o("from_pretrained()"),UYo=o(" to load the model weights."),JYo=l(),F(B5.$$.fragment),YYo=l(),go=a("div"),F(OL.$$.fragment),KYo=l(),Ppe=a("p"),ZYo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),eKo=l(),Va=a("p"),oKo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),rKo=o("model_type"),tKo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),aKo=o("pretrained_model_name_or_path"),nKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),sKo=o("pretrained_model_name_or_path"),lKo=o(":"),iKo=l(),bd=a("ul"),P5=a("li"),jpe=a("strong"),dKo=o("deit"),cKo=o(" \u2014 "),YV=a("a"),fKo=o("DeiTForMaskedImageModeling"),mKo=o(" (DeiT model)"),gKo=l(),I5=a("li"),Dpe=a("strong"),hKo=o("swin"),pKo=o(" \u2014 "),KV=a("a"),uKo=o("SwinForMaskedImageModeling"),_Ko=o(" (Swin model)"),bKo=l(),q5=a("li"),Gpe=a("strong"),vKo=o("vit"),FKo=o(" \u2014 "),ZV=a("a"),TKo=o("ViTForMaskedImageModeling"),MKo=o(" (ViT model)"),EKo=l(),N5=a("p"),CKo=o("The model is set in evaluation mode by default using "),Ope=a("code"),wKo=o("model.eval()"),AKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=a("code"),yKo=o("model.train()"),LKo=l(),F(j5.$$.fragment),kPe=l(),vd=a("h2"),D5=a("a"),Xpe=a("span"),F(VL.$$.fragment),xKo=l(),zpe=a("span"),$Ko=o("AutoModelForObjectDetection"),SPe=l(),Wo=a("div"),F(XL.$$.fragment),kKo=l(),Fd=a("p"),SKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eX=a("a"),RKo=o("from_pretrained()"),BKo=o(" class method or the "),oX=a("a"),PKo=o("from_config()"),IKo=o(` class
method.`),qKo=l(),zL=a("p"),NKo=o("This class cannot be instantiated directly using "),Qpe=a("code"),jKo=o("__init__()"),DKo=o(" (throws an error)."),GKo=l(),vt=a("div"),F(QL.$$.fragment),OKo=l(),Wpe=a("p"),VKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),XKo=l(),Td=a("p"),zKo=o(`Note:
Loading a model from its configuration file does `),Hpe=a("strong"),QKo=o("not"),WKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),HKo=o("from_pretrained()"),UKo=o(" to load the model weights."),JKo=l(),F(G5.$$.fragment),YKo=l(),ho=a("div"),F(WL.$$.fragment),KKo=l(),Upe=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),eZo=l(),Xa=a("p"),oZo=o("The model class to instantiate is selected based on the "),Jpe=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),Ype=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),HL=a("ul"),O5=a("li"),Zpe=a("strong"),dZo=o("detr"),cZo=o(" \u2014 "),tX=a("a"),fZo=o("DetrForObjectDetection"),mZo=o(" (DETR model)"),gZo=l(),V5=a("li"),eue=a("strong"),hZo=o("yolos"),pZo=o(" \u2014 "),aX=a("a"),uZo=o("YolosForObjectDetection"),_Zo=o(" (YOLOS model)"),bZo=l(),X5=a("p"),vZo=o("The model is set in evaluation mode by default using "),oue=a("code"),FZo=o("model.eval()"),TZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),MZo=o("model.train()"),EZo=l(),F(z5.$$.fragment),RPe=l(),Md=a("h2"),Q5=a("a"),tue=a("span"),F(UL.$$.fragment),CZo=l(),aue=a("span"),wZo=o("AutoModelForImageSegmentation"),BPe=l(),Ho=a("div"),F(JL.$$.fragment),AZo=l(),Ed=a("p"),yZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nX=a("a"),LZo=o("from_pretrained()"),xZo=o(" class method or the "),sX=a("a"),$Zo=o("from_config()"),kZo=o(` class
method.`),SZo=l(),YL=a("p"),RZo=o("This class cannot be instantiated directly using "),nue=a("code"),BZo=o("__init__()"),PZo=o(" (throws an error)."),IZo=l(),Ft=a("div"),F(KL.$$.fragment),qZo=l(),sue=a("p"),NZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jZo=l(),Cd=a("p"),DZo=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),GZo=o("not"),OZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),VZo=o("from_pretrained()"),XZo=o(" to load the model weights."),zZo=l(),F(W5.$$.fragment),QZo=l(),po=a("div"),F(ZL.$$.fragment),WZo=l(),iue=a("p"),HZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),UZo=l(),za=a("p"),JZo=o("The model class to instantiate is selected based on the "),due=a("code"),YZo=o("model_type"),KZo=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),ZZo=o("pretrained_model_name_or_path"),eer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(":"),ter=l(),mue=a("ul"),H5=a("li"),gue=a("strong"),aer=o("detr"),ner=o(" \u2014 "),iX=a("a"),ser=o("DetrForSegmentation"),ler=o(" (DETR model)"),ier=l(),U5=a("p"),der=o("The model is set in evaluation mode by default using "),hue=a("code"),cer=o("model.eval()"),fer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),mer=o("model.train()"),ger=l(),F(J5.$$.fragment),PPe=l(),wd=a("h2"),Y5=a("a"),uue=a("span"),F(e8.$$.fragment),her=l(),_ue=a("span"),per=o("AutoModelForSemanticSegmentation"),IPe=l(),Uo=a("div"),F(o8.$$.fragment),uer=l(),Ad=a("p"),_er=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dX=a("a"),ber=o("from_pretrained()"),ver=o(" class method or the "),cX=a("a"),Fer=o("from_config()"),Ter=o(` class
method.`),Mer=l(),r8=a("p"),Eer=o("This class cannot be instantiated directly using "),bue=a("code"),Cer=o("__init__()"),wer=o(" (throws an error)."),Aer=l(),Tt=a("div"),F(t8.$$.fragment),yer=l(),vue=a("p"),Ler=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),xer=l(),yd=a("p"),$er=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),ker=o("not"),Ser=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),Rer=o("from_pretrained()"),Ber=o(" to load the model weights."),Per=l(),F(K5.$$.fragment),Ier=l(),uo=a("div"),F(a8.$$.fragment),qer=l(),Tue=a("p"),Ner=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),jer=l(),Qa=a("p"),Der=o("The model class to instantiate is selected based on the "),Mue=a("code"),Ger=o("model_type"),Oer=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),Ver=o("pretrained_model_name_or_path"),Xer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),zer=o("pretrained_model_name_or_path"),Qer=o(":"),Wer=l(),Wa=a("ul"),Z5=a("li"),wue=a("strong"),Her=o("beit"),Uer=o(" \u2014 "),mX=a("a"),Jer=o("BeitForSemanticSegmentation"),Yer=o(" (BEiT model)"),Ker=l(),ev=a("li"),Aue=a("strong"),Zer=o("data2vec-vision"),eor=o(" \u2014 "),gX=a("a"),oor=o("Data2VecVisionForSemanticSegmentation"),ror=o(" (Data2VecVision model)"),tor=l(),ov=a("li"),yue=a("strong"),aor=o("dpt"),nor=o(" \u2014 "),hX=a("a"),sor=o("DPTForSemanticSegmentation"),lor=o(" (DPT model)"),ior=l(),rv=a("li"),Lue=a("strong"),dor=o("segformer"),cor=o(" \u2014 "),pX=a("a"),mor=o("SegformerForSemanticSegmentation"),gor=o(" (SegFormer model)"),hor=l(),tv=a("p"),por=o("The model is set in evaluation mode by default using "),xue=a("code"),uor=o("model.eval()"),_or=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),bor=o("model.train()"),vor=l(),F(av.$$.fragment),qPe=l(),Ld=a("h2"),nv=a("a"),kue=a("span"),F(n8.$$.fragment),For=l(),Sue=a("span"),Tor=o("AutoModelForInstanceSegmentation"),NPe=l(),Jo=a("div"),F(s8.$$.fragment),Mor=l(),xd=a("p"),Eor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uX=a("a"),Cor=o("from_pretrained()"),wor=o(" class method or the "),_X=a("a"),Aor=o("from_config()"),yor=o(` class
method.`),Lor=l(),l8=a("p"),xor=o("This class cannot be instantiated directly using "),Rue=a("code"),$or=o("__init__()"),kor=o(" (throws an error)."),Sor=l(),Mt=a("div"),F(i8.$$.fragment),Ror=l(),Bue=a("p"),Bor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Por=l(),$d=a("p"),Ior=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),qor=o("not"),Nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),jor=o("from_pretrained()"),Dor=o(" to load the model weights."),Gor=l(),F(sv.$$.fragment),Oor=l(),_o=a("div"),F(d8.$$.fragment),Vor=l(),Iue=a("p"),Xor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zor=l(),Ha=a("p"),Qor=o("The model class to instantiate is selected based on the "),que=a("code"),Wor=o("model_type"),Hor=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),Uor=o("pretrained_model_name_or_path"),Jor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),Yor=o("pretrained_model_name_or_path"),Kor=o(":"),Zor=l(),Due=a("ul"),lv=a("li"),Gue=a("strong"),err=o("maskformer"),orr=o(" \u2014 "),vX=a("a"),rrr=o("MaskFormerForInstanceSegmentation"),trr=o(" (MaskFormer model)"),arr=l(),iv=a("p"),nrr=o("The model is set in evaluation mode by default using "),Oue=a("code"),srr=o("model.eval()"),lrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),irr=o("model.train()"),drr=l(),F(dv.$$.fragment),jPe=l(),kd=a("h2"),cv=a("a"),Xue=a("span"),F(c8.$$.fragment),crr=l(),zue=a("span"),frr=o("TFAutoModel"),DPe=l(),Yo=a("div"),F(f8.$$.fragment),mrr=l(),Sd=a("p"),grr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FX=a("a"),hrr=o("from_pretrained()"),prr=o(" class method or the "),TX=a("a"),urr=o("from_config()"),_rr=o(` class
method.`),brr=l(),m8=a("p"),vrr=o("This class cannot be instantiated directly using "),Que=a("code"),Frr=o("__init__()"),Trr=o(" (throws an error)."),Mrr=l(),Et=a("div"),F(g8.$$.fragment),Err=l(),Wue=a("p"),Crr=o("Instantiates one of the base model classes of the library from a configuration."),wrr=l(),Rd=a("p"),Arr=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),yrr=o("not"),Lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),xrr=o("from_pretrained()"),$rr=o(" to load the model weights."),krr=l(),F(fv.$$.fragment),Srr=l(),Cr=a("div"),F(h8.$$.fragment),Rrr=l(),Uue=a("p"),Brr=o("Instantiate one of the base model classes of the library from a pretrained model."),Prr=l(),Ua=a("p"),Irr=o("The model class to instantiate is selected based on the "),Jue=a("code"),qrr=o("model_type"),Nrr=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),jrr=o("pretrained_model_name_or_path"),Drr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),Grr=o("pretrained_model_name_or_path"),Orr=o(":"),Vrr=l(),j=a("ul"),mv=a("li"),Zue=a("strong"),Xrr=o("albert"),zrr=o(" \u2014 "),EX=a("a"),Qrr=o("TFAlbertModel"),Wrr=o(" (ALBERT model)"),Hrr=l(),gv=a("li"),e_e=a("strong"),Urr=o("bart"),Jrr=o(" \u2014 "),CX=a("a"),Yrr=o("TFBartModel"),Krr=o(" (BART model)"),Zrr=l(),hv=a("li"),o_e=a("strong"),etr=o("bert"),otr=o(" \u2014 "),wX=a("a"),rtr=o("TFBertModel"),ttr=o(" (BERT model)"),atr=l(),pv=a("li"),r_e=a("strong"),ntr=o("blenderbot"),str=o(" \u2014 "),AX=a("a"),ltr=o("TFBlenderbotModel"),itr=o(" (Blenderbot model)"),dtr=l(),uv=a("li"),t_e=a("strong"),ctr=o("blenderbot-small"),ftr=o(" \u2014 "),yX=a("a"),mtr=o("TFBlenderbotSmallModel"),gtr=o(" (BlenderbotSmall model)"),htr=l(),_v=a("li"),a_e=a("strong"),ptr=o("camembert"),utr=o(" \u2014 "),LX=a("a"),_tr=o("TFCamembertModel"),btr=o(" (CamemBERT model)"),vtr=l(),bv=a("li"),n_e=a("strong"),Ftr=o("clip"),Ttr=o(" \u2014 "),xX=a("a"),Mtr=o("TFCLIPModel"),Etr=o(" (CLIP model)"),Ctr=l(),vv=a("li"),s_e=a("strong"),wtr=o("convbert"),Atr=o(" \u2014 "),$X=a("a"),ytr=o("TFConvBertModel"),Ltr=o(" (ConvBERT model)"),xtr=l(),Fv=a("li"),l_e=a("strong"),$tr=o("convnext"),ktr=o(" \u2014 "),kX=a("a"),Str=o("TFConvNextModel"),Rtr=o(" (ConvNext model)"),Btr=l(),Tv=a("li"),i_e=a("strong"),Ptr=o("ctrl"),Itr=o(" \u2014 "),SX=a("a"),qtr=o("TFCTRLModel"),Ntr=o(" (CTRL model)"),jtr=l(),Mv=a("li"),d_e=a("strong"),Dtr=o("data2vec-vision"),Gtr=o(" \u2014 "),RX=a("a"),Otr=o("TFData2VecVisionModel"),Vtr=o(" (Data2VecVision model)"),Xtr=l(),Ev=a("li"),c_e=a("strong"),ztr=o("deberta"),Qtr=o(" \u2014 "),BX=a("a"),Wtr=o("TFDebertaModel"),Htr=o(" (DeBERTa model)"),Utr=l(),Cv=a("li"),f_e=a("strong"),Jtr=o("deberta-v2"),Ytr=o(" \u2014 "),PX=a("a"),Ktr=o("TFDebertaV2Model"),Ztr=o(" (DeBERTa-v2 model)"),ear=l(),wv=a("li"),m_e=a("strong"),oar=o("distilbert"),rar=o(" \u2014 "),IX=a("a"),tar=o("TFDistilBertModel"),aar=o(" (DistilBERT model)"),nar=l(),Av=a("li"),g_e=a("strong"),sar=o("dpr"),lar=o(" \u2014 "),qX=a("a"),iar=o("TFDPRQuestionEncoder"),dar=o(" (DPR model)"),car=l(),yv=a("li"),h_e=a("strong"),far=o("electra"),mar=o(" \u2014 "),NX=a("a"),gar=o("TFElectraModel"),har=o(" (ELECTRA model)"),par=l(),Lv=a("li"),p_e=a("strong"),uar=o("flaubert"),_ar=o(" \u2014 "),jX=a("a"),bar=o("TFFlaubertModel"),Far=o(" (FlauBERT model)"),Tar=l(),$s=a("li"),u_e=a("strong"),Mar=o("funnel"),Ear=o(" \u2014 "),DX=a("a"),Car=o("TFFunnelModel"),war=o(" or "),GX=a("a"),Aar=o("TFFunnelBaseModel"),yar=o(" (Funnel Transformer model)"),Lar=l(),xv=a("li"),__e=a("strong"),xar=o("gpt2"),$ar=o(" \u2014 "),OX=a("a"),kar=o("TFGPT2Model"),Sar=o(" (OpenAI GPT-2 model)"),Rar=l(),$v=a("li"),b_e=a("strong"),Bar=o("gptj"),Par=o(" \u2014 "),VX=a("a"),Iar=o("TFGPTJModel"),qar=o(" (GPT-J model)"),Nar=l(),kv=a("li"),v_e=a("strong"),jar=o("hubert"),Dar=o(" \u2014 "),XX=a("a"),Gar=o("TFHubertModel"),Oar=o(" (Hubert model)"),Var=l(),Sv=a("li"),F_e=a("strong"),Xar=o("layoutlm"),zar=o(" \u2014 "),zX=a("a"),Qar=o("TFLayoutLMModel"),War=o(" (LayoutLM model)"),Har=l(),Rv=a("li"),T_e=a("strong"),Uar=o("led"),Jar=o(" \u2014 "),QX=a("a"),Yar=o("TFLEDModel"),Kar=o(" (LED model)"),Zar=l(),Bv=a("li"),M_e=a("strong"),enr=o("longformer"),onr=o(" \u2014 "),WX=a("a"),rnr=o("TFLongformerModel"),tnr=o(" (Longformer model)"),anr=l(),Pv=a("li"),E_e=a("strong"),nnr=o("lxmert"),snr=o(" \u2014 "),HX=a("a"),lnr=o("TFLxmertModel"),inr=o(" (LXMERT model)"),dnr=l(),Iv=a("li"),C_e=a("strong"),cnr=o("marian"),fnr=o(" \u2014 "),UX=a("a"),mnr=o("TFMarianModel"),gnr=o(" (Marian model)"),hnr=l(),qv=a("li"),w_e=a("strong"),pnr=o("mbart"),unr=o(" \u2014 "),JX=a("a"),_nr=o("TFMBartModel"),bnr=o(" (mBART model)"),vnr=l(),Nv=a("li"),A_e=a("strong"),Fnr=o("mobilebert"),Tnr=o(" \u2014 "),YX=a("a"),Mnr=o("TFMobileBertModel"),Enr=o(" (MobileBERT model)"),Cnr=l(),jv=a("li"),y_e=a("strong"),wnr=o("mpnet"),Anr=o(" \u2014 "),KX=a("a"),ynr=o("TFMPNetModel"),Lnr=o(" (MPNet model)"),xnr=l(),Dv=a("li"),L_e=a("strong"),$nr=o("mt5"),knr=o(" \u2014 "),ZX=a("a"),Snr=o("TFMT5Model"),Rnr=o(" (mT5 model)"),Bnr=l(),Gv=a("li"),x_e=a("strong"),Pnr=o("openai-gpt"),Inr=o(" \u2014 "),ez=a("a"),qnr=o("TFOpenAIGPTModel"),Nnr=o(" (OpenAI GPT model)"),jnr=l(),Ov=a("li"),$_e=a("strong"),Dnr=o("pegasus"),Gnr=o(" \u2014 "),oz=a("a"),Onr=o("TFPegasusModel"),Vnr=o(" (Pegasus model)"),Xnr=l(),Vv=a("li"),k_e=a("strong"),znr=o("rembert"),Qnr=o(" \u2014 "),rz=a("a"),Wnr=o("TFRemBertModel"),Hnr=o(" (RemBERT model)"),Unr=l(),Xv=a("li"),S_e=a("strong"),Jnr=o("roberta"),Ynr=o(" \u2014 "),tz=a("a"),Knr=o("TFRobertaModel"),Znr=o(" (RoBERTa model)"),esr=l(),zv=a("li"),R_e=a("strong"),osr=o("roformer"),rsr=o(" \u2014 "),az=a("a"),tsr=o("TFRoFormerModel"),asr=o(" (RoFormer model)"),nsr=l(),Qv=a("li"),B_e=a("strong"),ssr=o("speech_to_text"),lsr=o(" \u2014 "),nz=a("a"),isr=o("TFSpeech2TextModel"),dsr=o(" (Speech2Text model)"),csr=l(),Wv=a("li"),P_e=a("strong"),fsr=o("t5"),msr=o(" \u2014 "),sz=a("a"),gsr=o("TFT5Model"),hsr=o(" (T5 model)"),psr=l(),Hv=a("li"),I_e=a("strong"),usr=o("tapas"),_sr=o(" \u2014 "),lz=a("a"),bsr=o("TFTapasModel"),vsr=o(" (TAPAS model)"),Fsr=l(),Uv=a("li"),q_e=a("strong"),Tsr=o("transfo-xl"),Msr=o(" \u2014 "),iz=a("a"),Esr=o("TFTransfoXLModel"),Csr=o(" (Transformer-XL model)"),wsr=l(),Jv=a("li"),N_e=a("strong"),Asr=o("vit"),ysr=o(" \u2014 "),dz=a("a"),Lsr=o("TFViTModel"),xsr=o(" (ViT model)"),$sr=l(),Yv=a("li"),j_e=a("strong"),ksr=o("vit_mae"),Ssr=o(" \u2014 "),cz=a("a"),Rsr=o("TFViTMAEModel"),Bsr=o(" (ViTMAE model)"),Psr=l(),Kv=a("li"),D_e=a("strong"),Isr=o("wav2vec2"),qsr=o(" \u2014 "),fz=a("a"),Nsr=o("TFWav2Vec2Model"),jsr=o(" (Wav2Vec2 model)"),Dsr=l(),Zv=a("li"),G_e=a("strong"),Gsr=o("xlm"),Osr=o(" \u2014 "),mz=a("a"),Vsr=o("TFXLMModel"),Xsr=o(" (XLM model)"),zsr=l(),eF=a("li"),O_e=a("strong"),Qsr=o("xlm-roberta"),Wsr=o(" \u2014 "),gz=a("a"),Hsr=o("TFXLMRobertaModel"),Usr=o(" (XLM-RoBERTa model)"),Jsr=l(),oF=a("li"),V_e=a("strong"),Ysr=o("xlnet"),Ksr=o(" \u2014 "),hz=a("a"),Zsr=o("TFXLNetModel"),elr=o(" (XLNet model)"),olr=l(),F(rF.$$.fragment),GPe=l(),Bd=a("h2"),tF=a("a"),X_e=a("span"),F(p8.$$.fragment),rlr=l(),z_e=a("span"),tlr=o("TFAutoModelForPreTraining"),OPe=l(),Ko=a("div"),F(u8.$$.fragment),alr=l(),Pd=a("p"),nlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pz=a("a"),slr=o("from_pretrained()"),llr=o(" class method or the "),uz=a("a"),ilr=o("from_config()"),dlr=o(` class
method.`),clr=l(),_8=a("p"),flr=o("This class cannot be instantiated directly using "),Q_e=a("code"),mlr=o("__init__()"),glr=o(" (throws an error)."),hlr=l(),Ct=a("div"),F(b8.$$.fragment),plr=l(),W_e=a("p"),ulr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_lr=l(),Id=a("p"),blr=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),vlr=o("not"),Flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),Tlr=o("from_pretrained()"),Mlr=o(" to load the model weights."),Elr=l(),F(aF.$$.fragment),Clr=l(),wr=a("div"),F(v8.$$.fragment),wlr=l(),U_e=a("p"),Alr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ylr=l(),Ja=a("p"),Llr=o("The model class to instantiate is selected based on the "),J_e=a("code"),xlr=o("model_type"),$lr=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),klr=o("pretrained_model_name_or_path"),Slr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),Rlr=o("pretrained_model_name_or_path"),Blr=o(":"),Plr=l(),se=a("ul"),nF=a("li"),Z_e=a("strong"),Ilr=o("albert"),qlr=o(" \u2014 "),bz=a("a"),Nlr=o("TFAlbertForPreTraining"),jlr=o(" (ALBERT model)"),Dlr=l(),sF=a("li"),e6e=a("strong"),Glr=o("bart"),Olr=o(" \u2014 "),vz=a("a"),Vlr=o("TFBartForConditionalGeneration"),Xlr=o(" (BART model)"),zlr=l(),lF=a("li"),o6e=a("strong"),Qlr=o("bert"),Wlr=o(" \u2014 "),Fz=a("a"),Hlr=o("TFBertForPreTraining"),Ulr=o(" (BERT model)"),Jlr=l(),iF=a("li"),r6e=a("strong"),Ylr=o("camembert"),Klr=o(" \u2014 "),Tz=a("a"),Zlr=o("TFCamembertForMaskedLM"),eir=o(" (CamemBERT model)"),oir=l(),dF=a("li"),t6e=a("strong"),rir=o("ctrl"),tir=o(" \u2014 "),Mz=a("a"),air=o("TFCTRLLMHeadModel"),nir=o(" (CTRL model)"),sir=l(),cF=a("li"),a6e=a("strong"),lir=o("distilbert"),iir=o(" \u2014 "),Ez=a("a"),dir=o("TFDistilBertForMaskedLM"),cir=o(" (DistilBERT model)"),fir=l(),fF=a("li"),n6e=a("strong"),mir=o("electra"),gir=o(" \u2014 "),Cz=a("a"),hir=o("TFElectraForPreTraining"),pir=o(" (ELECTRA model)"),uir=l(),mF=a("li"),s6e=a("strong"),_ir=o("flaubert"),bir=o(" \u2014 "),wz=a("a"),vir=o("TFFlaubertWithLMHeadModel"),Fir=o(" (FlauBERT model)"),Tir=l(),gF=a("li"),l6e=a("strong"),Mir=o("funnel"),Eir=o(" \u2014 "),Az=a("a"),Cir=o("TFFunnelForPreTraining"),wir=o(" (Funnel Transformer model)"),Air=l(),hF=a("li"),i6e=a("strong"),yir=o("gpt2"),Lir=o(" \u2014 "),yz=a("a"),xir=o("TFGPT2LMHeadModel"),$ir=o(" (OpenAI GPT-2 model)"),kir=l(),pF=a("li"),d6e=a("strong"),Sir=o("layoutlm"),Rir=o(" \u2014 "),Lz=a("a"),Bir=o("TFLayoutLMForMaskedLM"),Pir=o(" (LayoutLM model)"),Iir=l(),uF=a("li"),c6e=a("strong"),qir=o("lxmert"),Nir=o(" \u2014 "),xz=a("a"),jir=o("TFLxmertForPreTraining"),Dir=o(" (LXMERT model)"),Gir=l(),_F=a("li"),f6e=a("strong"),Oir=o("mobilebert"),Vir=o(" \u2014 "),$z=a("a"),Xir=o("TFMobileBertForPreTraining"),zir=o(" (MobileBERT model)"),Qir=l(),bF=a("li"),m6e=a("strong"),Wir=o("mpnet"),Hir=o(" \u2014 "),kz=a("a"),Uir=o("TFMPNetForMaskedLM"),Jir=o(" (MPNet model)"),Yir=l(),vF=a("li"),g6e=a("strong"),Kir=o("openai-gpt"),Zir=o(" \u2014 "),Sz=a("a"),edr=o("TFOpenAIGPTLMHeadModel"),odr=o(" (OpenAI GPT model)"),rdr=l(),FF=a("li"),h6e=a("strong"),tdr=o("roberta"),adr=o(" \u2014 "),Rz=a("a"),ndr=o("TFRobertaForMaskedLM"),sdr=o(" (RoBERTa model)"),ldr=l(),TF=a("li"),p6e=a("strong"),idr=o("t5"),ddr=o(" \u2014 "),Bz=a("a"),cdr=o("TFT5ForConditionalGeneration"),fdr=o(" (T5 model)"),mdr=l(),MF=a("li"),u6e=a("strong"),gdr=o("tapas"),hdr=o(" \u2014 "),Pz=a("a"),pdr=o("TFTapasForMaskedLM"),udr=o(" (TAPAS model)"),_dr=l(),EF=a("li"),_6e=a("strong"),bdr=o("transfo-xl"),vdr=o(" \u2014 "),Iz=a("a"),Fdr=o("TFTransfoXLLMHeadModel"),Tdr=o(" (Transformer-XL model)"),Mdr=l(),CF=a("li"),b6e=a("strong"),Edr=o("vit_mae"),Cdr=o(" \u2014 "),qz=a("a"),wdr=o("TFViTMAEForPreTraining"),Adr=o(" (ViTMAE model)"),ydr=l(),wF=a("li"),v6e=a("strong"),Ldr=o("xlm"),xdr=o(" \u2014 "),Nz=a("a"),$dr=o("TFXLMWithLMHeadModel"),kdr=o(" (XLM model)"),Sdr=l(),AF=a("li"),F6e=a("strong"),Rdr=o("xlm-roberta"),Bdr=o(" \u2014 "),jz=a("a"),Pdr=o("TFXLMRobertaForMaskedLM"),Idr=o(" (XLM-RoBERTa model)"),qdr=l(),yF=a("li"),T6e=a("strong"),Ndr=o("xlnet"),jdr=o(" \u2014 "),Dz=a("a"),Ddr=o("TFXLNetLMHeadModel"),Gdr=o(" (XLNet model)"),Odr=l(),F(LF.$$.fragment),VPe=l(),qd=a("h2"),xF=a("a"),M6e=a("span"),F(F8.$$.fragment),Vdr=l(),E6e=a("span"),Xdr=o("TFAutoModelForCausalLM"),XPe=l(),Zo=a("div"),F(T8.$$.fragment),zdr=l(),Nd=a("p"),Qdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gz=a("a"),Wdr=o("from_pretrained()"),Hdr=o(" class method or the "),Oz=a("a"),Udr=o("from_config()"),Jdr=o(` class
method.`),Ydr=l(),M8=a("p"),Kdr=o("This class cannot be instantiated directly using "),C6e=a("code"),Zdr=o("__init__()"),ecr=o(" (throws an error)."),ocr=l(),wt=a("div"),F(E8.$$.fragment),rcr=l(),w6e=a("p"),tcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),acr=l(),jd=a("p"),ncr=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),scr=o("not"),lcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),icr=o("from_pretrained()"),dcr=o(" to load the model weights."),ccr=l(),F($F.$$.fragment),fcr=l(),Ar=a("div"),F(C8.$$.fragment),mcr=l(),y6e=a("p"),gcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hcr=l(),Ya=a("p"),pcr=o("The model class to instantiate is selected based on the "),L6e=a("code"),ucr=o("model_type"),_cr=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),Fcr=o("pretrained_model_name_or_path"),Tcr=o(":"),Mcr=l(),Te=a("ul"),kF=a("li"),k6e=a("strong"),Ecr=o("bert"),Ccr=o(" \u2014 "),Xz=a("a"),wcr=o("TFBertLMHeadModel"),Acr=o(" (BERT model)"),ycr=l(),SF=a("li"),S6e=a("strong"),Lcr=o("camembert"),xcr=o(" \u2014 "),zz=a("a"),$cr=o("TFCamembertForCausalLM"),kcr=o(" (CamemBERT model)"),Scr=l(),RF=a("li"),R6e=a("strong"),Rcr=o("ctrl"),Bcr=o(" \u2014 "),Qz=a("a"),Pcr=o("TFCTRLLMHeadModel"),Icr=o(" (CTRL model)"),qcr=l(),BF=a("li"),B6e=a("strong"),Ncr=o("gpt2"),jcr=o(" \u2014 "),Wz=a("a"),Dcr=o("TFGPT2LMHeadModel"),Gcr=o(" (OpenAI GPT-2 model)"),Ocr=l(),PF=a("li"),P6e=a("strong"),Vcr=o("gptj"),Xcr=o(" \u2014 "),Hz=a("a"),zcr=o("TFGPTJForCausalLM"),Qcr=o(" (GPT-J model)"),Wcr=l(),IF=a("li"),I6e=a("strong"),Hcr=o("openai-gpt"),Ucr=o(" \u2014 "),Uz=a("a"),Jcr=o("TFOpenAIGPTLMHeadModel"),Ycr=o(" (OpenAI GPT model)"),Kcr=l(),qF=a("li"),q6e=a("strong"),Zcr=o("rembert"),efr=o(" \u2014 "),Jz=a("a"),ofr=o("TFRemBertForCausalLM"),rfr=o(" (RemBERT model)"),tfr=l(),NF=a("li"),N6e=a("strong"),afr=o("roberta"),nfr=o(" \u2014 "),Yz=a("a"),sfr=o("TFRobertaForCausalLM"),lfr=o(" (RoBERTa model)"),ifr=l(),jF=a("li"),j6e=a("strong"),dfr=o("roformer"),cfr=o(" \u2014 "),Kz=a("a"),ffr=o("TFRoFormerForCausalLM"),mfr=o(" (RoFormer model)"),gfr=l(),DF=a("li"),D6e=a("strong"),hfr=o("transfo-xl"),pfr=o(" \u2014 "),Zz=a("a"),ufr=o("TFTransfoXLLMHeadModel"),_fr=o(" (Transformer-XL model)"),bfr=l(),GF=a("li"),G6e=a("strong"),vfr=o("xlm"),Ffr=o(" \u2014 "),eQ=a("a"),Tfr=o("TFXLMWithLMHeadModel"),Mfr=o(" (XLM model)"),Efr=l(),OF=a("li"),O6e=a("strong"),Cfr=o("xlnet"),wfr=o(" \u2014 "),oQ=a("a"),Afr=o("TFXLNetLMHeadModel"),yfr=o(" (XLNet model)"),Lfr=l(),F(VF.$$.fragment),zPe=l(),Dd=a("h2"),XF=a("a"),V6e=a("span"),F(w8.$$.fragment),xfr=l(),X6e=a("span"),$fr=o("TFAutoModelForImageClassification"),QPe=l(),er=a("div"),F(A8.$$.fragment),kfr=l(),Gd=a("p"),Sfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=a("a"),Rfr=o("from_pretrained()"),Bfr=o(" class method or the "),tQ=a("a"),Pfr=o("from_config()"),Ifr=o(` class
method.`),qfr=l(),y8=a("p"),Nfr=o("This class cannot be instantiated directly using "),z6e=a("code"),jfr=o("__init__()"),Dfr=o(" (throws an error)."),Gfr=l(),At=a("div"),F(L8.$$.fragment),Ofr=l(),Q6e=a("p"),Vfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xfr=l(),Od=a("p"),zfr=o(`Note:
Loading a model from its configuration file does `),W6e=a("strong"),Qfr=o("not"),Wfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),Hfr=o("from_pretrained()"),Ufr=o(" to load the model weights."),Jfr=l(),F(zF.$$.fragment),Yfr=l(),yr=a("div"),F(x8.$$.fragment),Kfr=l(),H6e=a("p"),Zfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),emr=l(),Ka=a("p"),omr=o("The model class to instantiate is selected based on the "),U6e=a("code"),rmr=o("model_type"),tmr=o(` property of the config object (either
passed as an argument or loaded from `),J6e=a("code"),amr=o("pretrained_model_name_or_path"),nmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y6e=a("code"),smr=o("pretrained_model_name_or_path"),lmr=o(":"),imr=l(),Vd=a("ul"),QF=a("li"),K6e=a("strong"),dmr=o("convnext"),cmr=o(" \u2014 "),nQ=a("a"),fmr=o("TFConvNextForImageClassification"),mmr=o(" (ConvNext model)"),gmr=l(),WF=a("li"),Z6e=a("strong"),hmr=o("data2vec-vision"),pmr=o(" \u2014 "),sQ=a("a"),umr=o("TFData2VecVisionForImageClassification"),_mr=o(" (Data2VecVision model)"),bmr=l(),HF=a("li"),e1e=a("strong"),vmr=o("vit"),Fmr=o(" \u2014 "),lQ=a("a"),Tmr=o("TFViTForImageClassification"),Mmr=o(" (ViT model)"),Emr=l(),F(UF.$$.fragment),WPe=l(),Xd=a("h2"),JF=a("a"),o1e=a("span"),F($8.$$.fragment),Cmr=l(),r1e=a("span"),wmr=o("TFAutoModelForMaskedLM"),HPe=l(),or=a("div"),F(k8.$$.fragment),Amr=l(),zd=a("p"),ymr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iQ=a("a"),Lmr=o("from_pretrained()"),xmr=o(" class method or the "),dQ=a("a"),$mr=o("from_config()"),kmr=o(` class
method.`),Smr=l(),S8=a("p"),Rmr=o("This class cannot be instantiated directly using "),t1e=a("code"),Bmr=o("__init__()"),Pmr=o(" (throws an error)."),Imr=l(),yt=a("div"),F(R8.$$.fragment),qmr=l(),a1e=a("p"),Nmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jmr=l(),Qd=a("p"),Dmr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),Gmr=o("not"),Omr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Vmr=o("from_pretrained()"),Xmr=o(" to load the model weights."),zmr=l(),F(YF.$$.fragment),Qmr=l(),Lr=a("div"),F(B8.$$.fragment),Wmr=l(),s1e=a("p"),Hmr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Umr=l(),Za=a("p"),Jmr=o("The model class to instantiate is selected based on the "),l1e=a("code"),Ymr=o("model_type"),Kmr=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),Zmr=o("pretrained_model_name_or_path"),egr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),ogr=o("pretrained_model_name_or_path"),rgr=o(":"),tgr=l(),ie=a("ul"),KF=a("li"),c1e=a("strong"),agr=o("albert"),ngr=o(" \u2014 "),fQ=a("a"),sgr=o("TFAlbertForMaskedLM"),lgr=o(" (ALBERT model)"),igr=l(),ZF=a("li"),f1e=a("strong"),dgr=o("bert"),cgr=o(" \u2014 "),mQ=a("a"),fgr=o("TFBertForMaskedLM"),mgr=o(" (BERT model)"),ggr=l(),eT=a("li"),m1e=a("strong"),hgr=o("camembert"),pgr=o(" \u2014 "),gQ=a("a"),ugr=o("TFCamembertForMaskedLM"),_gr=o(" (CamemBERT model)"),bgr=l(),oT=a("li"),g1e=a("strong"),vgr=o("convbert"),Fgr=o(" \u2014 "),hQ=a("a"),Tgr=o("TFConvBertForMaskedLM"),Mgr=o(" (ConvBERT model)"),Egr=l(),rT=a("li"),h1e=a("strong"),Cgr=o("deberta"),wgr=o(" \u2014 "),pQ=a("a"),Agr=o("TFDebertaForMaskedLM"),ygr=o(" (DeBERTa model)"),Lgr=l(),tT=a("li"),p1e=a("strong"),xgr=o("deberta-v2"),$gr=o(" \u2014 "),uQ=a("a"),kgr=o("TFDebertaV2ForMaskedLM"),Sgr=o(" (DeBERTa-v2 model)"),Rgr=l(),aT=a("li"),u1e=a("strong"),Bgr=o("distilbert"),Pgr=o(" \u2014 "),_Q=a("a"),Igr=o("TFDistilBertForMaskedLM"),qgr=o(" (DistilBERT model)"),Ngr=l(),nT=a("li"),_1e=a("strong"),jgr=o("electra"),Dgr=o(" \u2014 "),bQ=a("a"),Ggr=o("TFElectraForMaskedLM"),Ogr=o(" (ELECTRA model)"),Vgr=l(),sT=a("li"),b1e=a("strong"),Xgr=o("flaubert"),zgr=o(" \u2014 "),vQ=a("a"),Qgr=o("TFFlaubertWithLMHeadModel"),Wgr=o(" (FlauBERT model)"),Hgr=l(),lT=a("li"),v1e=a("strong"),Ugr=o("funnel"),Jgr=o(" \u2014 "),FQ=a("a"),Ygr=o("TFFunnelForMaskedLM"),Kgr=o(" (Funnel Transformer model)"),Zgr=l(),iT=a("li"),F1e=a("strong"),ehr=o("layoutlm"),ohr=o(" \u2014 "),TQ=a("a"),rhr=o("TFLayoutLMForMaskedLM"),thr=o(" (LayoutLM model)"),ahr=l(),dT=a("li"),T1e=a("strong"),nhr=o("longformer"),shr=o(" \u2014 "),MQ=a("a"),lhr=o("TFLongformerForMaskedLM"),ihr=o(" (Longformer model)"),dhr=l(),cT=a("li"),M1e=a("strong"),chr=o("mobilebert"),fhr=o(" \u2014 "),EQ=a("a"),mhr=o("TFMobileBertForMaskedLM"),ghr=o(" (MobileBERT model)"),hhr=l(),fT=a("li"),E1e=a("strong"),phr=o("mpnet"),uhr=o(" \u2014 "),CQ=a("a"),_hr=o("TFMPNetForMaskedLM"),bhr=o(" (MPNet model)"),vhr=l(),mT=a("li"),C1e=a("strong"),Fhr=o("rembert"),Thr=o(" \u2014 "),wQ=a("a"),Mhr=o("TFRemBertForMaskedLM"),Ehr=o(" (RemBERT model)"),Chr=l(),gT=a("li"),w1e=a("strong"),whr=o("roberta"),Ahr=o(" \u2014 "),AQ=a("a"),yhr=o("TFRobertaForMaskedLM"),Lhr=o(" (RoBERTa model)"),xhr=l(),hT=a("li"),A1e=a("strong"),$hr=o("roformer"),khr=o(" \u2014 "),yQ=a("a"),Shr=o("TFRoFormerForMaskedLM"),Rhr=o(" (RoFormer model)"),Bhr=l(),pT=a("li"),y1e=a("strong"),Phr=o("tapas"),Ihr=o(" \u2014 "),LQ=a("a"),qhr=o("TFTapasForMaskedLM"),Nhr=o(" (TAPAS model)"),jhr=l(),uT=a("li"),L1e=a("strong"),Dhr=o("xlm"),Ghr=o(" \u2014 "),xQ=a("a"),Ohr=o("TFXLMWithLMHeadModel"),Vhr=o(" (XLM model)"),Xhr=l(),_T=a("li"),x1e=a("strong"),zhr=o("xlm-roberta"),Qhr=o(" \u2014 "),$Q=a("a"),Whr=o("TFXLMRobertaForMaskedLM"),Hhr=o(" (XLM-RoBERTa model)"),Uhr=l(),F(bT.$$.fragment),UPe=l(),Wd=a("h2"),vT=a("a"),$1e=a("span"),F(P8.$$.fragment),Jhr=l(),k1e=a("span"),Yhr=o("TFAutoModelForSeq2SeqLM"),JPe=l(),rr=a("div"),F(I8.$$.fragment),Khr=l(),Hd=a("p"),Zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kQ=a("a"),epr=o("from_pretrained()"),opr=o(" class method or the "),SQ=a("a"),rpr=o("from_config()"),tpr=o(` class
method.`),apr=l(),q8=a("p"),npr=o("This class cannot be instantiated directly using "),S1e=a("code"),spr=o("__init__()"),lpr=o(" (throws an error)."),ipr=l(),Lt=a("div"),F(N8.$$.fragment),dpr=l(),R1e=a("p"),cpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fpr=l(),Ud=a("p"),mpr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),gpr=o("not"),hpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),ppr=o("from_pretrained()"),upr=o(" to load the model weights."),_pr=l(),F(FT.$$.fragment),bpr=l(),xr=a("div"),F(j8.$$.fragment),vpr=l(),P1e=a("p"),Fpr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Tpr=l(),en=a("p"),Mpr=o("The model class to instantiate is selected based on the "),I1e=a("code"),Epr=o("model_type"),Cpr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),wpr=o("pretrained_model_name_or_path"),Apr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),ypr=o("pretrained_model_name_or_path"),Lpr=o(":"),xpr=l(),ye=a("ul"),TT=a("li"),j1e=a("strong"),$pr=o("bart"),kpr=o(" \u2014 "),BQ=a("a"),Spr=o("TFBartForConditionalGeneration"),Rpr=o(" (BART model)"),Bpr=l(),MT=a("li"),D1e=a("strong"),Ppr=o("blenderbot"),Ipr=o(" \u2014 "),PQ=a("a"),qpr=o("TFBlenderbotForConditionalGeneration"),Npr=o(" (Blenderbot model)"),jpr=l(),ET=a("li"),G1e=a("strong"),Dpr=o("blenderbot-small"),Gpr=o(" \u2014 "),IQ=a("a"),Opr=o("TFBlenderbotSmallForConditionalGeneration"),Vpr=o(" (BlenderbotSmall model)"),Xpr=l(),CT=a("li"),O1e=a("strong"),zpr=o("encoder-decoder"),Qpr=o(" \u2014 "),qQ=a("a"),Wpr=o("TFEncoderDecoderModel"),Hpr=o(" (Encoder decoder model)"),Upr=l(),wT=a("li"),V1e=a("strong"),Jpr=o("led"),Ypr=o(" \u2014 "),NQ=a("a"),Kpr=o("TFLEDForConditionalGeneration"),Zpr=o(" (LED model)"),eur=l(),AT=a("li"),X1e=a("strong"),our=o("marian"),rur=o(" \u2014 "),jQ=a("a"),tur=o("TFMarianMTModel"),aur=o(" (Marian model)"),nur=l(),yT=a("li"),z1e=a("strong"),sur=o("mbart"),lur=o(" \u2014 "),DQ=a("a"),iur=o("TFMBartForConditionalGeneration"),dur=o(" (mBART model)"),cur=l(),LT=a("li"),Q1e=a("strong"),fur=o("mt5"),mur=o(" \u2014 "),GQ=a("a"),gur=o("TFMT5ForConditionalGeneration"),hur=o(" (mT5 model)"),pur=l(),xT=a("li"),W1e=a("strong"),uur=o("pegasus"),_ur=o(" \u2014 "),OQ=a("a"),bur=o("TFPegasusForConditionalGeneration"),vur=o(" (Pegasus model)"),Fur=l(),$T=a("li"),H1e=a("strong"),Tur=o("t5"),Mur=o(" \u2014 "),VQ=a("a"),Eur=o("TFT5ForConditionalGeneration"),Cur=o(" (T5 model)"),wur=l(),F(kT.$$.fragment),YPe=l(),Jd=a("h2"),ST=a("a"),U1e=a("span"),F(D8.$$.fragment),Aur=l(),J1e=a("span"),yur=o("TFAutoModelForSequenceClassification"),KPe=l(),tr=a("div"),F(G8.$$.fragment),Lur=l(),Yd=a("p"),xur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XQ=a("a"),$ur=o("from_pretrained()"),kur=o(" class method or the "),zQ=a("a"),Sur=o("from_config()"),Rur=o(` class
method.`),Bur=l(),O8=a("p"),Pur=o("This class cannot be instantiated directly using "),Y1e=a("code"),Iur=o("__init__()"),qur=o(" (throws an error)."),Nur=l(),xt=a("div"),F(V8.$$.fragment),jur=l(),K1e=a("p"),Dur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Gur=l(),Kd=a("p"),Our=o(`Note:
Loading a model from its configuration file does `),Z1e=a("strong"),Vur=o("not"),Xur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),zur=o("from_pretrained()"),Qur=o(" to load the model weights."),Wur=l(),F(RT.$$.fragment),Hur=l(),$r=a("div"),F(X8.$$.fragment),Uur=l(),ebe=a("p"),Jur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Yur=l(),on=a("p"),Kur=o("The model class to instantiate is selected based on the "),obe=a("code"),Zur=o("model_type"),e_r=o(` property of the config object (either
passed as an argument or loaded from `),rbe=a("code"),o_r=o("pretrained_model_name_or_path"),r_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=a("code"),t_r=o("pretrained_model_name_or_path"),a_r=o(":"),n_r=l(),Z=a("ul"),BT=a("li"),abe=a("strong"),s_r=o("albert"),l_r=o(" \u2014 "),WQ=a("a"),i_r=o("TFAlbertForSequenceClassification"),d_r=o(" (ALBERT model)"),c_r=l(),PT=a("li"),nbe=a("strong"),f_r=o("bert"),m_r=o(" \u2014 "),HQ=a("a"),g_r=o("TFBertForSequenceClassification"),h_r=o(" (BERT model)"),p_r=l(),IT=a("li"),sbe=a("strong"),u_r=o("camembert"),__r=o(" \u2014 "),UQ=a("a"),b_r=o("TFCamembertForSequenceClassification"),v_r=o(" (CamemBERT model)"),F_r=l(),qT=a("li"),lbe=a("strong"),T_r=o("convbert"),M_r=o(" \u2014 "),JQ=a("a"),E_r=o("TFConvBertForSequenceClassification"),C_r=o(" (ConvBERT model)"),w_r=l(),NT=a("li"),ibe=a("strong"),A_r=o("ctrl"),y_r=o(" \u2014 "),YQ=a("a"),L_r=o("TFCTRLForSequenceClassification"),x_r=o(" (CTRL model)"),$_r=l(),jT=a("li"),dbe=a("strong"),k_r=o("deberta"),S_r=o(" \u2014 "),KQ=a("a"),R_r=o("TFDebertaForSequenceClassification"),B_r=o(" (DeBERTa model)"),P_r=l(),DT=a("li"),cbe=a("strong"),I_r=o("deberta-v2"),q_r=o(" \u2014 "),ZQ=a("a"),N_r=o("TFDebertaV2ForSequenceClassification"),j_r=o(" (DeBERTa-v2 model)"),D_r=l(),GT=a("li"),fbe=a("strong"),G_r=o("distilbert"),O_r=o(" \u2014 "),eW=a("a"),V_r=o("TFDistilBertForSequenceClassification"),X_r=o(" (DistilBERT model)"),z_r=l(),OT=a("li"),mbe=a("strong"),Q_r=o("electra"),W_r=o(" \u2014 "),oW=a("a"),H_r=o("TFElectraForSequenceClassification"),U_r=o(" (ELECTRA model)"),J_r=l(),VT=a("li"),gbe=a("strong"),Y_r=o("flaubert"),K_r=o(" \u2014 "),rW=a("a"),Z_r=o("TFFlaubertForSequenceClassification"),e6r=o(" (FlauBERT model)"),o6r=l(),XT=a("li"),hbe=a("strong"),r6r=o("funnel"),t6r=o(" \u2014 "),tW=a("a"),a6r=o("TFFunnelForSequenceClassification"),n6r=o(" (Funnel Transformer model)"),s6r=l(),zT=a("li"),pbe=a("strong"),l6r=o("gpt2"),i6r=o(" \u2014 "),aW=a("a"),d6r=o("TFGPT2ForSequenceClassification"),c6r=o(" (OpenAI GPT-2 model)"),f6r=l(),QT=a("li"),ube=a("strong"),m6r=o("gptj"),g6r=o(" \u2014 "),nW=a("a"),h6r=o("TFGPTJForSequenceClassification"),p6r=o(" (GPT-J model)"),u6r=l(),WT=a("li"),_be=a("strong"),_6r=o("layoutlm"),b6r=o(" \u2014 "),sW=a("a"),v6r=o("TFLayoutLMForSequenceClassification"),F6r=o(" (LayoutLM model)"),T6r=l(),HT=a("li"),bbe=a("strong"),M6r=o("longformer"),E6r=o(" \u2014 "),lW=a("a"),C6r=o("TFLongformerForSequenceClassification"),w6r=o(" (Longformer model)"),A6r=l(),UT=a("li"),vbe=a("strong"),y6r=o("mobilebert"),L6r=o(" \u2014 "),iW=a("a"),x6r=o("TFMobileBertForSequenceClassification"),$6r=o(" (MobileBERT model)"),k6r=l(),JT=a("li"),Fbe=a("strong"),S6r=o("mpnet"),R6r=o(" \u2014 "),dW=a("a"),B6r=o("TFMPNetForSequenceClassification"),P6r=o(" (MPNet model)"),I6r=l(),YT=a("li"),Tbe=a("strong"),q6r=o("openai-gpt"),N6r=o(" \u2014 "),cW=a("a"),j6r=o("TFOpenAIGPTForSequenceClassification"),D6r=o(" (OpenAI GPT model)"),G6r=l(),KT=a("li"),Mbe=a("strong"),O6r=o("rembert"),V6r=o(" \u2014 "),fW=a("a"),X6r=o("TFRemBertForSequenceClassification"),z6r=o(" (RemBERT model)"),Q6r=l(),ZT=a("li"),Ebe=a("strong"),W6r=o("roberta"),H6r=o(" \u2014 "),mW=a("a"),U6r=o("TFRobertaForSequenceClassification"),J6r=o(" (RoBERTa model)"),Y6r=l(),eM=a("li"),Cbe=a("strong"),K6r=o("roformer"),Z6r=o(" \u2014 "),gW=a("a"),e1r=o("TFRoFormerForSequenceClassification"),o1r=o(" (RoFormer model)"),r1r=l(),oM=a("li"),wbe=a("strong"),t1r=o("tapas"),a1r=o(" \u2014 "),hW=a("a"),n1r=o("TFTapasForSequenceClassification"),s1r=o(" (TAPAS model)"),l1r=l(),rM=a("li"),Abe=a("strong"),i1r=o("transfo-xl"),d1r=o(" \u2014 "),pW=a("a"),c1r=o("TFTransfoXLForSequenceClassification"),f1r=o(" (Transformer-XL model)"),m1r=l(),tM=a("li"),ybe=a("strong"),g1r=o("xlm"),h1r=o(" \u2014 "),uW=a("a"),p1r=o("TFXLMForSequenceClassification"),u1r=o(" (XLM model)"),_1r=l(),aM=a("li"),Lbe=a("strong"),b1r=o("xlm-roberta"),v1r=o(" \u2014 "),_W=a("a"),F1r=o("TFXLMRobertaForSequenceClassification"),T1r=o(" (XLM-RoBERTa model)"),M1r=l(),nM=a("li"),xbe=a("strong"),E1r=o("xlnet"),C1r=o(" \u2014 "),bW=a("a"),w1r=o("TFXLNetForSequenceClassification"),A1r=o(" (XLNet model)"),y1r=l(),F(sM.$$.fragment),ZPe=l(),Zd=a("h2"),lM=a("a"),$be=a("span"),F(z8.$$.fragment),L1r=l(),kbe=a("span"),x1r=o("TFAutoModelForMultipleChoice"),eIe=l(),ar=a("div"),F(Q8.$$.fragment),$1r=l(),ec=a("p"),k1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vW=a("a"),S1r=o("from_pretrained()"),R1r=o(" class method or the "),FW=a("a"),B1r=o("from_config()"),P1r=o(` class
method.`),I1r=l(),W8=a("p"),q1r=o("This class cannot be instantiated directly using "),Sbe=a("code"),N1r=o("__init__()"),j1r=o(" (throws an error)."),D1r=l(),$t=a("div"),F(H8.$$.fragment),G1r=l(),Rbe=a("p"),O1r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V1r=l(),oc=a("p"),X1r=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),z1r=o("not"),Q1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),W1r=o("from_pretrained()"),H1r=o(" to load the model weights."),U1r=l(),F(iM.$$.fragment),J1r=l(),kr=a("div"),F(U8.$$.fragment),Y1r=l(),Pbe=a("p"),K1r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Z1r=l(),rn=a("p"),ebr=o("The model class to instantiate is selected based on the "),Ibe=a("code"),obr=o("model_type"),rbr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),tbr=o("pretrained_model_name_or_path"),abr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),nbr=o("pretrained_model_name_or_path"),sbr=o(":"),lbr=l(),pe=a("ul"),dM=a("li"),jbe=a("strong"),ibr=o("albert"),dbr=o(" \u2014 "),MW=a("a"),cbr=o("TFAlbertForMultipleChoice"),fbr=o(" (ALBERT model)"),mbr=l(),cM=a("li"),Dbe=a("strong"),gbr=o("bert"),hbr=o(" \u2014 "),EW=a("a"),pbr=o("TFBertForMultipleChoice"),ubr=o(" (BERT model)"),_br=l(),fM=a("li"),Gbe=a("strong"),bbr=o("camembert"),vbr=o(" \u2014 "),CW=a("a"),Fbr=o("TFCamembertForMultipleChoice"),Tbr=o(" (CamemBERT model)"),Mbr=l(),mM=a("li"),Obe=a("strong"),Ebr=o("convbert"),Cbr=o(" \u2014 "),wW=a("a"),wbr=o("TFConvBertForMultipleChoice"),Abr=o(" (ConvBERT model)"),ybr=l(),gM=a("li"),Vbe=a("strong"),Lbr=o("distilbert"),xbr=o(" \u2014 "),AW=a("a"),$br=o("TFDistilBertForMultipleChoice"),kbr=o(" (DistilBERT model)"),Sbr=l(),hM=a("li"),Xbe=a("strong"),Rbr=o("electra"),Bbr=o(" \u2014 "),yW=a("a"),Pbr=o("TFElectraForMultipleChoice"),Ibr=o(" (ELECTRA model)"),qbr=l(),pM=a("li"),zbe=a("strong"),Nbr=o("flaubert"),jbr=o(" \u2014 "),LW=a("a"),Dbr=o("TFFlaubertForMultipleChoice"),Gbr=o(" (FlauBERT model)"),Obr=l(),uM=a("li"),Qbe=a("strong"),Vbr=o("funnel"),Xbr=o(" \u2014 "),xW=a("a"),zbr=o("TFFunnelForMultipleChoice"),Qbr=o(" (Funnel Transformer model)"),Wbr=l(),_M=a("li"),Wbe=a("strong"),Hbr=o("longformer"),Ubr=o(" \u2014 "),$W=a("a"),Jbr=o("TFLongformerForMultipleChoice"),Ybr=o(" (Longformer model)"),Kbr=l(),bM=a("li"),Hbe=a("strong"),Zbr=o("mobilebert"),e4r=o(" \u2014 "),kW=a("a"),o4r=o("TFMobileBertForMultipleChoice"),r4r=o(" (MobileBERT model)"),t4r=l(),vM=a("li"),Ube=a("strong"),a4r=o("mpnet"),n4r=o(" \u2014 "),SW=a("a"),s4r=o("TFMPNetForMultipleChoice"),l4r=o(" (MPNet model)"),i4r=l(),FM=a("li"),Jbe=a("strong"),d4r=o("rembert"),c4r=o(" \u2014 "),RW=a("a"),f4r=o("TFRemBertForMultipleChoice"),m4r=o(" (RemBERT model)"),g4r=l(),TM=a("li"),Ybe=a("strong"),h4r=o("roberta"),p4r=o(" \u2014 "),BW=a("a"),u4r=o("TFRobertaForMultipleChoice"),_4r=o(" (RoBERTa model)"),b4r=l(),MM=a("li"),Kbe=a("strong"),v4r=o("roformer"),F4r=o(" \u2014 "),PW=a("a"),T4r=o("TFRoFormerForMultipleChoice"),M4r=o(" (RoFormer model)"),E4r=l(),EM=a("li"),Zbe=a("strong"),C4r=o("xlm"),w4r=o(" \u2014 "),IW=a("a"),A4r=o("TFXLMForMultipleChoice"),y4r=o(" (XLM model)"),L4r=l(),CM=a("li"),e4e=a("strong"),x4r=o("xlm-roberta"),$4r=o(" \u2014 "),qW=a("a"),k4r=o("TFXLMRobertaForMultipleChoice"),S4r=o(" (XLM-RoBERTa model)"),R4r=l(),wM=a("li"),o4e=a("strong"),B4r=o("xlnet"),P4r=o(" \u2014 "),NW=a("a"),I4r=o("TFXLNetForMultipleChoice"),q4r=o(" (XLNet model)"),N4r=l(),F(AM.$$.fragment),oIe=l(),rc=a("h2"),yM=a("a"),r4e=a("span"),F(J8.$$.fragment),j4r=l(),t4e=a("span"),D4r=o("TFAutoModelForTableQuestionAnswering"),rIe=l(),nr=a("div"),F(Y8.$$.fragment),G4r=l(),tc=a("p"),O4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jW=a("a"),V4r=o("from_pretrained()"),X4r=o(" class method or the "),DW=a("a"),z4r=o("from_config()"),Q4r=o(` class
method.`),W4r=l(),K8=a("p"),H4r=o("This class cannot be instantiated directly using "),a4e=a("code"),U4r=o("__init__()"),J4r=o(" (throws an error)."),Y4r=l(),kt=a("div"),F(Z8.$$.fragment),K4r=l(),n4e=a("p"),Z4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),e2r=l(),ac=a("p"),o2r=o(`Note:
Loading a model from its configuration file does `),s4e=a("strong"),r2r=o("not"),t2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),a2r=o("from_pretrained()"),n2r=o(" to load the model weights."),s2r=l(),F(LM.$$.fragment),l2r=l(),Sr=a("div"),F(e7.$$.fragment),i2r=l(),l4e=a("p"),d2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),c2r=l(),tn=a("p"),f2r=o("The model class to instantiate is selected based on the "),i4e=a("code"),m2r=o("model_type"),g2r=o(` property of the config object (either
passed as an argument or loaded from `),d4e=a("code"),h2r=o("pretrained_model_name_or_path"),p2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=a("code"),u2r=o("pretrained_model_name_or_path"),_2r=o(":"),b2r=l(),f4e=a("ul"),xM=a("li"),m4e=a("strong"),v2r=o("tapas"),F2r=o(" \u2014 "),OW=a("a"),T2r=o("TFTapasForQuestionAnswering"),M2r=o(" (TAPAS model)"),E2r=l(),F($M.$$.fragment),tIe=l(),nc=a("h2"),kM=a("a"),g4e=a("span"),F(o7.$$.fragment),C2r=l(),h4e=a("span"),w2r=o("TFAutoModelForTokenClassification"),aIe=l(),sr=a("div"),F(r7.$$.fragment),A2r=l(),sc=a("p"),y2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VW=a("a"),L2r=o("from_pretrained()"),x2r=o(" class method or the "),XW=a("a"),$2r=o("from_config()"),k2r=o(` class
method.`),S2r=l(),t7=a("p"),R2r=o("This class cannot be instantiated directly using "),p4e=a("code"),B2r=o("__init__()"),P2r=o(" (throws an error)."),I2r=l(),St=a("div"),F(a7.$$.fragment),q2r=l(),u4e=a("p"),N2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),j2r=l(),lc=a("p"),D2r=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),G2r=o("not"),O2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),V2r=o("from_pretrained()"),X2r=o(" to load the model weights."),z2r=l(),F(SM.$$.fragment),Q2r=l(),Rr=a("div"),F(n7.$$.fragment),W2r=l(),b4e=a("p"),H2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U2r=l(),an=a("p"),J2r=o("The model class to instantiate is selected based on the "),v4e=a("code"),Y2r=o("model_type"),K2r=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),Z2r=o("pretrained_model_name_or_path"),e5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),o5r=o("pretrained_model_name_or_path"),r5r=o(":"),t5r=l(),de=a("ul"),RM=a("li"),M4e=a("strong"),a5r=o("albert"),n5r=o(" \u2014 "),QW=a("a"),s5r=o("TFAlbertForTokenClassification"),l5r=o(" (ALBERT model)"),i5r=l(),BM=a("li"),E4e=a("strong"),d5r=o("bert"),c5r=o(" \u2014 "),WW=a("a"),f5r=o("TFBertForTokenClassification"),m5r=o(" (BERT model)"),g5r=l(),PM=a("li"),C4e=a("strong"),h5r=o("camembert"),p5r=o(" \u2014 "),HW=a("a"),u5r=o("TFCamembertForTokenClassification"),_5r=o(" (CamemBERT model)"),b5r=l(),IM=a("li"),w4e=a("strong"),v5r=o("convbert"),F5r=o(" \u2014 "),UW=a("a"),T5r=o("TFConvBertForTokenClassification"),M5r=o(" (ConvBERT model)"),E5r=l(),qM=a("li"),A4e=a("strong"),C5r=o("deberta"),w5r=o(" \u2014 "),JW=a("a"),A5r=o("TFDebertaForTokenClassification"),y5r=o(" (DeBERTa model)"),L5r=l(),NM=a("li"),y4e=a("strong"),x5r=o("deberta-v2"),$5r=o(" \u2014 "),YW=a("a"),k5r=o("TFDebertaV2ForTokenClassification"),S5r=o(" (DeBERTa-v2 model)"),R5r=l(),jM=a("li"),L4e=a("strong"),B5r=o("distilbert"),P5r=o(" \u2014 "),KW=a("a"),I5r=o("TFDistilBertForTokenClassification"),q5r=o(" (DistilBERT model)"),N5r=l(),DM=a("li"),x4e=a("strong"),j5r=o("electra"),D5r=o(" \u2014 "),ZW=a("a"),G5r=o("TFElectraForTokenClassification"),O5r=o(" (ELECTRA model)"),V5r=l(),GM=a("li"),$4e=a("strong"),X5r=o("flaubert"),z5r=o(" \u2014 "),eH=a("a"),Q5r=o("TFFlaubertForTokenClassification"),W5r=o(" (FlauBERT model)"),H5r=l(),OM=a("li"),k4e=a("strong"),U5r=o("funnel"),J5r=o(" \u2014 "),oH=a("a"),Y5r=o("TFFunnelForTokenClassification"),K5r=o(" (Funnel Transformer model)"),Z5r=l(),VM=a("li"),S4e=a("strong"),evr=o("layoutlm"),ovr=o(" \u2014 "),rH=a("a"),rvr=o("TFLayoutLMForTokenClassification"),tvr=o(" (LayoutLM model)"),avr=l(),XM=a("li"),R4e=a("strong"),nvr=o("longformer"),svr=o(" \u2014 "),tH=a("a"),lvr=o("TFLongformerForTokenClassification"),ivr=o(" (Longformer model)"),dvr=l(),zM=a("li"),B4e=a("strong"),cvr=o("mobilebert"),fvr=o(" \u2014 "),aH=a("a"),mvr=o("TFMobileBertForTokenClassification"),gvr=o(" (MobileBERT model)"),hvr=l(),QM=a("li"),P4e=a("strong"),pvr=o("mpnet"),uvr=o(" \u2014 "),nH=a("a"),_vr=o("TFMPNetForTokenClassification"),bvr=o(" (MPNet model)"),vvr=l(),WM=a("li"),I4e=a("strong"),Fvr=o("rembert"),Tvr=o(" \u2014 "),sH=a("a"),Mvr=o("TFRemBertForTokenClassification"),Evr=o(" (RemBERT model)"),Cvr=l(),HM=a("li"),q4e=a("strong"),wvr=o("roberta"),Avr=o(" \u2014 "),lH=a("a"),yvr=o("TFRobertaForTokenClassification"),Lvr=o(" (RoBERTa model)"),xvr=l(),UM=a("li"),N4e=a("strong"),$vr=o("roformer"),kvr=o(" \u2014 "),iH=a("a"),Svr=o("TFRoFormerForTokenClassification"),Rvr=o(" (RoFormer model)"),Bvr=l(),JM=a("li"),j4e=a("strong"),Pvr=o("xlm"),Ivr=o(" \u2014 "),dH=a("a"),qvr=o("TFXLMForTokenClassification"),Nvr=o(" (XLM model)"),jvr=l(),YM=a("li"),D4e=a("strong"),Dvr=o("xlm-roberta"),Gvr=o(" \u2014 "),cH=a("a"),Ovr=o("TFXLMRobertaForTokenClassification"),Vvr=o(" (XLM-RoBERTa model)"),Xvr=l(),KM=a("li"),G4e=a("strong"),zvr=o("xlnet"),Qvr=o(" \u2014 "),fH=a("a"),Wvr=o("TFXLNetForTokenClassification"),Hvr=o(" (XLNet model)"),Uvr=l(),F(ZM.$$.fragment),nIe=l(),ic=a("h2"),eE=a("a"),O4e=a("span"),F(s7.$$.fragment),Jvr=l(),V4e=a("span"),Yvr=o("TFAutoModelForQuestionAnswering"),sIe=l(),lr=a("div"),F(l7.$$.fragment),Kvr=l(),dc=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mH=a("a"),eFr=o("from_pretrained()"),oFr=o(" class method or the "),gH=a("a"),rFr=o("from_config()"),tFr=o(` class
method.`),aFr=l(),i7=a("p"),nFr=o("This class cannot be instantiated directly using "),X4e=a("code"),sFr=o("__init__()"),lFr=o(" (throws an error)."),iFr=l(),Rt=a("div"),F(d7.$$.fragment),dFr=l(),z4e=a("p"),cFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fFr=l(),cc=a("p"),mFr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),gFr=o("not"),hFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),pFr=o("from_pretrained()"),uFr=o(" to load the model weights."),_Fr=l(),F(oE.$$.fragment),bFr=l(),Br=a("div"),F(c7.$$.fragment),vFr=l(),W4e=a("p"),FFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),TFr=l(),nn=a("p"),MFr=o("The model class to instantiate is selected based on the "),H4e=a("code"),EFr=o("model_type"),CFr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),wFr=o("pretrained_model_name_or_path"),AFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),yFr=o("pretrained_model_name_or_path"),LFr=o(":"),xFr=l(),ce=a("ul"),rE=a("li"),Y4e=a("strong"),$Fr=o("albert"),kFr=o(" \u2014 "),pH=a("a"),SFr=o("TFAlbertForQuestionAnswering"),RFr=o(" (ALBERT model)"),BFr=l(),tE=a("li"),K4e=a("strong"),PFr=o("bert"),IFr=o(" \u2014 "),uH=a("a"),qFr=o("TFBertForQuestionAnswering"),NFr=o(" (BERT model)"),jFr=l(),aE=a("li"),Z4e=a("strong"),DFr=o("camembert"),GFr=o(" \u2014 "),_H=a("a"),OFr=o("TFCamembertForQuestionAnswering"),VFr=o(" (CamemBERT model)"),XFr=l(),nE=a("li"),e2e=a("strong"),zFr=o("convbert"),QFr=o(" \u2014 "),bH=a("a"),WFr=o("TFConvBertForQuestionAnswering"),HFr=o(" (ConvBERT model)"),UFr=l(),sE=a("li"),o2e=a("strong"),JFr=o("deberta"),YFr=o(" \u2014 "),vH=a("a"),KFr=o("TFDebertaForQuestionAnswering"),ZFr=o(" (DeBERTa model)"),eTr=l(),lE=a("li"),r2e=a("strong"),oTr=o("deberta-v2"),rTr=o(" \u2014 "),FH=a("a"),tTr=o("TFDebertaV2ForQuestionAnswering"),aTr=o(" (DeBERTa-v2 model)"),nTr=l(),iE=a("li"),t2e=a("strong"),sTr=o("distilbert"),lTr=o(" \u2014 "),TH=a("a"),iTr=o("TFDistilBertForQuestionAnswering"),dTr=o(" (DistilBERT model)"),cTr=l(),dE=a("li"),a2e=a("strong"),fTr=o("electra"),mTr=o(" \u2014 "),MH=a("a"),gTr=o("TFElectraForQuestionAnswering"),hTr=o(" (ELECTRA model)"),pTr=l(),cE=a("li"),n2e=a("strong"),uTr=o("flaubert"),_Tr=o(" \u2014 "),EH=a("a"),bTr=o("TFFlaubertForQuestionAnsweringSimple"),vTr=o(" (FlauBERT model)"),FTr=l(),fE=a("li"),s2e=a("strong"),TTr=o("funnel"),MTr=o(" \u2014 "),CH=a("a"),ETr=o("TFFunnelForQuestionAnswering"),CTr=o(" (Funnel Transformer model)"),wTr=l(),mE=a("li"),l2e=a("strong"),ATr=o("gptj"),yTr=o(" \u2014 "),wH=a("a"),LTr=o("TFGPTJForQuestionAnswering"),xTr=o(" (GPT-J model)"),$Tr=l(),gE=a("li"),i2e=a("strong"),kTr=o("longformer"),STr=o(" \u2014 "),AH=a("a"),RTr=o("TFLongformerForQuestionAnswering"),BTr=o(" (Longformer model)"),PTr=l(),hE=a("li"),d2e=a("strong"),ITr=o("mobilebert"),qTr=o(" \u2014 "),yH=a("a"),NTr=o("TFMobileBertForQuestionAnswering"),jTr=o(" (MobileBERT model)"),DTr=l(),pE=a("li"),c2e=a("strong"),GTr=o("mpnet"),OTr=o(" \u2014 "),LH=a("a"),VTr=o("TFMPNetForQuestionAnswering"),XTr=o(" (MPNet model)"),zTr=l(),uE=a("li"),f2e=a("strong"),QTr=o("rembert"),WTr=o(" \u2014 "),xH=a("a"),HTr=o("TFRemBertForQuestionAnswering"),UTr=o(" (RemBERT model)"),JTr=l(),_E=a("li"),m2e=a("strong"),YTr=o("roberta"),KTr=o(" \u2014 "),$H=a("a"),ZTr=o("TFRobertaForQuestionAnswering"),eMr=o(" (RoBERTa model)"),oMr=l(),bE=a("li"),g2e=a("strong"),rMr=o("roformer"),tMr=o(" \u2014 "),kH=a("a"),aMr=o("TFRoFormerForQuestionAnswering"),nMr=o(" (RoFormer model)"),sMr=l(),vE=a("li"),h2e=a("strong"),lMr=o("xlm"),iMr=o(" \u2014 "),SH=a("a"),dMr=o("TFXLMForQuestionAnsweringSimple"),cMr=o(" (XLM model)"),fMr=l(),FE=a("li"),p2e=a("strong"),mMr=o("xlm-roberta"),gMr=o(" \u2014 "),RH=a("a"),hMr=o("TFXLMRobertaForQuestionAnswering"),pMr=o(" (XLM-RoBERTa model)"),uMr=l(),TE=a("li"),u2e=a("strong"),_Mr=o("xlnet"),bMr=o(" \u2014 "),BH=a("a"),vMr=o("TFXLNetForQuestionAnsweringSimple"),FMr=o(" (XLNet model)"),TMr=l(),F(ME.$$.fragment),lIe=l(),fc=a("h2"),EE=a("a"),_2e=a("span"),F(f7.$$.fragment),MMr=l(),b2e=a("span"),EMr=o("TFAutoModelForVision2Seq"),iIe=l(),ir=a("div"),F(m7.$$.fragment),CMr=l(),mc=a("p"),wMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PH=a("a"),AMr=o("from_pretrained()"),yMr=o(" class method or the "),IH=a("a"),LMr=o("from_config()"),xMr=o(` class
method.`),$Mr=l(),g7=a("p"),kMr=o("This class cannot be instantiated directly using "),v2e=a("code"),SMr=o("__init__()"),RMr=o(" (throws an error)."),BMr=l(),Bt=a("div"),F(h7.$$.fragment),PMr=l(),F2e=a("p"),IMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qMr=l(),gc=a("p"),NMr=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),jMr=o("not"),DMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),GMr=o("from_pretrained()"),OMr=o(" to load the model weights."),VMr=l(),F(CE.$$.fragment),XMr=l(),Pr=a("div"),F(p7.$$.fragment),zMr=l(),M2e=a("p"),QMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WMr=l(),sn=a("p"),HMr=o("The model class to instantiate is selected based on the "),E2e=a("code"),UMr=o("model_type"),JMr=o(` property of the config object (either
passed as an argument or loaded from `),C2e=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=a("code"),ZMr=o("pretrained_model_name_or_path"),eEr=o(":"),oEr=l(),A2e=a("ul"),wE=a("li"),y2e=a("strong"),rEr=o("vision-encoder-decoder"),tEr=o(" \u2014 "),NH=a("a"),aEr=o("TFVisionEncoderDecoderModel"),nEr=o(" (Vision Encoder decoder model)"),sEr=l(),F(AE.$$.fragment),dIe=l(),hc=a("h2"),yE=a("a"),L2e=a("span"),F(u7.$$.fragment),lEr=l(),x2e=a("span"),iEr=o("TFAutoModelForSpeechSeq2Seq"),cIe=l(),dr=a("div"),F(_7.$$.fragment),dEr=l(),pc=a("p"),cEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jH=a("a"),fEr=o("from_pretrained()"),mEr=o(" class method or the "),DH=a("a"),gEr=o("from_config()"),hEr=o(` class
method.`),pEr=l(),b7=a("p"),uEr=o("This class cannot be instantiated directly using "),$2e=a("code"),_Er=o("__init__()"),bEr=o(" (throws an error)."),vEr=l(),Pt=a("div"),F(v7.$$.fragment),FEr=l(),k2e=a("p"),TEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),MEr=l(),uc=a("p"),EEr=o(`Note:
Loading a model from its configuration file does `),S2e=a("strong"),CEr=o("not"),wEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),AEr=o("from_pretrained()"),yEr=o(" to load the model weights."),LEr=l(),F(LE.$$.fragment),xEr=l(),Ir=a("div"),F(F7.$$.fragment),$Er=l(),R2e=a("p"),kEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),SEr=l(),ln=a("p"),REr=o("The model class to instantiate is selected based on the "),B2e=a("code"),BEr=o("model_type"),PEr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),IEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=a("code"),NEr=o("pretrained_model_name_or_path"),jEr=o(":"),DEr=l(),q2e=a("ul"),xE=a("li"),N2e=a("strong"),GEr=o("speech_to_text"),OEr=o(" \u2014 "),OH=a("a"),VEr=o("TFSpeech2TextForConditionalGeneration"),XEr=o(" (Speech2Text model)"),zEr=l(),F($E.$$.fragment),fIe=l(),_c=a("h2"),kE=a("a"),j2e=a("span"),F(T7.$$.fragment),QEr=l(),D2e=a("span"),WEr=o("FlaxAutoModel"),mIe=l(),cr=a("div"),F(M7.$$.fragment),HEr=l(),bc=a("p"),UEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VH=a("a"),JEr=o("from_pretrained()"),YEr=o(" class method or the "),XH=a("a"),KEr=o("from_config()"),ZEr=o(` class
method.`),eCr=l(),E7=a("p"),oCr=o("This class cannot be instantiated directly using "),G2e=a("code"),rCr=o("__init__()"),tCr=o(" (throws an error)."),aCr=l(),It=a("div"),F(C7.$$.fragment),nCr=l(),O2e=a("p"),sCr=o("Instantiates one of the base model classes of the library from a configuration."),lCr=l(),vc=a("p"),iCr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),dCr=o("not"),cCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),fCr=o("from_pretrained()"),mCr=o(" to load the model weights."),gCr=l(),F(SE.$$.fragment),hCr=l(),qr=a("div"),F(w7.$$.fragment),pCr=l(),X2e=a("p"),uCr=o("Instantiate one of the base model classes of the library from a pretrained model."),_Cr=l(),dn=a("p"),bCr=o("The model class to instantiate is selected based on the "),z2e=a("code"),vCr=o("model_type"),FCr=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),TCr=o("pretrained_model_name_or_path"),MCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),ECr=o("pretrained_model_name_or_path"),CCr=o(":"),wCr=l(),re=a("ul"),RE=a("li"),H2e=a("strong"),ACr=o("albert"),yCr=o(" \u2014 "),QH=a("a"),LCr=o("FlaxAlbertModel"),xCr=o(" (ALBERT model)"),$Cr=l(),BE=a("li"),U2e=a("strong"),kCr=o("bart"),SCr=o(" \u2014 "),WH=a("a"),RCr=o("FlaxBartModel"),BCr=o(" (BART model)"),PCr=l(),PE=a("li"),J2e=a("strong"),ICr=o("beit"),qCr=o(" \u2014 "),HH=a("a"),NCr=o("FlaxBeitModel"),jCr=o(" (BEiT model)"),DCr=l(),IE=a("li"),Y2e=a("strong"),GCr=o("bert"),OCr=o(" \u2014 "),UH=a("a"),VCr=o("FlaxBertModel"),XCr=o(" (BERT model)"),zCr=l(),qE=a("li"),K2e=a("strong"),QCr=o("big_bird"),WCr=o(" \u2014 "),JH=a("a"),HCr=o("FlaxBigBirdModel"),UCr=o(" (BigBird model)"),JCr=l(),NE=a("li"),Z2e=a("strong"),YCr=o("blenderbot"),KCr=o(" \u2014 "),YH=a("a"),ZCr=o("FlaxBlenderbotModel"),e3r=o(" (Blenderbot model)"),o3r=l(),jE=a("li"),e5e=a("strong"),r3r=o("blenderbot-small"),t3r=o(" \u2014 "),KH=a("a"),a3r=o("FlaxBlenderbotSmallModel"),n3r=o(" (BlenderbotSmall model)"),s3r=l(),DE=a("li"),o5e=a("strong"),l3r=o("clip"),i3r=o(" \u2014 "),ZH=a("a"),d3r=o("FlaxCLIPModel"),c3r=o(" (CLIP model)"),f3r=l(),GE=a("li"),r5e=a("strong"),m3r=o("distilbert"),g3r=o(" \u2014 "),eU=a("a"),h3r=o("FlaxDistilBertModel"),p3r=o(" (DistilBERT model)"),u3r=l(),OE=a("li"),t5e=a("strong"),_3r=o("electra"),b3r=o(" \u2014 "),oU=a("a"),v3r=o("FlaxElectraModel"),F3r=o(" (ELECTRA model)"),T3r=l(),VE=a("li"),a5e=a("strong"),M3r=o("gpt2"),E3r=o(" \u2014 "),rU=a("a"),C3r=o("FlaxGPT2Model"),w3r=o(" (OpenAI GPT-2 model)"),A3r=l(),XE=a("li"),n5e=a("strong"),y3r=o("gpt_neo"),L3r=o(" \u2014 "),tU=a("a"),x3r=o("FlaxGPTNeoModel"),$3r=o(" (GPT Neo model)"),k3r=l(),zE=a("li"),s5e=a("strong"),S3r=o("gptj"),R3r=o(" \u2014 "),aU=a("a"),B3r=o("FlaxGPTJModel"),P3r=o(" (GPT-J model)"),I3r=l(),QE=a("li"),l5e=a("strong"),q3r=o("marian"),N3r=o(" \u2014 "),nU=a("a"),j3r=o("FlaxMarianModel"),D3r=o(" (Marian model)"),G3r=l(),WE=a("li"),i5e=a("strong"),O3r=o("mbart"),V3r=o(" \u2014 "),sU=a("a"),X3r=o("FlaxMBartModel"),z3r=o(" (mBART model)"),Q3r=l(),HE=a("li"),d5e=a("strong"),W3r=o("mt5"),H3r=o(" \u2014 "),lU=a("a"),U3r=o("FlaxMT5Model"),J3r=o(" (mT5 model)"),Y3r=l(),UE=a("li"),c5e=a("strong"),K3r=o("pegasus"),Z3r=o(" \u2014 "),iU=a("a"),ewr=o("FlaxPegasusModel"),owr=o(" (Pegasus model)"),rwr=l(),JE=a("li"),f5e=a("strong"),twr=o("roberta"),awr=o(" \u2014 "),dU=a("a"),nwr=o("FlaxRobertaModel"),swr=o(" (RoBERTa model)"),lwr=l(),YE=a("li"),m5e=a("strong"),iwr=o("roformer"),dwr=o(" \u2014 "),cU=a("a"),cwr=o("FlaxRoFormerModel"),fwr=o(" (RoFormer model)"),mwr=l(),KE=a("li"),g5e=a("strong"),gwr=o("t5"),hwr=o(" \u2014 "),fU=a("a"),pwr=o("FlaxT5Model"),uwr=o(" (T5 model)"),_wr=l(),ZE=a("li"),h5e=a("strong"),bwr=o("vision-text-dual-encoder"),vwr=o(" \u2014 "),mU=a("a"),Fwr=o("FlaxVisionTextDualEncoderModel"),Twr=o(" (VisionTextDualEncoder model)"),Mwr=l(),eC=a("li"),p5e=a("strong"),Ewr=o("vit"),Cwr=o(" \u2014 "),gU=a("a"),wwr=o("FlaxViTModel"),Awr=o(" (ViT model)"),ywr=l(),oC=a("li"),u5e=a("strong"),Lwr=o("wav2vec2"),xwr=o(" \u2014 "),hU=a("a"),$wr=o("FlaxWav2Vec2Model"),kwr=o(" (Wav2Vec2 model)"),Swr=l(),rC=a("li"),_5e=a("strong"),Rwr=o("xglm"),Bwr=o(" \u2014 "),pU=a("a"),Pwr=o("FlaxXGLMModel"),Iwr=o(" (XGLM model)"),qwr=l(),tC=a("li"),b5e=a("strong"),Nwr=o("xlm-roberta"),jwr=o(" \u2014 "),uU=a("a"),Dwr=o("FlaxXLMRobertaModel"),Gwr=o(" (XLM-RoBERTa model)"),Owr=l(),F(aC.$$.fragment),gIe=l(),Fc=a("h2"),nC=a("a"),v5e=a("span"),F(A7.$$.fragment),Vwr=l(),F5e=a("span"),Xwr=o("FlaxAutoModelForCausalLM"),hIe=l(),fr=a("div"),F(y7.$$.fragment),zwr=l(),Tc=a("p"),Qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_U=a("a"),Wwr=o("from_pretrained()"),Hwr=o(" class method or the "),bU=a("a"),Uwr=o("from_config()"),Jwr=o(` class
method.`),Ywr=l(),L7=a("p"),Kwr=o("This class cannot be instantiated directly using "),T5e=a("code"),Zwr=o("__init__()"),eAr=o(" (throws an error)."),oAr=l(),qt=a("div"),F(x7.$$.fragment),rAr=l(),M5e=a("p"),tAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aAr=l(),Mc=a("p"),nAr=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),sAr=o("not"),lAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),iAr=o("from_pretrained()"),dAr=o(" to load the model weights."),cAr=l(),F(sC.$$.fragment),fAr=l(),Nr=a("div"),F($7.$$.fragment),mAr=l(),C5e=a("p"),gAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hAr=l(),cn=a("p"),pAr=o("The model class to instantiate is selected based on the "),w5e=a("code"),uAr=o("model_type"),_Ar=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),bAr=o("pretrained_model_name_or_path"),vAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y5e=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(":"),MAr=l(),ke=a("ul"),lC=a("li"),L5e=a("strong"),EAr=o("bart"),CAr=o(" \u2014 "),FU=a("a"),wAr=o("FlaxBartForCausalLM"),AAr=o(" (BART model)"),yAr=l(),iC=a("li"),x5e=a("strong"),LAr=o("bert"),xAr=o(" \u2014 "),TU=a("a"),$Ar=o("FlaxBertForCausalLM"),kAr=o(" (BERT model)"),SAr=l(),dC=a("li"),$5e=a("strong"),RAr=o("big_bird"),BAr=o(" \u2014 "),MU=a("a"),PAr=o("FlaxBigBirdForCausalLM"),IAr=o(" (BigBird model)"),qAr=l(),cC=a("li"),k5e=a("strong"),NAr=o("electra"),jAr=o(" \u2014 "),EU=a("a"),DAr=o("FlaxElectraForCausalLM"),GAr=o(" (ELECTRA model)"),OAr=l(),fC=a("li"),S5e=a("strong"),VAr=o("gpt2"),XAr=o(" \u2014 "),CU=a("a"),zAr=o("FlaxGPT2LMHeadModel"),QAr=o(" (OpenAI GPT-2 model)"),WAr=l(),mC=a("li"),R5e=a("strong"),HAr=o("gpt_neo"),UAr=o(" \u2014 "),wU=a("a"),JAr=o("FlaxGPTNeoForCausalLM"),YAr=o(" (GPT Neo model)"),KAr=l(),gC=a("li"),B5e=a("strong"),ZAr=o("gptj"),e0r=o(" \u2014 "),AU=a("a"),o0r=o("FlaxGPTJForCausalLM"),r0r=o(" (GPT-J model)"),t0r=l(),hC=a("li"),P5e=a("strong"),a0r=o("roberta"),n0r=o(" \u2014 "),yU=a("a"),s0r=o("FlaxRobertaForCausalLM"),l0r=o(" (RoBERTa model)"),i0r=l(),pC=a("li"),I5e=a("strong"),d0r=o("xglm"),c0r=o(" \u2014 "),LU=a("a"),f0r=o("FlaxXGLMForCausalLM"),m0r=o(" (XGLM model)"),g0r=l(),F(uC.$$.fragment),pIe=l(),Ec=a("h2"),_C=a("a"),q5e=a("span"),F(k7.$$.fragment),h0r=l(),N5e=a("span"),p0r=o("FlaxAutoModelForPreTraining"),uIe=l(),mr=a("div"),F(S7.$$.fragment),u0r=l(),Cc=a("p"),_0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xU=a("a"),b0r=o("from_pretrained()"),v0r=o(" class method or the "),$U=a("a"),F0r=o("from_config()"),T0r=o(` class
method.`),M0r=l(),R7=a("p"),E0r=o("This class cannot be instantiated directly using "),j5e=a("code"),C0r=o("__init__()"),w0r=o(" (throws an error)."),A0r=l(),Nt=a("div"),F(B7.$$.fragment),y0r=l(),D5e=a("p"),L0r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),x0r=l(),wc=a("p"),$0r=o(`Note:
Loading a model from its configuration file does `),G5e=a("strong"),k0r=o("not"),S0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),R0r=o("from_pretrained()"),B0r=o(" to load the model weights."),P0r=l(),F(bC.$$.fragment),I0r=l(),jr=a("div"),F(P7.$$.fragment),q0r=l(),O5e=a("p"),N0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),j0r=l(),fn=a("p"),D0r=o("The model class to instantiate is selected based on the "),V5e=a("code"),G0r=o("model_type"),O0r=o(` property of the config object (either
passed as an argument or loaded from `),X5e=a("code"),V0r=o("pretrained_model_name_or_path"),X0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),z0r=o("pretrained_model_name_or_path"),Q0r=o(":"),W0r=l(),Me=a("ul"),vC=a("li"),Q5e=a("strong"),H0r=o("albert"),U0r=o(" \u2014 "),SU=a("a"),J0r=o("FlaxAlbertForPreTraining"),Y0r=o(" (ALBERT model)"),K0r=l(),FC=a("li"),W5e=a("strong"),Z0r=o("bart"),eyr=o(" \u2014 "),RU=a("a"),oyr=o("FlaxBartForConditionalGeneration"),ryr=o(" (BART model)"),tyr=l(),TC=a("li"),H5e=a("strong"),ayr=o("bert"),nyr=o(" \u2014 "),BU=a("a"),syr=o("FlaxBertForPreTraining"),lyr=o(" (BERT model)"),iyr=l(),MC=a("li"),U5e=a("strong"),dyr=o("big_bird"),cyr=o(" \u2014 "),PU=a("a"),fyr=o("FlaxBigBirdForPreTraining"),myr=o(" (BigBird model)"),gyr=l(),EC=a("li"),J5e=a("strong"),hyr=o("electra"),pyr=o(" \u2014 "),IU=a("a"),uyr=o("FlaxElectraForPreTraining"),_yr=o(" (ELECTRA model)"),byr=l(),CC=a("li"),Y5e=a("strong"),vyr=o("mbart"),Fyr=o(" \u2014 "),qU=a("a"),Tyr=o("FlaxMBartForConditionalGeneration"),Myr=o(" (mBART model)"),Eyr=l(),wC=a("li"),K5e=a("strong"),Cyr=o("mt5"),wyr=o(" \u2014 "),NU=a("a"),Ayr=o("FlaxMT5ForConditionalGeneration"),yyr=o(" (mT5 model)"),Lyr=l(),AC=a("li"),Z5e=a("strong"),xyr=o("roberta"),$yr=o(" \u2014 "),jU=a("a"),kyr=o("FlaxRobertaForMaskedLM"),Syr=o(" (RoBERTa model)"),Ryr=l(),yC=a("li"),eve=a("strong"),Byr=o("roformer"),Pyr=o(" \u2014 "),DU=a("a"),Iyr=o("FlaxRoFormerForMaskedLM"),qyr=o(" (RoFormer model)"),Nyr=l(),LC=a("li"),ove=a("strong"),jyr=o("t5"),Dyr=o(" \u2014 "),GU=a("a"),Gyr=o("FlaxT5ForConditionalGeneration"),Oyr=o(" (T5 model)"),Vyr=l(),xC=a("li"),rve=a("strong"),Xyr=o("wav2vec2"),zyr=o(" \u2014 "),OU=a("a"),Qyr=o("FlaxWav2Vec2ForPreTraining"),Wyr=o(" (Wav2Vec2 model)"),Hyr=l(),$C=a("li"),tve=a("strong"),Uyr=o("xlm-roberta"),Jyr=o(" \u2014 "),VU=a("a"),Yyr=o("FlaxXLMRobertaForMaskedLM"),Kyr=o(" (XLM-RoBERTa model)"),Zyr=l(),F(kC.$$.fragment),_Ie=l(),Ac=a("h2"),SC=a("a"),ave=a("span"),F(I7.$$.fragment),eLr=l(),nve=a("span"),oLr=o("FlaxAutoModelForMaskedLM"),bIe=l(),gr=a("div"),F(q7.$$.fragment),rLr=l(),yc=a("p"),tLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XU=a("a"),aLr=o("from_pretrained()"),nLr=o(" class method or the "),zU=a("a"),sLr=o("from_config()"),lLr=o(` class
method.`),iLr=l(),N7=a("p"),dLr=o("This class cannot be instantiated directly using "),sve=a("code"),cLr=o("__init__()"),fLr=o(" (throws an error)."),mLr=l(),jt=a("div"),F(j7.$$.fragment),gLr=l(),lve=a("p"),hLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pLr=l(),Lc=a("p"),uLr=o(`Note:
Loading a model from its configuration file does `),ive=a("strong"),_Lr=o("not"),bLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),vLr=o("from_pretrained()"),FLr=o(" to load the model weights."),TLr=l(),F(RC.$$.fragment),MLr=l(),Dr=a("div"),F(D7.$$.fragment),ELr=l(),dve=a("p"),CLr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wLr=l(),mn=a("p"),ALr=o("The model class to instantiate is selected based on the "),cve=a("code"),yLr=o("model_type"),LLr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),xLr=o("pretrained_model_name_or_path"),$Lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(":"),RLr=l(),Le=a("ul"),BC=a("li"),gve=a("strong"),BLr=o("albert"),PLr=o(" \u2014 "),WU=a("a"),ILr=o("FlaxAlbertForMaskedLM"),qLr=o(" (ALBERT model)"),NLr=l(),PC=a("li"),hve=a("strong"),jLr=o("bart"),DLr=o(" \u2014 "),HU=a("a"),GLr=o("FlaxBartForConditionalGeneration"),OLr=o(" (BART model)"),VLr=l(),IC=a("li"),pve=a("strong"),XLr=o("bert"),zLr=o(" \u2014 "),UU=a("a"),QLr=o("FlaxBertForMaskedLM"),WLr=o(" (BERT model)"),HLr=l(),qC=a("li"),uve=a("strong"),ULr=o("big_bird"),JLr=o(" \u2014 "),JU=a("a"),YLr=o("FlaxBigBirdForMaskedLM"),KLr=o(" (BigBird model)"),ZLr=l(),NC=a("li"),_ve=a("strong"),e8r=o("distilbert"),o8r=o(" \u2014 "),YU=a("a"),r8r=o("FlaxDistilBertForMaskedLM"),t8r=o(" (DistilBERT model)"),a8r=l(),jC=a("li"),bve=a("strong"),n8r=o("electra"),s8r=o(" \u2014 "),KU=a("a"),l8r=o("FlaxElectraForMaskedLM"),i8r=o(" (ELECTRA model)"),d8r=l(),DC=a("li"),vve=a("strong"),c8r=o("mbart"),f8r=o(" \u2014 "),ZU=a("a"),m8r=o("FlaxMBartForConditionalGeneration"),g8r=o(" (mBART model)"),h8r=l(),GC=a("li"),Fve=a("strong"),p8r=o("roberta"),u8r=o(" \u2014 "),eJ=a("a"),_8r=o("FlaxRobertaForMaskedLM"),b8r=o(" (RoBERTa model)"),v8r=l(),OC=a("li"),Tve=a("strong"),F8r=o("roformer"),T8r=o(" \u2014 "),oJ=a("a"),M8r=o("FlaxRoFormerForMaskedLM"),E8r=o(" (RoFormer model)"),C8r=l(),VC=a("li"),Mve=a("strong"),w8r=o("xlm-roberta"),A8r=o(" \u2014 "),rJ=a("a"),y8r=o("FlaxXLMRobertaForMaskedLM"),L8r=o(" (XLM-RoBERTa model)"),x8r=l(),F(XC.$$.fragment),vIe=l(),xc=a("h2"),zC=a("a"),Eve=a("span"),F(G7.$$.fragment),$8r=l(),Cve=a("span"),k8r=o("FlaxAutoModelForSeq2SeqLM"),FIe=l(),hr=a("div"),F(O7.$$.fragment),S8r=l(),$c=a("p"),R8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=a("a"),B8r=o("from_pretrained()"),P8r=o(" class method or the "),aJ=a("a"),I8r=o("from_config()"),q8r=o(` class
method.`),N8r=l(),V7=a("p"),j8r=o("This class cannot be instantiated directly using "),wve=a("code"),D8r=o("__init__()"),G8r=o(" (throws an error)."),O8r=l(),Dt=a("div"),F(X7.$$.fragment),V8r=l(),Ave=a("p"),X8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),z8r=l(),kc=a("p"),Q8r=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),W8r=o("not"),H8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),U8r=o("from_pretrained()"),J8r=o(" to load the model weights."),Y8r=l(),F(QC.$$.fragment),K8r=l(),Gr=a("div"),F(z7.$$.fragment),Z8r=l(),Lve=a("p"),e7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),o7r=l(),gn=a("p"),r7r=o("The model class to instantiate is selected based on the "),xve=a("code"),t7r=o("model_type"),a7r=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),n7r=o("pretrained_model_name_or_path"),s7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=a("code"),l7r=o("pretrained_model_name_or_path"),i7r=o(":"),d7r=l(),Se=a("ul"),WC=a("li"),Sve=a("strong"),c7r=o("bart"),f7r=o(" \u2014 "),sJ=a("a"),m7r=o("FlaxBartForConditionalGeneration"),g7r=o(" (BART model)"),h7r=l(),HC=a("li"),Rve=a("strong"),p7r=o("blenderbot"),u7r=o(" \u2014 "),lJ=a("a"),_7r=o("FlaxBlenderbotForConditionalGeneration"),b7r=o(" (Blenderbot model)"),v7r=l(),UC=a("li"),Bve=a("strong"),F7r=o("blenderbot-small"),T7r=o(" \u2014 "),iJ=a("a"),M7r=o("FlaxBlenderbotSmallForConditionalGeneration"),E7r=o(" (BlenderbotSmall model)"),C7r=l(),JC=a("li"),Pve=a("strong"),w7r=o("encoder-decoder"),A7r=o(" \u2014 "),dJ=a("a"),y7r=o("FlaxEncoderDecoderModel"),L7r=o(" (Encoder decoder model)"),x7r=l(),YC=a("li"),Ive=a("strong"),$7r=o("marian"),k7r=o(" \u2014 "),cJ=a("a"),S7r=o("FlaxMarianMTModel"),R7r=o(" (Marian model)"),B7r=l(),KC=a("li"),qve=a("strong"),P7r=o("mbart"),I7r=o(" \u2014 "),fJ=a("a"),q7r=o("FlaxMBartForConditionalGeneration"),N7r=o(" (mBART model)"),j7r=l(),ZC=a("li"),Nve=a("strong"),D7r=o("mt5"),G7r=o(" \u2014 "),mJ=a("a"),O7r=o("FlaxMT5ForConditionalGeneration"),V7r=o(" (mT5 model)"),X7r=l(),e3=a("li"),jve=a("strong"),z7r=o("pegasus"),Q7r=o(" \u2014 "),gJ=a("a"),W7r=o("FlaxPegasusForConditionalGeneration"),H7r=o(" (Pegasus model)"),U7r=l(),o3=a("li"),Dve=a("strong"),J7r=o("t5"),Y7r=o(" \u2014 "),hJ=a("a"),K7r=o("FlaxT5ForConditionalGeneration"),Z7r=o(" (T5 model)"),exr=l(),F(r3.$$.fragment),TIe=l(),Sc=a("h2"),t3=a("a"),Gve=a("span"),F(Q7.$$.fragment),oxr=l(),Ove=a("span"),rxr=o("FlaxAutoModelForSequenceClassification"),MIe=l(),pr=a("div"),F(W7.$$.fragment),txr=l(),Rc=a("p"),axr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pJ=a("a"),nxr=o("from_pretrained()"),sxr=o(" class method or the "),uJ=a("a"),lxr=o("from_config()"),ixr=o(` class
method.`),dxr=l(),H7=a("p"),cxr=o("This class cannot be instantiated directly using "),Vve=a("code"),fxr=o("__init__()"),mxr=o(" (throws an error)."),gxr=l(),Gt=a("div"),F(U7.$$.fragment),hxr=l(),Xve=a("p"),pxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uxr=l(),Bc=a("p"),_xr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),bxr=o("not"),vxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),Fxr=o("from_pretrained()"),Txr=o(" to load the model weights."),Mxr=l(),F(a3.$$.fragment),Exr=l(),Or=a("div"),F(J7.$$.fragment),Cxr=l(),Qve=a("p"),wxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Axr=l(),hn=a("p"),yxr=o("The model class to instantiate is selected based on the "),Wve=a("code"),Lxr=o("model_type"),xxr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),$xr=o("pretrained_model_name_or_path"),kxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),Sxr=o("pretrained_model_name_or_path"),Rxr=o(":"),Bxr=l(),xe=a("ul"),n3=a("li"),Jve=a("strong"),Pxr=o("albert"),Ixr=o(" \u2014 "),bJ=a("a"),qxr=o("FlaxAlbertForSequenceClassification"),Nxr=o(" (ALBERT model)"),jxr=l(),s3=a("li"),Yve=a("strong"),Dxr=o("bart"),Gxr=o(" \u2014 "),vJ=a("a"),Oxr=o("FlaxBartForSequenceClassification"),Vxr=o(" (BART model)"),Xxr=l(),l3=a("li"),Kve=a("strong"),zxr=o("bert"),Qxr=o(" \u2014 "),FJ=a("a"),Wxr=o("FlaxBertForSequenceClassification"),Hxr=o(" (BERT model)"),Uxr=l(),i3=a("li"),Zve=a("strong"),Jxr=o("big_bird"),Yxr=o(" \u2014 "),TJ=a("a"),Kxr=o("FlaxBigBirdForSequenceClassification"),Zxr=o(" (BigBird model)"),e9r=l(),d3=a("li"),eFe=a("strong"),o9r=o("distilbert"),r9r=o(" \u2014 "),MJ=a("a"),t9r=o("FlaxDistilBertForSequenceClassification"),a9r=o(" (DistilBERT model)"),n9r=l(),c3=a("li"),oFe=a("strong"),s9r=o("electra"),l9r=o(" \u2014 "),EJ=a("a"),i9r=o("FlaxElectraForSequenceClassification"),d9r=o(" (ELECTRA model)"),c9r=l(),f3=a("li"),rFe=a("strong"),f9r=o("mbart"),m9r=o(" \u2014 "),CJ=a("a"),g9r=o("FlaxMBartForSequenceClassification"),h9r=o(" (mBART model)"),p9r=l(),m3=a("li"),tFe=a("strong"),u9r=o("roberta"),_9r=o(" \u2014 "),wJ=a("a"),b9r=o("FlaxRobertaForSequenceClassification"),v9r=o(" (RoBERTa model)"),F9r=l(),g3=a("li"),aFe=a("strong"),T9r=o("roformer"),M9r=o(" \u2014 "),AJ=a("a"),E9r=o("FlaxRoFormerForSequenceClassification"),C9r=o(" (RoFormer model)"),w9r=l(),h3=a("li"),nFe=a("strong"),A9r=o("xlm-roberta"),y9r=o(" \u2014 "),yJ=a("a"),L9r=o("FlaxXLMRobertaForSequenceClassification"),x9r=o(" (XLM-RoBERTa model)"),$9r=l(),F(p3.$$.fragment),EIe=l(),Pc=a("h2"),u3=a("a"),sFe=a("span"),F(Y7.$$.fragment),k9r=l(),lFe=a("span"),S9r=o("FlaxAutoModelForQuestionAnswering"),CIe=l(),ur=a("div"),F(K7.$$.fragment),R9r=l(),Ic=a("p"),B9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LJ=a("a"),P9r=o("from_pretrained()"),I9r=o(" class method or the "),xJ=a("a"),q9r=o("from_config()"),N9r=o(` class
method.`),j9r=l(),Z7=a("p"),D9r=o("This class cannot be instantiated directly using "),iFe=a("code"),G9r=o("__init__()"),O9r=o(" (throws an error)."),V9r=l(),Ot=a("div"),F(ex.$$.fragment),X9r=l(),dFe=a("p"),z9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Q9r=l(),qc=a("p"),W9r=o(`Note:
Loading a model from its configuration file does `),cFe=a("strong"),H9r=o("not"),U9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),J9r=o("from_pretrained()"),Y9r=o(" to load the model weights."),K9r=l(),F(_3.$$.fragment),Z9r=l(),Vr=a("div"),F(ox.$$.fragment),e$r=l(),fFe=a("p"),o$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),r$r=l(),pn=a("p"),t$r=o("The model class to instantiate is selected based on the "),mFe=a("code"),a$r=o("model_type"),n$r=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),s$r=o("pretrained_model_name_or_path"),l$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),i$r=o("pretrained_model_name_or_path"),d$r=o(":"),c$r=l(),$e=a("ul"),b3=a("li"),pFe=a("strong"),f$r=o("albert"),m$r=o(" \u2014 "),kJ=a("a"),g$r=o("FlaxAlbertForQuestionAnswering"),h$r=o(" (ALBERT model)"),p$r=l(),v3=a("li"),uFe=a("strong"),u$r=o("bart"),_$r=o(" \u2014 "),SJ=a("a"),b$r=o("FlaxBartForQuestionAnswering"),v$r=o(" (BART model)"),F$r=l(),F3=a("li"),_Fe=a("strong"),T$r=o("bert"),M$r=o(" \u2014 "),RJ=a("a"),E$r=o("FlaxBertForQuestionAnswering"),C$r=o(" (BERT model)"),w$r=l(),T3=a("li"),bFe=a("strong"),A$r=o("big_bird"),y$r=o(" \u2014 "),BJ=a("a"),L$r=o("FlaxBigBirdForQuestionAnswering"),x$r=o(" (BigBird model)"),$$r=l(),M3=a("li"),vFe=a("strong"),k$r=o("distilbert"),S$r=o(" \u2014 "),PJ=a("a"),R$r=o("FlaxDistilBertForQuestionAnswering"),B$r=o(" (DistilBERT model)"),P$r=l(),E3=a("li"),FFe=a("strong"),I$r=o("electra"),q$r=o(" \u2014 "),IJ=a("a"),N$r=o("FlaxElectraForQuestionAnswering"),j$r=o(" (ELECTRA model)"),D$r=l(),C3=a("li"),TFe=a("strong"),G$r=o("mbart"),O$r=o(" \u2014 "),qJ=a("a"),V$r=o("FlaxMBartForQuestionAnswering"),X$r=o(" (mBART model)"),z$r=l(),w3=a("li"),MFe=a("strong"),Q$r=o("roberta"),W$r=o(" \u2014 "),NJ=a("a"),H$r=o("FlaxRobertaForQuestionAnswering"),U$r=o(" (RoBERTa model)"),J$r=l(),A3=a("li"),EFe=a("strong"),Y$r=o("roformer"),K$r=o(" \u2014 "),jJ=a("a"),Z$r=o("FlaxRoFormerForQuestionAnswering"),ekr=o(" (RoFormer model)"),okr=l(),y3=a("li"),CFe=a("strong"),rkr=o("xlm-roberta"),tkr=o(" \u2014 "),DJ=a("a"),akr=o("FlaxXLMRobertaForQuestionAnswering"),nkr=o(" (XLM-RoBERTa model)"),skr=l(),F(L3.$$.fragment),wIe=l(),Nc=a("h2"),x3=a("a"),wFe=a("span"),F(rx.$$.fragment),lkr=l(),AFe=a("span"),ikr=o("FlaxAutoModelForTokenClassification"),AIe=l(),_r=a("div"),F(tx.$$.fragment),dkr=l(),jc=a("p"),ckr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GJ=a("a"),fkr=o("from_pretrained()"),mkr=o(" class method or the "),OJ=a("a"),gkr=o("from_config()"),hkr=o(` class
method.`),pkr=l(),ax=a("p"),ukr=o("This class cannot be instantiated directly using "),yFe=a("code"),_kr=o("__init__()"),bkr=o(" (throws an error)."),vkr=l(),Vt=a("div"),F(nx.$$.fragment),Fkr=l(),LFe=a("p"),Tkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Mkr=l(),Dc=a("p"),Ekr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),Ckr=o("not"),wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),Akr=o("from_pretrained()"),ykr=o(" to load the model weights."),Lkr=l(),F($3.$$.fragment),xkr=l(),Xr=a("div"),F(sx.$$.fragment),$kr=l(),$Fe=a("p"),kkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Skr=l(),un=a("p"),Rkr=o("The model class to instantiate is selected based on the "),kFe=a("code"),Bkr=o("model_type"),Pkr=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),Ikr=o("pretrained_model_name_or_path"),qkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),Nkr=o("pretrained_model_name_or_path"),jkr=o(":"),Dkr=l(),De=a("ul"),k3=a("li"),BFe=a("strong"),Gkr=o("albert"),Okr=o(" \u2014 "),XJ=a("a"),Vkr=o("FlaxAlbertForTokenClassification"),Xkr=o(" (ALBERT model)"),zkr=l(),S3=a("li"),PFe=a("strong"),Qkr=o("bert"),Wkr=o(" \u2014 "),zJ=a("a"),Hkr=o("FlaxBertForTokenClassification"),Ukr=o(" (BERT model)"),Jkr=l(),R3=a("li"),IFe=a("strong"),Ykr=o("big_bird"),Kkr=o(" \u2014 "),QJ=a("a"),Zkr=o("FlaxBigBirdForTokenClassification"),eSr=o(" (BigBird model)"),oSr=l(),B3=a("li"),qFe=a("strong"),rSr=o("distilbert"),tSr=o(" \u2014 "),WJ=a("a"),aSr=o("FlaxDistilBertForTokenClassification"),nSr=o(" (DistilBERT model)"),sSr=l(),P3=a("li"),NFe=a("strong"),lSr=o("electra"),iSr=o(" \u2014 "),HJ=a("a"),dSr=o("FlaxElectraForTokenClassification"),cSr=o(" (ELECTRA model)"),fSr=l(),I3=a("li"),jFe=a("strong"),mSr=o("roberta"),gSr=o(" \u2014 "),UJ=a("a"),hSr=o("FlaxRobertaForTokenClassification"),pSr=o(" (RoBERTa model)"),uSr=l(),q3=a("li"),DFe=a("strong"),_Sr=o("roformer"),bSr=o(" \u2014 "),JJ=a("a"),vSr=o("FlaxRoFormerForTokenClassification"),FSr=o(" (RoFormer model)"),TSr=l(),N3=a("li"),GFe=a("strong"),MSr=o("xlm-roberta"),ESr=o(" \u2014 "),YJ=a("a"),CSr=o("FlaxXLMRobertaForTokenClassification"),wSr=o(" (XLM-RoBERTa model)"),ASr=l(),F(j3.$$.fragment),yIe=l(),Gc=a("h2"),D3=a("a"),OFe=a("span"),F(lx.$$.fragment),ySr=l(),VFe=a("span"),LSr=o("FlaxAutoModelForMultipleChoice"),LIe=l(),br=a("div"),F(ix.$$.fragment),xSr=l(),Oc=a("p"),$Sr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KJ=a("a"),kSr=o("from_pretrained()"),SSr=o(" class method or the "),ZJ=a("a"),RSr=o("from_config()"),BSr=o(` class
method.`),PSr=l(),dx=a("p"),ISr=o("This class cannot be instantiated directly using "),XFe=a("code"),qSr=o("__init__()"),NSr=o(" (throws an error)."),jSr=l(),Xt=a("div"),F(cx.$$.fragment),DSr=l(),zFe=a("p"),GSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OSr=l(),Vc=a("p"),VSr=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),XSr=o("not"),zSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),QSr=o("from_pretrained()"),WSr=o(" to load the model weights."),HSr=l(),F(G3.$$.fragment),USr=l(),zr=a("div"),F(fx.$$.fragment),JSr=l(),WFe=a("p"),YSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KSr=l(),_n=a("p"),ZSr=o("The model class to instantiate is selected based on the "),HFe=a("code"),eRr=o("model_type"),oRr=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),rRr=o("pretrained_model_name_or_path"),tRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(":"),sRr=l(),Ge=a("ul"),O3=a("li"),YFe=a("strong"),lRr=o("albert"),iRr=o(" \u2014 "),oY=a("a"),dRr=o("FlaxAlbertForMultipleChoice"),cRr=o(" (ALBERT model)"),fRr=l(),V3=a("li"),KFe=a("strong"),mRr=o("bert"),gRr=o(" \u2014 "),rY=a("a"),hRr=o("FlaxBertForMultipleChoice"),pRr=o(" (BERT model)"),uRr=l(),X3=a("li"),ZFe=a("strong"),_Rr=o("big_bird"),bRr=o(" \u2014 "),tY=a("a"),vRr=o("FlaxBigBirdForMultipleChoice"),FRr=o(" (BigBird model)"),TRr=l(),z3=a("li"),eTe=a("strong"),MRr=o("distilbert"),ERr=o(" \u2014 "),aY=a("a"),CRr=o("FlaxDistilBertForMultipleChoice"),wRr=o(" (DistilBERT model)"),ARr=l(),Q3=a("li"),oTe=a("strong"),yRr=o("electra"),LRr=o(" \u2014 "),nY=a("a"),xRr=o("FlaxElectraForMultipleChoice"),$Rr=o(" (ELECTRA model)"),kRr=l(),W3=a("li"),rTe=a("strong"),SRr=o("roberta"),RRr=o(" \u2014 "),sY=a("a"),BRr=o("FlaxRobertaForMultipleChoice"),PRr=o(" (RoBERTa model)"),IRr=l(),H3=a("li"),tTe=a("strong"),qRr=o("roformer"),NRr=o(" \u2014 "),lY=a("a"),jRr=o("FlaxRoFormerForMultipleChoice"),DRr=o(" (RoFormer model)"),GRr=l(),U3=a("li"),aTe=a("strong"),ORr=o("xlm-roberta"),VRr=o(" \u2014 "),iY=a("a"),XRr=o("FlaxXLMRobertaForMultipleChoice"),zRr=o(" (XLM-RoBERTa model)"),QRr=l(),F(J3.$$.fragment),xIe=l(),Xc=a("h2"),Y3=a("a"),nTe=a("span"),F(mx.$$.fragment),WRr=l(),sTe=a("span"),HRr=o("FlaxAutoModelForNextSentencePrediction"),$Ie=l(),vr=a("div"),F(gx.$$.fragment),URr=l(),zc=a("p"),JRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dY=a("a"),YRr=o("from_pretrained()"),KRr=o(" class method or the "),cY=a("a"),ZRr=o("from_config()"),eBr=o(` class
method.`),oBr=l(),hx=a("p"),rBr=o("This class cannot be instantiated directly using "),lTe=a("code"),tBr=o("__init__()"),aBr=o(" (throws an error)."),nBr=l(),zt=a("div"),F(px.$$.fragment),sBr=l(),iTe=a("p"),lBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),iBr=l(),Qc=a("p"),dBr=o(`Note:
Loading a model from its configuration file does `),dTe=a("strong"),cBr=o("not"),fBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),mBr=o("from_pretrained()"),gBr=o(" to load the model weights."),hBr=l(),F(K3.$$.fragment),pBr=l(),Qr=a("div"),F(ux.$$.fragment),uBr=l(),cTe=a("p"),_Br=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bBr=l(),bn=a("p"),vBr=o("The model class to instantiate is selected based on the "),fTe=a("code"),FBr=o("model_type"),TBr=o(` property of the config object (either
passed as an argument or loaded from `),mTe=a("code"),MBr=o("pretrained_model_name_or_path"),EBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=a("code"),CBr=o("pretrained_model_name_or_path"),wBr=o(":"),ABr=l(),hTe=a("ul"),Z3=a("li"),pTe=a("strong"),yBr=o("bert"),LBr=o(" \u2014 "),mY=a("a"),xBr=o("FlaxBertForNextSentencePrediction"),$Br=o(" (BERT model)"),kBr=l(),F(ew.$$.fragment),kIe=l(),Wc=a("h2"),ow=a("a"),uTe=a("span"),F(_x.$$.fragment),SBr=l(),_Te=a("span"),RBr=o("FlaxAutoModelForImageClassification"),SIe=l(),Fr=a("div"),F(bx.$$.fragment),BBr=l(),Hc=a("p"),PBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gY=a("a"),IBr=o("from_pretrained()"),qBr=o(" class method or the "),hY=a("a"),NBr=o("from_config()"),jBr=o(` class
method.`),DBr=l(),vx=a("p"),GBr=o("This class cannot be instantiated directly using "),bTe=a("code"),OBr=o("__init__()"),VBr=o(" (throws an error)."),XBr=l(),Qt=a("div"),F(Fx.$$.fragment),zBr=l(),vTe=a("p"),QBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),WBr=l(),Uc=a("p"),HBr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),UBr=o("not"),JBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),YBr=o("from_pretrained()"),KBr=o(" to load the model weights."),ZBr=l(),F(rw.$$.fragment),ePr=l(),Wr=a("div"),F(Tx.$$.fragment),oPr=l(),TTe=a("p"),rPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tPr=l(),vn=a("p"),aPr=o("The model class to instantiate is selected based on the "),MTe=a("code"),nPr=o("model_type"),sPr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),dPr=o("pretrained_model_name_or_path"),cPr=o(":"),fPr=l(),Mx=a("ul"),tw=a("li"),wTe=a("strong"),mPr=o("beit"),gPr=o(" \u2014 "),uY=a("a"),hPr=o("FlaxBeitForImageClassification"),pPr=o(" (BEiT model)"),uPr=l(),aw=a("li"),ATe=a("strong"),_Pr=o("vit"),bPr=o(" \u2014 "),_Y=a("a"),vPr=o("FlaxViTForImageClassification"),FPr=o(" (ViT model)"),TPr=l(),F(nw.$$.fragment),RIe=l(),Jc=a("h2"),sw=a("a"),yTe=a("span"),F(Ex.$$.fragment),MPr=l(),LTe=a("span"),EPr=o("FlaxAutoModelForVision2Seq"),BIe=l(),Tr=a("div"),F(Cx.$$.fragment),CPr=l(),Yc=a("p"),wPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bY=a("a"),APr=o("from_pretrained()"),yPr=o(" class method or the "),vY=a("a"),LPr=o("from_config()"),xPr=o(` class
method.`),$Pr=l(),wx=a("p"),kPr=o("This class cannot be instantiated directly using "),xTe=a("code"),SPr=o("__init__()"),RPr=o(" (throws an error)."),BPr=l(),Wt=a("div"),F(Ax.$$.fragment),PPr=l(),$Te=a("p"),IPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qPr=l(),Kc=a("p"),NPr=o(`Note:
Loading a model from its configuration file does `),kTe=a("strong"),jPr=o("not"),DPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),GPr=o("from_pretrained()"),OPr=o(" to load the model weights."),VPr=l(),F(lw.$$.fragment),XPr=l(),Hr=a("div"),F(yx.$$.fragment),zPr=l(),STe=a("p"),QPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WPr=l(),Fn=a("p"),HPr=o("The model class to instantiate is selected based on the "),RTe=a("code"),UPr=o("model_type"),JPr=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),YPr=o("pretrained_model_name_or_path"),KPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=a("code"),ZPr=o("pretrained_model_name_or_path"),eIr=o(":"),oIr=l(),ITe=a("ul"),iw=a("li"),qTe=a("strong"),rIr=o("vision-encoder-decoder"),tIr=o(" \u2014 "),TY=a("a"),aIr=o("FlaxVisionEncoderDecoderModel"),nIr=o(" (Vision Encoder decoder model)"),sIr=l(),F(dw.$$.fragment),this.h()},l(f){const _=dwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Lx=s(p);m=n(Lx,"A",{id:!0,class:!0,href:!0});var NTe=s(m);u=n(NTe,"SPAN",{});var jTe=s(u);T(d.$$.fragment,jTe),jTe.forEach(t),NTe.forEach(t),h=i(Lx),Mo=n(Lx,"SPAN",{});var DTe=s(Mo);oi=r(DTe,"Auto Classes"),DTe.forEach(t),Lx.forEach(t),rf=i(f),Kr=n(f,"P",{});var xx=s(Kr);ri=r(xx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(xx,"CODE",{});var GTe=s(ti);w0=r(GTe,"from_pretrained()"),GTe.forEach(t),tf=r(xx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xx.forEach(t),qe=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ai=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var OTe=s(Mn);A0=r(OTe,"AutoConfig"),OTe.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var VTe=s(Cn);y0=r(VTe,"AutoModel"),VTe.forEach(t),ni=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var XTe=s(wn);L0=r(XTe,"AutoTokenizer"),XTe.forEach(t),si=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),af=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var $x=s(Ae);D9=r($x,"will create a model that is an instance of "),li=n($x,"A",{href:!0});var zTe=s(li);G9=r(zTe,"BertModel"),zTe.forEach(t),O9=r($x,"."),$x.forEach(t),Eo=i(f),Fa=n(f,"P",{});var kx=s(Fa);V9=r(kx,"There is one class of "),nf=n(kx,"CODE",{});var QTe=s(nf);X9=r(QTe,"AutoModel"),QTe.forEach(t),DNe=r(kx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),kx.forEach(t),BBe=i(f),ii=n(f,"H2",{class:!0});var Sx=s(ii);sf=n(Sx,"A",{id:!0,class:!0,href:!0});var WTe=s(sf);gZ=n(WTe,"SPAN",{});var HTe=s(gZ);T(x0.$$.fragment,HTe),HTe.forEach(t),WTe.forEach(t),GNe=i(Sx),hZ=n(Sx,"SPAN",{});var UTe=s(hZ);ONe=r(UTe,"Extending the Auto Classes"),UTe.forEach(t),Sx.forEach(t),PBe=i(f),An=n(f,"P",{});var Zc=s(An);VNe=r(Zc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pZ=n(Zc,"CODE",{});var JTe=s(pZ);XNe=r(JTe,"NewModel"),JTe.forEach(t),zNe=r(Zc,", make sure you have a "),uZ=n(Zc,"CODE",{});var YTe=s(uZ);QNe=r(YTe,"NewModelConfig"),YTe.forEach(t),WNe=r(Zc,` then you can add those to the auto
classes like this:`),Zc.forEach(t),IBe=i(f),T($0.$$.fragment,f),qBe=i(f),z9=n(f,"P",{});var KTe=s(z9);HNe=r(KTe,"You will then be able to use the auto classes like you would usually do!"),KTe.forEach(t),NBe=i(f),T(lf.$$.fragment,f),jBe=i(f),di=n(f,"H2",{class:!0});var Rx=s(di);df=n(Rx,"A",{id:!0,class:!0,href:!0});var ZTe=s(df);_Z=n(ZTe,"SPAN",{});var eMe=s(_Z);T(k0.$$.fragment,eMe),eMe.forEach(t),ZTe.forEach(t),UNe=i(Rx),bZ=n(Rx,"SPAN",{});var oMe=s(bZ);JNe=r(oMe,"AutoConfig"),oMe.forEach(t),Rx.forEach(t),DBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(S0.$$.fragment,Jr),YNe=i(Jr),R0=n(Jr,"P",{});var Bx=s(R0);KNe=r(Bx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Q9=n(Bx,"A",{href:!0});var rMe=s(Q9);ZNe=r(rMe,"from_pretrained()"),rMe.forEach(t),eje=r(Bx," class method."),Bx.forEach(t),oje=i(Jr),B0=n(Jr,"P",{});var Px=s(B0);rje=r(Px,"This class cannot be instantiated directly using "),vZ=n(Px,"CODE",{});var tMe=s(vZ);tje=r(tMe,"__init__()"),tMe.forEach(t),aje=r(Px," (throws an error)."),Px.forEach(t),nje=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(P0.$$.fragment,Yr),sje=i(Yr),FZ=n(Yr,"P",{});var aMe=s(FZ);lje=r(aMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),aMe.forEach(t),ije=i(Yr),ci=n(Yr,"P",{});var ef=s(ci);dje=r(ef,"The configuration class to instantiate is selected based on the "),TZ=n(ef,"CODE",{});var nMe=s(TZ);cje=r(nMe,"model_type"),nMe.forEach(t),fje=r(ef,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MZ=n(ef,"CODE",{});var sMe=s(MZ);mje=r(sMe,"pretrained_model_name_or_path"),sMe.forEach(t),gje=r(ef,":"),ef.forEach(t),hje=i(Yr),A=n(Yr,"UL",{});var y=s(A);cf=n(y,"LI",{});var cw=s(cf);EZ=n(cw,"STRONG",{});var lMe=s(EZ);pje=r(lMe,"albert"),lMe.forEach(t),uje=r(cw," \u2014 "),W9=n(cw,"A",{href:!0});var iMe=s(W9);_je=r(iMe,"AlbertConfig"),iMe.forEach(t),bje=r(cw," (ALBERT model)"),cw.forEach(t),vje=i(y),ff=n(y,"LI",{});var fw=s(ff);CZ=n(fw,"STRONG",{});var dMe=s(CZ);Fje=r(dMe,"bart"),dMe.forEach(t),Tje=r(fw," \u2014 "),H9=n(fw,"A",{href:!0});var cMe=s(H9);Mje=r(cMe,"BartConfig"),cMe.forEach(t),Eje=r(fw," (BART model)"),fw.forEach(t),Cje=i(y),mf=n(y,"LI",{});var mw=s(mf);wZ=n(mw,"STRONG",{});var fMe=s(wZ);wje=r(fMe,"beit"),fMe.forEach(t),Aje=r(mw," \u2014 "),U9=n(mw,"A",{href:!0});var mMe=s(U9);yje=r(mMe,"BeitConfig"),mMe.forEach(t),Lje=r(mw," (BEiT model)"),mw.forEach(t),xje=i(y),gf=n(y,"LI",{});var gw=s(gf);AZ=n(gw,"STRONG",{});var gMe=s(AZ);$je=r(gMe,"bert"),gMe.forEach(t),kje=r(gw," \u2014 "),J9=n(gw,"A",{href:!0});var hMe=s(J9);Sje=r(hMe,"BertConfig"),hMe.forEach(t),Rje=r(gw," (BERT model)"),gw.forEach(t),Bje=i(y),hf=n(y,"LI",{});var hw=s(hf);yZ=n(hw,"STRONG",{});var pMe=s(yZ);Pje=r(pMe,"bert-generation"),pMe.forEach(t),Ije=r(hw," \u2014 "),Y9=n(hw,"A",{href:!0});var uMe=s(Y9);qje=r(uMe,"BertGenerationConfig"),uMe.forEach(t),Nje=r(hw," (Bert Generation model)"),hw.forEach(t),jje=i(y),pf=n(y,"LI",{});var pw=s(pf);LZ=n(pw,"STRONG",{});var _Me=s(LZ);Dje=r(_Me,"big_bird"),_Me.forEach(t),Gje=r(pw," \u2014 "),K9=n(pw,"A",{href:!0});var bMe=s(K9);Oje=r(bMe,"BigBirdConfig"),bMe.forEach(t),Vje=r(pw," (BigBird model)"),pw.forEach(t),Xje=i(y),uf=n(y,"LI",{});var uw=s(uf);xZ=n(uw,"STRONG",{});var vMe=s(xZ);zje=r(vMe,"bigbird_pegasus"),vMe.forEach(t),Qje=r(uw," \u2014 "),Z9=n(uw,"A",{href:!0});var FMe=s(Z9);Wje=r(FMe,"BigBirdPegasusConfig"),FMe.forEach(t),Hje=r(uw," (BigBirdPegasus model)"),uw.forEach(t),Uje=i(y),_f=n(y,"LI",{});var _w=s(_f);$Z=n(_w,"STRONG",{});var TMe=s($Z);Jje=r(TMe,"blenderbot"),TMe.forEach(t),Yje=r(_w," \u2014 "),e$=n(_w,"A",{href:!0});var MMe=s(e$);Kje=r(MMe,"BlenderbotConfig"),MMe.forEach(t),Zje=r(_w," (Blenderbot model)"),_w.forEach(t),eDe=i(y),bf=n(y,"LI",{});var bw=s(bf);kZ=n(bw,"STRONG",{});var EMe=s(kZ);oDe=r(EMe,"blenderbot-small"),EMe.forEach(t),rDe=r(bw," \u2014 "),o$=n(bw,"A",{href:!0});var CMe=s(o$);tDe=r(CMe,"BlenderbotSmallConfig"),CMe.forEach(t),aDe=r(bw," (BlenderbotSmall model)"),bw.forEach(t),nDe=i(y),vf=n(y,"LI",{});var vw=s(vf);SZ=n(vw,"STRONG",{});var wMe=s(SZ);sDe=r(wMe,"camembert"),wMe.forEach(t),lDe=r(vw," \u2014 "),r$=n(vw,"A",{href:!0});var AMe=s(r$);iDe=r(AMe,"CamembertConfig"),AMe.forEach(t),dDe=r(vw," (CamemBERT model)"),vw.forEach(t),cDe=i(y),Ff=n(y,"LI",{});var Fw=s(Ff);RZ=n(Fw,"STRONG",{});var yMe=s(RZ);fDe=r(yMe,"canine"),yMe.forEach(t),mDe=r(Fw," \u2014 "),t$=n(Fw,"A",{href:!0});var LMe=s(t$);gDe=r(LMe,"CanineConfig"),LMe.forEach(t),hDe=r(Fw," (Canine model)"),Fw.forEach(t),pDe=i(y),Tf=n(y,"LI",{});var Tw=s(Tf);BZ=n(Tw,"STRONG",{});var xMe=s(BZ);uDe=r(xMe,"clip"),xMe.forEach(t),_De=r(Tw," \u2014 "),a$=n(Tw,"A",{href:!0});var $Me=s(a$);bDe=r($Me,"CLIPConfig"),$Me.forEach(t),vDe=r(Tw," (CLIP model)"),Tw.forEach(t),FDe=i(y),Mf=n(y,"LI",{});var Mw=s(Mf);PZ=n(Mw,"STRONG",{});var kMe=s(PZ);TDe=r(kMe,"convbert"),kMe.forEach(t),MDe=r(Mw," \u2014 "),n$=n(Mw,"A",{href:!0});var SMe=s(n$);EDe=r(SMe,"ConvBertConfig"),SMe.forEach(t),CDe=r(Mw," (ConvBERT model)"),Mw.forEach(t),wDe=i(y),Ef=n(y,"LI",{});var Ew=s(Ef);IZ=n(Ew,"STRONG",{});var RMe=s(IZ);ADe=r(RMe,"convnext"),RMe.forEach(t),yDe=r(Ew," \u2014 "),s$=n(Ew,"A",{href:!0});var BMe=s(s$);LDe=r(BMe,"ConvNextConfig"),BMe.forEach(t),xDe=r(Ew," (ConvNext model)"),Ew.forEach(t),$De=i(y),Cf=n(y,"LI",{});var Cw=s(Cf);qZ=n(Cw,"STRONG",{});var PMe=s(qZ);kDe=r(PMe,"ctrl"),PMe.forEach(t),SDe=r(Cw," \u2014 "),l$=n(Cw,"A",{href:!0});var IMe=s(l$);RDe=r(IMe,"CTRLConfig"),IMe.forEach(t),BDe=r(Cw," (CTRL model)"),Cw.forEach(t),PDe=i(y),wf=n(y,"LI",{});var ww=s(wf);NZ=n(ww,"STRONG",{});var qMe=s(NZ);IDe=r(qMe,"data2vec-audio"),qMe.forEach(t),qDe=r(ww," \u2014 "),i$=n(ww,"A",{href:!0});var NMe=s(i$);NDe=r(NMe,"Data2VecAudioConfig"),NMe.forEach(t),jDe=r(ww," (Data2VecAudio model)"),ww.forEach(t),DDe=i(y),Af=n(y,"LI",{});var Aw=s(Af);jZ=n(Aw,"STRONG",{});var jMe=s(jZ);GDe=r(jMe,"data2vec-text"),jMe.forEach(t),ODe=r(Aw," \u2014 "),d$=n(Aw,"A",{href:!0});var DMe=s(d$);VDe=r(DMe,"Data2VecTextConfig"),DMe.forEach(t),XDe=r(Aw," (Data2VecText model)"),Aw.forEach(t),zDe=i(y),yf=n(y,"LI",{});var yw=s(yf);DZ=n(yw,"STRONG",{});var GMe=s(DZ);QDe=r(GMe,"data2vec-vision"),GMe.forEach(t),WDe=r(yw," \u2014 "),c$=n(yw,"A",{href:!0});var OMe=s(c$);HDe=r(OMe,"Data2VecVisionConfig"),OMe.forEach(t),UDe=r(yw," (Data2VecVision model)"),yw.forEach(t),JDe=i(y),Lf=n(y,"LI",{});var Lw=s(Lf);GZ=n(Lw,"STRONG",{});var VMe=s(GZ);YDe=r(VMe,"deberta"),VMe.forEach(t),KDe=r(Lw," \u2014 "),f$=n(Lw,"A",{href:!0});var XMe=s(f$);ZDe=r(XMe,"DebertaConfig"),XMe.forEach(t),eGe=r(Lw," (DeBERTa model)"),Lw.forEach(t),oGe=i(y),xf=n(y,"LI",{});var xw=s(xf);OZ=n(xw,"STRONG",{});var zMe=s(OZ);rGe=r(zMe,"deberta-v2"),zMe.forEach(t),tGe=r(xw," \u2014 "),m$=n(xw,"A",{href:!0});var QMe=s(m$);aGe=r(QMe,"DebertaV2Config"),QMe.forEach(t),nGe=r(xw," (DeBERTa-v2 model)"),xw.forEach(t),sGe=i(y),$f=n(y,"LI",{});var $w=s($f);VZ=n($w,"STRONG",{});var WMe=s(VZ);lGe=r(WMe,"decision_transformer"),WMe.forEach(t),iGe=r($w," \u2014 "),g$=n($w,"A",{href:!0});var HMe=s(g$);dGe=r(HMe,"DecisionTransformerConfig"),HMe.forEach(t),cGe=r($w," (Decision Transformer model)"),$w.forEach(t),fGe=i(y),kf=n(y,"LI",{});var kw=s(kf);XZ=n(kw,"STRONG",{});var UMe=s(XZ);mGe=r(UMe,"deit"),UMe.forEach(t),gGe=r(kw," \u2014 "),h$=n(kw,"A",{href:!0});var JMe=s(h$);hGe=r(JMe,"DeiTConfig"),JMe.forEach(t),pGe=r(kw," (DeiT model)"),kw.forEach(t),uGe=i(y),Sf=n(y,"LI",{});var YMe=s(Sf);zZ=n(YMe,"STRONG",{});var iIr=s(zZ);_Ge=r(iIr,"detr"),iIr.forEach(t),bGe=r(YMe," \u2014 "),p$=n(YMe,"A",{href:!0});var dIr=s(p$);vGe=r(dIr,"DetrConfig"),dIr.forEach(t),FGe=r(YMe," (DETR model)"),YMe.forEach(t),TGe=i(y),Rf=n(y,"LI",{});var KMe=s(Rf);QZ=n(KMe,"STRONG",{});var cIr=s(QZ);MGe=r(cIr,"distilbert"),cIr.forEach(t),EGe=r(KMe," \u2014 "),u$=n(KMe,"A",{href:!0});var fIr=s(u$);CGe=r(fIr,"DistilBertConfig"),fIr.forEach(t),wGe=r(KMe," (DistilBERT model)"),KMe.forEach(t),AGe=i(y),Bf=n(y,"LI",{});var ZMe=s(Bf);WZ=n(ZMe,"STRONG",{});var mIr=s(WZ);yGe=r(mIr,"dpr"),mIr.forEach(t),LGe=r(ZMe," \u2014 "),_$=n(ZMe,"A",{href:!0});var gIr=s(_$);xGe=r(gIr,"DPRConfig"),gIr.forEach(t),$Ge=r(ZMe," (DPR model)"),ZMe.forEach(t),kGe=i(y),Pf=n(y,"LI",{});var eEe=s(Pf);HZ=n(eEe,"STRONG",{});var hIr=s(HZ);SGe=r(hIr,"dpt"),hIr.forEach(t),RGe=r(eEe," \u2014 "),b$=n(eEe,"A",{href:!0});var pIr=s(b$);BGe=r(pIr,"DPTConfig"),pIr.forEach(t),PGe=r(eEe," (DPT model)"),eEe.forEach(t),IGe=i(y),If=n(y,"LI",{});var oEe=s(If);UZ=n(oEe,"STRONG",{});var uIr=s(UZ);qGe=r(uIr,"electra"),uIr.forEach(t),NGe=r(oEe," \u2014 "),v$=n(oEe,"A",{href:!0});var _Ir=s(v$);jGe=r(_Ir,"ElectraConfig"),_Ir.forEach(t),DGe=r(oEe," (ELECTRA model)"),oEe.forEach(t),GGe=i(y),qf=n(y,"LI",{});var rEe=s(qf);JZ=n(rEe,"STRONG",{});var bIr=s(JZ);OGe=r(bIr,"encoder-decoder"),bIr.forEach(t),VGe=r(rEe," \u2014 "),F$=n(rEe,"A",{href:!0});var vIr=s(F$);XGe=r(vIr,"EncoderDecoderConfig"),vIr.forEach(t),zGe=r(rEe," (Encoder decoder model)"),rEe.forEach(t),QGe=i(y),Nf=n(y,"LI",{});var tEe=s(Nf);YZ=n(tEe,"STRONG",{});var FIr=s(YZ);WGe=r(FIr,"flaubert"),FIr.forEach(t),HGe=r(tEe," \u2014 "),T$=n(tEe,"A",{href:!0});var TIr=s(T$);UGe=r(TIr,"FlaubertConfig"),TIr.forEach(t),JGe=r(tEe," (FlauBERT model)"),tEe.forEach(t),YGe=i(y),jf=n(y,"LI",{});var aEe=s(jf);KZ=n(aEe,"STRONG",{});var MIr=s(KZ);KGe=r(MIr,"flava"),MIr.forEach(t),ZGe=r(aEe," \u2014 "),M$=n(aEe,"A",{href:!0});var EIr=s(M$);eOe=r(EIr,"FlavaConfig"),EIr.forEach(t),oOe=r(aEe," (Flava model)"),aEe.forEach(t),rOe=i(y),Df=n(y,"LI",{});var nEe=s(Df);ZZ=n(nEe,"STRONG",{});var CIr=s(ZZ);tOe=r(CIr,"fnet"),CIr.forEach(t),aOe=r(nEe," \u2014 "),E$=n(nEe,"A",{href:!0});var wIr=s(E$);nOe=r(wIr,"FNetConfig"),wIr.forEach(t),sOe=r(nEe," (FNet model)"),nEe.forEach(t),lOe=i(y),Gf=n(y,"LI",{});var sEe=s(Gf);eee=n(sEe,"STRONG",{});var AIr=s(eee);iOe=r(AIr,"fsmt"),AIr.forEach(t),dOe=r(sEe," \u2014 "),C$=n(sEe,"A",{href:!0});var yIr=s(C$);cOe=r(yIr,"FSMTConfig"),yIr.forEach(t),fOe=r(sEe," (FairSeq Machine-Translation model)"),sEe.forEach(t),mOe=i(y),Of=n(y,"LI",{});var lEe=s(Of);oee=n(lEe,"STRONG",{});var LIr=s(oee);gOe=r(LIr,"funnel"),LIr.forEach(t),hOe=r(lEe," \u2014 "),w$=n(lEe,"A",{href:!0});var xIr=s(w$);pOe=r(xIr,"FunnelConfig"),xIr.forEach(t),uOe=r(lEe," (Funnel Transformer model)"),lEe.forEach(t),_Oe=i(y),Vf=n(y,"LI",{});var iEe=s(Vf);ree=n(iEe,"STRONG",{});var $Ir=s(ree);bOe=r($Ir,"glpn"),$Ir.forEach(t),vOe=r(iEe," \u2014 "),A$=n(iEe,"A",{href:!0});var kIr=s(A$);FOe=r(kIr,"GLPNConfig"),kIr.forEach(t),TOe=r(iEe," (GLPN model)"),iEe.forEach(t),MOe=i(y),Xf=n(y,"LI",{});var dEe=s(Xf);tee=n(dEe,"STRONG",{});var SIr=s(tee);EOe=r(SIr,"gpt2"),SIr.forEach(t),COe=r(dEe," \u2014 "),y$=n(dEe,"A",{href:!0});var RIr=s(y$);wOe=r(RIr,"GPT2Config"),RIr.forEach(t),AOe=r(dEe," (OpenAI GPT-2 model)"),dEe.forEach(t),yOe=i(y),zf=n(y,"LI",{});var cEe=s(zf);aee=n(cEe,"STRONG",{});var BIr=s(aee);LOe=r(BIr,"gpt_neo"),BIr.forEach(t),xOe=r(cEe," \u2014 "),L$=n(cEe,"A",{href:!0});var PIr=s(L$);$Oe=r(PIr,"GPTNeoConfig"),PIr.forEach(t),kOe=r(cEe," (GPT Neo model)"),cEe.forEach(t),SOe=i(y),Qf=n(y,"LI",{});var fEe=s(Qf);nee=n(fEe,"STRONG",{});var IIr=s(nee);ROe=r(IIr,"gptj"),IIr.forEach(t),BOe=r(fEe," \u2014 "),x$=n(fEe,"A",{href:!0});var qIr=s(x$);POe=r(qIr,"GPTJConfig"),qIr.forEach(t),IOe=r(fEe," (GPT-J model)"),fEe.forEach(t),qOe=i(y),Wf=n(y,"LI",{});var mEe=s(Wf);see=n(mEe,"STRONG",{});var NIr=s(see);NOe=r(NIr,"hubert"),NIr.forEach(t),jOe=r(mEe," \u2014 "),$$=n(mEe,"A",{href:!0});var jIr=s($$);DOe=r(jIr,"HubertConfig"),jIr.forEach(t),GOe=r(mEe," (Hubert model)"),mEe.forEach(t),OOe=i(y),Hf=n(y,"LI",{});var gEe=s(Hf);lee=n(gEe,"STRONG",{});var DIr=s(lee);VOe=r(DIr,"ibert"),DIr.forEach(t),XOe=r(gEe," \u2014 "),k$=n(gEe,"A",{href:!0});var GIr=s(k$);zOe=r(GIr,"IBertConfig"),GIr.forEach(t),QOe=r(gEe," (I-BERT model)"),gEe.forEach(t),WOe=i(y),Uf=n(y,"LI",{});var hEe=s(Uf);iee=n(hEe,"STRONG",{});var OIr=s(iee);HOe=r(OIr,"imagegpt"),OIr.forEach(t),UOe=r(hEe," \u2014 "),S$=n(hEe,"A",{href:!0});var VIr=s(S$);JOe=r(VIr,"ImageGPTConfig"),VIr.forEach(t),YOe=r(hEe," (ImageGPT model)"),hEe.forEach(t),KOe=i(y),Jf=n(y,"LI",{});var pEe=s(Jf);dee=n(pEe,"STRONG",{});var XIr=s(dee);ZOe=r(XIr,"layoutlm"),XIr.forEach(t),eVe=r(pEe," \u2014 "),R$=n(pEe,"A",{href:!0});var zIr=s(R$);oVe=r(zIr,"LayoutLMConfig"),zIr.forEach(t),rVe=r(pEe," (LayoutLM model)"),pEe.forEach(t),tVe=i(y),Yf=n(y,"LI",{});var uEe=s(Yf);cee=n(uEe,"STRONG",{});var QIr=s(cee);aVe=r(QIr,"layoutlmv2"),QIr.forEach(t),nVe=r(uEe," \u2014 "),B$=n(uEe,"A",{href:!0});var WIr=s(B$);sVe=r(WIr,"LayoutLMv2Config"),WIr.forEach(t),lVe=r(uEe," (LayoutLMv2 model)"),uEe.forEach(t),iVe=i(y),Kf=n(y,"LI",{});var _Ee=s(Kf);fee=n(_Ee,"STRONG",{});var HIr=s(fee);dVe=r(HIr,"led"),HIr.forEach(t),cVe=r(_Ee," \u2014 "),P$=n(_Ee,"A",{href:!0});var UIr=s(P$);fVe=r(UIr,"LEDConfig"),UIr.forEach(t),mVe=r(_Ee," (LED model)"),_Ee.forEach(t),gVe=i(y),Zf=n(y,"LI",{});var bEe=s(Zf);mee=n(bEe,"STRONG",{});var JIr=s(mee);hVe=r(JIr,"longformer"),JIr.forEach(t),pVe=r(bEe," \u2014 "),I$=n(bEe,"A",{href:!0});var YIr=s(I$);uVe=r(YIr,"LongformerConfig"),YIr.forEach(t),_Ve=r(bEe," (Longformer model)"),bEe.forEach(t),bVe=i(y),em=n(y,"LI",{});var vEe=s(em);gee=n(vEe,"STRONG",{});var KIr=s(gee);vVe=r(KIr,"luke"),KIr.forEach(t),FVe=r(vEe," \u2014 "),q$=n(vEe,"A",{href:!0});var ZIr=s(q$);TVe=r(ZIr,"LukeConfig"),ZIr.forEach(t),MVe=r(vEe," (LUKE model)"),vEe.forEach(t),EVe=i(y),om=n(y,"LI",{});var FEe=s(om);hee=n(FEe,"STRONG",{});var eqr=s(hee);CVe=r(eqr,"lxmert"),eqr.forEach(t),wVe=r(FEe," \u2014 "),N$=n(FEe,"A",{href:!0});var oqr=s(N$);AVe=r(oqr,"LxmertConfig"),oqr.forEach(t),yVe=r(FEe," (LXMERT model)"),FEe.forEach(t),LVe=i(y),rm=n(y,"LI",{});var TEe=s(rm);pee=n(TEe,"STRONG",{});var rqr=s(pee);xVe=r(rqr,"m2m_100"),rqr.forEach(t),$Ve=r(TEe," \u2014 "),j$=n(TEe,"A",{href:!0});var tqr=s(j$);kVe=r(tqr,"M2M100Config"),tqr.forEach(t),SVe=r(TEe," (M2M100 model)"),TEe.forEach(t),RVe=i(y),tm=n(y,"LI",{});var MEe=s(tm);uee=n(MEe,"STRONG",{});var aqr=s(uee);BVe=r(aqr,"marian"),aqr.forEach(t),PVe=r(MEe," \u2014 "),D$=n(MEe,"A",{href:!0});var nqr=s(D$);IVe=r(nqr,"MarianConfig"),nqr.forEach(t),qVe=r(MEe," (Marian model)"),MEe.forEach(t),NVe=i(y),am=n(y,"LI",{});var EEe=s(am);_ee=n(EEe,"STRONG",{});var sqr=s(_ee);jVe=r(sqr,"maskformer"),sqr.forEach(t),DVe=r(EEe," \u2014 "),G$=n(EEe,"A",{href:!0});var lqr=s(G$);GVe=r(lqr,"MaskFormerConfig"),lqr.forEach(t),OVe=r(EEe," (MaskFormer model)"),EEe.forEach(t),VVe=i(y),nm=n(y,"LI",{});var CEe=s(nm);bee=n(CEe,"STRONG",{});var iqr=s(bee);XVe=r(iqr,"mbart"),iqr.forEach(t),zVe=r(CEe," \u2014 "),O$=n(CEe,"A",{href:!0});var dqr=s(O$);QVe=r(dqr,"MBartConfig"),dqr.forEach(t),WVe=r(CEe," (mBART model)"),CEe.forEach(t),HVe=i(y),sm=n(y,"LI",{});var wEe=s(sm);vee=n(wEe,"STRONG",{});var cqr=s(vee);UVe=r(cqr,"megatron-bert"),cqr.forEach(t),JVe=r(wEe," \u2014 "),V$=n(wEe,"A",{href:!0});var fqr=s(V$);YVe=r(fqr,"MegatronBertConfig"),fqr.forEach(t),KVe=r(wEe," (MegatronBert model)"),wEe.forEach(t),ZVe=i(y),lm=n(y,"LI",{});var AEe=s(lm);Fee=n(AEe,"STRONG",{});var mqr=s(Fee);eXe=r(mqr,"mobilebert"),mqr.forEach(t),oXe=r(AEe," \u2014 "),X$=n(AEe,"A",{href:!0});var gqr=s(X$);rXe=r(gqr,"MobileBertConfig"),gqr.forEach(t),tXe=r(AEe," (MobileBERT model)"),AEe.forEach(t),aXe=i(y),im=n(y,"LI",{});var yEe=s(im);Tee=n(yEe,"STRONG",{});var hqr=s(Tee);nXe=r(hqr,"mpnet"),hqr.forEach(t),sXe=r(yEe," \u2014 "),z$=n(yEe,"A",{href:!0});var pqr=s(z$);lXe=r(pqr,"MPNetConfig"),pqr.forEach(t),iXe=r(yEe," (MPNet model)"),yEe.forEach(t),dXe=i(y),dm=n(y,"LI",{});var LEe=s(dm);Mee=n(LEe,"STRONG",{});var uqr=s(Mee);cXe=r(uqr,"mt5"),uqr.forEach(t),fXe=r(LEe," \u2014 "),Q$=n(LEe,"A",{href:!0});var _qr=s(Q$);mXe=r(_qr,"MT5Config"),_qr.forEach(t),gXe=r(LEe," (mT5 model)"),LEe.forEach(t),hXe=i(y),cm=n(y,"LI",{});var xEe=s(cm);Eee=n(xEe,"STRONG",{});var bqr=s(Eee);pXe=r(bqr,"nystromformer"),bqr.forEach(t),uXe=r(xEe," \u2014 "),W$=n(xEe,"A",{href:!0});var vqr=s(W$);_Xe=r(vqr,"NystromformerConfig"),vqr.forEach(t),bXe=r(xEe," (Nystromformer model)"),xEe.forEach(t),vXe=i(y),fm=n(y,"LI",{});var $Ee=s(fm);Cee=n($Ee,"STRONG",{});var Fqr=s(Cee);FXe=r(Fqr,"openai-gpt"),Fqr.forEach(t),TXe=r($Ee," \u2014 "),H$=n($Ee,"A",{href:!0});var Tqr=s(H$);MXe=r(Tqr,"OpenAIGPTConfig"),Tqr.forEach(t),EXe=r($Ee," (OpenAI GPT model)"),$Ee.forEach(t),CXe=i(y),mm=n(y,"LI",{});var kEe=s(mm);wee=n(kEe,"STRONG",{});var Mqr=s(wee);wXe=r(Mqr,"pegasus"),Mqr.forEach(t),AXe=r(kEe," \u2014 "),U$=n(kEe,"A",{href:!0});var Eqr=s(U$);yXe=r(Eqr,"PegasusConfig"),Eqr.forEach(t),LXe=r(kEe," (Pegasus model)"),kEe.forEach(t),xXe=i(y),gm=n(y,"LI",{});var SEe=s(gm);Aee=n(SEe,"STRONG",{});var Cqr=s(Aee);$Xe=r(Cqr,"perceiver"),Cqr.forEach(t),kXe=r(SEe," \u2014 "),J$=n(SEe,"A",{href:!0});var wqr=s(J$);SXe=r(wqr,"PerceiverConfig"),wqr.forEach(t),RXe=r(SEe," (Perceiver model)"),SEe.forEach(t),BXe=i(y),hm=n(y,"LI",{});var REe=s(hm);yee=n(REe,"STRONG",{});var Aqr=s(yee);PXe=r(Aqr,"plbart"),Aqr.forEach(t),IXe=r(REe," \u2014 "),Y$=n(REe,"A",{href:!0});var yqr=s(Y$);qXe=r(yqr,"PLBartConfig"),yqr.forEach(t),NXe=r(REe," (PLBart model)"),REe.forEach(t),jXe=i(y),pm=n(y,"LI",{});var BEe=s(pm);Lee=n(BEe,"STRONG",{});var Lqr=s(Lee);DXe=r(Lqr,"poolformer"),Lqr.forEach(t),GXe=r(BEe," \u2014 "),K$=n(BEe,"A",{href:!0});var xqr=s(K$);OXe=r(xqr,"PoolFormerConfig"),xqr.forEach(t),VXe=r(BEe," (PoolFormer model)"),BEe.forEach(t),XXe=i(y),um=n(y,"LI",{});var PEe=s(um);xee=n(PEe,"STRONG",{});var $qr=s(xee);zXe=r($qr,"prophetnet"),$qr.forEach(t),QXe=r(PEe," \u2014 "),Z$=n(PEe,"A",{href:!0});var kqr=s(Z$);WXe=r(kqr,"ProphetNetConfig"),kqr.forEach(t),HXe=r(PEe," (ProphetNet model)"),PEe.forEach(t),UXe=i(y),_m=n(y,"LI",{});var IEe=s(_m);$ee=n(IEe,"STRONG",{});var Sqr=s($ee);JXe=r(Sqr,"qdqbert"),Sqr.forEach(t),YXe=r(IEe," \u2014 "),ek=n(IEe,"A",{href:!0});var Rqr=s(ek);KXe=r(Rqr,"QDQBertConfig"),Rqr.forEach(t),ZXe=r(IEe," (QDQBert model)"),IEe.forEach(t),eze=i(y),bm=n(y,"LI",{});var qEe=s(bm);kee=n(qEe,"STRONG",{});var Bqr=s(kee);oze=r(Bqr,"rag"),Bqr.forEach(t),rze=r(qEe," \u2014 "),ok=n(qEe,"A",{href:!0});var Pqr=s(ok);tze=r(Pqr,"RagConfig"),Pqr.forEach(t),aze=r(qEe," (RAG model)"),qEe.forEach(t),nze=i(y),vm=n(y,"LI",{});var NEe=s(vm);See=n(NEe,"STRONG",{});var Iqr=s(See);sze=r(Iqr,"realm"),Iqr.forEach(t),lze=r(NEe," \u2014 "),rk=n(NEe,"A",{href:!0});var qqr=s(rk);ize=r(qqr,"RealmConfig"),qqr.forEach(t),dze=r(NEe," (Realm model)"),NEe.forEach(t),cze=i(y),Fm=n(y,"LI",{});var jEe=s(Fm);Ree=n(jEe,"STRONG",{});var Nqr=s(Ree);fze=r(Nqr,"reformer"),Nqr.forEach(t),mze=r(jEe," \u2014 "),tk=n(jEe,"A",{href:!0});var jqr=s(tk);gze=r(jqr,"ReformerConfig"),jqr.forEach(t),hze=r(jEe," (Reformer model)"),jEe.forEach(t),pze=i(y),Tm=n(y,"LI",{});var DEe=s(Tm);Bee=n(DEe,"STRONG",{});var Dqr=s(Bee);uze=r(Dqr,"regnet"),Dqr.forEach(t),_ze=r(DEe," \u2014 "),ak=n(DEe,"A",{href:!0});var Gqr=s(ak);bze=r(Gqr,"RegNetConfig"),Gqr.forEach(t),vze=r(DEe," (RegNet model)"),DEe.forEach(t),Fze=i(y),Mm=n(y,"LI",{});var GEe=s(Mm);Pee=n(GEe,"STRONG",{});var Oqr=s(Pee);Tze=r(Oqr,"rembert"),Oqr.forEach(t),Mze=r(GEe," \u2014 "),nk=n(GEe,"A",{href:!0});var Vqr=s(nk);Eze=r(Vqr,"RemBertConfig"),Vqr.forEach(t),Cze=r(GEe," (RemBERT model)"),GEe.forEach(t),wze=i(y),Em=n(y,"LI",{});var OEe=s(Em);Iee=n(OEe,"STRONG",{});var Xqr=s(Iee);Aze=r(Xqr,"resnet"),Xqr.forEach(t),yze=r(OEe," \u2014 "),sk=n(OEe,"A",{href:!0});var zqr=s(sk);Lze=r(zqr,"ResNetConfig"),zqr.forEach(t),xze=r(OEe," (ResNet model)"),OEe.forEach(t),$ze=i(y),Cm=n(y,"LI",{});var VEe=s(Cm);qee=n(VEe,"STRONG",{});var Qqr=s(qee);kze=r(Qqr,"retribert"),Qqr.forEach(t),Sze=r(VEe," \u2014 "),lk=n(VEe,"A",{href:!0});var Wqr=s(lk);Rze=r(Wqr,"RetriBertConfig"),Wqr.forEach(t),Bze=r(VEe," (RetriBERT model)"),VEe.forEach(t),Pze=i(y),wm=n(y,"LI",{});var XEe=s(wm);Nee=n(XEe,"STRONG",{});var Hqr=s(Nee);Ize=r(Hqr,"roberta"),Hqr.forEach(t),qze=r(XEe," \u2014 "),ik=n(XEe,"A",{href:!0});var Uqr=s(ik);Nze=r(Uqr,"RobertaConfig"),Uqr.forEach(t),jze=r(XEe," (RoBERTa model)"),XEe.forEach(t),Dze=i(y),Am=n(y,"LI",{});var zEe=s(Am);jee=n(zEe,"STRONG",{});var Jqr=s(jee);Gze=r(Jqr,"roformer"),Jqr.forEach(t),Oze=r(zEe," \u2014 "),dk=n(zEe,"A",{href:!0});var Yqr=s(dk);Vze=r(Yqr,"RoFormerConfig"),Yqr.forEach(t),Xze=r(zEe," (RoFormer model)"),zEe.forEach(t),zze=i(y),ym=n(y,"LI",{});var QEe=s(ym);Dee=n(QEe,"STRONG",{});var Kqr=s(Dee);Qze=r(Kqr,"segformer"),Kqr.forEach(t),Wze=r(QEe," \u2014 "),ck=n(QEe,"A",{href:!0});var Zqr=s(ck);Hze=r(Zqr,"SegformerConfig"),Zqr.forEach(t),Uze=r(QEe," (SegFormer model)"),QEe.forEach(t),Jze=i(y),Lm=n(y,"LI",{});var WEe=s(Lm);Gee=n(WEe,"STRONG",{});var eNr=s(Gee);Yze=r(eNr,"sew"),eNr.forEach(t),Kze=r(WEe," \u2014 "),fk=n(WEe,"A",{href:!0});var oNr=s(fk);Zze=r(oNr,"SEWConfig"),oNr.forEach(t),eQe=r(WEe," (SEW model)"),WEe.forEach(t),oQe=i(y),xm=n(y,"LI",{});var HEe=s(xm);Oee=n(HEe,"STRONG",{});var rNr=s(Oee);rQe=r(rNr,"sew-d"),rNr.forEach(t),tQe=r(HEe," \u2014 "),mk=n(HEe,"A",{href:!0});var tNr=s(mk);aQe=r(tNr,"SEWDConfig"),tNr.forEach(t),nQe=r(HEe," (SEW-D model)"),HEe.forEach(t),sQe=i(y),$m=n(y,"LI",{});var UEe=s($m);Vee=n(UEe,"STRONG",{});var aNr=s(Vee);lQe=r(aNr,"speech-encoder-decoder"),aNr.forEach(t),iQe=r(UEe," \u2014 "),gk=n(UEe,"A",{href:!0});var nNr=s(gk);dQe=r(nNr,"SpeechEncoderDecoderConfig"),nNr.forEach(t),cQe=r(UEe," (Speech Encoder decoder model)"),UEe.forEach(t),fQe=i(y),km=n(y,"LI",{});var JEe=s(km);Xee=n(JEe,"STRONG",{});var sNr=s(Xee);mQe=r(sNr,"speech_to_text"),sNr.forEach(t),gQe=r(JEe," \u2014 "),hk=n(JEe,"A",{href:!0});var lNr=s(hk);hQe=r(lNr,"Speech2TextConfig"),lNr.forEach(t),pQe=r(JEe," (Speech2Text model)"),JEe.forEach(t),uQe=i(y),Sm=n(y,"LI",{});var YEe=s(Sm);zee=n(YEe,"STRONG",{});var iNr=s(zee);_Qe=r(iNr,"speech_to_text_2"),iNr.forEach(t),bQe=r(YEe," \u2014 "),pk=n(YEe,"A",{href:!0});var dNr=s(pk);vQe=r(dNr,"Speech2Text2Config"),dNr.forEach(t),FQe=r(YEe," (Speech2Text2 model)"),YEe.forEach(t),TQe=i(y),Rm=n(y,"LI",{});var KEe=s(Rm);Qee=n(KEe,"STRONG",{});var cNr=s(Qee);MQe=r(cNr,"splinter"),cNr.forEach(t),EQe=r(KEe," \u2014 "),uk=n(KEe,"A",{href:!0});var fNr=s(uk);CQe=r(fNr,"SplinterConfig"),fNr.forEach(t),wQe=r(KEe," (Splinter model)"),KEe.forEach(t),AQe=i(y),Bm=n(y,"LI",{});var ZEe=s(Bm);Wee=n(ZEe,"STRONG",{});var mNr=s(Wee);yQe=r(mNr,"squeezebert"),mNr.forEach(t),LQe=r(ZEe," \u2014 "),_k=n(ZEe,"A",{href:!0});var gNr=s(_k);xQe=r(gNr,"SqueezeBertConfig"),gNr.forEach(t),$Qe=r(ZEe," (SqueezeBERT model)"),ZEe.forEach(t),kQe=i(y),Pm=n(y,"LI",{});var eCe=s(Pm);Hee=n(eCe,"STRONG",{});var hNr=s(Hee);SQe=r(hNr,"swin"),hNr.forEach(t),RQe=r(eCe," \u2014 "),bk=n(eCe,"A",{href:!0});var pNr=s(bk);BQe=r(pNr,"SwinConfig"),pNr.forEach(t),PQe=r(eCe," (Swin model)"),eCe.forEach(t),IQe=i(y),Im=n(y,"LI",{});var oCe=s(Im);Uee=n(oCe,"STRONG",{});var uNr=s(Uee);qQe=r(uNr,"t5"),uNr.forEach(t),NQe=r(oCe," \u2014 "),vk=n(oCe,"A",{href:!0});var _Nr=s(vk);jQe=r(_Nr,"T5Config"),_Nr.forEach(t),DQe=r(oCe," (T5 model)"),oCe.forEach(t),GQe=i(y),qm=n(y,"LI",{});var rCe=s(qm);Jee=n(rCe,"STRONG",{});var bNr=s(Jee);OQe=r(bNr,"tapas"),bNr.forEach(t),VQe=r(rCe," \u2014 "),Fk=n(rCe,"A",{href:!0});var vNr=s(Fk);XQe=r(vNr,"TapasConfig"),vNr.forEach(t),zQe=r(rCe," (TAPAS model)"),rCe.forEach(t),QQe=i(y),Nm=n(y,"LI",{});var tCe=s(Nm);Yee=n(tCe,"STRONG",{});var FNr=s(Yee);WQe=r(FNr,"tapex"),FNr.forEach(t),HQe=r(tCe," \u2014 "),Tk=n(tCe,"A",{href:!0});var TNr=s(Tk);UQe=r(TNr,"BartConfig"),TNr.forEach(t),JQe=r(tCe," (TAPEX model)"),tCe.forEach(t),YQe=i(y),jm=n(y,"LI",{});var aCe=s(jm);Kee=n(aCe,"STRONG",{});var MNr=s(Kee);KQe=r(MNr,"transfo-xl"),MNr.forEach(t),ZQe=r(aCe," \u2014 "),Mk=n(aCe,"A",{href:!0});var ENr=s(Mk);eWe=r(ENr,"TransfoXLConfig"),ENr.forEach(t),oWe=r(aCe," (Transformer-XL model)"),aCe.forEach(t),rWe=i(y),Dm=n(y,"LI",{});var nCe=s(Dm);Zee=n(nCe,"STRONG",{});var CNr=s(Zee);tWe=r(CNr,"trocr"),CNr.forEach(t),aWe=r(nCe," \u2014 "),Ek=n(nCe,"A",{href:!0});var wNr=s(Ek);nWe=r(wNr,"TrOCRConfig"),wNr.forEach(t),sWe=r(nCe," (TrOCR model)"),nCe.forEach(t),lWe=i(y),Gm=n(y,"LI",{});var sCe=s(Gm);eoe=n(sCe,"STRONG",{});var ANr=s(eoe);iWe=r(ANr,"unispeech"),ANr.forEach(t),dWe=r(sCe," \u2014 "),Ck=n(sCe,"A",{href:!0});var yNr=s(Ck);cWe=r(yNr,"UniSpeechConfig"),yNr.forEach(t),fWe=r(sCe," (UniSpeech model)"),sCe.forEach(t),mWe=i(y),Om=n(y,"LI",{});var lCe=s(Om);ooe=n(lCe,"STRONG",{});var LNr=s(ooe);gWe=r(LNr,"unispeech-sat"),LNr.forEach(t),hWe=r(lCe," \u2014 "),wk=n(lCe,"A",{href:!0});var xNr=s(wk);pWe=r(xNr,"UniSpeechSatConfig"),xNr.forEach(t),uWe=r(lCe," (UniSpeechSat model)"),lCe.forEach(t),_We=i(y),Vm=n(y,"LI",{});var iCe=s(Vm);roe=n(iCe,"STRONG",{});var $Nr=s(roe);bWe=r($Nr,"van"),$Nr.forEach(t),vWe=r(iCe," \u2014 "),Ak=n(iCe,"A",{href:!0});var kNr=s(Ak);FWe=r(kNr,"VanConfig"),kNr.forEach(t),TWe=r(iCe," (VAN model)"),iCe.forEach(t),MWe=i(y),Xm=n(y,"LI",{});var dCe=s(Xm);toe=n(dCe,"STRONG",{});var SNr=s(toe);EWe=r(SNr,"vilt"),SNr.forEach(t),CWe=r(dCe," \u2014 "),yk=n(dCe,"A",{href:!0});var RNr=s(yk);wWe=r(RNr,"ViltConfig"),RNr.forEach(t),AWe=r(dCe," (ViLT model)"),dCe.forEach(t),yWe=i(y),zm=n(y,"LI",{});var cCe=s(zm);aoe=n(cCe,"STRONG",{});var BNr=s(aoe);LWe=r(BNr,"vision-encoder-decoder"),BNr.forEach(t),xWe=r(cCe," \u2014 "),Lk=n(cCe,"A",{href:!0});var PNr=s(Lk);$We=r(PNr,"VisionEncoderDecoderConfig"),PNr.forEach(t),kWe=r(cCe," (Vision Encoder decoder model)"),cCe.forEach(t),SWe=i(y),Qm=n(y,"LI",{});var fCe=s(Qm);noe=n(fCe,"STRONG",{});var INr=s(noe);RWe=r(INr,"vision-text-dual-encoder"),INr.forEach(t),BWe=r(fCe," \u2014 "),xk=n(fCe,"A",{href:!0});var qNr=s(xk);PWe=r(qNr,"VisionTextDualEncoderConfig"),qNr.forEach(t),IWe=r(fCe," (VisionTextDualEncoder model)"),fCe.forEach(t),qWe=i(y),Wm=n(y,"LI",{});var mCe=s(Wm);soe=n(mCe,"STRONG",{});var NNr=s(soe);NWe=r(NNr,"visual_bert"),NNr.forEach(t),jWe=r(mCe," \u2014 "),$k=n(mCe,"A",{href:!0});var jNr=s($k);DWe=r(jNr,"VisualBertConfig"),jNr.forEach(t),GWe=r(mCe," (VisualBert model)"),mCe.forEach(t),OWe=i(y),Hm=n(y,"LI",{});var gCe=s(Hm);loe=n(gCe,"STRONG",{});var DNr=s(loe);VWe=r(DNr,"vit"),DNr.forEach(t),XWe=r(gCe," \u2014 "),kk=n(gCe,"A",{href:!0});var GNr=s(kk);zWe=r(GNr,"ViTConfig"),GNr.forEach(t),QWe=r(gCe," (ViT model)"),gCe.forEach(t),WWe=i(y),Um=n(y,"LI",{});var hCe=s(Um);ioe=n(hCe,"STRONG",{});var ONr=s(ioe);HWe=r(ONr,"vit_mae"),ONr.forEach(t),UWe=r(hCe," \u2014 "),Sk=n(hCe,"A",{href:!0});var VNr=s(Sk);JWe=r(VNr,"ViTMAEConfig"),VNr.forEach(t),YWe=r(hCe," (ViTMAE model)"),hCe.forEach(t),KWe=i(y),Jm=n(y,"LI",{});var pCe=s(Jm);doe=n(pCe,"STRONG",{});var XNr=s(doe);ZWe=r(XNr,"wav2vec2"),XNr.forEach(t),eHe=r(pCe," \u2014 "),Rk=n(pCe,"A",{href:!0});var zNr=s(Rk);oHe=r(zNr,"Wav2Vec2Config"),zNr.forEach(t),rHe=r(pCe," (Wav2Vec2 model)"),pCe.forEach(t),tHe=i(y),Ym=n(y,"LI",{});var uCe=s(Ym);coe=n(uCe,"STRONG",{});var QNr=s(coe);aHe=r(QNr,"wavlm"),QNr.forEach(t),nHe=r(uCe," \u2014 "),Bk=n(uCe,"A",{href:!0});var WNr=s(Bk);sHe=r(WNr,"WavLMConfig"),WNr.forEach(t),lHe=r(uCe," (WavLM model)"),uCe.forEach(t),iHe=i(y),Km=n(y,"LI",{});var _Ce=s(Km);foe=n(_Ce,"STRONG",{});var HNr=s(foe);dHe=r(HNr,"xglm"),HNr.forEach(t),cHe=r(_Ce," \u2014 "),Pk=n(_Ce,"A",{href:!0});var UNr=s(Pk);fHe=r(UNr,"XGLMConfig"),UNr.forEach(t),mHe=r(_Ce," (XGLM model)"),_Ce.forEach(t),gHe=i(y),Zm=n(y,"LI",{});var bCe=s(Zm);moe=n(bCe,"STRONG",{});var JNr=s(moe);hHe=r(JNr,"xlm"),JNr.forEach(t),pHe=r(bCe," \u2014 "),Ik=n(bCe,"A",{href:!0});var YNr=s(Ik);uHe=r(YNr,"XLMConfig"),YNr.forEach(t),_He=r(bCe," (XLM model)"),bCe.forEach(t),bHe=i(y),eg=n(y,"LI",{});var vCe=s(eg);goe=n(vCe,"STRONG",{});var KNr=s(goe);vHe=r(KNr,"xlm-prophetnet"),KNr.forEach(t),FHe=r(vCe," \u2014 "),qk=n(vCe,"A",{href:!0});var ZNr=s(qk);THe=r(ZNr,"XLMProphetNetConfig"),ZNr.forEach(t),MHe=r(vCe," (XLMProphetNet model)"),vCe.forEach(t),EHe=i(y),og=n(y,"LI",{});var FCe=s(og);hoe=n(FCe,"STRONG",{});var ejr=s(hoe);CHe=r(ejr,"xlm-roberta"),ejr.forEach(t),wHe=r(FCe," \u2014 "),Nk=n(FCe,"A",{href:!0});var ojr=s(Nk);AHe=r(ojr,"XLMRobertaConfig"),ojr.forEach(t),yHe=r(FCe," (XLM-RoBERTa model)"),FCe.forEach(t),LHe=i(y),rg=n(y,"LI",{});var TCe=s(rg);poe=n(TCe,"STRONG",{});var rjr=s(poe);xHe=r(rjr,"xlm-roberta-xl"),rjr.forEach(t),$He=r(TCe," \u2014 "),jk=n(TCe,"A",{href:!0});var tjr=s(jk);kHe=r(tjr,"XLMRobertaXLConfig"),tjr.forEach(t),SHe=r(TCe," (XLM-RoBERTa-XL model)"),TCe.forEach(t),RHe=i(y),tg=n(y,"LI",{});var MCe=s(tg);uoe=n(MCe,"STRONG",{});var ajr=s(uoe);BHe=r(ajr,"xlnet"),ajr.forEach(t),PHe=r(MCe," \u2014 "),Dk=n(MCe,"A",{href:!0});var njr=s(Dk);IHe=r(njr,"XLNetConfig"),njr.forEach(t),qHe=r(MCe," (XLNet model)"),MCe.forEach(t),NHe=i(y),ag=n(y,"LI",{});var ECe=s(ag);_oe=n(ECe,"STRONG",{});var sjr=s(_oe);jHe=r(sjr,"yolos"),sjr.forEach(t),DHe=r(ECe," \u2014 "),Gk=n(ECe,"A",{href:!0});var ljr=s(Gk);GHe=r(ljr,"YolosConfig"),ljr.forEach(t),OHe=r(ECe," (YOLOS model)"),ECe.forEach(t),VHe=i(y),ng=n(y,"LI",{});var CCe=s(ng);boe=n(CCe,"STRONG",{});var ijr=s(boe);XHe=r(ijr,"yoso"),ijr.forEach(t),zHe=r(CCe," \u2014 "),Ok=n(CCe,"A",{href:!0});var djr=s(Ok);QHe=r(djr,"YosoConfig"),djr.forEach(t),WHe=r(CCe," (YOSO model)"),CCe.forEach(t),y.forEach(t),HHe=i(Yr),T(sg.$$.fragment,Yr),Yr.forEach(t),UHe=i(Jr),lg=n(Jr,"DIV",{class:!0});var IIe=s(lg);T(I0.$$.fragment,IIe),JHe=i(IIe),voe=n(IIe,"P",{});var cjr=s(voe);YHe=r(cjr,"Register a new configuration for this class."),cjr.forEach(t),IIe.forEach(t),Jr.forEach(t),GBe=i(f),fi=n(f,"H2",{class:!0});var qIe=s(fi);ig=n(qIe,"A",{id:!0,class:!0,href:!0});var fjr=s(ig);Foe=n(fjr,"SPAN",{});var mjr=s(Foe);T(q0.$$.fragment,mjr),mjr.forEach(t),fjr.forEach(t),KHe=i(qIe),Toe=n(qIe,"SPAN",{});var gjr=s(Toe);ZHe=r(gjr,"AutoTokenizer"),gjr.forEach(t),qIe.forEach(t),OBe=i(f),wo=n(f,"DIV",{class:!0});var ks=s(wo);T(N0.$$.fragment,ks),eUe=i(ks),j0=n(ks,"P",{});var NIe=s(j0);oUe=r(NIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Vk=n(NIe,"A",{href:!0});var hjr=s(Vk);rUe=r(hjr,"AutoTokenizer.from_pretrained()"),hjr.forEach(t),tUe=r(NIe," class method."),NIe.forEach(t),aUe=i(ks),D0=n(ks,"P",{});var jIe=s(D0);nUe=r(jIe,"This class cannot be instantiated directly using "),Moe=n(jIe,"CODE",{});var pjr=s(Moe);sUe=r(pjr,"__init__()"),pjr.forEach(t),lUe=r(jIe," (throws an error)."),jIe.forEach(t),iUe=i(ks),Er=n(ks,"DIV",{class:!0});var Ss=s(Er);T(G0.$$.fragment,Ss),dUe=i(Ss),Eoe=n(Ss,"P",{});var ujr=s(Eoe);cUe=r(ujr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ujr.forEach(t),fUe=i(Ss),Ta=n(Ss,"P",{});var Sw=s(Ta);mUe=r(Sw,"The tokenizer class to instantiate is selected based on the "),Coe=n(Sw,"CODE",{});var _jr=s(Coe);gUe=r(_jr,"model_type"),_jr.forEach(t),hUe=r(Sw,` property of the config object (either
passed as an argument or loaded from `),woe=n(Sw,"CODE",{});var bjr=s(woe);pUe=r(bjr,"pretrained_model_name_or_path"),bjr.forEach(t),uUe=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aoe=n(Sw,"CODE",{});var vjr=s(Aoe);_Ue=r(vjr,"pretrained_model_name_or_path"),vjr.forEach(t),bUe=r(Sw,":"),Sw.forEach(t),vUe=i(Ss),k=n(Ss,"UL",{});var S=s(k);yn=n(S,"LI",{});var Ix=s(yn);yoe=n(Ix,"STRONG",{});var Fjr=s(yoe);FUe=r(Fjr,"albert"),Fjr.forEach(t),TUe=r(Ix," \u2014 "),Xk=n(Ix,"A",{href:!0});var Tjr=s(Xk);MUe=r(Tjr,"AlbertTokenizer"),Tjr.forEach(t),EUe=r(Ix," or "),zk=n(Ix,"A",{href:!0});var Mjr=s(zk);CUe=r(Mjr,"AlbertTokenizerFast"),Mjr.forEach(t),wUe=r(Ix," (ALBERT model)"),Ix.forEach(t),AUe=i(S),Ln=n(S,"LI",{});var qx=s(Ln);Loe=n(qx,"STRONG",{});var Ejr=s(Loe);yUe=r(Ejr,"bart"),Ejr.forEach(t),LUe=r(qx," \u2014 "),Qk=n(qx,"A",{href:!0});var Cjr=s(Qk);xUe=r(Cjr,"BartTokenizer"),Cjr.forEach(t),$Ue=r(qx," or "),Wk=n(qx,"A",{href:!0});var wjr=s(Wk);kUe=r(wjr,"BartTokenizerFast"),wjr.forEach(t),SUe=r(qx," (BART model)"),qx.forEach(t),RUe=i(S),xn=n(S,"LI",{});var Nx=s(xn);xoe=n(Nx,"STRONG",{});var Ajr=s(xoe);BUe=r(Ajr,"barthez"),Ajr.forEach(t),PUe=r(Nx," \u2014 "),Hk=n(Nx,"A",{href:!0});var yjr=s(Hk);IUe=r(yjr,"BarthezTokenizer"),yjr.forEach(t),qUe=r(Nx," or "),Uk=n(Nx,"A",{href:!0});var Ljr=s(Uk);NUe=r(Ljr,"BarthezTokenizerFast"),Ljr.forEach(t),jUe=r(Nx," (BARThez model)"),Nx.forEach(t),DUe=i(S),dg=n(S,"LI",{});var wCe=s(dg);$oe=n(wCe,"STRONG",{});var xjr=s($oe);GUe=r(xjr,"bartpho"),xjr.forEach(t),OUe=r(wCe," \u2014 "),Jk=n(wCe,"A",{href:!0});var $jr=s(Jk);VUe=r($jr,"BartphoTokenizer"),$jr.forEach(t),XUe=r(wCe," (BARTpho model)"),wCe.forEach(t),zUe=i(S),$n=n(S,"LI",{});var jx=s($n);koe=n(jx,"STRONG",{});var kjr=s(koe);QUe=r(kjr,"bert"),kjr.forEach(t),WUe=r(jx," \u2014 "),Yk=n(jx,"A",{href:!0});var Sjr=s(Yk);HUe=r(Sjr,"BertTokenizer"),Sjr.forEach(t),UUe=r(jx," or "),Kk=n(jx,"A",{href:!0});var Rjr=s(Kk);JUe=r(Rjr,"BertTokenizerFast"),Rjr.forEach(t),YUe=r(jx," (BERT model)"),jx.forEach(t),KUe=i(S),cg=n(S,"LI",{});var ACe=s(cg);Soe=n(ACe,"STRONG",{});var Bjr=s(Soe);ZUe=r(Bjr,"bert-generation"),Bjr.forEach(t),eJe=r(ACe," \u2014 "),Zk=n(ACe,"A",{href:!0});var Pjr=s(Zk);oJe=r(Pjr,"BertGenerationTokenizer"),Pjr.forEach(t),rJe=r(ACe," (Bert Generation model)"),ACe.forEach(t),tJe=i(S),fg=n(S,"LI",{});var yCe=s(fg);Roe=n(yCe,"STRONG",{});var Ijr=s(Roe);aJe=r(Ijr,"bert-japanese"),Ijr.forEach(t),nJe=r(yCe," \u2014 "),eS=n(yCe,"A",{href:!0});var qjr=s(eS);sJe=r(qjr,"BertJapaneseTokenizer"),qjr.forEach(t),lJe=r(yCe," (BertJapanese model)"),yCe.forEach(t),iJe=i(S),mg=n(S,"LI",{});var LCe=s(mg);Boe=n(LCe,"STRONG",{});var Njr=s(Boe);dJe=r(Njr,"bertweet"),Njr.forEach(t),cJe=r(LCe," \u2014 "),oS=n(LCe,"A",{href:!0});var jjr=s(oS);fJe=r(jjr,"BertweetTokenizer"),jjr.forEach(t),mJe=r(LCe," (Bertweet model)"),LCe.forEach(t),gJe=i(S),kn=n(S,"LI",{});var Dx=s(kn);Poe=n(Dx,"STRONG",{});var Djr=s(Poe);hJe=r(Djr,"big_bird"),Djr.forEach(t),pJe=r(Dx," \u2014 "),rS=n(Dx,"A",{href:!0});var Gjr=s(rS);uJe=r(Gjr,"BigBirdTokenizer"),Gjr.forEach(t),_Je=r(Dx," or "),tS=n(Dx,"A",{href:!0});var Ojr=s(tS);bJe=r(Ojr,"BigBirdTokenizerFast"),Ojr.forEach(t),vJe=r(Dx," (BigBird model)"),Dx.forEach(t),FJe=i(S),Sn=n(S,"LI",{});var Gx=s(Sn);Ioe=n(Gx,"STRONG",{});var Vjr=s(Ioe);TJe=r(Vjr,"bigbird_pegasus"),Vjr.forEach(t),MJe=r(Gx," \u2014 "),aS=n(Gx,"A",{href:!0});var Xjr=s(aS);EJe=r(Xjr,"PegasusTokenizer"),Xjr.forEach(t),CJe=r(Gx," or "),nS=n(Gx,"A",{href:!0});var zjr=s(nS);wJe=r(zjr,"PegasusTokenizerFast"),zjr.forEach(t),AJe=r(Gx," (BigBirdPegasus model)"),Gx.forEach(t),yJe=i(S),Rn=n(S,"LI",{});var Ox=s(Rn);qoe=n(Ox,"STRONG",{});var Qjr=s(qoe);LJe=r(Qjr,"blenderbot"),Qjr.forEach(t),xJe=r(Ox," \u2014 "),sS=n(Ox,"A",{href:!0});var Wjr=s(sS);$Je=r(Wjr,"BlenderbotTokenizer"),Wjr.forEach(t),kJe=r(Ox," or "),lS=n(Ox,"A",{href:!0});var Hjr=s(lS);SJe=r(Hjr,"BlenderbotTokenizerFast"),Hjr.forEach(t),RJe=r(Ox," (Blenderbot model)"),Ox.forEach(t),BJe=i(S),gg=n(S,"LI",{});var xCe=s(gg);Noe=n(xCe,"STRONG",{});var Ujr=s(Noe);PJe=r(Ujr,"blenderbot-small"),Ujr.forEach(t),IJe=r(xCe," \u2014 "),iS=n(xCe,"A",{href:!0});var Jjr=s(iS);qJe=r(Jjr,"BlenderbotSmallTokenizer"),Jjr.forEach(t),NJe=r(xCe," (BlenderbotSmall model)"),xCe.forEach(t),jJe=i(S),hg=n(S,"LI",{});var $Ce=s(hg);joe=n($Ce,"STRONG",{});var Yjr=s(joe);DJe=r(Yjr,"byt5"),Yjr.forEach(t),GJe=r($Ce," \u2014 "),dS=n($Ce,"A",{href:!0});var Kjr=s(dS);OJe=r(Kjr,"ByT5Tokenizer"),Kjr.forEach(t),VJe=r($Ce," (ByT5 model)"),$Ce.forEach(t),XJe=i(S),Bn=n(S,"LI",{});var Vx=s(Bn);Doe=n(Vx,"STRONG",{});var Zjr=s(Doe);zJe=r(Zjr,"camembert"),Zjr.forEach(t),QJe=r(Vx," \u2014 "),cS=n(Vx,"A",{href:!0});var eDr=s(cS);WJe=r(eDr,"CamembertTokenizer"),eDr.forEach(t),HJe=r(Vx," or "),fS=n(Vx,"A",{href:!0});var oDr=s(fS);UJe=r(oDr,"CamembertTokenizerFast"),oDr.forEach(t),JJe=r(Vx," (CamemBERT model)"),Vx.forEach(t),YJe=i(S),pg=n(S,"LI",{});var kCe=s(pg);Goe=n(kCe,"STRONG",{});var rDr=s(Goe);KJe=r(rDr,"canine"),rDr.forEach(t),ZJe=r(kCe," \u2014 "),mS=n(kCe,"A",{href:!0});var tDr=s(mS);eYe=r(tDr,"CanineTokenizer"),tDr.forEach(t),oYe=r(kCe," (Canine model)"),kCe.forEach(t),rYe=i(S),Pn=n(S,"LI",{});var Xx=s(Pn);Ooe=n(Xx,"STRONG",{});var aDr=s(Ooe);tYe=r(aDr,"clip"),aDr.forEach(t),aYe=r(Xx," \u2014 "),gS=n(Xx,"A",{href:!0});var nDr=s(gS);nYe=r(nDr,"CLIPTokenizer"),nDr.forEach(t),sYe=r(Xx," or "),hS=n(Xx,"A",{href:!0});var sDr=s(hS);lYe=r(sDr,"CLIPTokenizerFast"),sDr.forEach(t),iYe=r(Xx," (CLIP model)"),Xx.forEach(t),dYe=i(S),In=n(S,"LI",{});var zx=s(In);Voe=n(zx,"STRONG",{});var lDr=s(Voe);cYe=r(lDr,"convbert"),lDr.forEach(t),fYe=r(zx," \u2014 "),pS=n(zx,"A",{href:!0});var iDr=s(pS);mYe=r(iDr,"ConvBertTokenizer"),iDr.forEach(t),gYe=r(zx," or "),uS=n(zx,"A",{href:!0});var dDr=s(uS);hYe=r(dDr,"ConvBertTokenizerFast"),dDr.forEach(t),pYe=r(zx," (ConvBERT model)"),zx.forEach(t),uYe=i(S),qn=n(S,"LI",{});var Qx=s(qn);Xoe=n(Qx,"STRONG",{});var cDr=s(Xoe);_Ye=r(cDr,"cpm"),cDr.forEach(t),bYe=r(Qx," \u2014 "),_S=n(Qx,"A",{href:!0});var fDr=s(_S);vYe=r(fDr,"CpmTokenizer"),fDr.forEach(t),FYe=r(Qx," or "),bS=n(Qx,"A",{href:!0});var mDr=s(bS);TYe=r(mDr,"CpmTokenizerFast"),mDr.forEach(t),MYe=r(Qx," (CPM model)"),Qx.forEach(t),EYe=i(S),ug=n(S,"LI",{});var SCe=s(ug);zoe=n(SCe,"STRONG",{});var gDr=s(zoe);CYe=r(gDr,"ctrl"),gDr.forEach(t),wYe=r(SCe," \u2014 "),vS=n(SCe,"A",{href:!0});var hDr=s(vS);AYe=r(hDr,"CTRLTokenizer"),hDr.forEach(t),yYe=r(SCe," (CTRL model)"),SCe.forEach(t),LYe=i(S),Nn=n(S,"LI",{});var Wx=s(Nn);Qoe=n(Wx,"STRONG",{});var pDr=s(Qoe);xYe=r(pDr,"data2vec-text"),pDr.forEach(t),$Ye=r(Wx," \u2014 "),FS=n(Wx,"A",{href:!0});var uDr=s(FS);kYe=r(uDr,"RobertaTokenizer"),uDr.forEach(t),SYe=r(Wx," or "),TS=n(Wx,"A",{href:!0});var _Dr=s(TS);RYe=r(_Dr,"RobertaTokenizerFast"),_Dr.forEach(t),BYe=r(Wx," (Data2VecText model)"),Wx.forEach(t),PYe=i(S),jn=n(S,"LI",{});var Hx=s(jn);Woe=n(Hx,"STRONG",{});var bDr=s(Woe);IYe=r(bDr,"deberta"),bDr.forEach(t),qYe=r(Hx," \u2014 "),MS=n(Hx,"A",{href:!0});var vDr=s(MS);NYe=r(vDr,"DebertaTokenizer"),vDr.forEach(t),jYe=r(Hx," or "),ES=n(Hx,"A",{href:!0});var FDr=s(ES);DYe=r(FDr,"DebertaTokenizerFast"),FDr.forEach(t),GYe=r(Hx," (DeBERTa model)"),Hx.forEach(t),OYe=i(S),Dn=n(S,"LI",{});var Ux=s(Dn);Hoe=n(Ux,"STRONG",{});var TDr=s(Hoe);VYe=r(TDr,"deberta-v2"),TDr.forEach(t),XYe=r(Ux," \u2014 "),CS=n(Ux,"A",{href:!0});var MDr=s(CS);zYe=r(MDr,"DebertaV2Tokenizer"),MDr.forEach(t),QYe=r(Ux," or "),wS=n(Ux,"A",{href:!0});var EDr=s(wS);WYe=r(EDr,"DebertaV2TokenizerFast"),EDr.forEach(t),HYe=r(Ux," (DeBERTa-v2 model)"),Ux.forEach(t),UYe=i(S),Gn=n(S,"LI",{});var Jx=s(Gn);Uoe=n(Jx,"STRONG",{});var CDr=s(Uoe);JYe=r(CDr,"distilbert"),CDr.forEach(t),YYe=r(Jx," \u2014 "),AS=n(Jx,"A",{href:!0});var wDr=s(AS);KYe=r(wDr,"DistilBertTokenizer"),wDr.forEach(t),ZYe=r(Jx," or "),yS=n(Jx,"A",{href:!0});var ADr=s(yS);eKe=r(ADr,"DistilBertTokenizerFast"),ADr.forEach(t),oKe=r(Jx," (DistilBERT model)"),Jx.forEach(t),rKe=i(S),On=n(S,"LI",{});var Yx=s(On);Joe=n(Yx,"STRONG",{});var yDr=s(Joe);tKe=r(yDr,"dpr"),yDr.forEach(t),aKe=r(Yx," \u2014 "),LS=n(Yx,"A",{href:!0});var LDr=s(LS);nKe=r(LDr,"DPRQuestionEncoderTokenizer"),LDr.forEach(t),sKe=r(Yx," or "),xS=n(Yx,"A",{href:!0});var xDr=s(xS);lKe=r(xDr,"DPRQuestionEncoderTokenizerFast"),xDr.forEach(t),iKe=r(Yx," (DPR model)"),Yx.forEach(t),dKe=i(S),Vn=n(S,"LI",{});var Kx=s(Vn);Yoe=n(Kx,"STRONG",{});var $Dr=s(Yoe);cKe=r($Dr,"electra"),$Dr.forEach(t),fKe=r(Kx," \u2014 "),$S=n(Kx,"A",{href:!0});var kDr=s($S);mKe=r(kDr,"ElectraTokenizer"),kDr.forEach(t),gKe=r(Kx," or "),kS=n(Kx,"A",{href:!0});var SDr=s(kS);hKe=r(SDr,"ElectraTokenizerFast"),SDr.forEach(t),pKe=r(Kx," (ELECTRA model)"),Kx.forEach(t),uKe=i(S),_g=n(S,"LI",{});var RCe=s(_g);Koe=n(RCe,"STRONG",{});var RDr=s(Koe);_Ke=r(RDr,"flaubert"),RDr.forEach(t),bKe=r(RCe," \u2014 "),SS=n(RCe,"A",{href:!0});var BDr=s(SS);vKe=r(BDr,"FlaubertTokenizer"),BDr.forEach(t),FKe=r(RCe," (FlauBERT model)"),RCe.forEach(t),TKe=i(S),Xn=n(S,"LI",{});var Zx=s(Xn);Zoe=n(Zx,"STRONG",{});var PDr=s(Zoe);MKe=r(PDr,"fnet"),PDr.forEach(t),EKe=r(Zx," \u2014 "),RS=n(Zx,"A",{href:!0});var IDr=s(RS);CKe=r(IDr,"FNetTokenizer"),IDr.forEach(t),wKe=r(Zx," or "),BS=n(Zx,"A",{href:!0});var qDr=s(BS);AKe=r(qDr,"FNetTokenizerFast"),qDr.forEach(t),yKe=r(Zx," (FNet model)"),Zx.forEach(t),LKe=i(S),bg=n(S,"LI",{});var BCe=s(bg);ere=n(BCe,"STRONG",{});var NDr=s(ere);xKe=r(NDr,"fsmt"),NDr.forEach(t),$Ke=r(BCe," \u2014 "),PS=n(BCe,"A",{href:!0});var jDr=s(PS);kKe=r(jDr,"FSMTTokenizer"),jDr.forEach(t),SKe=r(BCe," (FairSeq Machine-Translation model)"),BCe.forEach(t),RKe=i(S),zn=n(S,"LI",{});var e9=s(zn);ore=n(e9,"STRONG",{});var DDr=s(ore);BKe=r(DDr,"funnel"),DDr.forEach(t),PKe=r(e9," \u2014 "),IS=n(e9,"A",{href:!0});var GDr=s(IS);IKe=r(GDr,"FunnelTokenizer"),GDr.forEach(t),qKe=r(e9," or "),qS=n(e9,"A",{href:!0});var ODr=s(qS);NKe=r(ODr,"FunnelTokenizerFast"),ODr.forEach(t),jKe=r(e9," (Funnel Transformer model)"),e9.forEach(t),DKe=i(S),Qn=n(S,"LI",{});var o9=s(Qn);rre=n(o9,"STRONG",{});var VDr=s(rre);GKe=r(VDr,"gpt2"),VDr.forEach(t),OKe=r(o9," \u2014 "),NS=n(o9,"A",{href:!0});var XDr=s(NS);VKe=r(XDr,"GPT2Tokenizer"),XDr.forEach(t),XKe=r(o9," or "),jS=n(o9,"A",{href:!0});var zDr=s(jS);zKe=r(zDr,"GPT2TokenizerFast"),zDr.forEach(t),QKe=r(o9," (OpenAI GPT-2 model)"),o9.forEach(t),WKe=i(S),Wn=n(S,"LI",{});var r9=s(Wn);tre=n(r9,"STRONG",{});var QDr=s(tre);HKe=r(QDr,"gpt_neo"),QDr.forEach(t),UKe=r(r9," \u2014 "),DS=n(r9,"A",{href:!0});var WDr=s(DS);JKe=r(WDr,"GPT2Tokenizer"),WDr.forEach(t),YKe=r(r9," or "),GS=n(r9,"A",{href:!0});var HDr=s(GS);KKe=r(HDr,"GPT2TokenizerFast"),HDr.forEach(t),ZKe=r(r9," (GPT Neo model)"),r9.forEach(t),eZe=i(S),Hn=n(S,"LI",{});var t9=s(Hn);are=n(t9,"STRONG",{});var UDr=s(are);oZe=r(UDr,"gptj"),UDr.forEach(t),rZe=r(t9," \u2014 "),OS=n(t9,"A",{href:!0});var JDr=s(OS);tZe=r(JDr,"GPT2Tokenizer"),JDr.forEach(t),aZe=r(t9," or "),VS=n(t9,"A",{href:!0});var YDr=s(VS);nZe=r(YDr,"GPT2TokenizerFast"),YDr.forEach(t),sZe=r(t9," (GPT-J model)"),t9.forEach(t),lZe=i(S),Un=n(S,"LI",{});var a9=s(Un);nre=n(a9,"STRONG",{});var KDr=s(nre);iZe=r(KDr,"herbert"),KDr.forEach(t),dZe=r(a9," \u2014 "),XS=n(a9,"A",{href:!0});var ZDr=s(XS);cZe=r(ZDr,"HerbertTokenizer"),ZDr.forEach(t),fZe=r(a9," or "),zS=n(a9,"A",{href:!0});var eGr=s(zS);mZe=r(eGr,"HerbertTokenizerFast"),eGr.forEach(t),gZe=r(a9," (HerBERT model)"),a9.forEach(t),hZe=i(S),vg=n(S,"LI",{});var PCe=s(vg);sre=n(PCe,"STRONG",{});var oGr=s(sre);pZe=r(oGr,"hubert"),oGr.forEach(t),uZe=r(PCe," \u2014 "),QS=n(PCe,"A",{href:!0});var rGr=s(QS);_Ze=r(rGr,"Wav2Vec2CTCTokenizer"),rGr.forEach(t),bZe=r(PCe," (Hubert model)"),PCe.forEach(t),vZe=i(S),Jn=n(S,"LI",{});var n9=s(Jn);lre=n(n9,"STRONG",{});var tGr=s(lre);FZe=r(tGr,"ibert"),tGr.forEach(t),TZe=r(n9," \u2014 "),WS=n(n9,"A",{href:!0});var aGr=s(WS);MZe=r(aGr,"RobertaTokenizer"),aGr.forEach(t),EZe=r(n9," or "),HS=n(n9,"A",{href:!0});var nGr=s(HS);CZe=r(nGr,"RobertaTokenizerFast"),nGr.forEach(t),wZe=r(n9," (I-BERT model)"),n9.forEach(t),AZe=i(S),Yn=n(S,"LI",{});var s9=s(Yn);ire=n(s9,"STRONG",{});var sGr=s(ire);yZe=r(sGr,"layoutlm"),sGr.forEach(t),LZe=r(s9," \u2014 "),US=n(s9,"A",{href:!0});var lGr=s(US);xZe=r(lGr,"LayoutLMTokenizer"),lGr.forEach(t),$Ze=r(s9," or "),JS=n(s9,"A",{href:!0});var iGr=s(JS);kZe=r(iGr,"LayoutLMTokenizerFast"),iGr.forEach(t),SZe=r(s9," (LayoutLM model)"),s9.forEach(t),RZe=i(S),Kn=n(S,"LI",{});var l9=s(Kn);dre=n(l9,"STRONG",{});var dGr=s(dre);BZe=r(dGr,"layoutlmv2"),dGr.forEach(t),PZe=r(l9," \u2014 "),YS=n(l9,"A",{href:!0});var cGr=s(YS);IZe=r(cGr,"LayoutLMv2Tokenizer"),cGr.forEach(t),qZe=r(l9," or "),KS=n(l9,"A",{href:!0});var fGr=s(KS);NZe=r(fGr,"LayoutLMv2TokenizerFast"),fGr.forEach(t),jZe=r(l9," (LayoutLMv2 model)"),l9.forEach(t),DZe=i(S),Zn=n(S,"LI",{});var i9=s(Zn);cre=n(i9,"STRONG",{});var mGr=s(cre);GZe=r(mGr,"layoutxlm"),mGr.forEach(t),OZe=r(i9," \u2014 "),ZS=n(i9,"A",{href:!0});var gGr=s(ZS);VZe=r(gGr,"LayoutXLMTokenizer"),gGr.forEach(t),XZe=r(i9," or "),eR=n(i9,"A",{href:!0});var hGr=s(eR);zZe=r(hGr,"LayoutXLMTokenizerFast"),hGr.forEach(t),QZe=r(i9," (LayoutXLM model)"),i9.forEach(t),WZe=i(S),es=n(S,"LI",{});var d9=s(es);fre=n(d9,"STRONG",{});var pGr=s(fre);HZe=r(pGr,"led"),pGr.forEach(t),UZe=r(d9," \u2014 "),oR=n(d9,"A",{href:!0});var uGr=s(oR);JZe=r(uGr,"LEDTokenizer"),uGr.forEach(t),YZe=r(d9," or "),rR=n(d9,"A",{href:!0});var _Gr=s(rR);KZe=r(_Gr,"LEDTokenizerFast"),_Gr.forEach(t),ZZe=r(d9," (LED model)"),d9.forEach(t),eeo=i(S),os=n(S,"LI",{});var c9=s(os);mre=n(c9,"STRONG",{});var bGr=s(mre);oeo=r(bGr,"longformer"),bGr.forEach(t),reo=r(c9," \u2014 "),tR=n(c9,"A",{href:!0});var vGr=s(tR);teo=r(vGr,"LongformerTokenizer"),vGr.forEach(t),aeo=r(c9," or "),aR=n(c9,"A",{href:!0});var FGr=s(aR);neo=r(FGr,"LongformerTokenizerFast"),FGr.forEach(t),seo=r(c9," (Longformer model)"),c9.forEach(t),leo=i(S),Fg=n(S,"LI",{});var ICe=s(Fg);gre=n(ICe,"STRONG",{});var TGr=s(gre);ieo=r(TGr,"luke"),TGr.forEach(t),deo=r(ICe," \u2014 "),nR=n(ICe,"A",{href:!0});var MGr=s(nR);ceo=r(MGr,"LukeTokenizer"),MGr.forEach(t),feo=r(ICe," (LUKE model)"),ICe.forEach(t),meo=i(S),rs=n(S,"LI",{});var f9=s(rs);hre=n(f9,"STRONG",{});var EGr=s(hre);geo=r(EGr,"lxmert"),EGr.forEach(t),heo=r(f9," \u2014 "),sR=n(f9,"A",{href:!0});var CGr=s(sR);peo=r(CGr,"LxmertTokenizer"),CGr.forEach(t),ueo=r(f9," or "),lR=n(f9,"A",{href:!0});var wGr=s(lR);_eo=r(wGr,"LxmertTokenizerFast"),wGr.forEach(t),beo=r(f9," (LXMERT model)"),f9.forEach(t),veo=i(S),Tg=n(S,"LI",{});var qCe=s(Tg);pre=n(qCe,"STRONG",{});var AGr=s(pre);Feo=r(AGr,"m2m_100"),AGr.forEach(t),Teo=r(qCe," \u2014 "),iR=n(qCe,"A",{href:!0});var yGr=s(iR);Meo=r(yGr,"M2M100Tokenizer"),yGr.forEach(t),Eeo=r(qCe," (M2M100 model)"),qCe.forEach(t),Ceo=i(S),Mg=n(S,"LI",{});var NCe=s(Mg);ure=n(NCe,"STRONG",{});var LGr=s(ure);weo=r(LGr,"marian"),LGr.forEach(t),Aeo=r(NCe," \u2014 "),dR=n(NCe,"A",{href:!0});var xGr=s(dR);yeo=r(xGr,"MarianTokenizer"),xGr.forEach(t),Leo=r(NCe," (Marian model)"),NCe.forEach(t),xeo=i(S),ts=n(S,"LI",{});var m9=s(ts);_re=n(m9,"STRONG",{});var $Gr=s(_re);$eo=r($Gr,"mbart"),$Gr.forEach(t),keo=r(m9," \u2014 "),cR=n(m9,"A",{href:!0});var kGr=s(cR);Seo=r(kGr,"MBartTokenizer"),kGr.forEach(t),Reo=r(m9," or "),fR=n(m9,"A",{href:!0});var SGr=s(fR);Beo=r(SGr,"MBartTokenizerFast"),SGr.forEach(t),Peo=r(m9," (mBART model)"),m9.forEach(t),Ieo=i(S),as=n(S,"LI",{});var g9=s(as);bre=n(g9,"STRONG",{});var RGr=s(bre);qeo=r(RGr,"mbart50"),RGr.forEach(t),Neo=r(g9," \u2014 "),mR=n(g9,"A",{href:!0});var BGr=s(mR);jeo=r(BGr,"MBart50Tokenizer"),BGr.forEach(t),Deo=r(g9," or "),gR=n(g9,"A",{href:!0});var PGr=s(gR);Geo=r(PGr,"MBart50TokenizerFast"),PGr.forEach(t),Oeo=r(g9," (mBART-50 model)"),g9.forEach(t),Veo=i(S),ns=n(S,"LI",{});var h9=s(ns);vre=n(h9,"STRONG",{});var IGr=s(vre);Xeo=r(IGr,"megatron-bert"),IGr.forEach(t),zeo=r(h9," \u2014 "),hR=n(h9,"A",{href:!0});var qGr=s(hR);Qeo=r(qGr,"BertTokenizer"),qGr.forEach(t),Weo=r(h9," or "),pR=n(h9,"A",{href:!0});var NGr=s(pR);Heo=r(NGr,"BertTokenizerFast"),NGr.forEach(t),Ueo=r(h9," (MegatronBert model)"),h9.forEach(t),Jeo=i(S),Eg=n(S,"LI",{});var jCe=s(Eg);Fre=n(jCe,"STRONG",{});var jGr=s(Fre);Yeo=r(jGr,"mluke"),jGr.forEach(t),Keo=r(jCe," \u2014 "),uR=n(jCe,"A",{href:!0});var DGr=s(uR);Zeo=r(DGr,"MLukeTokenizer"),DGr.forEach(t),eoo=r(jCe," (mLUKE model)"),jCe.forEach(t),ooo=i(S),ss=n(S,"LI",{});var p9=s(ss);Tre=n(p9,"STRONG",{});var GGr=s(Tre);roo=r(GGr,"mobilebert"),GGr.forEach(t),too=r(p9," \u2014 "),_R=n(p9,"A",{href:!0});var OGr=s(_R);aoo=r(OGr,"MobileBertTokenizer"),OGr.forEach(t),noo=r(p9," or "),bR=n(p9,"A",{href:!0});var VGr=s(bR);soo=r(VGr,"MobileBertTokenizerFast"),VGr.forEach(t),loo=r(p9," (MobileBERT model)"),p9.forEach(t),ioo=i(S),ls=n(S,"LI",{});var u9=s(ls);Mre=n(u9,"STRONG",{});var XGr=s(Mre);doo=r(XGr,"mpnet"),XGr.forEach(t),coo=r(u9," \u2014 "),vR=n(u9,"A",{href:!0});var zGr=s(vR);foo=r(zGr,"MPNetTokenizer"),zGr.forEach(t),moo=r(u9," or "),FR=n(u9,"A",{href:!0});var QGr=s(FR);goo=r(QGr,"MPNetTokenizerFast"),QGr.forEach(t),hoo=r(u9," (MPNet model)"),u9.forEach(t),poo=i(S),is=n(S,"LI",{});var _9=s(is);Ere=n(_9,"STRONG",{});var WGr=s(Ere);uoo=r(WGr,"mt5"),WGr.forEach(t),_oo=r(_9," \u2014 "),TR=n(_9,"A",{href:!0});var HGr=s(TR);boo=r(HGr,"MT5Tokenizer"),HGr.forEach(t),voo=r(_9," or "),MR=n(_9,"A",{href:!0});var UGr=s(MR);Foo=r(UGr,"MT5TokenizerFast"),UGr.forEach(t),Too=r(_9," (mT5 model)"),_9.forEach(t),Moo=i(S),ds=n(S,"LI",{});var b9=s(ds);Cre=n(b9,"STRONG",{});var JGr=s(Cre);Eoo=r(JGr,"nystromformer"),JGr.forEach(t),Coo=r(b9," \u2014 "),ER=n(b9,"A",{href:!0});var YGr=s(ER);woo=r(YGr,"AlbertTokenizer"),YGr.forEach(t),Aoo=r(b9," or "),CR=n(b9,"A",{href:!0});var KGr=s(CR);yoo=r(KGr,"AlbertTokenizerFast"),KGr.forEach(t),Loo=r(b9," (Nystromformer model)"),b9.forEach(t),xoo=i(S),cs=n(S,"LI",{});var v9=s(cs);wre=n(v9,"STRONG",{});var ZGr=s(wre);$oo=r(ZGr,"openai-gpt"),ZGr.forEach(t),koo=r(v9," \u2014 "),wR=n(v9,"A",{href:!0});var eOr=s(wR);Soo=r(eOr,"OpenAIGPTTokenizer"),eOr.forEach(t),Roo=r(v9," or "),AR=n(v9,"A",{href:!0});var oOr=s(AR);Boo=r(oOr,"OpenAIGPTTokenizerFast"),oOr.forEach(t),Poo=r(v9," (OpenAI GPT model)"),v9.forEach(t),Ioo=i(S),fs=n(S,"LI",{});var F9=s(fs);Are=n(F9,"STRONG",{});var rOr=s(Are);qoo=r(rOr,"pegasus"),rOr.forEach(t),Noo=r(F9," \u2014 "),yR=n(F9,"A",{href:!0});var tOr=s(yR);joo=r(tOr,"PegasusTokenizer"),tOr.forEach(t),Doo=r(F9," or "),LR=n(F9,"A",{href:!0});var aOr=s(LR);Goo=r(aOr,"PegasusTokenizerFast"),aOr.forEach(t),Ooo=r(F9," (Pegasus model)"),F9.forEach(t),Voo=i(S),Cg=n(S,"LI",{});var DCe=s(Cg);yre=n(DCe,"STRONG",{});var nOr=s(yre);Xoo=r(nOr,"perceiver"),nOr.forEach(t),zoo=r(DCe," \u2014 "),xR=n(DCe,"A",{href:!0});var sOr=s(xR);Qoo=r(sOr,"PerceiverTokenizer"),sOr.forEach(t),Woo=r(DCe," (Perceiver model)"),DCe.forEach(t),Hoo=i(S),wg=n(S,"LI",{});var GCe=s(wg);Lre=n(GCe,"STRONG",{});var lOr=s(Lre);Uoo=r(lOr,"phobert"),lOr.forEach(t),Joo=r(GCe," \u2014 "),$R=n(GCe,"A",{href:!0});var iOr=s($R);Yoo=r(iOr,"PhobertTokenizer"),iOr.forEach(t),Koo=r(GCe," (PhoBERT model)"),GCe.forEach(t),Zoo=i(S),Ag=n(S,"LI",{});var OCe=s(Ag);xre=n(OCe,"STRONG",{});var dOr=s(xre);ero=r(dOr,"plbart"),dOr.forEach(t),oro=r(OCe," \u2014 "),kR=n(OCe,"A",{href:!0});var cOr=s(kR);rro=r(cOr,"PLBartTokenizer"),cOr.forEach(t),tro=r(OCe," (PLBart model)"),OCe.forEach(t),aro=i(S),yg=n(S,"LI",{});var VCe=s(yg);$re=n(VCe,"STRONG",{});var fOr=s($re);nro=r(fOr,"prophetnet"),fOr.forEach(t),sro=r(VCe," \u2014 "),SR=n(VCe,"A",{href:!0});var mOr=s(SR);lro=r(mOr,"ProphetNetTokenizer"),mOr.forEach(t),iro=r(VCe," (ProphetNet model)"),VCe.forEach(t),dro=i(S),ms=n(S,"LI",{});var T9=s(ms);kre=n(T9,"STRONG",{});var gOr=s(kre);cro=r(gOr,"qdqbert"),gOr.forEach(t),fro=r(T9," \u2014 "),RR=n(T9,"A",{href:!0});var hOr=s(RR);mro=r(hOr,"BertTokenizer"),hOr.forEach(t),gro=r(T9," or "),BR=n(T9,"A",{href:!0});var pOr=s(BR);hro=r(pOr,"BertTokenizerFast"),pOr.forEach(t),pro=r(T9," (QDQBert model)"),T9.forEach(t),uro=i(S),Lg=n(S,"LI",{});var XCe=s(Lg);Sre=n(XCe,"STRONG",{});var uOr=s(Sre);_ro=r(uOr,"rag"),uOr.forEach(t),bro=r(XCe," \u2014 "),PR=n(XCe,"A",{href:!0});var _Or=s(PR);vro=r(_Or,"RagTokenizer"),_Or.forEach(t),Fro=r(XCe," (RAG model)"),XCe.forEach(t),Tro=i(S),gs=n(S,"LI",{});var M9=s(gs);Rre=n(M9,"STRONG",{});var bOr=s(Rre);Mro=r(bOr,"realm"),bOr.forEach(t),Ero=r(M9," \u2014 "),IR=n(M9,"A",{href:!0});var vOr=s(IR);Cro=r(vOr,"RealmTokenizer"),vOr.forEach(t),wro=r(M9," or "),qR=n(M9,"A",{href:!0});var FOr=s(qR);Aro=r(FOr,"RealmTokenizerFast"),FOr.forEach(t),yro=r(M9," (Realm model)"),M9.forEach(t),Lro=i(S),hs=n(S,"LI",{});var E9=s(hs);Bre=n(E9,"STRONG",{});var TOr=s(Bre);xro=r(TOr,"reformer"),TOr.forEach(t),$ro=r(E9," \u2014 "),NR=n(E9,"A",{href:!0});var MOr=s(NR);kro=r(MOr,"ReformerTokenizer"),MOr.forEach(t),Sro=r(E9," or "),jR=n(E9,"A",{href:!0});var EOr=s(jR);Rro=r(EOr,"ReformerTokenizerFast"),EOr.forEach(t),Bro=r(E9," (Reformer model)"),E9.forEach(t),Pro=i(S),ps=n(S,"LI",{});var C9=s(ps);Pre=n(C9,"STRONG",{});var COr=s(Pre);Iro=r(COr,"rembert"),COr.forEach(t),qro=r(C9," \u2014 "),DR=n(C9,"A",{href:!0});var wOr=s(DR);Nro=r(wOr,"RemBertTokenizer"),wOr.forEach(t),jro=r(C9," or "),GR=n(C9,"A",{href:!0});var AOr=s(GR);Dro=r(AOr,"RemBertTokenizerFast"),AOr.forEach(t),Gro=r(C9," (RemBERT model)"),C9.forEach(t),Oro=i(S),us=n(S,"LI",{});var w9=s(us);Ire=n(w9,"STRONG",{});var yOr=s(Ire);Vro=r(yOr,"retribert"),yOr.forEach(t),Xro=r(w9," \u2014 "),OR=n(w9,"A",{href:!0});var LOr=s(OR);zro=r(LOr,"RetriBertTokenizer"),LOr.forEach(t),Qro=r(w9," or "),VR=n(w9,"A",{href:!0});var xOr=s(VR);Wro=r(xOr,"RetriBertTokenizerFast"),xOr.forEach(t),Hro=r(w9," (RetriBERT model)"),w9.forEach(t),Uro=i(S),_s=n(S,"LI",{});var A9=s(_s);qre=n(A9,"STRONG",{});var $Or=s(qre);Jro=r($Or,"roberta"),$Or.forEach(t),Yro=r(A9," \u2014 "),XR=n(A9,"A",{href:!0});var kOr=s(XR);Kro=r(kOr,"RobertaTokenizer"),kOr.forEach(t),Zro=r(A9," or "),zR=n(A9,"A",{href:!0});var SOr=s(zR);eto=r(SOr,"RobertaTokenizerFast"),SOr.forEach(t),oto=r(A9," (RoBERTa model)"),A9.forEach(t),rto=i(S),bs=n(S,"LI",{});var y9=s(bs);Nre=n(y9,"STRONG",{});var ROr=s(Nre);tto=r(ROr,"roformer"),ROr.forEach(t),ato=r(y9," \u2014 "),QR=n(y9,"A",{href:!0});var BOr=s(QR);nto=r(BOr,"RoFormerTokenizer"),BOr.forEach(t),sto=r(y9," or "),WR=n(y9,"A",{href:!0});var POr=s(WR);lto=r(POr,"RoFormerTokenizerFast"),POr.forEach(t),ito=r(y9," (RoFormer model)"),y9.forEach(t),dto=i(S),xg=n(S,"LI",{});var zCe=s(xg);jre=n(zCe,"STRONG",{});var IOr=s(jre);cto=r(IOr,"speech_to_text"),IOr.forEach(t),fto=r(zCe," \u2014 "),HR=n(zCe,"A",{href:!0});var qOr=s(HR);mto=r(qOr,"Speech2TextTokenizer"),qOr.forEach(t),gto=r(zCe," (Speech2Text model)"),zCe.forEach(t),hto=i(S),$g=n(S,"LI",{});var QCe=s($g);Dre=n(QCe,"STRONG",{});var NOr=s(Dre);pto=r(NOr,"speech_to_text_2"),NOr.forEach(t),uto=r(QCe," \u2014 "),UR=n(QCe,"A",{href:!0});var jOr=s(UR);_to=r(jOr,"Speech2Text2Tokenizer"),jOr.forEach(t),bto=r(QCe," (Speech2Text2 model)"),QCe.forEach(t),vto=i(S),vs=n(S,"LI",{});var L9=s(vs);Gre=n(L9,"STRONG",{});var DOr=s(Gre);Fto=r(DOr,"splinter"),DOr.forEach(t),Tto=r(L9," \u2014 "),JR=n(L9,"A",{href:!0});var GOr=s(JR);Mto=r(GOr,"SplinterTokenizer"),GOr.forEach(t),Eto=r(L9," or "),YR=n(L9,"A",{href:!0});var OOr=s(YR);Cto=r(OOr,"SplinterTokenizerFast"),OOr.forEach(t),wto=r(L9," (Splinter model)"),L9.forEach(t),Ato=i(S),Fs=n(S,"LI",{});var x9=s(Fs);Ore=n(x9,"STRONG",{});var VOr=s(Ore);yto=r(VOr,"squeezebert"),VOr.forEach(t),Lto=r(x9," \u2014 "),KR=n(x9,"A",{href:!0});var XOr=s(KR);xto=r(XOr,"SqueezeBertTokenizer"),XOr.forEach(t),$to=r(x9," or "),ZR=n(x9,"A",{href:!0});var zOr=s(ZR);kto=r(zOr,"SqueezeBertTokenizerFast"),zOr.forEach(t),Sto=r(x9," (SqueezeBERT model)"),x9.forEach(t),Rto=i(S),Ts=n(S,"LI",{});var $9=s(Ts);Vre=n($9,"STRONG",{});var QOr=s(Vre);Bto=r(QOr,"t5"),QOr.forEach(t),Pto=r($9," \u2014 "),eB=n($9,"A",{href:!0});var WOr=s(eB);Ito=r(WOr,"T5Tokenizer"),WOr.forEach(t),qto=r($9," or "),oB=n($9,"A",{href:!0});var HOr=s(oB);Nto=r(HOr,"T5TokenizerFast"),HOr.forEach(t),jto=r($9," (T5 model)"),$9.forEach(t),Dto=i(S),kg=n(S,"LI",{});var WCe=s(kg);Xre=n(WCe,"STRONG",{});var UOr=s(Xre);Gto=r(UOr,"tapas"),UOr.forEach(t),Oto=r(WCe," \u2014 "),rB=n(WCe,"A",{href:!0});var JOr=s(rB);Vto=r(JOr,"TapasTokenizer"),JOr.forEach(t),Xto=r(WCe," (TAPAS model)"),WCe.forEach(t),zto=i(S),Sg=n(S,"LI",{});var HCe=s(Sg);zre=n(HCe,"STRONG",{});var YOr=s(zre);Qto=r(YOr,"tapex"),YOr.forEach(t),Wto=r(HCe," \u2014 "),tB=n(HCe,"A",{href:!0});var KOr=s(tB);Hto=r(KOr,"TapexTokenizer"),KOr.forEach(t),Uto=r(HCe," (TAPEX model)"),HCe.forEach(t),Jto=i(S),Rg=n(S,"LI",{});var UCe=s(Rg);Qre=n(UCe,"STRONG",{});var ZOr=s(Qre);Yto=r(ZOr,"transfo-xl"),ZOr.forEach(t),Kto=r(UCe," \u2014 "),aB=n(UCe,"A",{href:!0});var eVr=s(aB);Zto=r(eVr,"TransfoXLTokenizer"),eVr.forEach(t),eao=r(UCe," (Transformer-XL model)"),UCe.forEach(t),oao=i(S),Ms=n(S,"LI",{});var k9=s(Ms);Wre=n(k9,"STRONG",{});var oVr=s(Wre);rao=r(oVr,"visual_bert"),oVr.forEach(t),tao=r(k9," \u2014 "),nB=n(k9,"A",{href:!0});var rVr=s(nB);aao=r(rVr,"BertTokenizer"),rVr.forEach(t),nao=r(k9," or "),sB=n(k9,"A",{href:!0});var tVr=s(sB);sao=r(tVr,"BertTokenizerFast"),tVr.forEach(t),lao=r(k9," (VisualBert model)"),k9.forEach(t),iao=i(S),Bg=n(S,"LI",{});var JCe=s(Bg);Hre=n(JCe,"STRONG",{});var aVr=s(Hre);dao=r(aVr,"wav2vec2"),aVr.forEach(t),cao=r(JCe," \u2014 "),lB=n(JCe,"A",{href:!0});var nVr=s(lB);fao=r(nVr,"Wav2Vec2CTCTokenizer"),nVr.forEach(t),mao=r(JCe," (Wav2Vec2 model)"),JCe.forEach(t),gao=i(S),Pg=n(S,"LI",{});var YCe=s(Pg);Ure=n(YCe,"STRONG",{});var sVr=s(Ure);hao=r(sVr,"wav2vec2_phoneme"),sVr.forEach(t),pao=r(YCe," \u2014 "),iB=n(YCe,"A",{href:!0});var lVr=s(iB);uao=r(lVr,"Wav2Vec2PhonemeCTCTokenizer"),lVr.forEach(t),_ao=r(YCe," (Wav2Vec2Phoneme model)"),YCe.forEach(t),bao=i(S),Es=n(S,"LI",{});var S9=s(Es);Jre=n(S9,"STRONG",{});var iVr=s(Jre);vao=r(iVr,"xglm"),iVr.forEach(t),Fao=r(S9," \u2014 "),dB=n(S9,"A",{href:!0});var dVr=s(dB);Tao=r(dVr,"XGLMTokenizer"),dVr.forEach(t),Mao=r(S9," or "),cB=n(S9,"A",{href:!0});var cVr=s(cB);Eao=r(cVr,"XGLMTokenizerFast"),cVr.forEach(t),Cao=r(S9," (XGLM model)"),S9.forEach(t),wao=i(S),Ig=n(S,"LI",{});var KCe=s(Ig);Yre=n(KCe,"STRONG",{});var fVr=s(Yre);Aao=r(fVr,"xlm"),fVr.forEach(t),yao=r(KCe," \u2014 "),fB=n(KCe,"A",{href:!0});var mVr=s(fB);Lao=r(mVr,"XLMTokenizer"),mVr.forEach(t),xao=r(KCe," (XLM model)"),KCe.forEach(t),$ao=i(S),qg=n(S,"LI",{});var ZCe=s(qg);Kre=n(ZCe,"STRONG",{});var gVr=s(Kre);kao=r(gVr,"xlm-prophetnet"),gVr.forEach(t),Sao=r(ZCe," \u2014 "),mB=n(ZCe,"A",{href:!0});var hVr=s(mB);Rao=r(hVr,"XLMProphetNetTokenizer"),hVr.forEach(t),Bao=r(ZCe," (XLMProphetNet model)"),ZCe.forEach(t),Pao=i(S),Cs=n(S,"LI",{});var R9=s(Cs);Zre=n(R9,"STRONG",{});var pVr=s(Zre);Iao=r(pVr,"xlm-roberta"),pVr.forEach(t),qao=r(R9," \u2014 "),gB=n(R9,"A",{href:!0});var uVr=s(gB);Nao=r(uVr,"XLMRobertaTokenizer"),uVr.forEach(t),jao=r(R9," or "),hB=n(R9,"A",{href:!0});var _Vr=s(hB);Dao=r(_Vr,"XLMRobertaTokenizerFast"),_Vr.forEach(t),Gao=r(R9," (XLM-RoBERTa model)"),R9.forEach(t),Oao=i(S),ws=n(S,"LI",{});var B9=s(ws);ete=n(B9,"STRONG",{});var bVr=s(ete);Vao=r(bVr,"xlm-roberta-xl"),bVr.forEach(t),Xao=r(B9," \u2014 "),pB=n(B9,"A",{href:!0});var vVr=s(pB);zao=r(vVr,"RobertaTokenizer"),vVr.forEach(t),Qao=r(B9," or "),uB=n(B9,"A",{href:!0});var FVr=s(uB);Wao=r(FVr,"RobertaTokenizerFast"),FVr.forEach(t),Hao=r(B9," (XLM-RoBERTa-XL model)"),B9.forEach(t),Uao=i(S),As=n(S,"LI",{});var P9=s(As);ote=n(P9,"STRONG",{});var TVr=s(ote);Jao=r(TVr,"xlnet"),TVr.forEach(t),Yao=r(P9," \u2014 "),_B=n(P9,"A",{href:!0});var MVr=s(_B);Kao=r(MVr,"XLNetTokenizer"),MVr.forEach(t),Zao=r(P9," or "),bB=n(P9,"A",{href:!0});var EVr=s(bB);eno=r(EVr,"XLNetTokenizerFast"),EVr.forEach(t),ono=r(P9," (XLNet model)"),P9.forEach(t),rno=i(S),ys=n(S,"LI",{});var I9=s(ys);rte=n(I9,"STRONG",{});var CVr=s(rte);tno=r(CVr,"yoso"),CVr.forEach(t),ano=r(I9," \u2014 "),vB=n(I9,"A",{href:!0});var wVr=s(vB);nno=r(wVr,"AlbertTokenizer"),wVr.forEach(t),sno=r(I9," or "),FB=n(I9,"A",{href:!0});var AVr=s(FB);lno=r(AVr,"AlbertTokenizerFast"),AVr.forEach(t),ino=r(I9," (YOSO model)"),I9.forEach(t),S.forEach(t),dno=i(Ss),T(Ng.$$.fragment,Ss),Ss.forEach(t),cno=i(ks),jg=n(ks,"DIV",{class:!0});var DIe=s(jg);T(O0.$$.fragment,DIe),fno=i(DIe),tte=n(DIe,"P",{});var yVr=s(tte);mno=r(yVr,"Register a new tokenizer in this mapping."),yVr.forEach(t),DIe.forEach(t),ks.forEach(t),VBe=i(f),mi=n(f,"H2",{class:!0});var GIe=s(mi);Dg=n(GIe,"A",{id:!0,class:!0,href:!0});var LVr=s(Dg);ate=n(LVr,"SPAN",{});var xVr=s(ate);T(V0.$$.fragment,xVr),xVr.forEach(t),LVr.forEach(t),gno=i(GIe),nte=n(GIe,"SPAN",{});var $Vr=s(nte);hno=r($Vr,"AutoFeatureExtractor"),$Vr.forEach(t),GIe.forEach(t),XBe=i(f),Ao=n(f,"DIV",{class:!0});var Rs=s(Ao);T(X0.$$.fragment,Rs),pno=i(Rs),z0=n(Rs,"P",{});var OIe=s(z0);uno=r(OIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TB=n(OIe,"A",{href:!0});var kVr=s(TB);_no=r(kVr,"AutoFeatureExtractor.from_pretrained()"),kVr.forEach(t),bno=r(OIe," class method."),OIe.forEach(t),vno=i(Rs),Q0=n(Rs,"P",{});var VIe=s(Q0);Fno=r(VIe,"This class cannot be instantiated directly using "),ste=n(VIe,"CODE",{});var SVr=s(ste);Tno=r(SVr,"__init__()"),SVr.forEach(t),Mno=r(VIe," (throws an error)."),VIe.forEach(t),Eno=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(W0.$$.fragment,Ht),Cno=i(Ht),lte=n(Ht,"P",{});var RVr=s(lte);wno=r(RVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),RVr.forEach(t),Ano=i(Ht),Ma=n(Ht,"P",{});var Rw=s(Ma);yno=r(Rw,"The feature extractor class to instantiate is selected based on the "),ite=n(Rw,"CODE",{});var BVr=s(ite);Lno=r(BVr,"model_type"),BVr.forEach(t),xno=r(Rw,` property of the config object
(either passed as an argument or loaded from `),dte=n(Rw,"CODE",{});var PVr=s(dte);$no=r(PVr,"pretrained_model_name_or_path"),PVr.forEach(t),kno=r(Rw,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),cte=n(Rw,"CODE",{});var IVr=s(cte);Sno=r(IVr,"pretrained_model_name_or_path"),IVr.forEach(t),Rno=r(Rw,":"),Rw.forEach(t),Bno=i(Ht),oe=n(Ht,"UL",{});var ae=s(oe);Gg=n(ae,"LI",{});var e3e=s(Gg);fte=n(e3e,"STRONG",{});var qVr=s(fte);Pno=r(qVr,"beit"),qVr.forEach(t),Ino=r(e3e," \u2014 "),MB=n(e3e,"A",{href:!0});var NVr=s(MB);qno=r(NVr,"BeitFeatureExtractor"),NVr.forEach(t),Nno=r(e3e," (BEiT model)"),e3e.forEach(t),jno=i(ae),Og=n(ae,"LI",{});var o3e=s(Og);mte=n(o3e,"STRONG",{});var jVr=s(mte);Dno=r(jVr,"clip"),jVr.forEach(t),Gno=r(o3e," \u2014 "),EB=n(o3e,"A",{href:!0});var DVr=s(EB);Ono=r(DVr,"CLIPFeatureExtractor"),DVr.forEach(t),Vno=r(o3e," (CLIP model)"),o3e.forEach(t),Xno=i(ae),Vg=n(ae,"LI",{});var r3e=s(Vg);gte=n(r3e,"STRONG",{});var GVr=s(gte);zno=r(GVr,"convnext"),GVr.forEach(t),Qno=r(r3e," \u2014 "),CB=n(r3e,"A",{href:!0});var OVr=s(CB);Wno=r(OVr,"ConvNextFeatureExtractor"),OVr.forEach(t),Hno=r(r3e," (ConvNext model)"),r3e.forEach(t),Uno=i(ae),Xg=n(ae,"LI",{});var t3e=s(Xg);hte=n(t3e,"STRONG",{});var VVr=s(hte);Jno=r(VVr,"data2vec-audio"),VVr.forEach(t),Yno=r(t3e," \u2014 "),wB=n(t3e,"A",{href:!0});var XVr=s(wB);Kno=r(XVr,"Wav2Vec2FeatureExtractor"),XVr.forEach(t),Zno=r(t3e," (Data2VecAudio model)"),t3e.forEach(t),eso=i(ae),zg=n(ae,"LI",{});var a3e=s(zg);pte=n(a3e,"STRONG",{});var zVr=s(pte);oso=r(zVr,"data2vec-vision"),zVr.forEach(t),rso=r(a3e," \u2014 "),AB=n(a3e,"A",{href:!0});var QVr=s(AB);tso=r(QVr,"BeitFeatureExtractor"),QVr.forEach(t),aso=r(a3e," (Data2VecVision model)"),a3e.forEach(t),nso=i(ae),Qg=n(ae,"LI",{});var n3e=s(Qg);ute=n(n3e,"STRONG",{});var WVr=s(ute);sso=r(WVr,"deit"),WVr.forEach(t),lso=r(n3e," \u2014 "),yB=n(n3e,"A",{href:!0});var HVr=s(yB);iso=r(HVr,"DeiTFeatureExtractor"),HVr.forEach(t),dso=r(n3e," (DeiT model)"),n3e.forEach(t),cso=i(ae),Wg=n(ae,"LI",{});var s3e=s(Wg);_te=n(s3e,"STRONG",{});var UVr=s(_te);fso=r(UVr,"detr"),UVr.forEach(t),mso=r(s3e," \u2014 "),LB=n(s3e,"A",{href:!0});var JVr=s(LB);gso=r(JVr,"DetrFeatureExtractor"),JVr.forEach(t),hso=r(s3e," (DETR model)"),s3e.forEach(t),pso=i(ae),Hg=n(ae,"LI",{});var l3e=s(Hg);bte=n(l3e,"STRONG",{});var YVr=s(bte);uso=r(YVr,"dpt"),YVr.forEach(t),_so=r(l3e," \u2014 "),xB=n(l3e,"A",{href:!0});var KVr=s(xB);bso=r(KVr,"DPTFeatureExtractor"),KVr.forEach(t),vso=r(l3e," (DPT model)"),l3e.forEach(t),Fso=i(ae),Ug=n(ae,"LI",{});var i3e=s(Ug);vte=n(i3e,"STRONG",{});var ZVr=s(vte);Tso=r(ZVr,"flava"),ZVr.forEach(t),Mso=r(i3e," \u2014 "),Fte=n(i3e,"CODE",{});var eXr=s(Fte);Eso=r(eXr,"FLAVAFeatureExtractor"),eXr.forEach(t),Cso=r(i3e," (Flava model)"),i3e.forEach(t),wso=i(ae),Jg=n(ae,"LI",{});var d3e=s(Jg);Tte=n(d3e,"STRONG",{});var oXr=s(Tte);Aso=r(oXr,"glpn"),oXr.forEach(t),yso=r(d3e," \u2014 "),$B=n(d3e,"A",{href:!0});var rXr=s($B);Lso=r(rXr,"GLPNFeatureExtractor"),rXr.forEach(t),xso=r(d3e," (GLPN model)"),d3e.forEach(t),$so=i(ae),Yg=n(ae,"LI",{});var c3e=s(Yg);Mte=n(c3e,"STRONG",{});var tXr=s(Mte);kso=r(tXr,"hubert"),tXr.forEach(t),Sso=r(c3e," \u2014 "),kB=n(c3e,"A",{href:!0});var aXr=s(kB);Rso=r(aXr,"Wav2Vec2FeatureExtractor"),aXr.forEach(t),Bso=r(c3e," (Hubert model)"),c3e.forEach(t),Pso=i(ae),Kg=n(ae,"LI",{});var f3e=s(Kg);Ete=n(f3e,"STRONG",{});var nXr=s(Ete);Iso=r(nXr,"layoutlmv2"),nXr.forEach(t),qso=r(f3e," \u2014 "),SB=n(f3e,"A",{href:!0});var sXr=s(SB);Nso=r(sXr,"LayoutLMv2FeatureExtractor"),sXr.forEach(t),jso=r(f3e," (LayoutLMv2 model)"),f3e.forEach(t),Dso=i(ae),Zg=n(ae,"LI",{});var m3e=s(Zg);Cte=n(m3e,"STRONG",{});var lXr=s(Cte);Gso=r(lXr,"maskformer"),lXr.forEach(t),Oso=r(m3e," \u2014 "),RB=n(m3e,"A",{href:!0});var iXr=s(RB);Vso=r(iXr,"MaskFormerFeatureExtractor"),iXr.forEach(t),Xso=r(m3e," (MaskFormer model)"),m3e.forEach(t),zso=i(ae),eh=n(ae,"LI",{});var g3e=s(eh);wte=n(g3e,"STRONG",{});var dXr=s(wte);Qso=r(dXr,"perceiver"),dXr.forEach(t),Wso=r(g3e," \u2014 "),BB=n(g3e,"A",{href:!0});var cXr=s(BB);Hso=r(cXr,"PerceiverFeatureExtractor"),cXr.forEach(t),Uso=r(g3e," (Perceiver model)"),g3e.forEach(t),Jso=i(ae),oh=n(ae,"LI",{});var h3e=s(oh);Ate=n(h3e,"STRONG",{});var fXr=s(Ate);Yso=r(fXr,"poolformer"),fXr.forEach(t),Kso=r(h3e," \u2014 "),PB=n(h3e,"A",{href:!0});var mXr=s(PB);Zso=r(mXr,"PoolFormerFeatureExtractor"),mXr.forEach(t),elo=r(h3e," (PoolFormer model)"),h3e.forEach(t),olo=i(ae),rh=n(ae,"LI",{});var p3e=s(rh);yte=n(p3e,"STRONG",{});var gXr=s(yte);rlo=r(gXr,"regnet"),gXr.forEach(t),tlo=r(p3e," \u2014 "),IB=n(p3e,"A",{href:!0});var hXr=s(IB);alo=r(hXr,"ConvNextFeatureExtractor"),hXr.forEach(t),nlo=r(p3e," (RegNet model)"),p3e.forEach(t),slo=i(ae),th=n(ae,"LI",{});var u3e=s(th);Lte=n(u3e,"STRONG",{});var pXr=s(Lte);llo=r(pXr,"resnet"),pXr.forEach(t),ilo=r(u3e," \u2014 "),qB=n(u3e,"A",{href:!0});var uXr=s(qB);dlo=r(uXr,"ConvNextFeatureExtractor"),uXr.forEach(t),clo=r(u3e," (ResNet model)"),u3e.forEach(t),flo=i(ae),ah=n(ae,"LI",{});var _3e=s(ah);xte=n(_3e,"STRONG",{});var _Xr=s(xte);mlo=r(_Xr,"segformer"),_Xr.forEach(t),glo=r(_3e," \u2014 "),NB=n(_3e,"A",{href:!0});var bXr=s(NB);hlo=r(bXr,"SegformerFeatureExtractor"),bXr.forEach(t),plo=r(_3e," (SegFormer model)"),_3e.forEach(t),ulo=i(ae),nh=n(ae,"LI",{});var b3e=s(nh);$te=n(b3e,"STRONG",{});var vXr=s($te);_lo=r(vXr,"speech_to_text"),vXr.forEach(t),blo=r(b3e," \u2014 "),jB=n(b3e,"A",{href:!0});var FXr=s(jB);vlo=r(FXr,"Speech2TextFeatureExtractor"),FXr.forEach(t),Flo=r(b3e," (Speech2Text model)"),b3e.forEach(t),Tlo=i(ae),sh=n(ae,"LI",{});var v3e=s(sh);kte=n(v3e,"STRONG",{});var TXr=s(kte);Mlo=r(TXr,"swin"),TXr.forEach(t),Elo=r(v3e," \u2014 "),DB=n(v3e,"A",{href:!0});var MXr=s(DB);Clo=r(MXr,"ViTFeatureExtractor"),MXr.forEach(t),wlo=r(v3e," (Swin model)"),v3e.forEach(t),Alo=i(ae),lh=n(ae,"LI",{});var F3e=s(lh);Ste=n(F3e,"STRONG",{});var EXr=s(Ste);ylo=r(EXr,"van"),EXr.forEach(t),Llo=r(F3e," \u2014 "),GB=n(F3e,"A",{href:!0});var CXr=s(GB);xlo=r(CXr,"ConvNextFeatureExtractor"),CXr.forEach(t),$lo=r(F3e," (VAN model)"),F3e.forEach(t),klo=i(ae),ih=n(ae,"LI",{});var T3e=s(ih);Rte=n(T3e,"STRONG",{});var wXr=s(Rte);Slo=r(wXr,"vit"),wXr.forEach(t),Rlo=r(T3e," \u2014 "),OB=n(T3e,"A",{href:!0});var AXr=s(OB);Blo=r(AXr,"ViTFeatureExtractor"),AXr.forEach(t),Plo=r(T3e," (ViT model)"),T3e.forEach(t),Ilo=i(ae),dh=n(ae,"LI",{});var M3e=s(dh);Bte=n(M3e,"STRONG",{});var yXr=s(Bte);qlo=r(yXr,"vit_mae"),yXr.forEach(t),Nlo=r(M3e," \u2014 "),VB=n(M3e,"A",{href:!0});var LXr=s(VB);jlo=r(LXr,"ViTFeatureExtractor"),LXr.forEach(t),Dlo=r(M3e," (ViTMAE model)"),M3e.forEach(t),Glo=i(ae),ch=n(ae,"LI",{});var E3e=s(ch);Pte=n(E3e,"STRONG",{});var xXr=s(Pte);Olo=r(xXr,"wav2vec2"),xXr.forEach(t),Vlo=r(E3e," \u2014 "),XB=n(E3e,"A",{href:!0});var $Xr=s(XB);Xlo=r($Xr,"Wav2Vec2FeatureExtractor"),$Xr.forEach(t),zlo=r(E3e," (Wav2Vec2 model)"),E3e.forEach(t),Qlo=i(ae),fh=n(ae,"LI",{});var C3e=s(fh);Ite=n(C3e,"STRONG",{});var kXr=s(Ite);Wlo=r(kXr,"yolos"),kXr.forEach(t),Hlo=r(C3e," \u2014 "),zB=n(C3e,"A",{href:!0});var SXr=s(zB);Ulo=r(SXr,"YolosFeatureExtractor"),SXr.forEach(t),Jlo=r(C3e," (YOLOS model)"),C3e.forEach(t),ae.forEach(t),Ylo=i(Ht),T(mh.$$.fragment,Ht),Klo=i(Ht),T(gh.$$.fragment,Ht),Ht.forEach(t),Zlo=i(Rs),hh=n(Rs,"DIV",{class:!0});var XIe=s(hh);T(H0.$$.fragment,XIe),eio=i(XIe),qte=n(XIe,"P",{});var RXr=s(qte);oio=r(RXr,"Register a new feature extractor for this class."),RXr.forEach(t),XIe.forEach(t),Rs.forEach(t),zBe=i(f),gi=n(f,"H2",{class:!0});var zIe=s(gi);ph=n(zIe,"A",{id:!0,class:!0,href:!0});var BXr=s(ph);Nte=n(BXr,"SPAN",{});var PXr=s(Nte);T(U0.$$.fragment,PXr),PXr.forEach(t),BXr.forEach(t),rio=i(zIe),jte=n(zIe,"SPAN",{});var IXr=s(jte);tio=r(IXr,"AutoProcessor"),IXr.forEach(t),zIe.forEach(t),QBe=i(f),yo=n(f,"DIV",{class:!0});var Bs=s(yo);T(J0.$$.fragment,Bs),aio=i(Bs),Y0=n(Bs,"P",{});var QIe=s(Y0);nio=r(QIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),QB=n(QIe,"A",{href:!0});var qXr=s(QB);sio=r(qXr,"AutoProcessor.from_pretrained()"),qXr.forEach(t),lio=r(QIe," class method."),QIe.forEach(t),iio=i(Bs),K0=n(Bs,"P",{});var WIe=s(K0);dio=r(WIe,"This class cannot be instantiated directly using "),Dte=n(WIe,"CODE",{});var NXr=s(Dte);cio=r(NXr,"__init__()"),NXr.forEach(t),fio=r(WIe," (throws an error)."),WIe.forEach(t),mio=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(Z0.$$.fragment,Ut),gio=i(Ut),Gte=n(Ut,"P",{});var jXr=s(Gte);hio=r(jXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jXr.forEach(t),pio=i(Ut),hi=n(Ut,"P",{});var MY=s(hi);uio=r(MY,"The processor class to instantiate is selected based on the "),Ote=n(MY,"CODE",{});var DXr=s(Ote);_io=r(DXr,"model_type"),DXr.forEach(t),bio=r(MY,` property of the config object (either
passed as an argument or loaded from `),Vte=n(MY,"CODE",{});var GXr=s(Vte);vio=r(GXr,"pretrained_model_name_or_path"),GXr.forEach(t),Fio=r(MY," if possible):"),MY.forEach(t),Tio=i(Ut),be=n(Ut,"UL",{});var ve=s(be);uh=n(ve,"LI",{});var w3e=s(uh);Xte=n(w3e,"STRONG",{});var OXr=s(Xte);Mio=r(OXr,"clip"),OXr.forEach(t),Eio=r(w3e," \u2014 "),WB=n(w3e,"A",{href:!0});var VXr=s(WB);Cio=r(VXr,"CLIPProcessor"),VXr.forEach(t),wio=r(w3e," (CLIP model)"),w3e.forEach(t),Aio=i(ve),_h=n(ve,"LI",{});var A3e=s(_h);zte=n(A3e,"STRONG",{});var XXr=s(zte);yio=r(XXr,"flava"),XXr.forEach(t),Lio=r(A3e," \u2014 "),Qte=n(A3e,"CODE",{});var zXr=s(Qte);xio=r(zXr,"FLAVAProcessor"),zXr.forEach(t),$io=r(A3e," (Flava model)"),A3e.forEach(t),kio=i(ve),bh=n(ve,"LI",{});var y3e=s(bh);Wte=n(y3e,"STRONG",{});var QXr=s(Wte);Sio=r(QXr,"layoutlmv2"),QXr.forEach(t),Rio=r(y3e," \u2014 "),HB=n(y3e,"A",{href:!0});var WXr=s(HB);Bio=r(WXr,"LayoutLMv2Processor"),WXr.forEach(t),Pio=r(y3e," (LayoutLMv2 model)"),y3e.forEach(t),Iio=i(ve),vh=n(ve,"LI",{});var L3e=s(vh);Hte=n(L3e,"STRONG",{});var HXr=s(Hte);qio=r(HXr,"layoutxlm"),HXr.forEach(t),Nio=r(L3e," \u2014 "),UB=n(L3e,"A",{href:!0});var UXr=s(UB);jio=r(UXr,"LayoutXLMProcessor"),UXr.forEach(t),Dio=r(L3e," (LayoutXLM model)"),L3e.forEach(t),Gio=i(ve),Fh=n(ve,"LI",{});var x3e=s(Fh);Ute=n(x3e,"STRONG",{});var JXr=s(Ute);Oio=r(JXr,"sew"),JXr.forEach(t),Vio=r(x3e," \u2014 "),JB=n(x3e,"A",{href:!0});var YXr=s(JB);Xio=r(YXr,"Wav2Vec2Processor"),YXr.forEach(t),zio=r(x3e," (SEW model)"),x3e.forEach(t),Qio=i(ve),Th=n(ve,"LI",{});var $3e=s(Th);Jte=n($3e,"STRONG",{});var KXr=s(Jte);Wio=r(KXr,"sew-d"),KXr.forEach(t),Hio=r($3e," \u2014 "),YB=n($3e,"A",{href:!0});var ZXr=s(YB);Uio=r(ZXr,"Wav2Vec2Processor"),ZXr.forEach(t),Jio=r($3e," (SEW-D model)"),$3e.forEach(t),Yio=i(ve),Mh=n(ve,"LI",{});var k3e=s(Mh);Yte=n(k3e,"STRONG",{});var ezr=s(Yte);Kio=r(ezr,"speech_to_text"),ezr.forEach(t),Zio=r(k3e," \u2014 "),KB=n(k3e,"A",{href:!0});var ozr=s(KB);edo=r(ozr,"Speech2TextProcessor"),ozr.forEach(t),odo=r(k3e," (Speech2Text model)"),k3e.forEach(t),rdo=i(ve),Eh=n(ve,"LI",{});var S3e=s(Eh);Kte=n(S3e,"STRONG",{});var rzr=s(Kte);tdo=r(rzr,"speech_to_text_2"),rzr.forEach(t),ado=r(S3e," \u2014 "),ZB=n(S3e,"A",{href:!0});var tzr=s(ZB);ndo=r(tzr,"Speech2Text2Processor"),tzr.forEach(t),sdo=r(S3e," (Speech2Text2 model)"),S3e.forEach(t),ldo=i(ve),Ch=n(ve,"LI",{});var R3e=s(Ch);Zte=n(R3e,"STRONG",{});var azr=s(Zte);ido=r(azr,"trocr"),azr.forEach(t),ddo=r(R3e," \u2014 "),eP=n(R3e,"A",{href:!0});var nzr=s(eP);cdo=r(nzr,"TrOCRProcessor"),nzr.forEach(t),fdo=r(R3e," (TrOCR model)"),R3e.forEach(t),mdo=i(ve),wh=n(ve,"LI",{});var B3e=s(wh);eae=n(B3e,"STRONG",{});var szr=s(eae);gdo=r(szr,"unispeech"),szr.forEach(t),hdo=r(B3e," \u2014 "),oP=n(B3e,"A",{href:!0});var lzr=s(oP);pdo=r(lzr,"Wav2Vec2Processor"),lzr.forEach(t),udo=r(B3e," (UniSpeech model)"),B3e.forEach(t),_do=i(ve),Ah=n(ve,"LI",{});var P3e=s(Ah);oae=n(P3e,"STRONG",{});var izr=s(oae);bdo=r(izr,"unispeech-sat"),izr.forEach(t),vdo=r(P3e," \u2014 "),rP=n(P3e,"A",{href:!0});var dzr=s(rP);Fdo=r(dzr,"Wav2Vec2Processor"),dzr.forEach(t),Tdo=r(P3e," (UniSpeechSat model)"),P3e.forEach(t),Mdo=i(ve),yh=n(ve,"LI",{});var I3e=s(yh);rae=n(I3e,"STRONG",{});var czr=s(rae);Edo=r(czr,"vilt"),czr.forEach(t),Cdo=r(I3e," \u2014 "),tP=n(I3e,"A",{href:!0});var fzr=s(tP);wdo=r(fzr,"ViltProcessor"),fzr.forEach(t),Ado=r(I3e," (ViLT model)"),I3e.forEach(t),ydo=i(ve),Lh=n(ve,"LI",{});var q3e=s(Lh);tae=n(q3e,"STRONG",{});var mzr=s(tae);Ldo=r(mzr,"vision-text-dual-encoder"),mzr.forEach(t),xdo=r(q3e," \u2014 "),aP=n(q3e,"A",{href:!0});var gzr=s(aP);$do=r(gzr,"VisionTextDualEncoderProcessor"),gzr.forEach(t),kdo=r(q3e," (VisionTextDualEncoder model)"),q3e.forEach(t),Sdo=i(ve),xh=n(ve,"LI",{});var N3e=s(xh);aae=n(N3e,"STRONG",{});var hzr=s(aae);Rdo=r(hzr,"wav2vec2"),hzr.forEach(t),Bdo=r(N3e," \u2014 "),nP=n(N3e,"A",{href:!0});var pzr=s(nP);Pdo=r(pzr,"Wav2Vec2Processor"),pzr.forEach(t),Ido=r(N3e," (Wav2Vec2 model)"),N3e.forEach(t),qdo=i(ve),$h=n(ve,"LI",{});var j3e=s($h);nae=n(j3e,"STRONG",{});var uzr=s(nae);Ndo=r(uzr,"wavlm"),uzr.forEach(t),jdo=r(j3e," \u2014 "),sP=n(j3e,"A",{href:!0});var _zr=s(sP);Ddo=r(_zr,"Wav2Vec2Processor"),_zr.forEach(t),Gdo=r(j3e," (WavLM model)"),j3e.forEach(t),ve.forEach(t),Odo=i(Ut),T(kh.$$.fragment,Ut),Vdo=i(Ut),T(Sh.$$.fragment,Ut),Ut.forEach(t),Xdo=i(Bs),Rh=n(Bs,"DIV",{class:!0});var HIe=s(Rh);T(ey.$$.fragment,HIe),zdo=i(HIe),sae=n(HIe,"P",{});var bzr=s(sae);Qdo=r(bzr,"Register a new processor for this class."),bzr.forEach(t),HIe.forEach(t),Bs.forEach(t),WBe=i(f),pi=n(f,"H2",{class:!0});var UIe=s(pi);Bh=n(UIe,"A",{id:!0,class:!0,href:!0});var vzr=s(Bh);lae=n(vzr,"SPAN",{});var Fzr=s(lae);T(oy.$$.fragment,Fzr),Fzr.forEach(t),vzr.forEach(t),Wdo=i(UIe),iae=n(UIe,"SPAN",{});var Tzr=s(iae);Hdo=r(Tzr,"AutoModel"),Tzr.forEach(t),UIe.forEach(t),HBe=i(f),Lo=n(f,"DIV",{class:!0});var Ps=s(Lo);T(ry.$$.fragment,Ps),Udo=i(Ps),ui=n(Ps,"P",{});var EY=s(ui);Jdo=r(EY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lP=n(EY,"A",{href:!0});var Mzr=s(lP);Ydo=r(Mzr,"from_pretrained()"),Mzr.forEach(t),Kdo=r(EY," class method or the "),iP=n(EY,"A",{href:!0});var Ezr=s(iP);Zdo=r(Ezr,"from_config()"),Ezr.forEach(t),eco=r(EY,` class
method.`),EY.forEach(t),oco=i(Ps),ty=n(Ps,"P",{});var JIe=s(ty);rco=r(JIe,"This class cannot be instantiated directly using "),dae=n(JIe,"CODE",{});var Czr=s(dae);tco=r(Czr,"__init__()"),Czr.forEach(t),aco=r(JIe," (throws an error)."),JIe.forEach(t),nco=i(Ps),Zr=n(Ps,"DIV",{class:!0});var Bw=s(Zr);T(ay.$$.fragment,Bw),sco=i(Bw),cae=n(Bw,"P",{});var wzr=s(cae);lco=r(wzr,"Instantiates one of the base model classes of the library from a configuration."),wzr.forEach(t),ico=i(Bw),_i=n(Bw,"P",{});var CY=s(_i);dco=r(CY,`Note:
Loading a model from its configuration file does `),fae=n(CY,"STRONG",{});var Azr=s(fae);cco=r(Azr,"not"),Azr.forEach(t),fco=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dP=n(CY,"A",{href:!0});var yzr=s(dP);mco=r(yzr,"from_pretrained()"),yzr.forEach(t),gco=r(CY," to load the model weights."),CY.forEach(t),hco=i(Bw),T(Ph.$$.fragment,Bw),Bw.forEach(t),pco=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(ny.$$.fragment,Jt),uco=i(Jt),mae=n(Jt,"P",{});var Lzr=s(mae);_co=r(Lzr,"Instantiate one of the base model classes of the library from a pretrained model."),Lzr.forEach(t),bco=i(Jt),Ea=n(Jt,"P",{});var Pw=s(Ea);vco=r(Pw,"The model class to instantiate is selected based on the "),gae=n(Pw,"CODE",{});var xzr=s(gae);Fco=r(xzr,"model_type"),xzr.forEach(t),Tco=r(Pw,` property of the config object (either
passed as an argument or loaded from `),hae=n(Pw,"CODE",{});var $zr=s(hae);Mco=r($zr,"pretrained_model_name_or_path"),$zr.forEach(t),Eco=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=n(Pw,"CODE",{});var kzr=s(pae);Cco=r(kzr,"pretrained_model_name_or_path"),kzr.forEach(t),wco=r(Pw,":"),Pw.forEach(t),Aco=i(Jt),x=n(Jt,"UL",{});var $=s(x);Ih=n($,"LI",{});var D3e=s(Ih);uae=n(D3e,"STRONG",{});var Szr=s(uae);yco=r(Szr,"albert"),Szr.forEach(t),Lco=r(D3e," \u2014 "),cP=n(D3e,"A",{href:!0});var Rzr=s(cP);xco=r(Rzr,"AlbertModel"),Rzr.forEach(t),$co=r(D3e," (ALBERT model)"),D3e.forEach(t),kco=i($),qh=n($,"LI",{});var G3e=s(qh);_ae=n(G3e,"STRONG",{});var Bzr=s(_ae);Sco=r(Bzr,"bart"),Bzr.forEach(t),Rco=r(G3e," \u2014 "),fP=n(G3e,"A",{href:!0});var Pzr=s(fP);Bco=r(Pzr,"BartModel"),Pzr.forEach(t),Pco=r(G3e," (BART model)"),G3e.forEach(t),Ico=i($),Nh=n($,"LI",{});var O3e=s(Nh);bae=n(O3e,"STRONG",{});var Izr=s(bae);qco=r(Izr,"beit"),Izr.forEach(t),Nco=r(O3e," \u2014 "),mP=n(O3e,"A",{href:!0});var qzr=s(mP);jco=r(qzr,"BeitModel"),qzr.forEach(t),Dco=r(O3e," (BEiT model)"),O3e.forEach(t),Gco=i($),jh=n($,"LI",{});var V3e=s(jh);vae=n(V3e,"STRONG",{});var Nzr=s(vae);Oco=r(Nzr,"bert"),Nzr.forEach(t),Vco=r(V3e," \u2014 "),gP=n(V3e,"A",{href:!0});var jzr=s(gP);Xco=r(jzr,"BertModel"),jzr.forEach(t),zco=r(V3e," (BERT model)"),V3e.forEach(t),Qco=i($),Dh=n($,"LI",{});var X3e=s(Dh);Fae=n(X3e,"STRONG",{});var Dzr=s(Fae);Wco=r(Dzr,"bert-generation"),Dzr.forEach(t),Hco=r(X3e," \u2014 "),hP=n(X3e,"A",{href:!0});var Gzr=s(hP);Uco=r(Gzr,"BertGenerationEncoder"),Gzr.forEach(t),Jco=r(X3e," (Bert Generation model)"),X3e.forEach(t),Yco=i($),Gh=n($,"LI",{});var z3e=s(Gh);Tae=n(z3e,"STRONG",{});var Ozr=s(Tae);Kco=r(Ozr,"big_bird"),Ozr.forEach(t),Zco=r(z3e," \u2014 "),pP=n(z3e,"A",{href:!0});var Vzr=s(pP);efo=r(Vzr,"BigBirdModel"),Vzr.forEach(t),ofo=r(z3e," (BigBird model)"),z3e.forEach(t),rfo=i($),Oh=n($,"LI",{});var Q3e=s(Oh);Mae=n(Q3e,"STRONG",{});var Xzr=s(Mae);tfo=r(Xzr,"bigbird_pegasus"),Xzr.forEach(t),afo=r(Q3e," \u2014 "),uP=n(Q3e,"A",{href:!0});var zzr=s(uP);nfo=r(zzr,"BigBirdPegasusModel"),zzr.forEach(t),sfo=r(Q3e," (BigBirdPegasus model)"),Q3e.forEach(t),lfo=i($),Vh=n($,"LI",{});var W3e=s(Vh);Eae=n(W3e,"STRONG",{});var Qzr=s(Eae);ifo=r(Qzr,"blenderbot"),Qzr.forEach(t),dfo=r(W3e," \u2014 "),_P=n(W3e,"A",{href:!0});var Wzr=s(_P);cfo=r(Wzr,"BlenderbotModel"),Wzr.forEach(t),ffo=r(W3e," (Blenderbot model)"),W3e.forEach(t),mfo=i($),Xh=n($,"LI",{});var H3e=s(Xh);Cae=n(H3e,"STRONG",{});var Hzr=s(Cae);gfo=r(Hzr,"blenderbot-small"),Hzr.forEach(t),hfo=r(H3e," \u2014 "),bP=n(H3e,"A",{href:!0});var Uzr=s(bP);pfo=r(Uzr,"BlenderbotSmallModel"),Uzr.forEach(t),ufo=r(H3e," (BlenderbotSmall model)"),H3e.forEach(t),_fo=i($),zh=n($,"LI",{});var U3e=s(zh);wae=n(U3e,"STRONG",{});var Jzr=s(wae);bfo=r(Jzr,"camembert"),Jzr.forEach(t),vfo=r(U3e," \u2014 "),vP=n(U3e,"A",{href:!0});var Yzr=s(vP);Ffo=r(Yzr,"CamembertModel"),Yzr.forEach(t),Tfo=r(U3e," (CamemBERT model)"),U3e.forEach(t),Mfo=i($),Qh=n($,"LI",{});var J3e=s(Qh);Aae=n(J3e,"STRONG",{});var Kzr=s(Aae);Efo=r(Kzr,"canine"),Kzr.forEach(t),Cfo=r(J3e," \u2014 "),FP=n(J3e,"A",{href:!0});var Zzr=s(FP);wfo=r(Zzr,"CanineModel"),Zzr.forEach(t),Afo=r(J3e," (Canine model)"),J3e.forEach(t),yfo=i($),Wh=n($,"LI",{});var Y3e=s(Wh);yae=n(Y3e,"STRONG",{});var eQr=s(yae);Lfo=r(eQr,"clip"),eQr.forEach(t),xfo=r(Y3e," \u2014 "),TP=n(Y3e,"A",{href:!0});var oQr=s(TP);$fo=r(oQr,"CLIPModel"),oQr.forEach(t),kfo=r(Y3e," (CLIP model)"),Y3e.forEach(t),Sfo=i($),Hh=n($,"LI",{});var K3e=s(Hh);Lae=n(K3e,"STRONG",{});var rQr=s(Lae);Rfo=r(rQr,"convbert"),rQr.forEach(t),Bfo=r(K3e," \u2014 "),MP=n(K3e,"A",{href:!0});var tQr=s(MP);Pfo=r(tQr,"ConvBertModel"),tQr.forEach(t),Ifo=r(K3e," (ConvBERT model)"),K3e.forEach(t),qfo=i($),Uh=n($,"LI",{});var Z3e=s(Uh);xae=n(Z3e,"STRONG",{});var aQr=s(xae);Nfo=r(aQr,"convnext"),aQr.forEach(t),jfo=r(Z3e," \u2014 "),EP=n(Z3e,"A",{href:!0});var nQr=s(EP);Dfo=r(nQr,"ConvNextModel"),nQr.forEach(t),Gfo=r(Z3e," (ConvNext model)"),Z3e.forEach(t),Ofo=i($),Jh=n($,"LI",{});var ewe=s(Jh);$ae=n(ewe,"STRONG",{});var sQr=s($ae);Vfo=r(sQr,"ctrl"),sQr.forEach(t),Xfo=r(ewe," \u2014 "),CP=n(ewe,"A",{href:!0});var lQr=s(CP);zfo=r(lQr,"CTRLModel"),lQr.forEach(t),Qfo=r(ewe," (CTRL model)"),ewe.forEach(t),Wfo=i($),Yh=n($,"LI",{});var owe=s(Yh);kae=n(owe,"STRONG",{});var iQr=s(kae);Hfo=r(iQr,"data2vec-audio"),iQr.forEach(t),Ufo=r(owe," \u2014 "),wP=n(owe,"A",{href:!0});var dQr=s(wP);Jfo=r(dQr,"Data2VecAudioModel"),dQr.forEach(t),Yfo=r(owe," (Data2VecAudio model)"),owe.forEach(t),Kfo=i($),Kh=n($,"LI",{});var rwe=s(Kh);Sae=n(rwe,"STRONG",{});var cQr=s(Sae);Zfo=r(cQr,"data2vec-text"),cQr.forEach(t),emo=r(rwe," \u2014 "),AP=n(rwe,"A",{href:!0});var fQr=s(AP);omo=r(fQr,"Data2VecTextModel"),fQr.forEach(t),rmo=r(rwe," (Data2VecText model)"),rwe.forEach(t),tmo=i($),Zh=n($,"LI",{});var twe=s(Zh);Rae=n(twe,"STRONG",{});var mQr=s(Rae);amo=r(mQr,"data2vec-vision"),mQr.forEach(t),nmo=r(twe," \u2014 "),yP=n(twe,"A",{href:!0});var gQr=s(yP);smo=r(gQr,"Data2VecVisionModel"),gQr.forEach(t),lmo=r(twe," (Data2VecVision model)"),twe.forEach(t),imo=i($),ep=n($,"LI",{});var awe=s(ep);Bae=n(awe,"STRONG",{});var hQr=s(Bae);dmo=r(hQr,"deberta"),hQr.forEach(t),cmo=r(awe," \u2014 "),LP=n(awe,"A",{href:!0});var pQr=s(LP);fmo=r(pQr,"DebertaModel"),pQr.forEach(t),mmo=r(awe," (DeBERTa model)"),awe.forEach(t),gmo=i($),op=n($,"LI",{});var nwe=s(op);Pae=n(nwe,"STRONG",{});var uQr=s(Pae);hmo=r(uQr,"deberta-v2"),uQr.forEach(t),pmo=r(nwe," \u2014 "),xP=n(nwe,"A",{href:!0});var _Qr=s(xP);umo=r(_Qr,"DebertaV2Model"),_Qr.forEach(t),_mo=r(nwe," (DeBERTa-v2 model)"),nwe.forEach(t),bmo=i($),rp=n($,"LI",{});var swe=s(rp);Iae=n(swe,"STRONG",{});var bQr=s(Iae);vmo=r(bQr,"decision_transformer"),bQr.forEach(t),Fmo=r(swe," \u2014 "),$P=n(swe,"A",{href:!0});var vQr=s($P);Tmo=r(vQr,"DecisionTransformerModel"),vQr.forEach(t),Mmo=r(swe," (Decision Transformer model)"),swe.forEach(t),Emo=i($),tp=n($,"LI",{});var lwe=s(tp);qae=n(lwe,"STRONG",{});var FQr=s(qae);Cmo=r(FQr,"deit"),FQr.forEach(t),wmo=r(lwe," \u2014 "),kP=n(lwe,"A",{href:!0});var TQr=s(kP);Amo=r(TQr,"DeiTModel"),TQr.forEach(t),ymo=r(lwe," (DeiT model)"),lwe.forEach(t),Lmo=i($),ap=n($,"LI",{});var iwe=s(ap);Nae=n(iwe,"STRONG",{});var MQr=s(Nae);xmo=r(MQr,"detr"),MQr.forEach(t),$mo=r(iwe," \u2014 "),SP=n(iwe,"A",{href:!0});var EQr=s(SP);kmo=r(EQr,"DetrModel"),EQr.forEach(t),Smo=r(iwe," (DETR model)"),iwe.forEach(t),Rmo=i($),np=n($,"LI",{});var dwe=s(np);jae=n(dwe,"STRONG",{});var CQr=s(jae);Bmo=r(CQr,"distilbert"),CQr.forEach(t),Pmo=r(dwe," \u2014 "),RP=n(dwe,"A",{href:!0});var wQr=s(RP);Imo=r(wQr,"DistilBertModel"),wQr.forEach(t),qmo=r(dwe," (DistilBERT model)"),dwe.forEach(t),Nmo=i($),sp=n($,"LI",{});var cwe=s(sp);Dae=n(cwe,"STRONG",{});var AQr=s(Dae);jmo=r(AQr,"dpr"),AQr.forEach(t),Dmo=r(cwe," \u2014 "),BP=n(cwe,"A",{href:!0});var yQr=s(BP);Gmo=r(yQr,"DPRQuestionEncoder"),yQr.forEach(t),Omo=r(cwe," (DPR model)"),cwe.forEach(t),Vmo=i($),lp=n($,"LI",{});var fwe=s(lp);Gae=n(fwe,"STRONG",{});var LQr=s(Gae);Xmo=r(LQr,"dpt"),LQr.forEach(t),zmo=r(fwe," \u2014 "),PP=n(fwe,"A",{href:!0});var xQr=s(PP);Qmo=r(xQr,"DPTModel"),xQr.forEach(t),Wmo=r(fwe," (DPT model)"),fwe.forEach(t),Hmo=i($),ip=n($,"LI",{});var mwe=s(ip);Oae=n(mwe,"STRONG",{});var $Qr=s(Oae);Umo=r($Qr,"electra"),$Qr.forEach(t),Jmo=r(mwe," \u2014 "),IP=n(mwe,"A",{href:!0});var kQr=s(IP);Ymo=r(kQr,"ElectraModel"),kQr.forEach(t),Kmo=r(mwe," (ELECTRA model)"),mwe.forEach(t),Zmo=i($),dp=n($,"LI",{});var gwe=s(dp);Vae=n(gwe,"STRONG",{});var SQr=s(Vae);ego=r(SQr,"flaubert"),SQr.forEach(t),ogo=r(gwe," \u2014 "),qP=n(gwe,"A",{href:!0});var RQr=s(qP);rgo=r(RQr,"FlaubertModel"),RQr.forEach(t),tgo=r(gwe," (FlauBERT model)"),gwe.forEach(t),ago=i($),cp=n($,"LI",{});var hwe=s(cp);Xae=n(hwe,"STRONG",{});var BQr=s(Xae);ngo=r(BQr,"flava"),BQr.forEach(t),sgo=r(hwe," \u2014 "),NP=n(hwe,"A",{href:!0});var PQr=s(NP);lgo=r(PQr,"FlavaModel"),PQr.forEach(t),igo=r(hwe," (Flava model)"),hwe.forEach(t),dgo=i($),fp=n($,"LI",{});var pwe=s(fp);zae=n(pwe,"STRONG",{});var IQr=s(zae);cgo=r(IQr,"fnet"),IQr.forEach(t),fgo=r(pwe," \u2014 "),jP=n(pwe,"A",{href:!0});var qQr=s(jP);mgo=r(qQr,"FNetModel"),qQr.forEach(t),ggo=r(pwe," (FNet model)"),pwe.forEach(t),hgo=i($),mp=n($,"LI",{});var uwe=s(mp);Qae=n(uwe,"STRONG",{});var NQr=s(Qae);pgo=r(NQr,"fsmt"),NQr.forEach(t),ugo=r(uwe," \u2014 "),DP=n(uwe,"A",{href:!0});var jQr=s(DP);_go=r(jQr,"FSMTModel"),jQr.forEach(t),bgo=r(uwe," (FairSeq Machine-Translation model)"),uwe.forEach(t),vgo=i($),Ls=n($,"LI",{});var q9=s(Ls);Wae=n(q9,"STRONG",{});var DQr=s(Wae);Fgo=r(DQr,"funnel"),DQr.forEach(t),Tgo=r(q9," \u2014 "),GP=n(q9,"A",{href:!0});var GQr=s(GP);Mgo=r(GQr,"FunnelModel"),GQr.forEach(t),Ego=r(q9," or "),OP=n(q9,"A",{href:!0});var OQr=s(OP);Cgo=r(OQr,"FunnelBaseModel"),OQr.forEach(t),wgo=r(q9," (Funnel Transformer model)"),q9.forEach(t),Ago=i($),gp=n($,"LI",{});var _we=s(gp);Hae=n(_we,"STRONG",{});var VQr=s(Hae);ygo=r(VQr,"glpn"),VQr.forEach(t),Lgo=r(_we," \u2014 "),VP=n(_we,"A",{href:!0});var XQr=s(VP);xgo=r(XQr,"GLPNModel"),XQr.forEach(t),$go=r(_we," (GLPN model)"),_we.forEach(t),kgo=i($),hp=n($,"LI",{});var bwe=s(hp);Uae=n(bwe,"STRONG",{});var zQr=s(Uae);Sgo=r(zQr,"gpt2"),zQr.forEach(t),Rgo=r(bwe," \u2014 "),XP=n(bwe,"A",{href:!0});var QQr=s(XP);Bgo=r(QQr,"GPT2Model"),QQr.forEach(t),Pgo=r(bwe," (OpenAI GPT-2 model)"),bwe.forEach(t),Igo=i($),pp=n($,"LI",{});var vwe=s(pp);Jae=n(vwe,"STRONG",{});var WQr=s(Jae);qgo=r(WQr,"gpt_neo"),WQr.forEach(t),Ngo=r(vwe," \u2014 "),zP=n(vwe,"A",{href:!0});var HQr=s(zP);jgo=r(HQr,"GPTNeoModel"),HQr.forEach(t),Dgo=r(vwe," (GPT Neo model)"),vwe.forEach(t),Ggo=i($),up=n($,"LI",{});var Fwe=s(up);Yae=n(Fwe,"STRONG",{});var UQr=s(Yae);Ogo=r(UQr,"gptj"),UQr.forEach(t),Vgo=r(Fwe," \u2014 "),QP=n(Fwe,"A",{href:!0});var JQr=s(QP);Xgo=r(JQr,"GPTJModel"),JQr.forEach(t),zgo=r(Fwe," (GPT-J model)"),Fwe.forEach(t),Qgo=i($),_p=n($,"LI",{});var Twe=s(_p);Kae=n(Twe,"STRONG",{});var YQr=s(Kae);Wgo=r(YQr,"hubert"),YQr.forEach(t),Hgo=r(Twe," \u2014 "),WP=n(Twe,"A",{href:!0});var KQr=s(WP);Ugo=r(KQr,"HubertModel"),KQr.forEach(t),Jgo=r(Twe," (Hubert model)"),Twe.forEach(t),Ygo=i($),bp=n($,"LI",{});var Mwe=s(bp);Zae=n(Mwe,"STRONG",{});var ZQr=s(Zae);Kgo=r(ZQr,"ibert"),ZQr.forEach(t),Zgo=r(Mwe," \u2014 "),HP=n(Mwe,"A",{href:!0});var eWr=s(HP);eho=r(eWr,"IBertModel"),eWr.forEach(t),oho=r(Mwe," (I-BERT model)"),Mwe.forEach(t),rho=i($),vp=n($,"LI",{});var Ewe=s(vp);ene=n(Ewe,"STRONG",{});var oWr=s(ene);tho=r(oWr,"imagegpt"),oWr.forEach(t),aho=r(Ewe," \u2014 "),UP=n(Ewe,"A",{href:!0});var rWr=s(UP);nho=r(rWr,"ImageGPTModel"),rWr.forEach(t),sho=r(Ewe," (ImageGPT model)"),Ewe.forEach(t),lho=i($),Fp=n($,"LI",{});var Cwe=s(Fp);one=n(Cwe,"STRONG",{});var tWr=s(one);iho=r(tWr,"layoutlm"),tWr.forEach(t),dho=r(Cwe," \u2014 "),JP=n(Cwe,"A",{href:!0});var aWr=s(JP);cho=r(aWr,"LayoutLMModel"),aWr.forEach(t),fho=r(Cwe," (LayoutLM model)"),Cwe.forEach(t),mho=i($),Tp=n($,"LI",{});var wwe=s(Tp);rne=n(wwe,"STRONG",{});var nWr=s(rne);gho=r(nWr,"layoutlmv2"),nWr.forEach(t),hho=r(wwe," \u2014 "),YP=n(wwe,"A",{href:!0});var sWr=s(YP);pho=r(sWr,"LayoutLMv2Model"),sWr.forEach(t),uho=r(wwe," (LayoutLMv2 model)"),wwe.forEach(t),_ho=i($),Mp=n($,"LI",{});var Awe=s(Mp);tne=n(Awe,"STRONG",{});var lWr=s(tne);bho=r(lWr,"led"),lWr.forEach(t),vho=r(Awe," \u2014 "),KP=n(Awe,"A",{href:!0});var iWr=s(KP);Fho=r(iWr,"LEDModel"),iWr.forEach(t),Tho=r(Awe," (LED model)"),Awe.forEach(t),Mho=i($),Ep=n($,"LI",{});var ywe=s(Ep);ane=n(ywe,"STRONG",{});var dWr=s(ane);Eho=r(dWr,"longformer"),dWr.forEach(t),Cho=r(ywe," \u2014 "),ZP=n(ywe,"A",{href:!0});var cWr=s(ZP);who=r(cWr,"LongformerModel"),cWr.forEach(t),Aho=r(ywe," (Longformer model)"),ywe.forEach(t),yho=i($),Cp=n($,"LI",{});var Lwe=s(Cp);nne=n(Lwe,"STRONG",{});var fWr=s(nne);Lho=r(fWr,"luke"),fWr.forEach(t),xho=r(Lwe," \u2014 "),eI=n(Lwe,"A",{href:!0});var mWr=s(eI);$ho=r(mWr,"LukeModel"),mWr.forEach(t),kho=r(Lwe," (LUKE model)"),Lwe.forEach(t),Sho=i($),wp=n($,"LI",{});var xwe=s(wp);sne=n(xwe,"STRONG",{});var gWr=s(sne);Rho=r(gWr,"lxmert"),gWr.forEach(t),Bho=r(xwe," \u2014 "),oI=n(xwe,"A",{href:!0});var hWr=s(oI);Pho=r(hWr,"LxmertModel"),hWr.forEach(t),Iho=r(xwe," (LXMERT model)"),xwe.forEach(t),qho=i($),Ap=n($,"LI",{});var $we=s(Ap);lne=n($we,"STRONG",{});var pWr=s(lne);Nho=r(pWr,"m2m_100"),pWr.forEach(t),jho=r($we," \u2014 "),rI=n($we,"A",{href:!0});var uWr=s(rI);Dho=r(uWr,"M2M100Model"),uWr.forEach(t),Gho=r($we," (M2M100 model)"),$we.forEach(t),Oho=i($),yp=n($,"LI",{});var kwe=s(yp);ine=n(kwe,"STRONG",{});var _Wr=s(ine);Vho=r(_Wr,"marian"),_Wr.forEach(t),Xho=r(kwe," \u2014 "),tI=n(kwe,"A",{href:!0});var bWr=s(tI);zho=r(bWr,"MarianModel"),bWr.forEach(t),Qho=r(kwe," (Marian model)"),kwe.forEach(t),Who=i($),Lp=n($,"LI",{});var Swe=s(Lp);dne=n(Swe,"STRONG",{});var vWr=s(dne);Hho=r(vWr,"maskformer"),vWr.forEach(t),Uho=r(Swe," \u2014 "),aI=n(Swe,"A",{href:!0});var FWr=s(aI);Jho=r(FWr,"MaskFormerModel"),FWr.forEach(t),Yho=r(Swe," (MaskFormer model)"),Swe.forEach(t),Kho=i($),xp=n($,"LI",{});var Rwe=s(xp);cne=n(Rwe,"STRONG",{});var TWr=s(cne);Zho=r(TWr,"mbart"),TWr.forEach(t),epo=r(Rwe," \u2014 "),nI=n(Rwe,"A",{href:!0});var MWr=s(nI);opo=r(MWr,"MBartModel"),MWr.forEach(t),rpo=r(Rwe," (mBART model)"),Rwe.forEach(t),tpo=i($),$p=n($,"LI",{});var Bwe=s($p);fne=n(Bwe,"STRONG",{});var EWr=s(fne);apo=r(EWr,"megatron-bert"),EWr.forEach(t),npo=r(Bwe," \u2014 "),sI=n(Bwe,"A",{href:!0});var CWr=s(sI);spo=r(CWr,"MegatronBertModel"),CWr.forEach(t),lpo=r(Bwe," (MegatronBert model)"),Bwe.forEach(t),ipo=i($),kp=n($,"LI",{});var Pwe=s(kp);mne=n(Pwe,"STRONG",{});var wWr=s(mne);dpo=r(wWr,"mobilebert"),wWr.forEach(t),cpo=r(Pwe," \u2014 "),lI=n(Pwe,"A",{href:!0});var AWr=s(lI);fpo=r(AWr,"MobileBertModel"),AWr.forEach(t),mpo=r(Pwe," (MobileBERT model)"),Pwe.forEach(t),gpo=i($),Sp=n($,"LI",{});var Iwe=s(Sp);gne=n(Iwe,"STRONG",{});var yWr=s(gne);hpo=r(yWr,"mpnet"),yWr.forEach(t),ppo=r(Iwe," \u2014 "),iI=n(Iwe,"A",{href:!0});var LWr=s(iI);upo=r(LWr,"MPNetModel"),LWr.forEach(t),_po=r(Iwe," (MPNet model)"),Iwe.forEach(t),bpo=i($),Rp=n($,"LI",{});var qwe=s(Rp);hne=n(qwe,"STRONG",{});var xWr=s(hne);vpo=r(xWr,"mt5"),xWr.forEach(t),Fpo=r(qwe," \u2014 "),dI=n(qwe,"A",{href:!0});var $Wr=s(dI);Tpo=r($Wr,"MT5Model"),$Wr.forEach(t),Mpo=r(qwe," (mT5 model)"),qwe.forEach(t),Epo=i($),Bp=n($,"LI",{});var Nwe=s(Bp);pne=n(Nwe,"STRONG",{});var kWr=s(pne);Cpo=r(kWr,"nystromformer"),kWr.forEach(t),wpo=r(Nwe," \u2014 "),cI=n(Nwe,"A",{href:!0});var SWr=s(cI);Apo=r(SWr,"NystromformerModel"),SWr.forEach(t),ypo=r(Nwe," (Nystromformer model)"),Nwe.forEach(t),Lpo=i($),Pp=n($,"LI",{});var jwe=s(Pp);une=n(jwe,"STRONG",{});var RWr=s(une);xpo=r(RWr,"openai-gpt"),RWr.forEach(t),$po=r(jwe," \u2014 "),fI=n(jwe,"A",{href:!0});var BWr=s(fI);kpo=r(BWr,"OpenAIGPTModel"),BWr.forEach(t),Spo=r(jwe," (OpenAI GPT model)"),jwe.forEach(t),Rpo=i($),Ip=n($,"LI",{});var Dwe=s(Ip);_ne=n(Dwe,"STRONG",{});var PWr=s(_ne);Bpo=r(PWr,"pegasus"),PWr.forEach(t),Ppo=r(Dwe," \u2014 "),mI=n(Dwe,"A",{href:!0});var IWr=s(mI);Ipo=r(IWr,"PegasusModel"),IWr.forEach(t),qpo=r(Dwe," (Pegasus model)"),Dwe.forEach(t),Npo=i($),qp=n($,"LI",{});var Gwe=s(qp);bne=n(Gwe,"STRONG",{});var qWr=s(bne);jpo=r(qWr,"perceiver"),qWr.forEach(t),Dpo=r(Gwe," \u2014 "),gI=n(Gwe,"A",{href:!0});var NWr=s(gI);Gpo=r(NWr,"PerceiverModel"),NWr.forEach(t),Opo=r(Gwe," (Perceiver model)"),Gwe.forEach(t),Vpo=i($),Np=n($,"LI",{});var Owe=s(Np);vne=n(Owe,"STRONG",{});var jWr=s(vne);Xpo=r(jWr,"plbart"),jWr.forEach(t),zpo=r(Owe," \u2014 "),hI=n(Owe,"A",{href:!0});var DWr=s(hI);Qpo=r(DWr,"PLBartModel"),DWr.forEach(t),Wpo=r(Owe," (PLBart model)"),Owe.forEach(t),Hpo=i($),jp=n($,"LI",{});var Vwe=s(jp);Fne=n(Vwe,"STRONG",{});var GWr=s(Fne);Upo=r(GWr,"poolformer"),GWr.forEach(t),Jpo=r(Vwe," \u2014 "),pI=n(Vwe,"A",{href:!0});var OWr=s(pI);Ypo=r(OWr,"PoolFormerModel"),OWr.forEach(t),Kpo=r(Vwe," (PoolFormer model)"),Vwe.forEach(t),Zpo=i($),Dp=n($,"LI",{});var Xwe=s(Dp);Tne=n(Xwe,"STRONG",{});var VWr=s(Tne);euo=r(VWr,"prophetnet"),VWr.forEach(t),ouo=r(Xwe," \u2014 "),uI=n(Xwe,"A",{href:!0});var XWr=s(uI);ruo=r(XWr,"ProphetNetModel"),XWr.forEach(t),tuo=r(Xwe," (ProphetNet model)"),Xwe.forEach(t),auo=i($),Gp=n($,"LI",{});var zwe=s(Gp);Mne=n(zwe,"STRONG",{});var zWr=s(Mne);nuo=r(zWr,"qdqbert"),zWr.forEach(t),suo=r(zwe," \u2014 "),_I=n(zwe,"A",{href:!0});var QWr=s(_I);luo=r(QWr,"QDQBertModel"),QWr.forEach(t),iuo=r(zwe," (QDQBert model)"),zwe.forEach(t),duo=i($),Op=n($,"LI",{});var Qwe=s(Op);Ene=n(Qwe,"STRONG",{});var WWr=s(Ene);cuo=r(WWr,"reformer"),WWr.forEach(t),fuo=r(Qwe," \u2014 "),bI=n(Qwe,"A",{href:!0});var HWr=s(bI);muo=r(HWr,"ReformerModel"),HWr.forEach(t),guo=r(Qwe," (Reformer model)"),Qwe.forEach(t),huo=i($),Vp=n($,"LI",{});var Wwe=s(Vp);Cne=n(Wwe,"STRONG",{});var UWr=s(Cne);puo=r(UWr,"regnet"),UWr.forEach(t),uuo=r(Wwe," \u2014 "),vI=n(Wwe,"A",{href:!0});var JWr=s(vI);_uo=r(JWr,"RegNetModel"),JWr.forEach(t),buo=r(Wwe," (RegNet model)"),Wwe.forEach(t),vuo=i($),Xp=n($,"LI",{});var Hwe=s(Xp);wne=n(Hwe,"STRONG",{});var YWr=s(wne);Fuo=r(YWr,"rembert"),YWr.forEach(t),Tuo=r(Hwe," \u2014 "),FI=n(Hwe,"A",{href:!0});var KWr=s(FI);Muo=r(KWr,"RemBertModel"),KWr.forEach(t),Euo=r(Hwe," (RemBERT model)"),Hwe.forEach(t),Cuo=i($),zp=n($,"LI",{});var Uwe=s(zp);Ane=n(Uwe,"STRONG",{});var ZWr=s(Ane);wuo=r(ZWr,"resnet"),ZWr.forEach(t),Auo=r(Uwe," \u2014 "),TI=n(Uwe,"A",{href:!0});var eHr=s(TI);yuo=r(eHr,"ResNetModel"),eHr.forEach(t),Luo=r(Uwe," (ResNet model)"),Uwe.forEach(t),xuo=i($),Qp=n($,"LI",{});var Jwe=s(Qp);yne=n(Jwe,"STRONG",{});var oHr=s(yne);$uo=r(oHr,"retribert"),oHr.forEach(t),kuo=r(Jwe," \u2014 "),MI=n(Jwe,"A",{href:!0});var rHr=s(MI);Suo=r(rHr,"RetriBertModel"),rHr.forEach(t),Ruo=r(Jwe," (RetriBERT model)"),Jwe.forEach(t),Buo=i($),Wp=n($,"LI",{});var Ywe=s(Wp);Lne=n(Ywe,"STRONG",{});var tHr=s(Lne);Puo=r(tHr,"roberta"),tHr.forEach(t),Iuo=r(Ywe," \u2014 "),EI=n(Ywe,"A",{href:!0});var aHr=s(EI);quo=r(aHr,"RobertaModel"),aHr.forEach(t),Nuo=r(Ywe," (RoBERTa model)"),Ywe.forEach(t),juo=i($),Hp=n($,"LI",{});var Kwe=s(Hp);xne=n(Kwe,"STRONG",{});var nHr=s(xne);Duo=r(nHr,"roformer"),nHr.forEach(t),Guo=r(Kwe," \u2014 "),CI=n(Kwe,"A",{href:!0});var sHr=s(CI);Ouo=r(sHr,"RoFormerModel"),sHr.forEach(t),Vuo=r(Kwe," (RoFormer model)"),Kwe.forEach(t),Xuo=i($),Up=n($,"LI",{});var Zwe=s(Up);$ne=n(Zwe,"STRONG",{});var lHr=s($ne);zuo=r(lHr,"segformer"),lHr.forEach(t),Quo=r(Zwe," \u2014 "),wI=n(Zwe,"A",{href:!0});var iHr=s(wI);Wuo=r(iHr,"SegformerModel"),iHr.forEach(t),Huo=r(Zwe," (SegFormer model)"),Zwe.forEach(t),Uuo=i($),Jp=n($,"LI",{});var eAe=s(Jp);kne=n(eAe,"STRONG",{});var dHr=s(kne);Juo=r(dHr,"sew"),dHr.forEach(t),Yuo=r(eAe," \u2014 "),AI=n(eAe,"A",{href:!0});var cHr=s(AI);Kuo=r(cHr,"SEWModel"),cHr.forEach(t),Zuo=r(eAe," (SEW model)"),eAe.forEach(t),e_o=i($),Yp=n($,"LI",{});var oAe=s(Yp);Sne=n(oAe,"STRONG",{});var fHr=s(Sne);o_o=r(fHr,"sew-d"),fHr.forEach(t),r_o=r(oAe," \u2014 "),yI=n(oAe,"A",{href:!0});var mHr=s(yI);t_o=r(mHr,"SEWDModel"),mHr.forEach(t),a_o=r(oAe," (SEW-D model)"),oAe.forEach(t),n_o=i($),Kp=n($,"LI",{});var rAe=s(Kp);Rne=n(rAe,"STRONG",{});var gHr=s(Rne);s_o=r(gHr,"speech_to_text"),gHr.forEach(t),l_o=r(rAe," \u2014 "),LI=n(rAe,"A",{href:!0});var hHr=s(LI);i_o=r(hHr,"Speech2TextModel"),hHr.forEach(t),d_o=r(rAe," (Speech2Text model)"),rAe.forEach(t),c_o=i($),Zp=n($,"LI",{});var tAe=s(Zp);Bne=n(tAe,"STRONG",{});var pHr=s(Bne);f_o=r(pHr,"splinter"),pHr.forEach(t),m_o=r(tAe," \u2014 "),xI=n(tAe,"A",{href:!0});var uHr=s(xI);g_o=r(uHr,"SplinterModel"),uHr.forEach(t),h_o=r(tAe," (Splinter model)"),tAe.forEach(t),p_o=i($),eu=n($,"LI",{});var aAe=s(eu);Pne=n(aAe,"STRONG",{});var _Hr=s(Pne);u_o=r(_Hr,"squeezebert"),_Hr.forEach(t),__o=r(aAe," \u2014 "),$I=n(aAe,"A",{href:!0});var bHr=s($I);b_o=r(bHr,"SqueezeBertModel"),bHr.forEach(t),v_o=r(aAe," (SqueezeBERT model)"),aAe.forEach(t),F_o=i($),ou=n($,"LI",{});var nAe=s(ou);Ine=n(nAe,"STRONG",{});var vHr=s(Ine);T_o=r(vHr,"swin"),vHr.forEach(t),M_o=r(nAe," \u2014 "),kI=n(nAe,"A",{href:!0});var FHr=s(kI);E_o=r(FHr,"SwinModel"),FHr.forEach(t),C_o=r(nAe," (Swin model)"),nAe.forEach(t),w_o=i($),ru=n($,"LI",{});var sAe=s(ru);qne=n(sAe,"STRONG",{});var THr=s(qne);A_o=r(THr,"t5"),THr.forEach(t),y_o=r(sAe," \u2014 "),SI=n(sAe,"A",{href:!0});var MHr=s(SI);L_o=r(MHr,"T5Model"),MHr.forEach(t),x_o=r(sAe," (T5 model)"),sAe.forEach(t),$_o=i($),tu=n($,"LI",{});var lAe=s(tu);Nne=n(lAe,"STRONG",{});var EHr=s(Nne);k_o=r(EHr,"tapas"),EHr.forEach(t),S_o=r(lAe," \u2014 "),RI=n(lAe,"A",{href:!0});var CHr=s(RI);R_o=r(CHr,"TapasModel"),CHr.forEach(t),B_o=r(lAe," (TAPAS model)"),lAe.forEach(t),P_o=i($),au=n($,"LI",{});var iAe=s(au);jne=n(iAe,"STRONG",{});var wHr=s(jne);I_o=r(wHr,"transfo-xl"),wHr.forEach(t),q_o=r(iAe," \u2014 "),BI=n(iAe,"A",{href:!0});var AHr=s(BI);N_o=r(AHr,"TransfoXLModel"),AHr.forEach(t),j_o=r(iAe," (Transformer-XL model)"),iAe.forEach(t),D_o=i($),nu=n($,"LI",{});var dAe=s(nu);Dne=n(dAe,"STRONG",{});var yHr=s(Dne);G_o=r(yHr,"unispeech"),yHr.forEach(t),O_o=r(dAe," \u2014 "),PI=n(dAe,"A",{href:!0});var LHr=s(PI);V_o=r(LHr,"UniSpeechModel"),LHr.forEach(t),X_o=r(dAe," (UniSpeech model)"),dAe.forEach(t),z_o=i($),su=n($,"LI",{});var cAe=s(su);Gne=n(cAe,"STRONG",{});var xHr=s(Gne);Q_o=r(xHr,"unispeech-sat"),xHr.forEach(t),W_o=r(cAe," \u2014 "),II=n(cAe,"A",{href:!0});var $Hr=s(II);H_o=r($Hr,"UniSpeechSatModel"),$Hr.forEach(t),U_o=r(cAe," (UniSpeechSat model)"),cAe.forEach(t),J_o=i($),lu=n($,"LI",{});var fAe=s(lu);One=n(fAe,"STRONG",{});var kHr=s(One);Y_o=r(kHr,"van"),kHr.forEach(t),K_o=r(fAe," \u2014 "),qI=n(fAe,"A",{href:!0});var SHr=s(qI);Z_o=r(SHr,"VanModel"),SHr.forEach(t),e6o=r(fAe," (VAN model)"),fAe.forEach(t),o6o=i($),iu=n($,"LI",{});var mAe=s(iu);Vne=n(mAe,"STRONG",{});var RHr=s(Vne);r6o=r(RHr,"vilt"),RHr.forEach(t),t6o=r(mAe," \u2014 "),NI=n(mAe,"A",{href:!0});var BHr=s(NI);a6o=r(BHr,"ViltModel"),BHr.forEach(t),n6o=r(mAe," (ViLT model)"),mAe.forEach(t),s6o=i($),du=n($,"LI",{});var gAe=s(du);Xne=n(gAe,"STRONG",{});var PHr=s(Xne);l6o=r(PHr,"vision-text-dual-encoder"),PHr.forEach(t),i6o=r(gAe," \u2014 "),jI=n(gAe,"A",{href:!0});var IHr=s(jI);d6o=r(IHr,"VisionTextDualEncoderModel"),IHr.forEach(t),c6o=r(gAe," (VisionTextDualEncoder model)"),gAe.forEach(t),f6o=i($),cu=n($,"LI",{});var hAe=s(cu);zne=n(hAe,"STRONG",{});var qHr=s(zne);m6o=r(qHr,"visual_bert"),qHr.forEach(t),g6o=r(hAe," \u2014 "),DI=n(hAe,"A",{href:!0});var NHr=s(DI);h6o=r(NHr,"VisualBertModel"),NHr.forEach(t),p6o=r(hAe," (VisualBert model)"),hAe.forEach(t),u6o=i($),fu=n($,"LI",{});var pAe=s(fu);Qne=n(pAe,"STRONG",{});var jHr=s(Qne);_6o=r(jHr,"vit"),jHr.forEach(t),b6o=r(pAe," \u2014 "),GI=n(pAe,"A",{href:!0});var DHr=s(GI);v6o=r(DHr,"ViTModel"),DHr.forEach(t),F6o=r(pAe," (ViT model)"),pAe.forEach(t),T6o=i($),mu=n($,"LI",{});var uAe=s(mu);Wne=n(uAe,"STRONG",{});var GHr=s(Wne);M6o=r(GHr,"vit_mae"),GHr.forEach(t),E6o=r(uAe," \u2014 "),OI=n(uAe,"A",{href:!0});var OHr=s(OI);C6o=r(OHr,"ViTMAEModel"),OHr.forEach(t),w6o=r(uAe," (ViTMAE model)"),uAe.forEach(t),A6o=i($),gu=n($,"LI",{});var _Ae=s(gu);Hne=n(_Ae,"STRONG",{});var VHr=s(Hne);y6o=r(VHr,"wav2vec2"),VHr.forEach(t),L6o=r(_Ae," \u2014 "),VI=n(_Ae,"A",{href:!0});var XHr=s(VI);x6o=r(XHr,"Wav2Vec2Model"),XHr.forEach(t),$6o=r(_Ae," (Wav2Vec2 model)"),_Ae.forEach(t),k6o=i($),hu=n($,"LI",{});var bAe=s(hu);Une=n(bAe,"STRONG",{});var zHr=s(Une);S6o=r(zHr,"wavlm"),zHr.forEach(t),R6o=r(bAe," \u2014 "),XI=n(bAe,"A",{href:!0});var QHr=s(XI);B6o=r(QHr,"WavLMModel"),QHr.forEach(t),P6o=r(bAe," (WavLM model)"),bAe.forEach(t),I6o=i($),pu=n($,"LI",{});var vAe=s(pu);Jne=n(vAe,"STRONG",{});var WHr=s(Jne);q6o=r(WHr,"xglm"),WHr.forEach(t),N6o=r(vAe," \u2014 "),zI=n(vAe,"A",{href:!0});var HHr=s(zI);j6o=r(HHr,"XGLMModel"),HHr.forEach(t),D6o=r(vAe," (XGLM model)"),vAe.forEach(t),G6o=i($),uu=n($,"LI",{});var FAe=s(uu);Yne=n(FAe,"STRONG",{});var UHr=s(Yne);O6o=r(UHr,"xlm"),UHr.forEach(t),V6o=r(FAe," \u2014 "),QI=n(FAe,"A",{href:!0});var JHr=s(QI);X6o=r(JHr,"XLMModel"),JHr.forEach(t),z6o=r(FAe," (XLM model)"),FAe.forEach(t),Q6o=i($),_u=n($,"LI",{});var TAe=s(_u);Kne=n(TAe,"STRONG",{});var YHr=s(Kne);W6o=r(YHr,"xlm-prophetnet"),YHr.forEach(t),H6o=r(TAe," \u2014 "),WI=n(TAe,"A",{href:!0});var KHr=s(WI);U6o=r(KHr,"XLMProphetNetModel"),KHr.forEach(t),J6o=r(TAe," (XLMProphetNet model)"),TAe.forEach(t),Y6o=i($),bu=n($,"LI",{});var MAe=s(bu);Zne=n(MAe,"STRONG",{});var ZHr=s(Zne);K6o=r(ZHr,"xlm-roberta"),ZHr.forEach(t),Z6o=r(MAe," \u2014 "),HI=n(MAe,"A",{href:!0});var eUr=s(HI);e1o=r(eUr,"XLMRobertaModel"),eUr.forEach(t),o1o=r(MAe," (XLM-RoBERTa model)"),MAe.forEach(t),r1o=i($),vu=n($,"LI",{});var EAe=s(vu);ese=n(EAe,"STRONG",{});var oUr=s(ese);t1o=r(oUr,"xlm-roberta-xl"),oUr.forEach(t),a1o=r(EAe," \u2014 "),UI=n(EAe,"A",{href:!0});var rUr=s(UI);n1o=r(rUr,"XLMRobertaXLModel"),rUr.forEach(t),s1o=r(EAe," (XLM-RoBERTa-XL model)"),EAe.forEach(t),l1o=i($),Fu=n($,"LI",{});var CAe=s(Fu);ose=n(CAe,"STRONG",{});var tUr=s(ose);i1o=r(tUr,"xlnet"),tUr.forEach(t),d1o=r(CAe," \u2014 "),JI=n(CAe,"A",{href:!0});var aUr=s(JI);c1o=r(aUr,"XLNetModel"),aUr.forEach(t),f1o=r(CAe," (XLNet model)"),CAe.forEach(t),m1o=i($),Tu=n($,"LI",{});var wAe=s(Tu);rse=n(wAe,"STRONG",{});var nUr=s(rse);g1o=r(nUr,"yolos"),nUr.forEach(t),h1o=r(wAe," \u2014 "),YI=n(wAe,"A",{href:!0});var sUr=s(YI);p1o=r(sUr,"YolosModel"),sUr.forEach(t),u1o=r(wAe," (YOLOS model)"),wAe.forEach(t),_1o=i($),Mu=n($,"LI",{});var AAe=s(Mu);tse=n(AAe,"STRONG",{});var lUr=s(tse);b1o=r(lUr,"yoso"),lUr.forEach(t),v1o=r(AAe," \u2014 "),KI=n(AAe,"A",{href:!0});var iUr=s(KI);F1o=r(iUr,"YosoModel"),iUr.forEach(t),T1o=r(AAe," (YOSO model)"),AAe.forEach(t),$.forEach(t),M1o=i(Jt),Eu=n(Jt,"P",{});var yAe=s(Eu);E1o=r(yAe,"The model is set in evaluation mode by default using "),ase=n(yAe,"CODE",{});var dUr=s(ase);C1o=r(dUr,"model.eval()"),dUr.forEach(t),w1o=r(yAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nse=n(yAe,"CODE",{});var cUr=s(nse);A1o=r(cUr,"model.train()"),cUr.forEach(t),yAe.forEach(t),y1o=i(Jt),T(Cu.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),UBe=i(f),bi=n(f,"H2",{class:!0});var YIe=s(bi);wu=n(YIe,"A",{id:!0,class:!0,href:!0});var fUr=s(wu);sse=n(fUr,"SPAN",{});var mUr=s(sse);T(sy.$$.fragment,mUr),mUr.forEach(t),fUr.forEach(t),L1o=i(YIe),lse=n(YIe,"SPAN",{});var gUr=s(lse);x1o=r(gUr,"AutoModelForPreTraining"),gUr.forEach(t),YIe.forEach(t),JBe=i(f),xo=n(f,"DIV",{class:!0});var Is=s(xo);T(ly.$$.fragment,Is),$1o=i(Is),vi=n(Is,"P",{});var wY=s(vi);k1o=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZI=n(wY,"A",{href:!0});var hUr=s(ZI);S1o=r(hUr,"from_pretrained()"),hUr.forEach(t),R1o=r(wY," class method or the "),eq=n(wY,"A",{href:!0});var pUr=s(eq);B1o=r(pUr,"from_config()"),pUr.forEach(t),P1o=r(wY,` class
method.`),wY.forEach(t),I1o=i(Is),iy=n(Is,"P",{});var KIe=s(iy);q1o=r(KIe,"This class cannot be instantiated directly using "),ise=n(KIe,"CODE",{});var uUr=s(ise);N1o=r(uUr,"__init__()"),uUr.forEach(t),j1o=r(KIe," (throws an error)."),KIe.forEach(t),D1o=i(Is),et=n(Is,"DIV",{class:!0});var Iw=s(et);T(dy.$$.fragment,Iw),G1o=i(Iw),dse=n(Iw,"P",{});var _Ur=s(dse);O1o=r(_Ur,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Ur.forEach(t),V1o=i(Iw),Fi=n(Iw,"P",{});var AY=s(Fi);X1o=r(AY,`Note:
Loading a model from its configuration file does `),cse=n(AY,"STRONG",{});var bUr=s(cse);z1o=r(bUr,"not"),bUr.forEach(t),Q1o=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oq=n(AY,"A",{href:!0});var vUr=s(oq);W1o=r(vUr,"from_pretrained()"),vUr.forEach(t),H1o=r(AY," to load the model weights."),AY.forEach(t),U1o=i(Iw),T(Au.$$.fragment,Iw),Iw.forEach(t),J1o=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(cy.$$.fragment,Yt),Y1o=i(Yt),fse=n(Yt,"P",{});var FUr=s(fse);K1o=r(FUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FUr.forEach(t),Z1o=i(Yt),Ca=n(Yt,"P",{});var qw=s(Ca);ebo=r(qw,"The model class to instantiate is selected based on the "),mse=n(qw,"CODE",{});var TUr=s(mse);obo=r(TUr,"model_type"),TUr.forEach(t),rbo=r(qw,` property of the config object (either
passed as an argument or loaded from `),gse=n(qw,"CODE",{});var MUr=s(gse);tbo=r(MUr,"pretrained_model_name_or_path"),MUr.forEach(t),abo=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hse=n(qw,"CODE",{});var EUr=s(hse);nbo=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),sbo=r(qw,":"),qw.forEach(t),lbo=i(Yt),G=n(Yt,"UL",{});var V=s(G);yu=n(V,"LI",{});var LAe=s(yu);pse=n(LAe,"STRONG",{});var CUr=s(pse);ibo=r(CUr,"albert"),CUr.forEach(t),dbo=r(LAe," \u2014 "),rq=n(LAe,"A",{href:!0});var wUr=s(rq);cbo=r(wUr,"AlbertForPreTraining"),wUr.forEach(t),fbo=r(LAe," (ALBERT model)"),LAe.forEach(t),mbo=i(V),Lu=n(V,"LI",{});var xAe=s(Lu);use=n(xAe,"STRONG",{});var AUr=s(use);gbo=r(AUr,"bart"),AUr.forEach(t),hbo=r(xAe," \u2014 "),tq=n(xAe,"A",{href:!0});var yUr=s(tq);pbo=r(yUr,"BartForConditionalGeneration"),yUr.forEach(t),ubo=r(xAe," (BART model)"),xAe.forEach(t),_bo=i(V),xu=n(V,"LI",{});var $Ae=s(xu);_se=n($Ae,"STRONG",{});var LUr=s(_se);bbo=r(LUr,"bert"),LUr.forEach(t),vbo=r($Ae," \u2014 "),aq=n($Ae,"A",{href:!0});var xUr=s(aq);Fbo=r(xUr,"BertForPreTraining"),xUr.forEach(t),Tbo=r($Ae," (BERT model)"),$Ae.forEach(t),Mbo=i(V),$u=n(V,"LI",{});var kAe=s($u);bse=n(kAe,"STRONG",{});var $Ur=s(bse);Ebo=r($Ur,"big_bird"),$Ur.forEach(t),Cbo=r(kAe," \u2014 "),nq=n(kAe,"A",{href:!0});var kUr=s(nq);wbo=r(kUr,"BigBirdForPreTraining"),kUr.forEach(t),Abo=r(kAe," (BigBird model)"),kAe.forEach(t),ybo=i(V),ku=n(V,"LI",{});var SAe=s(ku);vse=n(SAe,"STRONG",{});var SUr=s(vse);Lbo=r(SUr,"camembert"),SUr.forEach(t),xbo=r(SAe," \u2014 "),sq=n(SAe,"A",{href:!0});var RUr=s(sq);$bo=r(RUr,"CamembertForMaskedLM"),RUr.forEach(t),kbo=r(SAe," (CamemBERT model)"),SAe.forEach(t),Sbo=i(V),Su=n(V,"LI",{});var RAe=s(Su);Fse=n(RAe,"STRONG",{});var BUr=s(Fse);Rbo=r(BUr,"ctrl"),BUr.forEach(t),Bbo=r(RAe," \u2014 "),lq=n(RAe,"A",{href:!0});var PUr=s(lq);Pbo=r(PUr,"CTRLLMHeadModel"),PUr.forEach(t),Ibo=r(RAe," (CTRL model)"),RAe.forEach(t),qbo=i(V),Ru=n(V,"LI",{});var BAe=s(Ru);Tse=n(BAe,"STRONG",{});var IUr=s(Tse);Nbo=r(IUr,"data2vec-text"),IUr.forEach(t),jbo=r(BAe," \u2014 "),iq=n(BAe,"A",{href:!0});var qUr=s(iq);Dbo=r(qUr,"Data2VecTextForMaskedLM"),qUr.forEach(t),Gbo=r(BAe," (Data2VecText model)"),BAe.forEach(t),Obo=i(V),Bu=n(V,"LI",{});var PAe=s(Bu);Mse=n(PAe,"STRONG",{});var NUr=s(Mse);Vbo=r(NUr,"deberta"),NUr.forEach(t),Xbo=r(PAe," \u2014 "),dq=n(PAe,"A",{href:!0});var jUr=s(dq);zbo=r(jUr,"DebertaForMaskedLM"),jUr.forEach(t),Qbo=r(PAe," (DeBERTa model)"),PAe.forEach(t),Wbo=i(V),Pu=n(V,"LI",{});var IAe=s(Pu);Ese=n(IAe,"STRONG",{});var DUr=s(Ese);Hbo=r(DUr,"deberta-v2"),DUr.forEach(t),Ubo=r(IAe," \u2014 "),cq=n(IAe,"A",{href:!0});var GUr=s(cq);Jbo=r(GUr,"DebertaV2ForMaskedLM"),GUr.forEach(t),Ybo=r(IAe," (DeBERTa-v2 model)"),IAe.forEach(t),Kbo=i(V),Iu=n(V,"LI",{});var qAe=s(Iu);Cse=n(qAe,"STRONG",{});var OUr=s(Cse);Zbo=r(OUr,"distilbert"),OUr.forEach(t),e4o=r(qAe," \u2014 "),fq=n(qAe,"A",{href:!0});var VUr=s(fq);o4o=r(VUr,"DistilBertForMaskedLM"),VUr.forEach(t),r4o=r(qAe," (DistilBERT model)"),qAe.forEach(t),t4o=i(V),qu=n(V,"LI",{});var NAe=s(qu);wse=n(NAe,"STRONG",{});var XUr=s(wse);a4o=r(XUr,"electra"),XUr.forEach(t),n4o=r(NAe," \u2014 "),mq=n(NAe,"A",{href:!0});var zUr=s(mq);s4o=r(zUr,"ElectraForPreTraining"),zUr.forEach(t),l4o=r(NAe," (ELECTRA model)"),NAe.forEach(t),i4o=i(V),Nu=n(V,"LI",{});var jAe=s(Nu);Ase=n(jAe,"STRONG",{});var QUr=s(Ase);d4o=r(QUr,"flaubert"),QUr.forEach(t),c4o=r(jAe," \u2014 "),gq=n(jAe,"A",{href:!0});var WUr=s(gq);f4o=r(WUr,"FlaubertWithLMHeadModel"),WUr.forEach(t),m4o=r(jAe," (FlauBERT model)"),jAe.forEach(t),g4o=i(V),ju=n(V,"LI",{});var DAe=s(ju);yse=n(DAe,"STRONG",{});var HUr=s(yse);h4o=r(HUr,"flava"),HUr.forEach(t),p4o=r(DAe," \u2014 "),hq=n(DAe,"A",{href:!0});var UUr=s(hq);u4o=r(UUr,"FlavaForPreTraining"),UUr.forEach(t),_4o=r(DAe," (Flava model)"),DAe.forEach(t),b4o=i(V),Du=n(V,"LI",{});var GAe=s(Du);Lse=n(GAe,"STRONG",{});var JUr=s(Lse);v4o=r(JUr,"fnet"),JUr.forEach(t),F4o=r(GAe," \u2014 "),pq=n(GAe,"A",{href:!0});var YUr=s(pq);T4o=r(YUr,"FNetForPreTraining"),YUr.forEach(t),M4o=r(GAe," (FNet model)"),GAe.forEach(t),E4o=i(V),Gu=n(V,"LI",{});var OAe=s(Gu);xse=n(OAe,"STRONG",{});var KUr=s(xse);C4o=r(KUr,"fsmt"),KUr.forEach(t),w4o=r(OAe," \u2014 "),uq=n(OAe,"A",{href:!0});var ZUr=s(uq);A4o=r(ZUr,"FSMTForConditionalGeneration"),ZUr.forEach(t),y4o=r(OAe," (FairSeq Machine-Translation model)"),OAe.forEach(t),L4o=i(V),Ou=n(V,"LI",{});var VAe=s(Ou);$se=n(VAe,"STRONG",{});var eJr=s($se);x4o=r(eJr,"funnel"),eJr.forEach(t),$4o=r(VAe," \u2014 "),_q=n(VAe,"A",{href:!0});var oJr=s(_q);k4o=r(oJr,"FunnelForPreTraining"),oJr.forEach(t),S4o=r(VAe," (Funnel Transformer model)"),VAe.forEach(t),R4o=i(V),Vu=n(V,"LI",{});var XAe=s(Vu);kse=n(XAe,"STRONG",{});var rJr=s(kse);B4o=r(rJr,"gpt2"),rJr.forEach(t),P4o=r(XAe," \u2014 "),bq=n(XAe,"A",{href:!0});var tJr=s(bq);I4o=r(tJr,"GPT2LMHeadModel"),tJr.forEach(t),q4o=r(XAe," (OpenAI GPT-2 model)"),XAe.forEach(t),N4o=i(V),Xu=n(V,"LI",{});var zAe=s(Xu);Sse=n(zAe,"STRONG",{});var aJr=s(Sse);j4o=r(aJr,"ibert"),aJr.forEach(t),D4o=r(zAe," \u2014 "),vq=n(zAe,"A",{href:!0});var nJr=s(vq);G4o=r(nJr,"IBertForMaskedLM"),nJr.forEach(t),O4o=r(zAe," (I-BERT model)"),zAe.forEach(t),V4o=i(V),zu=n(V,"LI",{});var QAe=s(zu);Rse=n(QAe,"STRONG",{});var sJr=s(Rse);X4o=r(sJr,"layoutlm"),sJr.forEach(t),z4o=r(QAe," \u2014 "),Fq=n(QAe,"A",{href:!0});var lJr=s(Fq);Q4o=r(lJr,"LayoutLMForMaskedLM"),lJr.forEach(t),W4o=r(QAe," (LayoutLM model)"),QAe.forEach(t),H4o=i(V),Qu=n(V,"LI",{});var WAe=s(Qu);Bse=n(WAe,"STRONG",{});var iJr=s(Bse);U4o=r(iJr,"longformer"),iJr.forEach(t),J4o=r(WAe," \u2014 "),Tq=n(WAe,"A",{href:!0});var dJr=s(Tq);Y4o=r(dJr,"LongformerForMaskedLM"),dJr.forEach(t),K4o=r(WAe," (Longformer model)"),WAe.forEach(t),Z4o=i(V),Wu=n(V,"LI",{});var HAe=s(Wu);Pse=n(HAe,"STRONG",{});var cJr=s(Pse);e2o=r(cJr,"lxmert"),cJr.forEach(t),o2o=r(HAe," \u2014 "),Mq=n(HAe,"A",{href:!0});var fJr=s(Mq);r2o=r(fJr,"LxmertForPreTraining"),fJr.forEach(t),t2o=r(HAe," (LXMERT model)"),HAe.forEach(t),a2o=i(V),Hu=n(V,"LI",{});var UAe=s(Hu);Ise=n(UAe,"STRONG",{});var mJr=s(Ise);n2o=r(mJr,"megatron-bert"),mJr.forEach(t),s2o=r(UAe," \u2014 "),Eq=n(UAe,"A",{href:!0});var gJr=s(Eq);l2o=r(gJr,"MegatronBertForPreTraining"),gJr.forEach(t),i2o=r(UAe," (MegatronBert model)"),UAe.forEach(t),d2o=i(V),Uu=n(V,"LI",{});var JAe=s(Uu);qse=n(JAe,"STRONG",{});var hJr=s(qse);c2o=r(hJr,"mobilebert"),hJr.forEach(t),f2o=r(JAe," \u2014 "),Cq=n(JAe,"A",{href:!0});var pJr=s(Cq);m2o=r(pJr,"MobileBertForPreTraining"),pJr.forEach(t),g2o=r(JAe," (MobileBERT model)"),JAe.forEach(t),h2o=i(V),Ju=n(V,"LI",{});var YAe=s(Ju);Nse=n(YAe,"STRONG",{});var uJr=s(Nse);p2o=r(uJr,"mpnet"),uJr.forEach(t),u2o=r(YAe," \u2014 "),wq=n(YAe,"A",{href:!0});var _Jr=s(wq);_2o=r(_Jr,"MPNetForMaskedLM"),_Jr.forEach(t),b2o=r(YAe," (MPNet model)"),YAe.forEach(t),v2o=i(V),Yu=n(V,"LI",{});var KAe=s(Yu);jse=n(KAe,"STRONG",{});var bJr=s(jse);F2o=r(bJr,"openai-gpt"),bJr.forEach(t),T2o=r(KAe," \u2014 "),Aq=n(KAe,"A",{href:!0});var vJr=s(Aq);M2o=r(vJr,"OpenAIGPTLMHeadModel"),vJr.forEach(t),E2o=r(KAe," (OpenAI GPT model)"),KAe.forEach(t),C2o=i(V),Ku=n(V,"LI",{});var ZAe=s(Ku);Dse=n(ZAe,"STRONG",{});var FJr=s(Dse);w2o=r(FJr,"retribert"),FJr.forEach(t),A2o=r(ZAe," \u2014 "),yq=n(ZAe,"A",{href:!0});var TJr=s(yq);y2o=r(TJr,"RetriBertModel"),TJr.forEach(t),L2o=r(ZAe," (RetriBERT model)"),ZAe.forEach(t),x2o=i(V),Zu=n(V,"LI",{});var e0e=s(Zu);Gse=n(e0e,"STRONG",{});var MJr=s(Gse);$2o=r(MJr,"roberta"),MJr.forEach(t),k2o=r(e0e," \u2014 "),Lq=n(e0e,"A",{href:!0});var EJr=s(Lq);S2o=r(EJr,"RobertaForMaskedLM"),EJr.forEach(t),R2o=r(e0e," (RoBERTa model)"),e0e.forEach(t),B2o=i(V),e_=n(V,"LI",{});var o0e=s(e_);Ose=n(o0e,"STRONG",{});var CJr=s(Ose);P2o=r(CJr,"squeezebert"),CJr.forEach(t),I2o=r(o0e," \u2014 "),xq=n(o0e,"A",{href:!0});var wJr=s(xq);q2o=r(wJr,"SqueezeBertForMaskedLM"),wJr.forEach(t),N2o=r(o0e," (SqueezeBERT model)"),o0e.forEach(t),j2o=i(V),o_=n(V,"LI",{});var r0e=s(o_);Vse=n(r0e,"STRONG",{});var AJr=s(Vse);D2o=r(AJr,"t5"),AJr.forEach(t),G2o=r(r0e," \u2014 "),$q=n(r0e,"A",{href:!0});var yJr=s($q);O2o=r(yJr,"T5ForConditionalGeneration"),yJr.forEach(t),V2o=r(r0e," (T5 model)"),r0e.forEach(t),X2o=i(V),r_=n(V,"LI",{});var t0e=s(r_);Xse=n(t0e,"STRONG",{});var LJr=s(Xse);z2o=r(LJr,"tapas"),LJr.forEach(t),Q2o=r(t0e," \u2014 "),kq=n(t0e,"A",{href:!0});var xJr=s(kq);W2o=r(xJr,"TapasForMaskedLM"),xJr.forEach(t),H2o=r(t0e," (TAPAS model)"),t0e.forEach(t),U2o=i(V),t_=n(V,"LI",{});var a0e=s(t_);zse=n(a0e,"STRONG",{});var $Jr=s(zse);J2o=r($Jr,"transfo-xl"),$Jr.forEach(t),Y2o=r(a0e," \u2014 "),Sq=n(a0e,"A",{href:!0});var kJr=s(Sq);K2o=r(kJr,"TransfoXLLMHeadModel"),kJr.forEach(t),Z2o=r(a0e," (Transformer-XL model)"),a0e.forEach(t),e5o=i(V),a_=n(V,"LI",{});var n0e=s(a_);Qse=n(n0e,"STRONG",{});var SJr=s(Qse);o5o=r(SJr,"unispeech"),SJr.forEach(t),r5o=r(n0e," \u2014 "),Rq=n(n0e,"A",{href:!0});var RJr=s(Rq);t5o=r(RJr,"UniSpeechForPreTraining"),RJr.forEach(t),a5o=r(n0e," (UniSpeech model)"),n0e.forEach(t),n5o=i(V),n_=n(V,"LI",{});var s0e=s(n_);Wse=n(s0e,"STRONG",{});var BJr=s(Wse);s5o=r(BJr,"unispeech-sat"),BJr.forEach(t),l5o=r(s0e," \u2014 "),Bq=n(s0e,"A",{href:!0});var PJr=s(Bq);i5o=r(PJr,"UniSpeechSatForPreTraining"),PJr.forEach(t),d5o=r(s0e," (UniSpeechSat model)"),s0e.forEach(t),c5o=i(V),s_=n(V,"LI",{});var l0e=s(s_);Hse=n(l0e,"STRONG",{});var IJr=s(Hse);f5o=r(IJr,"visual_bert"),IJr.forEach(t),m5o=r(l0e," \u2014 "),Pq=n(l0e,"A",{href:!0});var qJr=s(Pq);g5o=r(qJr,"VisualBertForPreTraining"),qJr.forEach(t),h5o=r(l0e," (VisualBert model)"),l0e.forEach(t),p5o=i(V),l_=n(V,"LI",{});var i0e=s(l_);Use=n(i0e,"STRONG",{});var NJr=s(Use);u5o=r(NJr,"vit_mae"),NJr.forEach(t),_5o=r(i0e," \u2014 "),Iq=n(i0e,"A",{href:!0});var jJr=s(Iq);b5o=r(jJr,"ViTMAEForPreTraining"),jJr.forEach(t),v5o=r(i0e," (ViTMAE model)"),i0e.forEach(t),F5o=i(V),i_=n(V,"LI",{});var d0e=s(i_);Jse=n(d0e,"STRONG",{});var DJr=s(Jse);T5o=r(DJr,"wav2vec2"),DJr.forEach(t),M5o=r(d0e," \u2014 "),qq=n(d0e,"A",{href:!0});var GJr=s(qq);E5o=r(GJr,"Wav2Vec2ForPreTraining"),GJr.forEach(t),C5o=r(d0e," (Wav2Vec2 model)"),d0e.forEach(t),w5o=i(V),d_=n(V,"LI",{});var c0e=s(d_);Yse=n(c0e,"STRONG",{});var OJr=s(Yse);A5o=r(OJr,"xlm"),OJr.forEach(t),y5o=r(c0e," \u2014 "),Nq=n(c0e,"A",{href:!0});var VJr=s(Nq);L5o=r(VJr,"XLMWithLMHeadModel"),VJr.forEach(t),x5o=r(c0e," (XLM model)"),c0e.forEach(t),$5o=i(V),c_=n(V,"LI",{});var f0e=s(c_);Kse=n(f0e,"STRONG",{});var XJr=s(Kse);k5o=r(XJr,"xlm-roberta"),XJr.forEach(t),S5o=r(f0e," \u2014 "),jq=n(f0e,"A",{href:!0});var zJr=s(jq);R5o=r(zJr,"XLMRobertaForMaskedLM"),zJr.forEach(t),B5o=r(f0e," (XLM-RoBERTa model)"),f0e.forEach(t),P5o=i(V),f_=n(V,"LI",{});var m0e=s(f_);Zse=n(m0e,"STRONG",{});var QJr=s(Zse);I5o=r(QJr,"xlm-roberta-xl"),QJr.forEach(t),q5o=r(m0e," \u2014 "),Dq=n(m0e,"A",{href:!0});var WJr=s(Dq);N5o=r(WJr,"XLMRobertaXLForMaskedLM"),WJr.forEach(t),j5o=r(m0e," (XLM-RoBERTa-XL model)"),m0e.forEach(t),D5o=i(V),m_=n(V,"LI",{});var g0e=s(m_);ele=n(g0e,"STRONG",{});var HJr=s(ele);G5o=r(HJr,"xlnet"),HJr.forEach(t),O5o=r(g0e," \u2014 "),Gq=n(g0e,"A",{href:!0});var UJr=s(Gq);V5o=r(UJr,"XLNetLMHeadModel"),UJr.forEach(t),X5o=r(g0e," (XLNet model)"),g0e.forEach(t),V.forEach(t),z5o=i(Yt),g_=n(Yt,"P",{});var h0e=s(g_);Q5o=r(h0e,"The model is set in evaluation mode by default using "),ole=n(h0e,"CODE",{});var JJr=s(ole);W5o=r(JJr,"model.eval()"),JJr.forEach(t),H5o=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rle=n(h0e,"CODE",{});var YJr=s(rle);U5o=r(YJr,"model.train()"),YJr.forEach(t),h0e.forEach(t),J5o=i(Yt),T(h_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),YBe=i(f),Ti=n(f,"H2",{class:!0});var ZIe=s(Ti);p_=n(ZIe,"A",{id:!0,class:!0,href:!0});var KJr=s(p_);tle=n(KJr,"SPAN",{});var ZJr=s(tle);T(fy.$$.fragment,ZJr),ZJr.forEach(t),KJr.forEach(t),Y5o=i(ZIe),ale=n(ZIe,"SPAN",{});var eYr=s(ale);K5o=r(eYr,"AutoModelForCausalLM"),eYr.forEach(t),ZIe.forEach(t),KBe=i(f),$o=n(f,"DIV",{class:!0});var qs=s($o);T(my.$$.fragment,qs),Z5o=i(qs),Mi=n(qs,"P",{});var yY=s(Mi);evo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Oq=n(yY,"A",{href:!0});var oYr=s(Oq);ovo=r(oYr,"from_pretrained()"),oYr.forEach(t),rvo=r(yY," class method or the "),Vq=n(yY,"A",{href:!0});var rYr=s(Vq);tvo=r(rYr,"from_config()"),rYr.forEach(t),avo=r(yY,` class
method.`),yY.forEach(t),nvo=i(qs),gy=n(qs,"P",{});var eqe=s(gy);svo=r(eqe,"This class cannot be instantiated directly using "),nle=n(eqe,"CODE",{});var tYr=s(nle);lvo=r(tYr,"__init__()"),tYr.forEach(t),ivo=r(eqe," (throws an error)."),eqe.forEach(t),dvo=i(qs),ot=n(qs,"DIV",{class:!0});var Nw=s(ot);T(hy.$$.fragment,Nw),cvo=i(Nw),sle=n(Nw,"P",{});var aYr=s(sle);fvo=r(aYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aYr.forEach(t),mvo=i(Nw),Ei=n(Nw,"P",{});var LY=s(Ei);gvo=r(LY,`Note:
Loading a model from its configuration file does `),lle=n(LY,"STRONG",{});var nYr=s(lle);hvo=r(nYr,"not"),nYr.forEach(t),pvo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=n(LY,"A",{href:!0});var sYr=s(Xq);uvo=r(sYr,"from_pretrained()"),sYr.forEach(t),_vo=r(LY," to load the model weights."),LY.forEach(t),bvo=i(Nw),T(u_.$$.fragment,Nw),Nw.forEach(t),vvo=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(py.$$.fragment,Kt),Fvo=i(Kt),ile=n(Kt,"P",{});var lYr=s(ile);Tvo=r(lYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lYr.forEach(t),Mvo=i(Kt),wa=n(Kt,"P",{});var jw=s(wa);Evo=r(jw,"The model class to instantiate is selected based on the "),dle=n(jw,"CODE",{});var iYr=s(dle);Cvo=r(iYr,"model_type"),iYr.forEach(t),wvo=r(jw,` property of the config object (either
passed as an argument or loaded from `),cle=n(jw,"CODE",{});var dYr=s(cle);Avo=r(dYr,"pretrained_model_name_or_path"),dYr.forEach(t),yvo=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=n(jw,"CODE",{});var cYr=s(fle);Lvo=r(cYr,"pretrained_model_name_or_path"),cYr.forEach(t),xvo=r(jw,":"),jw.forEach(t),$vo=i(Kt),z=n(Kt,"UL",{});var W=s(z);__=n(W,"LI",{});var p0e=s(__);mle=n(p0e,"STRONG",{});var fYr=s(mle);kvo=r(fYr,"bart"),fYr.forEach(t),Svo=r(p0e," \u2014 "),zq=n(p0e,"A",{href:!0});var mYr=s(zq);Rvo=r(mYr,"BartForCausalLM"),mYr.forEach(t),Bvo=r(p0e," (BART model)"),p0e.forEach(t),Pvo=i(W),b_=n(W,"LI",{});var u0e=s(b_);gle=n(u0e,"STRONG",{});var gYr=s(gle);Ivo=r(gYr,"bert"),gYr.forEach(t),qvo=r(u0e," \u2014 "),Qq=n(u0e,"A",{href:!0});var hYr=s(Qq);Nvo=r(hYr,"BertLMHeadModel"),hYr.forEach(t),jvo=r(u0e," (BERT model)"),u0e.forEach(t),Dvo=i(W),v_=n(W,"LI",{});var _0e=s(v_);hle=n(_0e,"STRONG",{});var pYr=s(hle);Gvo=r(pYr,"bert-generation"),pYr.forEach(t),Ovo=r(_0e," \u2014 "),Wq=n(_0e,"A",{href:!0});var uYr=s(Wq);Vvo=r(uYr,"BertGenerationDecoder"),uYr.forEach(t),Xvo=r(_0e," (Bert Generation model)"),_0e.forEach(t),zvo=i(W),F_=n(W,"LI",{});var b0e=s(F_);ple=n(b0e,"STRONG",{});var _Yr=s(ple);Qvo=r(_Yr,"big_bird"),_Yr.forEach(t),Wvo=r(b0e," \u2014 "),Hq=n(b0e,"A",{href:!0});var bYr=s(Hq);Hvo=r(bYr,"BigBirdForCausalLM"),bYr.forEach(t),Uvo=r(b0e," (BigBird model)"),b0e.forEach(t),Jvo=i(W),T_=n(W,"LI",{});var v0e=s(T_);ule=n(v0e,"STRONG",{});var vYr=s(ule);Yvo=r(vYr,"bigbird_pegasus"),vYr.forEach(t),Kvo=r(v0e," \u2014 "),Uq=n(v0e,"A",{href:!0});var FYr=s(Uq);Zvo=r(FYr,"BigBirdPegasusForCausalLM"),FYr.forEach(t),eFo=r(v0e," (BigBirdPegasus model)"),v0e.forEach(t),oFo=i(W),M_=n(W,"LI",{});var F0e=s(M_);_le=n(F0e,"STRONG",{});var TYr=s(_le);rFo=r(TYr,"blenderbot"),TYr.forEach(t),tFo=r(F0e," \u2014 "),Jq=n(F0e,"A",{href:!0});var MYr=s(Jq);aFo=r(MYr,"BlenderbotForCausalLM"),MYr.forEach(t),nFo=r(F0e," (Blenderbot model)"),F0e.forEach(t),sFo=i(W),E_=n(W,"LI",{});var T0e=s(E_);ble=n(T0e,"STRONG",{});var EYr=s(ble);lFo=r(EYr,"blenderbot-small"),EYr.forEach(t),iFo=r(T0e," \u2014 "),Yq=n(T0e,"A",{href:!0});var CYr=s(Yq);dFo=r(CYr,"BlenderbotSmallForCausalLM"),CYr.forEach(t),cFo=r(T0e," (BlenderbotSmall model)"),T0e.forEach(t),fFo=i(W),C_=n(W,"LI",{});var M0e=s(C_);vle=n(M0e,"STRONG",{});var wYr=s(vle);mFo=r(wYr,"camembert"),wYr.forEach(t),gFo=r(M0e," \u2014 "),Kq=n(M0e,"A",{href:!0});var AYr=s(Kq);hFo=r(AYr,"CamembertForCausalLM"),AYr.forEach(t),pFo=r(M0e," (CamemBERT model)"),M0e.forEach(t),uFo=i(W),w_=n(W,"LI",{});var E0e=s(w_);Fle=n(E0e,"STRONG",{});var yYr=s(Fle);_Fo=r(yYr,"ctrl"),yYr.forEach(t),bFo=r(E0e," \u2014 "),Zq=n(E0e,"A",{href:!0});var LYr=s(Zq);vFo=r(LYr,"CTRLLMHeadModel"),LYr.forEach(t),FFo=r(E0e," (CTRL model)"),E0e.forEach(t),TFo=i(W),A_=n(W,"LI",{});var C0e=s(A_);Tle=n(C0e,"STRONG",{});var xYr=s(Tle);MFo=r(xYr,"data2vec-text"),xYr.forEach(t),EFo=r(C0e," \u2014 "),eN=n(C0e,"A",{href:!0});var $Yr=s(eN);CFo=r($Yr,"Data2VecTextForCausalLM"),$Yr.forEach(t),wFo=r(C0e," (Data2VecText model)"),C0e.forEach(t),AFo=i(W),y_=n(W,"LI",{});var w0e=s(y_);Mle=n(w0e,"STRONG",{});var kYr=s(Mle);yFo=r(kYr,"electra"),kYr.forEach(t),LFo=r(w0e," \u2014 "),oN=n(w0e,"A",{href:!0});var SYr=s(oN);xFo=r(SYr,"ElectraForCausalLM"),SYr.forEach(t),$Fo=r(w0e," (ELECTRA model)"),w0e.forEach(t),kFo=i(W),L_=n(W,"LI",{});var A0e=s(L_);Ele=n(A0e,"STRONG",{});var RYr=s(Ele);SFo=r(RYr,"gpt2"),RYr.forEach(t),RFo=r(A0e," \u2014 "),rN=n(A0e,"A",{href:!0});var BYr=s(rN);BFo=r(BYr,"GPT2LMHeadModel"),BYr.forEach(t),PFo=r(A0e," (OpenAI GPT-2 model)"),A0e.forEach(t),IFo=i(W),x_=n(W,"LI",{});var y0e=s(x_);Cle=n(y0e,"STRONG",{});var PYr=s(Cle);qFo=r(PYr,"gpt_neo"),PYr.forEach(t),NFo=r(y0e," \u2014 "),tN=n(y0e,"A",{href:!0});var IYr=s(tN);jFo=r(IYr,"GPTNeoForCausalLM"),IYr.forEach(t),DFo=r(y0e," (GPT Neo model)"),y0e.forEach(t),GFo=i(W),$_=n(W,"LI",{});var L0e=s($_);wle=n(L0e,"STRONG",{});var qYr=s(wle);OFo=r(qYr,"gptj"),qYr.forEach(t),VFo=r(L0e," \u2014 "),aN=n(L0e,"A",{href:!0});var NYr=s(aN);XFo=r(NYr,"GPTJForCausalLM"),NYr.forEach(t),zFo=r(L0e," (GPT-J model)"),L0e.forEach(t),QFo=i(W),k_=n(W,"LI",{});var x0e=s(k_);Ale=n(x0e,"STRONG",{});var jYr=s(Ale);WFo=r(jYr,"marian"),jYr.forEach(t),HFo=r(x0e," \u2014 "),nN=n(x0e,"A",{href:!0});var DYr=s(nN);UFo=r(DYr,"MarianForCausalLM"),DYr.forEach(t),JFo=r(x0e," (Marian model)"),x0e.forEach(t),YFo=i(W),S_=n(W,"LI",{});var $0e=s(S_);yle=n($0e,"STRONG",{});var GYr=s(yle);KFo=r(GYr,"mbart"),GYr.forEach(t),ZFo=r($0e," \u2014 "),sN=n($0e,"A",{href:!0});var OYr=s(sN);eTo=r(OYr,"MBartForCausalLM"),OYr.forEach(t),oTo=r($0e," (mBART model)"),$0e.forEach(t),rTo=i(W),R_=n(W,"LI",{});var k0e=s(R_);Lle=n(k0e,"STRONG",{});var VYr=s(Lle);tTo=r(VYr,"megatron-bert"),VYr.forEach(t),aTo=r(k0e," \u2014 "),lN=n(k0e,"A",{href:!0});var XYr=s(lN);nTo=r(XYr,"MegatronBertForCausalLM"),XYr.forEach(t),sTo=r(k0e," (MegatronBert model)"),k0e.forEach(t),lTo=i(W),B_=n(W,"LI",{});var S0e=s(B_);xle=n(S0e,"STRONG",{});var zYr=s(xle);iTo=r(zYr,"openai-gpt"),zYr.forEach(t),dTo=r(S0e," \u2014 "),iN=n(S0e,"A",{href:!0});var QYr=s(iN);cTo=r(QYr,"OpenAIGPTLMHeadModel"),QYr.forEach(t),fTo=r(S0e," (OpenAI GPT model)"),S0e.forEach(t),mTo=i(W),P_=n(W,"LI",{});var R0e=s(P_);$le=n(R0e,"STRONG",{});var WYr=s($le);gTo=r(WYr,"pegasus"),WYr.forEach(t),hTo=r(R0e," \u2014 "),dN=n(R0e,"A",{href:!0});var HYr=s(dN);pTo=r(HYr,"PegasusForCausalLM"),HYr.forEach(t),uTo=r(R0e," (Pegasus model)"),R0e.forEach(t),_To=i(W),I_=n(W,"LI",{});var B0e=s(I_);kle=n(B0e,"STRONG",{});var UYr=s(kle);bTo=r(UYr,"plbart"),UYr.forEach(t),vTo=r(B0e," \u2014 "),cN=n(B0e,"A",{href:!0});var JYr=s(cN);FTo=r(JYr,"PLBartForCausalLM"),JYr.forEach(t),TTo=r(B0e," (PLBart model)"),B0e.forEach(t),MTo=i(W),q_=n(W,"LI",{});var P0e=s(q_);Sle=n(P0e,"STRONG",{});var YYr=s(Sle);ETo=r(YYr,"prophetnet"),YYr.forEach(t),CTo=r(P0e," \u2014 "),fN=n(P0e,"A",{href:!0});var KYr=s(fN);wTo=r(KYr,"ProphetNetForCausalLM"),KYr.forEach(t),ATo=r(P0e," (ProphetNet model)"),P0e.forEach(t),yTo=i(W),N_=n(W,"LI",{});var I0e=s(N_);Rle=n(I0e,"STRONG",{});var ZYr=s(Rle);LTo=r(ZYr,"qdqbert"),ZYr.forEach(t),xTo=r(I0e," \u2014 "),mN=n(I0e,"A",{href:!0});var eKr=s(mN);$To=r(eKr,"QDQBertLMHeadModel"),eKr.forEach(t),kTo=r(I0e," (QDQBert model)"),I0e.forEach(t),STo=i(W),j_=n(W,"LI",{});var q0e=s(j_);Ble=n(q0e,"STRONG",{});var oKr=s(Ble);RTo=r(oKr,"reformer"),oKr.forEach(t),BTo=r(q0e," \u2014 "),gN=n(q0e,"A",{href:!0});var rKr=s(gN);PTo=r(rKr,"ReformerModelWithLMHead"),rKr.forEach(t),ITo=r(q0e," (Reformer model)"),q0e.forEach(t),qTo=i(W),D_=n(W,"LI",{});var N0e=s(D_);Ple=n(N0e,"STRONG",{});var tKr=s(Ple);NTo=r(tKr,"rembert"),tKr.forEach(t),jTo=r(N0e," \u2014 "),hN=n(N0e,"A",{href:!0});var aKr=s(hN);DTo=r(aKr,"RemBertForCausalLM"),aKr.forEach(t),GTo=r(N0e," (RemBERT model)"),N0e.forEach(t),OTo=i(W),G_=n(W,"LI",{});var j0e=s(G_);Ile=n(j0e,"STRONG",{});var nKr=s(Ile);VTo=r(nKr,"roberta"),nKr.forEach(t),XTo=r(j0e," \u2014 "),pN=n(j0e,"A",{href:!0});var sKr=s(pN);zTo=r(sKr,"RobertaForCausalLM"),sKr.forEach(t),QTo=r(j0e," (RoBERTa model)"),j0e.forEach(t),WTo=i(W),O_=n(W,"LI",{});var D0e=s(O_);qle=n(D0e,"STRONG",{});var lKr=s(qle);HTo=r(lKr,"roformer"),lKr.forEach(t),UTo=r(D0e," \u2014 "),uN=n(D0e,"A",{href:!0});var iKr=s(uN);JTo=r(iKr,"RoFormerForCausalLM"),iKr.forEach(t),YTo=r(D0e," (RoFormer model)"),D0e.forEach(t),KTo=i(W),V_=n(W,"LI",{});var G0e=s(V_);Nle=n(G0e,"STRONG",{});var dKr=s(Nle);ZTo=r(dKr,"speech_to_text_2"),dKr.forEach(t),eMo=r(G0e," \u2014 "),_N=n(G0e,"A",{href:!0});var cKr=s(_N);oMo=r(cKr,"Speech2Text2ForCausalLM"),cKr.forEach(t),rMo=r(G0e," (Speech2Text2 model)"),G0e.forEach(t),tMo=i(W),X_=n(W,"LI",{});var O0e=s(X_);jle=n(O0e,"STRONG",{});var fKr=s(jle);aMo=r(fKr,"transfo-xl"),fKr.forEach(t),nMo=r(O0e," \u2014 "),bN=n(O0e,"A",{href:!0});var mKr=s(bN);sMo=r(mKr,"TransfoXLLMHeadModel"),mKr.forEach(t),lMo=r(O0e," (Transformer-XL model)"),O0e.forEach(t),iMo=i(W),z_=n(W,"LI",{});var V0e=s(z_);Dle=n(V0e,"STRONG",{});var gKr=s(Dle);dMo=r(gKr,"trocr"),gKr.forEach(t),cMo=r(V0e," \u2014 "),vN=n(V0e,"A",{href:!0});var hKr=s(vN);fMo=r(hKr,"TrOCRForCausalLM"),hKr.forEach(t),mMo=r(V0e," (TrOCR model)"),V0e.forEach(t),gMo=i(W),Q_=n(W,"LI",{});var X0e=s(Q_);Gle=n(X0e,"STRONG",{});var pKr=s(Gle);hMo=r(pKr,"xglm"),pKr.forEach(t),pMo=r(X0e," \u2014 "),FN=n(X0e,"A",{href:!0});var uKr=s(FN);uMo=r(uKr,"XGLMForCausalLM"),uKr.forEach(t),_Mo=r(X0e," (XGLM model)"),X0e.forEach(t),bMo=i(W),W_=n(W,"LI",{});var z0e=s(W_);Ole=n(z0e,"STRONG",{});var _Kr=s(Ole);vMo=r(_Kr,"xlm"),_Kr.forEach(t),FMo=r(z0e," \u2014 "),TN=n(z0e,"A",{href:!0});var bKr=s(TN);TMo=r(bKr,"XLMWithLMHeadModel"),bKr.forEach(t),MMo=r(z0e," (XLM model)"),z0e.forEach(t),EMo=i(W),H_=n(W,"LI",{});var Q0e=s(H_);Vle=n(Q0e,"STRONG",{});var vKr=s(Vle);CMo=r(vKr,"xlm-prophetnet"),vKr.forEach(t),wMo=r(Q0e," \u2014 "),MN=n(Q0e,"A",{href:!0});var FKr=s(MN);AMo=r(FKr,"XLMProphetNetForCausalLM"),FKr.forEach(t),yMo=r(Q0e," (XLMProphetNet model)"),Q0e.forEach(t),LMo=i(W),U_=n(W,"LI",{});var W0e=s(U_);Xle=n(W0e,"STRONG",{});var TKr=s(Xle);xMo=r(TKr,"xlm-roberta"),TKr.forEach(t),$Mo=r(W0e," \u2014 "),EN=n(W0e,"A",{href:!0});var MKr=s(EN);kMo=r(MKr,"XLMRobertaForCausalLM"),MKr.forEach(t),SMo=r(W0e," (XLM-RoBERTa model)"),W0e.forEach(t),RMo=i(W),J_=n(W,"LI",{});var H0e=s(J_);zle=n(H0e,"STRONG",{});var EKr=s(zle);BMo=r(EKr,"xlm-roberta-xl"),EKr.forEach(t),PMo=r(H0e," \u2014 "),CN=n(H0e,"A",{href:!0});var CKr=s(CN);IMo=r(CKr,"XLMRobertaXLForCausalLM"),CKr.forEach(t),qMo=r(H0e," (XLM-RoBERTa-XL model)"),H0e.forEach(t),NMo=i(W),Y_=n(W,"LI",{});var U0e=s(Y_);Qle=n(U0e,"STRONG",{});var wKr=s(Qle);jMo=r(wKr,"xlnet"),wKr.forEach(t),DMo=r(U0e," \u2014 "),wN=n(U0e,"A",{href:!0});var AKr=s(wN);GMo=r(AKr,"XLNetLMHeadModel"),AKr.forEach(t),OMo=r(U0e," (XLNet model)"),U0e.forEach(t),W.forEach(t),VMo=i(Kt),K_=n(Kt,"P",{});var J0e=s(K_);XMo=r(J0e,"The model is set in evaluation mode by default using "),Wle=n(J0e,"CODE",{});var yKr=s(Wle);zMo=r(yKr,"model.eval()"),yKr.forEach(t),QMo=r(J0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hle=n(J0e,"CODE",{});var LKr=s(Hle);WMo=r(LKr,"model.train()"),LKr.forEach(t),J0e.forEach(t),HMo=i(Kt),T(Z_.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),ZBe=i(f),Ci=n(f,"H2",{class:!0});var oqe=s(Ci);e6=n(oqe,"A",{id:!0,class:!0,href:!0});var xKr=s(e6);Ule=n(xKr,"SPAN",{});var $Kr=s(Ule);T(uy.$$.fragment,$Kr),$Kr.forEach(t),xKr.forEach(t),UMo=i(oqe),Jle=n(oqe,"SPAN",{});var kKr=s(Jle);JMo=r(kKr,"AutoModelForMaskedLM"),kKr.forEach(t),oqe.forEach(t),ePe=i(f),ko=n(f,"DIV",{class:!0});var Ns=s(ko);T(_y.$$.fragment,Ns),YMo=i(Ns),wi=n(Ns,"P",{});var xY=s(wi);KMo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AN=n(xY,"A",{href:!0});var SKr=s(AN);ZMo=r(SKr,"from_pretrained()"),SKr.forEach(t),eEo=r(xY," class method or the "),yN=n(xY,"A",{href:!0});var RKr=s(yN);oEo=r(RKr,"from_config()"),RKr.forEach(t),rEo=r(xY,` class
method.`),xY.forEach(t),tEo=i(Ns),by=n(Ns,"P",{});var rqe=s(by);aEo=r(rqe,"This class cannot be instantiated directly using "),Yle=n(rqe,"CODE",{});var BKr=s(Yle);nEo=r(BKr,"__init__()"),BKr.forEach(t),sEo=r(rqe," (throws an error)."),rqe.forEach(t),lEo=i(Ns),rt=n(Ns,"DIV",{class:!0});var Dw=s(rt);T(vy.$$.fragment,Dw),iEo=i(Dw),Kle=n(Dw,"P",{});var PKr=s(Kle);dEo=r(PKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PKr.forEach(t),cEo=i(Dw),Ai=n(Dw,"P",{});var $Y=s(Ai);fEo=r($Y,`Note:
Loading a model from its configuration file does `),Zle=n($Y,"STRONG",{});var IKr=s(Zle);mEo=r(IKr,"not"),IKr.forEach(t),gEo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),LN=n($Y,"A",{href:!0});var qKr=s(LN);hEo=r(qKr,"from_pretrained()"),qKr.forEach(t),pEo=r($Y," to load the model weights."),$Y.forEach(t),uEo=i(Dw),T(o6.$$.fragment,Dw),Dw.forEach(t),_Eo=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(Fy.$$.fragment,Zt),bEo=i(Zt),eie=n(Zt,"P",{});var NKr=s(eie);vEo=r(NKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NKr.forEach(t),FEo=i(Zt),Aa=n(Zt,"P",{});var Gw=s(Aa);TEo=r(Gw,"The model class to instantiate is selected based on the "),oie=n(Gw,"CODE",{});var jKr=s(oie);MEo=r(jKr,"model_type"),jKr.forEach(t),EEo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),rie=n(Gw,"CODE",{});var DKr=s(rie);CEo=r(DKr,"pretrained_model_name_or_path"),DKr.forEach(t),wEo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tie=n(Gw,"CODE",{});var GKr=s(tie);AEo=r(GKr,"pretrained_model_name_or_path"),GKr.forEach(t),yEo=r(Gw,":"),Gw.forEach(t),LEo=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);r6=n(H,"LI",{});var Y0e=s(r6);aie=n(Y0e,"STRONG",{});var OKr=s(aie);xEo=r(OKr,"albert"),OKr.forEach(t),$Eo=r(Y0e," \u2014 "),xN=n(Y0e,"A",{href:!0});var VKr=s(xN);kEo=r(VKr,"AlbertForMaskedLM"),VKr.forEach(t),SEo=r(Y0e," (ALBERT model)"),Y0e.forEach(t),REo=i(H),t6=n(H,"LI",{});var K0e=s(t6);nie=n(K0e,"STRONG",{});var XKr=s(nie);BEo=r(XKr,"bart"),XKr.forEach(t),PEo=r(K0e," \u2014 "),$N=n(K0e,"A",{href:!0});var zKr=s($N);IEo=r(zKr,"BartForConditionalGeneration"),zKr.forEach(t),qEo=r(K0e," (BART model)"),K0e.forEach(t),NEo=i(H),a6=n(H,"LI",{});var Z0e=s(a6);sie=n(Z0e,"STRONG",{});var QKr=s(sie);jEo=r(QKr,"bert"),QKr.forEach(t),DEo=r(Z0e," \u2014 "),kN=n(Z0e,"A",{href:!0});var WKr=s(kN);GEo=r(WKr,"BertForMaskedLM"),WKr.forEach(t),OEo=r(Z0e," (BERT model)"),Z0e.forEach(t),VEo=i(H),n6=n(H,"LI",{});var eye=s(n6);lie=n(eye,"STRONG",{});var HKr=s(lie);XEo=r(HKr,"big_bird"),HKr.forEach(t),zEo=r(eye," \u2014 "),SN=n(eye,"A",{href:!0});var UKr=s(SN);QEo=r(UKr,"BigBirdForMaskedLM"),UKr.forEach(t),WEo=r(eye," (BigBird model)"),eye.forEach(t),HEo=i(H),s6=n(H,"LI",{});var oye=s(s6);iie=n(oye,"STRONG",{});var JKr=s(iie);UEo=r(JKr,"camembert"),JKr.forEach(t),JEo=r(oye," \u2014 "),RN=n(oye,"A",{href:!0});var YKr=s(RN);YEo=r(YKr,"CamembertForMaskedLM"),YKr.forEach(t),KEo=r(oye," (CamemBERT model)"),oye.forEach(t),ZEo=i(H),l6=n(H,"LI",{});var rye=s(l6);die=n(rye,"STRONG",{});var KKr=s(die);eCo=r(KKr,"convbert"),KKr.forEach(t),oCo=r(rye," \u2014 "),BN=n(rye,"A",{href:!0});var ZKr=s(BN);rCo=r(ZKr,"ConvBertForMaskedLM"),ZKr.forEach(t),tCo=r(rye," (ConvBERT model)"),rye.forEach(t),aCo=i(H),i6=n(H,"LI",{});var tye=s(i6);cie=n(tye,"STRONG",{});var eZr=s(cie);nCo=r(eZr,"data2vec-text"),eZr.forEach(t),sCo=r(tye," \u2014 "),PN=n(tye,"A",{href:!0});var oZr=s(PN);lCo=r(oZr,"Data2VecTextForMaskedLM"),oZr.forEach(t),iCo=r(tye," (Data2VecText model)"),tye.forEach(t),dCo=i(H),d6=n(H,"LI",{});var aye=s(d6);fie=n(aye,"STRONG",{});var rZr=s(fie);cCo=r(rZr,"deberta"),rZr.forEach(t),fCo=r(aye," \u2014 "),IN=n(aye,"A",{href:!0});var tZr=s(IN);mCo=r(tZr,"DebertaForMaskedLM"),tZr.forEach(t),gCo=r(aye," (DeBERTa model)"),aye.forEach(t),hCo=i(H),c6=n(H,"LI",{});var nye=s(c6);mie=n(nye,"STRONG",{});var aZr=s(mie);pCo=r(aZr,"deberta-v2"),aZr.forEach(t),uCo=r(nye," \u2014 "),qN=n(nye,"A",{href:!0});var nZr=s(qN);_Co=r(nZr,"DebertaV2ForMaskedLM"),nZr.forEach(t),bCo=r(nye," (DeBERTa-v2 model)"),nye.forEach(t),vCo=i(H),f6=n(H,"LI",{});var sye=s(f6);gie=n(sye,"STRONG",{});var sZr=s(gie);FCo=r(sZr,"distilbert"),sZr.forEach(t),TCo=r(sye," \u2014 "),NN=n(sye,"A",{href:!0});var lZr=s(NN);MCo=r(lZr,"DistilBertForMaskedLM"),lZr.forEach(t),ECo=r(sye," (DistilBERT model)"),sye.forEach(t),CCo=i(H),m6=n(H,"LI",{});var lye=s(m6);hie=n(lye,"STRONG",{});var iZr=s(hie);wCo=r(iZr,"electra"),iZr.forEach(t),ACo=r(lye," \u2014 "),jN=n(lye,"A",{href:!0});var dZr=s(jN);yCo=r(dZr,"ElectraForMaskedLM"),dZr.forEach(t),LCo=r(lye," (ELECTRA model)"),lye.forEach(t),xCo=i(H),g6=n(H,"LI",{});var iye=s(g6);pie=n(iye,"STRONG",{});var cZr=s(pie);$Co=r(cZr,"flaubert"),cZr.forEach(t),kCo=r(iye," \u2014 "),DN=n(iye,"A",{href:!0});var fZr=s(DN);SCo=r(fZr,"FlaubertWithLMHeadModel"),fZr.forEach(t),RCo=r(iye," (FlauBERT model)"),iye.forEach(t),BCo=i(H),h6=n(H,"LI",{});var dye=s(h6);uie=n(dye,"STRONG",{});var mZr=s(uie);PCo=r(mZr,"fnet"),mZr.forEach(t),ICo=r(dye," \u2014 "),GN=n(dye,"A",{href:!0});var gZr=s(GN);qCo=r(gZr,"FNetForMaskedLM"),gZr.forEach(t),NCo=r(dye," (FNet model)"),dye.forEach(t),jCo=i(H),p6=n(H,"LI",{});var cye=s(p6);_ie=n(cye,"STRONG",{});var hZr=s(_ie);DCo=r(hZr,"funnel"),hZr.forEach(t),GCo=r(cye," \u2014 "),ON=n(cye,"A",{href:!0});var pZr=s(ON);OCo=r(pZr,"FunnelForMaskedLM"),pZr.forEach(t),VCo=r(cye," (Funnel Transformer model)"),cye.forEach(t),XCo=i(H),u6=n(H,"LI",{});var fye=s(u6);bie=n(fye,"STRONG",{});var uZr=s(bie);zCo=r(uZr,"ibert"),uZr.forEach(t),QCo=r(fye," \u2014 "),VN=n(fye,"A",{href:!0});var _Zr=s(VN);WCo=r(_Zr,"IBertForMaskedLM"),_Zr.forEach(t),HCo=r(fye," (I-BERT model)"),fye.forEach(t),UCo=i(H),_6=n(H,"LI",{});var mye=s(_6);vie=n(mye,"STRONG",{});var bZr=s(vie);JCo=r(bZr,"layoutlm"),bZr.forEach(t),YCo=r(mye," \u2014 "),XN=n(mye,"A",{href:!0});var vZr=s(XN);KCo=r(vZr,"LayoutLMForMaskedLM"),vZr.forEach(t),ZCo=r(mye," (LayoutLM model)"),mye.forEach(t),e3o=i(H),b6=n(H,"LI",{});var gye=s(b6);Fie=n(gye,"STRONG",{});var FZr=s(Fie);o3o=r(FZr,"longformer"),FZr.forEach(t),r3o=r(gye," \u2014 "),zN=n(gye,"A",{href:!0});var TZr=s(zN);t3o=r(TZr,"LongformerForMaskedLM"),TZr.forEach(t),a3o=r(gye," (Longformer model)"),gye.forEach(t),n3o=i(H),v6=n(H,"LI",{});var hye=s(v6);Tie=n(hye,"STRONG",{});var MZr=s(Tie);s3o=r(MZr,"mbart"),MZr.forEach(t),l3o=r(hye," \u2014 "),QN=n(hye,"A",{href:!0});var EZr=s(QN);i3o=r(EZr,"MBartForConditionalGeneration"),EZr.forEach(t),d3o=r(hye," (mBART model)"),hye.forEach(t),c3o=i(H),F6=n(H,"LI",{});var pye=s(F6);Mie=n(pye,"STRONG",{});var CZr=s(Mie);f3o=r(CZr,"megatron-bert"),CZr.forEach(t),m3o=r(pye," \u2014 "),WN=n(pye,"A",{href:!0});var wZr=s(WN);g3o=r(wZr,"MegatronBertForMaskedLM"),wZr.forEach(t),h3o=r(pye," (MegatronBert model)"),pye.forEach(t),p3o=i(H),T6=n(H,"LI",{});var uye=s(T6);Eie=n(uye,"STRONG",{});var AZr=s(Eie);u3o=r(AZr,"mobilebert"),AZr.forEach(t),_3o=r(uye," \u2014 "),HN=n(uye,"A",{href:!0});var yZr=s(HN);b3o=r(yZr,"MobileBertForMaskedLM"),yZr.forEach(t),v3o=r(uye," (MobileBERT model)"),uye.forEach(t),F3o=i(H),M6=n(H,"LI",{});var _ye=s(M6);Cie=n(_ye,"STRONG",{});var LZr=s(Cie);T3o=r(LZr,"mpnet"),LZr.forEach(t),M3o=r(_ye," \u2014 "),UN=n(_ye,"A",{href:!0});var xZr=s(UN);E3o=r(xZr,"MPNetForMaskedLM"),xZr.forEach(t),C3o=r(_ye," (MPNet model)"),_ye.forEach(t),w3o=i(H),E6=n(H,"LI",{});var bye=s(E6);wie=n(bye,"STRONG",{});var $Zr=s(wie);A3o=r($Zr,"nystromformer"),$Zr.forEach(t),y3o=r(bye," \u2014 "),JN=n(bye,"A",{href:!0});var kZr=s(JN);L3o=r(kZr,"NystromformerForMaskedLM"),kZr.forEach(t),x3o=r(bye," (Nystromformer model)"),bye.forEach(t),$3o=i(H),C6=n(H,"LI",{});var vye=s(C6);Aie=n(vye,"STRONG",{});var SZr=s(Aie);k3o=r(SZr,"perceiver"),SZr.forEach(t),S3o=r(vye," \u2014 "),YN=n(vye,"A",{href:!0});var RZr=s(YN);R3o=r(RZr,"PerceiverForMaskedLM"),RZr.forEach(t),B3o=r(vye," (Perceiver model)"),vye.forEach(t),P3o=i(H),w6=n(H,"LI",{});var Fye=s(w6);yie=n(Fye,"STRONG",{});var BZr=s(yie);I3o=r(BZr,"qdqbert"),BZr.forEach(t),q3o=r(Fye," \u2014 "),KN=n(Fye,"A",{href:!0});var PZr=s(KN);N3o=r(PZr,"QDQBertForMaskedLM"),PZr.forEach(t),j3o=r(Fye," (QDQBert model)"),Fye.forEach(t),D3o=i(H),A6=n(H,"LI",{});var Tye=s(A6);Lie=n(Tye,"STRONG",{});var IZr=s(Lie);G3o=r(IZr,"reformer"),IZr.forEach(t),O3o=r(Tye," \u2014 "),ZN=n(Tye,"A",{href:!0});var qZr=s(ZN);V3o=r(qZr,"ReformerForMaskedLM"),qZr.forEach(t),X3o=r(Tye," (Reformer model)"),Tye.forEach(t),z3o=i(H),y6=n(H,"LI",{});var Mye=s(y6);xie=n(Mye,"STRONG",{});var NZr=s(xie);Q3o=r(NZr,"rembert"),NZr.forEach(t),W3o=r(Mye," \u2014 "),ej=n(Mye,"A",{href:!0});var jZr=s(ej);H3o=r(jZr,"RemBertForMaskedLM"),jZr.forEach(t),U3o=r(Mye," (RemBERT model)"),Mye.forEach(t),J3o=i(H),L6=n(H,"LI",{});var Eye=s(L6);$ie=n(Eye,"STRONG",{});var DZr=s($ie);Y3o=r(DZr,"roberta"),DZr.forEach(t),K3o=r(Eye," \u2014 "),oj=n(Eye,"A",{href:!0});var GZr=s(oj);Z3o=r(GZr,"RobertaForMaskedLM"),GZr.forEach(t),ewo=r(Eye," (RoBERTa model)"),Eye.forEach(t),owo=i(H),x6=n(H,"LI",{});var Cye=s(x6);kie=n(Cye,"STRONG",{});var OZr=s(kie);rwo=r(OZr,"roformer"),OZr.forEach(t),two=r(Cye," \u2014 "),rj=n(Cye,"A",{href:!0});var VZr=s(rj);awo=r(VZr,"RoFormerForMaskedLM"),VZr.forEach(t),nwo=r(Cye," (RoFormer model)"),Cye.forEach(t),swo=i(H),$6=n(H,"LI",{});var wye=s($6);Sie=n(wye,"STRONG",{});var XZr=s(Sie);lwo=r(XZr,"squeezebert"),XZr.forEach(t),iwo=r(wye," \u2014 "),tj=n(wye,"A",{href:!0});var zZr=s(tj);dwo=r(zZr,"SqueezeBertForMaskedLM"),zZr.forEach(t),cwo=r(wye," (SqueezeBERT model)"),wye.forEach(t),fwo=i(H),k6=n(H,"LI",{});var Aye=s(k6);Rie=n(Aye,"STRONG",{});var QZr=s(Rie);mwo=r(QZr,"tapas"),QZr.forEach(t),gwo=r(Aye," \u2014 "),aj=n(Aye,"A",{href:!0});var WZr=s(aj);hwo=r(WZr,"TapasForMaskedLM"),WZr.forEach(t),pwo=r(Aye," (TAPAS model)"),Aye.forEach(t),uwo=i(H),S6=n(H,"LI",{});var yye=s(S6);Bie=n(yye,"STRONG",{});var HZr=s(Bie);_wo=r(HZr,"wav2vec2"),HZr.forEach(t),bwo=r(yye," \u2014 "),Pie=n(yye,"CODE",{});var UZr=s(Pie);vwo=r(UZr,"Wav2Vec2ForMaskedLM"),UZr.forEach(t),Fwo=r(yye," (Wav2Vec2 model)"),yye.forEach(t),Two=i(H),R6=n(H,"LI",{});var Lye=s(R6);Iie=n(Lye,"STRONG",{});var JZr=s(Iie);Mwo=r(JZr,"xlm"),JZr.forEach(t),Ewo=r(Lye," \u2014 "),nj=n(Lye,"A",{href:!0});var YZr=s(nj);Cwo=r(YZr,"XLMWithLMHeadModel"),YZr.forEach(t),wwo=r(Lye," (XLM model)"),Lye.forEach(t),Awo=i(H),B6=n(H,"LI",{});var xye=s(B6);qie=n(xye,"STRONG",{});var KZr=s(qie);ywo=r(KZr,"xlm-roberta"),KZr.forEach(t),Lwo=r(xye," \u2014 "),sj=n(xye,"A",{href:!0});var ZZr=s(sj);xwo=r(ZZr,"XLMRobertaForMaskedLM"),ZZr.forEach(t),$wo=r(xye," (XLM-RoBERTa model)"),xye.forEach(t),kwo=i(H),P6=n(H,"LI",{});var $ye=s(P6);Nie=n($ye,"STRONG",{});var eet=s(Nie);Swo=r(eet,"xlm-roberta-xl"),eet.forEach(t),Rwo=r($ye," \u2014 "),lj=n($ye,"A",{href:!0});var oet=s(lj);Bwo=r(oet,"XLMRobertaXLForMaskedLM"),oet.forEach(t),Pwo=r($ye," (XLM-RoBERTa-XL model)"),$ye.forEach(t),Iwo=i(H),I6=n(H,"LI",{});var kye=s(I6);jie=n(kye,"STRONG",{});var ret=s(jie);qwo=r(ret,"yoso"),ret.forEach(t),Nwo=r(kye," \u2014 "),ij=n(kye,"A",{href:!0});var tet=s(ij);jwo=r(tet,"YosoForMaskedLM"),tet.forEach(t),Dwo=r(kye," (YOSO model)"),kye.forEach(t),H.forEach(t),Gwo=i(Zt),q6=n(Zt,"P",{});var Sye=s(q6);Owo=r(Sye,"The model is set in evaluation mode by default using "),Die=n(Sye,"CODE",{});var aet=s(Die);Vwo=r(aet,"model.eval()"),aet.forEach(t),Xwo=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(Sye,"CODE",{});var net=s(Gie);zwo=r(net,"model.train()"),net.forEach(t),Sye.forEach(t),Qwo=i(Zt),T(N6.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),oPe=i(f),yi=n(f,"H2",{class:!0});var tqe=s(yi);j6=n(tqe,"A",{id:!0,class:!0,href:!0});var set=s(j6);Oie=n(set,"SPAN",{});var iet=s(Oie);T(Ty.$$.fragment,iet),iet.forEach(t),set.forEach(t),Wwo=i(tqe),Vie=n(tqe,"SPAN",{});var det=s(Vie);Hwo=r(det,"AutoModelForSeq2SeqLM"),det.forEach(t),tqe.forEach(t),rPe=i(f),So=n(f,"DIV",{class:!0});var js=s(So);T(My.$$.fragment,js),Uwo=i(js),Li=n(js,"P",{});var kY=s(Li);Jwo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dj=n(kY,"A",{href:!0});var cet=s(dj);Ywo=r(cet,"from_pretrained()"),cet.forEach(t),Kwo=r(kY," class method or the "),cj=n(kY,"A",{href:!0});var fet=s(cj);Zwo=r(fet,"from_config()"),fet.forEach(t),eAo=r(kY,` class
method.`),kY.forEach(t),oAo=i(js),Ey=n(js,"P",{});var aqe=s(Ey);rAo=r(aqe,"This class cannot be instantiated directly using "),Xie=n(aqe,"CODE",{});var met=s(Xie);tAo=r(met,"__init__()"),met.forEach(t),aAo=r(aqe," (throws an error)."),aqe.forEach(t),nAo=i(js),tt=n(js,"DIV",{class:!0});var Ow=s(tt);T(Cy.$$.fragment,Ow),sAo=i(Ow),zie=n(Ow,"P",{});var get=s(zie);lAo=r(get,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),get.forEach(t),iAo=i(Ow),xi=n(Ow,"P",{});var SY=s(xi);dAo=r(SY,`Note:
Loading a model from its configuration file does `),Qie=n(SY,"STRONG",{});var het=s(Qie);cAo=r(het,"not"),het.forEach(t),fAo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(SY,"A",{href:!0});var pet=s(fj);mAo=r(pet,"from_pretrained()"),pet.forEach(t),gAo=r(SY," to load the model weights."),SY.forEach(t),hAo=i(Ow),T(D6.$$.fragment,Ow),Ow.forEach(t),pAo=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(wy.$$.fragment,ea),uAo=i(ea),Wie=n(ea,"P",{});var uet=s(Wie);_Ao=r(uet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uet.forEach(t),bAo=i(ea),ya=n(ea,"P",{});var Vw=s(ya);vAo=r(Vw,"The model class to instantiate is selected based on the "),Hie=n(Vw,"CODE",{});var _et=s(Hie);FAo=r(_et,"model_type"),_et.forEach(t),TAo=r(Vw,` property of the config object (either
passed as an argument or loaded from `),Uie=n(Vw,"CODE",{});var bet=s(Uie);MAo=r(bet,"pretrained_model_name_or_path"),bet.forEach(t),EAo=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(Vw,"CODE",{});var vet=s(Jie);CAo=r(vet,"pretrained_model_name_or_path"),vet.forEach(t),wAo=r(Vw,":"),Vw.forEach(t),AAo=i(ea),he=n(ea,"UL",{});var ue=s(he);G6=n(ue,"LI",{});var Rye=s(G6);Yie=n(Rye,"STRONG",{});var Fet=s(Yie);yAo=r(Fet,"bart"),Fet.forEach(t),LAo=r(Rye," \u2014 "),mj=n(Rye,"A",{href:!0});var Tet=s(mj);xAo=r(Tet,"BartForConditionalGeneration"),Tet.forEach(t),$Ao=r(Rye," (BART model)"),Rye.forEach(t),kAo=i(ue),O6=n(ue,"LI",{});var Bye=s(O6);Kie=n(Bye,"STRONG",{});var Met=s(Kie);SAo=r(Met,"bigbird_pegasus"),Met.forEach(t),RAo=r(Bye," \u2014 "),gj=n(Bye,"A",{href:!0});var Eet=s(gj);BAo=r(Eet,"BigBirdPegasusForConditionalGeneration"),Eet.forEach(t),PAo=r(Bye," (BigBirdPegasus model)"),Bye.forEach(t),IAo=i(ue),V6=n(ue,"LI",{});var Pye=s(V6);Zie=n(Pye,"STRONG",{});var Cet=s(Zie);qAo=r(Cet,"blenderbot"),Cet.forEach(t),NAo=r(Pye," \u2014 "),hj=n(Pye,"A",{href:!0});var wet=s(hj);jAo=r(wet,"BlenderbotForConditionalGeneration"),wet.forEach(t),DAo=r(Pye," (Blenderbot model)"),Pye.forEach(t),GAo=i(ue),X6=n(ue,"LI",{});var Iye=s(X6);ede=n(Iye,"STRONG",{});var Aet=s(ede);OAo=r(Aet,"blenderbot-small"),Aet.forEach(t),VAo=r(Iye," \u2014 "),pj=n(Iye,"A",{href:!0});var yet=s(pj);XAo=r(yet,"BlenderbotSmallForConditionalGeneration"),yet.forEach(t),zAo=r(Iye," (BlenderbotSmall model)"),Iye.forEach(t),QAo=i(ue),z6=n(ue,"LI",{});var qye=s(z6);ode=n(qye,"STRONG",{});var Let=s(ode);WAo=r(Let,"encoder-decoder"),Let.forEach(t),HAo=r(qye," \u2014 "),uj=n(qye,"A",{href:!0});var xet=s(uj);UAo=r(xet,"EncoderDecoderModel"),xet.forEach(t),JAo=r(qye," (Encoder decoder model)"),qye.forEach(t),YAo=i(ue),Q6=n(ue,"LI",{});var Nye=s(Q6);rde=n(Nye,"STRONG",{});var $et=s(rde);KAo=r($et,"fsmt"),$et.forEach(t),ZAo=r(Nye," \u2014 "),_j=n(Nye,"A",{href:!0});var ket=s(_j);e0o=r(ket,"FSMTForConditionalGeneration"),ket.forEach(t),o0o=r(Nye," (FairSeq Machine-Translation model)"),Nye.forEach(t),r0o=i(ue),W6=n(ue,"LI",{});var jye=s(W6);tde=n(jye,"STRONG",{});var Set=s(tde);t0o=r(Set,"led"),Set.forEach(t),a0o=r(jye," \u2014 "),bj=n(jye,"A",{href:!0});var Ret=s(bj);n0o=r(Ret,"LEDForConditionalGeneration"),Ret.forEach(t),s0o=r(jye," (LED model)"),jye.forEach(t),l0o=i(ue),H6=n(ue,"LI",{});var Dye=s(H6);ade=n(Dye,"STRONG",{});var Bet=s(ade);i0o=r(Bet,"m2m_100"),Bet.forEach(t),d0o=r(Dye," \u2014 "),vj=n(Dye,"A",{href:!0});var Pet=s(vj);c0o=r(Pet,"M2M100ForConditionalGeneration"),Pet.forEach(t),f0o=r(Dye," (M2M100 model)"),Dye.forEach(t),m0o=i(ue),U6=n(ue,"LI",{});var Gye=s(U6);nde=n(Gye,"STRONG",{});var Iet=s(nde);g0o=r(Iet,"marian"),Iet.forEach(t),h0o=r(Gye," \u2014 "),Fj=n(Gye,"A",{href:!0});var qet=s(Fj);p0o=r(qet,"MarianMTModel"),qet.forEach(t),u0o=r(Gye," (Marian model)"),Gye.forEach(t),_0o=i(ue),J6=n(ue,"LI",{});var Oye=s(J6);sde=n(Oye,"STRONG",{});var Net=s(sde);b0o=r(Net,"mbart"),Net.forEach(t),v0o=r(Oye," \u2014 "),Tj=n(Oye,"A",{href:!0});var jet=s(Tj);F0o=r(jet,"MBartForConditionalGeneration"),jet.forEach(t),T0o=r(Oye," (mBART model)"),Oye.forEach(t),M0o=i(ue),Y6=n(ue,"LI",{});var Vye=s(Y6);lde=n(Vye,"STRONG",{});var Det=s(lde);E0o=r(Det,"mt5"),Det.forEach(t),C0o=r(Vye," \u2014 "),Mj=n(Vye,"A",{href:!0});var Get=s(Mj);w0o=r(Get,"MT5ForConditionalGeneration"),Get.forEach(t),A0o=r(Vye," (mT5 model)"),Vye.forEach(t),y0o=i(ue),K6=n(ue,"LI",{});var Xye=s(K6);ide=n(Xye,"STRONG",{});var Oet=s(ide);L0o=r(Oet,"pegasus"),Oet.forEach(t),x0o=r(Xye," \u2014 "),Ej=n(Xye,"A",{href:!0});var Vet=s(Ej);$0o=r(Vet,"PegasusForConditionalGeneration"),Vet.forEach(t),k0o=r(Xye," (Pegasus model)"),Xye.forEach(t),S0o=i(ue),Z6=n(ue,"LI",{});var zye=s(Z6);dde=n(zye,"STRONG",{});var Xet=s(dde);R0o=r(Xet,"plbart"),Xet.forEach(t),B0o=r(zye," \u2014 "),Cj=n(zye,"A",{href:!0});var zet=s(Cj);P0o=r(zet,"PLBartForConditionalGeneration"),zet.forEach(t),I0o=r(zye," (PLBart model)"),zye.forEach(t),q0o=i(ue),e1=n(ue,"LI",{});var Qye=s(e1);cde=n(Qye,"STRONG",{});var Qet=s(cde);N0o=r(Qet,"prophetnet"),Qet.forEach(t),j0o=r(Qye," \u2014 "),wj=n(Qye,"A",{href:!0});var Wet=s(wj);D0o=r(Wet,"ProphetNetForConditionalGeneration"),Wet.forEach(t),G0o=r(Qye," (ProphetNet model)"),Qye.forEach(t),O0o=i(ue),o1=n(ue,"LI",{});var Wye=s(o1);fde=n(Wye,"STRONG",{});var Het=s(fde);V0o=r(Het,"t5"),Het.forEach(t),X0o=r(Wye," \u2014 "),Aj=n(Wye,"A",{href:!0});var Uet=s(Aj);z0o=r(Uet,"T5ForConditionalGeneration"),Uet.forEach(t),Q0o=r(Wye," (T5 model)"),Wye.forEach(t),W0o=i(ue),r1=n(ue,"LI",{});var Hye=s(r1);mde=n(Hye,"STRONG",{});var Jet=s(mde);H0o=r(Jet,"tapex"),Jet.forEach(t),U0o=r(Hye," \u2014 "),yj=n(Hye,"A",{href:!0});var Yet=s(yj);J0o=r(Yet,"BartForConditionalGeneration"),Yet.forEach(t),Y0o=r(Hye," (TAPEX model)"),Hye.forEach(t),K0o=i(ue),t1=n(ue,"LI",{});var Uye=s(t1);gde=n(Uye,"STRONG",{});var Ket=s(gde);Z0o=r(Ket,"xlm-prophetnet"),Ket.forEach(t),eyo=r(Uye," \u2014 "),Lj=n(Uye,"A",{href:!0});var Zet=s(Lj);oyo=r(Zet,"XLMProphetNetForConditionalGeneration"),Zet.forEach(t),ryo=r(Uye," (XLMProphetNet model)"),Uye.forEach(t),ue.forEach(t),tyo=i(ea),a1=n(ea,"P",{});var Jye=s(a1);ayo=r(Jye,"The model is set in evaluation mode by default using "),hde=n(Jye,"CODE",{});var eot=s(hde);nyo=r(eot,"model.eval()"),eot.forEach(t),syo=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pde=n(Jye,"CODE",{});var oot=s(pde);lyo=r(oot,"model.train()"),oot.forEach(t),Jye.forEach(t),iyo=i(ea),T(n1.$$.fragment,ea),ea.forEach(t),js.forEach(t),tPe=i(f),$i=n(f,"H2",{class:!0});var nqe=s($i);s1=n(nqe,"A",{id:!0,class:!0,href:!0});var rot=s(s1);ude=n(rot,"SPAN",{});var tot=s(ude);T(Ay.$$.fragment,tot),tot.forEach(t),rot.forEach(t),dyo=i(nqe),_de=n(nqe,"SPAN",{});var aot=s(_de);cyo=r(aot,"AutoModelForSequenceClassification"),aot.forEach(t),nqe.forEach(t),aPe=i(f),Ro=n(f,"DIV",{class:!0});var Ds=s(Ro);T(yy.$$.fragment,Ds),fyo=i(Ds),ki=n(Ds,"P",{});var RY=s(ki);myo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xj=n(RY,"A",{href:!0});var not=s(xj);gyo=r(not,"from_pretrained()"),not.forEach(t),hyo=r(RY," class method or the "),$j=n(RY,"A",{href:!0});var sot=s($j);pyo=r(sot,"from_config()"),sot.forEach(t),uyo=r(RY,` class
method.`),RY.forEach(t),_yo=i(Ds),Ly=n(Ds,"P",{});var sqe=s(Ly);byo=r(sqe,"This class cannot be instantiated directly using "),bde=n(sqe,"CODE",{});var lot=s(bde);vyo=r(lot,"__init__()"),lot.forEach(t),Fyo=r(sqe," (throws an error)."),sqe.forEach(t),Tyo=i(Ds),at=n(Ds,"DIV",{class:!0});var Xw=s(at);T(xy.$$.fragment,Xw),Myo=i(Xw),vde=n(Xw,"P",{});var iot=s(vde);Eyo=r(iot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iot.forEach(t),Cyo=i(Xw),Si=n(Xw,"P",{});var BY=s(Si);wyo=r(BY,`Note:
Loading a model from its configuration file does `),Fde=n(BY,"STRONG",{});var dot=s(Fde);Ayo=r(dot,"not"),dot.forEach(t),yyo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=n(BY,"A",{href:!0});var cot=s(kj);Lyo=r(cot,"from_pretrained()"),cot.forEach(t),xyo=r(BY," to load the model weights."),BY.forEach(t),$yo=i(Xw),T(l1.$$.fragment,Xw),Xw.forEach(t),kyo=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T($y.$$.fragment,oa),Syo=i(oa),Tde=n(oa,"P",{});var fot=s(Tde);Ryo=r(fot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fot.forEach(t),Byo=i(oa),La=n(oa,"P",{});var zw=s(La);Pyo=r(zw,"The model class to instantiate is selected based on the "),Mde=n(zw,"CODE",{});var mot=s(Mde);Iyo=r(mot,"model_type"),mot.forEach(t),qyo=r(zw,` property of the config object (either
passed as an argument or loaded from `),Ede=n(zw,"CODE",{});var got=s(Ede);Nyo=r(got,"pretrained_model_name_or_path"),got.forEach(t),jyo=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cde=n(zw,"CODE",{});var hot=s(Cde);Dyo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),Gyo=r(zw,":"),zw.forEach(t),Oyo=i(oa),q=n(oa,"UL",{});var N=s(q);i1=n(N,"LI",{});var Yye=s(i1);wde=n(Yye,"STRONG",{});var pot=s(wde);Vyo=r(pot,"albert"),pot.forEach(t),Xyo=r(Yye," \u2014 "),Sj=n(Yye,"A",{href:!0});var uot=s(Sj);zyo=r(uot,"AlbertForSequenceClassification"),uot.forEach(t),Qyo=r(Yye," (ALBERT model)"),Yye.forEach(t),Wyo=i(N),d1=n(N,"LI",{});var Kye=s(d1);Ade=n(Kye,"STRONG",{});var _ot=s(Ade);Hyo=r(_ot,"bart"),_ot.forEach(t),Uyo=r(Kye," \u2014 "),Rj=n(Kye,"A",{href:!0});var bot=s(Rj);Jyo=r(bot,"BartForSequenceClassification"),bot.forEach(t),Yyo=r(Kye," (BART model)"),Kye.forEach(t),Kyo=i(N),c1=n(N,"LI",{});var Zye=s(c1);yde=n(Zye,"STRONG",{});var vot=s(yde);Zyo=r(vot,"bert"),vot.forEach(t),eLo=r(Zye," \u2014 "),Bj=n(Zye,"A",{href:!0});var Fot=s(Bj);oLo=r(Fot,"BertForSequenceClassification"),Fot.forEach(t),rLo=r(Zye," (BERT model)"),Zye.forEach(t),tLo=i(N),f1=n(N,"LI",{});var eLe=s(f1);Lde=n(eLe,"STRONG",{});var Tot=s(Lde);aLo=r(Tot,"big_bird"),Tot.forEach(t),nLo=r(eLe," \u2014 "),Pj=n(eLe,"A",{href:!0});var Mot=s(Pj);sLo=r(Mot,"BigBirdForSequenceClassification"),Mot.forEach(t),lLo=r(eLe," (BigBird model)"),eLe.forEach(t),iLo=i(N),m1=n(N,"LI",{});var oLe=s(m1);xde=n(oLe,"STRONG",{});var Eot=s(xde);dLo=r(Eot,"bigbird_pegasus"),Eot.forEach(t),cLo=r(oLe," \u2014 "),Ij=n(oLe,"A",{href:!0});var Cot=s(Ij);fLo=r(Cot,"BigBirdPegasusForSequenceClassification"),Cot.forEach(t),mLo=r(oLe," (BigBirdPegasus model)"),oLe.forEach(t),gLo=i(N),g1=n(N,"LI",{});var rLe=s(g1);$de=n(rLe,"STRONG",{});var wot=s($de);hLo=r(wot,"camembert"),wot.forEach(t),pLo=r(rLe," \u2014 "),qj=n(rLe,"A",{href:!0});var Aot=s(qj);uLo=r(Aot,"CamembertForSequenceClassification"),Aot.forEach(t),_Lo=r(rLe," (CamemBERT model)"),rLe.forEach(t),bLo=i(N),h1=n(N,"LI",{});var tLe=s(h1);kde=n(tLe,"STRONG",{});var yot=s(kde);vLo=r(yot,"canine"),yot.forEach(t),FLo=r(tLe," \u2014 "),Nj=n(tLe,"A",{href:!0});var Lot=s(Nj);TLo=r(Lot,"CanineForSequenceClassification"),Lot.forEach(t),MLo=r(tLe," (Canine model)"),tLe.forEach(t),ELo=i(N),p1=n(N,"LI",{});var aLe=s(p1);Sde=n(aLe,"STRONG",{});var xot=s(Sde);CLo=r(xot,"convbert"),xot.forEach(t),wLo=r(aLe," \u2014 "),jj=n(aLe,"A",{href:!0});var $ot=s(jj);ALo=r($ot,"ConvBertForSequenceClassification"),$ot.forEach(t),yLo=r(aLe," (ConvBERT model)"),aLe.forEach(t),LLo=i(N),u1=n(N,"LI",{});var nLe=s(u1);Rde=n(nLe,"STRONG",{});var kot=s(Rde);xLo=r(kot,"ctrl"),kot.forEach(t),$Lo=r(nLe," \u2014 "),Dj=n(nLe,"A",{href:!0});var Sot=s(Dj);kLo=r(Sot,"CTRLForSequenceClassification"),Sot.forEach(t),SLo=r(nLe," (CTRL model)"),nLe.forEach(t),RLo=i(N),_1=n(N,"LI",{});var sLe=s(_1);Bde=n(sLe,"STRONG",{});var Rot=s(Bde);BLo=r(Rot,"data2vec-text"),Rot.forEach(t),PLo=r(sLe," \u2014 "),Gj=n(sLe,"A",{href:!0});var Bot=s(Gj);ILo=r(Bot,"Data2VecTextForSequenceClassification"),Bot.forEach(t),qLo=r(sLe," (Data2VecText model)"),sLe.forEach(t),NLo=i(N),b1=n(N,"LI",{});var lLe=s(b1);Pde=n(lLe,"STRONG",{});var Pot=s(Pde);jLo=r(Pot,"deberta"),Pot.forEach(t),DLo=r(lLe," \u2014 "),Oj=n(lLe,"A",{href:!0});var Iot=s(Oj);GLo=r(Iot,"DebertaForSequenceClassification"),Iot.forEach(t),OLo=r(lLe," (DeBERTa model)"),lLe.forEach(t),VLo=i(N),v1=n(N,"LI",{});var iLe=s(v1);Ide=n(iLe,"STRONG",{});var qot=s(Ide);XLo=r(qot,"deberta-v2"),qot.forEach(t),zLo=r(iLe," \u2014 "),Vj=n(iLe,"A",{href:!0});var Not=s(Vj);QLo=r(Not,"DebertaV2ForSequenceClassification"),Not.forEach(t),WLo=r(iLe," (DeBERTa-v2 model)"),iLe.forEach(t),HLo=i(N),F1=n(N,"LI",{});var dLe=s(F1);qde=n(dLe,"STRONG",{});var jot=s(qde);ULo=r(jot,"distilbert"),jot.forEach(t),JLo=r(dLe," \u2014 "),Xj=n(dLe,"A",{href:!0});var Dot=s(Xj);YLo=r(Dot,"DistilBertForSequenceClassification"),Dot.forEach(t),KLo=r(dLe," (DistilBERT model)"),dLe.forEach(t),ZLo=i(N),T1=n(N,"LI",{});var cLe=s(T1);Nde=n(cLe,"STRONG",{});var Got=s(Nde);e8o=r(Got,"electra"),Got.forEach(t),o8o=r(cLe," \u2014 "),zj=n(cLe,"A",{href:!0});var Oot=s(zj);r8o=r(Oot,"ElectraForSequenceClassification"),Oot.forEach(t),t8o=r(cLe," (ELECTRA model)"),cLe.forEach(t),a8o=i(N),M1=n(N,"LI",{});var fLe=s(M1);jde=n(fLe,"STRONG",{});var Vot=s(jde);n8o=r(Vot,"flaubert"),Vot.forEach(t),s8o=r(fLe," \u2014 "),Qj=n(fLe,"A",{href:!0});var Xot=s(Qj);l8o=r(Xot,"FlaubertForSequenceClassification"),Xot.forEach(t),i8o=r(fLe," (FlauBERT model)"),fLe.forEach(t),d8o=i(N),E1=n(N,"LI",{});var mLe=s(E1);Dde=n(mLe,"STRONG",{});var zot=s(Dde);c8o=r(zot,"fnet"),zot.forEach(t),f8o=r(mLe," \u2014 "),Wj=n(mLe,"A",{href:!0});var Qot=s(Wj);m8o=r(Qot,"FNetForSequenceClassification"),Qot.forEach(t),g8o=r(mLe," (FNet model)"),mLe.forEach(t),h8o=i(N),C1=n(N,"LI",{});var gLe=s(C1);Gde=n(gLe,"STRONG",{});var Wot=s(Gde);p8o=r(Wot,"funnel"),Wot.forEach(t),u8o=r(gLe," \u2014 "),Hj=n(gLe,"A",{href:!0});var Hot=s(Hj);_8o=r(Hot,"FunnelForSequenceClassification"),Hot.forEach(t),b8o=r(gLe," (Funnel Transformer model)"),gLe.forEach(t),v8o=i(N),w1=n(N,"LI",{});var hLe=s(w1);Ode=n(hLe,"STRONG",{});var Uot=s(Ode);F8o=r(Uot,"gpt2"),Uot.forEach(t),T8o=r(hLe," \u2014 "),Uj=n(hLe,"A",{href:!0});var Jot=s(Uj);M8o=r(Jot,"GPT2ForSequenceClassification"),Jot.forEach(t),E8o=r(hLe," (OpenAI GPT-2 model)"),hLe.forEach(t),C8o=i(N),A1=n(N,"LI",{});var pLe=s(A1);Vde=n(pLe,"STRONG",{});var Yot=s(Vde);w8o=r(Yot,"gpt_neo"),Yot.forEach(t),A8o=r(pLe," \u2014 "),Jj=n(pLe,"A",{href:!0});var Kot=s(Jj);y8o=r(Kot,"GPTNeoForSequenceClassification"),Kot.forEach(t),L8o=r(pLe," (GPT Neo model)"),pLe.forEach(t),x8o=i(N),y1=n(N,"LI",{});var uLe=s(y1);Xde=n(uLe,"STRONG",{});var Zot=s(Xde);$8o=r(Zot,"gptj"),Zot.forEach(t),k8o=r(uLe," \u2014 "),Yj=n(uLe,"A",{href:!0});var ert=s(Yj);S8o=r(ert,"GPTJForSequenceClassification"),ert.forEach(t),R8o=r(uLe," (GPT-J model)"),uLe.forEach(t),B8o=i(N),L1=n(N,"LI",{});var _Le=s(L1);zde=n(_Le,"STRONG",{});var ort=s(zde);P8o=r(ort,"ibert"),ort.forEach(t),I8o=r(_Le," \u2014 "),Kj=n(_Le,"A",{href:!0});var rrt=s(Kj);q8o=r(rrt,"IBertForSequenceClassification"),rrt.forEach(t),N8o=r(_Le," (I-BERT model)"),_Le.forEach(t),j8o=i(N),x1=n(N,"LI",{});var bLe=s(x1);Qde=n(bLe,"STRONG",{});var trt=s(Qde);D8o=r(trt,"layoutlm"),trt.forEach(t),G8o=r(bLe," \u2014 "),Zj=n(bLe,"A",{href:!0});var art=s(Zj);O8o=r(art,"LayoutLMForSequenceClassification"),art.forEach(t),V8o=r(bLe," (LayoutLM model)"),bLe.forEach(t),X8o=i(N),$1=n(N,"LI",{});var vLe=s($1);Wde=n(vLe,"STRONG",{});var nrt=s(Wde);z8o=r(nrt,"layoutlmv2"),nrt.forEach(t),Q8o=r(vLe," \u2014 "),eD=n(vLe,"A",{href:!0});var srt=s(eD);W8o=r(srt,"LayoutLMv2ForSequenceClassification"),srt.forEach(t),H8o=r(vLe," (LayoutLMv2 model)"),vLe.forEach(t),U8o=i(N),k1=n(N,"LI",{});var FLe=s(k1);Hde=n(FLe,"STRONG",{});var lrt=s(Hde);J8o=r(lrt,"led"),lrt.forEach(t),Y8o=r(FLe," \u2014 "),oD=n(FLe,"A",{href:!0});var irt=s(oD);K8o=r(irt,"LEDForSequenceClassification"),irt.forEach(t),Z8o=r(FLe," (LED model)"),FLe.forEach(t),e7o=i(N),S1=n(N,"LI",{});var TLe=s(S1);Ude=n(TLe,"STRONG",{});var drt=s(Ude);o7o=r(drt,"longformer"),drt.forEach(t),r7o=r(TLe," \u2014 "),rD=n(TLe,"A",{href:!0});var crt=s(rD);t7o=r(crt,"LongformerForSequenceClassification"),crt.forEach(t),a7o=r(TLe," (Longformer model)"),TLe.forEach(t),n7o=i(N),R1=n(N,"LI",{});var MLe=s(R1);Jde=n(MLe,"STRONG",{});var frt=s(Jde);s7o=r(frt,"mbart"),frt.forEach(t),l7o=r(MLe," \u2014 "),tD=n(MLe,"A",{href:!0});var mrt=s(tD);i7o=r(mrt,"MBartForSequenceClassification"),mrt.forEach(t),d7o=r(MLe," (mBART model)"),MLe.forEach(t),c7o=i(N),B1=n(N,"LI",{});var ELe=s(B1);Yde=n(ELe,"STRONG",{});var grt=s(Yde);f7o=r(grt,"megatron-bert"),grt.forEach(t),m7o=r(ELe," \u2014 "),aD=n(ELe,"A",{href:!0});var hrt=s(aD);g7o=r(hrt,"MegatronBertForSequenceClassification"),hrt.forEach(t),h7o=r(ELe," (MegatronBert model)"),ELe.forEach(t),p7o=i(N),P1=n(N,"LI",{});var CLe=s(P1);Kde=n(CLe,"STRONG",{});var prt=s(Kde);u7o=r(prt,"mobilebert"),prt.forEach(t),_7o=r(CLe," \u2014 "),nD=n(CLe,"A",{href:!0});var urt=s(nD);b7o=r(urt,"MobileBertForSequenceClassification"),urt.forEach(t),v7o=r(CLe," (MobileBERT model)"),CLe.forEach(t),F7o=i(N),I1=n(N,"LI",{});var wLe=s(I1);Zde=n(wLe,"STRONG",{});var _rt=s(Zde);T7o=r(_rt,"mpnet"),_rt.forEach(t),M7o=r(wLe," \u2014 "),sD=n(wLe,"A",{href:!0});var brt=s(sD);E7o=r(brt,"MPNetForSequenceClassification"),brt.forEach(t),C7o=r(wLe," (MPNet model)"),wLe.forEach(t),w7o=i(N),q1=n(N,"LI",{});var ALe=s(q1);ece=n(ALe,"STRONG",{});var vrt=s(ece);A7o=r(vrt,"nystromformer"),vrt.forEach(t),y7o=r(ALe," \u2014 "),lD=n(ALe,"A",{href:!0});var Frt=s(lD);L7o=r(Frt,"NystromformerForSequenceClassification"),Frt.forEach(t),x7o=r(ALe," (Nystromformer model)"),ALe.forEach(t),$7o=i(N),N1=n(N,"LI",{});var yLe=s(N1);oce=n(yLe,"STRONG",{});var Trt=s(oce);k7o=r(Trt,"openai-gpt"),Trt.forEach(t),S7o=r(yLe," \u2014 "),iD=n(yLe,"A",{href:!0});var Mrt=s(iD);R7o=r(Mrt,"OpenAIGPTForSequenceClassification"),Mrt.forEach(t),B7o=r(yLe," (OpenAI GPT model)"),yLe.forEach(t),P7o=i(N),j1=n(N,"LI",{});var LLe=s(j1);rce=n(LLe,"STRONG",{});var Ert=s(rce);I7o=r(Ert,"perceiver"),Ert.forEach(t),q7o=r(LLe," \u2014 "),dD=n(LLe,"A",{href:!0});var Crt=s(dD);N7o=r(Crt,"PerceiverForSequenceClassification"),Crt.forEach(t),j7o=r(LLe," (Perceiver model)"),LLe.forEach(t),D7o=i(N),D1=n(N,"LI",{});var xLe=s(D1);tce=n(xLe,"STRONG",{});var wrt=s(tce);G7o=r(wrt,"plbart"),wrt.forEach(t),O7o=r(xLe," \u2014 "),cD=n(xLe,"A",{href:!0});var Art=s(cD);V7o=r(Art,"PLBartForSequenceClassification"),Art.forEach(t),X7o=r(xLe," (PLBart model)"),xLe.forEach(t),z7o=i(N),G1=n(N,"LI",{});var $Le=s(G1);ace=n($Le,"STRONG",{});var yrt=s(ace);Q7o=r(yrt,"qdqbert"),yrt.forEach(t),W7o=r($Le," \u2014 "),fD=n($Le,"A",{href:!0});var Lrt=s(fD);H7o=r(Lrt,"QDQBertForSequenceClassification"),Lrt.forEach(t),U7o=r($Le," (QDQBert model)"),$Le.forEach(t),J7o=i(N),O1=n(N,"LI",{});var kLe=s(O1);nce=n(kLe,"STRONG",{});var xrt=s(nce);Y7o=r(xrt,"reformer"),xrt.forEach(t),K7o=r(kLe," \u2014 "),mD=n(kLe,"A",{href:!0});var $rt=s(mD);Z7o=r($rt,"ReformerForSequenceClassification"),$rt.forEach(t),exo=r(kLe," (Reformer model)"),kLe.forEach(t),oxo=i(N),V1=n(N,"LI",{});var SLe=s(V1);sce=n(SLe,"STRONG",{});var krt=s(sce);rxo=r(krt,"rembert"),krt.forEach(t),txo=r(SLe," \u2014 "),gD=n(SLe,"A",{href:!0});var Srt=s(gD);axo=r(Srt,"RemBertForSequenceClassification"),Srt.forEach(t),nxo=r(SLe," (RemBERT model)"),SLe.forEach(t),sxo=i(N),X1=n(N,"LI",{});var RLe=s(X1);lce=n(RLe,"STRONG",{});var Rrt=s(lce);lxo=r(Rrt,"roberta"),Rrt.forEach(t),ixo=r(RLe," \u2014 "),hD=n(RLe,"A",{href:!0});var Brt=s(hD);dxo=r(Brt,"RobertaForSequenceClassification"),Brt.forEach(t),cxo=r(RLe," (RoBERTa model)"),RLe.forEach(t),fxo=i(N),z1=n(N,"LI",{});var BLe=s(z1);ice=n(BLe,"STRONG",{});var Prt=s(ice);mxo=r(Prt,"roformer"),Prt.forEach(t),gxo=r(BLe," \u2014 "),pD=n(BLe,"A",{href:!0});var Irt=s(pD);hxo=r(Irt,"RoFormerForSequenceClassification"),Irt.forEach(t),pxo=r(BLe," (RoFormer model)"),BLe.forEach(t),uxo=i(N),Q1=n(N,"LI",{});var PLe=s(Q1);dce=n(PLe,"STRONG",{});var qrt=s(dce);_xo=r(qrt,"squeezebert"),qrt.forEach(t),bxo=r(PLe," \u2014 "),uD=n(PLe,"A",{href:!0});var Nrt=s(uD);vxo=r(Nrt,"SqueezeBertForSequenceClassification"),Nrt.forEach(t),Fxo=r(PLe," (SqueezeBERT model)"),PLe.forEach(t),Txo=i(N),W1=n(N,"LI",{});var ILe=s(W1);cce=n(ILe,"STRONG",{});var jrt=s(cce);Mxo=r(jrt,"tapas"),jrt.forEach(t),Exo=r(ILe," \u2014 "),_D=n(ILe,"A",{href:!0});var Drt=s(_D);Cxo=r(Drt,"TapasForSequenceClassification"),Drt.forEach(t),wxo=r(ILe," (TAPAS model)"),ILe.forEach(t),Axo=i(N),H1=n(N,"LI",{});var qLe=s(H1);fce=n(qLe,"STRONG",{});var Grt=s(fce);yxo=r(Grt,"tapex"),Grt.forEach(t),Lxo=r(qLe," \u2014 "),bD=n(qLe,"A",{href:!0});var Ort=s(bD);xxo=r(Ort,"BartForSequenceClassification"),Ort.forEach(t),$xo=r(qLe," (TAPEX model)"),qLe.forEach(t),kxo=i(N),U1=n(N,"LI",{});var NLe=s(U1);mce=n(NLe,"STRONG",{});var Vrt=s(mce);Sxo=r(Vrt,"transfo-xl"),Vrt.forEach(t),Rxo=r(NLe," \u2014 "),vD=n(NLe,"A",{href:!0});var Xrt=s(vD);Bxo=r(Xrt,"TransfoXLForSequenceClassification"),Xrt.forEach(t),Pxo=r(NLe," (Transformer-XL model)"),NLe.forEach(t),Ixo=i(N),J1=n(N,"LI",{});var jLe=s(J1);gce=n(jLe,"STRONG",{});var zrt=s(gce);qxo=r(zrt,"xlm"),zrt.forEach(t),Nxo=r(jLe," \u2014 "),FD=n(jLe,"A",{href:!0});var Qrt=s(FD);jxo=r(Qrt,"XLMForSequenceClassification"),Qrt.forEach(t),Dxo=r(jLe," (XLM model)"),jLe.forEach(t),Gxo=i(N),Y1=n(N,"LI",{});var DLe=s(Y1);hce=n(DLe,"STRONG",{});var Wrt=s(hce);Oxo=r(Wrt,"xlm-roberta"),Wrt.forEach(t),Vxo=r(DLe," \u2014 "),TD=n(DLe,"A",{href:!0});var Hrt=s(TD);Xxo=r(Hrt,"XLMRobertaForSequenceClassification"),Hrt.forEach(t),zxo=r(DLe," (XLM-RoBERTa model)"),DLe.forEach(t),Qxo=i(N),K1=n(N,"LI",{});var GLe=s(K1);pce=n(GLe,"STRONG",{});var Urt=s(pce);Wxo=r(Urt,"xlm-roberta-xl"),Urt.forEach(t),Hxo=r(GLe," \u2014 "),MD=n(GLe,"A",{href:!0});var Jrt=s(MD);Uxo=r(Jrt,"XLMRobertaXLForSequenceClassification"),Jrt.forEach(t),Jxo=r(GLe," (XLM-RoBERTa-XL model)"),GLe.forEach(t),Yxo=i(N),Z1=n(N,"LI",{});var OLe=s(Z1);uce=n(OLe,"STRONG",{});var Yrt=s(uce);Kxo=r(Yrt,"xlnet"),Yrt.forEach(t),Zxo=r(OLe," \u2014 "),ED=n(OLe,"A",{href:!0});var Krt=s(ED);e9o=r(Krt,"XLNetForSequenceClassification"),Krt.forEach(t),o9o=r(OLe," (XLNet model)"),OLe.forEach(t),r9o=i(N),eb=n(N,"LI",{});var VLe=s(eb);_ce=n(VLe,"STRONG",{});var Zrt=s(_ce);t9o=r(Zrt,"yoso"),Zrt.forEach(t),a9o=r(VLe," \u2014 "),CD=n(VLe,"A",{href:!0});var ett=s(CD);n9o=r(ett,"YosoForSequenceClassification"),ett.forEach(t),s9o=r(VLe," (YOSO model)"),VLe.forEach(t),N.forEach(t),l9o=i(oa),ob=n(oa,"P",{});var XLe=s(ob);i9o=r(XLe,"The model is set in evaluation mode by default using "),bce=n(XLe,"CODE",{});var ott=s(bce);d9o=r(ott,"model.eval()"),ott.forEach(t),c9o=r(XLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(XLe,"CODE",{});var rtt=s(vce);f9o=r(rtt,"model.train()"),rtt.forEach(t),XLe.forEach(t),m9o=i(oa),T(rb.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),nPe=i(f),Ri=n(f,"H2",{class:!0});var lqe=s(Ri);tb=n(lqe,"A",{id:!0,class:!0,href:!0});var ttt=s(tb);Fce=n(ttt,"SPAN",{});var att=s(Fce);T(ky.$$.fragment,att),att.forEach(t),ttt.forEach(t),g9o=i(lqe),Tce=n(lqe,"SPAN",{});var ntt=s(Tce);h9o=r(ntt,"AutoModelForMultipleChoice"),ntt.forEach(t),lqe.forEach(t),sPe=i(f),Bo=n(f,"DIV",{class:!0});var Gs=s(Bo);T(Sy.$$.fragment,Gs),p9o=i(Gs),Bi=n(Gs,"P",{});var PY=s(Bi);u9o=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wD=n(PY,"A",{href:!0});var stt=s(wD);_9o=r(stt,"from_pretrained()"),stt.forEach(t),b9o=r(PY," class method or the "),AD=n(PY,"A",{href:!0});var ltt=s(AD);v9o=r(ltt,"from_config()"),ltt.forEach(t),F9o=r(PY,` class
method.`),PY.forEach(t),T9o=i(Gs),Ry=n(Gs,"P",{});var iqe=s(Ry);M9o=r(iqe,"This class cannot be instantiated directly using "),Mce=n(iqe,"CODE",{});var itt=s(Mce);E9o=r(itt,"__init__()"),itt.forEach(t),C9o=r(iqe," (throws an error)."),iqe.forEach(t),w9o=i(Gs),nt=n(Gs,"DIV",{class:!0});var Qw=s(nt);T(By.$$.fragment,Qw),A9o=i(Qw),Ece=n(Qw,"P",{});var dtt=s(Ece);y9o=r(dtt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dtt.forEach(t),L9o=i(Qw),Pi=n(Qw,"P",{});var IY=s(Pi);x9o=r(IY,`Note:
Loading a model from its configuration file does `),Cce=n(IY,"STRONG",{});var ctt=s(Cce);$9o=r(ctt,"not"),ctt.forEach(t),k9o=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),yD=n(IY,"A",{href:!0});var ftt=s(yD);S9o=r(ftt,"from_pretrained()"),ftt.forEach(t),R9o=r(IY," to load the model weights."),IY.forEach(t),B9o=i(Qw),T(ab.$$.fragment,Qw),Qw.forEach(t),P9o=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T(Py.$$.fragment,ra),I9o=i(ra),wce=n(ra,"P",{});var mtt=s(wce);q9o=r(mtt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mtt.forEach(t),N9o=i(ra),xa=n(ra,"P",{});var Ww=s(xa);j9o=r(Ww,"The model class to instantiate is selected based on the "),Ace=n(Ww,"CODE",{});var gtt=s(Ace);D9o=r(gtt,"model_type"),gtt.forEach(t),G9o=r(Ww,` property of the config object (either
passed as an argument or loaded from `),yce=n(Ww,"CODE",{});var htt=s(yce);O9o=r(htt,"pretrained_model_name_or_path"),htt.forEach(t),V9o=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lce=n(Ww,"CODE",{});var ptt=s(Lce);X9o=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),z9o=r(Ww,":"),Ww.forEach(t),Q9o=i(ra),Y=n(ra,"UL",{});var K=s(Y);nb=n(K,"LI",{});var zLe=s(nb);xce=n(zLe,"STRONG",{});var utt=s(xce);W9o=r(utt,"albert"),utt.forEach(t),H9o=r(zLe," \u2014 "),LD=n(zLe,"A",{href:!0});var _tt=s(LD);U9o=r(_tt,"AlbertForMultipleChoice"),_tt.forEach(t),J9o=r(zLe," (ALBERT model)"),zLe.forEach(t),Y9o=i(K),sb=n(K,"LI",{});var QLe=s(sb);$ce=n(QLe,"STRONG",{});var btt=s($ce);K9o=r(btt,"bert"),btt.forEach(t),Z9o=r(QLe," \u2014 "),xD=n(QLe,"A",{href:!0});var vtt=s(xD);e$o=r(vtt,"BertForMultipleChoice"),vtt.forEach(t),o$o=r(QLe," (BERT model)"),QLe.forEach(t),r$o=i(K),lb=n(K,"LI",{});var WLe=s(lb);kce=n(WLe,"STRONG",{});var Ftt=s(kce);t$o=r(Ftt,"big_bird"),Ftt.forEach(t),a$o=r(WLe," \u2014 "),$D=n(WLe,"A",{href:!0});var Ttt=s($D);n$o=r(Ttt,"BigBirdForMultipleChoice"),Ttt.forEach(t),s$o=r(WLe," (BigBird model)"),WLe.forEach(t),l$o=i(K),ib=n(K,"LI",{});var HLe=s(ib);Sce=n(HLe,"STRONG",{});var Mtt=s(Sce);i$o=r(Mtt,"camembert"),Mtt.forEach(t),d$o=r(HLe," \u2014 "),kD=n(HLe,"A",{href:!0});var Ett=s(kD);c$o=r(Ett,"CamembertForMultipleChoice"),Ett.forEach(t),f$o=r(HLe," (CamemBERT model)"),HLe.forEach(t),m$o=i(K),db=n(K,"LI",{});var ULe=s(db);Rce=n(ULe,"STRONG",{});var Ctt=s(Rce);g$o=r(Ctt,"canine"),Ctt.forEach(t),h$o=r(ULe," \u2014 "),SD=n(ULe,"A",{href:!0});var wtt=s(SD);p$o=r(wtt,"CanineForMultipleChoice"),wtt.forEach(t),u$o=r(ULe," (Canine model)"),ULe.forEach(t),_$o=i(K),cb=n(K,"LI",{});var JLe=s(cb);Bce=n(JLe,"STRONG",{});var Att=s(Bce);b$o=r(Att,"convbert"),Att.forEach(t),v$o=r(JLe," \u2014 "),RD=n(JLe,"A",{href:!0});var ytt=s(RD);F$o=r(ytt,"ConvBertForMultipleChoice"),ytt.forEach(t),T$o=r(JLe," (ConvBERT model)"),JLe.forEach(t),M$o=i(K),fb=n(K,"LI",{});var YLe=s(fb);Pce=n(YLe,"STRONG",{});var Ltt=s(Pce);E$o=r(Ltt,"data2vec-text"),Ltt.forEach(t),C$o=r(YLe," \u2014 "),BD=n(YLe,"A",{href:!0});var xtt=s(BD);w$o=r(xtt,"Data2VecTextForMultipleChoice"),xtt.forEach(t),A$o=r(YLe," (Data2VecText model)"),YLe.forEach(t),y$o=i(K),mb=n(K,"LI",{});var KLe=s(mb);Ice=n(KLe,"STRONG",{});var $tt=s(Ice);L$o=r($tt,"distilbert"),$tt.forEach(t),x$o=r(KLe," \u2014 "),PD=n(KLe,"A",{href:!0});var ktt=s(PD);$$o=r(ktt,"DistilBertForMultipleChoice"),ktt.forEach(t),k$o=r(KLe," (DistilBERT model)"),KLe.forEach(t),S$o=i(K),gb=n(K,"LI",{});var ZLe=s(gb);qce=n(ZLe,"STRONG",{});var Stt=s(qce);R$o=r(Stt,"electra"),Stt.forEach(t),B$o=r(ZLe," \u2014 "),ID=n(ZLe,"A",{href:!0});var Rtt=s(ID);P$o=r(Rtt,"ElectraForMultipleChoice"),Rtt.forEach(t),I$o=r(ZLe," (ELECTRA model)"),ZLe.forEach(t),q$o=i(K),hb=n(K,"LI",{});var e8e=s(hb);Nce=n(e8e,"STRONG",{});var Btt=s(Nce);N$o=r(Btt,"flaubert"),Btt.forEach(t),j$o=r(e8e," \u2014 "),qD=n(e8e,"A",{href:!0});var Ptt=s(qD);D$o=r(Ptt,"FlaubertForMultipleChoice"),Ptt.forEach(t),G$o=r(e8e," (FlauBERT model)"),e8e.forEach(t),O$o=i(K),pb=n(K,"LI",{});var o8e=s(pb);jce=n(o8e,"STRONG",{});var Itt=s(jce);V$o=r(Itt,"fnet"),Itt.forEach(t),X$o=r(o8e," \u2014 "),ND=n(o8e,"A",{href:!0});var qtt=s(ND);z$o=r(qtt,"FNetForMultipleChoice"),qtt.forEach(t),Q$o=r(o8e," (FNet model)"),o8e.forEach(t),W$o=i(K),ub=n(K,"LI",{});var r8e=s(ub);Dce=n(r8e,"STRONG",{});var Ntt=s(Dce);H$o=r(Ntt,"funnel"),Ntt.forEach(t),U$o=r(r8e," \u2014 "),jD=n(r8e,"A",{href:!0});var jtt=s(jD);J$o=r(jtt,"FunnelForMultipleChoice"),jtt.forEach(t),Y$o=r(r8e," (Funnel Transformer model)"),r8e.forEach(t),K$o=i(K),_b=n(K,"LI",{});var t8e=s(_b);Gce=n(t8e,"STRONG",{});var Dtt=s(Gce);Z$o=r(Dtt,"ibert"),Dtt.forEach(t),eko=r(t8e," \u2014 "),DD=n(t8e,"A",{href:!0});var Gtt=s(DD);oko=r(Gtt,"IBertForMultipleChoice"),Gtt.forEach(t),rko=r(t8e," (I-BERT model)"),t8e.forEach(t),tko=i(K),bb=n(K,"LI",{});var a8e=s(bb);Oce=n(a8e,"STRONG",{});var Ott=s(Oce);ako=r(Ott,"longformer"),Ott.forEach(t),nko=r(a8e," \u2014 "),GD=n(a8e,"A",{href:!0});var Vtt=s(GD);sko=r(Vtt,"LongformerForMultipleChoice"),Vtt.forEach(t),lko=r(a8e," (Longformer model)"),a8e.forEach(t),iko=i(K),vb=n(K,"LI",{});var n8e=s(vb);Vce=n(n8e,"STRONG",{});var Xtt=s(Vce);dko=r(Xtt,"megatron-bert"),Xtt.forEach(t),cko=r(n8e," \u2014 "),OD=n(n8e,"A",{href:!0});var ztt=s(OD);fko=r(ztt,"MegatronBertForMultipleChoice"),ztt.forEach(t),mko=r(n8e," (MegatronBert model)"),n8e.forEach(t),gko=i(K),Fb=n(K,"LI",{});var s8e=s(Fb);Xce=n(s8e,"STRONG",{});var Qtt=s(Xce);hko=r(Qtt,"mobilebert"),Qtt.forEach(t),pko=r(s8e," \u2014 "),VD=n(s8e,"A",{href:!0});var Wtt=s(VD);uko=r(Wtt,"MobileBertForMultipleChoice"),Wtt.forEach(t),_ko=r(s8e," (MobileBERT model)"),s8e.forEach(t),bko=i(K),Tb=n(K,"LI",{});var l8e=s(Tb);zce=n(l8e,"STRONG",{});var Htt=s(zce);vko=r(Htt,"mpnet"),Htt.forEach(t),Fko=r(l8e," \u2014 "),XD=n(l8e,"A",{href:!0});var Utt=s(XD);Tko=r(Utt,"MPNetForMultipleChoice"),Utt.forEach(t),Mko=r(l8e," (MPNet model)"),l8e.forEach(t),Eko=i(K),Mb=n(K,"LI",{});var i8e=s(Mb);Qce=n(i8e,"STRONG",{});var Jtt=s(Qce);Cko=r(Jtt,"nystromformer"),Jtt.forEach(t),wko=r(i8e," \u2014 "),zD=n(i8e,"A",{href:!0});var Ytt=s(zD);Ako=r(Ytt,"NystromformerForMultipleChoice"),Ytt.forEach(t),yko=r(i8e," (Nystromformer model)"),i8e.forEach(t),Lko=i(K),Eb=n(K,"LI",{});var d8e=s(Eb);Wce=n(d8e,"STRONG",{});var Ktt=s(Wce);xko=r(Ktt,"qdqbert"),Ktt.forEach(t),$ko=r(d8e," \u2014 "),QD=n(d8e,"A",{href:!0});var Ztt=s(QD);kko=r(Ztt,"QDQBertForMultipleChoice"),Ztt.forEach(t),Sko=r(d8e," (QDQBert model)"),d8e.forEach(t),Rko=i(K),Cb=n(K,"LI",{});var c8e=s(Cb);Hce=n(c8e,"STRONG",{});var eat=s(Hce);Bko=r(eat,"rembert"),eat.forEach(t),Pko=r(c8e," \u2014 "),WD=n(c8e,"A",{href:!0});var oat=s(WD);Iko=r(oat,"RemBertForMultipleChoice"),oat.forEach(t),qko=r(c8e," (RemBERT model)"),c8e.forEach(t),Nko=i(K),wb=n(K,"LI",{});var f8e=s(wb);Uce=n(f8e,"STRONG",{});var rat=s(Uce);jko=r(rat,"roberta"),rat.forEach(t),Dko=r(f8e," \u2014 "),HD=n(f8e,"A",{href:!0});var tat=s(HD);Gko=r(tat,"RobertaForMultipleChoice"),tat.forEach(t),Oko=r(f8e," (RoBERTa model)"),f8e.forEach(t),Vko=i(K),Ab=n(K,"LI",{});var m8e=s(Ab);Jce=n(m8e,"STRONG",{});var aat=s(Jce);Xko=r(aat,"roformer"),aat.forEach(t),zko=r(m8e," \u2014 "),UD=n(m8e,"A",{href:!0});var nat=s(UD);Qko=r(nat,"RoFormerForMultipleChoice"),nat.forEach(t),Wko=r(m8e," (RoFormer model)"),m8e.forEach(t),Hko=i(K),yb=n(K,"LI",{});var g8e=s(yb);Yce=n(g8e,"STRONG",{});var sat=s(Yce);Uko=r(sat,"squeezebert"),sat.forEach(t),Jko=r(g8e," \u2014 "),JD=n(g8e,"A",{href:!0});var lat=s(JD);Yko=r(lat,"SqueezeBertForMultipleChoice"),lat.forEach(t),Kko=r(g8e," (SqueezeBERT model)"),g8e.forEach(t),Zko=i(K),Lb=n(K,"LI",{});var h8e=s(Lb);Kce=n(h8e,"STRONG",{});var iat=s(Kce);eSo=r(iat,"xlm"),iat.forEach(t),oSo=r(h8e," \u2014 "),YD=n(h8e,"A",{href:!0});var dat=s(YD);rSo=r(dat,"XLMForMultipleChoice"),dat.forEach(t),tSo=r(h8e," (XLM model)"),h8e.forEach(t),aSo=i(K),xb=n(K,"LI",{});var p8e=s(xb);Zce=n(p8e,"STRONG",{});var cat=s(Zce);nSo=r(cat,"xlm-roberta"),cat.forEach(t),sSo=r(p8e," \u2014 "),KD=n(p8e,"A",{href:!0});var fat=s(KD);lSo=r(fat,"XLMRobertaForMultipleChoice"),fat.forEach(t),iSo=r(p8e," (XLM-RoBERTa model)"),p8e.forEach(t),dSo=i(K),$b=n(K,"LI",{});var u8e=s($b);efe=n(u8e,"STRONG",{});var mat=s(efe);cSo=r(mat,"xlm-roberta-xl"),mat.forEach(t),fSo=r(u8e," \u2014 "),ZD=n(u8e,"A",{href:!0});var gat=s(ZD);mSo=r(gat,"XLMRobertaXLForMultipleChoice"),gat.forEach(t),gSo=r(u8e," (XLM-RoBERTa-XL model)"),u8e.forEach(t),hSo=i(K),kb=n(K,"LI",{});var _8e=s(kb);ofe=n(_8e,"STRONG",{});var hat=s(ofe);pSo=r(hat,"xlnet"),hat.forEach(t),uSo=r(_8e," \u2014 "),eG=n(_8e,"A",{href:!0});var pat=s(eG);_So=r(pat,"XLNetForMultipleChoice"),pat.forEach(t),bSo=r(_8e," (XLNet model)"),_8e.forEach(t),vSo=i(K),Sb=n(K,"LI",{});var b8e=s(Sb);rfe=n(b8e,"STRONG",{});var uat=s(rfe);FSo=r(uat,"yoso"),uat.forEach(t),TSo=r(b8e," \u2014 "),oG=n(b8e,"A",{href:!0});var _at=s(oG);MSo=r(_at,"YosoForMultipleChoice"),_at.forEach(t),ESo=r(b8e," (YOSO model)"),b8e.forEach(t),K.forEach(t),CSo=i(ra),Rb=n(ra,"P",{});var v8e=s(Rb);wSo=r(v8e,"The model is set in evaluation mode by default using "),tfe=n(v8e,"CODE",{});var bat=s(tfe);ASo=r(bat,"model.eval()"),bat.forEach(t),ySo=r(v8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(v8e,"CODE",{});var vat=s(afe);LSo=r(vat,"model.train()"),vat.forEach(t),v8e.forEach(t),xSo=i(ra),T(Bb.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),lPe=i(f),Ii=n(f,"H2",{class:!0});var dqe=s(Ii);Pb=n(dqe,"A",{id:!0,class:!0,href:!0});var Fat=s(Pb);nfe=n(Fat,"SPAN",{});var Tat=s(nfe);T(Iy.$$.fragment,Tat),Tat.forEach(t),Fat.forEach(t),$So=i(dqe),sfe=n(dqe,"SPAN",{});var Mat=s(sfe);kSo=r(Mat,"AutoModelForNextSentencePrediction"),Mat.forEach(t),dqe.forEach(t),iPe=i(f),Po=n(f,"DIV",{class:!0});var Os=s(Po);T(qy.$$.fragment,Os),SSo=i(Os),qi=n(Os,"P",{});var qY=s(qi);RSo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rG=n(qY,"A",{href:!0});var Eat=s(rG);BSo=r(Eat,"from_pretrained()"),Eat.forEach(t),PSo=r(qY," class method or the "),tG=n(qY,"A",{href:!0});var Cat=s(tG);ISo=r(Cat,"from_config()"),Cat.forEach(t),qSo=r(qY,` class
method.`),qY.forEach(t),NSo=i(Os),Ny=n(Os,"P",{});var cqe=s(Ny);jSo=r(cqe,"This class cannot be instantiated directly using "),lfe=n(cqe,"CODE",{});var wat=s(lfe);DSo=r(wat,"__init__()"),wat.forEach(t),GSo=r(cqe," (throws an error)."),cqe.forEach(t),OSo=i(Os),st=n(Os,"DIV",{class:!0});var Hw=s(st);T(jy.$$.fragment,Hw),VSo=i(Hw),ife=n(Hw,"P",{});var Aat=s(ife);XSo=r(Aat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Aat.forEach(t),zSo=i(Hw),Ni=n(Hw,"P",{});var NY=s(Ni);QSo=r(NY,`Note:
Loading a model from its configuration file does `),dfe=n(NY,"STRONG",{});var yat=s(dfe);WSo=r(yat,"not"),yat.forEach(t),HSo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(NY,"A",{href:!0});var Lat=s(aG);USo=r(Lat,"from_pretrained()"),Lat.forEach(t),JSo=r(NY," to load the model weights."),NY.forEach(t),YSo=i(Hw),T(Ib.$$.fragment,Hw),Hw.forEach(t),KSo=i(Os),oo=n(Os,"DIV",{class:!0});var ta=s(oo);T(Dy.$$.fragment,ta),ZSo=i(ta),cfe=n(ta,"P",{});var xat=s(cfe);eRo=r(xat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xat.forEach(t),oRo=i(ta),$a=n(ta,"P",{});var Uw=s($a);rRo=r(Uw,"The model class to instantiate is selected based on the "),ffe=n(Uw,"CODE",{});var $at=s(ffe);tRo=r($at,"model_type"),$at.forEach(t),aRo=r(Uw,` property of the config object (either
passed as an argument or loaded from `),mfe=n(Uw,"CODE",{});var kat=s(mfe);nRo=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),sRo=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gfe=n(Uw,"CODE",{});var Sat=s(gfe);lRo=r(Sat,"pretrained_model_name_or_path"),Sat.forEach(t),iRo=r(Uw,":"),Uw.forEach(t),dRo=i(ta),Ur=n(ta,"UL",{});var Vs=s(Ur);qb=n(Vs,"LI",{});var F8e=s(qb);hfe=n(F8e,"STRONG",{});var Rat=s(hfe);cRo=r(Rat,"bert"),Rat.forEach(t),fRo=r(F8e," \u2014 "),nG=n(F8e,"A",{href:!0});var Bat=s(nG);mRo=r(Bat,"BertForNextSentencePrediction"),Bat.forEach(t),gRo=r(F8e," (BERT model)"),F8e.forEach(t),hRo=i(Vs),Nb=n(Vs,"LI",{});var T8e=s(Nb);pfe=n(T8e,"STRONG",{});var Pat=s(pfe);pRo=r(Pat,"fnet"),Pat.forEach(t),uRo=r(T8e," \u2014 "),sG=n(T8e,"A",{href:!0});var Iat=s(sG);_Ro=r(Iat,"FNetForNextSentencePrediction"),Iat.forEach(t),bRo=r(T8e," (FNet model)"),T8e.forEach(t),vRo=i(Vs),jb=n(Vs,"LI",{});var M8e=s(jb);ufe=n(M8e,"STRONG",{});var qat=s(ufe);FRo=r(qat,"megatron-bert"),qat.forEach(t),TRo=r(M8e," \u2014 "),lG=n(M8e,"A",{href:!0});var Nat=s(lG);MRo=r(Nat,"MegatronBertForNextSentencePrediction"),Nat.forEach(t),ERo=r(M8e," (MegatronBert model)"),M8e.forEach(t),CRo=i(Vs),Db=n(Vs,"LI",{});var E8e=s(Db);_fe=n(E8e,"STRONG",{});var jat=s(_fe);wRo=r(jat,"mobilebert"),jat.forEach(t),ARo=r(E8e," \u2014 "),iG=n(E8e,"A",{href:!0});var Dat=s(iG);yRo=r(Dat,"MobileBertForNextSentencePrediction"),Dat.forEach(t),LRo=r(E8e," (MobileBERT model)"),E8e.forEach(t),xRo=i(Vs),Gb=n(Vs,"LI",{});var C8e=s(Gb);bfe=n(C8e,"STRONG",{});var Gat=s(bfe);$Ro=r(Gat,"qdqbert"),Gat.forEach(t),kRo=r(C8e," \u2014 "),dG=n(C8e,"A",{href:!0});var Oat=s(dG);SRo=r(Oat,"QDQBertForNextSentencePrediction"),Oat.forEach(t),RRo=r(C8e," (QDQBert model)"),C8e.forEach(t),Vs.forEach(t),BRo=i(ta),Ob=n(ta,"P",{});var w8e=s(Ob);PRo=r(w8e,"The model is set in evaluation mode by default using "),vfe=n(w8e,"CODE",{});var Vat=s(vfe);IRo=r(Vat,"model.eval()"),Vat.forEach(t),qRo=r(w8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ffe=n(w8e,"CODE",{});var Xat=s(Ffe);NRo=r(Xat,"model.train()"),Xat.forEach(t),w8e.forEach(t),jRo=i(ta),T(Vb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),dPe=i(f),ji=n(f,"H2",{class:!0});var fqe=s(ji);Xb=n(fqe,"A",{id:!0,class:!0,href:!0});var zat=s(Xb);Tfe=n(zat,"SPAN",{});var Qat=s(Tfe);T(Gy.$$.fragment,Qat),Qat.forEach(t),zat.forEach(t),DRo=i(fqe),Mfe=n(fqe,"SPAN",{});var Wat=s(Mfe);GRo=r(Wat,"AutoModelForTokenClassification"),Wat.forEach(t),fqe.forEach(t),cPe=i(f),Io=n(f,"DIV",{class:!0});var Xs=s(Io);T(Oy.$$.fragment,Xs),ORo=i(Xs),Di=n(Xs,"P",{});var jY=s(Di);VRo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cG=n(jY,"A",{href:!0});var Hat=s(cG);XRo=r(Hat,"from_pretrained()"),Hat.forEach(t),zRo=r(jY," class method or the "),fG=n(jY,"A",{href:!0});var Uat=s(fG);QRo=r(Uat,"from_config()"),Uat.forEach(t),WRo=r(jY,` class
method.`),jY.forEach(t),HRo=i(Xs),Vy=n(Xs,"P",{});var mqe=s(Vy);URo=r(mqe,"This class cannot be instantiated directly using "),Efe=n(mqe,"CODE",{});var Jat=s(Efe);JRo=r(Jat,"__init__()"),Jat.forEach(t),YRo=r(mqe," (throws an error)."),mqe.forEach(t),KRo=i(Xs),lt=n(Xs,"DIV",{class:!0});var Jw=s(lt);T(Xy.$$.fragment,Jw),ZRo=i(Jw),Cfe=n(Jw,"P",{});var Yat=s(Cfe);eBo=r(Yat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yat.forEach(t),oBo=i(Jw),Gi=n(Jw,"P",{});var DY=s(Gi);rBo=r(DY,`Note:
Loading a model from its configuration file does `),wfe=n(DY,"STRONG",{});var Kat=s(wfe);tBo=r(Kat,"not"),Kat.forEach(t),aBo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n(DY,"A",{href:!0});var Zat=s(mG);nBo=r(Zat,"from_pretrained()"),Zat.forEach(t),sBo=r(DY," to load the model weights."),DY.forEach(t),lBo=i(Jw),T(zb.$$.fragment,Jw),Jw.forEach(t),iBo=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(zy.$$.fragment,aa),dBo=i(aa),Afe=n(aa,"P",{});var ent=s(Afe);cBo=r(ent,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ent.forEach(t),fBo=i(aa),ka=n(aa,"P",{});var Yw=s(ka);mBo=r(Yw,"The model class to instantiate is selected based on the "),yfe=n(Yw,"CODE",{});var ont=s(yfe);gBo=r(ont,"model_type"),ont.forEach(t),hBo=r(Yw,` property of the config object (either
passed as an argument or loaded from `),Lfe=n(Yw,"CODE",{});var rnt=s(Lfe);pBo=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),uBo=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xfe=n(Yw,"CODE",{});var tnt=s(xfe);_Bo=r(tnt,"pretrained_model_name_or_path"),tnt.forEach(t),bBo=r(Yw,":"),Yw.forEach(t),vBo=i(aa),U=n(aa,"UL",{});var J=s(U);Qb=n(J,"LI",{});var A8e=s(Qb);$fe=n(A8e,"STRONG",{});var ant=s($fe);FBo=r(ant,"albert"),ant.forEach(t),TBo=r(A8e," \u2014 "),gG=n(A8e,"A",{href:!0});var nnt=s(gG);MBo=r(nnt,"AlbertForTokenClassification"),nnt.forEach(t),EBo=r(A8e," (ALBERT model)"),A8e.forEach(t),CBo=i(J),Wb=n(J,"LI",{});var y8e=s(Wb);kfe=n(y8e,"STRONG",{});var snt=s(kfe);wBo=r(snt,"bert"),snt.forEach(t),ABo=r(y8e," \u2014 "),hG=n(y8e,"A",{href:!0});var lnt=s(hG);yBo=r(lnt,"BertForTokenClassification"),lnt.forEach(t),LBo=r(y8e," (BERT model)"),y8e.forEach(t),xBo=i(J),Hb=n(J,"LI",{});var L8e=s(Hb);Sfe=n(L8e,"STRONG",{});var int=s(Sfe);$Bo=r(int,"big_bird"),int.forEach(t),kBo=r(L8e," \u2014 "),pG=n(L8e,"A",{href:!0});var dnt=s(pG);SBo=r(dnt,"BigBirdForTokenClassification"),dnt.forEach(t),RBo=r(L8e," (BigBird model)"),L8e.forEach(t),BBo=i(J),Ub=n(J,"LI",{});var x8e=s(Ub);Rfe=n(x8e,"STRONG",{});var cnt=s(Rfe);PBo=r(cnt,"camembert"),cnt.forEach(t),IBo=r(x8e," \u2014 "),uG=n(x8e,"A",{href:!0});var fnt=s(uG);qBo=r(fnt,"CamembertForTokenClassification"),fnt.forEach(t),NBo=r(x8e," (CamemBERT model)"),x8e.forEach(t),jBo=i(J),Jb=n(J,"LI",{});var $8e=s(Jb);Bfe=n($8e,"STRONG",{});var mnt=s(Bfe);DBo=r(mnt,"canine"),mnt.forEach(t),GBo=r($8e," \u2014 "),_G=n($8e,"A",{href:!0});var gnt=s(_G);OBo=r(gnt,"CanineForTokenClassification"),gnt.forEach(t),VBo=r($8e," (Canine model)"),$8e.forEach(t),XBo=i(J),Yb=n(J,"LI",{});var k8e=s(Yb);Pfe=n(k8e,"STRONG",{});var hnt=s(Pfe);zBo=r(hnt,"convbert"),hnt.forEach(t),QBo=r(k8e," \u2014 "),bG=n(k8e,"A",{href:!0});var pnt=s(bG);WBo=r(pnt,"ConvBertForTokenClassification"),pnt.forEach(t),HBo=r(k8e," (ConvBERT model)"),k8e.forEach(t),UBo=i(J),Kb=n(J,"LI",{});var S8e=s(Kb);Ife=n(S8e,"STRONG",{});var unt=s(Ife);JBo=r(unt,"data2vec-text"),unt.forEach(t),YBo=r(S8e," \u2014 "),vG=n(S8e,"A",{href:!0});var _nt=s(vG);KBo=r(_nt,"Data2VecTextForTokenClassification"),_nt.forEach(t),ZBo=r(S8e," (Data2VecText model)"),S8e.forEach(t),ePo=i(J),Zb=n(J,"LI",{});var R8e=s(Zb);qfe=n(R8e,"STRONG",{});var bnt=s(qfe);oPo=r(bnt,"deberta"),bnt.forEach(t),rPo=r(R8e," \u2014 "),FG=n(R8e,"A",{href:!0});var vnt=s(FG);tPo=r(vnt,"DebertaForTokenClassification"),vnt.forEach(t),aPo=r(R8e," (DeBERTa model)"),R8e.forEach(t),nPo=i(J),e4=n(J,"LI",{});var B8e=s(e4);Nfe=n(B8e,"STRONG",{});var Fnt=s(Nfe);sPo=r(Fnt,"deberta-v2"),Fnt.forEach(t),lPo=r(B8e," \u2014 "),TG=n(B8e,"A",{href:!0});var Tnt=s(TG);iPo=r(Tnt,"DebertaV2ForTokenClassification"),Tnt.forEach(t),dPo=r(B8e," (DeBERTa-v2 model)"),B8e.forEach(t),cPo=i(J),o4=n(J,"LI",{});var P8e=s(o4);jfe=n(P8e,"STRONG",{});var Mnt=s(jfe);fPo=r(Mnt,"distilbert"),Mnt.forEach(t),mPo=r(P8e," \u2014 "),MG=n(P8e,"A",{href:!0});var Ent=s(MG);gPo=r(Ent,"DistilBertForTokenClassification"),Ent.forEach(t),hPo=r(P8e," (DistilBERT model)"),P8e.forEach(t),pPo=i(J),r4=n(J,"LI",{});var I8e=s(r4);Dfe=n(I8e,"STRONG",{});var Cnt=s(Dfe);uPo=r(Cnt,"electra"),Cnt.forEach(t),_Po=r(I8e," \u2014 "),EG=n(I8e,"A",{href:!0});var wnt=s(EG);bPo=r(wnt,"ElectraForTokenClassification"),wnt.forEach(t),vPo=r(I8e," (ELECTRA model)"),I8e.forEach(t),FPo=i(J),t4=n(J,"LI",{});var q8e=s(t4);Gfe=n(q8e,"STRONG",{});var Ant=s(Gfe);TPo=r(Ant,"flaubert"),Ant.forEach(t),MPo=r(q8e," \u2014 "),CG=n(q8e,"A",{href:!0});var ynt=s(CG);EPo=r(ynt,"FlaubertForTokenClassification"),ynt.forEach(t),CPo=r(q8e," (FlauBERT model)"),q8e.forEach(t),wPo=i(J),a4=n(J,"LI",{});var N8e=s(a4);Ofe=n(N8e,"STRONG",{});var Lnt=s(Ofe);APo=r(Lnt,"fnet"),Lnt.forEach(t),yPo=r(N8e," \u2014 "),wG=n(N8e,"A",{href:!0});var xnt=s(wG);LPo=r(xnt,"FNetForTokenClassification"),xnt.forEach(t),xPo=r(N8e," (FNet model)"),N8e.forEach(t),$Po=i(J),n4=n(J,"LI",{});var j8e=s(n4);Vfe=n(j8e,"STRONG",{});var $nt=s(Vfe);kPo=r($nt,"funnel"),$nt.forEach(t),SPo=r(j8e," \u2014 "),AG=n(j8e,"A",{href:!0});var knt=s(AG);RPo=r(knt,"FunnelForTokenClassification"),knt.forEach(t),BPo=r(j8e," (Funnel Transformer model)"),j8e.forEach(t),PPo=i(J),s4=n(J,"LI",{});var D8e=s(s4);Xfe=n(D8e,"STRONG",{});var Snt=s(Xfe);IPo=r(Snt,"gpt2"),Snt.forEach(t),qPo=r(D8e," \u2014 "),yG=n(D8e,"A",{href:!0});var Rnt=s(yG);NPo=r(Rnt,"GPT2ForTokenClassification"),Rnt.forEach(t),jPo=r(D8e," (OpenAI GPT-2 model)"),D8e.forEach(t),DPo=i(J),l4=n(J,"LI",{});var G8e=s(l4);zfe=n(G8e,"STRONG",{});var Bnt=s(zfe);GPo=r(Bnt,"ibert"),Bnt.forEach(t),OPo=r(G8e," \u2014 "),LG=n(G8e,"A",{href:!0});var Pnt=s(LG);VPo=r(Pnt,"IBertForTokenClassification"),Pnt.forEach(t),XPo=r(G8e," (I-BERT model)"),G8e.forEach(t),zPo=i(J),i4=n(J,"LI",{});var O8e=s(i4);Qfe=n(O8e,"STRONG",{});var Int=s(Qfe);QPo=r(Int,"layoutlm"),Int.forEach(t),WPo=r(O8e," \u2014 "),xG=n(O8e,"A",{href:!0});var qnt=s(xG);HPo=r(qnt,"LayoutLMForTokenClassification"),qnt.forEach(t),UPo=r(O8e," (LayoutLM model)"),O8e.forEach(t),JPo=i(J),d4=n(J,"LI",{});var V8e=s(d4);Wfe=n(V8e,"STRONG",{});var Nnt=s(Wfe);YPo=r(Nnt,"layoutlmv2"),Nnt.forEach(t),KPo=r(V8e," \u2014 "),$G=n(V8e,"A",{href:!0});var jnt=s($G);ZPo=r(jnt,"LayoutLMv2ForTokenClassification"),jnt.forEach(t),eIo=r(V8e," (LayoutLMv2 model)"),V8e.forEach(t),oIo=i(J),c4=n(J,"LI",{});var X8e=s(c4);Hfe=n(X8e,"STRONG",{});var Dnt=s(Hfe);rIo=r(Dnt,"longformer"),Dnt.forEach(t),tIo=r(X8e," \u2014 "),kG=n(X8e,"A",{href:!0});var Gnt=s(kG);aIo=r(Gnt,"LongformerForTokenClassification"),Gnt.forEach(t),nIo=r(X8e," (Longformer model)"),X8e.forEach(t),sIo=i(J),f4=n(J,"LI",{});var z8e=s(f4);Ufe=n(z8e,"STRONG",{});var Ont=s(Ufe);lIo=r(Ont,"megatron-bert"),Ont.forEach(t),iIo=r(z8e," \u2014 "),SG=n(z8e,"A",{href:!0});var Vnt=s(SG);dIo=r(Vnt,"MegatronBertForTokenClassification"),Vnt.forEach(t),cIo=r(z8e," (MegatronBert model)"),z8e.forEach(t),fIo=i(J),m4=n(J,"LI",{});var Q8e=s(m4);Jfe=n(Q8e,"STRONG",{});var Xnt=s(Jfe);mIo=r(Xnt,"mobilebert"),Xnt.forEach(t),gIo=r(Q8e," \u2014 "),RG=n(Q8e,"A",{href:!0});var znt=s(RG);hIo=r(znt,"MobileBertForTokenClassification"),znt.forEach(t),pIo=r(Q8e," (MobileBERT model)"),Q8e.forEach(t),uIo=i(J),g4=n(J,"LI",{});var W8e=s(g4);Yfe=n(W8e,"STRONG",{});var Qnt=s(Yfe);_Io=r(Qnt,"mpnet"),Qnt.forEach(t),bIo=r(W8e," \u2014 "),BG=n(W8e,"A",{href:!0});var Wnt=s(BG);vIo=r(Wnt,"MPNetForTokenClassification"),Wnt.forEach(t),FIo=r(W8e," (MPNet model)"),W8e.forEach(t),TIo=i(J),h4=n(J,"LI",{});var H8e=s(h4);Kfe=n(H8e,"STRONG",{});var Hnt=s(Kfe);MIo=r(Hnt,"nystromformer"),Hnt.forEach(t),EIo=r(H8e," \u2014 "),PG=n(H8e,"A",{href:!0});var Unt=s(PG);CIo=r(Unt,"NystromformerForTokenClassification"),Unt.forEach(t),wIo=r(H8e," (Nystromformer model)"),H8e.forEach(t),AIo=i(J),p4=n(J,"LI",{});var U8e=s(p4);Zfe=n(U8e,"STRONG",{});var Jnt=s(Zfe);yIo=r(Jnt,"qdqbert"),Jnt.forEach(t),LIo=r(U8e," \u2014 "),IG=n(U8e,"A",{href:!0});var Ynt=s(IG);xIo=r(Ynt,"QDQBertForTokenClassification"),Ynt.forEach(t),$Io=r(U8e," (QDQBert model)"),U8e.forEach(t),kIo=i(J),u4=n(J,"LI",{});var J8e=s(u4);eme=n(J8e,"STRONG",{});var Knt=s(eme);SIo=r(Knt,"rembert"),Knt.forEach(t),RIo=r(J8e," \u2014 "),qG=n(J8e,"A",{href:!0});var Znt=s(qG);BIo=r(Znt,"RemBertForTokenClassification"),Znt.forEach(t),PIo=r(J8e," (RemBERT model)"),J8e.forEach(t),IIo=i(J),_4=n(J,"LI",{});var Y8e=s(_4);ome=n(Y8e,"STRONG",{});var est=s(ome);qIo=r(est,"roberta"),est.forEach(t),NIo=r(Y8e," \u2014 "),NG=n(Y8e,"A",{href:!0});var ost=s(NG);jIo=r(ost,"RobertaForTokenClassification"),ost.forEach(t),DIo=r(Y8e," (RoBERTa model)"),Y8e.forEach(t),GIo=i(J),b4=n(J,"LI",{});var K8e=s(b4);rme=n(K8e,"STRONG",{});var rst=s(rme);OIo=r(rst,"roformer"),rst.forEach(t),VIo=r(K8e," \u2014 "),jG=n(K8e,"A",{href:!0});var tst=s(jG);XIo=r(tst,"RoFormerForTokenClassification"),tst.forEach(t),zIo=r(K8e," (RoFormer model)"),K8e.forEach(t),QIo=i(J),v4=n(J,"LI",{});var Z8e=s(v4);tme=n(Z8e,"STRONG",{});var ast=s(tme);WIo=r(ast,"squeezebert"),ast.forEach(t),HIo=r(Z8e," \u2014 "),DG=n(Z8e,"A",{href:!0});var nst=s(DG);UIo=r(nst,"SqueezeBertForTokenClassification"),nst.forEach(t),JIo=r(Z8e," (SqueezeBERT model)"),Z8e.forEach(t),YIo=i(J),F4=n(J,"LI",{});var e7e=s(F4);ame=n(e7e,"STRONG",{});var sst=s(ame);KIo=r(sst,"xlm"),sst.forEach(t),ZIo=r(e7e," \u2014 "),GG=n(e7e,"A",{href:!0});var lst=s(GG);eqo=r(lst,"XLMForTokenClassification"),lst.forEach(t),oqo=r(e7e," (XLM model)"),e7e.forEach(t),rqo=i(J),T4=n(J,"LI",{});var o7e=s(T4);nme=n(o7e,"STRONG",{});var ist=s(nme);tqo=r(ist,"xlm-roberta"),ist.forEach(t),aqo=r(o7e," \u2014 "),OG=n(o7e,"A",{href:!0});var dst=s(OG);nqo=r(dst,"XLMRobertaForTokenClassification"),dst.forEach(t),sqo=r(o7e," (XLM-RoBERTa model)"),o7e.forEach(t),lqo=i(J),M4=n(J,"LI",{});var r7e=s(M4);sme=n(r7e,"STRONG",{});var cst=s(sme);iqo=r(cst,"xlm-roberta-xl"),cst.forEach(t),dqo=r(r7e," \u2014 "),VG=n(r7e,"A",{href:!0});var fst=s(VG);cqo=r(fst,"XLMRobertaXLForTokenClassification"),fst.forEach(t),fqo=r(r7e," (XLM-RoBERTa-XL model)"),r7e.forEach(t),mqo=i(J),E4=n(J,"LI",{});var t7e=s(E4);lme=n(t7e,"STRONG",{});var mst=s(lme);gqo=r(mst,"xlnet"),mst.forEach(t),hqo=r(t7e," \u2014 "),XG=n(t7e,"A",{href:!0});var gst=s(XG);pqo=r(gst,"XLNetForTokenClassification"),gst.forEach(t),uqo=r(t7e," (XLNet model)"),t7e.forEach(t),_qo=i(J),C4=n(J,"LI",{});var a7e=s(C4);ime=n(a7e,"STRONG",{});var hst=s(ime);bqo=r(hst,"yoso"),hst.forEach(t),vqo=r(a7e," \u2014 "),zG=n(a7e,"A",{href:!0});var pst=s(zG);Fqo=r(pst,"YosoForTokenClassification"),pst.forEach(t),Tqo=r(a7e," (YOSO model)"),a7e.forEach(t),J.forEach(t),Mqo=i(aa),w4=n(aa,"P",{});var n7e=s(w4);Eqo=r(n7e,"The model is set in evaluation mode by default using "),dme=n(n7e,"CODE",{});var ust=s(dme);Cqo=r(ust,"model.eval()"),ust.forEach(t),wqo=r(n7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=n(n7e,"CODE",{});var _st=s(cme);Aqo=r(_st,"model.train()"),_st.forEach(t),n7e.forEach(t),yqo=i(aa),T(A4.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),fPe=i(f),Oi=n(f,"H2",{class:!0});var gqe=s(Oi);y4=n(gqe,"A",{id:!0,class:!0,href:!0});var bst=s(y4);fme=n(bst,"SPAN",{});var vst=s(fme);T(Qy.$$.fragment,vst),vst.forEach(t),bst.forEach(t),Lqo=i(gqe),mme=n(gqe,"SPAN",{});var Fst=s(mme);xqo=r(Fst,"AutoModelForQuestionAnswering"),Fst.forEach(t),gqe.forEach(t),mPe=i(f),qo=n(f,"DIV",{class:!0});var zs=s(qo);T(Wy.$$.fragment,zs),$qo=i(zs),Vi=n(zs,"P",{});var GY=s(Vi);kqo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QG=n(GY,"A",{href:!0});var Tst=s(QG);Sqo=r(Tst,"from_pretrained()"),Tst.forEach(t),Rqo=r(GY," class method or the "),WG=n(GY,"A",{href:!0});var Mst=s(WG);Bqo=r(Mst,"from_config()"),Mst.forEach(t),Pqo=r(GY,` class
method.`),GY.forEach(t),Iqo=i(zs),Hy=n(zs,"P",{});var hqe=s(Hy);qqo=r(hqe,"This class cannot be instantiated directly using "),gme=n(hqe,"CODE",{});var Est=s(gme);Nqo=r(Est,"__init__()"),Est.forEach(t),jqo=r(hqe," (throws an error)."),hqe.forEach(t),Dqo=i(zs),it=n(zs,"DIV",{class:!0});var Kw=s(it);T(Uy.$$.fragment,Kw),Gqo=i(Kw),hme=n(Kw,"P",{});var Cst=s(hme);Oqo=r(Cst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cst.forEach(t),Vqo=i(Kw),Xi=n(Kw,"P",{});var OY=s(Xi);Xqo=r(OY,`Note:
Loading a model from its configuration file does `),pme=n(OY,"STRONG",{});var wst=s(pme);zqo=r(wst,"not"),wst.forEach(t),Qqo=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(OY,"A",{href:!0});var Ast=s(HG);Wqo=r(Ast,"from_pretrained()"),Ast.forEach(t),Hqo=r(OY," to load the model weights."),OY.forEach(t),Uqo=i(Kw),T(L4.$$.fragment,Kw),Kw.forEach(t),Jqo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(Jy.$$.fragment,na),Yqo=i(na),ume=n(na,"P",{});var yst=s(ume);Kqo=r(yst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yst.forEach(t),Zqo=i(na),Sa=n(na,"P",{});var Zw=s(Sa);eNo=r(Zw,"The model class to instantiate is selected based on the "),_me=n(Zw,"CODE",{});var Lst=s(_me);oNo=r(Lst,"model_type"),Lst.forEach(t),rNo=r(Zw,` property of the config object (either
passed as an argument or loaded from `),bme=n(Zw,"CODE",{});var xst=s(bme);tNo=r(xst,"pretrained_model_name_or_path"),xst.forEach(t),aNo=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vme=n(Zw,"CODE",{});var $st=s(vme);nNo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),sNo=r(Zw,":"),Zw.forEach(t),lNo=i(na),O=n(na,"UL",{});var X=s(O);x4=n(X,"LI",{});var s7e=s(x4);Fme=n(s7e,"STRONG",{});var kst=s(Fme);iNo=r(kst,"albert"),kst.forEach(t),dNo=r(s7e," \u2014 "),UG=n(s7e,"A",{href:!0});var Sst=s(UG);cNo=r(Sst,"AlbertForQuestionAnswering"),Sst.forEach(t),fNo=r(s7e," (ALBERT model)"),s7e.forEach(t),mNo=i(X),$4=n(X,"LI",{});var l7e=s($4);Tme=n(l7e,"STRONG",{});var Rst=s(Tme);gNo=r(Rst,"bart"),Rst.forEach(t),hNo=r(l7e," \u2014 "),JG=n(l7e,"A",{href:!0});var Bst=s(JG);pNo=r(Bst,"BartForQuestionAnswering"),Bst.forEach(t),uNo=r(l7e," (BART model)"),l7e.forEach(t),_No=i(X),k4=n(X,"LI",{});var i7e=s(k4);Mme=n(i7e,"STRONG",{});var Pst=s(Mme);bNo=r(Pst,"bert"),Pst.forEach(t),vNo=r(i7e," \u2014 "),YG=n(i7e,"A",{href:!0});var Ist=s(YG);FNo=r(Ist,"BertForQuestionAnswering"),Ist.forEach(t),TNo=r(i7e," (BERT model)"),i7e.forEach(t),MNo=i(X),S4=n(X,"LI",{});var d7e=s(S4);Eme=n(d7e,"STRONG",{});var qst=s(Eme);ENo=r(qst,"big_bird"),qst.forEach(t),CNo=r(d7e," \u2014 "),KG=n(d7e,"A",{href:!0});var Nst=s(KG);wNo=r(Nst,"BigBirdForQuestionAnswering"),Nst.forEach(t),ANo=r(d7e," (BigBird model)"),d7e.forEach(t),yNo=i(X),R4=n(X,"LI",{});var c7e=s(R4);Cme=n(c7e,"STRONG",{});var jst=s(Cme);LNo=r(jst,"bigbird_pegasus"),jst.forEach(t),xNo=r(c7e," \u2014 "),ZG=n(c7e,"A",{href:!0});var Dst=s(ZG);$No=r(Dst,"BigBirdPegasusForQuestionAnswering"),Dst.forEach(t),kNo=r(c7e," (BigBirdPegasus model)"),c7e.forEach(t),SNo=i(X),B4=n(X,"LI",{});var f7e=s(B4);wme=n(f7e,"STRONG",{});var Gst=s(wme);RNo=r(Gst,"camembert"),Gst.forEach(t),BNo=r(f7e," \u2014 "),eO=n(f7e,"A",{href:!0});var Ost=s(eO);PNo=r(Ost,"CamembertForQuestionAnswering"),Ost.forEach(t),INo=r(f7e," (CamemBERT model)"),f7e.forEach(t),qNo=i(X),P4=n(X,"LI",{});var m7e=s(P4);Ame=n(m7e,"STRONG",{});var Vst=s(Ame);NNo=r(Vst,"canine"),Vst.forEach(t),jNo=r(m7e," \u2014 "),oO=n(m7e,"A",{href:!0});var Xst=s(oO);DNo=r(Xst,"CanineForQuestionAnswering"),Xst.forEach(t),GNo=r(m7e," (Canine model)"),m7e.forEach(t),ONo=i(X),I4=n(X,"LI",{});var g7e=s(I4);yme=n(g7e,"STRONG",{});var zst=s(yme);VNo=r(zst,"convbert"),zst.forEach(t),XNo=r(g7e," \u2014 "),rO=n(g7e,"A",{href:!0});var Qst=s(rO);zNo=r(Qst,"ConvBertForQuestionAnswering"),Qst.forEach(t),QNo=r(g7e," (ConvBERT model)"),g7e.forEach(t),WNo=i(X),q4=n(X,"LI",{});var h7e=s(q4);Lme=n(h7e,"STRONG",{});var Wst=s(Lme);HNo=r(Wst,"data2vec-text"),Wst.forEach(t),UNo=r(h7e," \u2014 "),tO=n(h7e,"A",{href:!0});var Hst=s(tO);JNo=r(Hst,"Data2VecTextForQuestionAnswering"),Hst.forEach(t),YNo=r(h7e," (Data2VecText model)"),h7e.forEach(t),KNo=i(X),N4=n(X,"LI",{});var p7e=s(N4);xme=n(p7e,"STRONG",{});var Ust=s(xme);ZNo=r(Ust,"deberta"),Ust.forEach(t),ejo=r(p7e," \u2014 "),aO=n(p7e,"A",{href:!0});var Jst=s(aO);ojo=r(Jst,"DebertaForQuestionAnswering"),Jst.forEach(t),rjo=r(p7e," (DeBERTa model)"),p7e.forEach(t),tjo=i(X),j4=n(X,"LI",{});var u7e=s(j4);$me=n(u7e,"STRONG",{});var Yst=s($me);ajo=r(Yst,"deberta-v2"),Yst.forEach(t),njo=r(u7e," \u2014 "),nO=n(u7e,"A",{href:!0});var Kst=s(nO);sjo=r(Kst,"DebertaV2ForQuestionAnswering"),Kst.forEach(t),ljo=r(u7e," (DeBERTa-v2 model)"),u7e.forEach(t),ijo=i(X),D4=n(X,"LI",{});var _7e=s(D4);kme=n(_7e,"STRONG",{});var Zst=s(kme);djo=r(Zst,"distilbert"),Zst.forEach(t),cjo=r(_7e," \u2014 "),sO=n(_7e,"A",{href:!0});var elt=s(sO);fjo=r(elt,"DistilBertForQuestionAnswering"),elt.forEach(t),mjo=r(_7e," (DistilBERT model)"),_7e.forEach(t),gjo=i(X),G4=n(X,"LI",{});var b7e=s(G4);Sme=n(b7e,"STRONG",{});var olt=s(Sme);hjo=r(olt,"electra"),olt.forEach(t),pjo=r(b7e," \u2014 "),lO=n(b7e,"A",{href:!0});var rlt=s(lO);ujo=r(rlt,"ElectraForQuestionAnswering"),rlt.forEach(t),_jo=r(b7e," (ELECTRA model)"),b7e.forEach(t),bjo=i(X),O4=n(X,"LI",{});var v7e=s(O4);Rme=n(v7e,"STRONG",{});var tlt=s(Rme);vjo=r(tlt,"flaubert"),tlt.forEach(t),Fjo=r(v7e," \u2014 "),iO=n(v7e,"A",{href:!0});var alt=s(iO);Tjo=r(alt,"FlaubertForQuestionAnsweringSimple"),alt.forEach(t),Mjo=r(v7e," (FlauBERT model)"),v7e.forEach(t),Ejo=i(X),V4=n(X,"LI",{});var F7e=s(V4);Bme=n(F7e,"STRONG",{});var nlt=s(Bme);Cjo=r(nlt,"fnet"),nlt.forEach(t),wjo=r(F7e," \u2014 "),dO=n(F7e,"A",{href:!0});var slt=s(dO);Ajo=r(slt,"FNetForQuestionAnswering"),slt.forEach(t),yjo=r(F7e," (FNet model)"),F7e.forEach(t),Ljo=i(X),X4=n(X,"LI",{});var T7e=s(X4);Pme=n(T7e,"STRONG",{});var llt=s(Pme);xjo=r(llt,"funnel"),llt.forEach(t),$jo=r(T7e," \u2014 "),cO=n(T7e,"A",{href:!0});var ilt=s(cO);kjo=r(ilt,"FunnelForQuestionAnswering"),ilt.forEach(t),Sjo=r(T7e," (Funnel Transformer model)"),T7e.forEach(t),Rjo=i(X),z4=n(X,"LI",{});var M7e=s(z4);Ime=n(M7e,"STRONG",{});var dlt=s(Ime);Bjo=r(dlt,"gptj"),dlt.forEach(t),Pjo=r(M7e," \u2014 "),fO=n(M7e,"A",{href:!0});var clt=s(fO);Ijo=r(clt,"GPTJForQuestionAnswering"),clt.forEach(t),qjo=r(M7e," (GPT-J model)"),M7e.forEach(t),Njo=i(X),Q4=n(X,"LI",{});var E7e=s(Q4);qme=n(E7e,"STRONG",{});var flt=s(qme);jjo=r(flt,"ibert"),flt.forEach(t),Djo=r(E7e," \u2014 "),mO=n(E7e,"A",{href:!0});var mlt=s(mO);Gjo=r(mlt,"IBertForQuestionAnswering"),mlt.forEach(t),Ojo=r(E7e," (I-BERT model)"),E7e.forEach(t),Vjo=i(X),W4=n(X,"LI",{});var C7e=s(W4);Nme=n(C7e,"STRONG",{});var glt=s(Nme);Xjo=r(glt,"layoutlmv2"),glt.forEach(t),zjo=r(C7e," \u2014 "),gO=n(C7e,"A",{href:!0});var hlt=s(gO);Qjo=r(hlt,"LayoutLMv2ForQuestionAnswering"),hlt.forEach(t),Wjo=r(C7e," (LayoutLMv2 model)"),C7e.forEach(t),Hjo=i(X),H4=n(X,"LI",{});var w7e=s(H4);jme=n(w7e,"STRONG",{});var plt=s(jme);Ujo=r(plt,"led"),plt.forEach(t),Jjo=r(w7e," \u2014 "),hO=n(w7e,"A",{href:!0});var ult=s(hO);Yjo=r(ult,"LEDForQuestionAnswering"),ult.forEach(t),Kjo=r(w7e," (LED model)"),w7e.forEach(t),Zjo=i(X),U4=n(X,"LI",{});var A7e=s(U4);Dme=n(A7e,"STRONG",{});var _lt=s(Dme);eDo=r(_lt,"longformer"),_lt.forEach(t),oDo=r(A7e," \u2014 "),pO=n(A7e,"A",{href:!0});var blt=s(pO);rDo=r(blt,"LongformerForQuestionAnswering"),blt.forEach(t),tDo=r(A7e," (Longformer model)"),A7e.forEach(t),aDo=i(X),J4=n(X,"LI",{});var y7e=s(J4);Gme=n(y7e,"STRONG",{});var vlt=s(Gme);nDo=r(vlt,"lxmert"),vlt.forEach(t),sDo=r(y7e," \u2014 "),uO=n(y7e,"A",{href:!0});var Flt=s(uO);lDo=r(Flt,"LxmertForQuestionAnswering"),Flt.forEach(t),iDo=r(y7e," (LXMERT model)"),y7e.forEach(t),dDo=i(X),Y4=n(X,"LI",{});var L7e=s(Y4);Ome=n(L7e,"STRONG",{});var Tlt=s(Ome);cDo=r(Tlt,"mbart"),Tlt.forEach(t),fDo=r(L7e," \u2014 "),_O=n(L7e,"A",{href:!0});var Mlt=s(_O);mDo=r(Mlt,"MBartForQuestionAnswering"),Mlt.forEach(t),gDo=r(L7e," (mBART model)"),L7e.forEach(t),hDo=i(X),K4=n(X,"LI",{});var x7e=s(K4);Vme=n(x7e,"STRONG",{});var Elt=s(Vme);pDo=r(Elt,"megatron-bert"),Elt.forEach(t),uDo=r(x7e," \u2014 "),bO=n(x7e,"A",{href:!0});var Clt=s(bO);_Do=r(Clt,"MegatronBertForQuestionAnswering"),Clt.forEach(t),bDo=r(x7e," (MegatronBert model)"),x7e.forEach(t),vDo=i(X),Z4=n(X,"LI",{});var $7e=s(Z4);Xme=n($7e,"STRONG",{});var wlt=s(Xme);FDo=r(wlt,"mobilebert"),wlt.forEach(t),TDo=r($7e," \u2014 "),vO=n($7e,"A",{href:!0});var Alt=s(vO);MDo=r(Alt,"MobileBertForQuestionAnswering"),Alt.forEach(t),EDo=r($7e," (MobileBERT model)"),$7e.forEach(t),CDo=i(X),e2=n(X,"LI",{});var k7e=s(e2);zme=n(k7e,"STRONG",{});var ylt=s(zme);wDo=r(ylt,"mpnet"),ylt.forEach(t),ADo=r(k7e," \u2014 "),FO=n(k7e,"A",{href:!0});var Llt=s(FO);yDo=r(Llt,"MPNetForQuestionAnswering"),Llt.forEach(t),LDo=r(k7e," (MPNet model)"),k7e.forEach(t),xDo=i(X),o2=n(X,"LI",{});var S7e=s(o2);Qme=n(S7e,"STRONG",{});var xlt=s(Qme);$Do=r(xlt,"nystromformer"),xlt.forEach(t),kDo=r(S7e," \u2014 "),TO=n(S7e,"A",{href:!0});var $lt=s(TO);SDo=r($lt,"NystromformerForQuestionAnswering"),$lt.forEach(t),RDo=r(S7e," (Nystromformer model)"),S7e.forEach(t),BDo=i(X),r2=n(X,"LI",{});var R7e=s(r2);Wme=n(R7e,"STRONG",{});var klt=s(Wme);PDo=r(klt,"qdqbert"),klt.forEach(t),IDo=r(R7e," \u2014 "),MO=n(R7e,"A",{href:!0});var Slt=s(MO);qDo=r(Slt,"QDQBertForQuestionAnswering"),Slt.forEach(t),NDo=r(R7e," (QDQBert model)"),R7e.forEach(t),jDo=i(X),t2=n(X,"LI",{});var B7e=s(t2);Hme=n(B7e,"STRONG",{});var Rlt=s(Hme);DDo=r(Rlt,"reformer"),Rlt.forEach(t),GDo=r(B7e," \u2014 "),EO=n(B7e,"A",{href:!0});var Blt=s(EO);ODo=r(Blt,"ReformerForQuestionAnswering"),Blt.forEach(t),VDo=r(B7e," (Reformer model)"),B7e.forEach(t),XDo=i(X),a2=n(X,"LI",{});var P7e=s(a2);Ume=n(P7e,"STRONG",{});var Plt=s(Ume);zDo=r(Plt,"rembert"),Plt.forEach(t),QDo=r(P7e," \u2014 "),CO=n(P7e,"A",{href:!0});var Ilt=s(CO);WDo=r(Ilt,"RemBertForQuestionAnswering"),Ilt.forEach(t),HDo=r(P7e," (RemBERT model)"),P7e.forEach(t),UDo=i(X),n2=n(X,"LI",{});var I7e=s(n2);Jme=n(I7e,"STRONG",{});var qlt=s(Jme);JDo=r(qlt,"roberta"),qlt.forEach(t),YDo=r(I7e," \u2014 "),wO=n(I7e,"A",{href:!0});var Nlt=s(wO);KDo=r(Nlt,"RobertaForQuestionAnswering"),Nlt.forEach(t),ZDo=r(I7e," (RoBERTa model)"),I7e.forEach(t),eGo=i(X),s2=n(X,"LI",{});var q7e=s(s2);Yme=n(q7e,"STRONG",{});var jlt=s(Yme);oGo=r(jlt,"roformer"),jlt.forEach(t),rGo=r(q7e," \u2014 "),AO=n(q7e,"A",{href:!0});var Dlt=s(AO);tGo=r(Dlt,"RoFormerForQuestionAnswering"),Dlt.forEach(t),aGo=r(q7e," (RoFormer model)"),q7e.forEach(t),nGo=i(X),l2=n(X,"LI",{});var N7e=s(l2);Kme=n(N7e,"STRONG",{});var Glt=s(Kme);sGo=r(Glt,"splinter"),Glt.forEach(t),lGo=r(N7e," \u2014 "),yO=n(N7e,"A",{href:!0});var Olt=s(yO);iGo=r(Olt,"SplinterForQuestionAnswering"),Olt.forEach(t),dGo=r(N7e," (Splinter model)"),N7e.forEach(t),cGo=i(X),i2=n(X,"LI",{});var j7e=s(i2);Zme=n(j7e,"STRONG",{});var Vlt=s(Zme);fGo=r(Vlt,"squeezebert"),Vlt.forEach(t),mGo=r(j7e," \u2014 "),LO=n(j7e,"A",{href:!0});var Xlt=s(LO);gGo=r(Xlt,"SqueezeBertForQuestionAnswering"),Xlt.forEach(t),hGo=r(j7e," (SqueezeBERT model)"),j7e.forEach(t),pGo=i(X),d2=n(X,"LI",{});var D7e=s(d2);ege=n(D7e,"STRONG",{});var zlt=s(ege);uGo=r(zlt,"xlm"),zlt.forEach(t),_Go=r(D7e," \u2014 "),xO=n(D7e,"A",{href:!0});var Qlt=s(xO);bGo=r(Qlt,"XLMForQuestionAnsweringSimple"),Qlt.forEach(t),vGo=r(D7e," (XLM model)"),D7e.forEach(t),FGo=i(X),c2=n(X,"LI",{});var G7e=s(c2);oge=n(G7e,"STRONG",{});var Wlt=s(oge);TGo=r(Wlt,"xlm-roberta"),Wlt.forEach(t),MGo=r(G7e," \u2014 "),$O=n(G7e,"A",{href:!0});var Hlt=s($O);EGo=r(Hlt,"XLMRobertaForQuestionAnswering"),Hlt.forEach(t),CGo=r(G7e," (XLM-RoBERTa model)"),G7e.forEach(t),wGo=i(X),f2=n(X,"LI",{});var O7e=s(f2);rge=n(O7e,"STRONG",{});var Ult=s(rge);AGo=r(Ult,"xlm-roberta-xl"),Ult.forEach(t),yGo=r(O7e," \u2014 "),kO=n(O7e,"A",{href:!0});var Jlt=s(kO);LGo=r(Jlt,"XLMRobertaXLForQuestionAnswering"),Jlt.forEach(t),xGo=r(O7e," (XLM-RoBERTa-XL model)"),O7e.forEach(t),$Go=i(X),m2=n(X,"LI",{});var V7e=s(m2);tge=n(V7e,"STRONG",{});var Ylt=s(tge);kGo=r(Ylt,"xlnet"),Ylt.forEach(t),SGo=r(V7e," \u2014 "),SO=n(V7e,"A",{href:!0});var Klt=s(SO);RGo=r(Klt,"XLNetForQuestionAnsweringSimple"),Klt.forEach(t),BGo=r(V7e," (XLNet model)"),V7e.forEach(t),PGo=i(X),g2=n(X,"LI",{});var X7e=s(g2);age=n(X7e,"STRONG",{});var Zlt=s(age);IGo=r(Zlt,"yoso"),Zlt.forEach(t),qGo=r(X7e," \u2014 "),RO=n(X7e,"A",{href:!0});var eit=s(RO);NGo=r(eit,"YosoForQuestionAnswering"),eit.forEach(t),jGo=r(X7e," (YOSO model)"),X7e.forEach(t),X.forEach(t),DGo=i(na),h2=n(na,"P",{});var z7e=s(h2);GGo=r(z7e,"The model is set in evaluation mode by default using "),nge=n(z7e,"CODE",{});var oit=s(nge);OGo=r(oit,"model.eval()"),oit.forEach(t),VGo=r(z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(z7e,"CODE",{});var rit=s(sge);XGo=r(rit,"model.train()"),rit.forEach(t),z7e.forEach(t),zGo=i(na),T(p2.$$.fragment,na),na.forEach(t),zs.forEach(t),gPe=i(f),zi=n(f,"H2",{class:!0});var pqe=s(zi);u2=n(pqe,"A",{id:!0,class:!0,href:!0});var tit=s(u2);lge=n(tit,"SPAN",{});var ait=s(lge);T(Yy.$$.fragment,ait),ait.forEach(t),tit.forEach(t),QGo=i(pqe),ige=n(pqe,"SPAN",{});var nit=s(ige);WGo=r(nit,"AutoModelForTableQuestionAnswering"),nit.forEach(t),pqe.forEach(t),hPe=i(f),No=n(f,"DIV",{class:!0});var Qs=s(No);T(Ky.$$.fragment,Qs),HGo=i(Qs),Qi=n(Qs,"P",{});var VY=s(Qi);UGo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BO=n(VY,"A",{href:!0});var sit=s(BO);JGo=r(sit,"from_pretrained()"),sit.forEach(t),YGo=r(VY," class method or the "),PO=n(VY,"A",{href:!0});var lit=s(PO);KGo=r(lit,"from_config()"),lit.forEach(t),ZGo=r(VY,` class
method.`),VY.forEach(t),eOo=i(Qs),Zy=n(Qs,"P",{});var uqe=s(Zy);oOo=r(uqe,"This class cannot be instantiated directly using "),dge=n(uqe,"CODE",{});var iit=s(dge);rOo=r(iit,"__init__()"),iit.forEach(t),tOo=r(uqe," (throws an error)."),uqe.forEach(t),aOo=i(Qs),dt=n(Qs,"DIV",{class:!0});var eA=s(dt);T(eL.$$.fragment,eA),nOo=i(eA),cge=n(eA,"P",{});var dit=s(cge);sOo=r(dit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),dit.forEach(t),lOo=i(eA),Wi=n(eA,"P",{});var XY=s(Wi);iOo=r(XY,`Note:
Loading a model from its configuration file does `),fge=n(XY,"STRONG",{});var cit=s(fge);dOo=r(cit,"not"),cit.forEach(t),cOo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(XY,"A",{href:!0});var fit=s(IO);fOo=r(fit,"from_pretrained()"),fit.forEach(t),mOo=r(XY," to load the model weights."),XY.forEach(t),gOo=i(eA),T(_2.$$.fragment,eA),eA.forEach(t),hOo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(oL.$$.fragment,sa),pOo=i(sa),mge=n(sa,"P",{});var mit=s(mge);uOo=r(mit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mit.forEach(t),_Oo=i(sa),Ra=n(sa,"P",{});var oA=s(Ra);bOo=r(oA,"The model class to instantiate is selected based on the "),gge=n(oA,"CODE",{});var git=s(gge);vOo=r(git,"model_type"),git.forEach(t),FOo=r(oA,` property of the config object (either
passed as an argument or loaded from `),hge=n(oA,"CODE",{});var hit=s(hge);TOo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),MOo=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pge=n(oA,"CODE",{});var pit=s(pge);EOo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),COo=r(oA,":"),oA.forEach(t),wOo=i(sa),uge=n(sa,"UL",{});var uit=s(uge);b2=n(uit,"LI",{});var Q7e=s(b2);_ge=n(Q7e,"STRONG",{});var _it=s(_ge);AOo=r(_it,"tapas"),_it.forEach(t),yOo=r(Q7e," \u2014 "),qO=n(Q7e,"A",{href:!0});var bit=s(qO);LOo=r(bit,"TapasForQuestionAnswering"),bit.forEach(t),xOo=r(Q7e," (TAPAS model)"),Q7e.forEach(t),uit.forEach(t),$Oo=i(sa),v2=n(sa,"P",{});var W7e=s(v2);kOo=r(W7e,"The model is set in evaluation mode by default using "),bge=n(W7e,"CODE",{});var vit=s(bge);SOo=r(vit,"model.eval()"),vit.forEach(t),ROo=r(W7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vge=n(W7e,"CODE",{});var Fit=s(vge);BOo=r(Fit,"model.train()"),Fit.forEach(t),W7e.forEach(t),POo=i(sa),T(F2.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),pPe=i(f),Hi=n(f,"H2",{class:!0});var _qe=s(Hi);T2=n(_qe,"A",{id:!0,class:!0,href:!0});var Tit=s(T2);Fge=n(Tit,"SPAN",{});var Mit=s(Fge);T(rL.$$.fragment,Mit),Mit.forEach(t),Tit.forEach(t),IOo=i(_qe),Tge=n(_qe,"SPAN",{});var Eit=s(Tge);qOo=r(Eit,"AutoModelForImageClassification"),Eit.forEach(t),_qe.forEach(t),uPe=i(f),jo=n(f,"DIV",{class:!0});var Ws=s(jo);T(tL.$$.fragment,Ws),NOo=i(Ws),Ui=n(Ws,"P",{});var zY=s(Ui);jOo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NO=n(zY,"A",{href:!0});var Cit=s(NO);DOo=r(Cit,"from_pretrained()"),Cit.forEach(t),GOo=r(zY," class method or the "),jO=n(zY,"A",{href:!0});var wit=s(jO);OOo=r(wit,"from_config()"),wit.forEach(t),VOo=r(zY,` class
method.`),zY.forEach(t),XOo=i(Ws),aL=n(Ws,"P",{});var bqe=s(aL);zOo=r(bqe,"This class cannot be instantiated directly using "),Mge=n(bqe,"CODE",{});var Ait=s(Mge);QOo=r(Ait,"__init__()"),Ait.forEach(t),WOo=r(bqe," (throws an error)."),bqe.forEach(t),HOo=i(Ws),ct=n(Ws,"DIV",{class:!0});var rA=s(ct);T(nL.$$.fragment,rA),UOo=i(rA),Ege=n(rA,"P",{});var yit=s(Ege);JOo=r(yit,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yit.forEach(t),YOo=i(rA),Ji=n(rA,"P",{});var QY=s(Ji);KOo=r(QY,`Note:
Loading a model from its configuration file does `),Cge=n(QY,"STRONG",{});var Lit=s(Cge);ZOo=r(Lit,"not"),Lit.forEach(t),eVo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(QY,"A",{href:!0});var xit=s(DO);oVo=r(xit,"from_pretrained()"),xit.forEach(t),rVo=r(QY," to load the model weights."),QY.forEach(t),tVo=i(rA),T(M2.$$.fragment,rA),rA.forEach(t),aVo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(sL.$$.fragment,la),nVo=i(la),wge=n(la,"P",{});var $it=s(wge);sVo=r($it,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$it.forEach(t),lVo=i(la),Ba=n(la,"P",{});var tA=s(Ba);iVo=r(tA,"The model class to instantiate is selected based on the "),Age=n(tA,"CODE",{});var kit=s(Age);dVo=r(kit,"model_type"),kit.forEach(t),cVo=r(tA,` property of the config object (either
passed as an argument or loaded from `),yge=n(tA,"CODE",{});var Sit=s(yge);fVo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),mVo=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(tA,"CODE",{});var Rit=s(Lge);gVo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),hVo=r(tA,":"),tA.forEach(t),pVo=i(la),Fe=n(la,"UL",{});var Ee=s(Fe);E2=n(Ee,"LI",{});var H7e=s(E2);xge=n(H7e,"STRONG",{});var Bit=s(xge);uVo=r(Bit,"beit"),Bit.forEach(t),_Vo=r(H7e," \u2014 "),GO=n(H7e,"A",{href:!0});var Pit=s(GO);bVo=r(Pit,"BeitForImageClassification"),Pit.forEach(t),vVo=r(H7e," (BEiT model)"),H7e.forEach(t),FVo=i(Ee),C2=n(Ee,"LI",{});var U7e=s(C2);$ge=n(U7e,"STRONG",{});var Iit=s($ge);TVo=r(Iit,"convnext"),Iit.forEach(t),MVo=r(U7e," \u2014 "),OO=n(U7e,"A",{href:!0});var qit=s(OO);EVo=r(qit,"ConvNextForImageClassification"),qit.forEach(t),CVo=r(U7e," (ConvNext model)"),U7e.forEach(t),wVo=i(Ee),w2=n(Ee,"LI",{});var J7e=s(w2);kge=n(J7e,"STRONG",{});var Nit=s(kge);AVo=r(Nit,"data2vec-vision"),Nit.forEach(t),yVo=r(J7e," \u2014 "),VO=n(J7e,"A",{href:!0});var jit=s(VO);LVo=r(jit,"Data2VecVisionForImageClassification"),jit.forEach(t),xVo=r(J7e," (Data2VecVision model)"),J7e.forEach(t),$Vo=i(Ee),xs=n(Ee,"LI",{});var N9=s(xs);Sge=n(N9,"STRONG",{});var Dit=s(Sge);kVo=r(Dit,"deit"),Dit.forEach(t),SVo=r(N9," \u2014 "),XO=n(N9,"A",{href:!0});var Git=s(XO);RVo=r(Git,"DeiTForImageClassification"),Git.forEach(t),BVo=r(N9," or "),zO=n(N9,"A",{href:!0});var Oit=s(zO);PVo=r(Oit,"DeiTForImageClassificationWithTeacher"),Oit.forEach(t),IVo=r(N9," (DeiT model)"),N9.forEach(t),qVo=i(Ee),A2=n(Ee,"LI",{});var Y7e=s(A2);Rge=n(Y7e,"STRONG",{});var Vit=s(Rge);NVo=r(Vit,"imagegpt"),Vit.forEach(t),jVo=r(Y7e," \u2014 "),QO=n(Y7e,"A",{href:!0});var Xit=s(QO);DVo=r(Xit,"ImageGPTForImageClassification"),Xit.forEach(t),GVo=r(Y7e," (ImageGPT model)"),Y7e.forEach(t),OVo=i(Ee),ft=n(Ee,"LI",{});var of=s(ft);Bge=n(of,"STRONG",{});var zit=s(Bge);VVo=r(zit,"perceiver"),zit.forEach(t),XVo=r(of," \u2014 "),WO=n(of,"A",{href:!0});var Qit=s(WO);zVo=r(Qit,"PerceiverForImageClassificationLearned"),Qit.forEach(t),QVo=r(of," or "),HO=n(of,"A",{href:!0});var Wit=s(HO);WVo=r(Wit,"PerceiverForImageClassificationFourier"),Wit.forEach(t),HVo=r(of," or "),UO=n(of,"A",{href:!0});var Hit=s(UO);UVo=r(Hit,"PerceiverForImageClassificationConvProcessing"),Hit.forEach(t),JVo=r(of," (Perceiver model)"),of.forEach(t),YVo=i(Ee),y2=n(Ee,"LI",{});var K7e=s(y2);Pge=n(K7e,"STRONG",{});var Uit=s(Pge);KVo=r(Uit,"poolformer"),Uit.forEach(t),ZVo=r(K7e," \u2014 "),JO=n(K7e,"A",{href:!0});var Jit=s(JO);eXo=r(Jit,"PoolFormerForImageClassification"),Jit.forEach(t),oXo=r(K7e," (PoolFormer model)"),K7e.forEach(t),rXo=i(Ee),L2=n(Ee,"LI",{});var Z7e=s(L2);Ige=n(Z7e,"STRONG",{});var Yit=s(Ige);tXo=r(Yit,"regnet"),Yit.forEach(t),aXo=r(Z7e," \u2014 "),YO=n(Z7e,"A",{href:!0});var Kit=s(YO);nXo=r(Kit,"RegNetForImageClassification"),Kit.forEach(t),sXo=r(Z7e," (RegNet model)"),Z7e.forEach(t),lXo=i(Ee),x2=n(Ee,"LI",{});var exe=s(x2);qge=n(exe,"STRONG",{});var Zit=s(qge);iXo=r(Zit,"resnet"),Zit.forEach(t),dXo=r(exe," \u2014 "),KO=n(exe,"A",{href:!0});var edt=s(KO);cXo=r(edt,"ResNetForImageClassification"),edt.forEach(t),fXo=r(exe," (ResNet model)"),exe.forEach(t),mXo=i(Ee),$2=n(Ee,"LI",{});var oxe=s($2);Nge=n(oxe,"STRONG",{});var odt=s(Nge);gXo=r(odt,"segformer"),odt.forEach(t),hXo=r(oxe," \u2014 "),ZO=n(oxe,"A",{href:!0});var rdt=s(ZO);pXo=r(rdt,"SegformerForImageClassification"),rdt.forEach(t),uXo=r(oxe," (SegFormer model)"),oxe.forEach(t),_Xo=i(Ee),k2=n(Ee,"LI",{});var rxe=s(k2);jge=n(rxe,"STRONG",{});var tdt=s(jge);bXo=r(tdt,"swin"),tdt.forEach(t),vXo=r(rxe," \u2014 "),eV=n(rxe,"A",{href:!0});var adt=s(eV);FXo=r(adt,"SwinForImageClassification"),adt.forEach(t),TXo=r(rxe," (Swin model)"),rxe.forEach(t),MXo=i(Ee),S2=n(Ee,"LI",{});var txe=s(S2);Dge=n(txe,"STRONG",{});var ndt=s(Dge);EXo=r(ndt,"van"),ndt.forEach(t),CXo=r(txe," \u2014 "),oV=n(txe,"A",{href:!0});var sdt=s(oV);wXo=r(sdt,"VanForImageClassification"),sdt.forEach(t),AXo=r(txe," (VAN model)"),txe.forEach(t),yXo=i(Ee),R2=n(Ee,"LI",{});var axe=s(R2);Gge=n(axe,"STRONG",{});var ldt=s(Gge);LXo=r(ldt,"vit"),ldt.forEach(t),xXo=r(axe," \u2014 "),rV=n(axe,"A",{href:!0});var idt=s(rV);$Xo=r(idt,"ViTForImageClassification"),idt.forEach(t),kXo=r(axe," (ViT model)"),axe.forEach(t),Ee.forEach(t),SXo=i(la),B2=n(la,"P",{});var nxe=s(B2);RXo=r(nxe,"The model is set in evaluation mode by default using "),Oge=n(nxe,"CODE",{});var ddt=s(Oge);BXo=r(ddt,"model.eval()"),ddt.forEach(t),PXo=r(nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(nxe,"CODE",{});var cdt=s(Vge);IXo=r(cdt,"model.train()"),cdt.forEach(t),nxe.forEach(t),qXo=i(la),T(P2.$$.fragment,la),la.forEach(t),Ws.forEach(t),_Pe=i(f),Yi=n(f,"H2",{class:!0});var vqe=s(Yi);I2=n(vqe,"A",{id:!0,class:!0,href:!0});var fdt=s(I2);Xge=n(fdt,"SPAN",{});var mdt=s(Xge);T(lL.$$.fragment,mdt),mdt.forEach(t),fdt.forEach(t),NXo=i(vqe),zge=n(vqe,"SPAN",{});var gdt=s(zge);jXo=r(gdt,"AutoModelForVision2Seq"),gdt.forEach(t),vqe.forEach(t),bPe=i(f),Do=n(f,"DIV",{class:!0});var Hs=s(Do);T(iL.$$.fragment,Hs),DXo=i(Hs),Ki=n(Hs,"P",{});var WY=s(Ki);GXo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tV=n(WY,"A",{href:!0});var hdt=s(tV);OXo=r(hdt,"from_pretrained()"),hdt.forEach(t),VXo=r(WY," class method or the "),aV=n(WY,"A",{href:!0});var pdt=s(aV);XXo=r(pdt,"from_config()"),pdt.forEach(t),zXo=r(WY,` class
method.`),WY.forEach(t),QXo=i(Hs),dL=n(Hs,"P",{});var Fqe=s(dL);WXo=r(Fqe,"This class cannot be instantiated directly using "),Qge=n(Fqe,"CODE",{});var udt=s(Qge);HXo=r(udt,"__init__()"),udt.forEach(t),UXo=r(Fqe," (throws an error)."),Fqe.forEach(t),JXo=i(Hs),mt=n(Hs,"DIV",{class:!0});var aA=s(mt);T(cL.$$.fragment,aA),YXo=i(aA),Wge=n(aA,"P",{});var _dt=s(Wge);KXo=r(_dt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_dt.forEach(t),ZXo=i(aA),Zi=n(aA,"P",{});var HY=s(Zi);ezo=r(HY,`Note:
Loading a model from its configuration file does `),Hge=n(HY,"STRONG",{});var bdt=s(Hge);ozo=r(bdt,"not"),bdt.forEach(t),rzo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nV=n(HY,"A",{href:!0});var vdt=s(nV);tzo=r(vdt,"from_pretrained()"),vdt.forEach(t),azo=r(HY," to load the model weights."),HY.forEach(t),nzo=i(aA),T(q2.$$.fragment,aA),aA.forEach(t),szo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(fL.$$.fragment,ia),lzo=i(ia),Uge=n(ia,"P",{});var Fdt=s(Uge);izo=r(Fdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fdt.forEach(t),dzo=i(ia),Pa=n(ia,"P",{});var nA=s(Pa);czo=r(nA,"The model class to instantiate is selected based on the "),Jge=n(nA,"CODE",{});var Tdt=s(Jge);fzo=r(Tdt,"model_type"),Tdt.forEach(t),mzo=r(nA,` property of the config object (either
passed as an argument or loaded from `),Yge=n(nA,"CODE",{});var Mdt=s(Yge);gzo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),hzo=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kge=n(nA,"CODE",{});var Edt=s(Kge);pzo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),uzo=r(nA,":"),nA.forEach(t),_zo=i(ia),Zge=n(ia,"UL",{});var Cdt=s(Zge);N2=n(Cdt,"LI",{});var sxe=s(N2);ehe=n(sxe,"STRONG",{});var wdt=s(ehe);bzo=r(wdt,"vision-encoder-decoder"),wdt.forEach(t),vzo=r(sxe," \u2014 "),sV=n(sxe,"A",{href:!0});var Adt=s(sV);Fzo=r(Adt,"VisionEncoderDecoderModel"),Adt.forEach(t),Tzo=r(sxe," (Vision Encoder decoder model)"),sxe.forEach(t),Cdt.forEach(t),Mzo=i(ia),j2=n(ia,"P",{});var lxe=s(j2);Ezo=r(lxe,"The model is set in evaluation mode by default using "),ohe=n(lxe,"CODE",{});var ydt=s(ohe);Czo=r(ydt,"model.eval()"),ydt.forEach(t),wzo=r(lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=n(lxe,"CODE",{});var Ldt=s(rhe);Azo=r(Ldt,"model.train()"),Ldt.forEach(t),lxe.forEach(t),yzo=i(ia),T(D2.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),vPe=i(f),ed=n(f,"H2",{class:!0});var Tqe=s(ed);G2=n(Tqe,"A",{id:!0,class:!0,href:!0});var xdt=s(G2);the=n(xdt,"SPAN",{});var $dt=s(the);T(mL.$$.fragment,$dt),$dt.forEach(t),xdt.forEach(t),Lzo=i(Tqe),ahe=n(Tqe,"SPAN",{});var kdt=s(ahe);xzo=r(kdt,"AutoModelForAudioClassification"),kdt.forEach(t),Tqe.forEach(t),FPe=i(f),Go=n(f,"DIV",{class:!0});var Us=s(Go);T(gL.$$.fragment,Us),$zo=i(Us),od=n(Us,"P",{});var UY=s(od);kzo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lV=n(UY,"A",{href:!0});var Sdt=s(lV);Szo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),Rzo=r(UY," class method or the "),iV=n(UY,"A",{href:!0});var Rdt=s(iV);Bzo=r(Rdt,"from_config()"),Rdt.forEach(t),Pzo=r(UY,` class
method.`),UY.forEach(t),Izo=i(Us),hL=n(Us,"P",{});var Mqe=s(hL);qzo=r(Mqe,"This class cannot be instantiated directly using "),nhe=n(Mqe,"CODE",{});var Bdt=s(nhe);Nzo=r(Bdt,"__init__()"),Bdt.forEach(t),jzo=r(Mqe," (throws an error)."),Mqe.forEach(t),Dzo=i(Us),gt=n(Us,"DIV",{class:!0});var sA=s(gt);T(pL.$$.fragment,sA),Gzo=i(sA),she=n(sA,"P",{});var Pdt=s(she);Ozo=r(Pdt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Pdt.forEach(t),Vzo=i(sA),rd=n(sA,"P",{});var JY=s(rd);Xzo=r(JY,`Note:
Loading a model from its configuration file does `),lhe=n(JY,"STRONG",{});var Idt=s(lhe);zzo=r(Idt,"not"),Idt.forEach(t),Qzo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),dV=n(JY,"A",{href:!0});var qdt=s(dV);Wzo=r(qdt,"from_pretrained()"),qdt.forEach(t),Hzo=r(JY," to load the model weights."),JY.forEach(t),Uzo=i(sA),T(O2.$$.fragment,sA),sA.forEach(t),Jzo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(uL.$$.fragment,da),Yzo=i(da),ihe=n(da,"P",{});var Ndt=s(ihe);Kzo=r(Ndt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ndt.forEach(t),Zzo=i(da),Ia=n(da,"P",{});var lA=s(Ia);eQo=r(lA,"The model class to instantiate is selected based on the "),dhe=n(lA,"CODE",{});var jdt=s(dhe);oQo=r(jdt,"model_type"),jdt.forEach(t),rQo=r(lA,` property of the config object (either
passed as an argument or loaded from `),che=n(lA,"CODE",{});var Ddt=s(che);tQo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),aQo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fhe=n(lA,"CODE",{});var Gdt=s(fhe);nQo=r(Gdt,"pretrained_model_name_or_path"),Gdt.forEach(t),sQo=r(lA,":"),lA.forEach(t),lQo=i(da),Ne=n(da,"UL",{});var bo=s(Ne);V2=n(bo,"LI",{});var ixe=s(V2);mhe=n(ixe,"STRONG",{});var Odt=s(mhe);iQo=r(Odt,"data2vec-audio"),Odt.forEach(t),dQo=r(ixe," \u2014 "),cV=n(ixe,"A",{href:!0});var Vdt=s(cV);cQo=r(Vdt,"Data2VecAudioForSequenceClassification"),Vdt.forEach(t),fQo=r(ixe," (Data2VecAudio model)"),ixe.forEach(t),mQo=i(bo),X2=n(bo,"LI",{});var dxe=s(X2);ghe=n(dxe,"STRONG",{});var Xdt=s(ghe);gQo=r(Xdt,"hubert"),Xdt.forEach(t),hQo=r(dxe," \u2014 "),fV=n(dxe,"A",{href:!0});var zdt=s(fV);pQo=r(zdt,"HubertForSequenceClassification"),zdt.forEach(t),uQo=r(dxe," (Hubert model)"),dxe.forEach(t),_Qo=i(bo),z2=n(bo,"LI",{});var cxe=s(z2);hhe=n(cxe,"STRONG",{});var Qdt=s(hhe);bQo=r(Qdt,"sew"),Qdt.forEach(t),vQo=r(cxe," \u2014 "),mV=n(cxe,"A",{href:!0});var Wdt=s(mV);FQo=r(Wdt,"SEWForSequenceClassification"),Wdt.forEach(t),TQo=r(cxe," (SEW model)"),cxe.forEach(t),MQo=i(bo),Q2=n(bo,"LI",{});var fxe=s(Q2);phe=n(fxe,"STRONG",{});var Hdt=s(phe);EQo=r(Hdt,"sew-d"),Hdt.forEach(t),CQo=r(fxe," \u2014 "),gV=n(fxe,"A",{href:!0});var Udt=s(gV);wQo=r(Udt,"SEWDForSequenceClassification"),Udt.forEach(t),AQo=r(fxe," (SEW-D model)"),fxe.forEach(t),yQo=i(bo),W2=n(bo,"LI",{});var mxe=s(W2);uhe=n(mxe,"STRONG",{});var Jdt=s(uhe);LQo=r(Jdt,"unispeech"),Jdt.forEach(t),xQo=r(mxe," \u2014 "),hV=n(mxe,"A",{href:!0});var Ydt=s(hV);$Qo=r(Ydt,"UniSpeechForSequenceClassification"),Ydt.forEach(t),kQo=r(mxe," (UniSpeech model)"),mxe.forEach(t),SQo=i(bo),H2=n(bo,"LI",{});var gxe=s(H2);_he=n(gxe,"STRONG",{});var Kdt=s(_he);RQo=r(Kdt,"unispeech-sat"),Kdt.forEach(t),BQo=r(gxe," \u2014 "),pV=n(gxe,"A",{href:!0});var Zdt=s(pV);PQo=r(Zdt,"UniSpeechSatForSequenceClassification"),Zdt.forEach(t),IQo=r(gxe," (UniSpeechSat model)"),gxe.forEach(t),qQo=i(bo),U2=n(bo,"LI",{});var hxe=s(U2);bhe=n(hxe,"STRONG",{});var ect=s(bhe);NQo=r(ect,"wav2vec2"),ect.forEach(t),jQo=r(hxe," \u2014 "),uV=n(hxe,"A",{href:!0});var oct=s(uV);DQo=r(oct,"Wav2Vec2ForSequenceClassification"),oct.forEach(t),GQo=r(hxe," (Wav2Vec2 model)"),hxe.forEach(t),OQo=i(bo),J2=n(bo,"LI",{});var pxe=s(J2);vhe=n(pxe,"STRONG",{});var rct=s(vhe);VQo=r(rct,"wavlm"),rct.forEach(t),XQo=r(pxe," \u2014 "),_V=n(pxe,"A",{href:!0});var tct=s(_V);zQo=r(tct,"WavLMForSequenceClassification"),tct.forEach(t),QQo=r(pxe," (WavLM model)"),pxe.forEach(t),bo.forEach(t),WQo=i(da),Y2=n(da,"P",{});var uxe=s(Y2);HQo=r(uxe,"The model is set in evaluation mode by default using "),Fhe=n(uxe,"CODE",{});var act=s(Fhe);UQo=r(act,"model.eval()"),act.forEach(t),JQo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(uxe,"CODE",{});var nct=s(The);YQo=r(nct,"model.train()"),nct.forEach(t),uxe.forEach(t),KQo=i(da),T(K2.$$.fragment,da),da.forEach(t),Us.forEach(t),TPe=i(f),td=n(f,"H2",{class:!0});var Eqe=s(td);Z2=n(Eqe,"A",{id:!0,class:!0,href:!0});var sct=s(Z2);Mhe=n(sct,"SPAN",{});var lct=s(Mhe);T(_L.$$.fragment,lct),lct.forEach(t),sct.forEach(t),ZQo=i(Eqe),Ehe=n(Eqe,"SPAN",{});var ict=s(Ehe);eWo=r(ict,"AutoModelForAudioFrameClassification"),ict.forEach(t),Eqe.forEach(t),MPe=i(f),Oo=n(f,"DIV",{class:!0});var Js=s(Oo);T(bL.$$.fragment,Js),oWo=i(Js),ad=n(Js,"P",{});var YY=s(ad);rWo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bV=n(YY,"A",{href:!0});var dct=s(bV);tWo=r(dct,"from_pretrained()"),dct.forEach(t),aWo=r(YY," class method or the "),vV=n(YY,"A",{href:!0});var cct=s(vV);nWo=r(cct,"from_config()"),cct.forEach(t),sWo=r(YY,` class
method.`),YY.forEach(t),lWo=i(Js),vL=n(Js,"P",{});var Cqe=s(vL);iWo=r(Cqe,"This class cannot be instantiated directly using "),Che=n(Cqe,"CODE",{});var fct=s(Che);dWo=r(fct,"__init__()"),fct.forEach(t),cWo=r(Cqe," (throws an error)."),Cqe.forEach(t),fWo=i(Js),ht=n(Js,"DIV",{class:!0});var iA=s(ht);T(FL.$$.fragment,iA),mWo=i(iA),whe=n(iA,"P",{});var mct=s(whe);gWo=r(mct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mct.forEach(t),hWo=i(iA),nd=n(iA,"P",{});var KY=s(nd);pWo=r(KY,`Note:
Loading a model from its configuration file does `),Ahe=n(KY,"STRONG",{});var gct=s(Ahe);uWo=r(gct,"not"),gct.forEach(t),_Wo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n(KY,"A",{href:!0});var hct=s(FV);bWo=r(hct,"from_pretrained()"),hct.forEach(t),vWo=r(KY," to load the model weights."),KY.forEach(t),FWo=i(iA),T(e5.$$.fragment,iA),iA.forEach(t),TWo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(TL.$$.fragment,ca),MWo=i(ca),yhe=n(ca,"P",{});var pct=s(yhe);EWo=r(pct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pct.forEach(t),CWo=i(ca),qa=n(ca,"P",{});var dA=s(qa);wWo=r(dA,"The model class to instantiate is selected based on the "),Lhe=n(dA,"CODE",{});var uct=s(Lhe);AWo=r(uct,"model_type"),uct.forEach(t),yWo=r(dA,` property of the config object (either
passed as an argument or loaded from `),xhe=n(dA,"CODE",{});var _ct=s(xhe);LWo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),xWo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(dA,"CODE",{});var bct=s($he);$Wo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),kWo=r(dA,":"),dA.forEach(t),SWo=i(ca),Na=n(ca,"UL",{});var cA=s(Na);o5=n(cA,"LI",{});var _xe=s(o5);khe=n(_xe,"STRONG",{});var vct=s(khe);RWo=r(vct,"data2vec-audio"),vct.forEach(t),BWo=r(_xe," \u2014 "),TV=n(_xe,"A",{href:!0});var Fct=s(TV);PWo=r(Fct,"Data2VecAudioForAudioFrameClassification"),Fct.forEach(t),IWo=r(_xe," (Data2VecAudio model)"),_xe.forEach(t),qWo=i(cA),r5=n(cA,"LI",{});var bxe=s(r5);She=n(bxe,"STRONG",{});var Tct=s(She);NWo=r(Tct,"unispeech-sat"),Tct.forEach(t),jWo=r(bxe," \u2014 "),MV=n(bxe,"A",{href:!0});var Mct=s(MV);DWo=r(Mct,"UniSpeechSatForAudioFrameClassification"),Mct.forEach(t),GWo=r(bxe," (UniSpeechSat model)"),bxe.forEach(t),OWo=i(cA),t5=n(cA,"LI",{});var vxe=s(t5);Rhe=n(vxe,"STRONG",{});var Ect=s(Rhe);VWo=r(Ect,"wav2vec2"),Ect.forEach(t),XWo=r(vxe," \u2014 "),EV=n(vxe,"A",{href:!0});var Cct=s(EV);zWo=r(Cct,"Wav2Vec2ForAudioFrameClassification"),Cct.forEach(t),QWo=r(vxe," (Wav2Vec2 model)"),vxe.forEach(t),WWo=i(cA),a5=n(cA,"LI",{});var Fxe=s(a5);Bhe=n(Fxe,"STRONG",{});var wct=s(Bhe);HWo=r(wct,"wavlm"),wct.forEach(t),UWo=r(Fxe," \u2014 "),CV=n(Fxe,"A",{href:!0});var Act=s(CV);JWo=r(Act,"WavLMForAudioFrameClassification"),Act.forEach(t),YWo=r(Fxe," (WavLM model)"),Fxe.forEach(t),cA.forEach(t),KWo=i(ca),n5=n(ca,"P",{});var Txe=s(n5);ZWo=r(Txe,"The model is set in evaluation mode by default using "),Phe=n(Txe,"CODE",{});var yct=s(Phe);eHo=r(yct,"model.eval()"),yct.forEach(t),oHo=r(Txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(Txe,"CODE",{});var Lct=s(Ihe);rHo=r(Lct,"model.train()"),Lct.forEach(t),Txe.forEach(t),tHo=i(ca),T(s5.$$.fragment,ca),ca.forEach(t),Js.forEach(t),EPe=i(f),sd=n(f,"H2",{class:!0});var wqe=s(sd);l5=n(wqe,"A",{id:!0,class:!0,href:!0});var xct=s(l5);qhe=n(xct,"SPAN",{});var $ct=s(qhe);T(ML.$$.fragment,$ct),$ct.forEach(t),xct.forEach(t),aHo=i(wqe),Nhe=n(wqe,"SPAN",{});var kct=s(Nhe);nHo=r(kct,"AutoModelForCTC"),kct.forEach(t),wqe.forEach(t),CPe=i(f),Vo=n(f,"DIV",{class:!0});var Ys=s(Vo);T(EL.$$.fragment,Ys),sHo=i(Ys),ld=n(Ys,"P",{});var ZY=s(ld);lHo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wV=n(ZY,"A",{href:!0});var Sct=s(wV);iHo=r(Sct,"from_pretrained()"),Sct.forEach(t),dHo=r(ZY," class method or the "),AV=n(ZY,"A",{href:!0});var Rct=s(AV);cHo=r(Rct,"from_config()"),Rct.forEach(t),fHo=r(ZY,` class
method.`),ZY.forEach(t),mHo=i(Ys),CL=n(Ys,"P",{});var Aqe=s(CL);gHo=r(Aqe,"This class cannot be instantiated directly using "),jhe=n(Aqe,"CODE",{});var Bct=s(jhe);hHo=r(Bct,"__init__()"),Bct.forEach(t),pHo=r(Aqe," (throws an error)."),Aqe.forEach(t),uHo=i(Ys),pt=n(Ys,"DIV",{class:!0});var fA=s(pt);T(wL.$$.fragment,fA),_Ho=i(fA),Dhe=n(fA,"P",{});var Pct=s(Dhe);bHo=r(Pct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Pct.forEach(t),vHo=i(fA),id=n(fA,"P",{});var eK=s(id);FHo=r(eK,`Note:
Loading a model from its configuration file does `),Ghe=n(eK,"STRONG",{});var Ict=s(Ghe);THo=r(Ict,"not"),Ict.forEach(t),MHo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(eK,"A",{href:!0});var qct=s(yV);EHo=r(qct,"from_pretrained()"),qct.forEach(t),CHo=r(eK," to load the model weights."),eK.forEach(t),wHo=i(fA),T(i5.$$.fragment,fA),fA.forEach(t),AHo=i(Ys),co=n(Ys,"DIV",{class:!0});var fa=s(co);T(AL.$$.fragment,fa),yHo=i(fa),Ohe=n(fa,"P",{});var Nct=s(Ohe);LHo=r(Nct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Nct.forEach(t),xHo=i(fa),ja=n(fa,"P",{});var mA=s(ja);$Ho=r(mA,"The model class to instantiate is selected based on the "),Vhe=n(mA,"CODE",{});var jct=s(Vhe);kHo=r(jct,"model_type"),jct.forEach(t),SHo=r(mA,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(mA,"CODE",{});var Dct=s(Xhe);RHo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),BHo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(mA,"CODE",{});var Gct=s(zhe);PHo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),IHo=r(mA,":"),mA.forEach(t),qHo=i(fa),je=n(fa,"UL",{});var vo=s(je);d5=n(vo,"LI",{});var Mxe=s(d5);Qhe=n(Mxe,"STRONG",{});var Oct=s(Qhe);NHo=r(Oct,"data2vec-audio"),Oct.forEach(t),jHo=r(Mxe," \u2014 "),LV=n(Mxe,"A",{href:!0});var Vct=s(LV);DHo=r(Vct,"Data2VecAudioForCTC"),Vct.forEach(t),GHo=r(Mxe," (Data2VecAudio model)"),Mxe.forEach(t),OHo=i(vo),c5=n(vo,"LI",{});var Exe=s(c5);Whe=n(Exe,"STRONG",{});var Xct=s(Whe);VHo=r(Xct,"hubert"),Xct.forEach(t),XHo=r(Exe," \u2014 "),xV=n(Exe,"A",{href:!0});var zct=s(xV);zHo=r(zct,"HubertForCTC"),zct.forEach(t),QHo=r(Exe," (Hubert model)"),Exe.forEach(t),WHo=i(vo),f5=n(vo,"LI",{});var Cxe=s(f5);Hhe=n(Cxe,"STRONG",{});var Qct=s(Hhe);HHo=r(Qct,"sew"),Qct.forEach(t),UHo=r(Cxe," \u2014 "),$V=n(Cxe,"A",{href:!0});var Wct=s($V);JHo=r(Wct,"SEWForCTC"),Wct.forEach(t),YHo=r(Cxe," (SEW model)"),Cxe.forEach(t),KHo=i(vo),m5=n(vo,"LI",{});var wxe=s(m5);Uhe=n(wxe,"STRONG",{});var Hct=s(Uhe);ZHo=r(Hct,"sew-d"),Hct.forEach(t),eUo=r(wxe," \u2014 "),kV=n(wxe,"A",{href:!0});var Uct=s(kV);oUo=r(Uct,"SEWDForCTC"),Uct.forEach(t),rUo=r(wxe," (SEW-D model)"),wxe.forEach(t),tUo=i(vo),g5=n(vo,"LI",{});var Axe=s(g5);Jhe=n(Axe,"STRONG",{});var Jct=s(Jhe);aUo=r(Jct,"unispeech"),Jct.forEach(t),nUo=r(Axe," \u2014 "),SV=n(Axe,"A",{href:!0});var Yct=s(SV);sUo=r(Yct,"UniSpeechForCTC"),Yct.forEach(t),lUo=r(Axe," (UniSpeech model)"),Axe.forEach(t),iUo=i(vo),h5=n(vo,"LI",{});var yxe=s(h5);Yhe=n(yxe,"STRONG",{});var Kct=s(Yhe);dUo=r(Kct,"unispeech-sat"),Kct.forEach(t),cUo=r(yxe," \u2014 "),RV=n(yxe,"A",{href:!0});var Zct=s(RV);fUo=r(Zct,"UniSpeechSatForCTC"),Zct.forEach(t),mUo=r(yxe," (UniSpeechSat model)"),yxe.forEach(t),gUo=i(vo),p5=n(vo,"LI",{});var Lxe=s(p5);Khe=n(Lxe,"STRONG",{});var eft=s(Khe);hUo=r(eft,"wav2vec2"),eft.forEach(t),pUo=r(Lxe," \u2014 "),BV=n(Lxe,"A",{href:!0});var oft=s(BV);uUo=r(oft,"Wav2Vec2ForCTC"),oft.forEach(t),_Uo=r(Lxe," (Wav2Vec2 model)"),Lxe.forEach(t),bUo=i(vo),u5=n(vo,"LI",{});var xxe=s(u5);Zhe=n(xxe,"STRONG",{});var rft=s(Zhe);vUo=r(rft,"wavlm"),rft.forEach(t),FUo=r(xxe," \u2014 "),PV=n(xxe,"A",{href:!0});var tft=s(PV);TUo=r(tft,"WavLMForCTC"),tft.forEach(t),MUo=r(xxe," (WavLM model)"),xxe.forEach(t),vo.forEach(t),EUo=i(fa),_5=n(fa,"P",{});var $xe=s(_5);CUo=r($xe,"The model is set in evaluation mode by default using "),epe=n($xe,"CODE",{});var aft=s(epe);wUo=r(aft,"model.eval()"),aft.forEach(t),AUo=r($xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n($xe,"CODE",{});var nft=s(ope);yUo=r(nft,"model.train()"),nft.forEach(t),$xe.forEach(t),LUo=i(fa),T(b5.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),wPe=i(f),dd=n(f,"H2",{class:!0});var yqe=s(dd);v5=n(yqe,"A",{id:!0,class:!0,href:!0});var sft=s(v5);rpe=n(sft,"SPAN",{});var lft=s(rpe);T(yL.$$.fragment,lft),lft.forEach(t),sft.forEach(t),xUo=i(yqe),tpe=n(yqe,"SPAN",{});var ift=s(tpe);$Uo=r(ift,"AutoModelForSpeechSeq2Seq"),ift.forEach(t),yqe.forEach(t),APe=i(f),Xo=n(f,"DIV",{class:!0});var Ks=s(Xo);T(LL.$$.fragment,Ks),kUo=i(Ks),cd=n(Ks,"P",{});var oK=s(cd);SUo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IV=n(oK,"A",{href:!0});var dft=s(IV);RUo=r(dft,"from_pretrained()"),dft.forEach(t),BUo=r(oK," class method or the "),qV=n(oK,"A",{href:!0});var cft=s(qV);PUo=r(cft,"from_config()"),cft.forEach(t),IUo=r(oK,` class
method.`),oK.forEach(t),qUo=i(Ks),xL=n(Ks,"P",{});var Lqe=s(xL);NUo=r(Lqe,"This class cannot be instantiated directly using "),ape=n(Lqe,"CODE",{});var fft=s(ape);jUo=r(fft,"__init__()"),fft.forEach(t),DUo=r(Lqe," (throws an error)."),Lqe.forEach(t),GUo=i(Ks),ut=n(Ks,"DIV",{class:!0});var gA=s(ut);T($L.$$.fragment,gA),OUo=i(gA),npe=n(gA,"P",{});var mft=s(npe);VUo=r(mft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mft.forEach(t),XUo=i(gA),fd=n(gA,"P",{});var rK=s(fd);zUo=r(rK,`Note:
Loading a model from its configuration file does `),spe=n(rK,"STRONG",{});var gft=s(spe);QUo=r(gft,"not"),gft.forEach(t),WUo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(rK,"A",{href:!0});var hft=s(NV);HUo=r(hft,"from_pretrained()"),hft.forEach(t),UUo=r(rK," to load the model weights."),rK.forEach(t),JUo=i(gA),T(F5.$$.fragment,gA),gA.forEach(t),YUo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ma=s(fo);T(kL.$$.fragment,ma),KUo=i(ma),lpe=n(ma,"P",{});var pft=s(lpe);ZUo=r(pft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pft.forEach(t),eJo=i(ma),Da=n(ma,"P",{});var hA=s(Da);oJo=r(hA,"The model class to instantiate is selected based on the "),ipe=n(hA,"CODE",{});var uft=s(ipe);rJo=r(uft,"model_type"),uft.forEach(t),tJo=r(hA,` property of the config object (either
passed as an argument or loaded from `),dpe=n(hA,"CODE",{});var _ft=s(dpe);aJo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),nJo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(hA,"CODE",{});var bft=s(cpe);sJo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),lJo=r(hA,":"),hA.forEach(t),iJo=i(ma),SL=n(ma,"UL",{});var xqe=s(SL);T5=n(xqe,"LI",{});var kxe=s(T5);fpe=n(kxe,"STRONG",{});var vft=s(fpe);dJo=r(vft,"speech-encoder-decoder"),vft.forEach(t),cJo=r(kxe," \u2014 "),jV=n(kxe,"A",{href:!0});var Fft=s(jV);fJo=r(Fft,"SpeechEncoderDecoderModel"),Fft.forEach(t),mJo=r(kxe," (Speech Encoder decoder model)"),kxe.forEach(t),gJo=i(xqe),M5=n(xqe,"LI",{});var Sxe=s(M5);mpe=n(Sxe,"STRONG",{});var Tft=s(mpe);hJo=r(Tft,"speech_to_text"),Tft.forEach(t),pJo=r(Sxe," \u2014 "),DV=n(Sxe,"A",{href:!0});var Mft=s(DV);uJo=r(Mft,"Speech2TextForConditionalGeneration"),Mft.forEach(t),_Jo=r(Sxe," (Speech2Text model)"),Sxe.forEach(t),xqe.forEach(t),bJo=i(ma),E5=n(ma,"P",{});var Rxe=s(E5);vJo=r(Rxe,"The model is set in evaluation mode by default using "),gpe=n(Rxe,"CODE",{});var Eft=s(gpe);FJo=r(Eft,"model.eval()"),Eft.forEach(t),TJo=r(Rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hpe=n(Rxe,"CODE",{});var Cft=s(hpe);MJo=r(Cft,"model.train()"),Cft.forEach(t),Rxe.forEach(t),EJo=i(ma),T(C5.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),yPe=i(f),md=n(f,"H2",{class:!0});var $qe=s(md);w5=n($qe,"A",{id:!0,class:!0,href:!0});var wft=s(w5);ppe=n(wft,"SPAN",{});var Aft=s(ppe);T(RL.$$.fragment,Aft),Aft.forEach(t),wft.forEach(t),CJo=i($qe),upe=n($qe,"SPAN",{});var yft=s(upe);wJo=r(yft,"AutoModelForAudioXVector"),yft.forEach(t),$qe.forEach(t),LPe=i(f),zo=n(f,"DIV",{class:!0});var Zs=s(zo);T(BL.$$.fragment,Zs),AJo=i(Zs),gd=n(Zs,"P",{});var tK=s(gd);yJo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GV=n(tK,"A",{href:!0});var Lft=s(GV);LJo=r(Lft,"from_pretrained()"),Lft.forEach(t),xJo=r(tK," class method or the "),OV=n(tK,"A",{href:!0});var xft=s(OV);$Jo=r(xft,"from_config()"),xft.forEach(t),kJo=r(tK,` class
method.`),tK.forEach(t),SJo=i(Zs),PL=n(Zs,"P",{});var kqe=s(PL);RJo=r(kqe,"This class cannot be instantiated directly using "),_pe=n(kqe,"CODE",{});var $ft=s(_pe);BJo=r($ft,"__init__()"),$ft.forEach(t),PJo=r(kqe," (throws an error)."),kqe.forEach(t),IJo=i(Zs),_t=n(Zs,"DIV",{class:!0});var pA=s(_t);T(IL.$$.fragment,pA),qJo=i(pA),bpe=n(pA,"P",{});var kft=s(bpe);NJo=r(kft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),kft.forEach(t),jJo=i(pA),hd=n(pA,"P",{});var aK=s(hd);DJo=r(aK,`Note:
Loading a model from its configuration file does `),vpe=n(aK,"STRONG",{});var Sft=s(vpe);GJo=r(Sft,"not"),Sft.forEach(t),OJo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(aK,"A",{href:!0});var Rft=s(VV);VJo=r(Rft,"from_pretrained()"),Rft.forEach(t),XJo=r(aK," to load the model weights."),aK.forEach(t),zJo=i(pA),T(A5.$$.fragment,pA),pA.forEach(t),QJo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T(qL.$$.fragment,ga),WJo=i(ga),Fpe=n(ga,"P",{});var Bft=s(Fpe);HJo=r(Bft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Bft.forEach(t),UJo=i(ga),Ga=n(ga,"P",{});var uA=s(Ga);JJo=r(uA,"The model class to instantiate is selected based on the "),Tpe=n(uA,"CODE",{});var Pft=s(Tpe);YJo=r(Pft,"model_type"),Pft.forEach(t),KJo=r(uA,` property of the config object (either
passed as an argument or loaded from `),Mpe=n(uA,"CODE",{});var Ift=s(Mpe);ZJo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),eYo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Epe=n(uA,"CODE",{});var qft=s(Epe);oYo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),rYo=r(uA,":"),uA.forEach(t),tYo=i(ga),Oa=n(ga,"UL",{});var _A=s(Oa);y5=n(_A,"LI",{});var Bxe=s(y5);Cpe=n(Bxe,"STRONG",{});var Nft=s(Cpe);aYo=r(Nft,"data2vec-audio"),Nft.forEach(t),nYo=r(Bxe," \u2014 "),XV=n(Bxe,"A",{href:!0});var jft=s(XV);sYo=r(jft,"Data2VecAudioForXVector"),jft.forEach(t),lYo=r(Bxe," (Data2VecAudio model)"),Bxe.forEach(t),iYo=i(_A),L5=n(_A,"LI",{});var Pxe=s(L5);wpe=n(Pxe,"STRONG",{});var Dft=s(wpe);dYo=r(Dft,"unispeech-sat"),Dft.forEach(t),cYo=r(Pxe," \u2014 "),zV=n(Pxe,"A",{href:!0});var Gft=s(zV);fYo=r(Gft,"UniSpeechSatForXVector"),Gft.forEach(t),mYo=r(Pxe," (UniSpeechSat model)"),Pxe.forEach(t),gYo=i(_A),x5=n(_A,"LI",{});var Ixe=s(x5);Ape=n(Ixe,"STRONG",{});var Oft=s(Ape);hYo=r(Oft,"wav2vec2"),Oft.forEach(t),pYo=r(Ixe," \u2014 "),QV=n(Ixe,"A",{href:!0});var Vft=s(QV);uYo=r(Vft,"Wav2Vec2ForXVector"),Vft.forEach(t),_Yo=r(Ixe," (Wav2Vec2 model)"),Ixe.forEach(t),bYo=i(_A),$5=n(_A,"LI",{});var qxe=s($5);ype=n(qxe,"STRONG",{});var Xft=s(ype);vYo=r(Xft,"wavlm"),Xft.forEach(t),FYo=r(qxe," \u2014 "),WV=n(qxe,"A",{href:!0});var zft=s(WV);TYo=r(zft,"WavLMForXVector"),zft.forEach(t),MYo=r(qxe," (WavLM model)"),qxe.forEach(t),_A.forEach(t),EYo=i(ga),k5=n(ga,"P",{});var Nxe=s(k5);CYo=r(Nxe,"The model is set in evaluation mode by default using "),Lpe=n(Nxe,"CODE",{});var Qft=s(Lpe);wYo=r(Qft,"model.eval()"),Qft.forEach(t),AYo=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(Nxe,"CODE",{});var Wft=s(xpe);yYo=r(Wft,"model.train()"),Wft.forEach(t),Nxe.forEach(t),LYo=i(ga),T(S5.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),xPe=i(f),pd=n(f,"H2",{class:!0});var Sqe=s(pd);R5=n(Sqe,"A",{id:!0,class:!0,href:!0});var Hft=s(R5);$pe=n(Hft,"SPAN",{});var Uft=s($pe);T(NL.$$.fragment,Uft),Uft.forEach(t),Hft.forEach(t),xYo=i(Sqe),kpe=n(Sqe,"SPAN",{});var Jft=s(kpe);$Yo=r(Jft,"AutoModelForMaskedImageModeling"),Jft.forEach(t),Sqe.forEach(t),$Pe=i(f),Qo=n(f,"DIV",{class:!0});var el=s(Qo);T(jL.$$.fragment,el),kYo=i(el),ud=n(el,"P",{});var nK=s(ud);SYo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HV=n(nK,"A",{href:!0});var Yft=s(HV);RYo=r(Yft,"from_pretrained()"),Yft.forEach(t),BYo=r(nK," class method or the "),UV=n(nK,"A",{href:!0});var Kft=s(UV);PYo=r(Kft,"from_config()"),Kft.forEach(t),IYo=r(nK,` class
method.`),nK.forEach(t),qYo=i(el),DL=n(el,"P",{});var Rqe=s(DL);NYo=r(Rqe,"This class cannot be instantiated directly using "),Spe=n(Rqe,"CODE",{});var Zft=s(Spe);jYo=r(Zft,"__init__()"),Zft.forEach(t),DYo=r(Rqe," (throws an error)."),Rqe.forEach(t),GYo=i(el),bt=n(el,"DIV",{class:!0});var bA=s(bt);T(GL.$$.fragment,bA),OYo=i(bA),Rpe=n(bA,"P",{});var emt=s(Rpe);VYo=r(emt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),emt.forEach(t),XYo=i(bA),_d=n(bA,"P",{});var sK=s(_d);zYo=r(sK,`Note:
Loading a model from its configuration file does `),Bpe=n(sK,"STRONG",{});var omt=s(Bpe);QYo=r(omt,"not"),omt.forEach(t),WYo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(sK,"A",{href:!0});var rmt=s(JV);HYo=r(rmt,"from_pretrained()"),rmt.forEach(t),UYo=r(sK," to load the model weights."),sK.forEach(t),JYo=i(bA),T(B5.$$.fragment,bA),bA.forEach(t),YYo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T(OL.$$.fragment,ha),KYo=i(ha),Ppe=n(ha,"P",{});var tmt=s(Ppe);ZYo=r(tmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tmt.forEach(t),eKo=i(ha),Va=n(ha,"P",{});var vA=s(Va);oKo=r(vA,"The model class to instantiate is selected based on the "),Ipe=n(vA,"CODE",{});var amt=s(Ipe);rKo=r(amt,"model_type"),amt.forEach(t),tKo=r(vA,` property of the config object (either
passed as an argument or loaded from `),qpe=n(vA,"CODE",{});var nmt=s(qpe);aKo=r(nmt,"pretrained_model_name_or_path"),nmt.forEach(t),nKo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(vA,"CODE",{});var smt=s(Npe);sKo=r(smt,"pretrained_model_name_or_path"),smt.forEach(t),lKo=r(vA,":"),vA.forEach(t),iKo=i(ha),bd=n(ha,"UL",{});var lK=s(bd);P5=n(lK,"LI",{});var jxe=s(P5);jpe=n(jxe,"STRONG",{});var lmt=s(jpe);dKo=r(lmt,"deit"),lmt.forEach(t),cKo=r(jxe," \u2014 "),YV=n(jxe,"A",{href:!0});var imt=s(YV);fKo=r(imt,"DeiTForMaskedImageModeling"),imt.forEach(t),mKo=r(jxe," (DeiT model)"),jxe.forEach(t),gKo=i(lK),I5=n(lK,"LI",{});var Dxe=s(I5);Dpe=n(Dxe,"STRONG",{});var dmt=s(Dpe);hKo=r(dmt,"swin"),dmt.forEach(t),pKo=r(Dxe," \u2014 "),KV=n(Dxe,"A",{href:!0});var cmt=s(KV);uKo=r(cmt,"SwinForMaskedImageModeling"),cmt.forEach(t),_Ko=r(Dxe," (Swin model)"),Dxe.forEach(t),bKo=i(lK),q5=n(lK,"LI",{});var Gxe=s(q5);Gpe=n(Gxe,"STRONG",{});var fmt=s(Gpe);vKo=r(fmt,"vit"),fmt.forEach(t),FKo=r(Gxe," \u2014 "),ZV=n(Gxe,"A",{href:!0});var mmt=s(ZV);TKo=r(mmt,"ViTForMaskedImageModeling"),mmt.forEach(t),MKo=r(Gxe," (ViT model)"),Gxe.forEach(t),lK.forEach(t),EKo=i(ha),N5=n(ha,"P",{});var Oxe=s(N5);CKo=r(Oxe,"The model is set in evaluation mode by default using "),Ope=n(Oxe,"CODE",{});var gmt=s(Ope);wKo=r(gmt,"model.eval()"),gmt.forEach(t),AKo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vpe=n(Oxe,"CODE",{});var hmt=s(Vpe);yKo=r(hmt,"model.train()"),hmt.forEach(t),Oxe.forEach(t),LKo=i(ha),T(j5.$$.fragment,ha),ha.forEach(t),el.forEach(t),kPe=i(f),vd=n(f,"H2",{class:!0});var Bqe=s(vd);D5=n(Bqe,"A",{id:!0,class:!0,href:!0});var pmt=s(D5);Xpe=n(pmt,"SPAN",{});var umt=s(Xpe);T(VL.$$.fragment,umt),umt.forEach(t),pmt.forEach(t),xKo=i(Bqe),zpe=n(Bqe,"SPAN",{});var _mt=s(zpe);$Ko=r(_mt,"AutoModelForObjectDetection"),_mt.forEach(t),Bqe.forEach(t),SPe=i(f),Wo=n(f,"DIV",{class:!0});var ol=s(Wo);T(XL.$$.fragment,ol),kKo=i(ol),Fd=n(ol,"P",{});var iK=s(Fd);SKo=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eX=n(iK,"A",{href:!0});var bmt=s(eX);RKo=r(bmt,"from_pretrained()"),bmt.forEach(t),BKo=r(iK," class method or the "),oX=n(iK,"A",{href:!0});var vmt=s(oX);PKo=r(vmt,"from_config()"),vmt.forEach(t),IKo=r(iK,` class
method.`),iK.forEach(t),qKo=i(ol),zL=n(ol,"P",{});var Pqe=s(zL);NKo=r(Pqe,"This class cannot be instantiated directly using "),Qpe=n(Pqe,"CODE",{});var Fmt=s(Qpe);jKo=r(Fmt,"__init__()"),Fmt.forEach(t),DKo=r(Pqe," (throws an error)."),Pqe.forEach(t),GKo=i(ol),vt=n(ol,"DIV",{class:!0});var FA=s(vt);T(QL.$$.fragment,FA),OKo=i(FA),Wpe=n(FA,"P",{});var Tmt=s(Wpe);VKo=r(Tmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Tmt.forEach(t),XKo=i(FA),Td=n(FA,"P",{});var dK=s(Td);zKo=r(dK,`Note:
Loading a model from its configuration file does `),Hpe=n(dK,"STRONG",{});var Mmt=s(Hpe);QKo=r(Mmt,"not"),Mmt.forEach(t),WKo=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(dK,"A",{href:!0});var Emt=s(rX);HKo=r(Emt,"from_pretrained()"),Emt.forEach(t),UKo=r(dK," to load the model weights."),dK.forEach(t),JKo=i(FA),T(G5.$$.fragment,FA),FA.forEach(t),YKo=i(ol),ho=n(ol,"DIV",{class:!0});var pa=s(ho);T(WL.$$.fragment,pa),KKo=i(pa),Upe=n(pa,"P",{});var Cmt=s(Upe);ZKo=r(Cmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Cmt.forEach(t),eZo=i(pa),Xa=n(pa,"P",{});var TA=s(Xa);oZo=r(TA,"The model class to instantiate is selected based on the "),Jpe=n(TA,"CODE",{});var wmt=s(Jpe);rZo=r(wmt,"model_type"),wmt.forEach(t),tZo=r(TA,` property of the config object (either
passed as an argument or loaded from `),Ype=n(TA,"CODE",{});var Amt=s(Ype);aZo=r(Amt,"pretrained_model_name_or_path"),Amt.forEach(t),nZo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kpe=n(TA,"CODE",{});var ymt=s(Kpe);sZo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),lZo=r(TA,":"),TA.forEach(t),iZo=i(pa),HL=n(pa,"UL",{});var Iqe=s(HL);O5=n(Iqe,"LI",{});var Vxe=s(O5);Zpe=n(Vxe,"STRONG",{});var Lmt=s(Zpe);dZo=r(Lmt,"detr"),Lmt.forEach(t),cZo=r(Vxe," \u2014 "),tX=n(Vxe,"A",{href:!0});var xmt=s(tX);fZo=r(xmt,"DetrForObjectDetection"),xmt.forEach(t),mZo=r(Vxe," (DETR model)"),Vxe.forEach(t),gZo=i(Iqe),V5=n(Iqe,"LI",{});var Xxe=s(V5);eue=n(Xxe,"STRONG",{});var $mt=s(eue);hZo=r($mt,"yolos"),$mt.forEach(t),pZo=r(Xxe," \u2014 "),aX=n(Xxe,"A",{href:!0});var kmt=s(aX);uZo=r(kmt,"YolosForObjectDetection"),kmt.forEach(t),_Zo=r(Xxe," (YOLOS model)"),Xxe.forEach(t),Iqe.forEach(t),bZo=i(pa),X5=n(pa,"P",{});var zxe=s(X5);vZo=r(zxe,"The model is set in evaluation mode by default using "),oue=n(zxe,"CODE",{});var Smt=s(oue);FZo=r(Smt,"model.eval()"),Smt.forEach(t),TZo=r(zxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(zxe,"CODE",{});var Rmt=s(rue);MZo=r(Rmt,"model.train()"),Rmt.forEach(t),zxe.forEach(t),EZo=i(pa),T(z5.$$.fragment,pa),pa.forEach(t),ol.forEach(t),RPe=i(f),Md=n(f,"H2",{class:!0});var qqe=s(Md);Q5=n(qqe,"A",{id:!0,class:!0,href:!0});var Bmt=s(Q5);tue=n(Bmt,"SPAN",{});var Pmt=s(tue);T(UL.$$.fragment,Pmt),Pmt.forEach(t),Bmt.forEach(t),CZo=i(qqe),aue=n(qqe,"SPAN",{});var Imt=s(aue);wZo=r(Imt,"AutoModelForImageSegmentation"),Imt.forEach(t),qqe.forEach(t),BPe=i(f),Ho=n(f,"DIV",{class:!0});var rl=s(Ho);T(JL.$$.fragment,rl),AZo=i(rl),Ed=n(rl,"P",{});var cK=s(Ed);yZo=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),nX=n(cK,"A",{href:!0});var qmt=s(nX);LZo=r(qmt,"from_pretrained()"),qmt.forEach(t),xZo=r(cK," class method or the "),sX=n(cK,"A",{href:!0});var Nmt=s(sX);$Zo=r(Nmt,"from_config()"),Nmt.forEach(t),kZo=r(cK,` class
method.`),cK.forEach(t),SZo=i(rl),YL=n(rl,"P",{});var Nqe=s(YL);RZo=r(Nqe,"This class cannot be instantiated directly using "),nue=n(Nqe,"CODE",{});var jmt=s(nue);BZo=r(jmt,"__init__()"),jmt.forEach(t),PZo=r(Nqe," (throws an error)."),Nqe.forEach(t),IZo=i(rl),Ft=n(rl,"DIV",{class:!0});var MA=s(Ft);T(KL.$$.fragment,MA),qZo=i(MA),sue=n(MA,"P",{});var Dmt=s(sue);NZo=r(Dmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Dmt.forEach(t),jZo=i(MA),Cd=n(MA,"P",{});var fK=s(Cd);DZo=r(fK,`Note:
Loading a model from its configuration file does `),lue=n(fK,"STRONG",{});var Gmt=s(lue);GZo=r(Gmt,"not"),Gmt.forEach(t),OZo=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(fK,"A",{href:!0});var Omt=s(lX);VZo=r(Omt,"from_pretrained()"),Omt.forEach(t),XZo=r(fK," to load the model weights."),fK.forEach(t),zZo=i(MA),T(W5.$$.fragment,MA),MA.forEach(t),QZo=i(rl),po=n(rl,"DIV",{class:!0});var ua=s(po);T(ZL.$$.fragment,ua),WZo=i(ua),iue=n(ua,"P",{});var Vmt=s(iue);HZo=r(Vmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Vmt.forEach(t),UZo=i(ua),za=n(ua,"P",{});var EA=s(za);JZo=r(EA,"The model class to instantiate is selected based on the "),due=n(EA,"CODE",{});var Xmt=s(due);YZo=r(Xmt,"model_type"),Xmt.forEach(t),KZo=r(EA,` property of the config object (either
passed as an argument or loaded from `),cue=n(EA,"CODE",{});var zmt=s(cue);ZZo=r(zmt,"pretrained_model_name_or_path"),zmt.forEach(t),eer=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(EA,"CODE",{});var Qmt=s(fue);oer=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),rer=r(EA,":"),EA.forEach(t),ter=i(ua),mue=n(ua,"UL",{});var Wmt=s(mue);H5=n(Wmt,"LI",{});var Qxe=s(H5);gue=n(Qxe,"STRONG",{});var Hmt=s(gue);aer=r(Hmt,"detr"),Hmt.forEach(t),ner=r(Qxe," \u2014 "),iX=n(Qxe,"A",{href:!0});var Umt=s(iX);ser=r(Umt,"DetrForSegmentation"),Umt.forEach(t),ler=r(Qxe," (DETR model)"),Qxe.forEach(t),Wmt.forEach(t),ier=i(ua),U5=n(ua,"P",{});var Wxe=s(U5);der=r(Wxe,"The model is set in evaluation mode by default using "),hue=n(Wxe,"CODE",{});var Jmt=s(hue);cer=r(Jmt,"model.eval()"),Jmt.forEach(t),fer=r(Wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(Wxe,"CODE",{});var Ymt=s(pue);mer=r(Ymt,"model.train()"),Ymt.forEach(t),Wxe.forEach(t),ger=i(ua),T(J5.$$.fragment,ua),ua.forEach(t),rl.forEach(t),PPe=i(f),wd=n(f,"H2",{class:!0});var jqe=s(wd);Y5=n(jqe,"A",{id:!0,class:!0,href:!0});var Kmt=s(Y5);uue=n(Kmt,"SPAN",{});var Zmt=s(uue);T(e8.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),her=i(jqe),_ue=n(jqe,"SPAN",{});var egt=s(_ue);per=r(egt,"AutoModelForSemanticSegmentation"),egt.forEach(t),jqe.forEach(t),IPe=i(f),Uo=n(f,"DIV",{class:!0});var tl=s(Uo);T(o8.$$.fragment,tl),uer=i(tl),Ad=n(tl,"P",{});var mK=s(Ad);_er=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),dX=n(mK,"A",{href:!0});var ogt=s(dX);ber=r(ogt,"from_pretrained()"),ogt.forEach(t),ver=r(mK," class method or the "),cX=n(mK,"A",{href:!0});var rgt=s(cX);Fer=r(rgt,"from_config()"),rgt.forEach(t),Ter=r(mK,` class
method.`),mK.forEach(t),Mer=i(tl),r8=n(tl,"P",{});var Dqe=s(r8);Eer=r(Dqe,"This class cannot be instantiated directly using "),bue=n(Dqe,"CODE",{});var tgt=s(bue);Cer=r(tgt,"__init__()"),tgt.forEach(t),wer=r(Dqe," (throws an error)."),Dqe.forEach(t),Aer=i(tl),Tt=n(tl,"DIV",{class:!0});var CA=s(Tt);T(t8.$$.fragment,CA),yer=i(CA),vue=n(CA,"P",{});var agt=s(vue);Ler=r(agt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),agt.forEach(t),xer=i(CA),yd=n(CA,"P",{});var gK=s(yd);$er=r(gK,`Note:
Loading a model from its configuration file does `),Fue=n(gK,"STRONG",{});var ngt=s(Fue);ker=r(ngt,"not"),ngt.forEach(t),Ser=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(gK,"A",{href:!0});var sgt=s(fX);Rer=r(sgt,"from_pretrained()"),sgt.forEach(t),Ber=r(gK," to load the model weights."),gK.forEach(t),Per=i(CA),T(K5.$$.fragment,CA),CA.forEach(t),Ier=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(a8.$$.fragment,_a),qer=i(_a),Tue=n(_a,"P",{});var lgt=s(Tue);Ner=r(lgt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),lgt.forEach(t),jer=i(_a),Qa=n(_a,"P",{});var wA=s(Qa);Der=r(wA,"The model class to instantiate is selected based on the "),Mue=n(wA,"CODE",{});var igt=s(Mue);Ger=r(igt,"model_type"),igt.forEach(t),Oer=r(wA,` property of the config object (either
passed as an argument or loaded from `),Eue=n(wA,"CODE",{});var dgt=s(Eue);Ver=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),Xer=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(wA,"CODE",{});var cgt=s(Cue);zer=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),Qer=r(wA,":"),wA.forEach(t),Wer=i(_a),Wa=n(_a,"UL",{});var AA=s(Wa);Z5=n(AA,"LI",{});var Hxe=s(Z5);wue=n(Hxe,"STRONG",{});var fgt=s(wue);Her=r(fgt,"beit"),fgt.forEach(t),Uer=r(Hxe," \u2014 "),mX=n(Hxe,"A",{href:!0});var mgt=s(mX);Jer=r(mgt,"BeitForSemanticSegmentation"),mgt.forEach(t),Yer=r(Hxe," (BEiT model)"),Hxe.forEach(t),Ker=i(AA),ev=n(AA,"LI",{});var Uxe=s(ev);Aue=n(Uxe,"STRONG",{});var ggt=s(Aue);Zer=r(ggt,"data2vec-vision"),ggt.forEach(t),eor=r(Uxe," \u2014 "),gX=n(Uxe,"A",{href:!0});var hgt=s(gX);oor=r(hgt,"Data2VecVisionForSemanticSegmentation"),hgt.forEach(t),ror=r(Uxe," (Data2VecVision model)"),Uxe.forEach(t),tor=i(AA),ov=n(AA,"LI",{});var Jxe=s(ov);yue=n(Jxe,"STRONG",{});var pgt=s(yue);aor=r(pgt,"dpt"),pgt.forEach(t),nor=r(Jxe," \u2014 "),hX=n(Jxe,"A",{href:!0});var ugt=s(hX);sor=r(ugt,"DPTForSemanticSegmentation"),ugt.forEach(t),lor=r(Jxe," (DPT model)"),Jxe.forEach(t),ior=i(AA),rv=n(AA,"LI",{});var Yxe=s(rv);Lue=n(Yxe,"STRONG",{});var _gt=s(Lue);dor=r(_gt,"segformer"),_gt.forEach(t),cor=r(Yxe," \u2014 "),pX=n(Yxe,"A",{href:!0});var bgt=s(pX);mor=r(bgt,"SegformerForSemanticSegmentation"),bgt.forEach(t),gor=r(Yxe," (SegFormer model)"),Yxe.forEach(t),AA.forEach(t),hor=i(_a),tv=n(_a,"P",{});var Kxe=s(tv);por=r(Kxe,"The model is set in evaluation mode by default using "),xue=n(Kxe,"CODE",{});var vgt=s(xue);uor=r(vgt,"model.eval()"),vgt.forEach(t),_or=r(Kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(Kxe,"CODE",{});var Fgt=s($ue);bor=r(Fgt,"model.train()"),Fgt.forEach(t),Kxe.forEach(t),vor=i(_a),T(av.$$.fragment,_a),_a.forEach(t),tl.forEach(t),qPe=i(f),Ld=n(f,"H2",{class:!0});var Gqe=s(Ld);nv=n(Gqe,"A",{id:!0,class:!0,href:!0});var Tgt=s(nv);kue=n(Tgt,"SPAN",{});var Mgt=s(kue);T(n8.$$.fragment,Mgt),Mgt.forEach(t),Tgt.forEach(t),For=i(Gqe),Sue=n(Gqe,"SPAN",{});var Egt=s(Sue);Tor=r(Egt,"AutoModelForInstanceSegmentation"),Egt.forEach(t),Gqe.forEach(t),NPe=i(f),Jo=n(f,"DIV",{class:!0});var al=s(Jo);T(s8.$$.fragment,al),Mor=i(al),xd=n(al,"P",{});var hK=s(xd);Eor=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uX=n(hK,"A",{href:!0});var Cgt=s(uX);Cor=r(Cgt,"from_pretrained()"),Cgt.forEach(t),wor=r(hK," class method or the "),_X=n(hK,"A",{href:!0});var wgt=s(_X);Aor=r(wgt,"from_config()"),wgt.forEach(t),yor=r(hK,` class
method.`),hK.forEach(t),Lor=i(al),l8=n(al,"P",{});var Oqe=s(l8);xor=r(Oqe,"This class cannot be instantiated directly using "),Rue=n(Oqe,"CODE",{});var Agt=s(Rue);$or=r(Agt,"__init__()"),Agt.forEach(t),kor=r(Oqe," (throws an error)."),Oqe.forEach(t),Sor=i(al),Mt=n(al,"DIV",{class:!0});var yA=s(Mt);T(i8.$$.fragment,yA),Ror=i(yA),Bue=n(yA,"P",{});var ygt=s(Bue);Bor=r(ygt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ygt.forEach(t),Por=i(yA),$d=n(yA,"P",{});var pK=s($d);Ior=r(pK,`Note:
Loading a model from its configuration file does `),Pue=n(pK,"STRONG",{});var Lgt=s(Pue);qor=r(Lgt,"not"),Lgt.forEach(t),Nor=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(pK,"A",{href:!0});var xgt=s(bX);jor=r(xgt,"from_pretrained()"),xgt.forEach(t),Dor=r(pK," to load the model weights."),pK.forEach(t),Gor=i(yA),T(sv.$$.fragment,yA),yA.forEach(t),Oor=i(al),_o=n(al,"DIV",{class:!0});var ba=s(_o);T(d8.$$.fragment,ba),Vor=i(ba),Iue=n(ba,"P",{});var $gt=s(Iue);Xor=r($gt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$gt.forEach(t),zor=i(ba),Ha=n(ba,"P",{});var LA=s(Ha);Qor=r(LA,"The model class to instantiate is selected based on the "),que=n(LA,"CODE",{});var kgt=s(que);Wor=r(kgt,"model_type"),kgt.forEach(t),Hor=r(LA,` property of the config object (either
passed as an argument or loaded from `),Nue=n(LA,"CODE",{});var Sgt=s(Nue);Uor=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),Jor=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(LA,"CODE",{});var Rgt=s(jue);Yor=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),Kor=r(LA,":"),LA.forEach(t),Zor=i(ba),Due=n(ba,"UL",{});var Bgt=s(Due);lv=n(Bgt,"LI",{});var Zxe=s(lv);Gue=n(Zxe,"STRONG",{});var Pgt=s(Gue);err=r(Pgt,"maskformer"),Pgt.forEach(t),orr=r(Zxe," \u2014 "),vX=n(Zxe,"A",{href:!0});var Igt=s(vX);rrr=r(Igt,"MaskFormerForInstanceSegmentation"),Igt.forEach(t),trr=r(Zxe," (MaskFormer model)"),Zxe.forEach(t),Bgt.forEach(t),arr=i(ba),iv=n(ba,"P",{});var e9e=s(iv);nrr=r(e9e,"The model is set in evaluation mode by default using "),Oue=n(e9e,"CODE",{});var qgt=s(Oue);srr=r(qgt,"model.eval()"),qgt.forEach(t),lrr=r(e9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(e9e,"CODE",{});var Ngt=s(Vue);irr=r(Ngt,"model.train()"),Ngt.forEach(t),e9e.forEach(t),drr=i(ba),T(dv.$$.fragment,ba),ba.forEach(t),al.forEach(t),jPe=i(f),kd=n(f,"H2",{class:!0});var Vqe=s(kd);cv=n(Vqe,"A",{id:!0,class:!0,href:!0});var jgt=s(cv);Xue=n(jgt,"SPAN",{});var Dgt=s(Xue);T(c8.$$.fragment,Dgt),Dgt.forEach(t),jgt.forEach(t),crr=i(Vqe),zue=n(Vqe,"SPAN",{});var Ggt=s(zue);frr=r(Ggt,"TFAutoModel"),Ggt.forEach(t),Vqe.forEach(t),DPe=i(f),Yo=n(f,"DIV",{class:!0});var nl=s(Yo);T(f8.$$.fragment,nl),mrr=i(nl),Sd=n(nl,"P",{});var uK=s(Sd);grr=r(uK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FX=n(uK,"A",{href:!0});var Ogt=s(FX);hrr=r(Ogt,"from_pretrained()"),Ogt.forEach(t),prr=r(uK," class method or the "),TX=n(uK,"A",{href:!0});var Vgt=s(TX);urr=r(Vgt,"from_config()"),Vgt.forEach(t),_rr=r(uK,` class
method.`),uK.forEach(t),brr=i(nl),m8=n(nl,"P",{});var Xqe=s(m8);vrr=r(Xqe,"This class cannot be instantiated directly using "),Que=n(Xqe,"CODE",{});var Xgt=s(Que);Frr=r(Xgt,"__init__()"),Xgt.forEach(t),Trr=r(Xqe," (throws an error)."),Xqe.forEach(t),Mrr=i(nl),Et=n(nl,"DIV",{class:!0});var xA=s(Et);T(g8.$$.fragment,xA),Err=i(xA),Wue=n(xA,"P",{});var zgt=s(Wue);Crr=r(zgt,"Instantiates one of the base model classes of the library from a configuration."),zgt.forEach(t),wrr=i(xA),Rd=n(xA,"P",{});var _K=s(Rd);Arr=r(_K,`Note:
Loading a model from its configuration file does `),Hue=n(_K,"STRONG",{});var Qgt=s(Hue);yrr=r(Qgt,"not"),Qgt.forEach(t),Lrr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(_K,"A",{href:!0});var Wgt=s(MX);xrr=r(Wgt,"from_pretrained()"),Wgt.forEach(t),$rr=r(_K," to load the model weights."),_K.forEach(t),krr=i(xA),T(fv.$$.fragment,xA),xA.forEach(t),Srr=i(nl),Cr=n(nl,"DIV",{class:!0});var sl=s(Cr);T(h8.$$.fragment,sl),Rrr=i(sl),Uue=n(sl,"P",{});var Hgt=s(Uue);Brr=r(Hgt,"Instantiate one of the base model classes of the library from a pretrained model."),Hgt.forEach(t),Prr=i(sl),Ua=n(sl,"P",{});var $A=s(Ua);Irr=r($A,"The model class to instantiate is selected based on the "),Jue=n($A,"CODE",{});var Ugt=s(Jue);qrr=r(Ugt,"model_type"),Ugt.forEach(t),Nrr=r($A,` property of the config object (either
passed as an argument or loaded from `),Yue=n($A,"CODE",{});var Jgt=s(Yue);jrr=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),Drr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n($A,"CODE",{});var Ygt=s(Kue);Grr=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),Orr=r($A,":"),$A.forEach(t),Vrr=i(sl),j=n(sl,"UL",{});var D=s(j);mv=n(D,"LI",{});var o9e=s(mv);Zue=n(o9e,"STRONG",{});var Kgt=s(Zue);Xrr=r(Kgt,"albert"),Kgt.forEach(t),zrr=r(o9e," \u2014 "),EX=n(o9e,"A",{href:!0});var Zgt=s(EX);Qrr=r(Zgt,"TFAlbertModel"),Zgt.forEach(t),Wrr=r(o9e," (ALBERT model)"),o9e.forEach(t),Hrr=i(D),gv=n(D,"LI",{});var r9e=s(gv);e_e=n(r9e,"STRONG",{});var eht=s(e_e);Urr=r(eht,"bart"),eht.forEach(t),Jrr=r(r9e," \u2014 "),CX=n(r9e,"A",{href:!0});var oht=s(CX);Yrr=r(oht,"TFBartModel"),oht.forEach(t),Krr=r(r9e," (BART model)"),r9e.forEach(t),Zrr=i(D),hv=n(D,"LI",{});var t9e=s(hv);o_e=n(t9e,"STRONG",{});var rht=s(o_e);etr=r(rht,"bert"),rht.forEach(t),otr=r(t9e," \u2014 "),wX=n(t9e,"A",{href:!0});var tht=s(wX);rtr=r(tht,"TFBertModel"),tht.forEach(t),ttr=r(t9e," (BERT model)"),t9e.forEach(t),atr=i(D),pv=n(D,"LI",{});var a9e=s(pv);r_e=n(a9e,"STRONG",{});var aht=s(r_e);ntr=r(aht,"blenderbot"),aht.forEach(t),str=r(a9e," \u2014 "),AX=n(a9e,"A",{href:!0});var nht=s(AX);ltr=r(nht,"TFBlenderbotModel"),nht.forEach(t),itr=r(a9e," (Blenderbot model)"),a9e.forEach(t),dtr=i(D),uv=n(D,"LI",{});var n9e=s(uv);t_e=n(n9e,"STRONG",{});var sht=s(t_e);ctr=r(sht,"blenderbot-small"),sht.forEach(t),ftr=r(n9e," \u2014 "),yX=n(n9e,"A",{href:!0});var lht=s(yX);mtr=r(lht,"TFBlenderbotSmallModel"),lht.forEach(t),gtr=r(n9e," (BlenderbotSmall model)"),n9e.forEach(t),htr=i(D),_v=n(D,"LI",{});var s9e=s(_v);a_e=n(s9e,"STRONG",{});var iht=s(a_e);ptr=r(iht,"camembert"),iht.forEach(t),utr=r(s9e," \u2014 "),LX=n(s9e,"A",{href:!0});var dht=s(LX);_tr=r(dht,"TFCamembertModel"),dht.forEach(t),btr=r(s9e," (CamemBERT model)"),s9e.forEach(t),vtr=i(D),bv=n(D,"LI",{});var l9e=s(bv);n_e=n(l9e,"STRONG",{});var cht=s(n_e);Ftr=r(cht,"clip"),cht.forEach(t),Ttr=r(l9e," \u2014 "),xX=n(l9e,"A",{href:!0});var fht=s(xX);Mtr=r(fht,"TFCLIPModel"),fht.forEach(t),Etr=r(l9e," (CLIP model)"),l9e.forEach(t),Ctr=i(D),vv=n(D,"LI",{});var i9e=s(vv);s_e=n(i9e,"STRONG",{});var mht=s(s_e);wtr=r(mht,"convbert"),mht.forEach(t),Atr=r(i9e," \u2014 "),$X=n(i9e,"A",{href:!0});var ght=s($X);ytr=r(ght,"TFConvBertModel"),ght.forEach(t),Ltr=r(i9e," (ConvBERT model)"),i9e.forEach(t),xtr=i(D),Fv=n(D,"LI",{});var d9e=s(Fv);l_e=n(d9e,"STRONG",{});var hht=s(l_e);$tr=r(hht,"convnext"),hht.forEach(t),ktr=r(d9e," \u2014 "),kX=n(d9e,"A",{href:!0});var pht=s(kX);Str=r(pht,"TFConvNextModel"),pht.forEach(t),Rtr=r(d9e," (ConvNext model)"),d9e.forEach(t),Btr=i(D),Tv=n(D,"LI",{});var c9e=s(Tv);i_e=n(c9e,"STRONG",{});var uht=s(i_e);Ptr=r(uht,"ctrl"),uht.forEach(t),Itr=r(c9e," \u2014 "),SX=n(c9e,"A",{href:!0});var _ht=s(SX);qtr=r(_ht,"TFCTRLModel"),_ht.forEach(t),Ntr=r(c9e," (CTRL model)"),c9e.forEach(t),jtr=i(D),Mv=n(D,"LI",{});var f9e=s(Mv);d_e=n(f9e,"STRONG",{});var bht=s(d_e);Dtr=r(bht,"data2vec-vision"),bht.forEach(t),Gtr=r(f9e," \u2014 "),RX=n(f9e,"A",{href:!0});var vht=s(RX);Otr=r(vht,"TFData2VecVisionModel"),vht.forEach(t),Vtr=r(f9e," (Data2VecVision model)"),f9e.forEach(t),Xtr=i(D),Ev=n(D,"LI",{});var m9e=s(Ev);c_e=n(m9e,"STRONG",{});var Fht=s(c_e);ztr=r(Fht,"deberta"),Fht.forEach(t),Qtr=r(m9e," \u2014 "),BX=n(m9e,"A",{href:!0});var Tht=s(BX);Wtr=r(Tht,"TFDebertaModel"),Tht.forEach(t),Htr=r(m9e," (DeBERTa model)"),m9e.forEach(t),Utr=i(D),Cv=n(D,"LI",{});var g9e=s(Cv);f_e=n(g9e,"STRONG",{});var Mht=s(f_e);Jtr=r(Mht,"deberta-v2"),Mht.forEach(t),Ytr=r(g9e," \u2014 "),PX=n(g9e,"A",{href:!0});var Eht=s(PX);Ktr=r(Eht,"TFDebertaV2Model"),Eht.forEach(t),Ztr=r(g9e," (DeBERTa-v2 model)"),g9e.forEach(t),ear=i(D),wv=n(D,"LI",{});var h9e=s(wv);m_e=n(h9e,"STRONG",{});var Cht=s(m_e);oar=r(Cht,"distilbert"),Cht.forEach(t),rar=r(h9e," \u2014 "),IX=n(h9e,"A",{href:!0});var wht=s(IX);tar=r(wht,"TFDistilBertModel"),wht.forEach(t),aar=r(h9e," (DistilBERT model)"),h9e.forEach(t),nar=i(D),Av=n(D,"LI",{});var p9e=s(Av);g_e=n(p9e,"STRONG",{});var Aht=s(g_e);sar=r(Aht,"dpr"),Aht.forEach(t),lar=r(p9e," \u2014 "),qX=n(p9e,"A",{href:!0});var yht=s(qX);iar=r(yht,"TFDPRQuestionEncoder"),yht.forEach(t),dar=r(p9e," (DPR model)"),p9e.forEach(t),car=i(D),yv=n(D,"LI",{});var u9e=s(yv);h_e=n(u9e,"STRONG",{});var Lht=s(h_e);far=r(Lht,"electra"),Lht.forEach(t),mar=r(u9e," \u2014 "),NX=n(u9e,"A",{href:!0});var xht=s(NX);gar=r(xht,"TFElectraModel"),xht.forEach(t),har=r(u9e," (ELECTRA model)"),u9e.forEach(t),par=i(D),Lv=n(D,"LI",{});var _9e=s(Lv);p_e=n(_9e,"STRONG",{});var $ht=s(p_e);uar=r($ht,"flaubert"),$ht.forEach(t),_ar=r(_9e," \u2014 "),jX=n(_9e,"A",{href:!0});var kht=s(jX);bar=r(kht,"TFFlaubertModel"),kht.forEach(t),Far=r(_9e," (FlauBERT model)"),_9e.forEach(t),Tar=i(D),$s=n(D,"LI",{});var j9=s($s);u_e=n(j9,"STRONG",{});var Sht=s(u_e);Mar=r(Sht,"funnel"),Sht.forEach(t),Ear=r(j9," \u2014 "),DX=n(j9,"A",{href:!0});var Rht=s(DX);Car=r(Rht,"TFFunnelModel"),Rht.forEach(t),war=r(j9," or "),GX=n(j9,"A",{href:!0});var Bht=s(GX);Aar=r(Bht,"TFFunnelBaseModel"),Bht.forEach(t),yar=r(j9," (Funnel Transformer model)"),j9.forEach(t),Lar=i(D),xv=n(D,"LI",{});var b9e=s(xv);__e=n(b9e,"STRONG",{});var Pht=s(__e);xar=r(Pht,"gpt2"),Pht.forEach(t),$ar=r(b9e," \u2014 "),OX=n(b9e,"A",{href:!0});var Iht=s(OX);kar=r(Iht,"TFGPT2Model"),Iht.forEach(t),Sar=r(b9e," (OpenAI GPT-2 model)"),b9e.forEach(t),Rar=i(D),$v=n(D,"LI",{});var v9e=s($v);b_e=n(v9e,"STRONG",{});var qht=s(b_e);Bar=r(qht,"gptj"),qht.forEach(t),Par=r(v9e," \u2014 "),VX=n(v9e,"A",{href:!0});var Nht=s(VX);Iar=r(Nht,"TFGPTJModel"),Nht.forEach(t),qar=r(v9e," (GPT-J model)"),v9e.forEach(t),Nar=i(D),kv=n(D,"LI",{});var F9e=s(kv);v_e=n(F9e,"STRONG",{});var jht=s(v_e);jar=r(jht,"hubert"),jht.forEach(t),Dar=r(F9e," \u2014 "),XX=n(F9e,"A",{href:!0});var Dht=s(XX);Gar=r(Dht,"TFHubertModel"),Dht.forEach(t),Oar=r(F9e," (Hubert model)"),F9e.forEach(t),Var=i(D),Sv=n(D,"LI",{});var T9e=s(Sv);F_e=n(T9e,"STRONG",{});var Ght=s(F_e);Xar=r(Ght,"layoutlm"),Ght.forEach(t),zar=r(T9e," \u2014 "),zX=n(T9e,"A",{href:!0});var Oht=s(zX);Qar=r(Oht,"TFLayoutLMModel"),Oht.forEach(t),War=r(T9e," (LayoutLM model)"),T9e.forEach(t),Har=i(D),Rv=n(D,"LI",{});var M9e=s(Rv);T_e=n(M9e,"STRONG",{});var Vht=s(T_e);Uar=r(Vht,"led"),Vht.forEach(t),Jar=r(M9e," \u2014 "),QX=n(M9e,"A",{href:!0});var Xht=s(QX);Yar=r(Xht,"TFLEDModel"),Xht.forEach(t),Kar=r(M9e," (LED model)"),M9e.forEach(t),Zar=i(D),Bv=n(D,"LI",{});var E9e=s(Bv);M_e=n(E9e,"STRONG",{});var zht=s(M_e);enr=r(zht,"longformer"),zht.forEach(t),onr=r(E9e," \u2014 "),WX=n(E9e,"A",{href:!0});var Qht=s(WX);rnr=r(Qht,"TFLongformerModel"),Qht.forEach(t),tnr=r(E9e," (Longformer model)"),E9e.forEach(t),anr=i(D),Pv=n(D,"LI",{});var C9e=s(Pv);E_e=n(C9e,"STRONG",{});var Wht=s(E_e);nnr=r(Wht,"lxmert"),Wht.forEach(t),snr=r(C9e," \u2014 "),HX=n(C9e,"A",{href:!0});var Hht=s(HX);lnr=r(Hht,"TFLxmertModel"),Hht.forEach(t),inr=r(C9e," (LXMERT model)"),C9e.forEach(t),dnr=i(D),Iv=n(D,"LI",{});var w9e=s(Iv);C_e=n(w9e,"STRONG",{});var Uht=s(C_e);cnr=r(Uht,"marian"),Uht.forEach(t),fnr=r(w9e," \u2014 "),UX=n(w9e,"A",{href:!0});var Jht=s(UX);mnr=r(Jht,"TFMarianModel"),Jht.forEach(t),gnr=r(w9e," (Marian model)"),w9e.forEach(t),hnr=i(D),qv=n(D,"LI",{});var A9e=s(qv);w_e=n(A9e,"STRONG",{});var Yht=s(w_e);pnr=r(Yht,"mbart"),Yht.forEach(t),unr=r(A9e," \u2014 "),JX=n(A9e,"A",{href:!0});var Kht=s(JX);_nr=r(Kht,"TFMBartModel"),Kht.forEach(t),bnr=r(A9e," (mBART model)"),A9e.forEach(t),vnr=i(D),Nv=n(D,"LI",{});var y9e=s(Nv);A_e=n(y9e,"STRONG",{});var Zht=s(A_e);Fnr=r(Zht,"mobilebert"),Zht.forEach(t),Tnr=r(y9e," \u2014 "),YX=n(y9e,"A",{href:!0});var ept=s(YX);Mnr=r(ept,"TFMobileBertModel"),ept.forEach(t),Enr=r(y9e," (MobileBERT model)"),y9e.forEach(t),Cnr=i(D),jv=n(D,"LI",{});var L9e=s(jv);y_e=n(L9e,"STRONG",{});var opt=s(y_e);wnr=r(opt,"mpnet"),opt.forEach(t),Anr=r(L9e," \u2014 "),KX=n(L9e,"A",{href:!0});var rpt=s(KX);ynr=r(rpt,"TFMPNetModel"),rpt.forEach(t),Lnr=r(L9e," (MPNet model)"),L9e.forEach(t),xnr=i(D),Dv=n(D,"LI",{});var x9e=s(Dv);L_e=n(x9e,"STRONG",{});var tpt=s(L_e);$nr=r(tpt,"mt5"),tpt.forEach(t),knr=r(x9e," \u2014 "),ZX=n(x9e,"A",{href:!0});var apt=s(ZX);Snr=r(apt,"TFMT5Model"),apt.forEach(t),Rnr=r(x9e," (mT5 model)"),x9e.forEach(t),Bnr=i(D),Gv=n(D,"LI",{});var $9e=s(Gv);x_e=n($9e,"STRONG",{});var npt=s(x_e);Pnr=r(npt,"openai-gpt"),npt.forEach(t),Inr=r($9e," \u2014 "),ez=n($9e,"A",{href:!0});var spt=s(ez);qnr=r(spt,"TFOpenAIGPTModel"),spt.forEach(t),Nnr=r($9e," (OpenAI GPT model)"),$9e.forEach(t),jnr=i(D),Ov=n(D,"LI",{});var k9e=s(Ov);$_e=n(k9e,"STRONG",{});var lpt=s($_e);Dnr=r(lpt,"pegasus"),lpt.forEach(t),Gnr=r(k9e," \u2014 "),oz=n(k9e,"A",{href:!0});var ipt=s(oz);Onr=r(ipt,"TFPegasusModel"),ipt.forEach(t),Vnr=r(k9e," (Pegasus model)"),k9e.forEach(t),Xnr=i(D),Vv=n(D,"LI",{});var S9e=s(Vv);k_e=n(S9e,"STRONG",{});var dpt=s(k_e);znr=r(dpt,"rembert"),dpt.forEach(t),Qnr=r(S9e," \u2014 "),rz=n(S9e,"A",{href:!0});var cpt=s(rz);Wnr=r(cpt,"TFRemBertModel"),cpt.forEach(t),Hnr=r(S9e," (RemBERT model)"),S9e.forEach(t),Unr=i(D),Xv=n(D,"LI",{});var R9e=s(Xv);S_e=n(R9e,"STRONG",{});var fpt=s(S_e);Jnr=r(fpt,"roberta"),fpt.forEach(t),Ynr=r(R9e," \u2014 "),tz=n(R9e,"A",{href:!0});var mpt=s(tz);Knr=r(mpt,"TFRobertaModel"),mpt.forEach(t),Znr=r(R9e," (RoBERTa model)"),R9e.forEach(t),esr=i(D),zv=n(D,"LI",{});var B9e=s(zv);R_e=n(B9e,"STRONG",{});var gpt=s(R_e);osr=r(gpt,"roformer"),gpt.forEach(t),rsr=r(B9e," \u2014 "),az=n(B9e,"A",{href:!0});var hpt=s(az);tsr=r(hpt,"TFRoFormerModel"),hpt.forEach(t),asr=r(B9e," (RoFormer model)"),B9e.forEach(t),nsr=i(D),Qv=n(D,"LI",{});var P9e=s(Qv);B_e=n(P9e,"STRONG",{});var ppt=s(B_e);ssr=r(ppt,"speech_to_text"),ppt.forEach(t),lsr=r(P9e," \u2014 "),nz=n(P9e,"A",{href:!0});var upt=s(nz);isr=r(upt,"TFSpeech2TextModel"),upt.forEach(t),dsr=r(P9e," (Speech2Text model)"),P9e.forEach(t),csr=i(D),Wv=n(D,"LI",{});var I9e=s(Wv);P_e=n(I9e,"STRONG",{});var _pt=s(P_e);fsr=r(_pt,"t5"),_pt.forEach(t),msr=r(I9e," \u2014 "),sz=n(I9e,"A",{href:!0});var bpt=s(sz);gsr=r(bpt,"TFT5Model"),bpt.forEach(t),hsr=r(I9e," (T5 model)"),I9e.forEach(t),psr=i(D),Hv=n(D,"LI",{});var q9e=s(Hv);I_e=n(q9e,"STRONG",{});var vpt=s(I_e);usr=r(vpt,"tapas"),vpt.forEach(t),_sr=r(q9e," \u2014 "),lz=n(q9e,"A",{href:!0});var Fpt=s(lz);bsr=r(Fpt,"TFTapasModel"),Fpt.forEach(t),vsr=r(q9e," (TAPAS model)"),q9e.forEach(t),Fsr=i(D),Uv=n(D,"LI",{});var N9e=s(Uv);q_e=n(N9e,"STRONG",{});var Tpt=s(q_e);Tsr=r(Tpt,"transfo-xl"),Tpt.forEach(t),Msr=r(N9e," \u2014 "),iz=n(N9e,"A",{href:!0});var Mpt=s(iz);Esr=r(Mpt,"TFTransfoXLModel"),Mpt.forEach(t),Csr=r(N9e," (Transformer-XL model)"),N9e.forEach(t),wsr=i(D),Jv=n(D,"LI",{});var j9e=s(Jv);N_e=n(j9e,"STRONG",{});var Ept=s(N_e);Asr=r(Ept,"vit"),Ept.forEach(t),ysr=r(j9e," \u2014 "),dz=n(j9e,"A",{href:!0});var Cpt=s(dz);Lsr=r(Cpt,"TFViTModel"),Cpt.forEach(t),xsr=r(j9e," (ViT model)"),j9e.forEach(t),$sr=i(D),Yv=n(D,"LI",{});var D9e=s(Yv);j_e=n(D9e,"STRONG",{});var wpt=s(j_e);ksr=r(wpt,"vit_mae"),wpt.forEach(t),Ssr=r(D9e," \u2014 "),cz=n(D9e,"A",{href:!0});var Apt=s(cz);Rsr=r(Apt,"TFViTMAEModel"),Apt.forEach(t),Bsr=r(D9e," (ViTMAE model)"),D9e.forEach(t),Psr=i(D),Kv=n(D,"LI",{});var G9e=s(Kv);D_e=n(G9e,"STRONG",{});var ypt=s(D_e);Isr=r(ypt,"wav2vec2"),ypt.forEach(t),qsr=r(G9e," \u2014 "),fz=n(G9e,"A",{href:!0});var Lpt=s(fz);Nsr=r(Lpt,"TFWav2Vec2Model"),Lpt.forEach(t),jsr=r(G9e," (Wav2Vec2 model)"),G9e.forEach(t),Dsr=i(D),Zv=n(D,"LI",{});var O9e=s(Zv);G_e=n(O9e,"STRONG",{});var xpt=s(G_e);Gsr=r(xpt,"xlm"),xpt.forEach(t),Osr=r(O9e," \u2014 "),mz=n(O9e,"A",{href:!0});var $pt=s(mz);Vsr=r($pt,"TFXLMModel"),$pt.forEach(t),Xsr=r(O9e," (XLM model)"),O9e.forEach(t),zsr=i(D),eF=n(D,"LI",{});var V9e=s(eF);O_e=n(V9e,"STRONG",{});var kpt=s(O_e);Qsr=r(kpt,"xlm-roberta"),kpt.forEach(t),Wsr=r(V9e," \u2014 "),gz=n(V9e,"A",{href:!0});var Spt=s(gz);Hsr=r(Spt,"TFXLMRobertaModel"),Spt.forEach(t),Usr=r(V9e," (XLM-RoBERTa model)"),V9e.forEach(t),Jsr=i(D),oF=n(D,"LI",{});var X9e=s(oF);V_e=n(X9e,"STRONG",{});var Rpt=s(V_e);Ysr=r(Rpt,"xlnet"),Rpt.forEach(t),Ksr=r(X9e," \u2014 "),hz=n(X9e,"A",{href:!0});var Bpt=s(hz);Zsr=r(Bpt,"TFXLNetModel"),Bpt.forEach(t),elr=r(X9e," (XLNet model)"),X9e.forEach(t),D.forEach(t),olr=i(sl),T(rF.$$.fragment,sl),sl.forEach(t),nl.forEach(t),GPe=i(f),Bd=n(f,"H2",{class:!0});var zqe=s(Bd);tF=n(zqe,"A",{id:!0,class:!0,href:!0});var Ppt=s(tF);X_e=n(Ppt,"SPAN",{});var Ipt=s(X_e);T(p8.$$.fragment,Ipt),Ipt.forEach(t),Ppt.forEach(t),rlr=i(zqe),z_e=n(zqe,"SPAN",{});var qpt=s(z_e);tlr=r(qpt,"TFAutoModelForPreTraining"),qpt.forEach(t),zqe.forEach(t),OPe=i(f),Ko=n(f,"DIV",{class:!0});var ll=s(Ko);T(u8.$$.fragment,ll),alr=i(ll),Pd=n(ll,"P",{});var bK=s(Pd);nlr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pz=n(bK,"A",{href:!0});var Npt=s(pz);slr=r(Npt,"from_pretrained()"),Npt.forEach(t),llr=r(bK," class method or the "),uz=n(bK,"A",{href:!0});var jpt=s(uz);ilr=r(jpt,"from_config()"),jpt.forEach(t),dlr=r(bK,` class
method.`),bK.forEach(t),clr=i(ll),_8=n(ll,"P",{});var Qqe=s(_8);flr=r(Qqe,"This class cannot be instantiated directly using "),Q_e=n(Qqe,"CODE",{});var Dpt=s(Q_e);mlr=r(Dpt,"__init__()"),Dpt.forEach(t),glr=r(Qqe," (throws an error)."),Qqe.forEach(t),hlr=i(ll),Ct=n(ll,"DIV",{class:!0});var kA=s(Ct);T(b8.$$.fragment,kA),plr=i(kA),W_e=n(kA,"P",{});var Gpt=s(W_e);ulr=r(Gpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gpt.forEach(t),_lr=i(kA),Id=n(kA,"P",{});var vK=s(Id);blr=r(vK,`Note:
Loading a model from its configuration file does `),H_e=n(vK,"STRONG",{});var Opt=s(H_e);vlr=r(Opt,"not"),Opt.forEach(t),Flr=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(vK,"A",{href:!0});var Vpt=s(_z);Tlr=r(Vpt,"from_pretrained()"),Vpt.forEach(t),Mlr=r(vK," to load the model weights."),vK.forEach(t),Elr=i(kA),T(aF.$$.fragment,kA),kA.forEach(t),Clr=i(ll),wr=n(ll,"DIV",{class:!0});var il=s(wr);T(v8.$$.fragment,il),wlr=i(il),U_e=n(il,"P",{});var Xpt=s(U_e);Alr=r(Xpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xpt.forEach(t),ylr=i(il),Ja=n(il,"P",{});var SA=s(Ja);Llr=r(SA,"The model class to instantiate is selected based on the "),J_e=n(SA,"CODE",{});var zpt=s(J_e);xlr=r(zpt,"model_type"),zpt.forEach(t),$lr=r(SA,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(SA,"CODE",{});var Qpt=s(Y_e);klr=r(Qpt,"pretrained_model_name_or_path"),Qpt.forEach(t),Slr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(SA,"CODE",{});var Wpt=s(K_e);Rlr=r(Wpt,"pretrained_model_name_or_path"),Wpt.forEach(t),Blr=r(SA,":"),SA.forEach(t),Plr=i(il),se=n(il,"UL",{});var le=s(se);nF=n(le,"LI",{});var z9e=s(nF);Z_e=n(z9e,"STRONG",{});var Hpt=s(Z_e);Ilr=r(Hpt,"albert"),Hpt.forEach(t),qlr=r(z9e," \u2014 "),bz=n(z9e,"A",{href:!0});var Upt=s(bz);Nlr=r(Upt,"TFAlbertForPreTraining"),Upt.forEach(t),jlr=r(z9e," (ALBERT model)"),z9e.forEach(t),Dlr=i(le),sF=n(le,"LI",{});var Q9e=s(sF);e6e=n(Q9e,"STRONG",{});var Jpt=s(e6e);Glr=r(Jpt,"bart"),Jpt.forEach(t),Olr=r(Q9e," \u2014 "),vz=n(Q9e,"A",{href:!0});var Ypt=s(vz);Vlr=r(Ypt,"TFBartForConditionalGeneration"),Ypt.forEach(t),Xlr=r(Q9e," (BART model)"),Q9e.forEach(t),zlr=i(le),lF=n(le,"LI",{});var W9e=s(lF);o6e=n(W9e,"STRONG",{});var Kpt=s(o6e);Qlr=r(Kpt,"bert"),Kpt.forEach(t),Wlr=r(W9e," \u2014 "),Fz=n(W9e,"A",{href:!0});var Zpt=s(Fz);Hlr=r(Zpt,"TFBertForPreTraining"),Zpt.forEach(t),Ulr=r(W9e," (BERT model)"),W9e.forEach(t),Jlr=i(le),iF=n(le,"LI",{});var H9e=s(iF);r6e=n(H9e,"STRONG",{});var eut=s(r6e);Ylr=r(eut,"camembert"),eut.forEach(t),Klr=r(H9e," \u2014 "),Tz=n(H9e,"A",{href:!0});var out=s(Tz);Zlr=r(out,"TFCamembertForMaskedLM"),out.forEach(t),eir=r(H9e," (CamemBERT model)"),H9e.forEach(t),oir=i(le),dF=n(le,"LI",{});var U9e=s(dF);t6e=n(U9e,"STRONG",{});var rut=s(t6e);rir=r(rut,"ctrl"),rut.forEach(t),tir=r(U9e," \u2014 "),Mz=n(U9e,"A",{href:!0});var tut=s(Mz);air=r(tut,"TFCTRLLMHeadModel"),tut.forEach(t),nir=r(U9e," (CTRL model)"),U9e.forEach(t),sir=i(le),cF=n(le,"LI",{});var J9e=s(cF);a6e=n(J9e,"STRONG",{});var aut=s(a6e);lir=r(aut,"distilbert"),aut.forEach(t),iir=r(J9e," \u2014 "),Ez=n(J9e,"A",{href:!0});var nut=s(Ez);dir=r(nut,"TFDistilBertForMaskedLM"),nut.forEach(t),cir=r(J9e," (DistilBERT model)"),J9e.forEach(t),fir=i(le),fF=n(le,"LI",{});var Y9e=s(fF);n6e=n(Y9e,"STRONG",{});var sut=s(n6e);mir=r(sut,"electra"),sut.forEach(t),gir=r(Y9e," \u2014 "),Cz=n(Y9e,"A",{href:!0});var lut=s(Cz);hir=r(lut,"TFElectraForPreTraining"),lut.forEach(t),pir=r(Y9e," (ELECTRA model)"),Y9e.forEach(t),uir=i(le),mF=n(le,"LI",{});var K9e=s(mF);s6e=n(K9e,"STRONG",{});var iut=s(s6e);_ir=r(iut,"flaubert"),iut.forEach(t),bir=r(K9e," \u2014 "),wz=n(K9e,"A",{href:!0});var dut=s(wz);vir=r(dut,"TFFlaubertWithLMHeadModel"),dut.forEach(t),Fir=r(K9e," (FlauBERT model)"),K9e.forEach(t),Tir=i(le),gF=n(le,"LI",{});var Z9e=s(gF);l6e=n(Z9e,"STRONG",{});var cut=s(l6e);Mir=r(cut,"funnel"),cut.forEach(t),Eir=r(Z9e," \u2014 "),Az=n(Z9e,"A",{href:!0});var fut=s(Az);Cir=r(fut,"TFFunnelForPreTraining"),fut.forEach(t),wir=r(Z9e," (Funnel Transformer model)"),Z9e.forEach(t),Air=i(le),hF=n(le,"LI",{});var e$e=s(hF);i6e=n(e$e,"STRONG",{});var mut=s(i6e);yir=r(mut,"gpt2"),mut.forEach(t),Lir=r(e$e," \u2014 "),yz=n(e$e,"A",{href:!0});var gut=s(yz);xir=r(gut,"TFGPT2LMHeadModel"),gut.forEach(t),$ir=r(e$e," (OpenAI GPT-2 model)"),e$e.forEach(t),kir=i(le),pF=n(le,"LI",{});var o$e=s(pF);d6e=n(o$e,"STRONG",{});var hut=s(d6e);Sir=r(hut,"layoutlm"),hut.forEach(t),Rir=r(o$e," \u2014 "),Lz=n(o$e,"A",{href:!0});var put=s(Lz);Bir=r(put,"TFLayoutLMForMaskedLM"),put.forEach(t),Pir=r(o$e," (LayoutLM model)"),o$e.forEach(t),Iir=i(le),uF=n(le,"LI",{});var r$e=s(uF);c6e=n(r$e,"STRONG",{});var uut=s(c6e);qir=r(uut,"lxmert"),uut.forEach(t),Nir=r(r$e," \u2014 "),xz=n(r$e,"A",{href:!0});var _ut=s(xz);jir=r(_ut,"TFLxmertForPreTraining"),_ut.forEach(t),Dir=r(r$e," (LXMERT model)"),r$e.forEach(t),Gir=i(le),_F=n(le,"LI",{});var t$e=s(_F);f6e=n(t$e,"STRONG",{});var but=s(f6e);Oir=r(but,"mobilebert"),but.forEach(t),Vir=r(t$e," \u2014 "),$z=n(t$e,"A",{href:!0});var vut=s($z);Xir=r(vut,"TFMobileBertForPreTraining"),vut.forEach(t),zir=r(t$e," (MobileBERT model)"),t$e.forEach(t),Qir=i(le),bF=n(le,"LI",{});var a$e=s(bF);m6e=n(a$e,"STRONG",{});var Fut=s(m6e);Wir=r(Fut,"mpnet"),Fut.forEach(t),Hir=r(a$e," \u2014 "),kz=n(a$e,"A",{href:!0});var Tut=s(kz);Uir=r(Tut,"TFMPNetForMaskedLM"),Tut.forEach(t),Jir=r(a$e," (MPNet model)"),a$e.forEach(t),Yir=i(le),vF=n(le,"LI",{});var n$e=s(vF);g6e=n(n$e,"STRONG",{});var Mut=s(g6e);Kir=r(Mut,"openai-gpt"),Mut.forEach(t),Zir=r(n$e," \u2014 "),Sz=n(n$e,"A",{href:!0});var Eut=s(Sz);edr=r(Eut,"TFOpenAIGPTLMHeadModel"),Eut.forEach(t),odr=r(n$e," (OpenAI GPT model)"),n$e.forEach(t),rdr=i(le),FF=n(le,"LI",{});var s$e=s(FF);h6e=n(s$e,"STRONG",{});var Cut=s(h6e);tdr=r(Cut,"roberta"),Cut.forEach(t),adr=r(s$e," \u2014 "),Rz=n(s$e,"A",{href:!0});var wut=s(Rz);ndr=r(wut,"TFRobertaForMaskedLM"),wut.forEach(t),sdr=r(s$e," (RoBERTa model)"),s$e.forEach(t),ldr=i(le),TF=n(le,"LI",{});var l$e=s(TF);p6e=n(l$e,"STRONG",{});var Aut=s(p6e);idr=r(Aut,"t5"),Aut.forEach(t),ddr=r(l$e," \u2014 "),Bz=n(l$e,"A",{href:!0});var yut=s(Bz);cdr=r(yut,"TFT5ForConditionalGeneration"),yut.forEach(t),fdr=r(l$e," (T5 model)"),l$e.forEach(t),mdr=i(le),MF=n(le,"LI",{});var i$e=s(MF);u6e=n(i$e,"STRONG",{});var Lut=s(u6e);gdr=r(Lut,"tapas"),Lut.forEach(t),hdr=r(i$e," \u2014 "),Pz=n(i$e,"A",{href:!0});var xut=s(Pz);pdr=r(xut,"TFTapasForMaskedLM"),xut.forEach(t),udr=r(i$e," (TAPAS model)"),i$e.forEach(t),_dr=i(le),EF=n(le,"LI",{});var d$e=s(EF);_6e=n(d$e,"STRONG",{});var $ut=s(_6e);bdr=r($ut,"transfo-xl"),$ut.forEach(t),vdr=r(d$e," \u2014 "),Iz=n(d$e,"A",{href:!0});var kut=s(Iz);Fdr=r(kut,"TFTransfoXLLMHeadModel"),kut.forEach(t),Tdr=r(d$e," (Transformer-XL model)"),d$e.forEach(t),Mdr=i(le),CF=n(le,"LI",{});var c$e=s(CF);b6e=n(c$e,"STRONG",{});var Sut=s(b6e);Edr=r(Sut,"vit_mae"),Sut.forEach(t),Cdr=r(c$e," \u2014 "),qz=n(c$e,"A",{href:!0});var Rut=s(qz);wdr=r(Rut,"TFViTMAEForPreTraining"),Rut.forEach(t),Adr=r(c$e," (ViTMAE model)"),c$e.forEach(t),ydr=i(le),wF=n(le,"LI",{});var f$e=s(wF);v6e=n(f$e,"STRONG",{});var But=s(v6e);Ldr=r(But,"xlm"),But.forEach(t),xdr=r(f$e," \u2014 "),Nz=n(f$e,"A",{href:!0});var Put=s(Nz);$dr=r(Put,"TFXLMWithLMHeadModel"),Put.forEach(t),kdr=r(f$e," (XLM model)"),f$e.forEach(t),Sdr=i(le),AF=n(le,"LI",{});var m$e=s(AF);F6e=n(m$e,"STRONG",{});var Iut=s(F6e);Rdr=r(Iut,"xlm-roberta"),Iut.forEach(t),Bdr=r(m$e," \u2014 "),jz=n(m$e,"A",{href:!0});var qut=s(jz);Pdr=r(qut,"TFXLMRobertaForMaskedLM"),qut.forEach(t),Idr=r(m$e," (XLM-RoBERTa model)"),m$e.forEach(t),qdr=i(le),yF=n(le,"LI",{});var g$e=s(yF);T6e=n(g$e,"STRONG",{});var Nut=s(T6e);Ndr=r(Nut,"xlnet"),Nut.forEach(t),jdr=r(g$e," \u2014 "),Dz=n(g$e,"A",{href:!0});var jut=s(Dz);Ddr=r(jut,"TFXLNetLMHeadModel"),jut.forEach(t),Gdr=r(g$e," (XLNet model)"),g$e.forEach(t),le.forEach(t),Odr=i(il),T(LF.$$.fragment,il),il.forEach(t),ll.forEach(t),VPe=i(f),qd=n(f,"H2",{class:!0});var Wqe=s(qd);xF=n(Wqe,"A",{id:!0,class:!0,href:!0});var Dut=s(xF);M6e=n(Dut,"SPAN",{});var Gut=s(M6e);T(F8.$$.fragment,Gut),Gut.forEach(t),Dut.forEach(t),Vdr=i(Wqe),E6e=n(Wqe,"SPAN",{});var Out=s(E6e);Xdr=r(Out,"TFAutoModelForCausalLM"),Out.forEach(t),Wqe.forEach(t),XPe=i(f),Zo=n(f,"DIV",{class:!0});var dl=s(Zo);T(T8.$$.fragment,dl),zdr=i(dl),Nd=n(dl,"P",{});var FK=s(Nd);Qdr=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Gz=n(FK,"A",{href:!0});var Vut=s(Gz);Wdr=r(Vut,"from_pretrained()"),Vut.forEach(t),Hdr=r(FK," class method or the "),Oz=n(FK,"A",{href:!0});var Xut=s(Oz);Udr=r(Xut,"from_config()"),Xut.forEach(t),Jdr=r(FK,` class
method.`),FK.forEach(t),Ydr=i(dl),M8=n(dl,"P",{});var Hqe=s(M8);Kdr=r(Hqe,"This class cannot be instantiated directly using "),C6e=n(Hqe,"CODE",{});var zut=s(C6e);Zdr=r(zut,"__init__()"),zut.forEach(t),ecr=r(Hqe," (throws an error)."),Hqe.forEach(t),ocr=i(dl),wt=n(dl,"DIV",{class:!0});var RA=s(wt);T(E8.$$.fragment,RA),rcr=i(RA),w6e=n(RA,"P",{});var Qut=s(w6e);tcr=r(Qut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qut.forEach(t),acr=i(RA),jd=n(RA,"P",{});var TK=s(jd);ncr=r(TK,`Note:
Loading a model from its configuration file does `),A6e=n(TK,"STRONG",{});var Wut=s(A6e);scr=r(Wut,"not"),Wut.forEach(t),lcr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(TK,"A",{href:!0});var Hut=s(Vz);icr=r(Hut,"from_pretrained()"),Hut.forEach(t),dcr=r(TK," to load the model weights."),TK.forEach(t),ccr=i(RA),T($F.$$.fragment,RA),RA.forEach(t),fcr=i(dl),Ar=n(dl,"DIV",{class:!0});var cl=s(Ar);T(C8.$$.fragment,cl),mcr=i(cl),y6e=n(cl,"P",{});var Uut=s(y6e);gcr=r(Uut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Uut.forEach(t),hcr=i(cl),Ya=n(cl,"P",{});var BA=s(Ya);pcr=r(BA,"The model class to instantiate is selected based on the "),L6e=n(BA,"CODE",{});var Jut=s(L6e);ucr=r(Jut,"model_type"),Jut.forEach(t),_cr=r(BA,` property of the config object (either
passed as an argument or loaded from `),x6e=n(BA,"CODE",{});var Yut=s(x6e);bcr=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),vcr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(BA,"CODE",{});var Kut=s($6e);Fcr=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),Tcr=r(BA,":"),BA.forEach(t),Mcr=i(cl),Te=n(cl,"UL",{});var Ce=s(Te);kF=n(Ce,"LI",{});var h$e=s(kF);k6e=n(h$e,"STRONG",{});var Zut=s(k6e);Ecr=r(Zut,"bert"),Zut.forEach(t),Ccr=r(h$e," \u2014 "),Xz=n(h$e,"A",{href:!0});var e_t=s(Xz);wcr=r(e_t,"TFBertLMHeadModel"),e_t.forEach(t),Acr=r(h$e," (BERT model)"),h$e.forEach(t),ycr=i(Ce),SF=n(Ce,"LI",{});var p$e=s(SF);S6e=n(p$e,"STRONG",{});var o_t=s(S6e);Lcr=r(o_t,"camembert"),o_t.forEach(t),xcr=r(p$e," \u2014 "),zz=n(p$e,"A",{href:!0});var r_t=s(zz);$cr=r(r_t,"TFCamembertForCausalLM"),r_t.forEach(t),kcr=r(p$e," (CamemBERT model)"),p$e.forEach(t),Scr=i(Ce),RF=n(Ce,"LI",{});var u$e=s(RF);R6e=n(u$e,"STRONG",{});var t_t=s(R6e);Rcr=r(t_t,"ctrl"),t_t.forEach(t),Bcr=r(u$e," \u2014 "),Qz=n(u$e,"A",{href:!0});var a_t=s(Qz);Pcr=r(a_t,"TFCTRLLMHeadModel"),a_t.forEach(t),Icr=r(u$e," (CTRL model)"),u$e.forEach(t),qcr=i(Ce),BF=n(Ce,"LI",{});var _$e=s(BF);B6e=n(_$e,"STRONG",{});var n_t=s(B6e);Ncr=r(n_t,"gpt2"),n_t.forEach(t),jcr=r(_$e," \u2014 "),Wz=n(_$e,"A",{href:!0});var s_t=s(Wz);Dcr=r(s_t,"TFGPT2LMHeadModel"),s_t.forEach(t),Gcr=r(_$e," (OpenAI GPT-2 model)"),_$e.forEach(t),Ocr=i(Ce),PF=n(Ce,"LI",{});var b$e=s(PF);P6e=n(b$e,"STRONG",{});var l_t=s(P6e);Vcr=r(l_t,"gptj"),l_t.forEach(t),Xcr=r(b$e," \u2014 "),Hz=n(b$e,"A",{href:!0});var i_t=s(Hz);zcr=r(i_t,"TFGPTJForCausalLM"),i_t.forEach(t),Qcr=r(b$e," (GPT-J model)"),b$e.forEach(t),Wcr=i(Ce),IF=n(Ce,"LI",{});var v$e=s(IF);I6e=n(v$e,"STRONG",{});var d_t=s(I6e);Hcr=r(d_t,"openai-gpt"),d_t.forEach(t),Ucr=r(v$e," \u2014 "),Uz=n(v$e,"A",{href:!0});var c_t=s(Uz);Jcr=r(c_t,"TFOpenAIGPTLMHeadModel"),c_t.forEach(t),Ycr=r(v$e," (OpenAI GPT model)"),v$e.forEach(t),Kcr=i(Ce),qF=n(Ce,"LI",{});var F$e=s(qF);q6e=n(F$e,"STRONG",{});var f_t=s(q6e);Zcr=r(f_t,"rembert"),f_t.forEach(t),efr=r(F$e," \u2014 "),Jz=n(F$e,"A",{href:!0});var m_t=s(Jz);ofr=r(m_t,"TFRemBertForCausalLM"),m_t.forEach(t),rfr=r(F$e," (RemBERT model)"),F$e.forEach(t),tfr=i(Ce),NF=n(Ce,"LI",{});var T$e=s(NF);N6e=n(T$e,"STRONG",{});var g_t=s(N6e);afr=r(g_t,"roberta"),g_t.forEach(t),nfr=r(T$e," \u2014 "),Yz=n(T$e,"A",{href:!0});var h_t=s(Yz);sfr=r(h_t,"TFRobertaForCausalLM"),h_t.forEach(t),lfr=r(T$e," (RoBERTa model)"),T$e.forEach(t),ifr=i(Ce),jF=n(Ce,"LI",{});var M$e=s(jF);j6e=n(M$e,"STRONG",{});var p_t=s(j6e);dfr=r(p_t,"roformer"),p_t.forEach(t),cfr=r(M$e," \u2014 "),Kz=n(M$e,"A",{href:!0});var u_t=s(Kz);ffr=r(u_t,"TFRoFormerForCausalLM"),u_t.forEach(t),mfr=r(M$e," (RoFormer model)"),M$e.forEach(t),gfr=i(Ce),DF=n(Ce,"LI",{});var E$e=s(DF);D6e=n(E$e,"STRONG",{});var __t=s(D6e);hfr=r(__t,"transfo-xl"),__t.forEach(t),pfr=r(E$e," \u2014 "),Zz=n(E$e,"A",{href:!0});var b_t=s(Zz);ufr=r(b_t,"TFTransfoXLLMHeadModel"),b_t.forEach(t),_fr=r(E$e," (Transformer-XL model)"),E$e.forEach(t),bfr=i(Ce),GF=n(Ce,"LI",{});var C$e=s(GF);G6e=n(C$e,"STRONG",{});var v_t=s(G6e);vfr=r(v_t,"xlm"),v_t.forEach(t),Ffr=r(C$e," \u2014 "),eQ=n(C$e,"A",{href:!0});var F_t=s(eQ);Tfr=r(F_t,"TFXLMWithLMHeadModel"),F_t.forEach(t),Mfr=r(C$e," (XLM model)"),C$e.forEach(t),Efr=i(Ce),OF=n(Ce,"LI",{});var w$e=s(OF);O6e=n(w$e,"STRONG",{});var T_t=s(O6e);Cfr=r(T_t,"xlnet"),T_t.forEach(t),wfr=r(w$e," \u2014 "),oQ=n(w$e,"A",{href:!0});var M_t=s(oQ);Afr=r(M_t,"TFXLNetLMHeadModel"),M_t.forEach(t),yfr=r(w$e," (XLNet model)"),w$e.forEach(t),Ce.forEach(t),Lfr=i(cl),T(VF.$$.fragment,cl),cl.forEach(t),dl.forEach(t),zPe=i(f),Dd=n(f,"H2",{class:!0});var Uqe=s(Dd);XF=n(Uqe,"A",{id:!0,class:!0,href:!0});var E_t=s(XF);V6e=n(E_t,"SPAN",{});var C_t=s(V6e);T(w8.$$.fragment,C_t),C_t.forEach(t),E_t.forEach(t),xfr=i(Uqe),X6e=n(Uqe,"SPAN",{});var w_t=s(X6e);$fr=r(w_t,"TFAutoModelForImageClassification"),w_t.forEach(t),Uqe.forEach(t),QPe=i(f),er=n(f,"DIV",{class:!0});var fl=s(er);T(A8.$$.fragment,fl),kfr=i(fl),Gd=n(fl,"P",{});var MK=s(Gd);Sfr=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=n(MK,"A",{href:!0});var A_t=s(rQ);Rfr=r(A_t,"from_pretrained()"),A_t.forEach(t),Bfr=r(MK," class method or the "),tQ=n(MK,"A",{href:!0});var y_t=s(tQ);Pfr=r(y_t,"from_config()"),y_t.forEach(t),Ifr=r(MK,` class
method.`),MK.forEach(t),qfr=i(fl),y8=n(fl,"P",{});var Jqe=s(y8);Nfr=r(Jqe,"This class cannot be instantiated directly using "),z6e=n(Jqe,"CODE",{});var L_t=s(z6e);jfr=r(L_t,"__init__()"),L_t.forEach(t),Dfr=r(Jqe," (throws an error)."),Jqe.forEach(t),Gfr=i(fl),At=n(fl,"DIV",{class:!0});var PA=s(At);T(L8.$$.fragment,PA),Ofr=i(PA),Q6e=n(PA,"P",{});var x_t=s(Q6e);Vfr=r(x_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),x_t.forEach(t),Xfr=i(PA),Od=n(PA,"P",{});var EK=s(Od);zfr=r(EK,`Note:
Loading a model from its configuration file does `),W6e=n(EK,"STRONG",{});var $_t=s(W6e);Qfr=r($_t,"not"),$_t.forEach(t),Wfr=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(EK,"A",{href:!0});var k_t=s(aQ);Hfr=r(k_t,"from_pretrained()"),k_t.forEach(t),Ufr=r(EK," to load the model weights."),EK.forEach(t),Jfr=i(PA),T(zF.$$.fragment,PA),PA.forEach(t),Yfr=i(fl),yr=n(fl,"DIV",{class:!0});var ml=s(yr);T(x8.$$.fragment,ml),Kfr=i(ml),H6e=n(ml,"P",{});var S_t=s(H6e);Zfr=r(S_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),S_t.forEach(t),emr=i(ml),Ka=n(ml,"P",{});var IA=s(Ka);omr=r(IA,"The model class to instantiate is selected based on the "),U6e=n(IA,"CODE",{});var R_t=s(U6e);rmr=r(R_t,"model_type"),R_t.forEach(t),tmr=r(IA,` property of the config object (either
passed as an argument or loaded from `),J6e=n(IA,"CODE",{});var B_t=s(J6e);amr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),nmr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y6e=n(IA,"CODE",{});var P_t=s(Y6e);smr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),lmr=r(IA,":"),IA.forEach(t),imr=i(ml),Vd=n(ml,"UL",{});var CK=s(Vd);QF=n(CK,"LI",{});var A$e=s(QF);K6e=n(A$e,"STRONG",{});var I_t=s(K6e);dmr=r(I_t,"convnext"),I_t.forEach(t),cmr=r(A$e," \u2014 "),nQ=n(A$e,"A",{href:!0});var q_t=s(nQ);fmr=r(q_t,"TFConvNextForImageClassification"),q_t.forEach(t),mmr=r(A$e," (ConvNext model)"),A$e.forEach(t),gmr=i(CK),WF=n(CK,"LI",{});var y$e=s(WF);Z6e=n(y$e,"STRONG",{});var N_t=s(Z6e);hmr=r(N_t,"data2vec-vision"),N_t.forEach(t),pmr=r(y$e," \u2014 "),sQ=n(y$e,"A",{href:!0});var j_t=s(sQ);umr=r(j_t,"TFData2VecVisionForImageClassification"),j_t.forEach(t),_mr=r(y$e," (Data2VecVision model)"),y$e.forEach(t),bmr=i(CK),HF=n(CK,"LI",{});var L$e=s(HF);e1e=n(L$e,"STRONG",{});var D_t=s(e1e);vmr=r(D_t,"vit"),D_t.forEach(t),Fmr=r(L$e," \u2014 "),lQ=n(L$e,"A",{href:!0});var G_t=s(lQ);Tmr=r(G_t,"TFViTForImageClassification"),G_t.forEach(t),Mmr=r(L$e," (ViT model)"),L$e.forEach(t),CK.forEach(t),Emr=i(ml),T(UF.$$.fragment,ml),ml.forEach(t),fl.forEach(t),WPe=i(f),Xd=n(f,"H2",{class:!0});var Yqe=s(Xd);JF=n(Yqe,"A",{id:!0,class:!0,href:!0});var O_t=s(JF);o1e=n(O_t,"SPAN",{});var V_t=s(o1e);T($8.$$.fragment,V_t),V_t.forEach(t),O_t.forEach(t),Cmr=i(Yqe),r1e=n(Yqe,"SPAN",{});var X_t=s(r1e);wmr=r(X_t,"TFAutoModelForMaskedLM"),X_t.forEach(t),Yqe.forEach(t),HPe=i(f),or=n(f,"DIV",{class:!0});var gl=s(or);T(k8.$$.fragment,gl),Amr=i(gl),zd=n(gl,"P",{});var wK=s(zd);ymr=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iQ=n(wK,"A",{href:!0});var z_t=s(iQ);Lmr=r(z_t,"from_pretrained()"),z_t.forEach(t),xmr=r(wK," class method or the "),dQ=n(wK,"A",{href:!0});var Q_t=s(dQ);$mr=r(Q_t,"from_config()"),Q_t.forEach(t),kmr=r(wK,` class
method.`),wK.forEach(t),Smr=i(gl),S8=n(gl,"P",{});var Kqe=s(S8);Rmr=r(Kqe,"This class cannot be instantiated directly using "),t1e=n(Kqe,"CODE",{});var W_t=s(t1e);Bmr=r(W_t,"__init__()"),W_t.forEach(t),Pmr=r(Kqe," (throws an error)."),Kqe.forEach(t),Imr=i(gl),yt=n(gl,"DIV",{class:!0});var qA=s(yt);T(R8.$$.fragment,qA),qmr=i(qA),a1e=n(qA,"P",{});var H_t=s(a1e);Nmr=r(H_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),H_t.forEach(t),jmr=i(qA),Qd=n(qA,"P",{});var AK=s(Qd);Dmr=r(AK,`Note:
Loading a model from its configuration file does `),n1e=n(AK,"STRONG",{});var U_t=s(n1e);Gmr=r(U_t,"not"),U_t.forEach(t),Omr=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(AK,"A",{href:!0});var J_t=s(cQ);Vmr=r(J_t,"from_pretrained()"),J_t.forEach(t),Xmr=r(AK," to load the model weights."),AK.forEach(t),zmr=i(qA),T(YF.$$.fragment,qA),qA.forEach(t),Qmr=i(gl),Lr=n(gl,"DIV",{class:!0});var hl=s(Lr);T(B8.$$.fragment,hl),Wmr=i(hl),s1e=n(hl,"P",{});var Y_t=s(s1e);Hmr=r(Y_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Y_t.forEach(t),Umr=i(hl),Za=n(hl,"P",{});var NA=s(Za);Jmr=r(NA,"The model class to instantiate is selected based on the "),l1e=n(NA,"CODE",{});var K_t=s(l1e);Ymr=r(K_t,"model_type"),K_t.forEach(t),Kmr=r(NA,` property of the config object (either
passed as an argument or loaded from `),i1e=n(NA,"CODE",{});var Z_t=s(i1e);Zmr=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),egr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(NA,"CODE",{});var e6t=s(d1e);ogr=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),rgr=r(NA,":"),NA.forEach(t),tgr=i(hl),ie=n(hl,"UL",{});var fe=s(ie);KF=n(fe,"LI",{});var x$e=s(KF);c1e=n(x$e,"STRONG",{});var o6t=s(c1e);agr=r(o6t,"albert"),o6t.forEach(t),ngr=r(x$e," \u2014 "),fQ=n(x$e,"A",{href:!0});var r6t=s(fQ);sgr=r(r6t,"TFAlbertForMaskedLM"),r6t.forEach(t),lgr=r(x$e," (ALBERT model)"),x$e.forEach(t),igr=i(fe),ZF=n(fe,"LI",{});var $$e=s(ZF);f1e=n($$e,"STRONG",{});var t6t=s(f1e);dgr=r(t6t,"bert"),t6t.forEach(t),cgr=r($$e," \u2014 "),mQ=n($$e,"A",{href:!0});var a6t=s(mQ);fgr=r(a6t,"TFBertForMaskedLM"),a6t.forEach(t),mgr=r($$e," (BERT model)"),$$e.forEach(t),ggr=i(fe),eT=n(fe,"LI",{});var k$e=s(eT);m1e=n(k$e,"STRONG",{});var n6t=s(m1e);hgr=r(n6t,"camembert"),n6t.forEach(t),pgr=r(k$e," \u2014 "),gQ=n(k$e,"A",{href:!0});var s6t=s(gQ);ugr=r(s6t,"TFCamembertForMaskedLM"),s6t.forEach(t),_gr=r(k$e," (CamemBERT model)"),k$e.forEach(t),bgr=i(fe),oT=n(fe,"LI",{});var S$e=s(oT);g1e=n(S$e,"STRONG",{});var l6t=s(g1e);vgr=r(l6t,"convbert"),l6t.forEach(t),Fgr=r(S$e," \u2014 "),hQ=n(S$e,"A",{href:!0});var i6t=s(hQ);Tgr=r(i6t,"TFConvBertForMaskedLM"),i6t.forEach(t),Mgr=r(S$e," (ConvBERT model)"),S$e.forEach(t),Egr=i(fe),rT=n(fe,"LI",{});var R$e=s(rT);h1e=n(R$e,"STRONG",{});var d6t=s(h1e);Cgr=r(d6t,"deberta"),d6t.forEach(t),wgr=r(R$e," \u2014 "),pQ=n(R$e,"A",{href:!0});var c6t=s(pQ);Agr=r(c6t,"TFDebertaForMaskedLM"),c6t.forEach(t),ygr=r(R$e," (DeBERTa model)"),R$e.forEach(t),Lgr=i(fe),tT=n(fe,"LI",{});var B$e=s(tT);p1e=n(B$e,"STRONG",{});var f6t=s(p1e);xgr=r(f6t,"deberta-v2"),f6t.forEach(t),$gr=r(B$e," \u2014 "),uQ=n(B$e,"A",{href:!0});var m6t=s(uQ);kgr=r(m6t,"TFDebertaV2ForMaskedLM"),m6t.forEach(t),Sgr=r(B$e," (DeBERTa-v2 model)"),B$e.forEach(t),Rgr=i(fe),aT=n(fe,"LI",{});var P$e=s(aT);u1e=n(P$e,"STRONG",{});var g6t=s(u1e);Bgr=r(g6t,"distilbert"),g6t.forEach(t),Pgr=r(P$e," \u2014 "),_Q=n(P$e,"A",{href:!0});var h6t=s(_Q);Igr=r(h6t,"TFDistilBertForMaskedLM"),h6t.forEach(t),qgr=r(P$e," (DistilBERT model)"),P$e.forEach(t),Ngr=i(fe),nT=n(fe,"LI",{});var I$e=s(nT);_1e=n(I$e,"STRONG",{});var p6t=s(_1e);jgr=r(p6t,"electra"),p6t.forEach(t),Dgr=r(I$e," \u2014 "),bQ=n(I$e,"A",{href:!0});var u6t=s(bQ);Ggr=r(u6t,"TFElectraForMaskedLM"),u6t.forEach(t),Ogr=r(I$e," (ELECTRA model)"),I$e.forEach(t),Vgr=i(fe),sT=n(fe,"LI",{});var q$e=s(sT);b1e=n(q$e,"STRONG",{});var _6t=s(b1e);Xgr=r(_6t,"flaubert"),_6t.forEach(t),zgr=r(q$e," \u2014 "),vQ=n(q$e,"A",{href:!0});var b6t=s(vQ);Qgr=r(b6t,"TFFlaubertWithLMHeadModel"),b6t.forEach(t),Wgr=r(q$e," (FlauBERT model)"),q$e.forEach(t),Hgr=i(fe),lT=n(fe,"LI",{});var N$e=s(lT);v1e=n(N$e,"STRONG",{});var v6t=s(v1e);Ugr=r(v6t,"funnel"),v6t.forEach(t),Jgr=r(N$e," \u2014 "),FQ=n(N$e,"A",{href:!0});var F6t=s(FQ);Ygr=r(F6t,"TFFunnelForMaskedLM"),F6t.forEach(t),Kgr=r(N$e," (Funnel Transformer model)"),N$e.forEach(t),Zgr=i(fe),iT=n(fe,"LI",{});var j$e=s(iT);F1e=n(j$e,"STRONG",{});var T6t=s(F1e);ehr=r(T6t,"layoutlm"),T6t.forEach(t),ohr=r(j$e," \u2014 "),TQ=n(j$e,"A",{href:!0});var M6t=s(TQ);rhr=r(M6t,"TFLayoutLMForMaskedLM"),M6t.forEach(t),thr=r(j$e," (LayoutLM model)"),j$e.forEach(t),ahr=i(fe),dT=n(fe,"LI",{});var D$e=s(dT);T1e=n(D$e,"STRONG",{});var E6t=s(T1e);nhr=r(E6t,"longformer"),E6t.forEach(t),shr=r(D$e," \u2014 "),MQ=n(D$e,"A",{href:!0});var C6t=s(MQ);lhr=r(C6t,"TFLongformerForMaskedLM"),C6t.forEach(t),ihr=r(D$e," (Longformer model)"),D$e.forEach(t),dhr=i(fe),cT=n(fe,"LI",{});var G$e=s(cT);M1e=n(G$e,"STRONG",{});var w6t=s(M1e);chr=r(w6t,"mobilebert"),w6t.forEach(t),fhr=r(G$e," \u2014 "),EQ=n(G$e,"A",{href:!0});var A6t=s(EQ);mhr=r(A6t,"TFMobileBertForMaskedLM"),A6t.forEach(t),ghr=r(G$e," (MobileBERT model)"),G$e.forEach(t),hhr=i(fe),fT=n(fe,"LI",{});var O$e=s(fT);E1e=n(O$e,"STRONG",{});var y6t=s(E1e);phr=r(y6t,"mpnet"),y6t.forEach(t),uhr=r(O$e," \u2014 "),CQ=n(O$e,"A",{href:!0});var L6t=s(CQ);_hr=r(L6t,"TFMPNetForMaskedLM"),L6t.forEach(t),bhr=r(O$e," (MPNet model)"),O$e.forEach(t),vhr=i(fe),mT=n(fe,"LI",{});var V$e=s(mT);C1e=n(V$e,"STRONG",{});var x6t=s(C1e);Fhr=r(x6t,"rembert"),x6t.forEach(t),Thr=r(V$e," \u2014 "),wQ=n(V$e,"A",{href:!0});var $6t=s(wQ);Mhr=r($6t,"TFRemBertForMaskedLM"),$6t.forEach(t),Ehr=r(V$e," (RemBERT model)"),V$e.forEach(t),Chr=i(fe),gT=n(fe,"LI",{});var X$e=s(gT);w1e=n(X$e,"STRONG",{});var k6t=s(w1e);whr=r(k6t,"roberta"),k6t.forEach(t),Ahr=r(X$e," \u2014 "),AQ=n(X$e,"A",{href:!0});var S6t=s(AQ);yhr=r(S6t,"TFRobertaForMaskedLM"),S6t.forEach(t),Lhr=r(X$e," (RoBERTa model)"),X$e.forEach(t),xhr=i(fe),hT=n(fe,"LI",{});var z$e=s(hT);A1e=n(z$e,"STRONG",{});var R6t=s(A1e);$hr=r(R6t,"roformer"),R6t.forEach(t),khr=r(z$e," \u2014 "),yQ=n(z$e,"A",{href:!0});var B6t=s(yQ);Shr=r(B6t,"TFRoFormerForMaskedLM"),B6t.forEach(t),Rhr=r(z$e," (RoFormer model)"),z$e.forEach(t),Bhr=i(fe),pT=n(fe,"LI",{});var Q$e=s(pT);y1e=n(Q$e,"STRONG",{});var P6t=s(y1e);Phr=r(P6t,"tapas"),P6t.forEach(t),Ihr=r(Q$e," \u2014 "),LQ=n(Q$e,"A",{href:!0});var I6t=s(LQ);qhr=r(I6t,"TFTapasForMaskedLM"),I6t.forEach(t),Nhr=r(Q$e," (TAPAS model)"),Q$e.forEach(t),jhr=i(fe),uT=n(fe,"LI",{});var W$e=s(uT);L1e=n(W$e,"STRONG",{});var q6t=s(L1e);Dhr=r(q6t,"xlm"),q6t.forEach(t),Ghr=r(W$e," \u2014 "),xQ=n(W$e,"A",{href:!0});var N6t=s(xQ);Ohr=r(N6t,"TFXLMWithLMHeadModel"),N6t.forEach(t),Vhr=r(W$e," (XLM model)"),W$e.forEach(t),Xhr=i(fe),_T=n(fe,"LI",{});var H$e=s(_T);x1e=n(H$e,"STRONG",{});var j6t=s(x1e);zhr=r(j6t,"xlm-roberta"),j6t.forEach(t),Qhr=r(H$e," \u2014 "),$Q=n(H$e,"A",{href:!0});var D6t=s($Q);Whr=r(D6t,"TFXLMRobertaForMaskedLM"),D6t.forEach(t),Hhr=r(H$e," (XLM-RoBERTa model)"),H$e.forEach(t),fe.forEach(t),Uhr=i(hl),T(bT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),UPe=i(f),Wd=n(f,"H2",{class:!0});var Zqe=s(Wd);vT=n(Zqe,"A",{id:!0,class:!0,href:!0});var G6t=s(vT);$1e=n(G6t,"SPAN",{});var O6t=s($1e);T(P8.$$.fragment,O6t),O6t.forEach(t),G6t.forEach(t),Jhr=i(Zqe),k1e=n(Zqe,"SPAN",{});var V6t=s(k1e);Yhr=r(V6t,"TFAutoModelForSeq2SeqLM"),V6t.forEach(t),Zqe.forEach(t),JPe=i(f),rr=n(f,"DIV",{class:!0});var pl=s(rr);T(I8.$$.fragment,pl),Khr=i(pl),Hd=n(pl,"P",{});var yK=s(Hd);Zhr=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kQ=n(yK,"A",{href:!0});var X6t=s(kQ);epr=r(X6t,"from_pretrained()"),X6t.forEach(t),opr=r(yK," class method or the "),SQ=n(yK,"A",{href:!0});var z6t=s(SQ);rpr=r(z6t,"from_config()"),z6t.forEach(t),tpr=r(yK,` class
method.`),yK.forEach(t),apr=i(pl),q8=n(pl,"P",{});var eNe=s(q8);npr=r(eNe,"This class cannot be instantiated directly using "),S1e=n(eNe,"CODE",{});var Q6t=s(S1e);spr=r(Q6t,"__init__()"),Q6t.forEach(t),lpr=r(eNe," (throws an error)."),eNe.forEach(t),ipr=i(pl),Lt=n(pl,"DIV",{class:!0});var jA=s(Lt);T(N8.$$.fragment,jA),dpr=i(jA),R1e=n(jA,"P",{});var W6t=s(R1e);cpr=r(W6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W6t.forEach(t),fpr=i(jA),Ud=n(jA,"P",{});var LK=s(Ud);mpr=r(LK,`Note:
Loading a model from its configuration file does `),B1e=n(LK,"STRONG",{});var H6t=s(B1e);gpr=r(H6t,"not"),H6t.forEach(t),hpr=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(LK,"A",{href:!0});var U6t=s(RQ);ppr=r(U6t,"from_pretrained()"),U6t.forEach(t),upr=r(LK," to load the model weights."),LK.forEach(t),_pr=i(jA),T(FT.$$.fragment,jA),jA.forEach(t),bpr=i(pl),xr=n(pl,"DIV",{class:!0});var ul=s(xr);T(j8.$$.fragment,ul),vpr=i(ul),P1e=n(ul,"P",{});var J6t=s(P1e);Fpr=r(J6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),J6t.forEach(t),Tpr=i(ul),en=n(ul,"P",{});var DA=s(en);Mpr=r(DA,"The model class to instantiate is selected based on the "),I1e=n(DA,"CODE",{});var Y6t=s(I1e);Epr=r(Y6t,"model_type"),Y6t.forEach(t),Cpr=r(DA,` property of the config object (either
passed as an argument or loaded from `),q1e=n(DA,"CODE",{});var K6t=s(q1e);wpr=r(K6t,"pretrained_model_name_or_path"),K6t.forEach(t),Apr=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(DA,"CODE",{});var Z6t=s(N1e);ypr=r(Z6t,"pretrained_model_name_or_path"),Z6t.forEach(t),Lpr=r(DA,":"),DA.forEach(t),xpr=i(ul),ye=n(ul,"UL",{});var Re=s(ye);TT=n(Re,"LI",{});var U$e=s(TT);j1e=n(U$e,"STRONG",{});var e1t=s(j1e);$pr=r(e1t,"bart"),e1t.forEach(t),kpr=r(U$e," \u2014 "),BQ=n(U$e,"A",{href:!0});var o1t=s(BQ);Spr=r(o1t,"TFBartForConditionalGeneration"),o1t.forEach(t),Rpr=r(U$e," (BART model)"),U$e.forEach(t),Bpr=i(Re),MT=n(Re,"LI",{});var J$e=s(MT);D1e=n(J$e,"STRONG",{});var r1t=s(D1e);Ppr=r(r1t,"blenderbot"),r1t.forEach(t),Ipr=r(J$e," \u2014 "),PQ=n(J$e,"A",{href:!0});var t1t=s(PQ);qpr=r(t1t,"TFBlenderbotForConditionalGeneration"),t1t.forEach(t),Npr=r(J$e," (Blenderbot model)"),J$e.forEach(t),jpr=i(Re),ET=n(Re,"LI",{});var Y$e=s(ET);G1e=n(Y$e,"STRONG",{});var a1t=s(G1e);Dpr=r(a1t,"blenderbot-small"),a1t.forEach(t),Gpr=r(Y$e," \u2014 "),IQ=n(Y$e,"A",{href:!0});var n1t=s(IQ);Opr=r(n1t,"TFBlenderbotSmallForConditionalGeneration"),n1t.forEach(t),Vpr=r(Y$e," (BlenderbotSmall model)"),Y$e.forEach(t),Xpr=i(Re),CT=n(Re,"LI",{});var K$e=s(CT);O1e=n(K$e,"STRONG",{});var s1t=s(O1e);zpr=r(s1t,"encoder-decoder"),s1t.forEach(t),Qpr=r(K$e," \u2014 "),qQ=n(K$e,"A",{href:!0});var l1t=s(qQ);Wpr=r(l1t,"TFEncoderDecoderModel"),l1t.forEach(t),Hpr=r(K$e," (Encoder decoder model)"),K$e.forEach(t),Upr=i(Re),wT=n(Re,"LI",{});var Z$e=s(wT);V1e=n(Z$e,"STRONG",{});var i1t=s(V1e);Jpr=r(i1t,"led"),i1t.forEach(t),Ypr=r(Z$e," \u2014 "),NQ=n(Z$e,"A",{href:!0});var d1t=s(NQ);Kpr=r(d1t,"TFLEDForConditionalGeneration"),d1t.forEach(t),Zpr=r(Z$e," (LED model)"),Z$e.forEach(t),eur=i(Re),AT=n(Re,"LI",{});var eke=s(AT);X1e=n(eke,"STRONG",{});var c1t=s(X1e);our=r(c1t,"marian"),c1t.forEach(t),rur=r(eke," \u2014 "),jQ=n(eke,"A",{href:!0});var f1t=s(jQ);tur=r(f1t,"TFMarianMTModel"),f1t.forEach(t),aur=r(eke," (Marian model)"),eke.forEach(t),nur=i(Re),yT=n(Re,"LI",{});var oke=s(yT);z1e=n(oke,"STRONG",{});var m1t=s(z1e);sur=r(m1t,"mbart"),m1t.forEach(t),lur=r(oke," \u2014 "),DQ=n(oke,"A",{href:!0});var g1t=s(DQ);iur=r(g1t,"TFMBartForConditionalGeneration"),g1t.forEach(t),dur=r(oke," (mBART model)"),oke.forEach(t),cur=i(Re),LT=n(Re,"LI",{});var rke=s(LT);Q1e=n(rke,"STRONG",{});var h1t=s(Q1e);fur=r(h1t,"mt5"),h1t.forEach(t),mur=r(rke," \u2014 "),GQ=n(rke,"A",{href:!0});var p1t=s(GQ);gur=r(p1t,"TFMT5ForConditionalGeneration"),p1t.forEach(t),hur=r(rke," (mT5 model)"),rke.forEach(t),pur=i(Re),xT=n(Re,"LI",{});var tke=s(xT);W1e=n(tke,"STRONG",{});var u1t=s(W1e);uur=r(u1t,"pegasus"),u1t.forEach(t),_ur=r(tke," \u2014 "),OQ=n(tke,"A",{href:!0});var _1t=s(OQ);bur=r(_1t,"TFPegasusForConditionalGeneration"),_1t.forEach(t),vur=r(tke," (Pegasus model)"),tke.forEach(t),Fur=i(Re),$T=n(Re,"LI",{});var ake=s($T);H1e=n(ake,"STRONG",{});var b1t=s(H1e);Tur=r(b1t,"t5"),b1t.forEach(t),Mur=r(ake," \u2014 "),VQ=n(ake,"A",{href:!0});var v1t=s(VQ);Eur=r(v1t,"TFT5ForConditionalGeneration"),v1t.forEach(t),Cur=r(ake," (T5 model)"),ake.forEach(t),Re.forEach(t),wur=i(ul),T(kT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),YPe=i(f),Jd=n(f,"H2",{class:!0});var oNe=s(Jd);ST=n(oNe,"A",{id:!0,class:!0,href:!0});var F1t=s(ST);U1e=n(F1t,"SPAN",{});var T1t=s(U1e);T(D8.$$.fragment,T1t),T1t.forEach(t),F1t.forEach(t),Aur=i(oNe),J1e=n(oNe,"SPAN",{});var M1t=s(J1e);yur=r(M1t,"TFAutoModelForSequenceClassification"),M1t.forEach(t),oNe.forEach(t),KPe=i(f),tr=n(f,"DIV",{class:!0});var _l=s(tr);T(G8.$$.fragment,_l),Lur=i(_l),Yd=n(_l,"P",{});var xK=s(Yd);xur=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),XQ=n(xK,"A",{href:!0});var E1t=s(XQ);$ur=r(E1t,"from_pretrained()"),E1t.forEach(t),kur=r(xK," class method or the "),zQ=n(xK,"A",{href:!0});var C1t=s(zQ);Sur=r(C1t,"from_config()"),C1t.forEach(t),Rur=r(xK,` class
method.`),xK.forEach(t),Bur=i(_l),O8=n(_l,"P",{});var rNe=s(O8);Pur=r(rNe,"This class cannot be instantiated directly using "),Y1e=n(rNe,"CODE",{});var w1t=s(Y1e);Iur=r(w1t,"__init__()"),w1t.forEach(t),qur=r(rNe," (throws an error)."),rNe.forEach(t),Nur=i(_l),xt=n(_l,"DIV",{class:!0});var GA=s(xt);T(V8.$$.fragment,GA),jur=i(GA),K1e=n(GA,"P",{});var A1t=s(K1e);Dur=r(A1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),A1t.forEach(t),Gur=i(GA),Kd=n(GA,"P",{});var $K=s(Kd);Our=r($K,`Note:
Loading a model from its configuration file does `),Z1e=n($K,"STRONG",{});var y1t=s(Z1e);Vur=r(y1t,"not"),y1t.forEach(t),Xur=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n($K,"A",{href:!0});var L1t=s(QQ);zur=r(L1t,"from_pretrained()"),L1t.forEach(t),Qur=r($K," to load the model weights."),$K.forEach(t),Wur=i(GA),T(RT.$$.fragment,GA),GA.forEach(t),Hur=i(_l),$r=n(_l,"DIV",{class:!0});var bl=s($r);T(X8.$$.fragment,bl),Uur=i(bl),ebe=n(bl,"P",{});var x1t=s(ebe);Jur=r(x1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),x1t.forEach(t),Yur=i(bl),on=n(bl,"P",{});var OA=s(on);Kur=r(OA,"The model class to instantiate is selected based on the "),obe=n(OA,"CODE",{});var $1t=s(obe);Zur=r($1t,"model_type"),$1t.forEach(t),e_r=r(OA,` property of the config object (either
passed as an argument or loaded from `),rbe=n(OA,"CODE",{});var k1t=s(rbe);o_r=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),r_r=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tbe=n(OA,"CODE",{});var S1t=s(tbe);t_r=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),a_r=r(OA,":"),OA.forEach(t),n_r=i(bl),Z=n(bl,"UL",{});var te=s(Z);BT=n(te,"LI",{});var nke=s(BT);abe=n(nke,"STRONG",{});var R1t=s(abe);s_r=r(R1t,"albert"),R1t.forEach(t),l_r=r(nke," \u2014 "),WQ=n(nke,"A",{href:!0});var B1t=s(WQ);i_r=r(B1t,"TFAlbertForSequenceClassification"),B1t.forEach(t),d_r=r(nke," (ALBERT model)"),nke.forEach(t),c_r=i(te),PT=n(te,"LI",{});var ske=s(PT);nbe=n(ske,"STRONG",{});var P1t=s(nbe);f_r=r(P1t,"bert"),P1t.forEach(t),m_r=r(ske," \u2014 "),HQ=n(ske,"A",{href:!0});var I1t=s(HQ);g_r=r(I1t,"TFBertForSequenceClassification"),I1t.forEach(t),h_r=r(ske," (BERT model)"),ske.forEach(t),p_r=i(te),IT=n(te,"LI",{});var lke=s(IT);sbe=n(lke,"STRONG",{});var q1t=s(sbe);u_r=r(q1t,"camembert"),q1t.forEach(t),__r=r(lke," \u2014 "),UQ=n(lke,"A",{href:!0});var N1t=s(UQ);b_r=r(N1t,"TFCamembertForSequenceClassification"),N1t.forEach(t),v_r=r(lke," (CamemBERT model)"),lke.forEach(t),F_r=i(te),qT=n(te,"LI",{});var ike=s(qT);lbe=n(ike,"STRONG",{});var j1t=s(lbe);T_r=r(j1t,"convbert"),j1t.forEach(t),M_r=r(ike," \u2014 "),JQ=n(ike,"A",{href:!0});var D1t=s(JQ);E_r=r(D1t,"TFConvBertForSequenceClassification"),D1t.forEach(t),C_r=r(ike," (ConvBERT model)"),ike.forEach(t),w_r=i(te),NT=n(te,"LI",{});var dke=s(NT);ibe=n(dke,"STRONG",{});var G1t=s(ibe);A_r=r(G1t,"ctrl"),G1t.forEach(t),y_r=r(dke," \u2014 "),YQ=n(dke,"A",{href:!0});var O1t=s(YQ);L_r=r(O1t,"TFCTRLForSequenceClassification"),O1t.forEach(t),x_r=r(dke," (CTRL model)"),dke.forEach(t),$_r=i(te),jT=n(te,"LI",{});var cke=s(jT);dbe=n(cke,"STRONG",{});var V1t=s(dbe);k_r=r(V1t,"deberta"),V1t.forEach(t),S_r=r(cke," \u2014 "),KQ=n(cke,"A",{href:!0});var X1t=s(KQ);R_r=r(X1t,"TFDebertaForSequenceClassification"),X1t.forEach(t),B_r=r(cke," (DeBERTa model)"),cke.forEach(t),P_r=i(te),DT=n(te,"LI",{});var fke=s(DT);cbe=n(fke,"STRONG",{});var z1t=s(cbe);I_r=r(z1t,"deberta-v2"),z1t.forEach(t),q_r=r(fke," \u2014 "),ZQ=n(fke,"A",{href:!0});var Q1t=s(ZQ);N_r=r(Q1t,"TFDebertaV2ForSequenceClassification"),Q1t.forEach(t),j_r=r(fke," (DeBERTa-v2 model)"),fke.forEach(t),D_r=i(te),GT=n(te,"LI",{});var mke=s(GT);fbe=n(mke,"STRONG",{});var W1t=s(fbe);G_r=r(W1t,"distilbert"),W1t.forEach(t),O_r=r(mke," \u2014 "),eW=n(mke,"A",{href:!0});var H1t=s(eW);V_r=r(H1t,"TFDistilBertForSequenceClassification"),H1t.forEach(t),X_r=r(mke," (DistilBERT model)"),mke.forEach(t),z_r=i(te),OT=n(te,"LI",{});var gke=s(OT);mbe=n(gke,"STRONG",{});var U1t=s(mbe);Q_r=r(U1t,"electra"),U1t.forEach(t),W_r=r(gke," \u2014 "),oW=n(gke,"A",{href:!0});var J1t=s(oW);H_r=r(J1t,"TFElectraForSequenceClassification"),J1t.forEach(t),U_r=r(gke," (ELECTRA model)"),gke.forEach(t),J_r=i(te),VT=n(te,"LI",{});var hke=s(VT);gbe=n(hke,"STRONG",{});var Y1t=s(gbe);Y_r=r(Y1t,"flaubert"),Y1t.forEach(t),K_r=r(hke," \u2014 "),rW=n(hke,"A",{href:!0});var K1t=s(rW);Z_r=r(K1t,"TFFlaubertForSequenceClassification"),K1t.forEach(t),e6r=r(hke," (FlauBERT model)"),hke.forEach(t),o6r=i(te),XT=n(te,"LI",{});var pke=s(XT);hbe=n(pke,"STRONG",{});var Z1t=s(hbe);r6r=r(Z1t,"funnel"),Z1t.forEach(t),t6r=r(pke," \u2014 "),tW=n(pke,"A",{href:!0});var ebt=s(tW);a6r=r(ebt,"TFFunnelForSequenceClassification"),ebt.forEach(t),n6r=r(pke," (Funnel Transformer model)"),pke.forEach(t),s6r=i(te),zT=n(te,"LI",{});var uke=s(zT);pbe=n(uke,"STRONG",{});var obt=s(pbe);l6r=r(obt,"gpt2"),obt.forEach(t),i6r=r(uke," \u2014 "),aW=n(uke,"A",{href:!0});var rbt=s(aW);d6r=r(rbt,"TFGPT2ForSequenceClassification"),rbt.forEach(t),c6r=r(uke," (OpenAI GPT-2 model)"),uke.forEach(t),f6r=i(te),QT=n(te,"LI",{});var _ke=s(QT);ube=n(_ke,"STRONG",{});var tbt=s(ube);m6r=r(tbt,"gptj"),tbt.forEach(t),g6r=r(_ke," \u2014 "),nW=n(_ke,"A",{href:!0});var abt=s(nW);h6r=r(abt,"TFGPTJForSequenceClassification"),abt.forEach(t),p6r=r(_ke," (GPT-J model)"),_ke.forEach(t),u6r=i(te),WT=n(te,"LI",{});var bke=s(WT);_be=n(bke,"STRONG",{});var nbt=s(_be);_6r=r(nbt,"layoutlm"),nbt.forEach(t),b6r=r(bke," \u2014 "),sW=n(bke,"A",{href:!0});var sbt=s(sW);v6r=r(sbt,"TFLayoutLMForSequenceClassification"),sbt.forEach(t),F6r=r(bke," (LayoutLM model)"),bke.forEach(t),T6r=i(te),HT=n(te,"LI",{});var vke=s(HT);bbe=n(vke,"STRONG",{});var lbt=s(bbe);M6r=r(lbt,"longformer"),lbt.forEach(t),E6r=r(vke," \u2014 "),lW=n(vke,"A",{href:!0});var ibt=s(lW);C6r=r(ibt,"TFLongformerForSequenceClassification"),ibt.forEach(t),w6r=r(vke," (Longformer model)"),vke.forEach(t),A6r=i(te),UT=n(te,"LI",{});var Fke=s(UT);vbe=n(Fke,"STRONG",{});var dbt=s(vbe);y6r=r(dbt,"mobilebert"),dbt.forEach(t),L6r=r(Fke," \u2014 "),iW=n(Fke,"A",{href:!0});var cbt=s(iW);x6r=r(cbt,"TFMobileBertForSequenceClassification"),cbt.forEach(t),$6r=r(Fke," (MobileBERT model)"),Fke.forEach(t),k6r=i(te),JT=n(te,"LI",{});var Tke=s(JT);Fbe=n(Tke,"STRONG",{});var fbt=s(Fbe);S6r=r(fbt,"mpnet"),fbt.forEach(t),R6r=r(Tke," \u2014 "),dW=n(Tke,"A",{href:!0});var mbt=s(dW);B6r=r(mbt,"TFMPNetForSequenceClassification"),mbt.forEach(t),P6r=r(Tke," (MPNet model)"),Tke.forEach(t),I6r=i(te),YT=n(te,"LI",{});var Mke=s(YT);Tbe=n(Mke,"STRONG",{});var gbt=s(Tbe);q6r=r(gbt,"openai-gpt"),gbt.forEach(t),N6r=r(Mke," \u2014 "),cW=n(Mke,"A",{href:!0});var hbt=s(cW);j6r=r(hbt,"TFOpenAIGPTForSequenceClassification"),hbt.forEach(t),D6r=r(Mke," (OpenAI GPT model)"),Mke.forEach(t),G6r=i(te),KT=n(te,"LI",{});var Eke=s(KT);Mbe=n(Eke,"STRONG",{});var pbt=s(Mbe);O6r=r(pbt,"rembert"),pbt.forEach(t),V6r=r(Eke," \u2014 "),fW=n(Eke,"A",{href:!0});var ubt=s(fW);X6r=r(ubt,"TFRemBertForSequenceClassification"),ubt.forEach(t),z6r=r(Eke," (RemBERT model)"),Eke.forEach(t),Q6r=i(te),ZT=n(te,"LI",{});var Cke=s(ZT);Ebe=n(Cke,"STRONG",{});var _bt=s(Ebe);W6r=r(_bt,"roberta"),_bt.forEach(t),H6r=r(Cke," \u2014 "),mW=n(Cke,"A",{href:!0});var bbt=s(mW);U6r=r(bbt,"TFRobertaForSequenceClassification"),bbt.forEach(t),J6r=r(Cke," (RoBERTa model)"),Cke.forEach(t),Y6r=i(te),eM=n(te,"LI",{});var wke=s(eM);Cbe=n(wke,"STRONG",{});var vbt=s(Cbe);K6r=r(vbt,"roformer"),vbt.forEach(t),Z6r=r(wke," \u2014 "),gW=n(wke,"A",{href:!0});var Fbt=s(gW);e1r=r(Fbt,"TFRoFormerForSequenceClassification"),Fbt.forEach(t),o1r=r(wke," (RoFormer model)"),wke.forEach(t),r1r=i(te),oM=n(te,"LI",{});var Ake=s(oM);wbe=n(Ake,"STRONG",{});var Tbt=s(wbe);t1r=r(Tbt,"tapas"),Tbt.forEach(t),a1r=r(Ake," \u2014 "),hW=n(Ake,"A",{href:!0});var Mbt=s(hW);n1r=r(Mbt,"TFTapasForSequenceClassification"),Mbt.forEach(t),s1r=r(Ake," (TAPAS model)"),Ake.forEach(t),l1r=i(te),rM=n(te,"LI",{});var yke=s(rM);Abe=n(yke,"STRONG",{});var Ebt=s(Abe);i1r=r(Ebt,"transfo-xl"),Ebt.forEach(t),d1r=r(yke," \u2014 "),pW=n(yke,"A",{href:!0});var Cbt=s(pW);c1r=r(Cbt,"TFTransfoXLForSequenceClassification"),Cbt.forEach(t),f1r=r(yke," (Transformer-XL model)"),yke.forEach(t),m1r=i(te),tM=n(te,"LI",{});var Lke=s(tM);ybe=n(Lke,"STRONG",{});var wbt=s(ybe);g1r=r(wbt,"xlm"),wbt.forEach(t),h1r=r(Lke," \u2014 "),uW=n(Lke,"A",{href:!0});var Abt=s(uW);p1r=r(Abt,"TFXLMForSequenceClassification"),Abt.forEach(t),u1r=r(Lke," (XLM model)"),Lke.forEach(t),_1r=i(te),aM=n(te,"LI",{});var xke=s(aM);Lbe=n(xke,"STRONG",{});var ybt=s(Lbe);b1r=r(ybt,"xlm-roberta"),ybt.forEach(t),v1r=r(xke," \u2014 "),_W=n(xke,"A",{href:!0});var Lbt=s(_W);F1r=r(Lbt,"TFXLMRobertaForSequenceClassification"),Lbt.forEach(t),T1r=r(xke," (XLM-RoBERTa model)"),xke.forEach(t),M1r=i(te),nM=n(te,"LI",{});var $ke=s(nM);xbe=n($ke,"STRONG",{});var xbt=s(xbe);E1r=r(xbt,"xlnet"),xbt.forEach(t),C1r=r($ke," \u2014 "),bW=n($ke,"A",{href:!0});var $bt=s(bW);w1r=r($bt,"TFXLNetForSequenceClassification"),$bt.forEach(t),A1r=r($ke," (XLNet model)"),$ke.forEach(t),te.forEach(t),y1r=i(bl),T(sM.$$.fragment,bl),bl.forEach(t),_l.forEach(t),ZPe=i(f),Zd=n(f,"H2",{class:!0});var tNe=s(Zd);lM=n(tNe,"A",{id:!0,class:!0,href:!0});var kbt=s(lM);$be=n(kbt,"SPAN",{});var Sbt=s($be);T(z8.$$.fragment,Sbt),Sbt.forEach(t),kbt.forEach(t),L1r=i(tNe),kbe=n(tNe,"SPAN",{});var Rbt=s(kbe);x1r=r(Rbt,"TFAutoModelForMultipleChoice"),Rbt.forEach(t),tNe.forEach(t),eIe=i(f),ar=n(f,"DIV",{class:!0});var vl=s(ar);T(Q8.$$.fragment,vl),$1r=i(vl),ec=n(vl,"P",{});var kK=s(ec);k1r=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vW=n(kK,"A",{href:!0});var Bbt=s(vW);S1r=r(Bbt,"from_pretrained()"),Bbt.forEach(t),R1r=r(kK," class method or the "),FW=n(kK,"A",{href:!0});var Pbt=s(FW);B1r=r(Pbt,"from_config()"),Pbt.forEach(t),P1r=r(kK,` class
method.`),kK.forEach(t),I1r=i(vl),W8=n(vl,"P",{});var aNe=s(W8);q1r=r(aNe,"This class cannot be instantiated directly using "),Sbe=n(aNe,"CODE",{});var Ibt=s(Sbe);N1r=r(Ibt,"__init__()"),Ibt.forEach(t),j1r=r(aNe," (throws an error)."),aNe.forEach(t),D1r=i(vl),$t=n(vl,"DIV",{class:!0});var VA=s($t);T(H8.$$.fragment,VA),G1r=i(VA),Rbe=n(VA,"P",{});var qbt=s(Rbe);O1r=r(qbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qbt.forEach(t),V1r=i(VA),oc=n(VA,"P",{});var SK=s(oc);X1r=r(SK,`Note:
Loading a model from its configuration file does `),Bbe=n(SK,"STRONG",{});var Nbt=s(Bbe);z1r=r(Nbt,"not"),Nbt.forEach(t),Q1r=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(SK,"A",{href:!0});var jbt=s(TW);W1r=r(jbt,"from_pretrained()"),jbt.forEach(t),H1r=r(SK," to load the model weights."),SK.forEach(t),U1r=i(VA),T(iM.$$.fragment,VA),VA.forEach(t),J1r=i(vl),kr=n(vl,"DIV",{class:!0});var Fl=s(kr);T(U8.$$.fragment,Fl),Y1r=i(Fl),Pbe=n(Fl,"P",{});var Dbt=s(Pbe);K1r=r(Dbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dbt.forEach(t),Z1r=i(Fl),rn=n(Fl,"P",{});var XA=s(rn);ebr=r(XA,"The model class to instantiate is selected based on the "),Ibe=n(XA,"CODE",{});var Gbt=s(Ibe);obr=r(Gbt,"model_type"),Gbt.forEach(t),rbr=r(XA,` property of the config object (either
passed as an argument or loaded from `),qbe=n(XA,"CODE",{});var Obt=s(qbe);tbr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),abr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(XA,"CODE",{});var Vbt=s(Nbe);nbr=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),sbr=r(XA,":"),XA.forEach(t),lbr=i(Fl),pe=n(Fl,"UL",{});var _e=s(pe);dM=n(_e,"LI",{});var kke=s(dM);jbe=n(kke,"STRONG",{});var Xbt=s(jbe);ibr=r(Xbt,"albert"),Xbt.forEach(t),dbr=r(kke," \u2014 "),MW=n(kke,"A",{href:!0});var zbt=s(MW);cbr=r(zbt,"TFAlbertForMultipleChoice"),zbt.forEach(t),fbr=r(kke," (ALBERT model)"),kke.forEach(t),mbr=i(_e),cM=n(_e,"LI",{});var Ske=s(cM);Dbe=n(Ske,"STRONG",{});var Qbt=s(Dbe);gbr=r(Qbt,"bert"),Qbt.forEach(t),hbr=r(Ske," \u2014 "),EW=n(Ske,"A",{href:!0});var Wbt=s(EW);pbr=r(Wbt,"TFBertForMultipleChoice"),Wbt.forEach(t),ubr=r(Ske," (BERT model)"),Ske.forEach(t),_br=i(_e),fM=n(_e,"LI",{});var Rke=s(fM);Gbe=n(Rke,"STRONG",{});var Hbt=s(Gbe);bbr=r(Hbt,"camembert"),Hbt.forEach(t),vbr=r(Rke," \u2014 "),CW=n(Rke,"A",{href:!0});var Ubt=s(CW);Fbr=r(Ubt,"TFCamembertForMultipleChoice"),Ubt.forEach(t),Tbr=r(Rke," (CamemBERT model)"),Rke.forEach(t),Mbr=i(_e),mM=n(_e,"LI",{});var Bke=s(mM);Obe=n(Bke,"STRONG",{});var Jbt=s(Obe);Ebr=r(Jbt,"convbert"),Jbt.forEach(t),Cbr=r(Bke," \u2014 "),wW=n(Bke,"A",{href:!0});var Ybt=s(wW);wbr=r(Ybt,"TFConvBertForMultipleChoice"),Ybt.forEach(t),Abr=r(Bke," (ConvBERT model)"),Bke.forEach(t),ybr=i(_e),gM=n(_e,"LI",{});var Pke=s(gM);Vbe=n(Pke,"STRONG",{});var Kbt=s(Vbe);Lbr=r(Kbt,"distilbert"),Kbt.forEach(t),xbr=r(Pke," \u2014 "),AW=n(Pke,"A",{href:!0});var Zbt=s(AW);$br=r(Zbt,"TFDistilBertForMultipleChoice"),Zbt.forEach(t),kbr=r(Pke," (DistilBERT model)"),Pke.forEach(t),Sbr=i(_e),hM=n(_e,"LI",{});var Ike=s(hM);Xbe=n(Ike,"STRONG",{});var e4t=s(Xbe);Rbr=r(e4t,"electra"),e4t.forEach(t),Bbr=r(Ike," \u2014 "),yW=n(Ike,"A",{href:!0});var o4t=s(yW);Pbr=r(o4t,"TFElectraForMultipleChoice"),o4t.forEach(t),Ibr=r(Ike," (ELECTRA model)"),Ike.forEach(t),qbr=i(_e),pM=n(_e,"LI",{});var qke=s(pM);zbe=n(qke,"STRONG",{});var r4t=s(zbe);Nbr=r(r4t,"flaubert"),r4t.forEach(t),jbr=r(qke," \u2014 "),LW=n(qke,"A",{href:!0});var t4t=s(LW);Dbr=r(t4t,"TFFlaubertForMultipleChoice"),t4t.forEach(t),Gbr=r(qke," (FlauBERT model)"),qke.forEach(t),Obr=i(_e),uM=n(_e,"LI",{});var Nke=s(uM);Qbe=n(Nke,"STRONG",{});var a4t=s(Qbe);Vbr=r(a4t,"funnel"),a4t.forEach(t),Xbr=r(Nke," \u2014 "),xW=n(Nke,"A",{href:!0});var n4t=s(xW);zbr=r(n4t,"TFFunnelForMultipleChoice"),n4t.forEach(t),Qbr=r(Nke," (Funnel Transformer model)"),Nke.forEach(t),Wbr=i(_e),_M=n(_e,"LI",{});var jke=s(_M);Wbe=n(jke,"STRONG",{});var s4t=s(Wbe);Hbr=r(s4t,"longformer"),s4t.forEach(t),Ubr=r(jke," \u2014 "),$W=n(jke,"A",{href:!0});var l4t=s($W);Jbr=r(l4t,"TFLongformerForMultipleChoice"),l4t.forEach(t),Ybr=r(jke," (Longformer model)"),jke.forEach(t),Kbr=i(_e),bM=n(_e,"LI",{});var Dke=s(bM);Hbe=n(Dke,"STRONG",{});var i4t=s(Hbe);Zbr=r(i4t,"mobilebert"),i4t.forEach(t),e4r=r(Dke," \u2014 "),kW=n(Dke,"A",{href:!0});var d4t=s(kW);o4r=r(d4t,"TFMobileBertForMultipleChoice"),d4t.forEach(t),r4r=r(Dke," (MobileBERT model)"),Dke.forEach(t),t4r=i(_e),vM=n(_e,"LI",{});var Gke=s(vM);Ube=n(Gke,"STRONG",{});var c4t=s(Ube);a4r=r(c4t,"mpnet"),c4t.forEach(t),n4r=r(Gke," \u2014 "),SW=n(Gke,"A",{href:!0});var f4t=s(SW);s4r=r(f4t,"TFMPNetForMultipleChoice"),f4t.forEach(t),l4r=r(Gke," (MPNet model)"),Gke.forEach(t),i4r=i(_e),FM=n(_e,"LI",{});var Oke=s(FM);Jbe=n(Oke,"STRONG",{});var m4t=s(Jbe);d4r=r(m4t,"rembert"),m4t.forEach(t),c4r=r(Oke," \u2014 "),RW=n(Oke,"A",{href:!0});var g4t=s(RW);f4r=r(g4t,"TFRemBertForMultipleChoice"),g4t.forEach(t),m4r=r(Oke," (RemBERT model)"),Oke.forEach(t),g4r=i(_e),TM=n(_e,"LI",{});var Vke=s(TM);Ybe=n(Vke,"STRONG",{});var h4t=s(Ybe);h4r=r(h4t,"roberta"),h4t.forEach(t),p4r=r(Vke," \u2014 "),BW=n(Vke,"A",{href:!0});var p4t=s(BW);u4r=r(p4t,"TFRobertaForMultipleChoice"),p4t.forEach(t),_4r=r(Vke," (RoBERTa model)"),Vke.forEach(t),b4r=i(_e),MM=n(_e,"LI",{});var Xke=s(MM);Kbe=n(Xke,"STRONG",{});var u4t=s(Kbe);v4r=r(u4t,"roformer"),u4t.forEach(t),F4r=r(Xke," \u2014 "),PW=n(Xke,"A",{href:!0});var _4t=s(PW);T4r=r(_4t,"TFRoFormerForMultipleChoice"),_4t.forEach(t),M4r=r(Xke," (RoFormer model)"),Xke.forEach(t),E4r=i(_e),EM=n(_e,"LI",{});var zke=s(EM);Zbe=n(zke,"STRONG",{});var b4t=s(Zbe);C4r=r(b4t,"xlm"),b4t.forEach(t),w4r=r(zke," \u2014 "),IW=n(zke,"A",{href:!0});var v4t=s(IW);A4r=r(v4t,"TFXLMForMultipleChoice"),v4t.forEach(t),y4r=r(zke," (XLM model)"),zke.forEach(t),L4r=i(_e),CM=n(_e,"LI",{});var Qke=s(CM);e4e=n(Qke,"STRONG",{});var F4t=s(e4e);x4r=r(F4t,"xlm-roberta"),F4t.forEach(t),$4r=r(Qke," \u2014 "),qW=n(Qke,"A",{href:!0});var T4t=s(qW);k4r=r(T4t,"TFXLMRobertaForMultipleChoice"),T4t.forEach(t),S4r=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),R4r=i(_e),wM=n(_e,"LI",{});var Wke=s(wM);o4e=n(Wke,"STRONG",{});var M4t=s(o4e);B4r=r(M4t,"xlnet"),M4t.forEach(t),P4r=r(Wke," \u2014 "),NW=n(Wke,"A",{href:!0});var E4t=s(NW);I4r=r(E4t,"TFXLNetForMultipleChoice"),E4t.forEach(t),q4r=r(Wke," (XLNet model)"),Wke.forEach(t),_e.forEach(t),N4r=i(Fl),T(AM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),oIe=i(f),rc=n(f,"H2",{class:!0});var nNe=s(rc);yM=n(nNe,"A",{id:!0,class:!0,href:!0});var C4t=s(yM);r4e=n(C4t,"SPAN",{});var w4t=s(r4e);T(J8.$$.fragment,w4t),w4t.forEach(t),C4t.forEach(t),j4r=i(nNe),t4e=n(nNe,"SPAN",{});var A4t=s(t4e);D4r=r(A4t,"TFAutoModelForTableQuestionAnswering"),A4t.forEach(t),nNe.forEach(t),rIe=i(f),nr=n(f,"DIV",{class:!0});var Tl=s(nr);T(Y8.$$.fragment,Tl),G4r=i(Tl),tc=n(Tl,"P",{});var RK=s(tc);O4r=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),jW=n(RK,"A",{href:!0});var y4t=s(jW);V4r=r(y4t,"from_pretrained()"),y4t.forEach(t),X4r=r(RK," class method or the "),DW=n(RK,"A",{href:!0});var L4t=s(DW);z4r=r(L4t,"from_config()"),L4t.forEach(t),Q4r=r(RK,` class
method.`),RK.forEach(t),W4r=i(Tl),K8=n(Tl,"P",{});var sNe=s(K8);H4r=r(sNe,"This class cannot be instantiated directly using "),a4e=n(sNe,"CODE",{});var x4t=s(a4e);U4r=r(x4t,"__init__()"),x4t.forEach(t),J4r=r(sNe," (throws an error)."),sNe.forEach(t),Y4r=i(Tl),kt=n(Tl,"DIV",{class:!0});var zA=s(kt);T(Z8.$$.fragment,zA),K4r=i(zA),n4e=n(zA,"P",{});var $4t=s(n4e);Z4r=r($4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$4t.forEach(t),e2r=i(zA),ac=n(zA,"P",{});var BK=s(ac);o2r=r(BK,`Note:
Loading a model from its configuration file does `),s4e=n(BK,"STRONG",{});var k4t=s(s4e);r2r=r(k4t,"not"),k4t.forEach(t),t2r=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(BK,"A",{href:!0});var S4t=s(GW);a2r=r(S4t,"from_pretrained()"),S4t.forEach(t),n2r=r(BK," to load the model weights."),BK.forEach(t),s2r=i(zA),T(LM.$$.fragment,zA),zA.forEach(t),l2r=i(Tl),Sr=n(Tl,"DIV",{class:!0});var Ml=s(Sr);T(e7.$$.fragment,Ml),i2r=i(Ml),l4e=n(Ml,"P",{});var R4t=s(l4e);d2r=r(R4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),R4t.forEach(t),c2r=i(Ml),tn=n(Ml,"P",{});var QA=s(tn);f2r=r(QA,"The model class to instantiate is selected based on the "),i4e=n(QA,"CODE",{});var B4t=s(i4e);m2r=r(B4t,"model_type"),B4t.forEach(t),g2r=r(QA,` property of the config object (either
passed as an argument or loaded from `),d4e=n(QA,"CODE",{});var P4t=s(d4e);h2r=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),p2r=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c4e=n(QA,"CODE",{});var I4t=s(c4e);u2r=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),_2r=r(QA,":"),QA.forEach(t),b2r=i(Ml),f4e=n(Ml,"UL",{});var q4t=s(f4e);xM=n(q4t,"LI",{});var Hke=s(xM);m4e=n(Hke,"STRONG",{});var N4t=s(m4e);v2r=r(N4t,"tapas"),N4t.forEach(t),F2r=r(Hke," \u2014 "),OW=n(Hke,"A",{href:!0});var j4t=s(OW);T2r=r(j4t,"TFTapasForQuestionAnswering"),j4t.forEach(t),M2r=r(Hke," (TAPAS model)"),Hke.forEach(t),q4t.forEach(t),E2r=i(Ml),T($M.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),tIe=i(f),nc=n(f,"H2",{class:!0});var lNe=s(nc);kM=n(lNe,"A",{id:!0,class:!0,href:!0});var D4t=s(kM);g4e=n(D4t,"SPAN",{});var G4t=s(g4e);T(o7.$$.fragment,G4t),G4t.forEach(t),D4t.forEach(t),C2r=i(lNe),h4e=n(lNe,"SPAN",{});var O4t=s(h4e);w2r=r(O4t,"TFAutoModelForTokenClassification"),O4t.forEach(t),lNe.forEach(t),aIe=i(f),sr=n(f,"DIV",{class:!0});var El=s(sr);T(r7.$$.fragment,El),A2r=i(El),sc=n(El,"P",{});var PK=s(sc);y2r=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),VW=n(PK,"A",{href:!0});var V4t=s(VW);L2r=r(V4t,"from_pretrained()"),V4t.forEach(t),x2r=r(PK," class method or the "),XW=n(PK,"A",{href:!0});var X4t=s(XW);$2r=r(X4t,"from_config()"),X4t.forEach(t),k2r=r(PK,` class
method.`),PK.forEach(t),S2r=i(El),t7=n(El,"P",{});var iNe=s(t7);R2r=r(iNe,"This class cannot be instantiated directly using "),p4e=n(iNe,"CODE",{});var z4t=s(p4e);B2r=r(z4t,"__init__()"),z4t.forEach(t),P2r=r(iNe," (throws an error)."),iNe.forEach(t),I2r=i(El),St=n(El,"DIV",{class:!0});var WA=s(St);T(a7.$$.fragment,WA),q2r=i(WA),u4e=n(WA,"P",{});var Q4t=s(u4e);N2r=r(Q4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Q4t.forEach(t),j2r=i(WA),lc=n(WA,"P",{});var IK=s(lc);D2r=r(IK,`Note:
Loading a model from its configuration file does `),_4e=n(IK,"STRONG",{});var W4t=s(_4e);G2r=r(W4t,"not"),W4t.forEach(t),O2r=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(IK,"A",{href:!0});var H4t=s(zW);V2r=r(H4t,"from_pretrained()"),H4t.forEach(t),X2r=r(IK," to load the model weights."),IK.forEach(t),z2r=i(WA),T(SM.$$.fragment,WA),WA.forEach(t),Q2r=i(El),Rr=n(El,"DIV",{class:!0});var Cl=s(Rr);T(n7.$$.fragment,Cl),W2r=i(Cl),b4e=n(Cl,"P",{});var U4t=s(b4e);H2r=r(U4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U4t.forEach(t),U2r=i(Cl),an=n(Cl,"P",{});var HA=s(an);J2r=r(HA,"The model class to instantiate is selected based on the "),v4e=n(HA,"CODE",{});var J4t=s(v4e);Y2r=r(J4t,"model_type"),J4t.forEach(t),K2r=r(HA,` property of the config object (either
passed as an argument or loaded from `),F4e=n(HA,"CODE",{});var Y4t=s(F4e);Z2r=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),e5r=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(HA,"CODE",{});var K4t=s(T4e);o5r=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),r5r=r(HA,":"),HA.forEach(t),t5r=i(Cl),de=n(Cl,"UL",{});var me=s(de);RM=n(me,"LI",{});var Uke=s(RM);M4e=n(Uke,"STRONG",{});var Z4t=s(M4e);a5r=r(Z4t,"albert"),Z4t.forEach(t),n5r=r(Uke," \u2014 "),QW=n(Uke,"A",{href:!0});var e2t=s(QW);s5r=r(e2t,"TFAlbertForTokenClassification"),e2t.forEach(t),l5r=r(Uke," (ALBERT model)"),Uke.forEach(t),i5r=i(me),BM=n(me,"LI",{});var Jke=s(BM);E4e=n(Jke,"STRONG",{});var o2t=s(E4e);d5r=r(o2t,"bert"),o2t.forEach(t),c5r=r(Jke," \u2014 "),WW=n(Jke,"A",{href:!0});var r2t=s(WW);f5r=r(r2t,"TFBertForTokenClassification"),r2t.forEach(t),m5r=r(Jke," (BERT model)"),Jke.forEach(t),g5r=i(me),PM=n(me,"LI",{});var Yke=s(PM);C4e=n(Yke,"STRONG",{});var t2t=s(C4e);h5r=r(t2t,"camembert"),t2t.forEach(t),p5r=r(Yke," \u2014 "),HW=n(Yke,"A",{href:!0});var a2t=s(HW);u5r=r(a2t,"TFCamembertForTokenClassification"),a2t.forEach(t),_5r=r(Yke," (CamemBERT model)"),Yke.forEach(t),b5r=i(me),IM=n(me,"LI",{});var Kke=s(IM);w4e=n(Kke,"STRONG",{});var n2t=s(w4e);v5r=r(n2t,"convbert"),n2t.forEach(t),F5r=r(Kke," \u2014 "),UW=n(Kke,"A",{href:!0});var s2t=s(UW);T5r=r(s2t,"TFConvBertForTokenClassification"),s2t.forEach(t),M5r=r(Kke," (ConvBERT model)"),Kke.forEach(t),E5r=i(me),qM=n(me,"LI",{});var Zke=s(qM);A4e=n(Zke,"STRONG",{});var l2t=s(A4e);C5r=r(l2t,"deberta"),l2t.forEach(t),w5r=r(Zke," \u2014 "),JW=n(Zke,"A",{href:!0});var i2t=s(JW);A5r=r(i2t,"TFDebertaForTokenClassification"),i2t.forEach(t),y5r=r(Zke," (DeBERTa model)"),Zke.forEach(t),L5r=i(me),NM=n(me,"LI",{});var eSe=s(NM);y4e=n(eSe,"STRONG",{});var d2t=s(y4e);x5r=r(d2t,"deberta-v2"),d2t.forEach(t),$5r=r(eSe," \u2014 "),YW=n(eSe,"A",{href:!0});var c2t=s(YW);k5r=r(c2t,"TFDebertaV2ForTokenClassification"),c2t.forEach(t),S5r=r(eSe," (DeBERTa-v2 model)"),eSe.forEach(t),R5r=i(me),jM=n(me,"LI",{});var oSe=s(jM);L4e=n(oSe,"STRONG",{});var f2t=s(L4e);B5r=r(f2t,"distilbert"),f2t.forEach(t),P5r=r(oSe," \u2014 "),KW=n(oSe,"A",{href:!0});var m2t=s(KW);I5r=r(m2t,"TFDistilBertForTokenClassification"),m2t.forEach(t),q5r=r(oSe," (DistilBERT model)"),oSe.forEach(t),N5r=i(me),DM=n(me,"LI",{});var rSe=s(DM);x4e=n(rSe,"STRONG",{});var g2t=s(x4e);j5r=r(g2t,"electra"),g2t.forEach(t),D5r=r(rSe," \u2014 "),ZW=n(rSe,"A",{href:!0});var h2t=s(ZW);G5r=r(h2t,"TFElectraForTokenClassification"),h2t.forEach(t),O5r=r(rSe," (ELECTRA model)"),rSe.forEach(t),V5r=i(me),GM=n(me,"LI",{});var tSe=s(GM);$4e=n(tSe,"STRONG",{});var p2t=s($4e);X5r=r(p2t,"flaubert"),p2t.forEach(t),z5r=r(tSe," \u2014 "),eH=n(tSe,"A",{href:!0});var u2t=s(eH);Q5r=r(u2t,"TFFlaubertForTokenClassification"),u2t.forEach(t),W5r=r(tSe," (FlauBERT model)"),tSe.forEach(t),H5r=i(me),OM=n(me,"LI",{});var aSe=s(OM);k4e=n(aSe,"STRONG",{});var _2t=s(k4e);U5r=r(_2t,"funnel"),_2t.forEach(t),J5r=r(aSe," \u2014 "),oH=n(aSe,"A",{href:!0});var b2t=s(oH);Y5r=r(b2t,"TFFunnelForTokenClassification"),b2t.forEach(t),K5r=r(aSe," (Funnel Transformer model)"),aSe.forEach(t),Z5r=i(me),VM=n(me,"LI",{});var nSe=s(VM);S4e=n(nSe,"STRONG",{});var v2t=s(S4e);evr=r(v2t,"layoutlm"),v2t.forEach(t),ovr=r(nSe," \u2014 "),rH=n(nSe,"A",{href:!0});var F2t=s(rH);rvr=r(F2t,"TFLayoutLMForTokenClassification"),F2t.forEach(t),tvr=r(nSe," (LayoutLM model)"),nSe.forEach(t),avr=i(me),XM=n(me,"LI",{});var sSe=s(XM);R4e=n(sSe,"STRONG",{});var T2t=s(R4e);nvr=r(T2t,"longformer"),T2t.forEach(t),svr=r(sSe," \u2014 "),tH=n(sSe,"A",{href:!0});var M2t=s(tH);lvr=r(M2t,"TFLongformerForTokenClassification"),M2t.forEach(t),ivr=r(sSe," (Longformer model)"),sSe.forEach(t),dvr=i(me),zM=n(me,"LI",{});var lSe=s(zM);B4e=n(lSe,"STRONG",{});var E2t=s(B4e);cvr=r(E2t,"mobilebert"),E2t.forEach(t),fvr=r(lSe," \u2014 "),aH=n(lSe,"A",{href:!0});var C2t=s(aH);mvr=r(C2t,"TFMobileBertForTokenClassification"),C2t.forEach(t),gvr=r(lSe," (MobileBERT model)"),lSe.forEach(t),hvr=i(me),QM=n(me,"LI",{});var iSe=s(QM);P4e=n(iSe,"STRONG",{});var w2t=s(P4e);pvr=r(w2t,"mpnet"),w2t.forEach(t),uvr=r(iSe," \u2014 "),nH=n(iSe,"A",{href:!0});var A2t=s(nH);_vr=r(A2t,"TFMPNetForTokenClassification"),A2t.forEach(t),bvr=r(iSe," (MPNet model)"),iSe.forEach(t),vvr=i(me),WM=n(me,"LI",{});var dSe=s(WM);I4e=n(dSe,"STRONG",{});var y2t=s(I4e);Fvr=r(y2t,"rembert"),y2t.forEach(t),Tvr=r(dSe," \u2014 "),sH=n(dSe,"A",{href:!0});var L2t=s(sH);Mvr=r(L2t,"TFRemBertForTokenClassification"),L2t.forEach(t),Evr=r(dSe," (RemBERT model)"),dSe.forEach(t),Cvr=i(me),HM=n(me,"LI",{});var cSe=s(HM);q4e=n(cSe,"STRONG",{});var x2t=s(q4e);wvr=r(x2t,"roberta"),x2t.forEach(t),Avr=r(cSe," \u2014 "),lH=n(cSe,"A",{href:!0});var $2t=s(lH);yvr=r($2t,"TFRobertaForTokenClassification"),$2t.forEach(t),Lvr=r(cSe," (RoBERTa model)"),cSe.forEach(t),xvr=i(me),UM=n(me,"LI",{});var fSe=s(UM);N4e=n(fSe,"STRONG",{});var k2t=s(N4e);$vr=r(k2t,"roformer"),k2t.forEach(t),kvr=r(fSe," \u2014 "),iH=n(fSe,"A",{href:!0});var S2t=s(iH);Svr=r(S2t,"TFRoFormerForTokenClassification"),S2t.forEach(t),Rvr=r(fSe," (RoFormer model)"),fSe.forEach(t),Bvr=i(me),JM=n(me,"LI",{});var mSe=s(JM);j4e=n(mSe,"STRONG",{});var R2t=s(j4e);Pvr=r(R2t,"xlm"),R2t.forEach(t),Ivr=r(mSe," \u2014 "),dH=n(mSe,"A",{href:!0});var B2t=s(dH);qvr=r(B2t,"TFXLMForTokenClassification"),B2t.forEach(t),Nvr=r(mSe," (XLM model)"),mSe.forEach(t),jvr=i(me),YM=n(me,"LI",{});var gSe=s(YM);D4e=n(gSe,"STRONG",{});var P2t=s(D4e);Dvr=r(P2t,"xlm-roberta"),P2t.forEach(t),Gvr=r(gSe," \u2014 "),cH=n(gSe,"A",{href:!0});var I2t=s(cH);Ovr=r(I2t,"TFXLMRobertaForTokenClassification"),I2t.forEach(t),Vvr=r(gSe," (XLM-RoBERTa model)"),gSe.forEach(t),Xvr=i(me),KM=n(me,"LI",{});var hSe=s(KM);G4e=n(hSe,"STRONG",{});var q2t=s(G4e);zvr=r(q2t,"xlnet"),q2t.forEach(t),Qvr=r(hSe," \u2014 "),fH=n(hSe,"A",{href:!0});var N2t=s(fH);Wvr=r(N2t,"TFXLNetForTokenClassification"),N2t.forEach(t),Hvr=r(hSe," (XLNet model)"),hSe.forEach(t),me.forEach(t),Uvr=i(Cl),T(ZM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),nIe=i(f),ic=n(f,"H2",{class:!0});var dNe=s(ic);eE=n(dNe,"A",{id:!0,class:!0,href:!0});var j2t=s(eE);O4e=n(j2t,"SPAN",{});var D2t=s(O4e);T(s7.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),Jvr=i(dNe),V4e=n(dNe,"SPAN",{});var G2t=s(V4e);Yvr=r(G2t,"TFAutoModelForQuestionAnswering"),G2t.forEach(t),dNe.forEach(t),sIe=i(f),lr=n(f,"DIV",{class:!0});var wl=s(lr);T(l7.$$.fragment,wl),Kvr=i(wl),dc=n(wl,"P",{});var qK=s(dc);Zvr=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mH=n(qK,"A",{href:!0});var O2t=s(mH);eFr=r(O2t,"from_pretrained()"),O2t.forEach(t),oFr=r(qK," class method or the "),gH=n(qK,"A",{href:!0});var V2t=s(gH);rFr=r(V2t,"from_config()"),V2t.forEach(t),tFr=r(qK,` class
method.`),qK.forEach(t),aFr=i(wl),i7=n(wl,"P",{});var cNe=s(i7);nFr=r(cNe,"This class cannot be instantiated directly using "),X4e=n(cNe,"CODE",{});var X2t=s(X4e);sFr=r(X2t,"__init__()"),X2t.forEach(t),lFr=r(cNe," (throws an error)."),cNe.forEach(t),iFr=i(wl),Rt=n(wl,"DIV",{class:!0});var UA=s(Rt);T(d7.$$.fragment,UA),dFr=i(UA),z4e=n(UA,"P",{});var z2t=s(z4e);cFr=r(z2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z2t.forEach(t),fFr=i(UA),cc=n(UA,"P",{});var NK=s(cc);mFr=r(NK,`Note:
Loading a model from its configuration file does `),Q4e=n(NK,"STRONG",{});var Q2t=s(Q4e);gFr=r(Q2t,"not"),Q2t.forEach(t),hFr=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(NK,"A",{href:!0});var W2t=s(hH);pFr=r(W2t,"from_pretrained()"),W2t.forEach(t),uFr=r(NK," to load the model weights."),NK.forEach(t),_Fr=i(UA),T(oE.$$.fragment,UA),UA.forEach(t),bFr=i(wl),Br=n(wl,"DIV",{class:!0});var Al=s(Br);T(c7.$$.fragment,Al),vFr=i(Al),W4e=n(Al,"P",{});var H2t=s(W4e);FFr=r(H2t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),H2t.forEach(t),TFr=i(Al),nn=n(Al,"P",{});var JA=s(nn);MFr=r(JA,"The model class to instantiate is selected based on the "),H4e=n(JA,"CODE",{});var U2t=s(H4e);EFr=r(U2t,"model_type"),U2t.forEach(t),CFr=r(JA,` property of the config object (either
passed as an argument or loaded from `),U4e=n(JA,"CODE",{});var J2t=s(U4e);wFr=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),AFr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(JA,"CODE",{});var Y2t=s(J4e);yFr=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),LFr=r(JA,":"),JA.forEach(t),xFr=i(Al),ce=n(Al,"UL",{});var ge=s(ce);rE=n(ge,"LI",{});var pSe=s(rE);Y4e=n(pSe,"STRONG",{});var K2t=s(Y4e);$Fr=r(K2t,"albert"),K2t.forEach(t),kFr=r(pSe," \u2014 "),pH=n(pSe,"A",{href:!0});var Z2t=s(pH);SFr=r(Z2t,"TFAlbertForQuestionAnswering"),Z2t.forEach(t),RFr=r(pSe," (ALBERT model)"),pSe.forEach(t),BFr=i(ge),tE=n(ge,"LI",{});var uSe=s(tE);K4e=n(uSe,"STRONG",{});var e5t=s(K4e);PFr=r(e5t,"bert"),e5t.forEach(t),IFr=r(uSe," \u2014 "),uH=n(uSe,"A",{href:!0});var o5t=s(uH);qFr=r(o5t,"TFBertForQuestionAnswering"),o5t.forEach(t),NFr=r(uSe," (BERT model)"),uSe.forEach(t),jFr=i(ge),aE=n(ge,"LI",{});var _Se=s(aE);Z4e=n(_Se,"STRONG",{});var r5t=s(Z4e);DFr=r(r5t,"camembert"),r5t.forEach(t),GFr=r(_Se," \u2014 "),_H=n(_Se,"A",{href:!0});var t5t=s(_H);OFr=r(t5t,"TFCamembertForQuestionAnswering"),t5t.forEach(t),VFr=r(_Se," (CamemBERT model)"),_Se.forEach(t),XFr=i(ge),nE=n(ge,"LI",{});var bSe=s(nE);e2e=n(bSe,"STRONG",{});var a5t=s(e2e);zFr=r(a5t,"convbert"),a5t.forEach(t),QFr=r(bSe," \u2014 "),bH=n(bSe,"A",{href:!0});var n5t=s(bH);WFr=r(n5t,"TFConvBertForQuestionAnswering"),n5t.forEach(t),HFr=r(bSe," (ConvBERT model)"),bSe.forEach(t),UFr=i(ge),sE=n(ge,"LI",{});var vSe=s(sE);o2e=n(vSe,"STRONG",{});var s5t=s(o2e);JFr=r(s5t,"deberta"),s5t.forEach(t),YFr=r(vSe," \u2014 "),vH=n(vSe,"A",{href:!0});var l5t=s(vH);KFr=r(l5t,"TFDebertaForQuestionAnswering"),l5t.forEach(t),ZFr=r(vSe," (DeBERTa model)"),vSe.forEach(t),eTr=i(ge),lE=n(ge,"LI",{});var FSe=s(lE);r2e=n(FSe,"STRONG",{});var i5t=s(r2e);oTr=r(i5t,"deberta-v2"),i5t.forEach(t),rTr=r(FSe," \u2014 "),FH=n(FSe,"A",{href:!0});var d5t=s(FH);tTr=r(d5t,"TFDebertaV2ForQuestionAnswering"),d5t.forEach(t),aTr=r(FSe," (DeBERTa-v2 model)"),FSe.forEach(t),nTr=i(ge),iE=n(ge,"LI",{});var TSe=s(iE);t2e=n(TSe,"STRONG",{});var c5t=s(t2e);sTr=r(c5t,"distilbert"),c5t.forEach(t),lTr=r(TSe," \u2014 "),TH=n(TSe,"A",{href:!0});var f5t=s(TH);iTr=r(f5t,"TFDistilBertForQuestionAnswering"),f5t.forEach(t),dTr=r(TSe," (DistilBERT model)"),TSe.forEach(t),cTr=i(ge),dE=n(ge,"LI",{});var MSe=s(dE);a2e=n(MSe,"STRONG",{});var m5t=s(a2e);fTr=r(m5t,"electra"),m5t.forEach(t),mTr=r(MSe," \u2014 "),MH=n(MSe,"A",{href:!0});var g5t=s(MH);gTr=r(g5t,"TFElectraForQuestionAnswering"),g5t.forEach(t),hTr=r(MSe," (ELECTRA model)"),MSe.forEach(t),pTr=i(ge),cE=n(ge,"LI",{});var ESe=s(cE);n2e=n(ESe,"STRONG",{});var h5t=s(n2e);uTr=r(h5t,"flaubert"),h5t.forEach(t),_Tr=r(ESe," \u2014 "),EH=n(ESe,"A",{href:!0});var p5t=s(EH);bTr=r(p5t,"TFFlaubertForQuestionAnsweringSimple"),p5t.forEach(t),vTr=r(ESe," (FlauBERT model)"),ESe.forEach(t),FTr=i(ge),fE=n(ge,"LI",{});var CSe=s(fE);s2e=n(CSe,"STRONG",{});var u5t=s(s2e);TTr=r(u5t,"funnel"),u5t.forEach(t),MTr=r(CSe," \u2014 "),CH=n(CSe,"A",{href:!0});var _5t=s(CH);ETr=r(_5t,"TFFunnelForQuestionAnswering"),_5t.forEach(t),CTr=r(CSe," (Funnel Transformer model)"),CSe.forEach(t),wTr=i(ge),mE=n(ge,"LI",{});var wSe=s(mE);l2e=n(wSe,"STRONG",{});var b5t=s(l2e);ATr=r(b5t,"gptj"),b5t.forEach(t),yTr=r(wSe," \u2014 "),wH=n(wSe,"A",{href:!0});var v5t=s(wH);LTr=r(v5t,"TFGPTJForQuestionAnswering"),v5t.forEach(t),xTr=r(wSe," (GPT-J model)"),wSe.forEach(t),$Tr=i(ge),gE=n(ge,"LI",{});var ASe=s(gE);i2e=n(ASe,"STRONG",{});var F5t=s(i2e);kTr=r(F5t,"longformer"),F5t.forEach(t),STr=r(ASe," \u2014 "),AH=n(ASe,"A",{href:!0});var T5t=s(AH);RTr=r(T5t,"TFLongformerForQuestionAnswering"),T5t.forEach(t),BTr=r(ASe," (Longformer model)"),ASe.forEach(t),PTr=i(ge),hE=n(ge,"LI",{});var ySe=s(hE);d2e=n(ySe,"STRONG",{});var M5t=s(d2e);ITr=r(M5t,"mobilebert"),M5t.forEach(t),qTr=r(ySe," \u2014 "),yH=n(ySe,"A",{href:!0});var E5t=s(yH);NTr=r(E5t,"TFMobileBertForQuestionAnswering"),E5t.forEach(t),jTr=r(ySe," (MobileBERT model)"),ySe.forEach(t),DTr=i(ge),pE=n(ge,"LI",{});var LSe=s(pE);c2e=n(LSe,"STRONG",{});var C5t=s(c2e);GTr=r(C5t,"mpnet"),C5t.forEach(t),OTr=r(LSe," \u2014 "),LH=n(LSe,"A",{href:!0});var w5t=s(LH);VTr=r(w5t,"TFMPNetForQuestionAnswering"),w5t.forEach(t),XTr=r(LSe," (MPNet model)"),LSe.forEach(t),zTr=i(ge),uE=n(ge,"LI",{});var xSe=s(uE);f2e=n(xSe,"STRONG",{});var A5t=s(f2e);QTr=r(A5t,"rembert"),A5t.forEach(t),WTr=r(xSe," \u2014 "),xH=n(xSe,"A",{href:!0});var y5t=s(xH);HTr=r(y5t,"TFRemBertForQuestionAnswering"),y5t.forEach(t),UTr=r(xSe," (RemBERT model)"),xSe.forEach(t),JTr=i(ge),_E=n(ge,"LI",{});var $Se=s(_E);m2e=n($Se,"STRONG",{});var L5t=s(m2e);YTr=r(L5t,"roberta"),L5t.forEach(t),KTr=r($Se," \u2014 "),$H=n($Se,"A",{href:!0});var x5t=s($H);ZTr=r(x5t,"TFRobertaForQuestionAnswering"),x5t.forEach(t),eMr=r($Se," (RoBERTa model)"),$Se.forEach(t),oMr=i(ge),bE=n(ge,"LI",{});var kSe=s(bE);g2e=n(kSe,"STRONG",{});var $5t=s(g2e);rMr=r($5t,"roformer"),$5t.forEach(t),tMr=r(kSe," \u2014 "),kH=n(kSe,"A",{href:!0});var k5t=s(kH);aMr=r(k5t,"TFRoFormerForQuestionAnswering"),k5t.forEach(t),nMr=r(kSe," (RoFormer model)"),kSe.forEach(t),sMr=i(ge),vE=n(ge,"LI",{});var SSe=s(vE);h2e=n(SSe,"STRONG",{});var S5t=s(h2e);lMr=r(S5t,"xlm"),S5t.forEach(t),iMr=r(SSe," \u2014 "),SH=n(SSe,"A",{href:!0});var R5t=s(SH);dMr=r(R5t,"TFXLMForQuestionAnsweringSimple"),R5t.forEach(t),cMr=r(SSe," (XLM model)"),SSe.forEach(t),fMr=i(ge),FE=n(ge,"LI",{});var RSe=s(FE);p2e=n(RSe,"STRONG",{});var B5t=s(p2e);mMr=r(B5t,"xlm-roberta"),B5t.forEach(t),gMr=r(RSe," \u2014 "),RH=n(RSe,"A",{href:!0});var P5t=s(RH);hMr=r(P5t,"TFXLMRobertaForQuestionAnswering"),P5t.forEach(t),pMr=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),uMr=i(ge),TE=n(ge,"LI",{});var BSe=s(TE);u2e=n(BSe,"STRONG",{});var I5t=s(u2e);_Mr=r(I5t,"xlnet"),I5t.forEach(t),bMr=r(BSe," \u2014 "),BH=n(BSe,"A",{href:!0});var q5t=s(BH);vMr=r(q5t,"TFXLNetForQuestionAnsweringSimple"),q5t.forEach(t),FMr=r(BSe," (XLNet model)"),BSe.forEach(t),ge.forEach(t),TMr=i(Al),T(ME.$$.fragment,Al),Al.forEach(t),wl.forEach(t),lIe=i(f),fc=n(f,"H2",{class:!0});var fNe=s(fc);EE=n(fNe,"A",{id:!0,class:!0,href:!0});var N5t=s(EE);_2e=n(N5t,"SPAN",{});var j5t=s(_2e);T(f7.$$.fragment,j5t),j5t.forEach(t),N5t.forEach(t),MMr=i(fNe),b2e=n(fNe,"SPAN",{});var D5t=s(b2e);EMr=r(D5t,"TFAutoModelForVision2Seq"),D5t.forEach(t),fNe.forEach(t),iIe=i(f),ir=n(f,"DIV",{class:!0});var yl=s(ir);T(m7.$$.fragment,yl),CMr=i(yl),mc=n(yl,"P",{});var jK=s(mc);wMr=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PH=n(jK,"A",{href:!0});var G5t=s(PH);AMr=r(G5t,"from_pretrained()"),G5t.forEach(t),yMr=r(jK," class method or the "),IH=n(jK,"A",{href:!0});var O5t=s(IH);LMr=r(O5t,"from_config()"),O5t.forEach(t),xMr=r(jK,` class
method.`),jK.forEach(t),$Mr=i(yl),g7=n(yl,"P",{});var mNe=s(g7);kMr=r(mNe,"This class cannot be instantiated directly using "),v2e=n(mNe,"CODE",{});var V5t=s(v2e);SMr=r(V5t,"__init__()"),V5t.forEach(t),RMr=r(mNe," (throws an error)."),mNe.forEach(t),BMr=i(yl),Bt=n(yl,"DIV",{class:!0});var YA=s(Bt);T(h7.$$.fragment,YA),PMr=i(YA),F2e=n(YA,"P",{});var X5t=s(F2e);IMr=r(X5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),X5t.forEach(t),qMr=i(YA),gc=n(YA,"P",{});var DK=s(gc);NMr=r(DK,`Note:
Loading a model from its configuration file does `),T2e=n(DK,"STRONG",{});var z5t=s(T2e);jMr=r(z5t,"not"),z5t.forEach(t),DMr=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(DK,"A",{href:!0});var Q5t=s(qH);GMr=r(Q5t,"from_pretrained()"),Q5t.forEach(t),OMr=r(DK," to load the model weights."),DK.forEach(t),VMr=i(YA),T(CE.$$.fragment,YA),YA.forEach(t),XMr=i(yl),Pr=n(yl,"DIV",{class:!0});var Ll=s(Pr);T(p7.$$.fragment,Ll),zMr=i(Ll),M2e=n(Ll,"P",{});var W5t=s(M2e);QMr=r(W5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),W5t.forEach(t),WMr=i(Ll),sn=n(Ll,"P",{});var KA=s(sn);HMr=r(KA,"The model class to instantiate is selected based on the "),E2e=n(KA,"CODE",{});var H5t=s(E2e);UMr=r(H5t,"model_type"),H5t.forEach(t),JMr=r(KA,` property of the config object (either
passed as an argument or loaded from `),C2e=n(KA,"CODE",{});var U5t=s(C2e);YMr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),KMr=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w2e=n(KA,"CODE",{});var J5t=s(w2e);ZMr=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),eEr=r(KA,":"),KA.forEach(t),oEr=i(Ll),A2e=n(Ll,"UL",{});var Y5t=s(A2e);wE=n(Y5t,"LI",{});var PSe=s(wE);y2e=n(PSe,"STRONG",{});var K5t=s(y2e);rEr=r(K5t,"vision-encoder-decoder"),K5t.forEach(t),tEr=r(PSe," \u2014 "),NH=n(PSe,"A",{href:!0});var Z5t=s(NH);aEr=r(Z5t,"TFVisionEncoderDecoderModel"),Z5t.forEach(t),nEr=r(PSe," (Vision Encoder decoder model)"),PSe.forEach(t),Y5t.forEach(t),sEr=i(Ll),T(AE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),dIe=i(f),hc=n(f,"H2",{class:!0});var gNe=s(hc);yE=n(gNe,"A",{id:!0,class:!0,href:!0});var evt=s(yE);L2e=n(evt,"SPAN",{});var ovt=s(L2e);T(u7.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),lEr=i(gNe),x2e=n(gNe,"SPAN",{});var rvt=s(x2e);iEr=r(rvt,"TFAutoModelForSpeechSeq2Seq"),rvt.forEach(t),gNe.forEach(t),cIe=i(f),dr=n(f,"DIV",{class:!0});var xl=s(dr);T(_7.$$.fragment,xl),dEr=i(xl),pc=n(xl,"P",{});var GK=s(pc);cEr=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jH=n(GK,"A",{href:!0});var tvt=s(jH);fEr=r(tvt,"from_pretrained()"),tvt.forEach(t),mEr=r(GK," class method or the "),DH=n(GK,"A",{href:!0});var avt=s(DH);gEr=r(avt,"from_config()"),avt.forEach(t),hEr=r(GK,` class
method.`),GK.forEach(t),pEr=i(xl),b7=n(xl,"P",{});var hNe=s(b7);uEr=r(hNe,"This class cannot be instantiated directly using "),$2e=n(hNe,"CODE",{});var nvt=s($2e);_Er=r(nvt,"__init__()"),nvt.forEach(t),bEr=r(hNe," (throws an error)."),hNe.forEach(t),vEr=i(xl),Pt=n(xl,"DIV",{class:!0});var ZA=s(Pt);T(v7.$$.fragment,ZA),FEr=i(ZA),k2e=n(ZA,"P",{});var svt=s(k2e);TEr=r(svt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),svt.forEach(t),MEr=i(ZA),uc=n(ZA,"P",{});var OK=s(uc);EEr=r(OK,`Note:
Loading a model from its configuration file does `),S2e=n(OK,"STRONG",{});var lvt=s(S2e);CEr=r(lvt,"not"),lvt.forEach(t),wEr=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(OK,"A",{href:!0});var ivt=s(GH);AEr=r(ivt,"from_pretrained()"),ivt.forEach(t),yEr=r(OK," to load the model weights."),OK.forEach(t),LEr=i(ZA),T(LE.$$.fragment,ZA),ZA.forEach(t),xEr=i(xl),Ir=n(xl,"DIV",{class:!0});var $l=s(Ir);T(F7.$$.fragment,$l),$Er=i($l),R2e=n($l,"P",{});var dvt=s(R2e);kEr=r(dvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),dvt.forEach(t),SEr=i($l),ln=n($l,"P",{});var e0=s(ln);REr=r(e0,"The model class to instantiate is selected based on the "),B2e=n(e0,"CODE",{});var cvt=s(B2e);BEr=r(cvt,"model_type"),cvt.forEach(t),PEr=r(e0,` property of the config object (either
passed as an argument or loaded from `),P2e=n(e0,"CODE",{});var fvt=s(P2e);IEr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),qEr=r(e0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I2e=n(e0,"CODE",{});var mvt=s(I2e);NEr=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),jEr=r(e0,":"),e0.forEach(t),DEr=i($l),q2e=n($l,"UL",{});var gvt=s(q2e);xE=n(gvt,"LI",{});var ISe=s(xE);N2e=n(ISe,"STRONG",{});var hvt=s(N2e);GEr=r(hvt,"speech_to_text"),hvt.forEach(t),OEr=r(ISe," \u2014 "),OH=n(ISe,"A",{href:!0});var pvt=s(OH);VEr=r(pvt,"TFSpeech2TextForConditionalGeneration"),pvt.forEach(t),XEr=r(ISe," (Speech2Text model)"),ISe.forEach(t),gvt.forEach(t),zEr=i($l),T($E.$$.fragment,$l),$l.forEach(t),xl.forEach(t),fIe=i(f),_c=n(f,"H2",{class:!0});var pNe=s(_c);kE=n(pNe,"A",{id:!0,class:!0,href:!0});var uvt=s(kE);j2e=n(uvt,"SPAN",{});var _vt=s(j2e);T(T7.$$.fragment,_vt),_vt.forEach(t),uvt.forEach(t),QEr=i(pNe),D2e=n(pNe,"SPAN",{});var bvt=s(D2e);WEr=r(bvt,"FlaxAutoModel"),bvt.forEach(t),pNe.forEach(t),mIe=i(f),cr=n(f,"DIV",{class:!0});var kl=s(cr);T(M7.$$.fragment,kl),HEr=i(kl),bc=n(kl,"P",{});var VK=s(bc);UEr=r(VK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VH=n(VK,"A",{href:!0});var vvt=s(VH);JEr=r(vvt,"from_pretrained()"),vvt.forEach(t),YEr=r(VK," class method or the "),XH=n(VK,"A",{href:!0});var Fvt=s(XH);KEr=r(Fvt,"from_config()"),Fvt.forEach(t),ZEr=r(VK,` class
method.`),VK.forEach(t),eCr=i(kl),E7=n(kl,"P",{});var uNe=s(E7);oCr=r(uNe,"This class cannot be instantiated directly using "),G2e=n(uNe,"CODE",{});var Tvt=s(G2e);rCr=r(Tvt,"__init__()"),Tvt.forEach(t),tCr=r(uNe," (throws an error)."),uNe.forEach(t),aCr=i(kl),It=n(kl,"DIV",{class:!0});var o0=s(It);T(C7.$$.fragment,o0),nCr=i(o0),O2e=n(o0,"P",{});var Mvt=s(O2e);sCr=r(Mvt,"Instantiates one of the base model classes of the library from a configuration."),Mvt.forEach(t),lCr=i(o0),vc=n(o0,"P",{});var XK=s(vc);iCr=r(XK,`Note:
Loading a model from its configuration file does `),V2e=n(XK,"STRONG",{});var Evt=s(V2e);dCr=r(Evt,"not"),Evt.forEach(t),cCr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(XK,"A",{href:!0});var Cvt=s(zH);fCr=r(Cvt,"from_pretrained()"),Cvt.forEach(t),mCr=r(XK," to load the model weights."),XK.forEach(t),gCr=i(o0),T(SE.$$.fragment,o0),o0.forEach(t),hCr=i(kl),qr=n(kl,"DIV",{class:!0});var Sl=s(qr);T(w7.$$.fragment,Sl),pCr=i(Sl),X2e=n(Sl,"P",{});var wvt=s(X2e);uCr=r(wvt,"Instantiate one of the base model classes of the library from a pretrained model."),wvt.forEach(t),_Cr=i(Sl),dn=n(Sl,"P",{});var r0=s(dn);bCr=r(r0,"The model class to instantiate is selected based on the "),z2e=n(r0,"CODE",{});var Avt=s(z2e);vCr=r(Avt,"model_type"),Avt.forEach(t),FCr=r(r0,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(r0,"CODE",{});var yvt=s(Q2e);TCr=r(yvt,"pretrained_model_name_or_path"),yvt.forEach(t),MCr=r(r0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(r0,"CODE",{});var Lvt=s(W2e);ECr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),CCr=r(r0,":"),r0.forEach(t),wCr=i(Sl),re=n(Sl,"UL",{});var ne=s(re);RE=n(ne,"LI",{});var qSe=s(RE);H2e=n(qSe,"STRONG",{});var xvt=s(H2e);ACr=r(xvt,"albert"),xvt.forEach(t),yCr=r(qSe," \u2014 "),QH=n(qSe,"A",{href:!0});var $vt=s(QH);LCr=r($vt,"FlaxAlbertModel"),$vt.forEach(t),xCr=r(qSe," (ALBERT model)"),qSe.forEach(t),$Cr=i(ne),BE=n(ne,"LI",{});var NSe=s(BE);U2e=n(NSe,"STRONG",{});var kvt=s(U2e);kCr=r(kvt,"bart"),kvt.forEach(t),SCr=r(NSe," \u2014 "),WH=n(NSe,"A",{href:!0});var Svt=s(WH);RCr=r(Svt,"FlaxBartModel"),Svt.forEach(t),BCr=r(NSe," (BART model)"),NSe.forEach(t),PCr=i(ne),PE=n(ne,"LI",{});var jSe=s(PE);J2e=n(jSe,"STRONG",{});var Rvt=s(J2e);ICr=r(Rvt,"beit"),Rvt.forEach(t),qCr=r(jSe," \u2014 "),HH=n(jSe,"A",{href:!0});var Bvt=s(HH);NCr=r(Bvt,"FlaxBeitModel"),Bvt.forEach(t),jCr=r(jSe," (BEiT model)"),jSe.forEach(t),DCr=i(ne),IE=n(ne,"LI",{});var DSe=s(IE);Y2e=n(DSe,"STRONG",{});var Pvt=s(Y2e);GCr=r(Pvt,"bert"),Pvt.forEach(t),OCr=r(DSe," \u2014 "),UH=n(DSe,"A",{href:!0});var Ivt=s(UH);VCr=r(Ivt,"FlaxBertModel"),Ivt.forEach(t),XCr=r(DSe," (BERT model)"),DSe.forEach(t),zCr=i(ne),qE=n(ne,"LI",{});var GSe=s(qE);K2e=n(GSe,"STRONG",{});var qvt=s(K2e);QCr=r(qvt,"big_bird"),qvt.forEach(t),WCr=r(GSe," \u2014 "),JH=n(GSe,"A",{href:!0});var Nvt=s(JH);HCr=r(Nvt,"FlaxBigBirdModel"),Nvt.forEach(t),UCr=r(GSe," (BigBird model)"),GSe.forEach(t),JCr=i(ne),NE=n(ne,"LI",{});var OSe=s(NE);Z2e=n(OSe,"STRONG",{});var jvt=s(Z2e);YCr=r(jvt,"blenderbot"),jvt.forEach(t),KCr=r(OSe," \u2014 "),YH=n(OSe,"A",{href:!0});var Dvt=s(YH);ZCr=r(Dvt,"FlaxBlenderbotModel"),Dvt.forEach(t),e3r=r(OSe," (Blenderbot model)"),OSe.forEach(t),o3r=i(ne),jE=n(ne,"LI",{});var VSe=s(jE);e5e=n(VSe,"STRONG",{});var Gvt=s(e5e);r3r=r(Gvt,"blenderbot-small"),Gvt.forEach(t),t3r=r(VSe," \u2014 "),KH=n(VSe,"A",{href:!0});var Ovt=s(KH);a3r=r(Ovt,"FlaxBlenderbotSmallModel"),Ovt.forEach(t),n3r=r(VSe," (BlenderbotSmall model)"),VSe.forEach(t),s3r=i(ne),DE=n(ne,"LI",{});var XSe=s(DE);o5e=n(XSe,"STRONG",{});var Vvt=s(o5e);l3r=r(Vvt,"clip"),Vvt.forEach(t),i3r=r(XSe," \u2014 "),ZH=n(XSe,"A",{href:!0});var Xvt=s(ZH);d3r=r(Xvt,"FlaxCLIPModel"),Xvt.forEach(t),c3r=r(XSe," (CLIP model)"),XSe.forEach(t),f3r=i(ne),GE=n(ne,"LI",{});var zSe=s(GE);r5e=n(zSe,"STRONG",{});var zvt=s(r5e);m3r=r(zvt,"distilbert"),zvt.forEach(t),g3r=r(zSe," \u2014 "),eU=n(zSe,"A",{href:!0});var Qvt=s(eU);h3r=r(Qvt,"FlaxDistilBertModel"),Qvt.forEach(t),p3r=r(zSe," (DistilBERT model)"),zSe.forEach(t),u3r=i(ne),OE=n(ne,"LI",{});var QSe=s(OE);t5e=n(QSe,"STRONG",{});var Wvt=s(t5e);_3r=r(Wvt,"electra"),Wvt.forEach(t),b3r=r(QSe," \u2014 "),oU=n(QSe,"A",{href:!0});var Hvt=s(oU);v3r=r(Hvt,"FlaxElectraModel"),Hvt.forEach(t),F3r=r(QSe," (ELECTRA model)"),QSe.forEach(t),T3r=i(ne),VE=n(ne,"LI",{});var WSe=s(VE);a5e=n(WSe,"STRONG",{});var Uvt=s(a5e);M3r=r(Uvt,"gpt2"),Uvt.forEach(t),E3r=r(WSe," \u2014 "),rU=n(WSe,"A",{href:!0});var Jvt=s(rU);C3r=r(Jvt,"FlaxGPT2Model"),Jvt.forEach(t),w3r=r(WSe," (OpenAI GPT-2 model)"),WSe.forEach(t),A3r=i(ne),XE=n(ne,"LI",{});var HSe=s(XE);n5e=n(HSe,"STRONG",{});var Yvt=s(n5e);y3r=r(Yvt,"gpt_neo"),Yvt.forEach(t),L3r=r(HSe," \u2014 "),tU=n(HSe,"A",{href:!0});var Kvt=s(tU);x3r=r(Kvt,"FlaxGPTNeoModel"),Kvt.forEach(t),$3r=r(HSe," (GPT Neo model)"),HSe.forEach(t),k3r=i(ne),zE=n(ne,"LI",{});var USe=s(zE);s5e=n(USe,"STRONG",{});var Zvt=s(s5e);S3r=r(Zvt,"gptj"),Zvt.forEach(t),R3r=r(USe," \u2014 "),aU=n(USe,"A",{href:!0});var eFt=s(aU);B3r=r(eFt,"FlaxGPTJModel"),eFt.forEach(t),P3r=r(USe," (GPT-J model)"),USe.forEach(t),I3r=i(ne),QE=n(ne,"LI",{});var JSe=s(QE);l5e=n(JSe,"STRONG",{});var oFt=s(l5e);q3r=r(oFt,"marian"),oFt.forEach(t),N3r=r(JSe," \u2014 "),nU=n(JSe,"A",{href:!0});var rFt=s(nU);j3r=r(rFt,"FlaxMarianModel"),rFt.forEach(t),D3r=r(JSe," (Marian model)"),JSe.forEach(t),G3r=i(ne),WE=n(ne,"LI",{});var YSe=s(WE);i5e=n(YSe,"STRONG",{});var tFt=s(i5e);O3r=r(tFt,"mbart"),tFt.forEach(t),V3r=r(YSe," \u2014 "),sU=n(YSe,"A",{href:!0});var aFt=s(sU);X3r=r(aFt,"FlaxMBartModel"),aFt.forEach(t),z3r=r(YSe," (mBART model)"),YSe.forEach(t),Q3r=i(ne),HE=n(ne,"LI",{});var KSe=s(HE);d5e=n(KSe,"STRONG",{});var nFt=s(d5e);W3r=r(nFt,"mt5"),nFt.forEach(t),H3r=r(KSe," \u2014 "),lU=n(KSe,"A",{href:!0});var sFt=s(lU);U3r=r(sFt,"FlaxMT5Model"),sFt.forEach(t),J3r=r(KSe," (mT5 model)"),KSe.forEach(t),Y3r=i(ne),UE=n(ne,"LI",{});var ZSe=s(UE);c5e=n(ZSe,"STRONG",{});var lFt=s(c5e);K3r=r(lFt,"pegasus"),lFt.forEach(t),Z3r=r(ZSe," \u2014 "),iU=n(ZSe,"A",{href:!0});var iFt=s(iU);ewr=r(iFt,"FlaxPegasusModel"),iFt.forEach(t),owr=r(ZSe," (Pegasus model)"),ZSe.forEach(t),rwr=i(ne),JE=n(ne,"LI",{});var eRe=s(JE);f5e=n(eRe,"STRONG",{});var dFt=s(f5e);twr=r(dFt,"roberta"),dFt.forEach(t),awr=r(eRe," \u2014 "),dU=n(eRe,"A",{href:!0});var cFt=s(dU);nwr=r(cFt,"FlaxRobertaModel"),cFt.forEach(t),swr=r(eRe," (RoBERTa model)"),eRe.forEach(t),lwr=i(ne),YE=n(ne,"LI",{});var oRe=s(YE);m5e=n(oRe,"STRONG",{});var fFt=s(m5e);iwr=r(fFt,"roformer"),fFt.forEach(t),dwr=r(oRe," \u2014 "),cU=n(oRe,"A",{href:!0});var mFt=s(cU);cwr=r(mFt,"FlaxRoFormerModel"),mFt.forEach(t),fwr=r(oRe," (RoFormer model)"),oRe.forEach(t),mwr=i(ne),KE=n(ne,"LI",{});var rRe=s(KE);g5e=n(rRe,"STRONG",{});var gFt=s(g5e);gwr=r(gFt,"t5"),gFt.forEach(t),hwr=r(rRe," \u2014 "),fU=n(rRe,"A",{href:!0});var hFt=s(fU);pwr=r(hFt,"FlaxT5Model"),hFt.forEach(t),uwr=r(rRe," (T5 model)"),rRe.forEach(t),_wr=i(ne),ZE=n(ne,"LI",{});var tRe=s(ZE);h5e=n(tRe,"STRONG",{});var pFt=s(h5e);bwr=r(pFt,"vision-text-dual-encoder"),pFt.forEach(t),vwr=r(tRe," \u2014 "),mU=n(tRe,"A",{href:!0});var uFt=s(mU);Fwr=r(uFt,"FlaxVisionTextDualEncoderModel"),uFt.forEach(t),Twr=r(tRe," (VisionTextDualEncoder model)"),tRe.forEach(t),Mwr=i(ne),eC=n(ne,"LI",{});var aRe=s(eC);p5e=n(aRe,"STRONG",{});var _Ft=s(p5e);Ewr=r(_Ft,"vit"),_Ft.forEach(t),Cwr=r(aRe," \u2014 "),gU=n(aRe,"A",{href:!0});var bFt=s(gU);wwr=r(bFt,"FlaxViTModel"),bFt.forEach(t),Awr=r(aRe," (ViT model)"),aRe.forEach(t),ywr=i(ne),oC=n(ne,"LI",{});var nRe=s(oC);u5e=n(nRe,"STRONG",{});var vFt=s(u5e);Lwr=r(vFt,"wav2vec2"),vFt.forEach(t),xwr=r(nRe," \u2014 "),hU=n(nRe,"A",{href:!0});var FFt=s(hU);$wr=r(FFt,"FlaxWav2Vec2Model"),FFt.forEach(t),kwr=r(nRe," (Wav2Vec2 model)"),nRe.forEach(t),Swr=i(ne),rC=n(ne,"LI",{});var sRe=s(rC);_5e=n(sRe,"STRONG",{});var TFt=s(_5e);Rwr=r(TFt,"xglm"),TFt.forEach(t),Bwr=r(sRe," \u2014 "),pU=n(sRe,"A",{href:!0});var MFt=s(pU);Pwr=r(MFt,"FlaxXGLMModel"),MFt.forEach(t),Iwr=r(sRe," (XGLM model)"),sRe.forEach(t),qwr=i(ne),tC=n(ne,"LI",{});var lRe=s(tC);b5e=n(lRe,"STRONG",{});var EFt=s(b5e);Nwr=r(EFt,"xlm-roberta"),EFt.forEach(t),jwr=r(lRe," \u2014 "),uU=n(lRe,"A",{href:!0});var CFt=s(uU);Dwr=r(CFt,"FlaxXLMRobertaModel"),CFt.forEach(t),Gwr=r(lRe," (XLM-RoBERTa model)"),lRe.forEach(t),ne.forEach(t),Owr=i(Sl),T(aC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),gIe=i(f),Fc=n(f,"H2",{class:!0});var _Ne=s(Fc);nC=n(_Ne,"A",{id:!0,class:!0,href:!0});var wFt=s(nC);v5e=n(wFt,"SPAN",{});var AFt=s(v5e);T(A7.$$.fragment,AFt),AFt.forEach(t),wFt.forEach(t),Vwr=i(_Ne),F5e=n(_Ne,"SPAN",{});var yFt=s(F5e);Xwr=r(yFt,"FlaxAutoModelForCausalLM"),yFt.forEach(t),_Ne.forEach(t),hIe=i(f),fr=n(f,"DIV",{class:!0});var Rl=s(fr);T(y7.$$.fragment,Rl),zwr=i(Rl),Tc=n(Rl,"P",{});var zK=s(Tc);Qwr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_U=n(zK,"A",{href:!0});var LFt=s(_U);Wwr=r(LFt,"from_pretrained()"),LFt.forEach(t),Hwr=r(zK," class method or the "),bU=n(zK,"A",{href:!0});var xFt=s(bU);Uwr=r(xFt,"from_config()"),xFt.forEach(t),Jwr=r(zK,` class
method.`),zK.forEach(t),Ywr=i(Rl),L7=n(Rl,"P",{});var bNe=s(L7);Kwr=r(bNe,"This class cannot be instantiated directly using "),T5e=n(bNe,"CODE",{});var $Ft=s(T5e);Zwr=r($Ft,"__init__()"),$Ft.forEach(t),eAr=r(bNe," (throws an error)."),bNe.forEach(t),oAr=i(Rl),qt=n(Rl,"DIV",{class:!0});var t0=s(qt);T(x7.$$.fragment,t0),rAr=i(t0),M5e=n(t0,"P",{});var kFt=s(M5e);tAr=r(kFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kFt.forEach(t),aAr=i(t0),Mc=n(t0,"P",{});var QK=s(Mc);nAr=r(QK,`Note:
Loading a model from its configuration file does `),E5e=n(QK,"STRONG",{});var SFt=s(E5e);sAr=r(SFt,"not"),SFt.forEach(t),lAr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(QK,"A",{href:!0});var RFt=s(vU);iAr=r(RFt,"from_pretrained()"),RFt.forEach(t),dAr=r(QK," to load the model weights."),QK.forEach(t),cAr=i(t0),T(sC.$$.fragment,t0),t0.forEach(t),fAr=i(Rl),Nr=n(Rl,"DIV",{class:!0});var Bl=s(Nr);T($7.$$.fragment,Bl),mAr=i(Bl),C5e=n(Bl,"P",{});var BFt=s(C5e);gAr=r(BFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BFt.forEach(t),hAr=i(Bl),cn=n(Bl,"P",{});var a0=s(cn);pAr=r(a0,"The model class to instantiate is selected based on the "),w5e=n(a0,"CODE",{});var PFt=s(w5e);uAr=r(PFt,"model_type"),PFt.forEach(t),_Ar=r(a0,` property of the config object (either
passed as an argument or loaded from `),A5e=n(a0,"CODE",{});var IFt=s(A5e);bAr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),vAr=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y5e=n(a0,"CODE",{});var qFt=s(y5e);FAr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),TAr=r(a0,":"),a0.forEach(t),MAr=i(Bl),ke=n(Bl,"UL",{});var Oe=s(ke);lC=n(Oe,"LI",{});var iRe=s(lC);L5e=n(iRe,"STRONG",{});var NFt=s(L5e);EAr=r(NFt,"bart"),NFt.forEach(t),CAr=r(iRe," \u2014 "),FU=n(iRe,"A",{href:!0});var jFt=s(FU);wAr=r(jFt,"FlaxBartForCausalLM"),jFt.forEach(t),AAr=r(iRe," (BART model)"),iRe.forEach(t),yAr=i(Oe),iC=n(Oe,"LI",{});var dRe=s(iC);x5e=n(dRe,"STRONG",{});var DFt=s(x5e);LAr=r(DFt,"bert"),DFt.forEach(t),xAr=r(dRe," \u2014 "),TU=n(dRe,"A",{href:!0});var GFt=s(TU);$Ar=r(GFt,"FlaxBertForCausalLM"),GFt.forEach(t),kAr=r(dRe," (BERT model)"),dRe.forEach(t),SAr=i(Oe),dC=n(Oe,"LI",{});var cRe=s(dC);$5e=n(cRe,"STRONG",{});var OFt=s($5e);RAr=r(OFt,"big_bird"),OFt.forEach(t),BAr=r(cRe," \u2014 "),MU=n(cRe,"A",{href:!0});var VFt=s(MU);PAr=r(VFt,"FlaxBigBirdForCausalLM"),VFt.forEach(t),IAr=r(cRe," (BigBird model)"),cRe.forEach(t),qAr=i(Oe),cC=n(Oe,"LI",{});var fRe=s(cC);k5e=n(fRe,"STRONG",{});var XFt=s(k5e);NAr=r(XFt,"electra"),XFt.forEach(t),jAr=r(fRe," \u2014 "),EU=n(fRe,"A",{href:!0});var zFt=s(EU);DAr=r(zFt,"FlaxElectraForCausalLM"),zFt.forEach(t),GAr=r(fRe," (ELECTRA model)"),fRe.forEach(t),OAr=i(Oe),fC=n(Oe,"LI",{});var mRe=s(fC);S5e=n(mRe,"STRONG",{});var QFt=s(S5e);VAr=r(QFt,"gpt2"),QFt.forEach(t),XAr=r(mRe," \u2014 "),CU=n(mRe,"A",{href:!0});var WFt=s(CU);zAr=r(WFt,"FlaxGPT2LMHeadModel"),WFt.forEach(t),QAr=r(mRe," (OpenAI GPT-2 model)"),mRe.forEach(t),WAr=i(Oe),mC=n(Oe,"LI",{});var gRe=s(mC);R5e=n(gRe,"STRONG",{});var HFt=s(R5e);HAr=r(HFt,"gpt_neo"),HFt.forEach(t),UAr=r(gRe," \u2014 "),wU=n(gRe,"A",{href:!0});var UFt=s(wU);JAr=r(UFt,"FlaxGPTNeoForCausalLM"),UFt.forEach(t),YAr=r(gRe," (GPT Neo model)"),gRe.forEach(t),KAr=i(Oe),gC=n(Oe,"LI",{});var hRe=s(gC);B5e=n(hRe,"STRONG",{});var JFt=s(B5e);ZAr=r(JFt,"gptj"),JFt.forEach(t),e0r=r(hRe," \u2014 "),AU=n(hRe,"A",{href:!0});var YFt=s(AU);o0r=r(YFt,"FlaxGPTJForCausalLM"),YFt.forEach(t),r0r=r(hRe," (GPT-J model)"),hRe.forEach(t),t0r=i(Oe),hC=n(Oe,"LI",{});var pRe=s(hC);P5e=n(pRe,"STRONG",{});var KFt=s(P5e);a0r=r(KFt,"roberta"),KFt.forEach(t),n0r=r(pRe," \u2014 "),yU=n(pRe,"A",{href:!0});var ZFt=s(yU);s0r=r(ZFt,"FlaxRobertaForCausalLM"),ZFt.forEach(t),l0r=r(pRe," (RoBERTa model)"),pRe.forEach(t),i0r=i(Oe),pC=n(Oe,"LI",{});var uRe=s(pC);I5e=n(uRe,"STRONG",{});var eTt=s(I5e);d0r=r(eTt,"xglm"),eTt.forEach(t),c0r=r(uRe," \u2014 "),LU=n(uRe,"A",{href:!0});var oTt=s(LU);f0r=r(oTt,"FlaxXGLMForCausalLM"),oTt.forEach(t),m0r=r(uRe," (XGLM model)"),uRe.forEach(t),Oe.forEach(t),g0r=i(Bl),T(uC.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),pIe=i(f),Ec=n(f,"H2",{class:!0});var vNe=s(Ec);_C=n(vNe,"A",{id:!0,class:!0,href:!0});var rTt=s(_C);q5e=n(rTt,"SPAN",{});var tTt=s(q5e);T(k7.$$.fragment,tTt),tTt.forEach(t),rTt.forEach(t),h0r=i(vNe),N5e=n(vNe,"SPAN",{});var aTt=s(N5e);p0r=r(aTt,"FlaxAutoModelForPreTraining"),aTt.forEach(t),vNe.forEach(t),uIe=i(f),mr=n(f,"DIV",{class:!0});var Pl=s(mr);T(S7.$$.fragment,Pl),u0r=i(Pl),Cc=n(Pl,"P",{});var WK=s(Cc);_0r=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xU=n(WK,"A",{href:!0});var nTt=s(xU);b0r=r(nTt,"from_pretrained()"),nTt.forEach(t),v0r=r(WK," class method or the "),$U=n(WK,"A",{href:!0});var sTt=s($U);F0r=r(sTt,"from_config()"),sTt.forEach(t),T0r=r(WK,` class
method.`),WK.forEach(t),M0r=i(Pl),R7=n(Pl,"P",{});var FNe=s(R7);E0r=r(FNe,"This class cannot be instantiated directly using "),j5e=n(FNe,"CODE",{});var lTt=s(j5e);C0r=r(lTt,"__init__()"),lTt.forEach(t),w0r=r(FNe," (throws an error)."),FNe.forEach(t),A0r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var n0=s(Nt);T(B7.$$.fragment,n0),y0r=i(n0),D5e=n(n0,"P",{});var iTt=s(D5e);L0r=r(iTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iTt.forEach(t),x0r=i(n0),wc=n(n0,"P",{});var HK=s(wc);$0r=r(HK,`Note:
Loading a model from its configuration file does `),G5e=n(HK,"STRONG",{});var dTt=s(G5e);k0r=r(dTt,"not"),dTt.forEach(t),S0r=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(HK,"A",{href:!0});var cTt=s(kU);R0r=r(cTt,"from_pretrained()"),cTt.forEach(t),B0r=r(HK," to load the model weights."),HK.forEach(t),P0r=i(n0),T(bC.$$.fragment,n0),n0.forEach(t),I0r=i(Pl),jr=n(Pl,"DIV",{class:!0});var Il=s(jr);T(P7.$$.fragment,Il),q0r=i(Il),O5e=n(Il,"P",{});var fTt=s(O5e);N0r=r(fTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fTt.forEach(t),j0r=i(Il),fn=n(Il,"P",{});var s0=s(fn);D0r=r(s0,"The model class to instantiate is selected based on the "),V5e=n(s0,"CODE",{});var mTt=s(V5e);G0r=r(mTt,"model_type"),mTt.forEach(t),O0r=r(s0,` property of the config object (either
passed as an argument or loaded from `),X5e=n(s0,"CODE",{});var gTt=s(X5e);V0r=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),X0r=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(s0,"CODE",{});var hTt=s(z5e);z0r=r(hTt,"pretrained_model_name_or_path"),hTt.forEach(t),Q0r=r(s0,":"),s0.forEach(t),W0r=i(Il),Me=n(Il,"UL",{});var we=s(Me);vC=n(we,"LI",{});var _Re=s(vC);Q5e=n(_Re,"STRONG",{});var pTt=s(Q5e);H0r=r(pTt,"albert"),pTt.forEach(t),U0r=r(_Re," \u2014 "),SU=n(_Re,"A",{href:!0});var uTt=s(SU);J0r=r(uTt,"FlaxAlbertForPreTraining"),uTt.forEach(t),Y0r=r(_Re," (ALBERT model)"),_Re.forEach(t),K0r=i(we),FC=n(we,"LI",{});var bRe=s(FC);W5e=n(bRe,"STRONG",{});var _Tt=s(W5e);Z0r=r(_Tt,"bart"),_Tt.forEach(t),eyr=r(bRe," \u2014 "),RU=n(bRe,"A",{href:!0});var bTt=s(RU);oyr=r(bTt,"FlaxBartForConditionalGeneration"),bTt.forEach(t),ryr=r(bRe," (BART model)"),bRe.forEach(t),tyr=i(we),TC=n(we,"LI",{});var vRe=s(TC);H5e=n(vRe,"STRONG",{});var vTt=s(H5e);ayr=r(vTt,"bert"),vTt.forEach(t),nyr=r(vRe," \u2014 "),BU=n(vRe,"A",{href:!0});var FTt=s(BU);syr=r(FTt,"FlaxBertForPreTraining"),FTt.forEach(t),lyr=r(vRe," (BERT model)"),vRe.forEach(t),iyr=i(we),MC=n(we,"LI",{});var FRe=s(MC);U5e=n(FRe,"STRONG",{});var TTt=s(U5e);dyr=r(TTt,"big_bird"),TTt.forEach(t),cyr=r(FRe," \u2014 "),PU=n(FRe,"A",{href:!0});var MTt=s(PU);fyr=r(MTt,"FlaxBigBirdForPreTraining"),MTt.forEach(t),myr=r(FRe," (BigBird model)"),FRe.forEach(t),gyr=i(we),EC=n(we,"LI",{});var TRe=s(EC);J5e=n(TRe,"STRONG",{});var ETt=s(J5e);hyr=r(ETt,"electra"),ETt.forEach(t),pyr=r(TRe," \u2014 "),IU=n(TRe,"A",{href:!0});var CTt=s(IU);uyr=r(CTt,"FlaxElectraForPreTraining"),CTt.forEach(t),_yr=r(TRe," (ELECTRA model)"),TRe.forEach(t),byr=i(we),CC=n(we,"LI",{});var MRe=s(CC);Y5e=n(MRe,"STRONG",{});var wTt=s(Y5e);vyr=r(wTt,"mbart"),wTt.forEach(t),Fyr=r(MRe," \u2014 "),qU=n(MRe,"A",{href:!0});var ATt=s(qU);Tyr=r(ATt,"FlaxMBartForConditionalGeneration"),ATt.forEach(t),Myr=r(MRe," (mBART model)"),MRe.forEach(t),Eyr=i(we),wC=n(we,"LI",{});var ERe=s(wC);K5e=n(ERe,"STRONG",{});var yTt=s(K5e);Cyr=r(yTt,"mt5"),yTt.forEach(t),wyr=r(ERe," \u2014 "),NU=n(ERe,"A",{href:!0});var LTt=s(NU);Ayr=r(LTt,"FlaxMT5ForConditionalGeneration"),LTt.forEach(t),yyr=r(ERe," (mT5 model)"),ERe.forEach(t),Lyr=i(we),AC=n(we,"LI",{});var CRe=s(AC);Z5e=n(CRe,"STRONG",{});var xTt=s(Z5e);xyr=r(xTt,"roberta"),xTt.forEach(t),$yr=r(CRe," \u2014 "),jU=n(CRe,"A",{href:!0});var $Tt=s(jU);kyr=r($Tt,"FlaxRobertaForMaskedLM"),$Tt.forEach(t),Syr=r(CRe," (RoBERTa model)"),CRe.forEach(t),Ryr=i(we),yC=n(we,"LI",{});var wRe=s(yC);eve=n(wRe,"STRONG",{});var kTt=s(eve);Byr=r(kTt,"roformer"),kTt.forEach(t),Pyr=r(wRe," \u2014 "),DU=n(wRe,"A",{href:!0});var STt=s(DU);Iyr=r(STt,"FlaxRoFormerForMaskedLM"),STt.forEach(t),qyr=r(wRe," (RoFormer model)"),wRe.forEach(t),Nyr=i(we),LC=n(we,"LI",{});var ARe=s(LC);ove=n(ARe,"STRONG",{});var RTt=s(ove);jyr=r(RTt,"t5"),RTt.forEach(t),Dyr=r(ARe," \u2014 "),GU=n(ARe,"A",{href:!0});var BTt=s(GU);Gyr=r(BTt,"FlaxT5ForConditionalGeneration"),BTt.forEach(t),Oyr=r(ARe," (T5 model)"),ARe.forEach(t),Vyr=i(we),xC=n(we,"LI",{});var yRe=s(xC);rve=n(yRe,"STRONG",{});var PTt=s(rve);Xyr=r(PTt,"wav2vec2"),PTt.forEach(t),zyr=r(yRe," \u2014 "),OU=n(yRe,"A",{href:!0});var ITt=s(OU);Qyr=r(ITt,"FlaxWav2Vec2ForPreTraining"),ITt.forEach(t),Wyr=r(yRe," (Wav2Vec2 model)"),yRe.forEach(t),Hyr=i(we),$C=n(we,"LI",{});var LRe=s($C);tve=n(LRe,"STRONG",{});var qTt=s(tve);Uyr=r(qTt,"xlm-roberta"),qTt.forEach(t),Jyr=r(LRe," \u2014 "),VU=n(LRe,"A",{href:!0});var NTt=s(VU);Yyr=r(NTt,"FlaxXLMRobertaForMaskedLM"),NTt.forEach(t),Kyr=r(LRe," (XLM-RoBERTa model)"),LRe.forEach(t),we.forEach(t),Zyr=i(Il),T(kC.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),_Ie=i(f),Ac=n(f,"H2",{class:!0});var TNe=s(Ac);SC=n(TNe,"A",{id:!0,class:!0,href:!0});var jTt=s(SC);ave=n(jTt,"SPAN",{});var DTt=s(ave);T(I7.$$.fragment,DTt),DTt.forEach(t),jTt.forEach(t),eLr=i(TNe),nve=n(TNe,"SPAN",{});var GTt=s(nve);oLr=r(GTt,"FlaxAutoModelForMaskedLM"),GTt.forEach(t),TNe.forEach(t),bIe=i(f),gr=n(f,"DIV",{class:!0});var ql=s(gr);T(q7.$$.fragment,ql),rLr=i(ql),yc=n(ql,"P",{});var UK=s(yc);tLr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XU=n(UK,"A",{href:!0});var OTt=s(XU);aLr=r(OTt,"from_pretrained()"),OTt.forEach(t),nLr=r(UK," class method or the "),zU=n(UK,"A",{href:!0});var VTt=s(zU);sLr=r(VTt,"from_config()"),VTt.forEach(t),lLr=r(UK,` class
method.`),UK.forEach(t),iLr=i(ql),N7=n(ql,"P",{});var MNe=s(N7);dLr=r(MNe,"This class cannot be instantiated directly using "),sve=n(MNe,"CODE",{});var XTt=s(sve);cLr=r(XTt,"__init__()"),XTt.forEach(t),fLr=r(MNe," (throws an error)."),MNe.forEach(t),mLr=i(ql),jt=n(ql,"DIV",{class:!0});var l0=s(jt);T(j7.$$.fragment,l0),gLr=i(l0),lve=n(l0,"P",{});var zTt=s(lve);hLr=r(zTt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zTt.forEach(t),pLr=i(l0),Lc=n(l0,"P",{});var JK=s(Lc);uLr=r(JK,`Note:
Loading a model from its configuration file does `),ive=n(JK,"STRONG",{});var QTt=s(ive);_Lr=r(QTt,"not"),QTt.forEach(t),bLr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(JK,"A",{href:!0});var WTt=s(QU);vLr=r(WTt,"from_pretrained()"),WTt.forEach(t),FLr=r(JK," to load the model weights."),JK.forEach(t),TLr=i(l0),T(RC.$$.fragment,l0),l0.forEach(t),MLr=i(ql),Dr=n(ql,"DIV",{class:!0});var Nl=s(Dr);T(D7.$$.fragment,Nl),ELr=i(Nl),dve=n(Nl,"P",{});var HTt=s(dve);CLr=r(HTt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HTt.forEach(t),wLr=i(Nl),mn=n(Nl,"P",{});var i0=s(mn);ALr=r(i0,"The model class to instantiate is selected based on the "),cve=n(i0,"CODE",{});var UTt=s(cve);yLr=r(UTt,"model_type"),UTt.forEach(t),LLr=r(i0,` property of the config object (either
passed as an argument or loaded from `),fve=n(i0,"CODE",{});var JTt=s(fve);xLr=r(JTt,"pretrained_model_name_or_path"),JTt.forEach(t),$Lr=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(i0,"CODE",{});var YTt=s(mve);kLr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),SLr=r(i0,":"),i0.forEach(t),RLr=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);BC=n(Be,"LI",{});var xRe=s(BC);gve=n(xRe,"STRONG",{});var KTt=s(gve);BLr=r(KTt,"albert"),KTt.forEach(t),PLr=r(xRe," \u2014 "),WU=n(xRe,"A",{href:!0});var ZTt=s(WU);ILr=r(ZTt,"FlaxAlbertForMaskedLM"),ZTt.forEach(t),qLr=r(xRe," (ALBERT model)"),xRe.forEach(t),NLr=i(Be),PC=n(Be,"LI",{});var $Re=s(PC);hve=n($Re,"STRONG",{});var eMt=s(hve);jLr=r(eMt,"bart"),eMt.forEach(t),DLr=r($Re," \u2014 "),HU=n($Re,"A",{href:!0});var oMt=s(HU);GLr=r(oMt,"FlaxBartForConditionalGeneration"),oMt.forEach(t),OLr=r($Re," (BART model)"),$Re.forEach(t),VLr=i(Be),IC=n(Be,"LI",{});var kRe=s(IC);pve=n(kRe,"STRONG",{});var rMt=s(pve);XLr=r(rMt,"bert"),rMt.forEach(t),zLr=r(kRe," \u2014 "),UU=n(kRe,"A",{href:!0});var tMt=s(UU);QLr=r(tMt,"FlaxBertForMaskedLM"),tMt.forEach(t),WLr=r(kRe," (BERT model)"),kRe.forEach(t),HLr=i(Be),qC=n(Be,"LI",{});var SRe=s(qC);uve=n(SRe,"STRONG",{});var aMt=s(uve);ULr=r(aMt,"big_bird"),aMt.forEach(t),JLr=r(SRe," \u2014 "),JU=n(SRe,"A",{href:!0});var nMt=s(JU);YLr=r(nMt,"FlaxBigBirdForMaskedLM"),nMt.forEach(t),KLr=r(SRe," (BigBird model)"),SRe.forEach(t),ZLr=i(Be),NC=n(Be,"LI",{});var RRe=s(NC);_ve=n(RRe,"STRONG",{});var sMt=s(_ve);e8r=r(sMt,"distilbert"),sMt.forEach(t),o8r=r(RRe," \u2014 "),YU=n(RRe,"A",{href:!0});var lMt=s(YU);r8r=r(lMt,"FlaxDistilBertForMaskedLM"),lMt.forEach(t),t8r=r(RRe," (DistilBERT model)"),RRe.forEach(t),a8r=i(Be),jC=n(Be,"LI",{});var BRe=s(jC);bve=n(BRe,"STRONG",{});var iMt=s(bve);n8r=r(iMt,"electra"),iMt.forEach(t),s8r=r(BRe," \u2014 "),KU=n(BRe,"A",{href:!0});var dMt=s(KU);l8r=r(dMt,"FlaxElectraForMaskedLM"),dMt.forEach(t),i8r=r(BRe," (ELECTRA model)"),BRe.forEach(t),d8r=i(Be),DC=n(Be,"LI",{});var PRe=s(DC);vve=n(PRe,"STRONG",{});var cMt=s(vve);c8r=r(cMt,"mbart"),cMt.forEach(t),f8r=r(PRe," \u2014 "),ZU=n(PRe,"A",{href:!0});var fMt=s(ZU);m8r=r(fMt,"FlaxMBartForConditionalGeneration"),fMt.forEach(t),g8r=r(PRe," (mBART model)"),PRe.forEach(t),h8r=i(Be),GC=n(Be,"LI",{});var IRe=s(GC);Fve=n(IRe,"STRONG",{});var mMt=s(Fve);p8r=r(mMt,"roberta"),mMt.forEach(t),u8r=r(IRe," \u2014 "),eJ=n(IRe,"A",{href:!0});var gMt=s(eJ);_8r=r(gMt,"FlaxRobertaForMaskedLM"),gMt.forEach(t),b8r=r(IRe," (RoBERTa model)"),IRe.forEach(t),v8r=i(Be),OC=n(Be,"LI",{});var qRe=s(OC);Tve=n(qRe,"STRONG",{});var hMt=s(Tve);F8r=r(hMt,"roformer"),hMt.forEach(t),T8r=r(qRe," \u2014 "),oJ=n(qRe,"A",{href:!0});var pMt=s(oJ);M8r=r(pMt,"FlaxRoFormerForMaskedLM"),pMt.forEach(t),E8r=r(qRe," (RoFormer model)"),qRe.forEach(t),C8r=i(Be),VC=n(Be,"LI",{});var NRe=s(VC);Mve=n(NRe,"STRONG",{});var uMt=s(Mve);w8r=r(uMt,"xlm-roberta"),uMt.forEach(t),A8r=r(NRe," \u2014 "),rJ=n(NRe,"A",{href:!0});var _Mt=s(rJ);y8r=r(_Mt,"FlaxXLMRobertaForMaskedLM"),_Mt.forEach(t),L8r=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),Be.forEach(t),x8r=i(Nl),T(XC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),vIe=i(f),xc=n(f,"H2",{class:!0});var ENe=s(xc);zC=n(ENe,"A",{id:!0,class:!0,href:!0});var bMt=s(zC);Eve=n(bMt,"SPAN",{});var vMt=s(Eve);T(G7.$$.fragment,vMt),vMt.forEach(t),bMt.forEach(t),$8r=i(ENe),Cve=n(ENe,"SPAN",{});var FMt=s(Cve);k8r=r(FMt,"FlaxAutoModelForSeq2SeqLM"),FMt.forEach(t),ENe.forEach(t),FIe=i(f),hr=n(f,"DIV",{class:!0});var jl=s(hr);T(O7.$$.fragment,jl),S8r=i(jl),$c=n(jl,"P",{});var YK=s($c);R8r=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tJ=n(YK,"A",{href:!0});var TMt=s(tJ);B8r=r(TMt,"from_pretrained()"),TMt.forEach(t),P8r=r(YK," class method or the "),aJ=n(YK,"A",{href:!0});var MMt=s(aJ);I8r=r(MMt,"from_config()"),MMt.forEach(t),q8r=r(YK,` class
method.`),YK.forEach(t),N8r=i(jl),V7=n(jl,"P",{});var CNe=s(V7);j8r=r(CNe,"This class cannot be instantiated directly using "),wve=n(CNe,"CODE",{});var EMt=s(wve);D8r=r(EMt,"__init__()"),EMt.forEach(t),G8r=r(CNe," (throws an error)."),CNe.forEach(t),O8r=i(jl),Dt=n(jl,"DIV",{class:!0});var d0=s(Dt);T(X7.$$.fragment,d0),V8r=i(d0),Ave=n(d0,"P",{});var CMt=s(Ave);X8r=r(CMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),CMt.forEach(t),z8r=i(d0),kc=n(d0,"P",{});var KK=s(kc);Q8r=r(KK,`Note:
Loading a model from its configuration file does `),yve=n(KK,"STRONG",{});var wMt=s(yve);W8r=r(wMt,"not"),wMt.forEach(t),H8r=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(KK,"A",{href:!0});var AMt=s(nJ);U8r=r(AMt,"from_pretrained()"),AMt.forEach(t),J8r=r(KK," to load the model weights."),KK.forEach(t),Y8r=i(d0),T(QC.$$.fragment,d0),d0.forEach(t),K8r=i(jl),Gr=n(jl,"DIV",{class:!0});var Dl=s(Gr);T(z7.$$.fragment,Dl),Z8r=i(Dl),Lve=n(Dl,"P",{});var yMt=s(Lve);e7r=r(yMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yMt.forEach(t),o7r=i(Dl),gn=n(Dl,"P",{});var c0=s(gn);r7r=r(c0,"The model class to instantiate is selected based on the "),xve=n(c0,"CODE",{});var LMt=s(xve);t7r=r(LMt,"model_type"),LMt.forEach(t),a7r=r(c0,` property of the config object (either
passed as an argument or loaded from `),$ve=n(c0,"CODE",{});var xMt=s($ve);n7r=r(xMt,"pretrained_model_name_or_path"),xMt.forEach(t),s7r=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kve=n(c0,"CODE",{});var $Mt=s(kve);l7r=r($Mt,"pretrained_model_name_or_path"),$Mt.forEach(t),i7r=r(c0,":"),c0.forEach(t),d7r=i(Dl),Se=n(Dl,"UL",{});var Ve=s(Se);WC=n(Ve,"LI",{});var jRe=s(WC);Sve=n(jRe,"STRONG",{});var kMt=s(Sve);c7r=r(kMt,"bart"),kMt.forEach(t),f7r=r(jRe," \u2014 "),sJ=n(jRe,"A",{href:!0});var SMt=s(sJ);m7r=r(SMt,"FlaxBartForConditionalGeneration"),SMt.forEach(t),g7r=r(jRe," (BART model)"),jRe.forEach(t),h7r=i(Ve),HC=n(Ve,"LI",{});var DRe=s(HC);Rve=n(DRe,"STRONG",{});var RMt=s(Rve);p7r=r(RMt,"blenderbot"),RMt.forEach(t),u7r=r(DRe," \u2014 "),lJ=n(DRe,"A",{href:!0});var BMt=s(lJ);_7r=r(BMt,"FlaxBlenderbotForConditionalGeneration"),BMt.forEach(t),b7r=r(DRe," (Blenderbot model)"),DRe.forEach(t),v7r=i(Ve),UC=n(Ve,"LI",{});var GRe=s(UC);Bve=n(GRe,"STRONG",{});var PMt=s(Bve);F7r=r(PMt,"blenderbot-small"),PMt.forEach(t),T7r=r(GRe," \u2014 "),iJ=n(GRe,"A",{href:!0});var IMt=s(iJ);M7r=r(IMt,"FlaxBlenderbotSmallForConditionalGeneration"),IMt.forEach(t),E7r=r(GRe," (BlenderbotSmall model)"),GRe.forEach(t),C7r=i(Ve),JC=n(Ve,"LI",{});var ORe=s(JC);Pve=n(ORe,"STRONG",{});var qMt=s(Pve);w7r=r(qMt,"encoder-decoder"),qMt.forEach(t),A7r=r(ORe," \u2014 "),dJ=n(ORe,"A",{href:!0});var NMt=s(dJ);y7r=r(NMt,"FlaxEncoderDecoderModel"),NMt.forEach(t),L7r=r(ORe," (Encoder decoder model)"),ORe.forEach(t),x7r=i(Ve),YC=n(Ve,"LI",{});var VRe=s(YC);Ive=n(VRe,"STRONG",{});var jMt=s(Ive);$7r=r(jMt,"marian"),jMt.forEach(t),k7r=r(VRe," \u2014 "),cJ=n(VRe,"A",{href:!0});var DMt=s(cJ);S7r=r(DMt,"FlaxMarianMTModel"),DMt.forEach(t),R7r=r(VRe," (Marian model)"),VRe.forEach(t),B7r=i(Ve),KC=n(Ve,"LI",{});var XRe=s(KC);qve=n(XRe,"STRONG",{});var GMt=s(qve);P7r=r(GMt,"mbart"),GMt.forEach(t),I7r=r(XRe," \u2014 "),fJ=n(XRe,"A",{href:!0});var OMt=s(fJ);q7r=r(OMt,"FlaxMBartForConditionalGeneration"),OMt.forEach(t),N7r=r(XRe," (mBART model)"),XRe.forEach(t),j7r=i(Ve),ZC=n(Ve,"LI",{});var zRe=s(ZC);Nve=n(zRe,"STRONG",{});var VMt=s(Nve);D7r=r(VMt,"mt5"),VMt.forEach(t),G7r=r(zRe," \u2014 "),mJ=n(zRe,"A",{href:!0});var XMt=s(mJ);O7r=r(XMt,"FlaxMT5ForConditionalGeneration"),XMt.forEach(t),V7r=r(zRe," (mT5 model)"),zRe.forEach(t),X7r=i(Ve),e3=n(Ve,"LI",{});var QRe=s(e3);jve=n(QRe,"STRONG",{});var zMt=s(jve);z7r=r(zMt,"pegasus"),zMt.forEach(t),Q7r=r(QRe," \u2014 "),gJ=n(QRe,"A",{href:!0});var QMt=s(gJ);W7r=r(QMt,"FlaxPegasusForConditionalGeneration"),QMt.forEach(t),H7r=r(QRe," (Pegasus model)"),QRe.forEach(t),U7r=i(Ve),o3=n(Ve,"LI",{});var WRe=s(o3);Dve=n(WRe,"STRONG",{});var WMt=s(Dve);J7r=r(WMt,"t5"),WMt.forEach(t),Y7r=r(WRe," \u2014 "),hJ=n(WRe,"A",{href:!0});var HMt=s(hJ);K7r=r(HMt,"FlaxT5ForConditionalGeneration"),HMt.forEach(t),Z7r=r(WRe," (T5 model)"),WRe.forEach(t),Ve.forEach(t),exr=i(Dl),T(r3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),TIe=i(f),Sc=n(f,"H2",{class:!0});var wNe=s(Sc);t3=n(wNe,"A",{id:!0,class:!0,href:!0});var UMt=s(t3);Gve=n(UMt,"SPAN",{});var JMt=s(Gve);T(Q7.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),oxr=i(wNe),Ove=n(wNe,"SPAN",{});var YMt=s(Ove);rxr=r(YMt,"FlaxAutoModelForSequenceClassification"),YMt.forEach(t),wNe.forEach(t),MIe=i(f),pr=n(f,"DIV",{class:!0});var Gl=s(pr);T(W7.$$.fragment,Gl),txr=i(Gl),Rc=n(Gl,"P",{});var ZK=s(Rc);axr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pJ=n(ZK,"A",{href:!0});var KMt=s(pJ);nxr=r(KMt,"from_pretrained()"),KMt.forEach(t),sxr=r(ZK," class method or the "),uJ=n(ZK,"A",{href:!0});var ZMt=s(uJ);lxr=r(ZMt,"from_config()"),ZMt.forEach(t),ixr=r(ZK,` class
method.`),ZK.forEach(t),dxr=i(Gl),H7=n(Gl,"P",{});var ANe=s(H7);cxr=r(ANe,"This class cannot be instantiated directly using "),Vve=n(ANe,"CODE",{});var eEt=s(Vve);fxr=r(eEt,"__init__()"),eEt.forEach(t),mxr=r(ANe," (throws an error)."),ANe.forEach(t),gxr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var f0=s(Gt);T(U7.$$.fragment,f0),hxr=i(f0),Xve=n(f0,"P",{});var oEt=s(Xve);pxr=r(oEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oEt.forEach(t),uxr=i(f0),Bc=n(f0,"P",{});var eZ=s(Bc);_xr=r(eZ,`Note:
Loading a model from its configuration file does `),zve=n(eZ,"STRONG",{});var rEt=s(zve);bxr=r(rEt,"not"),rEt.forEach(t),vxr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(eZ,"A",{href:!0});var tEt=s(_J);Fxr=r(tEt,"from_pretrained()"),tEt.forEach(t),Txr=r(eZ," to load the model weights."),eZ.forEach(t),Mxr=i(f0),T(a3.$$.fragment,f0),f0.forEach(t),Exr=i(Gl),Or=n(Gl,"DIV",{class:!0});var Ol=s(Or);T(J7.$$.fragment,Ol),Cxr=i(Ol),Qve=n(Ol,"P",{});var aEt=s(Qve);wxr=r(aEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aEt.forEach(t),Axr=i(Ol),hn=n(Ol,"P",{});var m0=s(hn);yxr=r(m0,"The model class to instantiate is selected based on the "),Wve=n(m0,"CODE",{});var nEt=s(Wve);Lxr=r(nEt,"model_type"),nEt.forEach(t),xxr=r(m0,` property of the config object (either
passed as an argument or loaded from `),Hve=n(m0,"CODE",{});var sEt=s(Hve);$xr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),kxr=r(m0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(m0,"CODE",{});var lEt=s(Uve);Sxr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),Rxr=r(m0,":"),m0.forEach(t),Bxr=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);n3=n(Pe,"LI",{});var HRe=s(n3);Jve=n(HRe,"STRONG",{});var iEt=s(Jve);Pxr=r(iEt,"albert"),iEt.forEach(t),Ixr=r(HRe," \u2014 "),bJ=n(HRe,"A",{href:!0});var dEt=s(bJ);qxr=r(dEt,"FlaxAlbertForSequenceClassification"),dEt.forEach(t),Nxr=r(HRe," (ALBERT model)"),HRe.forEach(t),jxr=i(Pe),s3=n(Pe,"LI",{});var URe=s(s3);Yve=n(URe,"STRONG",{});var cEt=s(Yve);Dxr=r(cEt,"bart"),cEt.forEach(t),Gxr=r(URe," \u2014 "),vJ=n(URe,"A",{href:!0});var fEt=s(vJ);Oxr=r(fEt,"FlaxBartForSequenceClassification"),fEt.forEach(t),Vxr=r(URe," (BART model)"),URe.forEach(t),Xxr=i(Pe),l3=n(Pe,"LI",{});var JRe=s(l3);Kve=n(JRe,"STRONG",{});var mEt=s(Kve);zxr=r(mEt,"bert"),mEt.forEach(t),Qxr=r(JRe," \u2014 "),FJ=n(JRe,"A",{href:!0});var gEt=s(FJ);Wxr=r(gEt,"FlaxBertForSequenceClassification"),gEt.forEach(t),Hxr=r(JRe," (BERT model)"),JRe.forEach(t),Uxr=i(Pe),i3=n(Pe,"LI",{});var YRe=s(i3);Zve=n(YRe,"STRONG",{});var hEt=s(Zve);Jxr=r(hEt,"big_bird"),hEt.forEach(t),Yxr=r(YRe," \u2014 "),TJ=n(YRe,"A",{href:!0});var pEt=s(TJ);Kxr=r(pEt,"FlaxBigBirdForSequenceClassification"),pEt.forEach(t),Zxr=r(YRe," (BigBird model)"),YRe.forEach(t),e9r=i(Pe),d3=n(Pe,"LI",{});var KRe=s(d3);eFe=n(KRe,"STRONG",{});var uEt=s(eFe);o9r=r(uEt,"distilbert"),uEt.forEach(t),r9r=r(KRe," \u2014 "),MJ=n(KRe,"A",{href:!0});var _Et=s(MJ);t9r=r(_Et,"FlaxDistilBertForSequenceClassification"),_Et.forEach(t),a9r=r(KRe," (DistilBERT model)"),KRe.forEach(t),n9r=i(Pe),c3=n(Pe,"LI",{});var ZRe=s(c3);oFe=n(ZRe,"STRONG",{});var bEt=s(oFe);s9r=r(bEt,"electra"),bEt.forEach(t),l9r=r(ZRe," \u2014 "),EJ=n(ZRe,"A",{href:!0});var vEt=s(EJ);i9r=r(vEt,"FlaxElectraForSequenceClassification"),vEt.forEach(t),d9r=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),c9r=i(Pe),f3=n(Pe,"LI",{});var eBe=s(f3);rFe=n(eBe,"STRONG",{});var FEt=s(rFe);f9r=r(FEt,"mbart"),FEt.forEach(t),m9r=r(eBe," \u2014 "),CJ=n(eBe,"A",{href:!0});var TEt=s(CJ);g9r=r(TEt,"FlaxMBartForSequenceClassification"),TEt.forEach(t),h9r=r(eBe," (mBART model)"),eBe.forEach(t),p9r=i(Pe),m3=n(Pe,"LI",{});var oBe=s(m3);tFe=n(oBe,"STRONG",{});var MEt=s(tFe);u9r=r(MEt,"roberta"),MEt.forEach(t),_9r=r(oBe," \u2014 "),wJ=n(oBe,"A",{href:!0});var EEt=s(wJ);b9r=r(EEt,"FlaxRobertaForSequenceClassification"),EEt.forEach(t),v9r=r(oBe," (RoBERTa model)"),oBe.forEach(t),F9r=i(Pe),g3=n(Pe,"LI",{});var rBe=s(g3);aFe=n(rBe,"STRONG",{});var CEt=s(aFe);T9r=r(CEt,"roformer"),CEt.forEach(t),M9r=r(rBe," \u2014 "),AJ=n(rBe,"A",{href:!0});var wEt=s(AJ);E9r=r(wEt,"FlaxRoFormerForSequenceClassification"),wEt.forEach(t),C9r=r(rBe," (RoFormer model)"),rBe.forEach(t),w9r=i(Pe),h3=n(Pe,"LI",{});var tBe=s(h3);nFe=n(tBe,"STRONG",{});var AEt=s(nFe);A9r=r(AEt,"xlm-roberta"),AEt.forEach(t),y9r=r(tBe," \u2014 "),yJ=n(tBe,"A",{href:!0});var yEt=s(yJ);L9r=r(yEt,"FlaxXLMRobertaForSequenceClassification"),yEt.forEach(t),x9r=r(tBe," (XLM-RoBERTa model)"),tBe.forEach(t),Pe.forEach(t),$9r=i(Ol),T(p3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),EIe=i(f),Pc=n(f,"H2",{class:!0});var yNe=s(Pc);u3=n(yNe,"A",{id:!0,class:!0,href:!0});var LEt=s(u3);sFe=n(LEt,"SPAN",{});var xEt=s(sFe);T(Y7.$$.fragment,xEt),xEt.forEach(t),LEt.forEach(t),k9r=i(yNe),lFe=n(yNe,"SPAN",{});var $Et=s(lFe);S9r=r($Et,"FlaxAutoModelForQuestionAnswering"),$Et.forEach(t),yNe.forEach(t),CIe=i(f),ur=n(f,"DIV",{class:!0});var Vl=s(ur);T(K7.$$.fragment,Vl),R9r=i(Vl),Ic=n(Vl,"P",{});var oZ=s(Ic);B9r=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LJ=n(oZ,"A",{href:!0});var kEt=s(LJ);P9r=r(kEt,"from_pretrained()"),kEt.forEach(t),I9r=r(oZ," class method or the "),xJ=n(oZ,"A",{href:!0});var SEt=s(xJ);q9r=r(SEt,"from_config()"),SEt.forEach(t),N9r=r(oZ,` class
method.`),oZ.forEach(t),j9r=i(Vl),Z7=n(Vl,"P",{});var LNe=s(Z7);D9r=r(LNe,"This class cannot be instantiated directly using "),iFe=n(LNe,"CODE",{});var REt=s(iFe);G9r=r(REt,"__init__()"),REt.forEach(t),O9r=r(LNe," (throws an error)."),LNe.forEach(t),V9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var g0=s(Ot);T(ex.$$.fragment,g0),X9r=i(g0),dFe=n(g0,"P",{});var BEt=s(dFe);z9r=r(BEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),BEt.forEach(t),Q9r=i(g0),qc=n(g0,"P",{});var rZ=s(qc);W9r=r(rZ,`Note:
Loading a model from its configuration file does `),cFe=n(rZ,"STRONG",{});var PEt=s(cFe);H9r=r(PEt,"not"),PEt.forEach(t),U9r=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(rZ,"A",{href:!0});var IEt=s($J);J9r=r(IEt,"from_pretrained()"),IEt.forEach(t),Y9r=r(rZ," to load the model weights."),rZ.forEach(t),K9r=i(g0),T(_3.$$.fragment,g0),g0.forEach(t),Z9r=i(Vl),Vr=n(Vl,"DIV",{class:!0});var Xl=s(Vr);T(ox.$$.fragment,Xl),e$r=i(Xl),fFe=n(Xl,"P",{});var qEt=s(fFe);o$r=r(qEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qEt.forEach(t),r$r=i(Xl),pn=n(Xl,"P",{});var h0=s(pn);t$r=r(h0,"The model class to instantiate is selected based on the "),mFe=n(h0,"CODE",{});var NEt=s(mFe);a$r=r(NEt,"model_type"),NEt.forEach(t),n$r=r(h0,` property of the config object (either
passed as an argument or loaded from `),gFe=n(h0,"CODE",{});var jEt=s(gFe);s$r=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),l$r=r(h0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(h0,"CODE",{});var DEt=s(hFe);i$r=r(DEt,"pretrained_model_name_or_path"),DEt.forEach(t),d$r=r(h0,":"),h0.forEach(t),c$r=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);b3=n(Ie,"LI",{});var aBe=s(b3);pFe=n(aBe,"STRONG",{});var GEt=s(pFe);f$r=r(GEt,"albert"),GEt.forEach(t),m$r=r(aBe," \u2014 "),kJ=n(aBe,"A",{href:!0});var OEt=s(kJ);g$r=r(OEt,"FlaxAlbertForQuestionAnswering"),OEt.forEach(t),h$r=r(aBe," (ALBERT model)"),aBe.forEach(t),p$r=i(Ie),v3=n(Ie,"LI",{});var nBe=s(v3);uFe=n(nBe,"STRONG",{});var VEt=s(uFe);u$r=r(VEt,"bart"),VEt.forEach(t),_$r=r(nBe," \u2014 "),SJ=n(nBe,"A",{href:!0});var XEt=s(SJ);b$r=r(XEt,"FlaxBartForQuestionAnswering"),XEt.forEach(t),v$r=r(nBe," (BART model)"),nBe.forEach(t),F$r=i(Ie),F3=n(Ie,"LI",{});var sBe=s(F3);_Fe=n(sBe,"STRONG",{});var zEt=s(_Fe);T$r=r(zEt,"bert"),zEt.forEach(t),M$r=r(sBe," \u2014 "),RJ=n(sBe,"A",{href:!0});var QEt=s(RJ);E$r=r(QEt,"FlaxBertForQuestionAnswering"),QEt.forEach(t),C$r=r(sBe," (BERT model)"),sBe.forEach(t),w$r=i(Ie),T3=n(Ie,"LI",{});var lBe=s(T3);bFe=n(lBe,"STRONG",{});var WEt=s(bFe);A$r=r(WEt,"big_bird"),WEt.forEach(t),y$r=r(lBe," \u2014 "),BJ=n(lBe,"A",{href:!0});var HEt=s(BJ);L$r=r(HEt,"FlaxBigBirdForQuestionAnswering"),HEt.forEach(t),x$r=r(lBe," (BigBird model)"),lBe.forEach(t),$$r=i(Ie),M3=n(Ie,"LI",{});var iBe=s(M3);vFe=n(iBe,"STRONG",{});var UEt=s(vFe);k$r=r(UEt,"distilbert"),UEt.forEach(t),S$r=r(iBe," \u2014 "),PJ=n(iBe,"A",{href:!0});var JEt=s(PJ);R$r=r(JEt,"FlaxDistilBertForQuestionAnswering"),JEt.forEach(t),B$r=r(iBe," (DistilBERT model)"),iBe.forEach(t),P$r=i(Ie),E3=n(Ie,"LI",{});var dBe=s(E3);FFe=n(dBe,"STRONG",{});var YEt=s(FFe);I$r=r(YEt,"electra"),YEt.forEach(t),q$r=r(dBe," \u2014 "),IJ=n(dBe,"A",{href:!0});var KEt=s(IJ);N$r=r(KEt,"FlaxElectraForQuestionAnswering"),KEt.forEach(t),j$r=r(dBe," (ELECTRA model)"),dBe.forEach(t),D$r=i(Ie),C3=n(Ie,"LI",{});var cBe=s(C3);TFe=n(cBe,"STRONG",{});var ZEt=s(TFe);G$r=r(ZEt,"mbart"),ZEt.forEach(t),O$r=r(cBe," \u2014 "),qJ=n(cBe,"A",{href:!0});var eCt=s(qJ);V$r=r(eCt,"FlaxMBartForQuestionAnswering"),eCt.forEach(t),X$r=r(cBe," (mBART model)"),cBe.forEach(t),z$r=i(Ie),w3=n(Ie,"LI",{});var fBe=s(w3);MFe=n(fBe,"STRONG",{});var oCt=s(MFe);Q$r=r(oCt,"roberta"),oCt.forEach(t),W$r=r(fBe," \u2014 "),NJ=n(fBe,"A",{href:!0});var rCt=s(NJ);H$r=r(rCt,"FlaxRobertaForQuestionAnswering"),rCt.forEach(t),U$r=r(fBe," (RoBERTa model)"),fBe.forEach(t),J$r=i(Ie),A3=n(Ie,"LI",{});var mBe=s(A3);EFe=n(mBe,"STRONG",{});var tCt=s(EFe);Y$r=r(tCt,"roformer"),tCt.forEach(t),K$r=r(mBe," \u2014 "),jJ=n(mBe,"A",{href:!0});var aCt=s(jJ);Z$r=r(aCt,"FlaxRoFormerForQuestionAnswering"),aCt.forEach(t),ekr=r(mBe," (RoFormer model)"),mBe.forEach(t),okr=i(Ie),y3=n(Ie,"LI",{});var gBe=s(y3);CFe=n(gBe,"STRONG",{});var nCt=s(CFe);rkr=r(nCt,"xlm-roberta"),nCt.forEach(t),tkr=r(gBe," \u2014 "),DJ=n(gBe,"A",{href:!0});var sCt=s(DJ);akr=r(sCt,"FlaxXLMRobertaForQuestionAnswering"),sCt.forEach(t),nkr=r(gBe," (XLM-RoBERTa model)"),gBe.forEach(t),Ie.forEach(t),skr=i(Xl),T(L3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),wIe=i(f),Nc=n(f,"H2",{class:!0});var xNe=s(Nc);x3=n(xNe,"A",{id:!0,class:!0,href:!0});var lCt=s(x3);wFe=n(lCt,"SPAN",{});var iCt=s(wFe);T(rx.$$.fragment,iCt),iCt.forEach(t),lCt.forEach(t),lkr=i(xNe),AFe=n(xNe,"SPAN",{});var dCt=s(AFe);ikr=r(dCt,"FlaxAutoModelForTokenClassification"),dCt.forEach(t),xNe.forEach(t),AIe=i(f),_r=n(f,"DIV",{class:!0});var zl=s(_r);T(tx.$$.fragment,zl),dkr=i(zl),jc=n(zl,"P",{});var tZ=s(jc);ckr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GJ=n(tZ,"A",{href:!0});var cCt=s(GJ);fkr=r(cCt,"from_pretrained()"),cCt.forEach(t),mkr=r(tZ," class method or the "),OJ=n(tZ,"A",{href:!0});var fCt=s(OJ);gkr=r(fCt,"from_config()"),fCt.forEach(t),hkr=r(tZ,` class
method.`),tZ.forEach(t),pkr=i(zl),ax=n(zl,"P",{});var $Ne=s(ax);ukr=r($Ne,"This class cannot be instantiated directly using "),yFe=n($Ne,"CODE",{});var mCt=s(yFe);_kr=r(mCt,"__init__()"),mCt.forEach(t),bkr=r($Ne," (throws an error)."),$Ne.forEach(t),vkr=i(zl),Vt=n(zl,"DIV",{class:!0});var p0=s(Vt);T(nx.$$.fragment,p0),Fkr=i(p0),LFe=n(p0,"P",{});var gCt=s(LFe);Tkr=r(gCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gCt.forEach(t),Mkr=i(p0),Dc=n(p0,"P",{});var aZ=s(Dc);Ekr=r(aZ,`Note:
Loading a model from its configuration file does `),xFe=n(aZ,"STRONG",{});var hCt=s(xFe);Ckr=r(hCt,"not"),hCt.forEach(t),wkr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(aZ,"A",{href:!0});var pCt=s(VJ);Akr=r(pCt,"from_pretrained()"),pCt.forEach(t),ykr=r(aZ," to load the model weights."),aZ.forEach(t),Lkr=i(p0),T($3.$$.fragment,p0),p0.forEach(t),xkr=i(zl),Xr=n(zl,"DIV",{class:!0});var Ql=s(Xr);T(sx.$$.fragment,Ql),$kr=i(Ql),$Fe=n(Ql,"P",{});var uCt=s($Fe);kkr=r(uCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uCt.forEach(t),Skr=i(Ql),un=n(Ql,"P",{});var u0=s(un);Rkr=r(u0,"The model class to instantiate is selected based on the "),kFe=n(u0,"CODE",{});var _Ct=s(kFe);Bkr=r(_Ct,"model_type"),_Ct.forEach(t),Pkr=r(u0,` property of the config object (either
passed as an argument or loaded from `),SFe=n(u0,"CODE",{});var bCt=s(SFe);Ikr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),qkr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(u0,"CODE",{});var vCt=s(RFe);Nkr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),jkr=r(u0,":"),u0.forEach(t),Dkr=i(Ql),De=n(Ql,"UL",{});var Fo=s(De);k3=n(Fo,"LI",{});var hBe=s(k3);BFe=n(hBe,"STRONG",{});var FCt=s(BFe);Gkr=r(FCt,"albert"),FCt.forEach(t),Okr=r(hBe," \u2014 "),XJ=n(hBe,"A",{href:!0});var TCt=s(XJ);Vkr=r(TCt,"FlaxAlbertForTokenClassification"),TCt.forEach(t),Xkr=r(hBe," (ALBERT model)"),hBe.forEach(t),zkr=i(Fo),S3=n(Fo,"LI",{});var pBe=s(S3);PFe=n(pBe,"STRONG",{});var MCt=s(PFe);Qkr=r(MCt,"bert"),MCt.forEach(t),Wkr=r(pBe," \u2014 "),zJ=n(pBe,"A",{href:!0});var ECt=s(zJ);Hkr=r(ECt,"FlaxBertForTokenClassification"),ECt.forEach(t),Ukr=r(pBe," (BERT model)"),pBe.forEach(t),Jkr=i(Fo),R3=n(Fo,"LI",{});var uBe=s(R3);IFe=n(uBe,"STRONG",{});var CCt=s(IFe);Ykr=r(CCt,"big_bird"),CCt.forEach(t),Kkr=r(uBe," \u2014 "),QJ=n(uBe,"A",{href:!0});var wCt=s(QJ);Zkr=r(wCt,"FlaxBigBirdForTokenClassification"),wCt.forEach(t),eSr=r(uBe," (BigBird model)"),uBe.forEach(t),oSr=i(Fo),B3=n(Fo,"LI",{});var _Be=s(B3);qFe=n(_Be,"STRONG",{});var ACt=s(qFe);rSr=r(ACt,"distilbert"),ACt.forEach(t),tSr=r(_Be," \u2014 "),WJ=n(_Be,"A",{href:!0});var yCt=s(WJ);aSr=r(yCt,"FlaxDistilBertForTokenClassification"),yCt.forEach(t),nSr=r(_Be," (DistilBERT model)"),_Be.forEach(t),sSr=i(Fo),P3=n(Fo,"LI",{});var bBe=s(P3);NFe=n(bBe,"STRONG",{});var LCt=s(NFe);lSr=r(LCt,"electra"),LCt.forEach(t),iSr=r(bBe," \u2014 "),HJ=n(bBe,"A",{href:!0});var xCt=s(HJ);dSr=r(xCt,"FlaxElectraForTokenClassification"),xCt.forEach(t),cSr=r(bBe," (ELECTRA model)"),bBe.forEach(t),fSr=i(Fo),I3=n(Fo,"LI",{});var vBe=s(I3);jFe=n(vBe,"STRONG",{});var $Ct=s(jFe);mSr=r($Ct,"roberta"),$Ct.forEach(t),gSr=r(vBe," \u2014 "),UJ=n(vBe,"A",{href:!0});var kCt=s(UJ);hSr=r(kCt,"FlaxRobertaForTokenClassification"),kCt.forEach(t),pSr=r(vBe," (RoBERTa model)"),vBe.forEach(t),uSr=i(Fo),q3=n(Fo,"LI",{});var FBe=s(q3);DFe=n(FBe,"STRONG",{});var SCt=s(DFe);_Sr=r(SCt,"roformer"),SCt.forEach(t),bSr=r(FBe," \u2014 "),JJ=n(FBe,"A",{href:!0});var RCt=s(JJ);vSr=r(RCt,"FlaxRoFormerForTokenClassification"),RCt.forEach(t),FSr=r(FBe," (RoFormer model)"),FBe.forEach(t),TSr=i(Fo),N3=n(Fo,"LI",{});var TBe=s(N3);GFe=n(TBe,"STRONG",{});var BCt=s(GFe);MSr=r(BCt,"xlm-roberta"),BCt.forEach(t),ESr=r(TBe," \u2014 "),YJ=n(TBe,"A",{href:!0});var PCt=s(YJ);CSr=r(PCt,"FlaxXLMRobertaForTokenClassification"),PCt.forEach(t),wSr=r(TBe," (XLM-RoBERTa model)"),TBe.forEach(t),Fo.forEach(t),ASr=i(Ql),T(j3.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),yIe=i(f),Gc=n(f,"H2",{class:!0});var kNe=s(Gc);D3=n(kNe,"A",{id:!0,class:!0,href:!0});var ICt=s(D3);OFe=n(ICt,"SPAN",{});var qCt=s(OFe);T(lx.$$.fragment,qCt),qCt.forEach(t),ICt.forEach(t),ySr=i(kNe),VFe=n(kNe,"SPAN",{});var NCt=s(VFe);LSr=r(NCt,"FlaxAutoModelForMultipleChoice"),NCt.forEach(t),kNe.forEach(t),LIe=i(f),br=n(f,"DIV",{class:!0});var Wl=s(br);T(ix.$$.fragment,Wl),xSr=i(Wl),Oc=n(Wl,"P",{});var nZ=s(Oc);$Sr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),KJ=n(nZ,"A",{href:!0});var jCt=s(KJ);kSr=r(jCt,"from_pretrained()"),jCt.forEach(t),SSr=r(nZ," class method or the "),ZJ=n(nZ,"A",{href:!0});var DCt=s(ZJ);RSr=r(DCt,"from_config()"),DCt.forEach(t),BSr=r(nZ,` class
method.`),nZ.forEach(t),PSr=i(Wl),dx=n(Wl,"P",{});var SNe=s(dx);ISr=r(SNe,"This class cannot be instantiated directly using "),XFe=n(SNe,"CODE",{});var GCt=s(XFe);qSr=r(GCt,"__init__()"),GCt.forEach(t),NSr=r(SNe," (throws an error)."),SNe.forEach(t),jSr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var _0=s(Xt);T(cx.$$.fragment,_0),DSr=i(_0),zFe=n(_0,"P",{});var OCt=s(zFe);GSr=r(OCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OCt.forEach(t),OSr=i(_0),Vc=n(_0,"P",{});var sZ=s(Vc);VSr=r(sZ,`Note:
Loading a model from its configuration file does `),QFe=n(sZ,"STRONG",{});var VCt=s(QFe);XSr=r(VCt,"not"),VCt.forEach(t),zSr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(sZ,"A",{href:!0});var XCt=s(eY);QSr=r(XCt,"from_pretrained()"),XCt.forEach(t),WSr=r(sZ," to load the model weights."),sZ.forEach(t),HSr=i(_0),T(G3.$$.fragment,_0),_0.forEach(t),USr=i(Wl),zr=n(Wl,"DIV",{class:!0});var Hl=s(zr);T(fx.$$.fragment,Hl),JSr=i(Hl),WFe=n(Hl,"P",{});var zCt=s(WFe);YSr=r(zCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zCt.forEach(t),KSr=i(Hl),_n=n(Hl,"P",{});var b0=s(_n);ZSr=r(b0,"The model class to instantiate is selected based on the "),HFe=n(b0,"CODE",{});var QCt=s(HFe);eRr=r(QCt,"model_type"),QCt.forEach(t),oRr=r(b0,` property of the config object (either
passed as an argument or loaded from `),UFe=n(b0,"CODE",{});var WCt=s(UFe);rRr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),tRr=r(b0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(b0,"CODE",{});var HCt=s(JFe);aRr=r(HCt,"pretrained_model_name_or_path"),HCt.forEach(t),nRr=r(b0,":"),b0.forEach(t),sRr=i(Hl),Ge=n(Hl,"UL",{});var To=s(Ge);O3=n(To,"LI",{});var MBe=s(O3);YFe=n(MBe,"STRONG",{});var UCt=s(YFe);lRr=r(UCt,"albert"),UCt.forEach(t),iRr=r(MBe," \u2014 "),oY=n(MBe,"A",{href:!0});var JCt=s(oY);dRr=r(JCt,"FlaxAlbertForMultipleChoice"),JCt.forEach(t),cRr=r(MBe," (ALBERT model)"),MBe.forEach(t),fRr=i(To),V3=n(To,"LI",{});var EBe=s(V3);KFe=n(EBe,"STRONG",{});var YCt=s(KFe);mRr=r(YCt,"bert"),YCt.forEach(t),gRr=r(EBe," \u2014 "),rY=n(EBe,"A",{href:!0});var KCt=s(rY);hRr=r(KCt,"FlaxBertForMultipleChoice"),KCt.forEach(t),pRr=r(EBe," (BERT model)"),EBe.forEach(t),uRr=i(To),X3=n(To,"LI",{});var CBe=s(X3);ZFe=n(CBe,"STRONG",{});var ZCt=s(ZFe);_Rr=r(ZCt,"big_bird"),ZCt.forEach(t),bRr=r(CBe," \u2014 "),tY=n(CBe,"A",{href:!0});var e3t=s(tY);vRr=r(e3t,"FlaxBigBirdForMultipleChoice"),e3t.forEach(t),FRr=r(CBe," (BigBird model)"),CBe.forEach(t),TRr=i(To),z3=n(To,"LI",{});var wBe=s(z3);eTe=n(wBe,"STRONG",{});var o3t=s(eTe);MRr=r(o3t,"distilbert"),o3t.forEach(t),ERr=r(wBe," \u2014 "),aY=n(wBe,"A",{href:!0});var r3t=s(aY);CRr=r(r3t,"FlaxDistilBertForMultipleChoice"),r3t.forEach(t),wRr=r(wBe," (DistilBERT model)"),wBe.forEach(t),ARr=i(To),Q3=n(To,"LI",{});var ABe=s(Q3);oTe=n(ABe,"STRONG",{});var t3t=s(oTe);yRr=r(t3t,"electra"),t3t.forEach(t),LRr=r(ABe," \u2014 "),nY=n(ABe,"A",{href:!0});var a3t=s(nY);xRr=r(a3t,"FlaxElectraForMultipleChoice"),a3t.forEach(t),$Rr=r(ABe," (ELECTRA model)"),ABe.forEach(t),kRr=i(To),W3=n(To,"LI",{});var yBe=s(W3);rTe=n(yBe,"STRONG",{});var n3t=s(rTe);SRr=r(n3t,"roberta"),n3t.forEach(t),RRr=r(yBe," \u2014 "),sY=n(yBe,"A",{href:!0});var s3t=s(sY);BRr=r(s3t,"FlaxRobertaForMultipleChoice"),s3t.forEach(t),PRr=r(yBe," (RoBERTa model)"),yBe.forEach(t),IRr=i(To),H3=n(To,"LI",{});var LBe=s(H3);tTe=n(LBe,"STRONG",{});var l3t=s(tTe);qRr=r(l3t,"roformer"),l3t.forEach(t),NRr=r(LBe," \u2014 "),lY=n(LBe,"A",{href:!0});var i3t=s(lY);jRr=r(i3t,"FlaxRoFormerForMultipleChoice"),i3t.forEach(t),DRr=r(LBe," (RoFormer model)"),LBe.forEach(t),GRr=i(To),U3=n(To,"LI",{});var xBe=s(U3);aTe=n(xBe,"STRONG",{});var d3t=s(aTe);ORr=r(d3t,"xlm-roberta"),d3t.forEach(t),VRr=r(xBe," \u2014 "),iY=n(xBe,"A",{href:!0});var c3t=s(iY);XRr=r(c3t,"FlaxXLMRobertaForMultipleChoice"),c3t.forEach(t),zRr=r(xBe," (XLM-RoBERTa model)"),xBe.forEach(t),To.forEach(t),QRr=i(Hl),T(J3.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),xIe=i(f),Xc=n(f,"H2",{class:!0});var RNe=s(Xc);Y3=n(RNe,"A",{id:!0,class:!0,href:!0});var f3t=s(Y3);nTe=n(f3t,"SPAN",{});var m3t=s(nTe);T(mx.$$.fragment,m3t),m3t.forEach(t),f3t.forEach(t),WRr=i(RNe),sTe=n(RNe,"SPAN",{});var g3t=s(sTe);HRr=r(g3t,"FlaxAutoModelForNextSentencePrediction"),g3t.forEach(t),RNe.forEach(t),$Ie=i(f),vr=n(f,"DIV",{class:!0});var Ul=s(vr);T(gx.$$.fragment,Ul),URr=i(Ul),zc=n(Ul,"P",{});var lZ=s(zc);JRr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dY=n(lZ,"A",{href:!0});var h3t=s(dY);YRr=r(h3t,"from_pretrained()"),h3t.forEach(t),KRr=r(lZ," class method or the "),cY=n(lZ,"A",{href:!0});var p3t=s(cY);ZRr=r(p3t,"from_config()"),p3t.forEach(t),eBr=r(lZ,` class
method.`),lZ.forEach(t),oBr=i(Ul),hx=n(Ul,"P",{});var BNe=s(hx);rBr=r(BNe,"This class cannot be instantiated directly using "),lTe=n(BNe,"CODE",{});var u3t=s(lTe);tBr=r(u3t,"__init__()"),u3t.forEach(t),aBr=r(BNe," (throws an error)."),BNe.forEach(t),nBr=i(Ul),zt=n(Ul,"DIV",{class:!0});var v0=s(zt);T(px.$$.fragment,v0),sBr=i(v0),iTe=n(v0,"P",{});var _3t=s(iTe);lBr=r(_3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_3t.forEach(t),iBr=i(v0),Qc=n(v0,"P",{});var iZ=s(Qc);dBr=r(iZ,`Note:
Loading a model from its configuration file does `),dTe=n(iZ,"STRONG",{});var b3t=s(dTe);cBr=r(b3t,"not"),b3t.forEach(t),fBr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(iZ,"A",{href:!0});var v3t=s(fY);mBr=r(v3t,"from_pretrained()"),v3t.forEach(t),gBr=r(iZ," to load the model weights."),iZ.forEach(t),hBr=i(v0),T(K3.$$.fragment,v0),v0.forEach(t),pBr=i(Ul),Qr=n(Ul,"DIV",{class:!0});var Jl=s(Qr);T(ux.$$.fragment,Jl),uBr=i(Jl),cTe=n(Jl,"P",{});var F3t=s(cTe);_Br=r(F3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),F3t.forEach(t),bBr=i(Jl),bn=n(Jl,"P",{});var F0=s(bn);vBr=r(F0,"The model class to instantiate is selected based on the "),fTe=n(F0,"CODE",{});var T3t=s(fTe);FBr=r(T3t,"model_type"),T3t.forEach(t),TBr=r(F0,` property of the config object (either
passed as an argument or loaded from `),mTe=n(F0,"CODE",{});var M3t=s(mTe);MBr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),EBr=r(F0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gTe=n(F0,"CODE",{});var E3t=s(gTe);CBr=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),wBr=r(F0,":"),F0.forEach(t),ABr=i(Jl),hTe=n(Jl,"UL",{});var C3t=s(hTe);Z3=n(C3t,"LI",{});var $Be=s(Z3);pTe=n($Be,"STRONG",{});var w3t=s(pTe);yBr=r(w3t,"bert"),w3t.forEach(t),LBr=r($Be," \u2014 "),mY=n($Be,"A",{href:!0});var A3t=s(mY);xBr=r(A3t,"FlaxBertForNextSentencePrediction"),A3t.forEach(t),$Br=r($Be," (BERT model)"),$Be.forEach(t),C3t.forEach(t),kBr=i(Jl),T(ew.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),kIe=i(f),Wc=n(f,"H2",{class:!0});var PNe=s(Wc);ow=n(PNe,"A",{id:!0,class:!0,href:!0});var y3t=s(ow);uTe=n(y3t,"SPAN",{});var L3t=s(uTe);T(_x.$$.fragment,L3t),L3t.forEach(t),y3t.forEach(t),SBr=i(PNe),_Te=n(PNe,"SPAN",{});var x3t=s(_Te);RBr=r(x3t,"FlaxAutoModelForImageClassification"),x3t.forEach(t),PNe.forEach(t),SIe=i(f),Fr=n(f,"DIV",{class:!0});var Yl=s(Fr);T(bx.$$.fragment,Yl),BBr=i(Yl),Hc=n(Yl,"P",{});var dZ=s(Hc);PBr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gY=n(dZ,"A",{href:!0});var $3t=s(gY);IBr=r($3t,"from_pretrained()"),$3t.forEach(t),qBr=r(dZ," class method or the "),hY=n(dZ,"A",{href:!0});var k3t=s(hY);NBr=r(k3t,"from_config()"),k3t.forEach(t),jBr=r(dZ,` class
method.`),dZ.forEach(t),DBr=i(Yl),vx=n(Yl,"P",{});var INe=s(vx);GBr=r(INe,"This class cannot be instantiated directly using "),bTe=n(INe,"CODE",{});var S3t=s(bTe);OBr=r(S3t,"__init__()"),S3t.forEach(t),VBr=r(INe," (throws an error)."),INe.forEach(t),XBr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var T0=s(Qt);T(Fx.$$.fragment,T0),zBr=i(T0),vTe=n(T0,"P",{});var R3t=s(vTe);QBr=r(R3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),R3t.forEach(t),WBr=i(T0),Uc=n(T0,"P",{});var cZ=s(Uc);HBr=r(cZ,`Note:
Loading a model from its configuration file does `),FTe=n(cZ,"STRONG",{});var B3t=s(FTe);UBr=r(B3t,"not"),B3t.forEach(t),JBr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(cZ,"A",{href:!0});var P3t=s(pY);YBr=r(P3t,"from_pretrained()"),P3t.forEach(t),KBr=r(cZ," to load the model weights."),cZ.forEach(t),ZBr=i(T0),T(rw.$$.fragment,T0),T0.forEach(t),ePr=i(Yl),Wr=n(Yl,"DIV",{class:!0});var Kl=s(Wr);T(Tx.$$.fragment,Kl),oPr=i(Kl),TTe=n(Kl,"P",{});var I3t=s(TTe);rPr=r(I3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),I3t.forEach(t),tPr=i(Kl),vn=n(Kl,"P",{});var M0=s(vn);aPr=r(M0,"The model class to instantiate is selected based on the "),MTe=n(M0,"CODE",{});var q3t=s(MTe);nPr=r(q3t,"model_type"),q3t.forEach(t),sPr=r(M0,` property of the config object (either
passed as an argument or loaded from `),ETe=n(M0,"CODE",{});var N3t=s(ETe);lPr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),iPr=r(M0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(M0,"CODE",{});var j3t=s(CTe);dPr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),cPr=r(M0,":"),M0.forEach(t),fPr=i(Kl),Mx=n(Kl,"UL",{});var qNe=s(Mx);tw=n(qNe,"LI",{});var kBe=s(tw);wTe=n(kBe,"STRONG",{});var D3t=s(wTe);mPr=r(D3t,"beit"),D3t.forEach(t),gPr=r(kBe," \u2014 "),uY=n(kBe,"A",{href:!0});var G3t=s(uY);hPr=r(G3t,"FlaxBeitForImageClassification"),G3t.forEach(t),pPr=r(kBe," (BEiT model)"),kBe.forEach(t),uPr=i(qNe),aw=n(qNe,"LI",{});var SBe=s(aw);ATe=n(SBe,"STRONG",{});var O3t=s(ATe);_Pr=r(O3t,"vit"),O3t.forEach(t),bPr=r(SBe," \u2014 "),_Y=n(SBe,"A",{href:!0});var V3t=s(_Y);vPr=r(V3t,"FlaxViTForImageClassification"),V3t.forEach(t),FPr=r(SBe," (ViT model)"),SBe.forEach(t),qNe.forEach(t),TPr=i(Kl),T(nw.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),RIe=i(f),Jc=n(f,"H2",{class:!0});var NNe=s(Jc);sw=n(NNe,"A",{id:!0,class:!0,href:!0});var X3t=s(sw);yTe=n(X3t,"SPAN",{});var z3t=s(yTe);T(Ex.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),MPr=i(NNe),LTe=n(NNe,"SPAN",{});var Q3t=s(LTe);EPr=r(Q3t,"FlaxAutoModelForVision2Seq"),Q3t.forEach(t),NNe.forEach(t),BIe=i(f),Tr=n(f,"DIV",{class:!0});var Zl=s(Tr);T(Cx.$$.fragment,Zl),CPr=i(Zl),Yc=n(Zl,"P",{});var fZ=s(Yc);wPr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bY=n(fZ,"A",{href:!0});var W3t=s(bY);APr=r(W3t,"from_pretrained()"),W3t.forEach(t),yPr=r(fZ," class method or the "),vY=n(fZ,"A",{href:!0});var H3t=s(vY);LPr=r(H3t,"from_config()"),H3t.forEach(t),xPr=r(fZ,` class
method.`),fZ.forEach(t),$Pr=i(Zl),wx=n(Zl,"P",{});var jNe=s(wx);kPr=r(jNe,"This class cannot be instantiated directly using "),xTe=n(jNe,"CODE",{});var U3t=s(xTe);SPr=r(U3t,"__init__()"),U3t.forEach(t),RPr=r(jNe," (throws an error)."),jNe.forEach(t),BPr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var E0=s(Wt);T(Ax.$$.fragment,E0),PPr=i(E0),$Te=n(E0,"P",{});var J3t=s($Te);IPr=r(J3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),J3t.forEach(t),qPr=i(E0),Kc=n(E0,"P",{});var mZ=s(Kc);NPr=r(mZ,`Note:
Loading a model from its configuration file does `),kTe=n(mZ,"STRONG",{});var Y3t=s(kTe);jPr=r(Y3t,"not"),Y3t.forEach(t),DPr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(mZ,"A",{href:!0});var K3t=s(FY);GPr=r(K3t,"from_pretrained()"),K3t.forEach(t),OPr=r(mZ," to load the model weights."),mZ.forEach(t),VPr=i(E0),T(lw.$$.fragment,E0),E0.forEach(t),XPr=i(Zl),Hr=n(Zl,"DIV",{class:!0});var ei=s(Hr);T(yx.$$.fragment,ei),zPr=i(ei),STe=n(ei,"P",{});var Z3t=s(STe);QPr=r(Z3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Z3t.forEach(t),WPr=i(ei),Fn=n(ei,"P",{});var C0=s(Fn);HPr=r(C0,"The model class to instantiate is selected based on the "),RTe=n(C0,"CODE",{});var ewt=s(RTe);UPr=r(ewt,"model_type"),ewt.forEach(t),JPr=r(C0,` property of the config object (either
passed as an argument or loaded from `),BTe=n(C0,"CODE",{});var owt=s(BTe);YPr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),KPr=r(C0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PTe=n(C0,"CODE",{});var rwt=s(PTe);ZPr=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),eIr=r(C0,":"),C0.forEach(t),oIr=i(ei),ITe=n(ei,"UL",{});var twt=s(ITe);iw=n(twt,"LI",{});var RBe=s(iw);qTe=n(RBe,"STRONG",{});var awt=s(qTe);rIr=r(awt,"vision-encoder-decoder"),awt.forEach(t),tIr=r(RBe," \u2014 "),TY=n(RBe,"A",{href:!0});var nwt=s(TY);aIr=r(nwt,"FlaxVisionEncoderDecoderModel"),nwt.forEach(t),nIr=r(RBe," (Vision Encoder decoder model)"),RBe.forEach(t),twt.forEach(t),sIr=i(ei),T(dw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(l0t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel"),c(sf,"id","extending-the-auto-classes"),c(sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(df,"id","transformers.AutoConfig"),c(df,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(df,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(Q9,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(W9,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig"),c(H9,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig"),c(U9,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig"),c(J9,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig"),c(Y9,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(K9,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Z9,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(e$,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(o$,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(r$,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig"),c(t$,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig"),c(a$,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig"),c(n$,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig"),c(s$,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig"),c(l$,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig"),c(i$,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(d$,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(c$,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(f$,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig"),c(m$,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(g$,"href","/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(h$,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig"),c(p$,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig"),c(u$,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig"),c(_$,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig"),c(b$,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig"),c(v$,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig"),c(F$,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(T$,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig"),c(M$,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaConfig"),c(E$,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig"),c(C$,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig"),c(w$,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig"),c(A$,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNConfig"),c(y$,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config"),c(L$,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(x$,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig"),c($$,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig"),c(k$,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig"),c(S$,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(R$,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(B$,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(P$,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig"),c(I$,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig"),c(q$,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeConfig"),c(N$,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig"),c(j$,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config"),c(D$,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig"),c(G$,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(O$,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig"),c(V$,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(X$,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(z$,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig"),c(Q$,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config"),c(W$,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(H$,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(U$,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig"),c(J$,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig"),c(Y$,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig"),c(K$,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(Z$,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(ek,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(ok,"href","/docs/transformers/pr_16654/en/model_doc/rag#transformers.RagConfig"),c(rk,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmConfig"),c(tk,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig"),c(ak,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig"),c(nk,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig"),c(sk,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig"),c(lk,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig"),c(ik,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig"),c(dk,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig"),c(ck,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig"),c(fk,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig"),c(mk,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig"),c(gk,"href","/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(hk,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(pk,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(uk,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig"),c(_k,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(bk,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig"),c(vk,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config"),c(Fk,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig"),c(Tk,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig"),c(Mk,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Ek,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRConfig"),c(Ck,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(wk,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Ak,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig"),c(yk,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltConfig"),c(Lk,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(xk,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c($k,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(kk,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig"),c(Sk,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Rk,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Bk,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig"),c(Pk,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig"),c(Ik,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig"),c(qk,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Nk,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(jk,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Dk,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig"),c(Gk,"href","/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosConfig"),c(Ok,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ig,"id","transformers.AutoTokenizer"),c(ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ig,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(Vk,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Xk,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizer"),c(zk,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Qk,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartTokenizer"),c(Wk,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartTokenizerFast"),c(Hk,"href","/docs/transformers/pr_16654/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Uk,"href","/docs/transformers/pr_16654/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Jk,"href","/docs/transformers/pr_16654/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Yk,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),c(Kk,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(eS,"href","/docs/transformers/pr_16654/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(oS,"href","/docs/transformers/pr_16654/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(rS,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(tS,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(aS,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(nS,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(sS,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(lS,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(iS,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(dS,"href","/docs/transformers/pr_16654/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(cS,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertTokenizer"),c(fS,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(mS,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineTokenizer"),c(gS,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPTokenizer"),c(hS,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(pS,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(uS,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(_S,"href","/docs/transformers/pr_16654/en/model_doc/cpm#transformers.CpmTokenizer"),c(bS,"href","/docs/transformers/pr_16654/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(vS,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(FS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),c(TS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(MS,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaTokenizer"),c(ES,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(CS,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(wS,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(AS,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(yS,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(LS,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(xS,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c($S,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraTokenizer"),c(kS,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(SS,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(RS,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetTokenizer"),c(BS,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(PS,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(IS,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelTokenizer"),c(qS,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(NS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(jS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(DS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(GS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(OS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XS,"href","/docs/transformers/pr_16654/en/model_doc/herbert#transformers.HerbertTokenizer"),c(zS,"href","/docs/transformers/pr_16654/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(QS,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(WS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),c(HS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(US,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(JS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(YS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(KS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(ZS,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(eR,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(oR,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDTokenizer"),c(rR,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDTokenizerFast"),c(tR,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerTokenizer"),c(aR,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(nR,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeTokenizer"),c(sR,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(lR,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(iR,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(dR,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianTokenizer"),c(cR,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartTokenizer"),c(fR,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(mR,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(gR,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(hR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),c(pR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),c(uR,"href","/docs/transformers/pr_16654/en/model_doc/mluke#transformers.MLukeTokenizer"),c(_R,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(bR,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(vR,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(FR,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(TR,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5Tokenizer"),c(MR,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5TokenizerFast"),c(ER,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizer"),c(CR,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(wR,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(AR,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(yR,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(LR,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xR,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c($R,"href","/docs/transformers/pr_16654/en/model_doc/phobert#transformers.PhobertTokenizer"),c(kR,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartTokenizer"),c(SR,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(RR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),c(BR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),c(PR,"href","/docs/transformers/pr_16654/en/model_doc/rag#transformers.RagTokenizer"),c(IR,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmTokenizer"),c(qR,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmTokenizerFast"),c(NR,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerTokenizer"),c(jR,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(DR,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertTokenizer"),c(GR,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(OR,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(VR,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(XR,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),c(zR,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(QR,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(WR,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(HR,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(UR,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(JR,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterTokenizer"),c(YR,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(KR,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(ZR,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(eB,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5Tokenizer"),c(oB,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5TokenizerFast"),c(rB,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasTokenizer"),c(tB,"href","/docs/transformers/pr_16654/en/model_doc/tapex#transformers.TapexTokenizer"),c(aB,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(nB,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),c(sB,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),c(lB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(dB,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMTokenizer"),c(cB,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(fB,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMTokenizer"),c(mB,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(gB,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(hB,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(pB,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),c(uB,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(_B,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(bB,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(vB,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizer"),c(FB,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"id","transformers.AutoFeatureExtractor"),c(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(TB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(MB,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(AB,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c($B,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SB,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(NB,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(jB,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zB,"href","/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ph,"id","transformers.AutoProcessor"),c(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ph,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(QB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(WB,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPProcessor"),c(HB,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(UB,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(JB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(KB,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(ZB,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(eP,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRProcessor"),c(oP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(rP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tP,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltProcessor"),c(aP,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(nP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(sP,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bh,"id","transformers.AutoModel"),c(Bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(lP,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iP,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dP,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cP,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertModel"),c(fP,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartModel"),c(mP,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitModel"),c(gP,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel"),c(hP,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(pP,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdModel"),c(uP,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(_P,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(bP,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(vP,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertModel"),c(FP,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineModel"),c(TP,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPModel"),c(MP,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertModel"),c(EP,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextModel"),c(CP,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLModel"),c(wP,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(AP,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(yP,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(LP,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaModel"),c(xP,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c($P,"href","/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(kP,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTModel"),c(SP,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrModel"),c(RP,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertModel"),c(BP,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(PP,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTModel"),c(IP,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraModel"),c(qP,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertModel"),c(NP,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaModel"),c(jP,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetModel"),c(DP,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTModel"),c(GP,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelModel"),c(OP,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelBaseModel"),c(VP,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNModel"),c(XP,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Model"),c(zP,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(QP,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJModel"),c(WP,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertModel"),c(HP,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertModel"),c(UP,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(JP,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(YP,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(KP,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDModel"),c(ZP,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerModel"),c(eI,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeModel"),c(oI,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertModel"),c(rI,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Model"),c(tI,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianModel"),c(aI,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerModel"),c(nI,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartModel"),c(sI,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(lI,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertModel"),c(iI,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetModel"),c(dI,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Model"),c(cI,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerModel"),c(fI,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(mI,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusModel"),c(gI,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverModel"),c(hI,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartModel"),c(pI,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerModel"),c(uI,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(_I,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertModel"),c(bI,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModel"),c(vI,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetModel"),c(FI,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertModel"),c(TI,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetModel"),c(MI,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel"),c(EI,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaModel"),c(CI,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerModel"),c(wI,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerModel"),c(AI,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWModel"),c(yI,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDModel"),c(LI,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(xI,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterModel"),c($I,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(kI,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinModel"),c(SI,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Model"),c(RI,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasModel"),c(BI,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(PI,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechModel"),c(II,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(qI,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanModel"),c(NI,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltModel"),c(jI,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(DI,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertModel"),c(GI,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTModel"),c(OI,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(VI,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(XI,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMModel"),c(zI,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMModel"),c(QI,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMModel"),c(WI,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(HI,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(UI,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(JI,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetModel"),c(YI,"href","/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosModel"),c(KI,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wu,"id","transformers.AutoModelForPreTraining"),c(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(ZI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rq,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForPreTraining"),c(tq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(aq,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForPreTraining"),c(nq,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(sq,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(lq,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(iq,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(dq,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(cq,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(fq,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(mq,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForPreTraining"),c(gq,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(hq,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FlavaForPreTraining"),c(pq,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForPreTraining"),c(uq,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_q,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(bq,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vq,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Fq,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Tq,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Mq,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Eq,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Cq,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(wq,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Aq,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yq,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel"),c(Lq,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(xq,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($q,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kq,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Sq,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Rq,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Bq,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Pq,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Iq,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(qq,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Nq,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Dq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Gq,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p_,"id","transformers.AutoModelForCausalLM"),c(p_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Oq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForCausalLM"),c(Qq,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertLMHeadModel"),c(Wq,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Hq,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Uq,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Jq,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Yq,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Kq,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Zq,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(eN,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(oN,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForCausalLM"),c(rN,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tN,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(aN,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(nN,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianForCausalLM"),c(sN,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForCausalLM"),c(lN,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(iN,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(dN,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(cN,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(fN,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(mN,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(gN,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(hN,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(pN,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(uN,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(_N,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(bN,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vN,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(FN,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(TN,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(MN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(EN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(CN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(wN,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.AutoModelForMaskedLM"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(AN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xN,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMaskedLM"),c($N,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(kN,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMaskedLM"),c(SN,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(RN,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(BN,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(PN,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(IN,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(qN,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(NN,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(DN,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(GN,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(ON,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(VN,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(XN,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(zN,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(QN,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(HN,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(UN,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(JN,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(YN,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(KN,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(ZN,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(ej,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(oj,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(rj,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(tj,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(aj,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(nj,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(lj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ij,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j6,"id","transformers.AutoModelForSeq2SeqLM"),c(j6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j6,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(dj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mj,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(pj,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(uj,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(_j,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(bj,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianMTModel"),c(Tj,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Ej,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Cj,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Lj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s1,"id","transformers.AutoModelForSequenceClassification"),c(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s1,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(xj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($j,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sj,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForMultipleChoice"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(wD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LD,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMultipleChoice"),c($D,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(qD,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ND,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(jD,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(DD,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(GD,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(OD,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(XD,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(zD,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(QD,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(WD,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(HD,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(UD,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(JD,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(YD,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(KD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(eG,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(oG,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForNextSentencePrediction"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(rG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nG,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(sG,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(lG,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(iG,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(dG,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForTokenClassification"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(cG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gG,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(hG,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForTokenClassification"),c(pG,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(uG,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(_G,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForTokenClassification"),c(bG,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(vG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(FG,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(TG,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(MG,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(CG,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(wG,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(AG,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(yG,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(LG,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(xG,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c($G,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(kG,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(SG,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(RG,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(BG,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(PG,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(IG,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(qG,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(NG,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(jG,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(DG,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(GG,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(OG,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(VG,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(XG,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(zG,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.AutoModelForQuestionAnswering"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(QG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UG,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(dO,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c($O,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(RO,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u2,"id","transformers.AutoModelForTableQuestionAnswering"),c(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u2,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(BO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForImageClassification"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(NO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForImageClassification"),c(OO,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(VO,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(XO,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassification"),c(zO,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(QO,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(WO,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(HO,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(UO,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(JO,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(YO,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(KO,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(ZO,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(eV,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForImageClassification"),c(oV,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanForImageClassification"),c(rV,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I2,"id","transformers.AutoModelForVision2Seq"),c(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I2,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(tV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sV,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForAudioClassification"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(lV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cV,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(fV,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(gV,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(hV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(pV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uV,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(_V,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z2,"id","transformers.AutoModelForAudioFrameClassification"),c(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z2,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(bV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(MV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(EV,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(CV,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.AutoModelForCTC"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(wV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(xV,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForCTC"),c($V,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForCTC"),c(kV,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForCTC"),c(SV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(RV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(BV,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(PV,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.AutoModelForSpeechSeq2Seq"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(IV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jV,"href","/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(DV,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w5,"id","transformers.AutoModelForAudioXVector"),c(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w5,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(GV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(zV,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(QV,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(WV,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.AutoModelForMaskedImageModeling"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(HV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(KV,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(ZV,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D5,"id","transformers.AutoModelForObjectDetection"),c(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D5,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(eX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForObjectDetection"),c(aX,"href","/docs/transformers/pr_16654/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.AutoModelForImageSegmentation"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(nX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iX,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y5,"id","transformers.AutoModelForSemanticSegmentation"),c(Y5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y5,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(dX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(gX,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(hX,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(pX,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nv,"id","transformers.AutoModelForInstanceSegmentation"),c(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(uX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.TFAutoModel"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(FX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertModel"),c(CX,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartModel"),c(wX,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertModel"),c(AX,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(yX,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(LX,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertModel"),c(xX,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.TFCLIPModel"),c($X,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertModel"),c(kX,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextModel"),c(SX,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLModel"),c(RX,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(BX,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaModel"),c(PX,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(IX,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(qX,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NX,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraModel"),c(jX,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(DX,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelModel"),c(GX,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(OX,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2Model"),c(VX,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJModel"),c(XX,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.TFHubertModel"),c(zX,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(QX,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDModel"),c(WX,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerModel"),c(HX,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertModel"),c(UX,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianModel"),c(JX,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartModel"),c(YX,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(KX,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetModel"),c(ZX,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5Model"),c(ez,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(oz,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rz,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertModel"),c(tz,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaModel"),c(az,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nz,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(sz,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5Model"),c(lz,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasModel"),c(iz,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dz,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTModel"),c(cz,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(fz,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(mz,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMModel"),c(gz,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hz,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.TFAutoModelForPreTraining"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(pz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vz,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Tz,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Mz,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Ez,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Cz,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wz,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Az,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(yz,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Lz,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xz,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($z,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kz,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Sz,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Bz,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Iz,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qz,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Nz,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jz,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Dz,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.TFAutoModelForCausalLM"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zz,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Qz,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Wz,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Hz,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Uz,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Jz,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Yz,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Kz,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Zz,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oQ,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.TFAutoModelForImageClassification"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sQ,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lQ,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.TFAutoModelForMaskedLM"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.TFAutoModelForMaskedLM"),c(Xd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(mQ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(hQ,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(uQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(_Q,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(bQ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(vQ,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(FQ,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(CQ,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yQ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($Q,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Wd,"class","relative group"),c(kQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(PQ,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(IQ,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(qQ,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(NQ,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(jQ,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianMTModel"),c(DQ,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ST,"id","transformers.TFAutoModelForSequenceClassification"),c(ST,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ST,"href","#transformers.TFAutoModelForSequenceClassification"),c(Jd,"class","relative group"),c(XQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WQ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(eW,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(rW,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(aW,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(nW,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(sW,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(lW,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(iW,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(cW,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fW,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(gW,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(hW,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pW,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(uW,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(_W,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForMultipleChoice"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForMultipleChoice"),c(Zd,"class","relative group"),c(vW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(EW,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(CW,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(wW,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(AW,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(yW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(LW,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(xW,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c($W,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(kW,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(RW,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BW,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(PW,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(IW,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(qW,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(NW,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(rc,"class","relative group"),c(jW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForTokenClassification"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForTokenClassification"),c(nc,"class","relative group"),c(VW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(WW,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(HW,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(UW,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(JW,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(YW,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(KW,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(ZW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(eH,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(oH,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(rH,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(tH,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(aH,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(nH,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(sH,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(lH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(iH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(dH,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(cH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(fH,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForQuestionAnswering"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForQuestionAnswering"),c(ic,"class","relative group"),c(mH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(_H,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(vH,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(FH,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(TH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(MH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(CH,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(xH,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c($H,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(kH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(SH,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(RH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(BH,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.TFAutoModelForVision2Seq"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.TFAutoModelForVision2Seq"),c(fc,"class","relative group"),c(PH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NH,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(hc,"class","relative group"),c(jH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OH,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kE,"id","transformers.FlaxAutoModel"),c(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kE,"href","#transformers.FlaxAutoModel"),c(_c,"class","relative group"),c(VH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertModel"),c(WH,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartModel"),c(HH,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitModel"),c(UH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertModel"),c(JH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(YH,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(KH,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(ZH,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.FlaxCLIPModel"),c(eU,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(oU,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraModel"),c(rU,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(tU,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(aU,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(nU,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianModel"),c(sU,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartModel"),c(lU,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5Model"),c(iU,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(dU,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(cU,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(fU,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5Model"),c(mU,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(gU,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTModel"),c(hU,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(pU,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(uU,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.FlaxAutoModelForCausalLM"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.FlaxAutoModelForCausalLM"),c(Fc,"class","relative group"),c(_U,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(TU,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(MU,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(EU,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(CU,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(wU,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(AU,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(yU,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(LU,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.FlaxAutoModelForPreTraining"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ec,"class","relative group"),c(xU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($U,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SU,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(RU,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(PU,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(IU,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(qU,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(NU,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(DU,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(GU,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(VU,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SC,"id","transformers.FlaxAutoModelForMaskedLM"),c(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Ac,"class","relative group"),c(XU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WU,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(HU,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(UU,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(JU,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(YU,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(KU,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(ZU,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(oJ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(rJ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(xc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(cJ,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(fJ,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mJ,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gJ,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(hJ,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t3,"id","transformers.FlaxAutoModelForSequenceClassification"),c(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t3,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Sc,"class","relative group"),c(pJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Pc,"class","relative group"),c(LJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(qJ,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x3,"id","transformers.FlaxAutoModelForTokenClassification"),c(x3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x3,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Nc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(zJ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(QJ,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(WJ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(HJ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(UJ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(JJ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(YJ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForMultipleChoice"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Gc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(rY,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(tY,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(aY,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(nY,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(sY,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(lY,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(iY,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Y3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Xc,"class","relative group"),c(dY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.FlaxAutoModelForImageClassification"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.FlaxAutoModelForImageClassification"),c(Wc,"class","relative group"),c(gY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uY,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(_Y,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForVision2Seq"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Jc,"class","relative group"),c(bY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,oi),b(f,rf,_),b(f,Kr,_),e(Kr,ri),e(Kr,ti),e(ti,w0),e(Kr,tf),b(f,qe,_),b(f,Xe,_),e(Xe,ai),e(Xe,Mn),e(Mn,A0),e(Xe,En),e(Xe,Cn),e(Cn,y0),e(Xe,ni),e(Xe,wn),e(wn,L0),e(Xe,si),b(f,af,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,D9),e(Ae,li),e(li,G9),e(Ae,O9),b(f,Eo,_),b(f,Fa,_),e(Fa,V9),e(Fa,nf),e(nf,X9),e(Fa,DNe),b(f,BBe,_),b(f,ii,_),e(ii,sf),e(sf,gZ),M(x0,gZ,null),e(ii,GNe),e(ii,hZ),e(hZ,ONe),b(f,PBe,_),b(f,An,_),e(An,VNe),e(An,pZ),e(pZ,XNe),e(An,zNe),e(An,uZ),e(uZ,QNe),e(An,WNe),b(f,IBe,_),M($0,f,_),b(f,qBe,_),b(f,z9,_),e(z9,HNe),b(f,NBe,_),M(lf,f,_),b(f,jBe,_),b(f,di,_),e(di,df),e(df,_Z),M(k0,_Z,null),e(di,UNe),e(di,bZ),e(bZ,JNe),b(f,DBe,_),b(f,Co,_),M(S0,Co,null),e(Co,YNe),e(Co,R0),e(R0,KNe),e(R0,Q9),e(Q9,ZNe),e(R0,eje),e(Co,oje),e(Co,B0),e(B0,rje),e(B0,vZ),e(vZ,tje),e(B0,aje),e(Co,nje),e(Co,Mr),M(P0,Mr,null),e(Mr,sje),e(Mr,FZ),e(FZ,lje),e(Mr,ije),e(Mr,ci),e(ci,dje),e(ci,TZ),e(TZ,cje),e(ci,fje),e(ci,MZ),e(MZ,mje),e(ci,gje),e(Mr,hje),e(Mr,A),e(A,cf),e(cf,EZ),e(EZ,pje),e(cf,uje),e(cf,W9),e(W9,_je),e(cf,bje),e(A,vje),e(A,ff),e(ff,CZ),e(CZ,Fje),e(ff,Tje),e(ff,H9),e(H9,Mje),e(ff,Eje),e(A,Cje),e(A,mf),e(mf,wZ),e(wZ,wje),e(mf,Aje),e(mf,U9),e(U9,yje),e(mf,Lje),e(A,xje),e(A,gf),e(gf,AZ),e(AZ,$je),e(gf,kje),e(gf,J9),e(J9,Sje),e(gf,Rje),e(A,Bje),e(A,hf),e(hf,yZ),e(yZ,Pje),e(hf,Ije),e(hf,Y9),e(Y9,qje),e(hf,Nje),e(A,jje),e(A,pf),e(pf,LZ),e(LZ,Dje),e(pf,Gje),e(pf,K9),e(K9,Oje),e(pf,Vje),e(A,Xje),e(A,uf),e(uf,xZ),e(xZ,zje),e(uf,Qje),e(uf,Z9),e(Z9,Wje),e(uf,Hje),e(A,Uje),e(A,_f),e(_f,$Z),e($Z,Jje),e(_f,Yje),e(_f,e$),e(e$,Kje),e(_f,Zje),e(A,eDe),e(A,bf),e(bf,kZ),e(kZ,oDe),e(bf,rDe),e(bf,o$),e(o$,tDe),e(bf,aDe),e(A,nDe),e(A,vf),e(vf,SZ),e(SZ,sDe),e(vf,lDe),e(vf,r$),e(r$,iDe),e(vf,dDe),e(A,cDe),e(A,Ff),e(Ff,RZ),e(RZ,fDe),e(Ff,mDe),e(Ff,t$),e(t$,gDe),e(Ff,hDe),e(A,pDe),e(A,Tf),e(Tf,BZ),e(BZ,uDe),e(Tf,_De),e(Tf,a$),e(a$,bDe),e(Tf,vDe),e(A,FDe),e(A,Mf),e(Mf,PZ),e(PZ,TDe),e(Mf,MDe),e(Mf,n$),e(n$,EDe),e(Mf,CDe),e(A,wDe),e(A,Ef),e(Ef,IZ),e(IZ,ADe),e(Ef,yDe),e(Ef,s$),e(s$,LDe),e(Ef,xDe),e(A,$De),e(A,Cf),e(Cf,qZ),e(qZ,kDe),e(Cf,SDe),e(Cf,l$),e(l$,RDe),e(Cf,BDe),e(A,PDe),e(A,wf),e(wf,NZ),e(NZ,IDe),e(wf,qDe),e(wf,i$),e(i$,NDe),e(wf,jDe),e(A,DDe),e(A,Af),e(Af,jZ),e(jZ,GDe),e(Af,ODe),e(Af,d$),e(d$,VDe),e(Af,XDe),e(A,zDe),e(A,yf),e(yf,DZ),e(DZ,QDe),e(yf,WDe),e(yf,c$),e(c$,HDe),e(yf,UDe),e(A,JDe),e(A,Lf),e(Lf,GZ),e(GZ,YDe),e(Lf,KDe),e(Lf,f$),e(f$,ZDe),e(Lf,eGe),e(A,oGe),e(A,xf),e(xf,OZ),e(OZ,rGe),e(xf,tGe),e(xf,m$),e(m$,aGe),e(xf,nGe),e(A,sGe),e(A,$f),e($f,VZ),e(VZ,lGe),e($f,iGe),e($f,g$),e(g$,dGe),e($f,cGe),e(A,fGe),e(A,kf),e(kf,XZ),e(XZ,mGe),e(kf,gGe),e(kf,h$),e(h$,hGe),e(kf,pGe),e(A,uGe),e(A,Sf),e(Sf,zZ),e(zZ,_Ge),e(Sf,bGe),e(Sf,p$),e(p$,vGe),e(Sf,FGe),e(A,TGe),e(A,Rf),e(Rf,QZ),e(QZ,MGe),e(Rf,EGe),e(Rf,u$),e(u$,CGe),e(Rf,wGe),e(A,AGe),e(A,Bf),e(Bf,WZ),e(WZ,yGe),e(Bf,LGe),e(Bf,_$),e(_$,xGe),e(Bf,$Ge),e(A,kGe),e(A,Pf),e(Pf,HZ),e(HZ,SGe),e(Pf,RGe),e(Pf,b$),e(b$,BGe),e(Pf,PGe),e(A,IGe),e(A,If),e(If,UZ),e(UZ,qGe),e(If,NGe),e(If,v$),e(v$,jGe),e(If,DGe),e(A,GGe),e(A,qf),e(qf,JZ),e(JZ,OGe),e(qf,VGe),e(qf,F$),e(F$,XGe),e(qf,zGe),e(A,QGe),e(A,Nf),e(Nf,YZ),e(YZ,WGe),e(Nf,HGe),e(Nf,T$),e(T$,UGe),e(Nf,JGe),e(A,YGe),e(A,jf),e(jf,KZ),e(KZ,KGe),e(jf,ZGe),e(jf,M$),e(M$,eOe),e(jf,oOe),e(A,rOe),e(A,Df),e(Df,ZZ),e(ZZ,tOe),e(Df,aOe),e(Df,E$),e(E$,nOe),e(Df,sOe),e(A,lOe),e(A,Gf),e(Gf,eee),e(eee,iOe),e(Gf,dOe),e(Gf,C$),e(C$,cOe),e(Gf,fOe),e(A,mOe),e(A,Of),e(Of,oee),e(oee,gOe),e(Of,hOe),e(Of,w$),e(w$,pOe),e(Of,uOe),e(A,_Oe),e(A,Vf),e(Vf,ree),e(ree,bOe),e(Vf,vOe),e(Vf,A$),e(A$,FOe),e(Vf,TOe),e(A,MOe),e(A,Xf),e(Xf,tee),e(tee,EOe),e(Xf,COe),e(Xf,y$),e(y$,wOe),e(Xf,AOe),e(A,yOe),e(A,zf),e(zf,aee),e(aee,LOe),e(zf,xOe),e(zf,L$),e(L$,$Oe),e(zf,kOe),e(A,SOe),e(A,Qf),e(Qf,nee),e(nee,ROe),e(Qf,BOe),e(Qf,x$),e(x$,POe),e(Qf,IOe),e(A,qOe),e(A,Wf),e(Wf,see),e(see,NOe),e(Wf,jOe),e(Wf,$$),e($$,DOe),e(Wf,GOe),e(A,OOe),e(A,Hf),e(Hf,lee),e(lee,VOe),e(Hf,XOe),e(Hf,k$),e(k$,zOe),e(Hf,QOe),e(A,WOe),e(A,Uf),e(Uf,iee),e(iee,HOe),e(Uf,UOe),e(Uf,S$),e(S$,JOe),e(Uf,YOe),e(A,KOe),e(A,Jf),e(Jf,dee),e(dee,ZOe),e(Jf,eVe),e(Jf,R$),e(R$,oVe),e(Jf,rVe),e(A,tVe),e(A,Yf),e(Yf,cee),e(cee,aVe),e(Yf,nVe),e(Yf,B$),e(B$,sVe),e(Yf,lVe),e(A,iVe),e(A,Kf),e(Kf,fee),e(fee,dVe),e(Kf,cVe),e(Kf,P$),e(P$,fVe),e(Kf,mVe),e(A,gVe),e(A,Zf),e(Zf,mee),e(mee,hVe),e(Zf,pVe),e(Zf,I$),e(I$,uVe),e(Zf,_Ve),e(A,bVe),e(A,em),e(em,gee),e(gee,vVe),e(em,FVe),e(em,q$),e(q$,TVe),e(em,MVe),e(A,EVe),e(A,om),e(om,hee),e(hee,CVe),e(om,wVe),e(om,N$),e(N$,AVe),e(om,yVe),e(A,LVe),e(A,rm),e(rm,pee),e(pee,xVe),e(rm,$Ve),e(rm,j$),e(j$,kVe),e(rm,SVe),e(A,RVe),e(A,tm),e(tm,uee),e(uee,BVe),e(tm,PVe),e(tm,D$),e(D$,IVe),e(tm,qVe),e(A,NVe),e(A,am),e(am,_ee),e(_ee,jVe),e(am,DVe),e(am,G$),e(G$,GVe),e(am,OVe),e(A,VVe),e(A,nm),e(nm,bee),e(bee,XVe),e(nm,zVe),e(nm,O$),e(O$,QVe),e(nm,WVe),e(A,HVe),e(A,sm),e(sm,vee),e(vee,UVe),e(sm,JVe),e(sm,V$),e(V$,YVe),e(sm,KVe),e(A,ZVe),e(A,lm),e(lm,Fee),e(Fee,eXe),e(lm,oXe),e(lm,X$),e(X$,rXe),e(lm,tXe),e(A,aXe),e(A,im),e(im,Tee),e(Tee,nXe),e(im,sXe),e(im,z$),e(z$,lXe),e(im,iXe),e(A,dXe),e(A,dm),e(dm,Mee),e(Mee,cXe),e(dm,fXe),e(dm,Q$),e(Q$,mXe),e(dm,gXe),e(A,hXe),e(A,cm),e(cm,Eee),e(Eee,pXe),e(cm,uXe),e(cm,W$),e(W$,_Xe),e(cm,bXe),e(A,vXe),e(A,fm),e(fm,Cee),e(Cee,FXe),e(fm,TXe),e(fm,H$),e(H$,MXe),e(fm,EXe),e(A,CXe),e(A,mm),e(mm,wee),e(wee,wXe),e(mm,AXe),e(mm,U$),e(U$,yXe),e(mm,LXe),e(A,xXe),e(A,gm),e(gm,Aee),e(Aee,$Xe),e(gm,kXe),e(gm,J$),e(J$,SXe),e(gm,RXe),e(A,BXe),e(A,hm),e(hm,yee),e(yee,PXe),e(hm,IXe),e(hm,Y$),e(Y$,qXe),e(hm,NXe),e(A,jXe),e(A,pm),e(pm,Lee),e(Lee,DXe),e(pm,GXe),e(pm,K$),e(K$,OXe),e(pm,VXe),e(A,XXe),e(A,um),e(um,xee),e(xee,zXe),e(um,QXe),e(um,Z$),e(Z$,WXe),e(um,HXe),e(A,UXe),e(A,_m),e(_m,$ee),e($ee,JXe),e(_m,YXe),e(_m,ek),e(ek,KXe),e(_m,ZXe),e(A,eze),e(A,bm),e(bm,kee),e(kee,oze),e(bm,rze),e(bm,ok),e(ok,tze),e(bm,aze),e(A,nze),e(A,vm),e(vm,See),e(See,sze),e(vm,lze),e(vm,rk),e(rk,ize),e(vm,dze),e(A,cze),e(A,Fm),e(Fm,Ree),e(Ree,fze),e(Fm,mze),e(Fm,tk),e(tk,gze),e(Fm,hze),e(A,pze),e(A,Tm),e(Tm,Bee),e(Bee,uze),e(Tm,_ze),e(Tm,ak),e(ak,bze),e(Tm,vze),e(A,Fze),e(A,Mm),e(Mm,Pee),e(Pee,Tze),e(Mm,Mze),e(Mm,nk),e(nk,Eze),e(Mm,Cze),e(A,wze),e(A,Em),e(Em,Iee),e(Iee,Aze),e(Em,yze),e(Em,sk),e(sk,Lze),e(Em,xze),e(A,$ze),e(A,Cm),e(Cm,qee),e(qee,kze),e(Cm,Sze),e(Cm,lk),e(lk,Rze),e(Cm,Bze),e(A,Pze),e(A,wm),e(wm,Nee),e(Nee,Ize),e(wm,qze),e(wm,ik),e(ik,Nze),e(wm,jze),e(A,Dze),e(A,Am),e(Am,jee),e(jee,Gze),e(Am,Oze),e(Am,dk),e(dk,Vze),e(Am,Xze),e(A,zze),e(A,ym),e(ym,Dee),e(Dee,Qze),e(ym,Wze),e(ym,ck),e(ck,Hze),e(ym,Uze),e(A,Jze),e(A,Lm),e(Lm,Gee),e(Gee,Yze),e(Lm,Kze),e(Lm,fk),e(fk,Zze),e(Lm,eQe),e(A,oQe),e(A,xm),e(xm,Oee),e(Oee,rQe),e(xm,tQe),e(xm,mk),e(mk,aQe),e(xm,nQe),e(A,sQe),e(A,$m),e($m,Vee),e(Vee,lQe),e($m,iQe),e($m,gk),e(gk,dQe),e($m,cQe),e(A,fQe),e(A,km),e(km,Xee),e(Xee,mQe),e(km,gQe),e(km,hk),e(hk,hQe),e(km,pQe),e(A,uQe),e(A,Sm),e(Sm,zee),e(zee,_Qe),e(Sm,bQe),e(Sm,pk),e(pk,vQe),e(Sm,FQe),e(A,TQe),e(A,Rm),e(Rm,Qee),e(Qee,MQe),e(Rm,EQe),e(Rm,uk),e(uk,CQe),e(Rm,wQe),e(A,AQe),e(A,Bm),e(Bm,Wee),e(Wee,yQe),e(Bm,LQe),e(Bm,_k),e(_k,xQe),e(Bm,$Qe),e(A,kQe),e(A,Pm),e(Pm,Hee),e(Hee,SQe),e(Pm,RQe),e(Pm,bk),e(bk,BQe),e(Pm,PQe),e(A,IQe),e(A,Im),e(Im,Uee),e(Uee,qQe),e(Im,NQe),e(Im,vk),e(vk,jQe),e(Im,DQe),e(A,GQe),e(A,qm),e(qm,Jee),e(Jee,OQe),e(qm,VQe),e(qm,Fk),e(Fk,XQe),e(qm,zQe),e(A,QQe),e(A,Nm),e(Nm,Yee),e(Yee,WQe),e(Nm,HQe),e(Nm,Tk),e(Tk,UQe),e(Nm,JQe),e(A,YQe),e(A,jm),e(jm,Kee),e(Kee,KQe),e(jm,ZQe),e(jm,Mk),e(Mk,eWe),e(jm,oWe),e(A,rWe),e(A,Dm),e(Dm,Zee),e(Zee,tWe),e(Dm,aWe),e(Dm,Ek),e(Ek,nWe),e(Dm,sWe),e(A,lWe),e(A,Gm),e(Gm,eoe),e(eoe,iWe),e(Gm,dWe),e(Gm,Ck),e(Ck,cWe),e(Gm,fWe),e(A,mWe),e(A,Om),e(Om,ooe),e(ooe,gWe),e(Om,hWe),e(Om,wk),e(wk,pWe),e(Om,uWe),e(A,_We),e(A,Vm),e(Vm,roe),e(roe,bWe),e(Vm,vWe),e(Vm,Ak),e(Ak,FWe),e(Vm,TWe),e(A,MWe),e(A,Xm),e(Xm,toe),e(toe,EWe),e(Xm,CWe),e(Xm,yk),e(yk,wWe),e(Xm,AWe),e(A,yWe),e(A,zm),e(zm,aoe),e(aoe,LWe),e(zm,xWe),e(zm,Lk),e(Lk,$We),e(zm,kWe),e(A,SWe),e(A,Qm),e(Qm,noe),e(noe,RWe),e(Qm,BWe),e(Qm,xk),e(xk,PWe),e(Qm,IWe),e(A,qWe),e(A,Wm),e(Wm,soe),e(soe,NWe),e(Wm,jWe),e(Wm,$k),e($k,DWe),e(Wm,GWe),e(A,OWe),e(A,Hm),e(Hm,loe),e(loe,VWe),e(Hm,XWe),e(Hm,kk),e(kk,zWe),e(Hm,QWe),e(A,WWe),e(A,Um),e(Um,ioe),e(ioe,HWe),e(Um,UWe),e(Um,Sk),e(Sk,JWe),e(Um,YWe),e(A,KWe),e(A,Jm),e(Jm,doe),e(doe,ZWe),e(Jm,eHe),e(Jm,Rk),e(Rk,oHe),e(Jm,rHe),e(A,tHe),e(A,Ym),e(Ym,coe),e(coe,aHe),e(Ym,nHe),e(Ym,Bk),e(Bk,sHe),e(Ym,lHe),e(A,iHe),e(A,Km),e(Km,foe),e(foe,dHe),e(Km,cHe),e(Km,Pk),e(Pk,fHe),e(Km,mHe),e(A,gHe),e(A,Zm),e(Zm,moe),e(moe,hHe),e(Zm,pHe),e(Zm,Ik),e(Ik,uHe),e(Zm,_He),e(A,bHe),e(A,eg),e(eg,goe),e(goe,vHe),e(eg,FHe),e(eg,qk),e(qk,THe),e(eg,MHe),e(A,EHe),e(A,og),e(og,hoe),e(hoe,CHe),e(og,wHe),e(og,Nk),e(Nk,AHe),e(og,yHe),e(A,LHe),e(A,rg),e(rg,poe),e(poe,xHe),e(rg,$He),e(rg,jk),e(jk,kHe),e(rg,SHe),e(A,RHe),e(A,tg),e(tg,uoe),e(uoe,BHe),e(tg,PHe),e(tg,Dk),e(Dk,IHe),e(tg,qHe),e(A,NHe),e(A,ag),e(ag,_oe),e(_oe,jHe),e(ag,DHe),e(ag,Gk),e(Gk,GHe),e(ag,OHe),e(A,VHe),e(A,ng),e(ng,boe),e(boe,XHe),e(ng,zHe),e(ng,Ok),e(Ok,QHe),e(ng,WHe),e(Mr,HHe),M(sg,Mr,null),e(Co,UHe),e(Co,lg),M(I0,lg,null),e(lg,JHe),e(lg,voe),e(voe,YHe),b(f,GBe,_),b(f,fi,_),e(fi,ig),e(ig,Foe),M(q0,Foe,null),e(fi,KHe),e(fi,Toe),e(Toe,ZHe),b(f,OBe,_),b(f,wo,_),M(N0,wo,null),e(wo,eUe),e(wo,j0),e(j0,oUe),e(j0,Vk),e(Vk,rUe),e(j0,tUe),e(wo,aUe),e(wo,D0),e(D0,nUe),e(D0,Moe),e(Moe,sUe),e(D0,lUe),e(wo,iUe),e(wo,Er),M(G0,Er,null),e(Er,dUe),e(Er,Eoe),e(Eoe,cUe),e(Er,fUe),e(Er,Ta),e(Ta,mUe),e(Ta,Coe),e(Coe,gUe),e(Ta,hUe),e(Ta,woe),e(woe,pUe),e(Ta,uUe),e(Ta,Aoe),e(Aoe,_Ue),e(Ta,bUe),e(Er,vUe),e(Er,k),e(k,yn),e(yn,yoe),e(yoe,FUe),e(yn,TUe),e(yn,Xk),e(Xk,MUe),e(yn,EUe),e(yn,zk),e(zk,CUe),e(yn,wUe),e(k,AUe),e(k,Ln),e(Ln,Loe),e(Loe,yUe),e(Ln,LUe),e(Ln,Qk),e(Qk,xUe),e(Ln,$Ue),e(Ln,Wk),e(Wk,kUe),e(Ln,SUe),e(k,RUe),e(k,xn),e(xn,xoe),e(xoe,BUe),e(xn,PUe),e(xn,Hk),e(Hk,IUe),e(xn,qUe),e(xn,Uk),e(Uk,NUe),e(xn,jUe),e(k,DUe),e(k,dg),e(dg,$oe),e($oe,GUe),e(dg,OUe),e(dg,Jk),e(Jk,VUe),e(dg,XUe),e(k,zUe),e(k,$n),e($n,koe),e(koe,QUe),e($n,WUe),e($n,Yk),e(Yk,HUe),e($n,UUe),e($n,Kk),e(Kk,JUe),e($n,YUe),e(k,KUe),e(k,cg),e(cg,Soe),e(Soe,ZUe),e(cg,eJe),e(cg,Zk),e(Zk,oJe),e(cg,rJe),e(k,tJe),e(k,fg),e(fg,Roe),e(Roe,aJe),e(fg,nJe),e(fg,eS),e(eS,sJe),e(fg,lJe),e(k,iJe),e(k,mg),e(mg,Boe),e(Boe,dJe),e(mg,cJe),e(mg,oS),e(oS,fJe),e(mg,mJe),e(k,gJe),e(k,kn),e(kn,Poe),e(Poe,hJe),e(kn,pJe),e(kn,rS),e(rS,uJe),e(kn,_Je),e(kn,tS),e(tS,bJe),e(kn,vJe),e(k,FJe),e(k,Sn),e(Sn,Ioe),e(Ioe,TJe),e(Sn,MJe),e(Sn,aS),e(aS,EJe),e(Sn,CJe),e(Sn,nS),e(nS,wJe),e(Sn,AJe),e(k,yJe),e(k,Rn),e(Rn,qoe),e(qoe,LJe),e(Rn,xJe),e(Rn,sS),e(sS,$Je),e(Rn,kJe),e(Rn,lS),e(lS,SJe),e(Rn,RJe),e(k,BJe),e(k,gg),e(gg,Noe),e(Noe,PJe),e(gg,IJe),e(gg,iS),e(iS,qJe),e(gg,NJe),e(k,jJe),e(k,hg),e(hg,joe),e(joe,DJe),e(hg,GJe),e(hg,dS),e(dS,OJe),e(hg,VJe),e(k,XJe),e(k,Bn),e(Bn,Doe),e(Doe,zJe),e(Bn,QJe),e(Bn,cS),e(cS,WJe),e(Bn,HJe),e(Bn,fS),e(fS,UJe),e(Bn,JJe),e(k,YJe),e(k,pg),e(pg,Goe),e(Goe,KJe),e(pg,ZJe),e(pg,mS),e(mS,eYe),e(pg,oYe),e(k,rYe),e(k,Pn),e(Pn,Ooe),e(Ooe,tYe),e(Pn,aYe),e(Pn,gS),e(gS,nYe),e(Pn,sYe),e(Pn,hS),e(hS,lYe),e(Pn,iYe),e(k,dYe),e(k,In),e(In,Voe),e(Voe,cYe),e(In,fYe),e(In,pS),e(pS,mYe),e(In,gYe),e(In,uS),e(uS,hYe),e(In,pYe),e(k,uYe),e(k,qn),e(qn,Xoe),e(Xoe,_Ye),e(qn,bYe),e(qn,_S),e(_S,vYe),e(qn,FYe),e(qn,bS),e(bS,TYe),e(qn,MYe),e(k,EYe),e(k,ug),e(ug,zoe),e(zoe,CYe),e(ug,wYe),e(ug,vS),e(vS,AYe),e(ug,yYe),e(k,LYe),e(k,Nn),e(Nn,Qoe),e(Qoe,xYe),e(Nn,$Ye),e(Nn,FS),e(FS,kYe),e(Nn,SYe),e(Nn,TS),e(TS,RYe),e(Nn,BYe),e(k,PYe),e(k,jn),e(jn,Woe),e(Woe,IYe),e(jn,qYe),e(jn,MS),e(MS,NYe),e(jn,jYe),e(jn,ES),e(ES,DYe),e(jn,GYe),e(k,OYe),e(k,Dn),e(Dn,Hoe),e(Hoe,VYe),e(Dn,XYe),e(Dn,CS),e(CS,zYe),e(Dn,QYe),e(Dn,wS),e(wS,WYe),e(Dn,HYe),e(k,UYe),e(k,Gn),e(Gn,Uoe),e(Uoe,JYe),e(Gn,YYe),e(Gn,AS),e(AS,KYe),e(Gn,ZYe),e(Gn,yS),e(yS,eKe),e(Gn,oKe),e(k,rKe),e(k,On),e(On,Joe),e(Joe,tKe),e(On,aKe),e(On,LS),e(LS,nKe),e(On,sKe),e(On,xS),e(xS,lKe),e(On,iKe),e(k,dKe),e(k,Vn),e(Vn,Yoe),e(Yoe,cKe),e(Vn,fKe),e(Vn,$S),e($S,mKe),e(Vn,gKe),e(Vn,kS),e(kS,hKe),e(Vn,pKe),e(k,uKe),e(k,_g),e(_g,Koe),e(Koe,_Ke),e(_g,bKe),e(_g,SS),e(SS,vKe),e(_g,FKe),e(k,TKe),e(k,Xn),e(Xn,Zoe),e(Zoe,MKe),e(Xn,EKe),e(Xn,RS),e(RS,CKe),e(Xn,wKe),e(Xn,BS),e(BS,AKe),e(Xn,yKe),e(k,LKe),e(k,bg),e(bg,ere),e(ere,xKe),e(bg,$Ke),e(bg,PS),e(PS,kKe),e(bg,SKe),e(k,RKe),e(k,zn),e(zn,ore),e(ore,BKe),e(zn,PKe),e(zn,IS),e(IS,IKe),e(zn,qKe),e(zn,qS),e(qS,NKe),e(zn,jKe),e(k,DKe),e(k,Qn),e(Qn,rre),e(rre,GKe),e(Qn,OKe),e(Qn,NS),e(NS,VKe),e(Qn,XKe),e(Qn,jS),e(jS,zKe),e(Qn,QKe),e(k,WKe),e(k,Wn),e(Wn,tre),e(tre,HKe),e(Wn,UKe),e(Wn,DS),e(DS,JKe),e(Wn,YKe),e(Wn,GS),e(GS,KKe),e(Wn,ZKe),e(k,eZe),e(k,Hn),e(Hn,are),e(are,oZe),e(Hn,rZe),e(Hn,OS),e(OS,tZe),e(Hn,aZe),e(Hn,VS),e(VS,nZe),e(Hn,sZe),e(k,lZe),e(k,Un),e(Un,nre),e(nre,iZe),e(Un,dZe),e(Un,XS),e(XS,cZe),e(Un,fZe),e(Un,zS),e(zS,mZe),e(Un,gZe),e(k,hZe),e(k,vg),e(vg,sre),e(sre,pZe),e(vg,uZe),e(vg,QS),e(QS,_Ze),e(vg,bZe),e(k,vZe),e(k,Jn),e(Jn,lre),e(lre,FZe),e(Jn,TZe),e(Jn,WS),e(WS,MZe),e(Jn,EZe),e(Jn,HS),e(HS,CZe),e(Jn,wZe),e(k,AZe),e(k,Yn),e(Yn,ire),e(ire,yZe),e(Yn,LZe),e(Yn,US),e(US,xZe),e(Yn,$Ze),e(Yn,JS),e(JS,kZe),e(Yn,SZe),e(k,RZe),e(k,Kn),e(Kn,dre),e(dre,BZe),e(Kn,PZe),e(Kn,YS),e(YS,IZe),e(Kn,qZe),e(Kn,KS),e(KS,NZe),e(Kn,jZe),e(k,DZe),e(k,Zn),e(Zn,cre),e(cre,GZe),e(Zn,OZe),e(Zn,ZS),e(ZS,VZe),e(Zn,XZe),e(Zn,eR),e(eR,zZe),e(Zn,QZe),e(k,WZe),e(k,es),e(es,fre),e(fre,HZe),e(es,UZe),e(es,oR),e(oR,JZe),e(es,YZe),e(es,rR),e(rR,KZe),e(es,ZZe),e(k,eeo),e(k,os),e(os,mre),e(mre,oeo),e(os,reo),e(os,tR),e(tR,teo),e(os,aeo),e(os,aR),e(aR,neo),e(os,seo),e(k,leo),e(k,Fg),e(Fg,gre),e(gre,ieo),e(Fg,deo),e(Fg,nR),e(nR,ceo),e(Fg,feo),e(k,meo),e(k,rs),e(rs,hre),e(hre,geo),e(rs,heo),e(rs,sR),e(sR,peo),e(rs,ueo),e(rs,lR),e(lR,_eo),e(rs,beo),e(k,veo),e(k,Tg),e(Tg,pre),e(pre,Feo),e(Tg,Teo),e(Tg,iR),e(iR,Meo),e(Tg,Eeo),e(k,Ceo),e(k,Mg),e(Mg,ure),e(ure,weo),e(Mg,Aeo),e(Mg,dR),e(dR,yeo),e(Mg,Leo),e(k,xeo),e(k,ts),e(ts,_re),e(_re,$eo),e(ts,keo),e(ts,cR),e(cR,Seo),e(ts,Reo),e(ts,fR),e(fR,Beo),e(ts,Peo),e(k,Ieo),e(k,as),e(as,bre),e(bre,qeo),e(as,Neo),e(as,mR),e(mR,jeo),e(as,Deo),e(as,gR),e(gR,Geo),e(as,Oeo),e(k,Veo),e(k,ns),e(ns,vre),e(vre,Xeo),e(ns,zeo),e(ns,hR),e(hR,Qeo),e(ns,Weo),e(ns,pR),e(pR,Heo),e(ns,Ueo),e(k,Jeo),e(k,Eg),e(Eg,Fre),e(Fre,Yeo),e(Eg,Keo),e(Eg,uR),e(uR,Zeo),e(Eg,eoo),e(k,ooo),e(k,ss),e(ss,Tre),e(Tre,roo),e(ss,too),e(ss,_R),e(_R,aoo),e(ss,noo),e(ss,bR),e(bR,soo),e(ss,loo),e(k,ioo),e(k,ls),e(ls,Mre),e(Mre,doo),e(ls,coo),e(ls,vR),e(vR,foo),e(ls,moo),e(ls,FR),e(FR,goo),e(ls,hoo),e(k,poo),e(k,is),e(is,Ere),e(Ere,uoo),e(is,_oo),e(is,TR),e(TR,boo),e(is,voo),e(is,MR),e(MR,Foo),e(is,Too),e(k,Moo),e(k,ds),e(ds,Cre),e(Cre,Eoo),e(ds,Coo),e(ds,ER),e(ER,woo),e(ds,Aoo),e(ds,CR),e(CR,yoo),e(ds,Loo),e(k,xoo),e(k,cs),e(cs,wre),e(wre,$oo),e(cs,koo),e(cs,wR),e(wR,Soo),e(cs,Roo),e(cs,AR),e(AR,Boo),e(cs,Poo),e(k,Ioo),e(k,fs),e(fs,Are),e(Are,qoo),e(fs,Noo),e(fs,yR),e(yR,joo),e(fs,Doo),e(fs,LR),e(LR,Goo),e(fs,Ooo),e(k,Voo),e(k,Cg),e(Cg,yre),e(yre,Xoo),e(Cg,zoo),e(Cg,xR),e(xR,Qoo),e(Cg,Woo),e(k,Hoo),e(k,wg),e(wg,Lre),e(Lre,Uoo),e(wg,Joo),e(wg,$R),e($R,Yoo),e(wg,Koo),e(k,Zoo),e(k,Ag),e(Ag,xre),e(xre,ero),e(Ag,oro),e(Ag,kR),e(kR,rro),e(Ag,tro),e(k,aro),e(k,yg),e(yg,$re),e($re,nro),e(yg,sro),e(yg,SR),e(SR,lro),e(yg,iro),e(k,dro),e(k,ms),e(ms,kre),e(kre,cro),e(ms,fro),e(ms,RR),e(RR,mro),e(ms,gro),e(ms,BR),e(BR,hro),e(ms,pro),e(k,uro),e(k,Lg),e(Lg,Sre),e(Sre,_ro),e(Lg,bro),e(Lg,PR),e(PR,vro),e(Lg,Fro),e(k,Tro),e(k,gs),e(gs,Rre),e(Rre,Mro),e(gs,Ero),e(gs,IR),e(IR,Cro),e(gs,wro),e(gs,qR),e(qR,Aro),e(gs,yro),e(k,Lro),e(k,hs),e(hs,Bre),e(Bre,xro),e(hs,$ro),e(hs,NR),e(NR,kro),e(hs,Sro),e(hs,jR),e(jR,Rro),e(hs,Bro),e(k,Pro),e(k,ps),e(ps,Pre),e(Pre,Iro),e(ps,qro),e(ps,DR),e(DR,Nro),e(ps,jro),e(ps,GR),e(GR,Dro),e(ps,Gro),e(k,Oro),e(k,us),e(us,Ire),e(Ire,Vro),e(us,Xro),e(us,OR),e(OR,zro),e(us,Qro),e(us,VR),e(VR,Wro),e(us,Hro),e(k,Uro),e(k,_s),e(_s,qre),e(qre,Jro),e(_s,Yro),e(_s,XR),e(XR,Kro),e(_s,Zro),e(_s,zR),e(zR,eto),e(_s,oto),e(k,rto),e(k,bs),e(bs,Nre),e(Nre,tto),e(bs,ato),e(bs,QR),e(QR,nto),e(bs,sto),e(bs,WR),e(WR,lto),e(bs,ito),e(k,dto),e(k,xg),e(xg,jre),e(jre,cto),e(xg,fto),e(xg,HR),e(HR,mto),e(xg,gto),e(k,hto),e(k,$g),e($g,Dre),e(Dre,pto),e($g,uto),e($g,UR),e(UR,_to),e($g,bto),e(k,vto),e(k,vs),e(vs,Gre),e(Gre,Fto),e(vs,Tto),e(vs,JR),e(JR,Mto),e(vs,Eto),e(vs,YR),e(YR,Cto),e(vs,wto),e(k,Ato),e(k,Fs),e(Fs,Ore),e(Ore,yto),e(Fs,Lto),e(Fs,KR),e(KR,xto),e(Fs,$to),e(Fs,ZR),e(ZR,kto),e(Fs,Sto),e(k,Rto),e(k,Ts),e(Ts,Vre),e(Vre,Bto),e(Ts,Pto),e(Ts,eB),e(eB,Ito),e(Ts,qto),e(Ts,oB),e(oB,Nto),e(Ts,jto),e(k,Dto),e(k,kg),e(kg,Xre),e(Xre,Gto),e(kg,Oto),e(kg,rB),e(rB,Vto),e(kg,Xto),e(k,zto),e(k,Sg),e(Sg,zre),e(zre,Qto),e(Sg,Wto),e(Sg,tB),e(tB,Hto),e(Sg,Uto),e(k,Jto),e(k,Rg),e(Rg,Qre),e(Qre,Yto),e(Rg,Kto),e(Rg,aB),e(aB,Zto),e(Rg,eao),e(k,oao),e(k,Ms),e(Ms,Wre),e(Wre,rao),e(Ms,tao),e(Ms,nB),e(nB,aao),e(Ms,nao),e(Ms,sB),e(sB,sao),e(Ms,lao),e(k,iao),e(k,Bg),e(Bg,Hre),e(Hre,dao),e(Bg,cao),e(Bg,lB),e(lB,fao),e(Bg,mao),e(k,gao),e(k,Pg),e(Pg,Ure),e(Ure,hao),e(Pg,pao),e(Pg,iB),e(iB,uao),e(Pg,_ao),e(k,bao),e(k,Es),e(Es,Jre),e(Jre,vao),e(Es,Fao),e(Es,dB),e(dB,Tao),e(Es,Mao),e(Es,cB),e(cB,Eao),e(Es,Cao),e(k,wao),e(k,Ig),e(Ig,Yre),e(Yre,Aao),e(Ig,yao),e(Ig,fB),e(fB,Lao),e(Ig,xao),e(k,$ao),e(k,qg),e(qg,Kre),e(Kre,kao),e(qg,Sao),e(qg,mB),e(mB,Rao),e(qg,Bao),e(k,Pao),e(k,Cs),e(Cs,Zre),e(Zre,Iao),e(Cs,qao),e(Cs,gB),e(gB,Nao),e(Cs,jao),e(Cs,hB),e(hB,Dao),e(Cs,Gao),e(k,Oao),e(k,ws),e(ws,ete),e(ete,Vao),e(ws,Xao),e(ws,pB),e(pB,zao),e(ws,Qao),e(ws,uB),e(uB,Wao),e(ws,Hao),e(k,Uao),e(k,As),e(As,ote),e(ote,Jao),e(As,Yao),e(As,_B),e(_B,Kao),e(As,Zao),e(As,bB),e(bB,eno),e(As,ono),e(k,rno),e(k,ys),e(ys,rte),e(rte,tno),e(ys,ano),e(ys,vB),e(vB,nno),e(ys,sno),e(ys,FB),e(FB,lno),e(ys,ino),e(Er,dno),M(Ng,Er,null),e(wo,cno),e(wo,jg),M(O0,jg,null),e(jg,fno),e(jg,tte),e(tte,mno),b(f,VBe,_),b(f,mi,_),e(mi,Dg),e(Dg,ate),M(V0,ate,null),e(mi,gno),e(mi,nte),e(nte,hno),b(f,XBe,_),b(f,Ao,_),M(X0,Ao,null),e(Ao,pno),e(Ao,z0),e(z0,uno),e(z0,TB),e(TB,_no),e(z0,bno),e(Ao,vno),e(Ao,Q0),e(Q0,Fno),e(Q0,ste),e(ste,Tno),e(Q0,Mno),e(Ao,Eno),e(Ao,Qe),M(W0,Qe,null),e(Qe,Cno),e(Qe,lte),e(lte,wno),e(Qe,Ano),e(Qe,Ma),e(Ma,yno),e(Ma,ite),e(ite,Lno),e(Ma,xno),e(Ma,dte),e(dte,$no),e(Ma,kno),e(Ma,cte),e(cte,Sno),e(Ma,Rno),e(Qe,Bno),e(Qe,oe),e(oe,Gg),e(Gg,fte),e(fte,Pno),e(Gg,Ino),e(Gg,MB),e(MB,qno),e(Gg,Nno),e(oe,jno),e(oe,Og),e(Og,mte),e(mte,Dno),e(Og,Gno),e(Og,EB),e(EB,Ono),e(Og,Vno),e(oe,Xno),e(oe,Vg),e(Vg,gte),e(gte,zno),e(Vg,Qno),e(Vg,CB),e(CB,Wno),e(Vg,Hno),e(oe,Uno),e(oe,Xg),e(Xg,hte),e(hte,Jno),e(Xg,Yno),e(Xg,wB),e(wB,Kno),e(Xg,Zno),e(oe,eso),e(oe,zg),e(zg,pte),e(pte,oso),e(zg,rso),e(zg,AB),e(AB,tso),e(zg,aso),e(oe,nso),e(oe,Qg),e(Qg,ute),e(ute,sso),e(Qg,lso),e(Qg,yB),e(yB,iso),e(Qg,dso),e(oe,cso),e(oe,Wg),e(Wg,_te),e(_te,fso),e(Wg,mso),e(Wg,LB),e(LB,gso),e(Wg,hso),e(oe,pso),e(oe,Hg),e(Hg,bte),e(bte,uso),e(Hg,_so),e(Hg,xB),e(xB,bso),e(Hg,vso),e(oe,Fso),e(oe,Ug),e(Ug,vte),e(vte,Tso),e(Ug,Mso),e(Ug,Fte),e(Fte,Eso),e(Ug,Cso),e(oe,wso),e(oe,Jg),e(Jg,Tte),e(Tte,Aso),e(Jg,yso),e(Jg,$B),e($B,Lso),e(Jg,xso),e(oe,$so),e(oe,Yg),e(Yg,Mte),e(Mte,kso),e(Yg,Sso),e(Yg,kB),e(kB,Rso),e(Yg,Bso),e(oe,Pso),e(oe,Kg),e(Kg,Ete),e(Ete,Iso),e(Kg,qso),e(Kg,SB),e(SB,Nso),e(Kg,jso),e(oe,Dso),e(oe,Zg),e(Zg,Cte),e(Cte,Gso),e(Zg,Oso),e(Zg,RB),e(RB,Vso),e(Zg,Xso),e(oe,zso),e(oe,eh),e(eh,wte),e(wte,Qso),e(eh,Wso),e(eh,BB),e(BB,Hso),e(eh,Uso),e(oe,Jso),e(oe,oh),e(oh,Ate),e(Ate,Yso),e(oh,Kso),e(oh,PB),e(PB,Zso),e(oh,elo),e(oe,olo),e(oe,rh),e(rh,yte),e(yte,rlo),e(rh,tlo),e(rh,IB),e(IB,alo),e(rh,nlo),e(oe,slo),e(oe,th),e(th,Lte),e(Lte,llo),e(th,ilo),e(th,qB),e(qB,dlo),e(th,clo),e(oe,flo),e(oe,ah),e(ah,xte),e(xte,mlo),e(ah,glo),e(ah,NB),e(NB,hlo),e(ah,plo),e(oe,ulo),e(oe,nh),e(nh,$te),e($te,_lo),e(nh,blo),e(nh,jB),e(jB,vlo),e(nh,Flo),e(oe,Tlo),e(oe,sh),e(sh,kte),e(kte,Mlo),e(sh,Elo),e(sh,DB),e(DB,Clo),e(sh,wlo),e(oe,Alo),e(oe,lh),e(lh,Ste),e(Ste,ylo),e(lh,Llo),e(lh,GB),e(GB,xlo),e(lh,$lo),e(oe,klo),e(oe,ih),e(ih,Rte),e(Rte,Slo),e(ih,Rlo),e(ih,OB),e(OB,Blo),e(ih,Plo),e(oe,Ilo),e(oe,dh),e(dh,Bte),e(Bte,qlo),e(dh,Nlo),e(dh,VB),e(VB,jlo),e(dh,Dlo),e(oe,Glo),e(oe,ch),e(ch,Pte),e(Pte,Olo),e(ch,Vlo),e(ch,XB),e(XB,Xlo),e(ch,zlo),e(oe,Qlo),e(oe,fh),e(fh,Ite),e(Ite,Wlo),e(fh,Hlo),e(fh,zB),e(zB,Ulo),e(fh,Jlo),e(Qe,Ylo),M(mh,Qe,null),e(Qe,Klo),M(gh,Qe,null),e(Ao,Zlo),e(Ao,hh),M(H0,hh,null),e(hh,eio),e(hh,qte),e(qte,oio),b(f,zBe,_),b(f,gi,_),e(gi,ph),e(ph,Nte),M(U0,Nte,null),e(gi,rio),e(gi,jte),e(jte,tio),b(f,QBe,_),b(f,yo,_),M(J0,yo,null),e(yo,aio),e(yo,Y0),e(Y0,nio),e(Y0,QB),e(QB,sio),e(Y0,lio),e(yo,iio),e(yo,K0),e(K0,dio),e(K0,Dte),e(Dte,cio),e(K0,fio),e(yo,mio),e(yo,We),M(Z0,We,null),e(We,gio),e(We,Gte),e(Gte,hio),e(We,pio),e(We,hi),e(hi,uio),e(hi,Ote),e(Ote,_io),e(hi,bio),e(hi,Vte),e(Vte,vio),e(hi,Fio),e(We,Tio),e(We,be),e(be,uh),e(uh,Xte),e(Xte,Mio),e(uh,Eio),e(uh,WB),e(WB,Cio),e(uh,wio),e(be,Aio),e(be,_h),e(_h,zte),e(zte,yio),e(_h,Lio),e(_h,Qte),e(Qte,xio),e(_h,$io),e(be,kio),e(be,bh),e(bh,Wte),e(Wte,Sio),e(bh,Rio),e(bh,HB),e(HB,Bio),e(bh,Pio),e(be,Iio),e(be,vh),e(vh,Hte),e(Hte,qio),e(vh,Nio),e(vh,UB),e(UB,jio),e(vh,Dio),e(be,Gio),e(be,Fh),e(Fh,Ute),e(Ute,Oio),e(Fh,Vio),e(Fh,JB),e(JB,Xio),e(Fh,zio),e(be,Qio),e(be,Th),e(Th,Jte),e(Jte,Wio),e(Th,Hio),e(Th,YB),e(YB,Uio),e(Th,Jio),e(be,Yio),e(be,Mh),e(Mh,Yte),e(Yte,Kio),e(Mh,Zio),e(Mh,KB),e(KB,edo),e(Mh,odo),e(be,rdo),e(be,Eh),e(Eh,Kte),e(Kte,tdo),e(Eh,ado),e(Eh,ZB),e(ZB,ndo),e(Eh,sdo),e(be,ldo),e(be,Ch),e(Ch,Zte),e(Zte,ido),e(Ch,ddo),e(Ch,eP),e(eP,cdo),e(Ch,fdo),e(be,mdo),e(be,wh),e(wh,eae),e(eae,gdo),e(wh,hdo),e(wh,oP),e(oP,pdo),e(wh,udo),e(be,_do),e(be,Ah),e(Ah,oae),e(oae,bdo),e(Ah,vdo),e(Ah,rP),e(rP,Fdo),e(Ah,Tdo),e(be,Mdo),e(be,yh),e(yh,rae),e(rae,Edo),e(yh,Cdo),e(yh,tP),e(tP,wdo),e(yh,Ado),e(be,ydo),e(be,Lh),e(Lh,tae),e(tae,Ldo),e(Lh,xdo),e(Lh,aP),e(aP,$do),e(Lh,kdo),e(be,Sdo),e(be,xh),e(xh,aae),e(aae,Rdo),e(xh,Bdo),e(xh,nP),e(nP,Pdo),e(xh,Ido),e(be,qdo),e(be,$h),e($h,nae),e(nae,Ndo),e($h,jdo),e($h,sP),e(sP,Ddo),e($h,Gdo),e(We,Odo),M(kh,We,null),e(We,Vdo),M(Sh,We,null),e(yo,Xdo),e(yo,Rh),M(ey,Rh,null),e(Rh,zdo),e(Rh,sae),e(sae,Qdo),b(f,WBe,_),b(f,pi,_),e(pi,Bh),e(Bh,lae),M(oy,lae,null),e(pi,Wdo),e(pi,iae),e(iae,Hdo),b(f,HBe,_),b(f,Lo,_),M(ry,Lo,null),e(Lo,Udo),e(Lo,ui),e(ui,Jdo),e(ui,lP),e(lP,Ydo),e(ui,Kdo),e(ui,iP),e(iP,Zdo),e(ui,eco),e(Lo,oco),e(Lo,ty),e(ty,rco),e(ty,dae),e(dae,tco),e(ty,aco),e(Lo,nco),e(Lo,Zr),M(ay,Zr,null),e(Zr,sco),e(Zr,cae),e(cae,lco),e(Zr,ico),e(Zr,_i),e(_i,dco),e(_i,fae),e(fae,cco),e(_i,fco),e(_i,dP),e(dP,mco),e(_i,gco),e(Zr,hco),M(Ph,Zr,null),e(Lo,pco),e(Lo,He),M(ny,He,null),e(He,uco),e(He,mae),e(mae,_co),e(He,bco),e(He,Ea),e(Ea,vco),e(Ea,gae),e(gae,Fco),e(Ea,Tco),e(Ea,hae),e(hae,Mco),e(Ea,Eco),e(Ea,pae),e(pae,Cco),e(Ea,wco),e(He,Aco),e(He,x),e(x,Ih),e(Ih,uae),e(uae,yco),e(Ih,Lco),e(Ih,cP),e(cP,xco),e(Ih,$co),e(x,kco),e(x,qh),e(qh,_ae),e(_ae,Sco),e(qh,Rco),e(qh,fP),e(fP,Bco),e(qh,Pco),e(x,Ico),e(x,Nh),e(Nh,bae),e(bae,qco),e(Nh,Nco),e(Nh,mP),e(mP,jco),e(Nh,Dco),e(x,Gco),e(x,jh),e(jh,vae),e(vae,Oco),e(jh,Vco),e(jh,gP),e(gP,Xco),e(jh,zco),e(x,Qco),e(x,Dh),e(Dh,Fae),e(Fae,Wco),e(Dh,Hco),e(Dh,hP),e(hP,Uco),e(Dh,Jco),e(x,Yco),e(x,Gh),e(Gh,Tae),e(Tae,Kco),e(Gh,Zco),e(Gh,pP),e(pP,efo),e(Gh,ofo),e(x,rfo),e(x,Oh),e(Oh,Mae),e(Mae,tfo),e(Oh,afo),e(Oh,uP),e(uP,nfo),e(Oh,sfo),e(x,lfo),e(x,Vh),e(Vh,Eae),e(Eae,ifo),e(Vh,dfo),e(Vh,_P),e(_P,cfo),e(Vh,ffo),e(x,mfo),e(x,Xh),e(Xh,Cae),e(Cae,gfo),e(Xh,hfo),e(Xh,bP),e(bP,pfo),e(Xh,ufo),e(x,_fo),e(x,zh),e(zh,wae),e(wae,bfo),e(zh,vfo),e(zh,vP),e(vP,Ffo),e(zh,Tfo),e(x,Mfo),e(x,Qh),e(Qh,Aae),e(Aae,Efo),e(Qh,Cfo),e(Qh,FP),e(FP,wfo),e(Qh,Afo),e(x,yfo),e(x,Wh),e(Wh,yae),e(yae,Lfo),e(Wh,xfo),e(Wh,TP),e(TP,$fo),e(Wh,kfo),e(x,Sfo),e(x,Hh),e(Hh,Lae),e(Lae,Rfo),e(Hh,Bfo),e(Hh,MP),e(MP,Pfo),e(Hh,Ifo),e(x,qfo),e(x,Uh),e(Uh,xae),e(xae,Nfo),e(Uh,jfo),e(Uh,EP),e(EP,Dfo),e(Uh,Gfo),e(x,Ofo),e(x,Jh),e(Jh,$ae),e($ae,Vfo),e(Jh,Xfo),e(Jh,CP),e(CP,zfo),e(Jh,Qfo),e(x,Wfo),e(x,Yh),e(Yh,kae),e(kae,Hfo),e(Yh,Ufo),e(Yh,wP),e(wP,Jfo),e(Yh,Yfo),e(x,Kfo),e(x,Kh),e(Kh,Sae),e(Sae,Zfo),e(Kh,emo),e(Kh,AP),e(AP,omo),e(Kh,rmo),e(x,tmo),e(x,Zh),e(Zh,Rae),e(Rae,amo),e(Zh,nmo),e(Zh,yP),e(yP,smo),e(Zh,lmo),e(x,imo),e(x,ep),e(ep,Bae),e(Bae,dmo),e(ep,cmo),e(ep,LP),e(LP,fmo),e(ep,mmo),e(x,gmo),e(x,op),e(op,Pae),e(Pae,hmo),e(op,pmo),e(op,xP),e(xP,umo),e(op,_mo),e(x,bmo),e(x,rp),e(rp,Iae),e(Iae,vmo),e(rp,Fmo),e(rp,$P),e($P,Tmo),e(rp,Mmo),e(x,Emo),e(x,tp),e(tp,qae),e(qae,Cmo),e(tp,wmo),e(tp,kP),e(kP,Amo),e(tp,ymo),e(x,Lmo),e(x,ap),e(ap,Nae),e(Nae,xmo),e(ap,$mo),e(ap,SP),e(SP,kmo),e(ap,Smo),e(x,Rmo),e(x,np),e(np,jae),e(jae,Bmo),e(np,Pmo),e(np,RP),e(RP,Imo),e(np,qmo),e(x,Nmo),e(x,sp),e(sp,Dae),e(Dae,jmo),e(sp,Dmo),e(sp,BP),e(BP,Gmo),e(sp,Omo),e(x,Vmo),e(x,lp),e(lp,Gae),e(Gae,Xmo),e(lp,zmo),e(lp,PP),e(PP,Qmo),e(lp,Wmo),e(x,Hmo),e(x,ip),e(ip,Oae),e(Oae,Umo),e(ip,Jmo),e(ip,IP),e(IP,Ymo),e(ip,Kmo),e(x,Zmo),e(x,dp),e(dp,Vae),e(Vae,ego),e(dp,ogo),e(dp,qP),e(qP,rgo),e(dp,tgo),e(x,ago),e(x,cp),e(cp,Xae),e(Xae,ngo),e(cp,sgo),e(cp,NP),e(NP,lgo),e(cp,igo),e(x,dgo),e(x,fp),e(fp,zae),e(zae,cgo),e(fp,fgo),e(fp,jP),e(jP,mgo),e(fp,ggo),e(x,hgo),e(x,mp),e(mp,Qae),e(Qae,pgo),e(mp,ugo),e(mp,DP),e(DP,_go),e(mp,bgo),e(x,vgo),e(x,Ls),e(Ls,Wae),e(Wae,Fgo),e(Ls,Tgo),e(Ls,GP),e(GP,Mgo),e(Ls,Ego),e(Ls,OP),e(OP,Cgo),e(Ls,wgo),e(x,Ago),e(x,gp),e(gp,Hae),e(Hae,ygo),e(gp,Lgo),e(gp,VP),e(VP,xgo),e(gp,$go),e(x,kgo),e(x,hp),e(hp,Uae),e(Uae,Sgo),e(hp,Rgo),e(hp,XP),e(XP,Bgo),e(hp,Pgo),e(x,Igo),e(x,pp),e(pp,Jae),e(Jae,qgo),e(pp,Ngo),e(pp,zP),e(zP,jgo),e(pp,Dgo),e(x,Ggo),e(x,up),e(up,Yae),e(Yae,Ogo),e(up,Vgo),e(up,QP),e(QP,Xgo),e(up,zgo),e(x,Qgo),e(x,_p),e(_p,Kae),e(Kae,Wgo),e(_p,Hgo),e(_p,WP),e(WP,Ugo),e(_p,Jgo),e(x,Ygo),e(x,bp),e(bp,Zae),e(Zae,Kgo),e(bp,Zgo),e(bp,HP),e(HP,eho),e(bp,oho),e(x,rho),e(x,vp),e(vp,ene),e(ene,tho),e(vp,aho),e(vp,UP),e(UP,nho),e(vp,sho),e(x,lho),e(x,Fp),e(Fp,one),e(one,iho),e(Fp,dho),e(Fp,JP),e(JP,cho),e(Fp,fho),e(x,mho),e(x,Tp),e(Tp,rne),e(rne,gho),e(Tp,hho),e(Tp,YP),e(YP,pho),e(Tp,uho),e(x,_ho),e(x,Mp),e(Mp,tne),e(tne,bho),e(Mp,vho),e(Mp,KP),e(KP,Fho),e(Mp,Tho),e(x,Mho),e(x,Ep),e(Ep,ane),e(ane,Eho),e(Ep,Cho),e(Ep,ZP),e(ZP,who),e(Ep,Aho),e(x,yho),e(x,Cp),e(Cp,nne),e(nne,Lho),e(Cp,xho),e(Cp,eI),e(eI,$ho),e(Cp,kho),e(x,Sho),e(x,wp),e(wp,sne),e(sne,Rho),e(wp,Bho),e(wp,oI),e(oI,Pho),e(wp,Iho),e(x,qho),e(x,Ap),e(Ap,lne),e(lne,Nho),e(Ap,jho),e(Ap,rI),e(rI,Dho),e(Ap,Gho),e(x,Oho),e(x,yp),e(yp,ine),e(ine,Vho),e(yp,Xho),e(yp,tI),e(tI,zho),e(yp,Qho),e(x,Who),e(x,Lp),e(Lp,dne),e(dne,Hho),e(Lp,Uho),e(Lp,aI),e(aI,Jho),e(Lp,Yho),e(x,Kho),e(x,xp),e(xp,cne),e(cne,Zho),e(xp,epo),e(xp,nI),e(nI,opo),e(xp,rpo),e(x,tpo),e(x,$p),e($p,fne),e(fne,apo),e($p,npo),e($p,sI),e(sI,spo),e($p,lpo),e(x,ipo),e(x,kp),e(kp,mne),e(mne,dpo),e(kp,cpo),e(kp,lI),e(lI,fpo),e(kp,mpo),e(x,gpo),e(x,Sp),e(Sp,gne),e(gne,hpo),e(Sp,ppo),e(Sp,iI),e(iI,upo),e(Sp,_po),e(x,bpo),e(x,Rp),e(Rp,hne),e(hne,vpo),e(Rp,Fpo),e(Rp,dI),e(dI,Tpo),e(Rp,Mpo),e(x,Epo),e(x,Bp),e(Bp,pne),e(pne,Cpo),e(Bp,wpo),e(Bp,cI),e(cI,Apo),e(Bp,ypo),e(x,Lpo),e(x,Pp),e(Pp,une),e(une,xpo),e(Pp,$po),e(Pp,fI),e(fI,kpo),e(Pp,Spo),e(x,Rpo),e(x,Ip),e(Ip,_ne),e(_ne,Bpo),e(Ip,Ppo),e(Ip,mI),e(mI,Ipo),e(Ip,qpo),e(x,Npo),e(x,qp),e(qp,bne),e(bne,jpo),e(qp,Dpo),e(qp,gI),e(gI,Gpo),e(qp,Opo),e(x,Vpo),e(x,Np),e(Np,vne),e(vne,Xpo),e(Np,zpo),e(Np,hI),e(hI,Qpo),e(Np,Wpo),e(x,Hpo),e(x,jp),e(jp,Fne),e(Fne,Upo),e(jp,Jpo),e(jp,pI),e(pI,Ypo),e(jp,Kpo),e(x,Zpo),e(x,Dp),e(Dp,Tne),e(Tne,euo),e(Dp,ouo),e(Dp,uI),e(uI,ruo),e(Dp,tuo),e(x,auo),e(x,Gp),e(Gp,Mne),e(Mne,nuo),e(Gp,suo),e(Gp,_I),e(_I,luo),e(Gp,iuo),e(x,duo),e(x,Op),e(Op,Ene),e(Ene,cuo),e(Op,fuo),e(Op,bI),e(bI,muo),e(Op,guo),e(x,huo),e(x,Vp),e(Vp,Cne),e(Cne,puo),e(Vp,uuo),e(Vp,vI),e(vI,_uo),e(Vp,buo),e(x,vuo),e(x,Xp),e(Xp,wne),e(wne,Fuo),e(Xp,Tuo),e(Xp,FI),e(FI,Muo),e(Xp,Euo),e(x,Cuo),e(x,zp),e(zp,Ane),e(Ane,wuo),e(zp,Auo),e(zp,TI),e(TI,yuo),e(zp,Luo),e(x,xuo),e(x,Qp),e(Qp,yne),e(yne,$uo),e(Qp,kuo),e(Qp,MI),e(MI,Suo),e(Qp,Ruo),e(x,Buo),e(x,Wp),e(Wp,Lne),e(Lne,Puo),e(Wp,Iuo),e(Wp,EI),e(EI,quo),e(Wp,Nuo),e(x,juo),e(x,Hp),e(Hp,xne),e(xne,Duo),e(Hp,Guo),e(Hp,CI),e(CI,Ouo),e(Hp,Vuo),e(x,Xuo),e(x,Up),e(Up,$ne),e($ne,zuo),e(Up,Quo),e(Up,wI),e(wI,Wuo),e(Up,Huo),e(x,Uuo),e(x,Jp),e(Jp,kne),e(kne,Juo),e(Jp,Yuo),e(Jp,AI),e(AI,Kuo),e(Jp,Zuo),e(x,e_o),e(x,Yp),e(Yp,Sne),e(Sne,o_o),e(Yp,r_o),e(Yp,yI),e(yI,t_o),e(Yp,a_o),e(x,n_o),e(x,Kp),e(Kp,Rne),e(Rne,s_o),e(Kp,l_o),e(Kp,LI),e(LI,i_o),e(Kp,d_o),e(x,c_o),e(x,Zp),e(Zp,Bne),e(Bne,f_o),e(Zp,m_o),e(Zp,xI),e(xI,g_o),e(Zp,h_o),e(x,p_o),e(x,eu),e(eu,Pne),e(Pne,u_o),e(eu,__o),e(eu,$I),e($I,b_o),e(eu,v_o),e(x,F_o),e(x,ou),e(ou,Ine),e(Ine,T_o),e(ou,M_o),e(ou,kI),e(kI,E_o),e(ou,C_o),e(x,w_o),e(x,ru),e(ru,qne),e(qne,A_o),e(ru,y_o),e(ru,SI),e(SI,L_o),e(ru,x_o),e(x,$_o),e(x,tu),e(tu,Nne),e(Nne,k_o),e(tu,S_o),e(tu,RI),e(RI,R_o),e(tu,B_o),e(x,P_o),e(x,au),e(au,jne),e(jne,I_o),e(au,q_o),e(au,BI),e(BI,N_o),e(au,j_o),e(x,D_o),e(x,nu),e(nu,Dne),e(Dne,G_o),e(nu,O_o),e(nu,PI),e(PI,V_o),e(nu,X_o),e(x,z_o),e(x,su),e(su,Gne),e(Gne,Q_o),e(su,W_o),e(su,II),e(II,H_o),e(su,U_o),e(x,J_o),e(x,lu),e(lu,One),e(One,Y_o),e(lu,K_o),e(lu,qI),e(qI,Z_o),e(lu,e6o),e(x,o6o),e(x,iu),e(iu,Vne),e(Vne,r6o),e(iu,t6o),e(iu,NI),e(NI,a6o),e(iu,n6o),e(x,s6o),e(x,du),e(du,Xne),e(Xne,l6o),e(du,i6o),e(du,jI),e(jI,d6o),e(du,c6o),e(x,f6o),e(x,cu),e(cu,zne),e(zne,m6o),e(cu,g6o),e(cu,DI),e(DI,h6o),e(cu,p6o),e(x,u6o),e(x,fu),e(fu,Qne),e(Qne,_6o),e(fu,b6o),e(fu,GI),e(GI,v6o),e(fu,F6o),e(x,T6o),e(x,mu),e(mu,Wne),e(Wne,M6o),e(mu,E6o),e(mu,OI),e(OI,C6o),e(mu,w6o),e(x,A6o),e(x,gu),e(gu,Hne),e(Hne,y6o),e(gu,L6o),e(gu,VI),e(VI,x6o),e(gu,$6o),e(x,k6o),e(x,hu),e(hu,Une),e(Une,S6o),e(hu,R6o),e(hu,XI),e(XI,B6o),e(hu,P6o),e(x,I6o),e(x,pu),e(pu,Jne),e(Jne,q6o),e(pu,N6o),e(pu,zI),e(zI,j6o),e(pu,D6o),e(x,G6o),e(x,uu),e(uu,Yne),e(Yne,O6o),e(uu,V6o),e(uu,QI),e(QI,X6o),e(uu,z6o),e(x,Q6o),e(x,_u),e(_u,Kne),e(Kne,W6o),e(_u,H6o),e(_u,WI),e(WI,U6o),e(_u,J6o),e(x,Y6o),e(x,bu),e(bu,Zne),e(Zne,K6o),e(bu,Z6o),e(bu,HI),e(HI,e1o),e(bu,o1o),e(x,r1o),e(x,vu),e(vu,ese),e(ese,t1o),e(vu,a1o),e(vu,UI),e(UI,n1o),e(vu,s1o),e(x,l1o),e(x,Fu),e(Fu,ose),e(ose,i1o),e(Fu,d1o),e(Fu,JI),e(JI,c1o),e(Fu,f1o),e(x,m1o),e(x,Tu),e(Tu,rse),e(rse,g1o),e(Tu,h1o),e(Tu,YI),e(YI,p1o),e(Tu,u1o),e(x,_1o),e(x,Mu),e(Mu,tse),e(tse,b1o),e(Mu,v1o),e(Mu,KI),e(KI,F1o),e(Mu,T1o),e(He,M1o),e(He,Eu),e(Eu,E1o),e(Eu,ase),e(ase,C1o),e(Eu,w1o),e(Eu,nse),e(nse,A1o),e(He,y1o),M(Cu,He,null),b(f,UBe,_),b(f,bi,_),e(bi,wu),e(wu,sse),M(sy,sse,null),e(bi,L1o),e(bi,lse),e(lse,x1o),b(f,JBe,_),b(f,xo,_),M(ly,xo,null),e(xo,$1o),e(xo,vi),e(vi,k1o),e(vi,ZI),e(ZI,S1o),e(vi,R1o),e(vi,eq),e(eq,B1o),e(vi,P1o),e(xo,I1o),e(xo,iy),e(iy,q1o),e(iy,ise),e(ise,N1o),e(iy,j1o),e(xo,D1o),e(xo,et),M(dy,et,null),e(et,G1o),e(et,dse),e(dse,O1o),e(et,V1o),e(et,Fi),e(Fi,X1o),e(Fi,cse),e(cse,z1o),e(Fi,Q1o),e(Fi,oq),e(oq,W1o),e(Fi,H1o),e(et,U1o),M(Au,et,null),e(xo,J1o),e(xo,Ue),M(cy,Ue,null),e(Ue,Y1o),e(Ue,fse),e(fse,K1o),e(Ue,Z1o),e(Ue,Ca),e(Ca,ebo),e(Ca,mse),e(mse,obo),e(Ca,rbo),e(Ca,gse),e(gse,tbo),e(Ca,abo),e(Ca,hse),e(hse,nbo),e(Ca,sbo),e(Ue,lbo),e(Ue,G),e(G,yu),e(yu,pse),e(pse,ibo),e(yu,dbo),e(yu,rq),e(rq,cbo),e(yu,fbo),e(G,mbo),e(G,Lu),e(Lu,use),e(use,gbo),e(Lu,hbo),e(Lu,tq),e(tq,pbo),e(Lu,ubo),e(G,_bo),e(G,xu),e(xu,_se),e(_se,bbo),e(xu,vbo),e(xu,aq),e(aq,Fbo),e(xu,Tbo),e(G,Mbo),e(G,$u),e($u,bse),e(bse,Ebo),e($u,Cbo),e($u,nq),e(nq,wbo),e($u,Abo),e(G,ybo),e(G,ku),e(ku,vse),e(vse,Lbo),e(ku,xbo),e(ku,sq),e(sq,$bo),e(ku,kbo),e(G,Sbo),e(G,Su),e(Su,Fse),e(Fse,Rbo),e(Su,Bbo),e(Su,lq),e(lq,Pbo),e(Su,Ibo),e(G,qbo),e(G,Ru),e(Ru,Tse),e(Tse,Nbo),e(Ru,jbo),e(Ru,iq),e(iq,Dbo),e(Ru,Gbo),e(G,Obo),e(G,Bu),e(Bu,Mse),e(Mse,Vbo),e(Bu,Xbo),e(Bu,dq),e(dq,zbo),e(Bu,Qbo),e(G,Wbo),e(G,Pu),e(Pu,Ese),e(Ese,Hbo),e(Pu,Ubo),e(Pu,cq),e(cq,Jbo),e(Pu,Ybo),e(G,Kbo),e(G,Iu),e(Iu,Cse),e(Cse,Zbo),e(Iu,e4o),e(Iu,fq),e(fq,o4o),e(Iu,r4o),e(G,t4o),e(G,qu),e(qu,wse),e(wse,a4o),e(qu,n4o),e(qu,mq),e(mq,s4o),e(qu,l4o),e(G,i4o),e(G,Nu),e(Nu,Ase),e(Ase,d4o),e(Nu,c4o),e(Nu,gq),e(gq,f4o),e(Nu,m4o),e(G,g4o),e(G,ju),e(ju,yse),e(yse,h4o),e(ju,p4o),e(ju,hq),e(hq,u4o),e(ju,_4o),e(G,b4o),e(G,Du),e(Du,Lse),e(Lse,v4o),e(Du,F4o),e(Du,pq),e(pq,T4o),e(Du,M4o),e(G,E4o),e(G,Gu),e(Gu,xse),e(xse,C4o),e(Gu,w4o),e(Gu,uq),e(uq,A4o),e(Gu,y4o),e(G,L4o),e(G,Ou),e(Ou,$se),e($se,x4o),e(Ou,$4o),e(Ou,_q),e(_q,k4o),e(Ou,S4o),e(G,R4o),e(G,Vu),e(Vu,kse),e(kse,B4o),e(Vu,P4o),e(Vu,bq),e(bq,I4o),e(Vu,q4o),e(G,N4o),e(G,Xu),e(Xu,Sse),e(Sse,j4o),e(Xu,D4o),e(Xu,vq),e(vq,G4o),e(Xu,O4o),e(G,V4o),e(G,zu),e(zu,Rse),e(Rse,X4o),e(zu,z4o),e(zu,Fq),e(Fq,Q4o),e(zu,W4o),e(G,H4o),e(G,Qu),e(Qu,Bse),e(Bse,U4o),e(Qu,J4o),e(Qu,Tq),e(Tq,Y4o),e(Qu,K4o),e(G,Z4o),e(G,Wu),e(Wu,Pse),e(Pse,e2o),e(Wu,o2o),e(Wu,Mq),e(Mq,r2o),e(Wu,t2o),e(G,a2o),e(G,Hu),e(Hu,Ise),e(Ise,n2o),e(Hu,s2o),e(Hu,Eq),e(Eq,l2o),e(Hu,i2o),e(G,d2o),e(G,Uu),e(Uu,qse),e(qse,c2o),e(Uu,f2o),e(Uu,Cq),e(Cq,m2o),e(Uu,g2o),e(G,h2o),e(G,Ju),e(Ju,Nse),e(Nse,p2o),e(Ju,u2o),e(Ju,wq),e(wq,_2o),e(Ju,b2o),e(G,v2o),e(G,Yu),e(Yu,jse),e(jse,F2o),e(Yu,T2o),e(Yu,Aq),e(Aq,M2o),e(Yu,E2o),e(G,C2o),e(G,Ku),e(Ku,Dse),e(Dse,w2o),e(Ku,A2o),e(Ku,yq),e(yq,y2o),e(Ku,L2o),e(G,x2o),e(G,Zu),e(Zu,Gse),e(Gse,$2o),e(Zu,k2o),e(Zu,Lq),e(Lq,S2o),e(Zu,R2o),e(G,B2o),e(G,e_),e(e_,Ose),e(Ose,P2o),e(e_,I2o),e(e_,xq),e(xq,q2o),e(e_,N2o),e(G,j2o),e(G,o_),e(o_,Vse),e(Vse,D2o),e(o_,G2o),e(o_,$q),e($q,O2o),e(o_,V2o),e(G,X2o),e(G,r_),e(r_,Xse),e(Xse,z2o),e(r_,Q2o),e(r_,kq),e(kq,W2o),e(r_,H2o),e(G,U2o),e(G,t_),e(t_,zse),e(zse,J2o),e(t_,Y2o),e(t_,Sq),e(Sq,K2o),e(t_,Z2o),e(G,e5o),e(G,a_),e(a_,Qse),e(Qse,o5o),e(a_,r5o),e(a_,Rq),e(Rq,t5o),e(a_,a5o),e(G,n5o),e(G,n_),e(n_,Wse),e(Wse,s5o),e(n_,l5o),e(n_,Bq),e(Bq,i5o),e(n_,d5o),e(G,c5o),e(G,s_),e(s_,Hse),e(Hse,f5o),e(s_,m5o),e(s_,Pq),e(Pq,g5o),e(s_,h5o),e(G,p5o),e(G,l_),e(l_,Use),e(Use,u5o),e(l_,_5o),e(l_,Iq),e(Iq,b5o),e(l_,v5o),e(G,F5o),e(G,i_),e(i_,Jse),e(Jse,T5o),e(i_,M5o),e(i_,qq),e(qq,E5o),e(i_,C5o),e(G,w5o),e(G,d_),e(d_,Yse),e(Yse,A5o),e(d_,y5o),e(d_,Nq),e(Nq,L5o),e(d_,x5o),e(G,$5o),e(G,c_),e(c_,Kse),e(Kse,k5o),e(c_,S5o),e(c_,jq),e(jq,R5o),e(c_,B5o),e(G,P5o),e(G,f_),e(f_,Zse),e(Zse,I5o),e(f_,q5o),e(f_,Dq),e(Dq,N5o),e(f_,j5o),e(G,D5o),e(G,m_),e(m_,ele),e(ele,G5o),e(m_,O5o),e(m_,Gq),e(Gq,V5o),e(m_,X5o),e(Ue,z5o),e(Ue,g_),e(g_,Q5o),e(g_,ole),e(ole,W5o),e(g_,H5o),e(g_,rle),e(rle,U5o),e(Ue,J5o),M(h_,Ue,null),b(f,YBe,_),b(f,Ti,_),e(Ti,p_),e(p_,tle),M(fy,tle,null),e(Ti,Y5o),e(Ti,ale),e(ale,K5o),b(f,KBe,_),b(f,$o,_),M(my,$o,null),e($o,Z5o),e($o,Mi),e(Mi,evo),e(Mi,Oq),e(Oq,ovo),e(Mi,rvo),e(Mi,Vq),e(Vq,tvo),e(Mi,avo),e($o,nvo),e($o,gy),e(gy,svo),e(gy,nle),e(nle,lvo),e(gy,ivo),e($o,dvo),e($o,ot),M(hy,ot,null),e(ot,cvo),e(ot,sle),e(sle,fvo),e(ot,mvo),e(ot,Ei),e(Ei,gvo),e(Ei,lle),e(lle,hvo),e(Ei,pvo),e(Ei,Xq),e(Xq,uvo),e(Ei,_vo),e(ot,bvo),M(u_,ot,null),e($o,vvo),e($o,Je),M(py,Je,null),e(Je,Fvo),e(Je,ile),e(ile,Tvo),e(Je,Mvo),e(Je,wa),e(wa,Evo),e(wa,dle),e(dle,Cvo),e(wa,wvo),e(wa,cle),e(cle,Avo),e(wa,yvo),e(wa,fle),e(fle,Lvo),e(wa,xvo),e(Je,$vo),e(Je,z),e(z,__),e(__,mle),e(mle,kvo),e(__,Svo),e(__,zq),e(zq,Rvo),e(__,Bvo),e(z,Pvo),e(z,b_),e(b_,gle),e(gle,Ivo),e(b_,qvo),e(b_,Qq),e(Qq,Nvo),e(b_,jvo),e(z,Dvo),e(z,v_),e(v_,hle),e(hle,Gvo),e(v_,Ovo),e(v_,Wq),e(Wq,Vvo),e(v_,Xvo),e(z,zvo),e(z,F_),e(F_,ple),e(ple,Qvo),e(F_,Wvo),e(F_,Hq),e(Hq,Hvo),e(F_,Uvo),e(z,Jvo),e(z,T_),e(T_,ule),e(ule,Yvo),e(T_,Kvo),e(T_,Uq),e(Uq,Zvo),e(T_,eFo),e(z,oFo),e(z,M_),e(M_,_le),e(_le,rFo),e(M_,tFo),e(M_,Jq),e(Jq,aFo),e(M_,nFo),e(z,sFo),e(z,E_),e(E_,ble),e(ble,lFo),e(E_,iFo),e(E_,Yq),e(Yq,dFo),e(E_,cFo),e(z,fFo),e(z,C_),e(C_,vle),e(vle,mFo),e(C_,gFo),e(C_,Kq),e(Kq,hFo),e(C_,pFo),e(z,uFo),e(z,w_),e(w_,Fle),e(Fle,_Fo),e(w_,bFo),e(w_,Zq),e(Zq,vFo),e(w_,FFo),e(z,TFo),e(z,A_),e(A_,Tle),e(Tle,MFo),e(A_,EFo),e(A_,eN),e(eN,CFo),e(A_,wFo),e(z,AFo),e(z,y_),e(y_,Mle),e(Mle,yFo),e(y_,LFo),e(y_,oN),e(oN,xFo),e(y_,$Fo),e(z,kFo),e(z,L_),e(L_,Ele),e(Ele,SFo),e(L_,RFo),e(L_,rN),e(rN,BFo),e(L_,PFo),e(z,IFo),e(z,x_),e(x_,Cle),e(Cle,qFo),e(x_,NFo),e(x_,tN),e(tN,jFo),e(x_,DFo),e(z,GFo),e(z,$_),e($_,wle),e(wle,OFo),e($_,VFo),e($_,aN),e(aN,XFo),e($_,zFo),e(z,QFo),e(z,k_),e(k_,Ale),e(Ale,WFo),e(k_,HFo),e(k_,nN),e(nN,UFo),e(k_,JFo),e(z,YFo),e(z,S_),e(S_,yle),e(yle,KFo),e(S_,ZFo),e(S_,sN),e(sN,eTo),e(S_,oTo),e(z,rTo),e(z,R_),e(R_,Lle),e(Lle,tTo),e(R_,aTo),e(R_,lN),e(lN,nTo),e(R_,sTo),e(z,lTo),e(z,B_),e(B_,xle),e(xle,iTo),e(B_,dTo),e(B_,iN),e(iN,cTo),e(B_,fTo),e(z,mTo),e(z,P_),e(P_,$le),e($le,gTo),e(P_,hTo),e(P_,dN),e(dN,pTo),e(P_,uTo),e(z,_To),e(z,I_),e(I_,kle),e(kle,bTo),e(I_,vTo),e(I_,cN),e(cN,FTo),e(I_,TTo),e(z,MTo),e(z,q_),e(q_,Sle),e(Sle,ETo),e(q_,CTo),e(q_,fN),e(fN,wTo),e(q_,ATo),e(z,yTo),e(z,N_),e(N_,Rle),e(Rle,LTo),e(N_,xTo),e(N_,mN),e(mN,$To),e(N_,kTo),e(z,STo),e(z,j_),e(j_,Ble),e(Ble,RTo),e(j_,BTo),e(j_,gN),e(gN,PTo),e(j_,ITo),e(z,qTo),e(z,D_),e(D_,Ple),e(Ple,NTo),e(D_,jTo),e(D_,hN),e(hN,DTo),e(D_,GTo),e(z,OTo),e(z,G_),e(G_,Ile),e(Ile,VTo),e(G_,XTo),e(G_,pN),e(pN,zTo),e(G_,QTo),e(z,WTo),e(z,O_),e(O_,qle),e(qle,HTo),e(O_,UTo),e(O_,uN),e(uN,JTo),e(O_,YTo),e(z,KTo),e(z,V_),e(V_,Nle),e(Nle,ZTo),e(V_,eMo),e(V_,_N),e(_N,oMo),e(V_,rMo),e(z,tMo),e(z,X_),e(X_,jle),e(jle,aMo),e(X_,nMo),e(X_,bN),e(bN,sMo),e(X_,lMo),e(z,iMo),e(z,z_),e(z_,Dle),e(Dle,dMo),e(z_,cMo),e(z_,vN),e(vN,fMo),e(z_,mMo),e(z,gMo),e(z,Q_),e(Q_,Gle),e(Gle,hMo),e(Q_,pMo),e(Q_,FN),e(FN,uMo),e(Q_,_Mo),e(z,bMo),e(z,W_),e(W_,Ole),e(Ole,vMo),e(W_,FMo),e(W_,TN),e(TN,TMo),e(W_,MMo),e(z,EMo),e(z,H_),e(H_,Vle),e(Vle,CMo),e(H_,wMo),e(H_,MN),e(MN,AMo),e(H_,yMo),e(z,LMo),e(z,U_),e(U_,Xle),e(Xle,xMo),e(U_,$Mo),e(U_,EN),e(EN,kMo),e(U_,SMo),e(z,RMo),e(z,J_),e(J_,zle),e(zle,BMo),e(J_,PMo),e(J_,CN),e(CN,IMo),e(J_,qMo),e(z,NMo),e(z,Y_),e(Y_,Qle),e(Qle,jMo),e(Y_,DMo),e(Y_,wN),e(wN,GMo),e(Y_,OMo),e(Je,VMo),e(Je,K_),e(K_,XMo),e(K_,Wle),e(Wle,zMo),e(K_,QMo),e(K_,Hle),e(Hle,WMo),e(Je,HMo),M(Z_,Je,null),b(f,ZBe,_),b(f,Ci,_),e(Ci,e6),e(e6,Ule),M(uy,Ule,null),e(Ci,UMo),e(Ci,Jle),e(Jle,JMo),b(f,ePe,_),b(f,ko,_),M(_y,ko,null),e(ko,YMo),e(ko,wi),e(wi,KMo),e(wi,AN),e(AN,ZMo),e(wi,eEo),e(wi,yN),e(yN,oEo),e(wi,rEo),e(ko,tEo),e(ko,by),e(by,aEo),e(by,Yle),e(Yle,nEo),e(by,sEo),e(ko,lEo),e(ko,rt),M(vy,rt,null),e(rt,iEo),e(rt,Kle),e(Kle,dEo),e(rt,cEo),e(rt,Ai),e(Ai,fEo),e(Ai,Zle),e(Zle,mEo),e(Ai,gEo),e(Ai,LN),e(LN,hEo),e(Ai,pEo),e(rt,uEo),M(o6,rt,null),e(ko,_Eo),e(ko,Ye),M(Fy,Ye,null),e(Ye,bEo),e(Ye,eie),e(eie,vEo),e(Ye,FEo),e(Ye,Aa),e(Aa,TEo),e(Aa,oie),e(oie,MEo),e(Aa,EEo),e(Aa,rie),e(rie,CEo),e(Aa,wEo),e(Aa,tie),e(tie,AEo),e(Aa,yEo),e(Ye,LEo),e(Ye,Q),e(Q,r6),e(r6,aie),e(aie,xEo),e(r6,$Eo),e(r6,xN),e(xN,kEo),e(r6,SEo),e(Q,REo),e(Q,t6),e(t6,nie),e(nie,BEo),e(t6,PEo),e(t6,$N),e($N,IEo),e(t6,qEo),e(Q,NEo),e(Q,a6),e(a6,sie),e(sie,jEo),e(a6,DEo),e(a6,kN),e(kN,GEo),e(a6,OEo),e(Q,VEo),e(Q,n6),e(n6,lie),e(lie,XEo),e(n6,zEo),e(n6,SN),e(SN,QEo),e(n6,WEo),e(Q,HEo),e(Q,s6),e(s6,iie),e(iie,UEo),e(s6,JEo),e(s6,RN),e(RN,YEo),e(s6,KEo),e(Q,ZEo),e(Q,l6),e(l6,die),e(die,eCo),e(l6,oCo),e(l6,BN),e(BN,rCo),e(l6,tCo),e(Q,aCo),e(Q,i6),e(i6,cie),e(cie,nCo),e(i6,sCo),e(i6,PN),e(PN,lCo),e(i6,iCo),e(Q,dCo),e(Q,d6),e(d6,fie),e(fie,cCo),e(d6,fCo),e(d6,IN),e(IN,mCo),e(d6,gCo),e(Q,hCo),e(Q,c6),e(c6,mie),e(mie,pCo),e(c6,uCo),e(c6,qN),e(qN,_Co),e(c6,bCo),e(Q,vCo),e(Q,f6),e(f6,gie),e(gie,FCo),e(f6,TCo),e(f6,NN),e(NN,MCo),e(f6,ECo),e(Q,CCo),e(Q,m6),e(m6,hie),e(hie,wCo),e(m6,ACo),e(m6,jN),e(jN,yCo),e(m6,LCo),e(Q,xCo),e(Q,g6),e(g6,pie),e(pie,$Co),e(g6,kCo),e(g6,DN),e(DN,SCo),e(g6,RCo),e(Q,BCo),e(Q,h6),e(h6,uie),e(uie,PCo),e(h6,ICo),e(h6,GN),e(GN,qCo),e(h6,NCo),e(Q,jCo),e(Q,p6),e(p6,_ie),e(_ie,DCo),e(p6,GCo),e(p6,ON),e(ON,OCo),e(p6,VCo),e(Q,XCo),e(Q,u6),e(u6,bie),e(bie,zCo),e(u6,QCo),e(u6,VN),e(VN,WCo),e(u6,HCo),e(Q,UCo),e(Q,_6),e(_6,vie),e(vie,JCo),e(_6,YCo),e(_6,XN),e(XN,KCo),e(_6,ZCo),e(Q,e3o),e(Q,b6),e(b6,Fie),e(Fie,o3o),e(b6,r3o),e(b6,zN),e(zN,t3o),e(b6,a3o),e(Q,n3o),e(Q,v6),e(v6,Tie),e(Tie,s3o),e(v6,l3o),e(v6,QN),e(QN,i3o),e(v6,d3o),e(Q,c3o),e(Q,F6),e(F6,Mie),e(Mie,f3o),e(F6,m3o),e(F6,WN),e(WN,g3o),e(F6,h3o),e(Q,p3o),e(Q,T6),e(T6,Eie),e(Eie,u3o),e(T6,_3o),e(T6,HN),e(HN,b3o),e(T6,v3o),e(Q,F3o),e(Q,M6),e(M6,Cie),e(Cie,T3o),e(M6,M3o),e(M6,UN),e(UN,E3o),e(M6,C3o),e(Q,w3o),e(Q,E6),e(E6,wie),e(wie,A3o),e(E6,y3o),e(E6,JN),e(JN,L3o),e(E6,x3o),e(Q,$3o),e(Q,C6),e(C6,Aie),e(Aie,k3o),e(C6,S3o),e(C6,YN),e(YN,R3o),e(C6,B3o),e(Q,P3o),e(Q,w6),e(w6,yie),e(yie,I3o),e(w6,q3o),e(w6,KN),e(KN,N3o),e(w6,j3o),e(Q,D3o),e(Q,A6),e(A6,Lie),e(Lie,G3o),e(A6,O3o),e(A6,ZN),e(ZN,V3o),e(A6,X3o),e(Q,z3o),e(Q,y6),e(y6,xie),e(xie,Q3o),e(y6,W3o),e(y6,ej),e(ej,H3o),e(y6,U3o),e(Q,J3o),e(Q,L6),e(L6,$ie),e($ie,Y3o),e(L6,K3o),e(L6,oj),e(oj,Z3o),e(L6,ewo),e(Q,owo),e(Q,x6),e(x6,kie),e(kie,rwo),e(x6,two),e(x6,rj),e(rj,awo),e(x6,nwo),e(Q,swo),e(Q,$6),e($6,Sie),e(Sie,lwo),e($6,iwo),e($6,tj),e(tj,dwo),e($6,cwo),e(Q,fwo),e(Q,k6),e(k6,Rie),e(Rie,mwo),e(k6,gwo),e(k6,aj),e(aj,hwo),e(k6,pwo),e(Q,uwo),e(Q,S6),e(S6,Bie),e(Bie,_wo),e(S6,bwo),e(S6,Pie),e(Pie,vwo),e(S6,Fwo),e(Q,Two),e(Q,R6),e(R6,Iie),e(Iie,Mwo),e(R6,Ewo),e(R6,nj),e(nj,Cwo),e(R6,wwo),e(Q,Awo),e(Q,B6),e(B6,qie),e(qie,ywo),e(B6,Lwo),e(B6,sj),e(sj,xwo),e(B6,$wo),e(Q,kwo),e(Q,P6),e(P6,Nie),e(Nie,Swo),e(P6,Rwo),e(P6,lj),e(lj,Bwo),e(P6,Pwo),e(Q,Iwo),e(Q,I6),e(I6,jie),e(jie,qwo),e(I6,Nwo),e(I6,ij),e(ij,jwo),e(I6,Dwo),e(Ye,Gwo),e(Ye,q6),e(q6,Owo),e(q6,Die),e(Die,Vwo),e(q6,Xwo),e(q6,Gie),e(Gie,zwo),e(Ye,Qwo),M(N6,Ye,null),b(f,oPe,_),b(f,yi,_),e(yi,j6),e(j6,Oie),M(Ty,Oie,null),e(yi,Wwo),e(yi,Vie),e(Vie,Hwo),b(f,rPe,_),b(f,So,_),M(My,So,null),e(So,Uwo),e(So,Li),e(Li,Jwo),e(Li,dj),e(dj,Ywo),e(Li,Kwo),e(Li,cj),e(cj,Zwo),e(Li,eAo),e(So,oAo),e(So,Ey),e(Ey,rAo),e(Ey,Xie),e(Xie,tAo),e(Ey,aAo),e(So,nAo),e(So,tt),M(Cy,tt,null),e(tt,sAo),e(tt,zie),e(zie,lAo),e(tt,iAo),e(tt,xi),e(xi,dAo),e(xi,Qie),e(Qie,cAo),e(xi,fAo),e(xi,fj),e(fj,mAo),e(xi,gAo),e(tt,hAo),M(D6,tt,null),e(So,pAo),e(So,Ke),M(wy,Ke,null),e(Ke,uAo),e(Ke,Wie),e(Wie,_Ao),e(Ke,bAo),e(Ke,ya),e(ya,vAo),e(ya,Hie),e(Hie,FAo),e(ya,TAo),e(ya,Uie),e(Uie,MAo),e(ya,EAo),e(ya,Jie),e(Jie,CAo),e(ya,wAo),e(Ke,AAo),e(Ke,he),e(he,G6),e(G6,Yie),e(Yie,yAo),e(G6,LAo),e(G6,mj),e(mj,xAo),e(G6,$Ao),e(he,kAo),e(he,O6),e(O6,Kie),e(Kie,SAo),e(O6,RAo),e(O6,gj),e(gj,BAo),e(O6,PAo),e(he,IAo),e(he,V6),e(V6,Zie),e(Zie,qAo),e(V6,NAo),e(V6,hj),e(hj,jAo),e(V6,DAo),e(he,GAo),e(he,X6),e(X6,ede),e(ede,OAo),e(X6,VAo),e(X6,pj),e(pj,XAo),e(X6,zAo),e(he,QAo),e(he,z6),e(z6,ode),e(ode,WAo),e(z6,HAo),e(z6,uj),e(uj,UAo),e(z6,JAo),e(he,YAo),e(he,Q6),e(Q6,rde),e(rde,KAo),e(Q6,ZAo),e(Q6,_j),e(_j,e0o),e(Q6,o0o),e(he,r0o),e(he,W6),e(W6,tde),e(tde,t0o),e(W6,a0o),e(W6,bj),e(bj,n0o),e(W6,s0o),e(he,l0o),e(he,H6),e(H6,ade),e(ade,i0o),e(H6,d0o),e(H6,vj),e(vj,c0o),e(H6,f0o),e(he,m0o),e(he,U6),e(U6,nde),e(nde,g0o),e(U6,h0o),e(U6,Fj),e(Fj,p0o),e(U6,u0o),e(he,_0o),e(he,J6),e(J6,sde),e(sde,b0o),e(J6,v0o),e(J6,Tj),e(Tj,F0o),e(J6,T0o),e(he,M0o),e(he,Y6),e(Y6,lde),e(lde,E0o),e(Y6,C0o),e(Y6,Mj),e(Mj,w0o),e(Y6,A0o),e(he,y0o),e(he,K6),e(K6,ide),e(ide,L0o),e(K6,x0o),e(K6,Ej),e(Ej,$0o),e(K6,k0o),e(he,S0o),e(he,Z6),e(Z6,dde),e(dde,R0o),e(Z6,B0o),e(Z6,Cj),e(Cj,P0o),e(Z6,I0o),e(he,q0o),e(he,e1),e(e1,cde),e(cde,N0o),e(e1,j0o),e(e1,wj),e(wj,D0o),e(e1,G0o),e(he,O0o),e(he,o1),e(o1,fde),e(fde,V0o),e(o1,X0o),e(o1,Aj),e(Aj,z0o),e(o1,Q0o),e(he,W0o),e(he,r1),e(r1,mde),e(mde,H0o),e(r1,U0o),e(r1,yj),e(yj,J0o),e(r1,Y0o),e(he,K0o),e(he,t1),e(t1,gde),e(gde,Z0o),e(t1,eyo),e(t1,Lj),e(Lj,oyo),e(t1,ryo),e(Ke,tyo),e(Ke,a1),e(a1,ayo),e(a1,hde),e(hde,nyo),e(a1,syo),e(a1,pde),e(pde,lyo),e(Ke,iyo),M(n1,Ke,null),b(f,tPe,_),b(f,$i,_),e($i,s1),e(s1,ude),M(Ay,ude,null),e($i,dyo),e($i,_de),e(_de,cyo),b(f,aPe,_),b(f,Ro,_),M(yy,Ro,null),e(Ro,fyo),e(Ro,ki),e(ki,myo),e(ki,xj),e(xj,gyo),e(ki,hyo),e(ki,$j),e($j,pyo),e(ki,uyo),e(Ro,_yo),e(Ro,Ly),e(Ly,byo),e(Ly,bde),e(bde,vyo),e(Ly,Fyo),e(Ro,Tyo),e(Ro,at),M(xy,at,null),e(at,Myo),e(at,vde),e(vde,Eyo),e(at,Cyo),e(at,Si),e(Si,wyo),e(Si,Fde),e(Fde,Ayo),e(Si,yyo),e(Si,kj),e(kj,Lyo),e(Si,xyo),e(at,$yo),M(l1,at,null),e(Ro,kyo),e(Ro,Ze),M($y,Ze,null),e(Ze,Syo),e(Ze,Tde),e(Tde,Ryo),e(Ze,Byo),e(Ze,La),e(La,Pyo),e(La,Mde),e(Mde,Iyo),e(La,qyo),e(La,Ede),e(Ede,Nyo),e(La,jyo),e(La,Cde),e(Cde,Dyo),e(La,Gyo),e(Ze,Oyo),e(Ze,q),e(q,i1),e(i1,wde),e(wde,Vyo),e(i1,Xyo),e(i1,Sj),e(Sj,zyo),e(i1,Qyo),e(q,Wyo),e(q,d1),e(d1,Ade),e(Ade,Hyo),e(d1,Uyo),e(d1,Rj),e(Rj,Jyo),e(d1,Yyo),e(q,Kyo),e(q,c1),e(c1,yde),e(yde,Zyo),e(c1,eLo),e(c1,Bj),e(Bj,oLo),e(c1,rLo),e(q,tLo),e(q,f1),e(f1,Lde),e(Lde,aLo),e(f1,nLo),e(f1,Pj),e(Pj,sLo),e(f1,lLo),e(q,iLo),e(q,m1),e(m1,xde),e(xde,dLo),e(m1,cLo),e(m1,Ij),e(Ij,fLo),e(m1,mLo),e(q,gLo),e(q,g1),e(g1,$de),e($de,hLo),e(g1,pLo),e(g1,qj),e(qj,uLo),e(g1,_Lo),e(q,bLo),e(q,h1),e(h1,kde),e(kde,vLo),e(h1,FLo),e(h1,Nj),e(Nj,TLo),e(h1,MLo),e(q,ELo),e(q,p1),e(p1,Sde),e(Sde,CLo),e(p1,wLo),e(p1,jj),e(jj,ALo),e(p1,yLo),e(q,LLo),e(q,u1),e(u1,Rde),e(Rde,xLo),e(u1,$Lo),e(u1,Dj),e(Dj,kLo),e(u1,SLo),e(q,RLo),e(q,_1),e(_1,Bde),e(Bde,BLo),e(_1,PLo),e(_1,Gj),e(Gj,ILo),e(_1,qLo),e(q,NLo),e(q,b1),e(b1,Pde),e(Pde,jLo),e(b1,DLo),e(b1,Oj),e(Oj,GLo),e(b1,OLo),e(q,VLo),e(q,v1),e(v1,Ide),e(Ide,XLo),e(v1,zLo),e(v1,Vj),e(Vj,QLo),e(v1,WLo),e(q,HLo),e(q,F1),e(F1,qde),e(qde,ULo),e(F1,JLo),e(F1,Xj),e(Xj,YLo),e(F1,KLo),e(q,ZLo),e(q,T1),e(T1,Nde),e(Nde,e8o),e(T1,o8o),e(T1,zj),e(zj,r8o),e(T1,t8o),e(q,a8o),e(q,M1),e(M1,jde),e(jde,n8o),e(M1,s8o),e(M1,Qj),e(Qj,l8o),e(M1,i8o),e(q,d8o),e(q,E1),e(E1,Dde),e(Dde,c8o),e(E1,f8o),e(E1,Wj),e(Wj,m8o),e(E1,g8o),e(q,h8o),e(q,C1),e(C1,Gde),e(Gde,p8o),e(C1,u8o),e(C1,Hj),e(Hj,_8o),e(C1,b8o),e(q,v8o),e(q,w1),e(w1,Ode),e(Ode,F8o),e(w1,T8o),e(w1,Uj),e(Uj,M8o),e(w1,E8o),e(q,C8o),e(q,A1),e(A1,Vde),e(Vde,w8o),e(A1,A8o),e(A1,Jj),e(Jj,y8o),e(A1,L8o),e(q,x8o),e(q,y1),e(y1,Xde),e(Xde,$8o),e(y1,k8o),e(y1,Yj),e(Yj,S8o),e(y1,R8o),e(q,B8o),e(q,L1),e(L1,zde),e(zde,P8o),e(L1,I8o),e(L1,Kj),e(Kj,q8o),e(L1,N8o),e(q,j8o),e(q,x1),e(x1,Qde),e(Qde,D8o),e(x1,G8o),e(x1,Zj),e(Zj,O8o),e(x1,V8o),e(q,X8o),e(q,$1),e($1,Wde),e(Wde,z8o),e($1,Q8o),e($1,eD),e(eD,W8o),e($1,H8o),e(q,U8o),e(q,k1),e(k1,Hde),e(Hde,J8o),e(k1,Y8o),e(k1,oD),e(oD,K8o),e(k1,Z8o),e(q,e7o),e(q,S1),e(S1,Ude),e(Ude,o7o),e(S1,r7o),e(S1,rD),e(rD,t7o),e(S1,a7o),e(q,n7o),e(q,R1),e(R1,Jde),e(Jde,s7o),e(R1,l7o),e(R1,tD),e(tD,i7o),e(R1,d7o),e(q,c7o),e(q,B1),e(B1,Yde),e(Yde,f7o),e(B1,m7o),e(B1,aD),e(aD,g7o),e(B1,h7o),e(q,p7o),e(q,P1),e(P1,Kde),e(Kde,u7o),e(P1,_7o),e(P1,nD),e(nD,b7o),e(P1,v7o),e(q,F7o),e(q,I1),e(I1,Zde),e(Zde,T7o),e(I1,M7o),e(I1,sD),e(sD,E7o),e(I1,C7o),e(q,w7o),e(q,q1),e(q1,ece),e(ece,A7o),e(q1,y7o),e(q1,lD),e(lD,L7o),e(q1,x7o),e(q,$7o),e(q,N1),e(N1,oce),e(oce,k7o),e(N1,S7o),e(N1,iD),e(iD,R7o),e(N1,B7o),e(q,P7o),e(q,j1),e(j1,rce),e(rce,I7o),e(j1,q7o),e(j1,dD),e(dD,N7o),e(j1,j7o),e(q,D7o),e(q,D1),e(D1,tce),e(tce,G7o),e(D1,O7o),e(D1,cD),e(cD,V7o),e(D1,X7o),e(q,z7o),e(q,G1),e(G1,ace),e(ace,Q7o),e(G1,W7o),e(G1,fD),e(fD,H7o),e(G1,U7o),e(q,J7o),e(q,O1),e(O1,nce),e(nce,Y7o),e(O1,K7o),e(O1,mD),e(mD,Z7o),e(O1,exo),e(q,oxo),e(q,V1),e(V1,sce),e(sce,rxo),e(V1,txo),e(V1,gD),e(gD,axo),e(V1,nxo),e(q,sxo),e(q,X1),e(X1,lce),e(lce,lxo),e(X1,ixo),e(X1,hD),e(hD,dxo),e(X1,cxo),e(q,fxo),e(q,z1),e(z1,ice),e(ice,mxo),e(z1,gxo),e(z1,pD),e(pD,hxo),e(z1,pxo),e(q,uxo),e(q,Q1),e(Q1,dce),e(dce,_xo),e(Q1,bxo),e(Q1,uD),e(uD,vxo),e(Q1,Fxo),e(q,Txo),e(q,W1),e(W1,cce),e(cce,Mxo),e(W1,Exo),e(W1,_D),e(_D,Cxo),e(W1,wxo),e(q,Axo),e(q,H1),e(H1,fce),e(fce,yxo),e(H1,Lxo),e(H1,bD),e(bD,xxo),e(H1,$xo),e(q,kxo),e(q,U1),e(U1,mce),e(mce,Sxo),e(U1,Rxo),e(U1,vD),e(vD,Bxo),e(U1,Pxo),e(q,Ixo),e(q,J1),e(J1,gce),e(gce,qxo),e(J1,Nxo),e(J1,FD),e(FD,jxo),e(J1,Dxo),e(q,Gxo),e(q,Y1),e(Y1,hce),e(hce,Oxo),e(Y1,Vxo),e(Y1,TD),e(TD,Xxo),e(Y1,zxo),e(q,Qxo),e(q,K1),e(K1,pce),e(pce,Wxo),e(K1,Hxo),e(K1,MD),e(MD,Uxo),e(K1,Jxo),e(q,Yxo),e(q,Z1),e(Z1,uce),e(uce,Kxo),e(Z1,Zxo),e(Z1,ED),e(ED,e9o),e(Z1,o9o),e(q,r9o),e(q,eb),e(eb,_ce),e(_ce,t9o),e(eb,a9o),e(eb,CD),e(CD,n9o),e(eb,s9o),e(Ze,l9o),e(Ze,ob),e(ob,i9o),e(ob,bce),e(bce,d9o),e(ob,c9o),e(ob,vce),e(vce,f9o),e(Ze,m9o),M(rb,Ze,null),b(f,nPe,_),b(f,Ri,_),e(Ri,tb),e(tb,Fce),M(ky,Fce,null),e(Ri,g9o),e(Ri,Tce),e(Tce,h9o),b(f,sPe,_),b(f,Bo,_),M(Sy,Bo,null),e(Bo,p9o),e(Bo,Bi),e(Bi,u9o),e(Bi,wD),e(wD,_9o),e(Bi,b9o),e(Bi,AD),e(AD,v9o),e(Bi,F9o),e(Bo,T9o),e(Bo,Ry),e(Ry,M9o),e(Ry,Mce),e(Mce,E9o),e(Ry,C9o),e(Bo,w9o),e(Bo,nt),M(By,nt,null),e(nt,A9o),e(nt,Ece),e(Ece,y9o),e(nt,L9o),e(nt,Pi),e(Pi,x9o),e(Pi,Cce),e(Cce,$9o),e(Pi,k9o),e(Pi,yD),e(yD,S9o),e(Pi,R9o),e(nt,B9o),M(ab,nt,null),e(Bo,P9o),e(Bo,eo),M(Py,eo,null),e(eo,I9o),e(eo,wce),e(wce,q9o),e(eo,N9o),e(eo,xa),e(xa,j9o),e(xa,Ace),e(Ace,D9o),e(xa,G9o),e(xa,yce),e(yce,O9o),e(xa,V9o),e(xa,Lce),e(Lce,X9o),e(xa,z9o),e(eo,Q9o),e(eo,Y),e(Y,nb),e(nb,xce),e(xce,W9o),e(nb,H9o),e(nb,LD),e(LD,U9o),e(nb,J9o),e(Y,Y9o),e(Y,sb),e(sb,$ce),e($ce,K9o),e(sb,Z9o),e(sb,xD),e(xD,e$o),e(sb,o$o),e(Y,r$o),e(Y,lb),e(lb,kce),e(kce,t$o),e(lb,a$o),e(lb,$D),e($D,n$o),e(lb,s$o),e(Y,l$o),e(Y,ib),e(ib,Sce),e(Sce,i$o),e(ib,d$o),e(ib,kD),e(kD,c$o),e(ib,f$o),e(Y,m$o),e(Y,db),e(db,Rce),e(Rce,g$o),e(db,h$o),e(db,SD),e(SD,p$o),e(db,u$o),e(Y,_$o),e(Y,cb),e(cb,Bce),e(Bce,b$o),e(cb,v$o),e(cb,RD),e(RD,F$o),e(cb,T$o),e(Y,M$o),e(Y,fb),e(fb,Pce),e(Pce,E$o),e(fb,C$o),e(fb,BD),e(BD,w$o),e(fb,A$o),e(Y,y$o),e(Y,mb),e(mb,Ice),e(Ice,L$o),e(mb,x$o),e(mb,PD),e(PD,$$o),e(mb,k$o),e(Y,S$o),e(Y,gb),e(gb,qce),e(qce,R$o),e(gb,B$o),e(gb,ID),e(ID,P$o),e(gb,I$o),e(Y,q$o),e(Y,hb),e(hb,Nce),e(Nce,N$o),e(hb,j$o),e(hb,qD),e(qD,D$o),e(hb,G$o),e(Y,O$o),e(Y,pb),e(pb,jce),e(jce,V$o),e(pb,X$o),e(pb,ND),e(ND,z$o),e(pb,Q$o),e(Y,W$o),e(Y,ub),e(ub,Dce),e(Dce,H$o),e(ub,U$o),e(ub,jD),e(jD,J$o),e(ub,Y$o),e(Y,K$o),e(Y,_b),e(_b,Gce),e(Gce,Z$o),e(_b,eko),e(_b,DD),e(DD,oko),e(_b,rko),e(Y,tko),e(Y,bb),e(bb,Oce),e(Oce,ako),e(bb,nko),e(bb,GD),e(GD,sko),e(bb,lko),e(Y,iko),e(Y,vb),e(vb,Vce),e(Vce,dko),e(vb,cko),e(vb,OD),e(OD,fko),e(vb,mko),e(Y,gko),e(Y,Fb),e(Fb,Xce),e(Xce,hko),e(Fb,pko),e(Fb,VD),e(VD,uko),e(Fb,_ko),e(Y,bko),e(Y,Tb),e(Tb,zce),e(zce,vko),e(Tb,Fko),e(Tb,XD),e(XD,Tko),e(Tb,Mko),e(Y,Eko),e(Y,Mb),e(Mb,Qce),e(Qce,Cko),e(Mb,wko),e(Mb,zD),e(zD,Ako),e(Mb,yko),e(Y,Lko),e(Y,Eb),e(Eb,Wce),e(Wce,xko),e(Eb,$ko),e(Eb,QD),e(QD,kko),e(Eb,Sko),e(Y,Rko),e(Y,Cb),e(Cb,Hce),e(Hce,Bko),e(Cb,Pko),e(Cb,WD),e(WD,Iko),e(Cb,qko),e(Y,Nko),e(Y,wb),e(wb,Uce),e(Uce,jko),e(wb,Dko),e(wb,HD),e(HD,Gko),e(wb,Oko),e(Y,Vko),e(Y,Ab),e(Ab,Jce),e(Jce,Xko),e(Ab,zko),e(Ab,UD),e(UD,Qko),e(Ab,Wko),e(Y,Hko),e(Y,yb),e(yb,Yce),e(Yce,Uko),e(yb,Jko),e(yb,JD),e(JD,Yko),e(yb,Kko),e(Y,Zko),e(Y,Lb),e(Lb,Kce),e(Kce,eSo),e(Lb,oSo),e(Lb,YD),e(YD,rSo),e(Lb,tSo),e(Y,aSo),e(Y,xb),e(xb,Zce),e(Zce,nSo),e(xb,sSo),e(xb,KD),e(KD,lSo),e(xb,iSo),e(Y,dSo),e(Y,$b),e($b,efe),e(efe,cSo),e($b,fSo),e($b,ZD),e(ZD,mSo),e($b,gSo),e(Y,hSo),e(Y,kb),e(kb,ofe),e(ofe,pSo),e(kb,uSo),e(kb,eG),e(eG,_So),e(kb,bSo),e(Y,vSo),e(Y,Sb),e(Sb,rfe),e(rfe,FSo),e(Sb,TSo),e(Sb,oG),e(oG,MSo),e(Sb,ESo),e(eo,CSo),e(eo,Rb),e(Rb,wSo),e(Rb,tfe),e(tfe,ASo),e(Rb,ySo),e(Rb,afe),e(afe,LSo),e(eo,xSo),M(Bb,eo,null),b(f,lPe,_),b(f,Ii,_),e(Ii,Pb),e(Pb,nfe),M(Iy,nfe,null),e(Ii,$So),e(Ii,sfe),e(sfe,kSo),b(f,iPe,_),b(f,Po,_),M(qy,Po,null),e(Po,SSo),e(Po,qi),e(qi,RSo),e(qi,rG),e(rG,BSo),e(qi,PSo),e(qi,tG),e(tG,ISo),e(qi,qSo),e(Po,NSo),e(Po,Ny),e(Ny,jSo),e(Ny,lfe),e(lfe,DSo),e(Ny,GSo),e(Po,OSo),e(Po,st),M(jy,st,null),e(st,VSo),e(st,ife),e(ife,XSo),e(st,zSo),e(st,Ni),e(Ni,QSo),e(Ni,dfe),e(dfe,WSo),e(Ni,HSo),e(Ni,aG),e(aG,USo),e(Ni,JSo),e(st,YSo),M(Ib,st,null),e(Po,KSo),e(Po,oo),M(Dy,oo,null),e(oo,ZSo),e(oo,cfe),e(cfe,eRo),e(oo,oRo),e(oo,$a),e($a,rRo),e($a,ffe),e(ffe,tRo),e($a,aRo),e($a,mfe),e(mfe,nRo),e($a,sRo),e($a,gfe),e(gfe,lRo),e($a,iRo),e(oo,dRo),e(oo,Ur),e(Ur,qb),e(qb,hfe),e(hfe,cRo),e(qb,fRo),e(qb,nG),e(nG,mRo),e(qb,gRo),e(Ur,hRo),e(Ur,Nb),e(Nb,pfe),e(pfe,pRo),e(Nb,uRo),e(Nb,sG),e(sG,_Ro),e(Nb,bRo),e(Ur,vRo),e(Ur,jb),e(jb,ufe),e(ufe,FRo),e(jb,TRo),e(jb,lG),e(lG,MRo),e(jb,ERo),e(Ur,CRo),e(Ur,Db),e(Db,_fe),e(_fe,wRo),e(Db,ARo),e(Db,iG),e(iG,yRo),e(Db,LRo),e(Ur,xRo),e(Ur,Gb),e(Gb,bfe),e(bfe,$Ro),e(Gb,kRo),e(Gb,dG),e(dG,SRo),e(Gb,RRo),e(oo,BRo),e(oo,Ob),e(Ob,PRo),e(Ob,vfe),e(vfe,IRo),e(Ob,qRo),e(Ob,Ffe),e(Ffe,NRo),e(oo,jRo),M(Vb,oo,null),b(f,dPe,_),b(f,ji,_),e(ji,Xb),e(Xb,Tfe),M(Gy,Tfe,null),e(ji,DRo),e(ji,Mfe),e(Mfe,GRo),b(f,cPe,_),b(f,Io,_),M(Oy,Io,null),e(Io,ORo),e(Io,Di),e(Di,VRo),e(Di,cG),e(cG,XRo),e(Di,zRo),e(Di,fG),e(fG,QRo),e(Di,WRo),e(Io,HRo),e(Io,Vy),e(Vy,URo),e(Vy,Efe),e(Efe,JRo),e(Vy,YRo),e(Io,KRo),e(Io,lt),M(Xy,lt,null),e(lt,ZRo),e(lt,Cfe),e(Cfe,eBo),e(lt,oBo),e(lt,Gi),e(Gi,rBo),e(Gi,wfe),e(wfe,tBo),e(Gi,aBo),e(Gi,mG),e(mG,nBo),e(Gi,sBo),e(lt,lBo),M(zb,lt,null),e(Io,iBo),e(Io,ro),M(zy,ro,null),e(ro,dBo),e(ro,Afe),e(Afe,cBo),e(ro,fBo),e(ro,ka),e(ka,mBo),e(ka,yfe),e(yfe,gBo),e(ka,hBo),e(ka,Lfe),e(Lfe,pBo),e(ka,uBo),e(ka,xfe),e(xfe,_Bo),e(ka,bBo),e(ro,vBo),e(ro,U),e(U,Qb),e(Qb,$fe),e($fe,FBo),e(Qb,TBo),e(Qb,gG),e(gG,MBo),e(Qb,EBo),e(U,CBo),e(U,Wb),e(Wb,kfe),e(kfe,wBo),e(Wb,ABo),e(Wb,hG),e(hG,yBo),e(Wb,LBo),e(U,xBo),e(U,Hb),e(Hb,Sfe),e(Sfe,$Bo),e(Hb,kBo),e(Hb,pG),e(pG,SBo),e(Hb,RBo),e(U,BBo),e(U,Ub),e(Ub,Rfe),e(Rfe,PBo),e(Ub,IBo),e(Ub,uG),e(uG,qBo),e(Ub,NBo),e(U,jBo),e(U,Jb),e(Jb,Bfe),e(Bfe,DBo),e(Jb,GBo),e(Jb,_G),e(_G,OBo),e(Jb,VBo),e(U,XBo),e(U,Yb),e(Yb,Pfe),e(Pfe,zBo),e(Yb,QBo),e(Yb,bG),e(bG,WBo),e(Yb,HBo),e(U,UBo),e(U,Kb),e(Kb,Ife),e(Ife,JBo),e(Kb,YBo),e(Kb,vG),e(vG,KBo),e(Kb,ZBo),e(U,ePo),e(U,Zb),e(Zb,qfe),e(qfe,oPo),e(Zb,rPo),e(Zb,FG),e(FG,tPo),e(Zb,aPo),e(U,nPo),e(U,e4),e(e4,Nfe),e(Nfe,sPo),e(e4,lPo),e(e4,TG),e(TG,iPo),e(e4,dPo),e(U,cPo),e(U,o4),e(o4,jfe),e(jfe,fPo),e(o4,mPo),e(o4,MG),e(MG,gPo),e(o4,hPo),e(U,pPo),e(U,r4),e(r4,Dfe),e(Dfe,uPo),e(r4,_Po),e(r4,EG),e(EG,bPo),e(r4,vPo),e(U,FPo),e(U,t4),e(t4,Gfe),e(Gfe,TPo),e(t4,MPo),e(t4,CG),e(CG,EPo),e(t4,CPo),e(U,wPo),e(U,a4),e(a4,Ofe),e(Ofe,APo),e(a4,yPo),e(a4,wG),e(wG,LPo),e(a4,xPo),e(U,$Po),e(U,n4),e(n4,Vfe),e(Vfe,kPo),e(n4,SPo),e(n4,AG),e(AG,RPo),e(n4,BPo),e(U,PPo),e(U,s4),e(s4,Xfe),e(Xfe,IPo),e(s4,qPo),e(s4,yG),e(yG,NPo),e(s4,jPo),e(U,DPo),e(U,l4),e(l4,zfe),e(zfe,GPo),e(l4,OPo),e(l4,LG),e(LG,VPo),e(l4,XPo),e(U,zPo),e(U,i4),e(i4,Qfe),e(Qfe,QPo),e(i4,WPo),e(i4,xG),e(xG,HPo),e(i4,UPo),e(U,JPo),e(U,d4),e(d4,Wfe),e(Wfe,YPo),e(d4,KPo),e(d4,$G),e($G,ZPo),e(d4,eIo),e(U,oIo),e(U,c4),e(c4,Hfe),e(Hfe,rIo),e(c4,tIo),e(c4,kG),e(kG,aIo),e(c4,nIo),e(U,sIo),e(U,f4),e(f4,Ufe),e(Ufe,lIo),e(f4,iIo),e(f4,SG),e(SG,dIo),e(f4,cIo),e(U,fIo),e(U,m4),e(m4,Jfe),e(Jfe,mIo),e(m4,gIo),e(m4,RG),e(RG,hIo),e(m4,pIo),e(U,uIo),e(U,g4),e(g4,Yfe),e(Yfe,_Io),e(g4,bIo),e(g4,BG),e(BG,vIo),e(g4,FIo),e(U,TIo),e(U,h4),e(h4,Kfe),e(Kfe,MIo),e(h4,EIo),e(h4,PG),e(PG,CIo),e(h4,wIo),e(U,AIo),e(U,p4),e(p4,Zfe),e(Zfe,yIo),e(p4,LIo),e(p4,IG),e(IG,xIo),e(p4,$Io),e(U,kIo),e(U,u4),e(u4,eme),e(eme,SIo),e(u4,RIo),e(u4,qG),e(qG,BIo),e(u4,PIo),e(U,IIo),e(U,_4),e(_4,ome),e(ome,qIo),e(_4,NIo),e(_4,NG),e(NG,jIo),e(_4,DIo),e(U,GIo),e(U,b4),e(b4,rme),e(rme,OIo),e(b4,VIo),e(b4,jG),e(jG,XIo),e(b4,zIo),e(U,QIo),e(U,v4),e(v4,tme),e(tme,WIo),e(v4,HIo),e(v4,DG),e(DG,UIo),e(v4,JIo),e(U,YIo),e(U,F4),e(F4,ame),e(ame,KIo),e(F4,ZIo),e(F4,GG),e(GG,eqo),e(F4,oqo),e(U,rqo),e(U,T4),e(T4,nme),e(nme,tqo),e(T4,aqo),e(T4,OG),e(OG,nqo),e(T4,sqo),e(U,lqo),e(U,M4),e(M4,sme),e(sme,iqo),e(M4,dqo),e(M4,VG),e(VG,cqo),e(M4,fqo),e(U,mqo),e(U,E4),e(E4,lme),e(lme,gqo),e(E4,hqo),e(E4,XG),e(XG,pqo),e(E4,uqo),e(U,_qo),e(U,C4),e(C4,ime),e(ime,bqo),e(C4,vqo),e(C4,zG),e(zG,Fqo),e(C4,Tqo),e(ro,Mqo),e(ro,w4),e(w4,Eqo),e(w4,dme),e(dme,Cqo),e(w4,wqo),e(w4,cme),e(cme,Aqo),e(ro,yqo),M(A4,ro,null),b(f,fPe,_),b(f,Oi,_),e(Oi,y4),e(y4,fme),M(Qy,fme,null),e(Oi,Lqo),e(Oi,mme),e(mme,xqo),b(f,mPe,_),b(f,qo,_),M(Wy,qo,null),e(qo,$qo),e(qo,Vi),e(Vi,kqo),e(Vi,QG),e(QG,Sqo),e(Vi,Rqo),e(Vi,WG),e(WG,Bqo),e(Vi,Pqo),e(qo,Iqo),e(qo,Hy),e(Hy,qqo),e(Hy,gme),e(gme,Nqo),e(Hy,jqo),e(qo,Dqo),e(qo,it),M(Uy,it,null),e(it,Gqo),e(it,hme),e(hme,Oqo),e(it,Vqo),e(it,Xi),e(Xi,Xqo),e(Xi,pme),e(pme,zqo),e(Xi,Qqo),e(Xi,HG),e(HG,Wqo),e(Xi,Hqo),e(it,Uqo),M(L4,it,null),e(qo,Jqo),e(qo,to),M(Jy,to,null),e(to,Yqo),e(to,ume),e(ume,Kqo),e(to,Zqo),e(to,Sa),e(Sa,eNo),e(Sa,_me),e(_me,oNo),e(Sa,rNo),e(Sa,bme),e(bme,tNo),e(Sa,aNo),e(Sa,vme),e(vme,nNo),e(Sa,sNo),e(to,lNo),e(to,O),e(O,x4),e(x4,Fme),e(Fme,iNo),e(x4,dNo),e(x4,UG),e(UG,cNo),e(x4,fNo),e(O,mNo),e(O,$4),e($4,Tme),e(Tme,gNo),e($4,hNo),e($4,JG),e(JG,pNo),e($4,uNo),e(O,_No),e(O,k4),e(k4,Mme),e(Mme,bNo),e(k4,vNo),e(k4,YG),e(YG,FNo),e(k4,TNo),e(O,MNo),e(O,S4),e(S4,Eme),e(Eme,ENo),e(S4,CNo),e(S4,KG),e(KG,wNo),e(S4,ANo),e(O,yNo),e(O,R4),e(R4,Cme),e(Cme,LNo),e(R4,xNo),e(R4,ZG),e(ZG,$No),e(R4,kNo),e(O,SNo),e(O,B4),e(B4,wme),e(wme,RNo),e(B4,BNo),e(B4,eO),e(eO,PNo),e(B4,INo),e(O,qNo),e(O,P4),e(P4,Ame),e(Ame,NNo),e(P4,jNo),e(P4,oO),e(oO,DNo),e(P4,GNo),e(O,ONo),e(O,I4),e(I4,yme),e(yme,VNo),e(I4,XNo),e(I4,rO),e(rO,zNo),e(I4,QNo),e(O,WNo),e(O,q4),e(q4,Lme),e(Lme,HNo),e(q4,UNo),e(q4,tO),e(tO,JNo),e(q4,YNo),e(O,KNo),e(O,N4),e(N4,xme),e(xme,ZNo),e(N4,ejo),e(N4,aO),e(aO,ojo),e(N4,rjo),e(O,tjo),e(O,j4),e(j4,$me),e($me,ajo),e(j4,njo),e(j4,nO),e(nO,sjo),e(j4,ljo),e(O,ijo),e(O,D4),e(D4,kme),e(kme,djo),e(D4,cjo),e(D4,sO),e(sO,fjo),e(D4,mjo),e(O,gjo),e(O,G4),e(G4,Sme),e(Sme,hjo),e(G4,pjo),e(G4,lO),e(lO,ujo),e(G4,_jo),e(O,bjo),e(O,O4),e(O4,Rme),e(Rme,vjo),e(O4,Fjo),e(O4,iO),e(iO,Tjo),e(O4,Mjo),e(O,Ejo),e(O,V4),e(V4,Bme),e(Bme,Cjo),e(V4,wjo),e(V4,dO),e(dO,Ajo),e(V4,yjo),e(O,Ljo),e(O,X4),e(X4,Pme),e(Pme,xjo),e(X4,$jo),e(X4,cO),e(cO,kjo),e(X4,Sjo),e(O,Rjo),e(O,z4),e(z4,Ime),e(Ime,Bjo),e(z4,Pjo),e(z4,fO),e(fO,Ijo),e(z4,qjo),e(O,Njo),e(O,Q4),e(Q4,qme),e(qme,jjo),e(Q4,Djo),e(Q4,mO),e(mO,Gjo),e(Q4,Ojo),e(O,Vjo),e(O,W4),e(W4,Nme),e(Nme,Xjo),e(W4,zjo),e(W4,gO),e(gO,Qjo),e(W4,Wjo),e(O,Hjo),e(O,H4),e(H4,jme),e(jme,Ujo),e(H4,Jjo),e(H4,hO),e(hO,Yjo),e(H4,Kjo),e(O,Zjo),e(O,U4),e(U4,Dme),e(Dme,eDo),e(U4,oDo),e(U4,pO),e(pO,rDo),e(U4,tDo),e(O,aDo),e(O,J4),e(J4,Gme),e(Gme,nDo),e(J4,sDo),e(J4,uO),e(uO,lDo),e(J4,iDo),e(O,dDo),e(O,Y4),e(Y4,Ome),e(Ome,cDo),e(Y4,fDo),e(Y4,_O),e(_O,mDo),e(Y4,gDo),e(O,hDo),e(O,K4),e(K4,Vme),e(Vme,pDo),e(K4,uDo),e(K4,bO),e(bO,_Do),e(K4,bDo),e(O,vDo),e(O,Z4),e(Z4,Xme),e(Xme,FDo),e(Z4,TDo),e(Z4,vO),e(vO,MDo),e(Z4,EDo),e(O,CDo),e(O,e2),e(e2,zme),e(zme,wDo),e(e2,ADo),e(e2,FO),e(FO,yDo),e(e2,LDo),e(O,xDo),e(O,o2),e(o2,Qme),e(Qme,$Do),e(o2,kDo),e(o2,TO),e(TO,SDo),e(o2,RDo),e(O,BDo),e(O,r2),e(r2,Wme),e(Wme,PDo),e(r2,IDo),e(r2,MO),e(MO,qDo),e(r2,NDo),e(O,jDo),e(O,t2),e(t2,Hme),e(Hme,DDo),e(t2,GDo),e(t2,EO),e(EO,ODo),e(t2,VDo),e(O,XDo),e(O,a2),e(a2,Ume),e(Ume,zDo),e(a2,QDo),e(a2,CO),e(CO,WDo),e(a2,HDo),e(O,UDo),e(O,n2),e(n2,Jme),e(Jme,JDo),e(n2,YDo),e(n2,wO),e(wO,KDo),e(n2,ZDo),e(O,eGo),e(O,s2),e(s2,Yme),e(Yme,oGo),e(s2,rGo),e(s2,AO),e(AO,tGo),e(s2,aGo),e(O,nGo),e(O,l2),e(l2,Kme),e(Kme,sGo),e(l2,lGo),e(l2,yO),e(yO,iGo),e(l2,dGo),e(O,cGo),e(O,i2),e(i2,Zme),e(Zme,fGo),e(i2,mGo),e(i2,LO),e(LO,gGo),e(i2,hGo),e(O,pGo),e(O,d2),e(d2,ege),e(ege,uGo),e(d2,_Go),e(d2,xO),e(xO,bGo),e(d2,vGo),e(O,FGo),e(O,c2),e(c2,oge),e(oge,TGo),e(c2,MGo),e(c2,$O),e($O,EGo),e(c2,CGo),e(O,wGo),e(O,f2),e(f2,rge),e(rge,AGo),e(f2,yGo),e(f2,kO),e(kO,LGo),e(f2,xGo),e(O,$Go),e(O,m2),e(m2,tge),e(tge,kGo),e(m2,SGo),e(m2,SO),e(SO,RGo),e(m2,BGo),e(O,PGo),e(O,g2),e(g2,age),e(age,IGo),e(g2,qGo),e(g2,RO),e(RO,NGo),e(g2,jGo),e(to,DGo),e(to,h2),e(h2,GGo),e(h2,nge),e(nge,OGo),e(h2,VGo),e(h2,sge),e(sge,XGo),e(to,zGo),M(p2,to,null),b(f,gPe,_),b(f,zi,_),e(zi,u2),e(u2,lge),M(Yy,lge,null),e(zi,QGo),e(zi,ige),e(ige,WGo),b(f,hPe,_),b(f,No,_),M(Ky,No,null),e(No,HGo),e(No,Qi),e(Qi,UGo),e(Qi,BO),e(BO,JGo),e(Qi,YGo),e(Qi,PO),e(PO,KGo),e(Qi,ZGo),e(No,eOo),e(No,Zy),e(Zy,oOo),e(Zy,dge),e(dge,rOo),e(Zy,tOo),e(No,aOo),e(No,dt),M(eL,dt,null),e(dt,nOo),e(dt,cge),e(cge,sOo),e(dt,lOo),e(dt,Wi),e(Wi,iOo),e(Wi,fge),e(fge,dOo),e(Wi,cOo),e(Wi,IO),e(IO,fOo),e(Wi,mOo),e(dt,gOo),M(_2,dt,null),e(No,hOo),e(No,ao),M(oL,ao,null),e(ao,pOo),e(ao,mge),e(mge,uOo),e(ao,_Oo),e(ao,Ra),e(Ra,bOo),e(Ra,gge),e(gge,vOo),e(Ra,FOo),e(Ra,hge),e(hge,TOo),e(Ra,MOo),e(Ra,pge),e(pge,EOo),e(Ra,COo),e(ao,wOo),e(ao,uge),e(uge,b2),e(b2,_ge),e(_ge,AOo),e(b2,yOo),e(b2,qO),e(qO,LOo),e(b2,xOo),e(ao,$Oo),e(ao,v2),e(v2,kOo),e(v2,bge),e(bge,SOo),e(v2,ROo),e(v2,vge),e(vge,BOo),e(ao,POo),M(F2,ao,null),b(f,pPe,_),b(f,Hi,_),e(Hi,T2),e(T2,Fge),M(rL,Fge,null),e(Hi,IOo),e(Hi,Tge),e(Tge,qOo),b(f,uPe,_),b(f,jo,_),M(tL,jo,null),e(jo,NOo),e(jo,Ui),e(Ui,jOo),e(Ui,NO),e(NO,DOo),e(Ui,GOo),e(Ui,jO),e(jO,OOo),e(Ui,VOo),e(jo,XOo),e(jo,aL),e(aL,zOo),e(aL,Mge),e(Mge,QOo),e(aL,WOo),e(jo,HOo),e(jo,ct),M(nL,ct,null),e(ct,UOo),e(ct,Ege),e(Ege,JOo),e(ct,YOo),e(ct,Ji),e(Ji,KOo),e(Ji,Cge),e(Cge,ZOo),e(Ji,eVo),e(Ji,DO),e(DO,oVo),e(Ji,rVo),e(ct,tVo),M(M2,ct,null),e(jo,aVo),e(jo,no),M(sL,no,null),e(no,nVo),e(no,wge),e(wge,sVo),e(no,lVo),e(no,Ba),e(Ba,iVo),e(Ba,Age),e(Age,dVo),e(Ba,cVo),e(Ba,yge),e(yge,fVo),e(Ba,mVo),e(Ba,Lge),e(Lge,gVo),e(Ba,hVo),e(no,pVo),e(no,Fe),e(Fe,E2),e(E2,xge),e(xge,uVo),e(E2,_Vo),e(E2,GO),e(GO,bVo),e(E2,vVo),e(Fe,FVo),e(Fe,C2),e(C2,$ge),e($ge,TVo),e(C2,MVo),e(C2,OO),e(OO,EVo),e(C2,CVo),e(Fe,wVo),e(Fe,w2),e(w2,kge),e(kge,AVo),e(w2,yVo),e(w2,VO),e(VO,LVo),e(w2,xVo),e(Fe,$Vo),e(Fe,xs),e(xs,Sge),e(Sge,kVo),e(xs,SVo),e(xs,XO),e(XO,RVo),e(xs,BVo),e(xs,zO),e(zO,PVo),e(xs,IVo),e(Fe,qVo),e(Fe,A2),e(A2,Rge),e(Rge,NVo),e(A2,jVo),e(A2,QO),e(QO,DVo),e(A2,GVo),e(Fe,OVo),e(Fe,ft),e(ft,Bge),e(Bge,VVo),e(ft,XVo),e(ft,WO),e(WO,zVo),e(ft,QVo),e(ft,HO),e(HO,WVo),e(ft,HVo),e(ft,UO),e(UO,UVo),e(ft,JVo),e(Fe,YVo),e(Fe,y2),e(y2,Pge),e(Pge,KVo),e(y2,ZVo),e(y2,JO),e(JO,eXo),e(y2,oXo),e(Fe,rXo),e(Fe,L2),e(L2,Ige),e(Ige,tXo),e(L2,aXo),e(L2,YO),e(YO,nXo),e(L2,sXo),e(Fe,lXo),e(Fe,x2),e(x2,qge),e(qge,iXo),e(x2,dXo),e(x2,KO),e(KO,cXo),e(x2,fXo),e(Fe,mXo),e(Fe,$2),e($2,Nge),e(Nge,gXo),e($2,hXo),e($2,ZO),e(ZO,pXo),e($2,uXo),e(Fe,_Xo),e(Fe,k2),e(k2,jge),e(jge,bXo),e(k2,vXo),e(k2,eV),e(eV,FXo),e(k2,TXo),e(Fe,MXo),e(Fe,S2),e(S2,Dge),e(Dge,EXo),e(S2,CXo),e(S2,oV),e(oV,wXo),e(S2,AXo),e(Fe,yXo),e(Fe,R2),e(R2,Gge),e(Gge,LXo),e(R2,xXo),e(R2,rV),e(rV,$Xo),e(R2,kXo),e(no,SXo),e(no,B2),e(B2,RXo),e(B2,Oge),e(Oge,BXo),e(B2,PXo),e(B2,Vge),e(Vge,IXo),e(no,qXo),M(P2,no,null),b(f,_Pe,_),b(f,Yi,_),e(Yi,I2),e(I2,Xge),M(lL,Xge,null),e(Yi,NXo),e(Yi,zge),e(zge,jXo),b(f,bPe,_),b(f,Do,_),M(iL,Do,null),e(Do,DXo),e(Do,Ki),e(Ki,GXo),e(Ki,tV),e(tV,OXo),e(Ki,VXo),e(Ki,aV),e(aV,XXo),e(Ki,zXo),e(Do,QXo),e(Do,dL),e(dL,WXo),e(dL,Qge),e(Qge,HXo),e(dL,UXo),e(Do,JXo),e(Do,mt),M(cL,mt,null),e(mt,YXo),e(mt,Wge),e(Wge,KXo),e(mt,ZXo),e(mt,Zi),e(Zi,ezo),e(Zi,Hge),e(Hge,ozo),e(Zi,rzo),e(Zi,nV),e(nV,tzo),e(Zi,azo),e(mt,nzo),M(q2,mt,null),e(Do,szo),e(Do,so),M(fL,so,null),e(so,lzo),e(so,Uge),e(Uge,izo),e(so,dzo),e(so,Pa),e(Pa,czo),e(Pa,Jge),e(Jge,fzo),e(Pa,mzo),e(Pa,Yge),e(Yge,gzo),e(Pa,hzo),e(Pa,Kge),e(Kge,pzo),e(Pa,uzo),e(so,_zo),e(so,Zge),e(Zge,N2),e(N2,ehe),e(ehe,bzo),e(N2,vzo),e(N2,sV),e(sV,Fzo),e(N2,Tzo),e(so,Mzo),e(so,j2),e(j2,Ezo),e(j2,ohe),e(ohe,Czo),e(j2,wzo),e(j2,rhe),e(rhe,Azo),e(so,yzo),M(D2,so,null),b(f,vPe,_),b(f,ed,_),e(ed,G2),e(G2,the),M(mL,the,null),e(ed,Lzo),e(ed,ahe),e(ahe,xzo),b(f,FPe,_),b(f,Go,_),M(gL,Go,null),e(Go,$zo),e(Go,od),e(od,kzo),e(od,lV),e(lV,Szo),e(od,Rzo),e(od,iV),e(iV,Bzo),e(od,Pzo),e(Go,Izo),e(Go,hL),e(hL,qzo),e(hL,nhe),e(nhe,Nzo),e(hL,jzo),e(Go,Dzo),e(Go,gt),M(pL,gt,null),e(gt,Gzo),e(gt,she),e(she,Ozo),e(gt,Vzo),e(gt,rd),e(rd,Xzo),e(rd,lhe),e(lhe,zzo),e(rd,Qzo),e(rd,dV),e(dV,Wzo),e(rd,Hzo),e(gt,Uzo),M(O2,gt,null),e(Go,Jzo),e(Go,lo),M(uL,lo,null),e(lo,Yzo),e(lo,ihe),e(ihe,Kzo),e(lo,Zzo),e(lo,Ia),e(Ia,eQo),e(Ia,dhe),e(dhe,oQo),e(Ia,rQo),e(Ia,che),e(che,tQo),e(Ia,aQo),e(Ia,fhe),e(fhe,nQo),e(Ia,sQo),e(lo,lQo),e(lo,Ne),e(Ne,V2),e(V2,mhe),e(mhe,iQo),e(V2,dQo),e(V2,cV),e(cV,cQo),e(V2,fQo),e(Ne,mQo),e(Ne,X2),e(X2,ghe),e(ghe,gQo),e(X2,hQo),e(X2,fV),e(fV,pQo),e(X2,uQo),e(Ne,_Qo),e(Ne,z2),e(z2,hhe),e(hhe,bQo),e(z2,vQo),e(z2,mV),e(mV,FQo),e(z2,TQo),e(Ne,MQo),e(Ne,Q2),e(Q2,phe),e(phe,EQo),e(Q2,CQo),e(Q2,gV),e(gV,wQo),e(Q2,AQo),e(Ne,yQo),e(Ne,W2),e(W2,uhe),e(uhe,LQo),e(W2,xQo),e(W2,hV),e(hV,$Qo),e(W2,kQo),e(Ne,SQo),e(Ne,H2),e(H2,_he),e(_he,RQo),e(H2,BQo),e(H2,pV),e(pV,PQo),e(H2,IQo),e(Ne,qQo),e(Ne,U2),e(U2,bhe),e(bhe,NQo),e(U2,jQo),e(U2,uV),e(uV,DQo),e(U2,GQo),e(Ne,OQo),e(Ne,J2),e(J2,vhe),e(vhe,VQo),e(J2,XQo),e(J2,_V),e(_V,zQo),e(J2,QQo),e(lo,WQo),e(lo,Y2),e(Y2,HQo),e(Y2,Fhe),e(Fhe,UQo),e(Y2,JQo),e(Y2,The),e(The,YQo),e(lo,KQo),M(K2,lo,null),b(f,TPe,_),b(f,td,_),e(td,Z2),e(Z2,Mhe),M(_L,Mhe,null),e(td,ZQo),e(td,Ehe),e(Ehe,eWo),b(f,MPe,_),b(f,Oo,_),M(bL,Oo,null),e(Oo,oWo),e(Oo,ad),e(ad,rWo),e(ad,bV),e(bV,tWo),e(ad,aWo),e(ad,vV),e(vV,nWo),e(ad,sWo),e(Oo,lWo),e(Oo,vL),e(vL,iWo),e(vL,Che),e(Che,dWo),e(vL,cWo),e(Oo,fWo),e(Oo,ht),M(FL,ht,null),e(ht,mWo),e(ht,whe),e(whe,gWo),e(ht,hWo),e(ht,nd),e(nd,pWo),e(nd,Ahe),e(Ahe,uWo),e(nd,_Wo),e(nd,FV),e(FV,bWo),e(nd,vWo),e(ht,FWo),M(e5,ht,null),e(Oo,TWo),e(Oo,io),M(TL,io,null),e(io,MWo),e(io,yhe),e(yhe,EWo),e(io,CWo),e(io,qa),e(qa,wWo),e(qa,Lhe),e(Lhe,AWo),e(qa,yWo),e(qa,xhe),e(xhe,LWo),e(qa,xWo),e(qa,$he),e($he,$Wo),e(qa,kWo),e(io,SWo),e(io,Na),e(Na,o5),e(o5,khe),e(khe,RWo),e(o5,BWo),e(o5,TV),e(TV,PWo),e(o5,IWo),e(Na,qWo),e(Na,r5),e(r5,She),e(She,NWo),e(r5,jWo),e(r5,MV),e(MV,DWo),e(r5,GWo),e(Na,OWo),e(Na,t5),e(t5,Rhe),e(Rhe,VWo),e(t5,XWo),e(t5,EV),e(EV,zWo),e(t5,QWo),e(Na,WWo),e(Na,a5),e(a5,Bhe),e(Bhe,HWo),e(a5,UWo),e(a5,CV),e(CV,JWo),e(a5,YWo),e(io,KWo),e(io,n5),e(n5,ZWo),e(n5,Phe),e(Phe,eHo),e(n5,oHo),e(n5,Ihe),e(Ihe,rHo),e(io,tHo),M(s5,io,null),b(f,EPe,_),b(f,sd,_),e(sd,l5),e(l5,qhe),M(ML,qhe,null),e(sd,aHo),e(sd,Nhe),e(Nhe,nHo),b(f,CPe,_),b(f,Vo,_),M(EL,Vo,null),e(Vo,sHo),e(Vo,ld),e(ld,lHo),e(ld,wV),e(wV,iHo),e(ld,dHo),e(ld,AV),e(AV,cHo),e(ld,fHo),e(Vo,mHo),e(Vo,CL),e(CL,gHo),e(CL,jhe),e(jhe,hHo),e(CL,pHo),e(Vo,uHo),e(Vo,pt),M(wL,pt,null),e(pt,_Ho),e(pt,Dhe),e(Dhe,bHo),e(pt,vHo),e(pt,id),e(id,FHo),e(id,Ghe),e(Ghe,THo),e(id,MHo),e(id,yV),e(yV,EHo),e(id,CHo),e(pt,wHo),M(i5,pt,null),e(Vo,AHo),e(Vo,co),M(AL,co,null),e(co,yHo),e(co,Ohe),e(Ohe,LHo),e(co,xHo),e(co,ja),e(ja,$Ho),e(ja,Vhe),e(Vhe,kHo),e(ja,SHo),e(ja,Xhe),e(Xhe,RHo),e(ja,BHo),e(ja,zhe),e(zhe,PHo),e(ja,IHo),e(co,qHo),e(co,je),e(je,d5),e(d5,Qhe),e(Qhe,NHo),e(d5,jHo),e(d5,LV),e(LV,DHo),e(d5,GHo),e(je,OHo),e(je,c5),e(c5,Whe),e(Whe,VHo),e(c5,XHo),e(c5,xV),e(xV,zHo),e(c5,QHo),e(je,WHo),e(je,f5),e(f5,Hhe),e(Hhe,HHo),e(f5,UHo),e(f5,$V),e($V,JHo),e(f5,YHo),e(je,KHo),e(je,m5),e(m5,Uhe),e(Uhe,ZHo),e(m5,eUo),e(m5,kV),e(kV,oUo),e(m5,rUo),e(je,tUo),e(je,g5),e(g5,Jhe),e(Jhe,aUo),e(g5,nUo),e(g5,SV),e(SV,sUo),e(g5,lUo),e(je,iUo),e(je,h5),e(h5,Yhe),e(Yhe,dUo),e(h5,cUo),e(h5,RV),e(RV,fUo),e(h5,mUo),e(je,gUo),e(je,p5),e(p5,Khe),e(Khe,hUo),e(p5,pUo),e(p5,BV),e(BV,uUo),e(p5,_Uo),e(je,bUo),e(je,u5),e(u5,Zhe),e(Zhe,vUo),e(u5,FUo),e(u5,PV),e(PV,TUo),e(u5,MUo),e(co,EUo),e(co,_5),e(_5,CUo),e(_5,epe),e(epe,wUo),e(_5,AUo),e(_5,ope),e(ope,yUo),e(co,LUo),M(b5,co,null),b(f,wPe,_),b(f,dd,_),e(dd,v5),e(v5,rpe),M(yL,rpe,null),e(dd,xUo),e(dd,tpe),e(tpe,$Uo),b(f,APe,_),b(f,Xo,_),M(LL,Xo,null),e(Xo,kUo),e(Xo,cd),e(cd,SUo),e(cd,IV),e(IV,RUo),e(cd,BUo),e(cd,qV),e(qV,PUo),e(cd,IUo),e(Xo,qUo),e(Xo,xL),e(xL,NUo),e(xL,ape),e(ape,jUo),e(xL,DUo),e(Xo,GUo),e(Xo,ut),M($L,ut,null),e(ut,OUo),e(ut,npe),e(npe,VUo),e(ut,XUo),e(ut,fd),e(fd,zUo),e(fd,spe),e(spe,QUo),e(fd,WUo),e(fd,NV),e(NV,HUo),e(fd,UUo),e(ut,JUo),M(F5,ut,null),e(Xo,YUo),e(Xo,fo),M(kL,fo,null),e(fo,KUo),e(fo,lpe),e(lpe,ZUo),e(fo,eJo),e(fo,Da),e(Da,oJo),e(Da,ipe),e(ipe,rJo),e(Da,tJo),e(Da,dpe),e(dpe,aJo),e(Da,nJo),e(Da,cpe),e(cpe,sJo),e(Da,lJo),e(fo,iJo),e(fo,SL),e(SL,T5),e(T5,fpe),e(fpe,dJo),e(T5,cJo),e(T5,jV),e(jV,fJo),e(T5,mJo),e(SL,gJo),e(SL,M5),e(M5,mpe),e(mpe,hJo),e(M5,pJo),e(M5,DV),e(DV,uJo),e(M5,_Jo),e(fo,bJo),e(fo,E5),e(E5,vJo),e(E5,gpe),e(gpe,FJo),e(E5,TJo),e(E5,hpe),e(hpe,MJo),e(fo,EJo),M(C5,fo,null),b(f,yPe,_),b(f,md,_),e(md,w5),e(w5,ppe),M(RL,ppe,null),e(md,CJo),e(md,upe),e(upe,wJo),b(f,LPe,_),b(f,zo,_),M(BL,zo,null),e(zo,AJo),e(zo,gd),e(gd,yJo),e(gd,GV),e(GV,LJo),e(gd,xJo),e(gd,OV),e(OV,$Jo),e(gd,kJo),e(zo,SJo),e(zo,PL),e(PL,RJo),e(PL,_pe),e(_pe,BJo),e(PL,PJo),e(zo,IJo),e(zo,_t),M(IL,_t,null),e(_t,qJo),e(_t,bpe),e(bpe,NJo),e(_t,jJo),e(_t,hd),e(hd,DJo),e(hd,vpe),e(vpe,GJo),e(hd,OJo),e(hd,VV),e(VV,VJo),e(hd,XJo),e(_t,zJo),M(A5,_t,null),e(zo,QJo),e(zo,mo),M(qL,mo,null),e(mo,WJo),e(mo,Fpe),e(Fpe,HJo),e(mo,UJo),e(mo,Ga),e(Ga,JJo),e(Ga,Tpe),e(Tpe,YJo),e(Ga,KJo),e(Ga,Mpe),e(Mpe,ZJo),e(Ga,eYo),e(Ga,Epe),e(Epe,oYo),e(Ga,rYo),e(mo,tYo),e(mo,Oa),e(Oa,y5),e(y5,Cpe),e(Cpe,aYo),e(y5,nYo),e(y5,XV),e(XV,sYo),e(y5,lYo),e(Oa,iYo),e(Oa,L5),e(L5,wpe),e(wpe,dYo),e(L5,cYo),e(L5,zV),e(zV,fYo),e(L5,mYo),e(Oa,gYo),e(Oa,x5),e(x5,Ape),e(Ape,hYo),e(x5,pYo),e(x5,QV),e(QV,uYo),e(x5,_Yo),e(Oa,bYo),e(Oa,$5),e($5,ype),e(ype,vYo),e($5,FYo),e($5,WV),e(WV,TYo),e($5,MYo),e(mo,EYo),e(mo,k5),e(k5,CYo),e(k5,Lpe),e(Lpe,wYo),e(k5,AYo),e(k5,xpe),e(xpe,yYo),e(mo,LYo),M(S5,mo,null),b(f,xPe,_),b(f,pd,_),e(pd,R5),e(R5,$pe),M(NL,$pe,null),e(pd,xYo),e(pd,kpe),e(kpe,$Yo),b(f,$Pe,_),b(f,Qo,_),M(jL,Qo,null),e(Qo,kYo),e(Qo,ud),e(ud,SYo),e(ud,HV),e(HV,RYo),e(ud,BYo),e(ud,UV),e(UV,PYo),e(ud,IYo),e(Qo,qYo),e(Qo,DL),e(DL,NYo),e(DL,Spe),e(Spe,jYo),e(DL,DYo),e(Qo,GYo),e(Qo,bt),M(GL,bt,null),e(bt,OYo),e(bt,Rpe),e(Rpe,VYo),e(bt,XYo),e(bt,_d),e(_d,zYo),e(_d,Bpe),e(Bpe,QYo),e(_d,WYo),e(_d,JV),e(JV,HYo),e(_d,UYo),e(bt,JYo),M(B5,bt,null),e(Qo,YYo),e(Qo,go),M(OL,go,null),e(go,KYo),e(go,Ppe),e(Ppe,ZYo),e(go,eKo),e(go,Va),e(Va,oKo),e(Va,Ipe),e(Ipe,rKo),e(Va,tKo),e(Va,qpe),e(qpe,aKo),e(Va,nKo),e(Va,Npe),e(Npe,sKo),e(Va,lKo),e(go,iKo),e(go,bd),e(bd,P5),e(P5,jpe),e(jpe,dKo),e(P5,cKo),e(P5,YV),e(YV,fKo),e(P5,mKo),e(bd,gKo),e(bd,I5),e(I5,Dpe),e(Dpe,hKo),e(I5,pKo),e(I5,KV),e(KV,uKo),e(I5,_Ko),e(bd,bKo),e(bd,q5),e(q5,Gpe),e(Gpe,vKo),e(q5,FKo),e(q5,ZV),e(ZV,TKo),e(q5,MKo),e(go,EKo),e(go,N5),e(N5,CKo),e(N5,Ope),e(Ope,wKo),e(N5,AKo),e(N5,Vpe),e(Vpe,yKo),e(go,LKo),M(j5,go,null),b(f,kPe,_),b(f,vd,_),e(vd,D5),e(D5,Xpe),M(VL,Xpe,null),e(vd,xKo),e(vd,zpe),e(zpe,$Ko),b(f,SPe,_),b(f,Wo,_),M(XL,Wo,null),e(Wo,kKo),e(Wo,Fd),e(Fd,SKo),e(Fd,eX),e(eX,RKo),e(Fd,BKo),e(Fd,oX),e(oX,PKo),e(Fd,IKo),e(Wo,qKo),e(Wo,zL),e(zL,NKo),e(zL,Qpe),e(Qpe,jKo),e(zL,DKo),e(Wo,GKo),e(Wo,vt),M(QL,vt,null),e(vt,OKo),e(vt,Wpe),e(Wpe,VKo),e(vt,XKo),e(vt,Td),e(Td,zKo),e(Td,Hpe),e(Hpe,QKo),e(Td,WKo),e(Td,rX),e(rX,HKo),e(Td,UKo),e(vt,JKo),M(G5,vt,null),e(Wo,YKo),e(Wo,ho),M(WL,ho,null),e(ho,KKo),e(ho,Upe),e(Upe,ZKo),e(ho,eZo),e(ho,Xa),e(Xa,oZo),e(Xa,Jpe),e(Jpe,rZo),e(Xa,tZo),e(Xa,Ype),e(Ype,aZo),e(Xa,nZo),e(Xa,Kpe),e(Kpe,sZo),e(Xa,lZo),e(ho,iZo),e(ho,HL),e(HL,O5),e(O5,Zpe),e(Zpe,dZo),e(O5,cZo),e(O5,tX),e(tX,fZo),e(O5,mZo),e(HL,gZo),e(HL,V5),e(V5,eue),e(eue,hZo),e(V5,pZo),e(V5,aX),e(aX,uZo),e(V5,_Zo),e(ho,bZo),e(ho,X5),e(X5,vZo),e(X5,oue),e(oue,FZo),e(X5,TZo),e(X5,rue),e(rue,MZo),e(ho,EZo),M(z5,ho,null),b(f,RPe,_),b(f,Md,_),e(Md,Q5),e(Q5,tue),M(UL,tue,null),e(Md,CZo),e(Md,aue),e(aue,wZo),b(f,BPe,_),b(f,Ho,_),M(JL,Ho,null),e(Ho,AZo),e(Ho,Ed),e(Ed,yZo),e(Ed,nX),e(nX,LZo),e(Ed,xZo),e(Ed,sX),e(sX,$Zo),e(Ed,kZo),e(Ho,SZo),e(Ho,YL),e(YL,RZo),e(YL,nue),e(nue,BZo),e(YL,PZo),e(Ho,IZo),e(Ho,Ft),M(KL,Ft,null),e(Ft,qZo),e(Ft,sue),e(sue,NZo),e(Ft,jZo),e(Ft,Cd),e(Cd,DZo),e(Cd,lue),e(lue,GZo),e(Cd,OZo),e(Cd,lX),e(lX,VZo),e(Cd,XZo),e(Ft,zZo),M(W5,Ft,null),e(Ho,QZo),e(Ho,po),M(ZL,po,null),e(po,WZo),e(po,iue),e(iue,HZo),e(po,UZo),e(po,za),e(za,JZo),e(za,due),e(due,YZo),e(za,KZo),e(za,cue),e(cue,ZZo),e(za,eer),e(za,fue),e(fue,oer),e(za,rer),e(po,ter),e(po,mue),e(mue,H5),e(H5,gue),e(gue,aer),e(H5,ner),e(H5,iX),e(iX,ser),e(H5,ler),e(po,ier),e(po,U5),e(U5,der),e(U5,hue),e(hue,cer),e(U5,fer),e(U5,pue),e(pue,mer),e(po,ger),M(J5,po,null),b(f,PPe,_),b(f,wd,_),e(wd,Y5),e(Y5,uue),M(e8,uue,null),e(wd,her),e(wd,_ue),e(_ue,per),b(f,IPe,_),b(f,Uo,_),M(o8,Uo,null),e(Uo,uer),e(Uo,Ad),e(Ad,_er),e(Ad,dX),e(dX,ber),e(Ad,ver),e(Ad,cX),e(cX,Fer),e(Ad,Ter),e(Uo,Mer),e(Uo,r8),e(r8,Eer),e(r8,bue),e(bue,Cer),e(r8,wer),e(Uo,Aer),e(Uo,Tt),M(t8,Tt,null),e(Tt,yer),e(Tt,vue),e(vue,Ler),e(Tt,xer),e(Tt,yd),e(yd,$er),e(yd,Fue),e(Fue,ker),e(yd,Ser),e(yd,fX),e(fX,Rer),e(yd,Ber),e(Tt,Per),M(K5,Tt,null),e(Uo,Ier),e(Uo,uo),M(a8,uo,null),e(uo,qer),e(uo,Tue),e(Tue,Ner),e(uo,jer),e(uo,Qa),e(Qa,Der),e(Qa,Mue),e(Mue,Ger),e(Qa,Oer),e(Qa,Eue),e(Eue,Ver),e(Qa,Xer),e(Qa,Cue),e(Cue,zer),e(Qa,Qer),e(uo,Wer),e(uo,Wa),e(Wa,Z5),e(Z5,wue),e(wue,Her),e(Z5,Uer),e(Z5,mX),e(mX,Jer),e(Z5,Yer),e(Wa,Ker),e(Wa,ev),e(ev,Aue),e(Aue,Zer),e(ev,eor),e(ev,gX),e(gX,oor),e(ev,ror),e(Wa,tor),e(Wa,ov),e(ov,yue),e(yue,aor),e(ov,nor),e(ov,hX),e(hX,sor),e(ov,lor),e(Wa,ior),e(Wa,rv),e(rv,Lue),e(Lue,dor),e(rv,cor),e(rv,pX),e(pX,mor),e(rv,gor),e(uo,hor),e(uo,tv),e(tv,por),e(tv,xue),e(xue,uor),e(tv,_or),e(tv,$ue),e($ue,bor),e(uo,vor),M(av,uo,null),b(f,qPe,_),b(f,Ld,_),e(Ld,nv),e(nv,kue),M(n8,kue,null),e(Ld,For),e(Ld,Sue),e(Sue,Tor),b(f,NPe,_),b(f,Jo,_),M(s8,Jo,null),e(Jo,Mor),e(Jo,xd),e(xd,Eor),e(xd,uX),e(uX,Cor),e(xd,wor),e(xd,_X),e(_X,Aor),e(xd,yor),e(Jo,Lor),e(Jo,l8),e(l8,xor),e(l8,Rue),e(Rue,$or),e(l8,kor),e(Jo,Sor),e(Jo,Mt),M(i8,Mt,null),e(Mt,Ror),e(Mt,Bue),e(Bue,Bor),e(Mt,Por),e(Mt,$d),e($d,Ior),e($d,Pue),e(Pue,qor),e($d,Nor),e($d,bX),e(bX,jor),e($d,Dor),e(Mt,Gor),M(sv,Mt,null),e(Jo,Oor),e(Jo,_o),M(d8,_o,null),e(_o,Vor),e(_o,Iue),e(Iue,Xor),e(_o,zor),e(_o,Ha),e(Ha,Qor),e(Ha,que),e(que,Wor),e(Ha,Hor),e(Ha,Nue),e(Nue,Uor),e(Ha,Jor),e(Ha,jue),e(jue,Yor),e(Ha,Kor),e(_o,Zor),e(_o,Due),e(Due,lv),e(lv,Gue),e(Gue,err),e(lv,orr),e(lv,vX),e(vX,rrr),e(lv,trr),e(_o,arr),e(_o,iv),e(iv,nrr),e(iv,Oue),e(Oue,srr),e(iv,lrr),e(iv,Vue),e(Vue,irr),e(_o,drr),M(dv,_o,null),b(f,jPe,_),b(f,kd,_),e(kd,cv),e(cv,Xue),M(c8,Xue,null),e(kd,crr),e(kd,zue),e(zue,frr),b(f,DPe,_),b(f,Yo,_),M(f8,Yo,null),e(Yo,mrr),e(Yo,Sd),e(Sd,grr),e(Sd,FX),e(FX,hrr),e(Sd,prr),e(Sd,TX),e(TX,urr),e(Sd,_rr),e(Yo,brr),e(Yo,m8),e(m8,vrr),e(m8,Que),e(Que,Frr),e(m8,Trr),e(Yo,Mrr),e(Yo,Et),M(g8,Et,null),e(Et,Err),e(Et,Wue),e(Wue,Crr),e(Et,wrr),e(Et,Rd),e(Rd,Arr),e(Rd,Hue),e(Hue,yrr),e(Rd,Lrr),e(Rd,MX),e(MX,xrr),e(Rd,$rr),e(Et,krr),M(fv,Et,null),e(Yo,Srr),e(Yo,Cr),M(h8,Cr,null),e(Cr,Rrr),e(Cr,Uue),e(Uue,Brr),e(Cr,Prr),e(Cr,Ua),e(Ua,Irr),e(Ua,Jue),e(Jue,qrr),e(Ua,Nrr),e(Ua,Yue),e(Yue,jrr),e(Ua,Drr),e(Ua,Kue),e(Kue,Grr),e(Ua,Orr),e(Cr,Vrr),e(Cr,j),e(j,mv),e(mv,Zue),e(Zue,Xrr),e(mv,zrr),e(mv,EX),e(EX,Qrr),e(mv,Wrr),e(j,Hrr),e(j,gv),e(gv,e_e),e(e_e,Urr),e(gv,Jrr),e(gv,CX),e(CX,Yrr),e(gv,Krr),e(j,Zrr),e(j,hv),e(hv,o_e),e(o_e,etr),e(hv,otr),e(hv,wX),e(wX,rtr),e(hv,ttr),e(j,atr),e(j,pv),e(pv,r_e),e(r_e,ntr),e(pv,str),e(pv,AX),e(AX,ltr),e(pv,itr),e(j,dtr),e(j,uv),e(uv,t_e),e(t_e,ctr),e(uv,ftr),e(uv,yX),e(yX,mtr),e(uv,gtr),e(j,htr),e(j,_v),e(_v,a_e),e(a_e,ptr),e(_v,utr),e(_v,LX),e(LX,_tr),e(_v,btr),e(j,vtr),e(j,bv),e(bv,n_e),e(n_e,Ftr),e(bv,Ttr),e(bv,xX),e(xX,Mtr),e(bv,Etr),e(j,Ctr),e(j,vv),e(vv,s_e),e(s_e,wtr),e(vv,Atr),e(vv,$X),e($X,ytr),e(vv,Ltr),e(j,xtr),e(j,Fv),e(Fv,l_e),e(l_e,$tr),e(Fv,ktr),e(Fv,kX),e(kX,Str),e(Fv,Rtr),e(j,Btr),e(j,Tv),e(Tv,i_e),e(i_e,Ptr),e(Tv,Itr),e(Tv,SX),e(SX,qtr),e(Tv,Ntr),e(j,jtr),e(j,Mv),e(Mv,d_e),e(d_e,Dtr),e(Mv,Gtr),e(Mv,RX),e(RX,Otr),e(Mv,Vtr),e(j,Xtr),e(j,Ev),e(Ev,c_e),e(c_e,ztr),e(Ev,Qtr),e(Ev,BX),e(BX,Wtr),e(Ev,Htr),e(j,Utr),e(j,Cv),e(Cv,f_e),e(f_e,Jtr),e(Cv,Ytr),e(Cv,PX),e(PX,Ktr),e(Cv,Ztr),e(j,ear),e(j,wv),e(wv,m_e),e(m_e,oar),e(wv,rar),e(wv,IX),e(IX,tar),e(wv,aar),e(j,nar),e(j,Av),e(Av,g_e),e(g_e,sar),e(Av,lar),e(Av,qX),e(qX,iar),e(Av,dar),e(j,car),e(j,yv),e(yv,h_e),e(h_e,far),e(yv,mar),e(yv,NX),e(NX,gar),e(yv,har),e(j,par),e(j,Lv),e(Lv,p_e),e(p_e,uar),e(Lv,_ar),e(Lv,jX),e(jX,bar),e(Lv,Far),e(j,Tar),e(j,$s),e($s,u_e),e(u_e,Mar),e($s,Ear),e($s,DX),e(DX,Car),e($s,war),e($s,GX),e(GX,Aar),e($s,yar),e(j,Lar),e(j,xv),e(xv,__e),e(__e,xar),e(xv,$ar),e(xv,OX),e(OX,kar),e(xv,Sar),e(j,Rar),e(j,$v),e($v,b_e),e(b_e,Bar),e($v,Par),e($v,VX),e(VX,Iar),e($v,qar),e(j,Nar),e(j,kv),e(kv,v_e),e(v_e,jar),e(kv,Dar),e(kv,XX),e(XX,Gar),e(kv,Oar),e(j,Var),e(j,Sv),e(Sv,F_e),e(F_e,Xar),e(Sv,zar),e(Sv,zX),e(zX,Qar),e(Sv,War),e(j,Har),e(j,Rv),e(Rv,T_e),e(T_e,Uar),e(Rv,Jar),e(Rv,QX),e(QX,Yar),e(Rv,Kar),e(j,Zar),e(j,Bv),e(Bv,M_e),e(M_e,enr),e(Bv,onr),e(Bv,WX),e(WX,rnr),e(Bv,tnr),e(j,anr),e(j,Pv),e(Pv,E_e),e(E_e,nnr),e(Pv,snr),e(Pv,HX),e(HX,lnr),e(Pv,inr),e(j,dnr),e(j,Iv),e(Iv,C_e),e(C_e,cnr),e(Iv,fnr),e(Iv,UX),e(UX,mnr),e(Iv,gnr),e(j,hnr),e(j,qv),e(qv,w_e),e(w_e,pnr),e(qv,unr),e(qv,JX),e(JX,_nr),e(qv,bnr),e(j,vnr),e(j,Nv),e(Nv,A_e),e(A_e,Fnr),e(Nv,Tnr),e(Nv,YX),e(YX,Mnr),e(Nv,Enr),e(j,Cnr),e(j,jv),e(jv,y_e),e(y_e,wnr),e(jv,Anr),e(jv,KX),e(KX,ynr),e(jv,Lnr),e(j,xnr),e(j,Dv),e(Dv,L_e),e(L_e,$nr),e(Dv,knr),e(Dv,ZX),e(ZX,Snr),e(Dv,Rnr),e(j,Bnr),e(j,Gv),e(Gv,x_e),e(x_e,Pnr),e(Gv,Inr),e(Gv,ez),e(ez,qnr),e(Gv,Nnr),e(j,jnr),e(j,Ov),e(Ov,$_e),e($_e,Dnr),e(Ov,Gnr),e(Ov,oz),e(oz,Onr),e(Ov,Vnr),e(j,Xnr),e(j,Vv),e(Vv,k_e),e(k_e,znr),e(Vv,Qnr),e(Vv,rz),e(rz,Wnr),e(Vv,Hnr),e(j,Unr),e(j,Xv),e(Xv,S_e),e(S_e,Jnr),e(Xv,Ynr),e(Xv,tz),e(tz,Knr),e(Xv,Znr),e(j,esr),e(j,zv),e(zv,R_e),e(R_e,osr),e(zv,rsr),e(zv,az),e(az,tsr),e(zv,asr),e(j,nsr),e(j,Qv),e(Qv,B_e),e(B_e,ssr),e(Qv,lsr),e(Qv,nz),e(nz,isr),e(Qv,dsr),e(j,csr),e(j,Wv),e(Wv,P_e),e(P_e,fsr),e(Wv,msr),e(Wv,sz),e(sz,gsr),e(Wv,hsr),e(j,psr),e(j,Hv),e(Hv,I_e),e(I_e,usr),e(Hv,_sr),e(Hv,lz),e(lz,bsr),e(Hv,vsr),e(j,Fsr),e(j,Uv),e(Uv,q_e),e(q_e,Tsr),e(Uv,Msr),e(Uv,iz),e(iz,Esr),e(Uv,Csr),e(j,wsr),e(j,Jv),e(Jv,N_e),e(N_e,Asr),e(Jv,ysr),e(Jv,dz),e(dz,Lsr),e(Jv,xsr),e(j,$sr),e(j,Yv),e(Yv,j_e),e(j_e,ksr),e(Yv,Ssr),e(Yv,cz),e(cz,Rsr),e(Yv,Bsr),e(j,Psr),e(j,Kv),e(Kv,D_e),e(D_e,Isr),e(Kv,qsr),e(Kv,fz),e(fz,Nsr),e(Kv,jsr),e(j,Dsr),e(j,Zv),e(Zv,G_e),e(G_e,Gsr),e(Zv,Osr),e(Zv,mz),e(mz,Vsr),e(Zv,Xsr),e(j,zsr),e(j,eF),e(eF,O_e),e(O_e,Qsr),e(eF,Wsr),e(eF,gz),e(gz,Hsr),e(eF,Usr),e(j,Jsr),e(j,oF),e(oF,V_e),e(V_e,Ysr),e(oF,Ksr),e(oF,hz),e(hz,Zsr),e(oF,elr),e(Cr,olr),M(rF,Cr,null),b(f,GPe,_),b(f,Bd,_),e(Bd,tF),e(tF,X_e),M(p8,X_e,null),e(Bd,rlr),e(Bd,z_e),e(z_e,tlr),b(f,OPe,_),b(f,Ko,_),M(u8,Ko,null),e(Ko,alr),e(Ko,Pd),e(Pd,nlr),e(Pd,pz),e(pz,slr),e(Pd,llr),e(Pd,uz),e(uz,ilr),e(Pd,dlr),e(Ko,clr),e(Ko,_8),e(_8,flr),e(_8,Q_e),e(Q_e,mlr),e(_8,glr),e(Ko,hlr),e(Ko,Ct),M(b8,Ct,null),e(Ct,plr),e(Ct,W_e),e(W_e,ulr),e(Ct,_lr),e(Ct,Id),e(Id,blr),e(Id,H_e),e(H_e,vlr),e(Id,Flr),e(Id,_z),e(_z,Tlr),e(Id,Mlr),e(Ct,Elr),M(aF,Ct,null),e(Ko,Clr),e(Ko,wr),M(v8,wr,null),e(wr,wlr),e(wr,U_e),e(U_e,Alr),e(wr,ylr),e(wr,Ja),e(Ja,Llr),e(Ja,J_e),e(J_e,xlr),e(Ja,$lr),e(Ja,Y_e),e(Y_e,klr),e(Ja,Slr),e(Ja,K_e),e(K_e,Rlr),e(Ja,Blr),e(wr,Plr),e(wr,se),e(se,nF),e(nF,Z_e),e(Z_e,Ilr),e(nF,qlr),e(nF,bz),e(bz,Nlr),e(nF,jlr),e(se,Dlr),e(se,sF),e(sF,e6e),e(e6e,Glr),e(sF,Olr),e(sF,vz),e(vz,Vlr),e(sF,Xlr),e(se,zlr),e(se,lF),e(lF,o6e),e(o6e,Qlr),e(lF,Wlr),e(lF,Fz),e(Fz,Hlr),e(lF,Ulr),e(se,Jlr),e(se,iF),e(iF,r6e),e(r6e,Ylr),e(iF,Klr),e(iF,Tz),e(Tz,Zlr),e(iF,eir),e(se,oir),e(se,dF),e(dF,t6e),e(t6e,rir),e(dF,tir),e(dF,Mz),e(Mz,air),e(dF,nir),e(se,sir),e(se,cF),e(cF,a6e),e(a6e,lir),e(cF,iir),e(cF,Ez),e(Ez,dir),e(cF,cir),e(se,fir),e(se,fF),e(fF,n6e),e(n6e,mir),e(fF,gir),e(fF,Cz),e(Cz,hir),e(fF,pir),e(se,uir),e(se,mF),e(mF,s6e),e(s6e,_ir),e(mF,bir),e(mF,wz),e(wz,vir),e(mF,Fir),e(se,Tir),e(se,gF),e(gF,l6e),e(l6e,Mir),e(gF,Eir),e(gF,Az),e(Az,Cir),e(gF,wir),e(se,Air),e(se,hF),e(hF,i6e),e(i6e,yir),e(hF,Lir),e(hF,yz),e(yz,xir),e(hF,$ir),e(se,kir),e(se,pF),e(pF,d6e),e(d6e,Sir),e(pF,Rir),e(pF,Lz),e(Lz,Bir),e(pF,Pir),e(se,Iir),e(se,uF),e(uF,c6e),e(c6e,qir),e(uF,Nir),e(uF,xz),e(xz,jir),e(uF,Dir),e(se,Gir),e(se,_F),e(_F,f6e),e(f6e,Oir),e(_F,Vir),e(_F,$z),e($z,Xir),e(_F,zir),e(se,Qir),e(se,bF),e(bF,m6e),e(m6e,Wir),e(bF,Hir),e(bF,kz),e(kz,Uir),e(bF,Jir),e(se,Yir),e(se,vF),e(vF,g6e),e(g6e,Kir),e(vF,Zir),e(vF,Sz),e(Sz,edr),e(vF,odr),e(se,rdr),e(se,FF),e(FF,h6e),e(h6e,tdr),e(FF,adr),e(FF,Rz),e(Rz,ndr),e(FF,sdr),e(se,ldr),e(se,TF),e(TF,p6e),e(p6e,idr),e(TF,ddr),e(TF,Bz),e(Bz,cdr),e(TF,fdr),e(se,mdr),e(se,MF),e(MF,u6e),e(u6e,gdr),e(MF,hdr),e(MF,Pz),e(Pz,pdr),e(MF,udr),e(se,_dr),e(se,EF),e(EF,_6e),e(_6e,bdr),e(EF,vdr),e(EF,Iz),e(Iz,Fdr),e(EF,Tdr),e(se,Mdr),e(se,CF),e(CF,b6e),e(b6e,Edr),e(CF,Cdr),e(CF,qz),e(qz,wdr),e(CF,Adr),e(se,ydr),e(se,wF),e(wF,v6e),e(v6e,Ldr),e(wF,xdr),e(wF,Nz),e(Nz,$dr),e(wF,kdr),e(se,Sdr),e(se,AF),e(AF,F6e),e(F6e,Rdr),e(AF,Bdr),e(AF,jz),e(jz,Pdr),e(AF,Idr),e(se,qdr),e(se,yF),e(yF,T6e),e(T6e,Ndr),e(yF,jdr),e(yF,Dz),e(Dz,Ddr),e(yF,Gdr),e(wr,Odr),M(LF,wr,null),b(f,VPe,_),b(f,qd,_),e(qd,xF),e(xF,M6e),M(F8,M6e,null),e(qd,Vdr),e(qd,E6e),e(E6e,Xdr),b(f,XPe,_),b(f,Zo,_),M(T8,Zo,null),e(Zo,zdr),e(Zo,Nd),e(Nd,Qdr),e(Nd,Gz),e(Gz,Wdr),e(Nd,Hdr),e(Nd,Oz),e(Oz,Udr),e(Nd,Jdr),e(Zo,Ydr),e(Zo,M8),e(M8,Kdr),e(M8,C6e),e(C6e,Zdr),e(M8,ecr),e(Zo,ocr),e(Zo,wt),M(E8,wt,null),e(wt,rcr),e(wt,w6e),e(w6e,tcr),e(wt,acr),e(wt,jd),e(jd,ncr),e(jd,A6e),e(A6e,scr),e(jd,lcr),e(jd,Vz),e(Vz,icr),e(jd,dcr),e(wt,ccr),M($F,wt,null),e(Zo,fcr),e(Zo,Ar),M(C8,Ar,null),e(Ar,mcr),e(Ar,y6e),e(y6e,gcr),e(Ar,hcr),e(Ar,Ya),e(Ya,pcr),e(Ya,L6e),e(L6e,ucr),e(Ya,_cr),e(Ya,x6e),e(x6e,bcr),e(Ya,vcr),e(Ya,$6e),e($6e,Fcr),e(Ya,Tcr),e(Ar,Mcr),e(Ar,Te),e(Te,kF),e(kF,k6e),e(k6e,Ecr),e(kF,Ccr),e(kF,Xz),e(Xz,wcr),e(kF,Acr),e(Te,ycr),e(Te,SF),e(SF,S6e),e(S6e,Lcr),e(SF,xcr),e(SF,zz),e(zz,$cr),e(SF,kcr),e(Te,Scr),e(Te,RF),e(RF,R6e),e(R6e,Rcr),e(RF,Bcr),e(RF,Qz),e(Qz,Pcr),e(RF,Icr),e(Te,qcr),e(Te,BF),e(BF,B6e),e(B6e,Ncr),e(BF,jcr),e(BF,Wz),e(Wz,Dcr),e(BF,Gcr),e(Te,Ocr),e(Te,PF),e(PF,P6e),e(P6e,Vcr),e(PF,Xcr),e(PF,Hz),e(Hz,zcr),e(PF,Qcr),e(Te,Wcr),e(Te,IF),e(IF,I6e),e(I6e,Hcr),e(IF,Ucr),e(IF,Uz),e(Uz,Jcr),e(IF,Ycr),e(Te,Kcr),e(Te,qF),e(qF,q6e),e(q6e,Zcr),e(qF,efr),e(qF,Jz),e(Jz,ofr),e(qF,rfr),e(Te,tfr),e(Te,NF),e(NF,N6e),e(N6e,afr),e(NF,nfr),e(NF,Yz),e(Yz,sfr),e(NF,lfr),e(Te,ifr),e(Te,jF),e(jF,j6e),e(j6e,dfr),e(jF,cfr),e(jF,Kz),e(Kz,ffr),e(jF,mfr),e(Te,gfr),e(Te,DF),e(DF,D6e),e(D6e,hfr),e(DF,pfr),e(DF,Zz),e(Zz,ufr),e(DF,_fr),e(Te,bfr),e(Te,GF),e(GF,G6e),e(G6e,vfr),e(GF,Ffr),e(GF,eQ),e(eQ,Tfr),e(GF,Mfr),e(Te,Efr),e(Te,OF),e(OF,O6e),e(O6e,Cfr),e(OF,wfr),e(OF,oQ),e(oQ,Afr),e(OF,yfr),e(Ar,Lfr),M(VF,Ar,null),b(f,zPe,_),b(f,Dd,_),e(Dd,XF),e(XF,V6e),M(w8,V6e,null),e(Dd,xfr),e(Dd,X6e),e(X6e,$fr),b(f,QPe,_),b(f,er,_),M(A8,er,null),e(er,kfr),e(er,Gd),e(Gd,Sfr),e(Gd,rQ),e(rQ,Rfr),e(Gd,Bfr),e(Gd,tQ),e(tQ,Pfr),e(Gd,Ifr),e(er,qfr),e(er,y8),e(y8,Nfr),e(y8,z6e),e(z6e,jfr),e(y8,Dfr),e(er,Gfr),e(er,At),M(L8,At,null),e(At,Ofr),e(At,Q6e),e(Q6e,Vfr),e(At,Xfr),e(At,Od),e(Od,zfr),e(Od,W6e),e(W6e,Qfr),e(Od,Wfr),e(Od,aQ),e(aQ,Hfr),e(Od,Ufr),e(At,Jfr),M(zF,At,null),e(er,Yfr),e(er,yr),M(x8,yr,null),e(yr,Kfr),e(yr,H6e),e(H6e,Zfr),e(yr,emr),e(yr,Ka),e(Ka,omr),e(Ka,U6e),e(U6e,rmr),e(Ka,tmr),e(Ka,J6e),e(J6e,amr),e(Ka,nmr),e(Ka,Y6e),e(Y6e,smr),e(Ka,lmr),e(yr,imr),e(yr,Vd),e(Vd,QF),e(QF,K6e),e(K6e,dmr),e(QF,cmr),e(QF,nQ),e(nQ,fmr),e(QF,mmr),e(Vd,gmr),e(Vd,WF),e(WF,Z6e),e(Z6e,hmr),e(WF,pmr),e(WF,sQ),e(sQ,umr),e(WF,_mr),e(Vd,bmr),e(Vd,HF),e(HF,e1e),e(e1e,vmr),e(HF,Fmr),e(HF,lQ),e(lQ,Tmr),e(HF,Mmr),e(yr,Emr),M(UF,yr,null),b(f,WPe,_),b(f,Xd,_),e(Xd,JF),e(JF,o1e),M($8,o1e,null),e(Xd,Cmr),e(Xd,r1e),e(r1e,wmr),b(f,HPe,_),b(f,or,_),M(k8,or,null),e(or,Amr),e(or,zd),e(zd,ymr),e(zd,iQ),e(iQ,Lmr),e(zd,xmr),e(zd,dQ),e(dQ,$mr),e(zd,kmr),e(or,Smr),e(or,S8),e(S8,Rmr),e(S8,t1e),e(t1e,Bmr),e(S8,Pmr),e(or,Imr),e(or,yt),M(R8,yt,null),e(yt,qmr),e(yt,a1e),e(a1e,Nmr),e(yt,jmr),e(yt,Qd),e(Qd,Dmr),e(Qd,n1e),e(n1e,Gmr),e(Qd,Omr),e(Qd,cQ),e(cQ,Vmr),e(Qd,Xmr),e(yt,zmr),M(YF,yt,null),e(or,Qmr),e(or,Lr),M(B8,Lr,null),e(Lr,Wmr),e(Lr,s1e),e(s1e,Hmr),e(Lr,Umr),e(Lr,Za),e(Za,Jmr),e(Za,l1e),e(l1e,Ymr),e(Za,Kmr),e(Za,i1e),e(i1e,Zmr),e(Za,egr),e(Za,d1e),e(d1e,ogr),e(Za,rgr),e(Lr,tgr),e(Lr,ie),e(ie,KF),e(KF,c1e),e(c1e,agr),e(KF,ngr),e(KF,fQ),e(fQ,sgr),e(KF,lgr),e(ie,igr),e(ie,ZF),e(ZF,f1e),e(f1e,dgr),e(ZF,cgr),e(ZF,mQ),e(mQ,fgr),e(ZF,mgr),e(ie,ggr),e(ie,eT),e(eT,m1e),e(m1e,hgr),e(eT,pgr),e(eT,gQ),e(gQ,ugr),e(eT,_gr),e(ie,bgr),e(ie,oT),e(oT,g1e),e(g1e,vgr),e(oT,Fgr),e(oT,hQ),e(hQ,Tgr),e(oT,Mgr),e(ie,Egr),e(ie,rT),e(rT,h1e),e(h1e,Cgr),e(rT,wgr),e(rT,pQ),e(pQ,Agr),e(rT,ygr),e(ie,Lgr),e(ie,tT),e(tT,p1e),e(p1e,xgr),e(tT,$gr),e(tT,uQ),e(uQ,kgr),e(tT,Sgr),e(ie,Rgr),e(ie,aT),e(aT,u1e),e(u1e,Bgr),e(aT,Pgr),e(aT,_Q),e(_Q,Igr),e(aT,qgr),e(ie,Ngr),e(ie,nT),e(nT,_1e),e(_1e,jgr),e(nT,Dgr),e(nT,bQ),e(bQ,Ggr),e(nT,Ogr),e(ie,Vgr),e(ie,sT),e(sT,b1e),e(b1e,Xgr),e(sT,zgr),e(sT,vQ),e(vQ,Qgr),e(sT,Wgr),e(ie,Hgr),e(ie,lT),e(lT,v1e),e(v1e,Ugr),e(lT,Jgr),e(lT,FQ),e(FQ,Ygr),e(lT,Kgr),e(ie,Zgr),e(ie,iT),e(iT,F1e),e(F1e,ehr),e(iT,ohr),e(iT,TQ),e(TQ,rhr),e(iT,thr),e(ie,ahr),e(ie,dT),e(dT,T1e),e(T1e,nhr),e(dT,shr),e(dT,MQ),e(MQ,lhr),e(dT,ihr),e(ie,dhr),e(ie,cT),e(cT,M1e),e(M1e,chr),e(cT,fhr),e(cT,EQ),e(EQ,mhr),e(cT,ghr),e(ie,hhr),e(ie,fT),e(fT,E1e),e(E1e,phr),e(fT,uhr),e(fT,CQ),e(CQ,_hr),e(fT,bhr),e(ie,vhr),e(ie,mT),e(mT,C1e),e(C1e,Fhr),e(mT,Thr),e(mT,wQ),e(wQ,Mhr),e(mT,Ehr),e(ie,Chr),e(ie,gT),e(gT,w1e),e(w1e,whr),e(gT,Ahr),e(gT,AQ),e(AQ,yhr),e(gT,Lhr),e(ie,xhr),e(ie,hT),e(hT,A1e),e(A1e,$hr),e(hT,khr),e(hT,yQ),e(yQ,Shr),e(hT,Rhr),e(ie,Bhr),e(ie,pT),e(pT,y1e),e(y1e,Phr),e(pT,Ihr),e(pT,LQ),e(LQ,qhr),e(pT,Nhr),e(ie,jhr),e(ie,uT),e(uT,L1e),e(L1e,Dhr),e(uT,Ghr),e(uT,xQ),e(xQ,Ohr),e(uT,Vhr),e(ie,Xhr),e(ie,_T),e(_T,x1e),e(x1e,zhr),e(_T,Qhr),e(_T,$Q),e($Q,Whr),e(_T,Hhr),e(Lr,Uhr),M(bT,Lr,null),b(f,UPe,_),b(f,Wd,_),e(Wd,vT),e(vT,$1e),M(P8,$1e,null),e(Wd,Jhr),e(Wd,k1e),e(k1e,Yhr),b(f,JPe,_),b(f,rr,_),M(I8,rr,null),e(rr,Khr),e(rr,Hd),e(Hd,Zhr),e(Hd,kQ),e(kQ,epr),e(Hd,opr),e(Hd,SQ),e(SQ,rpr),e(Hd,tpr),e(rr,apr),e(rr,q8),e(q8,npr),e(q8,S1e),e(S1e,spr),e(q8,lpr),e(rr,ipr),e(rr,Lt),M(N8,Lt,null),e(Lt,dpr),e(Lt,R1e),e(R1e,cpr),e(Lt,fpr),e(Lt,Ud),e(Ud,mpr),e(Ud,B1e),e(B1e,gpr),e(Ud,hpr),e(Ud,RQ),e(RQ,ppr),e(Ud,upr),e(Lt,_pr),M(FT,Lt,null),e(rr,bpr),e(rr,xr),M(j8,xr,null),e(xr,vpr),e(xr,P1e),e(P1e,Fpr),e(xr,Tpr),e(xr,en),e(en,Mpr),e(en,I1e),e(I1e,Epr),e(en,Cpr),e(en,q1e),e(q1e,wpr),e(en,Apr),e(en,N1e),e(N1e,ypr),e(en,Lpr),e(xr,xpr),e(xr,ye),e(ye,TT),e(TT,j1e),e(j1e,$pr),e(TT,kpr),e(TT,BQ),e(BQ,Spr),e(TT,Rpr),e(ye,Bpr),e(ye,MT),e(MT,D1e),e(D1e,Ppr),e(MT,Ipr),e(MT,PQ),e(PQ,qpr),e(MT,Npr),e(ye,jpr),e(ye,ET),e(ET,G1e),e(G1e,Dpr),e(ET,Gpr),e(ET,IQ),e(IQ,Opr),e(ET,Vpr),e(ye,Xpr),e(ye,CT),e(CT,O1e),e(O1e,zpr),e(CT,Qpr),e(CT,qQ),e(qQ,Wpr),e(CT,Hpr),e(ye,Upr),e(ye,wT),e(wT,V1e),e(V1e,Jpr),e(wT,Ypr),e(wT,NQ),e(NQ,Kpr),e(wT,Zpr),e(ye,eur),e(ye,AT),e(AT,X1e),e(X1e,our),e(AT,rur),e(AT,jQ),e(jQ,tur),e(AT,aur),e(ye,nur),e(ye,yT),e(yT,z1e),e(z1e,sur),e(yT,lur),e(yT,DQ),e(DQ,iur),e(yT,dur),e(ye,cur),e(ye,LT),e(LT,Q1e),e(Q1e,fur),e(LT,mur),e(LT,GQ),e(GQ,gur),e(LT,hur),e(ye,pur),e(ye,xT),e(xT,W1e),e(W1e,uur),e(xT,_ur),e(xT,OQ),e(OQ,bur),e(xT,vur),e(ye,Fur),e(ye,$T),e($T,H1e),e(H1e,Tur),e($T,Mur),e($T,VQ),e(VQ,Eur),e($T,Cur),e(xr,wur),M(kT,xr,null),b(f,YPe,_),b(f,Jd,_),e(Jd,ST),e(ST,U1e),M(D8,U1e,null),e(Jd,Aur),e(Jd,J1e),e(J1e,yur),b(f,KPe,_),b(f,tr,_),M(G8,tr,null),e(tr,Lur),e(tr,Yd),e(Yd,xur),e(Yd,XQ),e(XQ,$ur),e(Yd,kur),e(Yd,zQ),e(zQ,Sur),e(Yd,Rur),e(tr,Bur),e(tr,O8),e(O8,Pur),e(O8,Y1e),e(Y1e,Iur),e(O8,qur),e(tr,Nur),e(tr,xt),M(V8,xt,null),e(xt,jur),e(xt,K1e),e(K1e,Dur),e(xt,Gur),e(xt,Kd),e(Kd,Our),e(Kd,Z1e),e(Z1e,Vur),e(Kd,Xur),e(Kd,QQ),e(QQ,zur),e(Kd,Qur),e(xt,Wur),M(RT,xt,null),e(tr,Hur),e(tr,$r),M(X8,$r,null),e($r,Uur),e($r,ebe),e(ebe,Jur),e($r,Yur),e($r,on),e(on,Kur),e(on,obe),e(obe,Zur),e(on,e_r),e(on,rbe),e(rbe,o_r),e(on,r_r),e(on,tbe),e(tbe,t_r),e(on,a_r),e($r,n_r),e($r,Z),e(Z,BT),e(BT,abe),e(abe,s_r),e(BT,l_r),e(BT,WQ),e(WQ,i_r),e(BT,d_r),e(Z,c_r),e(Z,PT),e(PT,nbe),e(nbe,f_r),e(PT,m_r),e(PT,HQ),e(HQ,g_r),e(PT,h_r),e(Z,p_r),e(Z,IT),e(IT,sbe),e(sbe,u_r),e(IT,__r),e(IT,UQ),e(UQ,b_r),e(IT,v_r),e(Z,F_r),e(Z,qT),e(qT,lbe),e(lbe,T_r),e(qT,M_r),e(qT,JQ),e(JQ,E_r),e(qT,C_r),e(Z,w_r),e(Z,NT),e(NT,ibe),e(ibe,A_r),e(NT,y_r),e(NT,YQ),e(YQ,L_r),e(NT,x_r),e(Z,$_r),e(Z,jT),e(jT,dbe),e(dbe,k_r),e(jT,S_r),e(jT,KQ),e(KQ,R_r),e(jT,B_r),e(Z,P_r),e(Z,DT),e(DT,cbe),e(cbe,I_r),e(DT,q_r),e(DT,ZQ),e(ZQ,N_r),e(DT,j_r),e(Z,D_r),e(Z,GT),e(GT,fbe),e(fbe,G_r),e(GT,O_r),e(GT,eW),e(eW,V_r),e(GT,X_r),e(Z,z_r),e(Z,OT),e(OT,mbe),e(mbe,Q_r),e(OT,W_r),e(OT,oW),e(oW,H_r),e(OT,U_r),e(Z,J_r),e(Z,VT),e(VT,gbe),e(gbe,Y_r),e(VT,K_r),e(VT,rW),e(rW,Z_r),e(VT,e6r),e(Z,o6r),e(Z,XT),e(XT,hbe),e(hbe,r6r),e(XT,t6r),e(XT,tW),e(tW,a6r),e(XT,n6r),e(Z,s6r),e(Z,zT),e(zT,pbe),e(pbe,l6r),e(zT,i6r),e(zT,aW),e(aW,d6r),e(zT,c6r),e(Z,f6r),e(Z,QT),e(QT,ube),e(ube,m6r),e(QT,g6r),e(QT,nW),e(nW,h6r),e(QT,p6r),e(Z,u6r),e(Z,WT),e(WT,_be),e(_be,_6r),e(WT,b6r),e(WT,sW),e(sW,v6r),e(WT,F6r),e(Z,T6r),e(Z,HT),e(HT,bbe),e(bbe,M6r),e(HT,E6r),e(HT,lW),e(lW,C6r),e(HT,w6r),e(Z,A6r),e(Z,UT),e(UT,vbe),e(vbe,y6r),e(UT,L6r),e(UT,iW),e(iW,x6r),e(UT,$6r),e(Z,k6r),e(Z,JT),e(JT,Fbe),e(Fbe,S6r),e(JT,R6r),e(JT,dW),e(dW,B6r),e(JT,P6r),e(Z,I6r),e(Z,YT),e(YT,Tbe),e(Tbe,q6r),e(YT,N6r),e(YT,cW),e(cW,j6r),e(YT,D6r),e(Z,G6r),e(Z,KT),e(KT,Mbe),e(Mbe,O6r),e(KT,V6r),e(KT,fW),e(fW,X6r),e(KT,z6r),e(Z,Q6r),e(Z,ZT),e(ZT,Ebe),e(Ebe,W6r),e(ZT,H6r),e(ZT,mW),e(mW,U6r),e(ZT,J6r),e(Z,Y6r),e(Z,eM),e(eM,Cbe),e(Cbe,K6r),e(eM,Z6r),e(eM,gW),e(gW,e1r),e(eM,o1r),e(Z,r1r),e(Z,oM),e(oM,wbe),e(wbe,t1r),e(oM,a1r),e(oM,hW),e(hW,n1r),e(oM,s1r),e(Z,l1r),e(Z,rM),e(rM,Abe),e(Abe,i1r),e(rM,d1r),e(rM,pW),e(pW,c1r),e(rM,f1r),e(Z,m1r),e(Z,tM),e(tM,ybe),e(ybe,g1r),e(tM,h1r),e(tM,uW),e(uW,p1r),e(tM,u1r),e(Z,_1r),e(Z,aM),e(aM,Lbe),e(Lbe,b1r),e(aM,v1r),e(aM,_W),e(_W,F1r),e(aM,T1r),e(Z,M1r),e(Z,nM),e(nM,xbe),e(xbe,E1r),e(nM,C1r),e(nM,bW),e(bW,w1r),e(nM,A1r),e($r,y1r),M(sM,$r,null),b(f,ZPe,_),b(f,Zd,_),e(Zd,lM),e(lM,$be),M(z8,$be,null),e(Zd,L1r),e(Zd,kbe),e(kbe,x1r),b(f,eIe,_),b(f,ar,_),M(Q8,ar,null),e(ar,$1r),e(ar,ec),e(ec,k1r),e(ec,vW),e(vW,S1r),e(ec,R1r),e(ec,FW),e(FW,B1r),e(ec,P1r),e(ar,I1r),e(ar,W8),e(W8,q1r),e(W8,Sbe),e(Sbe,N1r),e(W8,j1r),e(ar,D1r),e(ar,$t),M(H8,$t,null),e($t,G1r),e($t,Rbe),e(Rbe,O1r),e($t,V1r),e($t,oc),e(oc,X1r),e(oc,Bbe),e(Bbe,z1r),e(oc,Q1r),e(oc,TW),e(TW,W1r),e(oc,H1r),e($t,U1r),M(iM,$t,null),e(ar,J1r),e(ar,kr),M(U8,kr,null),e(kr,Y1r),e(kr,Pbe),e(Pbe,K1r),e(kr,Z1r),e(kr,rn),e(rn,ebr),e(rn,Ibe),e(Ibe,obr),e(rn,rbr),e(rn,qbe),e(qbe,tbr),e(rn,abr),e(rn,Nbe),e(Nbe,nbr),e(rn,sbr),e(kr,lbr),e(kr,pe),e(pe,dM),e(dM,jbe),e(jbe,ibr),e(dM,dbr),e(dM,MW),e(MW,cbr),e(dM,fbr),e(pe,mbr),e(pe,cM),e(cM,Dbe),e(Dbe,gbr),e(cM,hbr),e(cM,EW),e(EW,pbr),e(cM,ubr),e(pe,_br),e(pe,fM),e(fM,Gbe),e(Gbe,bbr),e(fM,vbr),e(fM,CW),e(CW,Fbr),e(fM,Tbr),e(pe,Mbr),e(pe,mM),e(mM,Obe),e(Obe,Ebr),e(mM,Cbr),e(mM,wW),e(wW,wbr),e(mM,Abr),e(pe,ybr),e(pe,gM),e(gM,Vbe),e(Vbe,Lbr),e(gM,xbr),e(gM,AW),e(AW,$br),e(gM,kbr),e(pe,Sbr),e(pe,hM),e(hM,Xbe),e(Xbe,Rbr),e(hM,Bbr),e(hM,yW),e(yW,Pbr),e(hM,Ibr),e(pe,qbr),e(pe,pM),e(pM,zbe),e(zbe,Nbr),e(pM,jbr),e(pM,LW),e(LW,Dbr),e(pM,Gbr),e(pe,Obr),e(pe,uM),e(uM,Qbe),e(Qbe,Vbr),e(uM,Xbr),e(uM,xW),e(xW,zbr),e(uM,Qbr),e(pe,Wbr),e(pe,_M),e(_M,Wbe),e(Wbe,Hbr),e(_M,Ubr),e(_M,$W),e($W,Jbr),e(_M,Ybr),e(pe,Kbr),e(pe,bM),e(bM,Hbe),e(Hbe,Zbr),e(bM,e4r),e(bM,kW),e(kW,o4r),e(bM,r4r),e(pe,t4r),e(pe,vM),e(vM,Ube),e(Ube,a4r),e(vM,n4r),e(vM,SW),e(SW,s4r),e(vM,l4r),e(pe,i4r),e(pe,FM),e(FM,Jbe),e(Jbe,d4r),e(FM,c4r),e(FM,RW),e(RW,f4r),e(FM,m4r),e(pe,g4r),e(pe,TM),e(TM,Ybe),e(Ybe,h4r),e(TM,p4r),e(TM,BW),e(BW,u4r),e(TM,_4r),e(pe,b4r),e(pe,MM),e(MM,Kbe),e(Kbe,v4r),e(MM,F4r),e(MM,PW),e(PW,T4r),e(MM,M4r),e(pe,E4r),e(pe,EM),e(EM,Zbe),e(Zbe,C4r),e(EM,w4r),e(EM,IW),e(IW,A4r),e(EM,y4r),e(pe,L4r),e(pe,CM),e(CM,e4e),e(e4e,x4r),e(CM,$4r),e(CM,qW),e(qW,k4r),e(CM,S4r),e(pe,R4r),e(pe,wM),e(wM,o4e),e(o4e,B4r),e(wM,P4r),e(wM,NW),e(NW,I4r),e(wM,q4r),e(kr,N4r),M(AM,kr,null),b(f,oIe,_),b(f,rc,_),e(rc,yM),e(yM,r4e),M(J8,r4e,null),e(rc,j4r),e(rc,t4e),e(t4e,D4r),b(f,rIe,_),b(f,nr,_),M(Y8,nr,null),e(nr,G4r),e(nr,tc),e(tc,O4r),e(tc,jW),e(jW,V4r),e(tc,X4r),e(tc,DW),e(DW,z4r),e(tc,Q4r),e(nr,W4r),e(nr,K8),e(K8,H4r),e(K8,a4e),e(a4e,U4r),e(K8,J4r),e(nr,Y4r),e(nr,kt),M(Z8,kt,null),e(kt,K4r),e(kt,n4e),e(n4e,Z4r),e(kt,e2r),e(kt,ac),e(ac,o2r),e(ac,s4e),e(s4e,r2r),e(ac,t2r),e(ac,GW),e(GW,a2r),e(ac,n2r),e(kt,s2r),M(LM,kt,null),e(nr,l2r),e(nr,Sr),M(e7,Sr,null),e(Sr,i2r),e(Sr,l4e),e(l4e,d2r),e(Sr,c2r),e(Sr,tn),e(tn,f2r),e(tn,i4e),e(i4e,m2r),e(tn,g2r),e(tn,d4e),e(d4e,h2r),e(tn,p2r),e(tn,c4e),e(c4e,u2r),e(tn,_2r),e(Sr,b2r),e(Sr,f4e),e(f4e,xM),e(xM,m4e),e(m4e,v2r),e(xM,F2r),e(xM,OW),e(OW,T2r),e(xM,M2r),e(Sr,E2r),M($M,Sr,null),b(f,tIe,_),b(f,nc,_),e(nc,kM),e(kM,g4e),M(o7,g4e,null),e(nc,C2r),e(nc,h4e),e(h4e,w2r),b(f,aIe,_),b(f,sr,_),M(r7,sr,null),e(sr,A2r),e(sr,sc),e(sc,y2r),e(sc,VW),e(VW,L2r),e(sc,x2r),e(sc,XW),e(XW,$2r),e(sc,k2r),e(sr,S2r),e(sr,t7),e(t7,R2r),e(t7,p4e),e(p4e,B2r),e(t7,P2r),e(sr,I2r),e(sr,St),M(a7,St,null),e(St,q2r),e(St,u4e),e(u4e,N2r),e(St,j2r),e(St,lc),e(lc,D2r),e(lc,_4e),e(_4e,G2r),e(lc,O2r),e(lc,zW),e(zW,V2r),e(lc,X2r),e(St,z2r),M(SM,St,null),e(sr,Q2r),e(sr,Rr),M(n7,Rr,null),e(Rr,W2r),e(Rr,b4e),e(b4e,H2r),e(Rr,U2r),e(Rr,an),e(an,J2r),e(an,v4e),e(v4e,Y2r),e(an,K2r),e(an,F4e),e(F4e,Z2r),e(an,e5r),e(an,T4e),e(T4e,o5r),e(an,r5r),e(Rr,t5r),e(Rr,de),e(de,RM),e(RM,M4e),e(M4e,a5r),e(RM,n5r),e(RM,QW),e(QW,s5r),e(RM,l5r),e(de,i5r),e(de,BM),e(BM,E4e),e(E4e,d5r),e(BM,c5r),e(BM,WW),e(WW,f5r),e(BM,m5r),e(de,g5r),e(de,PM),e(PM,C4e),e(C4e,h5r),e(PM,p5r),e(PM,HW),e(HW,u5r),e(PM,_5r),e(de,b5r),e(de,IM),e(IM,w4e),e(w4e,v5r),e(IM,F5r),e(IM,UW),e(UW,T5r),e(IM,M5r),e(de,E5r),e(de,qM),e(qM,A4e),e(A4e,C5r),e(qM,w5r),e(qM,JW),e(JW,A5r),e(qM,y5r),e(de,L5r),e(de,NM),e(NM,y4e),e(y4e,x5r),e(NM,$5r),e(NM,YW),e(YW,k5r),e(NM,S5r),e(de,R5r),e(de,jM),e(jM,L4e),e(L4e,B5r),e(jM,P5r),e(jM,KW),e(KW,I5r),e(jM,q5r),e(de,N5r),e(de,DM),e(DM,x4e),e(x4e,j5r),e(DM,D5r),e(DM,ZW),e(ZW,G5r),e(DM,O5r),e(de,V5r),e(de,GM),e(GM,$4e),e($4e,X5r),e(GM,z5r),e(GM,eH),e(eH,Q5r),e(GM,W5r),e(de,H5r),e(de,OM),e(OM,k4e),e(k4e,U5r),e(OM,J5r),e(OM,oH),e(oH,Y5r),e(OM,K5r),e(de,Z5r),e(de,VM),e(VM,S4e),e(S4e,evr),e(VM,ovr),e(VM,rH),e(rH,rvr),e(VM,tvr),e(de,avr),e(de,XM),e(XM,R4e),e(R4e,nvr),e(XM,svr),e(XM,tH),e(tH,lvr),e(XM,ivr),e(de,dvr),e(de,zM),e(zM,B4e),e(B4e,cvr),e(zM,fvr),e(zM,aH),e(aH,mvr),e(zM,gvr),e(de,hvr),e(de,QM),e(QM,P4e),e(P4e,pvr),e(QM,uvr),e(QM,nH),e(nH,_vr),e(QM,bvr),e(de,vvr),e(de,WM),e(WM,I4e),e(I4e,Fvr),e(WM,Tvr),e(WM,sH),e(sH,Mvr),e(WM,Evr),e(de,Cvr),e(de,HM),e(HM,q4e),e(q4e,wvr),e(HM,Avr),e(HM,lH),e(lH,yvr),e(HM,Lvr),e(de,xvr),e(de,UM),e(UM,N4e),e(N4e,$vr),e(UM,kvr),e(UM,iH),e(iH,Svr),e(UM,Rvr),e(de,Bvr),e(de,JM),e(JM,j4e),e(j4e,Pvr),e(JM,Ivr),e(JM,dH),e(dH,qvr),e(JM,Nvr),e(de,jvr),e(de,YM),e(YM,D4e),e(D4e,Dvr),e(YM,Gvr),e(YM,cH),e(cH,Ovr),e(YM,Vvr),e(de,Xvr),e(de,KM),e(KM,G4e),e(G4e,zvr),e(KM,Qvr),e(KM,fH),e(fH,Wvr),e(KM,Hvr),e(Rr,Uvr),M(ZM,Rr,null),b(f,nIe,_),b(f,ic,_),e(ic,eE),e(eE,O4e),M(s7,O4e,null),e(ic,Jvr),e(ic,V4e),e(V4e,Yvr),b(f,sIe,_),b(f,lr,_),M(l7,lr,null),e(lr,Kvr),e(lr,dc),e(dc,Zvr),e(dc,mH),e(mH,eFr),e(dc,oFr),e(dc,gH),e(gH,rFr),e(dc,tFr),e(lr,aFr),e(lr,i7),e(i7,nFr),e(i7,X4e),e(X4e,sFr),e(i7,lFr),e(lr,iFr),e(lr,Rt),M(d7,Rt,null),e(Rt,dFr),e(Rt,z4e),e(z4e,cFr),e(Rt,fFr),e(Rt,cc),e(cc,mFr),e(cc,Q4e),e(Q4e,gFr),e(cc,hFr),e(cc,hH),e(hH,pFr),e(cc,uFr),e(Rt,_Fr),M(oE,Rt,null),e(lr,bFr),e(lr,Br),M(c7,Br,null),e(Br,vFr),e(Br,W4e),e(W4e,FFr),e(Br,TFr),e(Br,nn),e(nn,MFr),e(nn,H4e),e(H4e,EFr),e(nn,CFr),e(nn,U4e),e(U4e,wFr),e(nn,AFr),e(nn,J4e),e(J4e,yFr),e(nn,LFr),e(Br,xFr),e(Br,ce),e(ce,rE),e(rE,Y4e),e(Y4e,$Fr),e(rE,kFr),e(rE,pH),e(pH,SFr),e(rE,RFr),e(ce,BFr),e(ce,tE),e(tE,K4e),e(K4e,PFr),e(tE,IFr),e(tE,uH),e(uH,qFr),e(tE,NFr),e(ce,jFr),e(ce,aE),e(aE,Z4e),e(Z4e,DFr),e(aE,GFr),e(aE,_H),e(_H,OFr),e(aE,VFr),e(ce,XFr),e(ce,nE),e(nE,e2e),e(e2e,zFr),e(nE,QFr),e(nE,bH),e(bH,WFr),e(nE,HFr),e(ce,UFr),e(ce,sE),e(sE,o2e),e(o2e,JFr),e(sE,YFr),e(sE,vH),e(vH,KFr),e(sE,ZFr),e(ce,eTr),e(ce,lE),e(lE,r2e),e(r2e,oTr),e(lE,rTr),e(lE,FH),e(FH,tTr),e(lE,aTr),e(ce,nTr),e(ce,iE),e(iE,t2e),e(t2e,sTr),e(iE,lTr),e(iE,TH),e(TH,iTr),e(iE,dTr),e(ce,cTr),e(ce,dE),e(dE,a2e),e(a2e,fTr),e(dE,mTr),e(dE,MH),e(MH,gTr),e(dE,hTr),e(ce,pTr),e(ce,cE),e(cE,n2e),e(n2e,uTr),e(cE,_Tr),e(cE,EH),e(EH,bTr),e(cE,vTr),e(ce,FTr),e(ce,fE),e(fE,s2e),e(s2e,TTr),e(fE,MTr),e(fE,CH),e(CH,ETr),e(fE,CTr),e(ce,wTr),e(ce,mE),e(mE,l2e),e(l2e,ATr),e(mE,yTr),e(mE,wH),e(wH,LTr),e(mE,xTr),e(ce,$Tr),e(ce,gE),e(gE,i2e),e(i2e,kTr),e(gE,STr),e(gE,AH),e(AH,RTr),e(gE,BTr),e(ce,PTr),e(ce,hE),e(hE,d2e),e(d2e,ITr),e(hE,qTr),e(hE,yH),e(yH,NTr),e(hE,jTr),e(ce,DTr),e(ce,pE),e(pE,c2e),e(c2e,GTr),e(pE,OTr),e(pE,LH),e(LH,VTr),e(pE,XTr),e(ce,zTr),e(ce,uE),e(uE,f2e),e(f2e,QTr),e(uE,WTr),e(uE,xH),e(xH,HTr),e(uE,UTr),e(ce,JTr),e(ce,_E),e(_E,m2e),e(m2e,YTr),e(_E,KTr),e(_E,$H),e($H,ZTr),e(_E,eMr),e(ce,oMr),e(ce,bE),e(bE,g2e),e(g2e,rMr),e(bE,tMr),e(bE,kH),e(kH,aMr),e(bE,nMr),e(ce,sMr),e(ce,vE),e(vE,h2e),e(h2e,lMr),e(vE,iMr),e(vE,SH),e(SH,dMr),e(vE,cMr),e(ce,fMr),e(ce,FE),e(FE,p2e),e(p2e,mMr),e(FE,gMr),e(FE,RH),e(RH,hMr),e(FE,pMr),e(ce,uMr),e(ce,TE),e(TE,u2e),e(u2e,_Mr),e(TE,bMr),e(TE,BH),e(BH,vMr),e(TE,FMr),e(Br,TMr),M(ME,Br,null),b(f,lIe,_),b(f,fc,_),e(fc,EE),e(EE,_2e),M(f7,_2e,null),e(fc,MMr),e(fc,b2e),e(b2e,EMr),b(f,iIe,_),b(f,ir,_),M(m7,ir,null),e(ir,CMr),e(ir,mc),e(mc,wMr),e(mc,PH),e(PH,AMr),e(mc,yMr),e(mc,IH),e(IH,LMr),e(mc,xMr),e(ir,$Mr),e(ir,g7),e(g7,kMr),e(g7,v2e),e(v2e,SMr),e(g7,RMr),e(ir,BMr),e(ir,Bt),M(h7,Bt,null),e(Bt,PMr),e(Bt,F2e),e(F2e,IMr),e(Bt,qMr),e(Bt,gc),e(gc,NMr),e(gc,T2e),e(T2e,jMr),e(gc,DMr),e(gc,qH),e(qH,GMr),e(gc,OMr),e(Bt,VMr),M(CE,Bt,null),e(ir,XMr),e(ir,Pr),M(p7,Pr,null),e(Pr,zMr),e(Pr,M2e),e(M2e,QMr),e(Pr,WMr),e(Pr,sn),e(sn,HMr),e(sn,E2e),e(E2e,UMr),e(sn,JMr),e(sn,C2e),e(C2e,YMr),e(sn,KMr),e(sn,w2e),e(w2e,ZMr),e(sn,eEr),e(Pr,oEr),e(Pr,A2e),e(A2e,wE),e(wE,y2e),e(y2e,rEr),e(wE,tEr),e(wE,NH),e(NH,aEr),e(wE,nEr),e(Pr,sEr),M(AE,Pr,null),b(f,dIe,_),b(f,hc,_),e(hc,yE),e(yE,L2e),M(u7,L2e,null),e(hc,lEr),e(hc,x2e),e(x2e,iEr),b(f,cIe,_),b(f,dr,_),M(_7,dr,null),e(dr,dEr),e(dr,pc),e(pc,cEr),e(pc,jH),e(jH,fEr),e(pc,mEr),e(pc,DH),e(DH,gEr),e(pc,hEr),e(dr,pEr),e(dr,b7),e(b7,uEr),e(b7,$2e),e($2e,_Er),e(b7,bEr),e(dr,vEr),e(dr,Pt),M(v7,Pt,null),e(Pt,FEr),e(Pt,k2e),e(k2e,TEr),e(Pt,MEr),e(Pt,uc),e(uc,EEr),e(uc,S2e),e(S2e,CEr),e(uc,wEr),e(uc,GH),e(GH,AEr),e(uc,yEr),e(Pt,LEr),M(LE,Pt,null),e(dr,xEr),e(dr,Ir),M(F7,Ir,null),e(Ir,$Er),e(Ir,R2e),e(R2e,kEr),e(Ir,SEr),e(Ir,ln),e(ln,REr),e(ln,B2e),e(B2e,BEr),e(ln,PEr),e(ln,P2e),e(P2e,IEr),e(ln,qEr),e(ln,I2e),e(I2e,NEr),e(ln,jEr),e(Ir,DEr),e(Ir,q2e),e(q2e,xE),e(xE,N2e),e(N2e,GEr),e(xE,OEr),e(xE,OH),e(OH,VEr),e(xE,XEr),e(Ir,zEr),M($E,Ir,null),b(f,fIe,_),b(f,_c,_),e(_c,kE),e(kE,j2e),M(T7,j2e,null),e(_c,QEr),e(_c,D2e),e(D2e,WEr),b(f,mIe,_),b(f,cr,_),M(M7,cr,null),e(cr,HEr),e(cr,bc),e(bc,UEr),e(bc,VH),e(VH,JEr),e(bc,YEr),e(bc,XH),e(XH,KEr),e(bc,ZEr),e(cr,eCr),e(cr,E7),e(E7,oCr),e(E7,G2e),e(G2e,rCr),e(E7,tCr),e(cr,aCr),e(cr,It),M(C7,It,null),e(It,nCr),e(It,O2e),e(O2e,sCr),e(It,lCr),e(It,vc),e(vc,iCr),e(vc,V2e),e(V2e,dCr),e(vc,cCr),e(vc,zH),e(zH,fCr),e(vc,mCr),e(It,gCr),M(SE,It,null),e(cr,hCr),e(cr,qr),M(w7,qr,null),e(qr,pCr),e(qr,X2e),e(X2e,uCr),e(qr,_Cr),e(qr,dn),e(dn,bCr),e(dn,z2e),e(z2e,vCr),e(dn,FCr),e(dn,Q2e),e(Q2e,TCr),e(dn,MCr),e(dn,W2e),e(W2e,ECr),e(dn,CCr),e(qr,wCr),e(qr,re),e(re,RE),e(RE,H2e),e(H2e,ACr),e(RE,yCr),e(RE,QH),e(QH,LCr),e(RE,xCr),e(re,$Cr),e(re,BE),e(BE,U2e),e(U2e,kCr),e(BE,SCr),e(BE,WH),e(WH,RCr),e(BE,BCr),e(re,PCr),e(re,PE),e(PE,J2e),e(J2e,ICr),e(PE,qCr),e(PE,HH),e(HH,NCr),e(PE,jCr),e(re,DCr),e(re,IE),e(IE,Y2e),e(Y2e,GCr),e(IE,OCr),e(IE,UH),e(UH,VCr),e(IE,XCr),e(re,zCr),e(re,qE),e(qE,K2e),e(K2e,QCr),e(qE,WCr),e(qE,JH),e(JH,HCr),e(qE,UCr),e(re,JCr),e(re,NE),e(NE,Z2e),e(Z2e,YCr),e(NE,KCr),e(NE,YH),e(YH,ZCr),e(NE,e3r),e(re,o3r),e(re,jE),e(jE,e5e),e(e5e,r3r),e(jE,t3r),e(jE,KH),e(KH,a3r),e(jE,n3r),e(re,s3r),e(re,DE),e(DE,o5e),e(o5e,l3r),e(DE,i3r),e(DE,ZH),e(ZH,d3r),e(DE,c3r),e(re,f3r),e(re,GE),e(GE,r5e),e(r5e,m3r),e(GE,g3r),e(GE,eU),e(eU,h3r),e(GE,p3r),e(re,u3r),e(re,OE),e(OE,t5e),e(t5e,_3r),e(OE,b3r),e(OE,oU),e(oU,v3r),e(OE,F3r),e(re,T3r),e(re,VE),e(VE,a5e),e(a5e,M3r),e(VE,E3r),e(VE,rU),e(rU,C3r),e(VE,w3r),e(re,A3r),e(re,XE),e(XE,n5e),e(n5e,y3r),e(XE,L3r),e(XE,tU),e(tU,x3r),e(XE,$3r),e(re,k3r),e(re,zE),e(zE,s5e),e(s5e,S3r),e(zE,R3r),e(zE,aU),e(aU,B3r),e(zE,P3r),e(re,I3r),e(re,QE),e(QE,l5e),e(l5e,q3r),e(QE,N3r),e(QE,nU),e(nU,j3r),e(QE,D3r),e(re,G3r),e(re,WE),e(WE,i5e),e(i5e,O3r),e(WE,V3r),e(WE,sU),e(sU,X3r),e(WE,z3r),e(re,Q3r),e(re,HE),e(HE,d5e),e(d5e,W3r),e(HE,H3r),e(HE,lU),e(lU,U3r),e(HE,J3r),e(re,Y3r),e(re,UE),e(UE,c5e),e(c5e,K3r),e(UE,Z3r),e(UE,iU),e(iU,ewr),e(UE,owr),e(re,rwr),e(re,JE),e(JE,f5e),e(f5e,twr),e(JE,awr),e(JE,dU),e(dU,nwr),e(JE,swr),e(re,lwr),e(re,YE),e(YE,m5e),e(m5e,iwr),e(YE,dwr),e(YE,cU),e(cU,cwr),e(YE,fwr),e(re,mwr),e(re,KE),e(KE,g5e),e(g5e,gwr),e(KE,hwr),e(KE,fU),e(fU,pwr),e(KE,uwr),e(re,_wr),e(re,ZE),e(ZE,h5e),e(h5e,bwr),e(ZE,vwr),e(ZE,mU),e(mU,Fwr),e(ZE,Twr),e(re,Mwr),e(re,eC),e(eC,p5e),e(p5e,Ewr),e(eC,Cwr),e(eC,gU),e(gU,wwr),e(eC,Awr),e(re,ywr),e(re,oC),e(oC,u5e),e(u5e,Lwr),e(oC,xwr),e(oC,hU),e(hU,$wr),e(oC,kwr),e(re,Swr),e(re,rC),e(rC,_5e),e(_5e,Rwr),e(rC,Bwr),e(rC,pU),e(pU,Pwr),e(rC,Iwr),e(re,qwr),e(re,tC),e(tC,b5e),e(b5e,Nwr),e(tC,jwr),e(tC,uU),e(uU,Dwr),e(tC,Gwr),e(qr,Owr),M(aC,qr,null),b(f,gIe,_),b(f,Fc,_),e(Fc,nC),e(nC,v5e),M(A7,v5e,null),e(Fc,Vwr),e(Fc,F5e),e(F5e,Xwr),b(f,hIe,_),b(f,fr,_),M(y7,fr,null),e(fr,zwr),e(fr,Tc),e(Tc,Qwr),e(Tc,_U),e(_U,Wwr),e(Tc,Hwr),e(Tc,bU),e(bU,Uwr),e(Tc,Jwr),e(fr,Ywr),e(fr,L7),e(L7,Kwr),e(L7,T5e),e(T5e,Zwr),e(L7,eAr),e(fr,oAr),e(fr,qt),M(x7,qt,null),e(qt,rAr),e(qt,M5e),e(M5e,tAr),e(qt,aAr),e(qt,Mc),e(Mc,nAr),e(Mc,E5e),e(E5e,sAr),e(Mc,lAr),e(Mc,vU),e(vU,iAr),e(Mc,dAr),e(qt,cAr),M(sC,qt,null),e(fr,fAr),e(fr,Nr),M($7,Nr,null),e(Nr,mAr),e(Nr,C5e),e(C5e,gAr),e(Nr,hAr),e(Nr,cn),e(cn,pAr),e(cn,w5e),e(w5e,uAr),e(cn,_Ar),e(cn,A5e),e(A5e,bAr),e(cn,vAr),e(cn,y5e),e(y5e,FAr),e(cn,TAr),e(Nr,MAr),e(Nr,ke),e(ke,lC),e(lC,L5e),e(L5e,EAr),e(lC,CAr),e(lC,FU),e(FU,wAr),e(lC,AAr),e(ke,yAr),e(ke,iC),e(iC,x5e),e(x5e,LAr),e(iC,xAr),e(iC,TU),e(TU,$Ar),e(iC,kAr),e(ke,SAr),e(ke,dC),e(dC,$5e),e($5e,RAr),e(dC,BAr),e(dC,MU),e(MU,PAr),e(dC,IAr),e(ke,qAr),e(ke,cC),e(cC,k5e),e(k5e,NAr),e(cC,jAr),e(cC,EU),e(EU,DAr),e(cC,GAr),e(ke,OAr),e(ke,fC),e(fC,S5e),e(S5e,VAr),e(fC,XAr),e(fC,CU),e(CU,zAr),e(fC,QAr),e(ke,WAr),e(ke,mC),e(mC,R5e),e(R5e,HAr),e(mC,UAr),e(mC,wU),e(wU,JAr),e(mC,YAr),e(ke,KAr),e(ke,gC),e(gC,B5e),e(B5e,ZAr),e(gC,e0r),e(gC,AU),e(AU,o0r),e(gC,r0r),e(ke,t0r),e(ke,hC),e(hC,P5e),e(P5e,a0r),e(hC,n0r),e(hC,yU),e(yU,s0r),e(hC,l0r),e(ke,i0r),e(ke,pC),e(pC,I5e),e(I5e,d0r),e(pC,c0r),e(pC,LU),e(LU,f0r),e(pC,m0r),e(Nr,g0r),M(uC,Nr,null),b(f,pIe,_),b(f,Ec,_),e(Ec,_C),e(_C,q5e),M(k7,q5e,null),e(Ec,h0r),e(Ec,N5e),e(N5e,p0r),b(f,uIe,_),b(f,mr,_),M(S7,mr,null),e(mr,u0r),e(mr,Cc),e(Cc,_0r),e(Cc,xU),e(xU,b0r),e(Cc,v0r),e(Cc,$U),e($U,F0r),e(Cc,T0r),e(mr,M0r),e(mr,R7),e(R7,E0r),e(R7,j5e),e(j5e,C0r),e(R7,w0r),e(mr,A0r),e(mr,Nt),M(B7,Nt,null),e(Nt,y0r),e(Nt,D5e),e(D5e,L0r),e(Nt,x0r),e(Nt,wc),e(wc,$0r),e(wc,G5e),e(G5e,k0r),e(wc,S0r),e(wc,kU),e(kU,R0r),e(wc,B0r),e(Nt,P0r),M(bC,Nt,null),e(mr,I0r),e(mr,jr),M(P7,jr,null),e(jr,q0r),e(jr,O5e),e(O5e,N0r),e(jr,j0r),e(jr,fn),e(fn,D0r),e(fn,V5e),e(V5e,G0r),e(fn,O0r),e(fn,X5e),e(X5e,V0r),e(fn,X0r),e(fn,z5e),e(z5e,z0r),e(fn,Q0r),e(jr,W0r),e(jr,Me),e(Me,vC),e(vC,Q5e),e(Q5e,H0r),e(vC,U0r),e(vC,SU),e(SU,J0r),e(vC,Y0r),e(Me,K0r),e(Me,FC),e(FC,W5e),e(W5e,Z0r),e(FC,eyr),e(FC,RU),e(RU,oyr),e(FC,ryr),e(Me,tyr),e(Me,TC),e(TC,H5e),e(H5e,ayr),e(TC,nyr),e(TC,BU),e(BU,syr),e(TC,lyr),e(Me,iyr),e(Me,MC),e(MC,U5e),e(U5e,dyr),e(MC,cyr),e(MC,PU),e(PU,fyr),e(MC,myr),e(Me,gyr),e(Me,EC),e(EC,J5e),e(J5e,hyr),e(EC,pyr),e(EC,IU),e(IU,uyr),e(EC,_yr),e(Me,byr),e(Me,CC),e(CC,Y5e),e(Y5e,vyr),e(CC,Fyr),e(CC,qU),e(qU,Tyr),e(CC,Myr),e(Me,Eyr),e(Me,wC),e(wC,K5e),e(K5e,Cyr),e(wC,wyr),e(wC,NU),e(NU,Ayr),e(wC,yyr),e(Me,Lyr),e(Me,AC),e(AC,Z5e),e(Z5e,xyr),e(AC,$yr),e(AC,jU),e(jU,kyr),e(AC,Syr),e(Me,Ryr),e(Me,yC),e(yC,eve),e(eve,Byr),e(yC,Pyr),e(yC,DU),e(DU,Iyr),e(yC,qyr),e(Me,Nyr),e(Me,LC),e(LC,ove),e(ove,jyr),e(LC,Dyr),e(LC,GU),e(GU,Gyr),e(LC,Oyr),e(Me,Vyr),e(Me,xC),e(xC,rve),e(rve,Xyr),e(xC,zyr),e(xC,OU),e(OU,Qyr),e(xC,Wyr),e(Me,Hyr),e(Me,$C),e($C,tve),e(tve,Uyr),e($C,Jyr),e($C,VU),e(VU,Yyr),e($C,Kyr),e(jr,Zyr),M(kC,jr,null),b(f,_Ie,_),b(f,Ac,_),e(Ac,SC),e(SC,ave),M(I7,ave,null),e(Ac,eLr),e(Ac,nve),e(nve,oLr),b(f,bIe,_),b(f,gr,_),M(q7,gr,null),e(gr,rLr),e(gr,yc),e(yc,tLr),e(yc,XU),e(XU,aLr),e(yc,nLr),e(yc,zU),e(zU,sLr),e(yc,lLr),e(gr,iLr),e(gr,N7),e(N7,dLr),e(N7,sve),e(sve,cLr),e(N7,fLr),e(gr,mLr),e(gr,jt),M(j7,jt,null),e(jt,gLr),e(jt,lve),e(lve,hLr),e(jt,pLr),e(jt,Lc),e(Lc,uLr),e(Lc,ive),e(ive,_Lr),e(Lc,bLr),e(Lc,QU),e(QU,vLr),e(Lc,FLr),e(jt,TLr),M(RC,jt,null),e(gr,MLr),e(gr,Dr),M(D7,Dr,null),e(Dr,ELr),e(Dr,dve),e(dve,CLr),e(Dr,wLr),e(Dr,mn),e(mn,ALr),e(mn,cve),e(cve,yLr),e(mn,LLr),e(mn,fve),e(fve,xLr),e(mn,$Lr),e(mn,mve),e(mve,kLr),e(mn,SLr),e(Dr,RLr),e(Dr,Le),e(Le,BC),e(BC,gve),e(gve,BLr),e(BC,PLr),e(BC,WU),e(WU,ILr),e(BC,qLr),e(Le,NLr),e(Le,PC),e(PC,hve),e(hve,jLr),e(PC,DLr),e(PC,HU),e(HU,GLr),e(PC,OLr),e(Le,VLr),e(Le,IC),e(IC,pve),e(pve,XLr),e(IC,zLr),e(IC,UU),e(UU,QLr),e(IC,WLr),e(Le,HLr),e(Le,qC),e(qC,uve),e(uve,ULr),e(qC,JLr),e(qC,JU),e(JU,YLr),e(qC,KLr),e(Le,ZLr),e(Le,NC),e(NC,_ve),e(_ve,e8r),e(NC,o8r),e(NC,YU),e(YU,r8r),e(NC,t8r),e(Le,a8r),e(Le,jC),e(jC,bve),e(bve,n8r),e(jC,s8r),e(jC,KU),e(KU,l8r),e(jC,i8r),e(Le,d8r),e(Le,DC),e(DC,vve),e(vve,c8r),e(DC,f8r),e(DC,ZU),e(ZU,m8r),e(DC,g8r),e(Le,h8r),e(Le,GC),e(GC,Fve),e(Fve,p8r),e(GC,u8r),e(GC,eJ),e(eJ,_8r),e(GC,b8r),e(Le,v8r),e(Le,OC),e(OC,Tve),e(Tve,F8r),e(OC,T8r),e(OC,oJ),e(oJ,M8r),e(OC,E8r),e(Le,C8r),e(Le,VC),e(VC,Mve),e(Mve,w8r),e(VC,A8r),e(VC,rJ),e(rJ,y8r),e(VC,L8r),e(Dr,x8r),M(XC,Dr,null),b(f,vIe,_),b(f,xc,_),e(xc,zC),e(zC,Eve),M(G7,Eve,null),e(xc,$8r),e(xc,Cve),e(Cve,k8r),b(f,FIe,_),b(f,hr,_),M(O7,hr,null),e(hr,S8r),e(hr,$c),e($c,R8r),e($c,tJ),e(tJ,B8r),e($c,P8r),e($c,aJ),e(aJ,I8r),e($c,q8r),e(hr,N8r),e(hr,V7),e(V7,j8r),e(V7,wve),e(wve,D8r),e(V7,G8r),e(hr,O8r),e(hr,Dt),M(X7,Dt,null),e(Dt,V8r),e(Dt,Ave),e(Ave,X8r),e(Dt,z8r),e(Dt,kc),e(kc,Q8r),e(kc,yve),e(yve,W8r),e(kc,H8r),e(kc,nJ),e(nJ,U8r),e(kc,J8r),e(Dt,Y8r),M(QC,Dt,null),e(hr,K8r),e(hr,Gr),M(z7,Gr,null),e(Gr,Z8r),e(Gr,Lve),e(Lve,e7r),e(Gr,o7r),e(Gr,gn),e(gn,r7r),e(gn,xve),e(xve,t7r),e(gn,a7r),e(gn,$ve),e($ve,n7r),e(gn,s7r),e(gn,kve),e(kve,l7r),e(gn,i7r),e(Gr,d7r),e(Gr,Se),e(Se,WC),e(WC,Sve),e(Sve,c7r),e(WC,f7r),e(WC,sJ),e(sJ,m7r),e(WC,g7r),e(Se,h7r),e(Se,HC),e(HC,Rve),e(Rve,p7r),e(HC,u7r),e(HC,lJ),e(lJ,_7r),e(HC,b7r),e(Se,v7r),e(Se,UC),e(UC,Bve),e(Bve,F7r),e(UC,T7r),e(UC,iJ),e(iJ,M7r),e(UC,E7r),e(Se,C7r),e(Se,JC),e(JC,Pve),e(Pve,w7r),e(JC,A7r),e(JC,dJ),e(dJ,y7r),e(JC,L7r),e(Se,x7r),e(Se,YC),e(YC,Ive),e(Ive,$7r),e(YC,k7r),e(YC,cJ),e(cJ,S7r),e(YC,R7r),e(Se,B7r),e(Se,KC),e(KC,qve),e(qve,P7r),e(KC,I7r),e(KC,fJ),e(fJ,q7r),e(KC,N7r),e(Se,j7r),e(Se,ZC),e(ZC,Nve),e(Nve,D7r),e(ZC,G7r),e(ZC,mJ),e(mJ,O7r),e(ZC,V7r),e(Se,X7r),e(Se,e3),e(e3,jve),e(jve,z7r),e(e3,Q7r),e(e3,gJ),e(gJ,W7r),e(e3,H7r),e(Se,U7r),e(Se,o3),e(o3,Dve),e(Dve,J7r),e(o3,Y7r),e(o3,hJ),e(hJ,K7r),e(o3,Z7r),e(Gr,exr),M(r3,Gr,null),b(f,TIe,_),b(f,Sc,_),e(Sc,t3),e(t3,Gve),M(Q7,Gve,null),e(Sc,oxr),e(Sc,Ove),e(Ove,rxr),b(f,MIe,_),b(f,pr,_),M(W7,pr,null),e(pr,txr),e(pr,Rc),e(Rc,axr),e(Rc,pJ),e(pJ,nxr),e(Rc,sxr),e(Rc,uJ),e(uJ,lxr),e(Rc,ixr),e(pr,dxr),e(pr,H7),e(H7,cxr),e(H7,Vve),e(Vve,fxr),e(H7,mxr),e(pr,gxr),e(pr,Gt),M(U7,Gt,null),e(Gt,hxr),e(Gt,Xve),e(Xve,pxr),e(Gt,uxr),e(Gt,Bc),e(Bc,_xr),e(Bc,zve),e(zve,bxr),e(Bc,vxr),e(Bc,_J),e(_J,Fxr),e(Bc,Txr),e(Gt,Mxr),M(a3,Gt,null),e(pr,Exr),e(pr,Or),M(J7,Or,null),e(Or,Cxr),e(Or,Qve),e(Qve,wxr),e(Or,Axr),e(Or,hn),e(hn,yxr),e(hn,Wve),e(Wve,Lxr),e(hn,xxr),e(hn,Hve),e(Hve,$xr),e(hn,kxr),e(hn,Uve),e(Uve,Sxr),e(hn,Rxr),e(Or,Bxr),e(Or,xe),e(xe,n3),e(n3,Jve),e(Jve,Pxr),e(n3,Ixr),e(n3,bJ),e(bJ,qxr),e(n3,Nxr),e(xe,jxr),e(xe,s3),e(s3,Yve),e(Yve,Dxr),e(s3,Gxr),e(s3,vJ),e(vJ,Oxr),e(s3,Vxr),e(xe,Xxr),e(xe,l3),e(l3,Kve),e(Kve,zxr),e(l3,Qxr),e(l3,FJ),e(FJ,Wxr),e(l3,Hxr),e(xe,Uxr),e(xe,i3),e(i3,Zve),e(Zve,Jxr),e(i3,Yxr),e(i3,TJ),e(TJ,Kxr),e(i3,Zxr),e(xe,e9r),e(xe,d3),e(d3,eFe),e(eFe,o9r),e(d3,r9r),e(d3,MJ),e(MJ,t9r),e(d3,a9r),e(xe,n9r),e(xe,c3),e(c3,oFe),e(oFe,s9r),e(c3,l9r),e(c3,EJ),e(EJ,i9r),e(c3,d9r),e(xe,c9r),e(xe,f3),e(f3,rFe),e(rFe,f9r),e(f3,m9r),e(f3,CJ),e(CJ,g9r),e(f3,h9r),e(xe,p9r),e(xe,m3),e(m3,tFe),e(tFe,u9r),e(m3,_9r),e(m3,wJ),e(wJ,b9r),e(m3,v9r),e(xe,F9r),e(xe,g3),e(g3,aFe),e(aFe,T9r),e(g3,M9r),e(g3,AJ),e(AJ,E9r),e(g3,C9r),e(xe,w9r),e(xe,h3),e(h3,nFe),e(nFe,A9r),e(h3,y9r),e(h3,yJ),e(yJ,L9r),e(h3,x9r),e(Or,$9r),M(p3,Or,null),b(f,EIe,_),b(f,Pc,_),e(Pc,u3),e(u3,sFe),M(Y7,sFe,null),e(Pc,k9r),e(Pc,lFe),e(lFe,S9r),b(f,CIe,_),b(f,ur,_),M(K7,ur,null),e(ur,R9r),e(ur,Ic),e(Ic,B9r),e(Ic,LJ),e(LJ,P9r),e(Ic,I9r),e(Ic,xJ),e(xJ,q9r),e(Ic,N9r),e(ur,j9r),e(ur,Z7),e(Z7,D9r),e(Z7,iFe),e(iFe,G9r),e(Z7,O9r),e(ur,V9r),e(ur,Ot),M(ex,Ot,null),e(Ot,X9r),e(Ot,dFe),e(dFe,z9r),e(Ot,Q9r),e(Ot,qc),e(qc,W9r),e(qc,cFe),e(cFe,H9r),e(qc,U9r),e(qc,$J),e($J,J9r),e(qc,Y9r),e(Ot,K9r),M(_3,Ot,null),e(ur,Z9r),e(ur,Vr),M(ox,Vr,null),e(Vr,e$r),e(Vr,fFe),e(fFe,o$r),e(Vr,r$r),e(Vr,pn),e(pn,t$r),e(pn,mFe),e(mFe,a$r),e(pn,n$r),e(pn,gFe),e(gFe,s$r),e(pn,l$r),e(pn,hFe),e(hFe,i$r),e(pn,d$r),e(Vr,c$r),e(Vr,$e),e($e,b3),e(b3,pFe),e(pFe,f$r),e(b3,m$r),e(b3,kJ),e(kJ,g$r),e(b3,h$r),e($e,p$r),e($e,v3),e(v3,uFe),e(uFe,u$r),e(v3,_$r),e(v3,SJ),e(SJ,b$r),e(v3,v$r),e($e,F$r),e($e,F3),e(F3,_Fe),e(_Fe,T$r),e(F3,M$r),e(F3,RJ),e(RJ,E$r),e(F3,C$r),e($e,w$r),e($e,T3),e(T3,bFe),e(bFe,A$r),e(T3,y$r),e(T3,BJ),e(BJ,L$r),e(T3,x$r),e($e,$$r),e($e,M3),e(M3,vFe),e(vFe,k$r),e(M3,S$r),e(M3,PJ),e(PJ,R$r),e(M3,B$r),e($e,P$r),e($e,E3),e(E3,FFe),e(FFe,I$r),e(E3,q$r),e(E3,IJ),e(IJ,N$r),e(E3,j$r),e($e,D$r),e($e,C3),e(C3,TFe),e(TFe,G$r),e(C3,O$r),e(C3,qJ),e(qJ,V$r),e(C3,X$r),e($e,z$r),e($e,w3),e(w3,MFe),e(MFe,Q$r),e(w3,W$r),e(w3,NJ),e(NJ,H$r),e(w3,U$r),e($e,J$r),e($e,A3),e(A3,EFe),e(EFe,Y$r),e(A3,K$r),e(A3,jJ),e(jJ,Z$r),e(A3,ekr),e($e,okr),e($e,y3),e(y3,CFe),e(CFe,rkr),e(y3,tkr),e(y3,DJ),e(DJ,akr),e(y3,nkr),e(Vr,skr),M(L3,Vr,null),b(f,wIe,_),b(f,Nc,_),e(Nc,x3),e(x3,wFe),M(rx,wFe,null),e(Nc,lkr),e(Nc,AFe),e(AFe,ikr),b(f,AIe,_),b(f,_r,_),M(tx,_r,null),e(_r,dkr),e(_r,jc),e(jc,ckr),e(jc,GJ),e(GJ,fkr),e(jc,mkr),e(jc,OJ),e(OJ,gkr),e(jc,hkr),e(_r,pkr),e(_r,ax),e(ax,ukr),e(ax,yFe),e(yFe,_kr),e(ax,bkr),e(_r,vkr),e(_r,Vt),M(nx,Vt,null),e(Vt,Fkr),e(Vt,LFe),e(LFe,Tkr),e(Vt,Mkr),e(Vt,Dc),e(Dc,Ekr),e(Dc,xFe),e(xFe,Ckr),e(Dc,wkr),e(Dc,VJ),e(VJ,Akr),e(Dc,ykr),e(Vt,Lkr),M($3,Vt,null),e(_r,xkr),e(_r,Xr),M(sx,Xr,null),e(Xr,$kr),e(Xr,$Fe),e($Fe,kkr),e(Xr,Skr),e(Xr,un),e(un,Rkr),e(un,kFe),e(kFe,Bkr),e(un,Pkr),e(un,SFe),e(SFe,Ikr),e(un,qkr),e(un,RFe),e(RFe,Nkr),e(un,jkr),e(Xr,Dkr),e(Xr,De),e(De,k3),e(k3,BFe),e(BFe,Gkr),e(k3,Okr),e(k3,XJ),e(XJ,Vkr),e(k3,Xkr),e(De,zkr),e(De,S3),e(S3,PFe),e(PFe,Qkr),e(S3,Wkr),e(S3,zJ),e(zJ,Hkr),e(S3,Ukr),e(De,Jkr),e(De,R3),e(R3,IFe),e(IFe,Ykr),e(R3,Kkr),e(R3,QJ),e(QJ,Zkr),e(R3,eSr),e(De,oSr),e(De,B3),e(B3,qFe),e(qFe,rSr),e(B3,tSr),e(B3,WJ),e(WJ,aSr),e(B3,nSr),e(De,sSr),e(De,P3),e(P3,NFe),e(NFe,lSr),e(P3,iSr),e(P3,HJ),e(HJ,dSr),e(P3,cSr),e(De,fSr),e(De,I3),e(I3,jFe),e(jFe,mSr),e(I3,gSr),e(I3,UJ),e(UJ,hSr),e(I3,pSr),e(De,uSr),e(De,q3),e(q3,DFe),e(DFe,_Sr),e(q3,bSr),e(q3,JJ),e(JJ,vSr),e(q3,FSr),e(De,TSr),e(De,N3),e(N3,GFe),e(GFe,MSr),e(N3,ESr),e(N3,YJ),e(YJ,CSr),e(N3,wSr),e(Xr,ASr),M(j3,Xr,null),b(f,yIe,_),b(f,Gc,_),e(Gc,D3),e(D3,OFe),M(lx,OFe,null),e(Gc,ySr),e(Gc,VFe),e(VFe,LSr),b(f,LIe,_),b(f,br,_),M(ix,br,null),e(br,xSr),e(br,Oc),e(Oc,$Sr),e(Oc,KJ),e(KJ,kSr),e(Oc,SSr),e(Oc,ZJ),e(ZJ,RSr),e(Oc,BSr),e(br,PSr),e(br,dx),e(dx,ISr),e(dx,XFe),e(XFe,qSr),e(dx,NSr),e(br,jSr),e(br,Xt),M(cx,Xt,null),e(Xt,DSr),e(Xt,zFe),e(zFe,GSr),e(Xt,OSr),e(Xt,Vc),e(Vc,VSr),e(Vc,QFe),e(QFe,XSr),e(Vc,zSr),e(Vc,eY),e(eY,QSr),e(Vc,WSr),e(Xt,HSr),M(G3,Xt,null),e(br,USr),e(br,zr),M(fx,zr,null),e(zr,JSr),e(zr,WFe),e(WFe,YSr),e(zr,KSr),e(zr,_n),e(_n,ZSr),e(_n,HFe),e(HFe,eRr),e(_n,oRr),e(_n,UFe),e(UFe,rRr),e(_n,tRr),e(_n,JFe),e(JFe,aRr),e(_n,nRr),e(zr,sRr),e(zr,Ge),e(Ge,O3),e(O3,YFe),e(YFe,lRr),e(O3,iRr),e(O3,oY),e(oY,dRr),e(O3,cRr),e(Ge,fRr),e(Ge,V3),e(V3,KFe),e(KFe,mRr),e(V3,gRr),e(V3,rY),e(rY,hRr),e(V3,pRr),e(Ge,uRr),e(Ge,X3),e(X3,ZFe),e(ZFe,_Rr),e(X3,bRr),e(X3,tY),e(tY,vRr),e(X3,FRr),e(Ge,TRr),e(Ge,z3),e(z3,eTe),e(eTe,MRr),e(z3,ERr),e(z3,aY),e(aY,CRr),e(z3,wRr),e(Ge,ARr),e(Ge,Q3),e(Q3,oTe),e(oTe,yRr),e(Q3,LRr),e(Q3,nY),e(nY,xRr),e(Q3,$Rr),e(Ge,kRr),e(Ge,W3),e(W3,rTe),e(rTe,SRr),e(W3,RRr),e(W3,sY),e(sY,BRr),e(W3,PRr),e(Ge,IRr),e(Ge,H3),e(H3,tTe),e(tTe,qRr),e(H3,NRr),e(H3,lY),e(lY,jRr),e(H3,DRr),e(Ge,GRr),e(Ge,U3),e(U3,aTe),e(aTe,ORr),e(U3,VRr),e(U3,iY),e(iY,XRr),e(U3,zRr),e(zr,QRr),M(J3,zr,null),b(f,xIe,_),b(f,Xc,_),e(Xc,Y3),e(Y3,nTe),M(mx,nTe,null),e(Xc,WRr),e(Xc,sTe),e(sTe,HRr),b(f,$Ie,_),b(f,vr,_),M(gx,vr,null),e(vr,URr),e(vr,zc),e(zc,JRr),e(zc,dY),e(dY,YRr),e(zc,KRr),e(zc,cY),e(cY,ZRr),e(zc,eBr),e(vr,oBr),e(vr,hx),e(hx,rBr),e(hx,lTe),e(lTe,tBr),e(hx,aBr),e(vr,nBr),e(vr,zt),M(px,zt,null),e(zt,sBr),e(zt,iTe),e(iTe,lBr),e(zt,iBr),e(zt,Qc),e(Qc,dBr),e(Qc,dTe),e(dTe,cBr),e(Qc,fBr),e(Qc,fY),e(fY,mBr),e(Qc,gBr),e(zt,hBr),M(K3,zt,null),e(vr,pBr),e(vr,Qr),M(ux,Qr,null),e(Qr,uBr),e(Qr,cTe),e(cTe,_Br),e(Qr,bBr),e(Qr,bn),e(bn,vBr),e(bn,fTe),e(fTe,FBr),e(bn,TBr),e(bn,mTe),e(mTe,MBr),e(bn,EBr),e(bn,gTe),e(gTe,CBr),e(bn,wBr),e(Qr,ABr),e(Qr,hTe),e(hTe,Z3),e(Z3,pTe),e(pTe,yBr),e(Z3,LBr),e(Z3,mY),e(mY,xBr),e(Z3,$Br),e(Qr,kBr),M(ew,Qr,null),b(f,kIe,_),b(f,Wc,_),e(Wc,ow),e(ow,uTe),M(_x,uTe,null),e(Wc,SBr),e(Wc,_Te),e(_Te,RBr),b(f,SIe,_),b(f,Fr,_),M(bx,Fr,null),e(Fr,BBr),e(Fr,Hc),e(Hc,PBr),e(Hc,gY),e(gY,IBr),e(Hc,qBr),e(Hc,hY),e(hY,NBr),e(Hc,jBr),e(Fr,DBr),e(Fr,vx),e(vx,GBr),e(vx,bTe),e(bTe,OBr),e(vx,VBr),e(Fr,XBr),e(Fr,Qt),M(Fx,Qt,null),e(Qt,zBr),e(Qt,vTe),e(vTe,QBr),e(Qt,WBr),e(Qt,Uc),e(Uc,HBr),e(Uc,FTe),e(FTe,UBr),e(Uc,JBr),e(Uc,pY),e(pY,YBr),e(Uc,KBr),e(Qt,ZBr),M(rw,Qt,null),e(Fr,ePr),e(Fr,Wr),M(Tx,Wr,null),e(Wr,oPr),e(Wr,TTe),e(TTe,rPr),e(Wr,tPr),e(Wr,vn),e(vn,aPr),e(vn,MTe),e(MTe,nPr),e(vn,sPr),e(vn,ETe),e(ETe,lPr),e(vn,iPr),e(vn,CTe),e(CTe,dPr),e(vn,cPr),e(Wr,fPr),e(Wr,Mx),e(Mx,tw),e(tw,wTe),e(wTe,mPr),e(tw,gPr),e(tw,uY),e(uY,hPr),e(tw,pPr),e(Mx,uPr),e(Mx,aw),e(aw,ATe),e(ATe,_Pr),e(aw,bPr),e(aw,_Y),e(_Y,vPr),e(aw,FPr),e(Wr,TPr),M(nw,Wr,null),b(f,RIe,_),b(f,Jc,_),e(Jc,sw),e(sw,yTe),M(Ex,yTe,null),e(Jc,MPr),e(Jc,LTe),e(LTe,EPr),b(f,BIe,_),b(f,Tr,_),M(Cx,Tr,null),e(Tr,CPr),e(Tr,Yc),e(Yc,wPr),e(Yc,bY),e(bY,APr),e(Yc,yPr),e(Yc,vY),e(vY,LPr),e(Yc,xPr),e(Tr,$Pr),e(Tr,wx),e(wx,kPr),e(wx,xTe),e(xTe,SPr),e(wx,RPr),e(Tr,BPr),e(Tr,Wt),M(Ax,Wt,null),e(Wt,PPr),e(Wt,$Te),e($Te,IPr),e(Wt,qPr),e(Wt,Kc),e(Kc,NPr),e(Kc,kTe),e(kTe,jPr),e(Kc,DPr),e(Kc,FY),e(FY,GPr),e(Kc,OPr),e(Wt,VPr),M(lw,Wt,null),e(Tr,XPr),e(Tr,Hr),M(yx,Hr,null),e(Hr,zPr),e(Hr,STe),e(STe,QPr),e(Hr,WPr),e(Hr,Fn),e(Fn,HPr),e(Fn,RTe),e(RTe,UPr),e(Fn,JPr),e(Fn,BTe),e(BTe,YPr),e(Fn,KPr),e(Fn,PTe),e(PTe,ZPr),e(Fn,eIr),e(Hr,oIr),e(Hr,ITe),e(ITe,iw),e(iw,qTe),e(qTe,rIr),e(iw,tIr),e(iw,TY),e(TY,aIr),e(iw,nIr),e(Hr,sIr),M(dw,Hr,null),PIe=!0},p(f,[_]){const Lx={};_&2&&(Lx.$$scope={dirty:_,ctx:f}),lf.$set(Lx);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),sg.$set(NTe);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),Ng.$set(jTe);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),mh.$set(DTe);const xx={};_&2&&(xx.$$scope={dirty:_,ctx:f}),gh.$set(xx);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),kh.$set(GTe);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),Sh.$set(Tn);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),Ph.$set(OTe);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),Cu.$set(VTe);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),Au.$set(XTe);const $x={};_&2&&($x.$$scope={dirty:_,ctx:f}),h_.$set($x);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),u_.$set(zTe);const kx={};_&2&&(kx.$$scope={dirty:_,ctx:f}),Z_.$set(kx);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),o6.$set(QTe);const Sx={};_&2&&(Sx.$$scope={dirty:_,ctx:f}),N6.$set(Sx);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),D6.$set(WTe);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),n1.$set(HTe);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),l1.$set(UTe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),rb.$set(Zc);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),ab.$set(JTe);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),Bb.$set(YTe);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),Ib.$set(KTe);const Rx={};_&2&&(Rx.$$scope={dirty:_,ctx:f}),Vb.$set(Rx);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),zb.$set(ZTe);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),A4.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),L4.$set(oMe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),p2.$set(Jr);const Bx={};_&2&&(Bx.$$scope={dirty:_,ctx:f}),_2.$set(Bx);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),F2.$set(rMe);const Px={};_&2&&(Px.$$scope={dirty:_,ctx:f}),M2.$set(Px);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),P2.$set(tMe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),q2.$set(Yr);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),D2.$set(aMe);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),O2.$set(ef);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),K2.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),e5.$set(sMe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),s5.$set(y);const cw={};_&2&&(cw.$$scope={dirty:_,ctx:f}),i5.$set(cw);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),b5.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),F5.$set(iMe);const fw={};_&2&&(fw.$$scope={dirty:_,ctx:f}),C5.$set(fw);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),A5.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),S5.$set(cMe);const mw={};_&2&&(mw.$$scope={dirty:_,ctx:f}),B5.$set(mw);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),j5.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),G5.$set(mMe);const gw={};_&2&&(gw.$$scope={dirty:_,ctx:f}),z5.$set(gw);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),W5.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),J5.$set(hMe);const hw={};_&2&&(hw.$$scope={dirty:_,ctx:f}),K5.$set(hw);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),av.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),sv.$set(uMe);const pw={};_&2&&(pw.$$scope={dirty:_,ctx:f}),dv.$set(pw);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),fv.$set(_Me);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),rF.$set(bMe);const uw={};_&2&&(uw.$$scope={dirty:_,ctx:f}),aF.$set(uw);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),LF.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),$F.$set(FMe);const _w={};_&2&&(_w.$$scope={dirty:_,ctx:f}),VF.$set(_w);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),zF.$set(TMe);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),UF.$set(MMe);const bw={};_&2&&(bw.$$scope={dirty:_,ctx:f}),YF.$set(bw);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),bT.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),FT.$set(CMe);const vw={};_&2&&(vw.$$scope={dirty:_,ctx:f}),kT.$set(vw);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),RT.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),sM.$set(AMe);const Fw={};_&2&&(Fw.$$scope={dirty:_,ctx:f}),iM.$set(Fw);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),AM.$set(yMe);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),LM.$set(LMe);const Tw={};_&2&&(Tw.$$scope={dirty:_,ctx:f}),$M.$set(Tw);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),SM.$set(xMe);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),ZM.$set($Me);const Mw={};_&2&&(Mw.$$scope={dirty:_,ctx:f}),oE.$set(Mw);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),ME.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),CE.$set(SMe);const Ew={};_&2&&(Ew.$$scope={dirty:_,ctx:f}),AE.$set(Ew);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),LE.$set(RMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),$E.$set(BMe);const Cw={};_&2&&(Cw.$$scope={dirty:_,ctx:f}),SE.$set(Cw);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),aC.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),sC.$set(IMe);const ww={};_&2&&(ww.$$scope={dirty:_,ctx:f}),uC.$set(ww);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),bC.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),kC.$set(NMe);const Aw={};_&2&&(Aw.$$scope={dirty:_,ctx:f}),RC.$set(Aw);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),XC.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),QC.$set(DMe);const yw={};_&2&&(yw.$$scope={dirty:_,ctx:f}),r3.$set(yw);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),a3.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),p3.$set(OMe);const Lw={};_&2&&(Lw.$$scope={dirty:_,ctx:f}),_3.$set(Lw);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),L3.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),$3.$set(XMe);const xw={};_&2&&(xw.$$scope={dirty:_,ctx:f}),j3.$set(xw);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),G3.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),J3.$set(QMe);const $w={};_&2&&($w.$$scope={dirty:_,ctx:f}),K3.$set($w);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),ew.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),rw.$set(HMe);const kw={};_&2&&(kw.$$scope={dirty:_,ctx:f}),nw.$set(kw);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),lw.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),dw.$set(JMe)},i(f){PIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(x0.$$.fragment,f),E($0.$$.fragment,f),E(lf.$$.fragment,f),E(k0.$$.fragment,f),E(S0.$$.fragment,f),E(P0.$$.fragment,f),E(sg.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(N0.$$.fragment,f),E(G0.$$.fragment,f),E(Ng.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(X0.$$.fragment,f),E(W0.$$.fragment,f),E(mh.$$.fragment,f),E(gh.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(J0.$$.fragment,f),E(Z0.$$.fragment,f),E(kh.$$.fragment,f),E(Sh.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(Ph.$$.fragment,f),E(ny.$$.fragment,f),E(Cu.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(Au.$$.fragment,f),E(cy.$$.fragment,f),E(h_.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(u_.$$.fragment,f),E(py.$$.fragment,f),E(Z_.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(o6.$$.fragment,f),E(Fy.$$.fragment,f),E(N6.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(D6.$$.fragment,f),E(wy.$$.fragment,f),E(n1.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(l1.$$.fragment,f),E($y.$$.fragment,f),E(rb.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(ab.$$.fragment,f),E(Py.$$.fragment,f),E(Bb.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Ib.$$.fragment,f),E(Dy.$$.fragment,f),E(Vb.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(zb.$$.fragment,f),E(zy.$$.fragment,f),E(A4.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(L4.$$.fragment,f),E(Jy.$$.fragment,f),E(p2.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(_2.$$.fragment,f),E(oL.$$.fragment,f),E(F2.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(M2.$$.fragment,f),E(sL.$$.fragment,f),E(P2.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(q2.$$.fragment,f),E(fL.$$.fragment,f),E(D2.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(O2.$$.fragment,f),E(uL.$$.fragment,f),E(K2.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(e5.$$.fragment,f),E(TL.$$.fragment,f),E(s5.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(i5.$$.fragment,f),E(AL.$$.fragment,f),E(b5.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(F5.$$.fragment,f),E(kL.$$.fragment,f),E(C5.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(A5.$$.fragment,f),E(qL.$$.fragment,f),E(S5.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(B5.$$.fragment,f),E(OL.$$.fragment,f),E(j5.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(G5.$$.fragment,f),E(WL.$$.fragment,f),E(z5.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(W5.$$.fragment,f),E(ZL.$$.fragment,f),E(J5.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(K5.$$.fragment,f),E(a8.$$.fragment,f),E(av.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(sv.$$.fragment,f),E(d8.$$.fragment,f),E(dv.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(fv.$$.fragment,f),E(h8.$$.fragment,f),E(rF.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(aF.$$.fragment,f),E(v8.$$.fragment,f),E(LF.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E($F.$$.fragment,f),E(C8.$$.fragment,f),E(VF.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(zF.$$.fragment,f),E(x8.$$.fragment,f),E(UF.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(YF.$$.fragment,f),E(B8.$$.fragment,f),E(bT.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(FT.$$.fragment,f),E(j8.$$.fragment,f),E(kT.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(RT.$$.fragment,f),E(X8.$$.fragment,f),E(sM.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(iM.$$.fragment,f),E(U8.$$.fragment,f),E(AM.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(LM.$$.fragment,f),E(e7.$$.fragment,f),E($M.$$.fragment,f),E(o7.$$.fragment,f),E(r7.$$.fragment,f),E(a7.$$.fragment,f),E(SM.$$.fragment,f),E(n7.$$.fragment,f),E(ZM.$$.fragment,f),E(s7.$$.fragment,f),E(l7.$$.fragment,f),E(d7.$$.fragment,f),E(oE.$$.fragment,f),E(c7.$$.fragment,f),E(ME.$$.fragment,f),E(f7.$$.fragment,f),E(m7.$$.fragment,f),E(h7.$$.fragment,f),E(CE.$$.fragment,f),E(p7.$$.fragment,f),E(AE.$$.fragment,f),E(u7.$$.fragment,f),E(_7.$$.fragment,f),E(v7.$$.fragment,f),E(LE.$$.fragment,f),E(F7.$$.fragment,f),E($E.$$.fragment,f),E(T7.$$.fragment,f),E(M7.$$.fragment,f),E(C7.$$.fragment,f),E(SE.$$.fragment,f),E(w7.$$.fragment,f),E(aC.$$.fragment,f),E(A7.$$.fragment,f),E(y7.$$.fragment,f),E(x7.$$.fragment,f),E(sC.$$.fragment,f),E($7.$$.fragment,f),E(uC.$$.fragment,f),E(k7.$$.fragment,f),E(S7.$$.fragment,f),E(B7.$$.fragment,f),E(bC.$$.fragment,f),E(P7.$$.fragment,f),E(kC.$$.fragment,f),E(I7.$$.fragment,f),E(q7.$$.fragment,f),E(j7.$$.fragment,f),E(RC.$$.fragment,f),E(D7.$$.fragment,f),E(XC.$$.fragment,f),E(G7.$$.fragment,f),E(O7.$$.fragment,f),E(X7.$$.fragment,f),E(QC.$$.fragment,f),E(z7.$$.fragment,f),E(r3.$$.fragment,f),E(Q7.$$.fragment,f),E(W7.$$.fragment,f),E(U7.$$.fragment,f),E(a3.$$.fragment,f),E(J7.$$.fragment,f),E(p3.$$.fragment,f),E(Y7.$$.fragment,f),E(K7.$$.fragment,f),E(ex.$$.fragment,f),E(_3.$$.fragment,f),E(ox.$$.fragment,f),E(L3.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E($3.$$.fragment,f),E(sx.$$.fragment,f),E(j3.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(G3.$$.fragment,f),E(fx.$$.fragment,f),E(J3.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(K3.$$.fragment,f),E(ux.$$.fragment,f),E(ew.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(rw.$$.fragment,f),E(Tx.$$.fragment,f),E(nw.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(lw.$$.fragment,f),E(yx.$$.fragment,f),E(dw.$$.fragment,f),PIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(x0.$$.fragment,f),C($0.$$.fragment,f),C(lf.$$.fragment,f),C(k0.$$.fragment,f),C(S0.$$.fragment,f),C(P0.$$.fragment,f),C(sg.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(N0.$$.fragment,f),C(G0.$$.fragment,f),C(Ng.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(X0.$$.fragment,f),C(W0.$$.fragment,f),C(mh.$$.fragment,f),C(gh.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(J0.$$.fragment,f),C(Z0.$$.fragment,f),C(kh.$$.fragment,f),C(Sh.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(Ph.$$.fragment,f),C(ny.$$.fragment,f),C(Cu.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(Au.$$.fragment,f),C(cy.$$.fragment,f),C(h_.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(u_.$$.fragment,f),C(py.$$.fragment,f),C(Z_.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(o6.$$.fragment,f),C(Fy.$$.fragment,f),C(N6.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(D6.$$.fragment,f),C(wy.$$.fragment,f),C(n1.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(l1.$$.fragment,f),C($y.$$.fragment,f),C(rb.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(ab.$$.fragment,f),C(Py.$$.fragment,f),C(Bb.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Ib.$$.fragment,f),C(Dy.$$.fragment,f),C(Vb.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(zb.$$.fragment,f),C(zy.$$.fragment,f),C(A4.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(L4.$$.fragment,f),C(Jy.$$.fragment,f),C(p2.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(_2.$$.fragment,f),C(oL.$$.fragment,f),C(F2.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(M2.$$.fragment,f),C(sL.$$.fragment,f),C(P2.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(q2.$$.fragment,f),C(fL.$$.fragment,f),C(D2.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(O2.$$.fragment,f),C(uL.$$.fragment,f),C(K2.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(e5.$$.fragment,f),C(TL.$$.fragment,f),C(s5.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(i5.$$.fragment,f),C(AL.$$.fragment,f),C(b5.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(F5.$$.fragment,f),C(kL.$$.fragment,f),C(C5.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(A5.$$.fragment,f),C(qL.$$.fragment,f),C(S5.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(B5.$$.fragment,f),C(OL.$$.fragment,f),C(j5.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(G5.$$.fragment,f),C(WL.$$.fragment,f),C(z5.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(W5.$$.fragment,f),C(ZL.$$.fragment,f),C(J5.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(K5.$$.fragment,f),C(a8.$$.fragment,f),C(av.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(sv.$$.fragment,f),C(d8.$$.fragment,f),C(dv.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(fv.$$.fragment,f),C(h8.$$.fragment,f),C(rF.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(aF.$$.fragment,f),C(v8.$$.fragment,f),C(LF.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C($F.$$.fragment,f),C(C8.$$.fragment,f),C(VF.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(zF.$$.fragment,f),C(x8.$$.fragment,f),C(UF.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(YF.$$.fragment,f),C(B8.$$.fragment,f),C(bT.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(FT.$$.fragment,f),C(j8.$$.fragment,f),C(kT.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(RT.$$.fragment,f),C(X8.$$.fragment,f),C(sM.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(iM.$$.fragment,f),C(U8.$$.fragment,f),C(AM.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(LM.$$.fragment,f),C(e7.$$.fragment,f),C($M.$$.fragment,f),C(o7.$$.fragment,f),C(r7.$$.fragment,f),C(a7.$$.fragment,f),C(SM.$$.fragment,f),C(n7.$$.fragment,f),C(ZM.$$.fragment,f),C(s7.$$.fragment,f),C(l7.$$.fragment,f),C(d7.$$.fragment,f),C(oE.$$.fragment,f),C(c7.$$.fragment,f),C(ME.$$.fragment,f),C(f7.$$.fragment,f),C(m7.$$.fragment,f),C(h7.$$.fragment,f),C(CE.$$.fragment,f),C(p7.$$.fragment,f),C(AE.$$.fragment,f),C(u7.$$.fragment,f),C(_7.$$.fragment,f),C(v7.$$.fragment,f),C(LE.$$.fragment,f),C(F7.$$.fragment,f),C($E.$$.fragment,f),C(T7.$$.fragment,f),C(M7.$$.fragment,f),C(C7.$$.fragment,f),C(SE.$$.fragment,f),C(w7.$$.fragment,f),C(aC.$$.fragment,f),C(A7.$$.fragment,f),C(y7.$$.fragment,f),C(x7.$$.fragment,f),C(sC.$$.fragment,f),C($7.$$.fragment,f),C(uC.$$.fragment,f),C(k7.$$.fragment,f),C(S7.$$.fragment,f),C(B7.$$.fragment,f),C(bC.$$.fragment,f),C(P7.$$.fragment,f),C(kC.$$.fragment,f),C(I7.$$.fragment,f),C(q7.$$.fragment,f),C(j7.$$.fragment,f),C(RC.$$.fragment,f),C(D7.$$.fragment,f),C(XC.$$.fragment,f),C(G7.$$.fragment,f),C(O7.$$.fragment,f),C(X7.$$.fragment,f),C(QC.$$.fragment,f),C(z7.$$.fragment,f),C(r3.$$.fragment,f),C(Q7.$$.fragment,f),C(W7.$$.fragment,f),C(U7.$$.fragment,f),C(a3.$$.fragment,f),C(J7.$$.fragment,f),C(p3.$$.fragment,f),C(Y7.$$.fragment,f),C(K7.$$.fragment,f),C(ex.$$.fragment,f),C(_3.$$.fragment,f),C(ox.$$.fragment,f),C(L3.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C($3.$$.fragment,f),C(sx.$$.fragment,f),C(j3.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(G3.$$.fragment,f),C(fx.$$.fragment,f),C(J3.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(K3.$$.fragment,f),C(ux.$$.fragment,f),C(ew.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(rw.$$.fragment,f),C(Tx.$$.fragment,f),C(nw.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(lw.$$.fragment,f),C(yx.$$.fragment,f),C(dw.$$.fragment,f),PIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(rf),f&&t(Kr),f&&t(qe),f&&t(Xe),f&&t(af),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(BBe),f&&t(ii),w(x0),f&&t(PBe),f&&t(An),f&&t(IBe),w($0,f),f&&t(qBe),f&&t(z9),f&&t(NBe),w(lf,f),f&&t(jBe),f&&t(di),w(k0),f&&t(DBe),f&&t(Co),w(S0),w(P0),w(sg),w(I0),f&&t(GBe),f&&t(fi),w(q0),f&&t(OBe),f&&t(wo),w(N0),w(G0),w(Ng),w(O0),f&&t(VBe),f&&t(mi),w(V0),f&&t(XBe),f&&t(Ao),w(X0),w(W0),w(mh),w(gh),w(H0),f&&t(zBe),f&&t(gi),w(U0),f&&t(QBe),f&&t(yo),w(J0),w(Z0),w(kh),w(Sh),w(ey),f&&t(WBe),f&&t(pi),w(oy),f&&t(HBe),f&&t(Lo),w(ry),w(ay),w(Ph),w(ny),w(Cu),f&&t(UBe),f&&t(bi),w(sy),f&&t(JBe),f&&t(xo),w(ly),w(dy),w(Au),w(cy),w(h_),f&&t(YBe),f&&t(Ti),w(fy),f&&t(KBe),f&&t($o),w(my),w(hy),w(u_),w(py),w(Z_),f&&t(ZBe),f&&t(Ci),w(uy),f&&t(ePe),f&&t(ko),w(_y),w(vy),w(o6),w(Fy),w(N6),f&&t(oPe),f&&t(yi),w(Ty),f&&t(rPe),f&&t(So),w(My),w(Cy),w(D6),w(wy),w(n1),f&&t(tPe),f&&t($i),w(Ay),f&&t(aPe),f&&t(Ro),w(yy),w(xy),w(l1),w($y),w(rb),f&&t(nPe),f&&t(Ri),w(ky),f&&t(sPe),f&&t(Bo),w(Sy),w(By),w(ab),w(Py),w(Bb),f&&t(lPe),f&&t(Ii),w(Iy),f&&t(iPe),f&&t(Po),w(qy),w(jy),w(Ib),w(Dy),w(Vb),f&&t(dPe),f&&t(ji),w(Gy),f&&t(cPe),f&&t(Io),w(Oy),w(Xy),w(zb),w(zy),w(A4),f&&t(fPe),f&&t(Oi),w(Qy),f&&t(mPe),f&&t(qo),w(Wy),w(Uy),w(L4),w(Jy),w(p2),f&&t(gPe),f&&t(zi),w(Yy),f&&t(hPe),f&&t(No),w(Ky),w(eL),w(_2),w(oL),w(F2),f&&t(pPe),f&&t(Hi),w(rL),f&&t(uPe),f&&t(jo),w(tL),w(nL),w(M2),w(sL),w(P2),f&&t(_Pe),f&&t(Yi),w(lL),f&&t(bPe),f&&t(Do),w(iL),w(cL),w(q2),w(fL),w(D2),f&&t(vPe),f&&t(ed),w(mL),f&&t(FPe),f&&t(Go),w(gL),w(pL),w(O2),w(uL),w(K2),f&&t(TPe),f&&t(td),w(_L),f&&t(MPe),f&&t(Oo),w(bL),w(FL),w(e5),w(TL),w(s5),f&&t(EPe),f&&t(sd),w(ML),f&&t(CPe),f&&t(Vo),w(EL),w(wL),w(i5),w(AL),w(b5),f&&t(wPe),f&&t(dd),w(yL),f&&t(APe),f&&t(Xo),w(LL),w($L),w(F5),w(kL),w(C5),f&&t(yPe),f&&t(md),w(RL),f&&t(LPe),f&&t(zo),w(BL),w(IL),w(A5),w(qL),w(S5),f&&t(xPe),f&&t(pd),w(NL),f&&t($Pe),f&&t(Qo),w(jL),w(GL),w(B5),w(OL),w(j5),f&&t(kPe),f&&t(vd),w(VL),f&&t(SPe),f&&t(Wo),w(XL),w(QL),w(G5),w(WL),w(z5),f&&t(RPe),f&&t(Md),w(UL),f&&t(BPe),f&&t(Ho),w(JL),w(KL),w(W5),w(ZL),w(J5),f&&t(PPe),f&&t(wd),w(e8),f&&t(IPe),f&&t(Uo),w(o8),w(t8),w(K5),w(a8),w(av),f&&t(qPe),f&&t(Ld),w(n8),f&&t(NPe),f&&t(Jo),w(s8),w(i8),w(sv),w(d8),w(dv),f&&t(jPe),f&&t(kd),w(c8),f&&t(DPe),f&&t(Yo),w(f8),w(g8),w(fv),w(h8),w(rF),f&&t(GPe),f&&t(Bd),w(p8),f&&t(OPe),f&&t(Ko),w(u8),w(b8),w(aF),w(v8),w(LF),f&&t(VPe),f&&t(qd),w(F8),f&&t(XPe),f&&t(Zo),w(T8),w(E8),w($F),w(C8),w(VF),f&&t(zPe),f&&t(Dd),w(w8),f&&t(QPe),f&&t(er),w(A8),w(L8),w(zF),w(x8),w(UF),f&&t(WPe),f&&t(Xd),w($8),f&&t(HPe),f&&t(or),w(k8),w(R8),w(YF),w(B8),w(bT),f&&t(UPe),f&&t(Wd),w(P8),f&&t(JPe),f&&t(rr),w(I8),w(N8),w(FT),w(j8),w(kT),f&&t(YPe),f&&t(Jd),w(D8),f&&t(KPe),f&&t(tr),w(G8),w(V8),w(RT),w(X8),w(sM),f&&t(ZPe),f&&t(Zd),w(z8),f&&t(eIe),f&&t(ar),w(Q8),w(H8),w(iM),w(U8),w(AM),f&&t(oIe),f&&t(rc),w(J8),f&&t(rIe),f&&t(nr),w(Y8),w(Z8),w(LM),w(e7),w($M),f&&t(tIe),f&&t(nc),w(o7),f&&t(aIe),f&&t(sr),w(r7),w(a7),w(SM),w(n7),w(ZM),f&&t(nIe),f&&t(ic),w(s7),f&&t(sIe),f&&t(lr),w(l7),w(d7),w(oE),w(c7),w(ME),f&&t(lIe),f&&t(fc),w(f7),f&&t(iIe),f&&t(ir),w(m7),w(h7),w(CE),w(p7),w(AE),f&&t(dIe),f&&t(hc),w(u7),f&&t(cIe),f&&t(dr),w(_7),w(v7),w(LE),w(F7),w($E),f&&t(fIe),f&&t(_c),w(T7),f&&t(mIe),f&&t(cr),w(M7),w(C7),w(SE),w(w7),w(aC),f&&t(gIe),f&&t(Fc),w(A7),f&&t(hIe),f&&t(fr),w(y7),w(x7),w(sC),w($7),w(uC),f&&t(pIe),f&&t(Ec),w(k7),f&&t(uIe),f&&t(mr),w(S7),w(B7),w(bC),w(P7),w(kC),f&&t(_Ie),f&&t(Ac),w(I7),f&&t(bIe),f&&t(gr),w(q7),w(j7),w(RC),w(D7),w(XC),f&&t(vIe),f&&t(xc),w(G7),f&&t(FIe),f&&t(hr),w(O7),w(X7),w(QC),w(z7),w(r3),f&&t(TIe),f&&t(Sc),w(Q7),f&&t(MIe),f&&t(pr),w(W7),w(U7),w(a3),w(J7),w(p3),f&&t(EIe),f&&t(Pc),w(Y7),f&&t(CIe),f&&t(ur),w(K7),w(ex),w(_3),w(ox),w(L3),f&&t(wIe),f&&t(Nc),w(rx),f&&t(AIe),f&&t(_r),w(tx),w(nx),w($3),w(sx),w(j3),f&&t(yIe),f&&t(Gc),w(lx),f&&t(LIe),f&&t(br),w(ix),w(cx),w(G3),w(fx),w(J3),f&&t(xIe),f&&t(Xc),w(mx),f&&t($Ie),f&&t(vr),w(gx),w(px),w(K3),w(ux),w(ew),f&&t(kIe),f&&t(Wc),w(_x),f&&t(SIe),f&&t(Fr),w(bx),w(Fx),w(rw),w(Tx),w(nw),f&&t(RIe),f&&t(Jc),w(Ex),f&&t(BIe),f&&t(Tr),w(Cx),w(Ax),w(lw),w(yx),w(dw)}}}const l0t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function i0t(L){return cwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class p0t extends swt{constructor(g){super();lwt(this,g,i0t,s0t,iwt,{})}}export{p0t as default,l0t as metadata};
