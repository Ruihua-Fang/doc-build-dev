import{S as TAt,i as MAt,s as EAt,e as a,k as l,w as f,t as o,M as CAt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as wAt}from"../../chunks/vendor-6b77c823.js";import{T as A$r}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function AAt(If){let ee,co,ce,we,io,he,Me,Xo,qi,qf,fa,Ni,ji,BC,Nf,ke,fo,Di,On,PC,Vn,Xn,$C,Gi,zn,IC,Oi,jf,Da;return{c(){ee=a("p"),co=o("If your "),ce=a("code"),we=o("NewModelConfig"),io=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),BC=o(")."),Nf=l(),ke=a("p"),fo=o("Likewise, if your "),Di=a("code"),On=o("NewModel"),PC=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),$C=o(`, make sure its
`),Gi=a("code"),zn=o("config_class"),IC=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){ee=n(mo,"P",{});var ue=s(ee);co=r(ue,"If your "),ce=n(ue,"CODE",{});var w9=s(ce);we=r(w9,"NewModelConfig"),w9.forEach(t),io=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Vi=s(he);Me=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(ue,`, make sure its
`),qi=n(ue,"CODE",{});var A9=s(qi);qf=r(A9,"model_type"),A9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var y9=s(Ni);ji=r(y9,'"new-model"'),y9.forEach(t),BC=r(ue,")."),ue.forEach(t),Nf=i(mo),ke=n(mo,"P",{});var zo=s(ke);fo=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);On=r(Ga,"NewModel"),Ga.forEach(t),PC=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var L9=s(Vn);Xn=r(L9,"PreTrainedModel"),L9.forEach(t),$C=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Df=s(Gi);zn=r(Df,"config_class"),Df.forEach(t),IC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var x9=s(Oi);jf=r(x9,"NewModelConfig"),x9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ue){b(mo,ee,ue),e(ee,co),e(ee,ce),e(ce,we),e(ee,io),e(ee,he),e(he,Me),e(ee,Xo),e(ee,qi),e(qi,qf),e(ee,fa),e(ee,Ni),e(Ni,ji),e(ee,BC),b(mo,Nf,ue),b(mo,ke,ue),e(ke,fo),e(ke,Di),e(Di,On),e(ke,PC),e(ke,Vn),e(Vn,Xn),e(ke,$C),e(ke,Gi),e(Gi,zn),e(ke,IC),e(ke,Oi),e(Oi,jf),e(ke,Da)},d(mo){mo&&t(ee),mo&&t(Nf),mo&&t(ke)}}}function yAt(If){let ee,co,ce,we,io;return{c(){ee=a("p"),co=o("Passing "),ce=a("code"),we=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(he){ee=n(he,"P",{});var Me=s(ee);co=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);we=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,ee,Me),e(ee,co),e(ee,ce),e(ce,we),e(ee,io)},d(he){he&&t(ee)}}}function LAt(If){let ee,co,ce,we,io;return{c(){ee=a("p"),co=o("Passing "),ce=a("code"),we=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(he){ee=n(he,"P",{});var Me=s(ee);co=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);we=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,ee,Me),e(ee,co),e(ee,ce),e(ce,we),e(ee,io)},d(he){he&&t(ee)}}}function xAt(If){let ee,co,ce,we,io,he,Me,Xo,qi,qf,fa,Ni,ji,BC,Nf,ke,fo,Di,On,PC,Vn,Xn,$C,Gi,zn,IC,Oi,jf,Da,mo,ue,w9,Vi,A9,y9,zo,Ga,L9,Df,x9,cqe,YRe,Xi,Gf,vY,qC,fqe,FY,mqe,KRe,Qn,gqe,TY,hqe,pqe,MY,_qe,uqe,ZRe,NC,eBe,k9,bqe,oBe,Of,rBe,zi,Vf,EY,jC,vqe,CY,Fqe,tBe,Qo,DC,Tqe,GC,Mqe,S9,Eqe,Cqe,wqe,OC,Aqe,wY,yqe,Lqe,xqe,go,VC,kqe,AY,Sqe,Rqe,Qi,Bqe,yY,Pqe,$qe,LY,Iqe,qqe,Nqe,v,Xf,xY,jqe,Dqe,R9,Gqe,Oqe,Vqe,zf,kY,Xqe,zqe,B9,Qqe,Wqe,Hqe,Qf,SY,Uqe,Jqe,P9,Yqe,Kqe,Zqe,Wf,RY,eNe,oNe,$9,rNe,tNe,aNe,Hf,BY,nNe,sNe,I9,lNe,iNe,dNe,Uf,PY,cNe,fNe,q9,mNe,gNe,hNe,Jf,$Y,pNe,_Ne,N9,uNe,bNe,vNe,Yf,IY,FNe,TNe,j9,MNe,ENe,CNe,Kf,qY,wNe,ANe,D9,yNe,LNe,xNe,Zf,NY,kNe,SNe,G9,RNe,BNe,PNe,em,jY,$Ne,INe,O9,qNe,NNe,jNe,om,DY,DNe,GNe,V9,ONe,VNe,XNe,rm,GY,zNe,QNe,X9,WNe,HNe,UNe,tm,OY,JNe,YNe,z9,KNe,ZNe,eje,am,VY,oje,rje,Q9,tje,aje,nje,nm,XY,sje,lje,W9,ije,dje,cje,sm,zY,fje,mje,H9,gje,hje,pje,lm,QY,_je,uje,U9,bje,vje,Fje,im,WY,Tje,Mje,J9,Eje,Cje,wje,dm,HY,Aje,yje,Y9,Lje,xje,kje,cm,UY,Sje,Rje,K9,Bje,Pje,$je,fm,JY,Ije,qje,Z9,Nje,jje,Dje,mm,YY,Gje,Oje,ex,Vje,Xje,zje,gm,KY,Qje,Wje,ox,Hje,Uje,Jje,hm,ZY,Yje,Kje,rx,Zje,eDe,oDe,pm,eK,rDe,tDe,tx,aDe,nDe,sDe,_m,oK,lDe,iDe,ax,dDe,cDe,fDe,um,rK,mDe,gDe,nx,hDe,pDe,_De,bm,tK,uDe,bDe,sx,vDe,FDe,TDe,vm,aK,MDe,EDe,lx,CDe,wDe,ADe,Fm,nK,yDe,LDe,ix,xDe,kDe,SDe,Tm,sK,RDe,BDe,dx,PDe,$De,IDe,Mm,lK,qDe,NDe,cx,jDe,DDe,GDe,Em,iK,ODe,VDe,fx,XDe,zDe,QDe,Cm,dK,WDe,HDe,mx,UDe,JDe,YDe,wm,cK,KDe,ZDe,gx,eGe,oGe,rGe,Am,fK,tGe,aGe,hx,nGe,sGe,lGe,ym,mK,iGe,dGe,px,cGe,fGe,mGe,Lm,gK,gGe,hGe,_x,pGe,_Ge,uGe,xm,hK,bGe,vGe,ux,FGe,TGe,MGe,km,pK,EGe,CGe,bx,wGe,AGe,yGe,Sm,_K,LGe,xGe,vx,kGe,SGe,RGe,Rm,uK,BGe,PGe,Fx,$Ge,IGe,qGe,Bm,bK,NGe,jGe,Tx,DGe,GGe,OGe,Pm,vK,VGe,XGe,Mx,zGe,QGe,WGe,$m,FK,HGe,UGe,Ex,JGe,YGe,KGe,Im,TK,ZGe,eOe,Cx,oOe,rOe,tOe,qm,MK,aOe,nOe,wx,sOe,lOe,iOe,Nm,EK,dOe,cOe,Ax,fOe,mOe,gOe,jm,CK,hOe,pOe,yx,_Oe,uOe,bOe,Dm,wK,vOe,FOe,Lx,TOe,MOe,EOe,Gm,AK,COe,wOe,xx,AOe,yOe,LOe,Om,yK,xOe,kOe,kx,SOe,ROe,BOe,Vm,LK,POe,$Oe,Sx,IOe,qOe,NOe,Xm,xK,jOe,DOe,Rx,GOe,OOe,VOe,zm,kK,XOe,zOe,Bx,QOe,WOe,HOe,Qm,SK,UOe,JOe,Px,YOe,KOe,ZOe,Wm,RK,eVe,oVe,$x,rVe,tVe,aVe,Hm,BK,nVe,sVe,Ix,lVe,iVe,dVe,Um,PK,cVe,fVe,qx,mVe,gVe,hVe,Jm,$K,pVe,_Ve,Nx,uVe,bVe,vVe,Ym,IK,FVe,TVe,jx,MVe,EVe,CVe,Km,qK,wVe,AVe,Dx,yVe,LVe,xVe,Zm,NK,kVe,SVe,Gx,RVe,BVe,PVe,eg,jK,$Ve,IVe,Ox,qVe,NVe,jVe,og,DK,DVe,GVe,Vx,OVe,VVe,XVe,rg,GK,zVe,QVe,Xx,WVe,HVe,UVe,tg,OK,JVe,YVe,zx,KVe,ZVe,eXe,ag,VK,oXe,rXe,Qx,tXe,aXe,nXe,ng,XK,sXe,lXe,Wx,iXe,dXe,cXe,sg,zK,fXe,mXe,Hx,gXe,hXe,pXe,lg,QK,_Xe,uXe,Ux,bXe,vXe,FXe,ig,WK,TXe,MXe,Jx,EXe,CXe,wXe,dg,HK,AXe,yXe,Yx,LXe,xXe,kXe,cg,UK,SXe,RXe,Kx,BXe,PXe,$Xe,fg,JK,IXe,qXe,Zx,NXe,jXe,DXe,mg,YK,GXe,OXe,ek,VXe,XXe,zXe,gg,KK,QXe,WXe,ok,HXe,UXe,JXe,hg,ZK,YXe,KXe,rk,ZXe,eze,oze,pg,eZ,rze,tze,tk,aze,nze,sze,_g,oZ,lze,ize,ak,dze,cze,fze,ug,rZ,mze,gze,nk,hze,pze,_ze,bg,tZ,uze,bze,sk,vze,Fze,Tze,vg,aZ,Mze,Eze,lk,Cze,wze,Aze,Fg,nZ,yze,Lze,ik,xze,kze,Sze,Tg,sZ,Rze,Bze,dk,Pze,$ze,Ize,Mg,lZ,qze,Nze,ck,jze,Dze,Gze,Eg,iZ,Oze,Vze,fk,Xze,zze,Qze,Cg,dZ,Wze,Hze,mk,Uze,Jze,Yze,wg,cZ,Kze,Zze,gk,eQe,oQe,rQe,Ag,fZ,tQe,aQe,hk,nQe,sQe,lQe,yg,mZ,iQe,dQe,pk,cQe,fQe,mQe,Lg,gZ,gQe,hQe,_k,pQe,_Qe,uQe,xg,hZ,bQe,vQe,uk,FQe,TQe,MQe,kg,pZ,EQe,CQe,bk,wQe,AQe,yQe,Sg,_Z,LQe,xQe,vk,kQe,SQe,RQe,Rg,uZ,BQe,PQe,Fk,$Qe,IQe,qQe,Bg,bZ,NQe,jQe,Tk,DQe,GQe,OQe,Pg,vZ,VQe,XQe,Mk,zQe,QQe,WQe,$g,FZ,HQe,UQe,Ek,JQe,YQe,KQe,Ig,TZ,ZQe,eWe,Ck,oWe,rWe,tWe,qg,MZ,aWe,nWe,wk,sWe,lWe,iWe,Ng,EZ,dWe,cWe,Ak,fWe,mWe,gWe,CZ,hWe,pWe,XC,_We,jg,zC,uWe,wZ,bWe,aBe,Wi,Dg,AZ,QC,vWe,yZ,FWe,nBe,Wo,WC,TWe,HC,MWe,yk,EWe,CWe,wWe,UC,AWe,LZ,yWe,LWe,xWe,ho,JC,kWe,xZ,SWe,RWe,Oa,BWe,kZ,PWe,$We,SZ,IWe,qWe,RZ,NWe,jWe,DWe,E,Wn,BZ,GWe,OWe,Lk,VWe,XWe,xk,zWe,QWe,WWe,Hn,PZ,HWe,UWe,kk,JWe,YWe,Sk,KWe,ZWe,eHe,Un,$Z,oHe,rHe,Rk,tHe,aHe,Bk,nHe,sHe,lHe,Gg,IZ,iHe,dHe,Pk,cHe,fHe,mHe,Jn,qZ,gHe,hHe,$k,pHe,_He,Ik,uHe,bHe,vHe,Og,NZ,FHe,THe,qk,MHe,EHe,CHe,Vg,jZ,wHe,AHe,Nk,yHe,LHe,xHe,Xg,DZ,kHe,SHe,jk,RHe,BHe,PHe,Yn,GZ,$He,IHe,Dk,qHe,NHe,Gk,jHe,DHe,GHe,Kn,OZ,OHe,VHe,Ok,XHe,zHe,Vk,QHe,WHe,HHe,Zn,VZ,UHe,JHe,Xk,YHe,KHe,zk,ZHe,eUe,oUe,zg,XZ,rUe,tUe,Qk,aUe,nUe,sUe,Qg,zZ,lUe,iUe,Wk,dUe,cUe,fUe,es,QZ,mUe,gUe,Hk,hUe,pUe,Uk,_Ue,uUe,bUe,Wg,WZ,vUe,FUe,Jk,TUe,MUe,EUe,os,HZ,CUe,wUe,Yk,AUe,yUe,Kk,LUe,xUe,kUe,rs,UZ,SUe,RUe,Zk,BUe,PUe,eS,$Ue,IUe,qUe,ts,JZ,NUe,jUe,oS,DUe,GUe,YZ,OUe,VUe,XUe,Hg,KZ,zUe,QUe,rS,WUe,HUe,UUe,as,ZZ,JUe,YUe,tS,KUe,ZUe,aS,eJe,oJe,rJe,Ug,eee,tJe,aJe,nS,nJe,sJe,lJe,ns,oee,iJe,dJe,sS,cJe,fJe,lS,mJe,gJe,hJe,ss,ree,pJe,_Je,iS,uJe,bJe,dS,vJe,FJe,TJe,ls,tee,MJe,EJe,cS,CJe,wJe,fS,AJe,yJe,LJe,Jg,aee,xJe,kJe,mS,SJe,RJe,BJe,is,nee,PJe,$Je,gS,IJe,qJe,hS,NJe,jJe,DJe,Yg,see,GJe,OJe,pS,VJe,XJe,zJe,ds,lee,QJe,WJe,_S,HJe,UJe,uS,JJe,YJe,KJe,cs,iee,ZJe,eYe,bS,oYe,rYe,vS,tYe,aYe,nYe,fs,dee,sYe,lYe,FS,iYe,dYe,TS,cYe,fYe,mYe,ms,cee,gYe,hYe,MS,pYe,_Ye,ES,uYe,bYe,vYe,Kg,fee,FYe,TYe,CS,MYe,EYe,CYe,gs,mee,wYe,AYe,wS,yYe,LYe,AS,xYe,kYe,SYe,hs,gee,RYe,BYe,yS,PYe,$Ye,LS,IYe,qYe,NYe,ps,hee,jYe,DYe,xS,GYe,OYe,kS,VYe,XYe,zYe,_s,pee,QYe,WYe,SS,HYe,UYe,RS,JYe,YYe,KYe,us,_ee,ZYe,eKe,BS,oKe,rKe,PS,tKe,aKe,nKe,bs,uee,sKe,lKe,$S,iKe,dKe,IS,cKe,fKe,mKe,Zg,bee,gKe,hKe,qS,pKe,_Ke,uKe,vs,vee,bKe,vKe,NS,FKe,TKe,jS,MKe,EKe,CKe,eh,Fee,wKe,AKe,DS,yKe,LKe,xKe,oh,Tee,kKe,SKe,GS,RKe,BKe,PKe,Fs,Mee,$Ke,IKe,OS,qKe,NKe,VS,jKe,DKe,GKe,Ts,Eee,OKe,VKe,XS,XKe,zKe,zS,QKe,WKe,HKe,rh,Cee,UKe,JKe,QS,YKe,KKe,ZKe,Ms,wee,eZe,oZe,WS,rZe,tZe,HS,aZe,nZe,sZe,Es,Aee,lZe,iZe,US,dZe,cZe,JS,fZe,mZe,gZe,Cs,yee,hZe,pZe,YS,_Ze,uZe,KS,bZe,vZe,FZe,ws,Lee,TZe,MZe,ZS,EZe,CZe,eR,wZe,AZe,yZe,As,xee,LZe,xZe,oR,kZe,SZe,rR,RZe,BZe,PZe,th,kee,$Ze,IZe,tR,qZe,NZe,jZe,ah,See,DZe,GZe,aR,OZe,VZe,XZe,nh,Ree,zZe,QZe,nR,WZe,HZe,UZe,sh,Bee,JZe,YZe,sR,KZe,ZZe,eeo,ys,Pee,oeo,reo,lR,teo,aeo,iR,neo,seo,leo,lh,$ee,ieo,deo,dR,ceo,feo,meo,Ls,Iee,geo,heo,cR,peo,_eo,fR,ueo,beo,veo,xs,qee,Feo,Teo,mR,Meo,Eeo,gR,Ceo,weo,Aeo,ks,Nee,yeo,Leo,hR,xeo,keo,pR,Seo,Reo,Beo,Ss,jee,Peo,$eo,_R,Ieo,qeo,uR,Neo,jeo,Deo,Rs,Dee,Geo,Oeo,bR,Veo,Xeo,vR,zeo,Qeo,Weo,Bs,Gee,Heo,Ueo,FR,Jeo,Yeo,TR,Keo,Zeo,eoo,ih,Oee,ooo,roo,MR,too,aoo,noo,dh,Vee,soo,loo,ER,ioo,doo,coo,Ps,Xee,foo,moo,CR,goo,hoo,wR,poo,_oo,uoo,$s,zee,boo,voo,AR,Foo,Too,yR,Moo,Eoo,Coo,Is,Qee,woo,Aoo,LR,yoo,Loo,xR,xoo,koo,Soo,ch,Wee,Roo,Boo,kR,Poo,$oo,Ioo,fh,Hee,qoo,Noo,SR,joo,Doo,Goo,mh,Uee,Ooo,Voo,RR,Xoo,zoo,Qoo,gh,Jee,Woo,Hoo,BR,Uoo,Joo,Yoo,hh,Yee,Koo,Zoo,PR,ero,oro,rro,qs,Kee,tro,aro,$R,nro,sro,IR,lro,iro,dro,ph,Zee,cro,fro,qR,mro,gro,hro,_h,eoe,pro,_ro,NR,uro,bro,vro,Ns,ooe,Fro,Tro,jR,Mro,Ero,DR,Cro,wro,Aro,js,roe,yro,Lro,GR,xro,kro,OR,Sro,Rro,Bro,toe,Pro,$ro,YC,Iro,uh,KC,qro,aoe,Nro,sBe,Hi,bh,noe,ZC,jro,soe,Dro,lBe,Ho,ew,Gro,ow,Oro,VR,Vro,Xro,zro,rw,Qro,loe,Wro,Hro,Uro,$e,tw,Jro,ioe,Yro,Kro,Va,Zro,doe,eto,oto,coe,rto,tto,foe,ato,nto,sto,J,vh,moe,lto,ito,XR,dto,cto,fto,Fh,goe,mto,gto,zR,hto,pto,_to,Th,hoe,uto,bto,QR,vto,Fto,Tto,Mh,poe,Mto,Eto,WR,Cto,wto,Ato,Eh,_oe,yto,Lto,HR,xto,kto,Sto,Ch,uoe,Rto,Bto,UR,Pto,$to,Ito,wh,boe,qto,Nto,JR,jto,Dto,Gto,Ah,voe,Oto,Vto,YR,Xto,zto,Qto,yh,Foe,Wto,Hto,KR,Uto,Jto,Yto,Lh,Toe,Kto,Zto,ZR,eao,oao,rao,xh,Moe,tao,aao,eB,nao,sao,lao,kh,Eoe,iao,dao,oB,cao,fao,mao,Sh,Coe,gao,hao,rB,pao,_ao,uao,Rh,woe,bao,vao,tB,Fao,Tao,Mao,Bh,Aoe,Eao,Cao,aB,wao,Aao,yao,Ph,yoe,Lao,xao,nB,kao,Sao,Rao,$h,Loe,Bao,Pao,sB,$ao,Iao,qao,Ih,xoe,Nao,jao,lB,Dao,Gao,Oao,qh,koe,Vao,Xao,iB,zao,Qao,Wao,Nh,Soe,Hao,Uao,dB,Jao,Yao,Kao,jh,Zao,Roe,eno,ono,aw,rno,Dh,nw,tno,Boe,ano,iBe,Ui,Gh,Poe,sw,nno,$oe,sno,dBe,Uo,lw,lno,iw,ino,cB,dno,cno,fno,dw,mno,Ioe,gno,hno,pno,Ie,cw,_no,qoe,uno,bno,Ji,vno,Noe,Fno,Tno,joe,Mno,Eno,Cno,Ee,Oh,Doe,wno,Ano,fB,yno,Lno,xno,Vh,Goe,kno,Sno,mB,Rno,Bno,Pno,Xh,Ooe,$no,Ino,gB,qno,Nno,jno,zh,Voe,Dno,Gno,hB,Ono,Vno,Xno,Qh,Xoe,zno,Qno,pB,Wno,Hno,Uno,Wh,zoe,Jno,Yno,_B,Kno,Zno,eso,Hh,Qoe,oso,rso,uB,tso,aso,nso,Uh,Woe,sso,lso,bB,iso,dso,cso,Jh,Hoe,fso,mso,vB,gso,hso,pso,Yh,_so,Uoe,uso,bso,fw,vso,Kh,mw,Fso,Joe,Tso,cBe,Yi,Zh,Yoe,gw,Mso,Koe,Eso,fBe,Jo,hw,Cso,Ki,wso,FB,Aso,yso,TB,Lso,xso,kso,pw,Sso,Zoe,Rso,Bso,Pso,Xr,_w,$so,ere,Iso,qso,Zi,Nso,ore,jso,Dso,MB,Gso,Oso,Vso,rre,Xso,zso,uw,Qso,qe,bw,Wso,tre,Hso,Uso,Xa,Jso,are,Yso,Kso,nre,Zso,elo,sre,olo,rlo,tlo,T,ep,lre,alo,nlo,EB,slo,llo,ilo,op,ire,dlo,clo,CB,flo,mlo,glo,rp,dre,hlo,plo,wB,_lo,ulo,blo,tp,cre,vlo,Flo,AB,Tlo,Mlo,Elo,ap,fre,Clo,wlo,yB,Alo,ylo,Llo,np,mre,xlo,klo,LB,Slo,Rlo,Blo,sp,gre,Plo,$lo,xB,Ilo,qlo,Nlo,lp,hre,jlo,Dlo,kB,Glo,Olo,Vlo,ip,pre,Xlo,zlo,SB,Qlo,Wlo,Hlo,dp,_re,Ulo,Jlo,RB,Ylo,Klo,Zlo,cp,ure,eio,oio,BB,rio,tio,aio,fp,bre,nio,sio,PB,lio,iio,dio,mp,vre,cio,fio,$B,mio,gio,hio,gp,Fre,pio,_io,IB,uio,bio,vio,hp,Tre,Fio,Tio,qB,Mio,Eio,Cio,pp,Mre,wio,Aio,NB,yio,Lio,xio,_p,Ere,kio,Sio,jB,Rio,Bio,Pio,up,Cre,$io,Iio,DB,qio,Nio,jio,bp,wre,Dio,Gio,GB,Oio,Vio,Xio,vp,Are,zio,Qio,OB,Wio,Hio,Uio,Fp,yre,Jio,Yio,VB,Kio,Zio,edo,Tp,Lre,odo,rdo,XB,tdo,ado,ndo,Mp,xre,sdo,ldo,zB,ido,ddo,cdo,Ep,kre,fdo,mdo,QB,gdo,hdo,pdo,Cp,Sre,_do,udo,WB,bdo,vdo,Fdo,wp,Rre,Tdo,Mdo,HB,Edo,Cdo,wdo,Ap,Bre,Ado,ydo,UB,Ldo,xdo,kdo,yp,Pre,Sdo,Rdo,JB,Bdo,Pdo,$do,Lp,$re,Ido,qdo,YB,Ndo,jdo,Ddo,xp,Ire,Gdo,Odo,KB,Vdo,Xdo,zdo,kp,qre,Qdo,Wdo,ZB,Hdo,Udo,Jdo,Ds,Nre,Ydo,Kdo,eP,Zdo,eco,oP,oco,rco,tco,Sp,jre,aco,nco,rP,sco,lco,ico,Rp,Dre,dco,cco,tP,fco,mco,gco,Bp,Gre,hco,pco,aP,_co,uco,bco,Pp,Ore,vco,Fco,nP,Tco,Mco,Eco,$p,Vre,Cco,wco,sP,Aco,yco,Lco,Ip,Xre,xco,kco,lP,Sco,Rco,Bco,qp,zre,Pco,$co,iP,Ico,qco,Nco,Np,Qre,jco,Dco,dP,Gco,Oco,Vco,jp,Wre,Xco,zco,cP,Qco,Wco,Hco,Dp,Hre,Uco,Jco,fP,Yco,Kco,Zco,Gp,Ure,efo,ofo,mP,rfo,tfo,afo,Op,Jre,nfo,sfo,gP,lfo,ifo,dfo,Vp,Yre,cfo,ffo,hP,mfo,gfo,hfo,Xp,Kre,pfo,_fo,pP,ufo,bfo,vfo,zp,Zre,Ffo,Tfo,_P,Mfo,Efo,Cfo,Qp,ete,wfo,Afo,uP,yfo,Lfo,xfo,Wp,ote,kfo,Sfo,bP,Rfo,Bfo,Pfo,Hp,rte,$fo,Ifo,vP,qfo,Nfo,jfo,Up,tte,Dfo,Gfo,FP,Ofo,Vfo,Xfo,Jp,ate,zfo,Qfo,TP,Wfo,Hfo,Ufo,Yp,nte,Jfo,Yfo,MP,Kfo,Zfo,emo,Kp,ste,omo,rmo,EP,tmo,amo,nmo,Zp,lte,smo,lmo,CP,imo,dmo,cmo,e_,ite,fmo,mmo,wP,gmo,hmo,pmo,o_,dte,_mo,umo,AP,bmo,vmo,Fmo,r_,cte,Tmo,Mmo,yP,Emo,Cmo,wmo,t_,fte,Amo,ymo,LP,Lmo,xmo,kmo,a_,mte,Smo,Rmo,xP,Bmo,Pmo,$mo,n_,gte,Imo,qmo,kP,Nmo,jmo,Dmo,s_,hte,Gmo,Omo,SP,Vmo,Xmo,zmo,l_,pte,Qmo,Wmo,RP,Hmo,Umo,Jmo,i_,_te,Ymo,Kmo,BP,Zmo,ego,ogo,d_,ute,rgo,tgo,PP,ago,ngo,sgo,c_,bte,lgo,igo,$P,dgo,cgo,fgo,f_,vte,mgo,ggo,IP,hgo,pgo,_go,m_,Fte,ugo,bgo,qP,vgo,Fgo,Tgo,g_,Tte,Mgo,Ego,NP,Cgo,wgo,Ago,h_,Mte,ygo,Lgo,jP,xgo,kgo,Sgo,p_,Ete,Rgo,Bgo,DP,Pgo,$go,Igo,__,Cte,qgo,Ngo,GP,jgo,Dgo,Ggo,u_,wte,Ogo,Vgo,OP,Xgo,zgo,Qgo,b_,Ate,Wgo,Hgo,VP,Ugo,Jgo,Ygo,v_,yte,Kgo,Zgo,XP,eho,oho,rho,F_,Lte,tho,aho,zP,nho,sho,lho,T_,xte,iho,dho,QP,cho,fho,mho,M_,kte,gho,hho,WP,pho,_ho,uho,E_,Ste,bho,vho,HP,Fho,Tho,Mho,C_,Rte,Eho,Cho,UP,who,Aho,yho,w_,Bte,Lho,xho,JP,kho,Sho,Rho,A_,Pte,Bho,Pho,YP,$ho,Iho,qho,y_,$te,Nho,jho,KP,Dho,Gho,Oho,L_,Ite,Vho,Xho,ZP,zho,Qho,Who,x_,qte,Hho,Uho,e$,Jho,Yho,Kho,k_,Nte,Zho,epo,o$,opo,rpo,tpo,S_,jte,apo,npo,r$,spo,lpo,ipo,R_,Dte,dpo,cpo,t$,fpo,mpo,gpo,B_,Gte,hpo,ppo,a$,_po,upo,bpo,P_,Ote,vpo,Fpo,n$,Tpo,Mpo,Epo,$_,Vte,Cpo,wpo,s$,Apo,ypo,Lpo,I_,Xte,xpo,kpo,l$,Spo,Rpo,Bpo,q_,zte,Ppo,$po,i$,Ipo,qpo,Npo,N_,Qte,jpo,Dpo,d$,Gpo,Opo,Vpo,j_,Wte,Xpo,zpo,c$,Qpo,Wpo,Hpo,D_,Upo,Hte,Jpo,Ypo,Ute,Kpo,Zpo,Jte,e_o,o_o,vw,mBe,ed,G_,Yte,Fw,r_o,Kte,t_o,gBe,Yo,Tw,a_o,od,n_o,f$,s_o,l_o,m$,i_o,d_o,c_o,Mw,f_o,Zte,m_o,g_o,h_o,zr,Ew,p_o,eae,__o,u_o,rd,b_o,oae,v_o,F_o,g$,T_o,M_o,E_o,rae,C_o,w_o,Cw,A_o,Ne,ww,y_o,tae,L_o,x_o,za,k_o,aae,S_o,R_o,nae,B_o,P_o,sae,$_o,I_o,q_o,S,O_,lae,N_o,j_o,h$,D_o,G_o,O_o,V_,iae,V_o,X_o,p$,z_o,Q_o,W_o,X_,dae,H_o,U_o,_$,J_o,Y_o,K_o,z_,cae,Z_o,euo,u$,ouo,ruo,tuo,Q_,fae,auo,nuo,b$,suo,luo,iuo,W_,mae,duo,cuo,v$,fuo,muo,guo,H_,gae,huo,puo,F$,_uo,uuo,buo,U_,hae,vuo,Fuo,T$,Tuo,Muo,Euo,J_,pae,Cuo,wuo,M$,Auo,yuo,Luo,Y_,_ae,xuo,kuo,E$,Suo,Ruo,Buo,K_,uae,Puo,$uo,C$,Iuo,quo,Nuo,Z_,bae,juo,Duo,w$,Guo,Ouo,Vuo,eu,vae,Xuo,zuo,A$,Quo,Wuo,Huo,ou,Fae,Uuo,Juo,y$,Yuo,Kuo,Zuo,ru,Tae,e6o,o6o,L$,r6o,t6o,a6o,tu,Mae,n6o,s6o,x$,l6o,i6o,d6o,au,Eae,c6o,f6o,k$,m6o,g6o,h6o,nu,Cae,p6o,_6o,S$,u6o,b6o,v6o,su,wae,F6o,T6o,R$,M6o,E6o,C6o,lu,Aae,w6o,A6o,B$,y6o,L6o,x6o,iu,yae,k6o,S6o,P$,R6o,B6o,P6o,du,Lae,$6o,I6o,$$,q6o,N6o,j6o,cu,xae,D6o,G6o,I$,O6o,V6o,X6o,fu,kae,z6o,Q6o,q$,W6o,H6o,U6o,mu,Sae,J6o,Y6o,N$,K6o,Z6o,e1o,gu,Rae,o1o,r1o,j$,t1o,a1o,n1o,hu,Bae,s1o,l1o,D$,i1o,d1o,c1o,pu,Pae,f1o,m1o,G$,g1o,h1o,p1o,_u,$ae,_1o,u1o,O$,b1o,v1o,F1o,uu,Iae,T1o,M1o,V$,E1o,C1o,w1o,bu,qae,A1o,y1o,X$,L1o,x1o,k1o,vu,Nae,S1o,R1o,z$,B1o,P1o,$1o,Fu,jae,I1o,q1o,Q$,N1o,j1o,D1o,Tu,Dae,G1o,O1o,W$,V1o,X1o,z1o,Mu,Gae,Q1o,W1o,H$,H1o,U1o,J1o,Eu,Oae,Y1o,K1o,U$,Z1o,e4o,o4o,Cu,Vae,r4o,t4o,J$,a4o,n4o,s4o,wu,Xae,l4o,i4o,Y$,d4o,c4o,f4o,Au,zae,m4o,g4o,K$,h4o,p4o,_4o,yu,Qae,u4o,b4o,Z$,v4o,F4o,T4o,Lu,M4o,Wae,E4o,C4o,Hae,w4o,A4o,Uae,y4o,L4o,Aw,hBe,td,xu,Jae,yw,x4o,Yae,k4o,pBe,Ko,Lw,S4o,ad,R4o,eI,B4o,P4o,oI,$4o,I4o,q4o,xw,N4o,Kae,j4o,D4o,G4o,Qr,kw,O4o,Zae,V4o,X4o,nd,z4o,ene,Q4o,W4o,rI,H4o,U4o,J4o,one,Y4o,K4o,Sw,Z4o,je,Rw,ebo,rne,obo,rbo,Qa,tbo,tne,abo,nbo,ane,sbo,lbo,nne,ibo,dbo,cbo,$,ku,sne,fbo,mbo,tI,gbo,hbo,pbo,Su,lne,_bo,ubo,aI,bbo,vbo,Fbo,Ru,ine,Tbo,Mbo,nI,Ebo,Cbo,wbo,Bu,dne,Abo,ybo,sI,Lbo,xbo,kbo,Pu,cne,Sbo,Rbo,lI,Bbo,Pbo,$bo,$u,fne,Ibo,qbo,iI,Nbo,jbo,Dbo,Iu,mne,Gbo,Obo,dI,Vbo,Xbo,zbo,qu,gne,Qbo,Wbo,cI,Hbo,Ubo,Jbo,Nu,hne,Ybo,Kbo,fI,Zbo,e2o,o2o,ju,pne,r2o,t2o,mI,a2o,n2o,s2o,Du,_ne,l2o,i2o,gI,d2o,c2o,f2o,Gu,une,m2o,g2o,hI,h2o,p2o,_2o,Ou,bne,u2o,b2o,pI,v2o,F2o,T2o,Vu,vne,M2o,E2o,_I,C2o,w2o,A2o,Xu,Fne,y2o,L2o,uI,x2o,k2o,S2o,zu,Tne,R2o,B2o,bI,P2o,$2o,I2o,Qu,Mne,q2o,N2o,vI,j2o,D2o,G2o,Wu,Ene,O2o,V2o,FI,X2o,z2o,Q2o,Hu,Cne,W2o,H2o,TI,U2o,J2o,Y2o,Uu,wne,K2o,Z2o,MI,e5o,o5o,r5o,Ju,Ane,t5o,a5o,EI,n5o,s5o,l5o,Yu,yne,i5o,d5o,CI,c5o,f5o,m5o,Ku,Lne,g5o,h5o,wI,p5o,_5o,u5o,Zu,xne,b5o,v5o,AI,F5o,T5o,M5o,e6,kne,E5o,C5o,yI,w5o,A5o,y5o,o6,Sne,L5o,x5o,LI,k5o,S5o,R5o,r6,Rne,B5o,P5o,xI,$5o,I5o,q5o,t6,Bne,N5o,j5o,kI,D5o,G5o,O5o,a6,Pne,V5o,X5o,SI,z5o,Q5o,W5o,n6,$ne,H5o,U5o,RI,J5o,Y5o,K5o,s6,Ine,Z5o,evo,BI,ovo,rvo,tvo,l6,qne,avo,nvo,PI,svo,lvo,ivo,i6,Nne,dvo,cvo,$I,fvo,mvo,gvo,d6,jne,hvo,pvo,II,_vo,uvo,bvo,c6,Dne,vvo,Fvo,qI,Tvo,Mvo,Evo,f6,Cvo,Gne,wvo,Avo,One,yvo,Lvo,Vne,xvo,kvo,Bw,_Be,sd,m6,Xne,Pw,Svo,zne,Rvo,uBe,Zo,$w,Bvo,ld,Pvo,NI,$vo,Ivo,jI,qvo,Nvo,jvo,Iw,Dvo,Qne,Gvo,Ovo,Vvo,Wr,qw,Xvo,Wne,zvo,Qvo,id,Wvo,Hne,Hvo,Uvo,DI,Jvo,Yvo,Kvo,Une,Zvo,eFo,Nw,oFo,De,jw,rFo,Jne,tFo,aFo,Wa,nFo,Yne,sFo,lFo,Kne,iFo,dFo,Zne,cFo,fFo,mFo,I,g6,ese,gFo,hFo,GI,pFo,_Fo,uFo,h6,ose,bFo,vFo,OI,FFo,TFo,MFo,p6,rse,EFo,CFo,VI,wFo,AFo,yFo,_6,tse,LFo,xFo,XI,kFo,SFo,RFo,u6,ase,BFo,PFo,zI,$Fo,IFo,qFo,b6,nse,NFo,jFo,QI,DFo,GFo,OFo,v6,sse,VFo,XFo,WI,zFo,QFo,WFo,F6,lse,HFo,UFo,HI,JFo,YFo,KFo,T6,ise,ZFo,eTo,UI,oTo,rTo,tTo,M6,dse,aTo,nTo,JI,sTo,lTo,iTo,E6,cse,dTo,cTo,YI,fTo,mTo,gTo,C6,fse,hTo,pTo,KI,_To,uTo,bTo,w6,mse,vTo,FTo,ZI,TTo,MTo,ETo,A6,gse,CTo,wTo,eq,ATo,yTo,LTo,y6,hse,xTo,kTo,oq,STo,RTo,BTo,L6,pse,PTo,$To,rq,ITo,qTo,NTo,x6,_se,jTo,DTo,tq,GTo,OTo,VTo,k6,use,XTo,zTo,aq,QTo,WTo,HTo,S6,bse,UTo,JTo,nq,YTo,KTo,ZTo,R6,vse,eMo,oMo,sq,rMo,tMo,aMo,B6,Fse,nMo,sMo,lq,lMo,iMo,dMo,P6,Tse,cMo,fMo,iq,mMo,gMo,hMo,$6,Mse,pMo,_Mo,dq,uMo,bMo,vMo,I6,Ese,FMo,TMo,cq,MMo,EMo,CMo,q6,Cse,wMo,AMo,fq,yMo,LMo,xMo,N6,wse,kMo,SMo,mq,RMo,BMo,PMo,j6,Ase,$Mo,IMo,gq,qMo,NMo,jMo,D6,yse,DMo,GMo,hq,OMo,VMo,XMo,G6,Lse,zMo,QMo,pq,WMo,HMo,UMo,O6,xse,JMo,YMo,_q,KMo,ZMo,eEo,V6,kse,oEo,rEo,Sse,tEo,aEo,nEo,X6,Rse,sEo,lEo,uq,iEo,dEo,cEo,z6,Bse,fEo,mEo,bq,gEo,hEo,pEo,Q6,Pse,_Eo,uEo,vq,bEo,vEo,FEo,W6,$se,TEo,MEo,Fq,EEo,CEo,wEo,H6,AEo,Ise,yEo,LEo,qse,xEo,kEo,Nse,SEo,REo,Dw,bBe,dd,U6,jse,Gw,BEo,Dse,PEo,vBe,er,Ow,$Eo,cd,IEo,Tq,qEo,NEo,Mq,jEo,DEo,GEo,Vw,OEo,Gse,VEo,XEo,zEo,Hr,Xw,QEo,Ose,WEo,HEo,fd,UEo,Vse,JEo,YEo,Eq,KEo,ZEo,e3o,Xse,o3o,r3o,zw,t3o,Ge,Qw,a3o,zse,n3o,s3o,Ha,l3o,Qse,i3o,d3o,Wse,c3o,f3o,Hse,m3o,g3o,h3o,ne,J6,Use,p3o,_3o,Cq,u3o,b3o,v3o,Y6,Jse,F3o,T3o,wq,M3o,E3o,C3o,K6,Yse,w3o,A3o,Aq,y3o,L3o,x3o,Z6,Kse,k3o,S3o,yq,R3o,B3o,P3o,e1,Zse,$3o,I3o,Lq,q3o,N3o,j3o,o1,ele,D3o,G3o,xq,O3o,V3o,X3o,r1,ole,z3o,Q3o,kq,W3o,H3o,U3o,t1,rle,J3o,Y3o,Sq,K3o,Z3o,eCo,a1,tle,oCo,rCo,Rq,tCo,aCo,nCo,n1,ale,sCo,lCo,Bq,iCo,dCo,cCo,s1,nle,fCo,mCo,Pq,gCo,hCo,pCo,l1,sle,_Co,uCo,$q,bCo,vCo,FCo,i1,lle,TCo,MCo,Iq,ECo,CCo,wCo,d1,ile,ACo,yCo,qq,LCo,xCo,kCo,c1,dle,SCo,RCo,Nq,BCo,PCo,$Co,f1,cle,ICo,qCo,jq,NCo,jCo,DCo,m1,fle,GCo,OCo,Dq,VCo,XCo,zCo,g1,QCo,mle,WCo,HCo,gle,UCo,JCo,hle,YCo,KCo,Ww,FBe,md,h1,ple,Hw,ZCo,_le,ewo,TBe,or,Uw,owo,gd,rwo,Gq,two,awo,Oq,nwo,swo,lwo,Jw,iwo,ule,dwo,cwo,fwo,Ur,Yw,mwo,ble,gwo,hwo,hd,pwo,vle,_wo,uwo,Vq,bwo,vwo,Fwo,Fle,Two,Mwo,Kw,Ewo,Oe,Zw,Cwo,Tle,wwo,Awo,Ua,ywo,Mle,Lwo,xwo,Ele,kwo,Swo,Cle,Rwo,Bwo,Pwo,y,p1,wle,$wo,Iwo,Xq,qwo,Nwo,jwo,_1,Ale,Dwo,Gwo,zq,Owo,Vwo,Xwo,u1,yle,zwo,Qwo,Qq,Wwo,Hwo,Uwo,b1,Lle,Jwo,Ywo,Wq,Kwo,Zwo,eAo,v1,xle,oAo,rAo,Hq,tAo,aAo,nAo,F1,kle,sAo,lAo,Uq,iAo,dAo,cAo,T1,Sle,fAo,mAo,Jq,gAo,hAo,pAo,M1,Rle,_Ao,uAo,Yq,bAo,vAo,FAo,E1,Ble,TAo,MAo,Kq,EAo,CAo,wAo,C1,Ple,AAo,yAo,Zq,LAo,xAo,kAo,w1,$le,SAo,RAo,eN,BAo,PAo,$Ao,A1,Ile,IAo,qAo,oN,NAo,jAo,DAo,y1,qle,GAo,OAo,rN,VAo,XAo,zAo,L1,Nle,QAo,WAo,tN,HAo,UAo,JAo,x1,jle,YAo,KAo,aN,ZAo,e0o,o0o,k1,Dle,r0o,t0o,nN,a0o,n0o,s0o,S1,Gle,l0o,i0o,sN,d0o,c0o,f0o,R1,Ole,m0o,g0o,lN,h0o,p0o,_0o,B1,Vle,u0o,b0o,iN,v0o,F0o,T0o,P1,Xle,M0o,E0o,dN,C0o,w0o,A0o,$1,zle,y0o,L0o,cN,x0o,k0o,S0o,I1,Qle,R0o,B0o,fN,P0o,$0o,I0o,q1,Wle,q0o,N0o,mN,j0o,D0o,G0o,N1,Hle,O0o,V0o,gN,X0o,z0o,Q0o,j1,Ule,W0o,H0o,hN,U0o,J0o,Y0o,D1,Jle,K0o,Z0o,pN,eyo,oyo,ryo,G1,Yle,tyo,ayo,_N,nyo,syo,lyo,O1,Kle,iyo,dyo,uN,cyo,fyo,myo,V1,Zle,gyo,hyo,bN,pyo,_yo,uyo,X1,eie,byo,vyo,vN,Fyo,Tyo,Myo,z1,oie,Eyo,Cyo,FN,wyo,Ayo,yyo,Q1,rie,Lyo,xyo,TN,kyo,Syo,Ryo,W1,tie,Byo,Pyo,MN,$yo,Iyo,qyo,H1,aie,Nyo,jyo,EN,Dyo,Gyo,Oyo,U1,nie,Vyo,Xyo,CN,zyo,Qyo,Wyo,J1,sie,Hyo,Uyo,wN,Jyo,Yyo,Kyo,Y1,lie,Zyo,eLo,AN,oLo,rLo,tLo,K1,iie,aLo,nLo,yN,sLo,lLo,iLo,Z1,die,dLo,cLo,LN,fLo,mLo,gLo,e4,cie,hLo,pLo,xN,_Lo,uLo,bLo,o4,fie,vLo,FLo,kN,TLo,MLo,ELo,r4,mie,CLo,wLo,SN,ALo,yLo,LLo,t4,gie,xLo,kLo,RN,SLo,RLo,BLo,a4,hie,PLo,$Lo,BN,ILo,qLo,NLo,n4,pie,jLo,DLo,PN,GLo,OLo,VLo,s4,_ie,XLo,zLo,$N,QLo,WLo,HLo,l4,uie,ULo,JLo,IN,YLo,KLo,ZLo,i4,e8o,bie,o8o,r8o,vie,t8o,a8o,Fie,n8o,s8o,eA,MBe,pd,d4,Tie,oA,l8o,Mie,i8o,EBe,rr,rA,d8o,_d,c8o,qN,f8o,m8o,NN,g8o,h8o,p8o,tA,_8o,Eie,u8o,b8o,v8o,Jr,aA,F8o,Cie,T8o,M8o,ud,E8o,wie,C8o,w8o,jN,A8o,y8o,L8o,Aie,x8o,k8o,nA,S8o,Ve,sA,R8o,yie,B8o,P8o,Ja,$8o,Lie,I8o,q8o,xie,N8o,j8o,kie,D8o,G8o,O8o,G,c4,Sie,V8o,X8o,DN,z8o,Q8o,W8o,f4,Rie,H8o,U8o,GN,J8o,Y8o,K8o,m4,Bie,Z8o,e7o,ON,o7o,r7o,t7o,g4,Pie,a7o,n7o,VN,s7o,l7o,i7o,h4,$ie,d7o,c7o,XN,f7o,m7o,g7o,p4,Iie,h7o,p7o,zN,_7o,u7o,b7o,_4,qie,v7o,F7o,QN,T7o,M7o,E7o,u4,Nie,C7o,w7o,WN,A7o,y7o,L7o,b4,jie,x7o,k7o,HN,S7o,R7o,B7o,v4,Die,P7o,$7o,UN,I7o,q7o,N7o,F4,Gie,j7o,D7o,JN,G7o,O7o,V7o,T4,Oie,X7o,z7o,YN,Q7o,W7o,H7o,M4,Vie,U7o,J7o,KN,Y7o,K7o,Z7o,E4,Xie,e9o,o9o,ZN,r9o,t9o,a9o,C4,zie,n9o,s9o,ej,l9o,i9o,d9o,w4,Qie,c9o,f9o,oj,m9o,g9o,h9o,A4,Wie,p9o,_9o,rj,u9o,b9o,v9o,y4,Hie,F9o,T9o,tj,M9o,E9o,C9o,L4,Uie,w9o,A9o,aj,y9o,L9o,x9o,x4,Jie,k9o,S9o,nj,R9o,B9o,P9o,k4,Yie,$9o,I9o,sj,q9o,N9o,j9o,S4,Kie,D9o,G9o,lj,O9o,V9o,X9o,R4,Zie,z9o,Q9o,ij,W9o,H9o,U9o,B4,ede,J9o,Y9o,dj,K9o,Z9o,exo,P4,ode,oxo,rxo,cj,txo,axo,nxo,$4,rde,sxo,lxo,fj,ixo,dxo,cxo,I4,tde,fxo,mxo,mj,gxo,hxo,pxo,q4,ade,_xo,uxo,gj,bxo,vxo,Fxo,N4,Txo,nde,Mxo,Exo,sde,Cxo,wxo,lde,Axo,yxo,lA,CBe,bd,j4,ide,iA,Lxo,dde,xxo,wBe,tr,dA,kxo,vd,Sxo,hj,Rxo,Bxo,pj,Pxo,$xo,Ixo,cA,qxo,cde,Nxo,jxo,Dxo,Yr,fA,Gxo,fde,Oxo,Vxo,Fd,Xxo,mde,zxo,Qxo,_j,Wxo,Hxo,Uxo,gde,Jxo,Yxo,mA,Kxo,Xe,gA,Zxo,hde,eko,oko,Ya,rko,pde,tko,ako,_de,nko,sko,ude,lko,iko,dko,da,D4,bde,cko,fko,uj,mko,gko,hko,G4,vde,pko,_ko,bj,uko,bko,vko,O4,Fde,Fko,Tko,vj,Mko,Eko,Cko,V4,Tde,wko,Ako,Fj,yko,Lko,xko,X4,Mde,kko,Sko,Tj,Rko,Bko,Pko,z4,$ko,Ede,Iko,qko,Cde,Nko,jko,wde,Dko,Gko,hA,ABe,Td,Q4,Ade,pA,Oko,yde,Vko,yBe,ar,_A,Xko,Md,zko,Mj,Qko,Wko,Ej,Hko,Uko,Jko,uA,Yko,Lde,Kko,Zko,eSo,Kr,bA,oSo,xde,rSo,tSo,Ed,aSo,kde,nSo,sSo,Cj,lSo,iSo,dSo,Sde,cSo,fSo,vA,mSo,ze,FA,gSo,Rde,hSo,pSo,Ka,_So,Bde,uSo,bSo,Pde,vSo,FSo,$de,TSo,MSo,ESo,j,W4,Ide,CSo,wSo,wj,ASo,ySo,LSo,H4,qde,xSo,kSo,Aj,SSo,RSo,BSo,U4,Nde,PSo,$So,yj,ISo,qSo,NSo,J4,jde,jSo,DSo,Lj,GSo,OSo,VSo,Y4,Dde,XSo,zSo,xj,QSo,WSo,HSo,K4,Gde,USo,JSo,kj,YSo,KSo,ZSo,Z4,Ode,eRo,oRo,Sj,rRo,tRo,aRo,eb,Vde,nRo,sRo,Rj,lRo,iRo,dRo,ob,Xde,cRo,fRo,Bj,mRo,gRo,hRo,rb,zde,pRo,_Ro,Pj,uRo,bRo,vRo,tb,Qde,FRo,TRo,$j,MRo,ERo,CRo,ab,Wde,wRo,ARo,Ij,yRo,LRo,xRo,nb,Hde,kRo,SRo,qj,RRo,BRo,PRo,sb,Ude,$Ro,IRo,Nj,qRo,NRo,jRo,lb,Jde,DRo,GRo,jj,ORo,VRo,XRo,ib,Yde,zRo,QRo,Dj,WRo,HRo,URo,db,Kde,JRo,YRo,Gj,KRo,ZRo,eBo,cb,Zde,oBo,rBo,Oj,tBo,aBo,nBo,fb,ece,sBo,lBo,Vj,iBo,dBo,cBo,mb,oce,fBo,mBo,Xj,gBo,hBo,pBo,gb,rce,_Bo,uBo,zj,bBo,vBo,FBo,hb,tce,TBo,MBo,Qj,EBo,CBo,wBo,pb,ace,ABo,yBo,Wj,LBo,xBo,kBo,_b,nce,SBo,RBo,Hj,BBo,PBo,$Bo,ub,sce,IBo,qBo,Uj,NBo,jBo,DBo,bb,lce,GBo,OBo,Jj,VBo,XBo,zBo,vb,ice,QBo,WBo,Yj,HBo,UBo,JBo,Fb,dce,YBo,KBo,Kj,ZBo,ePo,oPo,Tb,cce,rPo,tPo,Zj,aPo,nPo,sPo,Mb,fce,lPo,iPo,eD,dPo,cPo,fPo,Eb,mce,mPo,gPo,oD,hPo,pPo,_Po,Cb,gce,uPo,bPo,rD,vPo,FPo,TPo,wb,hce,MPo,EPo,tD,CPo,wPo,APo,Ab,yPo,pce,LPo,xPo,_ce,kPo,SPo,uce,RPo,BPo,TA,LBe,Cd,yb,bce,MA,PPo,vce,$Po,xBe,nr,EA,IPo,wd,qPo,aD,NPo,jPo,nD,DPo,GPo,OPo,CA,VPo,Fce,XPo,zPo,QPo,Zr,wA,WPo,Tce,HPo,UPo,Ad,JPo,Mce,YPo,KPo,sD,ZPo,e$o,o$o,Ece,r$o,t$o,AA,a$o,Qe,yA,n$o,Cce,s$o,l$o,Za,i$o,wce,d$o,c$o,Ace,f$o,m$o,yce,g$o,h$o,p$o,R,Lb,Lce,_$o,u$o,lD,b$o,v$o,F$o,xb,xce,T$o,M$o,iD,E$o,C$o,w$o,kb,kce,A$o,y$o,dD,L$o,x$o,k$o,Sb,Sce,S$o,R$o,cD,B$o,P$o,$$o,Rb,Rce,I$o,q$o,fD,N$o,j$o,D$o,Bb,Bce,G$o,O$o,mD,V$o,X$o,z$o,Pb,Pce,Q$o,W$o,gD,H$o,U$o,J$o,$b,$ce,Y$o,K$o,hD,Z$o,eIo,oIo,Ib,Ice,rIo,tIo,pD,aIo,nIo,sIo,qb,qce,lIo,iIo,_D,dIo,cIo,fIo,Nb,Nce,mIo,gIo,uD,hIo,pIo,_Io,jb,jce,uIo,bIo,bD,vIo,FIo,TIo,Db,Dce,MIo,EIo,vD,CIo,wIo,AIo,Gb,Gce,yIo,LIo,FD,xIo,kIo,SIo,Ob,Oce,RIo,BIo,TD,PIo,$Io,IIo,Vb,Vce,qIo,NIo,MD,jIo,DIo,GIo,Xb,Xce,OIo,VIo,ED,XIo,zIo,QIo,zb,zce,WIo,HIo,CD,UIo,JIo,YIo,Qb,Qce,KIo,ZIo,wD,eqo,oqo,rqo,Wb,Wce,tqo,aqo,AD,nqo,sqo,lqo,Hb,Hce,iqo,dqo,yD,cqo,fqo,mqo,Ub,Uce,gqo,hqo,LD,pqo,_qo,uqo,Jb,Jce,bqo,vqo,xD,Fqo,Tqo,Mqo,Yb,Yce,Eqo,Cqo,kD,wqo,Aqo,yqo,Kb,Kce,Lqo,xqo,SD,kqo,Sqo,Rqo,Zb,Zce,Bqo,Pqo,RD,$qo,Iqo,qqo,e2,efe,Nqo,jqo,BD,Dqo,Gqo,Oqo,o2,ofe,Vqo,Xqo,PD,zqo,Qqo,Wqo,r2,rfe,Hqo,Uqo,$D,Jqo,Yqo,Kqo,t2,tfe,Zqo,eNo,ID,oNo,rNo,tNo,a2,afe,aNo,nNo,qD,sNo,lNo,iNo,n2,nfe,dNo,cNo,ND,fNo,mNo,gNo,s2,sfe,hNo,pNo,jD,_No,uNo,bNo,l2,lfe,vNo,FNo,DD,TNo,MNo,ENo,i2,ife,CNo,wNo,GD,ANo,yNo,LNo,d2,dfe,xNo,kNo,OD,SNo,RNo,BNo,c2,cfe,PNo,$No,VD,INo,qNo,NNo,f2,ffe,jNo,DNo,XD,GNo,ONo,VNo,m2,mfe,XNo,zNo,zD,QNo,WNo,HNo,g2,UNo,gfe,JNo,YNo,hfe,KNo,ZNo,pfe,ejo,ojo,LA,kBe,yd,h2,_fe,xA,rjo,ufe,tjo,SBe,sr,kA,ajo,Ld,njo,QD,sjo,ljo,WD,ijo,djo,cjo,SA,fjo,bfe,mjo,gjo,hjo,et,RA,pjo,vfe,_jo,ujo,xd,bjo,Ffe,vjo,Fjo,HD,Tjo,Mjo,Ejo,Tfe,Cjo,wjo,BA,Ajo,We,PA,yjo,Mfe,Ljo,xjo,en,kjo,Efe,Sjo,Rjo,Cfe,Bjo,Pjo,wfe,$jo,Ijo,qjo,Afe,p2,yfe,Njo,jjo,UD,Djo,Gjo,Ojo,_2,Vjo,Lfe,Xjo,zjo,xfe,Qjo,Wjo,kfe,Hjo,Ujo,$A,RBe,kd,u2,Sfe,IA,Jjo,Rfe,Yjo,BBe,lr,qA,Kjo,Sd,Zjo,JD,eDo,oDo,YD,rDo,tDo,aDo,NA,nDo,Bfe,sDo,lDo,iDo,ot,jA,dDo,Pfe,cDo,fDo,Rd,mDo,$fe,gDo,hDo,KD,pDo,_Do,uDo,Ife,bDo,vDo,DA,FDo,He,GA,TDo,qfe,MDo,EDo,on,CDo,Nfe,wDo,ADo,jfe,yDo,LDo,Dfe,xDo,kDo,SDo,de,b2,Gfe,RDo,BDo,ZD,PDo,$Do,IDo,v2,Ofe,qDo,NDo,eG,jDo,DDo,GDo,F2,Vfe,ODo,VDo,oG,XDo,zDo,QDo,Gs,Xfe,WDo,HDo,rG,UDo,JDo,tG,YDo,KDo,ZDo,T2,zfe,eGo,oGo,aG,rGo,tGo,aGo,ma,Qfe,nGo,sGo,nG,lGo,iGo,sG,dGo,cGo,lG,fGo,mGo,gGo,M2,Wfe,hGo,pGo,iG,_Go,uGo,bGo,E2,Hfe,vGo,FGo,dG,TGo,MGo,EGo,C2,Ufe,CGo,wGo,cG,AGo,yGo,LGo,w2,Jfe,xGo,kGo,fG,SGo,RGo,BGo,A2,Yfe,PGo,$Go,mG,IGo,qGo,NGo,y2,Kfe,jGo,DGo,gG,GGo,OGo,VGo,L2,Zfe,XGo,zGo,hG,QGo,WGo,HGo,x2,UGo,eme,JGo,YGo,ome,KGo,ZGo,rme,eOo,oOo,OA,PBe,Bd,k2,tme,VA,rOo,ame,tOo,$Be,ir,XA,aOo,Pd,nOo,pG,sOo,lOo,_G,iOo,dOo,cOo,zA,fOo,nme,mOo,gOo,hOo,rt,QA,pOo,sme,_Oo,uOo,$d,bOo,lme,vOo,FOo,uG,TOo,MOo,EOo,ime,COo,wOo,WA,AOo,Ue,HA,yOo,dme,LOo,xOo,rn,kOo,cme,SOo,ROo,fme,BOo,POo,mme,$Oo,IOo,qOo,gme,S2,hme,NOo,jOo,bG,DOo,GOo,OOo,R2,VOo,pme,XOo,zOo,_me,QOo,WOo,ume,HOo,UOo,UA,IBe,Id,B2,bme,JA,JOo,vme,YOo,qBe,dr,YA,KOo,qd,ZOo,vG,eVo,oVo,FG,rVo,tVo,aVo,KA,nVo,Fme,sVo,lVo,iVo,tt,ZA,dVo,Tme,cVo,fVo,Nd,mVo,Mme,gVo,hVo,TG,pVo,_Vo,uVo,Eme,bVo,vVo,e0,FVo,Je,o0,TVo,Cme,MVo,EVo,tn,CVo,wme,wVo,AVo,Ame,yVo,LVo,yme,xVo,kVo,SVo,Se,P2,Lme,RVo,BVo,MG,PVo,$Vo,IVo,$2,xme,qVo,NVo,EG,jVo,DVo,GVo,I2,kme,OVo,VVo,CG,XVo,zVo,QVo,q2,Sme,WVo,HVo,wG,UVo,JVo,YVo,N2,Rme,KVo,ZVo,AG,eXo,oXo,rXo,j2,Bme,tXo,aXo,yG,nXo,sXo,lXo,D2,Pme,iXo,dXo,LG,cXo,fXo,mXo,G2,$me,gXo,hXo,xG,pXo,_Xo,uXo,O2,bXo,Ime,vXo,FXo,qme,TXo,MXo,Nme,EXo,CXo,r0,NBe,jd,V2,jme,t0,wXo,Dme,AXo,jBe,cr,a0,yXo,Dd,LXo,kG,xXo,kXo,SG,SXo,RXo,BXo,n0,PXo,Gme,$Xo,IXo,qXo,at,s0,NXo,Ome,jXo,DXo,Gd,GXo,Vme,OXo,VXo,RG,XXo,zXo,QXo,Xme,WXo,HXo,l0,UXo,Ye,i0,JXo,zme,YXo,KXo,an,ZXo,Qme,ezo,ozo,Wme,rzo,tzo,Hme,azo,nzo,szo,nn,X2,Ume,lzo,izo,BG,dzo,czo,fzo,z2,Jme,mzo,gzo,PG,hzo,pzo,_zo,Q2,Yme,uzo,bzo,$G,vzo,Fzo,Tzo,W2,Kme,Mzo,Ezo,IG,Czo,wzo,Azo,H2,yzo,Zme,Lzo,xzo,ege,kzo,Szo,oge,Rzo,Bzo,d0,DBe,Od,U2,rge,c0,Pzo,tge,$zo,GBe,fr,f0,Izo,Vd,qzo,qG,Nzo,jzo,NG,Dzo,Gzo,Ozo,m0,Vzo,age,Xzo,zzo,Qzo,nt,g0,Wzo,nge,Hzo,Uzo,Xd,Jzo,sge,Yzo,Kzo,jG,Zzo,eQo,oQo,lge,rQo,tQo,h0,aQo,Ke,p0,nQo,ige,sQo,lQo,sn,iQo,dge,dQo,cQo,cge,fQo,mQo,fge,gQo,hQo,pQo,Re,J2,mge,_Qo,uQo,DG,bQo,vQo,FQo,Y2,gge,TQo,MQo,GG,EQo,CQo,wQo,K2,hge,AQo,yQo,OG,LQo,xQo,kQo,Z2,pge,SQo,RQo,VG,BQo,PQo,$Qo,e5,_ge,IQo,qQo,XG,NQo,jQo,DQo,o5,uge,GQo,OQo,zG,VQo,XQo,zQo,r5,bge,QQo,WQo,QG,HQo,UQo,JQo,t5,vge,YQo,KQo,WG,ZQo,eWo,oWo,a5,rWo,Fge,tWo,aWo,Tge,nWo,sWo,Mge,lWo,iWo,_0,OBe,zd,n5,Ege,u0,dWo,Cge,cWo,VBe,mr,b0,fWo,Qd,mWo,HG,gWo,hWo,UG,pWo,_Wo,uWo,v0,bWo,wge,vWo,FWo,TWo,st,F0,MWo,Age,EWo,CWo,Wd,wWo,yge,AWo,yWo,JG,LWo,xWo,kWo,Lge,SWo,RWo,T0,BWo,Ze,M0,PWo,xge,$Wo,IWo,ln,qWo,kge,NWo,jWo,Sge,DWo,GWo,Rge,OWo,VWo,XWo,E0,s5,Bge,zWo,QWo,YG,WWo,HWo,UWo,l5,Pge,JWo,YWo,KG,KWo,ZWo,eHo,i5,oHo,$ge,rHo,tHo,Ige,aHo,nHo,qge,sHo,lHo,C0,XBe,Hd,d5,Nge,w0,iHo,jge,dHo,zBe,gr,A0,cHo,Ud,fHo,ZG,mHo,gHo,eO,hHo,pHo,_Ho,y0,uHo,Dge,bHo,vHo,FHo,lt,L0,THo,Gge,MHo,EHo,Jd,CHo,Oge,wHo,AHo,oO,yHo,LHo,xHo,Vge,kHo,SHo,x0,RHo,eo,k0,BHo,Xge,PHo,$Ho,dn,IHo,zge,qHo,NHo,Qge,jHo,DHo,Wge,GHo,OHo,VHo,cn,c5,Hge,XHo,zHo,rO,QHo,WHo,HHo,f5,Uge,UHo,JHo,tO,YHo,KHo,ZHo,m5,Jge,eUo,oUo,aO,rUo,tUo,aUo,g5,Yge,nUo,sUo,nO,lUo,iUo,dUo,h5,cUo,Kge,fUo,mUo,Zge,gUo,hUo,ehe,pUo,_Uo,S0,QBe,Yd,p5,ohe,R0,uUo,rhe,bUo,WBe,hr,B0,vUo,Kd,FUo,sO,TUo,MUo,lO,EUo,CUo,wUo,P0,AUo,the,yUo,LUo,xUo,it,$0,kUo,ahe,SUo,RUo,Zd,BUo,nhe,PUo,$Uo,iO,IUo,qUo,NUo,she,jUo,DUo,I0,GUo,oo,q0,OUo,lhe,VUo,XUo,fn,zUo,ihe,QUo,WUo,dhe,HUo,UUo,che,JUo,YUo,KUo,ec,_5,fhe,ZUo,eJo,dO,oJo,rJo,tJo,u5,mhe,aJo,nJo,cO,sJo,lJo,iJo,b5,ghe,dJo,cJo,fO,fJo,mJo,gJo,v5,hJo,hhe,pJo,_Jo,phe,uJo,bJo,_he,vJo,FJo,N0,HBe,oc,F5,uhe,j0,TJo,bhe,MJo,UBe,pr,D0,EJo,rc,CJo,mO,wJo,AJo,gO,yJo,LJo,xJo,G0,kJo,vhe,SJo,RJo,BJo,dt,O0,PJo,Fhe,$Jo,IJo,tc,qJo,The,NJo,jJo,hO,DJo,GJo,OJo,Mhe,VJo,XJo,V0,zJo,ro,X0,QJo,Ehe,WJo,HJo,mn,UJo,Che,JJo,YJo,whe,KJo,ZJo,Ahe,eYo,oYo,rYo,yhe,T5,Lhe,tYo,aYo,pO,nYo,sYo,lYo,M5,iYo,xhe,dYo,cYo,khe,fYo,mYo,She,gYo,hYo,z0,JBe,ac,E5,Rhe,Q0,pYo,Bhe,_Yo,YBe,_r,W0,uYo,nc,bYo,_O,vYo,FYo,uO,TYo,MYo,EYo,H0,CYo,Phe,wYo,AYo,yYo,ct,U0,LYo,$he,xYo,kYo,sc,SYo,Ihe,RYo,BYo,bO,PYo,$Yo,IYo,qhe,qYo,NYo,J0,jYo,to,Y0,DYo,Nhe,GYo,OYo,gn,VYo,jhe,XYo,zYo,Dhe,QYo,WYo,Ghe,HYo,UYo,JYo,Ohe,C5,Vhe,YYo,KYo,vO,ZYo,eKo,oKo,w5,rKo,Xhe,tKo,aKo,zhe,nKo,sKo,Qhe,lKo,iKo,K0,KBe,lc,A5,Whe,Z0,dKo,Hhe,cKo,ZBe,ur,ey,fKo,ic,mKo,FO,gKo,hKo,TO,pKo,_Ko,uKo,oy,bKo,Uhe,vKo,FKo,TKo,ft,ry,MKo,Jhe,EKo,CKo,dc,wKo,Yhe,AKo,yKo,MO,LKo,xKo,kKo,Khe,SKo,RKo,ty,BKo,ao,ay,PKo,Zhe,$Ko,IKo,hn,qKo,epe,NKo,jKo,ope,DKo,GKo,rpe,OKo,VKo,XKo,pn,y5,tpe,zKo,QKo,EO,WKo,HKo,UKo,L5,ape,JKo,YKo,CO,KKo,ZKo,eZo,x5,npe,oZo,rZo,wO,tZo,aZo,nZo,k5,spe,sZo,lZo,AO,iZo,dZo,cZo,S5,fZo,lpe,mZo,gZo,ipe,hZo,pZo,dpe,_Zo,uZo,ny,ePe,cc,R5,cpe,sy,bZo,fpe,vZo,oPe,br,ly,FZo,fc,TZo,yO,MZo,EZo,LO,CZo,wZo,AZo,iy,yZo,mpe,LZo,xZo,kZo,mt,dy,SZo,gpe,RZo,BZo,mc,PZo,hpe,$Zo,IZo,xO,qZo,NZo,jZo,ppe,DZo,GZo,cy,OZo,no,fy,VZo,_pe,XZo,zZo,_n,QZo,upe,WZo,HZo,bpe,UZo,JZo,vpe,YZo,KZo,ZZo,Fpe,B5,Tpe,eer,oer,kO,rer,ter,aer,P5,ner,Mpe,ser,ler,Epe,ier,der,Cpe,cer,fer,my,rPe,gc,$5,wpe,gy,mer,Ape,ger,tPe,vr,hy,her,hc,per,SO,_er,uer,RO,ber,ver,Fer,py,Ter,ype,Mer,Eer,Cer,gt,_y,wer,Lpe,Aer,yer,pc,Ler,xpe,xer,ker,BO,Ser,Rer,Ber,kpe,Per,$er,uy,Ier,po,by,qer,Spe,Ner,jer,un,Der,Rpe,Ger,Oer,Bpe,Ver,Xer,Ppe,zer,Qer,Wer,x,I5,$pe,Her,Uer,PO,Jer,Yer,Ker,q5,Ipe,Zer,eor,$O,oor,ror,tor,N5,qpe,aor,nor,IO,sor,lor,ior,j5,Npe,dor,cor,qO,mor,gor,hor,D5,jpe,por,_or,NO,uor,bor,vor,G5,Dpe,For,Tor,jO,Mor,Eor,Cor,O5,Gpe,wor,Aor,DO,yor,Lor,xor,V5,Ope,kor,Sor,GO,Ror,Bor,Por,X5,Vpe,$or,Ior,OO,qor,Nor,jor,z5,Xpe,Dor,Gor,VO,Oor,Vor,Xor,Q5,zpe,zor,Qor,XO,Wor,Hor,Uor,W5,Qpe,Jor,Yor,zO,Kor,Zor,err,H5,Wpe,orr,rrr,QO,trr,arr,nrr,U5,Hpe,srr,lrr,WO,irr,drr,crr,J5,Upe,frr,mrr,HO,grr,hrr,prr,Y5,Jpe,_rr,urr,UO,brr,vrr,Frr,Os,Ype,Trr,Mrr,JO,Err,Crr,YO,wrr,Arr,yrr,K5,Kpe,Lrr,xrr,KO,krr,Srr,Rrr,Z5,Zpe,Brr,Prr,ZO,$rr,Irr,qrr,ev,e_e,Nrr,jrr,eV,Drr,Grr,Orr,ov,o_e,Vrr,Xrr,oV,zrr,Qrr,Wrr,rv,r_e,Hrr,Urr,rV,Jrr,Yrr,Krr,tv,t_e,Zrr,etr,tV,otr,rtr,ttr,av,a_e,atr,ntr,aV,str,ltr,itr,nv,n_e,dtr,ctr,nV,ftr,mtr,gtr,sv,s_e,htr,ptr,sV,_tr,utr,btr,lv,l_e,vtr,Ftr,lV,Ttr,Mtr,Etr,iv,i_e,Ctr,wtr,iV,Atr,ytr,Ltr,dv,d_e,xtr,ktr,dV,Str,Rtr,Btr,cv,c_e,Ptr,$tr,cV,Itr,qtr,Ntr,fv,f_e,jtr,Dtr,fV,Gtr,Otr,Vtr,mv,m_e,Xtr,ztr,mV,Qtr,Wtr,Htr,gv,g_e,Utr,Jtr,gV,Ytr,Ktr,Ztr,hv,h_e,ear,oar,hV,rar,tar,aar,pv,p_e,nar,sar,pV,lar,iar,dar,_v,__e,car,far,_V,mar,gar,har,uv,u_e,par,_ar,uV,uar,bar,Far,bv,b_e,Tar,Mar,bV,Ear,Car,war,vv,v_e,Aar,yar,vV,Lar,xar,kar,Fv,F_e,Sar,Rar,FV,Bar,Par,$ar,Tv,T_e,Iar,qar,TV,Nar,jar,Dar,Mv,M_e,Gar,Oar,MV,Var,Xar,zar,Ev,E_e,Qar,War,EV,Har,Uar,Jar,Cv,C_e,Yar,Kar,CV,Zar,enr,onr,w_e,rnr,tnr,vy,aPe,_c,wv,A_e,Fy,anr,y_e,nnr,nPe,Fr,Ty,snr,uc,lnr,wV,inr,dnr,AV,cnr,fnr,mnr,My,gnr,L_e,hnr,pnr,_nr,ht,Ey,unr,x_e,bnr,vnr,bc,Fnr,k_e,Tnr,Mnr,yV,Enr,Cnr,wnr,S_e,Anr,ynr,Cy,Lnr,_o,wy,xnr,R_e,knr,Snr,bn,Rnr,B_e,Bnr,Pnr,P_e,$nr,Inr,$_e,qnr,Nnr,jnr,H,Av,I_e,Dnr,Gnr,LV,Onr,Vnr,Xnr,yv,q_e,znr,Qnr,xV,Wnr,Hnr,Unr,Lv,N_e,Jnr,Ynr,kV,Knr,Znr,esr,xv,j_e,osr,rsr,SV,tsr,asr,nsr,kv,D_e,ssr,lsr,RV,isr,dsr,csr,Sv,G_e,fsr,msr,BV,gsr,hsr,psr,Rv,O_e,_sr,usr,PV,bsr,vsr,Fsr,Bv,V_e,Tsr,Msr,$V,Esr,Csr,wsr,Pv,X_e,Asr,ysr,IV,Lsr,xsr,ksr,$v,z_e,Ssr,Rsr,qV,Bsr,Psr,$sr,Iv,Q_e,Isr,qsr,NV,Nsr,jsr,Dsr,qv,W_e,Gsr,Osr,jV,Vsr,Xsr,zsr,Nv,H_e,Qsr,Wsr,DV,Hsr,Usr,Jsr,jv,U_e,Ysr,Ksr,GV,Zsr,elr,olr,Dv,J_e,rlr,tlr,OV,alr,nlr,slr,Gv,Y_e,llr,ilr,VV,dlr,clr,flr,Ov,K_e,mlr,glr,XV,hlr,plr,_lr,Vv,Z_e,ulr,blr,zV,vlr,Flr,Tlr,Xv,eue,Mlr,Elr,QV,Clr,wlr,Alr,zv,oue,ylr,Llr,WV,xlr,klr,Slr,Qv,rue,Rlr,Blr,HV,Plr,$lr,Ilr,Wv,tue,qlr,Nlr,UV,jlr,Dlr,Glr,Hv,aue,Olr,Vlr,JV,Xlr,zlr,Qlr,nue,Wlr,Hlr,Ay,sPe,vc,Uv,sue,yy,Ulr,lue,Jlr,lPe,Tr,Ly,Ylr,Fc,Klr,YV,Zlr,eir,KV,oir,rir,tir,xy,air,iue,nir,sir,lir,pt,ky,iir,due,dir,cir,Tc,fir,cue,mir,gir,ZV,hir,pir,_ir,fue,uir,bir,Sy,vir,uo,Ry,Fir,mue,Tir,Mir,vn,Eir,gue,Cir,wir,hue,Air,yir,pue,Lir,xir,kir,fe,Jv,_ue,Sir,Rir,eX,Bir,Pir,$ir,Yv,uue,Iir,qir,oX,Nir,jir,Dir,Kv,bue,Gir,Oir,rX,Vir,Xir,zir,Zv,vue,Qir,Wir,tX,Hir,Uir,Jir,eF,Fue,Yir,Kir,aX,Zir,edr,odr,oF,Tue,rdr,tdr,nX,adr,ndr,sdr,rF,Mue,ldr,idr,sX,ddr,cdr,fdr,tF,Eue,mdr,gdr,lX,hdr,pdr,_dr,aF,Cue,udr,bdr,iX,vdr,Fdr,Tdr,nF,wue,Mdr,Edr,dX,Cdr,wdr,Adr,sF,Aue,ydr,Ldr,cX,xdr,kdr,Sdr,lF,yue,Rdr,Bdr,fX,Pdr,$dr,Idr,Lue,qdr,Ndr,By,iPe,Mc,iF,xue,Py,jdr,kue,Ddr,dPe,Mr,$y,Gdr,Ec,Odr,mX,Vdr,Xdr,gX,zdr,Qdr,Wdr,Iy,Hdr,Sue,Udr,Jdr,Ydr,_t,qy,Kdr,Rue,Zdr,ecr,Cc,ocr,Bue,rcr,tcr,hX,acr,ncr,scr,Pue,lcr,icr,Ny,dcr,bo,jy,ccr,$ue,fcr,mcr,Fn,gcr,Iue,hcr,pcr,que,_cr,ucr,Nue,bcr,vcr,Fcr,Dy,dF,jue,Tcr,Mcr,pX,Ecr,Ccr,wcr,cF,Due,Acr,ycr,_X,Lcr,xcr,kcr,Gue,Scr,Rcr,Gy,cPe,wc,fF,Oue,Oy,Bcr,Vue,Pcr,fPe,Er,Vy,$cr,Ac,Icr,uX,qcr,Ncr,bX,jcr,Dcr,Gcr,Xy,Ocr,Xue,Vcr,Xcr,zcr,ut,zy,Qcr,zue,Wcr,Hcr,yc,Ucr,Que,Jcr,Ycr,vX,Kcr,Zcr,efr,Wue,ofr,rfr,Qy,tfr,vo,Wy,afr,Hue,nfr,sfr,Tn,lfr,Uue,ifr,dfr,Jue,cfr,ffr,Yue,mfr,gfr,hfr,Y,mF,Kue,pfr,_fr,FX,ufr,bfr,vfr,gF,Zue,Ffr,Tfr,TX,Mfr,Efr,Cfr,hF,e6e,wfr,Afr,MX,yfr,Lfr,xfr,pF,o6e,kfr,Sfr,EX,Rfr,Bfr,Pfr,_F,r6e,$fr,Ifr,CX,qfr,Nfr,jfr,uF,t6e,Dfr,Gfr,wX,Ofr,Vfr,Xfr,bF,a6e,zfr,Qfr,AX,Wfr,Hfr,Ufr,vF,n6e,Jfr,Yfr,yX,Kfr,Zfr,emr,FF,s6e,omr,rmr,LX,tmr,amr,nmr,TF,l6e,smr,lmr,xX,imr,dmr,cmr,MF,i6e,fmr,mmr,kX,gmr,hmr,pmr,EF,d6e,_mr,umr,SX,bmr,vmr,Fmr,CF,c6e,Tmr,Mmr,RX,Emr,Cmr,wmr,wF,f6e,Amr,ymr,BX,Lmr,xmr,kmr,AF,m6e,Smr,Rmr,PX,Bmr,Pmr,$mr,yF,g6e,Imr,qmr,$X,Nmr,jmr,Dmr,LF,h6e,Gmr,Omr,IX,Vmr,Xmr,zmr,xF,p6e,Qmr,Wmr,qX,Hmr,Umr,Jmr,kF,_6e,Ymr,Kmr,NX,Zmr,egr,ogr,SF,u6e,rgr,tgr,jX,agr,ngr,sgr,b6e,lgr,igr,Hy,mPe,Lc,RF,v6e,Uy,dgr,F6e,cgr,gPe,Cr,Jy,fgr,xc,mgr,DX,ggr,hgr,GX,pgr,_gr,ugr,Yy,bgr,T6e,vgr,Fgr,Tgr,bt,Ky,Mgr,M6e,Egr,Cgr,kc,wgr,E6e,Agr,ygr,OX,Lgr,xgr,kgr,C6e,Sgr,Rgr,Zy,Bgr,Fo,eL,Pgr,w6e,$gr,Igr,Mn,qgr,A6e,Ngr,jgr,y6e,Dgr,Ggr,L6e,Ogr,Vgr,Xgr,be,BF,x6e,zgr,Qgr,VX,Wgr,Hgr,Ugr,PF,k6e,Jgr,Ygr,XX,Kgr,Zgr,ehr,$F,S6e,ohr,rhr,zX,thr,ahr,nhr,IF,R6e,shr,lhr,QX,ihr,dhr,chr,qF,B6e,fhr,mhr,WX,ghr,hhr,phr,NF,P6e,_hr,uhr,HX,bhr,vhr,Fhr,jF,$6e,Thr,Mhr,UX,Ehr,Chr,whr,DF,I6e,Ahr,yhr,JX,Lhr,xhr,khr,GF,q6e,Shr,Rhr,YX,Bhr,Phr,$hr,OF,N6e,Ihr,qhr,KX,Nhr,jhr,Dhr,j6e,Ghr,Ohr,oL,hPe,Sc,VF,D6e,rL,Vhr,G6e,Xhr,pPe,wr,tL,zhr,Rc,Qhr,ZX,Whr,Hhr,ez,Uhr,Jhr,Yhr,aL,Khr,O6e,Zhr,epr,opr,vt,nL,rpr,V6e,tpr,apr,Bc,npr,X6e,spr,lpr,oz,ipr,dpr,cpr,z6e,fpr,mpr,sL,gpr,To,lL,hpr,Q6e,ppr,_pr,En,upr,W6e,bpr,vpr,H6e,Fpr,Tpr,U6e,Mpr,Epr,Cpr,V,XF,J6e,wpr,Apr,rz,ypr,Lpr,xpr,zF,Y6e,kpr,Spr,tz,Rpr,Bpr,Ppr,QF,K6e,$pr,Ipr,az,qpr,Npr,jpr,WF,Z6e,Dpr,Gpr,nz,Opr,Vpr,Xpr,HF,e1e,zpr,Qpr,sz,Wpr,Hpr,Upr,UF,o1e,Jpr,Ypr,lz,Kpr,Zpr,e_r,JF,r1e,o_r,r_r,iz,t_r,a_r,n_r,YF,t1e,s_r,l_r,dz,i_r,d_r,c_r,KF,a1e,f_r,m_r,cz,g_r,h_r,p_r,ZF,n1e,__r,u_r,fz,b_r,v_r,F_r,eT,s1e,T_r,M_r,mz,E_r,C_r,w_r,oT,l1e,A_r,y_r,gz,L_r,x_r,k_r,rT,i1e,S_r,R_r,hz,B_r,P_r,$_r,tT,d1e,I_r,q_r,pz,N_r,j_r,D_r,aT,c1e,G_r,O_r,_z,V_r,X_r,z_r,nT,f1e,Q_r,W_r,uz,H_r,U_r,J_r,sT,m1e,Y_r,K_r,bz,Z_r,eur,our,lT,g1e,rur,tur,vz,aur,nur,sur,iT,h1e,lur,iur,Fz,dur,cur,fur,dT,p1e,mur,gur,Tz,hur,pur,_ur,cT,_1e,uur,bur,Mz,vur,Fur,Tur,fT,u1e,Mur,Eur,Ez,Cur,wur,Aur,mT,b1e,yur,Lur,Cz,xur,kur,Sur,gT,v1e,Rur,Bur,wz,Pur,$ur,Iur,hT,F1e,qur,Nur,Az,jur,Dur,Gur,pT,T1e,Our,Vur,yz,Xur,zur,Qur,M1e,Wur,Hur,iL,_Pe,Pc,_T,E1e,dL,Uur,C1e,Jur,uPe,Ar,cL,Yur,$c,Kur,Lz,Zur,e6r,xz,o6r,r6r,t6r,fL,a6r,w1e,n6r,s6r,l6r,Ft,mL,i6r,A1e,d6r,c6r,Ic,f6r,y1e,m6r,g6r,kz,h6r,p6r,_6r,L1e,u6r,b6r,gL,v6r,Mo,hL,F6r,x1e,T6r,M6r,Cn,E6r,k1e,C6r,w6r,S1e,A6r,y6r,R1e,L6r,x6r,k6r,se,uT,B1e,S6r,R6r,Sz,B6r,P6r,$6r,bT,P1e,I6r,q6r,Rz,N6r,j6r,D6r,vT,$1e,G6r,O6r,Bz,V6r,X6r,z6r,FT,I1e,Q6r,W6r,Pz,H6r,U6r,J6r,TT,q1e,Y6r,K6r,$z,Z6r,e1r,o1r,MT,N1e,r1r,t1r,Iz,a1r,n1r,s1r,ET,j1e,l1r,i1r,qz,d1r,c1r,f1r,CT,D1e,m1r,g1r,Nz,h1r,p1r,_1r,wT,G1e,u1r,b1r,jz,v1r,F1r,T1r,AT,O1e,M1r,E1r,Dz,C1r,w1r,A1r,yT,V1e,y1r,L1r,Gz,x1r,k1r,S1r,LT,X1e,R1r,B1r,Oz,P1r,$1r,I1r,xT,z1e,q1r,N1r,Vz,j1r,D1r,G1r,kT,Q1e,O1r,V1r,Xz,X1r,z1r,Q1r,ST,W1e,W1r,H1r,zz,U1r,J1r,Y1r,RT,H1e,K1r,Z1r,Qz,e4r,o4r,r4r,BT,U1e,t4r,a4r,Wz,n4r,s4r,l4r,J1e,i4r,d4r,pL,bPe,qc,PT,Y1e,_L,c4r,K1e,f4r,vPe,yr,uL,m4r,Nc,g4r,Hz,h4r,p4r,Uz,_4r,u4r,b4r,bL,v4r,Z1e,F4r,T4r,M4r,Tt,vL,E4r,e4e,C4r,w4r,jc,A4r,o4e,y4r,L4r,Jz,x4r,k4r,S4r,r4e,R4r,B4r,FL,P4r,Eo,TL,$4r,t4e,I4r,q4r,wn,N4r,a4e,j4r,D4r,n4e,G4r,O4r,s4e,V4r,X4r,z4r,l4e,$T,i4e,Q4r,W4r,Yz,H4r,U4r,J4r,d4e,Y4r,K4r,ML,FPe,Dc,IT,c4e,EL,Z4r,f4e,ebr,TPe,Lr,CL,obr,Gc,rbr,Kz,tbr,abr,Zz,nbr,sbr,lbr,wL,ibr,m4e,dbr,cbr,fbr,Mt,AL,mbr,g4e,gbr,hbr,Oc,pbr,h4e,_br,ubr,eQ,bbr,vbr,Fbr,p4e,Tbr,Mbr,yL,Ebr,Co,LL,Cbr,_4e,wbr,Abr,An,ybr,u4e,Lbr,xbr,b4e,kbr,Sbr,v4e,Rbr,Bbr,Pbr,K,qT,F4e,$br,Ibr,oQ,qbr,Nbr,jbr,NT,T4e,Dbr,Gbr,rQ,Obr,Vbr,Xbr,jT,M4e,zbr,Qbr,tQ,Wbr,Hbr,Ubr,DT,E4e,Jbr,Ybr,aQ,Kbr,Zbr,e2r,GT,C4e,o2r,r2r,nQ,t2r,a2r,n2r,OT,w4e,s2r,l2r,sQ,i2r,d2r,c2r,VT,A4e,f2r,m2r,lQ,g2r,h2r,p2r,XT,y4e,_2r,u2r,iQ,b2r,v2r,F2r,zT,L4e,T2r,M2r,dQ,E2r,C2r,w2r,QT,x4e,A2r,y2r,cQ,L2r,x2r,k2r,WT,k4e,S2r,R2r,fQ,B2r,P2r,$2r,HT,S4e,I2r,q2r,mQ,N2r,j2r,D2r,UT,R4e,G2r,O2r,gQ,V2r,X2r,z2r,JT,B4e,Q2r,W2r,hQ,H2r,U2r,J2r,YT,P4e,Y2r,K2r,pQ,Z2r,e5r,o5r,KT,$4e,r5r,t5r,_Q,a5r,n5r,s5r,ZT,I4e,l5r,i5r,uQ,d5r,c5r,f5r,eM,q4e,m5r,g5r,bQ,h5r,p5r,_5r,oM,N4e,u5r,b5r,vQ,v5r,F5r,T5r,rM,j4e,M5r,E5r,FQ,C5r,w5r,A5r,D4e,y5r,L5r,xL,MPe,Vc,tM,G4e,kL,x5r,O4e,k5r,EPe,xr,SL,S5r,Xc,R5r,TQ,B5r,P5r,MQ,$5r,I5r,q5r,RL,N5r,V4e,j5r,D5r,G5r,Et,BL,O5r,X4e,V5r,X5r,zc,z5r,z4e,Q5r,W5r,EQ,H5r,U5r,J5r,Q4e,Y5r,K5r,PL,Z5r,wo,$L,evr,W4e,ovr,rvr,yn,tvr,H4e,avr,nvr,U4e,svr,lvr,J4e,ivr,dvr,cvr,Z,aM,Y4e,fvr,mvr,CQ,gvr,hvr,pvr,nM,K4e,_vr,uvr,wQ,bvr,vvr,Fvr,sM,Z4e,Tvr,Mvr,AQ,Evr,Cvr,wvr,lM,ebe,Avr,yvr,yQ,Lvr,xvr,kvr,iM,obe,Svr,Rvr,LQ,Bvr,Pvr,$vr,dM,rbe,Ivr,qvr,xQ,Nvr,jvr,Dvr,cM,tbe,Gvr,Ovr,kQ,Vvr,Xvr,zvr,fM,abe,Qvr,Wvr,SQ,Hvr,Uvr,Jvr,mM,nbe,Yvr,Kvr,RQ,Zvr,eFr,oFr,gM,sbe,rFr,tFr,BQ,aFr,nFr,sFr,hM,lbe,lFr,iFr,PQ,dFr,cFr,fFr,pM,ibe,mFr,gFr,$Q,hFr,pFr,_Fr,_M,dbe,uFr,bFr,IQ,vFr,FFr,TFr,uM,cbe,MFr,EFr,qQ,CFr,wFr,AFr,bM,fbe,yFr,LFr,NQ,xFr,kFr,SFr,vM,mbe,RFr,BFr,jQ,PFr,$Fr,IFr,FM,gbe,qFr,NFr,DQ,jFr,DFr,GFr,TM,hbe,OFr,VFr,GQ,XFr,zFr,QFr,MM,pbe,WFr,HFr,OQ,UFr,JFr,YFr,EM,_be,KFr,ZFr,VQ,eTr,oTr,rTr,ube,tTr,aTr,IL,CPe,Qc,CM,bbe,qL,nTr,vbe,sTr,wPe,kr,NL,lTr,Wc,iTr,XQ,dTr,cTr,zQ,fTr,mTr,gTr,jL,hTr,Fbe,pTr,_Tr,uTr,Ct,DL,bTr,Tbe,vTr,FTr,Hc,TTr,Mbe,MTr,ETr,QQ,CTr,wTr,ATr,Ebe,yTr,LTr,GL,xTr,Ao,OL,kTr,Cbe,STr,RTr,Ln,BTr,wbe,PTr,$Tr,Abe,ITr,qTr,ybe,NTr,jTr,DTr,Lbe,wM,xbe,GTr,OTr,WQ,VTr,XTr,zTr,kbe,QTr,WTr,VL,APe,Uc,AM,Sbe,XL,HTr,Rbe,UTr,yPe,Sr,zL,JTr,Jc,YTr,HQ,KTr,ZTr,UQ,eMr,oMr,rMr,QL,tMr,Bbe,aMr,nMr,sMr,wt,WL,lMr,Pbe,iMr,dMr,Yc,cMr,$be,fMr,mMr,JQ,gMr,hMr,pMr,Ibe,_Mr,uMr,HL,bMr,yo,UL,vMr,qbe,FMr,TMr,xn,MMr,Nbe,EMr,CMr,jbe,wMr,AMr,Dbe,yMr,LMr,xMr,Gbe,yM,Obe,kMr,SMr,YQ,RMr,BMr,PMr,Vbe,$Mr,IMr,JL,LPe,Kc,LM,Xbe,YL,qMr,zbe,NMr,xPe,Rr,KL,jMr,Zc,DMr,KQ,GMr,OMr,ZQ,VMr,XMr,zMr,ZL,QMr,Qbe,WMr,HMr,UMr,At,e8,JMr,Wbe,YMr,KMr,ef,ZMr,Hbe,eEr,oEr,eW,rEr,tEr,aEr,Ube,nEr,sEr,o8,lEr,Lo,r8,iEr,Jbe,dEr,cEr,kn,fEr,Ybe,mEr,gEr,Kbe,hEr,pEr,Zbe,_Er,uEr,bEr,z,xM,e2e,vEr,FEr,oW,TEr,MEr,EEr,kM,o2e,CEr,wEr,rW,AEr,yEr,LEr,SM,r2e,xEr,kEr,tW,SEr,REr,BEr,RM,t2e,PEr,$Er,aW,IEr,qEr,NEr,BM,a2e,jEr,DEr,nW,GEr,OEr,VEr,PM,n2e,XEr,zEr,sW,QEr,WEr,HEr,$M,s2e,UEr,JEr,lW,YEr,KEr,ZEr,IM,l2e,e3r,o3r,iW,r3r,t3r,a3r,qM,i2e,n3r,s3r,dW,l3r,i3r,d3r,NM,d2e,c3r,f3r,cW,m3r,g3r,h3r,jM,c2e,p3r,_3r,fW,u3r,b3r,v3r,DM,f2e,F3r,T3r,mW,M3r,E3r,C3r,GM,m2e,w3r,A3r,gW,y3r,L3r,x3r,OM,g2e,k3r,S3r,hW,R3r,B3r,P3r,VM,h2e,$3r,I3r,pW,q3r,N3r,j3r,XM,p2e,D3r,G3r,_W,O3r,V3r,X3r,zM,_2e,z3r,Q3r,uW,W3r,H3r,U3r,QM,u2e,J3r,Y3r,bW,K3r,Z3r,eCr,WM,b2e,oCr,rCr,vW,tCr,aCr,nCr,HM,v2e,sCr,lCr,FW,iCr,dCr,cCr,UM,F2e,fCr,mCr,TW,gCr,hCr,pCr,JM,T2e,_Cr,uCr,MW,bCr,vCr,FCr,YM,M2e,TCr,MCr,EW,ECr,CCr,wCr,KM,E2e,ACr,yCr,CW,LCr,xCr,kCr,ZM,C2e,SCr,RCr,wW,BCr,PCr,$Cr,w2e,ICr,qCr,t8,kPe,of,eE,A2e,a8,NCr,y2e,jCr,SPe,Br,n8,DCr,rf,GCr,AW,OCr,VCr,yW,XCr,zCr,QCr,s8,WCr,L2e,HCr,UCr,JCr,yt,l8,YCr,x2e,KCr,ZCr,tf,ewr,k2e,owr,rwr,LW,twr,awr,nwr,S2e,swr,lwr,i8,iwr,xo,d8,dwr,R2e,cwr,fwr,Sn,mwr,B2e,gwr,hwr,P2e,pwr,_wr,$2e,uwr,bwr,vwr,ca,oE,I2e,Fwr,Twr,xW,Mwr,Ewr,Cwr,rE,q2e,wwr,Awr,kW,ywr,Lwr,xwr,tE,N2e,kwr,Swr,SW,Rwr,Bwr,Pwr,aE,j2e,$wr,Iwr,RW,qwr,Nwr,jwr,nE,D2e,Dwr,Gwr,BW,Owr,Vwr,Xwr,G2e,zwr,Qwr,c8,RPe,af,sE,O2e,f8,Wwr,V2e,Hwr,BPe,Pr,m8,Uwr,nf,Jwr,PW,Ywr,Kwr,$W,Zwr,eAr,oAr,g8,rAr,X2e,tAr,aAr,nAr,Lt,h8,sAr,z2e,lAr,iAr,sf,dAr,Q2e,cAr,fAr,IW,mAr,gAr,hAr,W2e,pAr,_Ar,p8,uAr,ko,_8,bAr,H2e,vAr,FAr,Rn,TAr,U2e,MAr,EAr,J2e,CAr,wAr,Y2e,AAr,yAr,LAr,me,lE,K2e,xAr,kAr,qW,SAr,RAr,BAr,iE,Z2e,PAr,$Ar,NW,IAr,qAr,NAr,dE,e5e,jAr,DAr,jW,GAr,OAr,VAr,cE,o5e,XAr,zAr,DW,QAr,WAr,HAr,fE,r5e,UAr,JAr,GW,YAr,KAr,ZAr,mE,t5e,e0r,o0r,OW,r0r,t0r,a0r,gE,a5e,n0r,s0r,VW,l0r,i0r,d0r,hE,n5e,c0r,f0r,XW,m0r,g0r,h0r,pE,s5e,p0r,_0r,zW,u0r,b0r,v0r,_E,l5e,F0r,T0r,QW,M0r,E0r,C0r,uE,i5e,w0r,A0r,WW,y0r,L0r,x0r,bE,d5e,k0r,S0r,HW,R0r,B0r,P0r,c5e,$0r,I0r,u8,PPe,lf,vE,f5e,b8,q0r,m5e,N0r,$Pe,$r,v8,j0r,df,D0r,UW,G0r,O0r,JW,V0r,X0r,z0r,F8,Q0r,g5e,W0r,H0r,U0r,xt,T8,J0r,h5e,Y0r,K0r,cf,Z0r,p5e,eyr,oyr,YW,ryr,tyr,ayr,_5e,nyr,syr,M8,lyr,So,E8,iyr,u5e,dyr,cyr,Bn,fyr,b5e,myr,gyr,v5e,hyr,pyr,F5e,_yr,uyr,byr,ve,FE,T5e,vyr,Fyr,KW,Tyr,Myr,Eyr,TE,M5e,Cyr,wyr,ZW,Ayr,yyr,Lyr,ME,E5e,xyr,kyr,eH,Syr,Ryr,Byr,EE,C5e,Pyr,$yr,oH,Iyr,qyr,Nyr,CE,w5e,jyr,Dyr,rH,Gyr,Oyr,Vyr,wE,A5e,Xyr,zyr,tH,Qyr,Wyr,Hyr,AE,y5e,Uyr,Jyr,aH,Yyr,Kyr,Zyr,yE,L5e,eLr,oLr,nH,rLr,tLr,aLr,LE,x5e,nLr,sLr,sH,lLr,iLr,dLr,xE,k5e,cLr,fLr,lH,mLr,gLr,hLr,S5e,pLr,_Lr,C8,IPe,ff,kE,R5e,w8,uLr,B5e,bLr,qPe,Ir,A8,vLr,mf,FLr,iH,TLr,MLr,dH,ELr,CLr,wLr,y8,ALr,P5e,yLr,LLr,xLr,kt,L8,kLr,$5e,SLr,RLr,gf,BLr,I5e,PLr,$Lr,cH,ILr,qLr,NLr,q5e,jLr,DLr,x8,GLr,Ro,k8,OLr,N5e,VLr,XLr,Pn,zLr,j5e,QLr,WLr,D5e,HLr,ULr,G5e,JLr,YLr,KLr,Ce,SE,O5e,ZLr,e8r,fH,o8r,r8r,t8r,RE,V5e,a8r,n8r,mH,s8r,l8r,i8r,BE,X5e,d8r,c8r,gH,f8r,m8r,g8r,PE,z5e,h8r,p8r,hH,_8r,u8r,b8r,$E,Q5e,v8r,F8r,pH,T8r,M8r,E8r,IE,W5e,C8r,w8r,_H,A8r,y8r,L8r,qE,H5e,x8r,k8r,uH,S8r,R8r,B8r,NE,U5e,P8r,$8r,bH,I8r,q8r,N8r,jE,J5e,j8r,D8r,vH,G8r,O8r,V8r,Y5e,X8r,z8r,S8,NPe,hf,DE,K5e,R8,Q8r,Z5e,W8r,jPe,qr,B8,H8r,pf,U8r,FH,J8r,Y8r,TH,K8r,Z8r,e7r,P8,o7r,eve,r7r,t7r,a7r,St,$8,n7r,ove,s7r,l7r,_f,i7r,rve,d7r,c7r,MH,f7r,m7r,g7r,tve,h7r,p7r,I8,_7r,Bo,q8,u7r,ave,b7r,v7r,$n,F7r,nve,T7r,M7r,sve,E7r,C7r,lve,w7r,A7r,y7r,Fe,GE,ive,L7r,x7r,EH,k7r,S7r,R7r,OE,dve,B7r,P7r,CH,$7r,I7r,q7r,VE,cve,N7r,j7r,wH,D7r,G7r,O7r,XE,fve,V7r,X7r,AH,z7r,Q7r,W7r,zE,mve,H7r,U7r,yH,J7r,Y7r,K7r,QE,gve,Z7r,e9r,LH,o9r,r9r,t9r,WE,hve,a9r,n9r,xH,s9r,l9r,i9r,HE,pve,d9r,c9r,kH,f9r,m9r,g9r,UE,_ve,h9r,p9r,SH,_9r,u9r,b9r,JE,uve,v9r,F9r,RH,T9r,M9r,E9r,bve,C9r,w9r,N8,DPe,uf,YE,vve,j8,A9r,Fve,y9r,GPe,Nr,D8,L9r,bf,x9r,BH,k9r,S9r,PH,R9r,B9r,P9r,G8,$9r,Tve,I9r,q9r,N9r,Rt,O8,j9r,Mve,D9r,G9r,vf,O9r,Eve,V9r,X9r,$H,z9r,Q9r,W9r,Cve,H9r,U9r,V8,J9r,Po,X8,Y9r,wve,K9r,Z9r,In,exr,Ave,oxr,rxr,yve,txr,axr,Lve,nxr,sxr,lxr,Te,KE,xve,ixr,dxr,IH,cxr,fxr,mxr,ZE,kve,gxr,hxr,qH,pxr,_xr,uxr,e3,Sve,bxr,vxr,NH,Fxr,Txr,Mxr,o3,Rve,Exr,Cxr,jH,wxr,Axr,yxr,r3,Bve,Lxr,xxr,DH,kxr,Sxr,Rxr,t3,Pve,Bxr,Pxr,GH,$xr,Ixr,qxr,a3,$ve,Nxr,jxr,OH,Dxr,Gxr,Oxr,n3,Ive,Vxr,Xxr,VH,zxr,Qxr,Wxr,s3,qve,Hxr,Uxr,XH,Jxr,Yxr,Kxr,l3,Nve,Zxr,ekr,zH,okr,rkr,tkr,jve,akr,nkr,z8,OPe,Ff,i3,Dve,Q8,skr,Gve,lkr,VPe,jr,W8,ikr,Tf,dkr,QH,ckr,fkr,WH,mkr,gkr,hkr,H8,pkr,Ove,_kr,ukr,bkr,Bt,U8,vkr,Vve,Fkr,Tkr,Mf,Mkr,Xve,Ekr,Ckr,HH,wkr,Akr,ykr,zve,Lkr,xkr,J8,kkr,$o,Y8,Skr,Qve,Rkr,Bkr,qn,Pkr,Wve,$kr,Ikr,Hve,qkr,Nkr,Uve,jkr,Dkr,Gkr,Be,d3,Jve,Okr,Vkr,UH,Xkr,zkr,Qkr,c3,Yve,Wkr,Hkr,JH,Ukr,Jkr,Ykr,f3,Kve,Kkr,Zkr,YH,eSr,oSr,rSr,m3,Zve,tSr,aSr,KH,nSr,sSr,lSr,g3,eFe,iSr,dSr,ZH,cSr,fSr,mSr,h3,oFe,gSr,hSr,eU,pSr,_Sr,uSr,p3,rFe,bSr,vSr,oU,FSr,TSr,MSr,_3,tFe,ESr,CSr,rU,wSr,ASr,ySr,aFe,LSr,xSr,K8,XPe,Ef,u3,nFe,Z8,kSr,sFe,SSr,zPe,Dr,e7,RSr,Cf,BSr,tU,PSr,$Sr,aU,ISr,qSr,NSr,o7,jSr,lFe,DSr,GSr,OSr,Pt,r7,VSr,iFe,XSr,zSr,wf,QSr,dFe,WSr,HSr,nU,USr,JSr,YSr,cFe,KSr,ZSr,t7,eRr,Io,a7,oRr,fFe,rRr,tRr,Nn,aRr,mFe,nRr,sRr,gFe,lRr,iRr,hFe,dRr,cRr,fRr,Pe,b3,pFe,mRr,gRr,sU,hRr,pRr,_Rr,v3,_Fe,uRr,bRr,lU,vRr,FRr,TRr,F3,uFe,MRr,ERr,iU,CRr,wRr,ARr,T3,bFe,yRr,LRr,dU,xRr,kRr,SRr,M3,vFe,RRr,BRr,cU,PRr,$Rr,IRr,E3,FFe,qRr,NRr,fU,jRr,DRr,GRr,C3,TFe,ORr,VRr,mU,XRr,zRr,QRr,w3,MFe,WRr,HRr,gU,URr,JRr,YRr,EFe,KRr,ZRr,n7,QPe,Af,A3,CFe,s7,eBr,wFe,oBr,WPe,Gr,l7,rBr,yf,tBr,hU,aBr,nBr,pU,sBr,lBr,iBr,i7,dBr,AFe,cBr,fBr,mBr,$t,d7,gBr,yFe,hBr,pBr,Lf,_Br,LFe,uBr,bBr,_U,vBr,FBr,TBr,xFe,MBr,EBr,c7,CBr,qo,f7,wBr,kFe,ABr,yBr,jn,LBr,SFe,xBr,kBr,RFe,SBr,RBr,BFe,BBr,PBr,$Br,PFe,y3,$Fe,IBr,qBr,uU,NBr,jBr,DBr,IFe,GBr,OBr,m7,HPe,xf,L3,qFe,g7,VBr,NFe,XBr,UPe,Or,h7,zBr,kf,QBr,bU,WBr,HBr,vU,UBr,JBr,YBr,p7,KBr,jFe,ZBr,ePr,oPr,It,_7,rPr,DFe,tPr,aPr,Sf,nPr,GFe,sPr,lPr,FU,iPr,dPr,cPr,OFe,fPr,mPr,u7,gPr,No,b7,hPr,VFe,pPr,_Pr,Dn,uPr,XFe,bPr,vPr,zFe,FPr,TPr,QFe,MPr,EPr,CPr,v7,x3,WFe,wPr,APr,TU,yPr,LPr,xPr,k3,HFe,kPr,SPr,MU,RPr,BPr,PPr,UFe,$Pr,IPr,F7,JPe,Rf,S3,JFe,T7,qPr,YFe,NPr,YPe,Vr,M7,jPr,Bf,DPr,EU,GPr,OPr,CU,VPr,XPr,zPr,E7,QPr,KFe,WPr,HPr,UPr,qt,C7,JPr,ZFe,YPr,KPr,Pf,ZPr,eTe,e$r,o$r,wU,r$r,t$r,a$r,oTe,n$r,s$r,w7,l$r,jo,A7,i$r,rTe,d$r,c$r,Gn,f$r,tTe,m$r,g$r,aTe,h$r,p$r,nTe,_$r,u$r,b$r,sTe,R3,lTe,v$r,F$r,AU,T$r,M$r,E$r,iTe,C$r,w$r,y7,KPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),qC=new X({}),NC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new A$r({props:{warning:!0,$$slots:{default:[AAt]},$$scope:{ctx:If}}}),jC=new X({}),DC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/configuration_auto.py#L563"}}),VC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/configuration_auto.py#L586"}}),XC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),zC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/configuration_auto.py#L708"}}),QC=new X({}),WC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/tokenization_auto.py#L359"}}),JC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16654/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/tokenization_auto.py#L373"}}),YC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),KC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/tokenization_auto.py#L569"}}),ZC=new X({}),ew=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/feature_extraction_auto.py#L173"}}),tw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16654/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),jh=new A$r({props:{$$slots:{default:[yAt]},$$scope:{ctx:If}}}),aw=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),nw=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/feature_extraction_auto.py#L314"}}),sw=new X({}),lw=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/processing_auto.py#L71"}}),cw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/processing_auto.py#L85"}}),Yh=new A$r({props:{$$slots:{default:[LAt]},$$scope:{ctx:If}}}),fw=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),mw=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/processing_auto.py#L238"}}),gw=new X({}),hw=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L716"}}),_w=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAConfig">FLAVAConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAModel">FLAVAModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),bw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),Tw=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L723"}}),Ew=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAConfig">FLAVAConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAForPreTraining">FLAVAForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),ww=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yw=new X({}),Lw=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L738"}}),kw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),Rw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L745"}}),qw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),jw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L752"}}),Xw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Qw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L761"}}),Yw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Zw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L795"}}),aA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),sA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L802"}}),fA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),gA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L788"}}),bA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),FA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L770"}}),wA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),yA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L777"}}),RA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),PA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),$A=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),qA=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L811"}}),jA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),GA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),OA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),XA=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L850"}}),QA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),HA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),UA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L857"}}),ZA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),o0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L880"}}),s0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),l0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),i0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),d0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),f0=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L864"}}),g0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),h0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),p0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),_0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L871"}}),F0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),T0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),M0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w0=new X({}),A0=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L889"}}),L0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),k0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new X({}),B0=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L896"}}),$0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),q0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),N0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new X({}),D0=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L843"}}),O0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),X0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),z0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new X({}),W0=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L818"}}),U0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Y0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z0=new X({}),ey=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L825"}}),ry=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),ty=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),ay=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),ny=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_auto.py#L834"}}),dy=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),cy=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),fy=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),my=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),_y=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),by=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fy=new X({}),Ty=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),Ey=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),wy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),Ly=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),ky=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),Ry=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),qy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),jy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Vy=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),zy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Wy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),Hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new X({}),Jy=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Ky=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),Zy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),eL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),oL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new X({}),tL=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),nL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),sL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),lL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),iL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new X({}),cL=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),mL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),gL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),hL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),pL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new X({}),uL=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),vL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),FL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),TL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),ML=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EL=new X({}),CL=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),AL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),yL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),LL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),xL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kL=new X({}),SL=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),BL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),PL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),$L=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),IL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qL=new X({}),NL=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),DL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),GL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),OL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),VL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XL=new X({}),zL=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),WL=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),HL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),UL=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),JL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YL=new X({}),KL=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),e8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),r8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a8=new X({}),n8=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),l8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),i8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),d8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f8=new X({}),m8=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),h8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),_8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),u8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b8=new X({}),v8=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),T8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),E8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w8=new X({}),A8=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),L8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),k8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R8=new X({}),B8=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),$8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),I8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),q8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),N8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j8=new X({}),D8=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),O8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),X8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),z8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q8=new X({}),W8=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),U8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),Y8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z8=new X({}),e7=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),r7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),t7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),a7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),n7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s7=new X({}),l7=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),d7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),c7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),f7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),m7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g7=new X({}),h7=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),_7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),u7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),b7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T7=new X({}),M7=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),C7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),A7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16654/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16654/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16654/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){ee=a("meta"),co=l(),ce=a("h1"),we=a("a"),io=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),qi=o("Auto Classes"),qf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),BC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ke=l(),fo=a("p"),Di=o("Instantiating one of "),On=a("a"),PC=o("AutoConfig"),Vn=o(", "),Xn=a("a"),$C=o("AutoModel"),Gi=o(`, and
`),zn=a("a"),IC=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),mo=l(),ue=a("p"),w9=o("will create a model that is an instance of "),Vi=a("a"),A9=o("BertModel"),y9=o("."),zo=l(),Ga=a("p"),L9=o("There is one class of "),Df=a("code"),x9=o("AutoModel"),cqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),YRe=l(),Xi=a("h2"),Gf=a("a"),vY=a("span"),f(qC.$$.fragment),fqe=l(),FY=a("span"),mqe=o("Extending the Auto Classes"),KRe=l(),Qn=a("p"),gqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),TY=a("code"),hqe=o("NewModel"),pqe=o(", make sure you have a "),MY=a("code"),_qe=o("NewModelConfig"),uqe=o(` then you can add those to the auto
classes like this:`),ZRe=l(),f(NC.$$.fragment),eBe=l(),k9=a("p"),bqe=o("You will then be able to use the auto classes like you would usually do!"),oBe=l(),f(Of.$$.fragment),rBe=l(),zi=a("h2"),Vf=a("a"),EY=a("span"),f(jC.$$.fragment),vqe=l(),CY=a("span"),Fqe=o("AutoConfig"),tBe=l(),Qo=a("div"),f(DC.$$.fragment),Tqe=l(),GC=a("p"),Mqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),S9=a("a"),Eqe=o("from_pretrained()"),Cqe=o(" class method."),wqe=l(),OC=a("p"),Aqe=o("This class cannot be instantiated directly using "),wY=a("code"),yqe=o("__init__()"),Lqe=o(" (throws an error)."),xqe=l(),go=a("div"),f(VC.$$.fragment),kqe=l(),AY=a("p"),Sqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Rqe=l(),Qi=a("p"),Bqe=o("The configuration class to instantiate is selected based on the "),yY=a("code"),Pqe=o("model_type"),$qe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),LY=a("code"),Iqe=o("pretrained_model_name_or_path"),qqe=o(":"),Nqe=l(),v=a("ul"),Xf=a("li"),xY=a("strong"),jqe=o("albert"),Dqe=o(" \u2014 "),R9=a("a"),Gqe=o("AlbertConfig"),Oqe=o(" (ALBERT model)"),Vqe=l(),zf=a("li"),kY=a("strong"),Xqe=o("bart"),zqe=o(" \u2014 "),B9=a("a"),Qqe=o("BartConfig"),Wqe=o(" (BART model)"),Hqe=l(),Qf=a("li"),SY=a("strong"),Uqe=o("beit"),Jqe=o(" \u2014 "),P9=a("a"),Yqe=o("BeitConfig"),Kqe=o(" (BEiT model)"),Zqe=l(),Wf=a("li"),RY=a("strong"),eNe=o("bert"),oNe=o(" \u2014 "),$9=a("a"),rNe=o("BertConfig"),tNe=o(" (BERT model)"),aNe=l(),Hf=a("li"),BY=a("strong"),nNe=o("bert-generation"),sNe=o(" \u2014 "),I9=a("a"),lNe=o("BertGenerationConfig"),iNe=o(" (Bert Generation model)"),dNe=l(),Uf=a("li"),PY=a("strong"),cNe=o("big_bird"),fNe=o(" \u2014 "),q9=a("a"),mNe=o("BigBirdConfig"),gNe=o(" (BigBird model)"),hNe=l(),Jf=a("li"),$Y=a("strong"),pNe=o("bigbird_pegasus"),_Ne=o(" \u2014 "),N9=a("a"),uNe=o("BigBirdPegasusConfig"),bNe=o(" (BigBirdPegasus model)"),vNe=l(),Yf=a("li"),IY=a("strong"),FNe=o("blenderbot"),TNe=o(" \u2014 "),j9=a("a"),MNe=o("BlenderbotConfig"),ENe=o(" (Blenderbot model)"),CNe=l(),Kf=a("li"),qY=a("strong"),wNe=o("blenderbot-small"),ANe=o(" \u2014 "),D9=a("a"),yNe=o("BlenderbotSmallConfig"),LNe=o(" (BlenderbotSmall model)"),xNe=l(),Zf=a("li"),NY=a("strong"),kNe=o("camembert"),SNe=o(" \u2014 "),G9=a("a"),RNe=o("CamembertConfig"),BNe=o(" (CamemBERT model)"),PNe=l(),em=a("li"),jY=a("strong"),$Ne=o("canine"),INe=o(" \u2014 "),O9=a("a"),qNe=o("CanineConfig"),NNe=o(" (Canine model)"),jNe=l(),om=a("li"),DY=a("strong"),DNe=o("clip"),GNe=o(" \u2014 "),V9=a("a"),ONe=o("CLIPConfig"),VNe=o(" (CLIP model)"),XNe=l(),rm=a("li"),GY=a("strong"),zNe=o("convbert"),QNe=o(" \u2014 "),X9=a("a"),WNe=o("ConvBertConfig"),HNe=o(" (ConvBERT model)"),UNe=l(),tm=a("li"),OY=a("strong"),JNe=o("convnext"),YNe=o(" \u2014 "),z9=a("a"),KNe=o("ConvNextConfig"),ZNe=o(" (ConvNext model)"),eje=l(),am=a("li"),VY=a("strong"),oje=o("ctrl"),rje=o(" \u2014 "),Q9=a("a"),tje=o("CTRLConfig"),aje=o(" (CTRL model)"),nje=l(),nm=a("li"),XY=a("strong"),sje=o("data2vec-audio"),lje=o(" \u2014 "),W9=a("a"),ije=o("Data2VecAudioConfig"),dje=o(" (Data2VecAudio model)"),cje=l(),sm=a("li"),zY=a("strong"),fje=o("data2vec-text"),mje=o(" \u2014 "),H9=a("a"),gje=o("Data2VecTextConfig"),hje=o(" (Data2VecText model)"),pje=l(),lm=a("li"),QY=a("strong"),_je=o("data2vec-vision"),uje=o(" \u2014 "),U9=a("a"),bje=o("Data2VecVisionConfig"),vje=o(" (Data2VecVision model)"),Fje=l(),im=a("li"),WY=a("strong"),Tje=o("deberta"),Mje=o(" \u2014 "),J9=a("a"),Eje=o("DebertaConfig"),Cje=o(" (DeBERTa model)"),wje=l(),dm=a("li"),HY=a("strong"),Aje=o("deberta-v2"),yje=o(" \u2014 "),Y9=a("a"),Lje=o("DebertaV2Config"),xje=o(" (DeBERTa-v2 model)"),kje=l(),cm=a("li"),UY=a("strong"),Sje=o("decision_transformer"),Rje=o(" \u2014 "),K9=a("a"),Bje=o("DecisionTransformerConfig"),Pje=o(" (Decision Transformer model)"),$je=l(),fm=a("li"),JY=a("strong"),Ije=o("deit"),qje=o(" \u2014 "),Z9=a("a"),Nje=o("DeiTConfig"),jje=o(" (DeiT model)"),Dje=l(),mm=a("li"),YY=a("strong"),Gje=o("detr"),Oje=o(" \u2014 "),ex=a("a"),Vje=o("DetrConfig"),Xje=o(" (DETR model)"),zje=l(),gm=a("li"),KY=a("strong"),Qje=o("distilbert"),Wje=o(" \u2014 "),ox=a("a"),Hje=o("DistilBertConfig"),Uje=o(" (DistilBERT model)"),Jje=l(),hm=a("li"),ZY=a("strong"),Yje=o("dpr"),Kje=o(" \u2014 "),rx=a("a"),Zje=o("DPRConfig"),eDe=o(" (DPR model)"),oDe=l(),pm=a("li"),eK=a("strong"),rDe=o("dpt"),tDe=o(" \u2014 "),tx=a("a"),aDe=o("DPTConfig"),nDe=o(" (DPT model)"),sDe=l(),_m=a("li"),oK=a("strong"),lDe=o("electra"),iDe=o(" \u2014 "),ax=a("a"),dDe=o("ElectraConfig"),cDe=o(" (ELECTRA model)"),fDe=l(),um=a("li"),rK=a("strong"),mDe=o("encoder-decoder"),gDe=o(" \u2014 "),nx=a("a"),hDe=o("EncoderDecoderConfig"),pDe=o(" (Encoder decoder model)"),_De=l(),bm=a("li"),tK=a("strong"),uDe=o("flaubert"),bDe=o(" \u2014 "),sx=a("a"),vDe=o("FlaubertConfig"),FDe=o(" (FlauBERT model)"),TDe=l(),vm=a("li"),aK=a("strong"),MDe=o("flava"),EDe=o(" \u2014 "),lx=a("a"),CDe=o("FLAVAConfig"),wDe=o(" (FLAVA model)"),ADe=l(),Fm=a("li"),nK=a("strong"),yDe=o("fnet"),LDe=o(" \u2014 "),ix=a("a"),xDe=o("FNetConfig"),kDe=o(" (FNet model)"),SDe=l(),Tm=a("li"),sK=a("strong"),RDe=o("fsmt"),BDe=o(" \u2014 "),dx=a("a"),PDe=o("FSMTConfig"),$De=o(" (FairSeq Machine-Translation model)"),IDe=l(),Mm=a("li"),lK=a("strong"),qDe=o("funnel"),NDe=o(" \u2014 "),cx=a("a"),jDe=o("FunnelConfig"),DDe=o(" (Funnel Transformer model)"),GDe=l(),Em=a("li"),iK=a("strong"),ODe=o("glpn"),VDe=o(" \u2014 "),fx=a("a"),XDe=o("GLPNConfig"),zDe=o(" (GLPN model)"),QDe=l(),Cm=a("li"),dK=a("strong"),WDe=o("gpt2"),HDe=o(" \u2014 "),mx=a("a"),UDe=o("GPT2Config"),JDe=o(" (OpenAI GPT-2 model)"),YDe=l(),wm=a("li"),cK=a("strong"),KDe=o("gpt_neo"),ZDe=o(" \u2014 "),gx=a("a"),eGe=o("GPTNeoConfig"),oGe=o(" (GPT Neo model)"),rGe=l(),Am=a("li"),fK=a("strong"),tGe=o("gptj"),aGe=o(" \u2014 "),hx=a("a"),nGe=o("GPTJConfig"),sGe=o(" (GPT-J model)"),lGe=l(),ym=a("li"),mK=a("strong"),iGe=o("hubert"),dGe=o(" \u2014 "),px=a("a"),cGe=o("HubertConfig"),fGe=o(" (Hubert model)"),mGe=l(),Lm=a("li"),gK=a("strong"),gGe=o("ibert"),hGe=o(" \u2014 "),_x=a("a"),pGe=o("IBertConfig"),_Ge=o(" (I-BERT model)"),uGe=l(),xm=a("li"),hK=a("strong"),bGe=o("imagegpt"),vGe=o(" \u2014 "),ux=a("a"),FGe=o("ImageGPTConfig"),TGe=o(" (ImageGPT model)"),MGe=l(),km=a("li"),pK=a("strong"),EGe=o("layoutlm"),CGe=o(" \u2014 "),bx=a("a"),wGe=o("LayoutLMConfig"),AGe=o(" (LayoutLM model)"),yGe=l(),Sm=a("li"),_K=a("strong"),LGe=o("layoutlmv2"),xGe=o(" \u2014 "),vx=a("a"),kGe=o("LayoutLMv2Config"),SGe=o(" (LayoutLMv2 model)"),RGe=l(),Rm=a("li"),uK=a("strong"),BGe=o("led"),PGe=o(" \u2014 "),Fx=a("a"),$Ge=o("LEDConfig"),IGe=o(" (LED model)"),qGe=l(),Bm=a("li"),bK=a("strong"),NGe=o("longformer"),jGe=o(" \u2014 "),Tx=a("a"),DGe=o("LongformerConfig"),GGe=o(" (Longformer model)"),OGe=l(),Pm=a("li"),vK=a("strong"),VGe=o("luke"),XGe=o(" \u2014 "),Mx=a("a"),zGe=o("LukeConfig"),QGe=o(" (LUKE model)"),WGe=l(),$m=a("li"),FK=a("strong"),HGe=o("lxmert"),UGe=o(" \u2014 "),Ex=a("a"),JGe=o("LxmertConfig"),YGe=o(" (LXMERT model)"),KGe=l(),Im=a("li"),TK=a("strong"),ZGe=o("m2m_100"),eOe=o(" \u2014 "),Cx=a("a"),oOe=o("M2M100Config"),rOe=o(" (M2M100 model)"),tOe=l(),qm=a("li"),MK=a("strong"),aOe=o("marian"),nOe=o(" \u2014 "),wx=a("a"),sOe=o("MarianConfig"),lOe=o(" (Marian model)"),iOe=l(),Nm=a("li"),EK=a("strong"),dOe=o("maskformer"),cOe=o(" \u2014 "),Ax=a("a"),fOe=o("MaskFormerConfig"),mOe=o(" (MaskFormer model)"),gOe=l(),jm=a("li"),CK=a("strong"),hOe=o("mbart"),pOe=o(" \u2014 "),yx=a("a"),_Oe=o("MBartConfig"),uOe=o(" (mBART model)"),bOe=l(),Dm=a("li"),wK=a("strong"),vOe=o("megatron-bert"),FOe=o(" \u2014 "),Lx=a("a"),TOe=o("MegatronBertConfig"),MOe=o(" (MegatronBert model)"),EOe=l(),Gm=a("li"),AK=a("strong"),COe=o("mobilebert"),wOe=o(" \u2014 "),xx=a("a"),AOe=o("MobileBertConfig"),yOe=o(" (MobileBERT model)"),LOe=l(),Om=a("li"),yK=a("strong"),xOe=o("mpnet"),kOe=o(" \u2014 "),kx=a("a"),SOe=o("MPNetConfig"),ROe=o(" (MPNet model)"),BOe=l(),Vm=a("li"),LK=a("strong"),POe=o("mt5"),$Oe=o(" \u2014 "),Sx=a("a"),IOe=o("MT5Config"),qOe=o(" (mT5 model)"),NOe=l(),Xm=a("li"),xK=a("strong"),jOe=o("nystromformer"),DOe=o(" \u2014 "),Rx=a("a"),GOe=o("NystromformerConfig"),OOe=o(" (Nystromformer model)"),VOe=l(),zm=a("li"),kK=a("strong"),XOe=o("openai-gpt"),zOe=o(" \u2014 "),Bx=a("a"),QOe=o("OpenAIGPTConfig"),WOe=o(" (OpenAI GPT model)"),HOe=l(),Qm=a("li"),SK=a("strong"),UOe=o("pegasus"),JOe=o(" \u2014 "),Px=a("a"),YOe=o("PegasusConfig"),KOe=o(" (Pegasus model)"),ZOe=l(),Wm=a("li"),RK=a("strong"),eVe=o("perceiver"),oVe=o(" \u2014 "),$x=a("a"),rVe=o("PerceiverConfig"),tVe=o(" (Perceiver model)"),aVe=l(),Hm=a("li"),BK=a("strong"),nVe=o("plbart"),sVe=o(" \u2014 "),Ix=a("a"),lVe=o("PLBartConfig"),iVe=o(" (PLBart model)"),dVe=l(),Um=a("li"),PK=a("strong"),cVe=o("poolformer"),fVe=o(" \u2014 "),qx=a("a"),mVe=o("PoolFormerConfig"),gVe=o(" (PoolFormer model)"),hVe=l(),Jm=a("li"),$K=a("strong"),pVe=o("prophetnet"),_Ve=o(" \u2014 "),Nx=a("a"),uVe=o("ProphetNetConfig"),bVe=o(" (ProphetNet model)"),vVe=l(),Ym=a("li"),IK=a("strong"),FVe=o("qdqbert"),TVe=o(" \u2014 "),jx=a("a"),MVe=o("QDQBertConfig"),EVe=o(" (QDQBert model)"),CVe=l(),Km=a("li"),qK=a("strong"),wVe=o("rag"),AVe=o(" \u2014 "),Dx=a("a"),yVe=o("RagConfig"),LVe=o(" (RAG model)"),xVe=l(),Zm=a("li"),NK=a("strong"),kVe=o("realm"),SVe=o(" \u2014 "),Gx=a("a"),RVe=o("RealmConfig"),BVe=o(" (Realm model)"),PVe=l(),eg=a("li"),jK=a("strong"),$Ve=o("reformer"),IVe=o(" \u2014 "),Ox=a("a"),qVe=o("ReformerConfig"),NVe=o(" (Reformer model)"),jVe=l(),og=a("li"),DK=a("strong"),DVe=o("regnet"),GVe=o(" \u2014 "),Vx=a("a"),OVe=o("RegNetConfig"),VVe=o(" (RegNet model)"),XVe=l(),rg=a("li"),GK=a("strong"),zVe=o("rembert"),QVe=o(" \u2014 "),Xx=a("a"),WVe=o("RemBertConfig"),HVe=o(" (RemBERT model)"),UVe=l(),tg=a("li"),OK=a("strong"),JVe=o("resnet"),YVe=o(" \u2014 "),zx=a("a"),KVe=o("ResNetConfig"),ZVe=o(" (ResNet model)"),eXe=l(),ag=a("li"),VK=a("strong"),oXe=o("retribert"),rXe=o(" \u2014 "),Qx=a("a"),tXe=o("RetriBertConfig"),aXe=o(" (RetriBERT model)"),nXe=l(),ng=a("li"),XK=a("strong"),sXe=o("roberta"),lXe=o(" \u2014 "),Wx=a("a"),iXe=o("RobertaConfig"),dXe=o(" (RoBERTa model)"),cXe=l(),sg=a("li"),zK=a("strong"),fXe=o("roformer"),mXe=o(" \u2014 "),Hx=a("a"),gXe=o("RoFormerConfig"),hXe=o(" (RoFormer model)"),pXe=l(),lg=a("li"),QK=a("strong"),_Xe=o("segformer"),uXe=o(" \u2014 "),Ux=a("a"),bXe=o("SegformerConfig"),vXe=o(" (SegFormer model)"),FXe=l(),ig=a("li"),WK=a("strong"),TXe=o("sew"),MXe=o(" \u2014 "),Jx=a("a"),EXe=o("SEWConfig"),CXe=o(" (SEW model)"),wXe=l(),dg=a("li"),HK=a("strong"),AXe=o("sew-d"),yXe=o(" \u2014 "),Yx=a("a"),LXe=o("SEWDConfig"),xXe=o(" (SEW-D model)"),kXe=l(),cg=a("li"),UK=a("strong"),SXe=o("speech-encoder-decoder"),RXe=o(" \u2014 "),Kx=a("a"),BXe=o("SpeechEncoderDecoderConfig"),PXe=o(" (Speech Encoder decoder model)"),$Xe=l(),fg=a("li"),JK=a("strong"),IXe=o("speech_to_text"),qXe=o(" \u2014 "),Zx=a("a"),NXe=o("Speech2TextConfig"),jXe=o(" (Speech2Text model)"),DXe=l(),mg=a("li"),YK=a("strong"),GXe=o("speech_to_text_2"),OXe=o(" \u2014 "),ek=a("a"),VXe=o("Speech2Text2Config"),XXe=o(" (Speech2Text2 model)"),zXe=l(),gg=a("li"),KK=a("strong"),QXe=o("splinter"),WXe=o(" \u2014 "),ok=a("a"),HXe=o("SplinterConfig"),UXe=o(" (Splinter model)"),JXe=l(),hg=a("li"),ZK=a("strong"),YXe=o("squeezebert"),KXe=o(" \u2014 "),rk=a("a"),ZXe=o("SqueezeBertConfig"),eze=o(" (SqueezeBERT model)"),oze=l(),pg=a("li"),eZ=a("strong"),rze=o("swin"),tze=o(" \u2014 "),tk=a("a"),aze=o("SwinConfig"),nze=o(" (Swin model)"),sze=l(),_g=a("li"),oZ=a("strong"),lze=o("t5"),ize=o(" \u2014 "),ak=a("a"),dze=o("T5Config"),cze=o(" (T5 model)"),fze=l(),ug=a("li"),rZ=a("strong"),mze=o("tapas"),gze=o(" \u2014 "),nk=a("a"),hze=o("TapasConfig"),pze=o(" (TAPAS model)"),_ze=l(),bg=a("li"),tZ=a("strong"),uze=o("tapex"),bze=o(" \u2014 "),sk=a("a"),vze=o("BartConfig"),Fze=o(" (TAPEX model)"),Tze=l(),vg=a("li"),aZ=a("strong"),Mze=o("transfo-xl"),Eze=o(" \u2014 "),lk=a("a"),Cze=o("TransfoXLConfig"),wze=o(" (Transformer-XL model)"),Aze=l(),Fg=a("li"),nZ=a("strong"),yze=o("trocr"),Lze=o(" \u2014 "),ik=a("a"),xze=o("TrOCRConfig"),kze=o(" (TrOCR model)"),Sze=l(),Tg=a("li"),sZ=a("strong"),Rze=o("unispeech"),Bze=o(" \u2014 "),dk=a("a"),Pze=o("UniSpeechConfig"),$ze=o(" (UniSpeech model)"),Ize=l(),Mg=a("li"),lZ=a("strong"),qze=o("unispeech-sat"),Nze=o(" \u2014 "),ck=a("a"),jze=o("UniSpeechSatConfig"),Dze=o(" (UniSpeechSat model)"),Gze=l(),Eg=a("li"),iZ=a("strong"),Oze=o("van"),Vze=o(" \u2014 "),fk=a("a"),Xze=o("VanConfig"),zze=o(" (VAN model)"),Qze=l(),Cg=a("li"),dZ=a("strong"),Wze=o("vilt"),Hze=o(" \u2014 "),mk=a("a"),Uze=o("ViltConfig"),Jze=o(" (ViLT model)"),Yze=l(),wg=a("li"),cZ=a("strong"),Kze=o("vision-encoder-decoder"),Zze=o(" \u2014 "),gk=a("a"),eQe=o("VisionEncoderDecoderConfig"),oQe=o(" (Vision Encoder decoder model)"),rQe=l(),Ag=a("li"),fZ=a("strong"),tQe=o("vision-text-dual-encoder"),aQe=o(" \u2014 "),hk=a("a"),nQe=o("VisionTextDualEncoderConfig"),sQe=o(" (VisionTextDualEncoder model)"),lQe=l(),yg=a("li"),mZ=a("strong"),iQe=o("visual_bert"),dQe=o(" \u2014 "),pk=a("a"),cQe=o("VisualBertConfig"),fQe=o(" (VisualBert model)"),mQe=l(),Lg=a("li"),gZ=a("strong"),gQe=o("vit"),hQe=o(" \u2014 "),_k=a("a"),pQe=o("ViTConfig"),_Qe=o(" (ViT model)"),uQe=l(),xg=a("li"),hZ=a("strong"),bQe=o("vit_mae"),vQe=o(" \u2014 "),uk=a("a"),FQe=o("ViTMAEConfig"),TQe=o(" (ViTMAE model)"),MQe=l(),kg=a("li"),pZ=a("strong"),EQe=o("wav2vec2"),CQe=o(" \u2014 "),bk=a("a"),wQe=o("Wav2Vec2Config"),AQe=o(" (Wav2Vec2 model)"),yQe=l(),Sg=a("li"),_Z=a("strong"),LQe=o("wavlm"),xQe=o(" \u2014 "),vk=a("a"),kQe=o("WavLMConfig"),SQe=o(" (WavLM model)"),RQe=l(),Rg=a("li"),uZ=a("strong"),BQe=o("xglm"),PQe=o(" \u2014 "),Fk=a("a"),$Qe=o("XGLMConfig"),IQe=o(" (XGLM model)"),qQe=l(),Bg=a("li"),bZ=a("strong"),NQe=o("xlm"),jQe=o(" \u2014 "),Tk=a("a"),DQe=o("XLMConfig"),GQe=o(" (XLM model)"),OQe=l(),Pg=a("li"),vZ=a("strong"),VQe=o("xlm-prophetnet"),XQe=o(" \u2014 "),Mk=a("a"),zQe=o("XLMProphetNetConfig"),QQe=o(" (XLMProphetNet model)"),WQe=l(),$g=a("li"),FZ=a("strong"),HQe=o("xlm-roberta"),UQe=o(" \u2014 "),Ek=a("a"),JQe=o("XLMRobertaConfig"),YQe=o(" (XLM-RoBERTa model)"),KQe=l(),Ig=a("li"),TZ=a("strong"),ZQe=o("xlm-roberta-xl"),eWe=o(" \u2014 "),Ck=a("a"),oWe=o("XLMRobertaXLConfig"),rWe=o(" (XLM-RoBERTa-XL model)"),tWe=l(),qg=a("li"),MZ=a("strong"),aWe=o("xlnet"),nWe=o(" \u2014 "),wk=a("a"),sWe=o("XLNetConfig"),lWe=o(" (XLNet model)"),iWe=l(),Ng=a("li"),EZ=a("strong"),dWe=o("yoso"),cWe=o(" \u2014 "),Ak=a("a"),fWe=o("YosoConfig"),mWe=o(" (YOSO model)"),gWe=l(),CZ=a("p"),hWe=o("Examples:"),pWe=l(),f(XC.$$.fragment),_We=l(),jg=a("div"),f(zC.$$.fragment),uWe=l(),wZ=a("p"),bWe=o("Register a new configuration for this class."),aBe=l(),Wi=a("h2"),Dg=a("a"),AZ=a("span"),f(QC.$$.fragment),vWe=l(),yZ=a("span"),FWe=o("AutoTokenizer"),nBe=l(),Wo=a("div"),f(WC.$$.fragment),TWe=l(),HC=a("p"),MWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yk=a("a"),EWe=o("AutoTokenizer.from_pretrained()"),CWe=o(" class method."),wWe=l(),UC=a("p"),AWe=o("This class cannot be instantiated directly using "),LZ=a("code"),yWe=o("__init__()"),LWe=o(" (throws an error)."),xWe=l(),ho=a("div"),f(JC.$$.fragment),kWe=l(),xZ=a("p"),SWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),RWe=l(),Oa=a("p"),BWe=o("The tokenizer class to instantiate is selected based on the "),kZ=a("code"),PWe=o("model_type"),$We=o(` property of the config object (either
passed as an argument or loaded from `),SZ=a("code"),IWe=o("pretrained_model_name_or_path"),qWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RZ=a("code"),NWe=o("pretrained_model_name_or_path"),jWe=o(":"),DWe=l(),E=a("ul"),Wn=a("li"),BZ=a("strong"),GWe=o("albert"),OWe=o(" \u2014 "),Lk=a("a"),VWe=o("AlbertTokenizer"),XWe=o(" or "),xk=a("a"),zWe=o("AlbertTokenizerFast"),QWe=o(" (ALBERT model)"),WWe=l(),Hn=a("li"),PZ=a("strong"),HWe=o("bart"),UWe=o(" \u2014 "),kk=a("a"),JWe=o("BartTokenizer"),YWe=o(" or "),Sk=a("a"),KWe=o("BartTokenizerFast"),ZWe=o(" (BART model)"),eHe=l(),Un=a("li"),$Z=a("strong"),oHe=o("barthez"),rHe=o(" \u2014 "),Rk=a("a"),tHe=o("BarthezTokenizer"),aHe=o(" or "),Bk=a("a"),nHe=o("BarthezTokenizerFast"),sHe=o(" (BARThez model)"),lHe=l(),Gg=a("li"),IZ=a("strong"),iHe=o("bartpho"),dHe=o(" \u2014 "),Pk=a("a"),cHe=o("BartphoTokenizer"),fHe=o(" (BARTpho model)"),mHe=l(),Jn=a("li"),qZ=a("strong"),gHe=o("bert"),hHe=o(" \u2014 "),$k=a("a"),pHe=o("BertTokenizer"),_He=o(" or "),Ik=a("a"),uHe=o("BertTokenizerFast"),bHe=o(" (BERT model)"),vHe=l(),Og=a("li"),NZ=a("strong"),FHe=o("bert-generation"),THe=o(" \u2014 "),qk=a("a"),MHe=o("BertGenerationTokenizer"),EHe=o(" (Bert Generation model)"),CHe=l(),Vg=a("li"),jZ=a("strong"),wHe=o("bert-japanese"),AHe=o(" \u2014 "),Nk=a("a"),yHe=o("BertJapaneseTokenizer"),LHe=o(" (BertJapanese model)"),xHe=l(),Xg=a("li"),DZ=a("strong"),kHe=o("bertweet"),SHe=o(" \u2014 "),jk=a("a"),RHe=o("BertweetTokenizer"),BHe=o(" (Bertweet model)"),PHe=l(),Yn=a("li"),GZ=a("strong"),$He=o("big_bird"),IHe=o(" \u2014 "),Dk=a("a"),qHe=o("BigBirdTokenizer"),NHe=o(" or "),Gk=a("a"),jHe=o("BigBirdTokenizerFast"),DHe=o(" (BigBird model)"),GHe=l(),Kn=a("li"),OZ=a("strong"),OHe=o("bigbird_pegasus"),VHe=o(" \u2014 "),Ok=a("a"),XHe=o("PegasusTokenizer"),zHe=o(" or "),Vk=a("a"),QHe=o("PegasusTokenizerFast"),WHe=o(" (BigBirdPegasus model)"),HHe=l(),Zn=a("li"),VZ=a("strong"),UHe=o("blenderbot"),JHe=o(" \u2014 "),Xk=a("a"),YHe=o("BlenderbotTokenizer"),KHe=o(" or "),zk=a("a"),ZHe=o("BlenderbotTokenizerFast"),eUe=o(" (Blenderbot model)"),oUe=l(),zg=a("li"),XZ=a("strong"),rUe=o("blenderbot-small"),tUe=o(" \u2014 "),Qk=a("a"),aUe=o("BlenderbotSmallTokenizer"),nUe=o(" (BlenderbotSmall model)"),sUe=l(),Qg=a("li"),zZ=a("strong"),lUe=o("byt5"),iUe=o(" \u2014 "),Wk=a("a"),dUe=o("ByT5Tokenizer"),cUe=o(" (ByT5 model)"),fUe=l(),es=a("li"),QZ=a("strong"),mUe=o("camembert"),gUe=o(" \u2014 "),Hk=a("a"),hUe=o("CamembertTokenizer"),pUe=o(" or "),Uk=a("a"),_Ue=o("CamembertTokenizerFast"),uUe=o(" (CamemBERT model)"),bUe=l(),Wg=a("li"),WZ=a("strong"),vUe=o("canine"),FUe=o(" \u2014 "),Jk=a("a"),TUe=o("CanineTokenizer"),MUe=o(" (Canine model)"),EUe=l(),os=a("li"),HZ=a("strong"),CUe=o("clip"),wUe=o(" \u2014 "),Yk=a("a"),AUe=o("CLIPTokenizer"),yUe=o(" or "),Kk=a("a"),LUe=o("CLIPTokenizerFast"),xUe=o(" (CLIP model)"),kUe=l(),rs=a("li"),UZ=a("strong"),SUe=o("convbert"),RUe=o(" \u2014 "),Zk=a("a"),BUe=o("ConvBertTokenizer"),PUe=o(" or "),eS=a("a"),$Ue=o("ConvBertTokenizerFast"),IUe=o(" (ConvBERT model)"),qUe=l(),ts=a("li"),JZ=a("strong"),NUe=o("cpm"),jUe=o(" \u2014 "),oS=a("a"),DUe=o("CpmTokenizer"),GUe=o(" or "),YZ=a("code"),OUe=o("CpmTokenizerFast"),VUe=o(" (CPM model)"),XUe=l(),Hg=a("li"),KZ=a("strong"),zUe=o("ctrl"),QUe=o(" \u2014 "),rS=a("a"),WUe=o("CTRLTokenizer"),HUe=o(" (CTRL model)"),UUe=l(),as=a("li"),ZZ=a("strong"),JUe=o("deberta"),YUe=o(" \u2014 "),tS=a("a"),KUe=o("DebertaTokenizer"),ZUe=o(" or "),aS=a("a"),eJe=o("DebertaTokenizerFast"),oJe=o(" (DeBERTa model)"),rJe=l(),Ug=a("li"),eee=a("strong"),tJe=o("deberta-v2"),aJe=o(" \u2014 "),nS=a("a"),nJe=o("DebertaV2Tokenizer"),sJe=o(" (DeBERTa-v2 model)"),lJe=l(),ns=a("li"),oee=a("strong"),iJe=o("distilbert"),dJe=o(" \u2014 "),sS=a("a"),cJe=o("DistilBertTokenizer"),fJe=o(" or "),lS=a("a"),mJe=o("DistilBertTokenizerFast"),gJe=o(" (DistilBERT model)"),hJe=l(),ss=a("li"),ree=a("strong"),pJe=o("dpr"),_Je=o(" \u2014 "),iS=a("a"),uJe=o("DPRQuestionEncoderTokenizer"),bJe=o(" or "),dS=a("a"),vJe=o("DPRQuestionEncoderTokenizerFast"),FJe=o(" (DPR model)"),TJe=l(),ls=a("li"),tee=a("strong"),MJe=o("electra"),EJe=o(" \u2014 "),cS=a("a"),CJe=o("ElectraTokenizer"),wJe=o(" or "),fS=a("a"),AJe=o("ElectraTokenizerFast"),yJe=o(" (ELECTRA model)"),LJe=l(),Jg=a("li"),aee=a("strong"),xJe=o("flaubert"),kJe=o(" \u2014 "),mS=a("a"),SJe=o("FlaubertTokenizer"),RJe=o(" (FlauBERT model)"),BJe=l(),is=a("li"),nee=a("strong"),PJe=o("fnet"),$Je=o(" \u2014 "),gS=a("a"),IJe=o("FNetTokenizer"),qJe=o(" or "),hS=a("a"),NJe=o("FNetTokenizerFast"),jJe=o(" (FNet model)"),DJe=l(),Yg=a("li"),see=a("strong"),GJe=o("fsmt"),OJe=o(" \u2014 "),pS=a("a"),VJe=o("FSMTTokenizer"),XJe=o(" (FairSeq Machine-Translation model)"),zJe=l(),ds=a("li"),lee=a("strong"),QJe=o("funnel"),WJe=o(" \u2014 "),_S=a("a"),HJe=o("FunnelTokenizer"),UJe=o(" or "),uS=a("a"),JJe=o("FunnelTokenizerFast"),YJe=o(" (Funnel Transformer model)"),KJe=l(),cs=a("li"),iee=a("strong"),ZJe=o("gpt2"),eYe=o(" \u2014 "),bS=a("a"),oYe=o("GPT2Tokenizer"),rYe=o(" or "),vS=a("a"),tYe=o("GPT2TokenizerFast"),aYe=o(" (OpenAI GPT-2 model)"),nYe=l(),fs=a("li"),dee=a("strong"),sYe=o("gpt_neo"),lYe=o(" \u2014 "),FS=a("a"),iYe=o("GPT2Tokenizer"),dYe=o(" or "),TS=a("a"),cYe=o("GPT2TokenizerFast"),fYe=o(" (GPT Neo model)"),mYe=l(),ms=a("li"),cee=a("strong"),gYe=o("herbert"),hYe=o(" \u2014 "),MS=a("a"),pYe=o("HerbertTokenizer"),_Ye=o(" or "),ES=a("a"),uYe=o("HerbertTokenizerFast"),bYe=o(" (HerBERT model)"),vYe=l(),Kg=a("li"),fee=a("strong"),FYe=o("hubert"),TYe=o(" \u2014 "),CS=a("a"),MYe=o("Wav2Vec2CTCTokenizer"),EYe=o(" (Hubert model)"),CYe=l(),gs=a("li"),mee=a("strong"),wYe=o("ibert"),AYe=o(" \u2014 "),wS=a("a"),yYe=o("RobertaTokenizer"),LYe=o(" or "),AS=a("a"),xYe=o("RobertaTokenizerFast"),kYe=o(" (I-BERT model)"),SYe=l(),hs=a("li"),gee=a("strong"),RYe=o("layoutlm"),BYe=o(" \u2014 "),yS=a("a"),PYe=o("LayoutLMTokenizer"),$Ye=o(" or "),LS=a("a"),IYe=o("LayoutLMTokenizerFast"),qYe=o(" (LayoutLM model)"),NYe=l(),ps=a("li"),hee=a("strong"),jYe=o("layoutlmv2"),DYe=o(" \u2014 "),xS=a("a"),GYe=o("LayoutLMv2Tokenizer"),OYe=o(" or "),kS=a("a"),VYe=o("LayoutLMv2TokenizerFast"),XYe=o(" (LayoutLMv2 model)"),zYe=l(),_s=a("li"),pee=a("strong"),QYe=o("layoutxlm"),WYe=o(" \u2014 "),SS=a("a"),HYe=o("LayoutXLMTokenizer"),UYe=o(" or "),RS=a("a"),JYe=o("LayoutXLMTokenizerFast"),YYe=o(" (LayoutXLM model)"),KYe=l(),us=a("li"),_ee=a("strong"),ZYe=o("led"),eKe=o(" \u2014 "),BS=a("a"),oKe=o("LEDTokenizer"),rKe=o(" or "),PS=a("a"),tKe=o("LEDTokenizerFast"),aKe=o(" (LED model)"),nKe=l(),bs=a("li"),uee=a("strong"),sKe=o("longformer"),lKe=o(" \u2014 "),$S=a("a"),iKe=o("LongformerTokenizer"),dKe=o(" or "),IS=a("a"),cKe=o("LongformerTokenizerFast"),fKe=o(" (Longformer model)"),mKe=l(),Zg=a("li"),bee=a("strong"),gKe=o("luke"),hKe=o(" \u2014 "),qS=a("a"),pKe=o("LukeTokenizer"),_Ke=o(" (LUKE model)"),uKe=l(),vs=a("li"),vee=a("strong"),bKe=o("lxmert"),vKe=o(" \u2014 "),NS=a("a"),FKe=o("LxmertTokenizer"),TKe=o(" or "),jS=a("a"),MKe=o("LxmertTokenizerFast"),EKe=o(" (LXMERT model)"),CKe=l(),eh=a("li"),Fee=a("strong"),wKe=o("m2m_100"),AKe=o(" \u2014 "),DS=a("a"),yKe=o("M2M100Tokenizer"),LKe=o(" (M2M100 model)"),xKe=l(),oh=a("li"),Tee=a("strong"),kKe=o("marian"),SKe=o(" \u2014 "),GS=a("a"),RKe=o("MarianTokenizer"),BKe=o(" (Marian model)"),PKe=l(),Fs=a("li"),Mee=a("strong"),$Ke=o("mbart"),IKe=o(" \u2014 "),OS=a("a"),qKe=o("MBartTokenizer"),NKe=o(" or "),VS=a("a"),jKe=o("MBartTokenizerFast"),DKe=o(" (mBART model)"),GKe=l(),Ts=a("li"),Eee=a("strong"),OKe=o("mbart50"),VKe=o(" \u2014 "),XS=a("a"),XKe=o("MBart50Tokenizer"),zKe=o(" or "),zS=a("a"),QKe=o("MBart50TokenizerFast"),WKe=o(" (mBART-50 model)"),HKe=l(),rh=a("li"),Cee=a("strong"),UKe=o("mluke"),JKe=o(" \u2014 "),QS=a("a"),YKe=o("MLukeTokenizer"),KKe=o(" (mLUKE model)"),ZKe=l(),Ms=a("li"),wee=a("strong"),eZe=o("mobilebert"),oZe=o(" \u2014 "),WS=a("a"),rZe=o("MobileBertTokenizer"),tZe=o(" or "),HS=a("a"),aZe=o("MobileBertTokenizerFast"),nZe=o(" (MobileBERT model)"),sZe=l(),Es=a("li"),Aee=a("strong"),lZe=o("mpnet"),iZe=o(" \u2014 "),US=a("a"),dZe=o("MPNetTokenizer"),cZe=o(" or "),JS=a("a"),fZe=o("MPNetTokenizerFast"),mZe=o(" (MPNet model)"),gZe=l(),Cs=a("li"),yee=a("strong"),hZe=o("mt5"),pZe=o(" \u2014 "),YS=a("a"),_Ze=o("MT5Tokenizer"),uZe=o(" or "),KS=a("a"),bZe=o("MT5TokenizerFast"),vZe=o(" (mT5 model)"),FZe=l(),ws=a("li"),Lee=a("strong"),TZe=o("openai-gpt"),MZe=o(" \u2014 "),ZS=a("a"),EZe=o("OpenAIGPTTokenizer"),CZe=o(" or "),eR=a("a"),wZe=o("OpenAIGPTTokenizerFast"),AZe=o(" (OpenAI GPT model)"),yZe=l(),As=a("li"),xee=a("strong"),LZe=o("pegasus"),xZe=o(" \u2014 "),oR=a("a"),kZe=o("PegasusTokenizer"),SZe=o(" or "),rR=a("a"),RZe=o("PegasusTokenizerFast"),BZe=o(" (Pegasus model)"),PZe=l(),th=a("li"),kee=a("strong"),$Ze=o("perceiver"),IZe=o(" \u2014 "),tR=a("a"),qZe=o("PerceiverTokenizer"),NZe=o(" (Perceiver model)"),jZe=l(),ah=a("li"),See=a("strong"),DZe=o("phobert"),GZe=o(" \u2014 "),aR=a("a"),OZe=o("PhobertTokenizer"),VZe=o(" (PhoBERT model)"),XZe=l(),nh=a("li"),Ree=a("strong"),zZe=o("plbart"),QZe=o(" \u2014 "),nR=a("a"),WZe=o("PLBartTokenizer"),HZe=o(" (PLBart model)"),UZe=l(),sh=a("li"),Bee=a("strong"),JZe=o("prophetnet"),YZe=o(" \u2014 "),sR=a("a"),KZe=o("ProphetNetTokenizer"),ZZe=o(" (ProphetNet model)"),eeo=l(),ys=a("li"),Pee=a("strong"),oeo=o("qdqbert"),reo=o(" \u2014 "),lR=a("a"),teo=o("BertTokenizer"),aeo=o(" or "),iR=a("a"),neo=o("BertTokenizerFast"),seo=o(" (QDQBert model)"),leo=l(),lh=a("li"),$ee=a("strong"),ieo=o("rag"),deo=o(" \u2014 "),dR=a("a"),ceo=o("RagTokenizer"),feo=o(" (RAG model)"),meo=l(),Ls=a("li"),Iee=a("strong"),geo=o("realm"),heo=o(" \u2014 "),cR=a("a"),peo=o("RealmTokenizer"),_eo=o(" or "),fR=a("a"),ueo=o("RealmTokenizerFast"),beo=o(" (Realm model)"),veo=l(),xs=a("li"),qee=a("strong"),Feo=o("reformer"),Teo=o(" \u2014 "),mR=a("a"),Meo=o("ReformerTokenizer"),Eeo=o(" or "),gR=a("a"),Ceo=o("ReformerTokenizerFast"),weo=o(" (Reformer model)"),Aeo=l(),ks=a("li"),Nee=a("strong"),yeo=o("rembert"),Leo=o(" \u2014 "),hR=a("a"),xeo=o("RemBertTokenizer"),keo=o(" or "),pR=a("a"),Seo=o("RemBertTokenizerFast"),Reo=o(" (RemBERT model)"),Beo=l(),Ss=a("li"),jee=a("strong"),Peo=o("retribert"),$eo=o(" \u2014 "),_R=a("a"),Ieo=o("RetriBertTokenizer"),qeo=o(" or "),uR=a("a"),Neo=o("RetriBertTokenizerFast"),jeo=o(" (RetriBERT model)"),Deo=l(),Rs=a("li"),Dee=a("strong"),Geo=o("roberta"),Oeo=o(" \u2014 "),bR=a("a"),Veo=o("RobertaTokenizer"),Xeo=o(" or "),vR=a("a"),zeo=o("RobertaTokenizerFast"),Qeo=o(" (RoBERTa model)"),Weo=l(),Bs=a("li"),Gee=a("strong"),Heo=o("roformer"),Ueo=o(" \u2014 "),FR=a("a"),Jeo=o("RoFormerTokenizer"),Yeo=o(" or "),TR=a("a"),Keo=o("RoFormerTokenizerFast"),Zeo=o(" (RoFormer model)"),eoo=l(),ih=a("li"),Oee=a("strong"),ooo=o("speech_to_text"),roo=o(" \u2014 "),MR=a("a"),too=o("Speech2TextTokenizer"),aoo=o(" (Speech2Text model)"),noo=l(),dh=a("li"),Vee=a("strong"),soo=o("speech_to_text_2"),loo=o(" \u2014 "),ER=a("a"),ioo=o("Speech2Text2Tokenizer"),doo=o(" (Speech2Text2 model)"),coo=l(),Ps=a("li"),Xee=a("strong"),foo=o("splinter"),moo=o(" \u2014 "),CR=a("a"),goo=o("SplinterTokenizer"),hoo=o(" or "),wR=a("a"),poo=o("SplinterTokenizerFast"),_oo=o(" (Splinter model)"),uoo=l(),$s=a("li"),zee=a("strong"),boo=o("squeezebert"),voo=o(" \u2014 "),AR=a("a"),Foo=o("SqueezeBertTokenizer"),Too=o(" or "),yR=a("a"),Moo=o("SqueezeBertTokenizerFast"),Eoo=o(" (SqueezeBERT model)"),Coo=l(),Is=a("li"),Qee=a("strong"),woo=o("t5"),Aoo=o(" \u2014 "),LR=a("a"),yoo=o("T5Tokenizer"),Loo=o(" or "),xR=a("a"),xoo=o("T5TokenizerFast"),koo=o(" (T5 model)"),Soo=l(),ch=a("li"),Wee=a("strong"),Roo=o("tapas"),Boo=o(" \u2014 "),kR=a("a"),Poo=o("TapasTokenizer"),$oo=o(" (TAPAS model)"),Ioo=l(),fh=a("li"),Hee=a("strong"),qoo=o("tapex"),Noo=o(" \u2014 "),SR=a("a"),joo=o("TapexTokenizer"),Doo=o(" (TAPEX model)"),Goo=l(),mh=a("li"),Uee=a("strong"),Ooo=o("transfo-xl"),Voo=o(" \u2014 "),RR=a("a"),Xoo=o("TransfoXLTokenizer"),zoo=o(" (Transformer-XL model)"),Qoo=l(),gh=a("li"),Jee=a("strong"),Woo=o("wav2vec2"),Hoo=o(" \u2014 "),BR=a("a"),Uoo=o("Wav2Vec2CTCTokenizer"),Joo=o(" (Wav2Vec2 model)"),Yoo=l(),hh=a("li"),Yee=a("strong"),Koo=o("wav2vec2_phoneme"),Zoo=o(" \u2014 "),PR=a("a"),ero=o("Wav2Vec2PhonemeCTCTokenizer"),oro=o(" (Wav2Vec2Phoneme model)"),rro=l(),qs=a("li"),Kee=a("strong"),tro=o("xglm"),aro=o(" \u2014 "),$R=a("a"),nro=o("XGLMTokenizer"),sro=o(" or "),IR=a("a"),lro=o("XGLMTokenizerFast"),iro=o(" (XGLM model)"),dro=l(),ph=a("li"),Zee=a("strong"),cro=o("xlm"),fro=o(" \u2014 "),qR=a("a"),mro=o("XLMTokenizer"),gro=o(" (XLM model)"),hro=l(),_h=a("li"),eoe=a("strong"),pro=o("xlm-prophetnet"),_ro=o(" \u2014 "),NR=a("a"),uro=o("XLMProphetNetTokenizer"),bro=o(" (XLMProphetNet model)"),vro=l(),Ns=a("li"),ooe=a("strong"),Fro=o("xlm-roberta"),Tro=o(" \u2014 "),jR=a("a"),Mro=o("XLMRobertaTokenizer"),Ero=o(" or "),DR=a("a"),Cro=o("XLMRobertaTokenizerFast"),wro=o(" (XLM-RoBERTa model)"),Aro=l(),js=a("li"),roe=a("strong"),yro=o("xlnet"),Lro=o(" \u2014 "),GR=a("a"),xro=o("XLNetTokenizer"),kro=o(" or "),OR=a("a"),Sro=o("XLNetTokenizerFast"),Rro=o(" (XLNet model)"),Bro=l(),toe=a("p"),Pro=o("Examples:"),$ro=l(),f(YC.$$.fragment),Iro=l(),uh=a("div"),f(KC.$$.fragment),qro=l(),aoe=a("p"),Nro=o("Register a new tokenizer in this mapping."),sBe=l(),Hi=a("h2"),bh=a("a"),noe=a("span"),f(ZC.$$.fragment),jro=l(),soe=a("span"),Dro=o("AutoFeatureExtractor"),lBe=l(),Ho=a("div"),f(ew.$$.fragment),Gro=l(),ow=a("p"),Oro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VR=a("a"),Vro=o("AutoFeatureExtractor.from_pretrained()"),Xro=o(" class method."),zro=l(),rw=a("p"),Qro=o("This class cannot be instantiated directly using "),loe=a("code"),Wro=o("__init__()"),Hro=o(" (throws an error)."),Uro=l(),$e=a("div"),f(tw.$$.fragment),Jro=l(),ioe=a("p"),Yro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Kro=l(),Va=a("p"),Zro=o("The feature extractor class to instantiate is selected based on the "),doe=a("code"),eto=o("model_type"),oto=o(` property of the config object
(either passed as an argument or loaded from `),coe=a("code"),rto=o("pretrained_model_name_or_path"),tto=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),foe=a("code"),ato=o("pretrained_model_name_or_path"),nto=o(":"),sto=l(),J=a("ul"),vh=a("li"),moe=a("strong"),lto=o("beit"),ito=o(" \u2014 "),XR=a("a"),dto=o("BeitFeatureExtractor"),cto=o(" (BEiT model)"),fto=l(),Fh=a("li"),goe=a("strong"),mto=o("clip"),gto=o(" \u2014 "),zR=a("a"),hto=o("CLIPFeatureExtractor"),pto=o(" (CLIP model)"),_to=l(),Th=a("li"),hoe=a("strong"),uto=o("convnext"),bto=o(" \u2014 "),QR=a("a"),vto=o("ConvNextFeatureExtractor"),Fto=o(" (ConvNext model)"),Tto=l(),Mh=a("li"),poe=a("strong"),Mto=o("deit"),Eto=o(" \u2014 "),WR=a("a"),Cto=o("DeiTFeatureExtractor"),wto=o(" (DeiT model)"),Ato=l(),Eh=a("li"),_oe=a("strong"),yto=o("detr"),Lto=o(" \u2014 "),HR=a("a"),xto=o("DetrFeatureExtractor"),kto=o(" (DETR model)"),Sto=l(),Ch=a("li"),uoe=a("strong"),Rto=o("flava"),Bto=o(" \u2014 "),UR=a("a"),Pto=o("FLAVAFeatureExtractor"),$to=o(" (FLAVA model)"),Ito=l(),wh=a("li"),boe=a("strong"),qto=o("hubert"),Nto=o(" \u2014 "),JR=a("a"),jto=o("Wav2Vec2FeatureExtractor"),Dto=o(" (Hubert model)"),Gto=l(),Ah=a("li"),voe=a("strong"),Oto=o("layoutlmv2"),Vto=o(" \u2014 "),YR=a("a"),Xto=o("LayoutLMv2FeatureExtractor"),zto=o(" (LayoutLMv2 model)"),Qto=l(),yh=a("li"),Foe=a("strong"),Wto=o("maskformer"),Hto=o(" \u2014 "),KR=a("a"),Uto=o("MaskFormerFeatureExtractor"),Jto=o(" (MaskFormer model)"),Yto=l(),Lh=a("li"),Toe=a("strong"),Kto=o("perceiver"),Zto=o(" \u2014 "),ZR=a("a"),eao=o("PerceiverFeatureExtractor"),oao=o(" (Perceiver model)"),rao=l(),xh=a("li"),Moe=a("strong"),tao=o("poolformer"),aao=o(" \u2014 "),eB=a("a"),nao=o("PoolFormerFeatureExtractor"),sao=o(" (PoolFormer model)"),lao=l(),kh=a("li"),Eoe=a("strong"),iao=o("regnet"),dao=o(" \u2014 "),oB=a("a"),cao=o("ConvNextFeatureExtractor"),fao=o(" (RegNet model)"),mao=l(),Sh=a("li"),Coe=a("strong"),gao=o("resnet"),hao=o(" \u2014 "),rB=a("a"),pao=o("ConvNextFeatureExtractor"),_ao=o(" (ResNet model)"),uao=l(),Rh=a("li"),woe=a("strong"),bao=o("segformer"),vao=o(" \u2014 "),tB=a("a"),Fao=o("SegformerFeatureExtractor"),Tao=o(" (SegFormer model)"),Mao=l(),Bh=a("li"),Aoe=a("strong"),Eao=o("speech_to_text"),Cao=o(" \u2014 "),aB=a("a"),wao=o("Speech2TextFeatureExtractor"),Aao=o(" (Speech2Text model)"),yao=l(),Ph=a("li"),yoe=a("strong"),Lao=o("swin"),xao=o(" \u2014 "),nB=a("a"),kao=o("ViTFeatureExtractor"),Sao=o(" (Swin model)"),Rao=l(),$h=a("li"),Loe=a("strong"),Bao=o("van"),Pao=o(" \u2014 "),sB=a("a"),$ao=o("ConvNextFeatureExtractor"),Iao=o(" (VAN model)"),qao=l(),Ih=a("li"),xoe=a("strong"),Nao=o("vit"),jao=o(" \u2014 "),lB=a("a"),Dao=o("ViTFeatureExtractor"),Gao=o(" (ViT model)"),Oao=l(),qh=a("li"),koe=a("strong"),Vao=o("vit_mae"),Xao=o(" \u2014 "),iB=a("a"),zao=o("ViTFeatureExtractor"),Qao=o(" (ViTMAE model)"),Wao=l(),Nh=a("li"),Soe=a("strong"),Hao=o("wav2vec2"),Uao=o(" \u2014 "),dB=a("a"),Jao=o("Wav2Vec2FeatureExtractor"),Yao=o(" (Wav2Vec2 model)"),Kao=l(),f(jh.$$.fragment),Zao=l(),Roe=a("p"),eno=o("Examples:"),ono=l(),f(aw.$$.fragment),rno=l(),Dh=a("div"),f(nw.$$.fragment),tno=l(),Boe=a("p"),ano=o("Register a new feature extractor for this class."),iBe=l(),Ui=a("h2"),Gh=a("a"),Poe=a("span"),f(sw.$$.fragment),nno=l(),$oe=a("span"),sno=o("AutoProcessor"),dBe=l(),Uo=a("div"),f(lw.$$.fragment),lno=l(),iw=a("p"),ino=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cB=a("a"),dno=o("AutoProcessor.from_pretrained()"),cno=o(" class method."),fno=l(),dw=a("p"),mno=o("This class cannot be instantiated directly using "),Ioe=a("code"),gno=o("__init__()"),hno=o(" (throws an error)."),pno=l(),Ie=a("div"),f(cw.$$.fragment),_no=l(),qoe=a("p"),uno=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),bno=l(),Ji=a("p"),vno=o("The processor class to instantiate is selected based on the "),Noe=a("code"),Fno=o("model_type"),Tno=o(` property of the config object (either
passed as an argument or loaded from `),joe=a("code"),Mno=o("pretrained_model_name_or_path"),Eno=o(" if possible):"),Cno=l(),Ee=a("ul"),Oh=a("li"),Doe=a("strong"),wno=o("clip"),Ano=o(" \u2014 "),fB=a("a"),yno=o("CLIPProcessor"),Lno=o(" (CLIP model)"),xno=l(),Vh=a("li"),Goe=a("strong"),kno=o("flava"),Sno=o(" \u2014 "),mB=a("a"),Rno=o("FLAVAProcessor"),Bno=o(" (FLAVA model)"),Pno=l(),Xh=a("li"),Ooe=a("strong"),$no=o("layoutlmv2"),Ino=o(" \u2014 "),gB=a("a"),qno=o("LayoutLMv2Processor"),Nno=o(" (LayoutLMv2 model)"),jno=l(),zh=a("li"),Voe=a("strong"),Dno=o("layoutxlm"),Gno=o(" \u2014 "),hB=a("a"),Ono=o("LayoutXLMProcessor"),Vno=o(" (LayoutXLM model)"),Xno=l(),Qh=a("li"),Xoe=a("strong"),zno=o("speech_to_text"),Qno=o(" \u2014 "),pB=a("a"),Wno=o("Speech2TextProcessor"),Hno=o(" (Speech2Text model)"),Uno=l(),Wh=a("li"),zoe=a("strong"),Jno=o("speech_to_text_2"),Yno=o(" \u2014 "),_B=a("a"),Kno=o("Speech2Text2Processor"),Zno=o(" (Speech2Text2 model)"),eso=l(),Hh=a("li"),Qoe=a("strong"),oso=o("trocr"),rso=o(" \u2014 "),uB=a("a"),tso=o("TrOCRProcessor"),aso=o(" (TrOCR model)"),nso=l(),Uh=a("li"),Woe=a("strong"),sso=o("vision-text-dual-encoder"),lso=o(" \u2014 "),bB=a("a"),iso=o("VisionTextDualEncoderProcessor"),dso=o(" (VisionTextDualEncoder model)"),cso=l(),Jh=a("li"),Hoe=a("strong"),fso=o("wav2vec2"),mso=o(" \u2014 "),vB=a("a"),gso=o("Wav2Vec2Processor"),hso=o(" (Wav2Vec2 model)"),pso=l(),f(Yh.$$.fragment),_so=l(),Uoe=a("p"),uso=o("Examples:"),bso=l(),f(fw.$$.fragment),vso=l(),Kh=a("div"),f(mw.$$.fragment),Fso=l(),Joe=a("p"),Tso=o("Register a new processor for this class."),cBe=l(),Yi=a("h2"),Zh=a("a"),Yoe=a("span"),f(gw.$$.fragment),Mso=l(),Koe=a("span"),Eso=o("AutoModel"),fBe=l(),Jo=a("div"),f(hw.$$.fragment),Cso=l(),Ki=a("p"),wso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FB=a("a"),Aso=o("from_pretrained()"),yso=o(" class method or the "),TB=a("a"),Lso=o("from_config()"),xso=o(` class
method.`),kso=l(),pw=a("p"),Sso=o("This class cannot be instantiated directly using "),Zoe=a("code"),Rso=o("__init__()"),Bso=o(" (throws an error)."),Pso=l(),Xr=a("div"),f(_w.$$.fragment),$so=l(),ere=a("p"),Iso=o("Instantiates one of the base model classes of the library from a configuration."),qso=l(),Zi=a("p"),Nso=o(`Note:
Loading a model from its configuration file does `),ore=a("strong"),jso=o("not"),Dso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MB=a("a"),Gso=o("from_pretrained()"),Oso=o(" to load the model weights."),Vso=l(),rre=a("p"),Xso=o("Examples:"),zso=l(),f(uw.$$.fragment),Qso=l(),qe=a("div"),f(bw.$$.fragment),Wso=l(),tre=a("p"),Hso=o("Instantiate one of the base model classes of the library from a pretrained model."),Uso=l(),Xa=a("p"),Jso=o("The model class to instantiate is selected based on the "),are=a("code"),Yso=o("model_type"),Kso=o(` property of the config object (either
passed as an argument or loaded from `),nre=a("code"),Zso=o("pretrained_model_name_or_path"),elo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sre=a("code"),olo=o("pretrained_model_name_or_path"),rlo=o(":"),tlo=l(),T=a("ul"),ep=a("li"),lre=a("strong"),alo=o("albert"),nlo=o(" \u2014 "),EB=a("a"),slo=o("AlbertModel"),llo=o(" (ALBERT model)"),ilo=l(),op=a("li"),ire=a("strong"),dlo=o("bart"),clo=o(" \u2014 "),CB=a("a"),flo=o("BartModel"),mlo=o(" (BART model)"),glo=l(),rp=a("li"),dre=a("strong"),hlo=o("beit"),plo=o(" \u2014 "),wB=a("a"),_lo=o("BeitModel"),ulo=o(" (BEiT model)"),blo=l(),tp=a("li"),cre=a("strong"),vlo=o("bert"),Flo=o(" \u2014 "),AB=a("a"),Tlo=o("BertModel"),Mlo=o(" (BERT model)"),Elo=l(),ap=a("li"),fre=a("strong"),Clo=o("bert-generation"),wlo=o(" \u2014 "),yB=a("a"),Alo=o("BertGenerationEncoder"),ylo=o(" (Bert Generation model)"),Llo=l(),np=a("li"),mre=a("strong"),xlo=o("big_bird"),klo=o(" \u2014 "),LB=a("a"),Slo=o("BigBirdModel"),Rlo=o(" (BigBird model)"),Blo=l(),sp=a("li"),gre=a("strong"),Plo=o("bigbird_pegasus"),$lo=o(" \u2014 "),xB=a("a"),Ilo=o("BigBirdPegasusModel"),qlo=o(" (BigBirdPegasus model)"),Nlo=l(),lp=a("li"),hre=a("strong"),jlo=o("blenderbot"),Dlo=o(" \u2014 "),kB=a("a"),Glo=o("BlenderbotModel"),Olo=o(" (Blenderbot model)"),Vlo=l(),ip=a("li"),pre=a("strong"),Xlo=o("blenderbot-small"),zlo=o(" \u2014 "),SB=a("a"),Qlo=o("BlenderbotSmallModel"),Wlo=o(" (BlenderbotSmall model)"),Hlo=l(),dp=a("li"),_re=a("strong"),Ulo=o("camembert"),Jlo=o(" \u2014 "),RB=a("a"),Ylo=o("CamembertModel"),Klo=o(" (CamemBERT model)"),Zlo=l(),cp=a("li"),ure=a("strong"),eio=o("canine"),oio=o(" \u2014 "),BB=a("a"),rio=o("CanineModel"),tio=o(" (Canine model)"),aio=l(),fp=a("li"),bre=a("strong"),nio=o("clip"),sio=o(" \u2014 "),PB=a("a"),lio=o("CLIPModel"),iio=o(" (CLIP model)"),dio=l(),mp=a("li"),vre=a("strong"),cio=o("convbert"),fio=o(" \u2014 "),$B=a("a"),mio=o("ConvBertModel"),gio=o(" (ConvBERT model)"),hio=l(),gp=a("li"),Fre=a("strong"),pio=o("convnext"),_io=o(" \u2014 "),IB=a("a"),uio=o("ConvNextModel"),bio=o(" (ConvNext model)"),vio=l(),hp=a("li"),Tre=a("strong"),Fio=o("ctrl"),Tio=o(" \u2014 "),qB=a("a"),Mio=o("CTRLModel"),Eio=o(" (CTRL model)"),Cio=l(),pp=a("li"),Mre=a("strong"),wio=o("data2vec-audio"),Aio=o(" \u2014 "),NB=a("a"),yio=o("Data2VecAudioModel"),Lio=o(" (Data2VecAudio model)"),xio=l(),_p=a("li"),Ere=a("strong"),kio=o("data2vec-text"),Sio=o(" \u2014 "),jB=a("a"),Rio=o("Data2VecTextModel"),Bio=o(" (Data2VecText model)"),Pio=l(),up=a("li"),Cre=a("strong"),$io=o("data2vec-vision"),Iio=o(" \u2014 "),DB=a("a"),qio=o("Data2VecVisionModel"),Nio=o(" (Data2VecVision model)"),jio=l(),bp=a("li"),wre=a("strong"),Dio=o("deberta"),Gio=o(" \u2014 "),GB=a("a"),Oio=o("DebertaModel"),Vio=o(" (DeBERTa model)"),Xio=l(),vp=a("li"),Are=a("strong"),zio=o("deberta-v2"),Qio=o(" \u2014 "),OB=a("a"),Wio=o("DebertaV2Model"),Hio=o(" (DeBERTa-v2 model)"),Uio=l(),Fp=a("li"),yre=a("strong"),Jio=o("decision_transformer"),Yio=o(" \u2014 "),VB=a("a"),Kio=o("DecisionTransformerModel"),Zio=o(" (Decision Transformer model)"),edo=l(),Tp=a("li"),Lre=a("strong"),odo=o("deit"),rdo=o(" \u2014 "),XB=a("a"),tdo=o("DeiTModel"),ado=o(" (DeiT model)"),ndo=l(),Mp=a("li"),xre=a("strong"),sdo=o("detr"),ldo=o(" \u2014 "),zB=a("a"),ido=o("DetrModel"),ddo=o(" (DETR model)"),cdo=l(),Ep=a("li"),kre=a("strong"),fdo=o("distilbert"),mdo=o(" \u2014 "),QB=a("a"),gdo=o("DistilBertModel"),hdo=o(" (DistilBERT model)"),pdo=l(),Cp=a("li"),Sre=a("strong"),_do=o("dpr"),udo=o(" \u2014 "),WB=a("a"),bdo=o("DPRQuestionEncoder"),vdo=o(" (DPR model)"),Fdo=l(),wp=a("li"),Rre=a("strong"),Tdo=o("dpt"),Mdo=o(" \u2014 "),HB=a("a"),Edo=o("DPTModel"),Cdo=o(" (DPT model)"),wdo=l(),Ap=a("li"),Bre=a("strong"),Ado=o("electra"),ydo=o(" \u2014 "),UB=a("a"),Ldo=o("ElectraModel"),xdo=o(" (ELECTRA model)"),kdo=l(),yp=a("li"),Pre=a("strong"),Sdo=o("flaubert"),Rdo=o(" \u2014 "),JB=a("a"),Bdo=o("FlaubertModel"),Pdo=o(" (FlauBERT model)"),$do=l(),Lp=a("li"),$re=a("strong"),Ido=o("flava"),qdo=o(" \u2014 "),YB=a("a"),Ndo=o("FLAVAModel"),jdo=o(" (FLAVA model)"),Ddo=l(),xp=a("li"),Ire=a("strong"),Gdo=o("fnet"),Odo=o(" \u2014 "),KB=a("a"),Vdo=o("FNetModel"),Xdo=o(" (FNet model)"),zdo=l(),kp=a("li"),qre=a("strong"),Qdo=o("fsmt"),Wdo=o(" \u2014 "),ZB=a("a"),Hdo=o("FSMTModel"),Udo=o(" (FairSeq Machine-Translation model)"),Jdo=l(),Ds=a("li"),Nre=a("strong"),Ydo=o("funnel"),Kdo=o(" \u2014 "),eP=a("a"),Zdo=o("FunnelModel"),eco=o(" or "),oP=a("a"),oco=o("FunnelBaseModel"),rco=o(" (Funnel Transformer model)"),tco=l(),Sp=a("li"),jre=a("strong"),aco=o("glpn"),nco=o(" \u2014 "),rP=a("a"),sco=o("GLPNModel"),lco=o(" (GLPN model)"),ico=l(),Rp=a("li"),Dre=a("strong"),dco=o("gpt2"),cco=o(" \u2014 "),tP=a("a"),fco=o("GPT2Model"),mco=o(" (OpenAI GPT-2 model)"),gco=l(),Bp=a("li"),Gre=a("strong"),hco=o("gpt_neo"),pco=o(" \u2014 "),aP=a("a"),_co=o("GPTNeoModel"),uco=o(" (GPT Neo model)"),bco=l(),Pp=a("li"),Ore=a("strong"),vco=o("gptj"),Fco=o(" \u2014 "),nP=a("a"),Tco=o("GPTJModel"),Mco=o(" (GPT-J model)"),Eco=l(),$p=a("li"),Vre=a("strong"),Cco=o("hubert"),wco=o(" \u2014 "),sP=a("a"),Aco=o("HubertModel"),yco=o(" (Hubert model)"),Lco=l(),Ip=a("li"),Xre=a("strong"),xco=o("ibert"),kco=o(" \u2014 "),lP=a("a"),Sco=o("IBertModel"),Rco=o(" (I-BERT model)"),Bco=l(),qp=a("li"),zre=a("strong"),Pco=o("imagegpt"),$co=o(" \u2014 "),iP=a("a"),Ico=o("ImageGPTModel"),qco=o(" (ImageGPT model)"),Nco=l(),Np=a("li"),Qre=a("strong"),jco=o("layoutlm"),Dco=o(" \u2014 "),dP=a("a"),Gco=o("LayoutLMModel"),Oco=o(" (LayoutLM model)"),Vco=l(),jp=a("li"),Wre=a("strong"),Xco=o("layoutlmv2"),zco=o(" \u2014 "),cP=a("a"),Qco=o("LayoutLMv2Model"),Wco=o(" (LayoutLMv2 model)"),Hco=l(),Dp=a("li"),Hre=a("strong"),Uco=o("led"),Jco=o(" \u2014 "),fP=a("a"),Yco=o("LEDModel"),Kco=o(" (LED model)"),Zco=l(),Gp=a("li"),Ure=a("strong"),efo=o("longformer"),ofo=o(" \u2014 "),mP=a("a"),rfo=o("LongformerModel"),tfo=o(" (Longformer model)"),afo=l(),Op=a("li"),Jre=a("strong"),nfo=o("luke"),sfo=o(" \u2014 "),gP=a("a"),lfo=o("LukeModel"),ifo=o(" (LUKE model)"),dfo=l(),Vp=a("li"),Yre=a("strong"),cfo=o("lxmert"),ffo=o(" \u2014 "),hP=a("a"),mfo=o("LxmertModel"),gfo=o(" (LXMERT model)"),hfo=l(),Xp=a("li"),Kre=a("strong"),pfo=o("m2m_100"),_fo=o(" \u2014 "),pP=a("a"),ufo=o("M2M100Model"),bfo=o(" (M2M100 model)"),vfo=l(),zp=a("li"),Zre=a("strong"),Ffo=o("marian"),Tfo=o(" \u2014 "),_P=a("a"),Mfo=o("MarianModel"),Efo=o(" (Marian model)"),Cfo=l(),Qp=a("li"),ete=a("strong"),wfo=o("maskformer"),Afo=o(" \u2014 "),uP=a("a"),yfo=o("MaskFormerModel"),Lfo=o(" (MaskFormer model)"),xfo=l(),Wp=a("li"),ote=a("strong"),kfo=o("mbart"),Sfo=o(" \u2014 "),bP=a("a"),Rfo=o("MBartModel"),Bfo=o(" (mBART model)"),Pfo=l(),Hp=a("li"),rte=a("strong"),$fo=o("megatron-bert"),Ifo=o(" \u2014 "),vP=a("a"),qfo=o("MegatronBertModel"),Nfo=o(" (MegatronBert model)"),jfo=l(),Up=a("li"),tte=a("strong"),Dfo=o("mobilebert"),Gfo=o(" \u2014 "),FP=a("a"),Ofo=o("MobileBertModel"),Vfo=o(" (MobileBERT model)"),Xfo=l(),Jp=a("li"),ate=a("strong"),zfo=o("mpnet"),Qfo=o(" \u2014 "),TP=a("a"),Wfo=o("MPNetModel"),Hfo=o(" (MPNet model)"),Ufo=l(),Yp=a("li"),nte=a("strong"),Jfo=o("mt5"),Yfo=o(" \u2014 "),MP=a("a"),Kfo=o("MT5Model"),Zfo=o(" (mT5 model)"),emo=l(),Kp=a("li"),ste=a("strong"),omo=o("nystromformer"),rmo=o(" \u2014 "),EP=a("a"),tmo=o("NystromformerModel"),amo=o(" (Nystromformer model)"),nmo=l(),Zp=a("li"),lte=a("strong"),smo=o("openai-gpt"),lmo=o(" \u2014 "),CP=a("a"),imo=o("OpenAIGPTModel"),dmo=o(" (OpenAI GPT model)"),cmo=l(),e_=a("li"),ite=a("strong"),fmo=o("pegasus"),mmo=o(" \u2014 "),wP=a("a"),gmo=o("PegasusModel"),hmo=o(" (Pegasus model)"),pmo=l(),o_=a("li"),dte=a("strong"),_mo=o("perceiver"),umo=o(" \u2014 "),AP=a("a"),bmo=o("PerceiverModel"),vmo=o(" (Perceiver model)"),Fmo=l(),r_=a("li"),cte=a("strong"),Tmo=o("plbart"),Mmo=o(" \u2014 "),yP=a("a"),Emo=o("PLBartModel"),Cmo=o(" (PLBart model)"),wmo=l(),t_=a("li"),fte=a("strong"),Amo=o("poolformer"),ymo=o(" \u2014 "),LP=a("a"),Lmo=o("PoolFormerModel"),xmo=o(" (PoolFormer model)"),kmo=l(),a_=a("li"),mte=a("strong"),Smo=o("prophetnet"),Rmo=o(" \u2014 "),xP=a("a"),Bmo=o("ProphetNetModel"),Pmo=o(" (ProphetNet model)"),$mo=l(),n_=a("li"),gte=a("strong"),Imo=o("qdqbert"),qmo=o(" \u2014 "),kP=a("a"),Nmo=o("QDQBertModel"),jmo=o(" (QDQBert model)"),Dmo=l(),s_=a("li"),hte=a("strong"),Gmo=o("reformer"),Omo=o(" \u2014 "),SP=a("a"),Vmo=o("ReformerModel"),Xmo=o(" (Reformer model)"),zmo=l(),l_=a("li"),pte=a("strong"),Qmo=o("regnet"),Wmo=o(" \u2014 "),RP=a("a"),Hmo=o("RegNetModel"),Umo=o(" (RegNet model)"),Jmo=l(),i_=a("li"),_te=a("strong"),Ymo=o("rembert"),Kmo=o(" \u2014 "),BP=a("a"),Zmo=o("RemBertModel"),ego=o(" (RemBERT model)"),ogo=l(),d_=a("li"),ute=a("strong"),rgo=o("resnet"),tgo=o(" \u2014 "),PP=a("a"),ago=o("ResNetModel"),ngo=o(" (ResNet model)"),sgo=l(),c_=a("li"),bte=a("strong"),lgo=o("retribert"),igo=o(" \u2014 "),$P=a("a"),dgo=o("RetriBertModel"),cgo=o(" (RetriBERT model)"),fgo=l(),f_=a("li"),vte=a("strong"),mgo=o("roberta"),ggo=o(" \u2014 "),IP=a("a"),hgo=o("RobertaModel"),pgo=o(" (RoBERTa model)"),_go=l(),m_=a("li"),Fte=a("strong"),ugo=o("roformer"),bgo=o(" \u2014 "),qP=a("a"),vgo=o("RoFormerModel"),Fgo=o(" (RoFormer model)"),Tgo=l(),g_=a("li"),Tte=a("strong"),Mgo=o("segformer"),Ego=o(" \u2014 "),NP=a("a"),Cgo=o("SegformerModel"),wgo=o(" (SegFormer model)"),Ago=l(),h_=a("li"),Mte=a("strong"),ygo=o("sew"),Lgo=o(" \u2014 "),jP=a("a"),xgo=o("SEWModel"),kgo=o(" (SEW model)"),Sgo=l(),p_=a("li"),Ete=a("strong"),Rgo=o("sew-d"),Bgo=o(" \u2014 "),DP=a("a"),Pgo=o("SEWDModel"),$go=o(" (SEW-D model)"),Igo=l(),__=a("li"),Cte=a("strong"),qgo=o("speech_to_text"),Ngo=o(" \u2014 "),GP=a("a"),jgo=o("Speech2TextModel"),Dgo=o(" (Speech2Text model)"),Ggo=l(),u_=a("li"),wte=a("strong"),Ogo=o("splinter"),Vgo=o(" \u2014 "),OP=a("a"),Xgo=o("SplinterModel"),zgo=o(" (Splinter model)"),Qgo=l(),b_=a("li"),Ate=a("strong"),Wgo=o("squeezebert"),Hgo=o(" \u2014 "),VP=a("a"),Ugo=o("SqueezeBertModel"),Jgo=o(" (SqueezeBERT model)"),Ygo=l(),v_=a("li"),yte=a("strong"),Kgo=o("swin"),Zgo=o(" \u2014 "),XP=a("a"),eho=o("SwinModel"),oho=o(" (Swin model)"),rho=l(),F_=a("li"),Lte=a("strong"),tho=o("t5"),aho=o(" \u2014 "),zP=a("a"),nho=o("T5Model"),sho=o(" (T5 model)"),lho=l(),T_=a("li"),xte=a("strong"),iho=o("tapas"),dho=o(" \u2014 "),QP=a("a"),cho=o("TapasModel"),fho=o(" (TAPAS model)"),mho=l(),M_=a("li"),kte=a("strong"),gho=o("transfo-xl"),hho=o(" \u2014 "),WP=a("a"),pho=o("TransfoXLModel"),_ho=o(" (Transformer-XL model)"),uho=l(),E_=a("li"),Ste=a("strong"),bho=o("unispeech"),vho=o(" \u2014 "),HP=a("a"),Fho=o("UniSpeechModel"),Tho=o(" (UniSpeech model)"),Mho=l(),C_=a("li"),Rte=a("strong"),Eho=o("unispeech-sat"),Cho=o(" \u2014 "),UP=a("a"),who=o("UniSpeechSatModel"),Aho=o(" (UniSpeechSat model)"),yho=l(),w_=a("li"),Bte=a("strong"),Lho=o("van"),xho=o(" \u2014 "),JP=a("a"),kho=o("VanModel"),Sho=o(" (VAN model)"),Rho=l(),A_=a("li"),Pte=a("strong"),Bho=o("vilt"),Pho=o(" \u2014 "),YP=a("a"),$ho=o("ViltModel"),Iho=o(" (ViLT model)"),qho=l(),y_=a("li"),$te=a("strong"),Nho=o("vision-text-dual-encoder"),jho=o(" \u2014 "),KP=a("a"),Dho=o("VisionTextDualEncoderModel"),Gho=o(" (VisionTextDualEncoder model)"),Oho=l(),L_=a("li"),Ite=a("strong"),Vho=o("visual_bert"),Xho=o(" \u2014 "),ZP=a("a"),zho=o("VisualBertModel"),Qho=o(" (VisualBert model)"),Who=l(),x_=a("li"),qte=a("strong"),Hho=o("vit"),Uho=o(" \u2014 "),e$=a("a"),Jho=o("ViTModel"),Yho=o(" (ViT model)"),Kho=l(),k_=a("li"),Nte=a("strong"),Zho=o("vit_mae"),epo=o(" \u2014 "),o$=a("a"),opo=o("ViTMAEModel"),rpo=o(" (ViTMAE model)"),tpo=l(),S_=a("li"),jte=a("strong"),apo=o("wav2vec2"),npo=o(" \u2014 "),r$=a("a"),spo=o("Wav2Vec2Model"),lpo=o(" (Wav2Vec2 model)"),ipo=l(),R_=a("li"),Dte=a("strong"),dpo=o("wavlm"),cpo=o(" \u2014 "),t$=a("a"),fpo=o("WavLMModel"),mpo=o(" (WavLM model)"),gpo=l(),B_=a("li"),Gte=a("strong"),hpo=o("xglm"),ppo=o(" \u2014 "),a$=a("a"),_po=o("XGLMModel"),upo=o(" (XGLM model)"),bpo=l(),P_=a("li"),Ote=a("strong"),vpo=o("xlm"),Fpo=o(" \u2014 "),n$=a("a"),Tpo=o("XLMModel"),Mpo=o(" (XLM model)"),Epo=l(),$_=a("li"),Vte=a("strong"),Cpo=o("xlm-prophetnet"),wpo=o(" \u2014 "),s$=a("a"),Apo=o("XLMProphetNetModel"),ypo=o(" (XLMProphetNet model)"),Lpo=l(),I_=a("li"),Xte=a("strong"),xpo=o("xlm-roberta"),kpo=o(" \u2014 "),l$=a("a"),Spo=o("XLMRobertaModel"),Rpo=o(" (XLM-RoBERTa model)"),Bpo=l(),q_=a("li"),zte=a("strong"),Ppo=o("xlm-roberta-xl"),$po=o(" \u2014 "),i$=a("a"),Ipo=o("XLMRobertaXLModel"),qpo=o(" (XLM-RoBERTa-XL model)"),Npo=l(),N_=a("li"),Qte=a("strong"),jpo=o("xlnet"),Dpo=o(" \u2014 "),d$=a("a"),Gpo=o("XLNetModel"),Opo=o(" (XLNet model)"),Vpo=l(),j_=a("li"),Wte=a("strong"),Xpo=o("yoso"),zpo=o(" \u2014 "),c$=a("a"),Qpo=o("YosoModel"),Wpo=o(" (YOSO model)"),Hpo=l(),D_=a("p"),Upo=o("The model is set in evaluation mode by default using "),Hte=a("code"),Jpo=o("model.eval()"),Ypo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=a("code"),Kpo=o("model.train()"),Zpo=l(),Jte=a("p"),e_o=o("Examples:"),o_o=l(),f(vw.$$.fragment),mBe=l(),ed=a("h2"),G_=a("a"),Yte=a("span"),f(Fw.$$.fragment),r_o=l(),Kte=a("span"),t_o=o("AutoModelForPreTraining"),gBe=l(),Yo=a("div"),f(Tw.$$.fragment),a_o=l(),od=a("p"),n_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),f$=a("a"),s_o=o("from_pretrained()"),l_o=o(" class method or the "),m$=a("a"),i_o=o("from_config()"),d_o=o(` class
method.`),c_o=l(),Mw=a("p"),f_o=o("This class cannot be instantiated directly using "),Zte=a("code"),m_o=o("__init__()"),g_o=o(" (throws an error)."),h_o=l(),zr=a("div"),f(Ew.$$.fragment),p_o=l(),eae=a("p"),__o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u_o=l(),rd=a("p"),b_o=o(`Note:
Loading a model from its configuration file does `),oae=a("strong"),v_o=o("not"),F_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g$=a("a"),T_o=o("from_pretrained()"),M_o=o(" to load the model weights."),E_o=l(),rae=a("p"),C_o=o("Examples:"),w_o=l(),f(Cw.$$.fragment),A_o=l(),Ne=a("div"),f(ww.$$.fragment),y_o=l(),tae=a("p"),L_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x_o=l(),za=a("p"),k_o=o("The model class to instantiate is selected based on the "),aae=a("code"),S_o=o("model_type"),R_o=o(` property of the config object (either
passed as an argument or loaded from `),nae=a("code"),B_o=o("pretrained_model_name_or_path"),P_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sae=a("code"),$_o=o("pretrained_model_name_or_path"),I_o=o(":"),q_o=l(),S=a("ul"),O_=a("li"),lae=a("strong"),N_o=o("albert"),j_o=o(" \u2014 "),h$=a("a"),D_o=o("AlbertForPreTraining"),G_o=o(" (ALBERT model)"),O_o=l(),V_=a("li"),iae=a("strong"),V_o=o("bart"),X_o=o(" \u2014 "),p$=a("a"),z_o=o("BartForConditionalGeneration"),Q_o=o(" (BART model)"),W_o=l(),X_=a("li"),dae=a("strong"),H_o=o("bert"),U_o=o(" \u2014 "),_$=a("a"),J_o=o("BertForPreTraining"),Y_o=o(" (BERT model)"),K_o=l(),z_=a("li"),cae=a("strong"),Z_o=o("big_bird"),euo=o(" \u2014 "),u$=a("a"),ouo=o("BigBirdForPreTraining"),ruo=o(" (BigBird model)"),tuo=l(),Q_=a("li"),fae=a("strong"),auo=o("camembert"),nuo=o(" \u2014 "),b$=a("a"),suo=o("CamembertForMaskedLM"),luo=o(" (CamemBERT model)"),iuo=l(),W_=a("li"),mae=a("strong"),duo=o("ctrl"),cuo=o(" \u2014 "),v$=a("a"),fuo=o("CTRLLMHeadModel"),muo=o(" (CTRL model)"),guo=l(),H_=a("li"),gae=a("strong"),huo=o("data2vec-text"),puo=o(" \u2014 "),F$=a("a"),_uo=o("Data2VecTextForMaskedLM"),uuo=o(" (Data2VecText model)"),buo=l(),U_=a("li"),hae=a("strong"),vuo=o("deberta"),Fuo=o(" \u2014 "),T$=a("a"),Tuo=o("DebertaForMaskedLM"),Muo=o(" (DeBERTa model)"),Euo=l(),J_=a("li"),pae=a("strong"),Cuo=o("deberta-v2"),wuo=o(" \u2014 "),M$=a("a"),Auo=o("DebertaV2ForMaskedLM"),yuo=o(" (DeBERTa-v2 model)"),Luo=l(),Y_=a("li"),_ae=a("strong"),xuo=o("distilbert"),kuo=o(" \u2014 "),E$=a("a"),Suo=o("DistilBertForMaskedLM"),Ruo=o(" (DistilBERT model)"),Buo=l(),K_=a("li"),uae=a("strong"),Puo=o("electra"),$uo=o(" \u2014 "),C$=a("a"),Iuo=o("ElectraForPreTraining"),quo=o(" (ELECTRA model)"),Nuo=l(),Z_=a("li"),bae=a("strong"),juo=o("flaubert"),Duo=o(" \u2014 "),w$=a("a"),Guo=o("FlaubertWithLMHeadModel"),Ouo=o(" (FlauBERT model)"),Vuo=l(),eu=a("li"),vae=a("strong"),Xuo=o("flava"),zuo=o(" \u2014 "),A$=a("a"),Quo=o("FLAVAForPreTraining"),Wuo=o(" (FLAVA model)"),Huo=l(),ou=a("li"),Fae=a("strong"),Uuo=o("fnet"),Juo=o(" \u2014 "),y$=a("a"),Yuo=o("FNetForPreTraining"),Kuo=o(" (FNet model)"),Zuo=l(),ru=a("li"),Tae=a("strong"),e6o=o("fsmt"),o6o=o(" \u2014 "),L$=a("a"),r6o=o("FSMTForConditionalGeneration"),t6o=o(" (FairSeq Machine-Translation model)"),a6o=l(),tu=a("li"),Mae=a("strong"),n6o=o("funnel"),s6o=o(" \u2014 "),x$=a("a"),l6o=o("FunnelForPreTraining"),i6o=o(" (Funnel Transformer model)"),d6o=l(),au=a("li"),Eae=a("strong"),c6o=o("gpt2"),f6o=o(" \u2014 "),k$=a("a"),m6o=o("GPT2LMHeadModel"),g6o=o(" (OpenAI GPT-2 model)"),h6o=l(),nu=a("li"),Cae=a("strong"),p6o=o("ibert"),_6o=o(" \u2014 "),S$=a("a"),u6o=o("IBertForMaskedLM"),b6o=o(" (I-BERT model)"),v6o=l(),su=a("li"),wae=a("strong"),F6o=o("layoutlm"),T6o=o(" \u2014 "),R$=a("a"),M6o=o("LayoutLMForMaskedLM"),E6o=o(" (LayoutLM model)"),C6o=l(),lu=a("li"),Aae=a("strong"),w6o=o("longformer"),A6o=o(" \u2014 "),B$=a("a"),y6o=o("LongformerForMaskedLM"),L6o=o(" (Longformer model)"),x6o=l(),iu=a("li"),yae=a("strong"),k6o=o("lxmert"),S6o=o(" \u2014 "),P$=a("a"),R6o=o("LxmertForPreTraining"),B6o=o(" (LXMERT model)"),P6o=l(),du=a("li"),Lae=a("strong"),$6o=o("megatron-bert"),I6o=o(" \u2014 "),$$=a("a"),q6o=o("MegatronBertForPreTraining"),N6o=o(" (MegatronBert model)"),j6o=l(),cu=a("li"),xae=a("strong"),D6o=o("mobilebert"),G6o=o(" \u2014 "),I$=a("a"),O6o=o("MobileBertForPreTraining"),V6o=o(" (MobileBERT model)"),X6o=l(),fu=a("li"),kae=a("strong"),z6o=o("mpnet"),Q6o=o(" \u2014 "),q$=a("a"),W6o=o("MPNetForMaskedLM"),H6o=o(" (MPNet model)"),U6o=l(),mu=a("li"),Sae=a("strong"),J6o=o("openai-gpt"),Y6o=o(" \u2014 "),N$=a("a"),K6o=o("OpenAIGPTLMHeadModel"),Z6o=o(" (OpenAI GPT model)"),e1o=l(),gu=a("li"),Rae=a("strong"),o1o=o("retribert"),r1o=o(" \u2014 "),j$=a("a"),t1o=o("RetriBertModel"),a1o=o(" (RetriBERT model)"),n1o=l(),hu=a("li"),Bae=a("strong"),s1o=o("roberta"),l1o=o(" \u2014 "),D$=a("a"),i1o=o("RobertaForMaskedLM"),d1o=o(" (RoBERTa model)"),c1o=l(),pu=a("li"),Pae=a("strong"),f1o=o("squeezebert"),m1o=o(" \u2014 "),G$=a("a"),g1o=o("SqueezeBertForMaskedLM"),h1o=o(" (SqueezeBERT model)"),p1o=l(),_u=a("li"),$ae=a("strong"),_1o=o("t5"),u1o=o(" \u2014 "),O$=a("a"),b1o=o("T5ForConditionalGeneration"),v1o=o(" (T5 model)"),F1o=l(),uu=a("li"),Iae=a("strong"),T1o=o("tapas"),M1o=o(" \u2014 "),V$=a("a"),E1o=o("TapasForMaskedLM"),C1o=o(" (TAPAS model)"),w1o=l(),bu=a("li"),qae=a("strong"),A1o=o("transfo-xl"),y1o=o(" \u2014 "),X$=a("a"),L1o=o("TransfoXLLMHeadModel"),x1o=o(" (Transformer-XL model)"),k1o=l(),vu=a("li"),Nae=a("strong"),S1o=o("unispeech"),R1o=o(" \u2014 "),z$=a("a"),B1o=o("UniSpeechForPreTraining"),P1o=o(" (UniSpeech model)"),$1o=l(),Fu=a("li"),jae=a("strong"),I1o=o("unispeech-sat"),q1o=o(" \u2014 "),Q$=a("a"),N1o=o("UniSpeechSatForPreTraining"),j1o=o(" (UniSpeechSat model)"),D1o=l(),Tu=a("li"),Dae=a("strong"),G1o=o("visual_bert"),O1o=o(" \u2014 "),W$=a("a"),V1o=o("VisualBertForPreTraining"),X1o=o(" (VisualBert model)"),z1o=l(),Mu=a("li"),Gae=a("strong"),Q1o=o("vit_mae"),W1o=o(" \u2014 "),H$=a("a"),H1o=o("ViTMAEForPreTraining"),U1o=o(" (ViTMAE model)"),J1o=l(),Eu=a("li"),Oae=a("strong"),Y1o=o("wav2vec2"),K1o=o(" \u2014 "),U$=a("a"),Z1o=o("Wav2Vec2ForPreTraining"),e4o=o(" (Wav2Vec2 model)"),o4o=l(),Cu=a("li"),Vae=a("strong"),r4o=o("xlm"),t4o=o(" \u2014 "),J$=a("a"),a4o=o("XLMWithLMHeadModel"),n4o=o(" (XLM model)"),s4o=l(),wu=a("li"),Xae=a("strong"),l4o=o("xlm-roberta"),i4o=o(" \u2014 "),Y$=a("a"),d4o=o("XLMRobertaForMaskedLM"),c4o=o(" (XLM-RoBERTa model)"),f4o=l(),Au=a("li"),zae=a("strong"),m4o=o("xlm-roberta-xl"),g4o=o(" \u2014 "),K$=a("a"),h4o=o("XLMRobertaXLForMaskedLM"),p4o=o(" (XLM-RoBERTa-XL model)"),_4o=l(),yu=a("li"),Qae=a("strong"),u4o=o("xlnet"),b4o=o(" \u2014 "),Z$=a("a"),v4o=o("XLNetLMHeadModel"),F4o=o(" (XLNet model)"),T4o=l(),Lu=a("p"),M4o=o("The model is set in evaluation mode by default using "),Wae=a("code"),E4o=o("model.eval()"),C4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=a("code"),w4o=o("model.train()"),A4o=l(),Uae=a("p"),y4o=o("Examples:"),L4o=l(),f(Aw.$$.fragment),hBe=l(),td=a("h2"),xu=a("a"),Jae=a("span"),f(yw.$$.fragment),x4o=l(),Yae=a("span"),k4o=o("AutoModelForCausalLM"),pBe=l(),Ko=a("div"),f(Lw.$$.fragment),S4o=l(),ad=a("p"),R4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eI=a("a"),B4o=o("from_pretrained()"),P4o=o(" class method or the "),oI=a("a"),$4o=o("from_config()"),I4o=o(` class
method.`),q4o=l(),xw=a("p"),N4o=o("This class cannot be instantiated directly using "),Kae=a("code"),j4o=o("__init__()"),D4o=o(" (throws an error)."),G4o=l(),Qr=a("div"),f(kw.$$.fragment),O4o=l(),Zae=a("p"),V4o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X4o=l(),nd=a("p"),z4o=o(`Note:
Loading a model from its configuration file does `),ene=a("strong"),Q4o=o("not"),W4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rI=a("a"),H4o=o("from_pretrained()"),U4o=o(" to load the model weights."),J4o=l(),one=a("p"),Y4o=o("Examples:"),K4o=l(),f(Sw.$$.fragment),Z4o=l(),je=a("div"),f(Rw.$$.fragment),ebo=l(),rne=a("p"),obo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rbo=l(),Qa=a("p"),tbo=o("The model class to instantiate is selected based on the "),tne=a("code"),abo=o("model_type"),nbo=o(` property of the config object (either
passed as an argument or loaded from `),ane=a("code"),sbo=o("pretrained_model_name_or_path"),lbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nne=a("code"),ibo=o("pretrained_model_name_or_path"),dbo=o(":"),cbo=l(),$=a("ul"),ku=a("li"),sne=a("strong"),fbo=o("bart"),mbo=o(" \u2014 "),tI=a("a"),gbo=o("BartForCausalLM"),hbo=o(" (BART model)"),pbo=l(),Su=a("li"),lne=a("strong"),_bo=o("bert"),ubo=o(" \u2014 "),aI=a("a"),bbo=o("BertLMHeadModel"),vbo=o(" (BERT model)"),Fbo=l(),Ru=a("li"),ine=a("strong"),Tbo=o("bert-generation"),Mbo=o(" \u2014 "),nI=a("a"),Ebo=o("BertGenerationDecoder"),Cbo=o(" (Bert Generation model)"),wbo=l(),Bu=a("li"),dne=a("strong"),Abo=o("big_bird"),ybo=o(" \u2014 "),sI=a("a"),Lbo=o("BigBirdForCausalLM"),xbo=o(" (BigBird model)"),kbo=l(),Pu=a("li"),cne=a("strong"),Sbo=o("bigbird_pegasus"),Rbo=o(" \u2014 "),lI=a("a"),Bbo=o("BigBirdPegasusForCausalLM"),Pbo=o(" (BigBirdPegasus model)"),$bo=l(),$u=a("li"),fne=a("strong"),Ibo=o("blenderbot"),qbo=o(" \u2014 "),iI=a("a"),Nbo=o("BlenderbotForCausalLM"),jbo=o(" (Blenderbot model)"),Dbo=l(),Iu=a("li"),mne=a("strong"),Gbo=o("blenderbot-small"),Obo=o(" \u2014 "),dI=a("a"),Vbo=o("BlenderbotSmallForCausalLM"),Xbo=o(" (BlenderbotSmall model)"),zbo=l(),qu=a("li"),gne=a("strong"),Qbo=o("camembert"),Wbo=o(" \u2014 "),cI=a("a"),Hbo=o("CamembertForCausalLM"),Ubo=o(" (CamemBERT model)"),Jbo=l(),Nu=a("li"),hne=a("strong"),Ybo=o("ctrl"),Kbo=o(" \u2014 "),fI=a("a"),Zbo=o("CTRLLMHeadModel"),e2o=o(" (CTRL model)"),o2o=l(),ju=a("li"),pne=a("strong"),r2o=o("data2vec-text"),t2o=o(" \u2014 "),mI=a("a"),a2o=o("Data2VecTextForCausalLM"),n2o=o(" (Data2VecText model)"),s2o=l(),Du=a("li"),_ne=a("strong"),l2o=o("electra"),i2o=o(" \u2014 "),gI=a("a"),d2o=o("ElectraForCausalLM"),c2o=o(" (ELECTRA model)"),f2o=l(),Gu=a("li"),une=a("strong"),m2o=o("gpt2"),g2o=o(" \u2014 "),hI=a("a"),h2o=o("GPT2LMHeadModel"),p2o=o(" (OpenAI GPT-2 model)"),_2o=l(),Ou=a("li"),bne=a("strong"),u2o=o("gpt_neo"),b2o=o(" \u2014 "),pI=a("a"),v2o=o("GPTNeoForCausalLM"),F2o=o(" (GPT Neo model)"),T2o=l(),Vu=a("li"),vne=a("strong"),M2o=o("gptj"),E2o=o(" \u2014 "),_I=a("a"),C2o=o("GPTJForCausalLM"),w2o=o(" (GPT-J model)"),A2o=l(),Xu=a("li"),Fne=a("strong"),y2o=o("marian"),L2o=o(" \u2014 "),uI=a("a"),x2o=o("MarianForCausalLM"),k2o=o(" (Marian model)"),S2o=l(),zu=a("li"),Tne=a("strong"),R2o=o("mbart"),B2o=o(" \u2014 "),bI=a("a"),P2o=o("MBartForCausalLM"),$2o=o(" (mBART model)"),I2o=l(),Qu=a("li"),Mne=a("strong"),q2o=o("megatron-bert"),N2o=o(" \u2014 "),vI=a("a"),j2o=o("MegatronBertForCausalLM"),D2o=o(" (MegatronBert model)"),G2o=l(),Wu=a("li"),Ene=a("strong"),O2o=o("openai-gpt"),V2o=o(" \u2014 "),FI=a("a"),X2o=o("OpenAIGPTLMHeadModel"),z2o=o(" (OpenAI GPT model)"),Q2o=l(),Hu=a("li"),Cne=a("strong"),W2o=o("pegasus"),H2o=o(" \u2014 "),TI=a("a"),U2o=o("PegasusForCausalLM"),J2o=o(" (Pegasus model)"),Y2o=l(),Uu=a("li"),wne=a("strong"),K2o=o("plbart"),Z2o=o(" \u2014 "),MI=a("a"),e5o=o("PLBartForCausalLM"),o5o=o(" (PLBart model)"),r5o=l(),Ju=a("li"),Ane=a("strong"),t5o=o("prophetnet"),a5o=o(" \u2014 "),EI=a("a"),n5o=o("ProphetNetForCausalLM"),s5o=o(" (ProphetNet model)"),l5o=l(),Yu=a("li"),yne=a("strong"),i5o=o("qdqbert"),d5o=o(" \u2014 "),CI=a("a"),c5o=o("QDQBertLMHeadModel"),f5o=o(" (QDQBert model)"),m5o=l(),Ku=a("li"),Lne=a("strong"),g5o=o("reformer"),h5o=o(" \u2014 "),wI=a("a"),p5o=o("ReformerModelWithLMHead"),_5o=o(" (Reformer model)"),u5o=l(),Zu=a("li"),xne=a("strong"),b5o=o("rembert"),v5o=o(" \u2014 "),AI=a("a"),F5o=o("RemBertForCausalLM"),T5o=o(" (RemBERT model)"),M5o=l(),e6=a("li"),kne=a("strong"),E5o=o("roberta"),C5o=o(" \u2014 "),yI=a("a"),w5o=o("RobertaForCausalLM"),A5o=o(" (RoBERTa model)"),y5o=l(),o6=a("li"),Sne=a("strong"),L5o=o("roformer"),x5o=o(" \u2014 "),LI=a("a"),k5o=o("RoFormerForCausalLM"),S5o=o(" (RoFormer model)"),R5o=l(),r6=a("li"),Rne=a("strong"),B5o=o("speech_to_text_2"),P5o=o(" \u2014 "),xI=a("a"),$5o=o("Speech2Text2ForCausalLM"),I5o=o(" (Speech2Text2 model)"),q5o=l(),t6=a("li"),Bne=a("strong"),N5o=o("transfo-xl"),j5o=o(" \u2014 "),kI=a("a"),D5o=o("TransfoXLLMHeadModel"),G5o=o(" (Transformer-XL model)"),O5o=l(),a6=a("li"),Pne=a("strong"),V5o=o("trocr"),X5o=o(" \u2014 "),SI=a("a"),z5o=o("TrOCRForCausalLM"),Q5o=o(" (TrOCR model)"),W5o=l(),n6=a("li"),$ne=a("strong"),H5o=o("xglm"),U5o=o(" \u2014 "),RI=a("a"),J5o=o("XGLMForCausalLM"),Y5o=o(" (XGLM model)"),K5o=l(),s6=a("li"),Ine=a("strong"),Z5o=o("xlm"),evo=o(" \u2014 "),BI=a("a"),ovo=o("XLMWithLMHeadModel"),rvo=o(" (XLM model)"),tvo=l(),l6=a("li"),qne=a("strong"),avo=o("xlm-prophetnet"),nvo=o(" \u2014 "),PI=a("a"),svo=o("XLMProphetNetForCausalLM"),lvo=o(" (XLMProphetNet model)"),ivo=l(),i6=a("li"),Nne=a("strong"),dvo=o("xlm-roberta"),cvo=o(" \u2014 "),$I=a("a"),fvo=o("XLMRobertaForCausalLM"),mvo=o(" (XLM-RoBERTa model)"),gvo=l(),d6=a("li"),jne=a("strong"),hvo=o("xlm-roberta-xl"),pvo=o(" \u2014 "),II=a("a"),_vo=o("XLMRobertaXLForCausalLM"),uvo=o(" (XLM-RoBERTa-XL model)"),bvo=l(),c6=a("li"),Dne=a("strong"),vvo=o("xlnet"),Fvo=o(" \u2014 "),qI=a("a"),Tvo=o("XLNetLMHeadModel"),Mvo=o(" (XLNet model)"),Evo=l(),f6=a("p"),Cvo=o("The model is set in evaluation mode by default using "),Gne=a("code"),wvo=o("model.eval()"),Avo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=a("code"),yvo=o("model.train()"),Lvo=l(),Vne=a("p"),xvo=o("Examples:"),kvo=l(),f(Bw.$$.fragment),_Be=l(),sd=a("h2"),m6=a("a"),Xne=a("span"),f(Pw.$$.fragment),Svo=l(),zne=a("span"),Rvo=o("AutoModelForMaskedLM"),uBe=l(),Zo=a("div"),f($w.$$.fragment),Bvo=l(),ld=a("p"),Pvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NI=a("a"),$vo=o("from_pretrained()"),Ivo=o(" class method or the "),jI=a("a"),qvo=o("from_config()"),Nvo=o(` class
method.`),jvo=l(),Iw=a("p"),Dvo=o("This class cannot be instantiated directly using "),Qne=a("code"),Gvo=o("__init__()"),Ovo=o(" (throws an error)."),Vvo=l(),Wr=a("div"),f(qw.$$.fragment),Xvo=l(),Wne=a("p"),zvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Qvo=l(),id=a("p"),Wvo=o(`Note:
Loading a model from its configuration file does `),Hne=a("strong"),Hvo=o("not"),Uvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DI=a("a"),Jvo=o("from_pretrained()"),Yvo=o(" to load the model weights."),Kvo=l(),Une=a("p"),Zvo=o("Examples:"),eFo=l(),f(Nw.$$.fragment),oFo=l(),De=a("div"),f(jw.$$.fragment),rFo=l(),Jne=a("p"),tFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aFo=l(),Wa=a("p"),nFo=o("The model class to instantiate is selected based on the "),Yne=a("code"),sFo=o("model_type"),lFo=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),iFo=o("pretrained_model_name_or_path"),dFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=a("code"),cFo=o("pretrained_model_name_or_path"),fFo=o(":"),mFo=l(),I=a("ul"),g6=a("li"),ese=a("strong"),gFo=o("albert"),hFo=o(" \u2014 "),GI=a("a"),pFo=o("AlbertForMaskedLM"),_Fo=o(" (ALBERT model)"),uFo=l(),h6=a("li"),ose=a("strong"),bFo=o("bart"),vFo=o(" \u2014 "),OI=a("a"),FFo=o("BartForConditionalGeneration"),TFo=o(" (BART model)"),MFo=l(),p6=a("li"),rse=a("strong"),EFo=o("bert"),CFo=o(" \u2014 "),VI=a("a"),wFo=o("BertForMaskedLM"),AFo=o(" (BERT model)"),yFo=l(),_6=a("li"),tse=a("strong"),LFo=o("big_bird"),xFo=o(" \u2014 "),XI=a("a"),kFo=o("BigBirdForMaskedLM"),SFo=o(" (BigBird model)"),RFo=l(),u6=a("li"),ase=a("strong"),BFo=o("camembert"),PFo=o(" \u2014 "),zI=a("a"),$Fo=o("CamembertForMaskedLM"),IFo=o(" (CamemBERT model)"),qFo=l(),b6=a("li"),nse=a("strong"),NFo=o("convbert"),jFo=o(" \u2014 "),QI=a("a"),DFo=o("ConvBertForMaskedLM"),GFo=o(" (ConvBERT model)"),OFo=l(),v6=a("li"),sse=a("strong"),VFo=o("data2vec-text"),XFo=o(" \u2014 "),WI=a("a"),zFo=o("Data2VecTextForMaskedLM"),QFo=o(" (Data2VecText model)"),WFo=l(),F6=a("li"),lse=a("strong"),HFo=o("deberta"),UFo=o(" \u2014 "),HI=a("a"),JFo=o("DebertaForMaskedLM"),YFo=o(" (DeBERTa model)"),KFo=l(),T6=a("li"),ise=a("strong"),ZFo=o("deberta-v2"),eTo=o(" \u2014 "),UI=a("a"),oTo=o("DebertaV2ForMaskedLM"),rTo=o(" (DeBERTa-v2 model)"),tTo=l(),M6=a("li"),dse=a("strong"),aTo=o("distilbert"),nTo=o(" \u2014 "),JI=a("a"),sTo=o("DistilBertForMaskedLM"),lTo=o(" (DistilBERT model)"),iTo=l(),E6=a("li"),cse=a("strong"),dTo=o("electra"),cTo=o(" \u2014 "),YI=a("a"),fTo=o("ElectraForMaskedLM"),mTo=o(" (ELECTRA model)"),gTo=l(),C6=a("li"),fse=a("strong"),hTo=o("flaubert"),pTo=o(" \u2014 "),KI=a("a"),_To=o("FlaubertWithLMHeadModel"),uTo=o(" (FlauBERT model)"),bTo=l(),w6=a("li"),mse=a("strong"),vTo=o("fnet"),FTo=o(" \u2014 "),ZI=a("a"),TTo=o("FNetForMaskedLM"),MTo=o(" (FNet model)"),ETo=l(),A6=a("li"),gse=a("strong"),CTo=o("funnel"),wTo=o(" \u2014 "),eq=a("a"),ATo=o("FunnelForMaskedLM"),yTo=o(" (Funnel Transformer model)"),LTo=l(),y6=a("li"),hse=a("strong"),xTo=o("ibert"),kTo=o(" \u2014 "),oq=a("a"),STo=o("IBertForMaskedLM"),RTo=o(" (I-BERT model)"),BTo=l(),L6=a("li"),pse=a("strong"),PTo=o("layoutlm"),$To=o(" \u2014 "),rq=a("a"),ITo=o("LayoutLMForMaskedLM"),qTo=o(" (LayoutLM model)"),NTo=l(),x6=a("li"),_se=a("strong"),jTo=o("longformer"),DTo=o(" \u2014 "),tq=a("a"),GTo=o("LongformerForMaskedLM"),OTo=o(" (Longformer model)"),VTo=l(),k6=a("li"),use=a("strong"),XTo=o("mbart"),zTo=o(" \u2014 "),aq=a("a"),QTo=o("MBartForConditionalGeneration"),WTo=o(" (mBART model)"),HTo=l(),S6=a("li"),bse=a("strong"),UTo=o("megatron-bert"),JTo=o(" \u2014 "),nq=a("a"),YTo=o("MegatronBertForMaskedLM"),KTo=o(" (MegatronBert model)"),ZTo=l(),R6=a("li"),vse=a("strong"),eMo=o("mobilebert"),oMo=o(" \u2014 "),sq=a("a"),rMo=o("MobileBertForMaskedLM"),tMo=o(" (MobileBERT model)"),aMo=l(),B6=a("li"),Fse=a("strong"),nMo=o("mpnet"),sMo=o(" \u2014 "),lq=a("a"),lMo=o("MPNetForMaskedLM"),iMo=o(" (MPNet model)"),dMo=l(),P6=a("li"),Tse=a("strong"),cMo=o("nystromformer"),fMo=o(" \u2014 "),iq=a("a"),mMo=o("NystromformerForMaskedLM"),gMo=o(" (Nystromformer model)"),hMo=l(),$6=a("li"),Mse=a("strong"),pMo=o("perceiver"),_Mo=o(" \u2014 "),dq=a("a"),uMo=o("PerceiverForMaskedLM"),bMo=o(" (Perceiver model)"),vMo=l(),I6=a("li"),Ese=a("strong"),FMo=o("qdqbert"),TMo=o(" \u2014 "),cq=a("a"),MMo=o("QDQBertForMaskedLM"),EMo=o(" (QDQBert model)"),CMo=l(),q6=a("li"),Cse=a("strong"),wMo=o("reformer"),AMo=o(" \u2014 "),fq=a("a"),yMo=o("ReformerForMaskedLM"),LMo=o(" (Reformer model)"),xMo=l(),N6=a("li"),wse=a("strong"),kMo=o("rembert"),SMo=o(" \u2014 "),mq=a("a"),RMo=o("RemBertForMaskedLM"),BMo=o(" (RemBERT model)"),PMo=l(),j6=a("li"),Ase=a("strong"),$Mo=o("roberta"),IMo=o(" \u2014 "),gq=a("a"),qMo=o("RobertaForMaskedLM"),NMo=o(" (RoBERTa model)"),jMo=l(),D6=a("li"),yse=a("strong"),DMo=o("roformer"),GMo=o(" \u2014 "),hq=a("a"),OMo=o("RoFormerForMaskedLM"),VMo=o(" (RoFormer model)"),XMo=l(),G6=a("li"),Lse=a("strong"),zMo=o("squeezebert"),QMo=o(" \u2014 "),pq=a("a"),WMo=o("SqueezeBertForMaskedLM"),HMo=o(" (SqueezeBERT model)"),UMo=l(),O6=a("li"),xse=a("strong"),JMo=o("tapas"),YMo=o(" \u2014 "),_q=a("a"),KMo=o("TapasForMaskedLM"),ZMo=o(" (TAPAS model)"),eEo=l(),V6=a("li"),kse=a("strong"),oEo=o("wav2vec2"),rEo=o(" \u2014 "),Sse=a("code"),tEo=o("Wav2Vec2ForMaskedLM"),aEo=o(" (Wav2Vec2 model)"),nEo=l(),X6=a("li"),Rse=a("strong"),sEo=o("xlm"),lEo=o(" \u2014 "),uq=a("a"),iEo=o("XLMWithLMHeadModel"),dEo=o(" (XLM model)"),cEo=l(),z6=a("li"),Bse=a("strong"),fEo=o("xlm-roberta"),mEo=o(" \u2014 "),bq=a("a"),gEo=o("XLMRobertaForMaskedLM"),hEo=o(" (XLM-RoBERTa model)"),pEo=l(),Q6=a("li"),Pse=a("strong"),_Eo=o("xlm-roberta-xl"),uEo=o(" \u2014 "),vq=a("a"),bEo=o("XLMRobertaXLForMaskedLM"),vEo=o(" (XLM-RoBERTa-XL model)"),FEo=l(),W6=a("li"),$se=a("strong"),TEo=o("yoso"),MEo=o(" \u2014 "),Fq=a("a"),EEo=o("YosoForMaskedLM"),CEo=o(" (YOSO model)"),wEo=l(),H6=a("p"),AEo=o("The model is set in evaluation mode by default using "),Ise=a("code"),yEo=o("model.eval()"),LEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=a("code"),xEo=o("model.train()"),kEo=l(),Nse=a("p"),SEo=o("Examples:"),REo=l(),f(Dw.$$.fragment),bBe=l(),dd=a("h2"),U6=a("a"),jse=a("span"),f(Gw.$$.fragment),BEo=l(),Dse=a("span"),PEo=o("AutoModelForSeq2SeqLM"),vBe=l(),er=a("div"),f(Ow.$$.fragment),$Eo=l(),cd=a("p"),IEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Tq=a("a"),qEo=o("from_pretrained()"),NEo=o(" class method or the "),Mq=a("a"),jEo=o("from_config()"),DEo=o(` class
method.`),GEo=l(),Vw=a("p"),OEo=o("This class cannot be instantiated directly using "),Gse=a("code"),VEo=o("__init__()"),XEo=o(" (throws an error)."),zEo=l(),Hr=a("div"),f(Xw.$$.fragment),QEo=l(),Ose=a("p"),WEo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),HEo=l(),fd=a("p"),UEo=o(`Note:
Loading a model from its configuration file does `),Vse=a("strong"),JEo=o("not"),YEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eq=a("a"),KEo=o("from_pretrained()"),ZEo=o(" to load the model weights."),e3o=l(),Xse=a("p"),o3o=o("Examples:"),r3o=l(),f(zw.$$.fragment),t3o=l(),Ge=a("div"),f(Qw.$$.fragment),a3o=l(),zse=a("p"),n3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),s3o=l(),Ha=a("p"),l3o=o("The model class to instantiate is selected based on the "),Qse=a("code"),i3o=o("model_type"),d3o=o(` property of the config object (either
passed as an argument or loaded from `),Wse=a("code"),c3o=o("pretrained_model_name_or_path"),f3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hse=a("code"),m3o=o("pretrained_model_name_or_path"),g3o=o(":"),h3o=l(),ne=a("ul"),J6=a("li"),Use=a("strong"),p3o=o("bart"),_3o=o(" \u2014 "),Cq=a("a"),u3o=o("BartForConditionalGeneration"),b3o=o(" (BART model)"),v3o=l(),Y6=a("li"),Jse=a("strong"),F3o=o("bigbird_pegasus"),T3o=o(" \u2014 "),wq=a("a"),M3o=o("BigBirdPegasusForConditionalGeneration"),E3o=o(" (BigBirdPegasus model)"),C3o=l(),K6=a("li"),Yse=a("strong"),w3o=o("blenderbot"),A3o=o(" \u2014 "),Aq=a("a"),y3o=o("BlenderbotForConditionalGeneration"),L3o=o(" (Blenderbot model)"),x3o=l(),Z6=a("li"),Kse=a("strong"),k3o=o("blenderbot-small"),S3o=o(" \u2014 "),yq=a("a"),R3o=o("BlenderbotSmallForConditionalGeneration"),B3o=o(" (BlenderbotSmall model)"),P3o=l(),e1=a("li"),Zse=a("strong"),$3o=o("encoder-decoder"),I3o=o(" \u2014 "),Lq=a("a"),q3o=o("EncoderDecoderModel"),N3o=o(" (Encoder decoder model)"),j3o=l(),o1=a("li"),ele=a("strong"),D3o=o("fsmt"),G3o=o(" \u2014 "),xq=a("a"),O3o=o("FSMTForConditionalGeneration"),V3o=o(" (FairSeq Machine-Translation model)"),X3o=l(),r1=a("li"),ole=a("strong"),z3o=o("led"),Q3o=o(" \u2014 "),kq=a("a"),W3o=o("LEDForConditionalGeneration"),H3o=o(" (LED model)"),U3o=l(),t1=a("li"),rle=a("strong"),J3o=o("m2m_100"),Y3o=o(" \u2014 "),Sq=a("a"),K3o=o("M2M100ForConditionalGeneration"),Z3o=o(" (M2M100 model)"),eCo=l(),a1=a("li"),tle=a("strong"),oCo=o("marian"),rCo=o(" \u2014 "),Rq=a("a"),tCo=o("MarianMTModel"),aCo=o(" (Marian model)"),nCo=l(),n1=a("li"),ale=a("strong"),sCo=o("mbart"),lCo=o(" \u2014 "),Bq=a("a"),iCo=o("MBartForConditionalGeneration"),dCo=o(" (mBART model)"),cCo=l(),s1=a("li"),nle=a("strong"),fCo=o("mt5"),mCo=o(" \u2014 "),Pq=a("a"),gCo=o("MT5ForConditionalGeneration"),hCo=o(" (mT5 model)"),pCo=l(),l1=a("li"),sle=a("strong"),_Co=o("pegasus"),uCo=o(" \u2014 "),$q=a("a"),bCo=o("PegasusForConditionalGeneration"),vCo=o(" (Pegasus model)"),FCo=l(),i1=a("li"),lle=a("strong"),TCo=o("plbart"),MCo=o(" \u2014 "),Iq=a("a"),ECo=o("PLBartForConditionalGeneration"),CCo=o(" (PLBart model)"),wCo=l(),d1=a("li"),ile=a("strong"),ACo=o("prophetnet"),yCo=o(" \u2014 "),qq=a("a"),LCo=o("ProphetNetForConditionalGeneration"),xCo=o(" (ProphetNet model)"),kCo=l(),c1=a("li"),dle=a("strong"),SCo=o("t5"),RCo=o(" \u2014 "),Nq=a("a"),BCo=o("T5ForConditionalGeneration"),PCo=o(" (T5 model)"),$Co=l(),f1=a("li"),cle=a("strong"),ICo=o("tapex"),qCo=o(" \u2014 "),jq=a("a"),NCo=o("BartForConditionalGeneration"),jCo=o(" (TAPEX model)"),DCo=l(),m1=a("li"),fle=a("strong"),GCo=o("xlm-prophetnet"),OCo=o(" \u2014 "),Dq=a("a"),VCo=o("XLMProphetNetForConditionalGeneration"),XCo=o(" (XLMProphetNet model)"),zCo=l(),g1=a("p"),QCo=o("The model is set in evaluation mode by default using "),mle=a("code"),WCo=o("model.eval()"),HCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=a("code"),UCo=o("model.train()"),JCo=l(),hle=a("p"),YCo=o("Examples:"),KCo=l(),f(Ww.$$.fragment),FBe=l(),md=a("h2"),h1=a("a"),ple=a("span"),f(Hw.$$.fragment),ZCo=l(),_le=a("span"),ewo=o("AutoModelForSequenceClassification"),TBe=l(),or=a("div"),f(Uw.$$.fragment),owo=l(),gd=a("p"),rwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gq=a("a"),two=o("from_pretrained()"),awo=o(" class method or the "),Oq=a("a"),nwo=o("from_config()"),swo=o(` class
method.`),lwo=l(),Jw=a("p"),iwo=o("This class cannot be instantiated directly using "),ule=a("code"),dwo=o("__init__()"),cwo=o(" (throws an error)."),fwo=l(),Ur=a("div"),f(Yw.$$.fragment),mwo=l(),ble=a("p"),gwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hwo=l(),hd=a("p"),pwo=o(`Note:
Loading a model from its configuration file does `),vle=a("strong"),_wo=o("not"),uwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vq=a("a"),bwo=o("from_pretrained()"),vwo=o(" to load the model weights."),Fwo=l(),Fle=a("p"),Two=o("Examples:"),Mwo=l(),f(Kw.$$.fragment),Ewo=l(),Oe=a("div"),f(Zw.$$.fragment),Cwo=l(),Tle=a("p"),wwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Awo=l(),Ua=a("p"),ywo=o("The model class to instantiate is selected based on the "),Mle=a("code"),Lwo=o("model_type"),xwo=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),kwo=o("pretrained_model_name_or_path"),Swo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cle=a("code"),Rwo=o("pretrained_model_name_or_path"),Bwo=o(":"),Pwo=l(),y=a("ul"),p1=a("li"),wle=a("strong"),$wo=o("albert"),Iwo=o(" \u2014 "),Xq=a("a"),qwo=o("AlbertForSequenceClassification"),Nwo=o(" (ALBERT model)"),jwo=l(),_1=a("li"),Ale=a("strong"),Dwo=o("bart"),Gwo=o(" \u2014 "),zq=a("a"),Owo=o("BartForSequenceClassification"),Vwo=o(" (BART model)"),Xwo=l(),u1=a("li"),yle=a("strong"),zwo=o("bert"),Qwo=o(" \u2014 "),Qq=a("a"),Wwo=o("BertForSequenceClassification"),Hwo=o(" (BERT model)"),Uwo=l(),b1=a("li"),Lle=a("strong"),Jwo=o("big_bird"),Ywo=o(" \u2014 "),Wq=a("a"),Kwo=o("BigBirdForSequenceClassification"),Zwo=o(" (BigBird model)"),eAo=l(),v1=a("li"),xle=a("strong"),oAo=o("bigbird_pegasus"),rAo=o(" \u2014 "),Hq=a("a"),tAo=o("BigBirdPegasusForSequenceClassification"),aAo=o(" (BigBirdPegasus model)"),nAo=l(),F1=a("li"),kle=a("strong"),sAo=o("camembert"),lAo=o(" \u2014 "),Uq=a("a"),iAo=o("CamembertForSequenceClassification"),dAo=o(" (CamemBERT model)"),cAo=l(),T1=a("li"),Sle=a("strong"),fAo=o("canine"),mAo=o(" \u2014 "),Jq=a("a"),gAo=o("CanineForSequenceClassification"),hAo=o(" (Canine model)"),pAo=l(),M1=a("li"),Rle=a("strong"),_Ao=o("convbert"),uAo=o(" \u2014 "),Yq=a("a"),bAo=o("ConvBertForSequenceClassification"),vAo=o(" (ConvBERT model)"),FAo=l(),E1=a("li"),Ble=a("strong"),TAo=o("ctrl"),MAo=o(" \u2014 "),Kq=a("a"),EAo=o("CTRLForSequenceClassification"),CAo=o(" (CTRL model)"),wAo=l(),C1=a("li"),Ple=a("strong"),AAo=o("data2vec-text"),yAo=o(" \u2014 "),Zq=a("a"),LAo=o("Data2VecTextForSequenceClassification"),xAo=o(" (Data2VecText model)"),kAo=l(),w1=a("li"),$le=a("strong"),SAo=o("deberta"),RAo=o(" \u2014 "),eN=a("a"),BAo=o("DebertaForSequenceClassification"),PAo=o(" (DeBERTa model)"),$Ao=l(),A1=a("li"),Ile=a("strong"),IAo=o("deberta-v2"),qAo=o(" \u2014 "),oN=a("a"),NAo=o("DebertaV2ForSequenceClassification"),jAo=o(" (DeBERTa-v2 model)"),DAo=l(),y1=a("li"),qle=a("strong"),GAo=o("distilbert"),OAo=o(" \u2014 "),rN=a("a"),VAo=o("DistilBertForSequenceClassification"),XAo=o(" (DistilBERT model)"),zAo=l(),L1=a("li"),Nle=a("strong"),QAo=o("electra"),WAo=o(" \u2014 "),tN=a("a"),HAo=o("ElectraForSequenceClassification"),UAo=o(" (ELECTRA model)"),JAo=l(),x1=a("li"),jle=a("strong"),YAo=o("flaubert"),KAo=o(" \u2014 "),aN=a("a"),ZAo=o("FlaubertForSequenceClassification"),e0o=o(" (FlauBERT model)"),o0o=l(),k1=a("li"),Dle=a("strong"),r0o=o("fnet"),t0o=o(" \u2014 "),nN=a("a"),a0o=o("FNetForSequenceClassification"),n0o=o(" (FNet model)"),s0o=l(),S1=a("li"),Gle=a("strong"),l0o=o("funnel"),i0o=o(" \u2014 "),sN=a("a"),d0o=o("FunnelForSequenceClassification"),c0o=o(" (Funnel Transformer model)"),f0o=l(),R1=a("li"),Ole=a("strong"),m0o=o("gpt2"),g0o=o(" \u2014 "),lN=a("a"),h0o=o("GPT2ForSequenceClassification"),p0o=o(" (OpenAI GPT-2 model)"),_0o=l(),B1=a("li"),Vle=a("strong"),u0o=o("gpt_neo"),b0o=o(" \u2014 "),iN=a("a"),v0o=o("GPTNeoForSequenceClassification"),F0o=o(" (GPT Neo model)"),T0o=l(),P1=a("li"),Xle=a("strong"),M0o=o("gptj"),E0o=o(" \u2014 "),dN=a("a"),C0o=o("GPTJForSequenceClassification"),w0o=o(" (GPT-J model)"),A0o=l(),$1=a("li"),zle=a("strong"),y0o=o("ibert"),L0o=o(" \u2014 "),cN=a("a"),x0o=o("IBertForSequenceClassification"),k0o=o(" (I-BERT model)"),S0o=l(),I1=a("li"),Qle=a("strong"),R0o=o("layoutlm"),B0o=o(" \u2014 "),fN=a("a"),P0o=o("LayoutLMForSequenceClassification"),$0o=o(" (LayoutLM model)"),I0o=l(),q1=a("li"),Wle=a("strong"),q0o=o("layoutlmv2"),N0o=o(" \u2014 "),mN=a("a"),j0o=o("LayoutLMv2ForSequenceClassification"),D0o=o(" (LayoutLMv2 model)"),G0o=l(),N1=a("li"),Hle=a("strong"),O0o=o("led"),V0o=o(" \u2014 "),gN=a("a"),X0o=o("LEDForSequenceClassification"),z0o=o(" (LED model)"),Q0o=l(),j1=a("li"),Ule=a("strong"),W0o=o("longformer"),H0o=o(" \u2014 "),hN=a("a"),U0o=o("LongformerForSequenceClassification"),J0o=o(" (Longformer model)"),Y0o=l(),D1=a("li"),Jle=a("strong"),K0o=o("mbart"),Z0o=o(" \u2014 "),pN=a("a"),eyo=o("MBartForSequenceClassification"),oyo=o(" (mBART model)"),ryo=l(),G1=a("li"),Yle=a("strong"),tyo=o("megatron-bert"),ayo=o(" \u2014 "),_N=a("a"),nyo=o("MegatronBertForSequenceClassification"),syo=o(" (MegatronBert model)"),lyo=l(),O1=a("li"),Kle=a("strong"),iyo=o("mobilebert"),dyo=o(" \u2014 "),uN=a("a"),cyo=o("MobileBertForSequenceClassification"),fyo=o(" (MobileBERT model)"),myo=l(),V1=a("li"),Zle=a("strong"),gyo=o("mpnet"),hyo=o(" \u2014 "),bN=a("a"),pyo=o("MPNetForSequenceClassification"),_yo=o(" (MPNet model)"),uyo=l(),X1=a("li"),eie=a("strong"),byo=o("nystromformer"),vyo=o(" \u2014 "),vN=a("a"),Fyo=o("NystromformerForSequenceClassification"),Tyo=o(" (Nystromformer model)"),Myo=l(),z1=a("li"),oie=a("strong"),Eyo=o("openai-gpt"),Cyo=o(" \u2014 "),FN=a("a"),wyo=o("OpenAIGPTForSequenceClassification"),Ayo=o(" (OpenAI GPT model)"),yyo=l(),Q1=a("li"),rie=a("strong"),Lyo=o("perceiver"),xyo=o(" \u2014 "),TN=a("a"),kyo=o("PerceiverForSequenceClassification"),Syo=o(" (Perceiver model)"),Ryo=l(),W1=a("li"),tie=a("strong"),Byo=o("plbart"),Pyo=o(" \u2014 "),MN=a("a"),$yo=o("PLBartForSequenceClassification"),Iyo=o(" (PLBart model)"),qyo=l(),H1=a("li"),aie=a("strong"),Nyo=o("qdqbert"),jyo=o(" \u2014 "),EN=a("a"),Dyo=o("QDQBertForSequenceClassification"),Gyo=o(" (QDQBert model)"),Oyo=l(),U1=a("li"),nie=a("strong"),Vyo=o("reformer"),Xyo=o(" \u2014 "),CN=a("a"),zyo=o("ReformerForSequenceClassification"),Qyo=o(" (Reformer model)"),Wyo=l(),J1=a("li"),sie=a("strong"),Hyo=o("rembert"),Uyo=o(" \u2014 "),wN=a("a"),Jyo=o("RemBertForSequenceClassification"),Yyo=o(" (RemBERT model)"),Kyo=l(),Y1=a("li"),lie=a("strong"),Zyo=o("roberta"),eLo=o(" \u2014 "),AN=a("a"),oLo=o("RobertaForSequenceClassification"),rLo=o(" (RoBERTa model)"),tLo=l(),K1=a("li"),iie=a("strong"),aLo=o("roformer"),nLo=o(" \u2014 "),yN=a("a"),sLo=o("RoFormerForSequenceClassification"),lLo=o(" (RoFormer model)"),iLo=l(),Z1=a("li"),die=a("strong"),dLo=o("squeezebert"),cLo=o(" \u2014 "),LN=a("a"),fLo=o("SqueezeBertForSequenceClassification"),mLo=o(" (SqueezeBERT model)"),gLo=l(),e4=a("li"),cie=a("strong"),hLo=o("tapas"),pLo=o(" \u2014 "),xN=a("a"),_Lo=o("TapasForSequenceClassification"),uLo=o(" (TAPAS model)"),bLo=l(),o4=a("li"),fie=a("strong"),vLo=o("tapex"),FLo=o(" \u2014 "),kN=a("a"),TLo=o("BartForSequenceClassification"),MLo=o(" (TAPEX model)"),ELo=l(),r4=a("li"),mie=a("strong"),CLo=o("transfo-xl"),wLo=o(" \u2014 "),SN=a("a"),ALo=o("TransfoXLForSequenceClassification"),yLo=o(" (Transformer-XL model)"),LLo=l(),t4=a("li"),gie=a("strong"),xLo=o("xlm"),kLo=o(" \u2014 "),RN=a("a"),SLo=o("XLMForSequenceClassification"),RLo=o(" (XLM model)"),BLo=l(),a4=a("li"),hie=a("strong"),PLo=o("xlm-roberta"),$Lo=o(" \u2014 "),BN=a("a"),ILo=o("XLMRobertaForSequenceClassification"),qLo=o(" (XLM-RoBERTa model)"),NLo=l(),n4=a("li"),pie=a("strong"),jLo=o("xlm-roberta-xl"),DLo=o(" \u2014 "),PN=a("a"),GLo=o("XLMRobertaXLForSequenceClassification"),OLo=o(" (XLM-RoBERTa-XL model)"),VLo=l(),s4=a("li"),_ie=a("strong"),XLo=o("xlnet"),zLo=o(" \u2014 "),$N=a("a"),QLo=o("XLNetForSequenceClassification"),WLo=o(" (XLNet model)"),HLo=l(),l4=a("li"),uie=a("strong"),ULo=o("yoso"),JLo=o(" \u2014 "),IN=a("a"),YLo=o("YosoForSequenceClassification"),KLo=o(" (YOSO model)"),ZLo=l(),i4=a("p"),e8o=o("The model is set in evaluation mode by default using "),bie=a("code"),o8o=o("model.eval()"),r8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vie=a("code"),t8o=o("model.train()"),a8o=l(),Fie=a("p"),n8o=o("Examples:"),s8o=l(),f(eA.$$.fragment),MBe=l(),pd=a("h2"),d4=a("a"),Tie=a("span"),f(oA.$$.fragment),l8o=l(),Mie=a("span"),i8o=o("AutoModelForMultipleChoice"),EBe=l(),rr=a("div"),f(rA.$$.fragment),d8o=l(),_d=a("p"),c8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qN=a("a"),f8o=o("from_pretrained()"),m8o=o(" class method or the "),NN=a("a"),g8o=o("from_config()"),h8o=o(` class
method.`),p8o=l(),tA=a("p"),_8o=o("This class cannot be instantiated directly using "),Eie=a("code"),u8o=o("__init__()"),b8o=o(" (throws an error)."),v8o=l(),Jr=a("div"),f(aA.$$.fragment),F8o=l(),Cie=a("p"),T8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),M8o=l(),ud=a("p"),E8o=o(`Note:
Loading a model from its configuration file does `),wie=a("strong"),C8o=o("not"),w8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=a("a"),A8o=o("from_pretrained()"),y8o=o(" to load the model weights."),L8o=l(),Aie=a("p"),x8o=o("Examples:"),k8o=l(),f(nA.$$.fragment),S8o=l(),Ve=a("div"),f(sA.$$.fragment),R8o=l(),yie=a("p"),B8o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P8o=l(),Ja=a("p"),$8o=o("The model class to instantiate is selected based on the "),Lie=a("code"),I8o=o("model_type"),q8o=o(` property of the config object (either
passed as an argument or loaded from `),xie=a("code"),N8o=o("pretrained_model_name_or_path"),j8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kie=a("code"),D8o=o("pretrained_model_name_or_path"),G8o=o(":"),O8o=l(),G=a("ul"),c4=a("li"),Sie=a("strong"),V8o=o("albert"),X8o=o(" \u2014 "),DN=a("a"),z8o=o("AlbertForMultipleChoice"),Q8o=o(" (ALBERT model)"),W8o=l(),f4=a("li"),Rie=a("strong"),H8o=o("bert"),U8o=o(" \u2014 "),GN=a("a"),J8o=o("BertForMultipleChoice"),Y8o=o(" (BERT model)"),K8o=l(),m4=a("li"),Bie=a("strong"),Z8o=o("big_bird"),e7o=o(" \u2014 "),ON=a("a"),o7o=o("BigBirdForMultipleChoice"),r7o=o(" (BigBird model)"),t7o=l(),g4=a("li"),Pie=a("strong"),a7o=o("camembert"),n7o=o(" \u2014 "),VN=a("a"),s7o=o("CamembertForMultipleChoice"),l7o=o(" (CamemBERT model)"),i7o=l(),h4=a("li"),$ie=a("strong"),d7o=o("canine"),c7o=o(" \u2014 "),XN=a("a"),f7o=o("CanineForMultipleChoice"),m7o=o(" (Canine model)"),g7o=l(),p4=a("li"),Iie=a("strong"),h7o=o("convbert"),p7o=o(" \u2014 "),zN=a("a"),_7o=o("ConvBertForMultipleChoice"),u7o=o(" (ConvBERT model)"),b7o=l(),_4=a("li"),qie=a("strong"),v7o=o("data2vec-text"),F7o=o(" \u2014 "),QN=a("a"),T7o=o("Data2VecTextForMultipleChoice"),M7o=o(" (Data2VecText model)"),E7o=l(),u4=a("li"),Nie=a("strong"),C7o=o("distilbert"),w7o=o(" \u2014 "),WN=a("a"),A7o=o("DistilBertForMultipleChoice"),y7o=o(" (DistilBERT model)"),L7o=l(),b4=a("li"),jie=a("strong"),x7o=o("electra"),k7o=o(" \u2014 "),HN=a("a"),S7o=o("ElectraForMultipleChoice"),R7o=o(" (ELECTRA model)"),B7o=l(),v4=a("li"),Die=a("strong"),P7o=o("flaubert"),$7o=o(" \u2014 "),UN=a("a"),I7o=o("FlaubertForMultipleChoice"),q7o=o(" (FlauBERT model)"),N7o=l(),F4=a("li"),Gie=a("strong"),j7o=o("fnet"),D7o=o(" \u2014 "),JN=a("a"),G7o=o("FNetForMultipleChoice"),O7o=o(" (FNet model)"),V7o=l(),T4=a("li"),Oie=a("strong"),X7o=o("funnel"),z7o=o(" \u2014 "),YN=a("a"),Q7o=o("FunnelForMultipleChoice"),W7o=o(" (Funnel Transformer model)"),H7o=l(),M4=a("li"),Vie=a("strong"),U7o=o("ibert"),J7o=o(" \u2014 "),KN=a("a"),Y7o=o("IBertForMultipleChoice"),K7o=o(" (I-BERT model)"),Z7o=l(),E4=a("li"),Xie=a("strong"),e9o=o("longformer"),o9o=o(" \u2014 "),ZN=a("a"),r9o=o("LongformerForMultipleChoice"),t9o=o(" (Longformer model)"),a9o=l(),C4=a("li"),zie=a("strong"),n9o=o("megatron-bert"),s9o=o(" \u2014 "),ej=a("a"),l9o=o("MegatronBertForMultipleChoice"),i9o=o(" (MegatronBert model)"),d9o=l(),w4=a("li"),Qie=a("strong"),c9o=o("mobilebert"),f9o=o(" \u2014 "),oj=a("a"),m9o=o("MobileBertForMultipleChoice"),g9o=o(" (MobileBERT model)"),h9o=l(),A4=a("li"),Wie=a("strong"),p9o=o("mpnet"),_9o=o(" \u2014 "),rj=a("a"),u9o=o("MPNetForMultipleChoice"),b9o=o(" (MPNet model)"),v9o=l(),y4=a("li"),Hie=a("strong"),F9o=o("nystromformer"),T9o=o(" \u2014 "),tj=a("a"),M9o=o("NystromformerForMultipleChoice"),E9o=o(" (Nystromformer model)"),C9o=l(),L4=a("li"),Uie=a("strong"),w9o=o("qdqbert"),A9o=o(" \u2014 "),aj=a("a"),y9o=o("QDQBertForMultipleChoice"),L9o=o(" (QDQBert model)"),x9o=l(),x4=a("li"),Jie=a("strong"),k9o=o("rembert"),S9o=o(" \u2014 "),nj=a("a"),R9o=o("RemBertForMultipleChoice"),B9o=o(" (RemBERT model)"),P9o=l(),k4=a("li"),Yie=a("strong"),$9o=o("roberta"),I9o=o(" \u2014 "),sj=a("a"),q9o=o("RobertaForMultipleChoice"),N9o=o(" (RoBERTa model)"),j9o=l(),S4=a("li"),Kie=a("strong"),D9o=o("roformer"),G9o=o(" \u2014 "),lj=a("a"),O9o=o("RoFormerForMultipleChoice"),V9o=o(" (RoFormer model)"),X9o=l(),R4=a("li"),Zie=a("strong"),z9o=o("squeezebert"),Q9o=o(" \u2014 "),ij=a("a"),W9o=o("SqueezeBertForMultipleChoice"),H9o=o(" (SqueezeBERT model)"),U9o=l(),B4=a("li"),ede=a("strong"),J9o=o("xlm"),Y9o=o(" \u2014 "),dj=a("a"),K9o=o("XLMForMultipleChoice"),Z9o=o(" (XLM model)"),exo=l(),P4=a("li"),ode=a("strong"),oxo=o("xlm-roberta"),rxo=o(" \u2014 "),cj=a("a"),txo=o("XLMRobertaForMultipleChoice"),axo=o(" (XLM-RoBERTa model)"),nxo=l(),$4=a("li"),rde=a("strong"),sxo=o("xlm-roberta-xl"),lxo=o(" \u2014 "),fj=a("a"),ixo=o("XLMRobertaXLForMultipleChoice"),dxo=o(" (XLM-RoBERTa-XL model)"),cxo=l(),I4=a("li"),tde=a("strong"),fxo=o("xlnet"),mxo=o(" \u2014 "),mj=a("a"),gxo=o("XLNetForMultipleChoice"),hxo=o(" (XLNet model)"),pxo=l(),q4=a("li"),ade=a("strong"),_xo=o("yoso"),uxo=o(" \u2014 "),gj=a("a"),bxo=o("YosoForMultipleChoice"),vxo=o(" (YOSO model)"),Fxo=l(),N4=a("p"),Txo=o("The model is set in evaluation mode by default using "),nde=a("code"),Mxo=o("model.eval()"),Exo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=a("code"),Cxo=o("model.train()"),wxo=l(),lde=a("p"),Axo=o("Examples:"),yxo=l(),f(lA.$$.fragment),CBe=l(),bd=a("h2"),j4=a("a"),ide=a("span"),f(iA.$$.fragment),Lxo=l(),dde=a("span"),xxo=o("AutoModelForNextSentencePrediction"),wBe=l(),tr=a("div"),f(dA.$$.fragment),kxo=l(),vd=a("p"),Sxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hj=a("a"),Rxo=o("from_pretrained()"),Bxo=o(" class method or the "),pj=a("a"),Pxo=o("from_config()"),$xo=o(` class
method.`),Ixo=l(),cA=a("p"),qxo=o("This class cannot be instantiated directly using "),cde=a("code"),Nxo=o("__init__()"),jxo=o(" (throws an error)."),Dxo=l(),Yr=a("div"),f(fA.$$.fragment),Gxo=l(),fde=a("p"),Oxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Vxo=l(),Fd=a("p"),Xxo=o(`Note:
Loading a model from its configuration file does `),mde=a("strong"),zxo=o("not"),Qxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),Wxo=o("from_pretrained()"),Hxo=o(" to load the model weights."),Uxo=l(),gde=a("p"),Jxo=o("Examples:"),Yxo=l(),f(mA.$$.fragment),Kxo=l(),Xe=a("div"),f(gA.$$.fragment),Zxo=l(),hde=a("p"),eko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oko=l(),Ya=a("p"),rko=o("The model class to instantiate is selected based on the "),pde=a("code"),tko=o("model_type"),ako=o(` property of the config object (either
passed as an argument or loaded from `),_de=a("code"),nko=o("pretrained_model_name_or_path"),sko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=a("code"),lko=o("pretrained_model_name_or_path"),iko=o(":"),dko=l(),da=a("ul"),D4=a("li"),bde=a("strong"),cko=o("bert"),fko=o(" \u2014 "),uj=a("a"),mko=o("BertForNextSentencePrediction"),gko=o(" (BERT model)"),hko=l(),G4=a("li"),vde=a("strong"),pko=o("fnet"),_ko=o(" \u2014 "),bj=a("a"),uko=o("FNetForNextSentencePrediction"),bko=o(" (FNet model)"),vko=l(),O4=a("li"),Fde=a("strong"),Fko=o("megatron-bert"),Tko=o(" \u2014 "),vj=a("a"),Mko=o("MegatronBertForNextSentencePrediction"),Eko=o(" (MegatronBert model)"),Cko=l(),V4=a("li"),Tde=a("strong"),wko=o("mobilebert"),Ako=o(" \u2014 "),Fj=a("a"),yko=o("MobileBertForNextSentencePrediction"),Lko=o(" (MobileBERT model)"),xko=l(),X4=a("li"),Mde=a("strong"),kko=o("qdqbert"),Sko=o(" \u2014 "),Tj=a("a"),Rko=o("QDQBertForNextSentencePrediction"),Bko=o(" (QDQBert model)"),Pko=l(),z4=a("p"),$ko=o("The model is set in evaluation mode by default using "),Ede=a("code"),Iko=o("model.eval()"),qko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),Nko=o("model.train()"),jko=l(),wde=a("p"),Dko=o("Examples:"),Gko=l(),f(hA.$$.fragment),ABe=l(),Td=a("h2"),Q4=a("a"),Ade=a("span"),f(pA.$$.fragment),Oko=l(),yde=a("span"),Vko=o("AutoModelForTokenClassification"),yBe=l(),ar=a("div"),f(_A.$$.fragment),Xko=l(),Md=a("p"),zko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mj=a("a"),Qko=o("from_pretrained()"),Wko=o(" class method or the "),Ej=a("a"),Hko=o("from_config()"),Uko=o(` class
method.`),Jko=l(),uA=a("p"),Yko=o("This class cannot be instantiated directly using "),Lde=a("code"),Kko=o("__init__()"),Zko=o(" (throws an error)."),eSo=l(),Kr=a("div"),f(bA.$$.fragment),oSo=l(),xde=a("p"),rSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tSo=l(),Ed=a("p"),aSo=o(`Note:
Loading a model from its configuration file does `),kde=a("strong"),nSo=o("not"),sSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),lSo=o("from_pretrained()"),iSo=o(" to load the model weights."),dSo=l(),Sde=a("p"),cSo=o("Examples:"),fSo=l(),f(vA.$$.fragment),mSo=l(),ze=a("div"),f(FA.$$.fragment),gSo=l(),Rde=a("p"),hSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pSo=l(),Ka=a("p"),_So=o("The model class to instantiate is selected based on the "),Bde=a("code"),uSo=o("model_type"),bSo=o(` property of the config object (either
passed as an argument or loaded from `),Pde=a("code"),vSo=o("pretrained_model_name_or_path"),FSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=a("code"),TSo=o("pretrained_model_name_or_path"),MSo=o(":"),ESo=l(),j=a("ul"),W4=a("li"),Ide=a("strong"),CSo=o("albert"),wSo=o(" \u2014 "),wj=a("a"),ASo=o("AlbertForTokenClassification"),ySo=o(" (ALBERT model)"),LSo=l(),H4=a("li"),qde=a("strong"),xSo=o("bert"),kSo=o(" \u2014 "),Aj=a("a"),SSo=o("BertForTokenClassification"),RSo=o(" (BERT model)"),BSo=l(),U4=a("li"),Nde=a("strong"),PSo=o("big_bird"),$So=o(" \u2014 "),yj=a("a"),ISo=o("BigBirdForTokenClassification"),qSo=o(" (BigBird model)"),NSo=l(),J4=a("li"),jde=a("strong"),jSo=o("camembert"),DSo=o(" \u2014 "),Lj=a("a"),GSo=o("CamembertForTokenClassification"),OSo=o(" (CamemBERT model)"),VSo=l(),Y4=a("li"),Dde=a("strong"),XSo=o("canine"),zSo=o(" \u2014 "),xj=a("a"),QSo=o("CanineForTokenClassification"),WSo=o(" (Canine model)"),HSo=l(),K4=a("li"),Gde=a("strong"),USo=o("convbert"),JSo=o(" \u2014 "),kj=a("a"),YSo=o("ConvBertForTokenClassification"),KSo=o(" (ConvBERT model)"),ZSo=l(),Z4=a("li"),Ode=a("strong"),eRo=o("data2vec-text"),oRo=o(" \u2014 "),Sj=a("a"),rRo=o("Data2VecTextForTokenClassification"),tRo=o(" (Data2VecText model)"),aRo=l(),eb=a("li"),Vde=a("strong"),nRo=o("deberta"),sRo=o(" \u2014 "),Rj=a("a"),lRo=o("DebertaForTokenClassification"),iRo=o(" (DeBERTa model)"),dRo=l(),ob=a("li"),Xde=a("strong"),cRo=o("deberta-v2"),fRo=o(" \u2014 "),Bj=a("a"),mRo=o("DebertaV2ForTokenClassification"),gRo=o(" (DeBERTa-v2 model)"),hRo=l(),rb=a("li"),zde=a("strong"),pRo=o("distilbert"),_Ro=o(" \u2014 "),Pj=a("a"),uRo=o("DistilBertForTokenClassification"),bRo=o(" (DistilBERT model)"),vRo=l(),tb=a("li"),Qde=a("strong"),FRo=o("electra"),TRo=o(" \u2014 "),$j=a("a"),MRo=o("ElectraForTokenClassification"),ERo=o(" (ELECTRA model)"),CRo=l(),ab=a("li"),Wde=a("strong"),wRo=o("flaubert"),ARo=o(" \u2014 "),Ij=a("a"),yRo=o("FlaubertForTokenClassification"),LRo=o(" (FlauBERT model)"),xRo=l(),nb=a("li"),Hde=a("strong"),kRo=o("fnet"),SRo=o(" \u2014 "),qj=a("a"),RRo=o("FNetForTokenClassification"),BRo=o(" (FNet model)"),PRo=l(),sb=a("li"),Ude=a("strong"),$Ro=o("funnel"),IRo=o(" \u2014 "),Nj=a("a"),qRo=o("FunnelForTokenClassification"),NRo=o(" (Funnel Transformer model)"),jRo=l(),lb=a("li"),Jde=a("strong"),DRo=o("gpt2"),GRo=o(" \u2014 "),jj=a("a"),ORo=o("GPT2ForTokenClassification"),VRo=o(" (OpenAI GPT-2 model)"),XRo=l(),ib=a("li"),Yde=a("strong"),zRo=o("ibert"),QRo=o(" \u2014 "),Dj=a("a"),WRo=o("IBertForTokenClassification"),HRo=o(" (I-BERT model)"),URo=l(),db=a("li"),Kde=a("strong"),JRo=o("layoutlm"),YRo=o(" \u2014 "),Gj=a("a"),KRo=o("LayoutLMForTokenClassification"),ZRo=o(" (LayoutLM model)"),eBo=l(),cb=a("li"),Zde=a("strong"),oBo=o("layoutlmv2"),rBo=o(" \u2014 "),Oj=a("a"),tBo=o("LayoutLMv2ForTokenClassification"),aBo=o(" (LayoutLMv2 model)"),nBo=l(),fb=a("li"),ece=a("strong"),sBo=o("longformer"),lBo=o(" \u2014 "),Vj=a("a"),iBo=o("LongformerForTokenClassification"),dBo=o(" (Longformer model)"),cBo=l(),mb=a("li"),oce=a("strong"),fBo=o("megatron-bert"),mBo=o(" \u2014 "),Xj=a("a"),gBo=o("MegatronBertForTokenClassification"),hBo=o(" (MegatronBert model)"),pBo=l(),gb=a("li"),rce=a("strong"),_Bo=o("mobilebert"),uBo=o(" \u2014 "),zj=a("a"),bBo=o("MobileBertForTokenClassification"),vBo=o(" (MobileBERT model)"),FBo=l(),hb=a("li"),tce=a("strong"),TBo=o("mpnet"),MBo=o(" \u2014 "),Qj=a("a"),EBo=o("MPNetForTokenClassification"),CBo=o(" (MPNet model)"),wBo=l(),pb=a("li"),ace=a("strong"),ABo=o("nystromformer"),yBo=o(" \u2014 "),Wj=a("a"),LBo=o("NystromformerForTokenClassification"),xBo=o(" (Nystromformer model)"),kBo=l(),_b=a("li"),nce=a("strong"),SBo=o("qdqbert"),RBo=o(" \u2014 "),Hj=a("a"),BBo=o("QDQBertForTokenClassification"),PBo=o(" (QDQBert model)"),$Bo=l(),ub=a("li"),sce=a("strong"),IBo=o("rembert"),qBo=o(" \u2014 "),Uj=a("a"),NBo=o("RemBertForTokenClassification"),jBo=o(" (RemBERT model)"),DBo=l(),bb=a("li"),lce=a("strong"),GBo=o("roberta"),OBo=o(" \u2014 "),Jj=a("a"),VBo=o("RobertaForTokenClassification"),XBo=o(" (RoBERTa model)"),zBo=l(),vb=a("li"),ice=a("strong"),QBo=o("roformer"),WBo=o(" \u2014 "),Yj=a("a"),HBo=o("RoFormerForTokenClassification"),UBo=o(" (RoFormer model)"),JBo=l(),Fb=a("li"),dce=a("strong"),YBo=o("squeezebert"),KBo=o(" \u2014 "),Kj=a("a"),ZBo=o("SqueezeBertForTokenClassification"),ePo=o(" (SqueezeBERT model)"),oPo=l(),Tb=a("li"),cce=a("strong"),rPo=o("xlm"),tPo=o(" \u2014 "),Zj=a("a"),aPo=o("XLMForTokenClassification"),nPo=o(" (XLM model)"),sPo=l(),Mb=a("li"),fce=a("strong"),lPo=o("xlm-roberta"),iPo=o(" \u2014 "),eD=a("a"),dPo=o("XLMRobertaForTokenClassification"),cPo=o(" (XLM-RoBERTa model)"),fPo=l(),Eb=a("li"),mce=a("strong"),mPo=o("xlm-roberta-xl"),gPo=o(" \u2014 "),oD=a("a"),hPo=o("XLMRobertaXLForTokenClassification"),pPo=o(" (XLM-RoBERTa-XL model)"),_Po=l(),Cb=a("li"),gce=a("strong"),uPo=o("xlnet"),bPo=o(" \u2014 "),rD=a("a"),vPo=o("XLNetForTokenClassification"),FPo=o(" (XLNet model)"),TPo=l(),wb=a("li"),hce=a("strong"),MPo=o("yoso"),EPo=o(" \u2014 "),tD=a("a"),CPo=o("YosoForTokenClassification"),wPo=o(" (YOSO model)"),APo=l(),Ab=a("p"),yPo=o("The model is set in evaluation mode by default using "),pce=a("code"),LPo=o("model.eval()"),xPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=a("code"),kPo=o("model.train()"),SPo=l(),uce=a("p"),RPo=o("Examples:"),BPo=l(),f(TA.$$.fragment),LBe=l(),Cd=a("h2"),yb=a("a"),bce=a("span"),f(MA.$$.fragment),PPo=l(),vce=a("span"),$Po=o("AutoModelForQuestionAnswering"),xBe=l(),nr=a("div"),f(EA.$$.fragment),IPo=l(),wd=a("p"),qPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aD=a("a"),NPo=o("from_pretrained()"),jPo=o(" class method or the "),nD=a("a"),DPo=o("from_config()"),GPo=o(` class
method.`),OPo=l(),CA=a("p"),VPo=o("This class cannot be instantiated directly using "),Fce=a("code"),XPo=o("__init__()"),zPo=o(" (throws an error)."),QPo=l(),Zr=a("div"),f(wA.$$.fragment),WPo=l(),Tce=a("p"),HPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UPo=l(),Ad=a("p"),JPo=o(`Note:
Loading a model from its configuration file does `),Mce=a("strong"),YPo=o("not"),KPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=a("a"),ZPo=o("from_pretrained()"),e$o=o(" to load the model weights."),o$o=l(),Ece=a("p"),r$o=o("Examples:"),t$o=l(),f(AA.$$.fragment),a$o=l(),Qe=a("div"),f(yA.$$.fragment),n$o=l(),Cce=a("p"),s$o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l$o=l(),Za=a("p"),i$o=o("The model class to instantiate is selected based on the "),wce=a("code"),d$o=o("model_type"),c$o=o(` property of the config object (either
passed as an argument or loaded from `),Ace=a("code"),f$o=o("pretrained_model_name_or_path"),m$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=a("code"),g$o=o("pretrained_model_name_or_path"),h$o=o(":"),p$o=l(),R=a("ul"),Lb=a("li"),Lce=a("strong"),_$o=o("albert"),u$o=o(" \u2014 "),lD=a("a"),b$o=o("AlbertForQuestionAnswering"),v$o=o(" (ALBERT model)"),F$o=l(),xb=a("li"),xce=a("strong"),T$o=o("bart"),M$o=o(" \u2014 "),iD=a("a"),E$o=o("BartForQuestionAnswering"),C$o=o(" (BART model)"),w$o=l(),kb=a("li"),kce=a("strong"),A$o=o("bert"),y$o=o(" \u2014 "),dD=a("a"),L$o=o("BertForQuestionAnswering"),x$o=o(" (BERT model)"),k$o=l(),Sb=a("li"),Sce=a("strong"),S$o=o("big_bird"),R$o=o(" \u2014 "),cD=a("a"),B$o=o("BigBirdForQuestionAnswering"),P$o=o(" (BigBird model)"),$$o=l(),Rb=a("li"),Rce=a("strong"),I$o=o("bigbird_pegasus"),q$o=o(" \u2014 "),fD=a("a"),N$o=o("BigBirdPegasusForQuestionAnswering"),j$o=o(" (BigBirdPegasus model)"),D$o=l(),Bb=a("li"),Bce=a("strong"),G$o=o("camembert"),O$o=o(" \u2014 "),mD=a("a"),V$o=o("CamembertForQuestionAnswering"),X$o=o(" (CamemBERT model)"),z$o=l(),Pb=a("li"),Pce=a("strong"),Q$o=o("canine"),W$o=o(" \u2014 "),gD=a("a"),H$o=o("CanineForQuestionAnswering"),U$o=o(" (Canine model)"),J$o=l(),$b=a("li"),$ce=a("strong"),Y$o=o("convbert"),K$o=o(" \u2014 "),hD=a("a"),Z$o=o("ConvBertForQuestionAnswering"),eIo=o(" (ConvBERT model)"),oIo=l(),Ib=a("li"),Ice=a("strong"),rIo=o("data2vec-text"),tIo=o(" \u2014 "),pD=a("a"),aIo=o("Data2VecTextForQuestionAnswering"),nIo=o(" (Data2VecText model)"),sIo=l(),qb=a("li"),qce=a("strong"),lIo=o("deberta"),iIo=o(" \u2014 "),_D=a("a"),dIo=o("DebertaForQuestionAnswering"),cIo=o(" (DeBERTa model)"),fIo=l(),Nb=a("li"),Nce=a("strong"),mIo=o("deberta-v2"),gIo=o(" \u2014 "),uD=a("a"),hIo=o("DebertaV2ForQuestionAnswering"),pIo=o(" (DeBERTa-v2 model)"),_Io=l(),jb=a("li"),jce=a("strong"),uIo=o("distilbert"),bIo=o(" \u2014 "),bD=a("a"),vIo=o("DistilBertForQuestionAnswering"),FIo=o(" (DistilBERT model)"),TIo=l(),Db=a("li"),Dce=a("strong"),MIo=o("electra"),EIo=o(" \u2014 "),vD=a("a"),CIo=o("ElectraForQuestionAnswering"),wIo=o(" (ELECTRA model)"),AIo=l(),Gb=a("li"),Gce=a("strong"),yIo=o("flaubert"),LIo=o(" \u2014 "),FD=a("a"),xIo=o("FlaubertForQuestionAnsweringSimple"),kIo=o(" (FlauBERT model)"),SIo=l(),Ob=a("li"),Oce=a("strong"),RIo=o("fnet"),BIo=o(" \u2014 "),TD=a("a"),PIo=o("FNetForQuestionAnswering"),$Io=o(" (FNet model)"),IIo=l(),Vb=a("li"),Vce=a("strong"),qIo=o("funnel"),NIo=o(" \u2014 "),MD=a("a"),jIo=o("FunnelForQuestionAnswering"),DIo=o(" (Funnel Transformer model)"),GIo=l(),Xb=a("li"),Xce=a("strong"),OIo=o("gptj"),VIo=o(" \u2014 "),ED=a("a"),XIo=o("GPTJForQuestionAnswering"),zIo=o(" (GPT-J model)"),QIo=l(),zb=a("li"),zce=a("strong"),WIo=o("ibert"),HIo=o(" \u2014 "),CD=a("a"),UIo=o("IBertForQuestionAnswering"),JIo=o(" (I-BERT model)"),YIo=l(),Qb=a("li"),Qce=a("strong"),KIo=o("layoutlmv2"),ZIo=o(" \u2014 "),wD=a("a"),eqo=o("LayoutLMv2ForQuestionAnswering"),oqo=o(" (LayoutLMv2 model)"),rqo=l(),Wb=a("li"),Wce=a("strong"),tqo=o("led"),aqo=o(" \u2014 "),AD=a("a"),nqo=o("LEDForQuestionAnswering"),sqo=o(" (LED model)"),lqo=l(),Hb=a("li"),Hce=a("strong"),iqo=o("longformer"),dqo=o(" \u2014 "),yD=a("a"),cqo=o("LongformerForQuestionAnswering"),fqo=o(" (Longformer model)"),mqo=l(),Ub=a("li"),Uce=a("strong"),gqo=o("lxmert"),hqo=o(" \u2014 "),LD=a("a"),pqo=o("LxmertForQuestionAnswering"),_qo=o(" (LXMERT model)"),uqo=l(),Jb=a("li"),Jce=a("strong"),bqo=o("mbart"),vqo=o(" \u2014 "),xD=a("a"),Fqo=o("MBartForQuestionAnswering"),Tqo=o(" (mBART model)"),Mqo=l(),Yb=a("li"),Yce=a("strong"),Eqo=o("megatron-bert"),Cqo=o(" \u2014 "),kD=a("a"),wqo=o("MegatronBertForQuestionAnswering"),Aqo=o(" (MegatronBert model)"),yqo=l(),Kb=a("li"),Kce=a("strong"),Lqo=o("mobilebert"),xqo=o(" \u2014 "),SD=a("a"),kqo=o("MobileBertForQuestionAnswering"),Sqo=o(" (MobileBERT model)"),Rqo=l(),Zb=a("li"),Zce=a("strong"),Bqo=o("mpnet"),Pqo=o(" \u2014 "),RD=a("a"),$qo=o("MPNetForQuestionAnswering"),Iqo=o(" (MPNet model)"),qqo=l(),e2=a("li"),efe=a("strong"),Nqo=o("nystromformer"),jqo=o(" \u2014 "),BD=a("a"),Dqo=o("NystromformerForQuestionAnswering"),Gqo=o(" (Nystromformer model)"),Oqo=l(),o2=a("li"),ofe=a("strong"),Vqo=o("qdqbert"),Xqo=o(" \u2014 "),PD=a("a"),zqo=o("QDQBertForQuestionAnswering"),Qqo=o(" (QDQBert model)"),Wqo=l(),r2=a("li"),rfe=a("strong"),Hqo=o("reformer"),Uqo=o(" \u2014 "),$D=a("a"),Jqo=o("ReformerForQuestionAnswering"),Yqo=o(" (Reformer model)"),Kqo=l(),t2=a("li"),tfe=a("strong"),Zqo=o("rembert"),eNo=o(" \u2014 "),ID=a("a"),oNo=o("RemBertForQuestionAnswering"),rNo=o(" (RemBERT model)"),tNo=l(),a2=a("li"),afe=a("strong"),aNo=o("roberta"),nNo=o(" \u2014 "),qD=a("a"),sNo=o("RobertaForQuestionAnswering"),lNo=o(" (RoBERTa model)"),iNo=l(),n2=a("li"),nfe=a("strong"),dNo=o("roformer"),cNo=o(" \u2014 "),ND=a("a"),fNo=o("RoFormerForQuestionAnswering"),mNo=o(" (RoFormer model)"),gNo=l(),s2=a("li"),sfe=a("strong"),hNo=o("splinter"),pNo=o(" \u2014 "),jD=a("a"),_No=o("SplinterForQuestionAnswering"),uNo=o(" (Splinter model)"),bNo=l(),l2=a("li"),lfe=a("strong"),vNo=o("squeezebert"),FNo=o(" \u2014 "),DD=a("a"),TNo=o("SqueezeBertForQuestionAnswering"),MNo=o(" (SqueezeBERT model)"),ENo=l(),i2=a("li"),ife=a("strong"),CNo=o("xlm"),wNo=o(" \u2014 "),GD=a("a"),ANo=o("XLMForQuestionAnsweringSimple"),yNo=o(" (XLM model)"),LNo=l(),d2=a("li"),dfe=a("strong"),xNo=o("xlm-roberta"),kNo=o(" \u2014 "),OD=a("a"),SNo=o("XLMRobertaForQuestionAnswering"),RNo=o(" (XLM-RoBERTa model)"),BNo=l(),c2=a("li"),cfe=a("strong"),PNo=o("xlm-roberta-xl"),$No=o(" \u2014 "),VD=a("a"),INo=o("XLMRobertaXLForQuestionAnswering"),qNo=o(" (XLM-RoBERTa-XL model)"),NNo=l(),f2=a("li"),ffe=a("strong"),jNo=o("xlnet"),DNo=o(" \u2014 "),XD=a("a"),GNo=o("XLNetForQuestionAnsweringSimple"),ONo=o(" (XLNet model)"),VNo=l(),m2=a("li"),mfe=a("strong"),XNo=o("yoso"),zNo=o(" \u2014 "),zD=a("a"),QNo=o("YosoForQuestionAnswering"),WNo=o(" (YOSO model)"),HNo=l(),g2=a("p"),UNo=o("The model is set in evaluation mode by default using "),gfe=a("code"),JNo=o("model.eval()"),YNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=a("code"),KNo=o("model.train()"),ZNo=l(),pfe=a("p"),ejo=o("Examples:"),ojo=l(),f(LA.$$.fragment),kBe=l(),yd=a("h2"),h2=a("a"),_fe=a("span"),f(xA.$$.fragment),rjo=l(),ufe=a("span"),tjo=o("AutoModelForTableQuestionAnswering"),SBe=l(),sr=a("div"),f(kA.$$.fragment),ajo=l(),Ld=a("p"),njo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QD=a("a"),sjo=o("from_pretrained()"),ljo=o(" class method or the "),WD=a("a"),ijo=o("from_config()"),djo=o(` class
method.`),cjo=l(),SA=a("p"),fjo=o("This class cannot be instantiated directly using "),bfe=a("code"),mjo=o("__init__()"),gjo=o(" (throws an error)."),hjo=l(),et=a("div"),f(RA.$$.fragment),pjo=l(),vfe=a("p"),_jo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ujo=l(),xd=a("p"),bjo=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),vjo=o("not"),Fjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),Tjo=o("from_pretrained()"),Mjo=o(" to load the model weights."),Ejo=l(),Tfe=a("p"),Cjo=o("Examples:"),wjo=l(),f(BA.$$.fragment),Ajo=l(),We=a("div"),f(PA.$$.fragment),yjo=l(),Mfe=a("p"),Ljo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xjo=l(),en=a("p"),kjo=o("The model class to instantiate is selected based on the "),Efe=a("code"),Sjo=o("model_type"),Rjo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),Bjo=o("pretrained_model_name_or_path"),Pjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),$jo=o("pretrained_model_name_or_path"),Ijo=o(":"),qjo=l(),Afe=a("ul"),p2=a("li"),yfe=a("strong"),Njo=o("tapas"),jjo=o(" \u2014 "),UD=a("a"),Djo=o("TapasForQuestionAnswering"),Gjo=o(" (TAPAS model)"),Ojo=l(),_2=a("p"),Vjo=o("The model is set in evaluation mode by default using "),Lfe=a("code"),Xjo=o("model.eval()"),zjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),Qjo=o("model.train()"),Wjo=l(),kfe=a("p"),Hjo=o("Examples:"),Ujo=l(),f($A.$$.fragment),RBe=l(),kd=a("h2"),u2=a("a"),Sfe=a("span"),f(IA.$$.fragment),Jjo=l(),Rfe=a("span"),Yjo=o("AutoModelForImageClassification"),BBe=l(),lr=a("div"),f(qA.$$.fragment),Kjo=l(),Sd=a("p"),Zjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JD=a("a"),eDo=o("from_pretrained()"),oDo=o(" class method or the "),YD=a("a"),rDo=o("from_config()"),tDo=o(` class
method.`),aDo=l(),NA=a("p"),nDo=o("This class cannot be instantiated directly using "),Bfe=a("code"),sDo=o("__init__()"),lDo=o(" (throws an error)."),iDo=l(),ot=a("div"),f(jA.$$.fragment),dDo=l(),Pfe=a("p"),cDo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fDo=l(),Rd=a("p"),mDo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),gDo=o("not"),hDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),pDo=o("from_pretrained()"),_Do=o(" to load the model weights."),uDo=l(),Ife=a("p"),bDo=o("Examples:"),vDo=l(),f(DA.$$.fragment),FDo=l(),He=a("div"),f(GA.$$.fragment),TDo=l(),qfe=a("p"),MDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EDo=l(),on=a("p"),CDo=o("The model class to instantiate is selected based on the "),Nfe=a("code"),wDo=o("model_type"),ADo=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),yDo=o("pretrained_model_name_or_path"),LDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),xDo=o("pretrained_model_name_or_path"),kDo=o(":"),SDo=l(),de=a("ul"),b2=a("li"),Gfe=a("strong"),RDo=o("beit"),BDo=o(" \u2014 "),ZD=a("a"),PDo=o("BeitForImageClassification"),$Do=o(" (BEiT model)"),IDo=l(),v2=a("li"),Ofe=a("strong"),qDo=o("convnext"),NDo=o(" \u2014 "),eG=a("a"),jDo=o("ConvNextForImageClassification"),DDo=o(" (ConvNext model)"),GDo=l(),F2=a("li"),Vfe=a("strong"),ODo=o("data2vec-vision"),VDo=o(" \u2014 "),oG=a("a"),XDo=o("Data2VecVisionForImageClassification"),zDo=o(" (Data2VecVision model)"),QDo=l(),Gs=a("li"),Xfe=a("strong"),WDo=o("deit"),HDo=o(" \u2014 "),rG=a("a"),UDo=o("DeiTForImageClassification"),JDo=o(" or "),tG=a("a"),YDo=o("DeiTForImageClassificationWithTeacher"),KDo=o(" (DeiT model)"),ZDo=l(),T2=a("li"),zfe=a("strong"),eGo=o("imagegpt"),oGo=o(" \u2014 "),aG=a("a"),rGo=o("ImageGPTForImageClassification"),tGo=o(" (ImageGPT model)"),aGo=l(),ma=a("li"),Qfe=a("strong"),nGo=o("perceiver"),sGo=o(" \u2014 "),nG=a("a"),lGo=o("PerceiverForImageClassificationLearned"),iGo=o(" or "),sG=a("a"),dGo=o("PerceiverForImageClassificationFourier"),cGo=o(" or "),lG=a("a"),fGo=o("PerceiverForImageClassificationConvProcessing"),mGo=o(" (Perceiver model)"),gGo=l(),M2=a("li"),Wfe=a("strong"),hGo=o("poolformer"),pGo=o(" \u2014 "),iG=a("a"),_Go=o("PoolFormerForImageClassification"),uGo=o(" (PoolFormer model)"),bGo=l(),E2=a("li"),Hfe=a("strong"),vGo=o("regnet"),FGo=o(" \u2014 "),dG=a("a"),TGo=o("RegNetForImageClassification"),MGo=o(" (RegNet model)"),EGo=l(),C2=a("li"),Ufe=a("strong"),CGo=o("resnet"),wGo=o(" \u2014 "),cG=a("a"),AGo=o("ResNetForImageClassification"),yGo=o(" (ResNet model)"),LGo=l(),w2=a("li"),Jfe=a("strong"),xGo=o("segformer"),kGo=o(" \u2014 "),fG=a("a"),SGo=o("SegformerForImageClassification"),RGo=o(" (SegFormer model)"),BGo=l(),A2=a("li"),Yfe=a("strong"),PGo=o("swin"),$Go=o(" \u2014 "),mG=a("a"),IGo=o("SwinForImageClassification"),qGo=o(" (Swin model)"),NGo=l(),y2=a("li"),Kfe=a("strong"),jGo=o("van"),DGo=o(" \u2014 "),gG=a("a"),GGo=o("VanForImageClassification"),OGo=o(" (VAN model)"),VGo=l(),L2=a("li"),Zfe=a("strong"),XGo=o("vit"),zGo=o(" \u2014 "),hG=a("a"),QGo=o("ViTForImageClassification"),WGo=o(" (ViT model)"),HGo=l(),x2=a("p"),UGo=o("The model is set in evaluation mode by default using "),eme=a("code"),JGo=o("model.eval()"),YGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=a("code"),KGo=o("model.train()"),ZGo=l(),rme=a("p"),eOo=o("Examples:"),oOo=l(),f(OA.$$.fragment),PBe=l(),Bd=a("h2"),k2=a("a"),tme=a("span"),f(VA.$$.fragment),rOo=l(),ame=a("span"),tOo=o("AutoModelForVision2Seq"),$Be=l(),ir=a("div"),f(XA.$$.fragment),aOo=l(),Pd=a("p"),nOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pG=a("a"),sOo=o("from_pretrained()"),lOo=o(" class method or the "),_G=a("a"),iOo=o("from_config()"),dOo=o(` class
method.`),cOo=l(),zA=a("p"),fOo=o("This class cannot be instantiated directly using "),nme=a("code"),mOo=o("__init__()"),gOo=o(" (throws an error)."),hOo=l(),rt=a("div"),f(QA.$$.fragment),pOo=l(),sme=a("p"),_Oo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uOo=l(),$d=a("p"),bOo=o(`Note:
Loading a model from its configuration file does `),lme=a("strong"),vOo=o("not"),FOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=a("a"),TOo=o("from_pretrained()"),MOo=o(" to load the model weights."),EOo=l(),ime=a("p"),COo=o("Examples:"),wOo=l(),f(WA.$$.fragment),AOo=l(),Ue=a("div"),f(HA.$$.fragment),yOo=l(),dme=a("p"),LOo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xOo=l(),rn=a("p"),kOo=o("The model class to instantiate is selected based on the "),cme=a("code"),SOo=o("model_type"),ROo=o(` property of the config object (either
passed as an argument or loaded from `),fme=a("code"),BOo=o("pretrained_model_name_or_path"),POo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=a("code"),$Oo=o("pretrained_model_name_or_path"),IOo=o(":"),qOo=l(),gme=a("ul"),S2=a("li"),hme=a("strong"),NOo=o("vision-encoder-decoder"),jOo=o(" \u2014 "),bG=a("a"),DOo=o("VisionEncoderDecoderModel"),GOo=o(" (Vision Encoder decoder model)"),OOo=l(),R2=a("p"),VOo=o("The model is set in evaluation mode by default using "),pme=a("code"),XOo=o("model.eval()"),zOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),QOo=o("model.train()"),WOo=l(),ume=a("p"),HOo=o("Examples:"),UOo=l(),f(UA.$$.fragment),IBe=l(),Id=a("h2"),B2=a("a"),bme=a("span"),f(JA.$$.fragment),JOo=l(),vme=a("span"),YOo=o("AutoModelForAudioClassification"),qBe=l(),dr=a("div"),f(YA.$$.fragment),KOo=l(),qd=a("p"),ZOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),vG=a("a"),eVo=o("from_pretrained()"),oVo=o(" class method or the "),FG=a("a"),rVo=o("from_config()"),tVo=o(` class
method.`),aVo=l(),KA=a("p"),nVo=o("This class cannot be instantiated directly using "),Fme=a("code"),sVo=o("__init__()"),lVo=o(" (throws an error)."),iVo=l(),tt=a("div"),f(ZA.$$.fragment),dVo=l(),Tme=a("p"),cVo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),fVo=l(),Nd=a("p"),mVo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),gVo=o("not"),hVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),pVo=o("from_pretrained()"),_Vo=o(" to load the model weights."),uVo=l(),Eme=a("p"),bVo=o("Examples:"),vVo=l(),f(e0.$$.fragment),FVo=l(),Je=a("div"),f(o0.$$.fragment),TVo=l(),Cme=a("p"),MVo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),EVo=l(),tn=a("p"),CVo=o("The model class to instantiate is selected based on the "),wme=a("code"),wVo=o("model_type"),AVo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),yVo=o("pretrained_model_name_or_path"),LVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),xVo=o("pretrained_model_name_or_path"),kVo=o(":"),SVo=l(),Se=a("ul"),P2=a("li"),Lme=a("strong"),RVo=o("data2vec-audio"),BVo=o(" \u2014 "),MG=a("a"),PVo=o("Data2VecAudioForSequenceClassification"),$Vo=o(" (Data2VecAudio model)"),IVo=l(),$2=a("li"),xme=a("strong"),qVo=o("hubert"),NVo=o(" \u2014 "),EG=a("a"),jVo=o("HubertForSequenceClassification"),DVo=o(" (Hubert model)"),GVo=l(),I2=a("li"),kme=a("strong"),OVo=o("sew"),VVo=o(" \u2014 "),CG=a("a"),XVo=o("SEWForSequenceClassification"),zVo=o(" (SEW model)"),QVo=l(),q2=a("li"),Sme=a("strong"),WVo=o("sew-d"),HVo=o(" \u2014 "),wG=a("a"),UVo=o("SEWDForSequenceClassification"),JVo=o(" (SEW-D model)"),YVo=l(),N2=a("li"),Rme=a("strong"),KVo=o("unispeech"),ZVo=o(" \u2014 "),AG=a("a"),eXo=o("UniSpeechForSequenceClassification"),oXo=o(" (UniSpeech model)"),rXo=l(),j2=a("li"),Bme=a("strong"),tXo=o("unispeech-sat"),aXo=o(" \u2014 "),yG=a("a"),nXo=o("UniSpeechSatForSequenceClassification"),sXo=o(" (UniSpeechSat model)"),lXo=l(),D2=a("li"),Pme=a("strong"),iXo=o("wav2vec2"),dXo=o(" \u2014 "),LG=a("a"),cXo=o("Wav2Vec2ForSequenceClassification"),fXo=o(" (Wav2Vec2 model)"),mXo=l(),G2=a("li"),$me=a("strong"),gXo=o("wavlm"),hXo=o(" \u2014 "),xG=a("a"),pXo=o("WavLMForSequenceClassification"),_Xo=o(" (WavLM model)"),uXo=l(),O2=a("p"),bXo=o("The model is set in evaluation mode by default using "),Ime=a("code"),vXo=o("model.eval()"),FXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=a("code"),TXo=o("model.train()"),MXo=l(),Nme=a("p"),EXo=o("Examples:"),CXo=l(),f(r0.$$.fragment),NBe=l(),jd=a("h2"),V2=a("a"),jme=a("span"),f(t0.$$.fragment),wXo=l(),Dme=a("span"),AXo=o("AutoModelForAudioFrameClassification"),jBe=l(),cr=a("div"),f(a0.$$.fragment),yXo=l(),Dd=a("p"),LXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),kG=a("a"),xXo=o("from_pretrained()"),kXo=o(" class method or the "),SG=a("a"),SXo=o("from_config()"),RXo=o(` class
method.`),BXo=l(),n0=a("p"),PXo=o("This class cannot be instantiated directly using "),Gme=a("code"),$Xo=o("__init__()"),IXo=o(" (throws an error)."),qXo=l(),at=a("div"),f(s0.$$.fragment),NXo=l(),Ome=a("p"),jXo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),DXo=l(),Gd=a("p"),GXo=o(`Note:
Loading a model from its configuration file does `),Vme=a("strong"),OXo=o("not"),VXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=a("a"),XXo=o("from_pretrained()"),zXo=o(" to load the model weights."),QXo=l(),Xme=a("p"),WXo=o("Examples:"),HXo=l(),f(l0.$$.fragment),UXo=l(),Ye=a("div"),f(i0.$$.fragment),JXo=l(),zme=a("p"),YXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),KXo=l(),an=a("p"),ZXo=o("The model class to instantiate is selected based on the "),Qme=a("code"),ezo=o("model_type"),ozo=o(` property of the config object (either
passed as an argument or loaded from `),Wme=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(":"),szo=l(),nn=a("ul"),X2=a("li"),Ume=a("strong"),lzo=o("data2vec-audio"),izo=o(" \u2014 "),BG=a("a"),dzo=o("Data2VecAudioForAudioFrameClassification"),czo=o(" (Data2VecAudio model)"),fzo=l(),z2=a("li"),Jme=a("strong"),mzo=o("unispeech-sat"),gzo=o(" \u2014 "),PG=a("a"),hzo=o("UniSpeechSatForAudioFrameClassification"),pzo=o(" (UniSpeechSat model)"),_zo=l(),Q2=a("li"),Yme=a("strong"),uzo=o("wav2vec2"),bzo=o(" \u2014 "),$G=a("a"),vzo=o("Wav2Vec2ForAudioFrameClassification"),Fzo=o(" (Wav2Vec2 model)"),Tzo=l(),W2=a("li"),Kme=a("strong"),Mzo=o("wavlm"),Ezo=o(" \u2014 "),IG=a("a"),Czo=o("WavLMForAudioFrameClassification"),wzo=o(" (WavLM model)"),Azo=l(),H2=a("p"),yzo=o("The model is set in evaluation mode by default using "),Zme=a("code"),Lzo=o("model.eval()"),xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=a("code"),kzo=o("model.train()"),Szo=l(),oge=a("p"),Rzo=o("Examples:"),Bzo=l(),f(d0.$$.fragment),DBe=l(),Od=a("h2"),U2=a("a"),rge=a("span"),f(c0.$$.fragment),Pzo=l(),tge=a("span"),$zo=o("AutoModelForCTC"),GBe=l(),fr=a("div"),f(f0.$$.fragment),Izo=l(),Vd=a("p"),qzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),qG=a("a"),Nzo=o("from_pretrained()"),jzo=o(" class method or the "),NG=a("a"),Dzo=o("from_config()"),Gzo=o(` class
method.`),Ozo=l(),m0=a("p"),Vzo=o("This class cannot be instantiated directly using "),age=a("code"),Xzo=o("__init__()"),zzo=o(" (throws an error)."),Qzo=l(),nt=a("div"),f(g0.$$.fragment),Wzo=l(),nge=a("p"),Hzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Uzo=l(),Xd=a("p"),Jzo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),Yzo=o("not"),Kzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),Zzo=o("from_pretrained()"),eQo=o(" to load the model weights."),oQo=l(),lge=a("p"),rQo=o("Examples:"),tQo=l(),f(h0.$$.fragment),aQo=l(),Ke=a("div"),f(p0.$$.fragment),nQo=l(),ige=a("p"),sQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lQo=l(),sn=a("p"),iQo=o("The model class to instantiate is selected based on the "),dge=a("code"),dQo=o("model_type"),cQo=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),fQo=o("pretrained_model_name_or_path"),mQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(":"),pQo=l(),Re=a("ul"),J2=a("li"),mge=a("strong"),_Qo=o("data2vec-audio"),uQo=o(" \u2014 "),DG=a("a"),bQo=o("Data2VecAudioForCTC"),vQo=o(" (Data2VecAudio model)"),FQo=l(),Y2=a("li"),gge=a("strong"),TQo=o("hubert"),MQo=o(" \u2014 "),GG=a("a"),EQo=o("HubertForCTC"),CQo=o(" (Hubert model)"),wQo=l(),K2=a("li"),hge=a("strong"),AQo=o("sew"),yQo=o(" \u2014 "),OG=a("a"),LQo=o("SEWForCTC"),xQo=o(" (SEW model)"),kQo=l(),Z2=a("li"),pge=a("strong"),SQo=o("sew-d"),RQo=o(" \u2014 "),VG=a("a"),BQo=o("SEWDForCTC"),PQo=o(" (SEW-D model)"),$Qo=l(),e5=a("li"),_ge=a("strong"),IQo=o("unispeech"),qQo=o(" \u2014 "),XG=a("a"),NQo=o("UniSpeechForCTC"),jQo=o(" (UniSpeech model)"),DQo=l(),o5=a("li"),uge=a("strong"),GQo=o("unispeech-sat"),OQo=o(" \u2014 "),zG=a("a"),VQo=o("UniSpeechSatForCTC"),XQo=o(" (UniSpeechSat model)"),zQo=l(),r5=a("li"),bge=a("strong"),QQo=o("wav2vec2"),WQo=o(" \u2014 "),QG=a("a"),HQo=o("Wav2Vec2ForCTC"),UQo=o(" (Wav2Vec2 model)"),JQo=l(),t5=a("li"),vge=a("strong"),YQo=o("wavlm"),KQo=o(" \u2014 "),WG=a("a"),ZQo=o("WavLMForCTC"),eWo=o(" (WavLM model)"),oWo=l(),a5=a("p"),rWo=o("The model is set in evaluation mode by default using "),Fge=a("code"),tWo=o("model.eval()"),aWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),nWo=o("model.train()"),sWo=l(),Mge=a("p"),lWo=o("Examples:"),iWo=l(),f(_0.$$.fragment),OBe=l(),zd=a("h2"),n5=a("a"),Ege=a("span"),f(u0.$$.fragment),dWo=l(),Cge=a("span"),cWo=o("AutoModelForSpeechSeq2Seq"),VBe=l(),mr=a("div"),f(b0.$$.fragment),fWo=l(),Qd=a("p"),mWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HG=a("a"),gWo=o("from_pretrained()"),hWo=o(" class method or the "),UG=a("a"),pWo=o("from_config()"),_Wo=o(` class
method.`),uWo=l(),v0=a("p"),bWo=o("This class cannot be instantiated directly using "),wge=a("code"),vWo=o("__init__()"),FWo=o(" (throws an error)."),TWo=l(),st=a("div"),f(F0.$$.fragment),MWo=l(),Age=a("p"),EWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CWo=l(),Wd=a("p"),wWo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),AWo=o("not"),yWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),LWo=o("from_pretrained()"),xWo=o(" to load the model weights."),kWo=l(),Lge=a("p"),SWo=o("Examples:"),RWo=l(),f(T0.$$.fragment),BWo=l(),Ze=a("div"),f(M0.$$.fragment),PWo=l(),xge=a("p"),$Wo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),IWo=l(),ln=a("p"),qWo=o("The model class to instantiate is selected based on the "),kge=a("code"),NWo=o("model_type"),jWo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),DWo=o("pretrained_model_name_or_path"),GWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(":"),XWo=l(),E0=a("ul"),s5=a("li"),Bge=a("strong"),zWo=o("speech-encoder-decoder"),QWo=o(" \u2014 "),YG=a("a"),WWo=o("SpeechEncoderDecoderModel"),HWo=o(" (Speech Encoder decoder model)"),UWo=l(),l5=a("li"),Pge=a("strong"),JWo=o("speech_to_text"),YWo=o(" \u2014 "),KG=a("a"),KWo=o("Speech2TextForConditionalGeneration"),ZWo=o(" (Speech2Text model)"),eHo=l(),i5=a("p"),oHo=o("The model is set in evaluation mode by default using "),$ge=a("code"),rHo=o("model.eval()"),tHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),aHo=o("model.train()"),nHo=l(),qge=a("p"),sHo=o("Examples:"),lHo=l(),f(C0.$$.fragment),XBe=l(),Hd=a("h2"),d5=a("a"),Nge=a("span"),f(w0.$$.fragment),iHo=l(),jge=a("span"),dHo=o("AutoModelForAudioXVector"),zBe=l(),gr=a("div"),f(A0.$$.fragment),cHo=l(),Ud=a("p"),fHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZG=a("a"),mHo=o("from_pretrained()"),gHo=o(" class method or the "),eO=a("a"),hHo=o("from_config()"),pHo=o(` class
method.`),_Ho=l(),y0=a("p"),uHo=o("This class cannot be instantiated directly using "),Dge=a("code"),bHo=o("__init__()"),vHo=o(" (throws an error)."),FHo=l(),lt=a("div"),f(L0.$$.fragment),THo=l(),Gge=a("p"),MHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),EHo=l(),Jd=a("p"),CHo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),wHo=o("not"),AHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=a("a"),yHo=o("from_pretrained()"),LHo=o(" to load the model weights."),xHo=l(),Vge=a("p"),kHo=o("Examples:"),SHo=l(),f(x0.$$.fragment),RHo=l(),eo=a("div"),f(k0.$$.fragment),BHo=l(),Xge=a("p"),PHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),$Ho=l(),dn=a("p"),IHo=o("The model class to instantiate is selected based on the "),zge=a("code"),qHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),Qge=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),GHo=o("pretrained_model_name_or_path"),OHo=o(":"),VHo=l(),cn=a("ul"),c5=a("li"),Hge=a("strong"),XHo=o("data2vec-audio"),zHo=o(" \u2014 "),rO=a("a"),QHo=o("Data2VecAudioForXVector"),WHo=o(" (Data2VecAudio model)"),HHo=l(),f5=a("li"),Uge=a("strong"),UHo=o("unispeech-sat"),JHo=o(" \u2014 "),tO=a("a"),YHo=o("UniSpeechSatForXVector"),KHo=o(" (UniSpeechSat model)"),ZHo=l(),m5=a("li"),Jge=a("strong"),eUo=o("wav2vec2"),oUo=o(" \u2014 "),aO=a("a"),rUo=o("Wav2Vec2ForXVector"),tUo=o(" (Wav2Vec2 model)"),aUo=l(),g5=a("li"),Yge=a("strong"),nUo=o("wavlm"),sUo=o(" \u2014 "),nO=a("a"),lUo=o("WavLMForXVector"),iUo=o(" (WavLM model)"),dUo=l(),h5=a("p"),cUo=o("The model is set in evaluation mode by default using "),Kge=a("code"),fUo=o("model.eval()"),mUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=a("code"),gUo=o("model.train()"),hUo=l(),ehe=a("p"),pUo=o("Examples:"),_Uo=l(),f(S0.$$.fragment),QBe=l(),Yd=a("h2"),p5=a("a"),ohe=a("span"),f(R0.$$.fragment),uUo=l(),rhe=a("span"),bUo=o("AutoModelForMaskedImageModeling"),WBe=l(),hr=a("div"),f(B0.$$.fragment),vUo=l(),Kd=a("p"),FUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sO=a("a"),TUo=o("from_pretrained()"),MUo=o(" class method or the "),lO=a("a"),EUo=o("from_config()"),CUo=o(` class
method.`),wUo=l(),P0=a("p"),AUo=o("This class cannot be instantiated directly using "),the=a("code"),yUo=o("__init__()"),LUo=o(" (throws an error)."),xUo=l(),it=a("div"),f($0.$$.fragment),kUo=l(),ahe=a("p"),SUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),RUo=l(),Zd=a("p"),BUo=o(`Note:
Loading a model from its configuration file does `),nhe=a("strong"),PUo=o("not"),$Uo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),IUo=o("from_pretrained()"),qUo=o(" to load the model weights."),NUo=l(),she=a("p"),jUo=o("Examples:"),DUo=l(),f(I0.$$.fragment),GUo=l(),oo=a("div"),f(q0.$$.fragment),OUo=l(),lhe=a("p"),VUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),XUo=l(),fn=a("p"),zUo=o("The model class to instantiate is selected based on the "),ihe=a("code"),QUo=o("model_type"),WUo=o(` property of the config object (either
passed as an argument or loaded from `),dhe=a("code"),HUo=o("pretrained_model_name_or_path"),UUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=a("code"),JUo=o("pretrained_model_name_or_path"),YUo=o(":"),KUo=l(),ec=a("ul"),_5=a("li"),fhe=a("strong"),ZUo=o("deit"),eJo=o(" \u2014 "),dO=a("a"),oJo=o("DeiTForMaskedImageModeling"),rJo=o(" (DeiT model)"),tJo=l(),u5=a("li"),mhe=a("strong"),aJo=o("swin"),nJo=o(" \u2014 "),cO=a("a"),sJo=o("SwinForMaskedImageModeling"),lJo=o(" (Swin model)"),iJo=l(),b5=a("li"),ghe=a("strong"),dJo=o("vit"),cJo=o(" \u2014 "),fO=a("a"),fJo=o("ViTForMaskedImageModeling"),mJo=o(" (ViT model)"),gJo=l(),v5=a("p"),hJo=o("The model is set in evaluation mode by default using "),hhe=a("code"),pJo=o("model.eval()"),_Jo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),uJo=o("model.train()"),bJo=l(),_he=a("p"),vJo=o("Examples:"),FJo=l(),f(N0.$$.fragment),HBe=l(),oc=a("h2"),F5=a("a"),uhe=a("span"),f(j0.$$.fragment),TJo=l(),bhe=a("span"),MJo=o("AutoModelForObjectDetection"),UBe=l(),pr=a("div"),f(D0.$$.fragment),EJo=l(),rc=a("p"),CJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mO=a("a"),wJo=o("from_pretrained()"),AJo=o(" class method or the "),gO=a("a"),yJo=o("from_config()"),LJo=o(` class
method.`),xJo=l(),G0=a("p"),kJo=o("This class cannot be instantiated directly using "),vhe=a("code"),SJo=o("__init__()"),RJo=o(" (throws an error)."),BJo=l(),dt=a("div"),f(O0.$$.fragment),PJo=l(),Fhe=a("p"),$Jo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),IJo=l(),tc=a("p"),qJo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),NJo=o("not"),jJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),DJo=o("from_pretrained()"),GJo=o(" to load the model weights."),OJo=l(),Mhe=a("p"),VJo=o("Examples:"),XJo=l(),f(V0.$$.fragment),zJo=l(),ro=a("div"),f(X0.$$.fragment),QJo=l(),Ehe=a("p"),WJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),HJo=l(),mn=a("p"),UJo=o("The model class to instantiate is selected based on the "),Che=a("code"),JJo=o("model_type"),YJo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),KJo=o("pretrained_model_name_or_path"),ZJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),eYo=o("pretrained_model_name_or_path"),oYo=o(":"),rYo=l(),yhe=a("ul"),T5=a("li"),Lhe=a("strong"),tYo=o("detr"),aYo=o(" \u2014 "),pO=a("a"),nYo=o("DetrForObjectDetection"),sYo=o(" (DETR model)"),lYo=l(),M5=a("p"),iYo=o("The model is set in evaluation mode by default using "),xhe=a("code"),dYo=o("model.eval()"),cYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),fYo=o("model.train()"),mYo=l(),She=a("p"),gYo=o("Examples:"),hYo=l(),f(z0.$$.fragment),JBe=l(),ac=a("h2"),E5=a("a"),Rhe=a("span"),f(Q0.$$.fragment),pYo=l(),Bhe=a("span"),_Yo=o("AutoModelForImageSegmentation"),YBe=l(),_r=a("div"),f(W0.$$.fragment),uYo=l(),nc=a("p"),bYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_O=a("a"),vYo=o("from_pretrained()"),FYo=o(" class method or the "),uO=a("a"),TYo=o("from_config()"),MYo=o(` class
method.`),EYo=l(),H0=a("p"),CYo=o("This class cannot be instantiated directly using "),Phe=a("code"),wYo=o("__init__()"),AYo=o(" (throws an error)."),yYo=l(),ct=a("div"),f(U0.$$.fragment),LYo=l(),$he=a("p"),xYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),kYo=l(),sc=a("p"),SYo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),RYo=o("not"),BYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),PYo=o("from_pretrained()"),$Yo=o(" to load the model weights."),IYo=l(),qhe=a("p"),qYo=o("Examples:"),NYo=l(),f(J0.$$.fragment),jYo=l(),to=a("div"),f(Y0.$$.fragment),DYo=l(),Nhe=a("p"),GYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),OYo=l(),gn=a("p"),VYo=o("The model class to instantiate is selected based on the "),jhe=a("code"),XYo=o("model_type"),zYo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),QYo=o("pretrained_model_name_or_path"),WYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),HYo=o("pretrained_model_name_or_path"),UYo=o(":"),JYo=l(),Ohe=a("ul"),C5=a("li"),Vhe=a("strong"),YYo=o("detr"),KYo=o(" \u2014 "),vO=a("a"),ZYo=o("DetrForSegmentation"),eKo=o(" (DETR model)"),oKo=l(),w5=a("p"),rKo=o("The model is set in evaluation mode by default using "),Xhe=a("code"),tKo=o("model.eval()"),aKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=a("code"),nKo=o("model.train()"),sKo=l(),Qhe=a("p"),lKo=o("Examples:"),iKo=l(),f(K0.$$.fragment),KBe=l(),lc=a("h2"),A5=a("a"),Whe=a("span"),f(Z0.$$.fragment),dKo=l(),Hhe=a("span"),cKo=o("AutoModelForSemanticSegmentation"),ZBe=l(),ur=a("div"),f(ey.$$.fragment),fKo=l(),ic=a("p"),mKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FO=a("a"),gKo=o("from_pretrained()"),hKo=o(" class method or the "),TO=a("a"),pKo=o("from_config()"),_Ko=o(` class
method.`),uKo=l(),oy=a("p"),bKo=o("This class cannot be instantiated directly using "),Uhe=a("code"),vKo=o("__init__()"),FKo=o(" (throws an error)."),TKo=l(),ft=a("div"),f(ry.$$.fragment),MKo=l(),Jhe=a("p"),EKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),CKo=l(),dc=a("p"),wKo=o(`Note:
Loading a model from its configuration file does `),Yhe=a("strong"),AKo=o("not"),yKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),LKo=o("from_pretrained()"),xKo=o(" to load the model weights."),kKo=l(),Khe=a("p"),SKo=o("Examples:"),RKo=l(),f(ty.$$.fragment),BKo=l(),ao=a("div"),f(ay.$$.fragment),PKo=l(),Zhe=a("p"),$Ko=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),IKo=l(),hn=a("p"),qKo=o("The model class to instantiate is selected based on the "),epe=a("code"),NKo=o("model_type"),jKo=o(` property of the config object (either
passed as an argument or loaded from `),ope=a("code"),DKo=o("pretrained_model_name_or_path"),GKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=a("code"),OKo=o("pretrained_model_name_or_path"),VKo=o(":"),XKo=l(),pn=a("ul"),y5=a("li"),tpe=a("strong"),zKo=o("beit"),QKo=o(" \u2014 "),EO=a("a"),WKo=o("BeitForSemanticSegmentation"),HKo=o(" (BEiT model)"),UKo=l(),L5=a("li"),ape=a("strong"),JKo=o("data2vec-vision"),YKo=o(" \u2014 "),CO=a("a"),KKo=o("Data2VecVisionForSemanticSegmentation"),ZKo=o(" (Data2VecVision model)"),eZo=l(),x5=a("li"),npe=a("strong"),oZo=o("dpt"),rZo=o(" \u2014 "),wO=a("a"),tZo=o("DPTForSemanticSegmentation"),aZo=o(" (DPT model)"),nZo=l(),k5=a("li"),spe=a("strong"),sZo=o("segformer"),lZo=o(" \u2014 "),AO=a("a"),iZo=o("SegformerForSemanticSegmentation"),dZo=o(" (SegFormer model)"),cZo=l(),S5=a("p"),fZo=o("The model is set in evaluation mode by default using "),lpe=a("code"),mZo=o("model.eval()"),gZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=a("code"),hZo=o("model.train()"),pZo=l(),dpe=a("p"),_Zo=o("Examples:"),uZo=l(),f(ny.$$.fragment),ePe=l(),cc=a("h2"),R5=a("a"),cpe=a("span"),f(sy.$$.fragment),bZo=l(),fpe=a("span"),vZo=o("AutoModelForInstanceSegmentation"),oPe=l(),br=a("div"),f(ly.$$.fragment),FZo=l(),fc=a("p"),TZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yO=a("a"),MZo=o("from_pretrained()"),EZo=o(" class method or the "),LO=a("a"),CZo=o("from_config()"),wZo=o(` class
method.`),AZo=l(),iy=a("p"),yZo=o("This class cannot be instantiated directly using "),mpe=a("code"),LZo=o("__init__()"),xZo=o(" (throws an error)."),kZo=l(),mt=a("div"),f(dy.$$.fragment),SZo=l(),gpe=a("p"),RZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),BZo=l(),mc=a("p"),PZo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),$Zo=o("not"),IZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),qZo=o("from_pretrained()"),NZo=o(" to load the model weights."),jZo=l(),ppe=a("p"),DZo=o("Examples:"),GZo=l(),f(cy.$$.fragment),OZo=l(),no=a("div"),f(fy.$$.fragment),VZo=l(),_pe=a("p"),XZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),zZo=l(),_n=a("p"),QZo=o("The model class to instantiate is selected based on the "),upe=a("code"),WZo=o("model_type"),HZo=o(` property of the config object (either
passed as an argument or loaded from `),bpe=a("code"),UZo=o("pretrained_model_name_or_path"),JZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=a("code"),YZo=o("pretrained_model_name_or_path"),KZo=o(":"),ZZo=l(),Fpe=a("ul"),B5=a("li"),Tpe=a("strong"),eer=o("maskformer"),oer=o(" \u2014 "),kO=a("a"),rer=o("MaskFormerForInstanceSegmentation"),ter=o(" (MaskFormer model)"),aer=l(),P5=a("p"),ner=o("The model is set in evaluation mode by default using "),Mpe=a("code"),ser=o("model.eval()"),ler=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=a("code"),ier=o("model.train()"),der=l(),Cpe=a("p"),cer=o("Examples:"),fer=l(),f(my.$$.fragment),rPe=l(),gc=a("h2"),$5=a("a"),wpe=a("span"),f(gy.$$.fragment),mer=l(),Ape=a("span"),ger=o("TFAutoModel"),tPe=l(),vr=a("div"),f(hy.$$.fragment),her=l(),hc=a("p"),per=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SO=a("a"),_er=o("from_pretrained()"),uer=o(" class method or the "),RO=a("a"),ber=o("from_config()"),ver=o(` class
method.`),Fer=l(),py=a("p"),Ter=o("This class cannot be instantiated directly using "),ype=a("code"),Mer=o("__init__()"),Eer=o(" (throws an error)."),Cer=l(),gt=a("div"),f(_y.$$.fragment),wer=l(),Lpe=a("p"),Aer=o("Instantiates one of the base model classes of the library from a configuration."),yer=l(),pc=a("p"),Ler=o(`Note:
Loading a model from its configuration file does `),xpe=a("strong"),xer=o("not"),ker=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=a("a"),Ser=o("from_pretrained()"),Rer=o(" to load the model weights."),Ber=l(),kpe=a("p"),Per=o("Examples:"),$er=l(),f(uy.$$.fragment),Ier=l(),po=a("div"),f(by.$$.fragment),qer=l(),Spe=a("p"),Ner=o("Instantiate one of the base model classes of the library from a pretrained model."),jer=l(),un=a("p"),Der=o("The model class to instantiate is selected based on the "),Rpe=a("code"),Ger=o("model_type"),Oer=o(` property of the config object (either
passed as an argument or loaded from `),Bpe=a("code"),Ver=o("pretrained_model_name_or_path"),Xer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=a("code"),zer=o("pretrained_model_name_or_path"),Qer=o(":"),Wer=l(),x=a("ul"),I5=a("li"),$pe=a("strong"),Her=o("albert"),Uer=o(" \u2014 "),PO=a("a"),Jer=o("TFAlbertModel"),Yer=o(" (ALBERT model)"),Ker=l(),q5=a("li"),Ipe=a("strong"),Zer=o("bart"),eor=o(" \u2014 "),$O=a("a"),oor=o("TFBartModel"),ror=o(" (BART model)"),tor=l(),N5=a("li"),qpe=a("strong"),aor=o("bert"),nor=o(" \u2014 "),IO=a("a"),sor=o("TFBertModel"),lor=o(" (BERT model)"),ior=l(),j5=a("li"),Npe=a("strong"),dor=o("blenderbot"),cor=o(" \u2014 "),qO=a("a"),mor=o("TFBlenderbotModel"),gor=o(" (Blenderbot model)"),hor=l(),D5=a("li"),jpe=a("strong"),por=o("blenderbot-small"),_or=o(" \u2014 "),NO=a("a"),uor=o("TFBlenderbotSmallModel"),bor=o(" (BlenderbotSmall model)"),vor=l(),G5=a("li"),Dpe=a("strong"),For=o("camembert"),Tor=o(" \u2014 "),jO=a("a"),Mor=o("TFCamembertModel"),Eor=o(" (CamemBERT model)"),Cor=l(),O5=a("li"),Gpe=a("strong"),wor=o("clip"),Aor=o(" \u2014 "),DO=a("a"),yor=o("TFCLIPModel"),Lor=o(" (CLIP model)"),xor=l(),V5=a("li"),Ope=a("strong"),kor=o("convbert"),Sor=o(" \u2014 "),GO=a("a"),Ror=o("TFConvBertModel"),Bor=o(" (ConvBERT model)"),Por=l(),X5=a("li"),Vpe=a("strong"),$or=o("convnext"),Ior=o(" \u2014 "),OO=a("a"),qor=o("TFConvNextModel"),Nor=o(" (ConvNext model)"),jor=l(),z5=a("li"),Xpe=a("strong"),Dor=o("ctrl"),Gor=o(" \u2014 "),VO=a("a"),Oor=o("TFCTRLModel"),Vor=o(" (CTRL model)"),Xor=l(),Q5=a("li"),zpe=a("strong"),zor=o("deberta"),Qor=o(" \u2014 "),XO=a("a"),Wor=o("TFDebertaModel"),Hor=o(" (DeBERTa model)"),Uor=l(),W5=a("li"),Qpe=a("strong"),Jor=o("deberta-v2"),Yor=o(" \u2014 "),zO=a("a"),Kor=o("TFDebertaV2Model"),Zor=o(" (DeBERTa-v2 model)"),err=l(),H5=a("li"),Wpe=a("strong"),orr=o("distilbert"),rrr=o(" \u2014 "),QO=a("a"),trr=o("TFDistilBertModel"),arr=o(" (DistilBERT model)"),nrr=l(),U5=a("li"),Hpe=a("strong"),srr=o("dpr"),lrr=o(" \u2014 "),WO=a("a"),irr=o("TFDPRQuestionEncoder"),drr=o(" (DPR model)"),crr=l(),J5=a("li"),Upe=a("strong"),frr=o("electra"),mrr=o(" \u2014 "),HO=a("a"),grr=o("TFElectraModel"),hrr=o(" (ELECTRA model)"),prr=l(),Y5=a("li"),Jpe=a("strong"),_rr=o("flaubert"),urr=o(" \u2014 "),UO=a("a"),brr=o("TFFlaubertModel"),vrr=o(" (FlauBERT model)"),Frr=l(),Os=a("li"),Ype=a("strong"),Trr=o("funnel"),Mrr=o(" \u2014 "),JO=a("a"),Err=o("TFFunnelModel"),Crr=o(" or "),YO=a("a"),wrr=o("TFFunnelBaseModel"),Arr=o(" (Funnel Transformer model)"),yrr=l(),K5=a("li"),Kpe=a("strong"),Lrr=o("gpt2"),xrr=o(" \u2014 "),KO=a("a"),krr=o("TFGPT2Model"),Srr=o(" (OpenAI GPT-2 model)"),Rrr=l(),Z5=a("li"),Zpe=a("strong"),Brr=o("gptj"),Prr=o(" \u2014 "),ZO=a("a"),$rr=o("TFGPTJModel"),Irr=o(" (GPT-J model)"),qrr=l(),ev=a("li"),e_e=a("strong"),Nrr=o("hubert"),jrr=o(" \u2014 "),eV=a("a"),Drr=o("TFHubertModel"),Grr=o(" (Hubert model)"),Orr=l(),ov=a("li"),o_e=a("strong"),Vrr=o("layoutlm"),Xrr=o(" \u2014 "),oV=a("a"),zrr=o("TFLayoutLMModel"),Qrr=o(" (LayoutLM model)"),Wrr=l(),rv=a("li"),r_e=a("strong"),Hrr=o("led"),Urr=o(" \u2014 "),rV=a("a"),Jrr=o("TFLEDModel"),Yrr=o(" (LED model)"),Krr=l(),tv=a("li"),t_e=a("strong"),Zrr=o("longformer"),etr=o(" \u2014 "),tV=a("a"),otr=o("TFLongformerModel"),rtr=o(" (Longformer model)"),ttr=l(),av=a("li"),a_e=a("strong"),atr=o("lxmert"),ntr=o(" \u2014 "),aV=a("a"),str=o("TFLxmertModel"),ltr=o(" (LXMERT model)"),itr=l(),nv=a("li"),n_e=a("strong"),dtr=o("marian"),ctr=o(" \u2014 "),nV=a("a"),ftr=o("TFMarianModel"),mtr=o(" (Marian model)"),gtr=l(),sv=a("li"),s_e=a("strong"),htr=o("mbart"),ptr=o(" \u2014 "),sV=a("a"),_tr=o("TFMBartModel"),utr=o(" (mBART model)"),btr=l(),lv=a("li"),l_e=a("strong"),vtr=o("mobilebert"),Ftr=o(" \u2014 "),lV=a("a"),Ttr=o("TFMobileBertModel"),Mtr=o(" (MobileBERT model)"),Etr=l(),iv=a("li"),i_e=a("strong"),Ctr=o("mpnet"),wtr=o(" \u2014 "),iV=a("a"),Atr=o("TFMPNetModel"),ytr=o(" (MPNet model)"),Ltr=l(),dv=a("li"),d_e=a("strong"),xtr=o("mt5"),ktr=o(" \u2014 "),dV=a("a"),Str=o("TFMT5Model"),Rtr=o(" (mT5 model)"),Btr=l(),cv=a("li"),c_e=a("strong"),Ptr=o("openai-gpt"),$tr=o(" \u2014 "),cV=a("a"),Itr=o("TFOpenAIGPTModel"),qtr=o(" (OpenAI GPT model)"),Ntr=l(),fv=a("li"),f_e=a("strong"),jtr=o("pegasus"),Dtr=o(" \u2014 "),fV=a("a"),Gtr=o("TFPegasusModel"),Otr=o(" (Pegasus model)"),Vtr=l(),mv=a("li"),m_e=a("strong"),Xtr=o("rembert"),ztr=o(" \u2014 "),mV=a("a"),Qtr=o("TFRemBertModel"),Wtr=o(" (RemBERT model)"),Htr=l(),gv=a("li"),g_e=a("strong"),Utr=o("roberta"),Jtr=o(" \u2014 "),gV=a("a"),Ytr=o("TFRobertaModel"),Ktr=o(" (RoBERTa model)"),Ztr=l(),hv=a("li"),h_e=a("strong"),ear=o("roformer"),oar=o(" \u2014 "),hV=a("a"),rar=o("TFRoFormerModel"),tar=o(" (RoFormer model)"),aar=l(),pv=a("li"),p_e=a("strong"),nar=o("speech_to_text"),sar=o(" \u2014 "),pV=a("a"),lar=o("TFSpeech2TextModel"),iar=o(" (Speech2Text model)"),dar=l(),_v=a("li"),__e=a("strong"),car=o("t5"),far=o(" \u2014 "),_V=a("a"),mar=o("TFT5Model"),gar=o(" (T5 model)"),har=l(),uv=a("li"),u_e=a("strong"),par=o("tapas"),_ar=o(" \u2014 "),uV=a("a"),uar=o("TFTapasModel"),bar=o(" (TAPAS model)"),Far=l(),bv=a("li"),b_e=a("strong"),Tar=o("transfo-xl"),Mar=o(" \u2014 "),bV=a("a"),Ear=o("TFTransfoXLModel"),Car=o(" (Transformer-XL model)"),war=l(),vv=a("li"),v_e=a("strong"),Aar=o("vit"),yar=o(" \u2014 "),vV=a("a"),Lar=o("TFViTModel"),xar=o(" (ViT model)"),kar=l(),Fv=a("li"),F_e=a("strong"),Sar=o("vit_mae"),Rar=o(" \u2014 "),FV=a("a"),Bar=o("TFViTMAEModel"),Par=o(" (ViTMAE model)"),$ar=l(),Tv=a("li"),T_e=a("strong"),Iar=o("wav2vec2"),qar=o(" \u2014 "),TV=a("a"),Nar=o("TFWav2Vec2Model"),jar=o(" (Wav2Vec2 model)"),Dar=l(),Mv=a("li"),M_e=a("strong"),Gar=o("xlm"),Oar=o(" \u2014 "),MV=a("a"),Var=o("TFXLMModel"),Xar=o(" (XLM model)"),zar=l(),Ev=a("li"),E_e=a("strong"),Qar=o("xlm-roberta"),War=o(" \u2014 "),EV=a("a"),Har=o("TFXLMRobertaModel"),Uar=o(" (XLM-RoBERTa model)"),Jar=l(),Cv=a("li"),C_e=a("strong"),Yar=o("xlnet"),Kar=o(" \u2014 "),CV=a("a"),Zar=o("TFXLNetModel"),enr=o(" (XLNet model)"),onr=l(),w_e=a("p"),rnr=o("Examples:"),tnr=l(),f(vy.$$.fragment),aPe=l(),_c=a("h2"),wv=a("a"),A_e=a("span"),f(Fy.$$.fragment),anr=l(),y_e=a("span"),nnr=o("TFAutoModelForPreTraining"),nPe=l(),Fr=a("div"),f(Ty.$$.fragment),snr=l(),uc=a("p"),lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wV=a("a"),inr=o("from_pretrained()"),dnr=o(" class method or the "),AV=a("a"),cnr=o("from_config()"),fnr=o(` class
method.`),mnr=l(),My=a("p"),gnr=o("This class cannot be instantiated directly using "),L_e=a("code"),hnr=o("__init__()"),pnr=o(" (throws an error)."),_nr=l(),ht=a("div"),f(Ey.$$.fragment),unr=l(),x_e=a("p"),bnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vnr=l(),bc=a("p"),Fnr=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),Tnr=o("not"),Mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),Enr=o("from_pretrained()"),Cnr=o(" to load the model weights."),wnr=l(),S_e=a("p"),Anr=o("Examples:"),ynr=l(),f(Cy.$$.fragment),Lnr=l(),_o=a("div"),f(wy.$$.fragment),xnr=l(),R_e=a("p"),knr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Snr=l(),bn=a("p"),Rnr=o("The model class to instantiate is selected based on the "),B_e=a("code"),Bnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),$nr=o("pretrained_model_name_or_path"),Inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),qnr=o("pretrained_model_name_or_path"),Nnr=o(":"),jnr=l(),H=a("ul"),Av=a("li"),I_e=a("strong"),Dnr=o("albert"),Gnr=o(" \u2014 "),LV=a("a"),Onr=o("TFAlbertForPreTraining"),Vnr=o(" (ALBERT model)"),Xnr=l(),yv=a("li"),q_e=a("strong"),znr=o("bart"),Qnr=o(" \u2014 "),xV=a("a"),Wnr=o("TFBartForConditionalGeneration"),Hnr=o(" (BART model)"),Unr=l(),Lv=a("li"),N_e=a("strong"),Jnr=o("bert"),Ynr=o(" \u2014 "),kV=a("a"),Knr=o("TFBertForPreTraining"),Znr=o(" (BERT model)"),esr=l(),xv=a("li"),j_e=a("strong"),osr=o("camembert"),rsr=o(" \u2014 "),SV=a("a"),tsr=o("TFCamembertForMaskedLM"),asr=o(" (CamemBERT model)"),nsr=l(),kv=a("li"),D_e=a("strong"),ssr=o("ctrl"),lsr=o(" \u2014 "),RV=a("a"),isr=o("TFCTRLLMHeadModel"),dsr=o(" (CTRL model)"),csr=l(),Sv=a("li"),G_e=a("strong"),fsr=o("distilbert"),msr=o(" \u2014 "),BV=a("a"),gsr=o("TFDistilBertForMaskedLM"),hsr=o(" (DistilBERT model)"),psr=l(),Rv=a("li"),O_e=a("strong"),_sr=o("electra"),usr=o(" \u2014 "),PV=a("a"),bsr=o("TFElectraForPreTraining"),vsr=o(" (ELECTRA model)"),Fsr=l(),Bv=a("li"),V_e=a("strong"),Tsr=o("flaubert"),Msr=o(" \u2014 "),$V=a("a"),Esr=o("TFFlaubertWithLMHeadModel"),Csr=o(" (FlauBERT model)"),wsr=l(),Pv=a("li"),X_e=a("strong"),Asr=o("funnel"),ysr=o(" \u2014 "),IV=a("a"),Lsr=o("TFFunnelForPreTraining"),xsr=o(" (Funnel Transformer model)"),ksr=l(),$v=a("li"),z_e=a("strong"),Ssr=o("gpt2"),Rsr=o(" \u2014 "),qV=a("a"),Bsr=o("TFGPT2LMHeadModel"),Psr=o(" (OpenAI GPT-2 model)"),$sr=l(),Iv=a("li"),Q_e=a("strong"),Isr=o("layoutlm"),qsr=o(" \u2014 "),NV=a("a"),Nsr=o("TFLayoutLMForMaskedLM"),jsr=o(" (LayoutLM model)"),Dsr=l(),qv=a("li"),W_e=a("strong"),Gsr=o("lxmert"),Osr=o(" \u2014 "),jV=a("a"),Vsr=o("TFLxmertForPreTraining"),Xsr=o(" (LXMERT model)"),zsr=l(),Nv=a("li"),H_e=a("strong"),Qsr=o("mobilebert"),Wsr=o(" \u2014 "),DV=a("a"),Hsr=o("TFMobileBertForPreTraining"),Usr=o(" (MobileBERT model)"),Jsr=l(),jv=a("li"),U_e=a("strong"),Ysr=o("mpnet"),Ksr=o(" \u2014 "),GV=a("a"),Zsr=o("TFMPNetForMaskedLM"),elr=o(" (MPNet model)"),olr=l(),Dv=a("li"),J_e=a("strong"),rlr=o("openai-gpt"),tlr=o(" \u2014 "),OV=a("a"),alr=o("TFOpenAIGPTLMHeadModel"),nlr=o(" (OpenAI GPT model)"),slr=l(),Gv=a("li"),Y_e=a("strong"),llr=o("roberta"),ilr=o(" \u2014 "),VV=a("a"),dlr=o("TFRobertaForMaskedLM"),clr=o(" (RoBERTa model)"),flr=l(),Ov=a("li"),K_e=a("strong"),mlr=o("t5"),glr=o(" \u2014 "),XV=a("a"),hlr=o("TFT5ForConditionalGeneration"),plr=o(" (T5 model)"),_lr=l(),Vv=a("li"),Z_e=a("strong"),ulr=o("tapas"),blr=o(" \u2014 "),zV=a("a"),vlr=o("TFTapasForMaskedLM"),Flr=o(" (TAPAS model)"),Tlr=l(),Xv=a("li"),eue=a("strong"),Mlr=o("transfo-xl"),Elr=o(" \u2014 "),QV=a("a"),Clr=o("TFTransfoXLLMHeadModel"),wlr=o(" (Transformer-XL model)"),Alr=l(),zv=a("li"),oue=a("strong"),ylr=o("vit_mae"),Llr=o(" \u2014 "),WV=a("a"),xlr=o("TFViTMAEForPreTraining"),klr=o(" (ViTMAE model)"),Slr=l(),Qv=a("li"),rue=a("strong"),Rlr=o("xlm"),Blr=o(" \u2014 "),HV=a("a"),Plr=o("TFXLMWithLMHeadModel"),$lr=o(" (XLM model)"),Ilr=l(),Wv=a("li"),tue=a("strong"),qlr=o("xlm-roberta"),Nlr=o(" \u2014 "),UV=a("a"),jlr=o("TFXLMRobertaForMaskedLM"),Dlr=o(" (XLM-RoBERTa model)"),Glr=l(),Hv=a("li"),aue=a("strong"),Olr=o("xlnet"),Vlr=o(" \u2014 "),JV=a("a"),Xlr=o("TFXLNetLMHeadModel"),zlr=o(" (XLNet model)"),Qlr=l(),nue=a("p"),Wlr=o("Examples:"),Hlr=l(),f(Ay.$$.fragment),sPe=l(),vc=a("h2"),Uv=a("a"),sue=a("span"),f(yy.$$.fragment),Ulr=l(),lue=a("span"),Jlr=o("TFAutoModelForCausalLM"),lPe=l(),Tr=a("div"),f(Ly.$$.fragment),Ylr=l(),Fc=a("p"),Klr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YV=a("a"),Zlr=o("from_pretrained()"),eir=o(" class method or the "),KV=a("a"),oir=o("from_config()"),rir=o(` class
method.`),tir=l(),xy=a("p"),air=o("This class cannot be instantiated directly using "),iue=a("code"),nir=o("__init__()"),sir=o(" (throws an error)."),lir=l(),pt=a("div"),f(ky.$$.fragment),iir=l(),due=a("p"),dir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cir=l(),Tc=a("p"),fir=o(`Note:
Loading a model from its configuration file does `),cue=a("strong"),mir=o("not"),gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),hir=o("from_pretrained()"),pir=o(" to load the model weights."),_ir=l(),fue=a("p"),uir=o("Examples:"),bir=l(),f(Sy.$$.fragment),vir=l(),uo=a("div"),f(Ry.$$.fragment),Fir=l(),mue=a("p"),Tir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Mir=l(),vn=a("p"),Eir=o("The model class to instantiate is selected based on the "),gue=a("code"),Cir=o("model_type"),wir=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),Air=o("pretrained_model_name_or_path"),yir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),Lir=o("pretrained_model_name_or_path"),xir=o(":"),kir=l(),fe=a("ul"),Jv=a("li"),_ue=a("strong"),Sir=o("bert"),Rir=o(" \u2014 "),eX=a("a"),Bir=o("TFBertLMHeadModel"),Pir=o(" (BERT model)"),$ir=l(),Yv=a("li"),uue=a("strong"),Iir=o("camembert"),qir=o(" \u2014 "),oX=a("a"),Nir=o("TFCamembertForCausalLM"),jir=o(" (CamemBERT model)"),Dir=l(),Kv=a("li"),bue=a("strong"),Gir=o("ctrl"),Oir=o(" \u2014 "),rX=a("a"),Vir=o("TFCTRLLMHeadModel"),Xir=o(" (CTRL model)"),zir=l(),Zv=a("li"),vue=a("strong"),Qir=o("gpt2"),Wir=o(" \u2014 "),tX=a("a"),Hir=o("TFGPT2LMHeadModel"),Uir=o(" (OpenAI GPT-2 model)"),Jir=l(),eF=a("li"),Fue=a("strong"),Yir=o("gptj"),Kir=o(" \u2014 "),aX=a("a"),Zir=o("TFGPTJForCausalLM"),edr=o(" (GPT-J model)"),odr=l(),oF=a("li"),Tue=a("strong"),rdr=o("openai-gpt"),tdr=o(" \u2014 "),nX=a("a"),adr=o("TFOpenAIGPTLMHeadModel"),ndr=o(" (OpenAI GPT model)"),sdr=l(),rF=a("li"),Mue=a("strong"),ldr=o("rembert"),idr=o(" \u2014 "),sX=a("a"),ddr=o("TFRemBertForCausalLM"),cdr=o(" (RemBERT model)"),fdr=l(),tF=a("li"),Eue=a("strong"),mdr=o("roberta"),gdr=o(" \u2014 "),lX=a("a"),hdr=o("TFRobertaForCausalLM"),pdr=o(" (RoBERTa model)"),_dr=l(),aF=a("li"),Cue=a("strong"),udr=o("roformer"),bdr=o(" \u2014 "),iX=a("a"),vdr=o("TFRoFormerForCausalLM"),Fdr=o(" (RoFormer model)"),Tdr=l(),nF=a("li"),wue=a("strong"),Mdr=o("transfo-xl"),Edr=o(" \u2014 "),dX=a("a"),Cdr=o("TFTransfoXLLMHeadModel"),wdr=o(" (Transformer-XL model)"),Adr=l(),sF=a("li"),Aue=a("strong"),ydr=o("xlm"),Ldr=o(" \u2014 "),cX=a("a"),xdr=o("TFXLMWithLMHeadModel"),kdr=o(" (XLM model)"),Sdr=l(),lF=a("li"),yue=a("strong"),Rdr=o("xlnet"),Bdr=o(" \u2014 "),fX=a("a"),Pdr=o("TFXLNetLMHeadModel"),$dr=o(" (XLNet model)"),Idr=l(),Lue=a("p"),qdr=o("Examples:"),Ndr=l(),f(By.$$.fragment),iPe=l(),Mc=a("h2"),iF=a("a"),xue=a("span"),f(Py.$$.fragment),jdr=l(),kue=a("span"),Ddr=o("TFAutoModelForImageClassification"),dPe=l(),Mr=a("div"),f($y.$$.fragment),Gdr=l(),Ec=a("p"),Odr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mX=a("a"),Vdr=o("from_pretrained()"),Xdr=o(" class method or the "),gX=a("a"),zdr=o("from_config()"),Qdr=o(` class
method.`),Wdr=l(),Iy=a("p"),Hdr=o("This class cannot be instantiated directly using "),Sue=a("code"),Udr=o("__init__()"),Jdr=o(" (throws an error)."),Ydr=l(),_t=a("div"),f(qy.$$.fragment),Kdr=l(),Rue=a("p"),Zdr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ecr=l(),Cc=a("p"),ocr=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),rcr=o("not"),tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),acr=o("from_pretrained()"),ncr=o(" to load the model weights."),scr=l(),Pue=a("p"),lcr=o("Examples:"),icr=l(),f(Ny.$$.fragment),dcr=l(),bo=a("div"),f(jy.$$.fragment),ccr=l(),$ue=a("p"),fcr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mcr=l(),Fn=a("p"),gcr=o("The model class to instantiate is selected based on the "),Iue=a("code"),hcr=o("model_type"),pcr=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),_cr=o("pretrained_model_name_or_path"),ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),bcr=o("pretrained_model_name_or_path"),vcr=o(":"),Fcr=l(),Dy=a("ul"),dF=a("li"),jue=a("strong"),Tcr=o("convnext"),Mcr=o(" \u2014 "),pX=a("a"),Ecr=o("TFConvNextForImageClassification"),Ccr=o(" (ConvNext model)"),wcr=l(),cF=a("li"),Due=a("strong"),Acr=o("vit"),ycr=o(" \u2014 "),_X=a("a"),Lcr=o("TFViTForImageClassification"),xcr=o(" (ViT model)"),kcr=l(),Gue=a("p"),Scr=o("Examples:"),Rcr=l(),f(Gy.$$.fragment),cPe=l(),wc=a("h2"),fF=a("a"),Oue=a("span"),f(Oy.$$.fragment),Bcr=l(),Vue=a("span"),Pcr=o("TFAutoModelForMaskedLM"),fPe=l(),Er=a("div"),f(Vy.$$.fragment),$cr=l(),Ac=a("p"),Icr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uX=a("a"),qcr=o("from_pretrained()"),Ncr=o(" class method or the "),bX=a("a"),jcr=o("from_config()"),Dcr=o(` class
method.`),Gcr=l(),Xy=a("p"),Ocr=o("This class cannot be instantiated directly using "),Xue=a("code"),Vcr=o("__init__()"),Xcr=o(" (throws an error)."),zcr=l(),ut=a("div"),f(zy.$$.fragment),Qcr=l(),zue=a("p"),Wcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hcr=l(),yc=a("p"),Ucr=o(`Note:
Loading a model from its configuration file does `),Que=a("strong"),Jcr=o("not"),Ycr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),Kcr=o("from_pretrained()"),Zcr=o(" to load the model weights."),efr=l(),Wue=a("p"),ofr=o("Examples:"),rfr=l(),f(Qy.$$.fragment),tfr=l(),vo=a("div"),f(Wy.$$.fragment),afr=l(),Hue=a("p"),nfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sfr=l(),Tn=a("p"),lfr=o("The model class to instantiate is selected based on the "),Uue=a("code"),ifr=o("model_type"),dfr=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),cfr=o("pretrained_model_name_or_path"),ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),mfr=o("pretrained_model_name_or_path"),gfr=o(":"),hfr=l(),Y=a("ul"),mF=a("li"),Kue=a("strong"),pfr=o("albert"),_fr=o(" \u2014 "),FX=a("a"),ufr=o("TFAlbertForMaskedLM"),bfr=o(" (ALBERT model)"),vfr=l(),gF=a("li"),Zue=a("strong"),Ffr=o("bert"),Tfr=o(" \u2014 "),TX=a("a"),Mfr=o("TFBertForMaskedLM"),Efr=o(" (BERT model)"),Cfr=l(),hF=a("li"),e6e=a("strong"),wfr=o("camembert"),Afr=o(" \u2014 "),MX=a("a"),yfr=o("TFCamembertForMaskedLM"),Lfr=o(" (CamemBERT model)"),xfr=l(),pF=a("li"),o6e=a("strong"),kfr=o("convbert"),Sfr=o(" \u2014 "),EX=a("a"),Rfr=o("TFConvBertForMaskedLM"),Bfr=o(" (ConvBERT model)"),Pfr=l(),_F=a("li"),r6e=a("strong"),$fr=o("deberta"),Ifr=o(" \u2014 "),CX=a("a"),qfr=o("TFDebertaForMaskedLM"),Nfr=o(" (DeBERTa model)"),jfr=l(),uF=a("li"),t6e=a("strong"),Dfr=o("deberta-v2"),Gfr=o(" \u2014 "),wX=a("a"),Ofr=o("TFDebertaV2ForMaskedLM"),Vfr=o(" (DeBERTa-v2 model)"),Xfr=l(),bF=a("li"),a6e=a("strong"),zfr=o("distilbert"),Qfr=o(" \u2014 "),AX=a("a"),Wfr=o("TFDistilBertForMaskedLM"),Hfr=o(" (DistilBERT model)"),Ufr=l(),vF=a("li"),n6e=a("strong"),Jfr=o("electra"),Yfr=o(" \u2014 "),yX=a("a"),Kfr=o("TFElectraForMaskedLM"),Zfr=o(" (ELECTRA model)"),emr=l(),FF=a("li"),s6e=a("strong"),omr=o("flaubert"),rmr=o(" \u2014 "),LX=a("a"),tmr=o("TFFlaubertWithLMHeadModel"),amr=o(" (FlauBERT model)"),nmr=l(),TF=a("li"),l6e=a("strong"),smr=o("funnel"),lmr=o(" \u2014 "),xX=a("a"),imr=o("TFFunnelForMaskedLM"),dmr=o(" (Funnel Transformer model)"),cmr=l(),MF=a("li"),i6e=a("strong"),fmr=o("layoutlm"),mmr=o(" \u2014 "),kX=a("a"),gmr=o("TFLayoutLMForMaskedLM"),hmr=o(" (LayoutLM model)"),pmr=l(),EF=a("li"),d6e=a("strong"),_mr=o("longformer"),umr=o(" \u2014 "),SX=a("a"),bmr=o("TFLongformerForMaskedLM"),vmr=o(" (Longformer model)"),Fmr=l(),CF=a("li"),c6e=a("strong"),Tmr=o("mobilebert"),Mmr=o(" \u2014 "),RX=a("a"),Emr=o("TFMobileBertForMaskedLM"),Cmr=o(" (MobileBERT model)"),wmr=l(),wF=a("li"),f6e=a("strong"),Amr=o("mpnet"),ymr=o(" \u2014 "),BX=a("a"),Lmr=o("TFMPNetForMaskedLM"),xmr=o(" (MPNet model)"),kmr=l(),AF=a("li"),m6e=a("strong"),Smr=o("rembert"),Rmr=o(" \u2014 "),PX=a("a"),Bmr=o("TFRemBertForMaskedLM"),Pmr=o(" (RemBERT model)"),$mr=l(),yF=a("li"),g6e=a("strong"),Imr=o("roberta"),qmr=o(" \u2014 "),$X=a("a"),Nmr=o("TFRobertaForMaskedLM"),jmr=o(" (RoBERTa model)"),Dmr=l(),LF=a("li"),h6e=a("strong"),Gmr=o("roformer"),Omr=o(" \u2014 "),IX=a("a"),Vmr=o("TFRoFormerForMaskedLM"),Xmr=o(" (RoFormer model)"),zmr=l(),xF=a("li"),p6e=a("strong"),Qmr=o("tapas"),Wmr=o(" \u2014 "),qX=a("a"),Hmr=o("TFTapasForMaskedLM"),Umr=o(" (TAPAS model)"),Jmr=l(),kF=a("li"),_6e=a("strong"),Ymr=o("xlm"),Kmr=o(" \u2014 "),NX=a("a"),Zmr=o("TFXLMWithLMHeadModel"),egr=o(" (XLM model)"),ogr=l(),SF=a("li"),u6e=a("strong"),rgr=o("xlm-roberta"),tgr=o(" \u2014 "),jX=a("a"),agr=o("TFXLMRobertaForMaskedLM"),ngr=o(" (XLM-RoBERTa model)"),sgr=l(),b6e=a("p"),lgr=o("Examples:"),igr=l(),f(Hy.$$.fragment),mPe=l(),Lc=a("h2"),RF=a("a"),v6e=a("span"),f(Uy.$$.fragment),dgr=l(),F6e=a("span"),cgr=o("TFAutoModelForSeq2SeqLM"),gPe=l(),Cr=a("div"),f(Jy.$$.fragment),fgr=l(),xc=a("p"),mgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DX=a("a"),ggr=o("from_pretrained()"),hgr=o(" class method or the "),GX=a("a"),pgr=o("from_config()"),_gr=o(` class
method.`),ugr=l(),Yy=a("p"),bgr=o("This class cannot be instantiated directly using "),T6e=a("code"),vgr=o("__init__()"),Fgr=o(" (throws an error)."),Tgr=l(),bt=a("div"),f(Ky.$$.fragment),Mgr=l(),M6e=a("p"),Egr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Cgr=l(),kc=a("p"),wgr=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),Agr=o("not"),ygr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),Lgr=o("from_pretrained()"),xgr=o(" to load the model weights."),kgr=l(),C6e=a("p"),Sgr=o("Examples:"),Rgr=l(),f(Zy.$$.fragment),Bgr=l(),Fo=a("div"),f(eL.$$.fragment),Pgr=l(),w6e=a("p"),$gr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Igr=l(),Mn=a("p"),qgr=o("The model class to instantiate is selected based on the "),A6e=a("code"),Ngr=o("model_type"),jgr=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),Dgr=o("pretrained_model_name_or_path"),Ggr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),Ogr=o("pretrained_model_name_or_path"),Vgr=o(":"),Xgr=l(),be=a("ul"),BF=a("li"),x6e=a("strong"),zgr=o("bart"),Qgr=o(" \u2014 "),VX=a("a"),Wgr=o("TFBartForConditionalGeneration"),Hgr=o(" (BART model)"),Ugr=l(),PF=a("li"),k6e=a("strong"),Jgr=o("blenderbot"),Ygr=o(" \u2014 "),XX=a("a"),Kgr=o("TFBlenderbotForConditionalGeneration"),Zgr=o(" (Blenderbot model)"),ehr=l(),$F=a("li"),S6e=a("strong"),ohr=o("blenderbot-small"),rhr=o(" \u2014 "),zX=a("a"),thr=o("TFBlenderbotSmallForConditionalGeneration"),ahr=o(" (BlenderbotSmall model)"),nhr=l(),IF=a("li"),R6e=a("strong"),shr=o("encoder-decoder"),lhr=o(" \u2014 "),QX=a("a"),ihr=o("TFEncoderDecoderModel"),dhr=o(" (Encoder decoder model)"),chr=l(),qF=a("li"),B6e=a("strong"),fhr=o("led"),mhr=o(" \u2014 "),WX=a("a"),ghr=o("TFLEDForConditionalGeneration"),hhr=o(" (LED model)"),phr=l(),NF=a("li"),P6e=a("strong"),_hr=o("marian"),uhr=o(" \u2014 "),HX=a("a"),bhr=o("TFMarianMTModel"),vhr=o(" (Marian model)"),Fhr=l(),jF=a("li"),$6e=a("strong"),Thr=o("mbart"),Mhr=o(" \u2014 "),UX=a("a"),Ehr=o("TFMBartForConditionalGeneration"),Chr=o(" (mBART model)"),whr=l(),DF=a("li"),I6e=a("strong"),Ahr=o("mt5"),yhr=o(" \u2014 "),JX=a("a"),Lhr=o("TFMT5ForConditionalGeneration"),xhr=o(" (mT5 model)"),khr=l(),GF=a("li"),q6e=a("strong"),Shr=o("pegasus"),Rhr=o(" \u2014 "),YX=a("a"),Bhr=o("TFPegasusForConditionalGeneration"),Phr=o(" (Pegasus model)"),$hr=l(),OF=a("li"),N6e=a("strong"),Ihr=o("t5"),qhr=o(" \u2014 "),KX=a("a"),Nhr=o("TFT5ForConditionalGeneration"),jhr=o(" (T5 model)"),Dhr=l(),j6e=a("p"),Ghr=o("Examples:"),Ohr=l(),f(oL.$$.fragment),hPe=l(),Sc=a("h2"),VF=a("a"),D6e=a("span"),f(rL.$$.fragment),Vhr=l(),G6e=a("span"),Xhr=o("TFAutoModelForSequenceClassification"),pPe=l(),wr=a("div"),f(tL.$$.fragment),zhr=l(),Rc=a("p"),Qhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZX=a("a"),Whr=o("from_pretrained()"),Hhr=o(" class method or the "),ez=a("a"),Uhr=o("from_config()"),Jhr=o(` class
method.`),Yhr=l(),aL=a("p"),Khr=o("This class cannot be instantiated directly using "),O6e=a("code"),Zhr=o("__init__()"),epr=o(" (throws an error)."),opr=l(),vt=a("div"),f(nL.$$.fragment),rpr=l(),V6e=a("p"),tpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),apr=l(),Bc=a("p"),npr=o(`Note:
Loading a model from its configuration file does `),X6e=a("strong"),spr=o("not"),lpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),ipr=o("from_pretrained()"),dpr=o(" to load the model weights."),cpr=l(),z6e=a("p"),fpr=o("Examples:"),mpr=l(),f(sL.$$.fragment),gpr=l(),To=a("div"),f(lL.$$.fragment),hpr=l(),Q6e=a("p"),ppr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),_pr=l(),En=a("p"),upr=o("The model class to instantiate is selected based on the "),W6e=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),H6e=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),V=a("ul"),XF=a("li"),J6e=a("strong"),wpr=o("albert"),Apr=o(" \u2014 "),rz=a("a"),ypr=o("TFAlbertForSequenceClassification"),Lpr=o(" (ALBERT model)"),xpr=l(),zF=a("li"),Y6e=a("strong"),kpr=o("bert"),Spr=o(" \u2014 "),tz=a("a"),Rpr=o("TFBertForSequenceClassification"),Bpr=o(" (BERT model)"),Ppr=l(),QF=a("li"),K6e=a("strong"),$pr=o("camembert"),Ipr=o(" \u2014 "),az=a("a"),qpr=o("TFCamembertForSequenceClassification"),Npr=o(" (CamemBERT model)"),jpr=l(),WF=a("li"),Z6e=a("strong"),Dpr=o("convbert"),Gpr=o(" \u2014 "),nz=a("a"),Opr=o("TFConvBertForSequenceClassification"),Vpr=o(" (ConvBERT model)"),Xpr=l(),HF=a("li"),e1e=a("strong"),zpr=o("ctrl"),Qpr=o(" \u2014 "),sz=a("a"),Wpr=o("TFCTRLForSequenceClassification"),Hpr=o(" (CTRL model)"),Upr=l(),UF=a("li"),o1e=a("strong"),Jpr=o("deberta"),Ypr=o(" \u2014 "),lz=a("a"),Kpr=o("TFDebertaForSequenceClassification"),Zpr=o(" (DeBERTa model)"),e_r=l(),JF=a("li"),r1e=a("strong"),o_r=o("deberta-v2"),r_r=o(" \u2014 "),iz=a("a"),t_r=o("TFDebertaV2ForSequenceClassification"),a_r=o(" (DeBERTa-v2 model)"),n_r=l(),YF=a("li"),t1e=a("strong"),s_r=o("distilbert"),l_r=o(" \u2014 "),dz=a("a"),i_r=o("TFDistilBertForSequenceClassification"),d_r=o(" (DistilBERT model)"),c_r=l(),KF=a("li"),a1e=a("strong"),f_r=o("electra"),m_r=o(" \u2014 "),cz=a("a"),g_r=o("TFElectraForSequenceClassification"),h_r=o(" (ELECTRA model)"),p_r=l(),ZF=a("li"),n1e=a("strong"),__r=o("flaubert"),u_r=o(" \u2014 "),fz=a("a"),b_r=o("TFFlaubertForSequenceClassification"),v_r=o(" (FlauBERT model)"),F_r=l(),eT=a("li"),s1e=a("strong"),T_r=o("funnel"),M_r=o(" \u2014 "),mz=a("a"),E_r=o("TFFunnelForSequenceClassification"),C_r=o(" (Funnel Transformer model)"),w_r=l(),oT=a("li"),l1e=a("strong"),A_r=o("gpt2"),y_r=o(" \u2014 "),gz=a("a"),L_r=o("TFGPT2ForSequenceClassification"),x_r=o(" (OpenAI GPT-2 model)"),k_r=l(),rT=a("li"),i1e=a("strong"),S_r=o("gptj"),R_r=o(" \u2014 "),hz=a("a"),B_r=o("TFGPTJForSequenceClassification"),P_r=o(" (GPT-J model)"),$_r=l(),tT=a("li"),d1e=a("strong"),I_r=o("layoutlm"),q_r=o(" \u2014 "),pz=a("a"),N_r=o("TFLayoutLMForSequenceClassification"),j_r=o(" (LayoutLM model)"),D_r=l(),aT=a("li"),c1e=a("strong"),G_r=o("longformer"),O_r=o(" \u2014 "),_z=a("a"),V_r=o("TFLongformerForSequenceClassification"),X_r=o(" (Longformer model)"),z_r=l(),nT=a("li"),f1e=a("strong"),Q_r=o("mobilebert"),W_r=o(" \u2014 "),uz=a("a"),H_r=o("TFMobileBertForSequenceClassification"),U_r=o(" (MobileBERT model)"),J_r=l(),sT=a("li"),m1e=a("strong"),Y_r=o("mpnet"),K_r=o(" \u2014 "),bz=a("a"),Z_r=o("TFMPNetForSequenceClassification"),eur=o(" (MPNet model)"),our=l(),lT=a("li"),g1e=a("strong"),rur=o("openai-gpt"),tur=o(" \u2014 "),vz=a("a"),aur=o("TFOpenAIGPTForSequenceClassification"),nur=o(" (OpenAI GPT model)"),sur=l(),iT=a("li"),h1e=a("strong"),lur=o("rembert"),iur=o(" \u2014 "),Fz=a("a"),dur=o("TFRemBertForSequenceClassification"),cur=o(" (RemBERT model)"),fur=l(),dT=a("li"),p1e=a("strong"),mur=o("roberta"),gur=o(" \u2014 "),Tz=a("a"),hur=o("TFRobertaForSequenceClassification"),pur=o(" (RoBERTa model)"),_ur=l(),cT=a("li"),_1e=a("strong"),uur=o("roformer"),bur=o(" \u2014 "),Mz=a("a"),vur=o("TFRoFormerForSequenceClassification"),Fur=o(" (RoFormer model)"),Tur=l(),fT=a("li"),u1e=a("strong"),Mur=o("tapas"),Eur=o(" \u2014 "),Ez=a("a"),Cur=o("TFTapasForSequenceClassification"),wur=o(" (TAPAS model)"),Aur=l(),mT=a("li"),b1e=a("strong"),yur=o("transfo-xl"),Lur=o(" \u2014 "),Cz=a("a"),xur=o("TFTransfoXLForSequenceClassification"),kur=o(" (Transformer-XL model)"),Sur=l(),gT=a("li"),v1e=a("strong"),Rur=o("xlm"),Bur=o(" \u2014 "),wz=a("a"),Pur=o("TFXLMForSequenceClassification"),$ur=o(" (XLM model)"),Iur=l(),hT=a("li"),F1e=a("strong"),qur=o("xlm-roberta"),Nur=o(" \u2014 "),Az=a("a"),jur=o("TFXLMRobertaForSequenceClassification"),Dur=o(" (XLM-RoBERTa model)"),Gur=l(),pT=a("li"),T1e=a("strong"),Our=o("xlnet"),Vur=o(" \u2014 "),yz=a("a"),Xur=o("TFXLNetForSequenceClassification"),zur=o(" (XLNet model)"),Qur=l(),M1e=a("p"),Wur=o("Examples:"),Hur=l(),f(iL.$$.fragment),_Pe=l(),Pc=a("h2"),_T=a("a"),E1e=a("span"),f(dL.$$.fragment),Uur=l(),C1e=a("span"),Jur=o("TFAutoModelForMultipleChoice"),uPe=l(),Ar=a("div"),f(cL.$$.fragment),Yur=l(),$c=a("p"),Kur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Lz=a("a"),Zur=o("from_pretrained()"),e6r=o(" class method or the "),xz=a("a"),o6r=o("from_config()"),r6r=o(` class
method.`),t6r=l(),fL=a("p"),a6r=o("This class cannot be instantiated directly using "),w1e=a("code"),n6r=o("__init__()"),s6r=o(" (throws an error)."),l6r=l(),Ft=a("div"),f(mL.$$.fragment),i6r=l(),A1e=a("p"),d6r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),c6r=l(),Ic=a("p"),f6r=o(`Note:
Loading a model from its configuration file does `),y1e=a("strong"),m6r=o("not"),g6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),h6r=o("from_pretrained()"),p6r=o(" to load the model weights."),_6r=l(),L1e=a("p"),u6r=o("Examples:"),b6r=l(),f(gL.$$.fragment),v6r=l(),Mo=a("div"),f(hL.$$.fragment),F6r=l(),x1e=a("p"),T6r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M6r=l(),Cn=a("p"),E6r=o("The model class to instantiate is selected based on the "),k1e=a("code"),C6r=o("model_type"),w6r=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),A6r=o("pretrained_model_name_or_path"),y6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),L6r=o("pretrained_model_name_or_path"),x6r=o(":"),k6r=l(),se=a("ul"),uT=a("li"),B1e=a("strong"),S6r=o("albert"),R6r=o(" \u2014 "),Sz=a("a"),B6r=o("TFAlbertForMultipleChoice"),P6r=o(" (ALBERT model)"),$6r=l(),bT=a("li"),P1e=a("strong"),I6r=o("bert"),q6r=o(" \u2014 "),Rz=a("a"),N6r=o("TFBertForMultipleChoice"),j6r=o(" (BERT model)"),D6r=l(),vT=a("li"),$1e=a("strong"),G6r=o("camembert"),O6r=o(" \u2014 "),Bz=a("a"),V6r=o("TFCamembertForMultipleChoice"),X6r=o(" (CamemBERT model)"),z6r=l(),FT=a("li"),I1e=a("strong"),Q6r=o("convbert"),W6r=o(" \u2014 "),Pz=a("a"),H6r=o("TFConvBertForMultipleChoice"),U6r=o(" (ConvBERT model)"),J6r=l(),TT=a("li"),q1e=a("strong"),Y6r=o("distilbert"),K6r=o(" \u2014 "),$z=a("a"),Z6r=o("TFDistilBertForMultipleChoice"),e1r=o(" (DistilBERT model)"),o1r=l(),MT=a("li"),N1e=a("strong"),r1r=o("electra"),t1r=o(" \u2014 "),Iz=a("a"),a1r=o("TFElectraForMultipleChoice"),n1r=o(" (ELECTRA model)"),s1r=l(),ET=a("li"),j1e=a("strong"),l1r=o("flaubert"),i1r=o(" \u2014 "),qz=a("a"),d1r=o("TFFlaubertForMultipleChoice"),c1r=o(" (FlauBERT model)"),f1r=l(),CT=a("li"),D1e=a("strong"),m1r=o("funnel"),g1r=o(" \u2014 "),Nz=a("a"),h1r=o("TFFunnelForMultipleChoice"),p1r=o(" (Funnel Transformer model)"),_1r=l(),wT=a("li"),G1e=a("strong"),u1r=o("longformer"),b1r=o(" \u2014 "),jz=a("a"),v1r=o("TFLongformerForMultipleChoice"),F1r=o(" (Longformer model)"),T1r=l(),AT=a("li"),O1e=a("strong"),M1r=o("mobilebert"),E1r=o(" \u2014 "),Dz=a("a"),C1r=o("TFMobileBertForMultipleChoice"),w1r=o(" (MobileBERT model)"),A1r=l(),yT=a("li"),V1e=a("strong"),y1r=o("mpnet"),L1r=o(" \u2014 "),Gz=a("a"),x1r=o("TFMPNetForMultipleChoice"),k1r=o(" (MPNet model)"),S1r=l(),LT=a("li"),X1e=a("strong"),R1r=o("rembert"),B1r=o(" \u2014 "),Oz=a("a"),P1r=o("TFRemBertForMultipleChoice"),$1r=o(" (RemBERT model)"),I1r=l(),xT=a("li"),z1e=a("strong"),q1r=o("roberta"),N1r=o(" \u2014 "),Vz=a("a"),j1r=o("TFRobertaForMultipleChoice"),D1r=o(" (RoBERTa model)"),G1r=l(),kT=a("li"),Q1e=a("strong"),O1r=o("roformer"),V1r=o(" \u2014 "),Xz=a("a"),X1r=o("TFRoFormerForMultipleChoice"),z1r=o(" (RoFormer model)"),Q1r=l(),ST=a("li"),W1e=a("strong"),W1r=o("xlm"),H1r=o(" \u2014 "),zz=a("a"),U1r=o("TFXLMForMultipleChoice"),J1r=o(" (XLM model)"),Y1r=l(),RT=a("li"),H1e=a("strong"),K1r=o("xlm-roberta"),Z1r=o(" \u2014 "),Qz=a("a"),e4r=o("TFXLMRobertaForMultipleChoice"),o4r=o(" (XLM-RoBERTa model)"),r4r=l(),BT=a("li"),U1e=a("strong"),t4r=o("xlnet"),a4r=o(" \u2014 "),Wz=a("a"),n4r=o("TFXLNetForMultipleChoice"),s4r=o(" (XLNet model)"),l4r=l(),J1e=a("p"),i4r=o("Examples:"),d4r=l(),f(pL.$$.fragment),bPe=l(),qc=a("h2"),PT=a("a"),Y1e=a("span"),f(_L.$$.fragment),c4r=l(),K1e=a("span"),f4r=o("TFAutoModelForTableQuestionAnswering"),vPe=l(),yr=a("div"),f(uL.$$.fragment),m4r=l(),Nc=a("p"),g4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Hz=a("a"),h4r=o("from_pretrained()"),p4r=o(" class method or the "),Uz=a("a"),_4r=o("from_config()"),u4r=o(` class
method.`),b4r=l(),bL=a("p"),v4r=o("This class cannot be instantiated directly using "),Z1e=a("code"),F4r=o("__init__()"),T4r=o(" (throws an error)."),M4r=l(),Tt=a("div"),f(vL.$$.fragment),E4r=l(),e4e=a("p"),C4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w4r=l(),jc=a("p"),A4r=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),y4r=o("not"),L4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),x4r=o("from_pretrained()"),k4r=o(" to load the model weights."),S4r=l(),r4e=a("p"),R4r=o("Examples:"),B4r=l(),f(FL.$$.fragment),P4r=l(),Eo=a("div"),f(TL.$$.fragment),$4r=l(),t4e=a("p"),I4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q4r=l(),wn=a("p"),N4r=o("The model class to instantiate is selected based on the "),a4e=a("code"),j4r=o("model_type"),D4r=o(` property of the config object (either
passed as an argument or loaded from `),n4e=a("code"),G4r=o("pretrained_model_name_or_path"),O4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=a("code"),V4r=o("pretrained_model_name_or_path"),X4r=o(":"),z4r=l(),l4e=a("ul"),$T=a("li"),i4e=a("strong"),Q4r=o("tapas"),W4r=o(" \u2014 "),Yz=a("a"),H4r=o("TFTapasForQuestionAnswering"),U4r=o(" (TAPAS model)"),J4r=l(),d4e=a("p"),Y4r=o("Examples:"),K4r=l(),f(ML.$$.fragment),FPe=l(),Dc=a("h2"),IT=a("a"),c4e=a("span"),f(EL.$$.fragment),Z4r=l(),f4e=a("span"),ebr=o("TFAutoModelForTokenClassification"),TPe=l(),Lr=a("div"),f(CL.$$.fragment),obr=l(),Gc=a("p"),rbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Kz=a("a"),tbr=o("from_pretrained()"),abr=o(" class method or the "),Zz=a("a"),nbr=o("from_config()"),sbr=o(` class
method.`),lbr=l(),wL=a("p"),ibr=o("This class cannot be instantiated directly using "),m4e=a("code"),dbr=o("__init__()"),cbr=o(" (throws an error)."),fbr=l(),Mt=a("div"),f(AL.$$.fragment),mbr=l(),g4e=a("p"),gbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hbr=l(),Oc=a("p"),pbr=o(`Note:
Loading a model from its configuration file does `),h4e=a("strong"),_br=o("not"),ubr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=a("a"),bbr=o("from_pretrained()"),vbr=o(" to load the model weights."),Fbr=l(),p4e=a("p"),Tbr=o("Examples:"),Mbr=l(),f(yL.$$.fragment),Ebr=l(),Co=a("div"),f(LL.$$.fragment),Cbr=l(),_4e=a("p"),wbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Abr=l(),An=a("p"),ybr=o("The model class to instantiate is selected based on the "),u4e=a("code"),Lbr=o("model_type"),xbr=o(` property of the config object (either
passed as an argument or loaded from `),b4e=a("code"),kbr=o("pretrained_model_name_or_path"),Sbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=a("code"),Rbr=o("pretrained_model_name_or_path"),Bbr=o(":"),Pbr=l(),K=a("ul"),qT=a("li"),F4e=a("strong"),$br=o("albert"),Ibr=o(" \u2014 "),oQ=a("a"),qbr=o("TFAlbertForTokenClassification"),Nbr=o(" (ALBERT model)"),jbr=l(),NT=a("li"),T4e=a("strong"),Dbr=o("bert"),Gbr=o(" \u2014 "),rQ=a("a"),Obr=o("TFBertForTokenClassification"),Vbr=o(" (BERT model)"),Xbr=l(),jT=a("li"),M4e=a("strong"),zbr=o("camembert"),Qbr=o(" \u2014 "),tQ=a("a"),Wbr=o("TFCamembertForTokenClassification"),Hbr=o(" (CamemBERT model)"),Ubr=l(),DT=a("li"),E4e=a("strong"),Jbr=o("convbert"),Ybr=o(" \u2014 "),aQ=a("a"),Kbr=o("TFConvBertForTokenClassification"),Zbr=o(" (ConvBERT model)"),e2r=l(),GT=a("li"),C4e=a("strong"),o2r=o("deberta"),r2r=o(" \u2014 "),nQ=a("a"),t2r=o("TFDebertaForTokenClassification"),a2r=o(" (DeBERTa model)"),n2r=l(),OT=a("li"),w4e=a("strong"),s2r=o("deberta-v2"),l2r=o(" \u2014 "),sQ=a("a"),i2r=o("TFDebertaV2ForTokenClassification"),d2r=o(" (DeBERTa-v2 model)"),c2r=l(),VT=a("li"),A4e=a("strong"),f2r=o("distilbert"),m2r=o(" \u2014 "),lQ=a("a"),g2r=o("TFDistilBertForTokenClassification"),h2r=o(" (DistilBERT model)"),p2r=l(),XT=a("li"),y4e=a("strong"),_2r=o("electra"),u2r=o(" \u2014 "),iQ=a("a"),b2r=o("TFElectraForTokenClassification"),v2r=o(" (ELECTRA model)"),F2r=l(),zT=a("li"),L4e=a("strong"),T2r=o("flaubert"),M2r=o(" \u2014 "),dQ=a("a"),E2r=o("TFFlaubertForTokenClassification"),C2r=o(" (FlauBERT model)"),w2r=l(),QT=a("li"),x4e=a("strong"),A2r=o("funnel"),y2r=o(" \u2014 "),cQ=a("a"),L2r=o("TFFunnelForTokenClassification"),x2r=o(" (Funnel Transformer model)"),k2r=l(),WT=a("li"),k4e=a("strong"),S2r=o("layoutlm"),R2r=o(" \u2014 "),fQ=a("a"),B2r=o("TFLayoutLMForTokenClassification"),P2r=o(" (LayoutLM model)"),$2r=l(),HT=a("li"),S4e=a("strong"),I2r=o("longformer"),q2r=o(" \u2014 "),mQ=a("a"),N2r=o("TFLongformerForTokenClassification"),j2r=o(" (Longformer model)"),D2r=l(),UT=a("li"),R4e=a("strong"),G2r=o("mobilebert"),O2r=o(" \u2014 "),gQ=a("a"),V2r=o("TFMobileBertForTokenClassification"),X2r=o(" (MobileBERT model)"),z2r=l(),JT=a("li"),B4e=a("strong"),Q2r=o("mpnet"),W2r=o(" \u2014 "),hQ=a("a"),H2r=o("TFMPNetForTokenClassification"),U2r=o(" (MPNet model)"),J2r=l(),YT=a("li"),P4e=a("strong"),Y2r=o("rembert"),K2r=o(" \u2014 "),pQ=a("a"),Z2r=o("TFRemBertForTokenClassification"),e5r=o(" (RemBERT model)"),o5r=l(),KT=a("li"),$4e=a("strong"),r5r=o("roberta"),t5r=o(" \u2014 "),_Q=a("a"),a5r=o("TFRobertaForTokenClassification"),n5r=o(" (RoBERTa model)"),s5r=l(),ZT=a("li"),I4e=a("strong"),l5r=o("roformer"),i5r=o(" \u2014 "),uQ=a("a"),d5r=o("TFRoFormerForTokenClassification"),c5r=o(" (RoFormer model)"),f5r=l(),eM=a("li"),q4e=a("strong"),m5r=o("xlm"),g5r=o(" \u2014 "),bQ=a("a"),h5r=o("TFXLMForTokenClassification"),p5r=o(" (XLM model)"),_5r=l(),oM=a("li"),N4e=a("strong"),u5r=o("xlm-roberta"),b5r=o(" \u2014 "),vQ=a("a"),v5r=o("TFXLMRobertaForTokenClassification"),F5r=o(" (XLM-RoBERTa model)"),T5r=l(),rM=a("li"),j4e=a("strong"),M5r=o("xlnet"),E5r=o(" \u2014 "),FQ=a("a"),C5r=o("TFXLNetForTokenClassification"),w5r=o(" (XLNet model)"),A5r=l(),D4e=a("p"),y5r=o("Examples:"),L5r=l(),f(xL.$$.fragment),MPe=l(),Vc=a("h2"),tM=a("a"),G4e=a("span"),f(kL.$$.fragment),x5r=l(),O4e=a("span"),k5r=o("TFAutoModelForQuestionAnswering"),EPe=l(),xr=a("div"),f(SL.$$.fragment),S5r=l(),Xc=a("p"),R5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TQ=a("a"),B5r=o("from_pretrained()"),P5r=o(" class method or the "),MQ=a("a"),$5r=o("from_config()"),I5r=o(` class
method.`),q5r=l(),RL=a("p"),N5r=o("This class cannot be instantiated directly using "),V4e=a("code"),j5r=o("__init__()"),D5r=o(" (throws an error)."),G5r=l(),Et=a("div"),f(BL.$$.fragment),O5r=l(),X4e=a("p"),V5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X5r=l(),zc=a("p"),z5r=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),Q5r=o("not"),W5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),H5r=o("from_pretrained()"),U5r=o(" to load the model weights."),J5r=l(),Q4e=a("p"),Y5r=o("Examples:"),K5r=l(),f(PL.$$.fragment),Z5r=l(),wo=a("div"),f($L.$$.fragment),evr=l(),W4e=a("p"),ovr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rvr=l(),yn=a("p"),tvr=o("The model class to instantiate is selected based on the "),H4e=a("code"),avr=o("model_type"),nvr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),svr=o("pretrained_model_name_or_path"),lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),ivr=o("pretrained_model_name_or_path"),dvr=o(":"),cvr=l(),Z=a("ul"),aM=a("li"),Y4e=a("strong"),fvr=o("albert"),mvr=o(" \u2014 "),CQ=a("a"),gvr=o("TFAlbertForQuestionAnswering"),hvr=o(" (ALBERT model)"),pvr=l(),nM=a("li"),K4e=a("strong"),_vr=o("bert"),uvr=o(" \u2014 "),wQ=a("a"),bvr=o("TFBertForQuestionAnswering"),vvr=o(" (BERT model)"),Fvr=l(),sM=a("li"),Z4e=a("strong"),Tvr=o("camembert"),Mvr=o(" \u2014 "),AQ=a("a"),Evr=o("TFCamembertForQuestionAnswering"),Cvr=o(" (CamemBERT model)"),wvr=l(),lM=a("li"),ebe=a("strong"),Avr=o("convbert"),yvr=o(" \u2014 "),yQ=a("a"),Lvr=o("TFConvBertForQuestionAnswering"),xvr=o(" (ConvBERT model)"),kvr=l(),iM=a("li"),obe=a("strong"),Svr=o("deberta"),Rvr=o(" \u2014 "),LQ=a("a"),Bvr=o("TFDebertaForQuestionAnswering"),Pvr=o(" (DeBERTa model)"),$vr=l(),dM=a("li"),rbe=a("strong"),Ivr=o("deberta-v2"),qvr=o(" \u2014 "),xQ=a("a"),Nvr=o("TFDebertaV2ForQuestionAnswering"),jvr=o(" (DeBERTa-v2 model)"),Dvr=l(),cM=a("li"),tbe=a("strong"),Gvr=o("distilbert"),Ovr=o(" \u2014 "),kQ=a("a"),Vvr=o("TFDistilBertForQuestionAnswering"),Xvr=o(" (DistilBERT model)"),zvr=l(),fM=a("li"),abe=a("strong"),Qvr=o("electra"),Wvr=o(" \u2014 "),SQ=a("a"),Hvr=o("TFElectraForQuestionAnswering"),Uvr=o(" (ELECTRA model)"),Jvr=l(),mM=a("li"),nbe=a("strong"),Yvr=o("flaubert"),Kvr=o(" \u2014 "),RQ=a("a"),Zvr=o("TFFlaubertForQuestionAnsweringSimple"),eFr=o(" (FlauBERT model)"),oFr=l(),gM=a("li"),sbe=a("strong"),rFr=o("funnel"),tFr=o(" \u2014 "),BQ=a("a"),aFr=o("TFFunnelForQuestionAnswering"),nFr=o(" (Funnel Transformer model)"),sFr=l(),hM=a("li"),lbe=a("strong"),lFr=o("gptj"),iFr=o(" \u2014 "),PQ=a("a"),dFr=o("TFGPTJForQuestionAnswering"),cFr=o(" (GPT-J model)"),fFr=l(),pM=a("li"),ibe=a("strong"),mFr=o("longformer"),gFr=o(" \u2014 "),$Q=a("a"),hFr=o("TFLongformerForQuestionAnswering"),pFr=o(" (Longformer model)"),_Fr=l(),_M=a("li"),dbe=a("strong"),uFr=o("mobilebert"),bFr=o(" \u2014 "),IQ=a("a"),vFr=o("TFMobileBertForQuestionAnswering"),FFr=o(" (MobileBERT model)"),TFr=l(),uM=a("li"),cbe=a("strong"),MFr=o("mpnet"),EFr=o(" \u2014 "),qQ=a("a"),CFr=o("TFMPNetForQuestionAnswering"),wFr=o(" (MPNet model)"),AFr=l(),bM=a("li"),fbe=a("strong"),yFr=o("rembert"),LFr=o(" \u2014 "),NQ=a("a"),xFr=o("TFRemBertForQuestionAnswering"),kFr=o(" (RemBERT model)"),SFr=l(),vM=a("li"),mbe=a("strong"),RFr=o("roberta"),BFr=o(" \u2014 "),jQ=a("a"),PFr=o("TFRobertaForQuestionAnswering"),$Fr=o(" (RoBERTa model)"),IFr=l(),FM=a("li"),gbe=a("strong"),qFr=o("roformer"),NFr=o(" \u2014 "),DQ=a("a"),jFr=o("TFRoFormerForQuestionAnswering"),DFr=o(" (RoFormer model)"),GFr=l(),TM=a("li"),hbe=a("strong"),OFr=o("xlm"),VFr=o(" \u2014 "),GQ=a("a"),XFr=o("TFXLMForQuestionAnsweringSimple"),zFr=o(" (XLM model)"),QFr=l(),MM=a("li"),pbe=a("strong"),WFr=o("xlm-roberta"),HFr=o(" \u2014 "),OQ=a("a"),UFr=o("TFXLMRobertaForQuestionAnswering"),JFr=o(" (XLM-RoBERTa model)"),YFr=l(),EM=a("li"),_be=a("strong"),KFr=o("xlnet"),ZFr=o(" \u2014 "),VQ=a("a"),eTr=o("TFXLNetForQuestionAnsweringSimple"),oTr=o(" (XLNet model)"),rTr=l(),ube=a("p"),tTr=o("Examples:"),aTr=l(),f(IL.$$.fragment),CPe=l(),Qc=a("h2"),CM=a("a"),bbe=a("span"),f(qL.$$.fragment),nTr=l(),vbe=a("span"),sTr=o("TFAutoModelForVision2Seq"),wPe=l(),kr=a("div"),f(NL.$$.fragment),lTr=l(),Wc=a("p"),iTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XQ=a("a"),dTr=o("from_pretrained()"),cTr=o(" class method or the "),zQ=a("a"),fTr=o("from_config()"),mTr=o(` class
method.`),gTr=l(),jL=a("p"),hTr=o("This class cannot be instantiated directly using "),Fbe=a("code"),pTr=o("__init__()"),_Tr=o(" (throws an error)."),uTr=l(),Ct=a("div"),f(DL.$$.fragment),bTr=l(),Tbe=a("p"),vTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FTr=l(),Hc=a("p"),TTr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),MTr=o("not"),ETr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),CTr=o("from_pretrained()"),wTr=o(" to load the model weights."),ATr=l(),Ebe=a("p"),yTr=o("Examples:"),LTr=l(),f(GL.$$.fragment),xTr=l(),Ao=a("div"),f(OL.$$.fragment),kTr=l(),Cbe=a("p"),STr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RTr=l(),Ln=a("p"),BTr=o("The model class to instantiate is selected based on the "),wbe=a("code"),PTr=o("model_type"),$Tr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),ITr=o("pretrained_model_name_or_path"),qTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),NTr=o("pretrained_model_name_or_path"),jTr=o(":"),DTr=l(),Lbe=a("ul"),wM=a("li"),xbe=a("strong"),GTr=o("vision-encoder-decoder"),OTr=o(" \u2014 "),WQ=a("a"),VTr=o("TFVisionEncoderDecoderModel"),XTr=o(" (Vision Encoder decoder model)"),zTr=l(),kbe=a("p"),QTr=o("Examples:"),WTr=l(),f(VL.$$.fragment),APe=l(),Uc=a("h2"),AM=a("a"),Sbe=a("span"),f(XL.$$.fragment),HTr=l(),Rbe=a("span"),UTr=o("TFAutoModelForSpeechSeq2Seq"),yPe=l(),Sr=a("div"),f(zL.$$.fragment),JTr=l(),Jc=a("p"),YTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HQ=a("a"),KTr=o("from_pretrained()"),ZTr=o(" class method or the "),UQ=a("a"),eMr=o("from_config()"),oMr=o(` class
method.`),rMr=l(),QL=a("p"),tMr=o("This class cannot be instantiated directly using "),Bbe=a("code"),aMr=o("__init__()"),nMr=o(" (throws an error)."),sMr=l(),wt=a("div"),f(WL.$$.fragment),lMr=l(),Pbe=a("p"),iMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dMr=l(),Yc=a("p"),cMr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),fMr=o("not"),mMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),gMr=o("from_pretrained()"),hMr=o(" to load the model weights."),pMr=l(),Ibe=a("p"),_Mr=o("Examples:"),uMr=l(),f(HL.$$.fragment),bMr=l(),yo=a("div"),f(UL.$$.fragment),vMr=l(),qbe=a("p"),FMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TMr=l(),xn=a("p"),MMr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),EMr=o("model_type"),CMr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),wMr=o("pretrained_model_name_or_path"),AMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),yMr=o("pretrained_model_name_or_path"),LMr=o(":"),xMr=l(),Gbe=a("ul"),yM=a("li"),Obe=a("strong"),kMr=o("speech_to_text"),SMr=o(" \u2014 "),YQ=a("a"),RMr=o("TFSpeech2TextForConditionalGeneration"),BMr=o(" (Speech2Text model)"),PMr=l(),Vbe=a("p"),$Mr=o("Examples:"),IMr=l(),f(JL.$$.fragment),LPe=l(),Kc=a("h2"),LM=a("a"),Xbe=a("span"),f(YL.$$.fragment),qMr=l(),zbe=a("span"),NMr=o("FlaxAutoModel"),xPe=l(),Rr=a("div"),f(KL.$$.fragment),jMr=l(),Zc=a("p"),DMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KQ=a("a"),GMr=o("from_pretrained()"),OMr=o(" class method or the "),ZQ=a("a"),VMr=o("from_config()"),XMr=o(` class
method.`),zMr=l(),ZL=a("p"),QMr=o("This class cannot be instantiated directly using "),Qbe=a("code"),WMr=o("__init__()"),HMr=o(" (throws an error)."),UMr=l(),At=a("div"),f(e8.$$.fragment),JMr=l(),Wbe=a("p"),YMr=o("Instantiates one of the base model classes of the library from a configuration."),KMr=l(),ef=a("p"),ZMr=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),eEr=o("not"),oEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),rEr=o("from_pretrained()"),tEr=o(" to load the model weights."),aEr=l(),Ube=a("p"),nEr=o("Examples:"),sEr=l(),f(o8.$$.fragment),lEr=l(),Lo=a("div"),f(r8.$$.fragment),iEr=l(),Jbe=a("p"),dEr=o("Instantiate one of the base model classes of the library from a pretrained model."),cEr=l(),kn=a("p"),fEr=o("The model class to instantiate is selected based on the "),Ybe=a("code"),mEr=o("model_type"),gEr=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),hEr=o("pretrained_model_name_or_path"),pEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),_Er=o("pretrained_model_name_or_path"),uEr=o(":"),bEr=l(),z=a("ul"),xM=a("li"),e2e=a("strong"),vEr=o("albert"),FEr=o(" \u2014 "),oW=a("a"),TEr=o("FlaxAlbertModel"),MEr=o(" (ALBERT model)"),EEr=l(),kM=a("li"),o2e=a("strong"),CEr=o("bart"),wEr=o(" \u2014 "),rW=a("a"),AEr=o("FlaxBartModel"),yEr=o(" (BART model)"),LEr=l(),SM=a("li"),r2e=a("strong"),xEr=o("beit"),kEr=o(" \u2014 "),tW=a("a"),SEr=o("FlaxBeitModel"),REr=o(" (BEiT model)"),BEr=l(),RM=a("li"),t2e=a("strong"),PEr=o("bert"),$Er=o(" \u2014 "),aW=a("a"),IEr=o("FlaxBertModel"),qEr=o(" (BERT model)"),NEr=l(),BM=a("li"),a2e=a("strong"),jEr=o("big_bird"),DEr=o(" \u2014 "),nW=a("a"),GEr=o("FlaxBigBirdModel"),OEr=o(" (BigBird model)"),VEr=l(),PM=a("li"),n2e=a("strong"),XEr=o("blenderbot"),zEr=o(" \u2014 "),sW=a("a"),QEr=o("FlaxBlenderbotModel"),WEr=o(" (Blenderbot model)"),HEr=l(),$M=a("li"),s2e=a("strong"),UEr=o("blenderbot-small"),JEr=o(" \u2014 "),lW=a("a"),YEr=o("FlaxBlenderbotSmallModel"),KEr=o(" (BlenderbotSmall model)"),ZEr=l(),IM=a("li"),l2e=a("strong"),e3r=o("clip"),o3r=o(" \u2014 "),iW=a("a"),r3r=o("FlaxCLIPModel"),t3r=o(" (CLIP model)"),a3r=l(),qM=a("li"),i2e=a("strong"),n3r=o("distilbert"),s3r=o(" \u2014 "),dW=a("a"),l3r=o("FlaxDistilBertModel"),i3r=o(" (DistilBERT model)"),d3r=l(),NM=a("li"),d2e=a("strong"),c3r=o("electra"),f3r=o(" \u2014 "),cW=a("a"),m3r=o("FlaxElectraModel"),g3r=o(" (ELECTRA model)"),h3r=l(),jM=a("li"),c2e=a("strong"),p3r=o("gpt2"),_3r=o(" \u2014 "),fW=a("a"),u3r=o("FlaxGPT2Model"),b3r=o(" (OpenAI GPT-2 model)"),v3r=l(),DM=a("li"),f2e=a("strong"),F3r=o("gpt_neo"),T3r=o(" \u2014 "),mW=a("a"),M3r=o("FlaxGPTNeoModel"),E3r=o(" (GPT Neo model)"),C3r=l(),GM=a("li"),m2e=a("strong"),w3r=o("gptj"),A3r=o(" \u2014 "),gW=a("a"),y3r=o("FlaxGPTJModel"),L3r=o(" (GPT-J model)"),x3r=l(),OM=a("li"),g2e=a("strong"),k3r=o("marian"),S3r=o(" \u2014 "),hW=a("a"),R3r=o("FlaxMarianModel"),B3r=o(" (Marian model)"),P3r=l(),VM=a("li"),h2e=a("strong"),$3r=o("mbart"),I3r=o(" \u2014 "),pW=a("a"),q3r=o("FlaxMBartModel"),N3r=o(" (mBART model)"),j3r=l(),XM=a("li"),p2e=a("strong"),D3r=o("mt5"),G3r=o(" \u2014 "),_W=a("a"),O3r=o("FlaxMT5Model"),V3r=o(" (mT5 model)"),X3r=l(),zM=a("li"),_2e=a("strong"),z3r=o("pegasus"),Q3r=o(" \u2014 "),uW=a("a"),W3r=o("FlaxPegasusModel"),H3r=o(" (Pegasus model)"),U3r=l(),QM=a("li"),u2e=a("strong"),J3r=o("roberta"),Y3r=o(" \u2014 "),bW=a("a"),K3r=o("FlaxRobertaModel"),Z3r=o(" (RoBERTa model)"),eCr=l(),WM=a("li"),b2e=a("strong"),oCr=o("roformer"),rCr=o(" \u2014 "),vW=a("a"),tCr=o("FlaxRoFormerModel"),aCr=o(" (RoFormer model)"),nCr=l(),HM=a("li"),v2e=a("strong"),sCr=o("t5"),lCr=o(" \u2014 "),FW=a("a"),iCr=o("FlaxT5Model"),dCr=o(" (T5 model)"),cCr=l(),UM=a("li"),F2e=a("strong"),fCr=o("vision-text-dual-encoder"),mCr=o(" \u2014 "),TW=a("a"),gCr=o("FlaxVisionTextDualEncoderModel"),hCr=o(" (VisionTextDualEncoder model)"),pCr=l(),JM=a("li"),T2e=a("strong"),_Cr=o("vit"),uCr=o(" \u2014 "),MW=a("a"),bCr=o("FlaxViTModel"),vCr=o(" (ViT model)"),FCr=l(),YM=a("li"),M2e=a("strong"),TCr=o("wav2vec2"),MCr=o(" \u2014 "),EW=a("a"),ECr=o("FlaxWav2Vec2Model"),CCr=o(" (Wav2Vec2 model)"),wCr=l(),KM=a("li"),E2e=a("strong"),ACr=o("xglm"),yCr=o(" \u2014 "),CW=a("a"),LCr=o("FlaxXGLMModel"),xCr=o(" (XGLM model)"),kCr=l(),ZM=a("li"),C2e=a("strong"),SCr=o("xlm-roberta"),RCr=o(" \u2014 "),wW=a("a"),BCr=o("FlaxXLMRobertaModel"),PCr=o(" (XLM-RoBERTa model)"),$Cr=l(),w2e=a("p"),ICr=o("Examples:"),qCr=l(),f(t8.$$.fragment),kPe=l(),of=a("h2"),eE=a("a"),A2e=a("span"),f(a8.$$.fragment),NCr=l(),y2e=a("span"),jCr=o("FlaxAutoModelForCausalLM"),SPe=l(),Br=a("div"),f(n8.$$.fragment),DCr=l(),rf=a("p"),GCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AW=a("a"),OCr=o("from_pretrained()"),VCr=o(" class method or the "),yW=a("a"),XCr=o("from_config()"),zCr=o(` class
method.`),QCr=l(),s8=a("p"),WCr=o("This class cannot be instantiated directly using "),L2e=a("code"),HCr=o("__init__()"),UCr=o(" (throws an error)."),JCr=l(),yt=a("div"),f(l8.$$.fragment),YCr=l(),x2e=a("p"),KCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZCr=l(),tf=a("p"),ewr=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),owr=o("not"),rwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=a("a"),twr=o("from_pretrained()"),awr=o(" to load the model weights."),nwr=l(),S2e=a("p"),swr=o("Examples:"),lwr=l(),f(i8.$$.fragment),iwr=l(),xo=a("div"),f(d8.$$.fragment),dwr=l(),R2e=a("p"),cwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fwr=l(),Sn=a("p"),mwr=o("The model class to instantiate is selected based on the "),B2e=a("code"),gwr=o("model_type"),hwr=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),pwr=o("pretrained_model_name_or_path"),_wr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),uwr=o("pretrained_model_name_or_path"),bwr=o(":"),vwr=l(),ca=a("ul"),oE=a("li"),I2e=a("strong"),Fwr=o("bart"),Twr=o(" \u2014 "),xW=a("a"),Mwr=o("FlaxBartForCausalLM"),Ewr=o(" (BART model)"),Cwr=l(),rE=a("li"),q2e=a("strong"),wwr=o("gpt2"),Awr=o(" \u2014 "),kW=a("a"),ywr=o("FlaxGPT2LMHeadModel"),Lwr=o(" (OpenAI GPT-2 model)"),xwr=l(),tE=a("li"),N2e=a("strong"),kwr=o("gpt_neo"),Swr=o(" \u2014 "),SW=a("a"),Rwr=o("FlaxGPTNeoForCausalLM"),Bwr=o(" (GPT Neo model)"),Pwr=l(),aE=a("li"),j2e=a("strong"),$wr=o("gptj"),Iwr=o(" \u2014 "),RW=a("a"),qwr=o("FlaxGPTJForCausalLM"),Nwr=o(" (GPT-J model)"),jwr=l(),nE=a("li"),D2e=a("strong"),Dwr=o("xglm"),Gwr=o(" \u2014 "),BW=a("a"),Owr=o("FlaxXGLMForCausalLM"),Vwr=o(" (XGLM model)"),Xwr=l(),G2e=a("p"),zwr=o("Examples:"),Qwr=l(),f(c8.$$.fragment),RPe=l(),af=a("h2"),sE=a("a"),O2e=a("span"),f(f8.$$.fragment),Wwr=l(),V2e=a("span"),Hwr=o("FlaxAutoModelForPreTraining"),BPe=l(),Pr=a("div"),f(m8.$$.fragment),Uwr=l(),nf=a("p"),Jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PW=a("a"),Ywr=o("from_pretrained()"),Kwr=o(" class method or the "),$W=a("a"),Zwr=o("from_config()"),eAr=o(` class
method.`),oAr=l(),g8=a("p"),rAr=o("This class cannot be instantiated directly using "),X2e=a("code"),tAr=o("__init__()"),aAr=o(" (throws an error)."),nAr=l(),Lt=a("div"),f(h8.$$.fragment),sAr=l(),z2e=a("p"),lAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),iAr=l(),sf=a("p"),dAr=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),cAr=o("not"),fAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),mAr=o("from_pretrained()"),gAr=o(" to load the model weights."),hAr=l(),W2e=a("p"),pAr=o("Examples:"),_Ar=l(),f(p8.$$.fragment),uAr=l(),ko=a("div"),f(_8.$$.fragment),bAr=l(),H2e=a("p"),vAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FAr=l(),Rn=a("p"),TAr=o("The model class to instantiate is selected based on the "),U2e=a("code"),MAr=o("model_type"),EAr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),CAr=o("pretrained_model_name_or_path"),wAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),AAr=o("pretrained_model_name_or_path"),yAr=o(":"),LAr=l(),me=a("ul"),lE=a("li"),K2e=a("strong"),xAr=o("albert"),kAr=o(" \u2014 "),qW=a("a"),SAr=o("FlaxAlbertForPreTraining"),RAr=o(" (ALBERT model)"),BAr=l(),iE=a("li"),Z2e=a("strong"),PAr=o("bart"),$Ar=o(" \u2014 "),NW=a("a"),IAr=o("FlaxBartForConditionalGeneration"),qAr=o(" (BART model)"),NAr=l(),dE=a("li"),e5e=a("strong"),jAr=o("bert"),DAr=o(" \u2014 "),jW=a("a"),GAr=o("FlaxBertForPreTraining"),OAr=o(" (BERT model)"),VAr=l(),cE=a("li"),o5e=a("strong"),XAr=o("big_bird"),zAr=o(" \u2014 "),DW=a("a"),QAr=o("FlaxBigBirdForPreTraining"),WAr=o(" (BigBird model)"),HAr=l(),fE=a("li"),r5e=a("strong"),UAr=o("electra"),JAr=o(" \u2014 "),GW=a("a"),YAr=o("FlaxElectraForPreTraining"),KAr=o(" (ELECTRA model)"),ZAr=l(),mE=a("li"),t5e=a("strong"),e0r=o("mbart"),o0r=o(" \u2014 "),OW=a("a"),r0r=o("FlaxMBartForConditionalGeneration"),t0r=o(" (mBART model)"),a0r=l(),gE=a("li"),a5e=a("strong"),n0r=o("mt5"),s0r=o(" \u2014 "),VW=a("a"),l0r=o("FlaxMT5ForConditionalGeneration"),i0r=o(" (mT5 model)"),d0r=l(),hE=a("li"),n5e=a("strong"),c0r=o("roberta"),f0r=o(" \u2014 "),XW=a("a"),m0r=o("FlaxRobertaForMaskedLM"),g0r=o(" (RoBERTa model)"),h0r=l(),pE=a("li"),s5e=a("strong"),p0r=o("roformer"),_0r=o(" \u2014 "),zW=a("a"),u0r=o("FlaxRoFormerForMaskedLM"),b0r=o(" (RoFormer model)"),v0r=l(),_E=a("li"),l5e=a("strong"),F0r=o("t5"),T0r=o(" \u2014 "),QW=a("a"),M0r=o("FlaxT5ForConditionalGeneration"),E0r=o(" (T5 model)"),C0r=l(),uE=a("li"),i5e=a("strong"),w0r=o("wav2vec2"),A0r=o(" \u2014 "),WW=a("a"),y0r=o("FlaxWav2Vec2ForPreTraining"),L0r=o(" (Wav2Vec2 model)"),x0r=l(),bE=a("li"),d5e=a("strong"),k0r=o("xlm-roberta"),S0r=o(" \u2014 "),HW=a("a"),R0r=o("FlaxXLMRobertaForMaskedLM"),B0r=o(" (XLM-RoBERTa model)"),P0r=l(),c5e=a("p"),$0r=o("Examples:"),I0r=l(),f(u8.$$.fragment),PPe=l(),lf=a("h2"),vE=a("a"),f5e=a("span"),f(b8.$$.fragment),q0r=l(),m5e=a("span"),N0r=o("FlaxAutoModelForMaskedLM"),$Pe=l(),$r=a("div"),f(v8.$$.fragment),j0r=l(),df=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UW=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),JW=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),F8=a("p"),Q0r=o("This class cannot be instantiated directly using "),g5e=a("code"),W0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),xt=a("div"),f(T8.$$.fragment),J0r=l(),h5e=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),K0r=l(),cf=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),eyr=o("not"),oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=a("a"),ryr=o("from_pretrained()"),tyr=o(" to load the model weights."),ayr=l(),_5e=a("p"),nyr=o("Examples:"),syr=l(),f(M8.$$.fragment),lyr=l(),So=a("div"),f(E8.$$.fragment),iyr=l(),u5e=a("p"),dyr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cyr=l(),Bn=a("p"),fyr=o("The model class to instantiate is selected based on the "),b5e=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),v5e=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(":"),byr=l(),ve=a("ul"),FE=a("li"),T5e=a("strong"),vyr=o("albert"),Fyr=o(" \u2014 "),KW=a("a"),Tyr=o("FlaxAlbertForMaskedLM"),Myr=o(" (ALBERT model)"),Eyr=l(),TE=a("li"),M5e=a("strong"),Cyr=o("bart"),wyr=o(" \u2014 "),ZW=a("a"),Ayr=o("FlaxBartForConditionalGeneration"),yyr=o(" (BART model)"),Lyr=l(),ME=a("li"),E5e=a("strong"),xyr=o("bert"),kyr=o(" \u2014 "),eH=a("a"),Syr=o("FlaxBertForMaskedLM"),Ryr=o(" (BERT model)"),Byr=l(),EE=a("li"),C5e=a("strong"),Pyr=o("big_bird"),$yr=o(" \u2014 "),oH=a("a"),Iyr=o("FlaxBigBirdForMaskedLM"),qyr=o(" (BigBird model)"),Nyr=l(),CE=a("li"),w5e=a("strong"),jyr=o("distilbert"),Dyr=o(" \u2014 "),rH=a("a"),Gyr=o("FlaxDistilBertForMaskedLM"),Oyr=o(" (DistilBERT model)"),Vyr=l(),wE=a("li"),A5e=a("strong"),Xyr=o("electra"),zyr=o(" \u2014 "),tH=a("a"),Qyr=o("FlaxElectraForMaskedLM"),Wyr=o(" (ELECTRA model)"),Hyr=l(),AE=a("li"),y5e=a("strong"),Uyr=o("mbart"),Jyr=o(" \u2014 "),aH=a("a"),Yyr=o("FlaxMBartForConditionalGeneration"),Kyr=o(" (mBART model)"),Zyr=l(),yE=a("li"),L5e=a("strong"),eLr=o("roberta"),oLr=o(" \u2014 "),nH=a("a"),rLr=o("FlaxRobertaForMaskedLM"),tLr=o(" (RoBERTa model)"),aLr=l(),LE=a("li"),x5e=a("strong"),nLr=o("roformer"),sLr=o(" \u2014 "),sH=a("a"),lLr=o("FlaxRoFormerForMaskedLM"),iLr=o(" (RoFormer model)"),dLr=l(),xE=a("li"),k5e=a("strong"),cLr=o("xlm-roberta"),fLr=o(" \u2014 "),lH=a("a"),mLr=o("FlaxXLMRobertaForMaskedLM"),gLr=o(" (XLM-RoBERTa model)"),hLr=l(),S5e=a("p"),pLr=o("Examples:"),_Lr=l(),f(C8.$$.fragment),IPe=l(),ff=a("h2"),kE=a("a"),R5e=a("span"),f(w8.$$.fragment),uLr=l(),B5e=a("span"),bLr=o("FlaxAutoModelForSeq2SeqLM"),qPe=l(),Ir=a("div"),f(A8.$$.fragment),vLr=l(),mf=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iH=a("a"),TLr=o("from_pretrained()"),MLr=o(" class method or the "),dH=a("a"),ELr=o("from_config()"),CLr=o(` class
method.`),wLr=l(),y8=a("p"),ALr=o("This class cannot be instantiated directly using "),P5e=a("code"),yLr=o("__init__()"),LLr=o(" (throws an error)."),xLr=l(),kt=a("div"),f(L8.$$.fragment),kLr=l(),$5e=a("p"),SLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RLr=l(),gf=a("p"),BLr=o(`Note:
Loading a model from its configuration file does `),I5e=a("strong"),PLr=o("not"),$Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=a("a"),ILr=o("from_pretrained()"),qLr=o(" to load the model weights."),NLr=l(),q5e=a("p"),jLr=o("Examples:"),DLr=l(),f(x8.$$.fragment),GLr=l(),Ro=a("div"),f(k8.$$.fragment),OLr=l(),N5e=a("p"),VLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),XLr=l(),Pn=a("p"),zLr=o("The model class to instantiate is selected based on the "),j5e=a("code"),QLr=o("model_type"),WLr=o(` property of the config object (either
passed as an argument or loaded from `),D5e=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(":"),KLr=l(),Ce=a("ul"),SE=a("li"),O5e=a("strong"),ZLr=o("bart"),e8r=o(" \u2014 "),fH=a("a"),o8r=o("FlaxBartForConditionalGeneration"),r8r=o(" (BART model)"),t8r=l(),RE=a("li"),V5e=a("strong"),a8r=o("blenderbot"),n8r=o(" \u2014 "),mH=a("a"),s8r=o("FlaxBlenderbotForConditionalGeneration"),l8r=o(" (Blenderbot model)"),i8r=l(),BE=a("li"),X5e=a("strong"),d8r=o("blenderbot-small"),c8r=o(" \u2014 "),gH=a("a"),f8r=o("FlaxBlenderbotSmallForConditionalGeneration"),m8r=o(" (BlenderbotSmall model)"),g8r=l(),PE=a("li"),z5e=a("strong"),h8r=o("encoder-decoder"),p8r=o(" \u2014 "),hH=a("a"),_8r=o("FlaxEncoderDecoderModel"),u8r=o(" (Encoder decoder model)"),b8r=l(),$E=a("li"),Q5e=a("strong"),v8r=o("marian"),F8r=o(" \u2014 "),pH=a("a"),T8r=o("FlaxMarianMTModel"),M8r=o(" (Marian model)"),E8r=l(),IE=a("li"),W5e=a("strong"),C8r=o("mbart"),w8r=o(" \u2014 "),_H=a("a"),A8r=o("FlaxMBartForConditionalGeneration"),y8r=o(" (mBART model)"),L8r=l(),qE=a("li"),H5e=a("strong"),x8r=o("mt5"),k8r=o(" \u2014 "),uH=a("a"),S8r=o("FlaxMT5ForConditionalGeneration"),R8r=o(" (mT5 model)"),B8r=l(),NE=a("li"),U5e=a("strong"),P8r=o("pegasus"),$8r=o(" \u2014 "),bH=a("a"),I8r=o("FlaxPegasusForConditionalGeneration"),q8r=o(" (Pegasus model)"),N8r=l(),jE=a("li"),J5e=a("strong"),j8r=o("t5"),D8r=o(" \u2014 "),vH=a("a"),G8r=o("FlaxT5ForConditionalGeneration"),O8r=o(" (T5 model)"),V8r=l(),Y5e=a("p"),X8r=o("Examples:"),z8r=l(),f(S8.$$.fragment),NPe=l(),hf=a("h2"),DE=a("a"),K5e=a("span"),f(R8.$$.fragment),Q8r=l(),Z5e=a("span"),W8r=o("FlaxAutoModelForSequenceClassification"),jPe=l(),qr=a("div"),f(B8.$$.fragment),H8r=l(),pf=a("p"),U8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FH=a("a"),J8r=o("from_pretrained()"),Y8r=o(" class method or the "),TH=a("a"),K8r=o("from_config()"),Z8r=o(` class
method.`),e7r=l(),P8=a("p"),o7r=o("This class cannot be instantiated directly using "),eve=a("code"),r7r=o("__init__()"),t7r=o(" (throws an error)."),a7r=l(),St=a("div"),f($8.$$.fragment),n7r=l(),ove=a("p"),s7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),l7r=l(),_f=a("p"),i7r=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),d7r=o("not"),c7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),f7r=o("from_pretrained()"),m7r=o(" to load the model weights."),g7r=l(),tve=a("p"),h7r=o("Examples:"),p7r=l(),f(I8.$$.fragment),_7r=l(),Bo=a("div"),f(q8.$$.fragment),u7r=l(),ave=a("p"),b7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),v7r=l(),$n=a("p"),F7r=o("The model class to instantiate is selected based on the "),nve=a("code"),T7r=o("model_type"),M7r=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),E7r=o("pretrained_model_name_or_path"),C7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(":"),y7r=l(),Fe=a("ul"),GE=a("li"),ive=a("strong"),L7r=o("albert"),x7r=o(" \u2014 "),EH=a("a"),k7r=o("FlaxAlbertForSequenceClassification"),S7r=o(" (ALBERT model)"),R7r=l(),OE=a("li"),dve=a("strong"),B7r=o("bart"),P7r=o(" \u2014 "),CH=a("a"),$7r=o("FlaxBartForSequenceClassification"),I7r=o(" (BART model)"),q7r=l(),VE=a("li"),cve=a("strong"),N7r=o("bert"),j7r=o(" \u2014 "),wH=a("a"),D7r=o("FlaxBertForSequenceClassification"),G7r=o(" (BERT model)"),O7r=l(),XE=a("li"),fve=a("strong"),V7r=o("big_bird"),X7r=o(" \u2014 "),AH=a("a"),z7r=o("FlaxBigBirdForSequenceClassification"),Q7r=o(" (BigBird model)"),W7r=l(),zE=a("li"),mve=a("strong"),H7r=o("distilbert"),U7r=o(" \u2014 "),yH=a("a"),J7r=o("FlaxDistilBertForSequenceClassification"),Y7r=o(" (DistilBERT model)"),K7r=l(),QE=a("li"),gve=a("strong"),Z7r=o("electra"),e9r=o(" \u2014 "),LH=a("a"),o9r=o("FlaxElectraForSequenceClassification"),r9r=o(" (ELECTRA model)"),t9r=l(),WE=a("li"),hve=a("strong"),a9r=o("mbart"),n9r=o(" \u2014 "),xH=a("a"),s9r=o("FlaxMBartForSequenceClassification"),l9r=o(" (mBART model)"),i9r=l(),HE=a("li"),pve=a("strong"),d9r=o("roberta"),c9r=o(" \u2014 "),kH=a("a"),f9r=o("FlaxRobertaForSequenceClassification"),m9r=o(" (RoBERTa model)"),g9r=l(),UE=a("li"),_ve=a("strong"),h9r=o("roformer"),p9r=o(" \u2014 "),SH=a("a"),_9r=o("FlaxRoFormerForSequenceClassification"),u9r=o(" (RoFormer model)"),b9r=l(),JE=a("li"),uve=a("strong"),v9r=o("xlm-roberta"),F9r=o(" \u2014 "),RH=a("a"),T9r=o("FlaxXLMRobertaForSequenceClassification"),M9r=o(" (XLM-RoBERTa model)"),E9r=l(),bve=a("p"),C9r=o("Examples:"),w9r=l(),f(N8.$$.fragment),DPe=l(),uf=a("h2"),YE=a("a"),vve=a("span"),f(j8.$$.fragment),A9r=l(),Fve=a("span"),y9r=o("FlaxAutoModelForQuestionAnswering"),GPe=l(),Nr=a("div"),f(D8.$$.fragment),L9r=l(),bf=a("p"),x9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BH=a("a"),k9r=o("from_pretrained()"),S9r=o(" class method or the "),PH=a("a"),R9r=o("from_config()"),B9r=o(` class
method.`),P9r=l(),G8=a("p"),$9r=o("This class cannot be instantiated directly using "),Tve=a("code"),I9r=o("__init__()"),q9r=o(" (throws an error)."),N9r=l(),Rt=a("div"),f(O8.$$.fragment),j9r=l(),Mve=a("p"),D9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),G9r=l(),vf=a("p"),O9r=o(`Note:
Loading a model from its configuration file does `),Eve=a("strong"),V9r=o("not"),X9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),z9r=o("from_pretrained()"),Q9r=o(" to load the model weights."),W9r=l(),Cve=a("p"),H9r=o("Examples:"),U9r=l(),f(V8.$$.fragment),J9r=l(),Po=a("div"),f(X8.$$.fragment),Y9r=l(),wve=a("p"),K9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Z9r=l(),In=a("p"),exr=o("The model class to instantiate is selected based on the "),Ave=a("code"),oxr=o("model_type"),rxr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),txr=o("pretrained_model_name_or_path"),axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),nxr=o("pretrained_model_name_or_path"),sxr=o(":"),lxr=l(),Te=a("ul"),KE=a("li"),xve=a("strong"),ixr=o("albert"),dxr=o(" \u2014 "),IH=a("a"),cxr=o("FlaxAlbertForQuestionAnswering"),fxr=o(" (ALBERT model)"),mxr=l(),ZE=a("li"),kve=a("strong"),gxr=o("bart"),hxr=o(" \u2014 "),qH=a("a"),pxr=o("FlaxBartForQuestionAnswering"),_xr=o(" (BART model)"),uxr=l(),e3=a("li"),Sve=a("strong"),bxr=o("bert"),vxr=o(" \u2014 "),NH=a("a"),Fxr=o("FlaxBertForQuestionAnswering"),Txr=o(" (BERT model)"),Mxr=l(),o3=a("li"),Rve=a("strong"),Exr=o("big_bird"),Cxr=o(" \u2014 "),jH=a("a"),wxr=o("FlaxBigBirdForQuestionAnswering"),Axr=o(" (BigBird model)"),yxr=l(),r3=a("li"),Bve=a("strong"),Lxr=o("distilbert"),xxr=o(" \u2014 "),DH=a("a"),kxr=o("FlaxDistilBertForQuestionAnswering"),Sxr=o(" (DistilBERT model)"),Rxr=l(),t3=a("li"),Pve=a("strong"),Bxr=o("electra"),Pxr=o(" \u2014 "),GH=a("a"),$xr=o("FlaxElectraForQuestionAnswering"),Ixr=o(" (ELECTRA model)"),qxr=l(),a3=a("li"),$ve=a("strong"),Nxr=o("mbart"),jxr=o(" \u2014 "),OH=a("a"),Dxr=o("FlaxMBartForQuestionAnswering"),Gxr=o(" (mBART model)"),Oxr=l(),n3=a("li"),Ive=a("strong"),Vxr=o("roberta"),Xxr=o(" \u2014 "),VH=a("a"),zxr=o("FlaxRobertaForQuestionAnswering"),Qxr=o(" (RoBERTa model)"),Wxr=l(),s3=a("li"),qve=a("strong"),Hxr=o("roformer"),Uxr=o(" \u2014 "),XH=a("a"),Jxr=o("FlaxRoFormerForQuestionAnswering"),Yxr=o(" (RoFormer model)"),Kxr=l(),l3=a("li"),Nve=a("strong"),Zxr=o("xlm-roberta"),ekr=o(" \u2014 "),zH=a("a"),okr=o("FlaxXLMRobertaForQuestionAnswering"),rkr=o(" (XLM-RoBERTa model)"),tkr=l(),jve=a("p"),akr=o("Examples:"),nkr=l(),f(z8.$$.fragment),OPe=l(),Ff=a("h2"),i3=a("a"),Dve=a("span"),f(Q8.$$.fragment),skr=l(),Gve=a("span"),lkr=o("FlaxAutoModelForTokenClassification"),VPe=l(),jr=a("div"),f(W8.$$.fragment),ikr=l(),Tf=a("p"),dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QH=a("a"),ckr=o("from_pretrained()"),fkr=o(" class method or the "),WH=a("a"),mkr=o("from_config()"),gkr=o(` class
method.`),hkr=l(),H8=a("p"),pkr=o("This class cannot be instantiated directly using "),Ove=a("code"),_kr=o("__init__()"),ukr=o(" (throws an error)."),bkr=l(),Bt=a("div"),f(U8.$$.fragment),vkr=l(),Vve=a("p"),Fkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Tkr=l(),Mf=a("p"),Mkr=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),Ekr=o("not"),Ckr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),wkr=o("from_pretrained()"),Akr=o(" to load the model weights."),ykr=l(),zve=a("p"),Lkr=o("Examples:"),xkr=l(),f(J8.$$.fragment),kkr=l(),$o=a("div"),f(Y8.$$.fragment),Skr=l(),Qve=a("p"),Rkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Bkr=l(),qn=a("p"),Pkr=o("The model class to instantiate is selected based on the "),Wve=a("code"),$kr=o("model_type"),Ikr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),qkr=o("pretrained_model_name_or_path"),Nkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),jkr=o("pretrained_model_name_or_path"),Dkr=o(":"),Gkr=l(),Be=a("ul"),d3=a("li"),Jve=a("strong"),Okr=o("albert"),Vkr=o(" \u2014 "),UH=a("a"),Xkr=o("FlaxAlbertForTokenClassification"),zkr=o(" (ALBERT model)"),Qkr=l(),c3=a("li"),Yve=a("strong"),Wkr=o("bert"),Hkr=o(" \u2014 "),JH=a("a"),Ukr=o("FlaxBertForTokenClassification"),Jkr=o(" (BERT model)"),Ykr=l(),f3=a("li"),Kve=a("strong"),Kkr=o("big_bird"),Zkr=o(" \u2014 "),YH=a("a"),eSr=o("FlaxBigBirdForTokenClassification"),oSr=o(" (BigBird model)"),rSr=l(),m3=a("li"),Zve=a("strong"),tSr=o("distilbert"),aSr=o(" \u2014 "),KH=a("a"),nSr=o("FlaxDistilBertForTokenClassification"),sSr=o(" (DistilBERT model)"),lSr=l(),g3=a("li"),eFe=a("strong"),iSr=o("electra"),dSr=o(" \u2014 "),ZH=a("a"),cSr=o("FlaxElectraForTokenClassification"),fSr=o(" (ELECTRA model)"),mSr=l(),h3=a("li"),oFe=a("strong"),gSr=o("roberta"),hSr=o(" \u2014 "),eU=a("a"),pSr=o("FlaxRobertaForTokenClassification"),_Sr=o(" (RoBERTa model)"),uSr=l(),p3=a("li"),rFe=a("strong"),bSr=o("roformer"),vSr=o(" \u2014 "),oU=a("a"),FSr=o("FlaxRoFormerForTokenClassification"),TSr=o(" (RoFormer model)"),MSr=l(),_3=a("li"),tFe=a("strong"),ESr=o("xlm-roberta"),CSr=o(" \u2014 "),rU=a("a"),wSr=o("FlaxXLMRobertaForTokenClassification"),ASr=o(" (XLM-RoBERTa model)"),ySr=l(),aFe=a("p"),LSr=o("Examples:"),xSr=l(),f(K8.$$.fragment),XPe=l(),Ef=a("h2"),u3=a("a"),nFe=a("span"),f(Z8.$$.fragment),kSr=l(),sFe=a("span"),SSr=o("FlaxAutoModelForMultipleChoice"),zPe=l(),Dr=a("div"),f(e7.$$.fragment),RSr=l(),Cf=a("p"),BSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tU=a("a"),PSr=o("from_pretrained()"),$Sr=o(" class method or the "),aU=a("a"),ISr=o("from_config()"),qSr=o(` class
method.`),NSr=l(),o7=a("p"),jSr=o("This class cannot be instantiated directly using "),lFe=a("code"),DSr=o("__init__()"),GSr=o(" (throws an error)."),OSr=l(),Pt=a("div"),f(r7.$$.fragment),VSr=l(),iFe=a("p"),XSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zSr=l(),wf=a("p"),QSr=o(`Note:
Loading a model from its configuration file does `),dFe=a("strong"),WSr=o("not"),HSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),USr=o("from_pretrained()"),JSr=o(" to load the model weights."),YSr=l(),cFe=a("p"),KSr=o("Examples:"),ZSr=l(),f(t7.$$.fragment),eRr=l(),Io=a("div"),f(a7.$$.fragment),oRr=l(),fFe=a("p"),rRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tRr=l(),Nn=a("p"),aRr=o("The model class to instantiate is selected based on the "),mFe=a("code"),nRr=o("model_type"),sRr=o(` property of the config object (either
passed as an argument or loaded from `),gFe=a("code"),lRr=o("pretrained_model_name_or_path"),iRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=a("code"),dRr=o("pretrained_model_name_or_path"),cRr=o(":"),fRr=l(),Pe=a("ul"),b3=a("li"),pFe=a("strong"),mRr=o("albert"),gRr=o(" \u2014 "),sU=a("a"),hRr=o("FlaxAlbertForMultipleChoice"),pRr=o(" (ALBERT model)"),_Rr=l(),v3=a("li"),_Fe=a("strong"),uRr=o("bert"),bRr=o(" \u2014 "),lU=a("a"),vRr=o("FlaxBertForMultipleChoice"),FRr=o(" (BERT model)"),TRr=l(),F3=a("li"),uFe=a("strong"),MRr=o("big_bird"),ERr=o(" \u2014 "),iU=a("a"),CRr=o("FlaxBigBirdForMultipleChoice"),wRr=o(" (BigBird model)"),ARr=l(),T3=a("li"),bFe=a("strong"),yRr=o("distilbert"),LRr=o(" \u2014 "),dU=a("a"),xRr=o("FlaxDistilBertForMultipleChoice"),kRr=o(" (DistilBERT model)"),SRr=l(),M3=a("li"),vFe=a("strong"),RRr=o("electra"),BRr=o(" \u2014 "),cU=a("a"),PRr=o("FlaxElectraForMultipleChoice"),$Rr=o(" (ELECTRA model)"),IRr=l(),E3=a("li"),FFe=a("strong"),qRr=o("roberta"),NRr=o(" \u2014 "),fU=a("a"),jRr=o("FlaxRobertaForMultipleChoice"),DRr=o(" (RoBERTa model)"),GRr=l(),C3=a("li"),TFe=a("strong"),ORr=o("roformer"),VRr=o(" \u2014 "),mU=a("a"),XRr=o("FlaxRoFormerForMultipleChoice"),zRr=o(" (RoFormer model)"),QRr=l(),w3=a("li"),MFe=a("strong"),WRr=o("xlm-roberta"),HRr=o(" \u2014 "),gU=a("a"),URr=o("FlaxXLMRobertaForMultipleChoice"),JRr=o(" (XLM-RoBERTa model)"),YRr=l(),EFe=a("p"),KRr=o("Examples:"),ZRr=l(),f(n7.$$.fragment),QPe=l(),Af=a("h2"),A3=a("a"),CFe=a("span"),f(s7.$$.fragment),eBr=l(),wFe=a("span"),oBr=o("FlaxAutoModelForNextSentencePrediction"),WPe=l(),Gr=a("div"),f(l7.$$.fragment),rBr=l(),yf=a("p"),tBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hU=a("a"),aBr=o("from_pretrained()"),nBr=o(" class method or the "),pU=a("a"),sBr=o("from_config()"),lBr=o(` class
method.`),iBr=l(),i7=a("p"),dBr=o("This class cannot be instantiated directly using "),AFe=a("code"),cBr=o("__init__()"),fBr=o(" (throws an error)."),mBr=l(),$t=a("div"),f(d7.$$.fragment),gBr=l(),yFe=a("p"),hBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pBr=l(),Lf=a("p"),_Br=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),uBr=o("not"),bBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),vBr=o("from_pretrained()"),FBr=o(" to load the model weights."),TBr=l(),xFe=a("p"),MBr=o("Examples:"),EBr=l(),f(c7.$$.fragment),CBr=l(),qo=a("div"),f(f7.$$.fragment),wBr=l(),kFe=a("p"),ABr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yBr=l(),jn=a("p"),LBr=o("The model class to instantiate is selected based on the "),SFe=a("code"),xBr=o("model_type"),kBr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),BBr=o("pretrained_model_name_or_path"),PBr=o(":"),$Br=l(),PFe=a("ul"),y3=a("li"),$Fe=a("strong"),IBr=o("bert"),qBr=o(" \u2014 "),uU=a("a"),NBr=o("FlaxBertForNextSentencePrediction"),jBr=o(" (BERT model)"),DBr=l(),IFe=a("p"),GBr=o("Examples:"),OBr=l(),f(m7.$$.fragment),HPe=l(),xf=a("h2"),L3=a("a"),qFe=a("span"),f(g7.$$.fragment),VBr=l(),NFe=a("span"),XBr=o("FlaxAutoModelForImageClassification"),UPe=l(),Or=a("div"),f(h7.$$.fragment),zBr=l(),kf=a("p"),QBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bU=a("a"),WBr=o("from_pretrained()"),HBr=o(" class method or the "),vU=a("a"),UBr=o("from_config()"),JBr=o(` class
method.`),YBr=l(),p7=a("p"),KBr=o("This class cannot be instantiated directly using "),jFe=a("code"),ZBr=o("__init__()"),ePr=o(" (throws an error)."),oPr=l(),It=a("div"),f(_7.$$.fragment),rPr=l(),DFe=a("p"),tPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aPr=l(),Sf=a("p"),nPr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),sPr=o("not"),lPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),iPr=o("from_pretrained()"),dPr=o(" to load the model weights."),cPr=l(),OFe=a("p"),fPr=o("Examples:"),mPr=l(),f(u7.$$.fragment),gPr=l(),No=a("div"),f(b7.$$.fragment),hPr=l(),VFe=a("p"),pPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Pr=l(),Dn=a("p"),uPr=o("The model class to instantiate is selected based on the "),XFe=a("code"),bPr=o("model_type"),vPr=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),FPr=o("pretrained_model_name_or_path"),TPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),MPr=o("pretrained_model_name_or_path"),EPr=o(":"),CPr=l(),v7=a("ul"),x3=a("li"),WFe=a("strong"),wPr=o("beit"),APr=o(" \u2014 "),TU=a("a"),yPr=o("FlaxBeitForImageClassification"),LPr=o(" (BEiT model)"),xPr=l(),k3=a("li"),HFe=a("strong"),kPr=o("vit"),SPr=o(" \u2014 "),MU=a("a"),RPr=o("FlaxViTForImageClassification"),BPr=o(" (ViT model)"),PPr=l(),UFe=a("p"),$Pr=o("Examples:"),IPr=l(),f(F7.$$.fragment),JPe=l(),Rf=a("h2"),S3=a("a"),JFe=a("span"),f(T7.$$.fragment),qPr=l(),YFe=a("span"),NPr=o("FlaxAutoModelForVision2Seq"),YPe=l(),Vr=a("div"),f(M7.$$.fragment),jPr=l(),Bf=a("p"),DPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EU=a("a"),GPr=o("from_pretrained()"),OPr=o(" class method or the "),CU=a("a"),VPr=o("from_config()"),XPr=o(` class
method.`),zPr=l(),E7=a("p"),QPr=o("This class cannot be instantiated directly using "),KFe=a("code"),WPr=o("__init__()"),HPr=o(" (throws an error)."),UPr=l(),qt=a("div"),f(C7.$$.fragment),JPr=l(),ZFe=a("p"),YPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KPr=l(),Pf=a("p"),ZPr=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),e$r=o("not"),o$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=a("a"),r$r=o("from_pretrained()"),t$r=o(" to load the model weights."),a$r=l(),oTe=a("p"),n$r=o("Examples:"),s$r=l(),f(w7.$$.fragment),l$r=l(),jo=a("div"),f(A7.$$.fragment),i$r=l(),rTe=a("p"),d$r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),c$r=l(),Gn=a("p"),f$r=o("The model class to instantiate is selected based on the "),tTe=a("code"),m$r=o("model_type"),g$r=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),h$r=o("pretrained_model_name_or_path"),p$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),_$r=o("pretrained_model_name_or_path"),u$r=o(":"),b$r=l(),sTe=a("ul"),R3=a("li"),lTe=a("strong"),v$r=o("vision-encoder-decoder"),F$r=o(" \u2014 "),AU=a("a"),T$r=o("FlaxVisionEncoderDecoderModel"),M$r=o(" (Vision Encoder decoder model)"),E$r=l(),iTe=a("p"),C$r=o("Examples:"),w$r=l(),f(y7.$$.fragment),this.h()},l(c){const u=CAt('[data-svelte="svelte-1phssyn"]',document.head);ee=n(u,"META",{name:!0,content:!0}),u.forEach(t),co=i(c),ce=n(c,"H1",{class:!0});var L7=s(ce);we=n(L7,"A",{id:!0,class:!0,href:!0});var dTe=s(we);io=n(dTe,"SPAN",{});var cTe=s(io);m(he.$$.fragment,cTe),cTe.forEach(t),dTe.forEach(t),Me=i(L7),Xo=n(L7,"SPAN",{});var y$r=s(Xo);qi=r(y$r,"Auto Classes"),y$r.forEach(t),L7.forEach(t),qf=i(c),fa=n(c,"P",{});var ZPe=s(fa);Ni=r(ZPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(ZPe,"CODE",{});var L$r=s(ji);BC=r(L$r,"from_pretrained()"),L$r.forEach(t),Nf=r(ZPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ZPe.forEach(t),ke=i(c),fo=n(c,"P",{});var B3=s(fo);Di=r(B3,"Instantiating one of "),On=n(B3,"A",{href:!0});var x$r=s(On);PC=r(x$r,"AutoConfig"),x$r.forEach(t),Vn=r(B3,", "),Xn=n(B3,"A",{href:!0});var k$r=s(Xn);$C=r(k$r,"AutoModel"),k$r.forEach(t),Gi=r(B3,`, and
`),zn=n(B3,"A",{href:!0});var S$r=s(zn);IC=r(S$r,"AutoTokenizer"),S$r.forEach(t),Oi=r(B3," will directly create a class of the relevant architecture. For instance"),B3.forEach(t),jf=i(c),m(Da.$$.fragment,c),mo=i(c),ue=n(c,"P",{});var e$e=s(ue);w9=r(e$e,"will create a model that is an instance of "),Vi=n(e$e,"A",{href:!0});var R$r=s(Vi);A9=r(R$r,"BertModel"),R$r.forEach(t),y9=r(e$e,"."),e$e.forEach(t),zo=i(c),Ga=n(c,"P",{});var o$e=s(Ga);L9=r(o$e,"There is one class of "),Df=n(o$e,"CODE",{});var B$r=s(Df);x9=r(B$r,"AutoModel"),B$r.forEach(t),cqe=r(o$e," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),o$e.forEach(t),YRe=i(c),Xi=n(c,"H2",{class:!0});var r$e=s(Xi);Gf=n(r$e,"A",{id:!0,class:!0,href:!0});var P$r=s(Gf);vY=n(P$r,"SPAN",{});var $$r=s(vY);m(qC.$$.fragment,$$r),$$r.forEach(t),P$r.forEach(t),fqe=i(r$e),FY=n(r$e,"SPAN",{});var I$r=s(FY);mqe=r(I$r,"Extending the Auto Classes"),I$r.forEach(t),r$e.forEach(t),KRe=i(c),Qn=n(c,"P",{});var yU=s(Qn);gqe=r(yU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),TY=n(yU,"CODE",{});var q$r=s(TY);hqe=r(q$r,"NewModel"),q$r.forEach(t),pqe=r(yU,", make sure you have a "),MY=n(yU,"CODE",{});var N$r=s(MY);_qe=r(N$r,"NewModelConfig"),N$r.forEach(t),uqe=r(yU,` then you can add those to the auto
classes like this:`),yU.forEach(t),ZRe=i(c),m(NC.$$.fragment,c),eBe=i(c),k9=n(c,"P",{});var j$r=s(k9);bqe=r(j$r,"You will then be able to use the auto classes like you would usually do!"),j$r.forEach(t),oBe=i(c),m(Of.$$.fragment,c),rBe=i(c),zi=n(c,"H2",{class:!0});var t$e=s(zi);Vf=n(t$e,"A",{id:!0,class:!0,href:!0});var D$r=s(Vf);EY=n(D$r,"SPAN",{});var G$r=s(EY);m(jC.$$.fragment,G$r),G$r.forEach(t),D$r.forEach(t),vqe=i(t$e),CY=n(t$e,"SPAN",{});var O$r=s(CY);Fqe=r(O$r,"AutoConfig"),O$r.forEach(t),t$e.forEach(t),tBe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);m(DC.$$.fragment,Vs),Tqe=i(Vs),GC=n(Vs,"P",{});var a$e=s(GC);Mqe=r(a$e,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),S9=n(a$e,"A",{href:!0});var V$r=s(S9);Eqe=r(V$r,"from_pretrained()"),V$r.forEach(t),Cqe=r(a$e," class method."),a$e.forEach(t),wqe=i(Vs),OC=n(Vs,"P",{});var n$e=s(OC);Aqe=r(n$e,"This class cannot be instantiated directly using "),wY=n(n$e,"CODE",{});var X$r=s(wY);yqe=r(X$r,"__init__()"),X$r.forEach(t),Lqe=r(n$e," (throws an error)."),n$e.forEach(t),xqe=i(Vs),go=n(Vs,"DIV",{class:!0});var ga=s(go);m(VC.$$.fragment,ga),kqe=i(ga),AY=n(ga,"P",{});var z$r=s(AY);Sqe=r(z$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),z$r.forEach(t),Rqe=i(ga),Qi=n(ga,"P",{});var LU=s(Qi);Bqe=r(LU,"The configuration class to instantiate is selected based on the "),yY=n(LU,"CODE",{});var Q$r=s(yY);Pqe=r(Q$r,"model_type"),Q$r.forEach(t),$qe=r(LU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),LY=n(LU,"CODE",{});var W$r=s(LY);Iqe=r(W$r,"pretrained_model_name_or_path"),W$r.forEach(t),qqe=r(LU,":"),LU.forEach(t),Nqe=i(ga),v=n(ga,"UL",{});var F=s(v);Xf=n(F,"LI",{});var fTe=s(Xf);xY=n(fTe,"STRONG",{});var H$r=s(xY);jqe=r(H$r,"albert"),H$r.forEach(t),Dqe=r(fTe," \u2014 "),R9=n(fTe,"A",{href:!0});var U$r=s(R9);Gqe=r(U$r,"AlbertConfig"),U$r.forEach(t),Oqe=r(fTe," (ALBERT model)"),fTe.forEach(t),Vqe=i(F),zf=n(F,"LI",{});var mTe=s(zf);kY=n(mTe,"STRONG",{});var J$r=s(kY);Xqe=r(J$r,"bart"),J$r.forEach(t),zqe=r(mTe," \u2014 "),B9=n(mTe,"A",{href:!0});var Y$r=s(B9);Qqe=r(Y$r,"BartConfig"),Y$r.forEach(t),Wqe=r(mTe," (BART model)"),mTe.forEach(t),Hqe=i(F),Qf=n(F,"LI",{});var gTe=s(Qf);SY=n(gTe,"STRONG",{});var K$r=s(SY);Uqe=r(K$r,"beit"),K$r.forEach(t),Jqe=r(gTe," \u2014 "),P9=n(gTe,"A",{href:!0});var Z$r=s(P9);Yqe=r(Z$r,"BeitConfig"),Z$r.forEach(t),Kqe=r(gTe," (BEiT model)"),gTe.forEach(t),Zqe=i(F),Wf=n(F,"LI",{});var hTe=s(Wf);RY=n(hTe,"STRONG",{});var eIr=s(RY);eNe=r(eIr,"bert"),eIr.forEach(t),oNe=r(hTe," \u2014 "),$9=n(hTe,"A",{href:!0});var oIr=s($9);rNe=r(oIr,"BertConfig"),oIr.forEach(t),tNe=r(hTe," (BERT model)"),hTe.forEach(t),aNe=i(F),Hf=n(F,"LI",{});var pTe=s(Hf);BY=n(pTe,"STRONG",{});var rIr=s(BY);nNe=r(rIr,"bert-generation"),rIr.forEach(t),sNe=r(pTe," \u2014 "),I9=n(pTe,"A",{href:!0});var tIr=s(I9);lNe=r(tIr,"BertGenerationConfig"),tIr.forEach(t),iNe=r(pTe," (Bert Generation model)"),pTe.forEach(t),dNe=i(F),Uf=n(F,"LI",{});var _Te=s(Uf);PY=n(_Te,"STRONG",{});var aIr=s(PY);cNe=r(aIr,"big_bird"),aIr.forEach(t),fNe=r(_Te," \u2014 "),q9=n(_Te,"A",{href:!0});var nIr=s(q9);mNe=r(nIr,"BigBirdConfig"),nIr.forEach(t),gNe=r(_Te," (BigBird model)"),_Te.forEach(t),hNe=i(F),Jf=n(F,"LI",{});var uTe=s(Jf);$Y=n(uTe,"STRONG",{});var sIr=s($Y);pNe=r(sIr,"bigbird_pegasus"),sIr.forEach(t),_Ne=r(uTe," \u2014 "),N9=n(uTe,"A",{href:!0});var lIr=s(N9);uNe=r(lIr,"BigBirdPegasusConfig"),lIr.forEach(t),bNe=r(uTe," (BigBirdPegasus model)"),uTe.forEach(t),vNe=i(F),Yf=n(F,"LI",{});var bTe=s(Yf);IY=n(bTe,"STRONG",{});var iIr=s(IY);FNe=r(iIr,"blenderbot"),iIr.forEach(t),TNe=r(bTe," \u2014 "),j9=n(bTe,"A",{href:!0});var dIr=s(j9);MNe=r(dIr,"BlenderbotConfig"),dIr.forEach(t),ENe=r(bTe," (Blenderbot model)"),bTe.forEach(t),CNe=i(F),Kf=n(F,"LI",{});var vTe=s(Kf);qY=n(vTe,"STRONG",{});var cIr=s(qY);wNe=r(cIr,"blenderbot-small"),cIr.forEach(t),ANe=r(vTe," \u2014 "),D9=n(vTe,"A",{href:!0});var fIr=s(D9);yNe=r(fIr,"BlenderbotSmallConfig"),fIr.forEach(t),LNe=r(vTe," (BlenderbotSmall model)"),vTe.forEach(t),xNe=i(F),Zf=n(F,"LI",{});var FTe=s(Zf);NY=n(FTe,"STRONG",{});var mIr=s(NY);kNe=r(mIr,"camembert"),mIr.forEach(t),SNe=r(FTe," \u2014 "),G9=n(FTe,"A",{href:!0});var gIr=s(G9);RNe=r(gIr,"CamembertConfig"),gIr.forEach(t),BNe=r(FTe," (CamemBERT model)"),FTe.forEach(t),PNe=i(F),em=n(F,"LI",{});var TTe=s(em);jY=n(TTe,"STRONG",{});var hIr=s(jY);$Ne=r(hIr,"canine"),hIr.forEach(t),INe=r(TTe," \u2014 "),O9=n(TTe,"A",{href:!0});var pIr=s(O9);qNe=r(pIr,"CanineConfig"),pIr.forEach(t),NNe=r(TTe," (Canine model)"),TTe.forEach(t),jNe=i(F),om=n(F,"LI",{});var MTe=s(om);DY=n(MTe,"STRONG",{});var _Ir=s(DY);DNe=r(_Ir,"clip"),_Ir.forEach(t),GNe=r(MTe," \u2014 "),V9=n(MTe,"A",{href:!0});var uIr=s(V9);ONe=r(uIr,"CLIPConfig"),uIr.forEach(t),VNe=r(MTe," (CLIP model)"),MTe.forEach(t),XNe=i(F),rm=n(F,"LI",{});var ETe=s(rm);GY=n(ETe,"STRONG",{});var bIr=s(GY);zNe=r(bIr,"convbert"),bIr.forEach(t),QNe=r(ETe," \u2014 "),X9=n(ETe,"A",{href:!0});var vIr=s(X9);WNe=r(vIr,"ConvBertConfig"),vIr.forEach(t),HNe=r(ETe," (ConvBERT model)"),ETe.forEach(t),UNe=i(F),tm=n(F,"LI",{});var CTe=s(tm);OY=n(CTe,"STRONG",{});var FIr=s(OY);JNe=r(FIr,"convnext"),FIr.forEach(t),YNe=r(CTe," \u2014 "),z9=n(CTe,"A",{href:!0});var TIr=s(z9);KNe=r(TIr,"ConvNextConfig"),TIr.forEach(t),ZNe=r(CTe," (ConvNext model)"),CTe.forEach(t),eje=i(F),am=n(F,"LI",{});var wTe=s(am);VY=n(wTe,"STRONG",{});var MIr=s(VY);oje=r(MIr,"ctrl"),MIr.forEach(t),rje=r(wTe," \u2014 "),Q9=n(wTe,"A",{href:!0});var EIr=s(Q9);tje=r(EIr,"CTRLConfig"),EIr.forEach(t),aje=r(wTe," (CTRL model)"),wTe.forEach(t),nje=i(F),nm=n(F,"LI",{});var ATe=s(nm);XY=n(ATe,"STRONG",{});var CIr=s(XY);sje=r(CIr,"data2vec-audio"),CIr.forEach(t),lje=r(ATe," \u2014 "),W9=n(ATe,"A",{href:!0});var wIr=s(W9);ije=r(wIr,"Data2VecAudioConfig"),wIr.forEach(t),dje=r(ATe," (Data2VecAudio model)"),ATe.forEach(t),cje=i(F),sm=n(F,"LI",{});var yTe=s(sm);zY=n(yTe,"STRONG",{});var AIr=s(zY);fje=r(AIr,"data2vec-text"),AIr.forEach(t),mje=r(yTe," \u2014 "),H9=n(yTe,"A",{href:!0});var yIr=s(H9);gje=r(yIr,"Data2VecTextConfig"),yIr.forEach(t),hje=r(yTe," (Data2VecText model)"),yTe.forEach(t),pje=i(F),lm=n(F,"LI",{});var LTe=s(lm);QY=n(LTe,"STRONG",{});var LIr=s(QY);_je=r(LIr,"data2vec-vision"),LIr.forEach(t),uje=r(LTe," \u2014 "),U9=n(LTe,"A",{href:!0});var xIr=s(U9);bje=r(xIr,"Data2VecVisionConfig"),xIr.forEach(t),vje=r(LTe," (Data2VecVision model)"),LTe.forEach(t),Fje=i(F),im=n(F,"LI",{});var xTe=s(im);WY=n(xTe,"STRONG",{});var kIr=s(WY);Tje=r(kIr,"deberta"),kIr.forEach(t),Mje=r(xTe," \u2014 "),J9=n(xTe,"A",{href:!0});var SIr=s(J9);Eje=r(SIr,"DebertaConfig"),SIr.forEach(t),Cje=r(xTe," (DeBERTa model)"),xTe.forEach(t),wje=i(F),dm=n(F,"LI",{});var kTe=s(dm);HY=n(kTe,"STRONG",{});var RIr=s(HY);Aje=r(RIr,"deberta-v2"),RIr.forEach(t),yje=r(kTe," \u2014 "),Y9=n(kTe,"A",{href:!0});var BIr=s(Y9);Lje=r(BIr,"DebertaV2Config"),BIr.forEach(t),xje=r(kTe," (DeBERTa-v2 model)"),kTe.forEach(t),kje=i(F),cm=n(F,"LI",{});var STe=s(cm);UY=n(STe,"STRONG",{});var PIr=s(UY);Sje=r(PIr,"decision_transformer"),PIr.forEach(t),Rje=r(STe," \u2014 "),K9=n(STe,"A",{href:!0});var $Ir=s(K9);Bje=r($Ir,"DecisionTransformerConfig"),$Ir.forEach(t),Pje=r(STe," (Decision Transformer model)"),STe.forEach(t),$je=i(F),fm=n(F,"LI",{});var RTe=s(fm);JY=n(RTe,"STRONG",{});var IIr=s(JY);Ije=r(IIr,"deit"),IIr.forEach(t),qje=r(RTe," \u2014 "),Z9=n(RTe,"A",{href:!0});var qIr=s(Z9);Nje=r(qIr,"DeiTConfig"),qIr.forEach(t),jje=r(RTe," (DeiT model)"),RTe.forEach(t),Dje=i(F),mm=n(F,"LI",{});var BTe=s(mm);YY=n(BTe,"STRONG",{});var NIr=s(YY);Gje=r(NIr,"detr"),NIr.forEach(t),Oje=r(BTe," \u2014 "),ex=n(BTe,"A",{href:!0});var jIr=s(ex);Vje=r(jIr,"DetrConfig"),jIr.forEach(t),Xje=r(BTe," (DETR model)"),BTe.forEach(t),zje=i(F),gm=n(F,"LI",{});var PTe=s(gm);KY=n(PTe,"STRONG",{});var DIr=s(KY);Qje=r(DIr,"distilbert"),DIr.forEach(t),Wje=r(PTe," \u2014 "),ox=n(PTe,"A",{href:!0});var GIr=s(ox);Hje=r(GIr,"DistilBertConfig"),GIr.forEach(t),Uje=r(PTe," (DistilBERT model)"),PTe.forEach(t),Jje=i(F),hm=n(F,"LI",{});var $Te=s(hm);ZY=n($Te,"STRONG",{});var OIr=s(ZY);Yje=r(OIr,"dpr"),OIr.forEach(t),Kje=r($Te," \u2014 "),rx=n($Te,"A",{href:!0});var VIr=s(rx);Zje=r(VIr,"DPRConfig"),VIr.forEach(t),eDe=r($Te," (DPR model)"),$Te.forEach(t),oDe=i(F),pm=n(F,"LI",{});var ITe=s(pm);eK=n(ITe,"STRONG",{});var XIr=s(eK);rDe=r(XIr,"dpt"),XIr.forEach(t),tDe=r(ITe," \u2014 "),tx=n(ITe,"A",{href:!0});var zIr=s(tx);aDe=r(zIr,"DPTConfig"),zIr.forEach(t),nDe=r(ITe," (DPT model)"),ITe.forEach(t),sDe=i(F),_m=n(F,"LI",{});var qTe=s(_m);oK=n(qTe,"STRONG",{});var QIr=s(oK);lDe=r(QIr,"electra"),QIr.forEach(t),iDe=r(qTe," \u2014 "),ax=n(qTe,"A",{href:!0});var WIr=s(ax);dDe=r(WIr,"ElectraConfig"),WIr.forEach(t),cDe=r(qTe," (ELECTRA model)"),qTe.forEach(t),fDe=i(F),um=n(F,"LI",{});var NTe=s(um);rK=n(NTe,"STRONG",{});var HIr=s(rK);mDe=r(HIr,"encoder-decoder"),HIr.forEach(t),gDe=r(NTe," \u2014 "),nx=n(NTe,"A",{href:!0});var UIr=s(nx);hDe=r(UIr,"EncoderDecoderConfig"),UIr.forEach(t),pDe=r(NTe," (Encoder decoder model)"),NTe.forEach(t),_De=i(F),bm=n(F,"LI",{});var jTe=s(bm);tK=n(jTe,"STRONG",{});var JIr=s(tK);uDe=r(JIr,"flaubert"),JIr.forEach(t),bDe=r(jTe," \u2014 "),sx=n(jTe,"A",{href:!0});var YIr=s(sx);vDe=r(YIr,"FlaubertConfig"),YIr.forEach(t),FDe=r(jTe," (FlauBERT model)"),jTe.forEach(t),TDe=i(F),vm=n(F,"LI",{});var DTe=s(vm);aK=n(DTe,"STRONG",{});var KIr=s(aK);MDe=r(KIr,"flava"),KIr.forEach(t),EDe=r(DTe," \u2014 "),lx=n(DTe,"A",{href:!0});var ZIr=s(lx);CDe=r(ZIr,"FLAVAConfig"),ZIr.forEach(t),wDe=r(DTe," (FLAVA model)"),DTe.forEach(t),ADe=i(F),Fm=n(F,"LI",{});var GTe=s(Fm);nK=n(GTe,"STRONG",{});var eqr=s(nK);yDe=r(eqr,"fnet"),eqr.forEach(t),LDe=r(GTe," \u2014 "),ix=n(GTe,"A",{href:!0});var oqr=s(ix);xDe=r(oqr,"FNetConfig"),oqr.forEach(t),kDe=r(GTe," (FNet model)"),GTe.forEach(t),SDe=i(F),Tm=n(F,"LI",{});var OTe=s(Tm);sK=n(OTe,"STRONG",{});var rqr=s(sK);RDe=r(rqr,"fsmt"),rqr.forEach(t),BDe=r(OTe," \u2014 "),dx=n(OTe,"A",{href:!0});var tqr=s(dx);PDe=r(tqr,"FSMTConfig"),tqr.forEach(t),$De=r(OTe," (FairSeq Machine-Translation model)"),OTe.forEach(t),IDe=i(F),Mm=n(F,"LI",{});var VTe=s(Mm);lK=n(VTe,"STRONG",{});var aqr=s(lK);qDe=r(aqr,"funnel"),aqr.forEach(t),NDe=r(VTe," \u2014 "),cx=n(VTe,"A",{href:!0});var nqr=s(cx);jDe=r(nqr,"FunnelConfig"),nqr.forEach(t),DDe=r(VTe," (Funnel Transformer model)"),VTe.forEach(t),GDe=i(F),Em=n(F,"LI",{});var XTe=s(Em);iK=n(XTe,"STRONG",{});var sqr=s(iK);ODe=r(sqr,"glpn"),sqr.forEach(t),VDe=r(XTe," \u2014 "),fx=n(XTe,"A",{href:!0});var lqr=s(fx);XDe=r(lqr,"GLPNConfig"),lqr.forEach(t),zDe=r(XTe," (GLPN model)"),XTe.forEach(t),QDe=i(F),Cm=n(F,"LI",{});var zTe=s(Cm);dK=n(zTe,"STRONG",{});var iqr=s(dK);WDe=r(iqr,"gpt2"),iqr.forEach(t),HDe=r(zTe," \u2014 "),mx=n(zTe,"A",{href:!0});var dqr=s(mx);UDe=r(dqr,"GPT2Config"),dqr.forEach(t),JDe=r(zTe," (OpenAI GPT-2 model)"),zTe.forEach(t),YDe=i(F),wm=n(F,"LI",{});var QTe=s(wm);cK=n(QTe,"STRONG",{});var cqr=s(cK);KDe=r(cqr,"gpt_neo"),cqr.forEach(t),ZDe=r(QTe," \u2014 "),gx=n(QTe,"A",{href:!0});var fqr=s(gx);eGe=r(fqr,"GPTNeoConfig"),fqr.forEach(t),oGe=r(QTe," (GPT Neo model)"),QTe.forEach(t),rGe=i(F),Am=n(F,"LI",{});var WTe=s(Am);fK=n(WTe,"STRONG",{});var mqr=s(fK);tGe=r(mqr,"gptj"),mqr.forEach(t),aGe=r(WTe," \u2014 "),hx=n(WTe,"A",{href:!0});var gqr=s(hx);nGe=r(gqr,"GPTJConfig"),gqr.forEach(t),sGe=r(WTe," (GPT-J model)"),WTe.forEach(t),lGe=i(F),ym=n(F,"LI",{});var HTe=s(ym);mK=n(HTe,"STRONG",{});var hqr=s(mK);iGe=r(hqr,"hubert"),hqr.forEach(t),dGe=r(HTe," \u2014 "),px=n(HTe,"A",{href:!0});var pqr=s(px);cGe=r(pqr,"HubertConfig"),pqr.forEach(t),fGe=r(HTe," (Hubert model)"),HTe.forEach(t),mGe=i(F),Lm=n(F,"LI",{});var UTe=s(Lm);gK=n(UTe,"STRONG",{});var _qr=s(gK);gGe=r(_qr,"ibert"),_qr.forEach(t),hGe=r(UTe," \u2014 "),_x=n(UTe,"A",{href:!0});var uqr=s(_x);pGe=r(uqr,"IBertConfig"),uqr.forEach(t),_Ge=r(UTe," (I-BERT model)"),UTe.forEach(t),uGe=i(F),xm=n(F,"LI",{});var JTe=s(xm);hK=n(JTe,"STRONG",{});var bqr=s(hK);bGe=r(bqr,"imagegpt"),bqr.forEach(t),vGe=r(JTe," \u2014 "),ux=n(JTe,"A",{href:!0});var vqr=s(ux);FGe=r(vqr,"ImageGPTConfig"),vqr.forEach(t),TGe=r(JTe," (ImageGPT model)"),JTe.forEach(t),MGe=i(F),km=n(F,"LI",{});var YTe=s(km);pK=n(YTe,"STRONG",{});var Fqr=s(pK);EGe=r(Fqr,"layoutlm"),Fqr.forEach(t),CGe=r(YTe," \u2014 "),bx=n(YTe,"A",{href:!0});var Tqr=s(bx);wGe=r(Tqr,"LayoutLMConfig"),Tqr.forEach(t),AGe=r(YTe," (LayoutLM model)"),YTe.forEach(t),yGe=i(F),Sm=n(F,"LI",{});var KTe=s(Sm);_K=n(KTe,"STRONG",{});var Mqr=s(_K);LGe=r(Mqr,"layoutlmv2"),Mqr.forEach(t),xGe=r(KTe," \u2014 "),vx=n(KTe,"A",{href:!0});var Eqr=s(vx);kGe=r(Eqr,"LayoutLMv2Config"),Eqr.forEach(t),SGe=r(KTe," (LayoutLMv2 model)"),KTe.forEach(t),RGe=i(F),Rm=n(F,"LI",{});var ZTe=s(Rm);uK=n(ZTe,"STRONG",{});var Cqr=s(uK);BGe=r(Cqr,"led"),Cqr.forEach(t),PGe=r(ZTe," \u2014 "),Fx=n(ZTe,"A",{href:!0});var wqr=s(Fx);$Ge=r(wqr,"LEDConfig"),wqr.forEach(t),IGe=r(ZTe," (LED model)"),ZTe.forEach(t),qGe=i(F),Bm=n(F,"LI",{});var eMe=s(Bm);bK=n(eMe,"STRONG",{});var Aqr=s(bK);NGe=r(Aqr,"longformer"),Aqr.forEach(t),jGe=r(eMe," \u2014 "),Tx=n(eMe,"A",{href:!0});var yqr=s(Tx);DGe=r(yqr,"LongformerConfig"),yqr.forEach(t),GGe=r(eMe," (Longformer model)"),eMe.forEach(t),OGe=i(F),Pm=n(F,"LI",{});var oMe=s(Pm);vK=n(oMe,"STRONG",{});var Lqr=s(vK);VGe=r(Lqr,"luke"),Lqr.forEach(t),XGe=r(oMe," \u2014 "),Mx=n(oMe,"A",{href:!0});var xqr=s(Mx);zGe=r(xqr,"LukeConfig"),xqr.forEach(t),QGe=r(oMe," (LUKE model)"),oMe.forEach(t),WGe=i(F),$m=n(F,"LI",{});var rMe=s($m);FK=n(rMe,"STRONG",{});var kqr=s(FK);HGe=r(kqr,"lxmert"),kqr.forEach(t),UGe=r(rMe," \u2014 "),Ex=n(rMe,"A",{href:!0});var Sqr=s(Ex);JGe=r(Sqr,"LxmertConfig"),Sqr.forEach(t),YGe=r(rMe," (LXMERT model)"),rMe.forEach(t),KGe=i(F),Im=n(F,"LI",{});var tMe=s(Im);TK=n(tMe,"STRONG",{});var Rqr=s(TK);ZGe=r(Rqr,"m2m_100"),Rqr.forEach(t),eOe=r(tMe," \u2014 "),Cx=n(tMe,"A",{href:!0});var Bqr=s(Cx);oOe=r(Bqr,"M2M100Config"),Bqr.forEach(t),rOe=r(tMe," (M2M100 model)"),tMe.forEach(t),tOe=i(F),qm=n(F,"LI",{});var aMe=s(qm);MK=n(aMe,"STRONG",{});var Pqr=s(MK);aOe=r(Pqr,"marian"),Pqr.forEach(t),nOe=r(aMe," \u2014 "),wx=n(aMe,"A",{href:!0});var $qr=s(wx);sOe=r($qr,"MarianConfig"),$qr.forEach(t),lOe=r(aMe," (Marian model)"),aMe.forEach(t),iOe=i(F),Nm=n(F,"LI",{});var nMe=s(Nm);EK=n(nMe,"STRONG",{});var Iqr=s(EK);dOe=r(Iqr,"maskformer"),Iqr.forEach(t),cOe=r(nMe," \u2014 "),Ax=n(nMe,"A",{href:!0});var qqr=s(Ax);fOe=r(qqr,"MaskFormerConfig"),qqr.forEach(t),mOe=r(nMe," (MaskFormer model)"),nMe.forEach(t),gOe=i(F),jm=n(F,"LI",{});var sMe=s(jm);CK=n(sMe,"STRONG",{});var Nqr=s(CK);hOe=r(Nqr,"mbart"),Nqr.forEach(t),pOe=r(sMe," \u2014 "),yx=n(sMe,"A",{href:!0});var jqr=s(yx);_Oe=r(jqr,"MBartConfig"),jqr.forEach(t),uOe=r(sMe," (mBART model)"),sMe.forEach(t),bOe=i(F),Dm=n(F,"LI",{});var lMe=s(Dm);wK=n(lMe,"STRONG",{});var Dqr=s(wK);vOe=r(Dqr,"megatron-bert"),Dqr.forEach(t),FOe=r(lMe," \u2014 "),Lx=n(lMe,"A",{href:!0});var Gqr=s(Lx);TOe=r(Gqr,"MegatronBertConfig"),Gqr.forEach(t),MOe=r(lMe," (MegatronBert model)"),lMe.forEach(t),EOe=i(F),Gm=n(F,"LI",{});var iMe=s(Gm);AK=n(iMe,"STRONG",{});var Oqr=s(AK);COe=r(Oqr,"mobilebert"),Oqr.forEach(t),wOe=r(iMe," \u2014 "),xx=n(iMe,"A",{href:!0});var Vqr=s(xx);AOe=r(Vqr,"MobileBertConfig"),Vqr.forEach(t),yOe=r(iMe," (MobileBERT model)"),iMe.forEach(t),LOe=i(F),Om=n(F,"LI",{});var dMe=s(Om);yK=n(dMe,"STRONG",{});var Xqr=s(yK);xOe=r(Xqr,"mpnet"),Xqr.forEach(t),kOe=r(dMe," \u2014 "),kx=n(dMe,"A",{href:!0});var zqr=s(kx);SOe=r(zqr,"MPNetConfig"),zqr.forEach(t),ROe=r(dMe," (MPNet model)"),dMe.forEach(t),BOe=i(F),Vm=n(F,"LI",{});var cMe=s(Vm);LK=n(cMe,"STRONG",{});var Qqr=s(LK);POe=r(Qqr,"mt5"),Qqr.forEach(t),$Oe=r(cMe," \u2014 "),Sx=n(cMe,"A",{href:!0});var Wqr=s(Sx);IOe=r(Wqr,"MT5Config"),Wqr.forEach(t),qOe=r(cMe," (mT5 model)"),cMe.forEach(t),NOe=i(F),Xm=n(F,"LI",{});var fMe=s(Xm);xK=n(fMe,"STRONG",{});var Hqr=s(xK);jOe=r(Hqr,"nystromformer"),Hqr.forEach(t),DOe=r(fMe," \u2014 "),Rx=n(fMe,"A",{href:!0});var Uqr=s(Rx);GOe=r(Uqr,"NystromformerConfig"),Uqr.forEach(t),OOe=r(fMe," (Nystromformer model)"),fMe.forEach(t),VOe=i(F),zm=n(F,"LI",{});var mMe=s(zm);kK=n(mMe,"STRONG",{});var Jqr=s(kK);XOe=r(Jqr,"openai-gpt"),Jqr.forEach(t),zOe=r(mMe," \u2014 "),Bx=n(mMe,"A",{href:!0});var Yqr=s(Bx);QOe=r(Yqr,"OpenAIGPTConfig"),Yqr.forEach(t),WOe=r(mMe," (OpenAI GPT model)"),mMe.forEach(t),HOe=i(F),Qm=n(F,"LI",{});var gMe=s(Qm);SK=n(gMe,"STRONG",{});var Kqr=s(SK);UOe=r(Kqr,"pegasus"),Kqr.forEach(t),JOe=r(gMe," \u2014 "),Px=n(gMe,"A",{href:!0});var Zqr=s(Px);YOe=r(Zqr,"PegasusConfig"),Zqr.forEach(t),KOe=r(gMe," (Pegasus model)"),gMe.forEach(t),ZOe=i(F),Wm=n(F,"LI",{});var hMe=s(Wm);RK=n(hMe,"STRONG",{});var eNr=s(RK);eVe=r(eNr,"perceiver"),eNr.forEach(t),oVe=r(hMe," \u2014 "),$x=n(hMe,"A",{href:!0});var oNr=s($x);rVe=r(oNr,"PerceiverConfig"),oNr.forEach(t),tVe=r(hMe," (Perceiver model)"),hMe.forEach(t),aVe=i(F),Hm=n(F,"LI",{});var pMe=s(Hm);BK=n(pMe,"STRONG",{});var rNr=s(BK);nVe=r(rNr,"plbart"),rNr.forEach(t),sVe=r(pMe," \u2014 "),Ix=n(pMe,"A",{href:!0});var tNr=s(Ix);lVe=r(tNr,"PLBartConfig"),tNr.forEach(t),iVe=r(pMe," (PLBart model)"),pMe.forEach(t),dVe=i(F),Um=n(F,"LI",{});var _Me=s(Um);PK=n(_Me,"STRONG",{});var aNr=s(PK);cVe=r(aNr,"poolformer"),aNr.forEach(t),fVe=r(_Me," \u2014 "),qx=n(_Me,"A",{href:!0});var nNr=s(qx);mVe=r(nNr,"PoolFormerConfig"),nNr.forEach(t),gVe=r(_Me," (PoolFormer model)"),_Me.forEach(t),hVe=i(F),Jm=n(F,"LI",{});var uMe=s(Jm);$K=n(uMe,"STRONG",{});var sNr=s($K);pVe=r(sNr,"prophetnet"),sNr.forEach(t),_Ve=r(uMe," \u2014 "),Nx=n(uMe,"A",{href:!0});var lNr=s(Nx);uVe=r(lNr,"ProphetNetConfig"),lNr.forEach(t),bVe=r(uMe," (ProphetNet model)"),uMe.forEach(t),vVe=i(F),Ym=n(F,"LI",{});var bMe=s(Ym);IK=n(bMe,"STRONG",{});var iNr=s(IK);FVe=r(iNr,"qdqbert"),iNr.forEach(t),TVe=r(bMe," \u2014 "),jx=n(bMe,"A",{href:!0});var dNr=s(jx);MVe=r(dNr,"QDQBertConfig"),dNr.forEach(t),EVe=r(bMe," (QDQBert model)"),bMe.forEach(t),CVe=i(F),Km=n(F,"LI",{});var vMe=s(Km);qK=n(vMe,"STRONG",{});var cNr=s(qK);wVe=r(cNr,"rag"),cNr.forEach(t),AVe=r(vMe," \u2014 "),Dx=n(vMe,"A",{href:!0});var fNr=s(Dx);yVe=r(fNr,"RagConfig"),fNr.forEach(t),LVe=r(vMe," (RAG model)"),vMe.forEach(t),xVe=i(F),Zm=n(F,"LI",{});var FMe=s(Zm);NK=n(FMe,"STRONG",{});var mNr=s(NK);kVe=r(mNr,"realm"),mNr.forEach(t),SVe=r(FMe," \u2014 "),Gx=n(FMe,"A",{href:!0});var gNr=s(Gx);RVe=r(gNr,"RealmConfig"),gNr.forEach(t),BVe=r(FMe," (Realm model)"),FMe.forEach(t),PVe=i(F),eg=n(F,"LI",{});var TMe=s(eg);jK=n(TMe,"STRONG",{});var hNr=s(jK);$Ve=r(hNr,"reformer"),hNr.forEach(t),IVe=r(TMe," \u2014 "),Ox=n(TMe,"A",{href:!0});var pNr=s(Ox);qVe=r(pNr,"ReformerConfig"),pNr.forEach(t),NVe=r(TMe," (Reformer model)"),TMe.forEach(t),jVe=i(F),og=n(F,"LI",{});var MMe=s(og);DK=n(MMe,"STRONG",{});var _Nr=s(DK);DVe=r(_Nr,"regnet"),_Nr.forEach(t),GVe=r(MMe," \u2014 "),Vx=n(MMe,"A",{href:!0});var uNr=s(Vx);OVe=r(uNr,"RegNetConfig"),uNr.forEach(t),VVe=r(MMe," (RegNet model)"),MMe.forEach(t),XVe=i(F),rg=n(F,"LI",{});var EMe=s(rg);GK=n(EMe,"STRONG",{});var bNr=s(GK);zVe=r(bNr,"rembert"),bNr.forEach(t),QVe=r(EMe," \u2014 "),Xx=n(EMe,"A",{href:!0});var vNr=s(Xx);WVe=r(vNr,"RemBertConfig"),vNr.forEach(t),HVe=r(EMe," (RemBERT model)"),EMe.forEach(t),UVe=i(F),tg=n(F,"LI",{});var CMe=s(tg);OK=n(CMe,"STRONG",{});var FNr=s(OK);JVe=r(FNr,"resnet"),FNr.forEach(t),YVe=r(CMe," \u2014 "),zx=n(CMe,"A",{href:!0});var TNr=s(zx);KVe=r(TNr,"ResNetConfig"),TNr.forEach(t),ZVe=r(CMe," (ResNet model)"),CMe.forEach(t),eXe=i(F),ag=n(F,"LI",{});var wMe=s(ag);VK=n(wMe,"STRONG",{});var MNr=s(VK);oXe=r(MNr,"retribert"),MNr.forEach(t),rXe=r(wMe," \u2014 "),Qx=n(wMe,"A",{href:!0});var ENr=s(Qx);tXe=r(ENr,"RetriBertConfig"),ENr.forEach(t),aXe=r(wMe," (RetriBERT model)"),wMe.forEach(t),nXe=i(F),ng=n(F,"LI",{});var AMe=s(ng);XK=n(AMe,"STRONG",{});var CNr=s(XK);sXe=r(CNr,"roberta"),CNr.forEach(t),lXe=r(AMe," \u2014 "),Wx=n(AMe,"A",{href:!0});var wNr=s(Wx);iXe=r(wNr,"RobertaConfig"),wNr.forEach(t),dXe=r(AMe," (RoBERTa model)"),AMe.forEach(t),cXe=i(F),sg=n(F,"LI",{});var yMe=s(sg);zK=n(yMe,"STRONG",{});var ANr=s(zK);fXe=r(ANr,"roformer"),ANr.forEach(t),mXe=r(yMe," \u2014 "),Hx=n(yMe,"A",{href:!0});var yNr=s(Hx);gXe=r(yNr,"RoFormerConfig"),yNr.forEach(t),hXe=r(yMe," (RoFormer model)"),yMe.forEach(t),pXe=i(F),lg=n(F,"LI",{});var LMe=s(lg);QK=n(LMe,"STRONG",{});var LNr=s(QK);_Xe=r(LNr,"segformer"),LNr.forEach(t),uXe=r(LMe," \u2014 "),Ux=n(LMe,"A",{href:!0});var xNr=s(Ux);bXe=r(xNr,"SegformerConfig"),xNr.forEach(t),vXe=r(LMe," (SegFormer model)"),LMe.forEach(t),FXe=i(F),ig=n(F,"LI",{});var xMe=s(ig);WK=n(xMe,"STRONG",{});var kNr=s(WK);TXe=r(kNr,"sew"),kNr.forEach(t),MXe=r(xMe," \u2014 "),Jx=n(xMe,"A",{href:!0});var SNr=s(Jx);EXe=r(SNr,"SEWConfig"),SNr.forEach(t),CXe=r(xMe," (SEW model)"),xMe.forEach(t),wXe=i(F),dg=n(F,"LI",{});var kMe=s(dg);HK=n(kMe,"STRONG",{});var RNr=s(HK);AXe=r(RNr,"sew-d"),RNr.forEach(t),yXe=r(kMe," \u2014 "),Yx=n(kMe,"A",{href:!0});var BNr=s(Yx);LXe=r(BNr,"SEWDConfig"),BNr.forEach(t),xXe=r(kMe," (SEW-D model)"),kMe.forEach(t),kXe=i(F),cg=n(F,"LI",{});var SMe=s(cg);UK=n(SMe,"STRONG",{});var PNr=s(UK);SXe=r(PNr,"speech-encoder-decoder"),PNr.forEach(t),RXe=r(SMe," \u2014 "),Kx=n(SMe,"A",{href:!0});var $Nr=s(Kx);BXe=r($Nr,"SpeechEncoderDecoderConfig"),$Nr.forEach(t),PXe=r(SMe," (Speech Encoder decoder model)"),SMe.forEach(t),$Xe=i(F),fg=n(F,"LI",{});var RMe=s(fg);JK=n(RMe,"STRONG",{});var INr=s(JK);IXe=r(INr,"speech_to_text"),INr.forEach(t),qXe=r(RMe," \u2014 "),Zx=n(RMe,"A",{href:!0});var qNr=s(Zx);NXe=r(qNr,"Speech2TextConfig"),qNr.forEach(t),jXe=r(RMe," (Speech2Text model)"),RMe.forEach(t),DXe=i(F),mg=n(F,"LI",{});var BMe=s(mg);YK=n(BMe,"STRONG",{});var NNr=s(YK);GXe=r(NNr,"speech_to_text_2"),NNr.forEach(t),OXe=r(BMe," \u2014 "),ek=n(BMe,"A",{href:!0});var jNr=s(ek);VXe=r(jNr,"Speech2Text2Config"),jNr.forEach(t),XXe=r(BMe," (Speech2Text2 model)"),BMe.forEach(t),zXe=i(F),gg=n(F,"LI",{});var PMe=s(gg);KK=n(PMe,"STRONG",{});var DNr=s(KK);QXe=r(DNr,"splinter"),DNr.forEach(t),WXe=r(PMe," \u2014 "),ok=n(PMe,"A",{href:!0});var GNr=s(ok);HXe=r(GNr,"SplinterConfig"),GNr.forEach(t),UXe=r(PMe," (Splinter model)"),PMe.forEach(t),JXe=i(F),hg=n(F,"LI",{});var $Me=s(hg);ZK=n($Me,"STRONG",{});var ONr=s(ZK);YXe=r(ONr,"squeezebert"),ONr.forEach(t),KXe=r($Me," \u2014 "),rk=n($Me,"A",{href:!0});var VNr=s(rk);ZXe=r(VNr,"SqueezeBertConfig"),VNr.forEach(t),eze=r($Me," (SqueezeBERT model)"),$Me.forEach(t),oze=i(F),pg=n(F,"LI",{});var IMe=s(pg);eZ=n(IMe,"STRONG",{});var XNr=s(eZ);rze=r(XNr,"swin"),XNr.forEach(t),tze=r(IMe," \u2014 "),tk=n(IMe,"A",{href:!0});var zNr=s(tk);aze=r(zNr,"SwinConfig"),zNr.forEach(t),nze=r(IMe," (Swin model)"),IMe.forEach(t),sze=i(F),_g=n(F,"LI",{});var qMe=s(_g);oZ=n(qMe,"STRONG",{});var QNr=s(oZ);lze=r(QNr,"t5"),QNr.forEach(t),ize=r(qMe," \u2014 "),ak=n(qMe,"A",{href:!0});var WNr=s(ak);dze=r(WNr,"T5Config"),WNr.forEach(t),cze=r(qMe," (T5 model)"),qMe.forEach(t),fze=i(F),ug=n(F,"LI",{});var NMe=s(ug);rZ=n(NMe,"STRONG",{});var HNr=s(rZ);mze=r(HNr,"tapas"),HNr.forEach(t),gze=r(NMe," \u2014 "),nk=n(NMe,"A",{href:!0});var UNr=s(nk);hze=r(UNr,"TapasConfig"),UNr.forEach(t),pze=r(NMe," (TAPAS model)"),NMe.forEach(t),_ze=i(F),bg=n(F,"LI",{});var jMe=s(bg);tZ=n(jMe,"STRONG",{});var JNr=s(tZ);uze=r(JNr,"tapex"),JNr.forEach(t),bze=r(jMe," \u2014 "),sk=n(jMe,"A",{href:!0});var YNr=s(sk);vze=r(YNr,"BartConfig"),YNr.forEach(t),Fze=r(jMe," (TAPEX model)"),jMe.forEach(t),Tze=i(F),vg=n(F,"LI",{});var DMe=s(vg);aZ=n(DMe,"STRONG",{});var KNr=s(aZ);Mze=r(KNr,"transfo-xl"),KNr.forEach(t),Eze=r(DMe," \u2014 "),lk=n(DMe,"A",{href:!0});var ZNr=s(lk);Cze=r(ZNr,"TransfoXLConfig"),ZNr.forEach(t),wze=r(DMe," (Transformer-XL model)"),DMe.forEach(t),Aze=i(F),Fg=n(F,"LI",{});var GMe=s(Fg);nZ=n(GMe,"STRONG",{});var ejr=s(nZ);yze=r(ejr,"trocr"),ejr.forEach(t),Lze=r(GMe," \u2014 "),ik=n(GMe,"A",{href:!0});var ojr=s(ik);xze=r(ojr,"TrOCRConfig"),ojr.forEach(t),kze=r(GMe," (TrOCR model)"),GMe.forEach(t),Sze=i(F),Tg=n(F,"LI",{});var OMe=s(Tg);sZ=n(OMe,"STRONG",{});var rjr=s(sZ);Rze=r(rjr,"unispeech"),rjr.forEach(t),Bze=r(OMe," \u2014 "),dk=n(OMe,"A",{href:!0});var tjr=s(dk);Pze=r(tjr,"UniSpeechConfig"),tjr.forEach(t),$ze=r(OMe," (UniSpeech model)"),OMe.forEach(t),Ize=i(F),Mg=n(F,"LI",{});var VMe=s(Mg);lZ=n(VMe,"STRONG",{});var ajr=s(lZ);qze=r(ajr,"unispeech-sat"),ajr.forEach(t),Nze=r(VMe," \u2014 "),ck=n(VMe,"A",{href:!0});var njr=s(ck);jze=r(njr,"UniSpeechSatConfig"),njr.forEach(t),Dze=r(VMe," (UniSpeechSat model)"),VMe.forEach(t),Gze=i(F),Eg=n(F,"LI",{});var XMe=s(Eg);iZ=n(XMe,"STRONG",{});var sjr=s(iZ);Oze=r(sjr,"van"),sjr.forEach(t),Vze=r(XMe," \u2014 "),fk=n(XMe,"A",{href:!0});var ljr=s(fk);Xze=r(ljr,"VanConfig"),ljr.forEach(t),zze=r(XMe," (VAN model)"),XMe.forEach(t),Qze=i(F),Cg=n(F,"LI",{});var zMe=s(Cg);dZ=n(zMe,"STRONG",{});var ijr=s(dZ);Wze=r(ijr,"vilt"),ijr.forEach(t),Hze=r(zMe," \u2014 "),mk=n(zMe,"A",{href:!0});var djr=s(mk);Uze=r(djr,"ViltConfig"),djr.forEach(t),Jze=r(zMe," (ViLT model)"),zMe.forEach(t),Yze=i(F),wg=n(F,"LI",{});var QMe=s(wg);cZ=n(QMe,"STRONG",{});var cjr=s(cZ);Kze=r(cjr,"vision-encoder-decoder"),cjr.forEach(t),Zze=r(QMe," \u2014 "),gk=n(QMe,"A",{href:!0});var fjr=s(gk);eQe=r(fjr,"VisionEncoderDecoderConfig"),fjr.forEach(t),oQe=r(QMe," (Vision Encoder decoder model)"),QMe.forEach(t),rQe=i(F),Ag=n(F,"LI",{});var WMe=s(Ag);fZ=n(WMe,"STRONG",{});var mjr=s(fZ);tQe=r(mjr,"vision-text-dual-encoder"),mjr.forEach(t),aQe=r(WMe," \u2014 "),hk=n(WMe,"A",{href:!0});var gjr=s(hk);nQe=r(gjr,"VisionTextDualEncoderConfig"),gjr.forEach(t),sQe=r(WMe," (VisionTextDualEncoder model)"),WMe.forEach(t),lQe=i(F),yg=n(F,"LI",{});var HMe=s(yg);mZ=n(HMe,"STRONG",{});var hjr=s(mZ);iQe=r(hjr,"visual_bert"),hjr.forEach(t),dQe=r(HMe," \u2014 "),pk=n(HMe,"A",{href:!0});var pjr=s(pk);cQe=r(pjr,"VisualBertConfig"),pjr.forEach(t),fQe=r(HMe," (VisualBert model)"),HMe.forEach(t),mQe=i(F),Lg=n(F,"LI",{});var UMe=s(Lg);gZ=n(UMe,"STRONG",{});var _jr=s(gZ);gQe=r(_jr,"vit"),_jr.forEach(t),hQe=r(UMe," \u2014 "),_k=n(UMe,"A",{href:!0});var ujr=s(_k);pQe=r(ujr,"ViTConfig"),ujr.forEach(t),_Qe=r(UMe," (ViT model)"),UMe.forEach(t),uQe=i(F),xg=n(F,"LI",{});var JMe=s(xg);hZ=n(JMe,"STRONG",{});var bjr=s(hZ);bQe=r(bjr,"vit_mae"),bjr.forEach(t),vQe=r(JMe," \u2014 "),uk=n(JMe,"A",{href:!0});var vjr=s(uk);FQe=r(vjr,"ViTMAEConfig"),vjr.forEach(t),TQe=r(JMe," (ViTMAE model)"),JMe.forEach(t),MQe=i(F),kg=n(F,"LI",{});var YMe=s(kg);pZ=n(YMe,"STRONG",{});var Fjr=s(pZ);EQe=r(Fjr,"wav2vec2"),Fjr.forEach(t),CQe=r(YMe," \u2014 "),bk=n(YMe,"A",{href:!0});var Tjr=s(bk);wQe=r(Tjr,"Wav2Vec2Config"),Tjr.forEach(t),AQe=r(YMe," (Wav2Vec2 model)"),YMe.forEach(t),yQe=i(F),Sg=n(F,"LI",{});var KMe=s(Sg);_Z=n(KMe,"STRONG",{});var Mjr=s(_Z);LQe=r(Mjr,"wavlm"),Mjr.forEach(t),xQe=r(KMe," \u2014 "),vk=n(KMe,"A",{href:!0});var Ejr=s(vk);kQe=r(Ejr,"WavLMConfig"),Ejr.forEach(t),SQe=r(KMe," (WavLM model)"),KMe.forEach(t),RQe=i(F),Rg=n(F,"LI",{});var ZMe=s(Rg);uZ=n(ZMe,"STRONG",{});var Cjr=s(uZ);BQe=r(Cjr,"xglm"),Cjr.forEach(t),PQe=r(ZMe," \u2014 "),Fk=n(ZMe,"A",{href:!0});var wjr=s(Fk);$Qe=r(wjr,"XGLMConfig"),wjr.forEach(t),IQe=r(ZMe," (XGLM model)"),ZMe.forEach(t),qQe=i(F),Bg=n(F,"LI",{});var eEe=s(Bg);bZ=n(eEe,"STRONG",{});var Ajr=s(bZ);NQe=r(Ajr,"xlm"),Ajr.forEach(t),jQe=r(eEe," \u2014 "),Tk=n(eEe,"A",{href:!0});var yjr=s(Tk);DQe=r(yjr,"XLMConfig"),yjr.forEach(t),GQe=r(eEe," (XLM model)"),eEe.forEach(t),OQe=i(F),Pg=n(F,"LI",{});var oEe=s(Pg);vZ=n(oEe,"STRONG",{});var Ljr=s(vZ);VQe=r(Ljr,"xlm-prophetnet"),Ljr.forEach(t),XQe=r(oEe," \u2014 "),Mk=n(oEe,"A",{href:!0});var xjr=s(Mk);zQe=r(xjr,"XLMProphetNetConfig"),xjr.forEach(t),QQe=r(oEe," (XLMProphetNet model)"),oEe.forEach(t),WQe=i(F),$g=n(F,"LI",{});var rEe=s($g);FZ=n(rEe,"STRONG",{});var kjr=s(FZ);HQe=r(kjr,"xlm-roberta"),kjr.forEach(t),UQe=r(rEe," \u2014 "),Ek=n(rEe,"A",{href:!0});var Sjr=s(Ek);JQe=r(Sjr,"XLMRobertaConfig"),Sjr.forEach(t),YQe=r(rEe," (XLM-RoBERTa model)"),rEe.forEach(t),KQe=i(F),Ig=n(F,"LI",{});var tEe=s(Ig);TZ=n(tEe,"STRONG",{});var Rjr=s(TZ);ZQe=r(Rjr,"xlm-roberta-xl"),Rjr.forEach(t),eWe=r(tEe," \u2014 "),Ck=n(tEe,"A",{href:!0});var Bjr=s(Ck);oWe=r(Bjr,"XLMRobertaXLConfig"),Bjr.forEach(t),rWe=r(tEe," (XLM-RoBERTa-XL model)"),tEe.forEach(t),tWe=i(F),qg=n(F,"LI",{});var aEe=s(qg);MZ=n(aEe,"STRONG",{});var Pjr=s(MZ);aWe=r(Pjr,"xlnet"),Pjr.forEach(t),nWe=r(aEe," \u2014 "),wk=n(aEe,"A",{href:!0});var $jr=s(wk);sWe=r($jr,"XLNetConfig"),$jr.forEach(t),lWe=r(aEe," (XLNet model)"),aEe.forEach(t),iWe=i(F),Ng=n(F,"LI",{});var nEe=s(Ng);EZ=n(nEe,"STRONG",{});var Ijr=s(EZ);dWe=r(Ijr,"yoso"),Ijr.forEach(t),cWe=r(nEe," \u2014 "),Ak=n(nEe,"A",{href:!0});var qjr=s(Ak);fWe=r(qjr,"YosoConfig"),qjr.forEach(t),mWe=r(nEe," (YOSO model)"),nEe.forEach(t),F.forEach(t),gWe=i(ga),CZ=n(ga,"P",{});var Njr=s(CZ);hWe=r(Njr,"Examples:"),Njr.forEach(t),pWe=i(ga),m(XC.$$.fragment,ga),ga.forEach(t),_We=i(Vs),jg=n(Vs,"DIV",{class:!0});var s$e=s(jg);m(zC.$$.fragment,s$e),uWe=i(s$e),wZ=n(s$e,"P",{});var jjr=s(wZ);bWe=r(jjr,"Register a new configuration for this class."),jjr.forEach(t),s$e.forEach(t),Vs.forEach(t),aBe=i(c),Wi=n(c,"H2",{class:!0});var l$e=s(Wi);Dg=n(l$e,"A",{id:!0,class:!0,href:!0});var Djr=s(Dg);AZ=n(Djr,"SPAN",{});var Gjr=s(AZ);m(QC.$$.fragment,Gjr),Gjr.forEach(t),Djr.forEach(t),vWe=i(l$e),yZ=n(l$e,"SPAN",{});var Ojr=s(yZ);FWe=r(Ojr,"AutoTokenizer"),Ojr.forEach(t),l$e.forEach(t),nBe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);m(WC.$$.fragment,Xs),TWe=i(Xs),HC=n(Xs,"P",{});var i$e=s(HC);MWe=r(i$e,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yk=n(i$e,"A",{href:!0});var Vjr=s(yk);EWe=r(Vjr,"AutoTokenizer.from_pretrained()"),Vjr.forEach(t),CWe=r(i$e," class method."),i$e.forEach(t),wWe=i(Xs),UC=n(Xs,"P",{});var d$e=s(UC);AWe=r(d$e,"This class cannot be instantiated directly using "),LZ=n(d$e,"CODE",{});var Xjr=s(LZ);yWe=r(Xjr,"__init__()"),Xjr.forEach(t),LWe=r(d$e," (throws an error)."),d$e.forEach(t),xWe=i(Xs),ho=n(Xs,"DIV",{class:!0});var ha=s(ho);m(JC.$$.fragment,ha),kWe=i(ha),xZ=n(ha,"P",{});var zjr=s(xZ);SWe=r(zjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),zjr.forEach(t),RWe=i(ha),Oa=n(ha,"P",{});var P3=s(Oa);BWe=r(P3,"The tokenizer class to instantiate is selected based on the "),kZ=n(P3,"CODE",{});var Qjr=s(kZ);PWe=r(Qjr,"model_type"),Qjr.forEach(t),$We=r(P3,` property of the config object (either
passed as an argument or loaded from `),SZ=n(P3,"CODE",{});var Wjr=s(SZ);IWe=r(Wjr,"pretrained_model_name_or_path"),Wjr.forEach(t),qWe=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RZ=n(P3,"CODE",{});var Hjr=s(RZ);NWe=r(Hjr,"pretrained_model_name_or_path"),Hjr.forEach(t),jWe=r(P3,":"),P3.forEach(t),DWe=i(ha),E=n(ha,"UL",{});var w=s(E);Wn=n(w,"LI",{});var x7=s(Wn);BZ=n(x7,"STRONG",{});var Ujr=s(BZ);GWe=r(Ujr,"albert"),Ujr.forEach(t),OWe=r(x7," \u2014 "),Lk=n(x7,"A",{href:!0});var Jjr=s(Lk);VWe=r(Jjr,"AlbertTokenizer"),Jjr.forEach(t),XWe=r(x7," or "),xk=n(x7,"A",{href:!0});var Yjr=s(xk);zWe=r(Yjr,"AlbertTokenizerFast"),Yjr.forEach(t),QWe=r(x7," (ALBERT model)"),x7.forEach(t),WWe=i(w),Hn=n(w,"LI",{});var k7=s(Hn);PZ=n(k7,"STRONG",{});var Kjr=s(PZ);HWe=r(Kjr,"bart"),Kjr.forEach(t),UWe=r(k7," \u2014 "),kk=n(k7,"A",{href:!0});var Zjr=s(kk);JWe=r(Zjr,"BartTokenizer"),Zjr.forEach(t),YWe=r(k7," or "),Sk=n(k7,"A",{href:!0});var eDr=s(Sk);KWe=r(eDr,"BartTokenizerFast"),eDr.forEach(t),ZWe=r(k7," (BART model)"),k7.forEach(t),eHe=i(w),Un=n(w,"LI",{});var S7=s(Un);$Z=n(S7,"STRONG",{});var oDr=s($Z);oHe=r(oDr,"barthez"),oDr.forEach(t),rHe=r(S7," \u2014 "),Rk=n(S7,"A",{href:!0});var rDr=s(Rk);tHe=r(rDr,"BarthezTokenizer"),rDr.forEach(t),aHe=r(S7," or "),Bk=n(S7,"A",{href:!0});var tDr=s(Bk);nHe=r(tDr,"BarthezTokenizerFast"),tDr.forEach(t),sHe=r(S7," (BARThez model)"),S7.forEach(t),lHe=i(w),Gg=n(w,"LI",{});var sEe=s(Gg);IZ=n(sEe,"STRONG",{});var aDr=s(IZ);iHe=r(aDr,"bartpho"),aDr.forEach(t),dHe=r(sEe," \u2014 "),Pk=n(sEe,"A",{href:!0});var nDr=s(Pk);cHe=r(nDr,"BartphoTokenizer"),nDr.forEach(t),fHe=r(sEe," (BARTpho model)"),sEe.forEach(t),mHe=i(w),Jn=n(w,"LI",{});var R7=s(Jn);qZ=n(R7,"STRONG",{});var sDr=s(qZ);gHe=r(sDr,"bert"),sDr.forEach(t),hHe=r(R7," \u2014 "),$k=n(R7,"A",{href:!0});var lDr=s($k);pHe=r(lDr,"BertTokenizer"),lDr.forEach(t),_He=r(R7," or "),Ik=n(R7,"A",{href:!0});var iDr=s(Ik);uHe=r(iDr,"BertTokenizerFast"),iDr.forEach(t),bHe=r(R7," (BERT model)"),R7.forEach(t),vHe=i(w),Og=n(w,"LI",{});var lEe=s(Og);NZ=n(lEe,"STRONG",{});var dDr=s(NZ);FHe=r(dDr,"bert-generation"),dDr.forEach(t),THe=r(lEe," \u2014 "),qk=n(lEe,"A",{href:!0});var cDr=s(qk);MHe=r(cDr,"BertGenerationTokenizer"),cDr.forEach(t),EHe=r(lEe," (Bert Generation model)"),lEe.forEach(t),CHe=i(w),Vg=n(w,"LI",{});var iEe=s(Vg);jZ=n(iEe,"STRONG",{});var fDr=s(jZ);wHe=r(fDr,"bert-japanese"),fDr.forEach(t),AHe=r(iEe," \u2014 "),Nk=n(iEe,"A",{href:!0});var mDr=s(Nk);yHe=r(mDr,"BertJapaneseTokenizer"),mDr.forEach(t),LHe=r(iEe," (BertJapanese model)"),iEe.forEach(t),xHe=i(w),Xg=n(w,"LI",{});var dEe=s(Xg);DZ=n(dEe,"STRONG",{});var gDr=s(DZ);kHe=r(gDr,"bertweet"),gDr.forEach(t),SHe=r(dEe," \u2014 "),jk=n(dEe,"A",{href:!0});var hDr=s(jk);RHe=r(hDr,"BertweetTokenizer"),hDr.forEach(t),BHe=r(dEe," (Bertweet model)"),dEe.forEach(t),PHe=i(w),Yn=n(w,"LI",{});var B7=s(Yn);GZ=n(B7,"STRONG",{});var pDr=s(GZ);$He=r(pDr,"big_bird"),pDr.forEach(t),IHe=r(B7," \u2014 "),Dk=n(B7,"A",{href:!0});var _Dr=s(Dk);qHe=r(_Dr,"BigBirdTokenizer"),_Dr.forEach(t),NHe=r(B7," or "),Gk=n(B7,"A",{href:!0});var uDr=s(Gk);jHe=r(uDr,"BigBirdTokenizerFast"),uDr.forEach(t),DHe=r(B7," (BigBird model)"),B7.forEach(t),GHe=i(w),Kn=n(w,"LI",{});var P7=s(Kn);OZ=n(P7,"STRONG",{});var bDr=s(OZ);OHe=r(bDr,"bigbird_pegasus"),bDr.forEach(t),VHe=r(P7," \u2014 "),Ok=n(P7,"A",{href:!0});var vDr=s(Ok);XHe=r(vDr,"PegasusTokenizer"),vDr.forEach(t),zHe=r(P7," or "),Vk=n(P7,"A",{href:!0});var FDr=s(Vk);QHe=r(FDr,"PegasusTokenizerFast"),FDr.forEach(t),WHe=r(P7," (BigBirdPegasus model)"),P7.forEach(t),HHe=i(w),Zn=n(w,"LI",{});var $7=s(Zn);VZ=n($7,"STRONG",{});var TDr=s(VZ);UHe=r(TDr,"blenderbot"),TDr.forEach(t),JHe=r($7," \u2014 "),Xk=n($7,"A",{href:!0});var MDr=s(Xk);YHe=r(MDr,"BlenderbotTokenizer"),MDr.forEach(t),KHe=r($7," or "),zk=n($7,"A",{href:!0});var EDr=s(zk);ZHe=r(EDr,"BlenderbotTokenizerFast"),EDr.forEach(t),eUe=r($7," (Blenderbot model)"),$7.forEach(t),oUe=i(w),zg=n(w,"LI",{});var cEe=s(zg);XZ=n(cEe,"STRONG",{});var CDr=s(XZ);rUe=r(CDr,"blenderbot-small"),CDr.forEach(t),tUe=r(cEe," \u2014 "),Qk=n(cEe,"A",{href:!0});var wDr=s(Qk);aUe=r(wDr,"BlenderbotSmallTokenizer"),wDr.forEach(t),nUe=r(cEe," (BlenderbotSmall model)"),cEe.forEach(t),sUe=i(w),Qg=n(w,"LI",{});var fEe=s(Qg);zZ=n(fEe,"STRONG",{});var ADr=s(zZ);lUe=r(ADr,"byt5"),ADr.forEach(t),iUe=r(fEe," \u2014 "),Wk=n(fEe,"A",{href:!0});var yDr=s(Wk);dUe=r(yDr,"ByT5Tokenizer"),yDr.forEach(t),cUe=r(fEe," (ByT5 model)"),fEe.forEach(t),fUe=i(w),es=n(w,"LI",{});var I7=s(es);QZ=n(I7,"STRONG",{});var LDr=s(QZ);mUe=r(LDr,"camembert"),LDr.forEach(t),gUe=r(I7," \u2014 "),Hk=n(I7,"A",{href:!0});var xDr=s(Hk);hUe=r(xDr,"CamembertTokenizer"),xDr.forEach(t),pUe=r(I7," or "),Uk=n(I7,"A",{href:!0});var kDr=s(Uk);_Ue=r(kDr,"CamembertTokenizerFast"),kDr.forEach(t),uUe=r(I7," (CamemBERT model)"),I7.forEach(t),bUe=i(w),Wg=n(w,"LI",{});var mEe=s(Wg);WZ=n(mEe,"STRONG",{});var SDr=s(WZ);vUe=r(SDr,"canine"),SDr.forEach(t),FUe=r(mEe," \u2014 "),Jk=n(mEe,"A",{href:!0});var RDr=s(Jk);TUe=r(RDr,"CanineTokenizer"),RDr.forEach(t),MUe=r(mEe," (Canine model)"),mEe.forEach(t),EUe=i(w),os=n(w,"LI",{});var q7=s(os);HZ=n(q7,"STRONG",{});var BDr=s(HZ);CUe=r(BDr,"clip"),BDr.forEach(t),wUe=r(q7," \u2014 "),Yk=n(q7,"A",{href:!0});var PDr=s(Yk);AUe=r(PDr,"CLIPTokenizer"),PDr.forEach(t),yUe=r(q7," or "),Kk=n(q7,"A",{href:!0});var $Dr=s(Kk);LUe=r($Dr,"CLIPTokenizerFast"),$Dr.forEach(t),xUe=r(q7," (CLIP model)"),q7.forEach(t),kUe=i(w),rs=n(w,"LI",{});var N7=s(rs);UZ=n(N7,"STRONG",{});var IDr=s(UZ);SUe=r(IDr,"convbert"),IDr.forEach(t),RUe=r(N7," \u2014 "),Zk=n(N7,"A",{href:!0});var qDr=s(Zk);BUe=r(qDr,"ConvBertTokenizer"),qDr.forEach(t),PUe=r(N7," or "),eS=n(N7,"A",{href:!0});var NDr=s(eS);$Ue=r(NDr,"ConvBertTokenizerFast"),NDr.forEach(t),IUe=r(N7," (ConvBERT model)"),N7.forEach(t),qUe=i(w),ts=n(w,"LI",{});var j7=s(ts);JZ=n(j7,"STRONG",{});var jDr=s(JZ);NUe=r(jDr,"cpm"),jDr.forEach(t),jUe=r(j7," \u2014 "),oS=n(j7,"A",{href:!0});var DDr=s(oS);DUe=r(DDr,"CpmTokenizer"),DDr.forEach(t),GUe=r(j7," or "),YZ=n(j7,"CODE",{});var GDr=s(YZ);OUe=r(GDr,"CpmTokenizerFast"),GDr.forEach(t),VUe=r(j7," (CPM model)"),j7.forEach(t),XUe=i(w),Hg=n(w,"LI",{});var gEe=s(Hg);KZ=n(gEe,"STRONG",{});var ODr=s(KZ);zUe=r(ODr,"ctrl"),ODr.forEach(t),QUe=r(gEe," \u2014 "),rS=n(gEe,"A",{href:!0});var VDr=s(rS);WUe=r(VDr,"CTRLTokenizer"),VDr.forEach(t),HUe=r(gEe," (CTRL model)"),gEe.forEach(t),UUe=i(w),as=n(w,"LI",{});var D7=s(as);ZZ=n(D7,"STRONG",{});var XDr=s(ZZ);JUe=r(XDr,"deberta"),XDr.forEach(t),YUe=r(D7," \u2014 "),tS=n(D7,"A",{href:!0});var zDr=s(tS);KUe=r(zDr,"DebertaTokenizer"),zDr.forEach(t),ZUe=r(D7," or "),aS=n(D7,"A",{href:!0});var QDr=s(aS);eJe=r(QDr,"DebertaTokenizerFast"),QDr.forEach(t),oJe=r(D7," (DeBERTa model)"),D7.forEach(t),rJe=i(w),Ug=n(w,"LI",{});var hEe=s(Ug);eee=n(hEe,"STRONG",{});var WDr=s(eee);tJe=r(WDr,"deberta-v2"),WDr.forEach(t),aJe=r(hEe," \u2014 "),nS=n(hEe,"A",{href:!0});var HDr=s(nS);nJe=r(HDr,"DebertaV2Tokenizer"),HDr.forEach(t),sJe=r(hEe," (DeBERTa-v2 model)"),hEe.forEach(t),lJe=i(w),ns=n(w,"LI",{});var G7=s(ns);oee=n(G7,"STRONG",{});var UDr=s(oee);iJe=r(UDr,"distilbert"),UDr.forEach(t),dJe=r(G7," \u2014 "),sS=n(G7,"A",{href:!0});var JDr=s(sS);cJe=r(JDr,"DistilBertTokenizer"),JDr.forEach(t),fJe=r(G7," or "),lS=n(G7,"A",{href:!0});var YDr=s(lS);mJe=r(YDr,"DistilBertTokenizerFast"),YDr.forEach(t),gJe=r(G7," (DistilBERT model)"),G7.forEach(t),hJe=i(w),ss=n(w,"LI",{});var O7=s(ss);ree=n(O7,"STRONG",{});var KDr=s(ree);pJe=r(KDr,"dpr"),KDr.forEach(t),_Je=r(O7," \u2014 "),iS=n(O7,"A",{href:!0});var ZDr=s(iS);uJe=r(ZDr,"DPRQuestionEncoderTokenizer"),ZDr.forEach(t),bJe=r(O7," or "),dS=n(O7,"A",{href:!0});var eGr=s(dS);vJe=r(eGr,"DPRQuestionEncoderTokenizerFast"),eGr.forEach(t),FJe=r(O7," (DPR model)"),O7.forEach(t),TJe=i(w),ls=n(w,"LI",{});var V7=s(ls);tee=n(V7,"STRONG",{});var oGr=s(tee);MJe=r(oGr,"electra"),oGr.forEach(t),EJe=r(V7," \u2014 "),cS=n(V7,"A",{href:!0});var rGr=s(cS);CJe=r(rGr,"ElectraTokenizer"),rGr.forEach(t),wJe=r(V7," or "),fS=n(V7,"A",{href:!0});var tGr=s(fS);AJe=r(tGr,"ElectraTokenizerFast"),tGr.forEach(t),yJe=r(V7," (ELECTRA model)"),V7.forEach(t),LJe=i(w),Jg=n(w,"LI",{});var pEe=s(Jg);aee=n(pEe,"STRONG",{});var aGr=s(aee);xJe=r(aGr,"flaubert"),aGr.forEach(t),kJe=r(pEe," \u2014 "),mS=n(pEe,"A",{href:!0});var nGr=s(mS);SJe=r(nGr,"FlaubertTokenizer"),nGr.forEach(t),RJe=r(pEe," (FlauBERT model)"),pEe.forEach(t),BJe=i(w),is=n(w,"LI",{});var X7=s(is);nee=n(X7,"STRONG",{});var sGr=s(nee);PJe=r(sGr,"fnet"),sGr.forEach(t),$Je=r(X7," \u2014 "),gS=n(X7,"A",{href:!0});var lGr=s(gS);IJe=r(lGr,"FNetTokenizer"),lGr.forEach(t),qJe=r(X7," or "),hS=n(X7,"A",{href:!0});var iGr=s(hS);NJe=r(iGr,"FNetTokenizerFast"),iGr.forEach(t),jJe=r(X7," (FNet model)"),X7.forEach(t),DJe=i(w),Yg=n(w,"LI",{});var _Ee=s(Yg);see=n(_Ee,"STRONG",{});var dGr=s(see);GJe=r(dGr,"fsmt"),dGr.forEach(t),OJe=r(_Ee," \u2014 "),pS=n(_Ee,"A",{href:!0});var cGr=s(pS);VJe=r(cGr,"FSMTTokenizer"),cGr.forEach(t),XJe=r(_Ee," (FairSeq Machine-Translation model)"),_Ee.forEach(t),zJe=i(w),ds=n(w,"LI",{});var z7=s(ds);lee=n(z7,"STRONG",{});var fGr=s(lee);QJe=r(fGr,"funnel"),fGr.forEach(t),WJe=r(z7," \u2014 "),_S=n(z7,"A",{href:!0});var mGr=s(_S);HJe=r(mGr,"FunnelTokenizer"),mGr.forEach(t),UJe=r(z7," or "),uS=n(z7,"A",{href:!0});var gGr=s(uS);JJe=r(gGr,"FunnelTokenizerFast"),gGr.forEach(t),YJe=r(z7," (Funnel Transformer model)"),z7.forEach(t),KJe=i(w),cs=n(w,"LI",{});var Q7=s(cs);iee=n(Q7,"STRONG",{});var hGr=s(iee);ZJe=r(hGr,"gpt2"),hGr.forEach(t),eYe=r(Q7," \u2014 "),bS=n(Q7,"A",{href:!0});var pGr=s(bS);oYe=r(pGr,"GPT2Tokenizer"),pGr.forEach(t),rYe=r(Q7," or "),vS=n(Q7,"A",{href:!0});var _Gr=s(vS);tYe=r(_Gr,"GPT2TokenizerFast"),_Gr.forEach(t),aYe=r(Q7," (OpenAI GPT-2 model)"),Q7.forEach(t),nYe=i(w),fs=n(w,"LI",{});var W7=s(fs);dee=n(W7,"STRONG",{});var uGr=s(dee);sYe=r(uGr,"gpt_neo"),uGr.forEach(t),lYe=r(W7," \u2014 "),FS=n(W7,"A",{href:!0});var bGr=s(FS);iYe=r(bGr,"GPT2Tokenizer"),bGr.forEach(t),dYe=r(W7," or "),TS=n(W7,"A",{href:!0});var vGr=s(TS);cYe=r(vGr,"GPT2TokenizerFast"),vGr.forEach(t),fYe=r(W7," (GPT Neo model)"),W7.forEach(t),mYe=i(w),ms=n(w,"LI",{});var H7=s(ms);cee=n(H7,"STRONG",{});var FGr=s(cee);gYe=r(FGr,"herbert"),FGr.forEach(t),hYe=r(H7," \u2014 "),MS=n(H7,"A",{href:!0});var TGr=s(MS);pYe=r(TGr,"HerbertTokenizer"),TGr.forEach(t),_Ye=r(H7," or "),ES=n(H7,"A",{href:!0});var MGr=s(ES);uYe=r(MGr,"HerbertTokenizerFast"),MGr.forEach(t),bYe=r(H7," (HerBERT model)"),H7.forEach(t),vYe=i(w),Kg=n(w,"LI",{});var uEe=s(Kg);fee=n(uEe,"STRONG",{});var EGr=s(fee);FYe=r(EGr,"hubert"),EGr.forEach(t),TYe=r(uEe," \u2014 "),CS=n(uEe,"A",{href:!0});var CGr=s(CS);MYe=r(CGr,"Wav2Vec2CTCTokenizer"),CGr.forEach(t),EYe=r(uEe," (Hubert model)"),uEe.forEach(t),CYe=i(w),gs=n(w,"LI",{});var U7=s(gs);mee=n(U7,"STRONG",{});var wGr=s(mee);wYe=r(wGr,"ibert"),wGr.forEach(t),AYe=r(U7," \u2014 "),wS=n(U7,"A",{href:!0});var AGr=s(wS);yYe=r(AGr,"RobertaTokenizer"),AGr.forEach(t),LYe=r(U7," or "),AS=n(U7,"A",{href:!0});var yGr=s(AS);xYe=r(yGr,"RobertaTokenizerFast"),yGr.forEach(t),kYe=r(U7," (I-BERT model)"),U7.forEach(t),SYe=i(w),hs=n(w,"LI",{});var J7=s(hs);gee=n(J7,"STRONG",{});var LGr=s(gee);RYe=r(LGr,"layoutlm"),LGr.forEach(t),BYe=r(J7," \u2014 "),yS=n(J7,"A",{href:!0});var xGr=s(yS);PYe=r(xGr,"LayoutLMTokenizer"),xGr.forEach(t),$Ye=r(J7," or "),LS=n(J7,"A",{href:!0});var kGr=s(LS);IYe=r(kGr,"LayoutLMTokenizerFast"),kGr.forEach(t),qYe=r(J7," (LayoutLM model)"),J7.forEach(t),NYe=i(w),ps=n(w,"LI",{});var Y7=s(ps);hee=n(Y7,"STRONG",{});var SGr=s(hee);jYe=r(SGr,"layoutlmv2"),SGr.forEach(t),DYe=r(Y7," \u2014 "),xS=n(Y7,"A",{href:!0});var RGr=s(xS);GYe=r(RGr,"LayoutLMv2Tokenizer"),RGr.forEach(t),OYe=r(Y7," or "),kS=n(Y7,"A",{href:!0});var BGr=s(kS);VYe=r(BGr,"LayoutLMv2TokenizerFast"),BGr.forEach(t),XYe=r(Y7," (LayoutLMv2 model)"),Y7.forEach(t),zYe=i(w),_s=n(w,"LI",{});var K7=s(_s);pee=n(K7,"STRONG",{});var PGr=s(pee);QYe=r(PGr,"layoutxlm"),PGr.forEach(t),WYe=r(K7," \u2014 "),SS=n(K7,"A",{href:!0});var $Gr=s(SS);HYe=r($Gr,"LayoutXLMTokenizer"),$Gr.forEach(t),UYe=r(K7," or "),RS=n(K7,"A",{href:!0});var IGr=s(RS);JYe=r(IGr,"LayoutXLMTokenizerFast"),IGr.forEach(t),YYe=r(K7," (LayoutXLM model)"),K7.forEach(t),KYe=i(w),us=n(w,"LI",{});var Z7=s(us);_ee=n(Z7,"STRONG",{});var qGr=s(_ee);ZYe=r(qGr,"led"),qGr.forEach(t),eKe=r(Z7," \u2014 "),BS=n(Z7,"A",{href:!0});var NGr=s(BS);oKe=r(NGr,"LEDTokenizer"),NGr.forEach(t),rKe=r(Z7," or "),PS=n(Z7,"A",{href:!0});var jGr=s(PS);tKe=r(jGr,"LEDTokenizerFast"),jGr.forEach(t),aKe=r(Z7," (LED model)"),Z7.forEach(t),nKe=i(w),bs=n(w,"LI",{});var e9=s(bs);uee=n(e9,"STRONG",{});var DGr=s(uee);sKe=r(DGr,"longformer"),DGr.forEach(t),lKe=r(e9," \u2014 "),$S=n(e9,"A",{href:!0});var GGr=s($S);iKe=r(GGr,"LongformerTokenizer"),GGr.forEach(t),dKe=r(e9," or "),IS=n(e9,"A",{href:!0});var OGr=s(IS);cKe=r(OGr,"LongformerTokenizerFast"),OGr.forEach(t),fKe=r(e9," (Longformer model)"),e9.forEach(t),mKe=i(w),Zg=n(w,"LI",{});var bEe=s(Zg);bee=n(bEe,"STRONG",{});var VGr=s(bee);gKe=r(VGr,"luke"),VGr.forEach(t),hKe=r(bEe," \u2014 "),qS=n(bEe,"A",{href:!0});var XGr=s(qS);pKe=r(XGr,"LukeTokenizer"),XGr.forEach(t),_Ke=r(bEe," (LUKE model)"),bEe.forEach(t),uKe=i(w),vs=n(w,"LI",{});var o9=s(vs);vee=n(o9,"STRONG",{});var zGr=s(vee);bKe=r(zGr,"lxmert"),zGr.forEach(t),vKe=r(o9," \u2014 "),NS=n(o9,"A",{href:!0});var QGr=s(NS);FKe=r(QGr,"LxmertTokenizer"),QGr.forEach(t),TKe=r(o9," or "),jS=n(o9,"A",{href:!0});var WGr=s(jS);MKe=r(WGr,"LxmertTokenizerFast"),WGr.forEach(t),EKe=r(o9," (LXMERT model)"),o9.forEach(t),CKe=i(w),eh=n(w,"LI",{});var vEe=s(eh);Fee=n(vEe,"STRONG",{});var HGr=s(Fee);wKe=r(HGr,"m2m_100"),HGr.forEach(t),AKe=r(vEe," \u2014 "),DS=n(vEe,"A",{href:!0});var UGr=s(DS);yKe=r(UGr,"M2M100Tokenizer"),UGr.forEach(t),LKe=r(vEe," (M2M100 model)"),vEe.forEach(t),xKe=i(w),oh=n(w,"LI",{});var FEe=s(oh);Tee=n(FEe,"STRONG",{});var JGr=s(Tee);kKe=r(JGr,"marian"),JGr.forEach(t),SKe=r(FEe," \u2014 "),GS=n(FEe,"A",{href:!0});var YGr=s(GS);RKe=r(YGr,"MarianTokenizer"),YGr.forEach(t),BKe=r(FEe," (Marian model)"),FEe.forEach(t),PKe=i(w),Fs=n(w,"LI",{});var r9=s(Fs);Mee=n(r9,"STRONG",{});var KGr=s(Mee);$Ke=r(KGr,"mbart"),KGr.forEach(t),IKe=r(r9," \u2014 "),OS=n(r9,"A",{href:!0});var ZGr=s(OS);qKe=r(ZGr,"MBartTokenizer"),ZGr.forEach(t),NKe=r(r9," or "),VS=n(r9,"A",{href:!0});var eOr=s(VS);jKe=r(eOr,"MBartTokenizerFast"),eOr.forEach(t),DKe=r(r9," (mBART model)"),r9.forEach(t),GKe=i(w),Ts=n(w,"LI",{});var t9=s(Ts);Eee=n(t9,"STRONG",{});var oOr=s(Eee);OKe=r(oOr,"mbart50"),oOr.forEach(t),VKe=r(t9," \u2014 "),XS=n(t9,"A",{href:!0});var rOr=s(XS);XKe=r(rOr,"MBart50Tokenizer"),rOr.forEach(t),zKe=r(t9," or "),zS=n(t9,"A",{href:!0});var tOr=s(zS);QKe=r(tOr,"MBart50TokenizerFast"),tOr.forEach(t),WKe=r(t9," (mBART-50 model)"),t9.forEach(t),HKe=i(w),rh=n(w,"LI",{});var TEe=s(rh);Cee=n(TEe,"STRONG",{});var aOr=s(Cee);UKe=r(aOr,"mluke"),aOr.forEach(t),JKe=r(TEe," \u2014 "),QS=n(TEe,"A",{href:!0});var nOr=s(QS);YKe=r(nOr,"MLukeTokenizer"),nOr.forEach(t),KKe=r(TEe," (mLUKE model)"),TEe.forEach(t),ZKe=i(w),Ms=n(w,"LI",{});var a9=s(Ms);wee=n(a9,"STRONG",{});var sOr=s(wee);eZe=r(sOr,"mobilebert"),sOr.forEach(t),oZe=r(a9," \u2014 "),WS=n(a9,"A",{href:!0});var lOr=s(WS);rZe=r(lOr,"MobileBertTokenizer"),lOr.forEach(t),tZe=r(a9," or "),HS=n(a9,"A",{href:!0});var iOr=s(HS);aZe=r(iOr,"MobileBertTokenizerFast"),iOr.forEach(t),nZe=r(a9," (MobileBERT model)"),a9.forEach(t),sZe=i(w),Es=n(w,"LI",{});var n9=s(Es);Aee=n(n9,"STRONG",{});var dOr=s(Aee);lZe=r(dOr,"mpnet"),dOr.forEach(t),iZe=r(n9," \u2014 "),US=n(n9,"A",{href:!0});var cOr=s(US);dZe=r(cOr,"MPNetTokenizer"),cOr.forEach(t),cZe=r(n9," or "),JS=n(n9,"A",{href:!0});var fOr=s(JS);fZe=r(fOr,"MPNetTokenizerFast"),fOr.forEach(t),mZe=r(n9," (MPNet model)"),n9.forEach(t),gZe=i(w),Cs=n(w,"LI",{});var s9=s(Cs);yee=n(s9,"STRONG",{});var mOr=s(yee);hZe=r(mOr,"mt5"),mOr.forEach(t),pZe=r(s9," \u2014 "),YS=n(s9,"A",{href:!0});var gOr=s(YS);_Ze=r(gOr,"MT5Tokenizer"),gOr.forEach(t),uZe=r(s9," or "),KS=n(s9,"A",{href:!0});var hOr=s(KS);bZe=r(hOr,"MT5TokenizerFast"),hOr.forEach(t),vZe=r(s9," (mT5 model)"),s9.forEach(t),FZe=i(w),ws=n(w,"LI",{});var l9=s(ws);Lee=n(l9,"STRONG",{});var pOr=s(Lee);TZe=r(pOr,"openai-gpt"),pOr.forEach(t),MZe=r(l9," \u2014 "),ZS=n(l9,"A",{href:!0});var _Or=s(ZS);EZe=r(_Or,"OpenAIGPTTokenizer"),_Or.forEach(t),CZe=r(l9," or "),eR=n(l9,"A",{href:!0});var uOr=s(eR);wZe=r(uOr,"OpenAIGPTTokenizerFast"),uOr.forEach(t),AZe=r(l9," (OpenAI GPT model)"),l9.forEach(t),yZe=i(w),As=n(w,"LI",{});var i9=s(As);xee=n(i9,"STRONG",{});var bOr=s(xee);LZe=r(bOr,"pegasus"),bOr.forEach(t),xZe=r(i9," \u2014 "),oR=n(i9,"A",{href:!0});var vOr=s(oR);kZe=r(vOr,"PegasusTokenizer"),vOr.forEach(t),SZe=r(i9," or "),rR=n(i9,"A",{href:!0});var FOr=s(rR);RZe=r(FOr,"PegasusTokenizerFast"),FOr.forEach(t),BZe=r(i9," (Pegasus model)"),i9.forEach(t),PZe=i(w),th=n(w,"LI",{});var MEe=s(th);kee=n(MEe,"STRONG",{});var TOr=s(kee);$Ze=r(TOr,"perceiver"),TOr.forEach(t),IZe=r(MEe," \u2014 "),tR=n(MEe,"A",{href:!0});var MOr=s(tR);qZe=r(MOr,"PerceiverTokenizer"),MOr.forEach(t),NZe=r(MEe," (Perceiver model)"),MEe.forEach(t),jZe=i(w),ah=n(w,"LI",{});var EEe=s(ah);See=n(EEe,"STRONG",{});var EOr=s(See);DZe=r(EOr,"phobert"),EOr.forEach(t),GZe=r(EEe," \u2014 "),aR=n(EEe,"A",{href:!0});var COr=s(aR);OZe=r(COr,"PhobertTokenizer"),COr.forEach(t),VZe=r(EEe," (PhoBERT model)"),EEe.forEach(t),XZe=i(w),nh=n(w,"LI",{});var CEe=s(nh);Ree=n(CEe,"STRONG",{});var wOr=s(Ree);zZe=r(wOr,"plbart"),wOr.forEach(t),QZe=r(CEe," \u2014 "),nR=n(CEe,"A",{href:!0});var AOr=s(nR);WZe=r(AOr,"PLBartTokenizer"),AOr.forEach(t),HZe=r(CEe," (PLBart model)"),CEe.forEach(t),UZe=i(w),sh=n(w,"LI",{});var wEe=s(sh);Bee=n(wEe,"STRONG",{});var yOr=s(Bee);JZe=r(yOr,"prophetnet"),yOr.forEach(t),YZe=r(wEe," \u2014 "),sR=n(wEe,"A",{href:!0});var LOr=s(sR);KZe=r(LOr,"ProphetNetTokenizer"),LOr.forEach(t),ZZe=r(wEe," (ProphetNet model)"),wEe.forEach(t),eeo=i(w),ys=n(w,"LI",{});var d9=s(ys);Pee=n(d9,"STRONG",{});var xOr=s(Pee);oeo=r(xOr,"qdqbert"),xOr.forEach(t),reo=r(d9," \u2014 "),lR=n(d9,"A",{href:!0});var kOr=s(lR);teo=r(kOr,"BertTokenizer"),kOr.forEach(t),aeo=r(d9," or "),iR=n(d9,"A",{href:!0});var SOr=s(iR);neo=r(SOr,"BertTokenizerFast"),SOr.forEach(t),seo=r(d9," (QDQBert model)"),d9.forEach(t),leo=i(w),lh=n(w,"LI",{});var AEe=s(lh);$ee=n(AEe,"STRONG",{});var ROr=s($ee);ieo=r(ROr,"rag"),ROr.forEach(t),deo=r(AEe," \u2014 "),dR=n(AEe,"A",{href:!0});var BOr=s(dR);ceo=r(BOr,"RagTokenizer"),BOr.forEach(t),feo=r(AEe," (RAG model)"),AEe.forEach(t),meo=i(w),Ls=n(w,"LI",{});var c9=s(Ls);Iee=n(c9,"STRONG",{});var POr=s(Iee);geo=r(POr,"realm"),POr.forEach(t),heo=r(c9," \u2014 "),cR=n(c9,"A",{href:!0});var $Or=s(cR);peo=r($Or,"RealmTokenizer"),$Or.forEach(t),_eo=r(c9," or "),fR=n(c9,"A",{href:!0});var IOr=s(fR);ueo=r(IOr,"RealmTokenizerFast"),IOr.forEach(t),beo=r(c9," (Realm model)"),c9.forEach(t),veo=i(w),xs=n(w,"LI",{});var f9=s(xs);qee=n(f9,"STRONG",{});var qOr=s(qee);Feo=r(qOr,"reformer"),qOr.forEach(t),Teo=r(f9," \u2014 "),mR=n(f9,"A",{href:!0});var NOr=s(mR);Meo=r(NOr,"ReformerTokenizer"),NOr.forEach(t),Eeo=r(f9," or "),gR=n(f9,"A",{href:!0});var jOr=s(gR);Ceo=r(jOr,"ReformerTokenizerFast"),jOr.forEach(t),weo=r(f9," (Reformer model)"),f9.forEach(t),Aeo=i(w),ks=n(w,"LI",{});var m9=s(ks);Nee=n(m9,"STRONG",{});var DOr=s(Nee);yeo=r(DOr,"rembert"),DOr.forEach(t),Leo=r(m9," \u2014 "),hR=n(m9,"A",{href:!0});var GOr=s(hR);xeo=r(GOr,"RemBertTokenizer"),GOr.forEach(t),keo=r(m9," or "),pR=n(m9,"A",{href:!0});var OOr=s(pR);Seo=r(OOr,"RemBertTokenizerFast"),OOr.forEach(t),Reo=r(m9," (RemBERT model)"),m9.forEach(t),Beo=i(w),Ss=n(w,"LI",{});var g9=s(Ss);jee=n(g9,"STRONG",{});var VOr=s(jee);Peo=r(VOr,"retribert"),VOr.forEach(t),$eo=r(g9," \u2014 "),_R=n(g9,"A",{href:!0});var XOr=s(_R);Ieo=r(XOr,"RetriBertTokenizer"),XOr.forEach(t),qeo=r(g9," or "),uR=n(g9,"A",{href:!0});var zOr=s(uR);Neo=r(zOr,"RetriBertTokenizerFast"),zOr.forEach(t),jeo=r(g9," (RetriBERT model)"),g9.forEach(t),Deo=i(w),Rs=n(w,"LI",{});var h9=s(Rs);Dee=n(h9,"STRONG",{});var QOr=s(Dee);Geo=r(QOr,"roberta"),QOr.forEach(t),Oeo=r(h9," \u2014 "),bR=n(h9,"A",{href:!0});var WOr=s(bR);Veo=r(WOr,"RobertaTokenizer"),WOr.forEach(t),Xeo=r(h9," or "),vR=n(h9,"A",{href:!0});var HOr=s(vR);zeo=r(HOr,"RobertaTokenizerFast"),HOr.forEach(t),Qeo=r(h9," (RoBERTa model)"),h9.forEach(t),Weo=i(w),Bs=n(w,"LI",{});var p9=s(Bs);Gee=n(p9,"STRONG",{});var UOr=s(Gee);Heo=r(UOr,"roformer"),UOr.forEach(t),Ueo=r(p9," \u2014 "),FR=n(p9,"A",{href:!0});var JOr=s(FR);Jeo=r(JOr,"RoFormerTokenizer"),JOr.forEach(t),Yeo=r(p9," or "),TR=n(p9,"A",{href:!0});var YOr=s(TR);Keo=r(YOr,"RoFormerTokenizerFast"),YOr.forEach(t),Zeo=r(p9," (RoFormer model)"),p9.forEach(t),eoo=i(w),ih=n(w,"LI",{});var yEe=s(ih);Oee=n(yEe,"STRONG",{});var KOr=s(Oee);ooo=r(KOr,"speech_to_text"),KOr.forEach(t),roo=r(yEe," \u2014 "),MR=n(yEe,"A",{href:!0});var ZOr=s(MR);too=r(ZOr,"Speech2TextTokenizer"),ZOr.forEach(t),aoo=r(yEe," (Speech2Text model)"),yEe.forEach(t),noo=i(w),dh=n(w,"LI",{});var LEe=s(dh);Vee=n(LEe,"STRONG",{});var eVr=s(Vee);soo=r(eVr,"speech_to_text_2"),eVr.forEach(t),loo=r(LEe," \u2014 "),ER=n(LEe,"A",{href:!0});var oVr=s(ER);ioo=r(oVr,"Speech2Text2Tokenizer"),oVr.forEach(t),doo=r(LEe," (Speech2Text2 model)"),LEe.forEach(t),coo=i(w),Ps=n(w,"LI",{});var _9=s(Ps);Xee=n(_9,"STRONG",{});var rVr=s(Xee);foo=r(rVr,"splinter"),rVr.forEach(t),moo=r(_9," \u2014 "),CR=n(_9,"A",{href:!0});var tVr=s(CR);goo=r(tVr,"SplinterTokenizer"),tVr.forEach(t),hoo=r(_9," or "),wR=n(_9,"A",{href:!0});var aVr=s(wR);poo=r(aVr,"SplinterTokenizerFast"),aVr.forEach(t),_oo=r(_9," (Splinter model)"),_9.forEach(t),uoo=i(w),$s=n(w,"LI",{});var u9=s($s);zee=n(u9,"STRONG",{});var nVr=s(zee);boo=r(nVr,"squeezebert"),nVr.forEach(t),voo=r(u9," \u2014 "),AR=n(u9,"A",{href:!0});var sVr=s(AR);Foo=r(sVr,"SqueezeBertTokenizer"),sVr.forEach(t),Too=r(u9," or "),yR=n(u9,"A",{href:!0});var lVr=s(yR);Moo=r(lVr,"SqueezeBertTokenizerFast"),lVr.forEach(t),Eoo=r(u9," (SqueezeBERT model)"),u9.forEach(t),Coo=i(w),Is=n(w,"LI",{});var b9=s(Is);Qee=n(b9,"STRONG",{});var iVr=s(Qee);woo=r(iVr,"t5"),iVr.forEach(t),Aoo=r(b9," \u2014 "),LR=n(b9,"A",{href:!0});var dVr=s(LR);yoo=r(dVr,"T5Tokenizer"),dVr.forEach(t),Loo=r(b9," or "),xR=n(b9,"A",{href:!0});var cVr=s(xR);xoo=r(cVr,"T5TokenizerFast"),cVr.forEach(t),koo=r(b9," (T5 model)"),b9.forEach(t),Soo=i(w),ch=n(w,"LI",{});var xEe=s(ch);Wee=n(xEe,"STRONG",{});var fVr=s(Wee);Roo=r(fVr,"tapas"),fVr.forEach(t),Boo=r(xEe," \u2014 "),kR=n(xEe,"A",{href:!0});var mVr=s(kR);Poo=r(mVr,"TapasTokenizer"),mVr.forEach(t),$oo=r(xEe," (TAPAS model)"),xEe.forEach(t),Ioo=i(w),fh=n(w,"LI",{});var kEe=s(fh);Hee=n(kEe,"STRONG",{});var gVr=s(Hee);qoo=r(gVr,"tapex"),gVr.forEach(t),Noo=r(kEe," \u2014 "),SR=n(kEe,"A",{href:!0});var hVr=s(SR);joo=r(hVr,"TapexTokenizer"),hVr.forEach(t),Doo=r(kEe," (TAPEX model)"),kEe.forEach(t),Goo=i(w),mh=n(w,"LI",{});var SEe=s(mh);Uee=n(SEe,"STRONG",{});var pVr=s(Uee);Ooo=r(pVr,"transfo-xl"),pVr.forEach(t),Voo=r(SEe," \u2014 "),RR=n(SEe,"A",{href:!0});var _Vr=s(RR);Xoo=r(_Vr,"TransfoXLTokenizer"),_Vr.forEach(t),zoo=r(SEe," (Transformer-XL model)"),SEe.forEach(t),Qoo=i(w),gh=n(w,"LI",{});var REe=s(gh);Jee=n(REe,"STRONG",{});var uVr=s(Jee);Woo=r(uVr,"wav2vec2"),uVr.forEach(t),Hoo=r(REe," \u2014 "),BR=n(REe,"A",{href:!0});var bVr=s(BR);Uoo=r(bVr,"Wav2Vec2CTCTokenizer"),bVr.forEach(t),Joo=r(REe," (Wav2Vec2 model)"),REe.forEach(t),Yoo=i(w),hh=n(w,"LI",{});var BEe=s(hh);Yee=n(BEe,"STRONG",{});var vVr=s(Yee);Koo=r(vVr,"wav2vec2_phoneme"),vVr.forEach(t),Zoo=r(BEe," \u2014 "),PR=n(BEe,"A",{href:!0});var FVr=s(PR);ero=r(FVr,"Wav2Vec2PhonemeCTCTokenizer"),FVr.forEach(t),oro=r(BEe," (Wav2Vec2Phoneme model)"),BEe.forEach(t),rro=i(w),qs=n(w,"LI",{});var v9=s(qs);Kee=n(v9,"STRONG",{});var TVr=s(Kee);tro=r(TVr,"xglm"),TVr.forEach(t),aro=r(v9," \u2014 "),$R=n(v9,"A",{href:!0});var MVr=s($R);nro=r(MVr,"XGLMTokenizer"),MVr.forEach(t),sro=r(v9," or "),IR=n(v9,"A",{href:!0});var EVr=s(IR);lro=r(EVr,"XGLMTokenizerFast"),EVr.forEach(t),iro=r(v9," (XGLM model)"),v9.forEach(t),dro=i(w),ph=n(w,"LI",{});var PEe=s(ph);Zee=n(PEe,"STRONG",{});var CVr=s(Zee);cro=r(CVr,"xlm"),CVr.forEach(t),fro=r(PEe," \u2014 "),qR=n(PEe,"A",{href:!0});var wVr=s(qR);mro=r(wVr,"XLMTokenizer"),wVr.forEach(t),gro=r(PEe," (XLM model)"),PEe.forEach(t),hro=i(w),_h=n(w,"LI",{});var $Ee=s(_h);eoe=n($Ee,"STRONG",{});var AVr=s(eoe);pro=r(AVr,"xlm-prophetnet"),AVr.forEach(t),_ro=r($Ee," \u2014 "),NR=n($Ee,"A",{href:!0});var yVr=s(NR);uro=r(yVr,"XLMProphetNetTokenizer"),yVr.forEach(t),bro=r($Ee," (XLMProphetNet model)"),$Ee.forEach(t),vro=i(w),Ns=n(w,"LI",{});var F9=s(Ns);ooe=n(F9,"STRONG",{});var LVr=s(ooe);Fro=r(LVr,"xlm-roberta"),LVr.forEach(t),Tro=r(F9," \u2014 "),jR=n(F9,"A",{href:!0});var xVr=s(jR);Mro=r(xVr,"XLMRobertaTokenizer"),xVr.forEach(t),Ero=r(F9," or "),DR=n(F9,"A",{href:!0});var kVr=s(DR);Cro=r(kVr,"XLMRobertaTokenizerFast"),kVr.forEach(t),wro=r(F9," (XLM-RoBERTa model)"),F9.forEach(t),Aro=i(w),js=n(w,"LI",{});var T9=s(js);roe=n(T9,"STRONG",{});var SVr=s(roe);yro=r(SVr,"xlnet"),SVr.forEach(t),Lro=r(T9," \u2014 "),GR=n(T9,"A",{href:!0});var RVr=s(GR);xro=r(RVr,"XLNetTokenizer"),RVr.forEach(t),kro=r(T9," or "),OR=n(T9,"A",{href:!0});var BVr=s(OR);Sro=r(BVr,"XLNetTokenizerFast"),BVr.forEach(t),Rro=r(T9," (XLNet model)"),T9.forEach(t),w.forEach(t),Bro=i(ha),toe=n(ha,"P",{});var PVr=s(toe);Pro=r(PVr,"Examples:"),PVr.forEach(t),$ro=i(ha),m(YC.$$.fragment,ha),ha.forEach(t),Iro=i(Xs),uh=n(Xs,"DIV",{class:!0});var c$e=s(uh);m(KC.$$.fragment,c$e),qro=i(c$e),aoe=n(c$e,"P",{});var $Vr=s(aoe);Nro=r($Vr,"Register a new tokenizer in this mapping."),$Vr.forEach(t),c$e.forEach(t),Xs.forEach(t),sBe=i(c),Hi=n(c,"H2",{class:!0});var f$e=s(Hi);bh=n(f$e,"A",{id:!0,class:!0,href:!0});var IVr=s(bh);noe=n(IVr,"SPAN",{});var qVr=s(noe);m(ZC.$$.fragment,qVr),qVr.forEach(t),IVr.forEach(t),jro=i(f$e),soe=n(f$e,"SPAN",{});var NVr=s(soe);Dro=r(NVr,"AutoFeatureExtractor"),NVr.forEach(t),f$e.forEach(t),lBe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);m(ew.$$.fragment,zs),Gro=i(zs),ow=n(zs,"P",{});var m$e=s(ow);Oro=r(m$e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VR=n(m$e,"A",{href:!0});var jVr=s(VR);Vro=r(jVr,"AutoFeatureExtractor.from_pretrained()"),jVr.forEach(t),Xro=r(m$e," class method."),m$e.forEach(t),zro=i(zs),rw=n(zs,"P",{});var g$e=s(rw);Qro=r(g$e,"This class cannot be instantiated directly using "),loe=n(g$e,"CODE",{});var DVr=s(loe);Wro=r(DVr,"__init__()"),DVr.forEach(t),Hro=r(g$e," (throws an error)."),g$e.forEach(t),Uro=i(zs),$e=n(zs,"DIV",{class:!0});var Nt=s($e);m(tw.$$.fragment,Nt),Jro=i(Nt),ioe=n(Nt,"P",{});var GVr=s(ioe);Yro=r(GVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),GVr.forEach(t),Kro=i(Nt),Va=n(Nt,"P",{});var $3=s(Va);Zro=r($3,"The feature extractor class to instantiate is selected based on the "),doe=n($3,"CODE",{});var OVr=s(doe);eto=r(OVr,"model_type"),OVr.forEach(t),oto=r($3,` property of the config object
(either passed as an argument or loaded from `),coe=n($3,"CODE",{});var VVr=s(coe);rto=r(VVr,"pretrained_model_name_or_path"),VVr.forEach(t),tto=r($3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),foe=n($3,"CODE",{});var XVr=s(foe);ato=r(XVr,"pretrained_model_name_or_path"),XVr.forEach(t),nto=r($3,":"),$3.forEach(t),sto=i(Nt),J=n(Nt,"UL",{});var oe=s(J);vh=n(oe,"LI",{});var IEe=s(vh);moe=n(IEe,"STRONG",{});var zVr=s(moe);lto=r(zVr,"beit"),zVr.forEach(t),ito=r(IEe," \u2014 "),XR=n(IEe,"A",{href:!0});var QVr=s(XR);dto=r(QVr,"BeitFeatureExtractor"),QVr.forEach(t),cto=r(IEe," (BEiT model)"),IEe.forEach(t),fto=i(oe),Fh=n(oe,"LI",{});var qEe=s(Fh);goe=n(qEe,"STRONG",{});var WVr=s(goe);mto=r(WVr,"clip"),WVr.forEach(t),gto=r(qEe," \u2014 "),zR=n(qEe,"A",{href:!0});var HVr=s(zR);hto=r(HVr,"CLIPFeatureExtractor"),HVr.forEach(t),pto=r(qEe," (CLIP model)"),qEe.forEach(t),_to=i(oe),Th=n(oe,"LI",{});var NEe=s(Th);hoe=n(NEe,"STRONG",{});var UVr=s(hoe);uto=r(UVr,"convnext"),UVr.forEach(t),bto=r(NEe," \u2014 "),QR=n(NEe,"A",{href:!0});var JVr=s(QR);vto=r(JVr,"ConvNextFeatureExtractor"),JVr.forEach(t),Fto=r(NEe," (ConvNext model)"),NEe.forEach(t),Tto=i(oe),Mh=n(oe,"LI",{});var jEe=s(Mh);poe=n(jEe,"STRONG",{});var YVr=s(poe);Mto=r(YVr,"deit"),YVr.forEach(t),Eto=r(jEe," \u2014 "),WR=n(jEe,"A",{href:!0});var KVr=s(WR);Cto=r(KVr,"DeiTFeatureExtractor"),KVr.forEach(t),wto=r(jEe," (DeiT model)"),jEe.forEach(t),Ato=i(oe),Eh=n(oe,"LI",{});var DEe=s(Eh);_oe=n(DEe,"STRONG",{});var ZVr=s(_oe);yto=r(ZVr,"detr"),ZVr.forEach(t),Lto=r(DEe," \u2014 "),HR=n(DEe,"A",{href:!0});var eXr=s(HR);xto=r(eXr,"DetrFeatureExtractor"),eXr.forEach(t),kto=r(DEe," (DETR model)"),DEe.forEach(t),Sto=i(oe),Ch=n(oe,"LI",{});var GEe=s(Ch);uoe=n(GEe,"STRONG",{});var oXr=s(uoe);Rto=r(oXr,"flava"),oXr.forEach(t),Bto=r(GEe," \u2014 "),UR=n(GEe,"A",{href:!0});var rXr=s(UR);Pto=r(rXr,"FLAVAFeatureExtractor"),rXr.forEach(t),$to=r(GEe," (FLAVA model)"),GEe.forEach(t),Ito=i(oe),wh=n(oe,"LI",{});var OEe=s(wh);boe=n(OEe,"STRONG",{});var tXr=s(boe);qto=r(tXr,"hubert"),tXr.forEach(t),Nto=r(OEe," \u2014 "),JR=n(OEe,"A",{href:!0});var aXr=s(JR);jto=r(aXr,"Wav2Vec2FeatureExtractor"),aXr.forEach(t),Dto=r(OEe," (Hubert model)"),OEe.forEach(t),Gto=i(oe),Ah=n(oe,"LI",{});var VEe=s(Ah);voe=n(VEe,"STRONG",{});var nXr=s(voe);Oto=r(nXr,"layoutlmv2"),nXr.forEach(t),Vto=r(VEe," \u2014 "),YR=n(VEe,"A",{href:!0});var sXr=s(YR);Xto=r(sXr,"LayoutLMv2FeatureExtractor"),sXr.forEach(t),zto=r(VEe," (LayoutLMv2 model)"),VEe.forEach(t),Qto=i(oe),yh=n(oe,"LI",{});var XEe=s(yh);Foe=n(XEe,"STRONG",{});var lXr=s(Foe);Wto=r(lXr,"maskformer"),lXr.forEach(t),Hto=r(XEe," \u2014 "),KR=n(XEe,"A",{href:!0});var iXr=s(KR);Uto=r(iXr,"MaskFormerFeatureExtractor"),iXr.forEach(t),Jto=r(XEe," (MaskFormer model)"),XEe.forEach(t),Yto=i(oe),Lh=n(oe,"LI",{});var zEe=s(Lh);Toe=n(zEe,"STRONG",{});var dXr=s(Toe);Kto=r(dXr,"perceiver"),dXr.forEach(t),Zto=r(zEe," \u2014 "),ZR=n(zEe,"A",{href:!0});var cXr=s(ZR);eao=r(cXr,"PerceiverFeatureExtractor"),cXr.forEach(t),oao=r(zEe," (Perceiver model)"),zEe.forEach(t),rao=i(oe),xh=n(oe,"LI",{});var QEe=s(xh);Moe=n(QEe,"STRONG",{});var fXr=s(Moe);tao=r(fXr,"poolformer"),fXr.forEach(t),aao=r(QEe," \u2014 "),eB=n(QEe,"A",{href:!0});var mXr=s(eB);nao=r(mXr,"PoolFormerFeatureExtractor"),mXr.forEach(t),sao=r(QEe," (PoolFormer model)"),QEe.forEach(t),lao=i(oe),kh=n(oe,"LI",{});var WEe=s(kh);Eoe=n(WEe,"STRONG",{});var gXr=s(Eoe);iao=r(gXr,"regnet"),gXr.forEach(t),dao=r(WEe," \u2014 "),oB=n(WEe,"A",{href:!0});var hXr=s(oB);cao=r(hXr,"ConvNextFeatureExtractor"),hXr.forEach(t),fao=r(WEe," (RegNet model)"),WEe.forEach(t),mao=i(oe),Sh=n(oe,"LI",{});var HEe=s(Sh);Coe=n(HEe,"STRONG",{});var pXr=s(Coe);gao=r(pXr,"resnet"),pXr.forEach(t),hao=r(HEe," \u2014 "),rB=n(HEe,"A",{href:!0});var _Xr=s(rB);pao=r(_Xr,"ConvNextFeatureExtractor"),_Xr.forEach(t),_ao=r(HEe," (ResNet model)"),HEe.forEach(t),uao=i(oe),Rh=n(oe,"LI",{});var UEe=s(Rh);woe=n(UEe,"STRONG",{});var uXr=s(woe);bao=r(uXr,"segformer"),uXr.forEach(t),vao=r(UEe," \u2014 "),tB=n(UEe,"A",{href:!0});var bXr=s(tB);Fao=r(bXr,"SegformerFeatureExtractor"),bXr.forEach(t),Tao=r(UEe," (SegFormer model)"),UEe.forEach(t),Mao=i(oe),Bh=n(oe,"LI",{});var JEe=s(Bh);Aoe=n(JEe,"STRONG",{});var vXr=s(Aoe);Eao=r(vXr,"speech_to_text"),vXr.forEach(t),Cao=r(JEe," \u2014 "),aB=n(JEe,"A",{href:!0});var FXr=s(aB);wao=r(FXr,"Speech2TextFeatureExtractor"),FXr.forEach(t),Aao=r(JEe," (Speech2Text model)"),JEe.forEach(t),yao=i(oe),Ph=n(oe,"LI",{});var YEe=s(Ph);yoe=n(YEe,"STRONG",{});var TXr=s(yoe);Lao=r(TXr,"swin"),TXr.forEach(t),xao=r(YEe," \u2014 "),nB=n(YEe,"A",{href:!0});var MXr=s(nB);kao=r(MXr,"ViTFeatureExtractor"),MXr.forEach(t),Sao=r(YEe," (Swin model)"),YEe.forEach(t),Rao=i(oe),$h=n(oe,"LI",{});var KEe=s($h);Loe=n(KEe,"STRONG",{});var EXr=s(Loe);Bao=r(EXr,"van"),EXr.forEach(t),Pao=r(KEe," \u2014 "),sB=n(KEe,"A",{href:!0});var CXr=s(sB);$ao=r(CXr,"ConvNextFeatureExtractor"),CXr.forEach(t),Iao=r(KEe," (VAN model)"),KEe.forEach(t),qao=i(oe),Ih=n(oe,"LI",{});var ZEe=s(Ih);xoe=n(ZEe,"STRONG",{});var wXr=s(xoe);Nao=r(wXr,"vit"),wXr.forEach(t),jao=r(ZEe," \u2014 "),lB=n(ZEe,"A",{href:!0});var AXr=s(lB);Dao=r(AXr,"ViTFeatureExtractor"),AXr.forEach(t),Gao=r(ZEe," (ViT model)"),ZEe.forEach(t),Oao=i(oe),qh=n(oe,"LI",{});var e3e=s(qh);koe=n(e3e,"STRONG",{});var yXr=s(koe);Vao=r(yXr,"vit_mae"),yXr.forEach(t),Xao=r(e3e," \u2014 "),iB=n(e3e,"A",{href:!0});var LXr=s(iB);zao=r(LXr,"ViTFeatureExtractor"),LXr.forEach(t),Qao=r(e3e," (ViTMAE model)"),e3e.forEach(t),Wao=i(oe),Nh=n(oe,"LI",{});var o3e=s(Nh);Soe=n(o3e,"STRONG",{});var xXr=s(Soe);Hao=r(xXr,"wav2vec2"),xXr.forEach(t),Uao=r(o3e," \u2014 "),dB=n(o3e,"A",{href:!0});var kXr=s(dB);Jao=r(kXr,"Wav2Vec2FeatureExtractor"),kXr.forEach(t),Yao=r(o3e," (Wav2Vec2 model)"),o3e.forEach(t),oe.forEach(t),Kao=i(Nt),m(jh.$$.fragment,Nt),Zao=i(Nt),Roe=n(Nt,"P",{});var SXr=s(Roe);eno=r(SXr,"Examples:"),SXr.forEach(t),ono=i(Nt),m(aw.$$.fragment,Nt),Nt.forEach(t),rno=i(zs),Dh=n(zs,"DIV",{class:!0});var h$e=s(Dh);m(nw.$$.fragment,h$e),tno=i(h$e),Boe=n(h$e,"P",{});var RXr=s(Boe);ano=r(RXr,"Register a new feature extractor for this class."),RXr.forEach(t),h$e.forEach(t),zs.forEach(t),iBe=i(c),Ui=n(c,"H2",{class:!0});var p$e=s(Ui);Gh=n(p$e,"A",{id:!0,class:!0,href:!0});var BXr=s(Gh);Poe=n(BXr,"SPAN",{});var PXr=s(Poe);m(sw.$$.fragment,PXr),PXr.forEach(t),BXr.forEach(t),nno=i(p$e),$oe=n(p$e,"SPAN",{});var $Xr=s($oe);sno=r($Xr,"AutoProcessor"),$Xr.forEach(t),p$e.forEach(t),dBe=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);m(lw.$$.fragment,Qs),lno=i(Qs),iw=n(Qs,"P",{});var _$e=s(iw);ino=r(_$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cB=n(_$e,"A",{href:!0});var IXr=s(cB);dno=r(IXr,"AutoProcessor.from_pretrained()"),IXr.forEach(t),cno=r(_$e," class method."),_$e.forEach(t),fno=i(Qs),dw=n(Qs,"P",{});var u$e=s(dw);mno=r(u$e,"This class cannot be instantiated directly using "),Ioe=n(u$e,"CODE",{});var qXr=s(Ioe);gno=r(qXr,"__init__()"),qXr.forEach(t),hno=r(u$e," (throws an error)."),u$e.forEach(t),pno=i(Qs),Ie=n(Qs,"DIV",{class:!0});var jt=s(Ie);m(cw.$$.fragment,jt),_no=i(jt),qoe=n(jt,"P",{});var NXr=s(qoe);uno=r(NXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),NXr.forEach(t),bno=i(jt),Ji=n(jt,"P",{});var xU=s(Ji);vno=r(xU,"The processor class to instantiate is selected based on the "),Noe=n(xU,"CODE",{});var jXr=s(Noe);Fno=r(jXr,"model_type"),jXr.forEach(t),Tno=r(xU,` property of the config object (either
passed as an argument or loaded from `),joe=n(xU,"CODE",{});var DXr=s(joe);Mno=r(DXr,"pretrained_model_name_or_path"),DXr.forEach(t),Eno=r(xU," if possible):"),xU.forEach(t),Cno=i(jt),Ee=n(jt,"UL",{});var so=s(Ee);Oh=n(so,"LI",{});var r3e=s(Oh);Doe=n(r3e,"STRONG",{});var GXr=s(Doe);wno=r(GXr,"clip"),GXr.forEach(t),Ano=r(r3e," \u2014 "),fB=n(r3e,"A",{href:!0});var OXr=s(fB);yno=r(OXr,"CLIPProcessor"),OXr.forEach(t),Lno=r(r3e," (CLIP model)"),r3e.forEach(t),xno=i(so),Vh=n(so,"LI",{});var t3e=s(Vh);Goe=n(t3e,"STRONG",{});var VXr=s(Goe);kno=r(VXr,"flava"),VXr.forEach(t),Sno=r(t3e," \u2014 "),mB=n(t3e,"A",{href:!0});var XXr=s(mB);Rno=r(XXr,"FLAVAProcessor"),XXr.forEach(t),Bno=r(t3e," (FLAVA model)"),t3e.forEach(t),Pno=i(so),Xh=n(so,"LI",{});var a3e=s(Xh);Ooe=n(a3e,"STRONG",{});var zXr=s(Ooe);$no=r(zXr,"layoutlmv2"),zXr.forEach(t),Ino=r(a3e," \u2014 "),gB=n(a3e,"A",{href:!0});var QXr=s(gB);qno=r(QXr,"LayoutLMv2Processor"),QXr.forEach(t),Nno=r(a3e," (LayoutLMv2 model)"),a3e.forEach(t),jno=i(so),zh=n(so,"LI",{});var n3e=s(zh);Voe=n(n3e,"STRONG",{});var WXr=s(Voe);Dno=r(WXr,"layoutxlm"),WXr.forEach(t),Gno=r(n3e," \u2014 "),hB=n(n3e,"A",{href:!0});var HXr=s(hB);Ono=r(HXr,"LayoutXLMProcessor"),HXr.forEach(t),Vno=r(n3e," (LayoutXLM model)"),n3e.forEach(t),Xno=i(so),Qh=n(so,"LI",{});var s3e=s(Qh);Xoe=n(s3e,"STRONG",{});var UXr=s(Xoe);zno=r(UXr,"speech_to_text"),UXr.forEach(t),Qno=r(s3e," \u2014 "),pB=n(s3e,"A",{href:!0});var JXr=s(pB);Wno=r(JXr,"Speech2TextProcessor"),JXr.forEach(t),Hno=r(s3e," (Speech2Text model)"),s3e.forEach(t),Uno=i(so),Wh=n(so,"LI",{});var l3e=s(Wh);zoe=n(l3e,"STRONG",{});var YXr=s(zoe);Jno=r(YXr,"speech_to_text_2"),YXr.forEach(t),Yno=r(l3e," \u2014 "),_B=n(l3e,"A",{href:!0});var KXr=s(_B);Kno=r(KXr,"Speech2Text2Processor"),KXr.forEach(t),Zno=r(l3e," (Speech2Text2 model)"),l3e.forEach(t),eso=i(so),Hh=n(so,"LI",{});var i3e=s(Hh);Qoe=n(i3e,"STRONG",{});var ZXr=s(Qoe);oso=r(ZXr,"trocr"),ZXr.forEach(t),rso=r(i3e," \u2014 "),uB=n(i3e,"A",{href:!0});var ezr=s(uB);tso=r(ezr,"TrOCRProcessor"),ezr.forEach(t),aso=r(i3e," (TrOCR model)"),i3e.forEach(t),nso=i(so),Uh=n(so,"LI",{});var d3e=s(Uh);Woe=n(d3e,"STRONG",{});var ozr=s(Woe);sso=r(ozr,"vision-text-dual-encoder"),ozr.forEach(t),lso=r(d3e," \u2014 "),bB=n(d3e,"A",{href:!0});var rzr=s(bB);iso=r(rzr,"VisionTextDualEncoderProcessor"),rzr.forEach(t),dso=r(d3e," (VisionTextDualEncoder model)"),d3e.forEach(t),cso=i(so),Jh=n(so,"LI",{});var c3e=s(Jh);Hoe=n(c3e,"STRONG",{});var tzr=s(Hoe);fso=r(tzr,"wav2vec2"),tzr.forEach(t),mso=r(c3e," \u2014 "),vB=n(c3e,"A",{href:!0});var azr=s(vB);gso=r(azr,"Wav2Vec2Processor"),azr.forEach(t),hso=r(c3e," (Wav2Vec2 model)"),c3e.forEach(t),so.forEach(t),pso=i(jt),m(Yh.$$.fragment,jt),_so=i(jt),Uoe=n(jt,"P",{});var nzr=s(Uoe);uso=r(nzr,"Examples:"),nzr.forEach(t),bso=i(jt),m(fw.$$.fragment,jt),jt.forEach(t),vso=i(Qs),Kh=n(Qs,"DIV",{class:!0});var b$e=s(Kh);m(mw.$$.fragment,b$e),Fso=i(b$e),Joe=n(b$e,"P",{});var szr=s(Joe);Tso=r(szr,"Register a new processor for this class."),szr.forEach(t),b$e.forEach(t),Qs.forEach(t),cBe=i(c),Yi=n(c,"H2",{class:!0});var v$e=s(Yi);Zh=n(v$e,"A",{id:!0,class:!0,href:!0});var lzr=s(Zh);Yoe=n(lzr,"SPAN",{});var izr=s(Yoe);m(gw.$$.fragment,izr),izr.forEach(t),lzr.forEach(t),Mso=i(v$e),Koe=n(v$e,"SPAN",{});var dzr=s(Koe);Eso=r(dzr,"AutoModel"),dzr.forEach(t),v$e.forEach(t),fBe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(hw.$$.fragment,Ws),Cso=i(Ws),Ki=n(Ws,"P",{});var kU=s(Ki);wso=r(kU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FB=n(kU,"A",{href:!0});var czr=s(FB);Aso=r(czr,"from_pretrained()"),czr.forEach(t),yso=r(kU," class method or the "),TB=n(kU,"A",{href:!0});var fzr=s(TB);Lso=r(fzr,"from_config()"),fzr.forEach(t),xso=r(kU,` class
method.`),kU.forEach(t),kso=i(Ws),pw=n(Ws,"P",{});var F$e=s(pw);Sso=r(F$e,"This class cannot be instantiated directly using "),Zoe=n(F$e,"CODE",{});var mzr=s(Zoe);Rso=r(mzr,"__init__()"),mzr.forEach(t),Bso=r(F$e," (throws an error)."),F$e.forEach(t),Pso=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);m(_w.$$.fragment,Hs),$so=i(Hs),ere=n(Hs,"P",{});var gzr=s(ere);Iso=r(gzr,"Instantiates one of the base model classes of the library from a configuration."),gzr.forEach(t),qso=i(Hs),Zi=n(Hs,"P",{});var SU=s(Zi);Nso=r(SU,`Note:
Loading a model from its configuration file does `),ore=n(SU,"STRONG",{});var hzr=s(ore);jso=r(hzr,"not"),hzr.forEach(t),Dso=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MB=n(SU,"A",{href:!0});var pzr=s(MB);Gso=r(pzr,"from_pretrained()"),pzr.forEach(t),Oso=r(SU," to load the model weights."),SU.forEach(t),Vso=i(Hs),rre=n(Hs,"P",{});var _zr=s(rre);Xso=r(_zr,"Examples:"),_zr.forEach(t),zso=i(Hs),m(uw.$$.fragment,Hs),Hs.forEach(t),Qso=i(Ws),qe=n(Ws,"DIV",{class:!0});var Dt=s(qe);m(bw.$$.fragment,Dt),Wso=i(Dt),tre=n(Dt,"P",{});var uzr=s(tre);Hso=r(uzr,"Instantiate one of the base model classes of the library from a pretrained model."),uzr.forEach(t),Uso=i(Dt),Xa=n(Dt,"P",{});var I3=s(Xa);Jso=r(I3,"The model class to instantiate is selected based on the "),are=n(I3,"CODE",{});var bzr=s(are);Yso=r(bzr,"model_type"),bzr.forEach(t),Kso=r(I3,` property of the config object (either
passed as an argument or loaded from `),nre=n(I3,"CODE",{});var vzr=s(nre);Zso=r(vzr,"pretrained_model_name_or_path"),vzr.forEach(t),elo=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sre=n(I3,"CODE",{});var Fzr=s(sre);olo=r(Fzr,"pretrained_model_name_or_path"),Fzr.forEach(t),rlo=r(I3,":"),I3.forEach(t),tlo=i(Dt),T=n(Dt,"UL",{});var M=s(T);ep=n(M,"LI",{});var f3e=s(ep);lre=n(f3e,"STRONG",{});var Tzr=s(lre);alo=r(Tzr,"albert"),Tzr.forEach(t),nlo=r(f3e," \u2014 "),EB=n(f3e,"A",{href:!0});var Mzr=s(EB);slo=r(Mzr,"AlbertModel"),Mzr.forEach(t),llo=r(f3e," (ALBERT model)"),f3e.forEach(t),ilo=i(M),op=n(M,"LI",{});var m3e=s(op);ire=n(m3e,"STRONG",{});var Ezr=s(ire);dlo=r(Ezr,"bart"),Ezr.forEach(t),clo=r(m3e," \u2014 "),CB=n(m3e,"A",{href:!0});var Czr=s(CB);flo=r(Czr,"BartModel"),Czr.forEach(t),mlo=r(m3e," (BART model)"),m3e.forEach(t),glo=i(M),rp=n(M,"LI",{});var g3e=s(rp);dre=n(g3e,"STRONG",{});var wzr=s(dre);hlo=r(wzr,"beit"),wzr.forEach(t),plo=r(g3e," \u2014 "),wB=n(g3e,"A",{href:!0});var Azr=s(wB);_lo=r(Azr,"BeitModel"),Azr.forEach(t),ulo=r(g3e," (BEiT model)"),g3e.forEach(t),blo=i(M),tp=n(M,"LI",{});var h3e=s(tp);cre=n(h3e,"STRONG",{});var yzr=s(cre);vlo=r(yzr,"bert"),yzr.forEach(t),Flo=r(h3e," \u2014 "),AB=n(h3e,"A",{href:!0});var Lzr=s(AB);Tlo=r(Lzr,"BertModel"),Lzr.forEach(t),Mlo=r(h3e," (BERT model)"),h3e.forEach(t),Elo=i(M),ap=n(M,"LI",{});var p3e=s(ap);fre=n(p3e,"STRONG",{});var xzr=s(fre);Clo=r(xzr,"bert-generation"),xzr.forEach(t),wlo=r(p3e," \u2014 "),yB=n(p3e,"A",{href:!0});var kzr=s(yB);Alo=r(kzr,"BertGenerationEncoder"),kzr.forEach(t),ylo=r(p3e," (Bert Generation model)"),p3e.forEach(t),Llo=i(M),np=n(M,"LI",{});var _3e=s(np);mre=n(_3e,"STRONG",{});var Szr=s(mre);xlo=r(Szr,"big_bird"),Szr.forEach(t),klo=r(_3e," \u2014 "),LB=n(_3e,"A",{href:!0});var Rzr=s(LB);Slo=r(Rzr,"BigBirdModel"),Rzr.forEach(t),Rlo=r(_3e," (BigBird model)"),_3e.forEach(t),Blo=i(M),sp=n(M,"LI",{});var u3e=s(sp);gre=n(u3e,"STRONG",{});var Bzr=s(gre);Plo=r(Bzr,"bigbird_pegasus"),Bzr.forEach(t),$lo=r(u3e," \u2014 "),xB=n(u3e,"A",{href:!0});var Pzr=s(xB);Ilo=r(Pzr,"BigBirdPegasusModel"),Pzr.forEach(t),qlo=r(u3e," (BigBirdPegasus model)"),u3e.forEach(t),Nlo=i(M),lp=n(M,"LI",{});var b3e=s(lp);hre=n(b3e,"STRONG",{});var $zr=s(hre);jlo=r($zr,"blenderbot"),$zr.forEach(t),Dlo=r(b3e," \u2014 "),kB=n(b3e,"A",{href:!0});var Izr=s(kB);Glo=r(Izr,"BlenderbotModel"),Izr.forEach(t),Olo=r(b3e," (Blenderbot model)"),b3e.forEach(t),Vlo=i(M),ip=n(M,"LI",{});var v3e=s(ip);pre=n(v3e,"STRONG",{});var qzr=s(pre);Xlo=r(qzr,"blenderbot-small"),qzr.forEach(t),zlo=r(v3e," \u2014 "),SB=n(v3e,"A",{href:!0});var Nzr=s(SB);Qlo=r(Nzr,"BlenderbotSmallModel"),Nzr.forEach(t),Wlo=r(v3e," (BlenderbotSmall model)"),v3e.forEach(t),Hlo=i(M),dp=n(M,"LI",{});var F3e=s(dp);_re=n(F3e,"STRONG",{});var jzr=s(_re);Ulo=r(jzr,"camembert"),jzr.forEach(t),Jlo=r(F3e," \u2014 "),RB=n(F3e,"A",{href:!0});var Dzr=s(RB);Ylo=r(Dzr,"CamembertModel"),Dzr.forEach(t),Klo=r(F3e," (CamemBERT model)"),F3e.forEach(t),Zlo=i(M),cp=n(M,"LI",{});var T3e=s(cp);ure=n(T3e,"STRONG",{});var Gzr=s(ure);eio=r(Gzr,"canine"),Gzr.forEach(t),oio=r(T3e," \u2014 "),BB=n(T3e,"A",{href:!0});var Ozr=s(BB);rio=r(Ozr,"CanineModel"),Ozr.forEach(t),tio=r(T3e," (Canine model)"),T3e.forEach(t),aio=i(M),fp=n(M,"LI",{});var M3e=s(fp);bre=n(M3e,"STRONG",{});var Vzr=s(bre);nio=r(Vzr,"clip"),Vzr.forEach(t),sio=r(M3e," \u2014 "),PB=n(M3e,"A",{href:!0});var Xzr=s(PB);lio=r(Xzr,"CLIPModel"),Xzr.forEach(t),iio=r(M3e," (CLIP model)"),M3e.forEach(t),dio=i(M),mp=n(M,"LI",{});var E3e=s(mp);vre=n(E3e,"STRONG",{});var zzr=s(vre);cio=r(zzr,"convbert"),zzr.forEach(t),fio=r(E3e," \u2014 "),$B=n(E3e,"A",{href:!0});var Qzr=s($B);mio=r(Qzr,"ConvBertModel"),Qzr.forEach(t),gio=r(E3e," (ConvBERT model)"),E3e.forEach(t),hio=i(M),gp=n(M,"LI",{});var C3e=s(gp);Fre=n(C3e,"STRONG",{});var Wzr=s(Fre);pio=r(Wzr,"convnext"),Wzr.forEach(t),_io=r(C3e," \u2014 "),IB=n(C3e,"A",{href:!0});var Hzr=s(IB);uio=r(Hzr,"ConvNextModel"),Hzr.forEach(t),bio=r(C3e," (ConvNext model)"),C3e.forEach(t),vio=i(M),hp=n(M,"LI",{});var w3e=s(hp);Tre=n(w3e,"STRONG",{});var Uzr=s(Tre);Fio=r(Uzr,"ctrl"),Uzr.forEach(t),Tio=r(w3e," \u2014 "),qB=n(w3e,"A",{href:!0});var Jzr=s(qB);Mio=r(Jzr,"CTRLModel"),Jzr.forEach(t),Eio=r(w3e," (CTRL model)"),w3e.forEach(t),Cio=i(M),pp=n(M,"LI",{});var A3e=s(pp);Mre=n(A3e,"STRONG",{});var Yzr=s(Mre);wio=r(Yzr,"data2vec-audio"),Yzr.forEach(t),Aio=r(A3e," \u2014 "),NB=n(A3e,"A",{href:!0});var Kzr=s(NB);yio=r(Kzr,"Data2VecAudioModel"),Kzr.forEach(t),Lio=r(A3e," (Data2VecAudio model)"),A3e.forEach(t),xio=i(M),_p=n(M,"LI",{});var y3e=s(_p);Ere=n(y3e,"STRONG",{});var Zzr=s(Ere);kio=r(Zzr,"data2vec-text"),Zzr.forEach(t),Sio=r(y3e," \u2014 "),jB=n(y3e,"A",{href:!0});var eQr=s(jB);Rio=r(eQr,"Data2VecTextModel"),eQr.forEach(t),Bio=r(y3e," (Data2VecText model)"),y3e.forEach(t),Pio=i(M),up=n(M,"LI",{});var L3e=s(up);Cre=n(L3e,"STRONG",{});var oQr=s(Cre);$io=r(oQr,"data2vec-vision"),oQr.forEach(t),Iio=r(L3e," \u2014 "),DB=n(L3e,"A",{href:!0});var rQr=s(DB);qio=r(rQr,"Data2VecVisionModel"),rQr.forEach(t),Nio=r(L3e," (Data2VecVision model)"),L3e.forEach(t),jio=i(M),bp=n(M,"LI",{});var x3e=s(bp);wre=n(x3e,"STRONG",{});var tQr=s(wre);Dio=r(tQr,"deberta"),tQr.forEach(t),Gio=r(x3e," \u2014 "),GB=n(x3e,"A",{href:!0});var aQr=s(GB);Oio=r(aQr,"DebertaModel"),aQr.forEach(t),Vio=r(x3e," (DeBERTa model)"),x3e.forEach(t),Xio=i(M),vp=n(M,"LI",{});var k3e=s(vp);Are=n(k3e,"STRONG",{});var nQr=s(Are);zio=r(nQr,"deberta-v2"),nQr.forEach(t),Qio=r(k3e," \u2014 "),OB=n(k3e,"A",{href:!0});var sQr=s(OB);Wio=r(sQr,"DebertaV2Model"),sQr.forEach(t),Hio=r(k3e," (DeBERTa-v2 model)"),k3e.forEach(t),Uio=i(M),Fp=n(M,"LI",{});var S3e=s(Fp);yre=n(S3e,"STRONG",{});var lQr=s(yre);Jio=r(lQr,"decision_transformer"),lQr.forEach(t),Yio=r(S3e," \u2014 "),VB=n(S3e,"A",{href:!0});var iQr=s(VB);Kio=r(iQr,"DecisionTransformerModel"),iQr.forEach(t),Zio=r(S3e," (Decision Transformer model)"),S3e.forEach(t),edo=i(M),Tp=n(M,"LI",{});var R3e=s(Tp);Lre=n(R3e,"STRONG",{});var dQr=s(Lre);odo=r(dQr,"deit"),dQr.forEach(t),rdo=r(R3e," \u2014 "),XB=n(R3e,"A",{href:!0});var cQr=s(XB);tdo=r(cQr,"DeiTModel"),cQr.forEach(t),ado=r(R3e," (DeiT model)"),R3e.forEach(t),ndo=i(M),Mp=n(M,"LI",{});var B3e=s(Mp);xre=n(B3e,"STRONG",{});var fQr=s(xre);sdo=r(fQr,"detr"),fQr.forEach(t),ldo=r(B3e," \u2014 "),zB=n(B3e,"A",{href:!0});var mQr=s(zB);ido=r(mQr,"DetrModel"),mQr.forEach(t),ddo=r(B3e," (DETR model)"),B3e.forEach(t),cdo=i(M),Ep=n(M,"LI",{});var P3e=s(Ep);kre=n(P3e,"STRONG",{});var gQr=s(kre);fdo=r(gQr,"distilbert"),gQr.forEach(t),mdo=r(P3e," \u2014 "),QB=n(P3e,"A",{href:!0});var hQr=s(QB);gdo=r(hQr,"DistilBertModel"),hQr.forEach(t),hdo=r(P3e," (DistilBERT model)"),P3e.forEach(t),pdo=i(M),Cp=n(M,"LI",{});var $3e=s(Cp);Sre=n($3e,"STRONG",{});var pQr=s(Sre);_do=r(pQr,"dpr"),pQr.forEach(t),udo=r($3e," \u2014 "),WB=n($3e,"A",{href:!0});var _Qr=s(WB);bdo=r(_Qr,"DPRQuestionEncoder"),_Qr.forEach(t),vdo=r($3e," (DPR model)"),$3e.forEach(t),Fdo=i(M),wp=n(M,"LI",{});var I3e=s(wp);Rre=n(I3e,"STRONG",{});var uQr=s(Rre);Tdo=r(uQr,"dpt"),uQr.forEach(t),Mdo=r(I3e," \u2014 "),HB=n(I3e,"A",{href:!0});var bQr=s(HB);Edo=r(bQr,"DPTModel"),bQr.forEach(t),Cdo=r(I3e," (DPT model)"),I3e.forEach(t),wdo=i(M),Ap=n(M,"LI",{});var q3e=s(Ap);Bre=n(q3e,"STRONG",{});var vQr=s(Bre);Ado=r(vQr,"electra"),vQr.forEach(t),ydo=r(q3e," \u2014 "),UB=n(q3e,"A",{href:!0});var FQr=s(UB);Ldo=r(FQr,"ElectraModel"),FQr.forEach(t),xdo=r(q3e," (ELECTRA model)"),q3e.forEach(t),kdo=i(M),yp=n(M,"LI",{});var N3e=s(yp);Pre=n(N3e,"STRONG",{});var TQr=s(Pre);Sdo=r(TQr,"flaubert"),TQr.forEach(t),Rdo=r(N3e," \u2014 "),JB=n(N3e,"A",{href:!0});var MQr=s(JB);Bdo=r(MQr,"FlaubertModel"),MQr.forEach(t),Pdo=r(N3e," (FlauBERT model)"),N3e.forEach(t),$do=i(M),Lp=n(M,"LI",{});var j3e=s(Lp);$re=n(j3e,"STRONG",{});var EQr=s($re);Ido=r(EQr,"flava"),EQr.forEach(t),qdo=r(j3e," \u2014 "),YB=n(j3e,"A",{href:!0});var CQr=s(YB);Ndo=r(CQr,"FLAVAModel"),CQr.forEach(t),jdo=r(j3e," (FLAVA model)"),j3e.forEach(t),Ddo=i(M),xp=n(M,"LI",{});var D3e=s(xp);Ire=n(D3e,"STRONG",{});var wQr=s(Ire);Gdo=r(wQr,"fnet"),wQr.forEach(t),Odo=r(D3e," \u2014 "),KB=n(D3e,"A",{href:!0});var AQr=s(KB);Vdo=r(AQr,"FNetModel"),AQr.forEach(t),Xdo=r(D3e," (FNet model)"),D3e.forEach(t),zdo=i(M),kp=n(M,"LI",{});var G3e=s(kp);qre=n(G3e,"STRONG",{});var yQr=s(qre);Qdo=r(yQr,"fsmt"),yQr.forEach(t),Wdo=r(G3e," \u2014 "),ZB=n(G3e,"A",{href:!0});var LQr=s(ZB);Hdo=r(LQr,"FSMTModel"),LQr.forEach(t),Udo=r(G3e," (FairSeq Machine-Translation model)"),G3e.forEach(t),Jdo=i(M),Ds=n(M,"LI",{});var M9=s(Ds);Nre=n(M9,"STRONG",{});var xQr=s(Nre);Ydo=r(xQr,"funnel"),xQr.forEach(t),Kdo=r(M9," \u2014 "),eP=n(M9,"A",{href:!0});var kQr=s(eP);Zdo=r(kQr,"FunnelModel"),kQr.forEach(t),eco=r(M9," or "),oP=n(M9,"A",{href:!0});var SQr=s(oP);oco=r(SQr,"FunnelBaseModel"),SQr.forEach(t),rco=r(M9," (Funnel Transformer model)"),M9.forEach(t),tco=i(M),Sp=n(M,"LI",{});var O3e=s(Sp);jre=n(O3e,"STRONG",{});var RQr=s(jre);aco=r(RQr,"glpn"),RQr.forEach(t),nco=r(O3e," \u2014 "),rP=n(O3e,"A",{href:!0});var BQr=s(rP);sco=r(BQr,"GLPNModel"),BQr.forEach(t),lco=r(O3e," (GLPN model)"),O3e.forEach(t),ico=i(M),Rp=n(M,"LI",{});var V3e=s(Rp);Dre=n(V3e,"STRONG",{});var PQr=s(Dre);dco=r(PQr,"gpt2"),PQr.forEach(t),cco=r(V3e," \u2014 "),tP=n(V3e,"A",{href:!0});var $Qr=s(tP);fco=r($Qr,"GPT2Model"),$Qr.forEach(t),mco=r(V3e," (OpenAI GPT-2 model)"),V3e.forEach(t),gco=i(M),Bp=n(M,"LI",{});var X3e=s(Bp);Gre=n(X3e,"STRONG",{});var IQr=s(Gre);hco=r(IQr,"gpt_neo"),IQr.forEach(t),pco=r(X3e," \u2014 "),aP=n(X3e,"A",{href:!0});var qQr=s(aP);_co=r(qQr,"GPTNeoModel"),qQr.forEach(t),uco=r(X3e," (GPT Neo model)"),X3e.forEach(t),bco=i(M),Pp=n(M,"LI",{});var z3e=s(Pp);Ore=n(z3e,"STRONG",{});var NQr=s(Ore);vco=r(NQr,"gptj"),NQr.forEach(t),Fco=r(z3e," \u2014 "),nP=n(z3e,"A",{href:!0});var jQr=s(nP);Tco=r(jQr,"GPTJModel"),jQr.forEach(t),Mco=r(z3e," (GPT-J model)"),z3e.forEach(t),Eco=i(M),$p=n(M,"LI",{});var Q3e=s($p);Vre=n(Q3e,"STRONG",{});var DQr=s(Vre);Cco=r(DQr,"hubert"),DQr.forEach(t),wco=r(Q3e," \u2014 "),sP=n(Q3e,"A",{href:!0});var GQr=s(sP);Aco=r(GQr,"HubertModel"),GQr.forEach(t),yco=r(Q3e," (Hubert model)"),Q3e.forEach(t),Lco=i(M),Ip=n(M,"LI",{});var W3e=s(Ip);Xre=n(W3e,"STRONG",{});var OQr=s(Xre);xco=r(OQr,"ibert"),OQr.forEach(t),kco=r(W3e," \u2014 "),lP=n(W3e,"A",{href:!0});var VQr=s(lP);Sco=r(VQr,"IBertModel"),VQr.forEach(t),Rco=r(W3e," (I-BERT model)"),W3e.forEach(t),Bco=i(M),qp=n(M,"LI",{});var H3e=s(qp);zre=n(H3e,"STRONG",{});var XQr=s(zre);Pco=r(XQr,"imagegpt"),XQr.forEach(t),$co=r(H3e," \u2014 "),iP=n(H3e,"A",{href:!0});var zQr=s(iP);Ico=r(zQr,"ImageGPTModel"),zQr.forEach(t),qco=r(H3e," (ImageGPT model)"),H3e.forEach(t),Nco=i(M),Np=n(M,"LI",{});var U3e=s(Np);Qre=n(U3e,"STRONG",{});var QQr=s(Qre);jco=r(QQr,"layoutlm"),QQr.forEach(t),Dco=r(U3e," \u2014 "),dP=n(U3e,"A",{href:!0});var WQr=s(dP);Gco=r(WQr,"LayoutLMModel"),WQr.forEach(t),Oco=r(U3e," (LayoutLM model)"),U3e.forEach(t),Vco=i(M),jp=n(M,"LI",{});var J3e=s(jp);Wre=n(J3e,"STRONG",{});var HQr=s(Wre);Xco=r(HQr,"layoutlmv2"),HQr.forEach(t),zco=r(J3e," \u2014 "),cP=n(J3e,"A",{href:!0});var UQr=s(cP);Qco=r(UQr,"LayoutLMv2Model"),UQr.forEach(t),Wco=r(J3e," (LayoutLMv2 model)"),J3e.forEach(t),Hco=i(M),Dp=n(M,"LI",{});var Y3e=s(Dp);Hre=n(Y3e,"STRONG",{});var JQr=s(Hre);Uco=r(JQr,"led"),JQr.forEach(t),Jco=r(Y3e," \u2014 "),fP=n(Y3e,"A",{href:!0});var YQr=s(fP);Yco=r(YQr,"LEDModel"),YQr.forEach(t),Kco=r(Y3e," (LED model)"),Y3e.forEach(t),Zco=i(M),Gp=n(M,"LI",{});var K3e=s(Gp);Ure=n(K3e,"STRONG",{});var KQr=s(Ure);efo=r(KQr,"longformer"),KQr.forEach(t),ofo=r(K3e," \u2014 "),mP=n(K3e,"A",{href:!0});var ZQr=s(mP);rfo=r(ZQr,"LongformerModel"),ZQr.forEach(t),tfo=r(K3e," (Longformer model)"),K3e.forEach(t),afo=i(M),Op=n(M,"LI",{});var Z3e=s(Op);Jre=n(Z3e,"STRONG",{});var eWr=s(Jre);nfo=r(eWr,"luke"),eWr.forEach(t),sfo=r(Z3e," \u2014 "),gP=n(Z3e,"A",{href:!0});var oWr=s(gP);lfo=r(oWr,"LukeModel"),oWr.forEach(t),ifo=r(Z3e," (LUKE model)"),Z3e.forEach(t),dfo=i(M),Vp=n(M,"LI",{});var eCe=s(Vp);Yre=n(eCe,"STRONG",{});var rWr=s(Yre);cfo=r(rWr,"lxmert"),rWr.forEach(t),ffo=r(eCe," \u2014 "),hP=n(eCe,"A",{href:!0});var tWr=s(hP);mfo=r(tWr,"LxmertModel"),tWr.forEach(t),gfo=r(eCe," (LXMERT model)"),eCe.forEach(t),hfo=i(M),Xp=n(M,"LI",{});var oCe=s(Xp);Kre=n(oCe,"STRONG",{});var aWr=s(Kre);pfo=r(aWr,"m2m_100"),aWr.forEach(t),_fo=r(oCe," \u2014 "),pP=n(oCe,"A",{href:!0});var nWr=s(pP);ufo=r(nWr,"M2M100Model"),nWr.forEach(t),bfo=r(oCe," (M2M100 model)"),oCe.forEach(t),vfo=i(M),zp=n(M,"LI",{});var rCe=s(zp);Zre=n(rCe,"STRONG",{});var sWr=s(Zre);Ffo=r(sWr,"marian"),sWr.forEach(t),Tfo=r(rCe," \u2014 "),_P=n(rCe,"A",{href:!0});var lWr=s(_P);Mfo=r(lWr,"MarianModel"),lWr.forEach(t),Efo=r(rCe," (Marian model)"),rCe.forEach(t),Cfo=i(M),Qp=n(M,"LI",{});var tCe=s(Qp);ete=n(tCe,"STRONG",{});var iWr=s(ete);wfo=r(iWr,"maskformer"),iWr.forEach(t),Afo=r(tCe," \u2014 "),uP=n(tCe,"A",{href:!0});var dWr=s(uP);yfo=r(dWr,"MaskFormerModel"),dWr.forEach(t),Lfo=r(tCe," (MaskFormer model)"),tCe.forEach(t),xfo=i(M),Wp=n(M,"LI",{});var aCe=s(Wp);ote=n(aCe,"STRONG",{});var cWr=s(ote);kfo=r(cWr,"mbart"),cWr.forEach(t),Sfo=r(aCe," \u2014 "),bP=n(aCe,"A",{href:!0});var fWr=s(bP);Rfo=r(fWr,"MBartModel"),fWr.forEach(t),Bfo=r(aCe," (mBART model)"),aCe.forEach(t),Pfo=i(M),Hp=n(M,"LI",{});var nCe=s(Hp);rte=n(nCe,"STRONG",{});var mWr=s(rte);$fo=r(mWr,"megatron-bert"),mWr.forEach(t),Ifo=r(nCe," \u2014 "),vP=n(nCe,"A",{href:!0});var gWr=s(vP);qfo=r(gWr,"MegatronBertModel"),gWr.forEach(t),Nfo=r(nCe," (MegatronBert model)"),nCe.forEach(t),jfo=i(M),Up=n(M,"LI",{});var sCe=s(Up);tte=n(sCe,"STRONG",{});var hWr=s(tte);Dfo=r(hWr,"mobilebert"),hWr.forEach(t),Gfo=r(sCe," \u2014 "),FP=n(sCe,"A",{href:!0});var pWr=s(FP);Ofo=r(pWr,"MobileBertModel"),pWr.forEach(t),Vfo=r(sCe," (MobileBERT model)"),sCe.forEach(t),Xfo=i(M),Jp=n(M,"LI",{});var lCe=s(Jp);ate=n(lCe,"STRONG",{});var _Wr=s(ate);zfo=r(_Wr,"mpnet"),_Wr.forEach(t),Qfo=r(lCe," \u2014 "),TP=n(lCe,"A",{href:!0});var uWr=s(TP);Wfo=r(uWr,"MPNetModel"),uWr.forEach(t),Hfo=r(lCe," (MPNet model)"),lCe.forEach(t),Ufo=i(M),Yp=n(M,"LI",{});var iCe=s(Yp);nte=n(iCe,"STRONG",{});var bWr=s(nte);Jfo=r(bWr,"mt5"),bWr.forEach(t),Yfo=r(iCe," \u2014 "),MP=n(iCe,"A",{href:!0});var vWr=s(MP);Kfo=r(vWr,"MT5Model"),vWr.forEach(t),Zfo=r(iCe," (mT5 model)"),iCe.forEach(t),emo=i(M),Kp=n(M,"LI",{});var dCe=s(Kp);ste=n(dCe,"STRONG",{});var FWr=s(ste);omo=r(FWr,"nystromformer"),FWr.forEach(t),rmo=r(dCe," \u2014 "),EP=n(dCe,"A",{href:!0});var TWr=s(EP);tmo=r(TWr,"NystromformerModel"),TWr.forEach(t),amo=r(dCe," (Nystromformer model)"),dCe.forEach(t),nmo=i(M),Zp=n(M,"LI",{});var cCe=s(Zp);lte=n(cCe,"STRONG",{});var MWr=s(lte);smo=r(MWr,"openai-gpt"),MWr.forEach(t),lmo=r(cCe," \u2014 "),CP=n(cCe,"A",{href:!0});var EWr=s(CP);imo=r(EWr,"OpenAIGPTModel"),EWr.forEach(t),dmo=r(cCe," (OpenAI GPT model)"),cCe.forEach(t),cmo=i(M),e_=n(M,"LI",{});var fCe=s(e_);ite=n(fCe,"STRONG",{});var CWr=s(ite);fmo=r(CWr,"pegasus"),CWr.forEach(t),mmo=r(fCe," \u2014 "),wP=n(fCe,"A",{href:!0});var wWr=s(wP);gmo=r(wWr,"PegasusModel"),wWr.forEach(t),hmo=r(fCe," (Pegasus model)"),fCe.forEach(t),pmo=i(M),o_=n(M,"LI",{});var mCe=s(o_);dte=n(mCe,"STRONG",{});var AWr=s(dte);_mo=r(AWr,"perceiver"),AWr.forEach(t),umo=r(mCe," \u2014 "),AP=n(mCe,"A",{href:!0});var yWr=s(AP);bmo=r(yWr,"PerceiverModel"),yWr.forEach(t),vmo=r(mCe," (Perceiver model)"),mCe.forEach(t),Fmo=i(M),r_=n(M,"LI",{});var gCe=s(r_);cte=n(gCe,"STRONG",{});var LWr=s(cte);Tmo=r(LWr,"plbart"),LWr.forEach(t),Mmo=r(gCe," \u2014 "),yP=n(gCe,"A",{href:!0});var xWr=s(yP);Emo=r(xWr,"PLBartModel"),xWr.forEach(t),Cmo=r(gCe," (PLBart model)"),gCe.forEach(t),wmo=i(M),t_=n(M,"LI",{});var hCe=s(t_);fte=n(hCe,"STRONG",{});var kWr=s(fte);Amo=r(kWr,"poolformer"),kWr.forEach(t),ymo=r(hCe," \u2014 "),LP=n(hCe,"A",{href:!0});var SWr=s(LP);Lmo=r(SWr,"PoolFormerModel"),SWr.forEach(t),xmo=r(hCe," (PoolFormer model)"),hCe.forEach(t),kmo=i(M),a_=n(M,"LI",{});var pCe=s(a_);mte=n(pCe,"STRONG",{});var RWr=s(mte);Smo=r(RWr,"prophetnet"),RWr.forEach(t),Rmo=r(pCe," \u2014 "),xP=n(pCe,"A",{href:!0});var BWr=s(xP);Bmo=r(BWr,"ProphetNetModel"),BWr.forEach(t),Pmo=r(pCe," (ProphetNet model)"),pCe.forEach(t),$mo=i(M),n_=n(M,"LI",{});var _Ce=s(n_);gte=n(_Ce,"STRONG",{});var PWr=s(gte);Imo=r(PWr,"qdqbert"),PWr.forEach(t),qmo=r(_Ce," \u2014 "),kP=n(_Ce,"A",{href:!0});var $Wr=s(kP);Nmo=r($Wr,"QDQBertModel"),$Wr.forEach(t),jmo=r(_Ce," (QDQBert model)"),_Ce.forEach(t),Dmo=i(M),s_=n(M,"LI",{});var uCe=s(s_);hte=n(uCe,"STRONG",{});var IWr=s(hte);Gmo=r(IWr,"reformer"),IWr.forEach(t),Omo=r(uCe," \u2014 "),SP=n(uCe,"A",{href:!0});var qWr=s(SP);Vmo=r(qWr,"ReformerModel"),qWr.forEach(t),Xmo=r(uCe," (Reformer model)"),uCe.forEach(t),zmo=i(M),l_=n(M,"LI",{});var bCe=s(l_);pte=n(bCe,"STRONG",{});var NWr=s(pte);Qmo=r(NWr,"regnet"),NWr.forEach(t),Wmo=r(bCe," \u2014 "),RP=n(bCe,"A",{href:!0});var jWr=s(RP);Hmo=r(jWr,"RegNetModel"),jWr.forEach(t),Umo=r(bCe," (RegNet model)"),bCe.forEach(t),Jmo=i(M),i_=n(M,"LI",{});var vCe=s(i_);_te=n(vCe,"STRONG",{});var DWr=s(_te);Ymo=r(DWr,"rembert"),DWr.forEach(t),Kmo=r(vCe," \u2014 "),BP=n(vCe,"A",{href:!0});var GWr=s(BP);Zmo=r(GWr,"RemBertModel"),GWr.forEach(t),ego=r(vCe," (RemBERT model)"),vCe.forEach(t),ogo=i(M),d_=n(M,"LI",{});var FCe=s(d_);ute=n(FCe,"STRONG",{});var OWr=s(ute);rgo=r(OWr,"resnet"),OWr.forEach(t),tgo=r(FCe," \u2014 "),PP=n(FCe,"A",{href:!0});var VWr=s(PP);ago=r(VWr,"ResNetModel"),VWr.forEach(t),ngo=r(FCe," (ResNet model)"),FCe.forEach(t),sgo=i(M),c_=n(M,"LI",{});var TCe=s(c_);bte=n(TCe,"STRONG",{});var XWr=s(bte);lgo=r(XWr,"retribert"),XWr.forEach(t),igo=r(TCe," \u2014 "),$P=n(TCe,"A",{href:!0});var zWr=s($P);dgo=r(zWr,"RetriBertModel"),zWr.forEach(t),cgo=r(TCe," (RetriBERT model)"),TCe.forEach(t),fgo=i(M),f_=n(M,"LI",{});var MCe=s(f_);vte=n(MCe,"STRONG",{});var QWr=s(vte);mgo=r(QWr,"roberta"),QWr.forEach(t),ggo=r(MCe," \u2014 "),IP=n(MCe,"A",{href:!0});var WWr=s(IP);hgo=r(WWr,"RobertaModel"),WWr.forEach(t),pgo=r(MCe," (RoBERTa model)"),MCe.forEach(t),_go=i(M),m_=n(M,"LI",{});var ECe=s(m_);Fte=n(ECe,"STRONG",{});var HWr=s(Fte);ugo=r(HWr,"roformer"),HWr.forEach(t),bgo=r(ECe," \u2014 "),qP=n(ECe,"A",{href:!0});var UWr=s(qP);vgo=r(UWr,"RoFormerModel"),UWr.forEach(t),Fgo=r(ECe," (RoFormer model)"),ECe.forEach(t),Tgo=i(M),g_=n(M,"LI",{});var CCe=s(g_);Tte=n(CCe,"STRONG",{});var JWr=s(Tte);Mgo=r(JWr,"segformer"),JWr.forEach(t),Ego=r(CCe," \u2014 "),NP=n(CCe,"A",{href:!0});var YWr=s(NP);Cgo=r(YWr,"SegformerModel"),YWr.forEach(t),wgo=r(CCe," (SegFormer model)"),CCe.forEach(t),Ago=i(M),h_=n(M,"LI",{});var wCe=s(h_);Mte=n(wCe,"STRONG",{});var KWr=s(Mte);ygo=r(KWr,"sew"),KWr.forEach(t),Lgo=r(wCe," \u2014 "),jP=n(wCe,"A",{href:!0});var ZWr=s(jP);xgo=r(ZWr,"SEWModel"),ZWr.forEach(t),kgo=r(wCe," (SEW model)"),wCe.forEach(t),Sgo=i(M),p_=n(M,"LI",{});var ACe=s(p_);Ete=n(ACe,"STRONG",{});var eHr=s(Ete);Rgo=r(eHr,"sew-d"),eHr.forEach(t),Bgo=r(ACe," \u2014 "),DP=n(ACe,"A",{href:!0});var oHr=s(DP);Pgo=r(oHr,"SEWDModel"),oHr.forEach(t),$go=r(ACe," (SEW-D model)"),ACe.forEach(t),Igo=i(M),__=n(M,"LI",{});var yCe=s(__);Cte=n(yCe,"STRONG",{});var rHr=s(Cte);qgo=r(rHr,"speech_to_text"),rHr.forEach(t),Ngo=r(yCe," \u2014 "),GP=n(yCe,"A",{href:!0});var tHr=s(GP);jgo=r(tHr,"Speech2TextModel"),tHr.forEach(t),Dgo=r(yCe," (Speech2Text model)"),yCe.forEach(t),Ggo=i(M),u_=n(M,"LI",{});var LCe=s(u_);wte=n(LCe,"STRONG",{});var aHr=s(wte);Ogo=r(aHr,"splinter"),aHr.forEach(t),Vgo=r(LCe," \u2014 "),OP=n(LCe,"A",{href:!0});var nHr=s(OP);Xgo=r(nHr,"SplinterModel"),nHr.forEach(t),zgo=r(LCe," (Splinter model)"),LCe.forEach(t),Qgo=i(M),b_=n(M,"LI",{});var xCe=s(b_);Ate=n(xCe,"STRONG",{});var sHr=s(Ate);Wgo=r(sHr,"squeezebert"),sHr.forEach(t),Hgo=r(xCe," \u2014 "),VP=n(xCe,"A",{href:!0});var lHr=s(VP);Ugo=r(lHr,"SqueezeBertModel"),lHr.forEach(t),Jgo=r(xCe," (SqueezeBERT model)"),xCe.forEach(t),Ygo=i(M),v_=n(M,"LI",{});var kCe=s(v_);yte=n(kCe,"STRONG",{});var iHr=s(yte);Kgo=r(iHr,"swin"),iHr.forEach(t),Zgo=r(kCe," \u2014 "),XP=n(kCe,"A",{href:!0});var dHr=s(XP);eho=r(dHr,"SwinModel"),dHr.forEach(t),oho=r(kCe," (Swin model)"),kCe.forEach(t),rho=i(M),F_=n(M,"LI",{});var SCe=s(F_);Lte=n(SCe,"STRONG",{});var cHr=s(Lte);tho=r(cHr,"t5"),cHr.forEach(t),aho=r(SCe," \u2014 "),zP=n(SCe,"A",{href:!0});var fHr=s(zP);nho=r(fHr,"T5Model"),fHr.forEach(t),sho=r(SCe," (T5 model)"),SCe.forEach(t),lho=i(M),T_=n(M,"LI",{});var RCe=s(T_);xte=n(RCe,"STRONG",{});var mHr=s(xte);iho=r(mHr,"tapas"),mHr.forEach(t),dho=r(RCe," \u2014 "),QP=n(RCe,"A",{href:!0});var gHr=s(QP);cho=r(gHr,"TapasModel"),gHr.forEach(t),fho=r(RCe," (TAPAS model)"),RCe.forEach(t),mho=i(M),M_=n(M,"LI",{});var BCe=s(M_);kte=n(BCe,"STRONG",{});var hHr=s(kte);gho=r(hHr,"transfo-xl"),hHr.forEach(t),hho=r(BCe," \u2014 "),WP=n(BCe,"A",{href:!0});var pHr=s(WP);pho=r(pHr,"TransfoXLModel"),pHr.forEach(t),_ho=r(BCe," (Transformer-XL model)"),BCe.forEach(t),uho=i(M),E_=n(M,"LI",{});var PCe=s(E_);Ste=n(PCe,"STRONG",{});var _Hr=s(Ste);bho=r(_Hr,"unispeech"),_Hr.forEach(t),vho=r(PCe," \u2014 "),HP=n(PCe,"A",{href:!0});var uHr=s(HP);Fho=r(uHr,"UniSpeechModel"),uHr.forEach(t),Tho=r(PCe," (UniSpeech model)"),PCe.forEach(t),Mho=i(M),C_=n(M,"LI",{});var $Ce=s(C_);Rte=n($Ce,"STRONG",{});var bHr=s(Rte);Eho=r(bHr,"unispeech-sat"),bHr.forEach(t),Cho=r($Ce," \u2014 "),UP=n($Ce,"A",{href:!0});var vHr=s(UP);who=r(vHr,"UniSpeechSatModel"),vHr.forEach(t),Aho=r($Ce," (UniSpeechSat model)"),$Ce.forEach(t),yho=i(M),w_=n(M,"LI",{});var ICe=s(w_);Bte=n(ICe,"STRONG",{});var FHr=s(Bte);Lho=r(FHr,"van"),FHr.forEach(t),xho=r(ICe," \u2014 "),JP=n(ICe,"A",{href:!0});var THr=s(JP);kho=r(THr,"VanModel"),THr.forEach(t),Sho=r(ICe," (VAN model)"),ICe.forEach(t),Rho=i(M),A_=n(M,"LI",{});var qCe=s(A_);Pte=n(qCe,"STRONG",{});var MHr=s(Pte);Bho=r(MHr,"vilt"),MHr.forEach(t),Pho=r(qCe," \u2014 "),YP=n(qCe,"A",{href:!0});var EHr=s(YP);$ho=r(EHr,"ViltModel"),EHr.forEach(t),Iho=r(qCe," (ViLT model)"),qCe.forEach(t),qho=i(M),y_=n(M,"LI",{});var NCe=s(y_);$te=n(NCe,"STRONG",{});var CHr=s($te);Nho=r(CHr,"vision-text-dual-encoder"),CHr.forEach(t),jho=r(NCe," \u2014 "),KP=n(NCe,"A",{href:!0});var wHr=s(KP);Dho=r(wHr,"VisionTextDualEncoderModel"),wHr.forEach(t),Gho=r(NCe," (VisionTextDualEncoder model)"),NCe.forEach(t),Oho=i(M),L_=n(M,"LI",{});var jCe=s(L_);Ite=n(jCe,"STRONG",{});var AHr=s(Ite);Vho=r(AHr,"visual_bert"),AHr.forEach(t),Xho=r(jCe," \u2014 "),ZP=n(jCe,"A",{href:!0});var yHr=s(ZP);zho=r(yHr,"VisualBertModel"),yHr.forEach(t),Qho=r(jCe," (VisualBert model)"),jCe.forEach(t),Who=i(M),x_=n(M,"LI",{});var DCe=s(x_);qte=n(DCe,"STRONG",{});var LHr=s(qte);Hho=r(LHr,"vit"),LHr.forEach(t),Uho=r(DCe," \u2014 "),e$=n(DCe,"A",{href:!0});var xHr=s(e$);Jho=r(xHr,"ViTModel"),xHr.forEach(t),Yho=r(DCe," (ViT model)"),DCe.forEach(t),Kho=i(M),k_=n(M,"LI",{});var GCe=s(k_);Nte=n(GCe,"STRONG",{});var kHr=s(Nte);Zho=r(kHr,"vit_mae"),kHr.forEach(t),epo=r(GCe," \u2014 "),o$=n(GCe,"A",{href:!0});var SHr=s(o$);opo=r(SHr,"ViTMAEModel"),SHr.forEach(t),rpo=r(GCe," (ViTMAE model)"),GCe.forEach(t),tpo=i(M),S_=n(M,"LI",{});var OCe=s(S_);jte=n(OCe,"STRONG",{});var RHr=s(jte);apo=r(RHr,"wav2vec2"),RHr.forEach(t),npo=r(OCe," \u2014 "),r$=n(OCe,"A",{href:!0});var BHr=s(r$);spo=r(BHr,"Wav2Vec2Model"),BHr.forEach(t),lpo=r(OCe," (Wav2Vec2 model)"),OCe.forEach(t),ipo=i(M),R_=n(M,"LI",{});var VCe=s(R_);Dte=n(VCe,"STRONG",{});var PHr=s(Dte);dpo=r(PHr,"wavlm"),PHr.forEach(t),cpo=r(VCe," \u2014 "),t$=n(VCe,"A",{href:!0});var $Hr=s(t$);fpo=r($Hr,"WavLMModel"),$Hr.forEach(t),mpo=r(VCe," (WavLM model)"),VCe.forEach(t),gpo=i(M),B_=n(M,"LI",{});var XCe=s(B_);Gte=n(XCe,"STRONG",{});var IHr=s(Gte);hpo=r(IHr,"xglm"),IHr.forEach(t),ppo=r(XCe," \u2014 "),a$=n(XCe,"A",{href:!0});var qHr=s(a$);_po=r(qHr,"XGLMModel"),qHr.forEach(t),upo=r(XCe," (XGLM model)"),XCe.forEach(t),bpo=i(M),P_=n(M,"LI",{});var zCe=s(P_);Ote=n(zCe,"STRONG",{});var NHr=s(Ote);vpo=r(NHr,"xlm"),NHr.forEach(t),Fpo=r(zCe," \u2014 "),n$=n(zCe,"A",{href:!0});var jHr=s(n$);Tpo=r(jHr,"XLMModel"),jHr.forEach(t),Mpo=r(zCe," (XLM model)"),zCe.forEach(t),Epo=i(M),$_=n(M,"LI",{});var QCe=s($_);Vte=n(QCe,"STRONG",{});var DHr=s(Vte);Cpo=r(DHr,"xlm-prophetnet"),DHr.forEach(t),wpo=r(QCe," \u2014 "),s$=n(QCe,"A",{href:!0});var GHr=s(s$);Apo=r(GHr,"XLMProphetNetModel"),GHr.forEach(t),ypo=r(QCe," (XLMProphetNet model)"),QCe.forEach(t),Lpo=i(M),I_=n(M,"LI",{});var WCe=s(I_);Xte=n(WCe,"STRONG",{});var OHr=s(Xte);xpo=r(OHr,"xlm-roberta"),OHr.forEach(t),kpo=r(WCe," \u2014 "),l$=n(WCe,"A",{href:!0});var VHr=s(l$);Spo=r(VHr,"XLMRobertaModel"),VHr.forEach(t),Rpo=r(WCe," (XLM-RoBERTa model)"),WCe.forEach(t),Bpo=i(M),q_=n(M,"LI",{});var HCe=s(q_);zte=n(HCe,"STRONG",{});var XHr=s(zte);Ppo=r(XHr,"xlm-roberta-xl"),XHr.forEach(t),$po=r(HCe," \u2014 "),i$=n(HCe,"A",{href:!0});var zHr=s(i$);Ipo=r(zHr,"XLMRobertaXLModel"),zHr.forEach(t),qpo=r(HCe," (XLM-RoBERTa-XL model)"),HCe.forEach(t),Npo=i(M),N_=n(M,"LI",{});var UCe=s(N_);Qte=n(UCe,"STRONG",{});var QHr=s(Qte);jpo=r(QHr,"xlnet"),QHr.forEach(t),Dpo=r(UCe," \u2014 "),d$=n(UCe,"A",{href:!0});var WHr=s(d$);Gpo=r(WHr,"XLNetModel"),WHr.forEach(t),Opo=r(UCe," (XLNet model)"),UCe.forEach(t),Vpo=i(M),j_=n(M,"LI",{});var JCe=s(j_);Wte=n(JCe,"STRONG",{});var HHr=s(Wte);Xpo=r(HHr,"yoso"),HHr.forEach(t),zpo=r(JCe," \u2014 "),c$=n(JCe,"A",{href:!0});var UHr=s(c$);Qpo=r(UHr,"YosoModel"),UHr.forEach(t),Wpo=r(JCe," (YOSO model)"),JCe.forEach(t),M.forEach(t),Hpo=i(Dt),D_=n(Dt,"P",{});var YCe=s(D_);Upo=r(YCe,"The model is set in evaluation mode by default using "),Hte=n(YCe,"CODE",{});var JHr=s(Hte);Jpo=r(JHr,"model.eval()"),JHr.forEach(t),Ypo=r(YCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ute=n(YCe,"CODE",{});var YHr=s(Ute);Kpo=r(YHr,"model.train()"),YHr.forEach(t),YCe.forEach(t),Zpo=i(Dt),Jte=n(Dt,"P",{});var KHr=s(Jte);e_o=r(KHr,"Examples:"),KHr.forEach(t),o_o=i(Dt),m(vw.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),mBe=i(c),ed=n(c,"H2",{class:!0});var T$e=s(ed);G_=n(T$e,"A",{id:!0,class:!0,href:!0});var ZHr=s(G_);Yte=n(ZHr,"SPAN",{});var eUr=s(Yte);m(Fw.$$.fragment,eUr),eUr.forEach(t),ZHr.forEach(t),r_o=i(T$e),Kte=n(T$e,"SPAN",{});var oUr=s(Kte);t_o=r(oUr,"AutoModelForPreTraining"),oUr.forEach(t),T$e.forEach(t),gBe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(Tw.$$.fragment,Us),a_o=i(Us),od=n(Us,"P",{});var RU=s(od);n_o=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),f$=n(RU,"A",{href:!0});var rUr=s(f$);s_o=r(rUr,"from_pretrained()"),rUr.forEach(t),l_o=r(RU," class method or the "),m$=n(RU,"A",{href:!0});var tUr=s(m$);i_o=r(tUr,"from_config()"),tUr.forEach(t),d_o=r(RU,` class
method.`),RU.forEach(t),c_o=i(Us),Mw=n(Us,"P",{});var M$e=s(Mw);f_o=r(M$e,"This class cannot be instantiated directly using "),Zte=n(M$e,"CODE",{});var aUr=s(Zte);m_o=r(aUr,"__init__()"),aUr.forEach(t),g_o=r(M$e," (throws an error)."),M$e.forEach(t),h_o=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(Ew.$$.fragment,Js),p_o=i(Js),eae=n(Js,"P",{});var nUr=s(eae);__o=r(nUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nUr.forEach(t),u_o=i(Js),rd=n(Js,"P",{});var BU=s(rd);b_o=r(BU,`Note:
Loading a model from its configuration file does `),oae=n(BU,"STRONG",{});var sUr=s(oae);v_o=r(sUr,"not"),sUr.forEach(t),F_o=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),g$=n(BU,"A",{href:!0});var lUr=s(g$);T_o=r(lUr,"from_pretrained()"),lUr.forEach(t),M_o=r(BU," to load the model weights."),BU.forEach(t),E_o=i(Js),rae=n(Js,"P",{});var iUr=s(rae);C_o=r(iUr,"Examples:"),iUr.forEach(t),w_o=i(Js),m(Cw.$$.fragment,Js),Js.forEach(t),A_o=i(Us),Ne=n(Us,"DIV",{class:!0});var Gt=s(Ne);m(ww.$$.fragment,Gt),y_o=i(Gt),tae=n(Gt,"P",{});var dUr=s(tae);L_o=r(dUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dUr.forEach(t),x_o=i(Gt),za=n(Gt,"P",{});var q3=s(za);k_o=r(q3,"The model class to instantiate is selected based on the "),aae=n(q3,"CODE",{});var cUr=s(aae);S_o=r(cUr,"model_type"),cUr.forEach(t),R_o=r(q3,` property of the config object (either
passed as an argument or loaded from `),nae=n(q3,"CODE",{});var fUr=s(nae);B_o=r(fUr,"pretrained_model_name_or_path"),fUr.forEach(t),P_o=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sae=n(q3,"CODE",{});var mUr=s(sae);$_o=r(mUr,"pretrained_model_name_or_path"),mUr.forEach(t),I_o=r(q3,":"),q3.forEach(t),q_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);O_=n(B,"LI",{});var KCe=s(O_);lae=n(KCe,"STRONG",{});var gUr=s(lae);N_o=r(gUr,"albert"),gUr.forEach(t),j_o=r(KCe," \u2014 "),h$=n(KCe,"A",{href:!0});var hUr=s(h$);D_o=r(hUr,"AlbertForPreTraining"),hUr.forEach(t),G_o=r(KCe," (ALBERT model)"),KCe.forEach(t),O_o=i(B),V_=n(B,"LI",{});var ZCe=s(V_);iae=n(ZCe,"STRONG",{});var pUr=s(iae);V_o=r(pUr,"bart"),pUr.forEach(t),X_o=r(ZCe," \u2014 "),p$=n(ZCe,"A",{href:!0});var _Ur=s(p$);z_o=r(_Ur,"BartForConditionalGeneration"),_Ur.forEach(t),Q_o=r(ZCe," (BART model)"),ZCe.forEach(t),W_o=i(B),X_=n(B,"LI",{});var ewe=s(X_);dae=n(ewe,"STRONG",{});var uUr=s(dae);H_o=r(uUr,"bert"),uUr.forEach(t),U_o=r(ewe," \u2014 "),_$=n(ewe,"A",{href:!0});var bUr=s(_$);J_o=r(bUr,"BertForPreTraining"),bUr.forEach(t),Y_o=r(ewe," (BERT model)"),ewe.forEach(t),K_o=i(B),z_=n(B,"LI",{});var owe=s(z_);cae=n(owe,"STRONG",{});var vUr=s(cae);Z_o=r(vUr,"big_bird"),vUr.forEach(t),euo=r(owe," \u2014 "),u$=n(owe,"A",{href:!0});var FUr=s(u$);ouo=r(FUr,"BigBirdForPreTraining"),FUr.forEach(t),ruo=r(owe," (BigBird model)"),owe.forEach(t),tuo=i(B),Q_=n(B,"LI",{});var rwe=s(Q_);fae=n(rwe,"STRONG",{});var TUr=s(fae);auo=r(TUr,"camembert"),TUr.forEach(t),nuo=r(rwe," \u2014 "),b$=n(rwe,"A",{href:!0});var MUr=s(b$);suo=r(MUr,"CamembertForMaskedLM"),MUr.forEach(t),luo=r(rwe," (CamemBERT model)"),rwe.forEach(t),iuo=i(B),W_=n(B,"LI",{});var twe=s(W_);mae=n(twe,"STRONG",{});var EUr=s(mae);duo=r(EUr,"ctrl"),EUr.forEach(t),cuo=r(twe," \u2014 "),v$=n(twe,"A",{href:!0});var CUr=s(v$);fuo=r(CUr,"CTRLLMHeadModel"),CUr.forEach(t),muo=r(twe," (CTRL model)"),twe.forEach(t),guo=i(B),H_=n(B,"LI",{});var awe=s(H_);gae=n(awe,"STRONG",{});var wUr=s(gae);huo=r(wUr,"data2vec-text"),wUr.forEach(t),puo=r(awe," \u2014 "),F$=n(awe,"A",{href:!0});var AUr=s(F$);_uo=r(AUr,"Data2VecTextForMaskedLM"),AUr.forEach(t),uuo=r(awe," (Data2VecText model)"),awe.forEach(t),buo=i(B),U_=n(B,"LI",{});var nwe=s(U_);hae=n(nwe,"STRONG",{});var yUr=s(hae);vuo=r(yUr,"deberta"),yUr.forEach(t),Fuo=r(nwe," \u2014 "),T$=n(nwe,"A",{href:!0});var LUr=s(T$);Tuo=r(LUr,"DebertaForMaskedLM"),LUr.forEach(t),Muo=r(nwe," (DeBERTa model)"),nwe.forEach(t),Euo=i(B),J_=n(B,"LI",{});var swe=s(J_);pae=n(swe,"STRONG",{});var xUr=s(pae);Cuo=r(xUr,"deberta-v2"),xUr.forEach(t),wuo=r(swe," \u2014 "),M$=n(swe,"A",{href:!0});var kUr=s(M$);Auo=r(kUr,"DebertaV2ForMaskedLM"),kUr.forEach(t),yuo=r(swe," (DeBERTa-v2 model)"),swe.forEach(t),Luo=i(B),Y_=n(B,"LI",{});var lwe=s(Y_);_ae=n(lwe,"STRONG",{});var SUr=s(_ae);xuo=r(SUr,"distilbert"),SUr.forEach(t),kuo=r(lwe," \u2014 "),E$=n(lwe,"A",{href:!0});var RUr=s(E$);Suo=r(RUr,"DistilBertForMaskedLM"),RUr.forEach(t),Ruo=r(lwe," (DistilBERT model)"),lwe.forEach(t),Buo=i(B),K_=n(B,"LI",{});var iwe=s(K_);uae=n(iwe,"STRONG",{});var BUr=s(uae);Puo=r(BUr,"electra"),BUr.forEach(t),$uo=r(iwe," \u2014 "),C$=n(iwe,"A",{href:!0});var PUr=s(C$);Iuo=r(PUr,"ElectraForPreTraining"),PUr.forEach(t),quo=r(iwe," (ELECTRA model)"),iwe.forEach(t),Nuo=i(B),Z_=n(B,"LI",{});var dwe=s(Z_);bae=n(dwe,"STRONG",{});var $Ur=s(bae);juo=r($Ur,"flaubert"),$Ur.forEach(t),Duo=r(dwe," \u2014 "),w$=n(dwe,"A",{href:!0});var IUr=s(w$);Guo=r(IUr,"FlaubertWithLMHeadModel"),IUr.forEach(t),Ouo=r(dwe," (FlauBERT model)"),dwe.forEach(t),Vuo=i(B),eu=n(B,"LI",{});var cwe=s(eu);vae=n(cwe,"STRONG",{});var qUr=s(vae);Xuo=r(qUr,"flava"),qUr.forEach(t),zuo=r(cwe," \u2014 "),A$=n(cwe,"A",{href:!0});var NUr=s(A$);Quo=r(NUr,"FLAVAForPreTraining"),NUr.forEach(t),Wuo=r(cwe," (FLAVA model)"),cwe.forEach(t),Huo=i(B),ou=n(B,"LI",{});var fwe=s(ou);Fae=n(fwe,"STRONG",{});var jUr=s(Fae);Uuo=r(jUr,"fnet"),jUr.forEach(t),Juo=r(fwe," \u2014 "),y$=n(fwe,"A",{href:!0});var DUr=s(y$);Yuo=r(DUr,"FNetForPreTraining"),DUr.forEach(t),Kuo=r(fwe," (FNet model)"),fwe.forEach(t),Zuo=i(B),ru=n(B,"LI",{});var mwe=s(ru);Tae=n(mwe,"STRONG",{});var GUr=s(Tae);e6o=r(GUr,"fsmt"),GUr.forEach(t),o6o=r(mwe," \u2014 "),L$=n(mwe,"A",{href:!0});var OUr=s(L$);r6o=r(OUr,"FSMTForConditionalGeneration"),OUr.forEach(t),t6o=r(mwe," (FairSeq Machine-Translation model)"),mwe.forEach(t),a6o=i(B),tu=n(B,"LI",{});var gwe=s(tu);Mae=n(gwe,"STRONG",{});var VUr=s(Mae);n6o=r(VUr,"funnel"),VUr.forEach(t),s6o=r(gwe," \u2014 "),x$=n(gwe,"A",{href:!0});var XUr=s(x$);l6o=r(XUr,"FunnelForPreTraining"),XUr.forEach(t),i6o=r(gwe," (Funnel Transformer model)"),gwe.forEach(t),d6o=i(B),au=n(B,"LI",{});var hwe=s(au);Eae=n(hwe,"STRONG",{});var zUr=s(Eae);c6o=r(zUr,"gpt2"),zUr.forEach(t),f6o=r(hwe," \u2014 "),k$=n(hwe,"A",{href:!0});var QUr=s(k$);m6o=r(QUr,"GPT2LMHeadModel"),QUr.forEach(t),g6o=r(hwe," (OpenAI GPT-2 model)"),hwe.forEach(t),h6o=i(B),nu=n(B,"LI",{});var pwe=s(nu);Cae=n(pwe,"STRONG",{});var WUr=s(Cae);p6o=r(WUr,"ibert"),WUr.forEach(t),_6o=r(pwe," \u2014 "),S$=n(pwe,"A",{href:!0});var HUr=s(S$);u6o=r(HUr,"IBertForMaskedLM"),HUr.forEach(t),b6o=r(pwe," (I-BERT model)"),pwe.forEach(t),v6o=i(B),su=n(B,"LI",{});var _we=s(su);wae=n(_we,"STRONG",{});var UUr=s(wae);F6o=r(UUr,"layoutlm"),UUr.forEach(t),T6o=r(_we," \u2014 "),R$=n(_we,"A",{href:!0});var JUr=s(R$);M6o=r(JUr,"LayoutLMForMaskedLM"),JUr.forEach(t),E6o=r(_we," (LayoutLM model)"),_we.forEach(t),C6o=i(B),lu=n(B,"LI",{});var uwe=s(lu);Aae=n(uwe,"STRONG",{});var YUr=s(Aae);w6o=r(YUr,"longformer"),YUr.forEach(t),A6o=r(uwe," \u2014 "),B$=n(uwe,"A",{href:!0});var KUr=s(B$);y6o=r(KUr,"LongformerForMaskedLM"),KUr.forEach(t),L6o=r(uwe," (Longformer model)"),uwe.forEach(t),x6o=i(B),iu=n(B,"LI",{});var bwe=s(iu);yae=n(bwe,"STRONG",{});var ZUr=s(yae);k6o=r(ZUr,"lxmert"),ZUr.forEach(t),S6o=r(bwe," \u2014 "),P$=n(bwe,"A",{href:!0});var eJr=s(P$);R6o=r(eJr,"LxmertForPreTraining"),eJr.forEach(t),B6o=r(bwe," (LXMERT model)"),bwe.forEach(t),P6o=i(B),du=n(B,"LI",{});var vwe=s(du);Lae=n(vwe,"STRONG",{});var oJr=s(Lae);$6o=r(oJr,"megatron-bert"),oJr.forEach(t),I6o=r(vwe," \u2014 "),$$=n(vwe,"A",{href:!0});var rJr=s($$);q6o=r(rJr,"MegatronBertForPreTraining"),rJr.forEach(t),N6o=r(vwe," (MegatronBert model)"),vwe.forEach(t),j6o=i(B),cu=n(B,"LI",{});var Fwe=s(cu);xae=n(Fwe,"STRONG",{});var tJr=s(xae);D6o=r(tJr,"mobilebert"),tJr.forEach(t),G6o=r(Fwe," \u2014 "),I$=n(Fwe,"A",{href:!0});var aJr=s(I$);O6o=r(aJr,"MobileBertForPreTraining"),aJr.forEach(t),V6o=r(Fwe," (MobileBERT model)"),Fwe.forEach(t),X6o=i(B),fu=n(B,"LI",{});var Twe=s(fu);kae=n(Twe,"STRONG",{});var nJr=s(kae);z6o=r(nJr,"mpnet"),nJr.forEach(t),Q6o=r(Twe," \u2014 "),q$=n(Twe,"A",{href:!0});var sJr=s(q$);W6o=r(sJr,"MPNetForMaskedLM"),sJr.forEach(t),H6o=r(Twe," (MPNet model)"),Twe.forEach(t),U6o=i(B),mu=n(B,"LI",{});var Mwe=s(mu);Sae=n(Mwe,"STRONG",{});var lJr=s(Sae);J6o=r(lJr,"openai-gpt"),lJr.forEach(t),Y6o=r(Mwe," \u2014 "),N$=n(Mwe,"A",{href:!0});var iJr=s(N$);K6o=r(iJr,"OpenAIGPTLMHeadModel"),iJr.forEach(t),Z6o=r(Mwe," (OpenAI GPT model)"),Mwe.forEach(t),e1o=i(B),gu=n(B,"LI",{});var Ewe=s(gu);Rae=n(Ewe,"STRONG",{});var dJr=s(Rae);o1o=r(dJr,"retribert"),dJr.forEach(t),r1o=r(Ewe," \u2014 "),j$=n(Ewe,"A",{href:!0});var cJr=s(j$);t1o=r(cJr,"RetriBertModel"),cJr.forEach(t),a1o=r(Ewe," (RetriBERT model)"),Ewe.forEach(t),n1o=i(B),hu=n(B,"LI",{});var Cwe=s(hu);Bae=n(Cwe,"STRONG",{});var fJr=s(Bae);s1o=r(fJr,"roberta"),fJr.forEach(t),l1o=r(Cwe," \u2014 "),D$=n(Cwe,"A",{href:!0});var mJr=s(D$);i1o=r(mJr,"RobertaForMaskedLM"),mJr.forEach(t),d1o=r(Cwe," (RoBERTa model)"),Cwe.forEach(t),c1o=i(B),pu=n(B,"LI",{});var wwe=s(pu);Pae=n(wwe,"STRONG",{});var gJr=s(Pae);f1o=r(gJr,"squeezebert"),gJr.forEach(t),m1o=r(wwe," \u2014 "),G$=n(wwe,"A",{href:!0});var hJr=s(G$);g1o=r(hJr,"SqueezeBertForMaskedLM"),hJr.forEach(t),h1o=r(wwe," (SqueezeBERT model)"),wwe.forEach(t),p1o=i(B),_u=n(B,"LI",{});var Awe=s(_u);$ae=n(Awe,"STRONG",{});var pJr=s($ae);_1o=r(pJr,"t5"),pJr.forEach(t),u1o=r(Awe," \u2014 "),O$=n(Awe,"A",{href:!0});var _Jr=s(O$);b1o=r(_Jr,"T5ForConditionalGeneration"),_Jr.forEach(t),v1o=r(Awe," (T5 model)"),Awe.forEach(t),F1o=i(B),uu=n(B,"LI",{});var ywe=s(uu);Iae=n(ywe,"STRONG",{});var uJr=s(Iae);T1o=r(uJr,"tapas"),uJr.forEach(t),M1o=r(ywe," \u2014 "),V$=n(ywe,"A",{href:!0});var bJr=s(V$);E1o=r(bJr,"TapasForMaskedLM"),bJr.forEach(t),C1o=r(ywe," (TAPAS model)"),ywe.forEach(t),w1o=i(B),bu=n(B,"LI",{});var Lwe=s(bu);qae=n(Lwe,"STRONG",{});var vJr=s(qae);A1o=r(vJr,"transfo-xl"),vJr.forEach(t),y1o=r(Lwe," \u2014 "),X$=n(Lwe,"A",{href:!0});var FJr=s(X$);L1o=r(FJr,"TransfoXLLMHeadModel"),FJr.forEach(t),x1o=r(Lwe," (Transformer-XL model)"),Lwe.forEach(t),k1o=i(B),vu=n(B,"LI",{});var xwe=s(vu);Nae=n(xwe,"STRONG",{});var TJr=s(Nae);S1o=r(TJr,"unispeech"),TJr.forEach(t),R1o=r(xwe," \u2014 "),z$=n(xwe,"A",{href:!0});var MJr=s(z$);B1o=r(MJr,"UniSpeechForPreTraining"),MJr.forEach(t),P1o=r(xwe," (UniSpeech model)"),xwe.forEach(t),$1o=i(B),Fu=n(B,"LI",{});var kwe=s(Fu);jae=n(kwe,"STRONG",{});var EJr=s(jae);I1o=r(EJr,"unispeech-sat"),EJr.forEach(t),q1o=r(kwe," \u2014 "),Q$=n(kwe,"A",{href:!0});var CJr=s(Q$);N1o=r(CJr,"UniSpeechSatForPreTraining"),CJr.forEach(t),j1o=r(kwe," (UniSpeechSat model)"),kwe.forEach(t),D1o=i(B),Tu=n(B,"LI",{});var Swe=s(Tu);Dae=n(Swe,"STRONG",{});var wJr=s(Dae);G1o=r(wJr,"visual_bert"),wJr.forEach(t),O1o=r(Swe," \u2014 "),W$=n(Swe,"A",{href:!0});var AJr=s(W$);V1o=r(AJr,"VisualBertForPreTraining"),AJr.forEach(t),X1o=r(Swe," (VisualBert model)"),Swe.forEach(t),z1o=i(B),Mu=n(B,"LI",{});var Rwe=s(Mu);Gae=n(Rwe,"STRONG",{});var yJr=s(Gae);Q1o=r(yJr,"vit_mae"),yJr.forEach(t),W1o=r(Rwe," \u2014 "),H$=n(Rwe,"A",{href:!0});var LJr=s(H$);H1o=r(LJr,"ViTMAEForPreTraining"),LJr.forEach(t),U1o=r(Rwe," (ViTMAE model)"),Rwe.forEach(t),J1o=i(B),Eu=n(B,"LI",{});var Bwe=s(Eu);Oae=n(Bwe,"STRONG",{});var xJr=s(Oae);Y1o=r(xJr,"wav2vec2"),xJr.forEach(t),K1o=r(Bwe," \u2014 "),U$=n(Bwe,"A",{href:!0});var kJr=s(U$);Z1o=r(kJr,"Wav2Vec2ForPreTraining"),kJr.forEach(t),e4o=r(Bwe," (Wav2Vec2 model)"),Bwe.forEach(t),o4o=i(B),Cu=n(B,"LI",{});var Pwe=s(Cu);Vae=n(Pwe,"STRONG",{});var SJr=s(Vae);r4o=r(SJr,"xlm"),SJr.forEach(t),t4o=r(Pwe," \u2014 "),J$=n(Pwe,"A",{href:!0});var RJr=s(J$);a4o=r(RJr,"XLMWithLMHeadModel"),RJr.forEach(t),n4o=r(Pwe," (XLM model)"),Pwe.forEach(t),s4o=i(B),wu=n(B,"LI",{});var $we=s(wu);Xae=n($we,"STRONG",{});var BJr=s(Xae);l4o=r(BJr,"xlm-roberta"),BJr.forEach(t),i4o=r($we," \u2014 "),Y$=n($we,"A",{href:!0});var PJr=s(Y$);d4o=r(PJr,"XLMRobertaForMaskedLM"),PJr.forEach(t),c4o=r($we," (XLM-RoBERTa model)"),$we.forEach(t),f4o=i(B),Au=n(B,"LI",{});var Iwe=s(Au);zae=n(Iwe,"STRONG",{});var $Jr=s(zae);m4o=r($Jr,"xlm-roberta-xl"),$Jr.forEach(t),g4o=r(Iwe," \u2014 "),K$=n(Iwe,"A",{href:!0});var IJr=s(K$);h4o=r(IJr,"XLMRobertaXLForMaskedLM"),IJr.forEach(t),p4o=r(Iwe," (XLM-RoBERTa-XL model)"),Iwe.forEach(t),_4o=i(B),yu=n(B,"LI",{});var qwe=s(yu);Qae=n(qwe,"STRONG",{});var qJr=s(Qae);u4o=r(qJr,"xlnet"),qJr.forEach(t),b4o=r(qwe," \u2014 "),Z$=n(qwe,"A",{href:!0});var NJr=s(Z$);v4o=r(NJr,"XLNetLMHeadModel"),NJr.forEach(t),F4o=r(qwe," (XLNet model)"),qwe.forEach(t),B.forEach(t),T4o=i(Gt),Lu=n(Gt,"P",{});var Nwe=s(Lu);M4o=r(Nwe,"The model is set in evaluation mode by default using "),Wae=n(Nwe,"CODE",{});var jJr=s(Wae);E4o=r(jJr,"model.eval()"),jJr.forEach(t),C4o=r(Nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hae=n(Nwe,"CODE",{});var DJr=s(Hae);w4o=r(DJr,"model.train()"),DJr.forEach(t),Nwe.forEach(t),A4o=i(Gt),Uae=n(Gt,"P",{});var GJr=s(Uae);y4o=r(GJr,"Examples:"),GJr.forEach(t),L4o=i(Gt),m(Aw.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),hBe=i(c),td=n(c,"H2",{class:!0});var E$e=s(td);xu=n(E$e,"A",{id:!0,class:!0,href:!0});var OJr=s(xu);Jae=n(OJr,"SPAN",{});var VJr=s(Jae);m(yw.$$.fragment,VJr),VJr.forEach(t),OJr.forEach(t),x4o=i(E$e),Yae=n(E$e,"SPAN",{});var XJr=s(Yae);k4o=r(XJr,"AutoModelForCausalLM"),XJr.forEach(t),E$e.forEach(t),pBe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(Lw.$$.fragment,Ys),S4o=i(Ys),ad=n(Ys,"P",{});var PU=s(ad);R4o=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),eI=n(PU,"A",{href:!0});var zJr=s(eI);B4o=r(zJr,"from_pretrained()"),zJr.forEach(t),P4o=r(PU," class method or the "),oI=n(PU,"A",{href:!0});var QJr=s(oI);$4o=r(QJr,"from_config()"),QJr.forEach(t),I4o=r(PU,` class
method.`),PU.forEach(t),q4o=i(Ys),xw=n(Ys,"P",{});var C$e=s(xw);N4o=r(C$e,"This class cannot be instantiated directly using "),Kae=n(C$e,"CODE",{});var WJr=s(Kae);j4o=r(WJr,"__init__()"),WJr.forEach(t),D4o=r(C$e," (throws an error)."),C$e.forEach(t),G4o=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(kw.$$.fragment,Ks),O4o=i(Ks),Zae=n(Ks,"P",{});var HJr=s(Zae);V4o=r(HJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HJr.forEach(t),X4o=i(Ks),nd=n(Ks,"P",{});var $U=s(nd);z4o=r($U,`Note:
Loading a model from its configuration file does `),ene=n($U,"STRONG",{});var UJr=s(ene);Q4o=r(UJr,"not"),UJr.forEach(t),W4o=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),rI=n($U,"A",{href:!0});var JJr=s(rI);H4o=r(JJr,"from_pretrained()"),JJr.forEach(t),U4o=r($U," to load the model weights."),$U.forEach(t),J4o=i(Ks),one=n(Ks,"P",{});var YJr=s(one);Y4o=r(YJr,"Examples:"),YJr.forEach(t),K4o=i(Ks),m(Sw.$$.fragment,Ks),Ks.forEach(t),Z4o=i(Ys),je=n(Ys,"DIV",{class:!0});var Ot=s(je);m(Rw.$$.fragment,Ot),ebo=i(Ot),rne=n(Ot,"P",{});var KJr=s(rne);obo=r(KJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KJr.forEach(t),rbo=i(Ot),Qa=n(Ot,"P",{});var N3=s(Qa);tbo=r(N3,"The model class to instantiate is selected based on the "),tne=n(N3,"CODE",{});var ZJr=s(tne);abo=r(ZJr,"model_type"),ZJr.forEach(t),nbo=r(N3,` property of the config object (either
passed as an argument or loaded from `),ane=n(N3,"CODE",{});var eYr=s(ane);sbo=r(eYr,"pretrained_model_name_or_path"),eYr.forEach(t),lbo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nne=n(N3,"CODE",{});var oYr=s(nne);ibo=r(oYr,"pretrained_model_name_or_path"),oYr.forEach(t),dbo=r(N3,":"),N3.forEach(t),cbo=i(Ot),$=n(Ot,"UL",{});var q=s($);ku=n(q,"LI",{});var jwe=s(ku);sne=n(jwe,"STRONG",{});var rYr=s(sne);fbo=r(rYr,"bart"),rYr.forEach(t),mbo=r(jwe," \u2014 "),tI=n(jwe,"A",{href:!0});var tYr=s(tI);gbo=r(tYr,"BartForCausalLM"),tYr.forEach(t),hbo=r(jwe," (BART model)"),jwe.forEach(t),pbo=i(q),Su=n(q,"LI",{});var Dwe=s(Su);lne=n(Dwe,"STRONG",{});var aYr=s(lne);_bo=r(aYr,"bert"),aYr.forEach(t),ubo=r(Dwe," \u2014 "),aI=n(Dwe,"A",{href:!0});var nYr=s(aI);bbo=r(nYr,"BertLMHeadModel"),nYr.forEach(t),vbo=r(Dwe," (BERT model)"),Dwe.forEach(t),Fbo=i(q),Ru=n(q,"LI",{});var Gwe=s(Ru);ine=n(Gwe,"STRONG",{});var sYr=s(ine);Tbo=r(sYr,"bert-generation"),sYr.forEach(t),Mbo=r(Gwe," \u2014 "),nI=n(Gwe,"A",{href:!0});var lYr=s(nI);Ebo=r(lYr,"BertGenerationDecoder"),lYr.forEach(t),Cbo=r(Gwe," (Bert Generation model)"),Gwe.forEach(t),wbo=i(q),Bu=n(q,"LI",{});var Owe=s(Bu);dne=n(Owe,"STRONG",{});var iYr=s(dne);Abo=r(iYr,"big_bird"),iYr.forEach(t),ybo=r(Owe," \u2014 "),sI=n(Owe,"A",{href:!0});var dYr=s(sI);Lbo=r(dYr,"BigBirdForCausalLM"),dYr.forEach(t),xbo=r(Owe," (BigBird model)"),Owe.forEach(t),kbo=i(q),Pu=n(q,"LI",{});var Vwe=s(Pu);cne=n(Vwe,"STRONG",{});var cYr=s(cne);Sbo=r(cYr,"bigbird_pegasus"),cYr.forEach(t),Rbo=r(Vwe," \u2014 "),lI=n(Vwe,"A",{href:!0});var fYr=s(lI);Bbo=r(fYr,"BigBirdPegasusForCausalLM"),fYr.forEach(t),Pbo=r(Vwe," (BigBirdPegasus model)"),Vwe.forEach(t),$bo=i(q),$u=n(q,"LI",{});var Xwe=s($u);fne=n(Xwe,"STRONG",{});var mYr=s(fne);Ibo=r(mYr,"blenderbot"),mYr.forEach(t),qbo=r(Xwe," \u2014 "),iI=n(Xwe,"A",{href:!0});var gYr=s(iI);Nbo=r(gYr,"BlenderbotForCausalLM"),gYr.forEach(t),jbo=r(Xwe," (Blenderbot model)"),Xwe.forEach(t),Dbo=i(q),Iu=n(q,"LI",{});var zwe=s(Iu);mne=n(zwe,"STRONG",{});var hYr=s(mne);Gbo=r(hYr,"blenderbot-small"),hYr.forEach(t),Obo=r(zwe," \u2014 "),dI=n(zwe,"A",{href:!0});var pYr=s(dI);Vbo=r(pYr,"BlenderbotSmallForCausalLM"),pYr.forEach(t),Xbo=r(zwe," (BlenderbotSmall model)"),zwe.forEach(t),zbo=i(q),qu=n(q,"LI",{});var Qwe=s(qu);gne=n(Qwe,"STRONG",{});var _Yr=s(gne);Qbo=r(_Yr,"camembert"),_Yr.forEach(t),Wbo=r(Qwe," \u2014 "),cI=n(Qwe,"A",{href:!0});var uYr=s(cI);Hbo=r(uYr,"CamembertForCausalLM"),uYr.forEach(t),Ubo=r(Qwe," (CamemBERT model)"),Qwe.forEach(t),Jbo=i(q),Nu=n(q,"LI",{});var Wwe=s(Nu);hne=n(Wwe,"STRONG",{});var bYr=s(hne);Ybo=r(bYr,"ctrl"),bYr.forEach(t),Kbo=r(Wwe," \u2014 "),fI=n(Wwe,"A",{href:!0});var vYr=s(fI);Zbo=r(vYr,"CTRLLMHeadModel"),vYr.forEach(t),e2o=r(Wwe," (CTRL model)"),Wwe.forEach(t),o2o=i(q),ju=n(q,"LI",{});var Hwe=s(ju);pne=n(Hwe,"STRONG",{});var FYr=s(pne);r2o=r(FYr,"data2vec-text"),FYr.forEach(t),t2o=r(Hwe," \u2014 "),mI=n(Hwe,"A",{href:!0});var TYr=s(mI);a2o=r(TYr,"Data2VecTextForCausalLM"),TYr.forEach(t),n2o=r(Hwe," (Data2VecText model)"),Hwe.forEach(t),s2o=i(q),Du=n(q,"LI",{});var Uwe=s(Du);_ne=n(Uwe,"STRONG",{});var MYr=s(_ne);l2o=r(MYr,"electra"),MYr.forEach(t),i2o=r(Uwe," \u2014 "),gI=n(Uwe,"A",{href:!0});var EYr=s(gI);d2o=r(EYr,"ElectraForCausalLM"),EYr.forEach(t),c2o=r(Uwe," (ELECTRA model)"),Uwe.forEach(t),f2o=i(q),Gu=n(q,"LI",{});var Jwe=s(Gu);une=n(Jwe,"STRONG",{});var CYr=s(une);m2o=r(CYr,"gpt2"),CYr.forEach(t),g2o=r(Jwe," \u2014 "),hI=n(Jwe,"A",{href:!0});var wYr=s(hI);h2o=r(wYr,"GPT2LMHeadModel"),wYr.forEach(t),p2o=r(Jwe," (OpenAI GPT-2 model)"),Jwe.forEach(t),_2o=i(q),Ou=n(q,"LI",{});var Ywe=s(Ou);bne=n(Ywe,"STRONG",{});var AYr=s(bne);u2o=r(AYr,"gpt_neo"),AYr.forEach(t),b2o=r(Ywe," \u2014 "),pI=n(Ywe,"A",{href:!0});var yYr=s(pI);v2o=r(yYr,"GPTNeoForCausalLM"),yYr.forEach(t),F2o=r(Ywe," (GPT Neo model)"),Ywe.forEach(t),T2o=i(q),Vu=n(q,"LI",{});var Kwe=s(Vu);vne=n(Kwe,"STRONG",{});var LYr=s(vne);M2o=r(LYr,"gptj"),LYr.forEach(t),E2o=r(Kwe," \u2014 "),_I=n(Kwe,"A",{href:!0});var xYr=s(_I);C2o=r(xYr,"GPTJForCausalLM"),xYr.forEach(t),w2o=r(Kwe," (GPT-J model)"),Kwe.forEach(t),A2o=i(q),Xu=n(q,"LI",{});var Zwe=s(Xu);Fne=n(Zwe,"STRONG",{});var kYr=s(Fne);y2o=r(kYr,"marian"),kYr.forEach(t),L2o=r(Zwe," \u2014 "),uI=n(Zwe,"A",{href:!0});var SYr=s(uI);x2o=r(SYr,"MarianForCausalLM"),SYr.forEach(t),k2o=r(Zwe," (Marian model)"),Zwe.forEach(t),S2o=i(q),zu=n(q,"LI",{});var eAe=s(zu);Tne=n(eAe,"STRONG",{});var RYr=s(Tne);R2o=r(RYr,"mbart"),RYr.forEach(t),B2o=r(eAe," \u2014 "),bI=n(eAe,"A",{href:!0});var BYr=s(bI);P2o=r(BYr,"MBartForCausalLM"),BYr.forEach(t),$2o=r(eAe," (mBART model)"),eAe.forEach(t),I2o=i(q),Qu=n(q,"LI",{});var oAe=s(Qu);Mne=n(oAe,"STRONG",{});var PYr=s(Mne);q2o=r(PYr,"megatron-bert"),PYr.forEach(t),N2o=r(oAe," \u2014 "),vI=n(oAe,"A",{href:!0});var $Yr=s(vI);j2o=r($Yr,"MegatronBertForCausalLM"),$Yr.forEach(t),D2o=r(oAe," (MegatronBert model)"),oAe.forEach(t),G2o=i(q),Wu=n(q,"LI",{});var rAe=s(Wu);Ene=n(rAe,"STRONG",{});var IYr=s(Ene);O2o=r(IYr,"openai-gpt"),IYr.forEach(t),V2o=r(rAe," \u2014 "),FI=n(rAe,"A",{href:!0});var qYr=s(FI);X2o=r(qYr,"OpenAIGPTLMHeadModel"),qYr.forEach(t),z2o=r(rAe," (OpenAI GPT model)"),rAe.forEach(t),Q2o=i(q),Hu=n(q,"LI",{});var tAe=s(Hu);Cne=n(tAe,"STRONG",{});var NYr=s(Cne);W2o=r(NYr,"pegasus"),NYr.forEach(t),H2o=r(tAe," \u2014 "),TI=n(tAe,"A",{href:!0});var jYr=s(TI);U2o=r(jYr,"PegasusForCausalLM"),jYr.forEach(t),J2o=r(tAe," (Pegasus model)"),tAe.forEach(t),Y2o=i(q),Uu=n(q,"LI",{});var aAe=s(Uu);wne=n(aAe,"STRONG",{});var DYr=s(wne);K2o=r(DYr,"plbart"),DYr.forEach(t),Z2o=r(aAe," \u2014 "),MI=n(aAe,"A",{href:!0});var GYr=s(MI);e5o=r(GYr,"PLBartForCausalLM"),GYr.forEach(t),o5o=r(aAe," (PLBart model)"),aAe.forEach(t),r5o=i(q),Ju=n(q,"LI",{});var nAe=s(Ju);Ane=n(nAe,"STRONG",{});var OYr=s(Ane);t5o=r(OYr,"prophetnet"),OYr.forEach(t),a5o=r(nAe," \u2014 "),EI=n(nAe,"A",{href:!0});var VYr=s(EI);n5o=r(VYr,"ProphetNetForCausalLM"),VYr.forEach(t),s5o=r(nAe," (ProphetNet model)"),nAe.forEach(t),l5o=i(q),Yu=n(q,"LI",{});var sAe=s(Yu);yne=n(sAe,"STRONG",{});var XYr=s(yne);i5o=r(XYr,"qdqbert"),XYr.forEach(t),d5o=r(sAe," \u2014 "),CI=n(sAe,"A",{href:!0});var zYr=s(CI);c5o=r(zYr,"QDQBertLMHeadModel"),zYr.forEach(t),f5o=r(sAe," (QDQBert model)"),sAe.forEach(t),m5o=i(q),Ku=n(q,"LI",{});var lAe=s(Ku);Lne=n(lAe,"STRONG",{});var QYr=s(Lne);g5o=r(QYr,"reformer"),QYr.forEach(t),h5o=r(lAe," \u2014 "),wI=n(lAe,"A",{href:!0});var WYr=s(wI);p5o=r(WYr,"ReformerModelWithLMHead"),WYr.forEach(t),_5o=r(lAe," (Reformer model)"),lAe.forEach(t),u5o=i(q),Zu=n(q,"LI",{});var iAe=s(Zu);xne=n(iAe,"STRONG",{});var HYr=s(xne);b5o=r(HYr,"rembert"),HYr.forEach(t),v5o=r(iAe," \u2014 "),AI=n(iAe,"A",{href:!0});var UYr=s(AI);F5o=r(UYr,"RemBertForCausalLM"),UYr.forEach(t),T5o=r(iAe," (RemBERT model)"),iAe.forEach(t),M5o=i(q),e6=n(q,"LI",{});var dAe=s(e6);kne=n(dAe,"STRONG",{});var JYr=s(kne);E5o=r(JYr,"roberta"),JYr.forEach(t),C5o=r(dAe," \u2014 "),yI=n(dAe,"A",{href:!0});var YYr=s(yI);w5o=r(YYr,"RobertaForCausalLM"),YYr.forEach(t),A5o=r(dAe," (RoBERTa model)"),dAe.forEach(t),y5o=i(q),o6=n(q,"LI",{});var cAe=s(o6);Sne=n(cAe,"STRONG",{});var KYr=s(Sne);L5o=r(KYr,"roformer"),KYr.forEach(t),x5o=r(cAe," \u2014 "),LI=n(cAe,"A",{href:!0});var ZYr=s(LI);k5o=r(ZYr,"RoFormerForCausalLM"),ZYr.forEach(t),S5o=r(cAe," (RoFormer model)"),cAe.forEach(t),R5o=i(q),r6=n(q,"LI",{});var fAe=s(r6);Rne=n(fAe,"STRONG",{});var eKr=s(Rne);B5o=r(eKr,"speech_to_text_2"),eKr.forEach(t),P5o=r(fAe," \u2014 "),xI=n(fAe,"A",{href:!0});var oKr=s(xI);$5o=r(oKr,"Speech2Text2ForCausalLM"),oKr.forEach(t),I5o=r(fAe," (Speech2Text2 model)"),fAe.forEach(t),q5o=i(q),t6=n(q,"LI",{});var mAe=s(t6);Bne=n(mAe,"STRONG",{});var rKr=s(Bne);N5o=r(rKr,"transfo-xl"),rKr.forEach(t),j5o=r(mAe," \u2014 "),kI=n(mAe,"A",{href:!0});var tKr=s(kI);D5o=r(tKr,"TransfoXLLMHeadModel"),tKr.forEach(t),G5o=r(mAe," (Transformer-XL model)"),mAe.forEach(t),O5o=i(q),a6=n(q,"LI",{});var gAe=s(a6);Pne=n(gAe,"STRONG",{});var aKr=s(Pne);V5o=r(aKr,"trocr"),aKr.forEach(t),X5o=r(gAe," \u2014 "),SI=n(gAe,"A",{href:!0});var nKr=s(SI);z5o=r(nKr,"TrOCRForCausalLM"),nKr.forEach(t),Q5o=r(gAe," (TrOCR model)"),gAe.forEach(t),W5o=i(q),n6=n(q,"LI",{});var hAe=s(n6);$ne=n(hAe,"STRONG",{});var sKr=s($ne);H5o=r(sKr,"xglm"),sKr.forEach(t),U5o=r(hAe," \u2014 "),RI=n(hAe,"A",{href:!0});var lKr=s(RI);J5o=r(lKr,"XGLMForCausalLM"),lKr.forEach(t),Y5o=r(hAe," (XGLM model)"),hAe.forEach(t),K5o=i(q),s6=n(q,"LI",{});var pAe=s(s6);Ine=n(pAe,"STRONG",{});var iKr=s(Ine);Z5o=r(iKr,"xlm"),iKr.forEach(t),evo=r(pAe," \u2014 "),BI=n(pAe,"A",{href:!0});var dKr=s(BI);ovo=r(dKr,"XLMWithLMHeadModel"),dKr.forEach(t),rvo=r(pAe," (XLM model)"),pAe.forEach(t),tvo=i(q),l6=n(q,"LI",{});var _Ae=s(l6);qne=n(_Ae,"STRONG",{});var cKr=s(qne);avo=r(cKr,"xlm-prophetnet"),cKr.forEach(t),nvo=r(_Ae," \u2014 "),PI=n(_Ae,"A",{href:!0});var fKr=s(PI);svo=r(fKr,"XLMProphetNetForCausalLM"),fKr.forEach(t),lvo=r(_Ae," (XLMProphetNet model)"),_Ae.forEach(t),ivo=i(q),i6=n(q,"LI",{});var uAe=s(i6);Nne=n(uAe,"STRONG",{});var mKr=s(Nne);dvo=r(mKr,"xlm-roberta"),mKr.forEach(t),cvo=r(uAe," \u2014 "),$I=n(uAe,"A",{href:!0});var gKr=s($I);fvo=r(gKr,"XLMRobertaForCausalLM"),gKr.forEach(t),mvo=r(uAe," (XLM-RoBERTa model)"),uAe.forEach(t),gvo=i(q),d6=n(q,"LI",{});var bAe=s(d6);jne=n(bAe,"STRONG",{});var hKr=s(jne);hvo=r(hKr,"xlm-roberta-xl"),hKr.forEach(t),pvo=r(bAe," \u2014 "),II=n(bAe,"A",{href:!0});var pKr=s(II);_vo=r(pKr,"XLMRobertaXLForCausalLM"),pKr.forEach(t),uvo=r(bAe," (XLM-RoBERTa-XL model)"),bAe.forEach(t),bvo=i(q),c6=n(q,"LI",{});var vAe=s(c6);Dne=n(vAe,"STRONG",{});var _Kr=s(Dne);vvo=r(_Kr,"xlnet"),_Kr.forEach(t),Fvo=r(vAe," \u2014 "),qI=n(vAe,"A",{href:!0});var uKr=s(qI);Tvo=r(uKr,"XLNetLMHeadModel"),uKr.forEach(t),Mvo=r(vAe," (XLNet model)"),vAe.forEach(t),q.forEach(t),Evo=i(Ot),f6=n(Ot,"P",{});var FAe=s(f6);Cvo=r(FAe,"The model is set in evaluation mode by default using "),Gne=n(FAe,"CODE",{});var bKr=s(Gne);wvo=r(bKr,"model.eval()"),bKr.forEach(t),Avo=r(FAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),One=n(FAe,"CODE",{});var vKr=s(One);yvo=r(vKr,"model.train()"),vKr.forEach(t),FAe.forEach(t),Lvo=i(Ot),Vne=n(Ot,"P",{});var FKr=s(Vne);xvo=r(FKr,"Examples:"),FKr.forEach(t),kvo=i(Ot),m(Bw.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),_Be=i(c),sd=n(c,"H2",{class:!0});var w$e=s(sd);m6=n(w$e,"A",{id:!0,class:!0,href:!0});var TKr=s(m6);Xne=n(TKr,"SPAN",{});var MKr=s(Xne);m(Pw.$$.fragment,MKr),MKr.forEach(t),TKr.forEach(t),Svo=i(w$e),zne=n(w$e,"SPAN",{});var EKr=s(zne);Rvo=r(EKr,"AutoModelForMaskedLM"),EKr.forEach(t),w$e.forEach(t),uBe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m($w.$$.fragment,Zs),Bvo=i(Zs),ld=n(Zs,"P",{});var IU=s(ld);Pvo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NI=n(IU,"A",{href:!0});var CKr=s(NI);$vo=r(CKr,"from_pretrained()"),CKr.forEach(t),Ivo=r(IU," class method or the "),jI=n(IU,"A",{href:!0});var wKr=s(jI);qvo=r(wKr,"from_config()"),wKr.forEach(t),Nvo=r(IU,` class
method.`),IU.forEach(t),jvo=i(Zs),Iw=n(Zs,"P",{});var A$e=s(Iw);Dvo=r(A$e,"This class cannot be instantiated directly using "),Qne=n(A$e,"CODE",{});var AKr=s(Qne);Gvo=r(AKr,"__init__()"),AKr.forEach(t),Ovo=r(A$e," (throws an error)."),A$e.forEach(t),Vvo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(qw.$$.fragment,el),Xvo=i(el),Wne=n(el,"P",{});var yKr=s(Wne);zvo=r(yKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yKr.forEach(t),Qvo=i(el),id=n(el,"P",{});var qU=s(id);Wvo=r(qU,`Note:
Loading a model from its configuration file does `),Hne=n(qU,"STRONG",{});var LKr=s(Hne);Hvo=r(LKr,"not"),LKr.forEach(t),Uvo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DI=n(qU,"A",{href:!0});var xKr=s(DI);Jvo=r(xKr,"from_pretrained()"),xKr.forEach(t),Yvo=r(qU," to load the model weights."),qU.forEach(t),Kvo=i(el),Une=n(el,"P",{});var kKr=s(Une);Zvo=r(kKr,"Examples:"),kKr.forEach(t),eFo=i(el),m(Nw.$$.fragment,el),el.forEach(t),oFo=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(jw.$$.fragment,Vt),rFo=i(Vt),Jne=n(Vt,"P",{});var SKr=s(Jne);tFo=r(SKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),SKr.forEach(t),aFo=i(Vt),Wa=n(Vt,"P",{});var j3=s(Wa);nFo=r(j3,"The model class to instantiate is selected based on the "),Yne=n(j3,"CODE",{});var RKr=s(Yne);sFo=r(RKr,"model_type"),RKr.forEach(t),lFo=r(j3,` property of the config object (either
passed as an argument or loaded from `),Kne=n(j3,"CODE",{});var BKr=s(Kne);iFo=r(BKr,"pretrained_model_name_or_path"),BKr.forEach(t),dFo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zne=n(j3,"CODE",{});var PKr=s(Zne);cFo=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),fFo=r(j3,":"),j3.forEach(t),mFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);g6=n(N,"LI",{});var TAe=s(g6);ese=n(TAe,"STRONG",{});var $Kr=s(ese);gFo=r($Kr,"albert"),$Kr.forEach(t),hFo=r(TAe," \u2014 "),GI=n(TAe,"A",{href:!0});var IKr=s(GI);pFo=r(IKr,"AlbertForMaskedLM"),IKr.forEach(t),_Fo=r(TAe," (ALBERT model)"),TAe.forEach(t),uFo=i(N),h6=n(N,"LI",{});var MAe=s(h6);ose=n(MAe,"STRONG",{});var qKr=s(ose);bFo=r(qKr,"bart"),qKr.forEach(t),vFo=r(MAe," \u2014 "),OI=n(MAe,"A",{href:!0});var NKr=s(OI);FFo=r(NKr,"BartForConditionalGeneration"),NKr.forEach(t),TFo=r(MAe," (BART model)"),MAe.forEach(t),MFo=i(N),p6=n(N,"LI",{});var EAe=s(p6);rse=n(EAe,"STRONG",{});var jKr=s(rse);EFo=r(jKr,"bert"),jKr.forEach(t),CFo=r(EAe," \u2014 "),VI=n(EAe,"A",{href:!0});var DKr=s(VI);wFo=r(DKr,"BertForMaskedLM"),DKr.forEach(t),AFo=r(EAe," (BERT model)"),EAe.forEach(t),yFo=i(N),_6=n(N,"LI",{});var CAe=s(_6);tse=n(CAe,"STRONG",{});var GKr=s(tse);LFo=r(GKr,"big_bird"),GKr.forEach(t),xFo=r(CAe," \u2014 "),XI=n(CAe,"A",{href:!0});var OKr=s(XI);kFo=r(OKr,"BigBirdForMaskedLM"),OKr.forEach(t),SFo=r(CAe," (BigBird model)"),CAe.forEach(t),RFo=i(N),u6=n(N,"LI",{});var wAe=s(u6);ase=n(wAe,"STRONG",{});var VKr=s(ase);BFo=r(VKr,"camembert"),VKr.forEach(t),PFo=r(wAe," \u2014 "),zI=n(wAe,"A",{href:!0});var XKr=s(zI);$Fo=r(XKr,"CamembertForMaskedLM"),XKr.forEach(t),IFo=r(wAe," (CamemBERT model)"),wAe.forEach(t),qFo=i(N),b6=n(N,"LI",{});var AAe=s(b6);nse=n(AAe,"STRONG",{});var zKr=s(nse);NFo=r(zKr,"convbert"),zKr.forEach(t),jFo=r(AAe," \u2014 "),QI=n(AAe,"A",{href:!0});var QKr=s(QI);DFo=r(QKr,"ConvBertForMaskedLM"),QKr.forEach(t),GFo=r(AAe," (ConvBERT model)"),AAe.forEach(t),OFo=i(N),v6=n(N,"LI",{});var yAe=s(v6);sse=n(yAe,"STRONG",{});var WKr=s(sse);VFo=r(WKr,"data2vec-text"),WKr.forEach(t),XFo=r(yAe," \u2014 "),WI=n(yAe,"A",{href:!0});var HKr=s(WI);zFo=r(HKr,"Data2VecTextForMaskedLM"),HKr.forEach(t),QFo=r(yAe," (Data2VecText model)"),yAe.forEach(t),WFo=i(N),F6=n(N,"LI",{});var LAe=s(F6);lse=n(LAe,"STRONG",{});var UKr=s(lse);HFo=r(UKr,"deberta"),UKr.forEach(t),UFo=r(LAe," \u2014 "),HI=n(LAe,"A",{href:!0});var JKr=s(HI);JFo=r(JKr,"DebertaForMaskedLM"),JKr.forEach(t),YFo=r(LAe," (DeBERTa model)"),LAe.forEach(t),KFo=i(N),T6=n(N,"LI",{});var xAe=s(T6);ise=n(xAe,"STRONG",{});var YKr=s(ise);ZFo=r(YKr,"deberta-v2"),YKr.forEach(t),eTo=r(xAe," \u2014 "),UI=n(xAe,"A",{href:!0});var KKr=s(UI);oTo=r(KKr,"DebertaV2ForMaskedLM"),KKr.forEach(t),rTo=r(xAe," (DeBERTa-v2 model)"),xAe.forEach(t),tTo=i(N),M6=n(N,"LI",{});var kAe=s(M6);dse=n(kAe,"STRONG",{});var ZKr=s(dse);aTo=r(ZKr,"distilbert"),ZKr.forEach(t),nTo=r(kAe," \u2014 "),JI=n(kAe,"A",{href:!0});var eZr=s(JI);sTo=r(eZr,"DistilBertForMaskedLM"),eZr.forEach(t),lTo=r(kAe," (DistilBERT model)"),kAe.forEach(t),iTo=i(N),E6=n(N,"LI",{});var SAe=s(E6);cse=n(SAe,"STRONG",{});var oZr=s(cse);dTo=r(oZr,"electra"),oZr.forEach(t),cTo=r(SAe," \u2014 "),YI=n(SAe,"A",{href:!0});var rZr=s(YI);fTo=r(rZr,"ElectraForMaskedLM"),rZr.forEach(t),mTo=r(SAe," (ELECTRA model)"),SAe.forEach(t),gTo=i(N),C6=n(N,"LI",{});var RAe=s(C6);fse=n(RAe,"STRONG",{});var tZr=s(fse);hTo=r(tZr,"flaubert"),tZr.forEach(t),pTo=r(RAe," \u2014 "),KI=n(RAe,"A",{href:!0});var aZr=s(KI);_To=r(aZr,"FlaubertWithLMHeadModel"),aZr.forEach(t),uTo=r(RAe," (FlauBERT model)"),RAe.forEach(t),bTo=i(N),w6=n(N,"LI",{});var BAe=s(w6);mse=n(BAe,"STRONG",{});var nZr=s(mse);vTo=r(nZr,"fnet"),nZr.forEach(t),FTo=r(BAe," \u2014 "),ZI=n(BAe,"A",{href:!0});var sZr=s(ZI);TTo=r(sZr,"FNetForMaskedLM"),sZr.forEach(t),MTo=r(BAe," (FNet model)"),BAe.forEach(t),ETo=i(N),A6=n(N,"LI",{});var PAe=s(A6);gse=n(PAe,"STRONG",{});var lZr=s(gse);CTo=r(lZr,"funnel"),lZr.forEach(t),wTo=r(PAe," \u2014 "),eq=n(PAe,"A",{href:!0});var iZr=s(eq);ATo=r(iZr,"FunnelForMaskedLM"),iZr.forEach(t),yTo=r(PAe," (Funnel Transformer model)"),PAe.forEach(t),LTo=i(N),y6=n(N,"LI",{});var $Ae=s(y6);hse=n($Ae,"STRONG",{});var dZr=s(hse);xTo=r(dZr,"ibert"),dZr.forEach(t),kTo=r($Ae," \u2014 "),oq=n($Ae,"A",{href:!0});var cZr=s(oq);STo=r(cZr,"IBertForMaskedLM"),cZr.forEach(t),RTo=r($Ae," (I-BERT model)"),$Ae.forEach(t),BTo=i(N),L6=n(N,"LI",{});var IAe=s(L6);pse=n(IAe,"STRONG",{});var fZr=s(pse);PTo=r(fZr,"layoutlm"),fZr.forEach(t),$To=r(IAe," \u2014 "),rq=n(IAe,"A",{href:!0});var mZr=s(rq);ITo=r(mZr,"LayoutLMForMaskedLM"),mZr.forEach(t),qTo=r(IAe," (LayoutLM model)"),IAe.forEach(t),NTo=i(N),x6=n(N,"LI",{});var qAe=s(x6);_se=n(qAe,"STRONG",{});var gZr=s(_se);jTo=r(gZr,"longformer"),gZr.forEach(t),DTo=r(qAe," \u2014 "),tq=n(qAe,"A",{href:!0});var hZr=s(tq);GTo=r(hZr,"LongformerForMaskedLM"),hZr.forEach(t),OTo=r(qAe," (Longformer model)"),qAe.forEach(t),VTo=i(N),k6=n(N,"LI",{});var NAe=s(k6);use=n(NAe,"STRONG",{});var pZr=s(use);XTo=r(pZr,"mbart"),pZr.forEach(t),zTo=r(NAe," \u2014 "),aq=n(NAe,"A",{href:!0});var _Zr=s(aq);QTo=r(_Zr,"MBartForConditionalGeneration"),_Zr.forEach(t),WTo=r(NAe," (mBART model)"),NAe.forEach(t),HTo=i(N),S6=n(N,"LI",{});var jAe=s(S6);bse=n(jAe,"STRONG",{});var uZr=s(bse);UTo=r(uZr,"megatron-bert"),uZr.forEach(t),JTo=r(jAe," \u2014 "),nq=n(jAe,"A",{href:!0});var bZr=s(nq);YTo=r(bZr,"MegatronBertForMaskedLM"),bZr.forEach(t),KTo=r(jAe," (MegatronBert model)"),jAe.forEach(t),ZTo=i(N),R6=n(N,"LI",{});var DAe=s(R6);vse=n(DAe,"STRONG",{});var vZr=s(vse);eMo=r(vZr,"mobilebert"),vZr.forEach(t),oMo=r(DAe," \u2014 "),sq=n(DAe,"A",{href:!0});var FZr=s(sq);rMo=r(FZr,"MobileBertForMaskedLM"),FZr.forEach(t),tMo=r(DAe," (MobileBERT model)"),DAe.forEach(t),aMo=i(N),B6=n(N,"LI",{});var GAe=s(B6);Fse=n(GAe,"STRONG",{});var TZr=s(Fse);nMo=r(TZr,"mpnet"),TZr.forEach(t),sMo=r(GAe," \u2014 "),lq=n(GAe,"A",{href:!0});var MZr=s(lq);lMo=r(MZr,"MPNetForMaskedLM"),MZr.forEach(t),iMo=r(GAe," (MPNet model)"),GAe.forEach(t),dMo=i(N),P6=n(N,"LI",{});var OAe=s(P6);Tse=n(OAe,"STRONG",{});var EZr=s(Tse);cMo=r(EZr,"nystromformer"),EZr.forEach(t),fMo=r(OAe," \u2014 "),iq=n(OAe,"A",{href:!0});var CZr=s(iq);mMo=r(CZr,"NystromformerForMaskedLM"),CZr.forEach(t),gMo=r(OAe," (Nystromformer model)"),OAe.forEach(t),hMo=i(N),$6=n(N,"LI",{});var VAe=s($6);Mse=n(VAe,"STRONG",{});var wZr=s(Mse);pMo=r(wZr,"perceiver"),wZr.forEach(t),_Mo=r(VAe," \u2014 "),dq=n(VAe,"A",{href:!0});var AZr=s(dq);uMo=r(AZr,"PerceiverForMaskedLM"),AZr.forEach(t),bMo=r(VAe," (Perceiver model)"),VAe.forEach(t),vMo=i(N),I6=n(N,"LI",{});var XAe=s(I6);Ese=n(XAe,"STRONG",{});var yZr=s(Ese);FMo=r(yZr,"qdqbert"),yZr.forEach(t),TMo=r(XAe," \u2014 "),cq=n(XAe,"A",{href:!0});var LZr=s(cq);MMo=r(LZr,"QDQBertForMaskedLM"),LZr.forEach(t),EMo=r(XAe," (QDQBert model)"),XAe.forEach(t),CMo=i(N),q6=n(N,"LI",{});var zAe=s(q6);Cse=n(zAe,"STRONG",{});var xZr=s(Cse);wMo=r(xZr,"reformer"),xZr.forEach(t),AMo=r(zAe," \u2014 "),fq=n(zAe,"A",{href:!0});var kZr=s(fq);yMo=r(kZr,"ReformerForMaskedLM"),kZr.forEach(t),LMo=r(zAe," (Reformer model)"),zAe.forEach(t),xMo=i(N),N6=n(N,"LI",{});var QAe=s(N6);wse=n(QAe,"STRONG",{});var SZr=s(wse);kMo=r(SZr,"rembert"),SZr.forEach(t),SMo=r(QAe," \u2014 "),mq=n(QAe,"A",{href:!0});var RZr=s(mq);RMo=r(RZr,"RemBertForMaskedLM"),RZr.forEach(t),BMo=r(QAe," (RemBERT model)"),QAe.forEach(t),PMo=i(N),j6=n(N,"LI",{});var WAe=s(j6);Ase=n(WAe,"STRONG",{});var BZr=s(Ase);$Mo=r(BZr,"roberta"),BZr.forEach(t),IMo=r(WAe," \u2014 "),gq=n(WAe,"A",{href:!0});var PZr=s(gq);qMo=r(PZr,"RobertaForMaskedLM"),PZr.forEach(t),NMo=r(WAe," (RoBERTa model)"),WAe.forEach(t),jMo=i(N),D6=n(N,"LI",{});var HAe=s(D6);yse=n(HAe,"STRONG",{});var $Zr=s(yse);DMo=r($Zr,"roformer"),$Zr.forEach(t),GMo=r(HAe," \u2014 "),hq=n(HAe,"A",{href:!0});var IZr=s(hq);OMo=r(IZr,"RoFormerForMaskedLM"),IZr.forEach(t),VMo=r(HAe," (RoFormer model)"),HAe.forEach(t),XMo=i(N),G6=n(N,"LI",{});var UAe=s(G6);Lse=n(UAe,"STRONG",{});var qZr=s(Lse);zMo=r(qZr,"squeezebert"),qZr.forEach(t),QMo=r(UAe," \u2014 "),pq=n(UAe,"A",{href:!0});var NZr=s(pq);WMo=r(NZr,"SqueezeBertForMaskedLM"),NZr.forEach(t),HMo=r(UAe," (SqueezeBERT model)"),UAe.forEach(t),UMo=i(N),O6=n(N,"LI",{});var JAe=s(O6);xse=n(JAe,"STRONG",{});var jZr=s(xse);JMo=r(jZr,"tapas"),jZr.forEach(t),YMo=r(JAe," \u2014 "),_q=n(JAe,"A",{href:!0});var DZr=s(_q);KMo=r(DZr,"TapasForMaskedLM"),DZr.forEach(t),ZMo=r(JAe," (TAPAS model)"),JAe.forEach(t),eEo=i(N),V6=n(N,"LI",{});var YAe=s(V6);kse=n(YAe,"STRONG",{});var GZr=s(kse);oEo=r(GZr,"wav2vec2"),GZr.forEach(t),rEo=r(YAe," \u2014 "),Sse=n(YAe,"CODE",{});var OZr=s(Sse);tEo=r(OZr,"Wav2Vec2ForMaskedLM"),OZr.forEach(t),aEo=r(YAe," (Wav2Vec2 model)"),YAe.forEach(t),nEo=i(N),X6=n(N,"LI",{});var KAe=s(X6);Rse=n(KAe,"STRONG",{});var VZr=s(Rse);sEo=r(VZr,"xlm"),VZr.forEach(t),lEo=r(KAe," \u2014 "),uq=n(KAe,"A",{href:!0});var XZr=s(uq);iEo=r(XZr,"XLMWithLMHeadModel"),XZr.forEach(t),dEo=r(KAe," (XLM model)"),KAe.forEach(t),cEo=i(N),z6=n(N,"LI",{});var ZAe=s(z6);Bse=n(ZAe,"STRONG",{});var zZr=s(Bse);fEo=r(zZr,"xlm-roberta"),zZr.forEach(t),mEo=r(ZAe," \u2014 "),bq=n(ZAe,"A",{href:!0});var QZr=s(bq);gEo=r(QZr,"XLMRobertaForMaskedLM"),QZr.forEach(t),hEo=r(ZAe," (XLM-RoBERTa model)"),ZAe.forEach(t),pEo=i(N),Q6=n(N,"LI",{});var e0e=s(Q6);Pse=n(e0e,"STRONG",{});var WZr=s(Pse);_Eo=r(WZr,"xlm-roberta-xl"),WZr.forEach(t),uEo=r(e0e," \u2014 "),vq=n(e0e,"A",{href:!0});var HZr=s(vq);bEo=r(HZr,"XLMRobertaXLForMaskedLM"),HZr.forEach(t),vEo=r(e0e," (XLM-RoBERTa-XL model)"),e0e.forEach(t),FEo=i(N),W6=n(N,"LI",{});var o0e=s(W6);$se=n(o0e,"STRONG",{});var UZr=s($se);TEo=r(UZr,"yoso"),UZr.forEach(t),MEo=r(o0e," \u2014 "),Fq=n(o0e,"A",{href:!0});var JZr=s(Fq);EEo=r(JZr,"YosoForMaskedLM"),JZr.forEach(t),CEo=r(o0e," (YOSO model)"),o0e.forEach(t),N.forEach(t),wEo=i(Vt),H6=n(Vt,"P",{});var r0e=s(H6);AEo=r(r0e,"The model is set in evaluation mode by default using "),Ise=n(r0e,"CODE",{});var YZr=s(Ise);yEo=r(YZr,"model.eval()"),YZr.forEach(t),LEo=r(r0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=n(r0e,"CODE",{});var KZr=s(qse);xEo=r(KZr,"model.train()"),KZr.forEach(t),r0e.forEach(t),kEo=i(Vt),Nse=n(Vt,"P",{});var ZZr=s(Nse);SEo=r(ZZr,"Examples:"),ZZr.forEach(t),REo=i(Vt),m(Dw.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),bBe=i(c),dd=n(c,"H2",{class:!0});var y$e=s(dd);U6=n(y$e,"A",{id:!0,class:!0,href:!0});var eet=s(U6);jse=n(eet,"SPAN",{});var oet=s(jse);m(Gw.$$.fragment,oet),oet.forEach(t),eet.forEach(t),BEo=i(y$e),Dse=n(y$e,"SPAN",{});var ret=s(Dse);PEo=r(ret,"AutoModelForSeq2SeqLM"),ret.forEach(t),y$e.forEach(t),vBe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(Ow.$$.fragment,ol),$Eo=i(ol),cd=n(ol,"P",{});var NU=s(cd);IEo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Tq=n(NU,"A",{href:!0});var tet=s(Tq);qEo=r(tet,"from_pretrained()"),tet.forEach(t),NEo=r(NU," class method or the "),Mq=n(NU,"A",{href:!0});var aet=s(Mq);jEo=r(aet,"from_config()"),aet.forEach(t),DEo=r(NU,` class
method.`),NU.forEach(t),GEo=i(ol),Vw=n(ol,"P",{});var L$e=s(Vw);OEo=r(L$e,"This class cannot be instantiated directly using "),Gse=n(L$e,"CODE",{});var net=s(Gse);VEo=r(net,"__init__()"),net.forEach(t),XEo=r(L$e," (throws an error)."),L$e.forEach(t),zEo=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(Xw.$$.fragment,rl),QEo=i(rl),Ose=n(rl,"P",{});var set=s(Ose);WEo=r(set,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),set.forEach(t),HEo=i(rl),fd=n(rl,"P",{});var jU=s(fd);UEo=r(jU,`Note:
Loading a model from its configuration file does `),Vse=n(jU,"STRONG",{});var iet=s(Vse);JEo=r(iet,"not"),iet.forEach(t),YEo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eq=n(jU,"A",{href:!0});var det=s(Eq);KEo=r(det,"from_pretrained()"),det.forEach(t),ZEo=r(jU," to load the model weights."),jU.forEach(t),e3o=i(rl),Xse=n(rl,"P",{});var cet=s(Xse);o3o=r(cet,"Examples:"),cet.forEach(t),r3o=i(rl),m(zw.$$.fragment,rl),rl.forEach(t),t3o=i(ol),Ge=n(ol,"DIV",{class:!0});var Xt=s(Ge);m(Qw.$$.fragment,Xt),a3o=i(Xt),zse=n(Xt,"P",{});var fet=s(zse);n3o=r(fet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fet.forEach(t),s3o=i(Xt),Ha=n(Xt,"P",{});var D3=s(Ha);l3o=r(D3,"The model class to instantiate is selected based on the "),Qse=n(D3,"CODE",{});var met=s(Qse);i3o=r(met,"model_type"),met.forEach(t),d3o=r(D3,` property of the config object (either
passed as an argument or loaded from `),Wse=n(D3,"CODE",{});var get=s(Wse);c3o=r(get,"pretrained_model_name_or_path"),get.forEach(t),f3o=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hse=n(D3,"CODE",{});var het=s(Hse);m3o=r(het,"pretrained_model_name_or_path"),het.forEach(t),g3o=r(D3,":"),D3.forEach(t),h3o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);J6=n(le,"LI",{});var t0e=s(J6);Use=n(t0e,"STRONG",{});var pet=s(Use);p3o=r(pet,"bart"),pet.forEach(t),_3o=r(t0e," \u2014 "),Cq=n(t0e,"A",{href:!0});var _et=s(Cq);u3o=r(_et,"BartForConditionalGeneration"),_et.forEach(t),b3o=r(t0e," (BART model)"),t0e.forEach(t),v3o=i(le),Y6=n(le,"LI",{});var a0e=s(Y6);Jse=n(a0e,"STRONG",{});var uet=s(Jse);F3o=r(uet,"bigbird_pegasus"),uet.forEach(t),T3o=r(a0e," \u2014 "),wq=n(a0e,"A",{href:!0});var bet=s(wq);M3o=r(bet,"BigBirdPegasusForConditionalGeneration"),bet.forEach(t),E3o=r(a0e," (BigBirdPegasus model)"),a0e.forEach(t),C3o=i(le),K6=n(le,"LI",{});var n0e=s(K6);Yse=n(n0e,"STRONG",{});var vet=s(Yse);w3o=r(vet,"blenderbot"),vet.forEach(t),A3o=r(n0e," \u2014 "),Aq=n(n0e,"A",{href:!0});var Fet=s(Aq);y3o=r(Fet,"BlenderbotForConditionalGeneration"),Fet.forEach(t),L3o=r(n0e," (Blenderbot model)"),n0e.forEach(t),x3o=i(le),Z6=n(le,"LI",{});var s0e=s(Z6);Kse=n(s0e,"STRONG",{});var Tet=s(Kse);k3o=r(Tet,"blenderbot-small"),Tet.forEach(t),S3o=r(s0e," \u2014 "),yq=n(s0e,"A",{href:!0});var Met=s(yq);R3o=r(Met,"BlenderbotSmallForConditionalGeneration"),Met.forEach(t),B3o=r(s0e," (BlenderbotSmall model)"),s0e.forEach(t),P3o=i(le),e1=n(le,"LI",{});var l0e=s(e1);Zse=n(l0e,"STRONG",{});var Eet=s(Zse);$3o=r(Eet,"encoder-decoder"),Eet.forEach(t),I3o=r(l0e," \u2014 "),Lq=n(l0e,"A",{href:!0});var Cet=s(Lq);q3o=r(Cet,"EncoderDecoderModel"),Cet.forEach(t),N3o=r(l0e," (Encoder decoder model)"),l0e.forEach(t),j3o=i(le),o1=n(le,"LI",{});var i0e=s(o1);ele=n(i0e,"STRONG",{});var wet=s(ele);D3o=r(wet,"fsmt"),wet.forEach(t),G3o=r(i0e," \u2014 "),xq=n(i0e,"A",{href:!0});var Aet=s(xq);O3o=r(Aet,"FSMTForConditionalGeneration"),Aet.forEach(t),V3o=r(i0e," (FairSeq Machine-Translation model)"),i0e.forEach(t),X3o=i(le),r1=n(le,"LI",{});var d0e=s(r1);ole=n(d0e,"STRONG",{});var yet=s(ole);z3o=r(yet,"led"),yet.forEach(t),Q3o=r(d0e," \u2014 "),kq=n(d0e,"A",{href:!0});var Let=s(kq);W3o=r(Let,"LEDForConditionalGeneration"),Let.forEach(t),H3o=r(d0e," (LED model)"),d0e.forEach(t),U3o=i(le),t1=n(le,"LI",{});var c0e=s(t1);rle=n(c0e,"STRONG",{});var xet=s(rle);J3o=r(xet,"m2m_100"),xet.forEach(t),Y3o=r(c0e," \u2014 "),Sq=n(c0e,"A",{href:!0});var ket=s(Sq);K3o=r(ket,"M2M100ForConditionalGeneration"),ket.forEach(t),Z3o=r(c0e," (M2M100 model)"),c0e.forEach(t),eCo=i(le),a1=n(le,"LI",{});var f0e=s(a1);tle=n(f0e,"STRONG",{});var Set=s(tle);oCo=r(Set,"marian"),Set.forEach(t),rCo=r(f0e," \u2014 "),Rq=n(f0e,"A",{href:!0});var Ret=s(Rq);tCo=r(Ret,"MarianMTModel"),Ret.forEach(t),aCo=r(f0e," (Marian model)"),f0e.forEach(t),nCo=i(le),n1=n(le,"LI",{});var m0e=s(n1);ale=n(m0e,"STRONG",{});var Bet=s(ale);sCo=r(Bet,"mbart"),Bet.forEach(t),lCo=r(m0e," \u2014 "),Bq=n(m0e,"A",{href:!0});var Pet=s(Bq);iCo=r(Pet,"MBartForConditionalGeneration"),Pet.forEach(t),dCo=r(m0e," (mBART model)"),m0e.forEach(t),cCo=i(le),s1=n(le,"LI",{});var g0e=s(s1);nle=n(g0e,"STRONG",{});var $et=s(nle);fCo=r($et,"mt5"),$et.forEach(t),mCo=r(g0e," \u2014 "),Pq=n(g0e,"A",{href:!0});var Iet=s(Pq);gCo=r(Iet,"MT5ForConditionalGeneration"),Iet.forEach(t),hCo=r(g0e," (mT5 model)"),g0e.forEach(t),pCo=i(le),l1=n(le,"LI",{});var h0e=s(l1);sle=n(h0e,"STRONG",{});var qet=s(sle);_Co=r(qet,"pegasus"),qet.forEach(t),uCo=r(h0e," \u2014 "),$q=n(h0e,"A",{href:!0});var Net=s($q);bCo=r(Net,"PegasusForConditionalGeneration"),Net.forEach(t),vCo=r(h0e," (Pegasus model)"),h0e.forEach(t),FCo=i(le),i1=n(le,"LI",{});var p0e=s(i1);lle=n(p0e,"STRONG",{});var jet=s(lle);TCo=r(jet,"plbart"),jet.forEach(t),MCo=r(p0e," \u2014 "),Iq=n(p0e,"A",{href:!0});var Det=s(Iq);ECo=r(Det,"PLBartForConditionalGeneration"),Det.forEach(t),CCo=r(p0e," (PLBart model)"),p0e.forEach(t),wCo=i(le),d1=n(le,"LI",{});var _0e=s(d1);ile=n(_0e,"STRONG",{});var Get=s(ile);ACo=r(Get,"prophetnet"),Get.forEach(t),yCo=r(_0e," \u2014 "),qq=n(_0e,"A",{href:!0});var Oet=s(qq);LCo=r(Oet,"ProphetNetForConditionalGeneration"),Oet.forEach(t),xCo=r(_0e," (ProphetNet model)"),_0e.forEach(t),kCo=i(le),c1=n(le,"LI",{});var u0e=s(c1);dle=n(u0e,"STRONG",{});var Vet=s(dle);SCo=r(Vet,"t5"),Vet.forEach(t),RCo=r(u0e," \u2014 "),Nq=n(u0e,"A",{href:!0});var Xet=s(Nq);BCo=r(Xet,"T5ForConditionalGeneration"),Xet.forEach(t),PCo=r(u0e," (T5 model)"),u0e.forEach(t),$Co=i(le),f1=n(le,"LI",{});var b0e=s(f1);cle=n(b0e,"STRONG",{});var zet=s(cle);ICo=r(zet,"tapex"),zet.forEach(t),qCo=r(b0e," \u2014 "),jq=n(b0e,"A",{href:!0});var Qet=s(jq);NCo=r(Qet,"BartForConditionalGeneration"),Qet.forEach(t),jCo=r(b0e," (TAPEX model)"),b0e.forEach(t),DCo=i(le),m1=n(le,"LI",{});var v0e=s(m1);fle=n(v0e,"STRONG",{});var Wet=s(fle);GCo=r(Wet,"xlm-prophetnet"),Wet.forEach(t),OCo=r(v0e," \u2014 "),Dq=n(v0e,"A",{href:!0});var Het=s(Dq);VCo=r(Het,"XLMProphetNetForConditionalGeneration"),Het.forEach(t),XCo=r(v0e," (XLMProphetNet model)"),v0e.forEach(t),le.forEach(t),zCo=i(Xt),g1=n(Xt,"P",{});var F0e=s(g1);QCo=r(F0e,"The model is set in evaluation mode by default using "),mle=n(F0e,"CODE",{});var Uet=s(mle);WCo=r(Uet,"model.eval()"),Uet.forEach(t),HCo=r(F0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gle=n(F0e,"CODE",{});var Jet=s(gle);UCo=r(Jet,"model.train()"),Jet.forEach(t),F0e.forEach(t),JCo=i(Xt),hle=n(Xt,"P",{});var Yet=s(hle);YCo=r(Yet,"Examples:"),Yet.forEach(t),KCo=i(Xt),m(Ww.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),FBe=i(c),md=n(c,"H2",{class:!0});var x$e=s(md);h1=n(x$e,"A",{id:!0,class:!0,href:!0});var Ket=s(h1);ple=n(Ket,"SPAN",{});var Zet=s(ple);m(Hw.$$.fragment,Zet),Zet.forEach(t),Ket.forEach(t),ZCo=i(x$e),_le=n(x$e,"SPAN",{});var eot=s(_le);ewo=r(eot,"AutoModelForSequenceClassification"),eot.forEach(t),x$e.forEach(t),TBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(Uw.$$.fragment,tl),owo=i(tl),gd=n(tl,"P",{});var DU=s(gd);rwo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gq=n(DU,"A",{href:!0});var oot=s(Gq);two=r(oot,"from_pretrained()"),oot.forEach(t),awo=r(DU," class method or the "),Oq=n(DU,"A",{href:!0});var rot=s(Oq);nwo=r(rot,"from_config()"),rot.forEach(t),swo=r(DU,` class
method.`),DU.forEach(t),lwo=i(tl),Jw=n(tl,"P",{});var k$e=s(Jw);iwo=r(k$e,"This class cannot be instantiated directly using "),ule=n(k$e,"CODE",{});var tot=s(ule);dwo=r(tot,"__init__()"),tot.forEach(t),cwo=r(k$e," (throws an error)."),k$e.forEach(t),fwo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(Yw.$$.fragment,al),mwo=i(al),ble=n(al,"P",{});var aot=s(ble);gwo=r(aot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aot.forEach(t),hwo=i(al),hd=n(al,"P",{});var GU=s(hd);pwo=r(GU,`Note:
Loading a model from its configuration file does `),vle=n(GU,"STRONG",{});var not=s(vle);_wo=r(not,"not"),not.forEach(t),uwo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vq=n(GU,"A",{href:!0});var sot=s(Vq);bwo=r(sot,"from_pretrained()"),sot.forEach(t),vwo=r(GU," to load the model weights."),GU.forEach(t),Fwo=i(al),Fle=n(al,"P",{});var lot=s(Fle);Two=r(lot,"Examples:"),lot.forEach(t),Mwo=i(al),m(Kw.$$.fragment,al),al.forEach(t),Ewo=i(tl),Oe=n(tl,"DIV",{class:!0});var zt=s(Oe);m(Zw.$$.fragment,zt),Cwo=i(zt),Tle=n(zt,"P",{});var iot=s(Tle);wwo=r(iot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iot.forEach(t),Awo=i(zt),Ua=n(zt,"P",{});var G3=s(Ua);ywo=r(G3,"The model class to instantiate is selected based on the "),Mle=n(G3,"CODE",{});var dot=s(Mle);Lwo=r(dot,"model_type"),dot.forEach(t),xwo=r(G3,` property of the config object (either
passed as an argument or loaded from `),Ele=n(G3,"CODE",{});var cot=s(Ele);kwo=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),Swo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cle=n(G3,"CODE",{});var fot=s(Cle);Rwo=r(fot,"pretrained_model_name_or_path"),fot.forEach(t),Bwo=r(G3,":"),G3.forEach(t),Pwo=i(zt),y=n(zt,"UL",{});var L=s(y);p1=n(L,"LI",{});var T0e=s(p1);wle=n(T0e,"STRONG",{});var mot=s(wle);$wo=r(mot,"albert"),mot.forEach(t),Iwo=r(T0e," \u2014 "),Xq=n(T0e,"A",{href:!0});var got=s(Xq);qwo=r(got,"AlbertForSequenceClassification"),got.forEach(t),Nwo=r(T0e," (ALBERT model)"),T0e.forEach(t),jwo=i(L),_1=n(L,"LI",{});var M0e=s(_1);Ale=n(M0e,"STRONG",{});var hot=s(Ale);Dwo=r(hot,"bart"),hot.forEach(t),Gwo=r(M0e," \u2014 "),zq=n(M0e,"A",{href:!0});var pot=s(zq);Owo=r(pot,"BartForSequenceClassification"),pot.forEach(t),Vwo=r(M0e," (BART model)"),M0e.forEach(t),Xwo=i(L),u1=n(L,"LI",{});var E0e=s(u1);yle=n(E0e,"STRONG",{});var _ot=s(yle);zwo=r(_ot,"bert"),_ot.forEach(t),Qwo=r(E0e," \u2014 "),Qq=n(E0e,"A",{href:!0});var uot=s(Qq);Wwo=r(uot,"BertForSequenceClassification"),uot.forEach(t),Hwo=r(E0e," (BERT model)"),E0e.forEach(t),Uwo=i(L),b1=n(L,"LI",{});var C0e=s(b1);Lle=n(C0e,"STRONG",{});var bot=s(Lle);Jwo=r(bot,"big_bird"),bot.forEach(t),Ywo=r(C0e," \u2014 "),Wq=n(C0e,"A",{href:!0});var vot=s(Wq);Kwo=r(vot,"BigBirdForSequenceClassification"),vot.forEach(t),Zwo=r(C0e," (BigBird model)"),C0e.forEach(t),eAo=i(L),v1=n(L,"LI",{});var w0e=s(v1);xle=n(w0e,"STRONG",{});var Fot=s(xle);oAo=r(Fot,"bigbird_pegasus"),Fot.forEach(t),rAo=r(w0e," \u2014 "),Hq=n(w0e,"A",{href:!0});var Tot=s(Hq);tAo=r(Tot,"BigBirdPegasusForSequenceClassification"),Tot.forEach(t),aAo=r(w0e," (BigBirdPegasus model)"),w0e.forEach(t),nAo=i(L),F1=n(L,"LI",{});var A0e=s(F1);kle=n(A0e,"STRONG",{});var Mot=s(kle);sAo=r(Mot,"camembert"),Mot.forEach(t),lAo=r(A0e," \u2014 "),Uq=n(A0e,"A",{href:!0});var Eot=s(Uq);iAo=r(Eot,"CamembertForSequenceClassification"),Eot.forEach(t),dAo=r(A0e," (CamemBERT model)"),A0e.forEach(t),cAo=i(L),T1=n(L,"LI",{});var y0e=s(T1);Sle=n(y0e,"STRONG",{});var Cot=s(Sle);fAo=r(Cot,"canine"),Cot.forEach(t),mAo=r(y0e," \u2014 "),Jq=n(y0e,"A",{href:!0});var wot=s(Jq);gAo=r(wot,"CanineForSequenceClassification"),wot.forEach(t),hAo=r(y0e," (Canine model)"),y0e.forEach(t),pAo=i(L),M1=n(L,"LI",{});var L0e=s(M1);Rle=n(L0e,"STRONG",{});var Aot=s(Rle);_Ao=r(Aot,"convbert"),Aot.forEach(t),uAo=r(L0e," \u2014 "),Yq=n(L0e,"A",{href:!0});var yot=s(Yq);bAo=r(yot,"ConvBertForSequenceClassification"),yot.forEach(t),vAo=r(L0e," (ConvBERT model)"),L0e.forEach(t),FAo=i(L),E1=n(L,"LI",{});var x0e=s(E1);Ble=n(x0e,"STRONG",{});var Lot=s(Ble);TAo=r(Lot,"ctrl"),Lot.forEach(t),MAo=r(x0e," \u2014 "),Kq=n(x0e,"A",{href:!0});var xot=s(Kq);EAo=r(xot,"CTRLForSequenceClassification"),xot.forEach(t),CAo=r(x0e," (CTRL model)"),x0e.forEach(t),wAo=i(L),C1=n(L,"LI",{});var k0e=s(C1);Ple=n(k0e,"STRONG",{});var kot=s(Ple);AAo=r(kot,"data2vec-text"),kot.forEach(t),yAo=r(k0e," \u2014 "),Zq=n(k0e,"A",{href:!0});var Sot=s(Zq);LAo=r(Sot,"Data2VecTextForSequenceClassification"),Sot.forEach(t),xAo=r(k0e," (Data2VecText model)"),k0e.forEach(t),kAo=i(L),w1=n(L,"LI",{});var S0e=s(w1);$le=n(S0e,"STRONG",{});var Rot=s($le);SAo=r(Rot,"deberta"),Rot.forEach(t),RAo=r(S0e," \u2014 "),eN=n(S0e,"A",{href:!0});var Bot=s(eN);BAo=r(Bot,"DebertaForSequenceClassification"),Bot.forEach(t),PAo=r(S0e," (DeBERTa model)"),S0e.forEach(t),$Ao=i(L),A1=n(L,"LI",{});var R0e=s(A1);Ile=n(R0e,"STRONG",{});var Pot=s(Ile);IAo=r(Pot,"deberta-v2"),Pot.forEach(t),qAo=r(R0e," \u2014 "),oN=n(R0e,"A",{href:!0});var $ot=s(oN);NAo=r($ot,"DebertaV2ForSequenceClassification"),$ot.forEach(t),jAo=r(R0e," (DeBERTa-v2 model)"),R0e.forEach(t),DAo=i(L),y1=n(L,"LI",{});var B0e=s(y1);qle=n(B0e,"STRONG",{});var Iot=s(qle);GAo=r(Iot,"distilbert"),Iot.forEach(t),OAo=r(B0e," \u2014 "),rN=n(B0e,"A",{href:!0});var qot=s(rN);VAo=r(qot,"DistilBertForSequenceClassification"),qot.forEach(t),XAo=r(B0e," (DistilBERT model)"),B0e.forEach(t),zAo=i(L),L1=n(L,"LI",{});var P0e=s(L1);Nle=n(P0e,"STRONG",{});var Not=s(Nle);QAo=r(Not,"electra"),Not.forEach(t),WAo=r(P0e," \u2014 "),tN=n(P0e,"A",{href:!0});var jot=s(tN);HAo=r(jot,"ElectraForSequenceClassification"),jot.forEach(t),UAo=r(P0e," (ELECTRA model)"),P0e.forEach(t),JAo=i(L),x1=n(L,"LI",{});var $0e=s(x1);jle=n($0e,"STRONG",{});var Dot=s(jle);YAo=r(Dot,"flaubert"),Dot.forEach(t),KAo=r($0e," \u2014 "),aN=n($0e,"A",{href:!0});var Got=s(aN);ZAo=r(Got,"FlaubertForSequenceClassification"),Got.forEach(t),e0o=r($0e," (FlauBERT model)"),$0e.forEach(t),o0o=i(L),k1=n(L,"LI",{});var I0e=s(k1);Dle=n(I0e,"STRONG",{});var Oot=s(Dle);r0o=r(Oot,"fnet"),Oot.forEach(t),t0o=r(I0e," \u2014 "),nN=n(I0e,"A",{href:!0});var Vot=s(nN);a0o=r(Vot,"FNetForSequenceClassification"),Vot.forEach(t),n0o=r(I0e," (FNet model)"),I0e.forEach(t),s0o=i(L),S1=n(L,"LI",{});var q0e=s(S1);Gle=n(q0e,"STRONG",{});var Xot=s(Gle);l0o=r(Xot,"funnel"),Xot.forEach(t),i0o=r(q0e," \u2014 "),sN=n(q0e,"A",{href:!0});var zot=s(sN);d0o=r(zot,"FunnelForSequenceClassification"),zot.forEach(t),c0o=r(q0e," (Funnel Transformer model)"),q0e.forEach(t),f0o=i(L),R1=n(L,"LI",{});var N0e=s(R1);Ole=n(N0e,"STRONG",{});var Qot=s(Ole);m0o=r(Qot,"gpt2"),Qot.forEach(t),g0o=r(N0e," \u2014 "),lN=n(N0e,"A",{href:!0});var Wot=s(lN);h0o=r(Wot,"GPT2ForSequenceClassification"),Wot.forEach(t),p0o=r(N0e," (OpenAI GPT-2 model)"),N0e.forEach(t),_0o=i(L),B1=n(L,"LI",{});var j0e=s(B1);Vle=n(j0e,"STRONG",{});var Hot=s(Vle);u0o=r(Hot,"gpt_neo"),Hot.forEach(t),b0o=r(j0e," \u2014 "),iN=n(j0e,"A",{href:!0});var Uot=s(iN);v0o=r(Uot,"GPTNeoForSequenceClassification"),Uot.forEach(t),F0o=r(j0e," (GPT Neo model)"),j0e.forEach(t),T0o=i(L),P1=n(L,"LI",{});var D0e=s(P1);Xle=n(D0e,"STRONG",{});var Jot=s(Xle);M0o=r(Jot,"gptj"),Jot.forEach(t),E0o=r(D0e," \u2014 "),dN=n(D0e,"A",{href:!0});var Yot=s(dN);C0o=r(Yot,"GPTJForSequenceClassification"),Yot.forEach(t),w0o=r(D0e," (GPT-J model)"),D0e.forEach(t),A0o=i(L),$1=n(L,"LI",{});var G0e=s($1);zle=n(G0e,"STRONG",{});var Kot=s(zle);y0o=r(Kot,"ibert"),Kot.forEach(t),L0o=r(G0e," \u2014 "),cN=n(G0e,"A",{href:!0});var Zot=s(cN);x0o=r(Zot,"IBertForSequenceClassification"),Zot.forEach(t),k0o=r(G0e," (I-BERT model)"),G0e.forEach(t),S0o=i(L),I1=n(L,"LI",{});var O0e=s(I1);Qle=n(O0e,"STRONG",{});var ert=s(Qle);R0o=r(ert,"layoutlm"),ert.forEach(t),B0o=r(O0e," \u2014 "),fN=n(O0e,"A",{href:!0});var ort=s(fN);P0o=r(ort,"LayoutLMForSequenceClassification"),ort.forEach(t),$0o=r(O0e," (LayoutLM model)"),O0e.forEach(t),I0o=i(L),q1=n(L,"LI",{});var V0e=s(q1);Wle=n(V0e,"STRONG",{});var rrt=s(Wle);q0o=r(rrt,"layoutlmv2"),rrt.forEach(t),N0o=r(V0e," \u2014 "),mN=n(V0e,"A",{href:!0});var trt=s(mN);j0o=r(trt,"LayoutLMv2ForSequenceClassification"),trt.forEach(t),D0o=r(V0e," (LayoutLMv2 model)"),V0e.forEach(t),G0o=i(L),N1=n(L,"LI",{});var X0e=s(N1);Hle=n(X0e,"STRONG",{});var art=s(Hle);O0o=r(art,"led"),art.forEach(t),V0o=r(X0e," \u2014 "),gN=n(X0e,"A",{href:!0});var nrt=s(gN);X0o=r(nrt,"LEDForSequenceClassification"),nrt.forEach(t),z0o=r(X0e," (LED model)"),X0e.forEach(t),Q0o=i(L),j1=n(L,"LI",{});var z0e=s(j1);Ule=n(z0e,"STRONG",{});var srt=s(Ule);W0o=r(srt,"longformer"),srt.forEach(t),H0o=r(z0e," \u2014 "),hN=n(z0e,"A",{href:!0});var lrt=s(hN);U0o=r(lrt,"LongformerForSequenceClassification"),lrt.forEach(t),J0o=r(z0e," (Longformer model)"),z0e.forEach(t),Y0o=i(L),D1=n(L,"LI",{});var Q0e=s(D1);Jle=n(Q0e,"STRONG",{});var irt=s(Jle);K0o=r(irt,"mbart"),irt.forEach(t),Z0o=r(Q0e," \u2014 "),pN=n(Q0e,"A",{href:!0});var drt=s(pN);eyo=r(drt,"MBartForSequenceClassification"),drt.forEach(t),oyo=r(Q0e," (mBART model)"),Q0e.forEach(t),ryo=i(L),G1=n(L,"LI",{});var W0e=s(G1);Yle=n(W0e,"STRONG",{});var crt=s(Yle);tyo=r(crt,"megatron-bert"),crt.forEach(t),ayo=r(W0e," \u2014 "),_N=n(W0e,"A",{href:!0});var frt=s(_N);nyo=r(frt,"MegatronBertForSequenceClassification"),frt.forEach(t),syo=r(W0e," (MegatronBert model)"),W0e.forEach(t),lyo=i(L),O1=n(L,"LI",{});var H0e=s(O1);Kle=n(H0e,"STRONG",{});var mrt=s(Kle);iyo=r(mrt,"mobilebert"),mrt.forEach(t),dyo=r(H0e," \u2014 "),uN=n(H0e,"A",{href:!0});var grt=s(uN);cyo=r(grt,"MobileBertForSequenceClassification"),grt.forEach(t),fyo=r(H0e," (MobileBERT model)"),H0e.forEach(t),myo=i(L),V1=n(L,"LI",{});var U0e=s(V1);Zle=n(U0e,"STRONG",{});var hrt=s(Zle);gyo=r(hrt,"mpnet"),hrt.forEach(t),hyo=r(U0e," \u2014 "),bN=n(U0e,"A",{href:!0});var prt=s(bN);pyo=r(prt,"MPNetForSequenceClassification"),prt.forEach(t),_yo=r(U0e," (MPNet model)"),U0e.forEach(t),uyo=i(L),X1=n(L,"LI",{});var J0e=s(X1);eie=n(J0e,"STRONG",{});var _rt=s(eie);byo=r(_rt,"nystromformer"),_rt.forEach(t),vyo=r(J0e," \u2014 "),vN=n(J0e,"A",{href:!0});var urt=s(vN);Fyo=r(urt,"NystromformerForSequenceClassification"),urt.forEach(t),Tyo=r(J0e," (Nystromformer model)"),J0e.forEach(t),Myo=i(L),z1=n(L,"LI",{});var Y0e=s(z1);oie=n(Y0e,"STRONG",{});var brt=s(oie);Eyo=r(brt,"openai-gpt"),brt.forEach(t),Cyo=r(Y0e," \u2014 "),FN=n(Y0e,"A",{href:!0});var vrt=s(FN);wyo=r(vrt,"OpenAIGPTForSequenceClassification"),vrt.forEach(t),Ayo=r(Y0e," (OpenAI GPT model)"),Y0e.forEach(t),yyo=i(L),Q1=n(L,"LI",{});var K0e=s(Q1);rie=n(K0e,"STRONG",{});var Frt=s(rie);Lyo=r(Frt,"perceiver"),Frt.forEach(t),xyo=r(K0e," \u2014 "),TN=n(K0e,"A",{href:!0});var Trt=s(TN);kyo=r(Trt,"PerceiverForSequenceClassification"),Trt.forEach(t),Syo=r(K0e," (Perceiver model)"),K0e.forEach(t),Ryo=i(L),W1=n(L,"LI",{});var Z0e=s(W1);tie=n(Z0e,"STRONG",{});var Mrt=s(tie);Byo=r(Mrt,"plbart"),Mrt.forEach(t),Pyo=r(Z0e," \u2014 "),MN=n(Z0e,"A",{href:!0});var Ert=s(MN);$yo=r(Ert,"PLBartForSequenceClassification"),Ert.forEach(t),Iyo=r(Z0e," (PLBart model)"),Z0e.forEach(t),qyo=i(L),H1=n(L,"LI",{});var eye=s(H1);aie=n(eye,"STRONG",{});var Crt=s(aie);Nyo=r(Crt,"qdqbert"),Crt.forEach(t),jyo=r(eye," \u2014 "),EN=n(eye,"A",{href:!0});var wrt=s(EN);Dyo=r(wrt,"QDQBertForSequenceClassification"),wrt.forEach(t),Gyo=r(eye," (QDQBert model)"),eye.forEach(t),Oyo=i(L),U1=n(L,"LI",{});var oye=s(U1);nie=n(oye,"STRONG",{});var Art=s(nie);Vyo=r(Art,"reformer"),Art.forEach(t),Xyo=r(oye," \u2014 "),CN=n(oye,"A",{href:!0});var yrt=s(CN);zyo=r(yrt,"ReformerForSequenceClassification"),yrt.forEach(t),Qyo=r(oye," (Reformer model)"),oye.forEach(t),Wyo=i(L),J1=n(L,"LI",{});var rye=s(J1);sie=n(rye,"STRONG",{});var Lrt=s(sie);Hyo=r(Lrt,"rembert"),Lrt.forEach(t),Uyo=r(rye," \u2014 "),wN=n(rye,"A",{href:!0});var xrt=s(wN);Jyo=r(xrt,"RemBertForSequenceClassification"),xrt.forEach(t),Yyo=r(rye," (RemBERT model)"),rye.forEach(t),Kyo=i(L),Y1=n(L,"LI",{});var tye=s(Y1);lie=n(tye,"STRONG",{});var krt=s(lie);Zyo=r(krt,"roberta"),krt.forEach(t),eLo=r(tye," \u2014 "),AN=n(tye,"A",{href:!0});var Srt=s(AN);oLo=r(Srt,"RobertaForSequenceClassification"),Srt.forEach(t),rLo=r(tye," (RoBERTa model)"),tye.forEach(t),tLo=i(L),K1=n(L,"LI",{});var aye=s(K1);iie=n(aye,"STRONG",{});var Rrt=s(iie);aLo=r(Rrt,"roformer"),Rrt.forEach(t),nLo=r(aye," \u2014 "),yN=n(aye,"A",{href:!0});var Brt=s(yN);sLo=r(Brt,"RoFormerForSequenceClassification"),Brt.forEach(t),lLo=r(aye," (RoFormer model)"),aye.forEach(t),iLo=i(L),Z1=n(L,"LI",{});var nye=s(Z1);die=n(nye,"STRONG",{});var Prt=s(die);dLo=r(Prt,"squeezebert"),Prt.forEach(t),cLo=r(nye," \u2014 "),LN=n(nye,"A",{href:!0});var $rt=s(LN);fLo=r($rt,"SqueezeBertForSequenceClassification"),$rt.forEach(t),mLo=r(nye," (SqueezeBERT model)"),nye.forEach(t),gLo=i(L),e4=n(L,"LI",{});var sye=s(e4);cie=n(sye,"STRONG",{});var Irt=s(cie);hLo=r(Irt,"tapas"),Irt.forEach(t),pLo=r(sye," \u2014 "),xN=n(sye,"A",{href:!0});var qrt=s(xN);_Lo=r(qrt,"TapasForSequenceClassification"),qrt.forEach(t),uLo=r(sye," (TAPAS model)"),sye.forEach(t),bLo=i(L),o4=n(L,"LI",{});var lye=s(o4);fie=n(lye,"STRONG",{});var Nrt=s(fie);vLo=r(Nrt,"tapex"),Nrt.forEach(t),FLo=r(lye," \u2014 "),kN=n(lye,"A",{href:!0});var jrt=s(kN);TLo=r(jrt,"BartForSequenceClassification"),jrt.forEach(t),MLo=r(lye," (TAPEX model)"),lye.forEach(t),ELo=i(L),r4=n(L,"LI",{});var iye=s(r4);mie=n(iye,"STRONG",{});var Drt=s(mie);CLo=r(Drt,"transfo-xl"),Drt.forEach(t),wLo=r(iye," \u2014 "),SN=n(iye,"A",{href:!0});var Grt=s(SN);ALo=r(Grt,"TransfoXLForSequenceClassification"),Grt.forEach(t),yLo=r(iye," (Transformer-XL model)"),iye.forEach(t),LLo=i(L),t4=n(L,"LI",{});var dye=s(t4);gie=n(dye,"STRONG",{});var Ort=s(gie);xLo=r(Ort,"xlm"),Ort.forEach(t),kLo=r(dye," \u2014 "),RN=n(dye,"A",{href:!0});var Vrt=s(RN);SLo=r(Vrt,"XLMForSequenceClassification"),Vrt.forEach(t),RLo=r(dye," (XLM model)"),dye.forEach(t),BLo=i(L),a4=n(L,"LI",{});var cye=s(a4);hie=n(cye,"STRONG",{});var Xrt=s(hie);PLo=r(Xrt,"xlm-roberta"),Xrt.forEach(t),$Lo=r(cye," \u2014 "),BN=n(cye,"A",{href:!0});var zrt=s(BN);ILo=r(zrt,"XLMRobertaForSequenceClassification"),zrt.forEach(t),qLo=r(cye," (XLM-RoBERTa model)"),cye.forEach(t),NLo=i(L),n4=n(L,"LI",{});var fye=s(n4);pie=n(fye,"STRONG",{});var Qrt=s(pie);jLo=r(Qrt,"xlm-roberta-xl"),Qrt.forEach(t),DLo=r(fye," \u2014 "),PN=n(fye,"A",{href:!0});var Wrt=s(PN);GLo=r(Wrt,"XLMRobertaXLForSequenceClassification"),Wrt.forEach(t),OLo=r(fye," (XLM-RoBERTa-XL model)"),fye.forEach(t),VLo=i(L),s4=n(L,"LI",{});var mye=s(s4);_ie=n(mye,"STRONG",{});var Hrt=s(_ie);XLo=r(Hrt,"xlnet"),Hrt.forEach(t),zLo=r(mye," \u2014 "),$N=n(mye,"A",{href:!0});var Urt=s($N);QLo=r(Urt,"XLNetForSequenceClassification"),Urt.forEach(t),WLo=r(mye," (XLNet model)"),mye.forEach(t),HLo=i(L),l4=n(L,"LI",{});var gye=s(l4);uie=n(gye,"STRONG",{});var Jrt=s(uie);ULo=r(Jrt,"yoso"),Jrt.forEach(t),JLo=r(gye," \u2014 "),IN=n(gye,"A",{href:!0});var Yrt=s(IN);YLo=r(Yrt,"YosoForSequenceClassification"),Yrt.forEach(t),KLo=r(gye," (YOSO model)"),gye.forEach(t),L.forEach(t),ZLo=i(zt),i4=n(zt,"P",{});var hye=s(i4);e8o=r(hye,"The model is set in evaluation mode by default using "),bie=n(hye,"CODE",{});var Krt=s(bie);o8o=r(Krt,"model.eval()"),Krt.forEach(t),r8o=r(hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vie=n(hye,"CODE",{});var Zrt=s(vie);t8o=r(Zrt,"model.train()"),Zrt.forEach(t),hye.forEach(t),a8o=i(zt),Fie=n(zt,"P",{});var ett=s(Fie);n8o=r(ett,"Examples:"),ett.forEach(t),s8o=i(zt),m(eA.$$.fragment,zt),zt.forEach(t),tl.forEach(t),MBe=i(c),pd=n(c,"H2",{class:!0});var S$e=s(pd);d4=n(S$e,"A",{id:!0,class:!0,href:!0});var ott=s(d4);Tie=n(ott,"SPAN",{});var rtt=s(Tie);m(oA.$$.fragment,rtt),rtt.forEach(t),ott.forEach(t),l8o=i(S$e),Mie=n(S$e,"SPAN",{});var ttt=s(Mie);i8o=r(ttt,"AutoModelForMultipleChoice"),ttt.forEach(t),S$e.forEach(t),EBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(rA.$$.fragment,nl),d8o=i(nl),_d=n(nl,"P",{});var OU=s(_d);c8o=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),qN=n(OU,"A",{href:!0});var att=s(qN);f8o=r(att,"from_pretrained()"),att.forEach(t),m8o=r(OU," class method or the "),NN=n(OU,"A",{href:!0});var ntt=s(NN);g8o=r(ntt,"from_config()"),ntt.forEach(t),h8o=r(OU,` class
method.`),OU.forEach(t),p8o=i(nl),tA=n(nl,"P",{});var R$e=s(tA);_8o=r(R$e,"This class cannot be instantiated directly using "),Eie=n(R$e,"CODE",{});var stt=s(Eie);u8o=r(stt,"__init__()"),stt.forEach(t),b8o=r(R$e," (throws an error)."),R$e.forEach(t),v8o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(aA.$$.fragment,sl),F8o=i(sl),Cie=n(sl,"P",{});var ltt=s(Cie);T8o=r(ltt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ltt.forEach(t),M8o=i(sl),ud=n(sl,"P",{});var VU=s(ud);E8o=r(VU,`Note:
Loading a model from its configuration file does `),wie=n(VU,"STRONG",{});var itt=s(wie);C8o=r(itt,"not"),itt.forEach(t),w8o=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=n(VU,"A",{href:!0});var dtt=s(jN);A8o=r(dtt,"from_pretrained()"),dtt.forEach(t),y8o=r(VU," to load the model weights."),VU.forEach(t),L8o=i(sl),Aie=n(sl,"P",{});var ctt=s(Aie);x8o=r(ctt,"Examples:"),ctt.forEach(t),k8o=i(sl),m(nA.$$.fragment,sl),sl.forEach(t),S8o=i(nl),Ve=n(nl,"DIV",{class:!0});var Qt=s(Ve);m(sA.$$.fragment,Qt),R8o=i(Qt),yie=n(Qt,"P",{});var ftt=s(yie);B8o=r(ftt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ftt.forEach(t),P8o=i(Qt),Ja=n(Qt,"P",{});var O3=s(Ja);$8o=r(O3,"The model class to instantiate is selected based on the "),Lie=n(O3,"CODE",{});var mtt=s(Lie);I8o=r(mtt,"model_type"),mtt.forEach(t),q8o=r(O3,` property of the config object (either
passed as an argument or loaded from `),xie=n(O3,"CODE",{});var gtt=s(xie);N8o=r(gtt,"pretrained_model_name_or_path"),gtt.forEach(t),j8o=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kie=n(O3,"CODE",{});var htt=s(kie);D8o=r(htt,"pretrained_model_name_or_path"),htt.forEach(t),G8o=r(O3,":"),O3.forEach(t),O8o=i(Qt),G=n(Qt,"UL",{});var O=s(G);c4=n(O,"LI",{});var pye=s(c4);Sie=n(pye,"STRONG",{});var ptt=s(Sie);V8o=r(ptt,"albert"),ptt.forEach(t),X8o=r(pye," \u2014 "),DN=n(pye,"A",{href:!0});var _tt=s(DN);z8o=r(_tt,"AlbertForMultipleChoice"),_tt.forEach(t),Q8o=r(pye," (ALBERT model)"),pye.forEach(t),W8o=i(O),f4=n(O,"LI",{});var _ye=s(f4);Rie=n(_ye,"STRONG",{});var utt=s(Rie);H8o=r(utt,"bert"),utt.forEach(t),U8o=r(_ye," \u2014 "),GN=n(_ye,"A",{href:!0});var btt=s(GN);J8o=r(btt,"BertForMultipleChoice"),btt.forEach(t),Y8o=r(_ye," (BERT model)"),_ye.forEach(t),K8o=i(O),m4=n(O,"LI",{});var uye=s(m4);Bie=n(uye,"STRONG",{});var vtt=s(Bie);Z8o=r(vtt,"big_bird"),vtt.forEach(t),e7o=r(uye," \u2014 "),ON=n(uye,"A",{href:!0});var Ftt=s(ON);o7o=r(Ftt,"BigBirdForMultipleChoice"),Ftt.forEach(t),r7o=r(uye," (BigBird model)"),uye.forEach(t),t7o=i(O),g4=n(O,"LI",{});var bye=s(g4);Pie=n(bye,"STRONG",{});var Ttt=s(Pie);a7o=r(Ttt,"camembert"),Ttt.forEach(t),n7o=r(bye," \u2014 "),VN=n(bye,"A",{href:!0});var Mtt=s(VN);s7o=r(Mtt,"CamembertForMultipleChoice"),Mtt.forEach(t),l7o=r(bye," (CamemBERT model)"),bye.forEach(t),i7o=i(O),h4=n(O,"LI",{});var vye=s(h4);$ie=n(vye,"STRONG",{});var Ett=s($ie);d7o=r(Ett,"canine"),Ett.forEach(t),c7o=r(vye," \u2014 "),XN=n(vye,"A",{href:!0});var Ctt=s(XN);f7o=r(Ctt,"CanineForMultipleChoice"),Ctt.forEach(t),m7o=r(vye," (Canine model)"),vye.forEach(t),g7o=i(O),p4=n(O,"LI",{});var Fye=s(p4);Iie=n(Fye,"STRONG",{});var wtt=s(Iie);h7o=r(wtt,"convbert"),wtt.forEach(t),p7o=r(Fye," \u2014 "),zN=n(Fye,"A",{href:!0});var Att=s(zN);_7o=r(Att,"ConvBertForMultipleChoice"),Att.forEach(t),u7o=r(Fye," (ConvBERT model)"),Fye.forEach(t),b7o=i(O),_4=n(O,"LI",{});var Tye=s(_4);qie=n(Tye,"STRONG",{});var ytt=s(qie);v7o=r(ytt,"data2vec-text"),ytt.forEach(t),F7o=r(Tye," \u2014 "),QN=n(Tye,"A",{href:!0});var Ltt=s(QN);T7o=r(Ltt,"Data2VecTextForMultipleChoice"),Ltt.forEach(t),M7o=r(Tye," (Data2VecText model)"),Tye.forEach(t),E7o=i(O),u4=n(O,"LI",{});var Mye=s(u4);Nie=n(Mye,"STRONG",{});var xtt=s(Nie);C7o=r(xtt,"distilbert"),xtt.forEach(t),w7o=r(Mye," \u2014 "),WN=n(Mye,"A",{href:!0});var ktt=s(WN);A7o=r(ktt,"DistilBertForMultipleChoice"),ktt.forEach(t),y7o=r(Mye," (DistilBERT model)"),Mye.forEach(t),L7o=i(O),b4=n(O,"LI",{});var Eye=s(b4);jie=n(Eye,"STRONG",{});var Stt=s(jie);x7o=r(Stt,"electra"),Stt.forEach(t),k7o=r(Eye," \u2014 "),HN=n(Eye,"A",{href:!0});var Rtt=s(HN);S7o=r(Rtt,"ElectraForMultipleChoice"),Rtt.forEach(t),R7o=r(Eye," (ELECTRA model)"),Eye.forEach(t),B7o=i(O),v4=n(O,"LI",{});var Cye=s(v4);Die=n(Cye,"STRONG",{});var Btt=s(Die);P7o=r(Btt,"flaubert"),Btt.forEach(t),$7o=r(Cye," \u2014 "),UN=n(Cye,"A",{href:!0});var Ptt=s(UN);I7o=r(Ptt,"FlaubertForMultipleChoice"),Ptt.forEach(t),q7o=r(Cye," (FlauBERT model)"),Cye.forEach(t),N7o=i(O),F4=n(O,"LI",{});var wye=s(F4);Gie=n(wye,"STRONG",{});var $tt=s(Gie);j7o=r($tt,"fnet"),$tt.forEach(t),D7o=r(wye," \u2014 "),JN=n(wye,"A",{href:!0});var Itt=s(JN);G7o=r(Itt,"FNetForMultipleChoice"),Itt.forEach(t),O7o=r(wye," (FNet model)"),wye.forEach(t),V7o=i(O),T4=n(O,"LI",{});var Aye=s(T4);Oie=n(Aye,"STRONG",{});var qtt=s(Oie);X7o=r(qtt,"funnel"),qtt.forEach(t),z7o=r(Aye," \u2014 "),YN=n(Aye,"A",{href:!0});var Ntt=s(YN);Q7o=r(Ntt,"FunnelForMultipleChoice"),Ntt.forEach(t),W7o=r(Aye," (Funnel Transformer model)"),Aye.forEach(t),H7o=i(O),M4=n(O,"LI",{});var yye=s(M4);Vie=n(yye,"STRONG",{});var jtt=s(Vie);U7o=r(jtt,"ibert"),jtt.forEach(t),J7o=r(yye," \u2014 "),KN=n(yye,"A",{href:!0});var Dtt=s(KN);Y7o=r(Dtt,"IBertForMultipleChoice"),Dtt.forEach(t),K7o=r(yye," (I-BERT model)"),yye.forEach(t),Z7o=i(O),E4=n(O,"LI",{});var Lye=s(E4);Xie=n(Lye,"STRONG",{});var Gtt=s(Xie);e9o=r(Gtt,"longformer"),Gtt.forEach(t),o9o=r(Lye," \u2014 "),ZN=n(Lye,"A",{href:!0});var Ott=s(ZN);r9o=r(Ott,"LongformerForMultipleChoice"),Ott.forEach(t),t9o=r(Lye," (Longformer model)"),Lye.forEach(t),a9o=i(O),C4=n(O,"LI",{});var xye=s(C4);zie=n(xye,"STRONG",{});var Vtt=s(zie);n9o=r(Vtt,"megatron-bert"),Vtt.forEach(t),s9o=r(xye," \u2014 "),ej=n(xye,"A",{href:!0});var Xtt=s(ej);l9o=r(Xtt,"MegatronBertForMultipleChoice"),Xtt.forEach(t),i9o=r(xye," (MegatronBert model)"),xye.forEach(t),d9o=i(O),w4=n(O,"LI",{});var kye=s(w4);Qie=n(kye,"STRONG",{});var ztt=s(Qie);c9o=r(ztt,"mobilebert"),ztt.forEach(t),f9o=r(kye," \u2014 "),oj=n(kye,"A",{href:!0});var Qtt=s(oj);m9o=r(Qtt,"MobileBertForMultipleChoice"),Qtt.forEach(t),g9o=r(kye," (MobileBERT model)"),kye.forEach(t),h9o=i(O),A4=n(O,"LI",{});var Sye=s(A4);Wie=n(Sye,"STRONG",{});var Wtt=s(Wie);p9o=r(Wtt,"mpnet"),Wtt.forEach(t),_9o=r(Sye," \u2014 "),rj=n(Sye,"A",{href:!0});var Htt=s(rj);u9o=r(Htt,"MPNetForMultipleChoice"),Htt.forEach(t),b9o=r(Sye," (MPNet model)"),Sye.forEach(t),v9o=i(O),y4=n(O,"LI",{});var Rye=s(y4);Hie=n(Rye,"STRONG",{});var Utt=s(Hie);F9o=r(Utt,"nystromformer"),Utt.forEach(t),T9o=r(Rye," \u2014 "),tj=n(Rye,"A",{href:!0});var Jtt=s(tj);M9o=r(Jtt,"NystromformerForMultipleChoice"),Jtt.forEach(t),E9o=r(Rye," (Nystromformer model)"),Rye.forEach(t),C9o=i(O),L4=n(O,"LI",{});var Bye=s(L4);Uie=n(Bye,"STRONG",{});var Ytt=s(Uie);w9o=r(Ytt,"qdqbert"),Ytt.forEach(t),A9o=r(Bye," \u2014 "),aj=n(Bye,"A",{href:!0});var Ktt=s(aj);y9o=r(Ktt,"QDQBertForMultipleChoice"),Ktt.forEach(t),L9o=r(Bye," (QDQBert model)"),Bye.forEach(t),x9o=i(O),x4=n(O,"LI",{});var Pye=s(x4);Jie=n(Pye,"STRONG",{});var Ztt=s(Jie);k9o=r(Ztt,"rembert"),Ztt.forEach(t),S9o=r(Pye," \u2014 "),nj=n(Pye,"A",{href:!0});var eat=s(nj);R9o=r(eat,"RemBertForMultipleChoice"),eat.forEach(t),B9o=r(Pye," (RemBERT model)"),Pye.forEach(t),P9o=i(O),k4=n(O,"LI",{});var $ye=s(k4);Yie=n($ye,"STRONG",{});var oat=s(Yie);$9o=r(oat,"roberta"),oat.forEach(t),I9o=r($ye," \u2014 "),sj=n($ye,"A",{href:!0});var rat=s(sj);q9o=r(rat,"RobertaForMultipleChoice"),rat.forEach(t),N9o=r($ye," (RoBERTa model)"),$ye.forEach(t),j9o=i(O),S4=n(O,"LI",{});var Iye=s(S4);Kie=n(Iye,"STRONG",{});var tat=s(Kie);D9o=r(tat,"roformer"),tat.forEach(t),G9o=r(Iye," \u2014 "),lj=n(Iye,"A",{href:!0});var aat=s(lj);O9o=r(aat,"RoFormerForMultipleChoice"),aat.forEach(t),V9o=r(Iye," (RoFormer model)"),Iye.forEach(t),X9o=i(O),R4=n(O,"LI",{});var qye=s(R4);Zie=n(qye,"STRONG",{});var nat=s(Zie);z9o=r(nat,"squeezebert"),nat.forEach(t),Q9o=r(qye," \u2014 "),ij=n(qye,"A",{href:!0});var sat=s(ij);W9o=r(sat,"SqueezeBertForMultipleChoice"),sat.forEach(t),H9o=r(qye," (SqueezeBERT model)"),qye.forEach(t),U9o=i(O),B4=n(O,"LI",{});var Nye=s(B4);ede=n(Nye,"STRONG",{});var lat=s(ede);J9o=r(lat,"xlm"),lat.forEach(t),Y9o=r(Nye," \u2014 "),dj=n(Nye,"A",{href:!0});var iat=s(dj);K9o=r(iat,"XLMForMultipleChoice"),iat.forEach(t),Z9o=r(Nye," (XLM model)"),Nye.forEach(t),exo=i(O),P4=n(O,"LI",{});var jye=s(P4);ode=n(jye,"STRONG",{});var dat=s(ode);oxo=r(dat,"xlm-roberta"),dat.forEach(t),rxo=r(jye," \u2014 "),cj=n(jye,"A",{href:!0});var cat=s(cj);txo=r(cat,"XLMRobertaForMultipleChoice"),cat.forEach(t),axo=r(jye," (XLM-RoBERTa model)"),jye.forEach(t),nxo=i(O),$4=n(O,"LI",{});var Dye=s($4);rde=n(Dye,"STRONG",{});var fat=s(rde);sxo=r(fat,"xlm-roberta-xl"),fat.forEach(t),lxo=r(Dye," \u2014 "),fj=n(Dye,"A",{href:!0});var mat=s(fj);ixo=r(mat,"XLMRobertaXLForMultipleChoice"),mat.forEach(t),dxo=r(Dye," (XLM-RoBERTa-XL model)"),Dye.forEach(t),cxo=i(O),I4=n(O,"LI",{});var Gye=s(I4);tde=n(Gye,"STRONG",{});var gat=s(tde);fxo=r(gat,"xlnet"),gat.forEach(t),mxo=r(Gye," \u2014 "),mj=n(Gye,"A",{href:!0});var hat=s(mj);gxo=r(hat,"XLNetForMultipleChoice"),hat.forEach(t),hxo=r(Gye," (XLNet model)"),Gye.forEach(t),pxo=i(O),q4=n(O,"LI",{});var Oye=s(q4);ade=n(Oye,"STRONG",{});var pat=s(ade);_xo=r(pat,"yoso"),pat.forEach(t),uxo=r(Oye," \u2014 "),gj=n(Oye,"A",{href:!0});var _at=s(gj);bxo=r(_at,"YosoForMultipleChoice"),_at.forEach(t),vxo=r(Oye," (YOSO model)"),Oye.forEach(t),O.forEach(t),Fxo=i(Qt),N4=n(Qt,"P",{});var Vye=s(N4);Txo=r(Vye,"The model is set in evaluation mode by default using "),nde=n(Vye,"CODE",{});var uat=s(nde);Mxo=r(uat,"model.eval()"),uat.forEach(t),Exo=r(Vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sde=n(Vye,"CODE",{});var bat=s(sde);Cxo=r(bat,"model.train()"),bat.forEach(t),Vye.forEach(t),wxo=i(Qt),lde=n(Qt,"P",{});var vat=s(lde);Axo=r(vat,"Examples:"),vat.forEach(t),yxo=i(Qt),m(lA.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),CBe=i(c),bd=n(c,"H2",{class:!0});var B$e=s(bd);j4=n(B$e,"A",{id:!0,class:!0,href:!0});var Fat=s(j4);ide=n(Fat,"SPAN",{});var Tat=s(ide);m(iA.$$.fragment,Tat),Tat.forEach(t),Fat.forEach(t),Lxo=i(B$e),dde=n(B$e,"SPAN",{});var Mat=s(dde);xxo=r(Mat,"AutoModelForNextSentencePrediction"),Mat.forEach(t),B$e.forEach(t),wBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(dA.$$.fragment,ll),kxo=i(ll),vd=n(ll,"P",{});var XU=s(vd);Sxo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hj=n(XU,"A",{href:!0});var Eat=s(hj);Rxo=r(Eat,"from_pretrained()"),Eat.forEach(t),Bxo=r(XU," class method or the "),pj=n(XU,"A",{href:!0});var Cat=s(pj);Pxo=r(Cat,"from_config()"),Cat.forEach(t),$xo=r(XU,` class
method.`),XU.forEach(t),Ixo=i(ll),cA=n(ll,"P",{});var P$e=s(cA);qxo=r(P$e,"This class cannot be instantiated directly using "),cde=n(P$e,"CODE",{});var wat=s(cde);Nxo=r(wat,"__init__()"),wat.forEach(t),jxo=r(P$e," (throws an error)."),P$e.forEach(t),Dxo=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(fA.$$.fragment,il),Gxo=i(il),fde=n(il,"P",{});var Aat=s(fde);Oxo=r(Aat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Aat.forEach(t),Vxo=i(il),Fd=n(il,"P",{});var zU=s(Fd);Xxo=r(zU,`Note:
Loading a model from its configuration file does `),mde=n(zU,"STRONG",{});var yat=s(mde);zxo=r(yat,"not"),yat.forEach(t),Qxo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(zU,"A",{href:!0});var Lat=s(_j);Wxo=r(Lat,"from_pretrained()"),Lat.forEach(t),Hxo=r(zU," to load the model weights."),zU.forEach(t),Uxo=i(il),gde=n(il,"P",{});var xat=s(gde);Jxo=r(xat,"Examples:"),xat.forEach(t),Yxo=i(il),m(mA.$$.fragment,il),il.forEach(t),Kxo=i(ll),Xe=n(ll,"DIV",{class:!0});var Wt=s(Xe);m(gA.$$.fragment,Wt),Zxo=i(Wt),hde=n(Wt,"P",{});var kat=s(hde);eko=r(kat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kat.forEach(t),oko=i(Wt),Ya=n(Wt,"P",{});var V3=s(Ya);rko=r(V3,"The model class to instantiate is selected based on the "),pde=n(V3,"CODE",{});var Sat=s(pde);tko=r(Sat,"model_type"),Sat.forEach(t),ako=r(V3,` property of the config object (either
passed as an argument or loaded from `),_de=n(V3,"CODE",{});var Rat=s(_de);nko=r(Rat,"pretrained_model_name_or_path"),Rat.forEach(t),sko=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ude=n(V3,"CODE",{});var Bat=s(ude);lko=r(Bat,"pretrained_model_name_or_path"),Bat.forEach(t),iko=r(V3,":"),V3.forEach(t),dko=i(Wt),da=n(Wt,"UL",{});var dl=s(da);D4=n(dl,"LI",{});var Xye=s(D4);bde=n(Xye,"STRONG",{});var Pat=s(bde);cko=r(Pat,"bert"),Pat.forEach(t),fko=r(Xye," \u2014 "),uj=n(Xye,"A",{href:!0});var $at=s(uj);mko=r($at,"BertForNextSentencePrediction"),$at.forEach(t),gko=r(Xye," (BERT model)"),Xye.forEach(t),hko=i(dl),G4=n(dl,"LI",{});var zye=s(G4);vde=n(zye,"STRONG",{});var Iat=s(vde);pko=r(Iat,"fnet"),Iat.forEach(t),_ko=r(zye," \u2014 "),bj=n(zye,"A",{href:!0});var qat=s(bj);uko=r(qat,"FNetForNextSentencePrediction"),qat.forEach(t),bko=r(zye," (FNet model)"),zye.forEach(t),vko=i(dl),O4=n(dl,"LI",{});var Qye=s(O4);Fde=n(Qye,"STRONG",{});var Nat=s(Fde);Fko=r(Nat,"megatron-bert"),Nat.forEach(t),Tko=r(Qye," \u2014 "),vj=n(Qye,"A",{href:!0});var jat=s(vj);Mko=r(jat,"MegatronBertForNextSentencePrediction"),jat.forEach(t),Eko=r(Qye," (MegatronBert model)"),Qye.forEach(t),Cko=i(dl),V4=n(dl,"LI",{});var Wye=s(V4);Tde=n(Wye,"STRONG",{});var Dat=s(Tde);wko=r(Dat,"mobilebert"),Dat.forEach(t),Ako=r(Wye," \u2014 "),Fj=n(Wye,"A",{href:!0});var Gat=s(Fj);yko=r(Gat,"MobileBertForNextSentencePrediction"),Gat.forEach(t),Lko=r(Wye," (MobileBERT model)"),Wye.forEach(t),xko=i(dl),X4=n(dl,"LI",{});var Hye=s(X4);Mde=n(Hye,"STRONG",{});var Oat=s(Mde);kko=r(Oat,"qdqbert"),Oat.forEach(t),Sko=r(Hye," \u2014 "),Tj=n(Hye,"A",{href:!0});var Vat=s(Tj);Rko=r(Vat,"QDQBertForNextSentencePrediction"),Vat.forEach(t),Bko=r(Hye," (QDQBert model)"),Hye.forEach(t),dl.forEach(t),Pko=i(Wt),z4=n(Wt,"P",{});var Uye=s(z4);$ko=r(Uye,"The model is set in evaluation mode by default using "),Ede=n(Uye,"CODE",{});var Xat=s(Ede);Iko=r(Xat,"model.eval()"),Xat.forEach(t),qko=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(Uye,"CODE",{});var zat=s(Cde);Nko=r(zat,"model.train()"),zat.forEach(t),Uye.forEach(t),jko=i(Wt),wde=n(Wt,"P",{});var Qat=s(wde);Dko=r(Qat,"Examples:"),Qat.forEach(t),Gko=i(Wt),m(hA.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),ABe=i(c),Td=n(c,"H2",{class:!0});var $$e=s(Td);Q4=n($$e,"A",{id:!0,class:!0,href:!0});var Wat=s(Q4);Ade=n(Wat,"SPAN",{});var Hat=s(Ade);m(pA.$$.fragment,Hat),Hat.forEach(t),Wat.forEach(t),Oko=i($$e),yde=n($$e,"SPAN",{});var Uat=s(yde);Vko=r(Uat,"AutoModelForTokenClassification"),Uat.forEach(t),$$e.forEach(t),yBe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(_A.$$.fragment,cl),Xko=i(cl),Md=n(cl,"P",{});var QU=s(Md);zko=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Mj=n(QU,"A",{href:!0});var Jat=s(Mj);Qko=r(Jat,"from_pretrained()"),Jat.forEach(t),Wko=r(QU," class method or the "),Ej=n(QU,"A",{href:!0});var Yat=s(Ej);Hko=r(Yat,"from_config()"),Yat.forEach(t),Uko=r(QU,` class
method.`),QU.forEach(t),Jko=i(cl),uA=n(cl,"P",{});var I$e=s(uA);Yko=r(I$e,"This class cannot be instantiated directly using "),Lde=n(I$e,"CODE",{});var Kat=s(Lde);Kko=r(Kat,"__init__()"),Kat.forEach(t),Zko=r(I$e," (throws an error)."),I$e.forEach(t),eSo=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(bA.$$.fragment,fl),oSo=i(fl),xde=n(fl,"P",{});var Zat=s(xde);rSo=r(Zat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zat.forEach(t),tSo=i(fl),Ed=n(fl,"P",{});var WU=s(Ed);aSo=r(WU,`Note:
Loading a model from its configuration file does `),kde=n(WU,"STRONG",{});var ent=s(kde);nSo=r(ent,"not"),ent.forEach(t),sSo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(WU,"A",{href:!0});var ont=s(Cj);lSo=r(ont,"from_pretrained()"),ont.forEach(t),iSo=r(WU," to load the model weights."),WU.forEach(t),dSo=i(fl),Sde=n(fl,"P",{});var rnt=s(Sde);cSo=r(rnt,"Examples:"),rnt.forEach(t),fSo=i(fl),m(vA.$$.fragment,fl),fl.forEach(t),mSo=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);m(FA.$$.fragment,Ht),gSo=i(Ht),Rde=n(Ht,"P",{});var tnt=s(Rde);hSo=r(tnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tnt.forEach(t),pSo=i(Ht),Ka=n(Ht,"P",{});var X3=s(Ka);_So=r(X3,"The model class to instantiate is selected based on the "),Bde=n(X3,"CODE",{});var ant=s(Bde);uSo=r(ant,"model_type"),ant.forEach(t),bSo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Pde=n(X3,"CODE",{});var nnt=s(Pde);vSo=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),FSo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=n(X3,"CODE",{});var snt=s($de);TSo=r(snt,"pretrained_model_name_or_path"),snt.forEach(t),MSo=r(X3,":"),X3.forEach(t),ESo=i(Ht),j=n(Ht,"UL",{});var D=s(j);W4=n(D,"LI",{});var Jye=s(W4);Ide=n(Jye,"STRONG",{});var lnt=s(Ide);CSo=r(lnt,"albert"),lnt.forEach(t),wSo=r(Jye," \u2014 "),wj=n(Jye,"A",{href:!0});var int=s(wj);ASo=r(int,"AlbertForTokenClassification"),int.forEach(t),ySo=r(Jye," (ALBERT model)"),Jye.forEach(t),LSo=i(D),H4=n(D,"LI",{});var Yye=s(H4);qde=n(Yye,"STRONG",{});var dnt=s(qde);xSo=r(dnt,"bert"),dnt.forEach(t),kSo=r(Yye," \u2014 "),Aj=n(Yye,"A",{href:!0});var cnt=s(Aj);SSo=r(cnt,"BertForTokenClassification"),cnt.forEach(t),RSo=r(Yye," (BERT model)"),Yye.forEach(t),BSo=i(D),U4=n(D,"LI",{});var Kye=s(U4);Nde=n(Kye,"STRONG",{});var fnt=s(Nde);PSo=r(fnt,"big_bird"),fnt.forEach(t),$So=r(Kye," \u2014 "),yj=n(Kye,"A",{href:!0});var mnt=s(yj);ISo=r(mnt,"BigBirdForTokenClassification"),mnt.forEach(t),qSo=r(Kye," (BigBird model)"),Kye.forEach(t),NSo=i(D),J4=n(D,"LI",{});var Zye=s(J4);jde=n(Zye,"STRONG",{});var gnt=s(jde);jSo=r(gnt,"camembert"),gnt.forEach(t),DSo=r(Zye," \u2014 "),Lj=n(Zye,"A",{href:!0});var hnt=s(Lj);GSo=r(hnt,"CamembertForTokenClassification"),hnt.forEach(t),OSo=r(Zye," (CamemBERT model)"),Zye.forEach(t),VSo=i(D),Y4=n(D,"LI",{});var eLe=s(Y4);Dde=n(eLe,"STRONG",{});var pnt=s(Dde);XSo=r(pnt,"canine"),pnt.forEach(t),zSo=r(eLe," \u2014 "),xj=n(eLe,"A",{href:!0});var _nt=s(xj);QSo=r(_nt,"CanineForTokenClassification"),_nt.forEach(t),WSo=r(eLe," (Canine model)"),eLe.forEach(t),HSo=i(D),K4=n(D,"LI",{});var oLe=s(K4);Gde=n(oLe,"STRONG",{});var unt=s(Gde);USo=r(unt,"convbert"),unt.forEach(t),JSo=r(oLe," \u2014 "),kj=n(oLe,"A",{href:!0});var bnt=s(kj);YSo=r(bnt,"ConvBertForTokenClassification"),bnt.forEach(t),KSo=r(oLe," (ConvBERT model)"),oLe.forEach(t),ZSo=i(D),Z4=n(D,"LI",{});var rLe=s(Z4);Ode=n(rLe,"STRONG",{});var vnt=s(Ode);eRo=r(vnt,"data2vec-text"),vnt.forEach(t),oRo=r(rLe," \u2014 "),Sj=n(rLe,"A",{href:!0});var Fnt=s(Sj);rRo=r(Fnt,"Data2VecTextForTokenClassification"),Fnt.forEach(t),tRo=r(rLe," (Data2VecText model)"),rLe.forEach(t),aRo=i(D),eb=n(D,"LI",{});var tLe=s(eb);Vde=n(tLe,"STRONG",{});var Tnt=s(Vde);nRo=r(Tnt,"deberta"),Tnt.forEach(t),sRo=r(tLe," \u2014 "),Rj=n(tLe,"A",{href:!0});var Mnt=s(Rj);lRo=r(Mnt,"DebertaForTokenClassification"),Mnt.forEach(t),iRo=r(tLe," (DeBERTa model)"),tLe.forEach(t),dRo=i(D),ob=n(D,"LI",{});var aLe=s(ob);Xde=n(aLe,"STRONG",{});var Ent=s(Xde);cRo=r(Ent,"deberta-v2"),Ent.forEach(t),fRo=r(aLe," \u2014 "),Bj=n(aLe,"A",{href:!0});var Cnt=s(Bj);mRo=r(Cnt,"DebertaV2ForTokenClassification"),Cnt.forEach(t),gRo=r(aLe," (DeBERTa-v2 model)"),aLe.forEach(t),hRo=i(D),rb=n(D,"LI",{});var nLe=s(rb);zde=n(nLe,"STRONG",{});var wnt=s(zde);pRo=r(wnt,"distilbert"),wnt.forEach(t),_Ro=r(nLe," \u2014 "),Pj=n(nLe,"A",{href:!0});var Ant=s(Pj);uRo=r(Ant,"DistilBertForTokenClassification"),Ant.forEach(t),bRo=r(nLe," (DistilBERT model)"),nLe.forEach(t),vRo=i(D),tb=n(D,"LI",{});var sLe=s(tb);Qde=n(sLe,"STRONG",{});var ynt=s(Qde);FRo=r(ynt,"electra"),ynt.forEach(t),TRo=r(sLe," \u2014 "),$j=n(sLe,"A",{href:!0});var Lnt=s($j);MRo=r(Lnt,"ElectraForTokenClassification"),Lnt.forEach(t),ERo=r(sLe," (ELECTRA model)"),sLe.forEach(t),CRo=i(D),ab=n(D,"LI",{});var lLe=s(ab);Wde=n(lLe,"STRONG",{});var xnt=s(Wde);wRo=r(xnt,"flaubert"),xnt.forEach(t),ARo=r(lLe," \u2014 "),Ij=n(lLe,"A",{href:!0});var knt=s(Ij);yRo=r(knt,"FlaubertForTokenClassification"),knt.forEach(t),LRo=r(lLe," (FlauBERT model)"),lLe.forEach(t),xRo=i(D),nb=n(D,"LI",{});var iLe=s(nb);Hde=n(iLe,"STRONG",{});var Snt=s(Hde);kRo=r(Snt,"fnet"),Snt.forEach(t),SRo=r(iLe," \u2014 "),qj=n(iLe,"A",{href:!0});var Rnt=s(qj);RRo=r(Rnt,"FNetForTokenClassification"),Rnt.forEach(t),BRo=r(iLe," (FNet model)"),iLe.forEach(t),PRo=i(D),sb=n(D,"LI",{});var dLe=s(sb);Ude=n(dLe,"STRONG",{});var Bnt=s(Ude);$Ro=r(Bnt,"funnel"),Bnt.forEach(t),IRo=r(dLe," \u2014 "),Nj=n(dLe,"A",{href:!0});var Pnt=s(Nj);qRo=r(Pnt,"FunnelForTokenClassification"),Pnt.forEach(t),NRo=r(dLe," (Funnel Transformer model)"),dLe.forEach(t),jRo=i(D),lb=n(D,"LI",{});var cLe=s(lb);Jde=n(cLe,"STRONG",{});var $nt=s(Jde);DRo=r($nt,"gpt2"),$nt.forEach(t),GRo=r(cLe," \u2014 "),jj=n(cLe,"A",{href:!0});var Int=s(jj);ORo=r(Int,"GPT2ForTokenClassification"),Int.forEach(t),VRo=r(cLe," (OpenAI GPT-2 model)"),cLe.forEach(t),XRo=i(D),ib=n(D,"LI",{});var fLe=s(ib);Yde=n(fLe,"STRONG",{});var qnt=s(Yde);zRo=r(qnt,"ibert"),qnt.forEach(t),QRo=r(fLe," \u2014 "),Dj=n(fLe,"A",{href:!0});var Nnt=s(Dj);WRo=r(Nnt,"IBertForTokenClassification"),Nnt.forEach(t),HRo=r(fLe," (I-BERT model)"),fLe.forEach(t),URo=i(D),db=n(D,"LI",{});var mLe=s(db);Kde=n(mLe,"STRONG",{});var jnt=s(Kde);JRo=r(jnt,"layoutlm"),jnt.forEach(t),YRo=r(mLe," \u2014 "),Gj=n(mLe,"A",{href:!0});var Dnt=s(Gj);KRo=r(Dnt,"LayoutLMForTokenClassification"),Dnt.forEach(t),ZRo=r(mLe," (LayoutLM model)"),mLe.forEach(t),eBo=i(D),cb=n(D,"LI",{});var gLe=s(cb);Zde=n(gLe,"STRONG",{});var Gnt=s(Zde);oBo=r(Gnt,"layoutlmv2"),Gnt.forEach(t),rBo=r(gLe," \u2014 "),Oj=n(gLe,"A",{href:!0});var Ont=s(Oj);tBo=r(Ont,"LayoutLMv2ForTokenClassification"),Ont.forEach(t),aBo=r(gLe," (LayoutLMv2 model)"),gLe.forEach(t),nBo=i(D),fb=n(D,"LI",{});var hLe=s(fb);ece=n(hLe,"STRONG",{});var Vnt=s(ece);sBo=r(Vnt,"longformer"),Vnt.forEach(t),lBo=r(hLe," \u2014 "),Vj=n(hLe,"A",{href:!0});var Xnt=s(Vj);iBo=r(Xnt,"LongformerForTokenClassification"),Xnt.forEach(t),dBo=r(hLe," (Longformer model)"),hLe.forEach(t),cBo=i(D),mb=n(D,"LI",{});var pLe=s(mb);oce=n(pLe,"STRONG",{});var znt=s(oce);fBo=r(znt,"megatron-bert"),znt.forEach(t),mBo=r(pLe," \u2014 "),Xj=n(pLe,"A",{href:!0});var Qnt=s(Xj);gBo=r(Qnt,"MegatronBertForTokenClassification"),Qnt.forEach(t),hBo=r(pLe," (MegatronBert model)"),pLe.forEach(t),pBo=i(D),gb=n(D,"LI",{});var _Le=s(gb);rce=n(_Le,"STRONG",{});var Wnt=s(rce);_Bo=r(Wnt,"mobilebert"),Wnt.forEach(t),uBo=r(_Le," \u2014 "),zj=n(_Le,"A",{href:!0});var Hnt=s(zj);bBo=r(Hnt,"MobileBertForTokenClassification"),Hnt.forEach(t),vBo=r(_Le," (MobileBERT model)"),_Le.forEach(t),FBo=i(D),hb=n(D,"LI",{});var uLe=s(hb);tce=n(uLe,"STRONG",{});var Unt=s(tce);TBo=r(Unt,"mpnet"),Unt.forEach(t),MBo=r(uLe," \u2014 "),Qj=n(uLe,"A",{href:!0});var Jnt=s(Qj);EBo=r(Jnt,"MPNetForTokenClassification"),Jnt.forEach(t),CBo=r(uLe," (MPNet model)"),uLe.forEach(t),wBo=i(D),pb=n(D,"LI",{});var bLe=s(pb);ace=n(bLe,"STRONG",{});var Ynt=s(ace);ABo=r(Ynt,"nystromformer"),Ynt.forEach(t),yBo=r(bLe," \u2014 "),Wj=n(bLe,"A",{href:!0});var Knt=s(Wj);LBo=r(Knt,"NystromformerForTokenClassification"),Knt.forEach(t),xBo=r(bLe," (Nystromformer model)"),bLe.forEach(t),kBo=i(D),_b=n(D,"LI",{});var vLe=s(_b);nce=n(vLe,"STRONG",{});var Znt=s(nce);SBo=r(Znt,"qdqbert"),Znt.forEach(t),RBo=r(vLe," \u2014 "),Hj=n(vLe,"A",{href:!0});var est=s(Hj);BBo=r(est,"QDQBertForTokenClassification"),est.forEach(t),PBo=r(vLe," (QDQBert model)"),vLe.forEach(t),$Bo=i(D),ub=n(D,"LI",{});var FLe=s(ub);sce=n(FLe,"STRONG",{});var ost=s(sce);IBo=r(ost,"rembert"),ost.forEach(t),qBo=r(FLe," \u2014 "),Uj=n(FLe,"A",{href:!0});var rst=s(Uj);NBo=r(rst,"RemBertForTokenClassification"),rst.forEach(t),jBo=r(FLe," (RemBERT model)"),FLe.forEach(t),DBo=i(D),bb=n(D,"LI",{});var TLe=s(bb);lce=n(TLe,"STRONG",{});var tst=s(lce);GBo=r(tst,"roberta"),tst.forEach(t),OBo=r(TLe," \u2014 "),Jj=n(TLe,"A",{href:!0});var ast=s(Jj);VBo=r(ast,"RobertaForTokenClassification"),ast.forEach(t),XBo=r(TLe," (RoBERTa model)"),TLe.forEach(t),zBo=i(D),vb=n(D,"LI",{});var MLe=s(vb);ice=n(MLe,"STRONG",{});var nst=s(ice);QBo=r(nst,"roformer"),nst.forEach(t),WBo=r(MLe," \u2014 "),Yj=n(MLe,"A",{href:!0});var sst=s(Yj);HBo=r(sst,"RoFormerForTokenClassification"),sst.forEach(t),UBo=r(MLe," (RoFormer model)"),MLe.forEach(t),JBo=i(D),Fb=n(D,"LI",{});var ELe=s(Fb);dce=n(ELe,"STRONG",{});var lst=s(dce);YBo=r(lst,"squeezebert"),lst.forEach(t),KBo=r(ELe," \u2014 "),Kj=n(ELe,"A",{href:!0});var ist=s(Kj);ZBo=r(ist,"SqueezeBertForTokenClassification"),ist.forEach(t),ePo=r(ELe," (SqueezeBERT model)"),ELe.forEach(t),oPo=i(D),Tb=n(D,"LI",{});var CLe=s(Tb);cce=n(CLe,"STRONG",{});var dst=s(cce);rPo=r(dst,"xlm"),dst.forEach(t),tPo=r(CLe," \u2014 "),Zj=n(CLe,"A",{href:!0});var cst=s(Zj);aPo=r(cst,"XLMForTokenClassification"),cst.forEach(t),nPo=r(CLe," (XLM model)"),CLe.forEach(t),sPo=i(D),Mb=n(D,"LI",{});var wLe=s(Mb);fce=n(wLe,"STRONG",{});var fst=s(fce);lPo=r(fst,"xlm-roberta"),fst.forEach(t),iPo=r(wLe," \u2014 "),eD=n(wLe,"A",{href:!0});var mst=s(eD);dPo=r(mst,"XLMRobertaForTokenClassification"),mst.forEach(t),cPo=r(wLe," (XLM-RoBERTa model)"),wLe.forEach(t),fPo=i(D),Eb=n(D,"LI",{});var ALe=s(Eb);mce=n(ALe,"STRONG",{});var gst=s(mce);mPo=r(gst,"xlm-roberta-xl"),gst.forEach(t),gPo=r(ALe," \u2014 "),oD=n(ALe,"A",{href:!0});var hst=s(oD);hPo=r(hst,"XLMRobertaXLForTokenClassification"),hst.forEach(t),pPo=r(ALe," (XLM-RoBERTa-XL model)"),ALe.forEach(t),_Po=i(D),Cb=n(D,"LI",{});var yLe=s(Cb);gce=n(yLe,"STRONG",{});var pst=s(gce);uPo=r(pst,"xlnet"),pst.forEach(t),bPo=r(yLe," \u2014 "),rD=n(yLe,"A",{href:!0});var _st=s(rD);vPo=r(_st,"XLNetForTokenClassification"),_st.forEach(t),FPo=r(yLe," (XLNet model)"),yLe.forEach(t),TPo=i(D),wb=n(D,"LI",{});var LLe=s(wb);hce=n(LLe,"STRONG",{});var ust=s(hce);MPo=r(ust,"yoso"),ust.forEach(t),EPo=r(LLe," \u2014 "),tD=n(LLe,"A",{href:!0});var bst=s(tD);CPo=r(bst,"YosoForTokenClassification"),bst.forEach(t),wPo=r(LLe," (YOSO model)"),LLe.forEach(t),D.forEach(t),APo=i(Ht),Ab=n(Ht,"P",{});var xLe=s(Ab);yPo=r(xLe,"The model is set in evaluation mode by default using "),pce=n(xLe,"CODE",{});var vst=s(pce);LPo=r(vst,"model.eval()"),vst.forEach(t),xPo=r(xLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ce=n(xLe,"CODE",{});var Fst=s(_ce);kPo=r(Fst,"model.train()"),Fst.forEach(t),xLe.forEach(t),SPo=i(Ht),uce=n(Ht,"P",{});var Tst=s(uce);RPo=r(Tst,"Examples:"),Tst.forEach(t),BPo=i(Ht),m(TA.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),LBe=i(c),Cd=n(c,"H2",{class:!0});var q$e=s(Cd);yb=n(q$e,"A",{id:!0,class:!0,href:!0});var Mst=s(yb);bce=n(Mst,"SPAN",{});var Est=s(bce);m(MA.$$.fragment,Est),Est.forEach(t),Mst.forEach(t),PPo=i(q$e),vce=n(q$e,"SPAN",{});var Cst=s(vce);$Po=r(Cst,"AutoModelForQuestionAnswering"),Cst.forEach(t),q$e.forEach(t),xBe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(EA.$$.fragment,ml),IPo=i(ml),wd=n(ml,"P",{});var HU=s(wd);qPo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aD=n(HU,"A",{href:!0});var wst=s(aD);NPo=r(wst,"from_pretrained()"),wst.forEach(t),jPo=r(HU," class method or the "),nD=n(HU,"A",{href:!0});var Ast=s(nD);DPo=r(Ast,"from_config()"),Ast.forEach(t),GPo=r(HU,` class
method.`),HU.forEach(t),OPo=i(ml),CA=n(ml,"P",{});var N$e=s(CA);VPo=r(N$e,"This class cannot be instantiated directly using "),Fce=n(N$e,"CODE",{});var yst=s(Fce);XPo=r(yst,"__init__()"),yst.forEach(t),zPo=r(N$e," (throws an error)."),N$e.forEach(t),QPo=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(wA.$$.fragment,gl),WPo=i(gl),Tce=n(gl,"P",{});var Lst=s(Tce);HPo=r(Lst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lst.forEach(t),UPo=i(gl),Ad=n(gl,"P",{});var UU=s(Ad);JPo=r(UU,`Note:
Loading a model from its configuration file does `),Mce=n(UU,"STRONG",{});var xst=s(Mce);YPo=r(xst,"not"),xst.forEach(t),KPo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sD=n(UU,"A",{href:!0});var kst=s(sD);ZPo=r(kst,"from_pretrained()"),kst.forEach(t),e$o=r(UU," to load the model weights."),UU.forEach(t),o$o=i(gl),Ece=n(gl,"P",{});var Sst=s(Ece);r$o=r(Sst,"Examples:"),Sst.forEach(t),t$o=i(gl),m(AA.$$.fragment,gl),gl.forEach(t),a$o=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);m(yA.$$.fragment,Ut),n$o=i(Ut),Cce=n(Ut,"P",{});var Rst=s(Cce);s$o=r(Rst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Rst.forEach(t),l$o=i(Ut),Za=n(Ut,"P",{});var z3=s(Za);i$o=r(z3,"The model class to instantiate is selected based on the "),wce=n(z3,"CODE",{});var Bst=s(wce);d$o=r(Bst,"model_type"),Bst.forEach(t),c$o=r(z3,` property of the config object (either
passed as an argument or loaded from `),Ace=n(z3,"CODE",{});var Pst=s(Ace);f$o=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),m$o=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=n(z3,"CODE",{});var $st=s(yce);g$o=r($st,"pretrained_model_name_or_path"),$st.forEach(t),h$o=r(z3,":"),z3.forEach(t),p$o=i(Ut),R=n(Ut,"UL",{});var P=s(R);Lb=n(P,"LI",{});var kLe=s(Lb);Lce=n(kLe,"STRONG",{});var Ist=s(Lce);_$o=r(Ist,"albert"),Ist.forEach(t),u$o=r(kLe," \u2014 "),lD=n(kLe,"A",{href:!0});var qst=s(lD);b$o=r(qst,"AlbertForQuestionAnswering"),qst.forEach(t),v$o=r(kLe," (ALBERT model)"),kLe.forEach(t),F$o=i(P),xb=n(P,"LI",{});var SLe=s(xb);xce=n(SLe,"STRONG",{});var Nst=s(xce);T$o=r(Nst,"bart"),Nst.forEach(t),M$o=r(SLe," \u2014 "),iD=n(SLe,"A",{href:!0});var jst=s(iD);E$o=r(jst,"BartForQuestionAnswering"),jst.forEach(t),C$o=r(SLe," (BART model)"),SLe.forEach(t),w$o=i(P),kb=n(P,"LI",{});var RLe=s(kb);kce=n(RLe,"STRONG",{});var Dst=s(kce);A$o=r(Dst,"bert"),Dst.forEach(t),y$o=r(RLe," \u2014 "),dD=n(RLe,"A",{href:!0});var Gst=s(dD);L$o=r(Gst,"BertForQuestionAnswering"),Gst.forEach(t),x$o=r(RLe," (BERT model)"),RLe.forEach(t),k$o=i(P),Sb=n(P,"LI",{});var BLe=s(Sb);Sce=n(BLe,"STRONG",{});var Ost=s(Sce);S$o=r(Ost,"big_bird"),Ost.forEach(t),R$o=r(BLe," \u2014 "),cD=n(BLe,"A",{href:!0});var Vst=s(cD);B$o=r(Vst,"BigBirdForQuestionAnswering"),Vst.forEach(t),P$o=r(BLe," (BigBird model)"),BLe.forEach(t),$$o=i(P),Rb=n(P,"LI",{});var PLe=s(Rb);Rce=n(PLe,"STRONG",{});var Xst=s(Rce);I$o=r(Xst,"bigbird_pegasus"),Xst.forEach(t),q$o=r(PLe," \u2014 "),fD=n(PLe,"A",{href:!0});var zst=s(fD);N$o=r(zst,"BigBirdPegasusForQuestionAnswering"),zst.forEach(t),j$o=r(PLe," (BigBirdPegasus model)"),PLe.forEach(t),D$o=i(P),Bb=n(P,"LI",{});var $Le=s(Bb);Bce=n($Le,"STRONG",{});var Qst=s(Bce);G$o=r(Qst,"camembert"),Qst.forEach(t),O$o=r($Le," \u2014 "),mD=n($Le,"A",{href:!0});var Wst=s(mD);V$o=r(Wst,"CamembertForQuestionAnswering"),Wst.forEach(t),X$o=r($Le," (CamemBERT model)"),$Le.forEach(t),z$o=i(P),Pb=n(P,"LI",{});var ILe=s(Pb);Pce=n(ILe,"STRONG",{});var Hst=s(Pce);Q$o=r(Hst,"canine"),Hst.forEach(t),W$o=r(ILe," \u2014 "),gD=n(ILe,"A",{href:!0});var Ust=s(gD);H$o=r(Ust,"CanineForQuestionAnswering"),Ust.forEach(t),U$o=r(ILe," (Canine model)"),ILe.forEach(t),J$o=i(P),$b=n(P,"LI",{});var qLe=s($b);$ce=n(qLe,"STRONG",{});var Jst=s($ce);Y$o=r(Jst,"convbert"),Jst.forEach(t),K$o=r(qLe," \u2014 "),hD=n(qLe,"A",{href:!0});var Yst=s(hD);Z$o=r(Yst,"ConvBertForQuestionAnswering"),Yst.forEach(t),eIo=r(qLe," (ConvBERT model)"),qLe.forEach(t),oIo=i(P),Ib=n(P,"LI",{});var NLe=s(Ib);Ice=n(NLe,"STRONG",{});var Kst=s(Ice);rIo=r(Kst,"data2vec-text"),Kst.forEach(t),tIo=r(NLe," \u2014 "),pD=n(NLe,"A",{href:!0});var Zst=s(pD);aIo=r(Zst,"Data2VecTextForQuestionAnswering"),Zst.forEach(t),nIo=r(NLe," (Data2VecText model)"),NLe.forEach(t),sIo=i(P),qb=n(P,"LI",{});var jLe=s(qb);qce=n(jLe,"STRONG",{});var elt=s(qce);lIo=r(elt,"deberta"),elt.forEach(t),iIo=r(jLe," \u2014 "),_D=n(jLe,"A",{href:!0});var olt=s(_D);dIo=r(olt,"DebertaForQuestionAnswering"),olt.forEach(t),cIo=r(jLe," (DeBERTa model)"),jLe.forEach(t),fIo=i(P),Nb=n(P,"LI",{});var DLe=s(Nb);Nce=n(DLe,"STRONG",{});var rlt=s(Nce);mIo=r(rlt,"deberta-v2"),rlt.forEach(t),gIo=r(DLe," \u2014 "),uD=n(DLe,"A",{href:!0});var tlt=s(uD);hIo=r(tlt,"DebertaV2ForQuestionAnswering"),tlt.forEach(t),pIo=r(DLe," (DeBERTa-v2 model)"),DLe.forEach(t),_Io=i(P),jb=n(P,"LI",{});var GLe=s(jb);jce=n(GLe,"STRONG",{});var alt=s(jce);uIo=r(alt,"distilbert"),alt.forEach(t),bIo=r(GLe," \u2014 "),bD=n(GLe,"A",{href:!0});var nlt=s(bD);vIo=r(nlt,"DistilBertForQuestionAnswering"),nlt.forEach(t),FIo=r(GLe," (DistilBERT model)"),GLe.forEach(t),TIo=i(P),Db=n(P,"LI",{});var OLe=s(Db);Dce=n(OLe,"STRONG",{});var slt=s(Dce);MIo=r(slt,"electra"),slt.forEach(t),EIo=r(OLe," \u2014 "),vD=n(OLe,"A",{href:!0});var llt=s(vD);CIo=r(llt,"ElectraForQuestionAnswering"),llt.forEach(t),wIo=r(OLe," (ELECTRA model)"),OLe.forEach(t),AIo=i(P),Gb=n(P,"LI",{});var VLe=s(Gb);Gce=n(VLe,"STRONG",{});var ilt=s(Gce);yIo=r(ilt,"flaubert"),ilt.forEach(t),LIo=r(VLe," \u2014 "),FD=n(VLe,"A",{href:!0});var dlt=s(FD);xIo=r(dlt,"FlaubertForQuestionAnsweringSimple"),dlt.forEach(t),kIo=r(VLe," (FlauBERT model)"),VLe.forEach(t),SIo=i(P),Ob=n(P,"LI",{});var XLe=s(Ob);Oce=n(XLe,"STRONG",{});var clt=s(Oce);RIo=r(clt,"fnet"),clt.forEach(t),BIo=r(XLe," \u2014 "),TD=n(XLe,"A",{href:!0});var flt=s(TD);PIo=r(flt,"FNetForQuestionAnswering"),flt.forEach(t),$Io=r(XLe," (FNet model)"),XLe.forEach(t),IIo=i(P),Vb=n(P,"LI",{});var zLe=s(Vb);Vce=n(zLe,"STRONG",{});var mlt=s(Vce);qIo=r(mlt,"funnel"),mlt.forEach(t),NIo=r(zLe," \u2014 "),MD=n(zLe,"A",{href:!0});var glt=s(MD);jIo=r(glt,"FunnelForQuestionAnswering"),glt.forEach(t),DIo=r(zLe," (Funnel Transformer model)"),zLe.forEach(t),GIo=i(P),Xb=n(P,"LI",{});var QLe=s(Xb);Xce=n(QLe,"STRONG",{});var hlt=s(Xce);OIo=r(hlt,"gptj"),hlt.forEach(t),VIo=r(QLe," \u2014 "),ED=n(QLe,"A",{href:!0});var plt=s(ED);XIo=r(plt,"GPTJForQuestionAnswering"),plt.forEach(t),zIo=r(QLe," (GPT-J model)"),QLe.forEach(t),QIo=i(P),zb=n(P,"LI",{});var WLe=s(zb);zce=n(WLe,"STRONG",{});var _lt=s(zce);WIo=r(_lt,"ibert"),_lt.forEach(t),HIo=r(WLe," \u2014 "),CD=n(WLe,"A",{href:!0});var ult=s(CD);UIo=r(ult,"IBertForQuestionAnswering"),ult.forEach(t),JIo=r(WLe," (I-BERT model)"),WLe.forEach(t),YIo=i(P),Qb=n(P,"LI",{});var HLe=s(Qb);Qce=n(HLe,"STRONG",{});var blt=s(Qce);KIo=r(blt,"layoutlmv2"),blt.forEach(t),ZIo=r(HLe," \u2014 "),wD=n(HLe,"A",{href:!0});var vlt=s(wD);eqo=r(vlt,"LayoutLMv2ForQuestionAnswering"),vlt.forEach(t),oqo=r(HLe," (LayoutLMv2 model)"),HLe.forEach(t),rqo=i(P),Wb=n(P,"LI",{});var ULe=s(Wb);Wce=n(ULe,"STRONG",{});var Flt=s(Wce);tqo=r(Flt,"led"),Flt.forEach(t),aqo=r(ULe," \u2014 "),AD=n(ULe,"A",{href:!0});var Tlt=s(AD);nqo=r(Tlt,"LEDForQuestionAnswering"),Tlt.forEach(t),sqo=r(ULe," (LED model)"),ULe.forEach(t),lqo=i(P),Hb=n(P,"LI",{});var JLe=s(Hb);Hce=n(JLe,"STRONG",{});var Mlt=s(Hce);iqo=r(Mlt,"longformer"),Mlt.forEach(t),dqo=r(JLe," \u2014 "),yD=n(JLe,"A",{href:!0});var Elt=s(yD);cqo=r(Elt,"LongformerForQuestionAnswering"),Elt.forEach(t),fqo=r(JLe," (Longformer model)"),JLe.forEach(t),mqo=i(P),Ub=n(P,"LI",{});var YLe=s(Ub);Uce=n(YLe,"STRONG",{});var Clt=s(Uce);gqo=r(Clt,"lxmert"),Clt.forEach(t),hqo=r(YLe," \u2014 "),LD=n(YLe,"A",{href:!0});var wlt=s(LD);pqo=r(wlt,"LxmertForQuestionAnswering"),wlt.forEach(t),_qo=r(YLe," (LXMERT model)"),YLe.forEach(t),uqo=i(P),Jb=n(P,"LI",{});var KLe=s(Jb);Jce=n(KLe,"STRONG",{});var Alt=s(Jce);bqo=r(Alt,"mbart"),Alt.forEach(t),vqo=r(KLe," \u2014 "),xD=n(KLe,"A",{href:!0});var ylt=s(xD);Fqo=r(ylt,"MBartForQuestionAnswering"),ylt.forEach(t),Tqo=r(KLe," (mBART model)"),KLe.forEach(t),Mqo=i(P),Yb=n(P,"LI",{});var ZLe=s(Yb);Yce=n(ZLe,"STRONG",{});var Llt=s(Yce);Eqo=r(Llt,"megatron-bert"),Llt.forEach(t),Cqo=r(ZLe," \u2014 "),kD=n(ZLe,"A",{href:!0});var xlt=s(kD);wqo=r(xlt,"MegatronBertForQuestionAnswering"),xlt.forEach(t),Aqo=r(ZLe," (MegatronBert model)"),ZLe.forEach(t),yqo=i(P),Kb=n(P,"LI",{});var e8e=s(Kb);Kce=n(e8e,"STRONG",{});var klt=s(Kce);Lqo=r(klt,"mobilebert"),klt.forEach(t),xqo=r(e8e," \u2014 "),SD=n(e8e,"A",{href:!0});var Slt=s(SD);kqo=r(Slt,"MobileBertForQuestionAnswering"),Slt.forEach(t),Sqo=r(e8e," (MobileBERT model)"),e8e.forEach(t),Rqo=i(P),Zb=n(P,"LI",{});var o8e=s(Zb);Zce=n(o8e,"STRONG",{});var Rlt=s(Zce);Bqo=r(Rlt,"mpnet"),Rlt.forEach(t),Pqo=r(o8e," \u2014 "),RD=n(o8e,"A",{href:!0});var Blt=s(RD);$qo=r(Blt,"MPNetForQuestionAnswering"),Blt.forEach(t),Iqo=r(o8e," (MPNet model)"),o8e.forEach(t),qqo=i(P),e2=n(P,"LI",{});var r8e=s(e2);efe=n(r8e,"STRONG",{});var Plt=s(efe);Nqo=r(Plt,"nystromformer"),Plt.forEach(t),jqo=r(r8e," \u2014 "),BD=n(r8e,"A",{href:!0});var $lt=s(BD);Dqo=r($lt,"NystromformerForQuestionAnswering"),$lt.forEach(t),Gqo=r(r8e," (Nystromformer model)"),r8e.forEach(t),Oqo=i(P),o2=n(P,"LI",{});var t8e=s(o2);ofe=n(t8e,"STRONG",{});var Ilt=s(ofe);Vqo=r(Ilt,"qdqbert"),Ilt.forEach(t),Xqo=r(t8e," \u2014 "),PD=n(t8e,"A",{href:!0});var qlt=s(PD);zqo=r(qlt,"QDQBertForQuestionAnswering"),qlt.forEach(t),Qqo=r(t8e," (QDQBert model)"),t8e.forEach(t),Wqo=i(P),r2=n(P,"LI",{});var a8e=s(r2);rfe=n(a8e,"STRONG",{});var Nlt=s(rfe);Hqo=r(Nlt,"reformer"),Nlt.forEach(t),Uqo=r(a8e," \u2014 "),$D=n(a8e,"A",{href:!0});var jlt=s($D);Jqo=r(jlt,"ReformerForQuestionAnswering"),jlt.forEach(t),Yqo=r(a8e," (Reformer model)"),a8e.forEach(t),Kqo=i(P),t2=n(P,"LI",{});var n8e=s(t2);tfe=n(n8e,"STRONG",{});var Dlt=s(tfe);Zqo=r(Dlt,"rembert"),Dlt.forEach(t),eNo=r(n8e," \u2014 "),ID=n(n8e,"A",{href:!0});var Glt=s(ID);oNo=r(Glt,"RemBertForQuestionAnswering"),Glt.forEach(t),rNo=r(n8e," (RemBERT model)"),n8e.forEach(t),tNo=i(P),a2=n(P,"LI",{});var s8e=s(a2);afe=n(s8e,"STRONG",{});var Olt=s(afe);aNo=r(Olt,"roberta"),Olt.forEach(t),nNo=r(s8e," \u2014 "),qD=n(s8e,"A",{href:!0});var Vlt=s(qD);sNo=r(Vlt,"RobertaForQuestionAnswering"),Vlt.forEach(t),lNo=r(s8e," (RoBERTa model)"),s8e.forEach(t),iNo=i(P),n2=n(P,"LI",{});var l8e=s(n2);nfe=n(l8e,"STRONG",{});var Xlt=s(nfe);dNo=r(Xlt,"roformer"),Xlt.forEach(t),cNo=r(l8e," \u2014 "),ND=n(l8e,"A",{href:!0});var zlt=s(ND);fNo=r(zlt,"RoFormerForQuestionAnswering"),zlt.forEach(t),mNo=r(l8e," (RoFormer model)"),l8e.forEach(t),gNo=i(P),s2=n(P,"LI",{});var i8e=s(s2);sfe=n(i8e,"STRONG",{});var Qlt=s(sfe);hNo=r(Qlt,"splinter"),Qlt.forEach(t),pNo=r(i8e," \u2014 "),jD=n(i8e,"A",{href:!0});var Wlt=s(jD);_No=r(Wlt,"SplinterForQuestionAnswering"),Wlt.forEach(t),uNo=r(i8e," (Splinter model)"),i8e.forEach(t),bNo=i(P),l2=n(P,"LI",{});var d8e=s(l2);lfe=n(d8e,"STRONG",{});var Hlt=s(lfe);vNo=r(Hlt,"squeezebert"),Hlt.forEach(t),FNo=r(d8e," \u2014 "),DD=n(d8e,"A",{href:!0});var Ult=s(DD);TNo=r(Ult,"SqueezeBertForQuestionAnswering"),Ult.forEach(t),MNo=r(d8e," (SqueezeBERT model)"),d8e.forEach(t),ENo=i(P),i2=n(P,"LI",{});var c8e=s(i2);ife=n(c8e,"STRONG",{});var Jlt=s(ife);CNo=r(Jlt,"xlm"),Jlt.forEach(t),wNo=r(c8e," \u2014 "),GD=n(c8e,"A",{href:!0});var Ylt=s(GD);ANo=r(Ylt,"XLMForQuestionAnsweringSimple"),Ylt.forEach(t),yNo=r(c8e," (XLM model)"),c8e.forEach(t),LNo=i(P),d2=n(P,"LI",{});var f8e=s(d2);dfe=n(f8e,"STRONG",{});var Klt=s(dfe);xNo=r(Klt,"xlm-roberta"),Klt.forEach(t),kNo=r(f8e," \u2014 "),OD=n(f8e,"A",{href:!0});var Zlt=s(OD);SNo=r(Zlt,"XLMRobertaForQuestionAnswering"),Zlt.forEach(t),RNo=r(f8e," (XLM-RoBERTa model)"),f8e.forEach(t),BNo=i(P),c2=n(P,"LI",{});var m8e=s(c2);cfe=n(m8e,"STRONG",{});var eit=s(cfe);PNo=r(eit,"xlm-roberta-xl"),eit.forEach(t),$No=r(m8e," \u2014 "),VD=n(m8e,"A",{href:!0});var oit=s(VD);INo=r(oit,"XLMRobertaXLForQuestionAnswering"),oit.forEach(t),qNo=r(m8e," (XLM-RoBERTa-XL model)"),m8e.forEach(t),NNo=i(P),f2=n(P,"LI",{});var g8e=s(f2);ffe=n(g8e,"STRONG",{});var rit=s(ffe);jNo=r(rit,"xlnet"),rit.forEach(t),DNo=r(g8e," \u2014 "),XD=n(g8e,"A",{href:!0});var tit=s(XD);GNo=r(tit,"XLNetForQuestionAnsweringSimple"),tit.forEach(t),ONo=r(g8e," (XLNet model)"),g8e.forEach(t),VNo=i(P),m2=n(P,"LI",{});var h8e=s(m2);mfe=n(h8e,"STRONG",{});var ait=s(mfe);XNo=r(ait,"yoso"),ait.forEach(t),zNo=r(h8e," \u2014 "),zD=n(h8e,"A",{href:!0});var nit=s(zD);QNo=r(nit,"YosoForQuestionAnswering"),nit.forEach(t),WNo=r(h8e," (YOSO model)"),h8e.forEach(t),P.forEach(t),HNo=i(Ut),g2=n(Ut,"P",{});var p8e=s(g2);UNo=r(p8e,"The model is set in evaluation mode by default using "),gfe=n(p8e,"CODE",{});var sit=s(gfe);JNo=r(sit,"model.eval()"),sit.forEach(t),YNo=r(p8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=n(p8e,"CODE",{});var lit=s(hfe);KNo=r(lit,"model.train()"),lit.forEach(t),p8e.forEach(t),ZNo=i(Ut),pfe=n(Ut,"P",{});var iit=s(pfe);ejo=r(iit,"Examples:"),iit.forEach(t),ojo=i(Ut),m(LA.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),kBe=i(c),yd=n(c,"H2",{class:!0});var j$e=s(yd);h2=n(j$e,"A",{id:!0,class:!0,href:!0});var dit=s(h2);_fe=n(dit,"SPAN",{});var cit=s(_fe);m(xA.$$.fragment,cit),cit.forEach(t),dit.forEach(t),rjo=i(j$e),ufe=n(j$e,"SPAN",{});var fit=s(ufe);tjo=r(fit,"AutoModelForTableQuestionAnswering"),fit.forEach(t),j$e.forEach(t),SBe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(kA.$$.fragment,hl),ajo=i(hl),Ld=n(hl,"P",{});var JU=s(Ld);njo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QD=n(JU,"A",{href:!0});var mit=s(QD);sjo=r(mit,"from_pretrained()"),mit.forEach(t),ljo=r(JU," class method or the "),WD=n(JU,"A",{href:!0});var git=s(WD);ijo=r(git,"from_config()"),git.forEach(t),djo=r(JU,` class
method.`),JU.forEach(t),cjo=i(hl),SA=n(hl,"P",{});var D$e=s(SA);fjo=r(D$e,"This class cannot be instantiated directly using "),bfe=n(D$e,"CODE",{});var hit=s(bfe);mjo=r(hit,"__init__()"),hit.forEach(t),gjo=r(D$e," (throws an error)."),D$e.forEach(t),hjo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(RA.$$.fragment,pl),pjo=i(pl),vfe=n(pl,"P",{});var pit=s(vfe);_jo=r(pit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pit.forEach(t),ujo=i(pl),xd=n(pl,"P",{});var YU=s(xd);bjo=r(YU,`Note:
Loading a model from its configuration file does `),Ffe=n(YU,"STRONG",{});var _it=s(Ffe);vjo=r(_it,"not"),_it.forEach(t),Fjo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(YU,"A",{href:!0});var uit=s(HD);Tjo=r(uit,"from_pretrained()"),uit.forEach(t),Mjo=r(YU," to load the model weights."),YU.forEach(t),Ejo=i(pl),Tfe=n(pl,"P",{});var bit=s(Tfe);Cjo=r(bit,"Examples:"),bit.forEach(t),wjo=i(pl),m(BA.$$.fragment,pl),pl.forEach(t),Ajo=i(hl),We=n(hl,"DIV",{class:!0});var Jt=s(We);m(PA.$$.fragment,Jt),yjo=i(Jt),Mfe=n(Jt,"P",{});var vit=s(Mfe);Ljo=r(vit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vit.forEach(t),xjo=i(Jt),en=n(Jt,"P",{});var Q3=s(en);kjo=r(Q3,"The model class to instantiate is selected based on the "),Efe=n(Q3,"CODE",{});var Fit=s(Efe);Sjo=r(Fit,"model_type"),Fit.forEach(t),Rjo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(Q3,"CODE",{});var Tit=s(Cfe);Bjo=r(Tit,"pretrained_model_name_or_path"),Tit.forEach(t),Pjo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(Q3,"CODE",{});var Mit=s(wfe);$jo=r(Mit,"pretrained_model_name_or_path"),Mit.forEach(t),Ijo=r(Q3,":"),Q3.forEach(t),qjo=i(Jt),Afe=n(Jt,"UL",{});var Eit=s(Afe);p2=n(Eit,"LI",{});var _8e=s(p2);yfe=n(_8e,"STRONG",{});var Cit=s(yfe);Njo=r(Cit,"tapas"),Cit.forEach(t),jjo=r(_8e," \u2014 "),UD=n(_8e,"A",{href:!0});var wit=s(UD);Djo=r(wit,"TapasForQuestionAnswering"),wit.forEach(t),Gjo=r(_8e," (TAPAS model)"),_8e.forEach(t),Eit.forEach(t),Ojo=i(Jt),_2=n(Jt,"P",{});var u8e=s(_2);Vjo=r(u8e,"The model is set in evaluation mode by default using "),Lfe=n(u8e,"CODE",{});var Ait=s(Lfe);Xjo=r(Ait,"model.eval()"),Ait.forEach(t),zjo=r(u8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(u8e,"CODE",{});var yit=s(xfe);Qjo=r(yit,"model.train()"),yit.forEach(t),u8e.forEach(t),Wjo=i(Jt),kfe=n(Jt,"P",{});var Lit=s(kfe);Hjo=r(Lit,"Examples:"),Lit.forEach(t),Ujo=i(Jt),m($A.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),RBe=i(c),kd=n(c,"H2",{class:!0});var G$e=s(kd);u2=n(G$e,"A",{id:!0,class:!0,href:!0});var xit=s(u2);Sfe=n(xit,"SPAN",{});var kit=s(Sfe);m(IA.$$.fragment,kit),kit.forEach(t),xit.forEach(t),Jjo=i(G$e),Rfe=n(G$e,"SPAN",{});var Sit=s(Rfe);Yjo=r(Sit,"AutoModelForImageClassification"),Sit.forEach(t),G$e.forEach(t),BBe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m(qA.$$.fragment,_l),Kjo=i(_l),Sd=n(_l,"P",{});var KU=s(Sd);Zjo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),JD=n(KU,"A",{href:!0});var Rit=s(JD);eDo=r(Rit,"from_pretrained()"),Rit.forEach(t),oDo=r(KU," class method or the "),YD=n(KU,"A",{href:!0});var Bit=s(YD);rDo=r(Bit,"from_config()"),Bit.forEach(t),tDo=r(KU,` class
method.`),KU.forEach(t),aDo=i(_l),NA=n(_l,"P",{});var O$e=s(NA);nDo=r(O$e,"This class cannot be instantiated directly using "),Bfe=n(O$e,"CODE",{});var Pit=s(Bfe);sDo=r(Pit,"__init__()"),Pit.forEach(t),lDo=r(O$e," (throws an error)."),O$e.forEach(t),iDo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(jA.$$.fragment,ul),dDo=i(ul),Pfe=n(ul,"P",{});var $it=s(Pfe);cDo=r($it,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$it.forEach(t),fDo=i(ul),Rd=n(ul,"P",{});var ZU=s(Rd);mDo=r(ZU,`Note:
Loading a model from its configuration file does `),$fe=n(ZU,"STRONG",{});var Iit=s($fe);gDo=r(Iit,"not"),Iit.forEach(t),hDo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(ZU,"A",{href:!0});var qit=s(KD);pDo=r(qit,"from_pretrained()"),qit.forEach(t),_Do=r(ZU," to load the model weights."),ZU.forEach(t),uDo=i(ul),Ife=n(ul,"P",{});var Nit=s(Ife);bDo=r(Nit,"Examples:"),Nit.forEach(t),vDo=i(ul),m(DA.$$.fragment,ul),ul.forEach(t),FDo=i(_l),He=n(_l,"DIV",{class:!0});var Yt=s(He);m(GA.$$.fragment,Yt),TDo=i(Yt),qfe=n(Yt,"P",{});var jit=s(qfe);MDo=r(jit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jit.forEach(t),EDo=i(Yt),on=n(Yt,"P",{});var W3=s(on);CDo=r(W3,"The model class to instantiate is selected based on the "),Nfe=n(W3,"CODE",{});var Dit=s(Nfe);wDo=r(Dit,"model_type"),Dit.forEach(t),ADo=r(W3,` property of the config object (either
passed as an argument or loaded from `),jfe=n(W3,"CODE",{});var Git=s(jfe);yDo=r(Git,"pretrained_model_name_or_path"),Git.forEach(t),LDo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(W3,"CODE",{});var Oit=s(Dfe);xDo=r(Oit,"pretrained_model_name_or_path"),Oit.forEach(t),kDo=r(W3,":"),W3.forEach(t),SDo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);b2=n(ge,"LI",{});var b8e=s(b2);Gfe=n(b8e,"STRONG",{});var Vit=s(Gfe);RDo=r(Vit,"beit"),Vit.forEach(t),BDo=r(b8e," \u2014 "),ZD=n(b8e,"A",{href:!0});var Xit=s(ZD);PDo=r(Xit,"BeitForImageClassification"),Xit.forEach(t),$Do=r(b8e," (BEiT model)"),b8e.forEach(t),IDo=i(ge),v2=n(ge,"LI",{});var v8e=s(v2);Ofe=n(v8e,"STRONG",{});var zit=s(Ofe);qDo=r(zit,"convnext"),zit.forEach(t),NDo=r(v8e," \u2014 "),eG=n(v8e,"A",{href:!0});var Qit=s(eG);jDo=r(Qit,"ConvNextForImageClassification"),Qit.forEach(t),DDo=r(v8e," (ConvNext model)"),v8e.forEach(t),GDo=i(ge),F2=n(ge,"LI",{});var F8e=s(F2);Vfe=n(F8e,"STRONG",{});var Wit=s(Vfe);ODo=r(Wit,"data2vec-vision"),Wit.forEach(t),VDo=r(F8e," \u2014 "),oG=n(F8e,"A",{href:!0});var Hit=s(oG);XDo=r(Hit,"Data2VecVisionForImageClassification"),Hit.forEach(t),zDo=r(F8e," (Data2VecVision model)"),F8e.forEach(t),QDo=i(ge),Gs=n(ge,"LI",{});var E9=s(Gs);Xfe=n(E9,"STRONG",{});var Uit=s(Xfe);WDo=r(Uit,"deit"),Uit.forEach(t),HDo=r(E9," \u2014 "),rG=n(E9,"A",{href:!0});var Jit=s(rG);UDo=r(Jit,"DeiTForImageClassification"),Jit.forEach(t),JDo=r(E9," or "),tG=n(E9,"A",{href:!0});var Yit=s(tG);YDo=r(Yit,"DeiTForImageClassificationWithTeacher"),Yit.forEach(t),KDo=r(E9," (DeiT model)"),E9.forEach(t),ZDo=i(ge),T2=n(ge,"LI",{});var T8e=s(T2);zfe=n(T8e,"STRONG",{});var Kit=s(zfe);eGo=r(Kit,"imagegpt"),Kit.forEach(t),oGo=r(T8e," \u2014 "),aG=n(T8e,"A",{href:!0});var Zit=s(aG);rGo=r(Zit,"ImageGPTForImageClassification"),Zit.forEach(t),tGo=r(T8e," (ImageGPT model)"),T8e.forEach(t),aGo=i(ge),ma=n(ge,"LI",{});var $f=s(ma);Qfe=n($f,"STRONG",{});var edt=s(Qfe);nGo=r(edt,"perceiver"),edt.forEach(t),sGo=r($f," \u2014 "),nG=n($f,"A",{href:!0});var odt=s(nG);lGo=r(odt,"PerceiverForImageClassificationLearned"),odt.forEach(t),iGo=r($f," or "),sG=n($f,"A",{href:!0});var rdt=s(sG);dGo=r(rdt,"PerceiverForImageClassificationFourier"),rdt.forEach(t),cGo=r($f," or "),lG=n($f,"A",{href:!0});var tdt=s(lG);fGo=r(tdt,"PerceiverForImageClassificationConvProcessing"),tdt.forEach(t),mGo=r($f," (Perceiver model)"),$f.forEach(t),gGo=i(ge),M2=n(ge,"LI",{});var M8e=s(M2);Wfe=n(M8e,"STRONG",{});var adt=s(Wfe);hGo=r(adt,"poolformer"),adt.forEach(t),pGo=r(M8e," \u2014 "),iG=n(M8e,"A",{href:!0});var ndt=s(iG);_Go=r(ndt,"PoolFormerForImageClassification"),ndt.forEach(t),uGo=r(M8e," (PoolFormer model)"),M8e.forEach(t),bGo=i(ge),E2=n(ge,"LI",{});var E8e=s(E2);Hfe=n(E8e,"STRONG",{});var sdt=s(Hfe);vGo=r(sdt,"regnet"),sdt.forEach(t),FGo=r(E8e," \u2014 "),dG=n(E8e,"A",{href:!0});var ldt=s(dG);TGo=r(ldt,"RegNetForImageClassification"),ldt.forEach(t),MGo=r(E8e," (RegNet model)"),E8e.forEach(t),EGo=i(ge),C2=n(ge,"LI",{});var C8e=s(C2);Ufe=n(C8e,"STRONG",{});var idt=s(Ufe);CGo=r(idt,"resnet"),idt.forEach(t),wGo=r(C8e," \u2014 "),cG=n(C8e,"A",{href:!0});var ddt=s(cG);AGo=r(ddt,"ResNetForImageClassification"),ddt.forEach(t),yGo=r(C8e," (ResNet model)"),C8e.forEach(t),LGo=i(ge),w2=n(ge,"LI",{});var w8e=s(w2);Jfe=n(w8e,"STRONG",{});var cdt=s(Jfe);xGo=r(cdt,"segformer"),cdt.forEach(t),kGo=r(w8e," \u2014 "),fG=n(w8e,"A",{href:!0});var fdt=s(fG);SGo=r(fdt,"SegformerForImageClassification"),fdt.forEach(t),RGo=r(w8e," (SegFormer model)"),w8e.forEach(t),BGo=i(ge),A2=n(ge,"LI",{});var A8e=s(A2);Yfe=n(A8e,"STRONG",{});var mdt=s(Yfe);PGo=r(mdt,"swin"),mdt.forEach(t),$Go=r(A8e," \u2014 "),mG=n(A8e,"A",{href:!0});var gdt=s(mG);IGo=r(gdt,"SwinForImageClassification"),gdt.forEach(t),qGo=r(A8e," (Swin model)"),A8e.forEach(t),NGo=i(ge),y2=n(ge,"LI",{});var y8e=s(y2);Kfe=n(y8e,"STRONG",{});var hdt=s(Kfe);jGo=r(hdt,"van"),hdt.forEach(t),DGo=r(y8e," \u2014 "),gG=n(y8e,"A",{href:!0});var pdt=s(gG);GGo=r(pdt,"VanForImageClassification"),pdt.forEach(t),OGo=r(y8e," (VAN model)"),y8e.forEach(t),VGo=i(ge),L2=n(ge,"LI",{});var L8e=s(L2);Zfe=n(L8e,"STRONG",{});var _dt=s(Zfe);XGo=r(_dt,"vit"),_dt.forEach(t),zGo=r(L8e," \u2014 "),hG=n(L8e,"A",{href:!0});var udt=s(hG);QGo=r(udt,"ViTForImageClassification"),udt.forEach(t),WGo=r(L8e," (ViT model)"),L8e.forEach(t),ge.forEach(t),HGo=i(Yt),x2=n(Yt,"P",{});var x8e=s(x2);UGo=r(x8e,"The model is set in evaluation mode by default using "),eme=n(x8e,"CODE",{});var bdt=s(eme);JGo=r(bdt,"model.eval()"),bdt.forEach(t),YGo=r(x8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ome=n(x8e,"CODE",{});var vdt=s(ome);KGo=r(vdt,"model.train()"),vdt.forEach(t),x8e.forEach(t),ZGo=i(Yt),rme=n(Yt,"P",{});var Fdt=s(rme);eOo=r(Fdt,"Examples:"),Fdt.forEach(t),oOo=i(Yt),m(OA.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),PBe=i(c),Bd=n(c,"H2",{class:!0});var V$e=s(Bd);k2=n(V$e,"A",{id:!0,class:!0,href:!0});var Tdt=s(k2);tme=n(Tdt,"SPAN",{});var Mdt=s(tme);m(VA.$$.fragment,Mdt),Mdt.forEach(t),Tdt.forEach(t),rOo=i(V$e),ame=n(V$e,"SPAN",{});var Edt=s(ame);tOo=r(Edt,"AutoModelForVision2Seq"),Edt.forEach(t),V$e.forEach(t),$Be=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(XA.$$.fragment,bl),aOo=i(bl),Pd=n(bl,"P",{});var eJ=s(Pd);nOo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pG=n(eJ,"A",{href:!0});var Cdt=s(pG);sOo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),lOo=r(eJ," class method or the "),_G=n(eJ,"A",{href:!0});var wdt=s(_G);iOo=r(wdt,"from_config()"),wdt.forEach(t),dOo=r(eJ,` class
method.`),eJ.forEach(t),cOo=i(bl),zA=n(bl,"P",{});var X$e=s(zA);fOo=r(X$e,"This class cannot be instantiated directly using "),nme=n(X$e,"CODE",{});var Adt=s(nme);mOo=r(Adt,"__init__()"),Adt.forEach(t),gOo=r(X$e," (throws an error)."),X$e.forEach(t),hOo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(QA.$$.fragment,vl),pOo=i(vl),sme=n(vl,"P",{});var ydt=s(sme);_Oo=r(ydt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ydt.forEach(t),uOo=i(vl),$d=n(vl,"P",{});var oJ=s($d);bOo=r(oJ,`Note:
Loading a model from its configuration file does `),lme=n(oJ,"STRONG",{});var Ldt=s(lme);vOo=r(Ldt,"not"),Ldt.forEach(t),FOo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=n(oJ,"A",{href:!0});var xdt=s(uG);TOo=r(xdt,"from_pretrained()"),xdt.forEach(t),MOo=r(oJ," to load the model weights."),oJ.forEach(t),EOo=i(vl),ime=n(vl,"P",{});var kdt=s(ime);COo=r(kdt,"Examples:"),kdt.forEach(t),wOo=i(vl),m(WA.$$.fragment,vl),vl.forEach(t),AOo=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);m(HA.$$.fragment,Kt),yOo=i(Kt),dme=n(Kt,"P",{});var Sdt=s(dme);LOo=r(Sdt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Sdt.forEach(t),xOo=i(Kt),rn=n(Kt,"P",{});var H3=s(rn);kOo=r(H3,"The model class to instantiate is selected based on the "),cme=n(H3,"CODE",{});var Rdt=s(cme);SOo=r(Rdt,"model_type"),Rdt.forEach(t),ROo=r(H3,` property of the config object (either
passed as an argument or loaded from `),fme=n(H3,"CODE",{});var Bdt=s(fme);BOo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),POo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mme=n(H3,"CODE",{});var Pdt=s(mme);$Oo=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),IOo=r(H3,":"),H3.forEach(t),qOo=i(Kt),gme=n(Kt,"UL",{});var $dt=s(gme);S2=n($dt,"LI",{});var k8e=s(S2);hme=n(k8e,"STRONG",{});var Idt=s(hme);NOo=r(Idt,"vision-encoder-decoder"),Idt.forEach(t),jOo=r(k8e," \u2014 "),bG=n(k8e,"A",{href:!0});var qdt=s(bG);DOo=r(qdt,"VisionEncoderDecoderModel"),qdt.forEach(t),GOo=r(k8e," (Vision Encoder decoder model)"),k8e.forEach(t),$dt.forEach(t),OOo=i(Kt),R2=n(Kt,"P",{});var S8e=s(R2);VOo=r(S8e,"The model is set in evaluation mode by default using "),pme=n(S8e,"CODE",{});var Ndt=s(pme);XOo=r(Ndt,"model.eval()"),Ndt.forEach(t),zOo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(S8e,"CODE",{});var jdt=s(_me);QOo=r(jdt,"model.train()"),jdt.forEach(t),S8e.forEach(t),WOo=i(Kt),ume=n(Kt,"P",{});var Ddt=s(ume);HOo=r(Ddt,"Examples:"),Ddt.forEach(t),UOo=i(Kt),m(UA.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),IBe=i(c),Id=n(c,"H2",{class:!0});var z$e=s(Id);B2=n(z$e,"A",{id:!0,class:!0,href:!0});var Gdt=s(B2);bme=n(Gdt,"SPAN",{});var Odt=s(bme);m(JA.$$.fragment,Odt),Odt.forEach(t),Gdt.forEach(t),JOo=i(z$e),vme=n(z$e,"SPAN",{});var Vdt=s(vme);YOo=r(Vdt,"AutoModelForAudioClassification"),Vdt.forEach(t),z$e.forEach(t),qBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(YA.$$.fragment,Fl),KOo=i(Fl),qd=n(Fl,"P",{});var rJ=s(qd);ZOo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),vG=n(rJ,"A",{href:!0});var Xdt=s(vG);eVo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),oVo=r(rJ," class method or the "),FG=n(rJ,"A",{href:!0});var zdt=s(FG);rVo=r(zdt,"from_config()"),zdt.forEach(t),tVo=r(rJ,` class
method.`),rJ.forEach(t),aVo=i(Fl),KA=n(Fl,"P",{});var Q$e=s(KA);nVo=r(Q$e,"This class cannot be instantiated directly using "),Fme=n(Q$e,"CODE",{});var Qdt=s(Fme);sVo=r(Qdt,"__init__()"),Qdt.forEach(t),lVo=r(Q$e," (throws an error)."),Q$e.forEach(t),iVo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Tl=s(tt);m(ZA.$$.fragment,Tl),dVo=i(Tl),Tme=n(Tl,"P",{});var Wdt=s(Tme);cVo=r(Wdt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Wdt.forEach(t),fVo=i(Tl),Nd=n(Tl,"P",{});var tJ=s(Nd);mVo=r(tJ,`Note:
Loading a model from its configuration file does `),Mme=n(tJ,"STRONG",{});var Hdt=s(Mme);gVo=r(Hdt,"not"),Hdt.forEach(t),hVo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(tJ,"A",{href:!0});var Udt=s(TG);pVo=r(Udt,"from_pretrained()"),Udt.forEach(t),_Vo=r(tJ," to load the model weights."),tJ.forEach(t),uVo=i(Tl),Eme=n(Tl,"P",{});var Jdt=s(Eme);bVo=r(Jdt,"Examples:"),Jdt.forEach(t),vVo=i(Tl),m(e0.$$.fragment,Tl),Tl.forEach(t),FVo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(o0.$$.fragment,Zt),TVo=i(Zt),Cme=n(Zt,"P",{});var Ydt=s(Cme);MVo=r(Ydt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ydt.forEach(t),EVo=i(Zt),tn=n(Zt,"P",{});var U3=s(tn);CVo=r(U3,"The model class to instantiate is selected based on the "),wme=n(U3,"CODE",{});var Kdt=s(wme);wVo=r(Kdt,"model_type"),Kdt.forEach(t),AVo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Ame=n(U3,"CODE",{});var Zdt=s(Ame);yVo=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),LVo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(U3,"CODE",{});var ect=s(yme);xVo=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),kVo=r(U3,":"),U3.forEach(t),SVo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);P2=n(Do,"LI",{});var R8e=s(P2);Lme=n(R8e,"STRONG",{});var oct=s(Lme);RVo=r(oct,"data2vec-audio"),oct.forEach(t),BVo=r(R8e," \u2014 "),MG=n(R8e,"A",{href:!0});var rct=s(MG);PVo=r(rct,"Data2VecAudioForSequenceClassification"),rct.forEach(t),$Vo=r(R8e," (Data2VecAudio model)"),R8e.forEach(t),IVo=i(Do),$2=n(Do,"LI",{});var B8e=s($2);xme=n(B8e,"STRONG",{});var tct=s(xme);qVo=r(tct,"hubert"),tct.forEach(t),NVo=r(B8e," \u2014 "),EG=n(B8e,"A",{href:!0});var act=s(EG);jVo=r(act,"HubertForSequenceClassification"),act.forEach(t),DVo=r(B8e," (Hubert model)"),B8e.forEach(t),GVo=i(Do),I2=n(Do,"LI",{});var P8e=s(I2);kme=n(P8e,"STRONG",{});var nct=s(kme);OVo=r(nct,"sew"),nct.forEach(t),VVo=r(P8e," \u2014 "),CG=n(P8e,"A",{href:!0});var sct=s(CG);XVo=r(sct,"SEWForSequenceClassification"),sct.forEach(t),zVo=r(P8e," (SEW model)"),P8e.forEach(t),QVo=i(Do),q2=n(Do,"LI",{});var $8e=s(q2);Sme=n($8e,"STRONG",{});var lct=s(Sme);WVo=r(lct,"sew-d"),lct.forEach(t),HVo=r($8e," \u2014 "),wG=n($8e,"A",{href:!0});var ict=s(wG);UVo=r(ict,"SEWDForSequenceClassification"),ict.forEach(t),JVo=r($8e," (SEW-D model)"),$8e.forEach(t),YVo=i(Do),N2=n(Do,"LI",{});var I8e=s(N2);Rme=n(I8e,"STRONG",{});var dct=s(Rme);KVo=r(dct,"unispeech"),dct.forEach(t),ZVo=r(I8e," \u2014 "),AG=n(I8e,"A",{href:!0});var cct=s(AG);eXo=r(cct,"UniSpeechForSequenceClassification"),cct.forEach(t),oXo=r(I8e," (UniSpeech model)"),I8e.forEach(t),rXo=i(Do),j2=n(Do,"LI",{});var q8e=s(j2);Bme=n(q8e,"STRONG",{});var fct=s(Bme);tXo=r(fct,"unispeech-sat"),fct.forEach(t),aXo=r(q8e," \u2014 "),yG=n(q8e,"A",{href:!0});var mct=s(yG);nXo=r(mct,"UniSpeechSatForSequenceClassification"),mct.forEach(t),sXo=r(q8e," (UniSpeechSat model)"),q8e.forEach(t),lXo=i(Do),D2=n(Do,"LI",{});var N8e=s(D2);Pme=n(N8e,"STRONG",{});var gct=s(Pme);iXo=r(gct,"wav2vec2"),gct.forEach(t),dXo=r(N8e," \u2014 "),LG=n(N8e,"A",{href:!0});var hct=s(LG);cXo=r(hct,"Wav2Vec2ForSequenceClassification"),hct.forEach(t),fXo=r(N8e," (Wav2Vec2 model)"),N8e.forEach(t),mXo=i(Do),G2=n(Do,"LI",{});var j8e=s(G2);$me=n(j8e,"STRONG",{});var pct=s($me);gXo=r(pct,"wavlm"),pct.forEach(t),hXo=r(j8e," \u2014 "),xG=n(j8e,"A",{href:!0});var _ct=s(xG);pXo=r(_ct,"WavLMForSequenceClassification"),_ct.forEach(t),_Xo=r(j8e," (WavLM model)"),j8e.forEach(t),Do.forEach(t),uXo=i(Zt),O2=n(Zt,"P",{});var D8e=s(O2);bXo=r(D8e,"The model is set in evaluation mode by default using "),Ime=n(D8e,"CODE",{});var uct=s(Ime);vXo=r(uct,"model.eval()"),uct.forEach(t),FXo=r(D8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qme=n(D8e,"CODE",{});var bct=s(qme);TXo=r(bct,"model.train()"),bct.forEach(t),D8e.forEach(t),MXo=i(Zt),Nme=n(Zt,"P",{});var vct=s(Nme);EXo=r(vct,"Examples:"),vct.forEach(t),CXo=i(Zt),m(r0.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),NBe=i(c),jd=n(c,"H2",{class:!0});var W$e=s(jd);V2=n(W$e,"A",{id:!0,class:!0,href:!0});var Fct=s(V2);jme=n(Fct,"SPAN",{});var Tct=s(jme);m(t0.$$.fragment,Tct),Tct.forEach(t),Fct.forEach(t),wXo=i(W$e),Dme=n(W$e,"SPAN",{});var Mct=s(Dme);AXo=r(Mct,"AutoModelForAudioFrameClassification"),Mct.forEach(t),W$e.forEach(t),jBe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);m(a0.$$.fragment,Ml),yXo=i(Ml),Dd=n(Ml,"P",{});var aJ=s(Dd);LXo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),kG=n(aJ,"A",{href:!0});var Ect=s(kG);xXo=r(Ect,"from_pretrained()"),Ect.forEach(t),kXo=r(aJ," class method or the "),SG=n(aJ,"A",{href:!0});var Cct=s(SG);SXo=r(Cct,"from_config()"),Cct.forEach(t),RXo=r(aJ,` class
method.`),aJ.forEach(t),BXo=i(Ml),n0=n(Ml,"P",{});var H$e=s(n0);PXo=r(H$e,"This class cannot be instantiated directly using "),Gme=n(H$e,"CODE",{});var wct=s(Gme);$Xo=r(wct,"__init__()"),wct.forEach(t),IXo=r(H$e," (throws an error)."),H$e.forEach(t),qXo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(s0.$$.fragment,El),NXo=i(El),Ome=n(El,"P",{});var Act=s(Ome);jXo=r(Act,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Act.forEach(t),DXo=i(El),Gd=n(El,"P",{});var nJ=s(Gd);GXo=r(nJ,`Note:
Loading a model from its configuration file does `),Vme=n(nJ,"STRONG",{});var yct=s(Vme);OXo=r(yct,"not"),yct.forEach(t),VXo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RG=n(nJ,"A",{href:!0});var Lct=s(RG);XXo=r(Lct,"from_pretrained()"),Lct.forEach(t),zXo=r(nJ," to load the model weights."),nJ.forEach(t),QXo=i(El),Xme=n(El,"P",{});var xct=s(Xme);WXo=r(xct,"Examples:"),xct.forEach(t),HXo=i(El),m(l0.$$.fragment,El),El.forEach(t),UXo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ea=s(Ye);m(i0.$$.fragment,ea),JXo=i(ea),zme=n(ea,"P",{});var kct=s(zme);YXo=r(kct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kct.forEach(t),KXo=i(ea),an=n(ea,"P",{});var J3=s(an);ZXo=r(J3,"The model class to instantiate is selected based on the "),Qme=n(J3,"CODE",{});var Sct=s(Qme);ezo=r(Sct,"model_type"),Sct.forEach(t),ozo=r(J3,` property of the config object (either
passed as an argument or loaded from `),Wme=n(J3,"CODE",{});var Rct=s(Wme);rzo=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),tzo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(J3,"CODE",{});var Bct=s(Hme);azo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),nzo=r(J3,":"),J3.forEach(t),szo=i(ea),nn=n(ea,"UL",{});var Y3=s(nn);X2=n(Y3,"LI",{});var G8e=s(X2);Ume=n(G8e,"STRONG",{});var Pct=s(Ume);lzo=r(Pct,"data2vec-audio"),Pct.forEach(t),izo=r(G8e," \u2014 "),BG=n(G8e,"A",{href:!0});var $ct=s(BG);dzo=r($ct,"Data2VecAudioForAudioFrameClassification"),$ct.forEach(t),czo=r(G8e," (Data2VecAudio model)"),G8e.forEach(t),fzo=i(Y3),z2=n(Y3,"LI",{});var O8e=s(z2);Jme=n(O8e,"STRONG",{});var Ict=s(Jme);mzo=r(Ict,"unispeech-sat"),Ict.forEach(t),gzo=r(O8e," \u2014 "),PG=n(O8e,"A",{href:!0});var qct=s(PG);hzo=r(qct,"UniSpeechSatForAudioFrameClassification"),qct.forEach(t),pzo=r(O8e," (UniSpeechSat model)"),O8e.forEach(t),_zo=i(Y3),Q2=n(Y3,"LI",{});var V8e=s(Q2);Yme=n(V8e,"STRONG",{});var Nct=s(Yme);uzo=r(Nct,"wav2vec2"),Nct.forEach(t),bzo=r(V8e," \u2014 "),$G=n(V8e,"A",{href:!0});var jct=s($G);vzo=r(jct,"Wav2Vec2ForAudioFrameClassification"),jct.forEach(t),Fzo=r(V8e," (Wav2Vec2 model)"),V8e.forEach(t),Tzo=i(Y3),W2=n(Y3,"LI",{});var X8e=s(W2);Kme=n(X8e,"STRONG",{});var Dct=s(Kme);Mzo=r(Dct,"wavlm"),Dct.forEach(t),Ezo=r(X8e," \u2014 "),IG=n(X8e,"A",{href:!0});var Gct=s(IG);Czo=r(Gct,"WavLMForAudioFrameClassification"),Gct.forEach(t),wzo=r(X8e," (WavLM model)"),X8e.forEach(t),Y3.forEach(t),Azo=i(ea),H2=n(ea,"P",{});var z8e=s(H2);yzo=r(z8e,"The model is set in evaluation mode by default using "),Zme=n(z8e,"CODE",{});var Oct=s(Zme);Lzo=r(Oct,"model.eval()"),Oct.forEach(t),xzo=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=n(z8e,"CODE",{});var Vct=s(ege);kzo=r(Vct,"model.train()"),Vct.forEach(t),z8e.forEach(t),Szo=i(ea),oge=n(ea,"P",{});var Xct=s(oge);Rzo=r(Xct,"Examples:"),Xct.forEach(t),Bzo=i(ea),m(d0.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),DBe=i(c),Od=n(c,"H2",{class:!0});var U$e=s(Od);U2=n(U$e,"A",{id:!0,class:!0,href:!0});var zct=s(U2);rge=n(zct,"SPAN",{});var Qct=s(rge);m(c0.$$.fragment,Qct),Qct.forEach(t),zct.forEach(t),Pzo=i(U$e),tge=n(U$e,"SPAN",{});var Wct=s(tge);$zo=r(Wct,"AutoModelForCTC"),Wct.forEach(t),U$e.forEach(t),GBe=i(c),fr=n(c,"DIV",{class:!0});var Cl=s(fr);m(f0.$$.fragment,Cl),Izo=i(Cl),Vd=n(Cl,"P",{});var sJ=s(Vd);qzo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),qG=n(sJ,"A",{href:!0});var Hct=s(qG);Nzo=r(Hct,"from_pretrained()"),Hct.forEach(t),jzo=r(sJ," class method or the "),NG=n(sJ,"A",{href:!0});var Uct=s(NG);Dzo=r(Uct,"from_config()"),Uct.forEach(t),Gzo=r(sJ,` class
method.`),sJ.forEach(t),Ozo=i(Cl),m0=n(Cl,"P",{});var J$e=s(m0);Vzo=r(J$e,"This class cannot be instantiated directly using "),age=n(J$e,"CODE",{});var Jct=s(age);Xzo=r(Jct,"__init__()"),Jct.forEach(t),zzo=r(J$e," (throws an error)."),J$e.forEach(t),Qzo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(g0.$$.fragment,wl),Wzo=i(wl),nge=n(wl,"P",{});var Yct=s(nge);Hzo=r(Yct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Yct.forEach(t),Uzo=i(wl),Xd=n(wl,"P",{});var lJ=s(Xd);Jzo=r(lJ,`Note:
Loading a model from its configuration file does `),sge=n(lJ,"STRONG",{});var Kct=s(sge);Yzo=r(Kct,"not"),Kct.forEach(t),Kzo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(lJ,"A",{href:!0});var Zct=s(jG);Zzo=r(Zct,"from_pretrained()"),Zct.forEach(t),eQo=r(lJ," to load the model weights."),lJ.forEach(t),oQo=i(wl),lge=n(wl,"P",{});var eft=s(lge);rQo=r(eft,"Examples:"),eft.forEach(t),tQo=i(wl),m(h0.$$.fragment,wl),wl.forEach(t),aQo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var oa=s(Ke);m(p0.$$.fragment,oa),nQo=i(oa),ige=n(oa,"P",{});var oft=s(ige);sQo=r(oft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),oft.forEach(t),lQo=i(oa),sn=n(oa,"P",{});var K3=s(sn);iQo=r(K3,"The model class to instantiate is selected based on the "),dge=n(K3,"CODE",{});var rft=s(dge);dQo=r(rft,"model_type"),rft.forEach(t),cQo=r(K3,` property of the config object (either
passed as an argument or loaded from `),cge=n(K3,"CODE",{});var tft=s(cge);fQo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),mQo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(K3,"CODE",{});var aft=s(fge);gQo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),hQo=r(K3,":"),K3.forEach(t),pQo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);J2=n(Go,"LI",{});var Q8e=s(J2);mge=n(Q8e,"STRONG",{});var nft=s(mge);_Qo=r(nft,"data2vec-audio"),nft.forEach(t),uQo=r(Q8e," \u2014 "),DG=n(Q8e,"A",{href:!0});var sft=s(DG);bQo=r(sft,"Data2VecAudioForCTC"),sft.forEach(t),vQo=r(Q8e," (Data2VecAudio model)"),Q8e.forEach(t),FQo=i(Go),Y2=n(Go,"LI",{});var W8e=s(Y2);gge=n(W8e,"STRONG",{});var lft=s(gge);TQo=r(lft,"hubert"),lft.forEach(t),MQo=r(W8e," \u2014 "),GG=n(W8e,"A",{href:!0});var ift=s(GG);EQo=r(ift,"HubertForCTC"),ift.forEach(t),CQo=r(W8e," (Hubert model)"),W8e.forEach(t),wQo=i(Go),K2=n(Go,"LI",{});var H8e=s(K2);hge=n(H8e,"STRONG",{});var dft=s(hge);AQo=r(dft,"sew"),dft.forEach(t),yQo=r(H8e," \u2014 "),OG=n(H8e,"A",{href:!0});var cft=s(OG);LQo=r(cft,"SEWForCTC"),cft.forEach(t),xQo=r(H8e," (SEW model)"),H8e.forEach(t),kQo=i(Go),Z2=n(Go,"LI",{});var U8e=s(Z2);pge=n(U8e,"STRONG",{});var fft=s(pge);SQo=r(fft,"sew-d"),fft.forEach(t),RQo=r(U8e," \u2014 "),VG=n(U8e,"A",{href:!0});var mft=s(VG);BQo=r(mft,"SEWDForCTC"),mft.forEach(t),PQo=r(U8e," (SEW-D model)"),U8e.forEach(t),$Qo=i(Go),e5=n(Go,"LI",{});var J8e=s(e5);_ge=n(J8e,"STRONG",{});var gft=s(_ge);IQo=r(gft,"unispeech"),gft.forEach(t),qQo=r(J8e," \u2014 "),XG=n(J8e,"A",{href:!0});var hft=s(XG);NQo=r(hft,"UniSpeechForCTC"),hft.forEach(t),jQo=r(J8e," (UniSpeech model)"),J8e.forEach(t),DQo=i(Go),o5=n(Go,"LI",{});var Y8e=s(o5);uge=n(Y8e,"STRONG",{});var pft=s(uge);GQo=r(pft,"unispeech-sat"),pft.forEach(t),OQo=r(Y8e," \u2014 "),zG=n(Y8e,"A",{href:!0});var _ft=s(zG);VQo=r(_ft,"UniSpeechSatForCTC"),_ft.forEach(t),XQo=r(Y8e," (UniSpeechSat model)"),Y8e.forEach(t),zQo=i(Go),r5=n(Go,"LI",{});var K8e=s(r5);bge=n(K8e,"STRONG",{});var uft=s(bge);QQo=r(uft,"wav2vec2"),uft.forEach(t),WQo=r(K8e," \u2014 "),QG=n(K8e,"A",{href:!0});var bft=s(QG);HQo=r(bft,"Wav2Vec2ForCTC"),bft.forEach(t),UQo=r(K8e," (Wav2Vec2 model)"),K8e.forEach(t),JQo=i(Go),t5=n(Go,"LI",{});var Z8e=s(t5);vge=n(Z8e,"STRONG",{});var vft=s(vge);YQo=r(vft,"wavlm"),vft.forEach(t),KQo=r(Z8e," \u2014 "),WG=n(Z8e,"A",{href:!0});var Fft=s(WG);ZQo=r(Fft,"WavLMForCTC"),Fft.forEach(t),eWo=r(Z8e," (WavLM model)"),Z8e.forEach(t),Go.forEach(t),oWo=i(oa),a5=n(oa,"P",{});var e7e=s(a5);rWo=r(e7e,"The model is set in evaluation mode by default using "),Fge=n(e7e,"CODE",{});var Tft=s(Fge);tWo=r(Tft,"model.eval()"),Tft.forEach(t),aWo=r(e7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(e7e,"CODE",{});var Mft=s(Tge);nWo=r(Mft,"model.train()"),Mft.forEach(t),e7e.forEach(t),sWo=i(oa),Mge=n(oa,"P",{});var Eft=s(Mge);lWo=r(Eft,"Examples:"),Eft.forEach(t),iWo=i(oa),m(_0.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),OBe=i(c),zd=n(c,"H2",{class:!0});var Y$e=s(zd);n5=n(Y$e,"A",{id:!0,class:!0,href:!0});var Cft=s(n5);Ege=n(Cft,"SPAN",{});var wft=s(Ege);m(u0.$$.fragment,wft),wft.forEach(t),Cft.forEach(t),dWo=i(Y$e),Cge=n(Y$e,"SPAN",{});var Aft=s(Cge);cWo=r(Aft,"AutoModelForSpeechSeq2Seq"),Aft.forEach(t),Y$e.forEach(t),VBe=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);m(b0.$$.fragment,Al),fWo=i(Al),Qd=n(Al,"P",{});var iJ=s(Qd);mWo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HG=n(iJ,"A",{href:!0});var yft=s(HG);gWo=r(yft,"from_pretrained()"),yft.forEach(t),hWo=r(iJ," class method or the "),UG=n(iJ,"A",{href:!0});var Lft=s(UG);pWo=r(Lft,"from_config()"),Lft.forEach(t),_Wo=r(iJ,` class
method.`),iJ.forEach(t),uWo=i(Al),v0=n(Al,"P",{});var K$e=s(v0);bWo=r(K$e,"This class cannot be instantiated directly using "),wge=n(K$e,"CODE",{});var xft=s(wge);vWo=r(xft,"__init__()"),xft.forEach(t),FWo=r(K$e," (throws an error)."),K$e.forEach(t),TWo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(F0.$$.fragment,yl),MWo=i(yl),Age=n(yl,"P",{});var kft=s(Age);EWo=r(kft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),kft.forEach(t),CWo=i(yl),Wd=n(yl,"P",{});var dJ=s(Wd);wWo=r(dJ,`Note:
Loading a model from its configuration file does `),yge=n(dJ,"STRONG",{});var Sft=s(yge);AWo=r(Sft,"not"),Sft.forEach(t),yWo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(dJ,"A",{href:!0});var Rft=s(JG);LWo=r(Rft,"from_pretrained()"),Rft.forEach(t),xWo=r(dJ," to load the model weights."),dJ.forEach(t),kWo=i(yl),Lge=n(yl,"P",{});var Bft=s(Lge);SWo=r(Bft,"Examples:"),Bft.forEach(t),RWo=i(yl),m(T0.$$.fragment,yl),yl.forEach(t),BWo=i(Al),Ze=n(Al,"DIV",{class:!0});var ra=s(Ze);m(M0.$$.fragment,ra),PWo=i(ra),xge=n(ra,"P",{});var Pft=s(xge);$Wo=r(Pft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pft.forEach(t),IWo=i(ra),ln=n(ra,"P",{});var Z3=s(ln);qWo=r(Z3,"The model class to instantiate is selected based on the "),kge=n(Z3,"CODE",{});var $ft=s(kge);NWo=r($ft,"model_type"),$ft.forEach(t),jWo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),Sge=n(Z3,"CODE",{});var Ift=s(Sge);DWo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),GWo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(Z3,"CODE",{});var qft=s(Rge);OWo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),VWo=r(Z3,":"),Z3.forEach(t),XWo=i(ra),E0=n(ra,"UL",{});var Z$e=s(E0);s5=n(Z$e,"LI",{});var o7e=s(s5);Bge=n(o7e,"STRONG",{});var Nft=s(Bge);zWo=r(Nft,"speech-encoder-decoder"),Nft.forEach(t),QWo=r(o7e," \u2014 "),YG=n(o7e,"A",{href:!0});var jft=s(YG);WWo=r(jft,"SpeechEncoderDecoderModel"),jft.forEach(t),HWo=r(o7e," (Speech Encoder decoder model)"),o7e.forEach(t),UWo=i(Z$e),l5=n(Z$e,"LI",{});var r7e=s(l5);Pge=n(r7e,"STRONG",{});var Dft=s(Pge);JWo=r(Dft,"speech_to_text"),Dft.forEach(t),YWo=r(r7e," \u2014 "),KG=n(r7e,"A",{href:!0});var Gft=s(KG);KWo=r(Gft,"Speech2TextForConditionalGeneration"),Gft.forEach(t),ZWo=r(r7e," (Speech2Text model)"),r7e.forEach(t),Z$e.forEach(t),eHo=i(ra),i5=n(ra,"P",{});var t7e=s(i5);oHo=r(t7e,"The model is set in evaluation mode by default using "),$ge=n(t7e,"CODE",{});var Oft=s($ge);rHo=r(Oft,"model.eval()"),Oft.forEach(t),tHo=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(t7e,"CODE",{});var Vft=s(Ige);aHo=r(Vft,"model.train()"),Vft.forEach(t),t7e.forEach(t),nHo=i(ra),qge=n(ra,"P",{});var Xft=s(qge);sHo=r(Xft,"Examples:"),Xft.forEach(t),lHo=i(ra),m(C0.$$.fragment,ra),ra.forEach(t),Al.forEach(t),XBe=i(c),Hd=n(c,"H2",{class:!0});var eIe=s(Hd);d5=n(eIe,"A",{id:!0,class:!0,href:!0});var zft=s(d5);Nge=n(zft,"SPAN",{});var Qft=s(Nge);m(w0.$$.fragment,Qft),Qft.forEach(t),zft.forEach(t),iHo=i(eIe),jge=n(eIe,"SPAN",{});var Wft=s(jge);dHo=r(Wft,"AutoModelForAudioXVector"),Wft.forEach(t),eIe.forEach(t),zBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(A0.$$.fragment,Ll),cHo=i(Ll),Ud=n(Ll,"P",{});var cJ=s(Ud);fHo=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),ZG=n(cJ,"A",{href:!0});var Hft=s(ZG);mHo=r(Hft,"from_pretrained()"),Hft.forEach(t),gHo=r(cJ," class method or the "),eO=n(cJ,"A",{href:!0});var Uft=s(eO);hHo=r(Uft,"from_config()"),Uft.forEach(t),pHo=r(cJ,` class
method.`),cJ.forEach(t),_Ho=i(Ll),y0=n(Ll,"P",{});var oIe=s(y0);uHo=r(oIe,"This class cannot be instantiated directly using "),Dge=n(oIe,"CODE",{});var Jft=s(Dge);bHo=r(Jft,"__init__()"),Jft.forEach(t),vHo=r(oIe," (throws an error)."),oIe.forEach(t),FHo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(L0.$$.fragment,xl),THo=i(xl),Gge=n(xl,"P",{});var Yft=s(Gge);MHo=r(Yft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Yft.forEach(t),EHo=i(xl),Jd=n(xl,"P",{});var fJ=s(Jd);CHo=r(fJ,`Note:
Loading a model from its configuration file does `),Oge=n(fJ,"STRONG",{});var Kft=s(Oge);wHo=r(Kft,"not"),Kft.forEach(t),AHo=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=n(fJ,"A",{href:!0});var Zft=s(oO);yHo=r(Zft,"from_pretrained()"),Zft.forEach(t),LHo=r(fJ," to load the model weights."),fJ.forEach(t),xHo=i(xl),Vge=n(xl,"P",{});var emt=s(Vge);kHo=r(emt,"Examples:"),emt.forEach(t),SHo=i(xl),m(x0.$$.fragment,xl),xl.forEach(t),RHo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);m(k0.$$.fragment,ta),BHo=i(ta),Xge=n(ta,"P",{});var omt=s(Xge);PHo=r(omt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),omt.forEach(t),$Ho=i(ta),dn=n(ta,"P",{});var eC=s(dn);IHo=r(eC,"The model class to instantiate is selected based on the "),zge=n(eC,"CODE",{});var rmt=s(zge);qHo=r(rmt,"model_type"),rmt.forEach(t),NHo=r(eC,` property of the config object (either
passed as an argument or loaded from `),Qge=n(eC,"CODE",{});var tmt=s(Qge);jHo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),DHo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(eC,"CODE",{});var amt=s(Wge);GHo=r(amt,"pretrained_model_name_or_path"),amt.forEach(t),OHo=r(eC,":"),eC.forEach(t),VHo=i(ta),cn=n(ta,"UL",{});var oC=s(cn);c5=n(oC,"LI",{});var a7e=s(c5);Hge=n(a7e,"STRONG",{});var nmt=s(Hge);XHo=r(nmt,"data2vec-audio"),nmt.forEach(t),zHo=r(a7e," \u2014 "),rO=n(a7e,"A",{href:!0});var smt=s(rO);QHo=r(smt,"Data2VecAudioForXVector"),smt.forEach(t),WHo=r(a7e," (Data2VecAudio model)"),a7e.forEach(t),HHo=i(oC),f5=n(oC,"LI",{});var n7e=s(f5);Uge=n(n7e,"STRONG",{});var lmt=s(Uge);UHo=r(lmt,"unispeech-sat"),lmt.forEach(t),JHo=r(n7e," \u2014 "),tO=n(n7e,"A",{href:!0});var imt=s(tO);YHo=r(imt,"UniSpeechSatForXVector"),imt.forEach(t),KHo=r(n7e," (UniSpeechSat model)"),n7e.forEach(t),ZHo=i(oC),m5=n(oC,"LI",{});var s7e=s(m5);Jge=n(s7e,"STRONG",{});var dmt=s(Jge);eUo=r(dmt,"wav2vec2"),dmt.forEach(t),oUo=r(s7e," \u2014 "),aO=n(s7e,"A",{href:!0});var cmt=s(aO);rUo=r(cmt,"Wav2Vec2ForXVector"),cmt.forEach(t),tUo=r(s7e," (Wav2Vec2 model)"),s7e.forEach(t),aUo=i(oC),g5=n(oC,"LI",{});var l7e=s(g5);Yge=n(l7e,"STRONG",{});var fmt=s(Yge);nUo=r(fmt,"wavlm"),fmt.forEach(t),sUo=r(l7e," \u2014 "),nO=n(l7e,"A",{href:!0});var mmt=s(nO);lUo=r(mmt,"WavLMForXVector"),mmt.forEach(t),iUo=r(l7e," (WavLM model)"),l7e.forEach(t),oC.forEach(t),dUo=i(ta),h5=n(ta,"P",{});var i7e=s(h5);cUo=r(i7e,"The model is set in evaluation mode by default using "),Kge=n(i7e,"CODE",{});var gmt=s(Kge);fUo=r(gmt,"model.eval()"),gmt.forEach(t),mUo=r(i7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zge=n(i7e,"CODE",{});var hmt=s(Zge);gUo=r(hmt,"model.train()"),hmt.forEach(t),i7e.forEach(t),hUo=i(ta),ehe=n(ta,"P",{});var pmt=s(ehe);pUo=r(pmt,"Examples:"),pmt.forEach(t),_Uo=i(ta),m(S0.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),QBe=i(c),Yd=n(c,"H2",{class:!0});var rIe=s(Yd);p5=n(rIe,"A",{id:!0,class:!0,href:!0});var _mt=s(p5);ohe=n(_mt,"SPAN",{});var umt=s(ohe);m(R0.$$.fragment,umt),umt.forEach(t),_mt.forEach(t),uUo=i(rIe),rhe=n(rIe,"SPAN",{});var bmt=s(rhe);bUo=r(bmt,"AutoModelForMaskedImageModeling"),bmt.forEach(t),rIe.forEach(t),WBe=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);m(B0.$$.fragment,kl),vUo=i(kl),Kd=n(kl,"P",{});var mJ=s(Kd);FUo=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sO=n(mJ,"A",{href:!0});var vmt=s(sO);TUo=r(vmt,"from_pretrained()"),vmt.forEach(t),MUo=r(mJ," class method or the "),lO=n(mJ,"A",{href:!0});var Fmt=s(lO);EUo=r(Fmt,"from_config()"),Fmt.forEach(t),CUo=r(mJ,` class
method.`),mJ.forEach(t),wUo=i(kl),P0=n(kl,"P",{});var tIe=s(P0);AUo=r(tIe,"This class cannot be instantiated directly using "),the=n(tIe,"CODE",{});var Tmt=s(the);yUo=r(Tmt,"__init__()"),Tmt.forEach(t),LUo=r(tIe," (throws an error)."),tIe.forEach(t),xUo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m($0.$$.fragment,Sl),kUo=i(Sl),ahe=n(Sl,"P",{});var Mmt=s(ahe);SUo=r(Mmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Mmt.forEach(t),RUo=i(Sl),Zd=n(Sl,"P",{});var gJ=s(Zd);BUo=r(gJ,`Note:
Loading a model from its configuration file does `),nhe=n(gJ,"STRONG",{});var Emt=s(nhe);PUo=r(Emt,"not"),Emt.forEach(t),$Uo=r(gJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(gJ,"A",{href:!0});var Cmt=s(iO);IUo=r(Cmt,"from_pretrained()"),Cmt.forEach(t),qUo=r(gJ," to load the model weights."),gJ.forEach(t),NUo=i(Sl),she=n(Sl,"P",{});var wmt=s(she);jUo=r(wmt,"Examples:"),wmt.forEach(t),DUo=i(Sl),m(I0.$$.fragment,Sl),Sl.forEach(t),GUo=i(kl),oo=n(kl,"DIV",{class:!0});var aa=s(oo);m(q0.$$.fragment,aa),OUo=i(aa),lhe=n(aa,"P",{});var Amt=s(lhe);VUo=r(Amt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Amt.forEach(t),XUo=i(aa),fn=n(aa,"P",{});var rC=s(fn);zUo=r(rC,"The model class to instantiate is selected based on the "),ihe=n(rC,"CODE",{});var ymt=s(ihe);QUo=r(ymt,"model_type"),ymt.forEach(t),WUo=r(rC,` property of the config object (either
passed as an argument or loaded from `),dhe=n(rC,"CODE",{});var Lmt=s(dhe);HUo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),UUo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),che=n(rC,"CODE",{});var xmt=s(che);JUo=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),YUo=r(rC,":"),rC.forEach(t),KUo=i(aa),ec=n(aa,"UL",{});var hJ=s(ec);_5=n(hJ,"LI",{});var d7e=s(_5);fhe=n(d7e,"STRONG",{});var kmt=s(fhe);ZUo=r(kmt,"deit"),kmt.forEach(t),eJo=r(d7e," \u2014 "),dO=n(d7e,"A",{href:!0});var Smt=s(dO);oJo=r(Smt,"DeiTForMaskedImageModeling"),Smt.forEach(t),rJo=r(d7e," (DeiT model)"),d7e.forEach(t),tJo=i(hJ),u5=n(hJ,"LI",{});var c7e=s(u5);mhe=n(c7e,"STRONG",{});var Rmt=s(mhe);aJo=r(Rmt,"swin"),Rmt.forEach(t),nJo=r(c7e," \u2014 "),cO=n(c7e,"A",{href:!0});var Bmt=s(cO);sJo=r(Bmt,"SwinForMaskedImageModeling"),Bmt.forEach(t),lJo=r(c7e," (Swin model)"),c7e.forEach(t),iJo=i(hJ),b5=n(hJ,"LI",{});var f7e=s(b5);ghe=n(f7e,"STRONG",{});var Pmt=s(ghe);dJo=r(Pmt,"vit"),Pmt.forEach(t),cJo=r(f7e," \u2014 "),fO=n(f7e,"A",{href:!0});var $mt=s(fO);fJo=r($mt,"ViTForMaskedImageModeling"),$mt.forEach(t),mJo=r(f7e," (ViT model)"),f7e.forEach(t),hJ.forEach(t),gJo=i(aa),v5=n(aa,"P",{});var m7e=s(v5);hJo=r(m7e,"The model is set in evaluation mode by default using "),hhe=n(m7e,"CODE",{});var Imt=s(hhe);pJo=r(Imt,"model.eval()"),Imt.forEach(t),_Jo=r(m7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n(m7e,"CODE",{});var qmt=s(phe);uJo=r(qmt,"model.train()"),qmt.forEach(t),m7e.forEach(t),bJo=i(aa),_he=n(aa,"P",{});var Nmt=s(_he);vJo=r(Nmt,"Examples:"),Nmt.forEach(t),FJo=i(aa),m(N0.$$.fragment,aa),aa.forEach(t),kl.forEach(t),HBe=i(c),oc=n(c,"H2",{class:!0});var aIe=s(oc);F5=n(aIe,"A",{id:!0,class:!0,href:!0});var jmt=s(F5);uhe=n(jmt,"SPAN",{});var Dmt=s(uhe);m(j0.$$.fragment,Dmt),Dmt.forEach(t),jmt.forEach(t),TJo=i(aIe),bhe=n(aIe,"SPAN",{});var Gmt=s(bhe);MJo=r(Gmt,"AutoModelForObjectDetection"),Gmt.forEach(t),aIe.forEach(t),UBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(D0.$$.fragment,Rl),EJo=i(Rl),rc=n(Rl,"P",{});var pJ=s(rc);CJo=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mO=n(pJ,"A",{href:!0});var Omt=s(mO);wJo=r(Omt,"from_pretrained()"),Omt.forEach(t),AJo=r(pJ," class method or the "),gO=n(pJ,"A",{href:!0});var Vmt=s(gO);yJo=r(Vmt,"from_config()"),Vmt.forEach(t),LJo=r(pJ,` class
method.`),pJ.forEach(t),xJo=i(Rl),G0=n(Rl,"P",{});var nIe=s(G0);kJo=r(nIe,"This class cannot be instantiated directly using "),vhe=n(nIe,"CODE",{});var Xmt=s(vhe);SJo=r(Xmt,"__init__()"),Xmt.forEach(t),RJo=r(nIe," (throws an error)."),nIe.forEach(t),BJo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m(O0.$$.fragment,Bl),PJo=i(Bl),Fhe=n(Bl,"P",{});var zmt=s(Fhe);$Jo=r(zmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zmt.forEach(t),IJo=i(Bl),tc=n(Bl,"P",{});var _J=s(tc);qJo=r(_J,`Note:
Loading a model from its configuration file does `),The=n(_J,"STRONG",{});var Qmt=s(The);NJo=r(Qmt,"not"),Qmt.forEach(t),jJo=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(_J,"A",{href:!0});var Wmt=s(hO);DJo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),GJo=r(_J," to load the model weights."),_J.forEach(t),OJo=i(Bl),Mhe=n(Bl,"P",{});var Hmt=s(Mhe);VJo=r(Hmt,"Examples:"),Hmt.forEach(t),XJo=i(Bl),m(V0.$$.fragment,Bl),Bl.forEach(t),zJo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);m(X0.$$.fragment,na),QJo=i(na),Ehe=n(na,"P",{});var Umt=s(Ehe);WJo=r(Umt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Umt.forEach(t),HJo=i(na),mn=n(na,"P",{});var tC=s(mn);UJo=r(tC,"The model class to instantiate is selected based on the "),Che=n(tC,"CODE",{});var Jmt=s(Che);JJo=r(Jmt,"model_type"),Jmt.forEach(t),YJo=r(tC,` property of the config object (either
passed as an argument or loaded from `),whe=n(tC,"CODE",{});var Ymt=s(whe);KJo=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),ZJo=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(tC,"CODE",{});var Kmt=s(Ahe);eYo=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),oYo=r(tC,":"),tC.forEach(t),rYo=i(na),yhe=n(na,"UL",{});var Zmt=s(yhe);T5=n(Zmt,"LI",{});var g7e=s(T5);Lhe=n(g7e,"STRONG",{});var egt=s(Lhe);tYo=r(egt,"detr"),egt.forEach(t),aYo=r(g7e," \u2014 "),pO=n(g7e,"A",{href:!0});var ogt=s(pO);nYo=r(ogt,"DetrForObjectDetection"),ogt.forEach(t),sYo=r(g7e," (DETR model)"),g7e.forEach(t),Zmt.forEach(t),lYo=i(na),M5=n(na,"P",{});var h7e=s(M5);iYo=r(h7e,"The model is set in evaluation mode by default using "),xhe=n(h7e,"CODE",{});var rgt=s(xhe);dYo=r(rgt,"model.eval()"),rgt.forEach(t),cYo=r(h7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(h7e,"CODE",{});var tgt=s(khe);fYo=r(tgt,"model.train()"),tgt.forEach(t),h7e.forEach(t),mYo=i(na),She=n(na,"P",{});var agt=s(She);gYo=r(agt,"Examples:"),agt.forEach(t),hYo=i(na),m(z0.$$.fragment,na),na.forEach(t),Rl.forEach(t),JBe=i(c),ac=n(c,"H2",{class:!0});var sIe=s(ac);E5=n(sIe,"A",{id:!0,class:!0,href:!0});var ngt=s(E5);Rhe=n(ngt,"SPAN",{});var sgt=s(Rhe);m(Q0.$$.fragment,sgt),sgt.forEach(t),ngt.forEach(t),pYo=i(sIe),Bhe=n(sIe,"SPAN",{});var lgt=s(Bhe);_Yo=r(lgt,"AutoModelForImageSegmentation"),lgt.forEach(t),sIe.forEach(t),YBe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(W0.$$.fragment,Pl),uYo=i(Pl),nc=n(Pl,"P",{});var uJ=s(nc);bYo=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_O=n(uJ,"A",{href:!0});var igt=s(_O);vYo=r(igt,"from_pretrained()"),igt.forEach(t),FYo=r(uJ," class method or the "),uO=n(uJ,"A",{href:!0});var dgt=s(uO);TYo=r(dgt,"from_config()"),dgt.forEach(t),MYo=r(uJ,` class
method.`),uJ.forEach(t),EYo=i(Pl),H0=n(Pl,"P",{});var lIe=s(H0);CYo=r(lIe,"This class cannot be instantiated directly using "),Phe=n(lIe,"CODE",{});var cgt=s(Phe);wYo=r(cgt,"__init__()"),cgt.forEach(t),AYo=r(lIe," (throws an error)."),lIe.forEach(t),yYo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(U0.$$.fragment,$l),LYo=i($l),$he=n($l,"P",{});var fgt=s($he);xYo=r(fgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),fgt.forEach(t),kYo=i($l),sc=n($l,"P",{});var bJ=s(sc);SYo=r(bJ,`Note:
Loading a model from its configuration file does `),Ihe=n(bJ,"STRONG",{});var mgt=s(Ihe);RYo=r(mgt,"not"),mgt.forEach(t),BYo=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(bJ,"A",{href:!0});var ggt=s(bO);PYo=r(ggt,"from_pretrained()"),ggt.forEach(t),$Yo=r(bJ," to load the model weights."),bJ.forEach(t),IYo=i($l),qhe=n($l,"P",{});var hgt=s(qhe);qYo=r(hgt,"Examples:"),hgt.forEach(t),NYo=i($l),m(J0.$$.fragment,$l),$l.forEach(t),jYo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);m(Y0.$$.fragment,sa),DYo=i(sa),Nhe=n(sa,"P",{});var pgt=s(Nhe);GYo=r(pgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pgt.forEach(t),OYo=i(sa),gn=n(sa,"P",{});var aC=s(gn);VYo=r(aC,"The model class to instantiate is selected based on the "),jhe=n(aC,"CODE",{});var _gt=s(jhe);XYo=r(_gt,"model_type"),_gt.forEach(t),zYo=r(aC,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(aC,"CODE",{});var ugt=s(Dhe);QYo=r(ugt,"pretrained_model_name_or_path"),ugt.forEach(t),WYo=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(aC,"CODE",{});var bgt=s(Ghe);HYo=r(bgt,"pretrained_model_name_or_path"),bgt.forEach(t),UYo=r(aC,":"),aC.forEach(t),JYo=i(sa),Ohe=n(sa,"UL",{});var vgt=s(Ohe);C5=n(vgt,"LI",{});var p7e=s(C5);Vhe=n(p7e,"STRONG",{});var Fgt=s(Vhe);YYo=r(Fgt,"detr"),Fgt.forEach(t),KYo=r(p7e," \u2014 "),vO=n(p7e,"A",{href:!0});var Tgt=s(vO);ZYo=r(Tgt,"DetrForSegmentation"),Tgt.forEach(t),eKo=r(p7e," (DETR model)"),p7e.forEach(t),vgt.forEach(t),oKo=i(sa),w5=n(sa,"P",{});var _7e=s(w5);rKo=r(_7e,"The model is set in evaluation mode by default using "),Xhe=n(_7e,"CODE",{});var Mgt=s(Xhe);tKo=r(Mgt,"model.eval()"),Mgt.forEach(t),aKo=r(_7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zhe=n(_7e,"CODE",{});var Egt=s(zhe);nKo=r(Egt,"model.train()"),Egt.forEach(t),_7e.forEach(t),sKo=i(sa),Qhe=n(sa,"P",{});var Cgt=s(Qhe);lKo=r(Cgt,"Examples:"),Cgt.forEach(t),iKo=i(sa),m(K0.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),KBe=i(c),lc=n(c,"H2",{class:!0});var iIe=s(lc);A5=n(iIe,"A",{id:!0,class:!0,href:!0});var wgt=s(A5);Whe=n(wgt,"SPAN",{});var Agt=s(Whe);m(Z0.$$.fragment,Agt),Agt.forEach(t),wgt.forEach(t),dKo=i(iIe),Hhe=n(iIe,"SPAN",{});var ygt=s(Hhe);cKo=r(ygt,"AutoModelForSemanticSegmentation"),ygt.forEach(t),iIe.forEach(t),ZBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(ey.$$.fragment,Il),fKo=i(Il),ic=n(Il,"P",{});var vJ=s(ic);mKo=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),FO=n(vJ,"A",{href:!0});var Lgt=s(FO);gKo=r(Lgt,"from_pretrained()"),Lgt.forEach(t),hKo=r(vJ," class method or the "),TO=n(vJ,"A",{href:!0});var xgt=s(TO);pKo=r(xgt,"from_config()"),xgt.forEach(t),_Ko=r(vJ,` class
method.`),vJ.forEach(t),uKo=i(Il),oy=n(Il,"P",{});var dIe=s(oy);bKo=r(dIe,"This class cannot be instantiated directly using "),Uhe=n(dIe,"CODE",{});var kgt=s(Uhe);vKo=r(kgt,"__init__()"),kgt.forEach(t),FKo=r(dIe," (throws an error)."),dIe.forEach(t),TKo=i(Il),ft=n(Il,"DIV",{class:!0});var ql=s(ft);m(ry.$$.fragment,ql),MKo=i(ql),Jhe=n(ql,"P",{});var Sgt=s(Jhe);EKo=r(Sgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Sgt.forEach(t),CKo=i(ql),dc=n(ql,"P",{});var FJ=s(dc);wKo=r(FJ,`Note:
Loading a model from its configuration file does `),Yhe=n(FJ,"STRONG",{});var Rgt=s(Yhe);AKo=r(Rgt,"not"),Rgt.forEach(t),yKo=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(FJ,"A",{href:!0});var Bgt=s(MO);LKo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),xKo=r(FJ," to load the model weights."),FJ.forEach(t),kKo=i(ql),Khe=n(ql,"P",{});var Pgt=s(Khe);SKo=r(Pgt,"Examples:"),Pgt.forEach(t),RKo=i(ql),m(ty.$$.fragment,ql),ql.forEach(t),BKo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);m(ay.$$.fragment,la),PKo=i(la),Zhe=n(la,"P",{});var $gt=s(Zhe);$Ko=r($gt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$gt.forEach(t),IKo=i(la),hn=n(la,"P",{});var nC=s(hn);qKo=r(nC,"The model class to instantiate is selected based on the "),epe=n(nC,"CODE",{});var Igt=s(epe);NKo=r(Igt,"model_type"),Igt.forEach(t),jKo=r(nC,` property of the config object (either
passed as an argument or loaded from `),ope=n(nC,"CODE",{});var qgt=s(ope);DKo=r(qgt,"pretrained_model_name_or_path"),qgt.forEach(t),GKo=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rpe=n(nC,"CODE",{});var Ngt=s(rpe);OKo=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),VKo=r(nC,":"),nC.forEach(t),XKo=i(la),pn=n(la,"UL",{});var sC=s(pn);y5=n(sC,"LI",{});var u7e=s(y5);tpe=n(u7e,"STRONG",{});var jgt=s(tpe);zKo=r(jgt,"beit"),jgt.forEach(t),QKo=r(u7e," \u2014 "),EO=n(u7e,"A",{href:!0});var Dgt=s(EO);WKo=r(Dgt,"BeitForSemanticSegmentation"),Dgt.forEach(t),HKo=r(u7e," (BEiT model)"),u7e.forEach(t),UKo=i(sC),L5=n(sC,"LI",{});var b7e=s(L5);ape=n(b7e,"STRONG",{});var Ggt=s(ape);JKo=r(Ggt,"data2vec-vision"),Ggt.forEach(t),YKo=r(b7e," \u2014 "),CO=n(b7e,"A",{href:!0});var Ogt=s(CO);KKo=r(Ogt,"Data2VecVisionForSemanticSegmentation"),Ogt.forEach(t),ZKo=r(b7e," (Data2VecVision model)"),b7e.forEach(t),eZo=i(sC),x5=n(sC,"LI",{});var v7e=s(x5);npe=n(v7e,"STRONG",{});var Vgt=s(npe);oZo=r(Vgt,"dpt"),Vgt.forEach(t),rZo=r(v7e," \u2014 "),wO=n(v7e,"A",{href:!0});var Xgt=s(wO);tZo=r(Xgt,"DPTForSemanticSegmentation"),Xgt.forEach(t),aZo=r(v7e," (DPT model)"),v7e.forEach(t),nZo=i(sC),k5=n(sC,"LI",{});var F7e=s(k5);spe=n(F7e,"STRONG",{});var zgt=s(spe);sZo=r(zgt,"segformer"),zgt.forEach(t),lZo=r(F7e," \u2014 "),AO=n(F7e,"A",{href:!0});var Qgt=s(AO);iZo=r(Qgt,"SegformerForSemanticSegmentation"),Qgt.forEach(t),dZo=r(F7e," (SegFormer model)"),F7e.forEach(t),sC.forEach(t),cZo=i(la),S5=n(la,"P",{});var T7e=s(S5);fZo=r(T7e,"The model is set in evaluation mode by default using "),lpe=n(T7e,"CODE",{});var Wgt=s(lpe);mZo=r(Wgt,"model.eval()"),Wgt.forEach(t),gZo=r(T7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ipe=n(T7e,"CODE",{});var Hgt=s(ipe);hZo=r(Hgt,"model.train()"),Hgt.forEach(t),T7e.forEach(t),pZo=i(la),dpe=n(la,"P",{});var Ugt=s(dpe);_Zo=r(Ugt,"Examples:"),Ugt.forEach(t),uZo=i(la),m(ny.$$.fragment,la),la.forEach(t),Il.forEach(t),ePe=i(c),cc=n(c,"H2",{class:!0});var cIe=s(cc);R5=n(cIe,"A",{id:!0,class:!0,href:!0});var Jgt=s(R5);cpe=n(Jgt,"SPAN",{});var Ygt=s(cpe);m(sy.$$.fragment,Ygt),Ygt.forEach(t),Jgt.forEach(t),bZo=i(cIe),fpe=n(cIe,"SPAN",{});var Kgt=s(fpe);vZo=r(Kgt,"AutoModelForInstanceSegmentation"),Kgt.forEach(t),cIe.forEach(t),oPe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(ly.$$.fragment,Nl),FZo=i(Nl),fc=n(Nl,"P",{});var TJ=s(fc);TZo=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yO=n(TJ,"A",{href:!0});var Zgt=s(yO);MZo=r(Zgt,"from_pretrained()"),Zgt.forEach(t),EZo=r(TJ," class method or the "),LO=n(TJ,"A",{href:!0});var eht=s(LO);CZo=r(eht,"from_config()"),eht.forEach(t),wZo=r(TJ,` class
method.`),TJ.forEach(t),AZo=i(Nl),iy=n(Nl,"P",{});var fIe=s(iy);yZo=r(fIe,"This class cannot be instantiated directly using "),mpe=n(fIe,"CODE",{});var oht=s(mpe);LZo=r(oht,"__init__()"),oht.forEach(t),xZo=r(fIe," (throws an error)."),fIe.forEach(t),kZo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(dy.$$.fragment,jl),SZo=i(jl),gpe=n(jl,"P",{});var rht=s(gpe);RZo=r(rht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),rht.forEach(t),BZo=i(jl),mc=n(jl,"P",{});var MJ=s(mc);PZo=r(MJ,`Note:
Loading a model from its configuration file does `),hpe=n(MJ,"STRONG",{});var tht=s(hpe);$Zo=r(tht,"not"),tht.forEach(t),IZo=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(MJ,"A",{href:!0});var aht=s(xO);qZo=r(aht,"from_pretrained()"),aht.forEach(t),NZo=r(MJ," to load the model weights."),MJ.forEach(t),jZo=i(jl),ppe=n(jl,"P",{});var nht=s(ppe);DZo=r(nht,"Examples:"),nht.forEach(t),GZo=i(jl),m(cy.$$.fragment,jl),jl.forEach(t),OZo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(fy.$$.fragment,ia),VZo=i(ia),_pe=n(ia,"P",{});var sht=s(_pe);XZo=r(sht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),sht.forEach(t),zZo=i(ia),_n=n(ia,"P",{});var lC=s(_n);QZo=r(lC,"The model class to instantiate is selected based on the "),upe=n(lC,"CODE",{});var lht=s(upe);WZo=r(lht,"model_type"),lht.forEach(t),HZo=r(lC,` property of the config object (either
passed as an argument or loaded from `),bpe=n(lC,"CODE",{});var iht=s(bpe);UZo=r(iht,"pretrained_model_name_or_path"),iht.forEach(t),JZo=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vpe=n(lC,"CODE",{});var dht=s(vpe);YZo=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),KZo=r(lC,":"),lC.forEach(t),ZZo=i(ia),Fpe=n(ia,"UL",{});var cht=s(Fpe);B5=n(cht,"LI",{});var M7e=s(B5);Tpe=n(M7e,"STRONG",{});var fht=s(Tpe);eer=r(fht,"maskformer"),fht.forEach(t),oer=r(M7e," \u2014 "),kO=n(M7e,"A",{href:!0});var mht=s(kO);rer=r(mht,"MaskFormerForInstanceSegmentation"),mht.forEach(t),ter=r(M7e," (MaskFormer model)"),M7e.forEach(t),cht.forEach(t),aer=i(ia),P5=n(ia,"P",{});var E7e=s(P5);ner=r(E7e,"The model is set in evaluation mode by default using "),Mpe=n(E7e,"CODE",{});var ght=s(Mpe);ser=r(ght,"model.eval()"),ght.forEach(t),ler=r(E7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=n(E7e,"CODE",{});var hht=s(Epe);ier=r(hht,"model.train()"),hht.forEach(t),E7e.forEach(t),der=i(ia),Cpe=n(ia,"P",{});var pht=s(Cpe);cer=r(pht,"Examples:"),pht.forEach(t),fer=i(ia),m(my.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),rPe=i(c),gc=n(c,"H2",{class:!0});var mIe=s(gc);$5=n(mIe,"A",{id:!0,class:!0,href:!0});var _ht=s($5);wpe=n(_ht,"SPAN",{});var uht=s(wpe);m(gy.$$.fragment,uht),uht.forEach(t),_ht.forEach(t),mer=i(mIe),Ape=n(mIe,"SPAN",{});var bht=s(Ape);ger=r(bht,"TFAutoModel"),bht.forEach(t),mIe.forEach(t),tPe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(hy.$$.fragment,Dl),her=i(Dl),hc=n(Dl,"P",{});var EJ=s(hc);per=r(EJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SO=n(EJ,"A",{href:!0});var vht=s(SO);_er=r(vht,"from_pretrained()"),vht.forEach(t),uer=r(EJ," class method or the "),RO=n(EJ,"A",{href:!0});var Fht=s(RO);ber=r(Fht,"from_config()"),Fht.forEach(t),ver=r(EJ,` class
method.`),EJ.forEach(t),Fer=i(Dl),py=n(Dl,"P",{});var gIe=s(py);Ter=r(gIe,"This class cannot be instantiated directly using "),ype=n(gIe,"CODE",{});var Tht=s(ype);Mer=r(Tht,"__init__()"),Tht.forEach(t),Eer=r(gIe," (throws an error)."),gIe.forEach(t),Cer=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(_y.$$.fragment,Gl),wer=i(Gl),Lpe=n(Gl,"P",{});var Mht=s(Lpe);Aer=r(Mht,"Instantiates one of the base model classes of the library from a configuration."),Mht.forEach(t),yer=i(Gl),pc=n(Gl,"P",{});var CJ=s(pc);Ler=r(CJ,`Note:
Loading a model from its configuration file does `),xpe=n(CJ,"STRONG",{});var Eht=s(xpe);xer=r(Eht,"not"),Eht.forEach(t),ker=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BO=n(CJ,"A",{href:!0});var Cht=s(BO);Ser=r(Cht,"from_pretrained()"),Cht.forEach(t),Rer=r(CJ," to load the model weights."),CJ.forEach(t),Ber=i(Gl),kpe=n(Gl,"P",{});var wht=s(kpe);Per=r(wht,"Examples:"),wht.forEach(t),$er=i(Gl),m(uy.$$.fragment,Gl),Gl.forEach(t),Ier=i(Dl),po=n(Dl,"DIV",{class:!0});var pa=s(po);m(by.$$.fragment,pa),qer=i(pa),Spe=n(pa,"P",{});var Aht=s(Spe);Ner=r(Aht,"Instantiate one of the base model classes of the library from a pretrained model."),Aht.forEach(t),jer=i(pa),un=n(pa,"P",{});var iC=s(un);Der=r(iC,"The model class to instantiate is selected based on the "),Rpe=n(iC,"CODE",{});var yht=s(Rpe);Ger=r(yht,"model_type"),yht.forEach(t),Oer=r(iC,` property of the config object (either
passed as an argument or loaded from `),Bpe=n(iC,"CODE",{});var Lht=s(Bpe);Ver=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),Xer=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ppe=n(iC,"CODE",{});var xht=s(Ppe);zer=r(xht,"pretrained_model_name_or_path"),xht.forEach(t),Qer=r(iC,":"),iC.forEach(t),Wer=i(pa),x=n(pa,"UL",{});var k=s(x);I5=n(k,"LI",{});var C7e=s(I5);$pe=n(C7e,"STRONG",{});var kht=s($pe);Her=r(kht,"albert"),kht.forEach(t),Uer=r(C7e," \u2014 "),PO=n(C7e,"A",{href:!0});var Sht=s(PO);Jer=r(Sht,"TFAlbertModel"),Sht.forEach(t),Yer=r(C7e," (ALBERT model)"),C7e.forEach(t),Ker=i(k),q5=n(k,"LI",{});var w7e=s(q5);Ipe=n(w7e,"STRONG",{});var Rht=s(Ipe);Zer=r(Rht,"bart"),Rht.forEach(t),eor=r(w7e," \u2014 "),$O=n(w7e,"A",{href:!0});var Bht=s($O);oor=r(Bht,"TFBartModel"),Bht.forEach(t),ror=r(w7e," (BART model)"),w7e.forEach(t),tor=i(k),N5=n(k,"LI",{});var A7e=s(N5);qpe=n(A7e,"STRONG",{});var Pht=s(qpe);aor=r(Pht,"bert"),Pht.forEach(t),nor=r(A7e," \u2014 "),IO=n(A7e,"A",{href:!0});var $ht=s(IO);sor=r($ht,"TFBertModel"),$ht.forEach(t),lor=r(A7e," (BERT model)"),A7e.forEach(t),ior=i(k),j5=n(k,"LI",{});var y7e=s(j5);Npe=n(y7e,"STRONG",{});var Iht=s(Npe);dor=r(Iht,"blenderbot"),Iht.forEach(t),cor=r(y7e," \u2014 "),qO=n(y7e,"A",{href:!0});var qht=s(qO);mor=r(qht,"TFBlenderbotModel"),qht.forEach(t),gor=r(y7e," (Blenderbot model)"),y7e.forEach(t),hor=i(k),D5=n(k,"LI",{});var L7e=s(D5);jpe=n(L7e,"STRONG",{});var Nht=s(jpe);por=r(Nht,"blenderbot-small"),Nht.forEach(t),_or=r(L7e," \u2014 "),NO=n(L7e,"A",{href:!0});var jht=s(NO);uor=r(jht,"TFBlenderbotSmallModel"),jht.forEach(t),bor=r(L7e," (BlenderbotSmall model)"),L7e.forEach(t),vor=i(k),G5=n(k,"LI",{});var x7e=s(G5);Dpe=n(x7e,"STRONG",{});var Dht=s(Dpe);For=r(Dht,"camembert"),Dht.forEach(t),Tor=r(x7e," \u2014 "),jO=n(x7e,"A",{href:!0});var Ght=s(jO);Mor=r(Ght,"TFCamembertModel"),Ght.forEach(t),Eor=r(x7e," (CamemBERT model)"),x7e.forEach(t),Cor=i(k),O5=n(k,"LI",{});var k7e=s(O5);Gpe=n(k7e,"STRONG",{});var Oht=s(Gpe);wor=r(Oht,"clip"),Oht.forEach(t),Aor=r(k7e," \u2014 "),DO=n(k7e,"A",{href:!0});var Vht=s(DO);yor=r(Vht,"TFCLIPModel"),Vht.forEach(t),Lor=r(k7e," (CLIP model)"),k7e.forEach(t),xor=i(k),V5=n(k,"LI",{});var S7e=s(V5);Ope=n(S7e,"STRONG",{});var Xht=s(Ope);kor=r(Xht,"convbert"),Xht.forEach(t),Sor=r(S7e," \u2014 "),GO=n(S7e,"A",{href:!0});var zht=s(GO);Ror=r(zht,"TFConvBertModel"),zht.forEach(t),Bor=r(S7e," (ConvBERT model)"),S7e.forEach(t),Por=i(k),X5=n(k,"LI",{});var R7e=s(X5);Vpe=n(R7e,"STRONG",{});var Qht=s(Vpe);$or=r(Qht,"convnext"),Qht.forEach(t),Ior=r(R7e," \u2014 "),OO=n(R7e,"A",{href:!0});var Wht=s(OO);qor=r(Wht,"TFConvNextModel"),Wht.forEach(t),Nor=r(R7e," (ConvNext model)"),R7e.forEach(t),jor=i(k),z5=n(k,"LI",{});var B7e=s(z5);Xpe=n(B7e,"STRONG",{});var Hht=s(Xpe);Dor=r(Hht,"ctrl"),Hht.forEach(t),Gor=r(B7e," \u2014 "),VO=n(B7e,"A",{href:!0});var Uht=s(VO);Oor=r(Uht,"TFCTRLModel"),Uht.forEach(t),Vor=r(B7e," (CTRL model)"),B7e.forEach(t),Xor=i(k),Q5=n(k,"LI",{});var P7e=s(Q5);zpe=n(P7e,"STRONG",{});var Jht=s(zpe);zor=r(Jht,"deberta"),Jht.forEach(t),Qor=r(P7e," \u2014 "),XO=n(P7e,"A",{href:!0});var Yht=s(XO);Wor=r(Yht,"TFDebertaModel"),Yht.forEach(t),Hor=r(P7e," (DeBERTa model)"),P7e.forEach(t),Uor=i(k),W5=n(k,"LI",{});var $7e=s(W5);Qpe=n($7e,"STRONG",{});var Kht=s(Qpe);Jor=r(Kht,"deberta-v2"),Kht.forEach(t),Yor=r($7e," \u2014 "),zO=n($7e,"A",{href:!0});var Zht=s(zO);Kor=r(Zht,"TFDebertaV2Model"),Zht.forEach(t),Zor=r($7e," (DeBERTa-v2 model)"),$7e.forEach(t),err=i(k),H5=n(k,"LI",{});var I7e=s(H5);Wpe=n(I7e,"STRONG",{});var ept=s(Wpe);orr=r(ept,"distilbert"),ept.forEach(t),rrr=r(I7e," \u2014 "),QO=n(I7e,"A",{href:!0});var opt=s(QO);trr=r(opt,"TFDistilBertModel"),opt.forEach(t),arr=r(I7e," (DistilBERT model)"),I7e.forEach(t),nrr=i(k),U5=n(k,"LI",{});var q7e=s(U5);Hpe=n(q7e,"STRONG",{});var rpt=s(Hpe);srr=r(rpt,"dpr"),rpt.forEach(t),lrr=r(q7e," \u2014 "),WO=n(q7e,"A",{href:!0});var tpt=s(WO);irr=r(tpt,"TFDPRQuestionEncoder"),tpt.forEach(t),drr=r(q7e," (DPR model)"),q7e.forEach(t),crr=i(k),J5=n(k,"LI",{});var N7e=s(J5);Upe=n(N7e,"STRONG",{});var apt=s(Upe);frr=r(apt,"electra"),apt.forEach(t),mrr=r(N7e," \u2014 "),HO=n(N7e,"A",{href:!0});var npt=s(HO);grr=r(npt,"TFElectraModel"),npt.forEach(t),hrr=r(N7e," (ELECTRA model)"),N7e.forEach(t),prr=i(k),Y5=n(k,"LI",{});var j7e=s(Y5);Jpe=n(j7e,"STRONG",{});var spt=s(Jpe);_rr=r(spt,"flaubert"),spt.forEach(t),urr=r(j7e," \u2014 "),UO=n(j7e,"A",{href:!0});var lpt=s(UO);brr=r(lpt,"TFFlaubertModel"),lpt.forEach(t),vrr=r(j7e," (FlauBERT model)"),j7e.forEach(t),Frr=i(k),Os=n(k,"LI",{});var C9=s(Os);Ype=n(C9,"STRONG",{});var ipt=s(Ype);Trr=r(ipt,"funnel"),ipt.forEach(t),Mrr=r(C9," \u2014 "),JO=n(C9,"A",{href:!0});var dpt=s(JO);Err=r(dpt,"TFFunnelModel"),dpt.forEach(t),Crr=r(C9," or "),YO=n(C9,"A",{href:!0});var cpt=s(YO);wrr=r(cpt,"TFFunnelBaseModel"),cpt.forEach(t),Arr=r(C9," (Funnel Transformer model)"),C9.forEach(t),yrr=i(k),K5=n(k,"LI",{});var D7e=s(K5);Kpe=n(D7e,"STRONG",{});var fpt=s(Kpe);Lrr=r(fpt,"gpt2"),fpt.forEach(t),xrr=r(D7e," \u2014 "),KO=n(D7e,"A",{href:!0});var mpt=s(KO);krr=r(mpt,"TFGPT2Model"),mpt.forEach(t),Srr=r(D7e," (OpenAI GPT-2 model)"),D7e.forEach(t),Rrr=i(k),Z5=n(k,"LI",{});var G7e=s(Z5);Zpe=n(G7e,"STRONG",{});var gpt=s(Zpe);Brr=r(gpt,"gptj"),gpt.forEach(t),Prr=r(G7e," \u2014 "),ZO=n(G7e,"A",{href:!0});var hpt=s(ZO);$rr=r(hpt,"TFGPTJModel"),hpt.forEach(t),Irr=r(G7e," (GPT-J model)"),G7e.forEach(t),qrr=i(k),ev=n(k,"LI",{});var O7e=s(ev);e_e=n(O7e,"STRONG",{});var ppt=s(e_e);Nrr=r(ppt,"hubert"),ppt.forEach(t),jrr=r(O7e," \u2014 "),eV=n(O7e,"A",{href:!0});var _pt=s(eV);Drr=r(_pt,"TFHubertModel"),_pt.forEach(t),Grr=r(O7e," (Hubert model)"),O7e.forEach(t),Orr=i(k),ov=n(k,"LI",{});var V7e=s(ov);o_e=n(V7e,"STRONG",{});var upt=s(o_e);Vrr=r(upt,"layoutlm"),upt.forEach(t),Xrr=r(V7e," \u2014 "),oV=n(V7e,"A",{href:!0});var bpt=s(oV);zrr=r(bpt,"TFLayoutLMModel"),bpt.forEach(t),Qrr=r(V7e," (LayoutLM model)"),V7e.forEach(t),Wrr=i(k),rv=n(k,"LI",{});var X7e=s(rv);r_e=n(X7e,"STRONG",{});var vpt=s(r_e);Hrr=r(vpt,"led"),vpt.forEach(t),Urr=r(X7e," \u2014 "),rV=n(X7e,"A",{href:!0});var Fpt=s(rV);Jrr=r(Fpt,"TFLEDModel"),Fpt.forEach(t),Yrr=r(X7e," (LED model)"),X7e.forEach(t),Krr=i(k),tv=n(k,"LI",{});var z7e=s(tv);t_e=n(z7e,"STRONG",{});var Tpt=s(t_e);Zrr=r(Tpt,"longformer"),Tpt.forEach(t),etr=r(z7e," \u2014 "),tV=n(z7e,"A",{href:!0});var Mpt=s(tV);otr=r(Mpt,"TFLongformerModel"),Mpt.forEach(t),rtr=r(z7e," (Longformer model)"),z7e.forEach(t),ttr=i(k),av=n(k,"LI",{});var Q7e=s(av);a_e=n(Q7e,"STRONG",{});var Ept=s(a_e);atr=r(Ept,"lxmert"),Ept.forEach(t),ntr=r(Q7e," \u2014 "),aV=n(Q7e,"A",{href:!0});var Cpt=s(aV);str=r(Cpt,"TFLxmertModel"),Cpt.forEach(t),ltr=r(Q7e," (LXMERT model)"),Q7e.forEach(t),itr=i(k),nv=n(k,"LI",{});var W7e=s(nv);n_e=n(W7e,"STRONG",{});var wpt=s(n_e);dtr=r(wpt,"marian"),wpt.forEach(t),ctr=r(W7e," \u2014 "),nV=n(W7e,"A",{href:!0});var Apt=s(nV);ftr=r(Apt,"TFMarianModel"),Apt.forEach(t),mtr=r(W7e," (Marian model)"),W7e.forEach(t),gtr=i(k),sv=n(k,"LI",{});var H7e=s(sv);s_e=n(H7e,"STRONG",{});var ypt=s(s_e);htr=r(ypt,"mbart"),ypt.forEach(t),ptr=r(H7e," \u2014 "),sV=n(H7e,"A",{href:!0});var Lpt=s(sV);_tr=r(Lpt,"TFMBartModel"),Lpt.forEach(t),utr=r(H7e," (mBART model)"),H7e.forEach(t),btr=i(k),lv=n(k,"LI",{});var U7e=s(lv);l_e=n(U7e,"STRONG",{});var xpt=s(l_e);vtr=r(xpt,"mobilebert"),xpt.forEach(t),Ftr=r(U7e," \u2014 "),lV=n(U7e,"A",{href:!0});var kpt=s(lV);Ttr=r(kpt,"TFMobileBertModel"),kpt.forEach(t),Mtr=r(U7e," (MobileBERT model)"),U7e.forEach(t),Etr=i(k),iv=n(k,"LI",{});var J7e=s(iv);i_e=n(J7e,"STRONG",{});var Spt=s(i_e);Ctr=r(Spt,"mpnet"),Spt.forEach(t),wtr=r(J7e," \u2014 "),iV=n(J7e,"A",{href:!0});var Rpt=s(iV);Atr=r(Rpt,"TFMPNetModel"),Rpt.forEach(t),ytr=r(J7e," (MPNet model)"),J7e.forEach(t),Ltr=i(k),dv=n(k,"LI",{});var Y7e=s(dv);d_e=n(Y7e,"STRONG",{});var Bpt=s(d_e);xtr=r(Bpt,"mt5"),Bpt.forEach(t),ktr=r(Y7e," \u2014 "),dV=n(Y7e,"A",{href:!0});var Ppt=s(dV);Str=r(Ppt,"TFMT5Model"),Ppt.forEach(t),Rtr=r(Y7e," (mT5 model)"),Y7e.forEach(t),Btr=i(k),cv=n(k,"LI",{});var K7e=s(cv);c_e=n(K7e,"STRONG",{});var $pt=s(c_e);Ptr=r($pt,"openai-gpt"),$pt.forEach(t),$tr=r(K7e," \u2014 "),cV=n(K7e,"A",{href:!0});var Ipt=s(cV);Itr=r(Ipt,"TFOpenAIGPTModel"),Ipt.forEach(t),qtr=r(K7e," (OpenAI GPT model)"),K7e.forEach(t),Ntr=i(k),fv=n(k,"LI",{});var Z7e=s(fv);f_e=n(Z7e,"STRONG",{});var qpt=s(f_e);jtr=r(qpt,"pegasus"),qpt.forEach(t),Dtr=r(Z7e," \u2014 "),fV=n(Z7e,"A",{href:!0});var Npt=s(fV);Gtr=r(Npt,"TFPegasusModel"),Npt.forEach(t),Otr=r(Z7e," (Pegasus model)"),Z7e.forEach(t),Vtr=i(k),mv=n(k,"LI",{});var e9e=s(mv);m_e=n(e9e,"STRONG",{});var jpt=s(m_e);Xtr=r(jpt,"rembert"),jpt.forEach(t),ztr=r(e9e," \u2014 "),mV=n(e9e,"A",{href:!0});var Dpt=s(mV);Qtr=r(Dpt,"TFRemBertModel"),Dpt.forEach(t),Wtr=r(e9e," (RemBERT model)"),e9e.forEach(t),Htr=i(k),gv=n(k,"LI",{});var o9e=s(gv);g_e=n(o9e,"STRONG",{});var Gpt=s(g_e);Utr=r(Gpt,"roberta"),Gpt.forEach(t),Jtr=r(o9e," \u2014 "),gV=n(o9e,"A",{href:!0});var Opt=s(gV);Ytr=r(Opt,"TFRobertaModel"),Opt.forEach(t),Ktr=r(o9e," (RoBERTa model)"),o9e.forEach(t),Ztr=i(k),hv=n(k,"LI",{});var r9e=s(hv);h_e=n(r9e,"STRONG",{});var Vpt=s(h_e);ear=r(Vpt,"roformer"),Vpt.forEach(t),oar=r(r9e," \u2014 "),hV=n(r9e,"A",{href:!0});var Xpt=s(hV);rar=r(Xpt,"TFRoFormerModel"),Xpt.forEach(t),tar=r(r9e," (RoFormer model)"),r9e.forEach(t),aar=i(k),pv=n(k,"LI",{});var t9e=s(pv);p_e=n(t9e,"STRONG",{});var zpt=s(p_e);nar=r(zpt,"speech_to_text"),zpt.forEach(t),sar=r(t9e," \u2014 "),pV=n(t9e,"A",{href:!0});var Qpt=s(pV);lar=r(Qpt,"TFSpeech2TextModel"),Qpt.forEach(t),iar=r(t9e," (Speech2Text model)"),t9e.forEach(t),dar=i(k),_v=n(k,"LI",{});var a9e=s(_v);__e=n(a9e,"STRONG",{});var Wpt=s(__e);car=r(Wpt,"t5"),Wpt.forEach(t),far=r(a9e," \u2014 "),_V=n(a9e,"A",{href:!0});var Hpt=s(_V);mar=r(Hpt,"TFT5Model"),Hpt.forEach(t),gar=r(a9e," (T5 model)"),a9e.forEach(t),har=i(k),uv=n(k,"LI",{});var n9e=s(uv);u_e=n(n9e,"STRONG",{});var Upt=s(u_e);par=r(Upt,"tapas"),Upt.forEach(t),_ar=r(n9e," \u2014 "),uV=n(n9e,"A",{href:!0});var Jpt=s(uV);uar=r(Jpt,"TFTapasModel"),Jpt.forEach(t),bar=r(n9e," (TAPAS model)"),n9e.forEach(t),Far=i(k),bv=n(k,"LI",{});var s9e=s(bv);b_e=n(s9e,"STRONG",{});var Ypt=s(b_e);Tar=r(Ypt,"transfo-xl"),Ypt.forEach(t),Mar=r(s9e," \u2014 "),bV=n(s9e,"A",{href:!0});var Kpt=s(bV);Ear=r(Kpt,"TFTransfoXLModel"),Kpt.forEach(t),Car=r(s9e," (Transformer-XL model)"),s9e.forEach(t),war=i(k),vv=n(k,"LI",{});var l9e=s(vv);v_e=n(l9e,"STRONG",{});var Zpt=s(v_e);Aar=r(Zpt,"vit"),Zpt.forEach(t),yar=r(l9e," \u2014 "),vV=n(l9e,"A",{href:!0});var e_t=s(vV);Lar=r(e_t,"TFViTModel"),e_t.forEach(t),xar=r(l9e," (ViT model)"),l9e.forEach(t),kar=i(k),Fv=n(k,"LI",{});var i9e=s(Fv);F_e=n(i9e,"STRONG",{});var o_t=s(F_e);Sar=r(o_t,"vit_mae"),o_t.forEach(t),Rar=r(i9e," \u2014 "),FV=n(i9e,"A",{href:!0});var r_t=s(FV);Bar=r(r_t,"TFViTMAEModel"),r_t.forEach(t),Par=r(i9e," (ViTMAE model)"),i9e.forEach(t),$ar=i(k),Tv=n(k,"LI",{});var d9e=s(Tv);T_e=n(d9e,"STRONG",{});var t_t=s(T_e);Iar=r(t_t,"wav2vec2"),t_t.forEach(t),qar=r(d9e," \u2014 "),TV=n(d9e,"A",{href:!0});var a_t=s(TV);Nar=r(a_t,"TFWav2Vec2Model"),a_t.forEach(t),jar=r(d9e," (Wav2Vec2 model)"),d9e.forEach(t),Dar=i(k),Mv=n(k,"LI",{});var c9e=s(Mv);M_e=n(c9e,"STRONG",{});var n_t=s(M_e);Gar=r(n_t,"xlm"),n_t.forEach(t),Oar=r(c9e," \u2014 "),MV=n(c9e,"A",{href:!0});var s_t=s(MV);Var=r(s_t,"TFXLMModel"),s_t.forEach(t),Xar=r(c9e," (XLM model)"),c9e.forEach(t),zar=i(k),Ev=n(k,"LI",{});var f9e=s(Ev);E_e=n(f9e,"STRONG",{});var l_t=s(E_e);Qar=r(l_t,"xlm-roberta"),l_t.forEach(t),War=r(f9e," \u2014 "),EV=n(f9e,"A",{href:!0});var i_t=s(EV);Har=r(i_t,"TFXLMRobertaModel"),i_t.forEach(t),Uar=r(f9e," (XLM-RoBERTa model)"),f9e.forEach(t),Jar=i(k),Cv=n(k,"LI",{});var m9e=s(Cv);C_e=n(m9e,"STRONG",{});var d_t=s(C_e);Yar=r(d_t,"xlnet"),d_t.forEach(t),Kar=r(m9e," \u2014 "),CV=n(m9e,"A",{href:!0});var c_t=s(CV);Zar=r(c_t,"TFXLNetModel"),c_t.forEach(t),enr=r(m9e," (XLNet model)"),m9e.forEach(t),k.forEach(t),onr=i(pa),w_e=n(pa,"P",{});var f_t=s(w_e);rnr=r(f_t,"Examples:"),f_t.forEach(t),tnr=i(pa),m(vy.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),aPe=i(c),_c=n(c,"H2",{class:!0});var hIe=s(_c);wv=n(hIe,"A",{id:!0,class:!0,href:!0});var m_t=s(wv);A_e=n(m_t,"SPAN",{});var g_t=s(A_e);m(Fy.$$.fragment,g_t),g_t.forEach(t),m_t.forEach(t),anr=i(hIe),y_e=n(hIe,"SPAN",{});var h_t=s(y_e);nnr=r(h_t,"TFAutoModelForPreTraining"),h_t.forEach(t),hIe.forEach(t),nPe=i(c),Fr=n(c,"DIV",{class:!0});var Ol=s(Fr);m(Ty.$$.fragment,Ol),snr=i(Ol),uc=n(Ol,"P",{});var wJ=s(uc);lnr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wV=n(wJ,"A",{href:!0});var p_t=s(wV);inr=r(p_t,"from_pretrained()"),p_t.forEach(t),dnr=r(wJ," class method or the "),AV=n(wJ,"A",{href:!0});var __t=s(AV);cnr=r(__t,"from_config()"),__t.forEach(t),fnr=r(wJ,` class
method.`),wJ.forEach(t),mnr=i(Ol),My=n(Ol,"P",{});var pIe=s(My);gnr=r(pIe,"This class cannot be instantiated directly using "),L_e=n(pIe,"CODE",{});var u_t=s(L_e);hnr=r(u_t,"__init__()"),u_t.forEach(t),pnr=r(pIe," (throws an error)."),pIe.forEach(t),_nr=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(Ey.$$.fragment,Vl),unr=i(Vl),x_e=n(Vl,"P",{});var b_t=s(x_e);bnr=r(b_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),b_t.forEach(t),vnr=i(Vl),bc=n(Vl,"P",{});var AJ=s(bc);Fnr=r(AJ,`Note:
Loading a model from its configuration file does `),k_e=n(AJ,"STRONG",{});var v_t=s(k_e);Tnr=r(v_t,"not"),v_t.forEach(t),Mnr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(AJ,"A",{href:!0});var F_t=s(yV);Enr=r(F_t,"from_pretrained()"),F_t.forEach(t),Cnr=r(AJ," to load the model weights."),AJ.forEach(t),wnr=i(Vl),S_e=n(Vl,"P",{});var T_t=s(S_e);Anr=r(T_t,"Examples:"),T_t.forEach(t),ynr=i(Vl),m(Cy.$$.fragment,Vl),Vl.forEach(t),Lnr=i(Ol),_o=n(Ol,"DIV",{class:!0});var _a=s(_o);m(wy.$$.fragment,_a),xnr=i(_a),R_e=n(_a,"P",{});var M_t=s(R_e);knr=r(M_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),M_t.forEach(t),Snr=i(_a),bn=n(_a,"P",{});var dC=s(bn);Rnr=r(dC,"The model class to instantiate is selected based on the "),B_e=n(dC,"CODE",{});var E_t=s(B_e);Bnr=r(E_t,"model_type"),E_t.forEach(t),Pnr=r(dC,` property of the config object (either
passed as an argument or loaded from `),P_e=n(dC,"CODE",{});var C_t=s(P_e);$nr=r(C_t,"pretrained_model_name_or_path"),C_t.forEach(t),Inr=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(dC,"CODE",{});var w_t=s($_e);qnr=r(w_t,"pretrained_model_name_or_path"),w_t.forEach(t),Nnr=r(dC,":"),dC.forEach(t),jnr=i(_a),H=n(_a,"UL",{});var U=s(H);Av=n(U,"LI",{});var g9e=s(Av);I_e=n(g9e,"STRONG",{});var A_t=s(I_e);Dnr=r(A_t,"albert"),A_t.forEach(t),Gnr=r(g9e," \u2014 "),LV=n(g9e,"A",{href:!0});var y_t=s(LV);Onr=r(y_t,"TFAlbertForPreTraining"),y_t.forEach(t),Vnr=r(g9e," (ALBERT model)"),g9e.forEach(t),Xnr=i(U),yv=n(U,"LI",{});var h9e=s(yv);q_e=n(h9e,"STRONG",{});var L_t=s(q_e);znr=r(L_t,"bart"),L_t.forEach(t),Qnr=r(h9e," \u2014 "),xV=n(h9e,"A",{href:!0});var x_t=s(xV);Wnr=r(x_t,"TFBartForConditionalGeneration"),x_t.forEach(t),Hnr=r(h9e," (BART model)"),h9e.forEach(t),Unr=i(U),Lv=n(U,"LI",{});var p9e=s(Lv);N_e=n(p9e,"STRONG",{});var k_t=s(N_e);Jnr=r(k_t,"bert"),k_t.forEach(t),Ynr=r(p9e," \u2014 "),kV=n(p9e,"A",{href:!0});var S_t=s(kV);Knr=r(S_t,"TFBertForPreTraining"),S_t.forEach(t),Znr=r(p9e," (BERT model)"),p9e.forEach(t),esr=i(U),xv=n(U,"LI",{});var _9e=s(xv);j_e=n(_9e,"STRONG",{});var R_t=s(j_e);osr=r(R_t,"camembert"),R_t.forEach(t),rsr=r(_9e," \u2014 "),SV=n(_9e,"A",{href:!0});var B_t=s(SV);tsr=r(B_t,"TFCamembertForMaskedLM"),B_t.forEach(t),asr=r(_9e," (CamemBERT model)"),_9e.forEach(t),nsr=i(U),kv=n(U,"LI",{});var u9e=s(kv);D_e=n(u9e,"STRONG",{});var P_t=s(D_e);ssr=r(P_t,"ctrl"),P_t.forEach(t),lsr=r(u9e," \u2014 "),RV=n(u9e,"A",{href:!0});var $_t=s(RV);isr=r($_t,"TFCTRLLMHeadModel"),$_t.forEach(t),dsr=r(u9e," (CTRL model)"),u9e.forEach(t),csr=i(U),Sv=n(U,"LI",{});var b9e=s(Sv);G_e=n(b9e,"STRONG",{});var I_t=s(G_e);fsr=r(I_t,"distilbert"),I_t.forEach(t),msr=r(b9e," \u2014 "),BV=n(b9e,"A",{href:!0});var q_t=s(BV);gsr=r(q_t,"TFDistilBertForMaskedLM"),q_t.forEach(t),hsr=r(b9e," (DistilBERT model)"),b9e.forEach(t),psr=i(U),Rv=n(U,"LI",{});var v9e=s(Rv);O_e=n(v9e,"STRONG",{});var N_t=s(O_e);_sr=r(N_t,"electra"),N_t.forEach(t),usr=r(v9e," \u2014 "),PV=n(v9e,"A",{href:!0});var j_t=s(PV);bsr=r(j_t,"TFElectraForPreTraining"),j_t.forEach(t),vsr=r(v9e," (ELECTRA model)"),v9e.forEach(t),Fsr=i(U),Bv=n(U,"LI",{});var F9e=s(Bv);V_e=n(F9e,"STRONG",{});var D_t=s(V_e);Tsr=r(D_t,"flaubert"),D_t.forEach(t),Msr=r(F9e," \u2014 "),$V=n(F9e,"A",{href:!0});var G_t=s($V);Esr=r(G_t,"TFFlaubertWithLMHeadModel"),G_t.forEach(t),Csr=r(F9e," (FlauBERT model)"),F9e.forEach(t),wsr=i(U),Pv=n(U,"LI",{});var T9e=s(Pv);X_e=n(T9e,"STRONG",{});var O_t=s(X_e);Asr=r(O_t,"funnel"),O_t.forEach(t),ysr=r(T9e," \u2014 "),IV=n(T9e,"A",{href:!0});var V_t=s(IV);Lsr=r(V_t,"TFFunnelForPreTraining"),V_t.forEach(t),xsr=r(T9e," (Funnel Transformer model)"),T9e.forEach(t),ksr=i(U),$v=n(U,"LI",{});var M9e=s($v);z_e=n(M9e,"STRONG",{});var X_t=s(z_e);Ssr=r(X_t,"gpt2"),X_t.forEach(t),Rsr=r(M9e," \u2014 "),qV=n(M9e,"A",{href:!0});var z_t=s(qV);Bsr=r(z_t,"TFGPT2LMHeadModel"),z_t.forEach(t),Psr=r(M9e," (OpenAI GPT-2 model)"),M9e.forEach(t),$sr=i(U),Iv=n(U,"LI",{});var E9e=s(Iv);Q_e=n(E9e,"STRONG",{});var Q_t=s(Q_e);Isr=r(Q_t,"layoutlm"),Q_t.forEach(t),qsr=r(E9e," \u2014 "),NV=n(E9e,"A",{href:!0});var W_t=s(NV);Nsr=r(W_t,"TFLayoutLMForMaskedLM"),W_t.forEach(t),jsr=r(E9e," (LayoutLM model)"),E9e.forEach(t),Dsr=i(U),qv=n(U,"LI",{});var C9e=s(qv);W_e=n(C9e,"STRONG",{});var H_t=s(W_e);Gsr=r(H_t,"lxmert"),H_t.forEach(t),Osr=r(C9e," \u2014 "),jV=n(C9e,"A",{href:!0});var U_t=s(jV);Vsr=r(U_t,"TFLxmertForPreTraining"),U_t.forEach(t),Xsr=r(C9e," (LXMERT model)"),C9e.forEach(t),zsr=i(U),Nv=n(U,"LI",{});var w9e=s(Nv);H_e=n(w9e,"STRONG",{});var J_t=s(H_e);Qsr=r(J_t,"mobilebert"),J_t.forEach(t),Wsr=r(w9e," \u2014 "),DV=n(w9e,"A",{href:!0});var Y_t=s(DV);Hsr=r(Y_t,"TFMobileBertForPreTraining"),Y_t.forEach(t),Usr=r(w9e," (MobileBERT model)"),w9e.forEach(t),Jsr=i(U),jv=n(U,"LI",{});var A9e=s(jv);U_e=n(A9e,"STRONG",{});var K_t=s(U_e);Ysr=r(K_t,"mpnet"),K_t.forEach(t),Ksr=r(A9e," \u2014 "),GV=n(A9e,"A",{href:!0});var Z_t=s(GV);Zsr=r(Z_t,"TFMPNetForMaskedLM"),Z_t.forEach(t),elr=r(A9e," (MPNet model)"),A9e.forEach(t),olr=i(U),Dv=n(U,"LI",{});var y9e=s(Dv);J_e=n(y9e,"STRONG",{});var eut=s(J_e);rlr=r(eut,"openai-gpt"),eut.forEach(t),tlr=r(y9e," \u2014 "),OV=n(y9e,"A",{href:!0});var out=s(OV);alr=r(out,"TFOpenAIGPTLMHeadModel"),out.forEach(t),nlr=r(y9e," (OpenAI GPT model)"),y9e.forEach(t),slr=i(U),Gv=n(U,"LI",{});var L9e=s(Gv);Y_e=n(L9e,"STRONG",{});var rut=s(Y_e);llr=r(rut,"roberta"),rut.forEach(t),ilr=r(L9e," \u2014 "),VV=n(L9e,"A",{href:!0});var tut=s(VV);dlr=r(tut,"TFRobertaForMaskedLM"),tut.forEach(t),clr=r(L9e," (RoBERTa model)"),L9e.forEach(t),flr=i(U),Ov=n(U,"LI",{});var x9e=s(Ov);K_e=n(x9e,"STRONG",{});var aut=s(K_e);mlr=r(aut,"t5"),aut.forEach(t),glr=r(x9e," \u2014 "),XV=n(x9e,"A",{href:!0});var nut=s(XV);hlr=r(nut,"TFT5ForConditionalGeneration"),nut.forEach(t),plr=r(x9e," (T5 model)"),x9e.forEach(t),_lr=i(U),Vv=n(U,"LI",{});var k9e=s(Vv);Z_e=n(k9e,"STRONG",{});var sut=s(Z_e);ulr=r(sut,"tapas"),sut.forEach(t),blr=r(k9e," \u2014 "),zV=n(k9e,"A",{href:!0});var lut=s(zV);vlr=r(lut,"TFTapasForMaskedLM"),lut.forEach(t),Flr=r(k9e," (TAPAS model)"),k9e.forEach(t),Tlr=i(U),Xv=n(U,"LI",{});var S9e=s(Xv);eue=n(S9e,"STRONG",{});var iut=s(eue);Mlr=r(iut,"transfo-xl"),iut.forEach(t),Elr=r(S9e," \u2014 "),QV=n(S9e,"A",{href:!0});var dut=s(QV);Clr=r(dut,"TFTransfoXLLMHeadModel"),dut.forEach(t),wlr=r(S9e," (Transformer-XL model)"),S9e.forEach(t),Alr=i(U),zv=n(U,"LI",{});var R9e=s(zv);oue=n(R9e,"STRONG",{});var cut=s(oue);ylr=r(cut,"vit_mae"),cut.forEach(t),Llr=r(R9e," \u2014 "),WV=n(R9e,"A",{href:!0});var fut=s(WV);xlr=r(fut,"TFViTMAEForPreTraining"),fut.forEach(t),klr=r(R9e," (ViTMAE model)"),R9e.forEach(t),Slr=i(U),Qv=n(U,"LI",{});var B9e=s(Qv);rue=n(B9e,"STRONG",{});var mut=s(rue);Rlr=r(mut,"xlm"),mut.forEach(t),Blr=r(B9e," \u2014 "),HV=n(B9e,"A",{href:!0});var gut=s(HV);Plr=r(gut,"TFXLMWithLMHeadModel"),gut.forEach(t),$lr=r(B9e," (XLM model)"),B9e.forEach(t),Ilr=i(U),Wv=n(U,"LI",{});var P9e=s(Wv);tue=n(P9e,"STRONG",{});var hut=s(tue);qlr=r(hut,"xlm-roberta"),hut.forEach(t),Nlr=r(P9e," \u2014 "),UV=n(P9e,"A",{href:!0});var put=s(UV);jlr=r(put,"TFXLMRobertaForMaskedLM"),put.forEach(t),Dlr=r(P9e," (XLM-RoBERTa model)"),P9e.forEach(t),Glr=i(U),Hv=n(U,"LI",{});var $9e=s(Hv);aue=n($9e,"STRONG",{});var _ut=s(aue);Olr=r(_ut,"xlnet"),_ut.forEach(t),Vlr=r($9e," \u2014 "),JV=n($9e,"A",{href:!0});var uut=s(JV);Xlr=r(uut,"TFXLNetLMHeadModel"),uut.forEach(t),zlr=r($9e," (XLNet model)"),$9e.forEach(t),U.forEach(t),Qlr=i(_a),nue=n(_a,"P",{});var but=s(nue);Wlr=r(but,"Examples:"),but.forEach(t),Hlr=i(_a),m(Ay.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),sPe=i(c),vc=n(c,"H2",{class:!0});var _Ie=s(vc);Uv=n(_Ie,"A",{id:!0,class:!0,href:!0});var vut=s(Uv);sue=n(vut,"SPAN",{});var Fut=s(sue);m(yy.$$.fragment,Fut),Fut.forEach(t),vut.forEach(t),Ulr=i(_Ie),lue=n(_Ie,"SPAN",{});var Tut=s(lue);Jlr=r(Tut,"TFAutoModelForCausalLM"),Tut.forEach(t),_Ie.forEach(t),lPe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);m(Ly.$$.fragment,Xl),Ylr=i(Xl),Fc=n(Xl,"P",{});var yJ=s(Fc);Klr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YV=n(yJ,"A",{href:!0});var Mut=s(YV);Zlr=r(Mut,"from_pretrained()"),Mut.forEach(t),eir=r(yJ," class method or the "),KV=n(yJ,"A",{href:!0});var Eut=s(KV);oir=r(Eut,"from_config()"),Eut.forEach(t),rir=r(yJ,` class
method.`),yJ.forEach(t),tir=i(Xl),xy=n(Xl,"P",{});var uIe=s(xy);air=r(uIe,"This class cannot be instantiated directly using "),iue=n(uIe,"CODE",{});var Cut=s(iue);nir=r(Cut,"__init__()"),Cut.forEach(t),sir=r(uIe," (throws an error)."),uIe.forEach(t),lir=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(ky.$$.fragment,zl),iir=i(zl),due=n(zl,"P",{});var wut=s(due);dir=r(wut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wut.forEach(t),cir=i(zl),Tc=n(zl,"P",{});var LJ=s(Tc);fir=r(LJ,`Note:
Loading a model from its configuration file does `),cue=n(LJ,"STRONG",{});var Aut=s(cue);mir=r(Aut,"not"),Aut.forEach(t),gir=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(LJ,"A",{href:!0});var yut=s(ZV);hir=r(yut,"from_pretrained()"),yut.forEach(t),pir=r(LJ," to load the model weights."),LJ.forEach(t),_ir=i(zl),fue=n(zl,"P",{});var Lut=s(fue);uir=r(Lut,"Examples:"),Lut.forEach(t),bir=i(zl),m(Sy.$$.fragment,zl),zl.forEach(t),vir=i(Xl),uo=n(Xl,"DIV",{class:!0});var ua=s(uo);m(Ry.$$.fragment,ua),Fir=i(ua),mue=n(ua,"P",{});var xut=s(mue);Tir=r(xut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xut.forEach(t),Mir=i(ua),vn=n(ua,"P",{});var cC=s(vn);Eir=r(cC,"The model class to instantiate is selected based on the "),gue=n(cC,"CODE",{});var kut=s(gue);Cir=r(kut,"model_type"),kut.forEach(t),wir=r(cC,` property of the config object (either
passed as an argument or loaded from `),hue=n(cC,"CODE",{});var Sut=s(hue);Air=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),yir=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(cC,"CODE",{});var Rut=s(pue);Lir=r(Rut,"pretrained_model_name_or_path"),Rut.forEach(t),xir=r(cC,":"),cC.forEach(t),kir=i(ua),fe=n(ua,"UL",{});var pe=s(fe);Jv=n(pe,"LI",{});var I9e=s(Jv);_ue=n(I9e,"STRONG",{});var But=s(_ue);Sir=r(But,"bert"),But.forEach(t),Rir=r(I9e," \u2014 "),eX=n(I9e,"A",{href:!0});var Put=s(eX);Bir=r(Put,"TFBertLMHeadModel"),Put.forEach(t),Pir=r(I9e," (BERT model)"),I9e.forEach(t),$ir=i(pe),Yv=n(pe,"LI",{});var q9e=s(Yv);uue=n(q9e,"STRONG",{});var $ut=s(uue);Iir=r($ut,"camembert"),$ut.forEach(t),qir=r(q9e," \u2014 "),oX=n(q9e,"A",{href:!0});var Iut=s(oX);Nir=r(Iut,"TFCamembertForCausalLM"),Iut.forEach(t),jir=r(q9e," (CamemBERT model)"),q9e.forEach(t),Dir=i(pe),Kv=n(pe,"LI",{});var N9e=s(Kv);bue=n(N9e,"STRONG",{});var qut=s(bue);Gir=r(qut,"ctrl"),qut.forEach(t),Oir=r(N9e," \u2014 "),rX=n(N9e,"A",{href:!0});var Nut=s(rX);Vir=r(Nut,"TFCTRLLMHeadModel"),Nut.forEach(t),Xir=r(N9e," (CTRL model)"),N9e.forEach(t),zir=i(pe),Zv=n(pe,"LI",{});var j9e=s(Zv);vue=n(j9e,"STRONG",{});var jut=s(vue);Qir=r(jut,"gpt2"),jut.forEach(t),Wir=r(j9e," \u2014 "),tX=n(j9e,"A",{href:!0});var Dut=s(tX);Hir=r(Dut,"TFGPT2LMHeadModel"),Dut.forEach(t),Uir=r(j9e," (OpenAI GPT-2 model)"),j9e.forEach(t),Jir=i(pe),eF=n(pe,"LI",{});var D9e=s(eF);Fue=n(D9e,"STRONG",{});var Gut=s(Fue);Yir=r(Gut,"gptj"),Gut.forEach(t),Kir=r(D9e," \u2014 "),aX=n(D9e,"A",{href:!0});var Out=s(aX);Zir=r(Out,"TFGPTJForCausalLM"),Out.forEach(t),edr=r(D9e," (GPT-J model)"),D9e.forEach(t),odr=i(pe),oF=n(pe,"LI",{});var G9e=s(oF);Tue=n(G9e,"STRONG",{});var Vut=s(Tue);rdr=r(Vut,"openai-gpt"),Vut.forEach(t),tdr=r(G9e," \u2014 "),nX=n(G9e,"A",{href:!0});var Xut=s(nX);adr=r(Xut,"TFOpenAIGPTLMHeadModel"),Xut.forEach(t),ndr=r(G9e," (OpenAI GPT model)"),G9e.forEach(t),sdr=i(pe),rF=n(pe,"LI",{});var O9e=s(rF);Mue=n(O9e,"STRONG",{});var zut=s(Mue);ldr=r(zut,"rembert"),zut.forEach(t),idr=r(O9e," \u2014 "),sX=n(O9e,"A",{href:!0});var Qut=s(sX);ddr=r(Qut,"TFRemBertForCausalLM"),Qut.forEach(t),cdr=r(O9e," (RemBERT model)"),O9e.forEach(t),fdr=i(pe),tF=n(pe,"LI",{});var V9e=s(tF);Eue=n(V9e,"STRONG",{});var Wut=s(Eue);mdr=r(Wut,"roberta"),Wut.forEach(t),gdr=r(V9e," \u2014 "),lX=n(V9e,"A",{href:!0});var Hut=s(lX);hdr=r(Hut,"TFRobertaForCausalLM"),Hut.forEach(t),pdr=r(V9e," (RoBERTa model)"),V9e.forEach(t),_dr=i(pe),aF=n(pe,"LI",{});var X9e=s(aF);Cue=n(X9e,"STRONG",{});var Uut=s(Cue);udr=r(Uut,"roformer"),Uut.forEach(t),bdr=r(X9e," \u2014 "),iX=n(X9e,"A",{href:!0});var Jut=s(iX);vdr=r(Jut,"TFRoFormerForCausalLM"),Jut.forEach(t),Fdr=r(X9e," (RoFormer model)"),X9e.forEach(t),Tdr=i(pe),nF=n(pe,"LI",{});var z9e=s(nF);wue=n(z9e,"STRONG",{});var Yut=s(wue);Mdr=r(Yut,"transfo-xl"),Yut.forEach(t),Edr=r(z9e," \u2014 "),dX=n(z9e,"A",{href:!0});var Kut=s(dX);Cdr=r(Kut,"TFTransfoXLLMHeadModel"),Kut.forEach(t),wdr=r(z9e," (Transformer-XL model)"),z9e.forEach(t),Adr=i(pe),sF=n(pe,"LI",{});var Q9e=s(sF);Aue=n(Q9e,"STRONG",{});var Zut=s(Aue);ydr=r(Zut,"xlm"),Zut.forEach(t),Ldr=r(Q9e," \u2014 "),cX=n(Q9e,"A",{href:!0});var e6t=s(cX);xdr=r(e6t,"TFXLMWithLMHeadModel"),e6t.forEach(t),kdr=r(Q9e," (XLM model)"),Q9e.forEach(t),Sdr=i(pe),lF=n(pe,"LI",{});var W9e=s(lF);yue=n(W9e,"STRONG",{});var o6t=s(yue);Rdr=r(o6t,"xlnet"),o6t.forEach(t),Bdr=r(W9e," \u2014 "),fX=n(W9e,"A",{href:!0});var r6t=s(fX);Pdr=r(r6t,"TFXLNetLMHeadModel"),r6t.forEach(t),$dr=r(W9e," (XLNet model)"),W9e.forEach(t),pe.forEach(t),Idr=i(ua),Lue=n(ua,"P",{});var t6t=s(Lue);qdr=r(t6t,"Examples:"),t6t.forEach(t),Ndr=i(ua),m(By.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),iPe=i(c),Mc=n(c,"H2",{class:!0});var bIe=s(Mc);iF=n(bIe,"A",{id:!0,class:!0,href:!0});var a6t=s(iF);xue=n(a6t,"SPAN",{});var n6t=s(xue);m(Py.$$.fragment,n6t),n6t.forEach(t),a6t.forEach(t),jdr=i(bIe),kue=n(bIe,"SPAN",{});var s6t=s(kue);Ddr=r(s6t,"TFAutoModelForImageClassification"),s6t.forEach(t),bIe.forEach(t),dPe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m($y.$$.fragment,Ql),Gdr=i(Ql),Ec=n(Ql,"P",{});var xJ=s(Ec);Odr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mX=n(xJ,"A",{href:!0});var l6t=s(mX);Vdr=r(l6t,"from_pretrained()"),l6t.forEach(t),Xdr=r(xJ," class method or the "),gX=n(xJ,"A",{href:!0});var i6t=s(gX);zdr=r(i6t,"from_config()"),i6t.forEach(t),Qdr=r(xJ,` class
method.`),xJ.forEach(t),Wdr=i(Ql),Iy=n(Ql,"P",{});var vIe=s(Iy);Hdr=r(vIe,"This class cannot be instantiated directly using "),Sue=n(vIe,"CODE",{});var d6t=s(Sue);Udr=r(d6t,"__init__()"),d6t.forEach(t),Jdr=r(vIe," (throws an error)."),vIe.forEach(t),Ydr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m(qy.$$.fragment,Wl),Kdr=i(Wl),Rue=n(Wl,"P",{});var c6t=s(Rue);Zdr=r(c6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),c6t.forEach(t),ecr=i(Wl),Cc=n(Wl,"P",{});var kJ=s(Cc);ocr=r(kJ,`Note:
Loading a model from its configuration file does `),Bue=n(kJ,"STRONG",{});var f6t=s(Bue);rcr=r(f6t,"not"),f6t.forEach(t),tcr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(kJ,"A",{href:!0});var m6t=s(hX);acr=r(m6t,"from_pretrained()"),m6t.forEach(t),ncr=r(kJ," to load the model weights."),kJ.forEach(t),scr=i(Wl),Pue=n(Wl,"P",{});var g6t=s(Pue);lcr=r(g6t,"Examples:"),g6t.forEach(t),icr=i(Wl),m(Ny.$$.fragment,Wl),Wl.forEach(t),dcr=i(Ql),bo=n(Ql,"DIV",{class:!0});var ba=s(bo);m(jy.$$.fragment,ba),ccr=i(ba),$ue=n(ba,"P",{});var h6t=s($ue);fcr=r(h6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),h6t.forEach(t),mcr=i(ba),Fn=n(ba,"P",{});var fC=s(Fn);gcr=r(fC,"The model class to instantiate is selected based on the "),Iue=n(fC,"CODE",{});var p6t=s(Iue);hcr=r(p6t,"model_type"),p6t.forEach(t),pcr=r(fC,` property of the config object (either
passed as an argument or loaded from `),que=n(fC,"CODE",{});var _6t=s(que);_cr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),ucr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(fC,"CODE",{});var u6t=s(Nue);bcr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),vcr=r(fC,":"),fC.forEach(t),Fcr=i(ba),Dy=n(ba,"UL",{});var FIe=s(Dy);dF=n(FIe,"LI",{});var H9e=s(dF);jue=n(H9e,"STRONG",{});var b6t=s(jue);Tcr=r(b6t,"convnext"),b6t.forEach(t),Mcr=r(H9e," \u2014 "),pX=n(H9e,"A",{href:!0});var v6t=s(pX);Ecr=r(v6t,"TFConvNextForImageClassification"),v6t.forEach(t),Ccr=r(H9e," (ConvNext model)"),H9e.forEach(t),wcr=i(FIe),cF=n(FIe,"LI",{});var U9e=s(cF);Due=n(U9e,"STRONG",{});var F6t=s(Due);Acr=r(F6t,"vit"),F6t.forEach(t),ycr=r(U9e," \u2014 "),_X=n(U9e,"A",{href:!0});var T6t=s(_X);Lcr=r(T6t,"TFViTForImageClassification"),T6t.forEach(t),xcr=r(U9e," (ViT model)"),U9e.forEach(t),FIe.forEach(t),kcr=i(ba),Gue=n(ba,"P",{});var M6t=s(Gue);Scr=r(M6t,"Examples:"),M6t.forEach(t),Rcr=i(ba),m(Gy.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),cPe=i(c),wc=n(c,"H2",{class:!0});var TIe=s(wc);fF=n(TIe,"A",{id:!0,class:!0,href:!0});var E6t=s(fF);Oue=n(E6t,"SPAN",{});var C6t=s(Oue);m(Oy.$$.fragment,C6t),C6t.forEach(t),E6t.forEach(t),Bcr=i(TIe),Vue=n(TIe,"SPAN",{});var w6t=s(Vue);Pcr=r(w6t,"TFAutoModelForMaskedLM"),w6t.forEach(t),TIe.forEach(t),fPe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);m(Vy.$$.fragment,Hl),$cr=i(Hl),Ac=n(Hl,"P",{});var SJ=s(Ac);Icr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uX=n(SJ,"A",{href:!0});var A6t=s(uX);qcr=r(A6t,"from_pretrained()"),A6t.forEach(t),Ncr=r(SJ," class method or the "),bX=n(SJ,"A",{href:!0});var y6t=s(bX);jcr=r(y6t,"from_config()"),y6t.forEach(t),Dcr=r(SJ,` class
method.`),SJ.forEach(t),Gcr=i(Hl),Xy=n(Hl,"P",{});var MIe=s(Xy);Ocr=r(MIe,"This class cannot be instantiated directly using "),Xue=n(MIe,"CODE",{});var L6t=s(Xue);Vcr=r(L6t,"__init__()"),L6t.forEach(t),Xcr=r(MIe," (throws an error)."),MIe.forEach(t),zcr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(zy.$$.fragment,Ul),Qcr=i(Ul),zue=n(Ul,"P",{});var x6t=s(zue);Wcr=r(x6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),x6t.forEach(t),Hcr=i(Ul),yc=n(Ul,"P",{});var RJ=s(yc);Ucr=r(RJ,`Note:
Loading a model from its configuration file does `),Que=n(RJ,"STRONG",{});var k6t=s(Que);Jcr=r(k6t,"not"),k6t.forEach(t),Ycr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(RJ,"A",{href:!0});var S6t=s(vX);Kcr=r(S6t,"from_pretrained()"),S6t.forEach(t),Zcr=r(RJ," to load the model weights."),RJ.forEach(t),efr=i(Ul),Wue=n(Ul,"P",{});var R6t=s(Wue);ofr=r(R6t,"Examples:"),R6t.forEach(t),rfr=i(Ul),m(Qy.$$.fragment,Ul),Ul.forEach(t),tfr=i(Hl),vo=n(Hl,"DIV",{class:!0});var va=s(vo);m(Wy.$$.fragment,va),afr=i(va),Hue=n(va,"P",{});var B6t=s(Hue);nfr=r(B6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),B6t.forEach(t),sfr=i(va),Tn=n(va,"P",{});var mC=s(Tn);lfr=r(mC,"The model class to instantiate is selected based on the "),Uue=n(mC,"CODE",{});var P6t=s(Uue);ifr=r(P6t,"model_type"),P6t.forEach(t),dfr=r(mC,` property of the config object (either
passed as an argument or loaded from `),Jue=n(mC,"CODE",{});var $6t=s(Jue);cfr=r($6t,"pretrained_model_name_or_path"),$6t.forEach(t),ffr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(mC,"CODE",{});var I6t=s(Yue);mfr=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),gfr=r(mC,":"),mC.forEach(t),hfr=i(va),Y=n(va,"UL",{});var re=s(Y);mF=n(re,"LI",{});var J9e=s(mF);Kue=n(J9e,"STRONG",{});var q6t=s(Kue);pfr=r(q6t,"albert"),q6t.forEach(t),_fr=r(J9e," \u2014 "),FX=n(J9e,"A",{href:!0});var N6t=s(FX);ufr=r(N6t,"TFAlbertForMaskedLM"),N6t.forEach(t),bfr=r(J9e," (ALBERT model)"),J9e.forEach(t),vfr=i(re),gF=n(re,"LI",{});var Y9e=s(gF);Zue=n(Y9e,"STRONG",{});var j6t=s(Zue);Ffr=r(j6t,"bert"),j6t.forEach(t),Tfr=r(Y9e," \u2014 "),TX=n(Y9e,"A",{href:!0});var D6t=s(TX);Mfr=r(D6t,"TFBertForMaskedLM"),D6t.forEach(t),Efr=r(Y9e," (BERT model)"),Y9e.forEach(t),Cfr=i(re),hF=n(re,"LI",{});var K9e=s(hF);e6e=n(K9e,"STRONG",{});var G6t=s(e6e);wfr=r(G6t,"camembert"),G6t.forEach(t),Afr=r(K9e," \u2014 "),MX=n(K9e,"A",{href:!0});var O6t=s(MX);yfr=r(O6t,"TFCamembertForMaskedLM"),O6t.forEach(t),Lfr=r(K9e," (CamemBERT model)"),K9e.forEach(t),xfr=i(re),pF=n(re,"LI",{});var Z9e=s(pF);o6e=n(Z9e,"STRONG",{});var V6t=s(o6e);kfr=r(V6t,"convbert"),V6t.forEach(t),Sfr=r(Z9e," \u2014 "),EX=n(Z9e,"A",{href:!0});var X6t=s(EX);Rfr=r(X6t,"TFConvBertForMaskedLM"),X6t.forEach(t),Bfr=r(Z9e," (ConvBERT model)"),Z9e.forEach(t),Pfr=i(re),_F=n(re,"LI",{});var exe=s(_F);r6e=n(exe,"STRONG",{});var z6t=s(r6e);$fr=r(z6t,"deberta"),z6t.forEach(t),Ifr=r(exe," \u2014 "),CX=n(exe,"A",{href:!0});var Q6t=s(CX);qfr=r(Q6t,"TFDebertaForMaskedLM"),Q6t.forEach(t),Nfr=r(exe," (DeBERTa model)"),exe.forEach(t),jfr=i(re),uF=n(re,"LI",{});var oxe=s(uF);t6e=n(oxe,"STRONG",{});var W6t=s(t6e);Dfr=r(W6t,"deberta-v2"),W6t.forEach(t),Gfr=r(oxe," \u2014 "),wX=n(oxe,"A",{href:!0});var H6t=s(wX);Ofr=r(H6t,"TFDebertaV2ForMaskedLM"),H6t.forEach(t),Vfr=r(oxe," (DeBERTa-v2 model)"),oxe.forEach(t),Xfr=i(re),bF=n(re,"LI",{});var rxe=s(bF);a6e=n(rxe,"STRONG",{});var U6t=s(a6e);zfr=r(U6t,"distilbert"),U6t.forEach(t),Qfr=r(rxe," \u2014 "),AX=n(rxe,"A",{href:!0});var J6t=s(AX);Wfr=r(J6t,"TFDistilBertForMaskedLM"),J6t.forEach(t),Hfr=r(rxe," (DistilBERT model)"),rxe.forEach(t),Ufr=i(re),vF=n(re,"LI",{});var txe=s(vF);n6e=n(txe,"STRONG",{});var Y6t=s(n6e);Jfr=r(Y6t,"electra"),Y6t.forEach(t),Yfr=r(txe," \u2014 "),yX=n(txe,"A",{href:!0});var K6t=s(yX);Kfr=r(K6t,"TFElectraForMaskedLM"),K6t.forEach(t),Zfr=r(txe," (ELECTRA model)"),txe.forEach(t),emr=i(re),FF=n(re,"LI",{});var axe=s(FF);s6e=n(axe,"STRONG",{});var Z6t=s(s6e);omr=r(Z6t,"flaubert"),Z6t.forEach(t),rmr=r(axe," \u2014 "),LX=n(axe,"A",{href:!0});var e1t=s(LX);tmr=r(e1t,"TFFlaubertWithLMHeadModel"),e1t.forEach(t),amr=r(axe," (FlauBERT model)"),axe.forEach(t),nmr=i(re),TF=n(re,"LI",{});var nxe=s(TF);l6e=n(nxe,"STRONG",{});var o1t=s(l6e);smr=r(o1t,"funnel"),o1t.forEach(t),lmr=r(nxe," \u2014 "),xX=n(nxe,"A",{href:!0});var r1t=s(xX);imr=r(r1t,"TFFunnelForMaskedLM"),r1t.forEach(t),dmr=r(nxe," (Funnel Transformer model)"),nxe.forEach(t),cmr=i(re),MF=n(re,"LI",{});var sxe=s(MF);i6e=n(sxe,"STRONG",{});var t1t=s(i6e);fmr=r(t1t,"layoutlm"),t1t.forEach(t),mmr=r(sxe," \u2014 "),kX=n(sxe,"A",{href:!0});var a1t=s(kX);gmr=r(a1t,"TFLayoutLMForMaskedLM"),a1t.forEach(t),hmr=r(sxe," (LayoutLM model)"),sxe.forEach(t),pmr=i(re),EF=n(re,"LI",{});var lxe=s(EF);d6e=n(lxe,"STRONG",{});var n1t=s(d6e);_mr=r(n1t,"longformer"),n1t.forEach(t),umr=r(lxe," \u2014 "),SX=n(lxe,"A",{href:!0});var s1t=s(SX);bmr=r(s1t,"TFLongformerForMaskedLM"),s1t.forEach(t),vmr=r(lxe," (Longformer model)"),lxe.forEach(t),Fmr=i(re),CF=n(re,"LI",{});var ixe=s(CF);c6e=n(ixe,"STRONG",{});var l1t=s(c6e);Tmr=r(l1t,"mobilebert"),l1t.forEach(t),Mmr=r(ixe," \u2014 "),RX=n(ixe,"A",{href:!0});var i1t=s(RX);Emr=r(i1t,"TFMobileBertForMaskedLM"),i1t.forEach(t),Cmr=r(ixe," (MobileBERT model)"),ixe.forEach(t),wmr=i(re),wF=n(re,"LI",{});var dxe=s(wF);f6e=n(dxe,"STRONG",{});var d1t=s(f6e);Amr=r(d1t,"mpnet"),d1t.forEach(t),ymr=r(dxe," \u2014 "),BX=n(dxe,"A",{href:!0});var c1t=s(BX);Lmr=r(c1t,"TFMPNetForMaskedLM"),c1t.forEach(t),xmr=r(dxe," (MPNet model)"),dxe.forEach(t),kmr=i(re),AF=n(re,"LI",{});var cxe=s(AF);m6e=n(cxe,"STRONG",{});var f1t=s(m6e);Smr=r(f1t,"rembert"),f1t.forEach(t),Rmr=r(cxe," \u2014 "),PX=n(cxe,"A",{href:!0});var m1t=s(PX);Bmr=r(m1t,"TFRemBertForMaskedLM"),m1t.forEach(t),Pmr=r(cxe," (RemBERT model)"),cxe.forEach(t),$mr=i(re),yF=n(re,"LI",{});var fxe=s(yF);g6e=n(fxe,"STRONG",{});var g1t=s(g6e);Imr=r(g1t,"roberta"),g1t.forEach(t),qmr=r(fxe," \u2014 "),$X=n(fxe,"A",{href:!0});var h1t=s($X);Nmr=r(h1t,"TFRobertaForMaskedLM"),h1t.forEach(t),jmr=r(fxe," (RoBERTa model)"),fxe.forEach(t),Dmr=i(re),LF=n(re,"LI",{});var mxe=s(LF);h6e=n(mxe,"STRONG",{});var p1t=s(h6e);Gmr=r(p1t,"roformer"),p1t.forEach(t),Omr=r(mxe," \u2014 "),IX=n(mxe,"A",{href:!0});var _1t=s(IX);Vmr=r(_1t,"TFRoFormerForMaskedLM"),_1t.forEach(t),Xmr=r(mxe," (RoFormer model)"),mxe.forEach(t),zmr=i(re),xF=n(re,"LI",{});var gxe=s(xF);p6e=n(gxe,"STRONG",{});var u1t=s(p6e);Qmr=r(u1t,"tapas"),u1t.forEach(t),Wmr=r(gxe," \u2014 "),qX=n(gxe,"A",{href:!0});var b1t=s(qX);Hmr=r(b1t,"TFTapasForMaskedLM"),b1t.forEach(t),Umr=r(gxe," (TAPAS model)"),gxe.forEach(t),Jmr=i(re),kF=n(re,"LI",{});var hxe=s(kF);_6e=n(hxe,"STRONG",{});var v1t=s(_6e);Ymr=r(v1t,"xlm"),v1t.forEach(t),Kmr=r(hxe," \u2014 "),NX=n(hxe,"A",{href:!0});var F1t=s(NX);Zmr=r(F1t,"TFXLMWithLMHeadModel"),F1t.forEach(t),egr=r(hxe," (XLM model)"),hxe.forEach(t),ogr=i(re),SF=n(re,"LI",{});var pxe=s(SF);u6e=n(pxe,"STRONG",{});var T1t=s(u6e);rgr=r(T1t,"xlm-roberta"),T1t.forEach(t),tgr=r(pxe," \u2014 "),jX=n(pxe,"A",{href:!0});var M1t=s(jX);agr=r(M1t,"TFXLMRobertaForMaskedLM"),M1t.forEach(t),ngr=r(pxe," (XLM-RoBERTa model)"),pxe.forEach(t),re.forEach(t),sgr=i(va),b6e=n(va,"P",{});var E1t=s(b6e);lgr=r(E1t,"Examples:"),E1t.forEach(t),igr=i(va),m(Hy.$$.fragment,va),va.forEach(t),Hl.forEach(t),mPe=i(c),Lc=n(c,"H2",{class:!0});var EIe=s(Lc);RF=n(EIe,"A",{id:!0,class:!0,href:!0});var C1t=s(RF);v6e=n(C1t,"SPAN",{});var w1t=s(v6e);m(Uy.$$.fragment,w1t),w1t.forEach(t),C1t.forEach(t),dgr=i(EIe),F6e=n(EIe,"SPAN",{});var A1t=s(F6e);cgr=r(A1t,"TFAutoModelForSeq2SeqLM"),A1t.forEach(t),EIe.forEach(t),gPe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);m(Jy.$$.fragment,Jl),fgr=i(Jl),xc=n(Jl,"P",{});var BJ=s(xc);mgr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DX=n(BJ,"A",{href:!0});var y1t=s(DX);ggr=r(y1t,"from_pretrained()"),y1t.forEach(t),hgr=r(BJ," class method or the "),GX=n(BJ,"A",{href:!0});var L1t=s(GX);pgr=r(L1t,"from_config()"),L1t.forEach(t),_gr=r(BJ,` class
method.`),BJ.forEach(t),ugr=i(Jl),Yy=n(Jl,"P",{});var CIe=s(Yy);bgr=r(CIe,"This class cannot be instantiated directly using "),T6e=n(CIe,"CODE",{});var x1t=s(T6e);vgr=r(x1t,"__init__()"),x1t.forEach(t),Fgr=r(CIe," (throws an error)."),CIe.forEach(t),Tgr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(Ky.$$.fragment,Yl),Mgr=i(Yl),M6e=n(Yl,"P",{});var k1t=s(M6e);Egr=r(k1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),k1t.forEach(t),Cgr=i(Yl),kc=n(Yl,"P",{});var PJ=s(kc);wgr=r(PJ,`Note:
Loading a model from its configuration file does `),E6e=n(PJ,"STRONG",{});var S1t=s(E6e);Agr=r(S1t,"not"),S1t.forEach(t),ygr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(PJ,"A",{href:!0});var R1t=s(OX);Lgr=r(R1t,"from_pretrained()"),R1t.forEach(t),xgr=r(PJ," to load the model weights."),PJ.forEach(t),kgr=i(Yl),C6e=n(Yl,"P",{});var B1t=s(C6e);Sgr=r(B1t,"Examples:"),B1t.forEach(t),Rgr=i(Yl),m(Zy.$$.fragment,Yl),Yl.forEach(t),Bgr=i(Jl),Fo=n(Jl,"DIV",{class:!0});var Fa=s(Fo);m(eL.$$.fragment,Fa),Pgr=i(Fa),w6e=n(Fa,"P",{});var P1t=s(w6e);$gr=r(P1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),P1t.forEach(t),Igr=i(Fa),Mn=n(Fa,"P",{});var gC=s(Mn);qgr=r(gC,"The model class to instantiate is selected based on the "),A6e=n(gC,"CODE",{});var $1t=s(A6e);Ngr=r($1t,"model_type"),$1t.forEach(t),jgr=r(gC,` property of the config object (either
passed as an argument or loaded from `),y6e=n(gC,"CODE",{});var I1t=s(y6e);Dgr=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),Ggr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(gC,"CODE",{});var q1t=s(L6e);Ogr=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),Vgr=r(gC,":"),gC.forEach(t),Xgr=i(Fa),be=n(Fa,"UL",{});var Ae=s(be);BF=n(Ae,"LI",{});var _xe=s(BF);x6e=n(_xe,"STRONG",{});var N1t=s(x6e);zgr=r(N1t,"bart"),N1t.forEach(t),Qgr=r(_xe," \u2014 "),VX=n(_xe,"A",{href:!0});var j1t=s(VX);Wgr=r(j1t,"TFBartForConditionalGeneration"),j1t.forEach(t),Hgr=r(_xe," (BART model)"),_xe.forEach(t),Ugr=i(Ae),PF=n(Ae,"LI",{});var uxe=s(PF);k6e=n(uxe,"STRONG",{});var D1t=s(k6e);Jgr=r(D1t,"blenderbot"),D1t.forEach(t),Ygr=r(uxe," \u2014 "),XX=n(uxe,"A",{href:!0});var G1t=s(XX);Kgr=r(G1t,"TFBlenderbotForConditionalGeneration"),G1t.forEach(t),Zgr=r(uxe," (Blenderbot model)"),uxe.forEach(t),ehr=i(Ae),$F=n(Ae,"LI",{});var bxe=s($F);S6e=n(bxe,"STRONG",{});var O1t=s(S6e);ohr=r(O1t,"blenderbot-small"),O1t.forEach(t),rhr=r(bxe," \u2014 "),zX=n(bxe,"A",{href:!0});var V1t=s(zX);thr=r(V1t,"TFBlenderbotSmallForConditionalGeneration"),V1t.forEach(t),ahr=r(bxe," (BlenderbotSmall model)"),bxe.forEach(t),nhr=i(Ae),IF=n(Ae,"LI",{});var vxe=s(IF);R6e=n(vxe,"STRONG",{});var X1t=s(R6e);shr=r(X1t,"encoder-decoder"),X1t.forEach(t),lhr=r(vxe," \u2014 "),QX=n(vxe,"A",{href:!0});var z1t=s(QX);ihr=r(z1t,"TFEncoderDecoderModel"),z1t.forEach(t),dhr=r(vxe," (Encoder decoder model)"),vxe.forEach(t),chr=i(Ae),qF=n(Ae,"LI",{});var Fxe=s(qF);B6e=n(Fxe,"STRONG",{});var Q1t=s(B6e);fhr=r(Q1t,"led"),Q1t.forEach(t),mhr=r(Fxe," \u2014 "),WX=n(Fxe,"A",{href:!0});var W1t=s(WX);ghr=r(W1t,"TFLEDForConditionalGeneration"),W1t.forEach(t),hhr=r(Fxe," (LED model)"),Fxe.forEach(t),phr=i(Ae),NF=n(Ae,"LI",{});var Txe=s(NF);P6e=n(Txe,"STRONG",{});var H1t=s(P6e);_hr=r(H1t,"marian"),H1t.forEach(t),uhr=r(Txe," \u2014 "),HX=n(Txe,"A",{href:!0});var U1t=s(HX);bhr=r(U1t,"TFMarianMTModel"),U1t.forEach(t),vhr=r(Txe," (Marian model)"),Txe.forEach(t),Fhr=i(Ae),jF=n(Ae,"LI",{});var Mxe=s(jF);$6e=n(Mxe,"STRONG",{});var J1t=s($6e);Thr=r(J1t,"mbart"),J1t.forEach(t),Mhr=r(Mxe," \u2014 "),UX=n(Mxe,"A",{href:!0});var Y1t=s(UX);Ehr=r(Y1t,"TFMBartForConditionalGeneration"),Y1t.forEach(t),Chr=r(Mxe," (mBART model)"),Mxe.forEach(t),whr=i(Ae),DF=n(Ae,"LI",{});var Exe=s(DF);I6e=n(Exe,"STRONG",{});var K1t=s(I6e);Ahr=r(K1t,"mt5"),K1t.forEach(t),yhr=r(Exe," \u2014 "),JX=n(Exe,"A",{href:!0});var Z1t=s(JX);Lhr=r(Z1t,"TFMT5ForConditionalGeneration"),Z1t.forEach(t),xhr=r(Exe," (mT5 model)"),Exe.forEach(t),khr=i(Ae),GF=n(Ae,"LI",{});var Cxe=s(GF);q6e=n(Cxe,"STRONG",{});var e4t=s(q6e);Shr=r(e4t,"pegasus"),e4t.forEach(t),Rhr=r(Cxe," \u2014 "),YX=n(Cxe,"A",{href:!0});var o4t=s(YX);Bhr=r(o4t,"TFPegasusForConditionalGeneration"),o4t.forEach(t),Phr=r(Cxe," (Pegasus model)"),Cxe.forEach(t),$hr=i(Ae),OF=n(Ae,"LI",{});var wxe=s(OF);N6e=n(wxe,"STRONG",{});var r4t=s(N6e);Ihr=r(r4t,"t5"),r4t.forEach(t),qhr=r(wxe," \u2014 "),KX=n(wxe,"A",{href:!0});var t4t=s(KX);Nhr=r(t4t,"TFT5ForConditionalGeneration"),t4t.forEach(t),jhr=r(wxe," (T5 model)"),wxe.forEach(t),Ae.forEach(t),Dhr=i(Fa),j6e=n(Fa,"P",{});var a4t=s(j6e);Ghr=r(a4t,"Examples:"),a4t.forEach(t),Ohr=i(Fa),m(oL.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),hPe=i(c),Sc=n(c,"H2",{class:!0});var wIe=s(Sc);VF=n(wIe,"A",{id:!0,class:!0,href:!0});var n4t=s(VF);D6e=n(n4t,"SPAN",{});var s4t=s(D6e);m(rL.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),Vhr=i(wIe),G6e=n(wIe,"SPAN",{});var l4t=s(G6e);Xhr=r(l4t,"TFAutoModelForSequenceClassification"),l4t.forEach(t),wIe.forEach(t),pPe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);m(tL.$$.fragment,Kl),zhr=i(Kl),Rc=n(Kl,"P",{});var $J=s(Rc);Qhr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZX=n($J,"A",{href:!0});var i4t=s(ZX);Whr=r(i4t,"from_pretrained()"),i4t.forEach(t),Hhr=r($J," class method or the "),ez=n($J,"A",{href:!0});var d4t=s(ez);Uhr=r(d4t,"from_config()"),d4t.forEach(t),Jhr=r($J,` class
method.`),$J.forEach(t),Yhr=i(Kl),aL=n(Kl,"P",{});var AIe=s(aL);Khr=r(AIe,"This class cannot be instantiated directly using "),O6e=n(AIe,"CODE",{});var c4t=s(O6e);Zhr=r(c4t,"__init__()"),c4t.forEach(t),epr=r(AIe," (throws an error)."),AIe.forEach(t),opr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(nL.$$.fragment,Zl),rpr=i(Zl),V6e=n(Zl,"P",{});var f4t=s(V6e);tpr=r(f4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),f4t.forEach(t),apr=i(Zl),Bc=n(Zl,"P",{});var IJ=s(Bc);npr=r(IJ,`Note:
Loading a model from its configuration file does `),X6e=n(IJ,"STRONG",{});var m4t=s(X6e);spr=r(m4t,"not"),m4t.forEach(t),lpr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(IJ,"A",{href:!0});var g4t=s(oz);ipr=r(g4t,"from_pretrained()"),g4t.forEach(t),dpr=r(IJ," to load the model weights."),IJ.forEach(t),cpr=i(Zl),z6e=n(Zl,"P",{});var h4t=s(z6e);fpr=r(h4t,"Examples:"),h4t.forEach(t),mpr=i(Zl),m(sL.$$.fragment,Zl),Zl.forEach(t),gpr=i(Kl),To=n(Kl,"DIV",{class:!0});var Ta=s(To);m(lL.$$.fragment,Ta),hpr=i(Ta),Q6e=n(Ta,"P",{});var p4t=s(Q6e);ppr=r(p4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),p4t.forEach(t),_pr=i(Ta),En=n(Ta,"P",{});var hC=s(En);upr=r(hC,"The model class to instantiate is selected based on the "),W6e=n(hC,"CODE",{});var _4t=s(W6e);bpr=r(_4t,"model_type"),_4t.forEach(t),vpr=r(hC,` property of the config object (either
passed as an argument or loaded from `),H6e=n(hC,"CODE",{});var u4t=s(H6e);Fpr=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),Tpr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U6e=n(hC,"CODE",{});var b4t=s(U6e);Mpr=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),Epr=r(hC,":"),hC.forEach(t),Cpr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);XF=n(Q,"LI",{});var Axe=s(XF);J6e=n(Axe,"STRONG",{});var v4t=s(J6e);wpr=r(v4t,"albert"),v4t.forEach(t),Apr=r(Axe," \u2014 "),rz=n(Axe,"A",{href:!0});var F4t=s(rz);ypr=r(F4t,"TFAlbertForSequenceClassification"),F4t.forEach(t),Lpr=r(Axe," (ALBERT model)"),Axe.forEach(t),xpr=i(Q),zF=n(Q,"LI",{});var yxe=s(zF);Y6e=n(yxe,"STRONG",{});var T4t=s(Y6e);kpr=r(T4t,"bert"),T4t.forEach(t),Spr=r(yxe," \u2014 "),tz=n(yxe,"A",{href:!0});var M4t=s(tz);Rpr=r(M4t,"TFBertForSequenceClassification"),M4t.forEach(t),Bpr=r(yxe," (BERT model)"),yxe.forEach(t),Ppr=i(Q),QF=n(Q,"LI",{});var Lxe=s(QF);K6e=n(Lxe,"STRONG",{});var E4t=s(K6e);$pr=r(E4t,"camembert"),E4t.forEach(t),Ipr=r(Lxe," \u2014 "),az=n(Lxe,"A",{href:!0});var C4t=s(az);qpr=r(C4t,"TFCamembertForSequenceClassification"),C4t.forEach(t),Npr=r(Lxe," (CamemBERT model)"),Lxe.forEach(t),jpr=i(Q),WF=n(Q,"LI",{});var xxe=s(WF);Z6e=n(xxe,"STRONG",{});var w4t=s(Z6e);Dpr=r(w4t,"convbert"),w4t.forEach(t),Gpr=r(xxe," \u2014 "),nz=n(xxe,"A",{href:!0});var A4t=s(nz);Opr=r(A4t,"TFConvBertForSequenceClassification"),A4t.forEach(t),Vpr=r(xxe," (ConvBERT model)"),xxe.forEach(t),Xpr=i(Q),HF=n(Q,"LI",{});var kxe=s(HF);e1e=n(kxe,"STRONG",{});var y4t=s(e1e);zpr=r(y4t,"ctrl"),y4t.forEach(t),Qpr=r(kxe," \u2014 "),sz=n(kxe,"A",{href:!0});var L4t=s(sz);Wpr=r(L4t,"TFCTRLForSequenceClassification"),L4t.forEach(t),Hpr=r(kxe," (CTRL model)"),kxe.forEach(t),Upr=i(Q),UF=n(Q,"LI",{});var Sxe=s(UF);o1e=n(Sxe,"STRONG",{});var x4t=s(o1e);Jpr=r(x4t,"deberta"),x4t.forEach(t),Ypr=r(Sxe," \u2014 "),lz=n(Sxe,"A",{href:!0});var k4t=s(lz);Kpr=r(k4t,"TFDebertaForSequenceClassification"),k4t.forEach(t),Zpr=r(Sxe," (DeBERTa model)"),Sxe.forEach(t),e_r=i(Q),JF=n(Q,"LI",{});var Rxe=s(JF);r1e=n(Rxe,"STRONG",{});var S4t=s(r1e);o_r=r(S4t,"deberta-v2"),S4t.forEach(t),r_r=r(Rxe," \u2014 "),iz=n(Rxe,"A",{href:!0});var R4t=s(iz);t_r=r(R4t,"TFDebertaV2ForSequenceClassification"),R4t.forEach(t),a_r=r(Rxe," (DeBERTa-v2 model)"),Rxe.forEach(t),n_r=i(Q),YF=n(Q,"LI",{});var Bxe=s(YF);t1e=n(Bxe,"STRONG",{});var B4t=s(t1e);s_r=r(B4t,"distilbert"),B4t.forEach(t),l_r=r(Bxe," \u2014 "),dz=n(Bxe,"A",{href:!0});var P4t=s(dz);i_r=r(P4t,"TFDistilBertForSequenceClassification"),P4t.forEach(t),d_r=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),c_r=i(Q),KF=n(Q,"LI",{});var Pxe=s(KF);a1e=n(Pxe,"STRONG",{});var $4t=s(a1e);f_r=r($4t,"electra"),$4t.forEach(t),m_r=r(Pxe," \u2014 "),cz=n(Pxe,"A",{href:!0});var I4t=s(cz);g_r=r(I4t,"TFElectraForSequenceClassification"),I4t.forEach(t),h_r=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),p_r=i(Q),ZF=n(Q,"LI",{});var $xe=s(ZF);n1e=n($xe,"STRONG",{});var q4t=s(n1e);__r=r(q4t,"flaubert"),q4t.forEach(t),u_r=r($xe," \u2014 "),fz=n($xe,"A",{href:!0});var N4t=s(fz);b_r=r(N4t,"TFFlaubertForSequenceClassification"),N4t.forEach(t),v_r=r($xe," (FlauBERT model)"),$xe.forEach(t),F_r=i(Q),eT=n(Q,"LI",{});var Ixe=s(eT);s1e=n(Ixe,"STRONG",{});var j4t=s(s1e);T_r=r(j4t,"funnel"),j4t.forEach(t),M_r=r(Ixe," \u2014 "),mz=n(Ixe,"A",{href:!0});var D4t=s(mz);E_r=r(D4t,"TFFunnelForSequenceClassification"),D4t.forEach(t),C_r=r(Ixe," (Funnel Transformer model)"),Ixe.forEach(t),w_r=i(Q),oT=n(Q,"LI",{});var qxe=s(oT);l1e=n(qxe,"STRONG",{});var G4t=s(l1e);A_r=r(G4t,"gpt2"),G4t.forEach(t),y_r=r(qxe," \u2014 "),gz=n(qxe,"A",{href:!0});var O4t=s(gz);L_r=r(O4t,"TFGPT2ForSequenceClassification"),O4t.forEach(t),x_r=r(qxe," (OpenAI GPT-2 model)"),qxe.forEach(t),k_r=i(Q),rT=n(Q,"LI",{});var Nxe=s(rT);i1e=n(Nxe,"STRONG",{});var V4t=s(i1e);S_r=r(V4t,"gptj"),V4t.forEach(t),R_r=r(Nxe," \u2014 "),hz=n(Nxe,"A",{href:!0});var X4t=s(hz);B_r=r(X4t,"TFGPTJForSequenceClassification"),X4t.forEach(t),P_r=r(Nxe," (GPT-J model)"),Nxe.forEach(t),$_r=i(Q),tT=n(Q,"LI",{});var jxe=s(tT);d1e=n(jxe,"STRONG",{});var z4t=s(d1e);I_r=r(z4t,"layoutlm"),z4t.forEach(t),q_r=r(jxe," \u2014 "),pz=n(jxe,"A",{href:!0});var Q4t=s(pz);N_r=r(Q4t,"TFLayoutLMForSequenceClassification"),Q4t.forEach(t),j_r=r(jxe," (LayoutLM model)"),jxe.forEach(t),D_r=i(Q),aT=n(Q,"LI",{});var Dxe=s(aT);c1e=n(Dxe,"STRONG",{});var W4t=s(c1e);G_r=r(W4t,"longformer"),W4t.forEach(t),O_r=r(Dxe," \u2014 "),_z=n(Dxe,"A",{href:!0});var H4t=s(_z);V_r=r(H4t,"TFLongformerForSequenceClassification"),H4t.forEach(t),X_r=r(Dxe," (Longformer model)"),Dxe.forEach(t),z_r=i(Q),nT=n(Q,"LI",{});var Gxe=s(nT);f1e=n(Gxe,"STRONG",{});var U4t=s(f1e);Q_r=r(U4t,"mobilebert"),U4t.forEach(t),W_r=r(Gxe," \u2014 "),uz=n(Gxe,"A",{href:!0});var J4t=s(uz);H_r=r(J4t,"TFMobileBertForSequenceClassification"),J4t.forEach(t),U_r=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),J_r=i(Q),sT=n(Q,"LI",{});var Oxe=s(sT);m1e=n(Oxe,"STRONG",{});var Y4t=s(m1e);Y_r=r(Y4t,"mpnet"),Y4t.forEach(t),K_r=r(Oxe," \u2014 "),bz=n(Oxe,"A",{href:!0});var K4t=s(bz);Z_r=r(K4t,"TFMPNetForSequenceClassification"),K4t.forEach(t),eur=r(Oxe," (MPNet model)"),Oxe.forEach(t),our=i(Q),lT=n(Q,"LI",{});var Vxe=s(lT);g1e=n(Vxe,"STRONG",{});var Z4t=s(g1e);rur=r(Z4t,"openai-gpt"),Z4t.forEach(t),tur=r(Vxe," \u2014 "),vz=n(Vxe,"A",{href:!0});var ebt=s(vz);aur=r(ebt,"TFOpenAIGPTForSequenceClassification"),ebt.forEach(t),nur=r(Vxe," (OpenAI GPT model)"),Vxe.forEach(t),sur=i(Q),iT=n(Q,"LI",{});var Xxe=s(iT);h1e=n(Xxe,"STRONG",{});var obt=s(h1e);lur=r(obt,"rembert"),obt.forEach(t),iur=r(Xxe," \u2014 "),Fz=n(Xxe,"A",{href:!0});var rbt=s(Fz);dur=r(rbt,"TFRemBertForSequenceClassification"),rbt.forEach(t),cur=r(Xxe," (RemBERT model)"),Xxe.forEach(t),fur=i(Q),dT=n(Q,"LI",{});var zxe=s(dT);p1e=n(zxe,"STRONG",{});var tbt=s(p1e);mur=r(tbt,"roberta"),tbt.forEach(t),gur=r(zxe," \u2014 "),Tz=n(zxe,"A",{href:!0});var abt=s(Tz);hur=r(abt,"TFRobertaForSequenceClassification"),abt.forEach(t),pur=r(zxe," (RoBERTa model)"),zxe.forEach(t),_ur=i(Q),cT=n(Q,"LI",{});var Qxe=s(cT);_1e=n(Qxe,"STRONG",{});var nbt=s(_1e);uur=r(nbt,"roformer"),nbt.forEach(t),bur=r(Qxe," \u2014 "),Mz=n(Qxe,"A",{href:!0});var sbt=s(Mz);vur=r(sbt,"TFRoFormerForSequenceClassification"),sbt.forEach(t),Fur=r(Qxe," (RoFormer model)"),Qxe.forEach(t),Tur=i(Q),fT=n(Q,"LI",{});var Wxe=s(fT);u1e=n(Wxe,"STRONG",{});var lbt=s(u1e);Mur=r(lbt,"tapas"),lbt.forEach(t),Eur=r(Wxe," \u2014 "),Ez=n(Wxe,"A",{href:!0});var ibt=s(Ez);Cur=r(ibt,"TFTapasForSequenceClassification"),ibt.forEach(t),wur=r(Wxe," (TAPAS model)"),Wxe.forEach(t),Aur=i(Q),mT=n(Q,"LI",{});var Hxe=s(mT);b1e=n(Hxe,"STRONG",{});var dbt=s(b1e);yur=r(dbt,"transfo-xl"),dbt.forEach(t),Lur=r(Hxe," \u2014 "),Cz=n(Hxe,"A",{href:!0});var cbt=s(Cz);xur=r(cbt,"TFTransfoXLForSequenceClassification"),cbt.forEach(t),kur=r(Hxe," (Transformer-XL model)"),Hxe.forEach(t),Sur=i(Q),gT=n(Q,"LI",{});var Uxe=s(gT);v1e=n(Uxe,"STRONG",{});var fbt=s(v1e);Rur=r(fbt,"xlm"),fbt.forEach(t),Bur=r(Uxe," \u2014 "),wz=n(Uxe,"A",{href:!0});var mbt=s(wz);Pur=r(mbt,"TFXLMForSequenceClassification"),mbt.forEach(t),$ur=r(Uxe," (XLM model)"),Uxe.forEach(t),Iur=i(Q),hT=n(Q,"LI",{});var Jxe=s(hT);F1e=n(Jxe,"STRONG",{});var gbt=s(F1e);qur=r(gbt,"xlm-roberta"),gbt.forEach(t),Nur=r(Jxe," \u2014 "),Az=n(Jxe,"A",{href:!0});var hbt=s(Az);jur=r(hbt,"TFXLMRobertaForSequenceClassification"),hbt.forEach(t),Dur=r(Jxe," (XLM-RoBERTa model)"),Jxe.forEach(t),Gur=i(Q),pT=n(Q,"LI",{});var Yxe=s(pT);T1e=n(Yxe,"STRONG",{});var pbt=s(T1e);Our=r(pbt,"xlnet"),pbt.forEach(t),Vur=r(Yxe," \u2014 "),yz=n(Yxe,"A",{href:!0});var _bt=s(yz);Xur=r(_bt,"TFXLNetForSequenceClassification"),_bt.forEach(t),zur=r(Yxe," (XLNet model)"),Yxe.forEach(t),Q.forEach(t),Qur=i(Ta),M1e=n(Ta,"P",{});var ubt=s(M1e);Wur=r(ubt,"Examples:"),ubt.forEach(t),Hur=i(Ta),m(iL.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),_Pe=i(c),Pc=n(c,"H2",{class:!0});var yIe=s(Pc);_T=n(yIe,"A",{id:!0,class:!0,href:!0});var bbt=s(_T);E1e=n(bbt,"SPAN",{});var vbt=s(E1e);m(dL.$$.fragment,vbt),vbt.forEach(t),bbt.forEach(t),Uur=i(yIe),C1e=n(yIe,"SPAN",{});var Fbt=s(C1e);Jur=r(Fbt,"TFAutoModelForMultipleChoice"),Fbt.forEach(t),yIe.forEach(t),uPe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);m(cL.$$.fragment,ei),Yur=i(ei),$c=n(ei,"P",{});var qJ=s($c);Kur=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Lz=n(qJ,"A",{href:!0});var Tbt=s(Lz);Zur=r(Tbt,"from_pretrained()"),Tbt.forEach(t),e6r=r(qJ," class method or the "),xz=n(qJ,"A",{href:!0});var Mbt=s(xz);o6r=r(Mbt,"from_config()"),Mbt.forEach(t),r6r=r(qJ,` class
method.`),qJ.forEach(t),t6r=i(ei),fL=n(ei,"P",{});var LIe=s(fL);a6r=r(LIe,"This class cannot be instantiated directly using "),w1e=n(LIe,"CODE",{});var Ebt=s(w1e);n6r=r(Ebt,"__init__()"),Ebt.forEach(t),s6r=r(LIe," (throws an error)."),LIe.forEach(t),l6r=i(ei),Ft=n(ei,"DIV",{class:!0});var oi=s(Ft);m(mL.$$.fragment,oi),i6r=i(oi),A1e=n(oi,"P",{});var Cbt=s(A1e);d6r=r(Cbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Cbt.forEach(t),c6r=i(oi),Ic=n(oi,"P",{});var NJ=s(Ic);f6r=r(NJ,`Note:
Loading a model from its configuration file does `),y1e=n(NJ,"STRONG",{});var wbt=s(y1e);m6r=r(wbt,"not"),wbt.forEach(t),g6r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(NJ,"A",{href:!0});var Abt=s(kz);h6r=r(Abt,"from_pretrained()"),Abt.forEach(t),p6r=r(NJ," to load the model weights."),NJ.forEach(t),_6r=i(oi),L1e=n(oi,"P",{});var ybt=s(L1e);u6r=r(ybt,"Examples:"),ybt.forEach(t),b6r=i(oi),m(gL.$$.fragment,oi),oi.forEach(t),v6r=i(ei),Mo=n(ei,"DIV",{class:!0});var Ma=s(Mo);m(hL.$$.fragment,Ma),F6r=i(Ma),x1e=n(Ma,"P",{});var Lbt=s(x1e);T6r=r(Lbt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Lbt.forEach(t),M6r=i(Ma),Cn=n(Ma,"P",{});var pC=s(Cn);E6r=r(pC,"The model class to instantiate is selected based on the "),k1e=n(pC,"CODE",{});var xbt=s(k1e);C6r=r(xbt,"model_type"),xbt.forEach(t),w6r=r(pC,` property of the config object (either
passed as an argument or loaded from `),S1e=n(pC,"CODE",{});var kbt=s(S1e);A6r=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),y6r=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(pC,"CODE",{});var Sbt=s(R1e);L6r=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),x6r=r(pC,":"),pC.forEach(t),k6r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);uT=n(ie,"LI",{});var Kxe=s(uT);B1e=n(Kxe,"STRONG",{});var Rbt=s(B1e);S6r=r(Rbt,"albert"),Rbt.forEach(t),R6r=r(Kxe," \u2014 "),Sz=n(Kxe,"A",{href:!0});var Bbt=s(Sz);B6r=r(Bbt,"TFAlbertForMultipleChoice"),Bbt.forEach(t),P6r=r(Kxe," (ALBERT model)"),Kxe.forEach(t),$6r=i(ie),bT=n(ie,"LI",{});var Zxe=s(bT);P1e=n(Zxe,"STRONG",{});var Pbt=s(P1e);I6r=r(Pbt,"bert"),Pbt.forEach(t),q6r=r(Zxe," \u2014 "),Rz=n(Zxe,"A",{href:!0});var $bt=s(Rz);N6r=r($bt,"TFBertForMultipleChoice"),$bt.forEach(t),j6r=r(Zxe," (BERT model)"),Zxe.forEach(t),D6r=i(ie),vT=n(ie,"LI",{});var eke=s(vT);$1e=n(eke,"STRONG",{});var Ibt=s($1e);G6r=r(Ibt,"camembert"),Ibt.forEach(t),O6r=r(eke," \u2014 "),Bz=n(eke,"A",{href:!0});var qbt=s(Bz);V6r=r(qbt,"TFCamembertForMultipleChoice"),qbt.forEach(t),X6r=r(eke," (CamemBERT model)"),eke.forEach(t),z6r=i(ie),FT=n(ie,"LI",{});var oke=s(FT);I1e=n(oke,"STRONG",{});var Nbt=s(I1e);Q6r=r(Nbt,"convbert"),Nbt.forEach(t),W6r=r(oke," \u2014 "),Pz=n(oke,"A",{href:!0});var jbt=s(Pz);H6r=r(jbt,"TFConvBertForMultipleChoice"),jbt.forEach(t),U6r=r(oke," (ConvBERT model)"),oke.forEach(t),J6r=i(ie),TT=n(ie,"LI",{});var rke=s(TT);q1e=n(rke,"STRONG",{});var Dbt=s(q1e);Y6r=r(Dbt,"distilbert"),Dbt.forEach(t),K6r=r(rke," \u2014 "),$z=n(rke,"A",{href:!0});var Gbt=s($z);Z6r=r(Gbt,"TFDistilBertForMultipleChoice"),Gbt.forEach(t),e1r=r(rke," (DistilBERT model)"),rke.forEach(t),o1r=i(ie),MT=n(ie,"LI",{});var tke=s(MT);N1e=n(tke,"STRONG",{});var Obt=s(N1e);r1r=r(Obt,"electra"),Obt.forEach(t),t1r=r(tke," \u2014 "),Iz=n(tke,"A",{href:!0});var Vbt=s(Iz);a1r=r(Vbt,"TFElectraForMultipleChoice"),Vbt.forEach(t),n1r=r(tke," (ELECTRA model)"),tke.forEach(t),s1r=i(ie),ET=n(ie,"LI",{});var ake=s(ET);j1e=n(ake,"STRONG",{});var Xbt=s(j1e);l1r=r(Xbt,"flaubert"),Xbt.forEach(t),i1r=r(ake," \u2014 "),qz=n(ake,"A",{href:!0});var zbt=s(qz);d1r=r(zbt,"TFFlaubertForMultipleChoice"),zbt.forEach(t),c1r=r(ake," (FlauBERT model)"),ake.forEach(t),f1r=i(ie),CT=n(ie,"LI",{});var nke=s(CT);D1e=n(nke,"STRONG",{});var Qbt=s(D1e);m1r=r(Qbt,"funnel"),Qbt.forEach(t),g1r=r(nke," \u2014 "),Nz=n(nke,"A",{href:!0});var Wbt=s(Nz);h1r=r(Wbt,"TFFunnelForMultipleChoice"),Wbt.forEach(t),p1r=r(nke," (Funnel Transformer model)"),nke.forEach(t),_1r=i(ie),wT=n(ie,"LI",{});var ske=s(wT);G1e=n(ske,"STRONG",{});var Hbt=s(G1e);u1r=r(Hbt,"longformer"),Hbt.forEach(t),b1r=r(ske," \u2014 "),jz=n(ske,"A",{href:!0});var Ubt=s(jz);v1r=r(Ubt,"TFLongformerForMultipleChoice"),Ubt.forEach(t),F1r=r(ske," (Longformer model)"),ske.forEach(t),T1r=i(ie),AT=n(ie,"LI",{});var lke=s(AT);O1e=n(lke,"STRONG",{});var Jbt=s(O1e);M1r=r(Jbt,"mobilebert"),Jbt.forEach(t),E1r=r(lke," \u2014 "),Dz=n(lke,"A",{href:!0});var Ybt=s(Dz);C1r=r(Ybt,"TFMobileBertForMultipleChoice"),Ybt.forEach(t),w1r=r(lke," (MobileBERT model)"),lke.forEach(t),A1r=i(ie),yT=n(ie,"LI",{});var ike=s(yT);V1e=n(ike,"STRONG",{});var Kbt=s(V1e);y1r=r(Kbt,"mpnet"),Kbt.forEach(t),L1r=r(ike," \u2014 "),Gz=n(ike,"A",{href:!0});var Zbt=s(Gz);x1r=r(Zbt,"TFMPNetForMultipleChoice"),Zbt.forEach(t),k1r=r(ike," (MPNet model)"),ike.forEach(t),S1r=i(ie),LT=n(ie,"LI",{});var dke=s(LT);X1e=n(dke,"STRONG",{});var e2t=s(X1e);R1r=r(e2t,"rembert"),e2t.forEach(t),B1r=r(dke," \u2014 "),Oz=n(dke,"A",{href:!0});var o2t=s(Oz);P1r=r(o2t,"TFRemBertForMultipleChoice"),o2t.forEach(t),$1r=r(dke," (RemBERT model)"),dke.forEach(t),I1r=i(ie),xT=n(ie,"LI",{});var cke=s(xT);z1e=n(cke,"STRONG",{});var r2t=s(z1e);q1r=r(r2t,"roberta"),r2t.forEach(t),N1r=r(cke," \u2014 "),Vz=n(cke,"A",{href:!0});var t2t=s(Vz);j1r=r(t2t,"TFRobertaForMultipleChoice"),t2t.forEach(t),D1r=r(cke," (RoBERTa model)"),cke.forEach(t),G1r=i(ie),kT=n(ie,"LI",{});var fke=s(kT);Q1e=n(fke,"STRONG",{});var a2t=s(Q1e);O1r=r(a2t,"roformer"),a2t.forEach(t),V1r=r(fke," \u2014 "),Xz=n(fke,"A",{href:!0});var n2t=s(Xz);X1r=r(n2t,"TFRoFormerForMultipleChoice"),n2t.forEach(t),z1r=r(fke," (RoFormer model)"),fke.forEach(t),Q1r=i(ie),ST=n(ie,"LI",{});var mke=s(ST);W1e=n(mke,"STRONG",{});var s2t=s(W1e);W1r=r(s2t,"xlm"),s2t.forEach(t),H1r=r(mke," \u2014 "),zz=n(mke,"A",{href:!0});var l2t=s(zz);U1r=r(l2t,"TFXLMForMultipleChoice"),l2t.forEach(t),J1r=r(mke," (XLM model)"),mke.forEach(t),Y1r=i(ie),RT=n(ie,"LI",{});var gke=s(RT);H1e=n(gke,"STRONG",{});var i2t=s(H1e);K1r=r(i2t,"xlm-roberta"),i2t.forEach(t),Z1r=r(gke," \u2014 "),Qz=n(gke,"A",{href:!0});var d2t=s(Qz);e4r=r(d2t,"TFXLMRobertaForMultipleChoice"),d2t.forEach(t),o4r=r(gke," (XLM-RoBERTa model)"),gke.forEach(t),r4r=i(ie),BT=n(ie,"LI",{});var hke=s(BT);U1e=n(hke,"STRONG",{});var c2t=s(U1e);t4r=r(c2t,"xlnet"),c2t.forEach(t),a4r=r(hke," \u2014 "),Wz=n(hke,"A",{href:!0});var f2t=s(Wz);n4r=r(f2t,"TFXLNetForMultipleChoice"),f2t.forEach(t),s4r=r(hke," (XLNet model)"),hke.forEach(t),ie.forEach(t),l4r=i(Ma),J1e=n(Ma,"P",{});var m2t=s(J1e);i4r=r(m2t,"Examples:"),m2t.forEach(t),d4r=i(Ma),m(pL.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),bPe=i(c),qc=n(c,"H2",{class:!0});var xIe=s(qc);PT=n(xIe,"A",{id:!0,class:!0,href:!0});var g2t=s(PT);Y1e=n(g2t,"SPAN",{});var h2t=s(Y1e);m(_L.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),c4r=i(xIe),K1e=n(xIe,"SPAN",{});var p2t=s(K1e);f4r=r(p2t,"TFAutoModelForTableQuestionAnswering"),p2t.forEach(t),xIe.forEach(t),vPe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);m(uL.$$.fragment,ri),m4r=i(ri),Nc=n(ri,"P",{});var jJ=s(Nc);g4r=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Hz=n(jJ,"A",{href:!0});var _2t=s(Hz);h4r=r(_2t,"from_pretrained()"),_2t.forEach(t),p4r=r(jJ," class method or the "),Uz=n(jJ,"A",{href:!0});var u2t=s(Uz);_4r=r(u2t,"from_config()"),u2t.forEach(t),u4r=r(jJ,` class
method.`),jJ.forEach(t),b4r=i(ri),bL=n(ri,"P",{});var kIe=s(bL);v4r=r(kIe,"This class cannot be instantiated directly using "),Z1e=n(kIe,"CODE",{});var b2t=s(Z1e);F4r=r(b2t,"__init__()"),b2t.forEach(t),T4r=r(kIe," (throws an error)."),kIe.forEach(t),M4r=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(vL.$$.fragment,ti),E4r=i(ti),e4e=n(ti,"P",{});var v2t=s(e4e);C4r=r(v2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),v2t.forEach(t),w4r=i(ti),jc=n(ti,"P",{});var DJ=s(jc);A4r=r(DJ,`Note:
Loading a model from its configuration file does `),o4e=n(DJ,"STRONG",{});var F2t=s(o4e);y4r=r(F2t,"not"),F2t.forEach(t),L4r=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(DJ,"A",{href:!0});var T2t=s(Jz);x4r=r(T2t,"from_pretrained()"),T2t.forEach(t),k4r=r(DJ," to load the model weights."),DJ.forEach(t),S4r=i(ti),r4e=n(ti,"P",{});var M2t=s(r4e);R4r=r(M2t,"Examples:"),M2t.forEach(t),B4r=i(ti),m(FL.$$.fragment,ti),ti.forEach(t),P4r=i(ri),Eo=n(ri,"DIV",{class:!0});var Ea=s(Eo);m(TL.$$.fragment,Ea),$4r=i(Ea),t4e=n(Ea,"P",{});var E2t=s(t4e);I4r=r(E2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),E2t.forEach(t),q4r=i(Ea),wn=n(Ea,"P",{});var _C=s(wn);N4r=r(_C,"The model class to instantiate is selected based on the "),a4e=n(_C,"CODE",{});var C2t=s(a4e);j4r=r(C2t,"model_type"),C2t.forEach(t),D4r=r(_C,` property of the config object (either
passed as an argument or loaded from `),n4e=n(_C,"CODE",{});var w2t=s(n4e);G4r=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),O4r=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s4e=n(_C,"CODE",{});var A2t=s(s4e);V4r=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),X4r=r(_C,":"),_C.forEach(t),z4r=i(Ea),l4e=n(Ea,"UL",{});var y2t=s(l4e);$T=n(y2t,"LI",{});var pke=s($T);i4e=n(pke,"STRONG",{});var L2t=s(i4e);Q4r=r(L2t,"tapas"),L2t.forEach(t),W4r=r(pke," \u2014 "),Yz=n(pke,"A",{href:!0});var x2t=s(Yz);H4r=r(x2t,"TFTapasForQuestionAnswering"),x2t.forEach(t),U4r=r(pke," (TAPAS model)"),pke.forEach(t),y2t.forEach(t),J4r=i(Ea),d4e=n(Ea,"P",{});var k2t=s(d4e);Y4r=r(k2t,"Examples:"),k2t.forEach(t),K4r=i(Ea),m(ML.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),FPe=i(c),Dc=n(c,"H2",{class:!0});var SIe=s(Dc);IT=n(SIe,"A",{id:!0,class:!0,href:!0});var S2t=s(IT);c4e=n(S2t,"SPAN",{});var R2t=s(c4e);m(EL.$$.fragment,R2t),R2t.forEach(t),S2t.forEach(t),Z4r=i(SIe),f4e=n(SIe,"SPAN",{});var B2t=s(f4e);ebr=r(B2t,"TFAutoModelForTokenClassification"),B2t.forEach(t),SIe.forEach(t),TPe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(CL.$$.fragment,ai),obr=i(ai),Gc=n(ai,"P",{});var GJ=s(Gc);rbr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Kz=n(GJ,"A",{href:!0});var P2t=s(Kz);tbr=r(P2t,"from_pretrained()"),P2t.forEach(t),abr=r(GJ," class method or the "),Zz=n(GJ,"A",{href:!0});var $2t=s(Zz);nbr=r($2t,"from_config()"),$2t.forEach(t),sbr=r(GJ,` class
method.`),GJ.forEach(t),lbr=i(ai),wL=n(ai,"P",{});var RIe=s(wL);ibr=r(RIe,"This class cannot be instantiated directly using "),m4e=n(RIe,"CODE",{});var I2t=s(m4e);dbr=r(I2t,"__init__()"),I2t.forEach(t),cbr=r(RIe," (throws an error)."),RIe.forEach(t),fbr=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(AL.$$.fragment,ni),mbr=i(ni),g4e=n(ni,"P",{});var q2t=s(g4e);gbr=r(q2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),q2t.forEach(t),hbr=i(ni),Oc=n(ni,"P",{});var OJ=s(Oc);pbr=r(OJ,`Note:
Loading a model from its configuration file does `),h4e=n(OJ,"STRONG",{});var N2t=s(h4e);_br=r(N2t,"not"),N2t.forEach(t),ubr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=n(OJ,"A",{href:!0});var j2t=s(eQ);bbr=r(j2t,"from_pretrained()"),j2t.forEach(t),vbr=r(OJ," to load the model weights."),OJ.forEach(t),Fbr=i(ni),p4e=n(ni,"P",{});var D2t=s(p4e);Tbr=r(D2t,"Examples:"),D2t.forEach(t),Mbr=i(ni),m(yL.$$.fragment,ni),ni.forEach(t),Ebr=i(ai),Co=n(ai,"DIV",{class:!0});var Ca=s(Co);m(LL.$$.fragment,Ca),Cbr=i(Ca),_4e=n(Ca,"P",{});var G2t=s(_4e);wbr=r(G2t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G2t.forEach(t),Abr=i(Ca),An=n(Ca,"P",{});var uC=s(An);ybr=r(uC,"The model class to instantiate is selected based on the "),u4e=n(uC,"CODE",{});var O2t=s(u4e);Lbr=r(O2t,"model_type"),O2t.forEach(t),xbr=r(uC,` property of the config object (either
passed as an argument or loaded from `),b4e=n(uC,"CODE",{});var V2t=s(b4e);kbr=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),Sbr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v4e=n(uC,"CODE",{});var X2t=s(v4e);Rbr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),Bbr=r(uC,":"),uC.forEach(t),Pbr=i(Ca),K=n(Ca,"UL",{});var te=s(K);qT=n(te,"LI",{});var _ke=s(qT);F4e=n(_ke,"STRONG",{});var z2t=s(F4e);$br=r(z2t,"albert"),z2t.forEach(t),Ibr=r(_ke," \u2014 "),oQ=n(_ke,"A",{href:!0});var Q2t=s(oQ);qbr=r(Q2t,"TFAlbertForTokenClassification"),Q2t.forEach(t),Nbr=r(_ke," (ALBERT model)"),_ke.forEach(t),jbr=i(te),NT=n(te,"LI",{});var uke=s(NT);T4e=n(uke,"STRONG",{});var W2t=s(T4e);Dbr=r(W2t,"bert"),W2t.forEach(t),Gbr=r(uke," \u2014 "),rQ=n(uke,"A",{href:!0});var H2t=s(rQ);Obr=r(H2t,"TFBertForTokenClassification"),H2t.forEach(t),Vbr=r(uke," (BERT model)"),uke.forEach(t),Xbr=i(te),jT=n(te,"LI",{});var bke=s(jT);M4e=n(bke,"STRONG",{});var U2t=s(M4e);zbr=r(U2t,"camembert"),U2t.forEach(t),Qbr=r(bke," \u2014 "),tQ=n(bke,"A",{href:!0});var J2t=s(tQ);Wbr=r(J2t,"TFCamembertForTokenClassification"),J2t.forEach(t),Hbr=r(bke," (CamemBERT model)"),bke.forEach(t),Ubr=i(te),DT=n(te,"LI",{});var vke=s(DT);E4e=n(vke,"STRONG",{});var Y2t=s(E4e);Jbr=r(Y2t,"convbert"),Y2t.forEach(t),Ybr=r(vke," \u2014 "),aQ=n(vke,"A",{href:!0});var K2t=s(aQ);Kbr=r(K2t,"TFConvBertForTokenClassification"),K2t.forEach(t),Zbr=r(vke," (ConvBERT model)"),vke.forEach(t),e2r=i(te),GT=n(te,"LI",{});var Fke=s(GT);C4e=n(Fke,"STRONG",{});var Z2t=s(C4e);o2r=r(Z2t,"deberta"),Z2t.forEach(t),r2r=r(Fke," \u2014 "),nQ=n(Fke,"A",{href:!0});var e5t=s(nQ);t2r=r(e5t,"TFDebertaForTokenClassification"),e5t.forEach(t),a2r=r(Fke," (DeBERTa model)"),Fke.forEach(t),n2r=i(te),OT=n(te,"LI",{});var Tke=s(OT);w4e=n(Tke,"STRONG",{});var o5t=s(w4e);s2r=r(o5t,"deberta-v2"),o5t.forEach(t),l2r=r(Tke," \u2014 "),sQ=n(Tke,"A",{href:!0});var r5t=s(sQ);i2r=r(r5t,"TFDebertaV2ForTokenClassification"),r5t.forEach(t),d2r=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),c2r=i(te),VT=n(te,"LI",{});var Mke=s(VT);A4e=n(Mke,"STRONG",{});var t5t=s(A4e);f2r=r(t5t,"distilbert"),t5t.forEach(t),m2r=r(Mke," \u2014 "),lQ=n(Mke,"A",{href:!0});var a5t=s(lQ);g2r=r(a5t,"TFDistilBertForTokenClassification"),a5t.forEach(t),h2r=r(Mke," (DistilBERT model)"),Mke.forEach(t),p2r=i(te),XT=n(te,"LI",{});var Eke=s(XT);y4e=n(Eke,"STRONG",{});var n5t=s(y4e);_2r=r(n5t,"electra"),n5t.forEach(t),u2r=r(Eke," \u2014 "),iQ=n(Eke,"A",{href:!0});var s5t=s(iQ);b2r=r(s5t,"TFElectraForTokenClassification"),s5t.forEach(t),v2r=r(Eke," (ELECTRA model)"),Eke.forEach(t),F2r=i(te),zT=n(te,"LI",{});var Cke=s(zT);L4e=n(Cke,"STRONG",{});var l5t=s(L4e);T2r=r(l5t,"flaubert"),l5t.forEach(t),M2r=r(Cke," \u2014 "),dQ=n(Cke,"A",{href:!0});var i5t=s(dQ);E2r=r(i5t,"TFFlaubertForTokenClassification"),i5t.forEach(t),C2r=r(Cke," (FlauBERT model)"),Cke.forEach(t),w2r=i(te),QT=n(te,"LI",{});var wke=s(QT);x4e=n(wke,"STRONG",{});var d5t=s(x4e);A2r=r(d5t,"funnel"),d5t.forEach(t),y2r=r(wke," \u2014 "),cQ=n(wke,"A",{href:!0});var c5t=s(cQ);L2r=r(c5t,"TFFunnelForTokenClassification"),c5t.forEach(t),x2r=r(wke," (Funnel Transformer model)"),wke.forEach(t),k2r=i(te),WT=n(te,"LI",{});var Ake=s(WT);k4e=n(Ake,"STRONG",{});var f5t=s(k4e);S2r=r(f5t,"layoutlm"),f5t.forEach(t),R2r=r(Ake," \u2014 "),fQ=n(Ake,"A",{href:!0});var m5t=s(fQ);B2r=r(m5t,"TFLayoutLMForTokenClassification"),m5t.forEach(t),P2r=r(Ake," (LayoutLM model)"),Ake.forEach(t),$2r=i(te),HT=n(te,"LI",{});var yke=s(HT);S4e=n(yke,"STRONG",{});var g5t=s(S4e);I2r=r(g5t,"longformer"),g5t.forEach(t),q2r=r(yke," \u2014 "),mQ=n(yke,"A",{href:!0});var h5t=s(mQ);N2r=r(h5t,"TFLongformerForTokenClassification"),h5t.forEach(t),j2r=r(yke," (Longformer model)"),yke.forEach(t),D2r=i(te),UT=n(te,"LI",{});var Lke=s(UT);R4e=n(Lke,"STRONG",{});var p5t=s(R4e);G2r=r(p5t,"mobilebert"),p5t.forEach(t),O2r=r(Lke," \u2014 "),gQ=n(Lke,"A",{href:!0});var _5t=s(gQ);V2r=r(_5t,"TFMobileBertForTokenClassification"),_5t.forEach(t),X2r=r(Lke," (MobileBERT model)"),Lke.forEach(t),z2r=i(te),JT=n(te,"LI",{});var xke=s(JT);B4e=n(xke,"STRONG",{});var u5t=s(B4e);Q2r=r(u5t,"mpnet"),u5t.forEach(t),W2r=r(xke," \u2014 "),hQ=n(xke,"A",{href:!0});var b5t=s(hQ);H2r=r(b5t,"TFMPNetForTokenClassification"),b5t.forEach(t),U2r=r(xke," (MPNet model)"),xke.forEach(t),J2r=i(te),YT=n(te,"LI",{});var kke=s(YT);P4e=n(kke,"STRONG",{});var v5t=s(P4e);Y2r=r(v5t,"rembert"),v5t.forEach(t),K2r=r(kke," \u2014 "),pQ=n(kke,"A",{href:!0});var F5t=s(pQ);Z2r=r(F5t,"TFRemBertForTokenClassification"),F5t.forEach(t),e5r=r(kke," (RemBERT model)"),kke.forEach(t),o5r=i(te),KT=n(te,"LI",{});var Ske=s(KT);$4e=n(Ske,"STRONG",{});var T5t=s($4e);r5r=r(T5t,"roberta"),T5t.forEach(t),t5r=r(Ske," \u2014 "),_Q=n(Ske,"A",{href:!0});var M5t=s(_Q);a5r=r(M5t,"TFRobertaForTokenClassification"),M5t.forEach(t),n5r=r(Ske," (RoBERTa model)"),Ske.forEach(t),s5r=i(te),ZT=n(te,"LI",{});var Rke=s(ZT);I4e=n(Rke,"STRONG",{});var E5t=s(I4e);l5r=r(E5t,"roformer"),E5t.forEach(t),i5r=r(Rke," \u2014 "),uQ=n(Rke,"A",{href:!0});var C5t=s(uQ);d5r=r(C5t,"TFRoFormerForTokenClassification"),C5t.forEach(t),c5r=r(Rke," (RoFormer model)"),Rke.forEach(t),f5r=i(te),eM=n(te,"LI",{});var Bke=s(eM);q4e=n(Bke,"STRONG",{});var w5t=s(q4e);m5r=r(w5t,"xlm"),w5t.forEach(t),g5r=r(Bke," \u2014 "),bQ=n(Bke,"A",{href:!0});var A5t=s(bQ);h5r=r(A5t,"TFXLMForTokenClassification"),A5t.forEach(t),p5r=r(Bke," (XLM model)"),Bke.forEach(t),_5r=i(te),oM=n(te,"LI",{});var Pke=s(oM);N4e=n(Pke,"STRONG",{});var y5t=s(N4e);u5r=r(y5t,"xlm-roberta"),y5t.forEach(t),b5r=r(Pke," \u2014 "),vQ=n(Pke,"A",{href:!0});var L5t=s(vQ);v5r=r(L5t,"TFXLMRobertaForTokenClassification"),L5t.forEach(t),F5r=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),T5r=i(te),rM=n(te,"LI",{});var $ke=s(rM);j4e=n($ke,"STRONG",{});var x5t=s(j4e);M5r=r(x5t,"xlnet"),x5t.forEach(t),E5r=r($ke," \u2014 "),FQ=n($ke,"A",{href:!0});var k5t=s(FQ);C5r=r(k5t,"TFXLNetForTokenClassification"),k5t.forEach(t),w5r=r($ke," (XLNet model)"),$ke.forEach(t),te.forEach(t),A5r=i(Ca),D4e=n(Ca,"P",{});var S5t=s(D4e);y5r=r(S5t,"Examples:"),S5t.forEach(t),L5r=i(Ca),m(xL.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),MPe=i(c),Vc=n(c,"H2",{class:!0});var BIe=s(Vc);tM=n(BIe,"A",{id:!0,class:!0,href:!0});var R5t=s(tM);G4e=n(R5t,"SPAN",{});var B5t=s(G4e);m(kL.$$.fragment,B5t),B5t.forEach(t),R5t.forEach(t),x5r=i(BIe),O4e=n(BIe,"SPAN",{});var P5t=s(O4e);k5r=r(P5t,"TFAutoModelForQuestionAnswering"),P5t.forEach(t),BIe.forEach(t),EPe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);m(SL.$$.fragment,si),S5r=i(si),Xc=n(si,"P",{});var VJ=s(Xc);R5r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TQ=n(VJ,"A",{href:!0});var $5t=s(TQ);B5r=r($5t,"from_pretrained()"),$5t.forEach(t),P5r=r(VJ," class method or the "),MQ=n(VJ,"A",{href:!0});var I5t=s(MQ);$5r=r(I5t,"from_config()"),I5t.forEach(t),I5r=r(VJ,` class
method.`),VJ.forEach(t),q5r=i(si),RL=n(si,"P",{});var PIe=s(RL);N5r=r(PIe,"This class cannot be instantiated directly using "),V4e=n(PIe,"CODE",{});var q5t=s(V4e);j5r=r(q5t,"__init__()"),q5t.forEach(t),D5r=r(PIe," (throws an error)."),PIe.forEach(t),G5r=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(BL.$$.fragment,li),O5r=i(li),X4e=n(li,"P",{});var N5t=s(X4e);V5r=r(N5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),N5t.forEach(t),X5r=i(li),zc=n(li,"P",{});var XJ=s(zc);z5r=r(XJ,`Note:
Loading a model from its configuration file does `),z4e=n(XJ,"STRONG",{});var j5t=s(z4e);Q5r=r(j5t,"not"),j5t.forEach(t),W5r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(XJ,"A",{href:!0});var D5t=s(EQ);H5r=r(D5t,"from_pretrained()"),D5t.forEach(t),U5r=r(XJ," to load the model weights."),XJ.forEach(t),J5r=i(li),Q4e=n(li,"P",{});var G5t=s(Q4e);Y5r=r(G5t,"Examples:"),G5t.forEach(t),K5r=i(li),m(PL.$$.fragment,li),li.forEach(t),Z5r=i(si),wo=n(si,"DIV",{class:!0});var wa=s(wo);m($L.$$.fragment,wa),evr=i(wa),W4e=n(wa,"P",{});var O5t=s(W4e);ovr=r(O5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),O5t.forEach(t),rvr=i(wa),yn=n(wa,"P",{});var bC=s(yn);tvr=r(bC,"The model class to instantiate is selected based on the "),H4e=n(bC,"CODE",{});var V5t=s(H4e);avr=r(V5t,"model_type"),V5t.forEach(t),nvr=r(bC,` property of the config object (either
passed as an argument or loaded from `),U4e=n(bC,"CODE",{});var X5t=s(U4e);svr=r(X5t,"pretrained_model_name_or_path"),X5t.forEach(t),lvr=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(bC,"CODE",{});var z5t=s(J4e);ivr=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),dvr=r(bC,":"),bC.forEach(t),cvr=i(wa),Z=n(wa,"UL",{});var ae=s(Z);aM=n(ae,"LI",{});var Ike=s(aM);Y4e=n(Ike,"STRONG",{});var Q5t=s(Y4e);fvr=r(Q5t,"albert"),Q5t.forEach(t),mvr=r(Ike," \u2014 "),CQ=n(Ike,"A",{href:!0});var W5t=s(CQ);gvr=r(W5t,"TFAlbertForQuestionAnswering"),W5t.forEach(t),hvr=r(Ike," (ALBERT model)"),Ike.forEach(t),pvr=i(ae),nM=n(ae,"LI",{});var qke=s(nM);K4e=n(qke,"STRONG",{});var H5t=s(K4e);_vr=r(H5t,"bert"),H5t.forEach(t),uvr=r(qke," \u2014 "),wQ=n(qke,"A",{href:!0});var U5t=s(wQ);bvr=r(U5t,"TFBertForQuestionAnswering"),U5t.forEach(t),vvr=r(qke," (BERT model)"),qke.forEach(t),Fvr=i(ae),sM=n(ae,"LI",{});var Nke=s(sM);Z4e=n(Nke,"STRONG",{});var J5t=s(Z4e);Tvr=r(J5t,"camembert"),J5t.forEach(t),Mvr=r(Nke," \u2014 "),AQ=n(Nke,"A",{href:!0});var Y5t=s(AQ);Evr=r(Y5t,"TFCamembertForQuestionAnswering"),Y5t.forEach(t),Cvr=r(Nke," (CamemBERT model)"),Nke.forEach(t),wvr=i(ae),lM=n(ae,"LI",{});var jke=s(lM);ebe=n(jke,"STRONG",{});var K5t=s(ebe);Avr=r(K5t,"convbert"),K5t.forEach(t),yvr=r(jke," \u2014 "),yQ=n(jke,"A",{href:!0});var Z5t=s(yQ);Lvr=r(Z5t,"TFConvBertForQuestionAnswering"),Z5t.forEach(t),xvr=r(jke," (ConvBERT model)"),jke.forEach(t),kvr=i(ae),iM=n(ae,"LI",{});var Dke=s(iM);obe=n(Dke,"STRONG",{});var evt=s(obe);Svr=r(evt,"deberta"),evt.forEach(t),Rvr=r(Dke," \u2014 "),LQ=n(Dke,"A",{href:!0});var ovt=s(LQ);Bvr=r(ovt,"TFDebertaForQuestionAnswering"),ovt.forEach(t),Pvr=r(Dke," (DeBERTa model)"),Dke.forEach(t),$vr=i(ae),dM=n(ae,"LI",{});var Gke=s(dM);rbe=n(Gke,"STRONG",{});var rvt=s(rbe);Ivr=r(rvt,"deberta-v2"),rvt.forEach(t),qvr=r(Gke," \u2014 "),xQ=n(Gke,"A",{href:!0});var tvt=s(xQ);Nvr=r(tvt,"TFDebertaV2ForQuestionAnswering"),tvt.forEach(t),jvr=r(Gke," (DeBERTa-v2 model)"),Gke.forEach(t),Dvr=i(ae),cM=n(ae,"LI",{});var Oke=s(cM);tbe=n(Oke,"STRONG",{});var avt=s(tbe);Gvr=r(avt,"distilbert"),avt.forEach(t),Ovr=r(Oke," \u2014 "),kQ=n(Oke,"A",{href:!0});var nvt=s(kQ);Vvr=r(nvt,"TFDistilBertForQuestionAnswering"),nvt.forEach(t),Xvr=r(Oke," (DistilBERT model)"),Oke.forEach(t),zvr=i(ae),fM=n(ae,"LI",{});var Vke=s(fM);abe=n(Vke,"STRONG",{});var svt=s(abe);Qvr=r(svt,"electra"),svt.forEach(t),Wvr=r(Vke," \u2014 "),SQ=n(Vke,"A",{href:!0});var lvt=s(SQ);Hvr=r(lvt,"TFElectraForQuestionAnswering"),lvt.forEach(t),Uvr=r(Vke," (ELECTRA model)"),Vke.forEach(t),Jvr=i(ae),mM=n(ae,"LI",{});var Xke=s(mM);nbe=n(Xke,"STRONG",{});var ivt=s(nbe);Yvr=r(ivt,"flaubert"),ivt.forEach(t),Kvr=r(Xke," \u2014 "),RQ=n(Xke,"A",{href:!0});var dvt=s(RQ);Zvr=r(dvt,"TFFlaubertForQuestionAnsweringSimple"),dvt.forEach(t),eFr=r(Xke," (FlauBERT model)"),Xke.forEach(t),oFr=i(ae),gM=n(ae,"LI",{});var zke=s(gM);sbe=n(zke,"STRONG",{});var cvt=s(sbe);rFr=r(cvt,"funnel"),cvt.forEach(t),tFr=r(zke," \u2014 "),BQ=n(zke,"A",{href:!0});var fvt=s(BQ);aFr=r(fvt,"TFFunnelForQuestionAnswering"),fvt.forEach(t),nFr=r(zke," (Funnel Transformer model)"),zke.forEach(t),sFr=i(ae),hM=n(ae,"LI",{});var Qke=s(hM);lbe=n(Qke,"STRONG",{});var mvt=s(lbe);lFr=r(mvt,"gptj"),mvt.forEach(t),iFr=r(Qke," \u2014 "),PQ=n(Qke,"A",{href:!0});var gvt=s(PQ);dFr=r(gvt,"TFGPTJForQuestionAnswering"),gvt.forEach(t),cFr=r(Qke," (GPT-J model)"),Qke.forEach(t),fFr=i(ae),pM=n(ae,"LI",{});var Wke=s(pM);ibe=n(Wke,"STRONG",{});var hvt=s(ibe);mFr=r(hvt,"longformer"),hvt.forEach(t),gFr=r(Wke," \u2014 "),$Q=n(Wke,"A",{href:!0});var pvt=s($Q);hFr=r(pvt,"TFLongformerForQuestionAnswering"),pvt.forEach(t),pFr=r(Wke," (Longformer model)"),Wke.forEach(t),_Fr=i(ae),_M=n(ae,"LI",{});var Hke=s(_M);dbe=n(Hke,"STRONG",{});var _vt=s(dbe);uFr=r(_vt,"mobilebert"),_vt.forEach(t),bFr=r(Hke," \u2014 "),IQ=n(Hke,"A",{href:!0});var uvt=s(IQ);vFr=r(uvt,"TFMobileBertForQuestionAnswering"),uvt.forEach(t),FFr=r(Hke," (MobileBERT model)"),Hke.forEach(t),TFr=i(ae),uM=n(ae,"LI",{});var Uke=s(uM);cbe=n(Uke,"STRONG",{});var bvt=s(cbe);MFr=r(bvt,"mpnet"),bvt.forEach(t),EFr=r(Uke," \u2014 "),qQ=n(Uke,"A",{href:!0});var vvt=s(qQ);CFr=r(vvt,"TFMPNetForQuestionAnswering"),vvt.forEach(t),wFr=r(Uke," (MPNet model)"),Uke.forEach(t),AFr=i(ae),bM=n(ae,"LI",{});var Jke=s(bM);fbe=n(Jke,"STRONG",{});var Fvt=s(fbe);yFr=r(Fvt,"rembert"),Fvt.forEach(t),LFr=r(Jke," \u2014 "),NQ=n(Jke,"A",{href:!0});var Tvt=s(NQ);xFr=r(Tvt,"TFRemBertForQuestionAnswering"),Tvt.forEach(t),kFr=r(Jke," (RemBERT model)"),Jke.forEach(t),SFr=i(ae),vM=n(ae,"LI",{});var Yke=s(vM);mbe=n(Yke,"STRONG",{});var Mvt=s(mbe);RFr=r(Mvt,"roberta"),Mvt.forEach(t),BFr=r(Yke," \u2014 "),jQ=n(Yke,"A",{href:!0});var Evt=s(jQ);PFr=r(Evt,"TFRobertaForQuestionAnswering"),Evt.forEach(t),$Fr=r(Yke," (RoBERTa model)"),Yke.forEach(t),IFr=i(ae),FM=n(ae,"LI",{});var Kke=s(FM);gbe=n(Kke,"STRONG",{});var Cvt=s(gbe);qFr=r(Cvt,"roformer"),Cvt.forEach(t),NFr=r(Kke," \u2014 "),DQ=n(Kke,"A",{href:!0});var wvt=s(DQ);jFr=r(wvt,"TFRoFormerForQuestionAnswering"),wvt.forEach(t),DFr=r(Kke," (RoFormer model)"),Kke.forEach(t),GFr=i(ae),TM=n(ae,"LI",{});var Zke=s(TM);hbe=n(Zke,"STRONG",{});var Avt=s(hbe);OFr=r(Avt,"xlm"),Avt.forEach(t),VFr=r(Zke," \u2014 "),GQ=n(Zke,"A",{href:!0});var yvt=s(GQ);XFr=r(yvt,"TFXLMForQuestionAnsweringSimple"),yvt.forEach(t),zFr=r(Zke," (XLM model)"),Zke.forEach(t),QFr=i(ae),MM=n(ae,"LI",{});var eSe=s(MM);pbe=n(eSe,"STRONG",{});var Lvt=s(pbe);WFr=r(Lvt,"xlm-roberta"),Lvt.forEach(t),HFr=r(eSe," \u2014 "),OQ=n(eSe,"A",{href:!0});var xvt=s(OQ);UFr=r(xvt,"TFXLMRobertaForQuestionAnswering"),xvt.forEach(t),JFr=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),YFr=i(ae),EM=n(ae,"LI",{});var oSe=s(EM);_be=n(oSe,"STRONG",{});var kvt=s(_be);KFr=r(kvt,"xlnet"),kvt.forEach(t),ZFr=r(oSe," \u2014 "),VQ=n(oSe,"A",{href:!0});var Svt=s(VQ);eTr=r(Svt,"TFXLNetForQuestionAnsweringSimple"),Svt.forEach(t),oTr=r(oSe," (XLNet model)"),oSe.forEach(t),ae.forEach(t),rTr=i(wa),ube=n(wa,"P",{});var Rvt=s(ube);tTr=r(Rvt,"Examples:"),Rvt.forEach(t),aTr=i(wa),m(IL.$$.fragment,wa),wa.forEach(t),si.forEach(t),CPe=i(c),Qc=n(c,"H2",{class:!0});var $Ie=s(Qc);CM=n($Ie,"A",{id:!0,class:!0,href:!0});var Bvt=s(CM);bbe=n(Bvt,"SPAN",{});var Pvt=s(bbe);m(qL.$$.fragment,Pvt),Pvt.forEach(t),Bvt.forEach(t),nTr=i($Ie),vbe=n($Ie,"SPAN",{});var $vt=s(vbe);sTr=r($vt,"TFAutoModelForVision2Seq"),$vt.forEach(t),$Ie.forEach(t),wPe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);m(NL.$$.fragment,ii),lTr=i(ii),Wc=n(ii,"P",{});var zJ=s(Wc);iTr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XQ=n(zJ,"A",{href:!0});var Ivt=s(XQ);dTr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),cTr=r(zJ," class method or the "),zQ=n(zJ,"A",{href:!0});var qvt=s(zQ);fTr=r(qvt,"from_config()"),qvt.forEach(t),mTr=r(zJ,` class
method.`),zJ.forEach(t),gTr=i(ii),jL=n(ii,"P",{});var IIe=s(jL);hTr=r(IIe,"This class cannot be instantiated directly using "),Fbe=n(IIe,"CODE",{});var Nvt=s(Fbe);pTr=r(Nvt,"__init__()"),Nvt.forEach(t),_Tr=r(IIe," (throws an error)."),IIe.forEach(t),uTr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(DL.$$.fragment,di),bTr=i(di),Tbe=n(di,"P",{});var jvt=s(Tbe);vTr=r(jvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jvt.forEach(t),FTr=i(di),Hc=n(di,"P",{});var QJ=s(Hc);TTr=r(QJ,`Note:
Loading a model from its configuration file does `),Mbe=n(QJ,"STRONG",{});var Dvt=s(Mbe);MTr=r(Dvt,"not"),Dvt.forEach(t),ETr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(QJ,"A",{href:!0});var Gvt=s(QQ);CTr=r(Gvt,"from_pretrained()"),Gvt.forEach(t),wTr=r(QJ," to load the model weights."),QJ.forEach(t),ATr=i(di),Ebe=n(di,"P",{});var Ovt=s(Ebe);yTr=r(Ovt,"Examples:"),Ovt.forEach(t),LTr=i(di),m(GL.$$.fragment,di),di.forEach(t),xTr=i(ii),Ao=n(ii,"DIV",{class:!0});var Aa=s(Ao);m(OL.$$.fragment,Aa),kTr=i(Aa),Cbe=n(Aa,"P",{});var Vvt=s(Cbe);STr=r(Vvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vvt.forEach(t),RTr=i(Aa),Ln=n(Aa,"P",{});var vC=s(Ln);BTr=r(vC,"The model class to instantiate is selected based on the "),wbe=n(vC,"CODE",{});var Xvt=s(wbe);PTr=r(Xvt,"model_type"),Xvt.forEach(t),$Tr=r(vC,` property of the config object (either
passed as an argument or loaded from `),Abe=n(vC,"CODE",{});var zvt=s(Abe);ITr=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),qTr=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(vC,"CODE",{});var Qvt=s(ybe);NTr=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),jTr=r(vC,":"),vC.forEach(t),DTr=i(Aa),Lbe=n(Aa,"UL",{});var Wvt=s(Lbe);wM=n(Wvt,"LI",{});var rSe=s(wM);xbe=n(rSe,"STRONG",{});var Hvt=s(xbe);GTr=r(Hvt,"vision-encoder-decoder"),Hvt.forEach(t),OTr=r(rSe," \u2014 "),WQ=n(rSe,"A",{href:!0});var Uvt=s(WQ);VTr=r(Uvt,"TFVisionEncoderDecoderModel"),Uvt.forEach(t),XTr=r(rSe," (Vision Encoder decoder model)"),rSe.forEach(t),Wvt.forEach(t),zTr=i(Aa),kbe=n(Aa,"P",{});var Jvt=s(kbe);QTr=r(Jvt,"Examples:"),Jvt.forEach(t),WTr=i(Aa),m(VL.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),APe=i(c),Uc=n(c,"H2",{class:!0});var qIe=s(Uc);AM=n(qIe,"A",{id:!0,class:!0,href:!0});var Yvt=s(AM);Sbe=n(Yvt,"SPAN",{});var Kvt=s(Sbe);m(XL.$$.fragment,Kvt),Kvt.forEach(t),Yvt.forEach(t),HTr=i(qIe),Rbe=n(qIe,"SPAN",{});var Zvt=s(Rbe);UTr=r(Zvt,"TFAutoModelForSpeechSeq2Seq"),Zvt.forEach(t),qIe.forEach(t),yPe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);m(zL.$$.fragment,ci),JTr=i(ci),Jc=n(ci,"P",{});var WJ=s(Jc);YTr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),HQ=n(WJ,"A",{href:!0});var eFt=s(HQ);KTr=r(eFt,"from_pretrained()"),eFt.forEach(t),ZTr=r(WJ," class method or the "),UQ=n(WJ,"A",{href:!0});var oFt=s(UQ);eMr=r(oFt,"from_config()"),oFt.forEach(t),oMr=r(WJ,` class
method.`),WJ.forEach(t),rMr=i(ci),QL=n(ci,"P",{});var NIe=s(QL);tMr=r(NIe,"This class cannot be instantiated directly using "),Bbe=n(NIe,"CODE",{});var rFt=s(Bbe);aMr=r(rFt,"__init__()"),rFt.forEach(t),nMr=r(NIe," (throws an error)."),NIe.forEach(t),sMr=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(WL.$$.fragment,fi),lMr=i(fi),Pbe=n(fi,"P",{});var tFt=s(Pbe);iMr=r(tFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tFt.forEach(t),dMr=i(fi),Yc=n(fi,"P",{});var HJ=s(Yc);cMr=r(HJ,`Note:
Loading a model from its configuration file does `),$be=n(HJ,"STRONG",{});var aFt=s($be);fMr=r(aFt,"not"),aFt.forEach(t),mMr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(HJ,"A",{href:!0});var nFt=s(JQ);gMr=r(nFt,"from_pretrained()"),nFt.forEach(t),hMr=r(HJ," to load the model weights."),HJ.forEach(t),pMr=i(fi),Ibe=n(fi,"P",{});var sFt=s(Ibe);_Mr=r(sFt,"Examples:"),sFt.forEach(t),uMr=i(fi),m(HL.$$.fragment,fi),fi.forEach(t),bMr=i(ci),yo=n(ci,"DIV",{class:!0});var ya=s(yo);m(UL.$$.fragment,ya),vMr=i(ya),qbe=n(ya,"P",{});var lFt=s(qbe);FMr=r(lFt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lFt.forEach(t),TMr=i(ya),xn=n(ya,"P",{});var FC=s(xn);MMr=r(FC,"The model class to instantiate is selected based on the "),Nbe=n(FC,"CODE",{});var iFt=s(Nbe);EMr=r(iFt,"model_type"),iFt.forEach(t),CMr=r(FC,` property of the config object (either
passed as an argument or loaded from `),jbe=n(FC,"CODE",{});var dFt=s(jbe);wMr=r(dFt,"pretrained_model_name_or_path"),dFt.forEach(t),AMr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(FC,"CODE",{});var cFt=s(Dbe);yMr=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),LMr=r(FC,":"),FC.forEach(t),xMr=i(ya),Gbe=n(ya,"UL",{});var fFt=s(Gbe);yM=n(fFt,"LI",{});var tSe=s(yM);Obe=n(tSe,"STRONG",{});var mFt=s(Obe);kMr=r(mFt,"speech_to_text"),mFt.forEach(t),SMr=r(tSe," \u2014 "),YQ=n(tSe,"A",{href:!0});var gFt=s(YQ);RMr=r(gFt,"TFSpeech2TextForConditionalGeneration"),gFt.forEach(t),BMr=r(tSe," (Speech2Text model)"),tSe.forEach(t),fFt.forEach(t),PMr=i(ya),Vbe=n(ya,"P",{});var hFt=s(Vbe);$Mr=r(hFt,"Examples:"),hFt.forEach(t),IMr=i(ya),m(JL.$$.fragment,ya),ya.forEach(t),ci.forEach(t),LPe=i(c),Kc=n(c,"H2",{class:!0});var jIe=s(Kc);LM=n(jIe,"A",{id:!0,class:!0,href:!0});var pFt=s(LM);Xbe=n(pFt,"SPAN",{});var _Ft=s(Xbe);m(YL.$$.fragment,_Ft),_Ft.forEach(t),pFt.forEach(t),qMr=i(jIe),zbe=n(jIe,"SPAN",{});var uFt=s(zbe);NMr=r(uFt,"FlaxAutoModel"),uFt.forEach(t),jIe.forEach(t),xPe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(KL.$$.fragment,mi),jMr=i(mi),Zc=n(mi,"P",{});var UJ=s(Zc);DMr=r(UJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KQ=n(UJ,"A",{href:!0});var bFt=s(KQ);GMr=r(bFt,"from_pretrained()"),bFt.forEach(t),OMr=r(UJ," class method or the "),ZQ=n(UJ,"A",{href:!0});var vFt=s(ZQ);VMr=r(vFt,"from_config()"),vFt.forEach(t),XMr=r(UJ,` class
method.`),UJ.forEach(t),zMr=i(mi),ZL=n(mi,"P",{});var DIe=s(ZL);QMr=r(DIe,"This class cannot be instantiated directly using "),Qbe=n(DIe,"CODE",{});var FFt=s(Qbe);WMr=r(FFt,"__init__()"),FFt.forEach(t),HMr=r(DIe," (throws an error)."),DIe.forEach(t),UMr=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m(e8.$$.fragment,gi),JMr=i(gi),Wbe=n(gi,"P",{});var TFt=s(Wbe);YMr=r(TFt,"Instantiates one of the base model classes of the library from a configuration."),TFt.forEach(t),KMr=i(gi),ef=n(gi,"P",{});var JJ=s(ef);ZMr=r(JJ,`Note:
Loading a model from its configuration file does `),Hbe=n(JJ,"STRONG",{});var MFt=s(Hbe);eEr=r(MFt,"not"),MFt.forEach(t),oEr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(JJ,"A",{href:!0});var EFt=s(eW);rEr=r(EFt,"from_pretrained()"),EFt.forEach(t),tEr=r(JJ," to load the model weights."),JJ.forEach(t),aEr=i(gi),Ube=n(gi,"P",{});var CFt=s(Ube);nEr=r(CFt,"Examples:"),CFt.forEach(t),sEr=i(gi),m(o8.$$.fragment,gi),gi.forEach(t),lEr=i(mi),Lo=n(mi,"DIV",{class:!0});var La=s(Lo);m(r8.$$.fragment,La),iEr=i(La),Jbe=n(La,"P",{});var wFt=s(Jbe);dEr=r(wFt,"Instantiate one of the base model classes of the library from a pretrained model."),wFt.forEach(t),cEr=i(La),kn=n(La,"P",{});var TC=s(kn);fEr=r(TC,"The model class to instantiate is selected based on the "),Ybe=n(TC,"CODE",{});var AFt=s(Ybe);mEr=r(AFt,"model_type"),AFt.forEach(t),gEr=r(TC,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(TC,"CODE",{});var yFt=s(Kbe);hEr=r(yFt,"pretrained_model_name_or_path"),yFt.forEach(t),pEr=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(TC,"CODE",{});var LFt=s(Zbe);_Er=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),uEr=r(TC,":"),TC.forEach(t),bEr=i(La),z=n(La,"UL",{});var W=s(z);xM=n(W,"LI",{});var aSe=s(xM);e2e=n(aSe,"STRONG",{});var xFt=s(e2e);vEr=r(xFt,"albert"),xFt.forEach(t),FEr=r(aSe," \u2014 "),oW=n(aSe,"A",{href:!0});var kFt=s(oW);TEr=r(kFt,"FlaxAlbertModel"),kFt.forEach(t),MEr=r(aSe," (ALBERT model)"),aSe.forEach(t),EEr=i(W),kM=n(W,"LI",{});var nSe=s(kM);o2e=n(nSe,"STRONG",{});var SFt=s(o2e);CEr=r(SFt,"bart"),SFt.forEach(t),wEr=r(nSe," \u2014 "),rW=n(nSe,"A",{href:!0});var RFt=s(rW);AEr=r(RFt,"FlaxBartModel"),RFt.forEach(t),yEr=r(nSe," (BART model)"),nSe.forEach(t),LEr=i(W),SM=n(W,"LI",{});var sSe=s(SM);r2e=n(sSe,"STRONG",{});var BFt=s(r2e);xEr=r(BFt,"beit"),BFt.forEach(t),kEr=r(sSe," \u2014 "),tW=n(sSe,"A",{href:!0});var PFt=s(tW);SEr=r(PFt,"FlaxBeitModel"),PFt.forEach(t),REr=r(sSe," (BEiT model)"),sSe.forEach(t),BEr=i(W),RM=n(W,"LI",{});var lSe=s(RM);t2e=n(lSe,"STRONG",{});var $Ft=s(t2e);PEr=r($Ft,"bert"),$Ft.forEach(t),$Er=r(lSe," \u2014 "),aW=n(lSe,"A",{href:!0});var IFt=s(aW);IEr=r(IFt,"FlaxBertModel"),IFt.forEach(t),qEr=r(lSe," (BERT model)"),lSe.forEach(t),NEr=i(W),BM=n(W,"LI",{});var iSe=s(BM);a2e=n(iSe,"STRONG",{});var qFt=s(a2e);jEr=r(qFt,"big_bird"),qFt.forEach(t),DEr=r(iSe," \u2014 "),nW=n(iSe,"A",{href:!0});var NFt=s(nW);GEr=r(NFt,"FlaxBigBirdModel"),NFt.forEach(t),OEr=r(iSe," (BigBird model)"),iSe.forEach(t),VEr=i(W),PM=n(W,"LI",{});var dSe=s(PM);n2e=n(dSe,"STRONG",{});var jFt=s(n2e);XEr=r(jFt,"blenderbot"),jFt.forEach(t),zEr=r(dSe," \u2014 "),sW=n(dSe,"A",{href:!0});var DFt=s(sW);QEr=r(DFt,"FlaxBlenderbotModel"),DFt.forEach(t),WEr=r(dSe," (Blenderbot model)"),dSe.forEach(t),HEr=i(W),$M=n(W,"LI",{});var cSe=s($M);s2e=n(cSe,"STRONG",{});var GFt=s(s2e);UEr=r(GFt,"blenderbot-small"),GFt.forEach(t),JEr=r(cSe," \u2014 "),lW=n(cSe,"A",{href:!0});var OFt=s(lW);YEr=r(OFt,"FlaxBlenderbotSmallModel"),OFt.forEach(t),KEr=r(cSe," (BlenderbotSmall model)"),cSe.forEach(t),ZEr=i(W),IM=n(W,"LI",{});var fSe=s(IM);l2e=n(fSe,"STRONG",{});var VFt=s(l2e);e3r=r(VFt,"clip"),VFt.forEach(t),o3r=r(fSe," \u2014 "),iW=n(fSe,"A",{href:!0});var XFt=s(iW);r3r=r(XFt,"FlaxCLIPModel"),XFt.forEach(t),t3r=r(fSe," (CLIP model)"),fSe.forEach(t),a3r=i(W),qM=n(W,"LI",{});var mSe=s(qM);i2e=n(mSe,"STRONG",{});var zFt=s(i2e);n3r=r(zFt,"distilbert"),zFt.forEach(t),s3r=r(mSe," \u2014 "),dW=n(mSe,"A",{href:!0});var QFt=s(dW);l3r=r(QFt,"FlaxDistilBertModel"),QFt.forEach(t),i3r=r(mSe," (DistilBERT model)"),mSe.forEach(t),d3r=i(W),NM=n(W,"LI",{});var gSe=s(NM);d2e=n(gSe,"STRONG",{});var WFt=s(d2e);c3r=r(WFt,"electra"),WFt.forEach(t),f3r=r(gSe," \u2014 "),cW=n(gSe,"A",{href:!0});var HFt=s(cW);m3r=r(HFt,"FlaxElectraModel"),HFt.forEach(t),g3r=r(gSe," (ELECTRA model)"),gSe.forEach(t),h3r=i(W),jM=n(W,"LI",{});var hSe=s(jM);c2e=n(hSe,"STRONG",{});var UFt=s(c2e);p3r=r(UFt,"gpt2"),UFt.forEach(t),_3r=r(hSe," \u2014 "),fW=n(hSe,"A",{href:!0});var JFt=s(fW);u3r=r(JFt,"FlaxGPT2Model"),JFt.forEach(t),b3r=r(hSe," (OpenAI GPT-2 model)"),hSe.forEach(t),v3r=i(W),DM=n(W,"LI",{});var pSe=s(DM);f2e=n(pSe,"STRONG",{});var YFt=s(f2e);F3r=r(YFt,"gpt_neo"),YFt.forEach(t),T3r=r(pSe," \u2014 "),mW=n(pSe,"A",{href:!0});var KFt=s(mW);M3r=r(KFt,"FlaxGPTNeoModel"),KFt.forEach(t),E3r=r(pSe," (GPT Neo model)"),pSe.forEach(t),C3r=i(W),GM=n(W,"LI",{});var _Se=s(GM);m2e=n(_Se,"STRONG",{});var ZFt=s(m2e);w3r=r(ZFt,"gptj"),ZFt.forEach(t),A3r=r(_Se," \u2014 "),gW=n(_Se,"A",{href:!0});var eTt=s(gW);y3r=r(eTt,"FlaxGPTJModel"),eTt.forEach(t),L3r=r(_Se," (GPT-J model)"),_Se.forEach(t),x3r=i(W),OM=n(W,"LI",{});var uSe=s(OM);g2e=n(uSe,"STRONG",{});var oTt=s(g2e);k3r=r(oTt,"marian"),oTt.forEach(t),S3r=r(uSe," \u2014 "),hW=n(uSe,"A",{href:!0});var rTt=s(hW);R3r=r(rTt,"FlaxMarianModel"),rTt.forEach(t),B3r=r(uSe," (Marian model)"),uSe.forEach(t),P3r=i(W),VM=n(W,"LI",{});var bSe=s(VM);h2e=n(bSe,"STRONG",{});var tTt=s(h2e);$3r=r(tTt,"mbart"),tTt.forEach(t),I3r=r(bSe," \u2014 "),pW=n(bSe,"A",{href:!0});var aTt=s(pW);q3r=r(aTt,"FlaxMBartModel"),aTt.forEach(t),N3r=r(bSe," (mBART model)"),bSe.forEach(t),j3r=i(W),XM=n(W,"LI",{});var vSe=s(XM);p2e=n(vSe,"STRONG",{});var nTt=s(p2e);D3r=r(nTt,"mt5"),nTt.forEach(t),G3r=r(vSe," \u2014 "),_W=n(vSe,"A",{href:!0});var sTt=s(_W);O3r=r(sTt,"FlaxMT5Model"),sTt.forEach(t),V3r=r(vSe," (mT5 model)"),vSe.forEach(t),X3r=i(W),zM=n(W,"LI",{});var FSe=s(zM);_2e=n(FSe,"STRONG",{});var lTt=s(_2e);z3r=r(lTt,"pegasus"),lTt.forEach(t),Q3r=r(FSe," \u2014 "),uW=n(FSe,"A",{href:!0});var iTt=s(uW);W3r=r(iTt,"FlaxPegasusModel"),iTt.forEach(t),H3r=r(FSe," (Pegasus model)"),FSe.forEach(t),U3r=i(W),QM=n(W,"LI",{});var TSe=s(QM);u2e=n(TSe,"STRONG",{});var dTt=s(u2e);J3r=r(dTt,"roberta"),dTt.forEach(t),Y3r=r(TSe," \u2014 "),bW=n(TSe,"A",{href:!0});var cTt=s(bW);K3r=r(cTt,"FlaxRobertaModel"),cTt.forEach(t),Z3r=r(TSe," (RoBERTa model)"),TSe.forEach(t),eCr=i(W),WM=n(W,"LI",{});var MSe=s(WM);b2e=n(MSe,"STRONG",{});var fTt=s(b2e);oCr=r(fTt,"roformer"),fTt.forEach(t),rCr=r(MSe," \u2014 "),vW=n(MSe,"A",{href:!0});var mTt=s(vW);tCr=r(mTt,"FlaxRoFormerModel"),mTt.forEach(t),aCr=r(MSe," (RoFormer model)"),MSe.forEach(t),nCr=i(W),HM=n(W,"LI",{});var ESe=s(HM);v2e=n(ESe,"STRONG",{});var gTt=s(v2e);sCr=r(gTt,"t5"),gTt.forEach(t),lCr=r(ESe," \u2014 "),FW=n(ESe,"A",{href:!0});var hTt=s(FW);iCr=r(hTt,"FlaxT5Model"),hTt.forEach(t),dCr=r(ESe," (T5 model)"),ESe.forEach(t),cCr=i(W),UM=n(W,"LI",{});var CSe=s(UM);F2e=n(CSe,"STRONG",{});var pTt=s(F2e);fCr=r(pTt,"vision-text-dual-encoder"),pTt.forEach(t),mCr=r(CSe," \u2014 "),TW=n(CSe,"A",{href:!0});var _Tt=s(TW);gCr=r(_Tt,"FlaxVisionTextDualEncoderModel"),_Tt.forEach(t),hCr=r(CSe," (VisionTextDualEncoder model)"),CSe.forEach(t),pCr=i(W),JM=n(W,"LI",{});var wSe=s(JM);T2e=n(wSe,"STRONG",{});var uTt=s(T2e);_Cr=r(uTt,"vit"),uTt.forEach(t),uCr=r(wSe," \u2014 "),MW=n(wSe,"A",{href:!0});var bTt=s(MW);bCr=r(bTt,"FlaxViTModel"),bTt.forEach(t),vCr=r(wSe," (ViT model)"),wSe.forEach(t),FCr=i(W),YM=n(W,"LI",{});var ASe=s(YM);M2e=n(ASe,"STRONG",{});var vTt=s(M2e);TCr=r(vTt,"wav2vec2"),vTt.forEach(t),MCr=r(ASe," \u2014 "),EW=n(ASe,"A",{href:!0});var FTt=s(EW);ECr=r(FTt,"FlaxWav2Vec2Model"),FTt.forEach(t),CCr=r(ASe," (Wav2Vec2 model)"),ASe.forEach(t),wCr=i(W),KM=n(W,"LI",{});var ySe=s(KM);E2e=n(ySe,"STRONG",{});var TTt=s(E2e);ACr=r(TTt,"xglm"),TTt.forEach(t),yCr=r(ySe," \u2014 "),CW=n(ySe,"A",{href:!0});var MTt=s(CW);LCr=r(MTt,"FlaxXGLMModel"),MTt.forEach(t),xCr=r(ySe," (XGLM model)"),ySe.forEach(t),kCr=i(W),ZM=n(W,"LI",{});var LSe=s(ZM);C2e=n(LSe,"STRONG",{});var ETt=s(C2e);SCr=r(ETt,"xlm-roberta"),ETt.forEach(t),RCr=r(LSe," \u2014 "),wW=n(LSe,"A",{href:!0});var CTt=s(wW);BCr=r(CTt,"FlaxXLMRobertaModel"),CTt.forEach(t),PCr=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),W.forEach(t),$Cr=i(La),w2e=n(La,"P",{});var wTt=s(w2e);ICr=r(wTt,"Examples:"),wTt.forEach(t),qCr=i(La),m(t8.$$.fragment,La),La.forEach(t),mi.forEach(t),kPe=i(c),of=n(c,"H2",{class:!0});var GIe=s(of);eE=n(GIe,"A",{id:!0,class:!0,href:!0});var ATt=s(eE);A2e=n(ATt,"SPAN",{});var yTt=s(A2e);m(a8.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),NCr=i(GIe),y2e=n(GIe,"SPAN",{});var LTt=s(y2e);jCr=r(LTt,"FlaxAutoModelForCausalLM"),LTt.forEach(t),GIe.forEach(t),SPe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);m(n8.$$.fragment,hi),DCr=i(hi),rf=n(hi,"P",{});var YJ=s(rf);GCr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),AW=n(YJ,"A",{href:!0});var xTt=s(AW);OCr=r(xTt,"from_pretrained()"),xTt.forEach(t),VCr=r(YJ," class method or the "),yW=n(YJ,"A",{href:!0});var kTt=s(yW);XCr=r(kTt,"from_config()"),kTt.forEach(t),zCr=r(YJ,` class
method.`),YJ.forEach(t),QCr=i(hi),s8=n(hi,"P",{});var OIe=s(s8);WCr=r(OIe,"This class cannot be instantiated directly using "),L2e=n(OIe,"CODE",{});var STt=s(L2e);HCr=r(STt,"__init__()"),STt.forEach(t),UCr=r(OIe," (throws an error)."),OIe.forEach(t),JCr=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(l8.$$.fragment,pi),YCr=i(pi),x2e=n(pi,"P",{});var RTt=s(x2e);KCr=r(RTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RTt.forEach(t),ZCr=i(pi),tf=n(pi,"P",{});var KJ=s(tf);ewr=r(KJ,`Note:
Loading a model from its configuration file does `),k2e=n(KJ,"STRONG",{});var BTt=s(k2e);owr=r(BTt,"not"),BTt.forEach(t),rwr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=n(KJ,"A",{href:!0});var PTt=s(LW);twr=r(PTt,"from_pretrained()"),PTt.forEach(t),awr=r(KJ," to load the model weights."),KJ.forEach(t),nwr=i(pi),S2e=n(pi,"P",{});var $Tt=s(S2e);swr=r($Tt,"Examples:"),$Tt.forEach(t),lwr=i(pi),m(i8.$$.fragment,pi),pi.forEach(t),iwr=i(hi),xo=n(hi,"DIV",{class:!0});var xa=s(xo);m(d8.$$.fragment,xa),dwr=i(xa),R2e=n(xa,"P",{});var ITt=s(R2e);cwr=r(ITt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ITt.forEach(t),fwr=i(xa),Sn=n(xa,"P",{});var MC=s(Sn);mwr=r(MC,"The model class to instantiate is selected based on the "),B2e=n(MC,"CODE",{});var qTt=s(B2e);gwr=r(qTt,"model_type"),qTt.forEach(t),hwr=r(MC,` property of the config object (either
passed as an argument or loaded from `),P2e=n(MC,"CODE",{});var NTt=s(P2e);pwr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),_wr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(MC,"CODE",{});var jTt=s($2e);uwr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),bwr=r(MC,":"),MC.forEach(t),vwr=i(xa),ca=n(xa,"UL",{});var _i=s(ca);oE=n(_i,"LI",{});var xSe=s(oE);I2e=n(xSe,"STRONG",{});var DTt=s(I2e);Fwr=r(DTt,"bart"),DTt.forEach(t),Twr=r(xSe," \u2014 "),xW=n(xSe,"A",{href:!0});var GTt=s(xW);Mwr=r(GTt,"FlaxBartForCausalLM"),GTt.forEach(t),Ewr=r(xSe," (BART model)"),xSe.forEach(t),Cwr=i(_i),rE=n(_i,"LI",{});var kSe=s(rE);q2e=n(kSe,"STRONG",{});var OTt=s(q2e);wwr=r(OTt,"gpt2"),OTt.forEach(t),Awr=r(kSe," \u2014 "),kW=n(kSe,"A",{href:!0});var VTt=s(kW);ywr=r(VTt,"FlaxGPT2LMHeadModel"),VTt.forEach(t),Lwr=r(kSe," (OpenAI GPT-2 model)"),kSe.forEach(t),xwr=i(_i),tE=n(_i,"LI",{});var SSe=s(tE);N2e=n(SSe,"STRONG",{});var XTt=s(N2e);kwr=r(XTt,"gpt_neo"),XTt.forEach(t),Swr=r(SSe," \u2014 "),SW=n(SSe,"A",{href:!0});var zTt=s(SW);Rwr=r(zTt,"FlaxGPTNeoForCausalLM"),zTt.forEach(t),Bwr=r(SSe," (GPT Neo model)"),SSe.forEach(t),Pwr=i(_i),aE=n(_i,"LI",{});var RSe=s(aE);j2e=n(RSe,"STRONG",{});var QTt=s(j2e);$wr=r(QTt,"gptj"),QTt.forEach(t),Iwr=r(RSe," \u2014 "),RW=n(RSe,"A",{href:!0});var WTt=s(RW);qwr=r(WTt,"FlaxGPTJForCausalLM"),WTt.forEach(t),Nwr=r(RSe," (GPT-J model)"),RSe.forEach(t),jwr=i(_i),nE=n(_i,"LI",{});var BSe=s(nE);D2e=n(BSe,"STRONG",{});var HTt=s(D2e);Dwr=r(HTt,"xglm"),HTt.forEach(t),Gwr=r(BSe," \u2014 "),BW=n(BSe,"A",{href:!0});var UTt=s(BW);Owr=r(UTt,"FlaxXGLMForCausalLM"),UTt.forEach(t),Vwr=r(BSe," (XGLM model)"),BSe.forEach(t),_i.forEach(t),Xwr=i(xa),G2e=n(xa,"P",{});var JTt=s(G2e);zwr=r(JTt,"Examples:"),JTt.forEach(t),Qwr=i(xa),m(c8.$$.fragment,xa),xa.forEach(t),hi.forEach(t),RPe=i(c),af=n(c,"H2",{class:!0});var VIe=s(af);sE=n(VIe,"A",{id:!0,class:!0,href:!0});var YTt=s(sE);O2e=n(YTt,"SPAN",{});var KTt=s(O2e);m(f8.$$.fragment,KTt),KTt.forEach(t),YTt.forEach(t),Wwr=i(VIe),V2e=n(VIe,"SPAN",{});var ZTt=s(V2e);Hwr=r(ZTt,"FlaxAutoModelForPreTraining"),ZTt.forEach(t),VIe.forEach(t),BPe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(m8.$$.fragment,ui),Uwr=i(ui),nf=n(ui,"P",{});var ZJ=s(nf);Jwr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),PW=n(ZJ,"A",{href:!0});var eMt=s(PW);Ywr=r(eMt,"from_pretrained()"),eMt.forEach(t),Kwr=r(ZJ," class method or the "),$W=n(ZJ,"A",{href:!0});var oMt=s($W);Zwr=r(oMt,"from_config()"),oMt.forEach(t),eAr=r(ZJ,` class
method.`),ZJ.forEach(t),oAr=i(ui),g8=n(ui,"P",{});var XIe=s(g8);rAr=r(XIe,"This class cannot be instantiated directly using "),X2e=n(XIe,"CODE",{});var rMt=s(X2e);tAr=r(rMt,"__init__()"),rMt.forEach(t),aAr=r(XIe," (throws an error)."),XIe.forEach(t),nAr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(h8.$$.fragment,bi),sAr=i(bi),z2e=n(bi,"P",{});var tMt=s(z2e);lAr=r(tMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tMt.forEach(t),iAr=i(bi),sf=n(bi,"P",{});var eY=s(sf);dAr=r(eY,`Note:
Loading a model from its configuration file does `),Q2e=n(eY,"STRONG",{});var aMt=s(Q2e);cAr=r(aMt,"not"),aMt.forEach(t),fAr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(eY,"A",{href:!0});var nMt=s(IW);mAr=r(nMt,"from_pretrained()"),nMt.forEach(t),gAr=r(eY," to load the model weights."),eY.forEach(t),hAr=i(bi),W2e=n(bi,"P",{});var sMt=s(W2e);pAr=r(sMt,"Examples:"),sMt.forEach(t),_Ar=i(bi),m(p8.$$.fragment,bi),bi.forEach(t),uAr=i(ui),ko=n(ui,"DIV",{class:!0});var ka=s(ko);m(_8.$$.fragment,ka),bAr=i(ka),H2e=n(ka,"P",{});var lMt=s(H2e);vAr=r(lMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lMt.forEach(t),FAr=i(ka),Rn=n(ka,"P",{});var EC=s(Rn);TAr=r(EC,"The model class to instantiate is selected based on the "),U2e=n(EC,"CODE",{});var iMt=s(U2e);MAr=r(iMt,"model_type"),iMt.forEach(t),EAr=r(EC,` property of the config object (either
passed as an argument or loaded from `),J2e=n(EC,"CODE",{});var dMt=s(J2e);CAr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),wAr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(EC,"CODE",{});var cMt=s(Y2e);AAr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),yAr=r(EC,":"),EC.forEach(t),LAr=i(ka),me=n(ka,"UL",{});var _e=s(me);lE=n(_e,"LI",{});var PSe=s(lE);K2e=n(PSe,"STRONG",{});var fMt=s(K2e);xAr=r(fMt,"albert"),fMt.forEach(t),kAr=r(PSe," \u2014 "),qW=n(PSe,"A",{href:!0});var mMt=s(qW);SAr=r(mMt,"FlaxAlbertForPreTraining"),mMt.forEach(t),RAr=r(PSe," (ALBERT model)"),PSe.forEach(t),BAr=i(_e),iE=n(_e,"LI",{});var $Se=s(iE);Z2e=n($Se,"STRONG",{});var gMt=s(Z2e);PAr=r(gMt,"bart"),gMt.forEach(t),$Ar=r($Se," \u2014 "),NW=n($Se,"A",{href:!0});var hMt=s(NW);IAr=r(hMt,"FlaxBartForConditionalGeneration"),hMt.forEach(t),qAr=r($Se," (BART model)"),$Se.forEach(t),NAr=i(_e),dE=n(_e,"LI",{});var ISe=s(dE);e5e=n(ISe,"STRONG",{});var pMt=s(e5e);jAr=r(pMt,"bert"),pMt.forEach(t),DAr=r(ISe," \u2014 "),jW=n(ISe,"A",{href:!0});var _Mt=s(jW);GAr=r(_Mt,"FlaxBertForPreTraining"),_Mt.forEach(t),OAr=r(ISe," (BERT model)"),ISe.forEach(t),VAr=i(_e),cE=n(_e,"LI",{});var qSe=s(cE);o5e=n(qSe,"STRONG",{});var uMt=s(o5e);XAr=r(uMt,"big_bird"),uMt.forEach(t),zAr=r(qSe," \u2014 "),DW=n(qSe,"A",{href:!0});var bMt=s(DW);QAr=r(bMt,"FlaxBigBirdForPreTraining"),bMt.forEach(t),WAr=r(qSe," (BigBird model)"),qSe.forEach(t),HAr=i(_e),fE=n(_e,"LI",{});var NSe=s(fE);r5e=n(NSe,"STRONG",{});var vMt=s(r5e);UAr=r(vMt,"electra"),vMt.forEach(t),JAr=r(NSe," \u2014 "),GW=n(NSe,"A",{href:!0});var FMt=s(GW);YAr=r(FMt,"FlaxElectraForPreTraining"),FMt.forEach(t),KAr=r(NSe," (ELECTRA model)"),NSe.forEach(t),ZAr=i(_e),mE=n(_e,"LI",{});var jSe=s(mE);t5e=n(jSe,"STRONG",{});var TMt=s(t5e);e0r=r(TMt,"mbart"),TMt.forEach(t),o0r=r(jSe," \u2014 "),OW=n(jSe,"A",{href:!0});var MMt=s(OW);r0r=r(MMt,"FlaxMBartForConditionalGeneration"),MMt.forEach(t),t0r=r(jSe," (mBART model)"),jSe.forEach(t),a0r=i(_e),gE=n(_e,"LI",{});var DSe=s(gE);a5e=n(DSe,"STRONG",{});var EMt=s(a5e);n0r=r(EMt,"mt5"),EMt.forEach(t),s0r=r(DSe," \u2014 "),VW=n(DSe,"A",{href:!0});var CMt=s(VW);l0r=r(CMt,"FlaxMT5ForConditionalGeneration"),CMt.forEach(t),i0r=r(DSe," (mT5 model)"),DSe.forEach(t),d0r=i(_e),hE=n(_e,"LI",{});var GSe=s(hE);n5e=n(GSe,"STRONG",{});var wMt=s(n5e);c0r=r(wMt,"roberta"),wMt.forEach(t),f0r=r(GSe," \u2014 "),XW=n(GSe,"A",{href:!0});var AMt=s(XW);m0r=r(AMt,"FlaxRobertaForMaskedLM"),AMt.forEach(t),g0r=r(GSe," (RoBERTa model)"),GSe.forEach(t),h0r=i(_e),pE=n(_e,"LI",{});var OSe=s(pE);s5e=n(OSe,"STRONG",{});var yMt=s(s5e);p0r=r(yMt,"roformer"),yMt.forEach(t),_0r=r(OSe," \u2014 "),zW=n(OSe,"A",{href:!0});var LMt=s(zW);u0r=r(LMt,"FlaxRoFormerForMaskedLM"),LMt.forEach(t),b0r=r(OSe," (RoFormer model)"),OSe.forEach(t),v0r=i(_e),_E=n(_e,"LI",{});var VSe=s(_E);l5e=n(VSe,"STRONG",{});var xMt=s(l5e);F0r=r(xMt,"t5"),xMt.forEach(t),T0r=r(VSe," \u2014 "),QW=n(VSe,"A",{href:!0});var kMt=s(QW);M0r=r(kMt,"FlaxT5ForConditionalGeneration"),kMt.forEach(t),E0r=r(VSe," (T5 model)"),VSe.forEach(t),C0r=i(_e),uE=n(_e,"LI",{});var XSe=s(uE);i5e=n(XSe,"STRONG",{});var SMt=s(i5e);w0r=r(SMt,"wav2vec2"),SMt.forEach(t),A0r=r(XSe," \u2014 "),WW=n(XSe,"A",{href:!0});var RMt=s(WW);y0r=r(RMt,"FlaxWav2Vec2ForPreTraining"),RMt.forEach(t),L0r=r(XSe," (Wav2Vec2 model)"),XSe.forEach(t),x0r=i(_e),bE=n(_e,"LI",{});var zSe=s(bE);d5e=n(zSe,"STRONG",{});var BMt=s(d5e);k0r=r(BMt,"xlm-roberta"),BMt.forEach(t),S0r=r(zSe," \u2014 "),HW=n(zSe,"A",{href:!0});var PMt=s(HW);R0r=r(PMt,"FlaxXLMRobertaForMaskedLM"),PMt.forEach(t),B0r=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),_e.forEach(t),P0r=i(ka),c5e=n(ka,"P",{});var $Mt=s(c5e);$0r=r($Mt,"Examples:"),$Mt.forEach(t),I0r=i(ka),m(u8.$$.fragment,ka),ka.forEach(t),ui.forEach(t),PPe=i(c),lf=n(c,"H2",{class:!0});var zIe=s(lf);vE=n(zIe,"A",{id:!0,class:!0,href:!0});var IMt=s(vE);f5e=n(IMt,"SPAN",{});var qMt=s(f5e);m(b8.$$.fragment,qMt),qMt.forEach(t),IMt.forEach(t),q0r=i(zIe),m5e=n(zIe,"SPAN",{});var NMt=s(m5e);N0r=r(NMt,"FlaxAutoModelForMaskedLM"),NMt.forEach(t),zIe.forEach(t),$Pe=i(c),$r=n(c,"DIV",{class:!0});var vi=s($r);m(v8.$$.fragment,vi),j0r=i(vi),df=n(vi,"P",{});var oY=s(df);D0r=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),UW=n(oY,"A",{href:!0});var jMt=s(UW);G0r=r(jMt,"from_pretrained()"),jMt.forEach(t),O0r=r(oY," class method or the "),JW=n(oY,"A",{href:!0});var DMt=s(JW);V0r=r(DMt,"from_config()"),DMt.forEach(t),X0r=r(oY,` class
method.`),oY.forEach(t),z0r=i(vi),F8=n(vi,"P",{});var QIe=s(F8);Q0r=r(QIe,"This class cannot be instantiated directly using "),g5e=n(QIe,"CODE",{});var GMt=s(g5e);W0r=r(GMt,"__init__()"),GMt.forEach(t),H0r=r(QIe," (throws an error)."),QIe.forEach(t),U0r=i(vi),xt=n(vi,"DIV",{class:!0});var Fi=s(xt);m(T8.$$.fragment,Fi),J0r=i(Fi),h5e=n(Fi,"P",{});var OMt=s(h5e);Y0r=r(OMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),OMt.forEach(t),K0r=i(Fi),cf=n(Fi,"P",{});var rY=s(cf);Z0r=r(rY,`Note:
Loading a model from its configuration file does `),p5e=n(rY,"STRONG",{});var VMt=s(p5e);eyr=r(VMt,"not"),VMt.forEach(t),oyr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YW=n(rY,"A",{href:!0});var XMt=s(YW);ryr=r(XMt,"from_pretrained()"),XMt.forEach(t),tyr=r(rY," to load the model weights."),rY.forEach(t),ayr=i(Fi),_5e=n(Fi,"P",{});var zMt=s(_5e);nyr=r(zMt,"Examples:"),zMt.forEach(t),syr=i(Fi),m(M8.$$.fragment,Fi),Fi.forEach(t),lyr=i(vi),So=n(vi,"DIV",{class:!0});var Sa=s(So);m(E8.$$.fragment,Sa),iyr=i(Sa),u5e=n(Sa,"P",{});var QMt=s(u5e);dyr=r(QMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QMt.forEach(t),cyr=i(Sa),Bn=n(Sa,"P",{});var CC=s(Bn);fyr=r(CC,"The model class to instantiate is selected based on the "),b5e=n(CC,"CODE",{});var WMt=s(b5e);myr=r(WMt,"model_type"),WMt.forEach(t),gyr=r(CC,` property of the config object (either
passed as an argument or loaded from `),v5e=n(CC,"CODE",{});var HMt=s(v5e);hyr=r(HMt,"pretrained_model_name_or_path"),HMt.forEach(t),pyr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(CC,"CODE",{});var UMt=s(F5e);_yr=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),uyr=r(CC,":"),CC.forEach(t),byr=i(Sa),ve=n(Sa,"UL",{});var ye=s(ve);FE=n(ye,"LI",{});var QSe=s(FE);T5e=n(QSe,"STRONG",{});var JMt=s(T5e);vyr=r(JMt,"albert"),JMt.forEach(t),Fyr=r(QSe," \u2014 "),KW=n(QSe,"A",{href:!0});var YMt=s(KW);Tyr=r(YMt,"FlaxAlbertForMaskedLM"),YMt.forEach(t),Myr=r(QSe," (ALBERT model)"),QSe.forEach(t),Eyr=i(ye),TE=n(ye,"LI",{});var WSe=s(TE);M5e=n(WSe,"STRONG",{});var KMt=s(M5e);Cyr=r(KMt,"bart"),KMt.forEach(t),wyr=r(WSe," \u2014 "),ZW=n(WSe,"A",{href:!0});var ZMt=s(ZW);Ayr=r(ZMt,"FlaxBartForConditionalGeneration"),ZMt.forEach(t),yyr=r(WSe," (BART model)"),WSe.forEach(t),Lyr=i(ye),ME=n(ye,"LI",{});var HSe=s(ME);E5e=n(HSe,"STRONG",{});var eEt=s(E5e);xyr=r(eEt,"bert"),eEt.forEach(t),kyr=r(HSe," \u2014 "),eH=n(HSe,"A",{href:!0});var oEt=s(eH);Syr=r(oEt,"FlaxBertForMaskedLM"),oEt.forEach(t),Ryr=r(HSe," (BERT model)"),HSe.forEach(t),Byr=i(ye),EE=n(ye,"LI",{});var USe=s(EE);C5e=n(USe,"STRONG",{});var rEt=s(C5e);Pyr=r(rEt,"big_bird"),rEt.forEach(t),$yr=r(USe," \u2014 "),oH=n(USe,"A",{href:!0});var tEt=s(oH);Iyr=r(tEt,"FlaxBigBirdForMaskedLM"),tEt.forEach(t),qyr=r(USe," (BigBird model)"),USe.forEach(t),Nyr=i(ye),CE=n(ye,"LI",{});var JSe=s(CE);w5e=n(JSe,"STRONG",{});var aEt=s(w5e);jyr=r(aEt,"distilbert"),aEt.forEach(t),Dyr=r(JSe," \u2014 "),rH=n(JSe,"A",{href:!0});var nEt=s(rH);Gyr=r(nEt,"FlaxDistilBertForMaskedLM"),nEt.forEach(t),Oyr=r(JSe," (DistilBERT model)"),JSe.forEach(t),Vyr=i(ye),wE=n(ye,"LI",{});var YSe=s(wE);A5e=n(YSe,"STRONG",{});var sEt=s(A5e);Xyr=r(sEt,"electra"),sEt.forEach(t),zyr=r(YSe," \u2014 "),tH=n(YSe,"A",{href:!0});var lEt=s(tH);Qyr=r(lEt,"FlaxElectraForMaskedLM"),lEt.forEach(t),Wyr=r(YSe," (ELECTRA model)"),YSe.forEach(t),Hyr=i(ye),AE=n(ye,"LI",{});var KSe=s(AE);y5e=n(KSe,"STRONG",{});var iEt=s(y5e);Uyr=r(iEt,"mbart"),iEt.forEach(t),Jyr=r(KSe," \u2014 "),aH=n(KSe,"A",{href:!0});var dEt=s(aH);Yyr=r(dEt,"FlaxMBartForConditionalGeneration"),dEt.forEach(t),Kyr=r(KSe," (mBART model)"),KSe.forEach(t),Zyr=i(ye),yE=n(ye,"LI",{});var ZSe=s(yE);L5e=n(ZSe,"STRONG",{});var cEt=s(L5e);eLr=r(cEt,"roberta"),cEt.forEach(t),oLr=r(ZSe," \u2014 "),nH=n(ZSe,"A",{href:!0});var fEt=s(nH);rLr=r(fEt,"FlaxRobertaForMaskedLM"),fEt.forEach(t),tLr=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),aLr=i(ye),LE=n(ye,"LI",{});var eRe=s(LE);x5e=n(eRe,"STRONG",{});var mEt=s(x5e);nLr=r(mEt,"roformer"),mEt.forEach(t),sLr=r(eRe," \u2014 "),sH=n(eRe,"A",{href:!0});var gEt=s(sH);lLr=r(gEt,"FlaxRoFormerForMaskedLM"),gEt.forEach(t),iLr=r(eRe," (RoFormer model)"),eRe.forEach(t),dLr=i(ye),xE=n(ye,"LI",{});var oRe=s(xE);k5e=n(oRe,"STRONG",{});var hEt=s(k5e);cLr=r(hEt,"xlm-roberta"),hEt.forEach(t),fLr=r(oRe," \u2014 "),lH=n(oRe,"A",{href:!0});var pEt=s(lH);mLr=r(pEt,"FlaxXLMRobertaForMaskedLM"),pEt.forEach(t),gLr=r(oRe," (XLM-RoBERTa model)"),oRe.forEach(t),ye.forEach(t),hLr=i(Sa),S5e=n(Sa,"P",{});var _Et=s(S5e);pLr=r(_Et,"Examples:"),_Et.forEach(t),_Lr=i(Sa),m(C8.$$.fragment,Sa),Sa.forEach(t),vi.forEach(t),IPe=i(c),ff=n(c,"H2",{class:!0});var WIe=s(ff);kE=n(WIe,"A",{id:!0,class:!0,href:!0});var uEt=s(kE);R5e=n(uEt,"SPAN",{});var bEt=s(R5e);m(w8.$$.fragment,bEt),bEt.forEach(t),uEt.forEach(t),uLr=i(WIe),B5e=n(WIe,"SPAN",{});var vEt=s(B5e);bLr=r(vEt,"FlaxAutoModelForSeq2SeqLM"),vEt.forEach(t),WIe.forEach(t),qPe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(A8.$$.fragment,Ti),vLr=i(Ti),mf=n(Ti,"P",{});var tY=s(mf);FLr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iH=n(tY,"A",{href:!0});var FEt=s(iH);TLr=r(FEt,"from_pretrained()"),FEt.forEach(t),MLr=r(tY," class method or the "),dH=n(tY,"A",{href:!0});var TEt=s(dH);ELr=r(TEt,"from_config()"),TEt.forEach(t),CLr=r(tY,` class
method.`),tY.forEach(t),wLr=i(Ti),y8=n(Ti,"P",{});var HIe=s(y8);ALr=r(HIe,"This class cannot be instantiated directly using "),P5e=n(HIe,"CODE",{});var MEt=s(P5e);yLr=r(MEt,"__init__()"),MEt.forEach(t),LLr=r(HIe," (throws an error)."),HIe.forEach(t),xLr=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(L8.$$.fragment,Mi),kLr=i(Mi),$5e=n(Mi,"P",{});var EEt=s($5e);SLr=r(EEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EEt.forEach(t),RLr=i(Mi),gf=n(Mi,"P",{});var aY=s(gf);BLr=r(aY,`Note:
Loading a model from its configuration file does `),I5e=n(aY,"STRONG",{});var CEt=s(I5e);PLr=r(CEt,"not"),CEt.forEach(t),$Lr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cH=n(aY,"A",{href:!0});var wEt=s(cH);ILr=r(wEt,"from_pretrained()"),wEt.forEach(t),qLr=r(aY," to load the model weights."),aY.forEach(t),NLr=i(Mi),q5e=n(Mi,"P",{});var AEt=s(q5e);jLr=r(AEt,"Examples:"),AEt.forEach(t),DLr=i(Mi),m(x8.$$.fragment,Mi),Mi.forEach(t),GLr=i(Ti),Ro=n(Ti,"DIV",{class:!0});var Ra=s(Ro);m(k8.$$.fragment,Ra),OLr=i(Ra),N5e=n(Ra,"P",{});var yEt=s(N5e);VLr=r(yEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yEt.forEach(t),XLr=i(Ra),Pn=n(Ra,"P",{});var wC=s(Pn);zLr=r(wC,"The model class to instantiate is selected based on the "),j5e=n(wC,"CODE",{});var LEt=s(j5e);QLr=r(LEt,"model_type"),LEt.forEach(t),WLr=r(wC,` property of the config object (either
passed as an argument or loaded from `),D5e=n(wC,"CODE",{});var xEt=s(D5e);HLr=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),ULr=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G5e=n(wC,"CODE",{});var kEt=s(G5e);JLr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),YLr=r(wC,":"),wC.forEach(t),KLr=i(Ra),Ce=n(Ra,"UL",{});var lo=s(Ce);SE=n(lo,"LI",{});var rRe=s(SE);O5e=n(rRe,"STRONG",{});var SEt=s(O5e);ZLr=r(SEt,"bart"),SEt.forEach(t),e8r=r(rRe," \u2014 "),fH=n(rRe,"A",{href:!0});var REt=s(fH);o8r=r(REt,"FlaxBartForConditionalGeneration"),REt.forEach(t),r8r=r(rRe," (BART model)"),rRe.forEach(t),t8r=i(lo),RE=n(lo,"LI",{});var tRe=s(RE);V5e=n(tRe,"STRONG",{});var BEt=s(V5e);a8r=r(BEt,"blenderbot"),BEt.forEach(t),n8r=r(tRe," \u2014 "),mH=n(tRe,"A",{href:!0});var PEt=s(mH);s8r=r(PEt,"FlaxBlenderbotForConditionalGeneration"),PEt.forEach(t),l8r=r(tRe," (Blenderbot model)"),tRe.forEach(t),i8r=i(lo),BE=n(lo,"LI",{});var aRe=s(BE);X5e=n(aRe,"STRONG",{});var $Et=s(X5e);d8r=r($Et,"blenderbot-small"),$Et.forEach(t),c8r=r(aRe," \u2014 "),gH=n(aRe,"A",{href:!0});var IEt=s(gH);f8r=r(IEt,"FlaxBlenderbotSmallForConditionalGeneration"),IEt.forEach(t),m8r=r(aRe," (BlenderbotSmall model)"),aRe.forEach(t),g8r=i(lo),PE=n(lo,"LI",{});var nRe=s(PE);z5e=n(nRe,"STRONG",{});var qEt=s(z5e);h8r=r(qEt,"encoder-decoder"),qEt.forEach(t),p8r=r(nRe," \u2014 "),hH=n(nRe,"A",{href:!0});var NEt=s(hH);_8r=r(NEt,"FlaxEncoderDecoderModel"),NEt.forEach(t),u8r=r(nRe," (Encoder decoder model)"),nRe.forEach(t),b8r=i(lo),$E=n(lo,"LI",{});var sRe=s($E);Q5e=n(sRe,"STRONG",{});var jEt=s(Q5e);v8r=r(jEt,"marian"),jEt.forEach(t),F8r=r(sRe," \u2014 "),pH=n(sRe,"A",{href:!0});var DEt=s(pH);T8r=r(DEt,"FlaxMarianMTModel"),DEt.forEach(t),M8r=r(sRe," (Marian model)"),sRe.forEach(t),E8r=i(lo),IE=n(lo,"LI",{});var lRe=s(IE);W5e=n(lRe,"STRONG",{});var GEt=s(W5e);C8r=r(GEt,"mbart"),GEt.forEach(t),w8r=r(lRe," \u2014 "),_H=n(lRe,"A",{href:!0});var OEt=s(_H);A8r=r(OEt,"FlaxMBartForConditionalGeneration"),OEt.forEach(t),y8r=r(lRe," (mBART model)"),lRe.forEach(t),L8r=i(lo),qE=n(lo,"LI",{});var iRe=s(qE);H5e=n(iRe,"STRONG",{});var VEt=s(H5e);x8r=r(VEt,"mt5"),VEt.forEach(t),k8r=r(iRe," \u2014 "),uH=n(iRe,"A",{href:!0});var XEt=s(uH);S8r=r(XEt,"FlaxMT5ForConditionalGeneration"),XEt.forEach(t),R8r=r(iRe," (mT5 model)"),iRe.forEach(t),B8r=i(lo),NE=n(lo,"LI",{});var dRe=s(NE);U5e=n(dRe,"STRONG",{});var zEt=s(U5e);P8r=r(zEt,"pegasus"),zEt.forEach(t),$8r=r(dRe," \u2014 "),bH=n(dRe,"A",{href:!0});var QEt=s(bH);I8r=r(QEt,"FlaxPegasusForConditionalGeneration"),QEt.forEach(t),q8r=r(dRe," (Pegasus model)"),dRe.forEach(t),N8r=i(lo),jE=n(lo,"LI",{});var cRe=s(jE);J5e=n(cRe,"STRONG",{});var WEt=s(J5e);j8r=r(WEt,"t5"),WEt.forEach(t),D8r=r(cRe," \u2014 "),vH=n(cRe,"A",{href:!0});var HEt=s(vH);G8r=r(HEt,"FlaxT5ForConditionalGeneration"),HEt.forEach(t),O8r=r(cRe," (T5 model)"),cRe.forEach(t),lo.forEach(t),V8r=i(Ra),Y5e=n(Ra,"P",{});var UEt=s(Y5e);X8r=r(UEt,"Examples:"),UEt.forEach(t),z8r=i(Ra),m(S8.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),NPe=i(c),hf=n(c,"H2",{class:!0});var UIe=s(hf);DE=n(UIe,"A",{id:!0,class:!0,href:!0});var JEt=s(DE);K5e=n(JEt,"SPAN",{});var YEt=s(K5e);m(R8.$$.fragment,YEt),YEt.forEach(t),JEt.forEach(t),Q8r=i(UIe),Z5e=n(UIe,"SPAN",{});var KEt=s(Z5e);W8r=r(KEt,"FlaxAutoModelForSequenceClassification"),KEt.forEach(t),UIe.forEach(t),jPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(B8.$$.fragment,Ei),H8r=i(Ei),pf=n(Ei,"P",{});var nY=s(pf);U8r=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FH=n(nY,"A",{href:!0});var ZEt=s(FH);J8r=r(ZEt,"from_pretrained()"),ZEt.forEach(t),Y8r=r(nY," class method or the "),TH=n(nY,"A",{href:!0});var e3t=s(TH);K8r=r(e3t,"from_config()"),e3t.forEach(t),Z8r=r(nY,` class
method.`),nY.forEach(t),e7r=i(Ei),P8=n(Ei,"P",{});var JIe=s(P8);o7r=r(JIe,"This class cannot be instantiated directly using "),eve=n(JIe,"CODE",{});var o3t=s(eve);r7r=r(o3t,"__init__()"),o3t.forEach(t),t7r=r(JIe," (throws an error)."),JIe.forEach(t),a7r=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m($8.$$.fragment,Ci),n7r=i(Ci),ove=n(Ci,"P",{});var r3t=s(ove);s7r=r(r3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r3t.forEach(t),l7r=i(Ci),_f=n(Ci,"P",{});var sY=s(_f);i7r=r(sY,`Note:
Loading a model from its configuration file does `),rve=n(sY,"STRONG",{});var t3t=s(rve);d7r=r(t3t,"not"),t3t.forEach(t),c7r=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(sY,"A",{href:!0});var a3t=s(MH);f7r=r(a3t,"from_pretrained()"),a3t.forEach(t),m7r=r(sY," to load the model weights."),sY.forEach(t),g7r=i(Ci),tve=n(Ci,"P",{});var n3t=s(tve);h7r=r(n3t,"Examples:"),n3t.forEach(t),p7r=i(Ci),m(I8.$$.fragment,Ci),Ci.forEach(t),_7r=i(Ei),Bo=n(Ei,"DIV",{class:!0});var Ba=s(Bo);m(q8.$$.fragment,Ba),u7r=i(Ba),ave=n(Ba,"P",{});var s3t=s(ave);b7r=r(s3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),s3t.forEach(t),v7r=i(Ba),$n=n(Ba,"P",{});var AC=s($n);F7r=r(AC,"The model class to instantiate is selected based on the "),nve=n(AC,"CODE",{});var l3t=s(nve);T7r=r(l3t,"model_type"),l3t.forEach(t),M7r=r(AC,` property of the config object (either
passed as an argument or loaded from `),sve=n(AC,"CODE",{});var i3t=s(sve);E7r=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),C7r=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(AC,"CODE",{});var d3t=s(lve);w7r=r(d3t,"pretrained_model_name_or_path"),d3t.forEach(t),A7r=r(AC,":"),AC.forEach(t),y7r=i(Ba),Fe=n(Ba,"UL",{});var Le=s(Fe);GE=n(Le,"LI",{});var fRe=s(GE);ive=n(fRe,"STRONG",{});var c3t=s(ive);L7r=r(c3t,"albert"),c3t.forEach(t),x7r=r(fRe," \u2014 "),EH=n(fRe,"A",{href:!0});var f3t=s(EH);k7r=r(f3t,"FlaxAlbertForSequenceClassification"),f3t.forEach(t),S7r=r(fRe," (ALBERT model)"),fRe.forEach(t),R7r=i(Le),OE=n(Le,"LI",{});var mRe=s(OE);dve=n(mRe,"STRONG",{});var m3t=s(dve);B7r=r(m3t,"bart"),m3t.forEach(t),P7r=r(mRe," \u2014 "),CH=n(mRe,"A",{href:!0});var g3t=s(CH);$7r=r(g3t,"FlaxBartForSequenceClassification"),g3t.forEach(t),I7r=r(mRe," (BART model)"),mRe.forEach(t),q7r=i(Le),VE=n(Le,"LI",{});var gRe=s(VE);cve=n(gRe,"STRONG",{});var h3t=s(cve);N7r=r(h3t,"bert"),h3t.forEach(t),j7r=r(gRe," \u2014 "),wH=n(gRe,"A",{href:!0});var p3t=s(wH);D7r=r(p3t,"FlaxBertForSequenceClassification"),p3t.forEach(t),G7r=r(gRe," (BERT model)"),gRe.forEach(t),O7r=i(Le),XE=n(Le,"LI",{});var hRe=s(XE);fve=n(hRe,"STRONG",{});var _3t=s(fve);V7r=r(_3t,"big_bird"),_3t.forEach(t),X7r=r(hRe," \u2014 "),AH=n(hRe,"A",{href:!0});var u3t=s(AH);z7r=r(u3t,"FlaxBigBirdForSequenceClassification"),u3t.forEach(t),Q7r=r(hRe," (BigBird model)"),hRe.forEach(t),W7r=i(Le),zE=n(Le,"LI",{});var pRe=s(zE);mve=n(pRe,"STRONG",{});var b3t=s(mve);H7r=r(b3t,"distilbert"),b3t.forEach(t),U7r=r(pRe," \u2014 "),yH=n(pRe,"A",{href:!0});var v3t=s(yH);J7r=r(v3t,"FlaxDistilBertForSequenceClassification"),v3t.forEach(t),Y7r=r(pRe," (DistilBERT model)"),pRe.forEach(t),K7r=i(Le),QE=n(Le,"LI",{});var _Re=s(QE);gve=n(_Re,"STRONG",{});var F3t=s(gve);Z7r=r(F3t,"electra"),F3t.forEach(t),e9r=r(_Re," \u2014 "),LH=n(_Re,"A",{href:!0});var T3t=s(LH);o9r=r(T3t,"FlaxElectraForSequenceClassification"),T3t.forEach(t),r9r=r(_Re," (ELECTRA model)"),_Re.forEach(t),t9r=i(Le),WE=n(Le,"LI",{});var uRe=s(WE);hve=n(uRe,"STRONG",{});var M3t=s(hve);a9r=r(M3t,"mbart"),M3t.forEach(t),n9r=r(uRe," \u2014 "),xH=n(uRe,"A",{href:!0});var E3t=s(xH);s9r=r(E3t,"FlaxMBartForSequenceClassification"),E3t.forEach(t),l9r=r(uRe," (mBART model)"),uRe.forEach(t),i9r=i(Le),HE=n(Le,"LI",{});var bRe=s(HE);pve=n(bRe,"STRONG",{});var C3t=s(pve);d9r=r(C3t,"roberta"),C3t.forEach(t),c9r=r(bRe," \u2014 "),kH=n(bRe,"A",{href:!0});var w3t=s(kH);f9r=r(w3t,"FlaxRobertaForSequenceClassification"),w3t.forEach(t),m9r=r(bRe," (RoBERTa model)"),bRe.forEach(t),g9r=i(Le),UE=n(Le,"LI",{});var vRe=s(UE);_ve=n(vRe,"STRONG",{});var A3t=s(_ve);h9r=r(A3t,"roformer"),A3t.forEach(t),p9r=r(vRe," \u2014 "),SH=n(vRe,"A",{href:!0});var y3t=s(SH);_9r=r(y3t,"FlaxRoFormerForSequenceClassification"),y3t.forEach(t),u9r=r(vRe," (RoFormer model)"),vRe.forEach(t),b9r=i(Le),JE=n(Le,"LI",{});var FRe=s(JE);uve=n(FRe,"STRONG",{});var L3t=s(uve);v9r=r(L3t,"xlm-roberta"),L3t.forEach(t),F9r=r(FRe," \u2014 "),RH=n(FRe,"A",{href:!0});var x3t=s(RH);T9r=r(x3t,"FlaxXLMRobertaForSequenceClassification"),x3t.forEach(t),M9r=r(FRe," (XLM-RoBERTa model)"),FRe.forEach(t),Le.forEach(t),E9r=i(Ba),bve=n(Ba,"P",{});var k3t=s(bve);C9r=r(k3t,"Examples:"),k3t.forEach(t),w9r=i(Ba),m(N8.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),DPe=i(c),uf=n(c,"H2",{class:!0});var YIe=s(uf);YE=n(YIe,"A",{id:!0,class:!0,href:!0});var S3t=s(YE);vve=n(S3t,"SPAN",{});var R3t=s(vve);m(j8.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),A9r=i(YIe),Fve=n(YIe,"SPAN",{});var B3t=s(Fve);y9r=r(B3t,"FlaxAutoModelForQuestionAnswering"),B3t.forEach(t),YIe.forEach(t),GPe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(D8.$$.fragment,wi),L9r=i(wi),bf=n(wi,"P",{});var lY=s(bf);x9r=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BH=n(lY,"A",{href:!0});var P3t=s(BH);k9r=r(P3t,"from_pretrained()"),P3t.forEach(t),S9r=r(lY," class method or the "),PH=n(lY,"A",{href:!0});var $3t=s(PH);R9r=r($3t,"from_config()"),$3t.forEach(t),B9r=r(lY,` class
method.`),lY.forEach(t),P9r=i(wi),G8=n(wi,"P",{});var KIe=s(G8);$9r=r(KIe,"This class cannot be instantiated directly using "),Tve=n(KIe,"CODE",{});var I3t=s(Tve);I9r=r(I3t,"__init__()"),I3t.forEach(t),q9r=r(KIe," (throws an error)."),KIe.forEach(t),N9r=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(O8.$$.fragment,Ai),j9r=i(Ai),Mve=n(Ai,"P",{});var q3t=s(Mve);D9r=r(q3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q3t.forEach(t),G9r=i(Ai),vf=n(Ai,"P",{});var iY=s(vf);O9r=r(iY,`Note:
Loading a model from its configuration file does `),Eve=n(iY,"STRONG",{});var N3t=s(Eve);V9r=r(N3t,"not"),N3t.forEach(t),X9r=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(iY,"A",{href:!0});var j3t=s($H);z9r=r(j3t,"from_pretrained()"),j3t.forEach(t),Q9r=r(iY," to load the model weights."),iY.forEach(t),W9r=i(Ai),Cve=n(Ai,"P",{});var D3t=s(Cve);H9r=r(D3t,"Examples:"),D3t.forEach(t),U9r=i(Ai),m(V8.$$.fragment,Ai),Ai.forEach(t),J9r=i(wi),Po=n(wi,"DIV",{class:!0});var Pa=s(Po);m(X8.$$.fragment,Pa),Y9r=i(Pa),wve=n(Pa,"P",{});var G3t=s(wve);K9r=r(G3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G3t.forEach(t),Z9r=i(Pa),In=n(Pa,"P",{});var yC=s(In);exr=r(yC,"The model class to instantiate is selected based on the "),Ave=n(yC,"CODE",{});var O3t=s(Ave);oxr=r(O3t,"model_type"),O3t.forEach(t),rxr=r(yC,` property of the config object (either
passed as an argument or loaded from `),yve=n(yC,"CODE",{});var V3t=s(yve);txr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),axr=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(yC,"CODE",{});var X3t=s(Lve);nxr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),sxr=r(yC,":"),yC.forEach(t),lxr=i(Pa),Te=n(Pa,"UL",{});var xe=s(Te);KE=n(xe,"LI",{});var TRe=s(KE);xve=n(TRe,"STRONG",{});var z3t=s(xve);ixr=r(z3t,"albert"),z3t.forEach(t),dxr=r(TRe," \u2014 "),IH=n(TRe,"A",{href:!0});var Q3t=s(IH);cxr=r(Q3t,"FlaxAlbertForQuestionAnswering"),Q3t.forEach(t),fxr=r(TRe," (ALBERT model)"),TRe.forEach(t),mxr=i(xe),ZE=n(xe,"LI",{});var MRe=s(ZE);kve=n(MRe,"STRONG",{});var W3t=s(kve);gxr=r(W3t,"bart"),W3t.forEach(t),hxr=r(MRe," \u2014 "),qH=n(MRe,"A",{href:!0});var H3t=s(qH);pxr=r(H3t,"FlaxBartForQuestionAnswering"),H3t.forEach(t),_xr=r(MRe," (BART model)"),MRe.forEach(t),uxr=i(xe),e3=n(xe,"LI",{});var ERe=s(e3);Sve=n(ERe,"STRONG",{});var U3t=s(Sve);bxr=r(U3t,"bert"),U3t.forEach(t),vxr=r(ERe," \u2014 "),NH=n(ERe,"A",{href:!0});var J3t=s(NH);Fxr=r(J3t,"FlaxBertForQuestionAnswering"),J3t.forEach(t),Txr=r(ERe," (BERT model)"),ERe.forEach(t),Mxr=i(xe),o3=n(xe,"LI",{});var CRe=s(o3);Rve=n(CRe,"STRONG",{});var Y3t=s(Rve);Exr=r(Y3t,"big_bird"),Y3t.forEach(t),Cxr=r(CRe," \u2014 "),jH=n(CRe,"A",{href:!0});var K3t=s(jH);wxr=r(K3t,"FlaxBigBirdForQuestionAnswering"),K3t.forEach(t),Axr=r(CRe," (BigBird model)"),CRe.forEach(t),yxr=i(xe),r3=n(xe,"LI",{});var wRe=s(r3);Bve=n(wRe,"STRONG",{});var Z3t=s(Bve);Lxr=r(Z3t,"distilbert"),Z3t.forEach(t),xxr=r(wRe," \u2014 "),DH=n(wRe,"A",{href:!0});var eCt=s(DH);kxr=r(eCt,"FlaxDistilBertForQuestionAnswering"),eCt.forEach(t),Sxr=r(wRe," (DistilBERT model)"),wRe.forEach(t),Rxr=i(xe),t3=n(xe,"LI",{});var ARe=s(t3);Pve=n(ARe,"STRONG",{});var oCt=s(Pve);Bxr=r(oCt,"electra"),oCt.forEach(t),Pxr=r(ARe," \u2014 "),GH=n(ARe,"A",{href:!0});var rCt=s(GH);$xr=r(rCt,"FlaxElectraForQuestionAnswering"),rCt.forEach(t),Ixr=r(ARe," (ELECTRA model)"),ARe.forEach(t),qxr=i(xe),a3=n(xe,"LI",{});var yRe=s(a3);$ve=n(yRe,"STRONG",{});var tCt=s($ve);Nxr=r(tCt,"mbart"),tCt.forEach(t),jxr=r(yRe," \u2014 "),OH=n(yRe,"A",{href:!0});var aCt=s(OH);Dxr=r(aCt,"FlaxMBartForQuestionAnswering"),aCt.forEach(t),Gxr=r(yRe," (mBART model)"),yRe.forEach(t),Oxr=i(xe),n3=n(xe,"LI",{});var LRe=s(n3);Ive=n(LRe,"STRONG",{});var nCt=s(Ive);Vxr=r(nCt,"roberta"),nCt.forEach(t),Xxr=r(LRe," \u2014 "),VH=n(LRe,"A",{href:!0});var sCt=s(VH);zxr=r(sCt,"FlaxRobertaForQuestionAnswering"),sCt.forEach(t),Qxr=r(LRe," (RoBERTa model)"),LRe.forEach(t),Wxr=i(xe),s3=n(xe,"LI",{});var xRe=s(s3);qve=n(xRe,"STRONG",{});var lCt=s(qve);Hxr=r(lCt,"roformer"),lCt.forEach(t),Uxr=r(xRe," \u2014 "),XH=n(xRe,"A",{href:!0});var iCt=s(XH);Jxr=r(iCt,"FlaxRoFormerForQuestionAnswering"),iCt.forEach(t),Yxr=r(xRe," (RoFormer model)"),xRe.forEach(t),Kxr=i(xe),l3=n(xe,"LI",{});var kRe=s(l3);Nve=n(kRe,"STRONG",{});var dCt=s(Nve);Zxr=r(dCt,"xlm-roberta"),dCt.forEach(t),ekr=r(kRe," \u2014 "),zH=n(kRe,"A",{href:!0});var cCt=s(zH);okr=r(cCt,"FlaxXLMRobertaForQuestionAnswering"),cCt.forEach(t),rkr=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),xe.forEach(t),tkr=i(Pa),jve=n(Pa,"P",{});var fCt=s(jve);akr=r(fCt,"Examples:"),fCt.forEach(t),nkr=i(Pa),m(z8.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),OPe=i(c),Ff=n(c,"H2",{class:!0});var ZIe=s(Ff);i3=n(ZIe,"A",{id:!0,class:!0,href:!0});var mCt=s(i3);Dve=n(mCt,"SPAN",{});var gCt=s(Dve);m(Q8.$$.fragment,gCt),gCt.forEach(t),mCt.forEach(t),skr=i(ZIe),Gve=n(ZIe,"SPAN",{});var hCt=s(Gve);lkr=r(hCt,"FlaxAutoModelForTokenClassification"),hCt.forEach(t),ZIe.forEach(t),VPe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(W8.$$.fragment,yi),ikr=i(yi),Tf=n(yi,"P",{});var dY=s(Tf);dkr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QH=n(dY,"A",{href:!0});var pCt=s(QH);ckr=r(pCt,"from_pretrained()"),pCt.forEach(t),fkr=r(dY," class method or the "),WH=n(dY,"A",{href:!0});var _Ct=s(WH);mkr=r(_Ct,"from_config()"),_Ct.forEach(t),gkr=r(dY,` class
method.`),dY.forEach(t),hkr=i(yi),H8=n(yi,"P",{});var eqe=s(H8);pkr=r(eqe,"This class cannot be instantiated directly using "),Ove=n(eqe,"CODE",{});var uCt=s(Ove);_kr=r(uCt,"__init__()"),uCt.forEach(t),ukr=r(eqe," (throws an error)."),eqe.forEach(t),bkr=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(U8.$$.fragment,Li),vkr=i(Li),Vve=n(Li,"P",{});var bCt=s(Vve);Fkr=r(bCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bCt.forEach(t),Tkr=i(Li),Mf=n(Li,"P",{});var cY=s(Mf);Mkr=r(cY,`Note:
Loading a model from its configuration file does `),Xve=n(cY,"STRONG",{});var vCt=s(Xve);Ekr=r(vCt,"not"),vCt.forEach(t),Ckr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(cY,"A",{href:!0});var FCt=s(HH);wkr=r(FCt,"from_pretrained()"),FCt.forEach(t),Akr=r(cY," to load the model weights."),cY.forEach(t),ykr=i(Li),zve=n(Li,"P",{});var TCt=s(zve);Lkr=r(TCt,"Examples:"),TCt.forEach(t),xkr=i(Li),m(J8.$$.fragment,Li),Li.forEach(t),kkr=i(yi),$o=n(yi,"DIV",{class:!0});var $a=s($o);m(Y8.$$.fragment,$a),Skr=i($a),Qve=n($a,"P",{});var MCt=s(Qve);Rkr=r(MCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),MCt.forEach(t),Bkr=i($a),qn=n($a,"P",{});var LC=s(qn);Pkr=r(LC,"The model class to instantiate is selected based on the "),Wve=n(LC,"CODE",{});var ECt=s(Wve);$kr=r(ECt,"model_type"),ECt.forEach(t),Ikr=r(LC,` property of the config object (either
passed as an argument or loaded from `),Hve=n(LC,"CODE",{});var CCt=s(Hve);qkr=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),Nkr=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(LC,"CODE",{});var wCt=s(Uve);jkr=r(wCt,"pretrained_model_name_or_path"),wCt.forEach(t),Dkr=r(LC,":"),LC.forEach(t),Gkr=i($a),Be=n($a,"UL",{});var Oo=s(Be);d3=n(Oo,"LI",{});var SRe=s(d3);Jve=n(SRe,"STRONG",{});var ACt=s(Jve);Okr=r(ACt,"albert"),ACt.forEach(t),Vkr=r(SRe," \u2014 "),UH=n(SRe,"A",{href:!0});var yCt=s(UH);Xkr=r(yCt,"FlaxAlbertForTokenClassification"),yCt.forEach(t),zkr=r(SRe," (ALBERT model)"),SRe.forEach(t),Qkr=i(Oo),c3=n(Oo,"LI",{});var RRe=s(c3);Yve=n(RRe,"STRONG",{});var LCt=s(Yve);Wkr=r(LCt,"bert"),LCt.forEach(t),Hkr=r(RRe," \u2014 "),JH=n(RRe,"A",{href:!0});var xCt=s(JH);Ukr=r(xCt,"FlaxBertForTokenClassification"),xCt.forEach(t),Jkr=r(RRe," (BERT model)"),RRe.forEach(t),Ykr=i(Oo),f3=n(Oo,"LI",{});var BRe=s(f3);Kve=n(BRe,"STRONG",{});var kCt=s(Kve);Kkr=r(kCt,"big_bird"),kCt.forEach(t),Zkr=r(BRe," \u2014 "),YH=n(BRe,"A",{href:!0});var SCt=s(YH);eSr=r(SCt,"FlaxBigBirdForTokenClassification"),SCt.forEach(t),oSr=r(BRe," (BigBird model)"),BRe.forEach(t),rSr=i(Oo),m3=n(Oo,"LI",{});var PRe=s(m3);Zve=n(PRe,"STRONG",{});var RCt=s(Zve);tSr=r(RCt,"distilbert"),RCt.forEach(t),aSr=r(PRe," \u2014 "),KH=n(PRe,"A",{href:!0});var BCt=s(KH);nSr=r(BCt,"FlaxDistilBertForTokenClassification"),BCt.forEach(t),sSr=r(PRe," (DistilBERT model)"),PRe.forEach(t),lSr=i(Oo),g3=n(Oo,"LI",{});var $Re=s(g3);eFe=n($Re,"STRONG",{});var PCt=s(eFe);iSr=r(PCt,"electra"),PCt.forEach(t),dSr=r($Re," \u2014 "),ZH=n($Re,"A",{href:!0});var $Ct=s(ZH);cSr=r($Ct,"FlaxElectraForTokenClassification"),$Ct.forEach(t),fSr=r($Re," (ELECTRA model)"),$Re.forEach(t),mSr=i(Oo),h3=n(Oo,"LI",{});var IRe=s(h3);oFe=n(IRe,"STRONG",{});var ICt=s(oFe);gSr=r(ICt,"roberta"),ICt.forEach(t),hSr=r(IRe," \u2014 "),eU=n(IRe,"A",{href:!0});var qCt=s(eU);pSr=r(qCt,"FlaxRobertaForTokenClassification"),qCt.forEach(t),_Sr=r(IRe," (RoBERTa model)"),IRe.forEach(t),uSr=i(Oo),p3=n(Oo,"LI",{});var qRe=s(p3);rFe=n(qRe,"STRONG",{});var NCt=s(rFe);bSr=r(NCt,"roformer"),NCt.forEach(t),vSr=r(qRe," \u2014 "),oU=n(qRe,"A",{href:!0});var jCt=s(oU);FSr=r(jCt,"FlaxRoFormerForTokenClassification"),jCt.forEach(t),TSr=r(qRe," (RoFormer model)"),qRe.forEach(t),MSr=i(Oo),_3=n(Oo,"LI",{});var NRe=s(_3);tFe=n(NRe,"STRONG",{});var DCt=s(tFe);ESr=r(DCt,"xlm-roberta"),DCt.forEach(t),CSr=r(NRe," \u2014 "),rU=n(NRe,"A",{href:!0});var GCt=s(rU);wSr=r(GCt,"FlaxXLMRobertaForTokenClassification"),GCt.forEach(t),ASr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),Oo.forEach(t),ySr=i($a),aFe=n($a,"P",{});var OCt=s(aFe);LSr=r(OCt,"Examples:"),OCt.forEach(t),xSr=i($a),m(K8.$$.fragment,$a),$a.forEach(t),yi.forEach(t),XPe=i(c),Ef=n(c,"H2",{class:!0});var oqe=s(Ef);u3=n(oqe,"A",{id:!0,class:!0,href:!0});var VCt=s(u3);nFe=n(VCt,"SPAN",{});var XCt=s(nFe);m(Z8.$$.fragment,XCt),XCt.forEach(t),VCt.forEach(t),kSr=i(oqe),sFe=n(oqe,"SPAN",{});var zCt=s(sFe);SSr=r(zCt,"FlaxAutoModelForMultipleChoice"),zCt.forEach(t),oqe.forEach(t),zPe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);m(e7.$$.fragment,xi),RSr=i(xi),Cf=n(xi,"P",{});var fY=s(Cf);BSr=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tU=n(fY,"A",{href:!0});var QCt=s(tU);PSr=r(QCt,"from_pretrained()"),QCt.forEach(t),$Sr=r(fY," class method or the "),aU=n(fY,"A",{href:!0});var WCt=s(aU);ISr=r(WCt,"from_config()"),WCt.forEach(t),qSr=r(fY,` class
method.`),fY.forEach(t),NSr=i(xi),o7=n(xi,"P",{});var rqe=s(o7);jSr=r(rqe,"This class cannot be instantiated directly using "),lFe=n(rqe,"CODE",{});var HCt=s(lFe);DSr=r(HCt,"__init__()"),HCt.forEach(t),GSr=r(rqe," (throws an error)."),rqe.forEach(t),OSr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(r7.$$.fragment,ki),VSr=i(ki),iFe=n(ki,"P",{});var UCt=s(iFe);XSr=r(UCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UCt.forEach(t),zSr=i(ki),wf=n(ki,"P",{});var mY=s(wf);QSr=r(mY,`Note:
Loading a model from its configuration file does `),dFe=n(mY,"STRONG",{});var JCt=s(dFe);WSr=r(JCt,"not"),JCt.forEach(t),HSr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(mY,"A",{href:!0});var YCt=s(nU);USr=r(YCt,"from_pretrained()"),YCt.forEach(t),JSr=r(mY," to load the model weights."),mY.forEach(t),YSr=i(ki),cFe=n(ki,"P",{});var KCt=s(cFe);KSr=r(KCt,"Examples:"),KCt.forEach(t),ZSr=i(ki),m(t7.$$.fragment,ki),ki.forEach(t),eRr=i(xi),Io=n(xi,"DIV",{class:!0});var Ia=s(Io);m(a7.$$.fragment,Ia),oRr=i(Ia),fFe=n(Ia,"P",{});var ZCt=s(fFe);rRr=r(ZCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ZCt.forEach(t),tRr=i(Ia),Nn=n(Ia,"P",{});var xC=s(Nn);aRr=r(xC,"The model class to instantiate is selected based on the "),mFe=n(xC,"CODE",{});var ewt=s(mFe);nRr=r(ewt,"model_type"),ewt.forEach(t),sRr=r(xC,` property of the config object (either
passed as an argument or loaded from `),gFe=n(xC,"CODE",{});var owt=s(gFe);lRr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),iRr=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hFe=n(xC,"CODE",{});var rwt=s(hFe);dRr=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),cRr=r(xC,":"),xC.forEach(t),fRr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);b3=n(Vo,"LI",{});var jRe=s(b3);pFe=n(jRe,"STRONG",{});var twt=s(pFe);mRr=r(twt,"albert"),twt.forEach(t),gRr=r(jRe," \u2014 "),sU=n(jRe,"A",{href:!0});var awt=s(sU);hRr=r(awt,"FlaxAlbertForMultipleChoice"),awt.forEach(t),pRr=r(jRe," (ALBERT model)"),jRe.forEach(t),_Rr=i(Vo),v3=n(Vo,"LI",{});var DRe=s(v3);_Fe=n(DRe,"STRONG",{});var nwt=s(_Fe);uRr=r(nwt,"bert"),nwt.forEach(t),bRr=r(DRe," \u2014 "),lU=n(DRe,"A",{href:!0});var swt=s(lU);vRr=r(swt,"FlaxBertForMultipleChoice"),swt.forEach(t),FRr=r(DRe," (BERT model)"),DRe.forEach(t),TRr=i(Vo),F3=n(Vo,"LI",{});var GRe=s(F3);uFe=n(GRe,"STRONG",{});var lwt=s(uFe);MRr=r(lwt,"big_bird"),lwt.forEach(t),ERr=r(GRe," \u2014 "),iU=n(GRe,"A",{href:!0});var iwt=s(iU);CRr=r(iwt,"FlaxBigBirdForMultipleChoice"),iwt.forEach(t),wRr=r(GRe," (BigBird model)"),GRe.forEach(t),ARr=i(Vo),T3=n(Vo,"LI",{});var ORe=s(T3);bFe=n(ORe,"STRONG",{});var dwt=s(bFe);yRr=r(dwt,"distilbert"),dwt.forEach(t),LRr=r(ORe," \u2014 "),dU=n(ORe,"A",{href:!0});var cwt=s(dU);xRr=r(cwt,"FlaxDistilBertForMultipleChoice"),cwt.forEach(t),kRr=r(ORe," (DistilBERT model)"),ORe.forEach(t),SRr=i(Vo),M3=n(Vo,"LI",{});var VRe=s(M3);vFe=n(VRe,"STRONG",{});var fwt=s(vFe);RRr=r(fwt,"electra"),fwt.forEach(t),BRr=r(VRe," \u2014 "),cU=n(VRe,"A",{href:!0});var mwt=s(cU);PRr=r(mwt,"FlaxElectraForMultipleChoice"),mwt.forEach(t),$Rr=r(VRe," (ELECTRA model)"),VRe.forEach(t),IRr=i(Vo),E3=n(Vo,"LI",{});var XRe=s(E3);FFe=n(XRe,"STRONG",{});var gwt=s(FFe);qRr=r(gwt,"roberta"),gwt.forEach(t),NRr=r(XRe," \u2014 "),fU=n(XRe,"A",{href:!0});var hwt=s(fU);jRr=r(hwt,"FlaxRobertaForMultipleChoice"),hwt.forEach(t),DRr=r(XRe," (RoBERTa model)"),XRe.forEach(t),GRr=i(Vo),C3=n(Vo,"LI",{});var zRe=s(C3);TFe=n(zRe,"STRONG",{});var pwt=s(TFe);ORr=r(pwt,"roformer"),pwt.forEach(t),VRr=r(zRe," \u2014 "),mU=n(zRe,"A",{href:!0});var _wt=s(mU);XRr=r(_wt,"FlaxRoFormerForMultipleChoice"),_wt.forEach(t),zRr=r(zRe," (RoFormer model)"),zRe.forEach(t),QRr=i(Vo),w3=n(Vo,"LI",{});var QRe=s(w3);MFe=n(QRe,"STRONG",{});var uwt=s(MFe);WRr=r(uwt,"xlm-roberta"),uwt.forEach(t),HRr=r(QRe," \u2014 "),gU=n(QRe,"A",{href:!0});var bwt=s(gU);URr=r(bwt,"FlaxXLMRobertaForMultipleChoice"),bwt.forEach(t),JRr=r(QRe," (XLM-RoBERTa model)"),QRe.forEach(t),Vo.forEach(t),YRr=i(Ia),EFe=n(Ia,"P",{});var vwt=s(EFe);KRr=r(vwt,"Examples:"),vwt.forEach(t),ZRr=i(Ia),m(n7.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),QPe=i(c),Af=n(c,"H2",{class:!0});var tqe=s(Af);A3=n(tqe,"A",{id:!0,class:!0,href:!0});var Fwt=s(A3);CFe=n(Fwt,"SPAN",{});var Twt=s(CFe);m(s7.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),eBr=i(tqe),wFe=n(tqe,"SPAN",{});var Mwt=s(wFe);oBr=r(Mwt,"FlaxAutoModelForNextSentencePrediction"),Mwt.forEach(t),tqe.forEach(t),WPe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);m(l7.$$.fragment,Si),rBr=i(Si),yf=n(Si,"P",{});var gY=s(yf);tBr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),hU=n(gY,"A",{href:!0});var Ewt=s(hU);aBr=r(Ewt,"from_pretrained()"),Ewt.forEach(t),nBr=r(gY," class method or the "),pU=n(gY,"A",{href:!0});var Cwt=s(pU);sBr=r(Cwt,"from_config()"),Cwt.forEach(t),lBr=r(gY,` class
method.`),gY.forEach(t),iBr=i(Si),i7=n(Si,"P",{});var aqe=s(i7);dBr=r(aqe,"This class cannot be instantiated directly using "),AFe=n(aqe,"CODE",{});var wwt=s(AFe);cBr=r(wwt,"__init__()"),wwt.forEach(t),fBr=r(aqe," (throws an error)."),aqe.forEach(t),mBr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(d7.$$.fragment,Ri),gBr=i(Ri),yFe=n(Ri,"P",{});var Awt=s(yFe);hBr=r(Awt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Awt.forEach(t),pBr=i(Ri),Lf=n(Ri,"P",{});var hY=s(Lf);_Br=r(hY,`Note:
Loading a model from its configuration file does `),LFe=n(hY,"STRONG",{});var ywt=s(LFe);uBr=r(ywt,"not"),ywt.forEach(t),bBr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(hY,"A",{href:!0});var Lwt=s(_U);vBr=r(Lwt,"from_pretrained()"),Lwt.forEach(t),FBr=r(hY," to load the model weights."),hY.forEach(t),TBr=i(Ri),xFe=n(Ri,"P",{});var xwt=s(xFe);MBr=r(xwt,"Examples:"),xwt.forEach(t),EBr=i(Ri),m(c7.$$.fragment,Ri),Ri.forEach(t),CBr=i(Si),qo=n(Si,"DIV",{class:!0});var qa=s(qo);m(f7.$$.fragment,qa),wBr=i(qa),kFe=n(qa,"P",{});var kwt=s(kFe);ABr=r(kwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),kwt.forEach(t),yBr=i(qa),jn=n(qa,"P",{});var kC=s(jn);LBr=r(kC,"The model class to instantiate is selected based on the "),SFe=n(kC,"CODE",{});var Swt=s(SFe);xBr=r(Swt,"model_type"),Swt.forEach(t),kBr=r(kC,` property of the config object (either
passed as an argument or loaded from `),RFe=n(kC,"CODE",{});var Rwt=s(RFe);SBr=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),RBr=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(kC,"CODE",{});var Bwt=s(BFe);BBr=r(Bwt,"pretrained_model_name_or_path"),Bwt.forEach(t),PBr=r(kC,":"),kC.forEach(t),$Br=i(qa),PFe=n(qa,"UL",{});var Pwt=s(PFe);y3=n(Pwt,"LI",{});var WRe=s(y3);$Fe=n(WRe,"STRONG",{});var $wt=s($Fe);IBr=r($wt,"bert"),$wt.forEach(t),qBr=r(WRe," \u2014 "),uU=n(WRe,"A",{href:!0});var Iwt=s(uU);NBr=r(Iwt,"FlaxBertForNextSentencePrediction"),Iwt.forEach(t),jBr=r(WRe," (BERT model)"),WRe.forEach(t),Pwt.forEach(t),DBr=i(qa),IFe=n(qa,"P",{});var qwt=s(IFe);GBr=r(qwt,"Examples:"),qwt.forEach(t),OBr=i(qa),m(m7.$$.fragment,qa),qa.forEach(t),Si.forEach(t),HPe=i(c),xf=n(c,"H2",{class:!0});var nqe=s(xf);L3=n(nqe,"A",{id:!0,class:!0,href:!0});var Nwt=s(L3);qFe=n(Nwt,"SPAN",{});var jwt=s(qFe);m(g7.$$.fragment,jwt),jwt.forEach(t),Nwt.forEach(t),VBr=i(nqe),NFe=n(nqe,"SPAN",{});var Dwt=s(NFe);XBr=r(Dwt,"FlaxAutoModelForImageClassification"),Dwt.forEach(t),nqe.forEach(t),UPe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);m(h7.$$.fragment,Bi),zBr=i(Bi),kf=n(Bi,"P",{});var pY=s(kf);QBr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bU=n(pY,"A",{href:!0});var Gwt=s(bU);WBr=r(Gwt,"from_pretrained()"),Gwt.forEach(t),HBr=r(pY," class method or the "),vU=n(pY,"A",{href:!0});var Owt=s(vU);UBr=r(Owt,"from_config()"),Owt.forEach(t),JBr=r(pY,` class
method.`),pY.forEach(t),YBr=i(Bi),p7=n(Bi,"P",{});var sqe=s(p7);KBr=r(sqe,"This class cannot be instantiated directly using "),jFe=n(sqe,"CODE",{});var Vwt=s(jFe);ZBr=r(Vwt,"__init__()"),Vwt.forEach(t),ePr=r(sqe," (throws an error)."),sqe.forEach(t),oPr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);m(_7.$$.fragment,Pi),rPr=i(Pi),DFe=n(Pi,"P",{});var Xwt=s(DFe);tPr=r(Xwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xwt.forEach(t),aPr=i(Pi),Sf=n(Pi,"P",{});var _Y=s(Sf);nPr=r(_Y,`Note:
Loading a model from its configuration file does `),GFe=n(_Y,"STRONG",{});var zwt=s(GFe);sPr=r(zwt,"not"),zwt.forEach(t),lPr=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(_Y,"A",{href:!0});var Qwt=s(FU);iPr=r(Qwt,"from_pretrained()"),Qwt.forEach(t),dPr=r(_Y," to load the model weights."),_Y.forEach(t),cPr=i(Pi),OFe=n(Pi,"P",{});var Wwt=s(OFe);fPr=r(Wwt,"Examples:"),Wwt.forEach(t),mPr=i(Pi),m(u7.$$.fragment,Pi),Pi.forEach(t),gPr=i(Bi),No=n(Bi,"DIV",{class:!0});var Na=s(No);m(b7.$$.fragment,Na),hPr=i(Na),VFe=n(Na,"P",{});var Hwt=s(VFe);pPr=r(Hwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hwt.forEach(t),_Pr=i(Na),Dn=n(Na,"P",{});var SC=s(Dn);uPr=r(SC,"The model class to instantiate is selected based on the "),XFe=n(SC,"CODE",{});var Uwt=s(XFe);bPr=r(Uwt,"model_type"),Uwt.forEach(t),vPr=r(SC,` property of the config object (either
passed as an argument or loaded from `),zFe=n(SC,"CODE",{});var Jwt=s(zFe);FPr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),TPr=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(SC,"CODE",{});var Ywt=s(QFe);MPr=r(Ywt,"pretrained_model_name_or_path"),Ywt.forEach(t),EPr=r(SC,":"),SC.forEach(t),CPr=i(Na),v7=n(Na,"UL",{});var lqe=s(v7);x3=n(lqe,"LI",{});var HRe=s(x3);WFe=n(HRe,"STRONG",{});var Kwt=s(WFe);wPr=r(Kwt,"beit"),Kwt.forEach(t),APr=r(HRe," \u2014 "),TU=n(HRe,"A",{href:!0});var Zwt=s(TU);yPr=r(Zwt,"FlaxBeitForImageClassification"),Zwt.forEach(t),LPr=r(HRe," (BEiT model)"),HRe.forEach(t),xPr=i(lqe),k3=n(lqe,"LI",{});var URe=s(k3);HFe=n(URe,"STRONG",{});var eAt=s(HFe);kPr=r(eAt,"vit"),eAt.forEach(t),SPr=r(URe," \u2014 "),MU=n(URe,"A",{href:!0});var oAt=s(MU);RPr=r(oAt,"FlaxViTForImageClassification"),oAt.forEach(t),BPr=r(URe," (ViT model)"),URe.forEach(t),lqe.forEach(t),PPr=i(Na),UFe=n(Na,"P",{});var rAt=s(UFe);$Pr=r(rAt,"Examples:"),rAt.forEach(t),IPr=i(Na),m(F7.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),JPe=i(c),Rf=n(c,"H2",{class:!0});var iqe=s(Rf);S3=n(iqe,"A",{id:!0,class:!0,href:!0});var tAt=s(S3);JFe=n(tAt,"SPAN",{});var aAt=s(JFe);m(T7.$$.fragment,aAt),aAt.forEach(t),tAt.forEach(t),qPr=i(iqe),YFe=n(iqe,"SPAN",{});var nAt=s(YFe);NPr=r(nAt,"FlaxAutoModelForVision2Seq"),nAt.forEach(t),iqe.forEach(t),YPe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);m(M7.$$.fragment,$i),jPr=i($i),Bf=n($i,"P",{});var uY=s(Bf);DPr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),EU=n(uY,"A",{href:!0});var sAt=s(EU);GPr=r(sAt,"from_pretrained()"),sAt.forEach(t),OPr=r(uY," class method or the "),CU=n(uY,"A",{href:!0});var lAt=s(CU);VPr=r(lAt,"from_config()"),lAt.forEach(t),XPr=r(uY,` class
method.`),uY.forEach(t),zPr=i($i),E7=n($i,"P",{});var dqe=s(E7);QPr=r(dqe,"This class cannot be instantiated directly using "),KFe=n(dqe,"CODE",{});var iAt=s(KFe);WPr=r(iAt,"__init__()"),iAt.forEach(t),HPr=r(dqe," (throws an error)."),dqe.forEach(t),UPr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);m(C7.$$.fragment,Ii),JPr=i(Ii),ZFe=n(Ii,"P",{});var dAt=s(ZFe);YPr=r(dAt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dAt.forEach(t),KPr=i(Ii),Pf=n(Ii,"P",{});var bY=s(Pf);ZPr=r(bY,`Note:
Loading a model from its configuration file does `),eTe=n(bY,"STRONG",{});var cAt=s(eTe);e$r=r(cAt,"not"),cAt.forEach(t),o$r=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),wU=n(bY,"A",{href:!0});var fAt=s(wU);r$r=r(fAt,"from_pretrained()"),fAt.forEach(t),t$r=r(bY," to load the model weights."),bY.forEach(t),a$r=i(Ii),oTe=n(Ii,"P",{});var mAt=s(oTe);n$r=r(mAt,"Examples:"),mAt.forEach(t),s$r=i(Ii),m(w7.$$.fragment,Ii),Ii.forEach(t),l$r=i($i),jo=n($i,"DIV",{class:!0});var ja=s(jo);m(A7.$$.fragment,ja),i$r=i(ja),rTe=n(ja,"P",{});var gAt=s(rTe);d$r=r(gAt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gAt.forEach(t),c$r=i(ja),Gn=n(ja,"P",{});var RC=s(Gn);f$r=r(RC,"The model class to instantiate is selected based on the "),tTe=n(RC,"CODE",{});var hAt=s(tTe);m$r=r(hAt,"model_type"),hAt.forEach(t),g$r=r(RC,` property of the config object (either
passed as an argument or loaded from `),aTe=n(RC,"CODE",{});var pAt=s(aTe);h$r=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),p$r=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(RC,"CODE",{});var _At=s(nTe);_$r=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),u$r=r(RC,":"),RC.forEach(t),b$r=i(ja),sTe=n(ja,"UL",{});var uAt=s(sTe);R3=n(uAt,"LI",{});var JRe=s(R3);lTe=n(JRe,"STRONG",{});var bAt=s(lTe);v$r=r(bAt,"vision-encoder-decoder"),bAt.forEach(t),F$r=r(JRe," \u2014 "),AU=n(JRe,"A",{href:!0});var vAt=s(AU);T$r=r(vAt,"FlaxVisionEncoderDecoderModel"),vAt.forEach(t),M$r=r(JRe," (Vision Encoder decoder model)"),JRe.forEach(t),uAt.forEach(t),E$r=i(ja),iTe=n(ja,"P",{});var FAt=s(iTe);C$r=r(FAt,"Examples:"),FAt.forEach(t),w$r=i(ja),m(y7.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(ee,"name","hf:doc:metadata"),d(ee,"content",JSON.stringify(kAt)),d(we,"id","auto-classes"),d(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(we,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(S9,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(R9,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertConfig"),d(B9,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig"),d(P9,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitConfig"),d($9,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertConfig"),d(I9,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(q9,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdConfig"),d(N9,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(j9,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(D9,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(G9,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertConfig"),d(O9,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineConfig"),d(V9,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPConfig"),d(X9,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertConfig"),d(z9,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextConfig"),d(Q9,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLConfig"),d(W9,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(H9,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(U9,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(J9,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaConfig"),d(Y9,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(K9,"href","/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Z9,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTConfig"),d(ex,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrConfig"),d(ox,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertConfig"),d(rx,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRConfig"),d(tx,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTConfig"),d(ax,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraConfig"),d(nx,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(sx,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertConfig"),d(lx,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAConfig"),d(ix,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetConfig"),d(dx,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTConfig"),d(cx,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelConfig"),d(fx,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNConfig"),d(mx,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Config"),d(gx,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(hx,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJConfig"),d(px,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertConfig"),d(_x,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertConfig"),d(ux,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(bx,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(vx,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Fx,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDConfig"),d(Tx,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerConfig"),d(Mx,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeConfig"),d(Ex,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertConfig"),d(Cx,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Config"),d(wx,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianConfig"),d(Ax,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(yx,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartConfig"),d(Lx,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(xx,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(kx,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetConfig"),d(Sx,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Config"),d(Rx,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Bx,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Px,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusConfig"),d($x,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Ix,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartConfig"),d(qx,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Nx,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(jx,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Dx,"href","/docs/transformers/pr_16654/en/model_doc/rag#transformers.RagConfig"),d(Gx,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmConfig"),d(Ox,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerConfig"),d(Vx,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetConfig"),d(Xx,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertConfig"),d(zx,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetConfig"),d(Qx,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertConfig"),d(Wx,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaConfig"),d(Hx,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerConfig"),d(Ux,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerConfig"),d(Jx,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWConfig"),d(Yx,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDConfig"),d(Kx,"href","/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Zx,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(ek,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(ok,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterConfig"),d(rk,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(tk,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinConfig"),d(ak,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Config"),d(nk,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasConfig"),d(sk,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartConfig"),d(lk,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(ik,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRConfig"),d(dk,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ck,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(fk,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanConfig"),d(mk,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltConfig"),d(gk,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(hk,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(pk,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(_k,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTConfig"),d(uk,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(bk,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(vk,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMConfig"),d(Fk,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMConfig"),d(Tk,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMConfig"),d(Mk,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Ek,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Ck,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(wk,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetConfig"),d(Ak,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoConfig"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"id","transformers.AutoTokenizer"),d(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(yk,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Lk,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizer"),d(xk,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(kk,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartTokenizer"),d(Sk,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16654/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Bk,"href","/docs/transformers/pr_16654/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16654/en/model_doc/bartpho#transformers.BartphoTokenizer"),d($k,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),d(Ik,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),d(qk,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Nk,"href","/docs/transformers/pr_16654/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(jk,"href","/docs/transformers/pr_16654/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Dk,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Gk,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Vk,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(zk,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Wk,"href","/docs/transformers/pr_16654/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Hk,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Uk,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineTokenizer"),d(Yk,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPTokenizer"),d(Kk,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(eS,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(oS,"href","/docs/transformers/pr_16654/en/model_doc/cpm#transformers.CpmTokenizer"),d(rS,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(tS,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaTokenizer"),d(aS,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(nS,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(sS,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(lS,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(iS,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(dS,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(cS,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraTokenizer"),d(fS,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(mS,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(gS,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetTokenizer"),d(hS,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(pS,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(_S,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelTokenizer"),d(uS,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(bS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(vS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(FS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(TS,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(MS,"href","/docs/transformers/pr_16654/en/model_doc/herbert#transformers.HerbertTokenizer"),d(ES,"href","/docs/transformers/pr_16654/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(CS,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(wS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),d(AS,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(yS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(LS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(xS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(kS,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(SS,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(RS,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(BS,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDTokenizer"),d(PS,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDTokenizerFast"),d($S,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerTokenizer"),d(IS,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(qS,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeTokenizer"),d(NS,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(jS,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(DS,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(GS,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianTokenizer"),d(OS,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartTokenizer"),d(VS,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(XS,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(zS,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(QS,"href","/docs/transformers/pr_16654/en/model_doc/mluke#transformers.MLukeTokenizer"),d(WS,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(HS,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(US,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(JS,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(YS,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5Tokenizer"),d(KS,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5TokenizerFast"),d(ZS,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(eR,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(oR,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(rR,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(tR,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(aR,"href","/docs/transformers/pr_16654/en/model_doc/phobert#transformers.PhobertTokenizer"),d(nR,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartTokenizer"),d(sR,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(lR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizer"),d(iR,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertTokenizerFast"),d(dR,"href","/docs/transformers/pr_16654/en/model_doc/rag#transformers.RagTokenizer"),d(cR,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmTokenizer"),d(fR,"href","/docs/transformers/pr_16654/en/model_doc/realm#transformers.RealmTokenizerFast"),d(mR,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerTokenizer"),d(gR,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(hR,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertTokenizer"),d(pR,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(_R,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(uR,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(bR,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizer"),d(vR,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(FR,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(TR,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(MR,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(ER,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(CR,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterTokenizer"),d(wR,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(AR,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(yR,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(LR,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5Tokenizer"),d(xR,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.T5TokenizerFast"),d(kR,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasTokenizer"),d(SR,"href","/docs/transformers/pr_16654/en/model_doc/tapex#transformers.TapexTokenizer"),d(RR,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(BR,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(PR,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d($R,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMTokenizer"),d(IR,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(qR,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMTokenizer"),d(NR,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(jR,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(DR,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(GR,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(OR,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bh,"id","transformers.AutoFeatureExtractor"),d(bh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(VR,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(XR,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(YR,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(KR,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(tB,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(aB,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(nB,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(sB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(lB,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(iB,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(dB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gh,"id","transformers.AutoProcessor"),d(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(cB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(fB,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPProcessor"),d(mB,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAProcessor"),d(gB,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(hB,"href","/docs/transformers/pr_16654/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(pB,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(_B,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(uB,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRProcessor"),d(bB,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(vB,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zh,"id","transformers.AutoModel"),d(Zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Zh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(FB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MB,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EB,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertModel"),d(CB,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartModel"),d(wB,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitModel"),d(AB,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertModel"),d(yB,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(LB,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdModel"),d(xB,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(kB,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(SB,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(RB,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertModel"),d(BB,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineModel"),d(PB,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.CLIPModel"),d($B,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertModel"),d(IB,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextModel"),d(qB,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLModel"),d(NB,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(jB,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(DB,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(GB,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaModel"),d(OB,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(VB,"href","/docs/transformers/pr_16654/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(XB,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTModel"),d(zB,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrModel"),d(QB,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertModel"),d(WB,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(HB,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTModel"),d(UB,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraModel"),d(JB,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertModel"),d(YB,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAModel"),d(KB,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetModel"),d(ZB,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTModel"),d(eP,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelModel"),d(oP,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelBaseModel"),d(rP,"href","/docs/transformers/pr_16654/en/model_doc/glpn#transformers.GLPNModel"),d(tP,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2Model"),d(aP,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(nP,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJModel"),d(sP,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertModel"),d(lP,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertModel"),d(iP,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(dP,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(cP,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(fP,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDModel"),d(mP,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerModel"),d(gP,"href","/docs/transformers/pr_16654/en/model_doc/luke#transformers.LukeModel"),d(hP,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertModel"),d(pP,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100Model"),d(_P,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianModel"),d(uP,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerModel"),d(bP,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartModel"),d(vP,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(FP,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertModel"),d(TP,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetModel"),d(MP,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5Model"),d(EP,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerModel"),d(CP,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(wP,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusModel"),d(AP,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverModel"),d(yP,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartModel"),d(LP,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerModel"),d(xP,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(kP,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertModel"),d(SP,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModel"),d(RP,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetModel"),d(BP,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertModel"),d(PP,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetModel"),d($P,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel"),d(IP,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaModel"),d(qP,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerModel"),d(NP,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerModel"),d(jP,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWModel"),d(DP,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDModel"),d(GP,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(OP,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterModel"),d(VP,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(XP,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinModel"),d(zP,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5Model"),d(QP,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasModel"),d(WP,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(HP,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechModel"),d(UP,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(JP,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanModel"),d(YP,"href","/docs/transformers/pr_16654/en/model_doc/vilt#transformers.ViltModel"),d(KP,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(ZP,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertModel"),d(e$,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTModel"),d(o$,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(r$,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(t$,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMModel"),d(a$,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMModel"),d(n$,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMModel"),d(s$,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(l$,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(i$,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(d$,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetModel"),d(c$,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G_,"id","transformers.AutoModelForPreTraining"),d(G_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(f$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(m$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(g$,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h$,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForPreTraining"),d(p$,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(_$,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForPreTraining"),d(u$,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(b$,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(v$,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(F$,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(T$,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(M$,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(E$,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(C$,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForPreTraining"),d(w$,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(A$,"href","/docs/transformers/pr_16654/en/model_doc/flava#transformers.FLAVAForPreTraining"),d(y$,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForPreTraining"),d(L$,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(x$,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(k$,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(S$,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(R$,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(B$,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(P$,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d($$,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(I$,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(q$,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(N$,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(j$,"href","/docs/transformers/pr_16654/en/model_doc/retribert#transformers.RetriBertModel"),d(D$,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(G$,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(O$,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(V$,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(X$,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(z$,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(Q$,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(W$,"href","/docs/transformers/pr_16654/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(H$,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(U$,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(J$,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Y$,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(K$,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xu,"id","transformers.AutoModelForCausalLM"),d(xu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(eI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tI,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForCausalLM"),d(aI,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertLMHeadModel"),d(nI,"href","/docs/transformers/pr_16654/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(sI,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(lI,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(iI,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(dI,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(cI,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(fI,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(mI,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(gI,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForCausalLM"),d(hI,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(pI,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(_I,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(uI,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianForCausalLM"),d(bI,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForCausalLM"),d(vI,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(FI,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(TI,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(MI,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(EI,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(CI,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(wI,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(AI,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(yI,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(LI,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(xI,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(kI,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(SI,"href","/docs/transformers/pr_16654/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(RI,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(BI,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(PI,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d($I,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(II,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(qI,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m6,"id","transformers.AutoModelForMaskedLM"),d(m6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m6,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(NI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DI,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GI,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(OI,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(VI,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMaskedLM"),d(XI,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(zI,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(QI,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(WI,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(HI,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(UI,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(JI,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(YI,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(KI,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(ZI,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(eq,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(oq,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(rq,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(tq,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(aq,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(nq,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(sq,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(lq,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(iq,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(dq,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(cq,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(fq,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(mq,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(gq,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(hq,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(pq,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(_q,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(uq,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(bq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(vq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(Fq,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U6,"id","transformers.AutoModelForSeq2SeqLM"),d(U6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U6,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Tq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Eq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(xq,"href","/docs/transformers/pr_16654/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16654/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.MarianMTModel"),d(Bq,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d($q,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Iq,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(qq,"href","/docs/transformers/pr_16654/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Nq,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(jq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Dq,"href","/docs/transformers/pr_16654/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h1,"id","transformers.AutoModelForSequenceClassification"),d(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h1,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Gq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vq,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xq,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16654/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d($N,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(IN,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d4,"id","transformers.AutoModelForMultipleChoice"),d(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d4,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(qN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jN,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DN,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(ij,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(dj,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(cj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(fj,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(mj,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(gj,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j4,"id","transformers.AutoModelForNextSentencePrediction"),d(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j4,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(hj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_j,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uj,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(bj,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(vj,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(Fj,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Tj,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q4,"id","transformers.AutoModelForTokenClassification"),d(Q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q4,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Mj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ej,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cj,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wj,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(xj,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForTokenClassification"),d(kj,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d($j,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(qj,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(jj,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(zj,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(eD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(oD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(rD,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(tD,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yb,"id","transformers.AutoModelForQuestionAnswering"),d(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yb,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(aD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lD,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16654/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16654/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(TD,"href","/docs/transformers/pr_16654/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16654/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16654/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16654/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16654/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16654/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16654/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16654/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_16654/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(OD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(zD,"href","/docs/transformers/pr_16654/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h2,"id","transformers.AutoModelForTableQuestionAnswering"),d(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(QD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UD,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u2,"id","transformers.AutoModelForImageClassification"),d(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u2,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d(JD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KD,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZD,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForImageClassification"),d(eG,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(oG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(rG,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassification"),d(tG,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(aG,"href","/docs/transformers/pr_16654/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(nG,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(sG,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(lG,"href","/docs/transformers/pr_16654/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(iG,"href","/docs/transformers/pr_16654/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(dG,"href","/docs/transformers/pr_16654/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(cG,"href","/docs/transformers/pr_16654/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(fG,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(mG,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForImageClassification"),d(gG,"href","/docs/transformers/pr_16654/en/model_doc/van#transformers.VanForImageClassification"),d(hG,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k2,"id","transformers.AutoModelForVision2Seq"),d(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k2,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(pG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_G,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bG,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B2,"id","transformers.AutoModelForAudioClassification"),d(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B2,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(vG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(EG,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(CG,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(wG,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(AG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(yG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(LG,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(xG,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V2,"id","transformers.AutoModelForAudioFrameClassification"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(kG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(PG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d($G,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(IG,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U2,"id","transformers.AutoModelForCTC"),d(U2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U2,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(qG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DG,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(GG,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.HubertForCTC"),d(OG,"href","/docs/transformers/pr_16654/en/model_doc/sew#transformers.SEWForCTC"),d(VG,"href","/docs/transformers/pr_16654/en/model_doc/sew-d#transformers.SEWDForCTC"),d(XG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(zG,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(QG,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(WG,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n5,"id","transformers.AutoModelForSpeechSeq2Seq"),d(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n5,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(HG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YG,"href","/docs/transformers/pr_16654/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(KG,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d5,"id","transformers.AutoModelForAudioXVector"),d(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d5,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(ZG,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rO,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(tO,"href","/docs/transformers/pr_16654/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(aO,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(nO,"href","/docs/transformers/pr_16654/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p5,"id","transformers.AutoModelForMaskedImageModeling"),d(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p5,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(sO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dO,"href","/docs/transformers/pr_16654/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(cO,"href","/docs/transformers/pr_16654/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(fO,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F5,"id","transformers.AutoModelForObjectDetection"),d(F5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F5,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(mO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pO,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E5,"id","transformers.AutoModelForImageSegmentation"),d(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E5,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(_O,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vO,"href","/docs/transformers/pr_16654/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A5,"id","transformers.AutoModelForSemanticSegmentation"),d(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A5,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(FO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EO,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(CO,"href","/docs/transformers/pr_16654/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(wO,"href","/docs/transformers/pr_16654/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(AO,"href","/docs/transformers/pr_16654/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R5,"id","transformers.AutoModelForInstanceSegmentation"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(yO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kO,"href","/docs/transformers/pr_16654/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($5,"id","transformers.TFAutoModel"),d($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($5,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(SO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BO,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PO,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertModel"),d($O,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartModel"),d(IO,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertModel"),d(qO,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(NO,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(jO,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertModel"),d(DO,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.TFCLIPModel"),d(GO,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertModel"),d(OO,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextModel"),d(VO,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLModel"),d(XO,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaModel"),d(zO,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(QO,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(WO,"href","/docs/transformers/pr_16654/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(HO,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraModel"),d(UO,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(JO,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelModel"),d(YO,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(KO,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2Model"),d(ZO,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJModel"),d(eV,"href","/docs/transformers/pr_16654/en/model_doc/hubert#transformers.TFHubertModel"),d(oV,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(rV,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDModel"),d(tV,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerModel"),d(aV,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertModel"),d(nV,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianModel"),d(sV,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartModel"),d(lV,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(iV,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetModel"),d(dV,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5Model"),d(cV,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(fV,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusModel"),d(mV,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertModel"),d(gV,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaModel"),d(hV,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerModel"),d(pV,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(_V,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5Model"),d(uV,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasModel"),d(bV,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(vV,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTModel"),d(FV,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(TV,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(MV,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMModel"),d(EV,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(CV,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wv,"id","transformers.TFAutoModelForPreTraining"),d(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wv,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(wV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LV,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(xV,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(kV,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForPreTraining"),d(SV,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(RV,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(BV,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(PV,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForPreTraining"),d($V,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(IV,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(qV,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(NV,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(jV,"href","/docs/transformers/pr_16654/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(DV,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(GV,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(OV,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(VV,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(XV,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(zV,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(QV,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(WV,"href","/docs/transformers/pr_16654/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(HV,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(UV,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(JV,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uv,"id","transformers.TFAutoModelForCausalLM"),d(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uv,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(YV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZV,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eX,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(oX,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(rX,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(tX,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(aX,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(nX,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(sX,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(lX,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(iX,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(dX,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(cX,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(fX,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iF,"id","transformers.TFAutoModelForImageClassification"),d(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iF,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(mX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pX,"href","/docs/transformers/pr_16654/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(_X,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.TFViTForImageClassification"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fF,"id","transformers.TFAutoModelForMaskedLM"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(uX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FX,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(TX,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(MX,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(EX,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(CX,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(wX,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(AX,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(yX,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(LX,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(xX,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(kX,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(SX,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(RX,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(BX,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(PX,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d($X,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(IX,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(qX,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(NX,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(jX,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(RF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(DX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VX,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(zX,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(QX,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(WX,"href","/docs/transformers/pr_16654/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(HX,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.TFMarianMTModel"),d(UX,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(JX,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(YX,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(KX,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VF,"id","transformers.TFAutoModelForSequenceClassification"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(ZX,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ez,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rz,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(az,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16654/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16654/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16654/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(wz,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Az,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(yz,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_T,"id","transformers.TFAutoModelForMultipleChoice"),d(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_T,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Lz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sz,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d($z,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(zz,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Hz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yz,"href","/docs/transformers/pr_16654/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IT,"id","transformers.TFAutoModelForTokenClassification"),d(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Kz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zz,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oQ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(sQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(lQ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(fQ,"href","/docs/transformers/pr_16654/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(mQ,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(gQ,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(hQ,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(pQ,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(_Q,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(uQ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(bQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(vQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(FQ,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tM,"id","transformers.TFAutoModelForQuestionAnswering"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(TQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CQ,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16654/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_16654/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_16654/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16654/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(BQ,"href","/docs/transformers/pr_16654/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_16654/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_16654/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_16654/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(NQ,"href","/docs/transformers/pr_16654/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(DQ,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(GQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(OQ,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(VQ,"href","/docs/transformers/pr_16654/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CM,"id","transformers.TFAutoModelForVision2Seq"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(XQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WQ,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(HQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YQ,"href","/docs/transformers/pr_16654/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LM,"id","transformers.FlaxAutoModel"),d(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(KQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZQ,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oW,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertModel"),d(rW,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartModel"),d(tW,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitModel"),d(aW,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertModel"),d(nW,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(sW,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(lW,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(iW,"href","/docs/transformers/pr_16654/en/model_doc/clip#transformers.FlaxCLIPModel"),d(dW,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(cW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraModel"),d(fW,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(mW,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(gW,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(hW,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianModel"),d(pW,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartModel"),d(_W,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5Model"),d(uW,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(bW,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(vW,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(FW,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5Model"),d(TW,"href","/docs/transformers/pr_16654/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(MW,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTModel"),d(EW,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(CW,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(wW,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eE,"id","transformers.FlaxAutoModelForCausalLM"),d(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eE,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(AW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xW,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(kW,"href","/docs/transformers/pr_16654/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(SW,"href","/docs/transformers/pr_16654/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(RW,"href","/docs/transformers/pr_16654/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(BW,"href","/docs/transformers/pr_16654/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sE,"id","transformers.FlaxAutoModelForPreTraining"),d(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sE,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(PW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($W,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qW,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(NW,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(DW,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(GW,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(OW,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(VW,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(XW,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zW,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(QW,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(WW,"href","/docs/transformers/pr_16654/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(HW,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vE,"id","transformers.FlaxAutoModelForMaskedLM"),d(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(UW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YW,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KW,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(ZW,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(eH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(oH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(rH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(tH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(aH,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(nH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(sH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(lH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(kE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(iH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fH,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(mH,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(gH,"href","/docs/transformers/pr_16654/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(hH,"href","/docs/transformers/pr_16654/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(pH,"href","/docs/transformers/pr_16654/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(_H,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(uH,"href","/docs/transformers/pr_16654/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(bH,"href","/docs/transformers/pr_16654/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(vH,"href","/docs/transformers/pr_16654/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(DE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(FH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(CH,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(wH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(AH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(yH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(LH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(xH,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(kH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(SH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(RH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(BH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($H,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(qH,"href","/docs/transformers/pr_16654/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(NH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(jH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(DH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(GH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(OH,"href","/docs/transformers/pr_16654/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(VH,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(XH,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(zH,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i3,"id","transformers.FlaxAutoModelForTokenClassification"),d(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i3,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Ff,"class","relative group"),d(QH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HH,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UH,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(JH,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(YH,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(KH,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(ZH,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(eU,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(oU,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(rU,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u3,"id","transformers.FlaxAutoModelForMultipleChoice"),d(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u3,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(tU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sU,"href","/docs/transformers/pr_16654/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(lU,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(iU,"href","/docs/transformers/pr_16654/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(dU,"href","/docs/transformers/pr_16654/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(cU,"href","/docs/transformers/pr_16654/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(fU,"href","/docs/transformers/pr_16654/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(mU,"href","/docs/transformers/pr_16654/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(gU,"href","/docs/transformers/pr_16654/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(hU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_U,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uU,"href","/docs/transformers/pr_16654/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L3,"id","transformers.FlaxAutoModelForImageClassification"),d(L3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L3,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(bU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TU,"href","/docs/transformers/pr_16654/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(MU,"href","/docs/transformers/pr_16654/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S3,"id","transformers.FlaxAutoModelForVision2Seq"),d(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S3,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(EU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wU,"href","/docs/transformers/pr_16654/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AU,"href","/docs/transformers/pr_16654/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,ee),b(c,co,u),b(c,ce,u),e(ce,we),e(we,io),g(he,io,null),e(ce,Me),e(ce,Xo),e(Xo,qi),b(c,qf,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,BC),e(fa,Nf),b(c,ke,u),b(c,fo,u),e(fo,Di),e(fo,On),e(On,PC),e(fo,Vn),e(fo,Xn),e(Xn,$C),e(fo,Gi),e(fo,zn),e(zn,IC),e(fo,Oi),b(c,jf,u),g(Da,c,u),b(c,mo,u),b(c,ue,u),e(ue,w9),e(ue,Vi),e(Vi,A9),e(ue,y9),b(c,zo,u),b(c,Ga,u),e(Ga,L9),e(Ga,Df),e(Df,x9),e(Ga,cqe),b(c,YRe,u),b(c,Xi,u),e(Xi,Gf),e(Gf,vY),g(qC,vY,null),e(Xi,fqe),e(Xi,FY),e(FY,mqe),b(c,KRe,u),b(c,Qn,u),e(Qn,gqe),e(Qn,TY),e(TY,hqe),e(Qn,pqe),e(Qn,MY),e(MY,_qe),e(Qn,uqe),b(c,ZRe,u),g(NC,c,u),b(c,eBe,u),b(c,k9,u),e(k9,bqe),b(c,oBe,u),g(Of,c,u),b(c,rBe,u),b(c,zi,u),e(zi,Vf),e(Vf,EY),g(jC,EY,null),e(zi,vqe),e(zi,CY),e(CY,Fqe),b(c,tBe,u),b(c,Qo,u),g(DC,Qo,null),e(Qo,Tqe),e(Qo,GC),e(GC,Mqe),e(GC,S9),e(S9,Eqe),e(GC,Cqe),e(Qo,wqe),e(Qo,OC),e(OC,Aqe),e(OC,wY),e(wY,yqe),e(OC,Lqe),e(Qo,xqe),e(Qo,go),g(VC,go,null),e(go,kqe),e(go,AY),e(AY,Sqe),e(go,Rqe),e(go,Qi),e(Qi,Bqe),e(Qi,yY),e(yY,Pqe),e(Qi,$qe),e(Qi,LY),e(LY,Iqe),e(Qi,qqe),e(go,Nqe),e(go,v),e(v,Xf),e(Xf,xY),e(xY,jqe),e(Xf,Dqe),e(Xf,R9),e(R9,Gqe),e(Xf,Oqe),e(v,Vqe),e(v,zf),e(zf,kY),e(kY,Xqe),e(zf,zqe),e(zf,B9),e(B9,Qqe),e(zf,Wqe),e(v,Hqe),e(v,Qf),e(Qf,SY),e(SY,Uqe),e(Qf,Jqe),e(Qf,P9),e(P9,Yqe),e(Qf,Kqe),e(v,Zqe),e(v,Wf),e(Wf,RY),e(RY,eNe),e(Wf,oNe),e(Wf,$9),e($9,rNe),e(Wf,tNe),e(v,aNe),e(v,Hf),e(Hf,BY),e(BY,nNe),e(Hf,sNe),e(Hf,I9),e(I9,lNe),e(Hf,iNe),e(v,dNe),e(v,Uf),e(Uf,PY),e(PY,cNe),e(Uf,fNe),e(Uf,q9),e(q9,mNe),e(Uf,gNe),e(v,hNe),e(v,Jf),e(Jf,$Y),e($Y,pNe),e(Jf,_Ne),e(Jf,N9),e(N9,uNe),e(Jf,bNe),e(v,vNe),e(v,Yf),e(Yf,IY),e(IY,FNe),e(Yf,TNe),e(Yf,j9),e(j9,MNe),e(Yf,ENe),e(v,CNe),e(v,Kf),e(Kf,qY),e(qY,wNe),e(Kf,ANe),e(Kf,D9),e(D9,yNe),e(Kf,LNe),e(v,xNe),e(v,Zf),e(Zf,NY),e(NY,kNe),e(Zf,SNe),e(Zf,G9),e(G9,RNe),e(Zf,BNe),e(v,PNe),e(v,em),e(em,jY),e(jY,$Ne),e(em,INe),e(em,O9),e(O9,qNe),e(em,NNe),e(v,jNe),e(v,om),e(om,DY),e(DY,DNe),e(om,GNe),e(om,V9),e(V9,ONe),e(om,VNe),e(v,XNe),e(v,rm),e(rm,GY),e(GY,zNe),e(rm,QNe),e(rm,X9),e(X9,WNe),e(rm,HNe),e(v,UNe),e(v,tm),e(tm,OY),e(OY,JNe),e(tm,YNe),e(tm,z9),e(z9,KNe),e(tm,ZNe),e(v,eje),e(v,am),e(am,VY),e(VY,oje),e(am,rje),e(am,Q9),e(Q9,tje),e(am,aje),e(v,nje),e(v,nm),e(nm,XY),e(XY,sje),e(nm,lje),e(nm,W9),e(W9,ije),e(nm,dje),e(v,cje),e(v,sm),e(sm,zY),e(zY,fje),e(sm,mje),e(sm,H9),e(H9,gje),e(sm,hje),e(v,pje),e(v,lm),e(lm,QY),e(QY,_je),e(lm,uje),e(lm,U9),e(U9,bje),e(lm,vje),e(v,Fje),e(v,im),e(im,WY),e(WY,Tje),e(im,Mje),e(im,J9),e(J9,Eje),e(im,Cje),e(v,wje),e(v,dm),e(dm,HY),e(HY,Aje),e(dm,yje),e(dm,Y9),e(Y9,Lje),e(dm,xje),e(v,kje),e(v,cm),e(cm,UY),e(UY,Sje),e(cm,Rje),e(cm,K9),e(K9,Bje),e(cm,Pje),e(v,$je),e(v,fm),e(fm,JY),e(JY,Ije),e(fm,qje),e(fm,Z9),e(Z9,Nje),e(fm,jje),e(v,Dje),e(v,mm),e(mm,YY),e(YY,Gje),e(mm,Oje),e(mm,ex),e(ex,Vje),e(mm,Xje),e(v,zje),e(v,gm),e(gm,KY),e(KY,Qje),e(gm,Wje),e(gm,ox),e(ox,Hje),e(gm,Uje),e(v,Jje),e(v,hm),e(hm,ZY),e(ZY,Yje),e(hm,Kje),e(hm,rx),e(rx,Zje),e(hm,eDe),e(v,oDe),e(v,pm),e(pm,eK),e(eK,rDe),e(pm,tDe),e(pm,tx),e(tx,aDe),e(pm,nDe),e(v,sDe),e(v,_m),e(_m,oK),e(oK,lDe),e(_m,iDe),e(_m,ax),e(ax,dDe),e(_m,cDe),e(v,fDe),e(v,um),e(um,rK),e(rK,mDe),e(um,gDe),e(um,nx),e(nx,hDe),e(um,pDe),e(v,_De),e(v,bm),e(bm,tK),e(tK,uDe),e(bm,bDe),e(bm,sx),e(sx,vDe),e(bm,FDe),e(v,TDe),e(v,vm),e(vm,aK),e(aK,MDe),e(vm,EDe),e(vm,lx),e(lx,CDe),e(vm,wDe),e(v,ADe),e(v,Fm),e(Fm,nK),e(nK,yDe),e(Fm,LDe),e(Fm,ix),e(ix,xDe),e(Fm,kDe),e(v,SDe),e(v,Tm),e(Tm,sK),e(sK,RDe),e(Tm,BDe),e(Tm,dx),e(dx,PDe),e(Tm,$De),e(v,IDe),e(v,Mm),e(Mm,lK),e(lK,qDe),e(Mm,NDe),e(Mm,cx),e(cx,jDe),e(Mm,DDe),e(v,GDe),e(v,Em),e(Em,iK),e(iK,ODe),e(Em,VDe),e(Em,fx),e(fx,XDe),e(Em,zDe),e(v,QDe),e(v,Cm),e(Cm,dK),e(dK,WDe),e(Cm,HDe),e(Cm,mx),e(mx,UDe),e(Cm,JDe),e(v,YDe),e(v,wm),e(wm,cK),e(cK,KDe),e(wm,ZDe),e(wm,gx),e(gx,eGe),e(wm,oGe),e(v,rGe),e(v,Am),e(Am,fK),e(fK,tGe),e(Am,aGe),e(Am,hx),e(hx,nGe),e(Am,sGe),e(v,lGe),e(v,ym),e(ym,mK),e(mK,iGe),e(ym,dGe),e(ym,px),e(px,cGe),e(ym,fGe),e(v,mGe),e(v,Lm),e(Lm,gK),e(gK,gGe),e(Lm,hGe),e(Lm,_x),e(_x,pGe),e(Lm,_Ge),e(v,uGe),e(v,xm),e(xm,hK),e(hK,bGe),e(xm,vGe),e(xm,ux),e(ux,FGe),e(xm,TGe),e(v,MGe),e(v,km),e(km,pK),e(pK,EGe),e(km,CGe),e(km,bx),e(bx,wGe),e(km,AGe),e(v,yGe),e(v,Sm),e(Sm,_K),e(_K,LGe),e(Sm,xGe),e(Sm,vx),e(vx,kGe),e(Sm,SGe),e(v,RGe),e(v,Rm),e(Rm,uK),e(uK,BGe),e(Rm,PGe),e(Rm,Fx),e(Fx,$Ge),e(Rm,IGe),e(v,qGe),e(v,Bm),e(Bm,bK),e(bK,NGe),e(Bm,jGe),e(Bm,Tx),e(Tx,DGe),e(Bm,GGe),e(v,OGe),e(v,Pm),e(Pm,vK),e(vK,VGe),e(Pm,XGe),e(Pm,Mx),e(Mx,zGe),e(Pm,QGe),e(v,WGe),e(v,$m),e($m,FK),e(FK,HGe),e($m,UGe),e($m,Ex),e(Ex,JGe),e($m,YGe),e(v,KGe),e(v,Im),e(Im,TK),e(TK,ZGe),e(Im,eOe),e(Im,Cx),e(Cx,oOe),e(Im,rOe),e(v,tOe),e(v,qm),e(qm,MK),e(MK,aOe),e(qm,nOe),e(qm,wx),e(wx,sOe),e(qm,lOe),e(v,iOe),e(v,Nm),e(Nm,EK),e(EK,dOe),e(Nm,cOe),e(Nm,Ax),e(Ax,fOe),e(Nm,mOe),e(v,gOe),e(v,jm),e(jm,CK),e(CK,hOe),e(jm,pOe),e(jm,yx),e(yx,_Oe),e(jm,uOe),e(v,bOe),e(v,Dm),e(Dm,wK),e(wK,vOe),e(Dm,FOe),e(Dm,Lx),e(Lx,TOe),e(Dm,MOe),e(v,EOe),e(v,Gm),e(Gm,AK),e(AK,COe),e(Gm,wOe),e(Gm,xx),e(xx,AOe),e(Gm,yOe),e(v,LOe),e(v,Om),e(Om,yK),e(yK,xOe),e(Om,kOe),e(Om,kx),e(kx,SOe),e(Om,ROe),e(v,BOe),e(v,Vm),e(Vm,LK),e(LK,POe),e(Vm,$Oe),e(Vm,Sx),e(Sx,IOe),e(Vm,qOe),e(v,NOe),e(v,Xm),e(Xm,xK),e(xK,jOe),e(Xm,DOe),e(Xm,Rx),e(Rx,GOe),e(Xm,OOe),e(v,VOe),e(v,zm),e(zm,kK),e(kK,XOe),e(zm,zOe),e(zm,Bx),e(Bx,QOe),e(zm,WOe),e(v,HOe),e(v,Qm),e(Qm,SK),e(SK,UOe),e(Qm,JOe),e(Qm,Px),e(Px,YOe),e(Qm,KOe),e(v,ZOe),e(v,Wm),e(Wm,RK),e(RK,eVe),e(Wm,oVe),e(Wm,$x),e($x,rVe),e(Wm,tVe),e(v,aVe),e(v,Hm),e(Hm,BK),e(BK,nVe),e(Hm,sVe),e(Hm,Ix),e(Ix,lVe),e(Hm,iVe),e(v,dVe),e(v,Um),e(Um,PK),e(PK,cVe),e(Um,fVe),e(Um,qx),e(qx,mVe),e(Um,gVe),e(v,hVe),e(v,Jm),e(Jm,$K),e($K,pVe),e(Jm,_Ve),e(Jm,Nx),e(Nx,uVe),e(Jm,bVe),e(v,vVe),e(v,Ym),e(Ym,IK),e(IK,FVe),e(Ym,TVe),e(Ym,jx),e(jx,MVe),e(Ym,EVe),e(v,CVe),e(v,Km),e(Km,qK),e(qK,wVe),e(Km,AVe),e(Km,Dx),e(Dx,yVe),e(Km,LVe),e(v,xVe),e(v,Zm),e(Zm,NK),e(NK,kVe),e(Zm,SVe),e(Zm,Gx),e(Gx,RVe),e(Zm,BVe),e(v,PVe),e(v,eg),e(eg,jK),e(jK,$Ve),e(eg,IVe),e(eg,Ox),e(Ox,qVe),e(eg,NVe),e(v,jVe),e(v,og),e(og,DK),e(DK,DVe),e(og,GVe),e(og,Vx),e(Vx,OVe),e(og,VVe),e(v,XVe),e(v,rg),e(rg,GK),e(GK,zVe),e(rg,QVe),e(rg,Xx),e(Xx,WVe),e(rg,HVe),e(v,UVe),e(v,tg),e(tg,OK),e(OK,JVe),e(tg,YVe),e(tg,zx),e(zx,KVe),e(tg,ZVe),e(v,eXe),e(v,ag),e(ag,VK),e(VK,oXe),e(ag,rXe),e(ag,Qx),e(Qx,tXe),e(ag,aXe),e(v,nXe),e(v,ng),e(ng,XK),e(XK,sXe),e(ng,lXe),e(ng,Wx),e(Wx,iXe),e(ng,dXe),e(v,cXe),e(v,sg),e(sg,zK),e(zK,fXe),e(sg,mXe),e(sg,Hx),e(Hx,gXe),e(sg,hXe),e(v,pXe),e(v,lg),e(lg,QK),e(QK,_Xe),e(lg,uXe),e(lg,Ux),e(Ux,bXe),e(lg,vXe),e(v,FXe),e(v,ig),e(ig,WK),e(WK,TXe),e(ig,MXe),e(ig,Jx),e(Jx,EXe),e(ig,CXe),e(v,wXe),e(v,dg),e(dg,HK),e(HK,AXe),e(dg,yXe),e(dg,Yx),e(Yx,LXe),e(dg,xXe),e(v,kXe),e(v,cg),e(cg,UK),e(UK,SXe),e(cg,RXe),e(cg,Kx),e(Kx,BXe),e(cg,PXe),e(v,$Xe),e(v,fg),e(fg,JK),e(JK,IXe),e(fg,qXe),e(fg,Zx),e(Zx,NXe),e(fg,jXe),e(v,DXe),e(v,mg),e(mg,YK),e(YK,GXe),e(mg,OXe),e(mg,ek),e(ek,VXe),e(mg,XXe),e(v,zXe),e(v,gg),e(gg,KK),e(KK,QXe),e(gg,WXe),e(gg,ok),e(ok,HXe),e(gg,UXe),e(v,JXe),e(v,hg),e(hg,ZK),e(ZK,YXe),e(hg,KXe),e(hg,rk),e(rk,ZXe),e(hg,eze),e(v,oze),e(v,pg),e(pg,eZ),e(eZ,rze),e(pg,tze),e(pg,tk),e(tk,aze),e(pg,nze),e(v,sze),e(v,_g),e(_g,oZ),e(oZ,lze),e(_g,ize),e(_g,ak),e(ak,dze),e(_g,cze),e(v,fze),e(v,ug),e(ug,rZ),e(rZ,mze),e(ug,gze),e(ug,nk),e(nk,hze),e(ug,pze),e(v,_ze),e(v,bg),e(bg,tZ),e(tZ,uze),e(bg,bze),e(bg,sk),e(sk,vze),e(bg,Fze),e(v,Tze),e(v,vg),e(vg,aZ),e(aZ,Mze),e(vg,Eze),e(vg,lk),e(lk,Cze),e(vg,wze),e(v,Aze),e(v,Fg),e(Fg,nZ),e(nZ,yze),e(Fg,Lze),e(Fg,ik),e(ik,xze),e(Fg,kze),e(v,Sze),e(v,Tg),e(Tg,sZ),e(sZ,Rze),e(Tg,Bze),e(Tg,dk),e(dk,Pze),e(Tg,$ze),e(v,Ize),e(v,Mg),e(Mg,lZ),e(lZ,qze),e(Mg,Nze),e(Mg,ck),e(ck,jze),e(Mg,Dze),e(v,Gze),e(v,Eg),e(Eg,iZ),e(iZ,Oze),e(Eg,Vze),e(Eg,fk),e(fk,Xze),e(Eg,zze),e(v,Qze),e(v,Cg),e(Cg,dZ),e(dZ,Wze),e(Cg,Hze),e(Cg,mk),e(mk,Uze),e(Cg,Jze),e(v,Yze),e(v,wg),e(wg,cZ),e(cZ,Kze),e(wg,Zze),e(wg,gk),e(gk,eQe),e(wg,oQe),e(v,rQe),e(v,Ag),e(Ag,fZ),e(fZ,tQe),e(Ag,aQe),e(Ag,hk),e(hk,nQe),e(Ag,sQe),e(v,lQe),e(v,yg),e(yg,mZ),e(mZ,iQe),e(yg,dQe),e(yg,pk),e(pk,cQe),e(yg,fQe),e(v,mQe),e(v,Lg),e(Lg,gZ),e(gZ,gQe),e(Lg,hQe),e(Lg,_k),e(_k,pQe),e(Lg,_Qe),e(v,uQe),e(v,xg),e(xg,hZ),e(hZ,bQe),e(xg,vQe),e(xg,uk),e(uk,FQe),e(xg,TQe),e(v,MQe),e(v,kg),e(kg,pZ),e(pZ,EQe),e(kg,CQe),e(kg,bk),e(bk,wQe),e(kg,AQe),e(v,yQe),e(v,Sg),e(Sg,_Z),e(_Z,LQe),e(Sg,xQe),e(Sg,vk),e(vk,kQe),e(Sg,SQe),e(v,RQe),e(v,Rg),e(Rg,uZ),e(uZ,BQe),e(Rg,PQe),e(Rg,Fk),e(Fk,$Qe),e(Rg,IQe),e(v,qQe),e(v,Bg),e(Bg,bZ),e(bZ,NQe),e(Bg,jQe),e(Bg,Tk),e(Tk,DQe),e(Bg,GQe),e(v,OQe),e(v,Pg),e(Pg,vZ),e(vZ,VQe),e(Pg,XQe),e(Pg,Mk),e(Mk,zQe),e(Pg,QQe),e(v,WQe),e(v,$g),e($g,FZ),e(FZ,HQe),e($g,UQe),e($g,Ek),e(Ek,JQe),e($g,YQe),e(v,KQe),e(v,Ig),e(Ig,TZ),e(TZ,ZQe),e(Ig,eWe),e(Ig,Ck),e(Ck,oWe),e(Ig,rWe),e(v,tWe),e(v,qg),e(qg,MZ),e(MZ,aWe),e(qg,nWe),e(qg,wk),e(wk,sWe),e(qg,lWe),e(v,iWe),e(v,Ng),e(Ng,EZ),e(EZ,dWe),e(Ng,cWe),e(Ng,Ak),e(Ak,fWe),e(Ng,mWe),e(go,gWe),e(go,CZ),e(CZ,hWe),e(go,pWe),g(XC,go,null),e(Qo,_We),e(Qo,jg),g(zC,jg,null),e(jg,uWe),e(jg,wZ),e(wZ,bWe),b(c,aBe,u),b(c,Wi,u),e(Wi,Dg),e(Dg,AZ),g(QC,AZ,null),e(Wi,vWe),e(Wi,yZ),e(yZ,FWe),b(c,nBe,u),b(c,Wo,u),g(WC,Wo,null),e(Wo,TWe),e(Wo,HC),e(HC,MWe),e(HC,yk),e(yk,EWe),e(HC,CWe),e(Wo,wWe),e(Wo,UC),e(UC,AWe),e(UC,LZ),e(LZ,yWe),e(UC,LWe),e(Wo,xWe),e(Wo,ho),g(JC,ho,null),e(ho,kWe),e(ho,xZ),e(xZ,SWe),e(ho,RWe),e(ho,Oa),e(Oa,BWe),e(Oa,kZ),e(kZ,PWe),e(Oa,$We),e(Oa,SZ),e(SZ,IWe),e(Oa,qWe),e(Oa,RZ),e(RZ,NWe),e(Oa,jWe),e(ho,DWe),e(ho,E),e(E,Wn),e(Wn,BZ),e(BZ,GWe),e(Wn,OWe),e(Wn,Lk),e(Lk,VWe),e(Wn,XWe),e(Wn,xk),e(xk,zWe),e(Wn,QWe),e(E,WWe),e(E,Hn),e(Hn,PZ),e(PZ,HWe),e(Hn,UWe),e(Hn,kk),e(kk,JWe),e(Hn,YWe),e(Hn,Sk),e(Sk,KWe),e(Hn,ZWe),e(E,eHe),e(E,Un),e(Un,$Z),e($Z,oHe),e(Un,rHe),e(Un,Rk),e(Rk,tHe),e(Un,aHe),e(Un,Bk),e(Bk,nHe),e(Un,sHe),e(E,lHe),e(E,Gg),e(Gg,IZ),e(IZ,iHe),e(Gg,dHe),e(Gg,Pk),e(Pk,cHe),e(Gg,fHe),e(E,mHe),e(E,Jn),e(Jn,qZ),e(qZ,gHe),e(Jn,hHe),e(Jn,$k),e($k,pHe),e(Jn,_He),e(Jn,Ik),e(Ik,uHe),e(Jn,bHe),e(E,vHe),e(E,Og),e(Og,NZ),e(NZ,FHe),e(Og,THe),e(Og,qk),e(qk,MHe),e(Og,EHe),e(E,CHe),e(E,Vg),e(Vg,jZ),e(jZ,wHe),e(Vg,AHe),e(Vg,Nk),e(Nk,yHe),e(Vg,LHe),e(E,xHe),e(E,Xg),e(Xg,DZ),e(DZ,kHe),e(Xg,SHe),e(Xg,jk),e(jk,RHe),e(Xg,BHe),e(E,PHe),e(E,Yn),e(Yn,GZ),e(GZ,$He),e(Yn,IHe),e(Yn,Dk),e(Dk,qHe),e(Yn,NHe),e(Yn,Gk),e(Gk,jHe),e(Yn,DHe),e(E,GHe),e(E,Kn),e(Kn,OZ),e(OZ,OHe),e(Kn,VHe),e(Kn,Ok),e(Ok,XHe),e(Kn,zHe),e(Kn,Vk),e(Vk,QHe),e(Kn,WHe),e(E,HHe),e(E,Zn),e(Zn,VZ),e(VZ,UHe),e(Zn,JHe),e(Zn,Xk),e(Xk,YHe),e(Zn,KHe),e(Zn,zk),e(zk,ZHe),e(Zn,eUe),e(E,oUe),e(E,zg),e(zg,XZ),e(XZ,rUe),e(zg,tUe),e(zg,Qk),e(Qk,aUe),e(zg,nUe),e(E,sUe),e(E,Qg),e(Qg,zZ),e(zZ,lUe),e(Qg,iUe),e(Qg,Wk),e(Wk,dUe),e(Qg,cUe),e(E,fUe),e(E,es),e(es,QZ),e(QZ,mUe),e(es,gUe),e(es,Hk),e(Hk,hUe),e(es,pUe),e(es,Uk),e(Uk,_Ue),e(es,uUe),e(E,bUe),e(E,Wg),e(Wg,WZ),e(WZ,vUe),e(Wg,FUe),e(Wg,Jk),e(Jk,TUe),e(Wg,MUe),e(E,EUe),e(E,os),e(os,HZ),e(HZ,CUe),e(os,wUe),e(os,Yk),e(Yk,AUe),e(os,yUe),e(os,Kk),e(Kk,LUe),e(os,xUe),e(E,kUe),e(E,rs),e(rs,UZ),e(UZ,SUe),e(rs,RUe),e(rs,Zk),e(Zk,BUe),e(rs,PUe),e(rs,eS),e(eS,$Ue),e(rs,IUe),e(E,qUe),e(E,ts),e(ts,JZ),e(JZ,NUe),e(ts,jUe),e(ts,oS),e(oS,DUe),e(ts,GUe),e(ts,YZ),e(YZ,OUe),e(ts,VUe),e(E,XUe),e(E,Hg),e(Hg,KZ),e(KZ,zUe),e(Hg,QUe),e(Hg,rS),e(rS,WUe),e(Hg,HUe),e(E,UUe),e(E,as),e(as,ZZ),e(ZZ,JUe),e(as,YUe),e(as,tS),e(tS,KUe),e(as,ZUe),e(as,aS),e(aS,eJe),e(as,oJe),e(E,rJe),e(E,Ug),e(Ug,eee),e(eee,tJe),e(Ug,aJe),e(Ug,nS),e(nS,nJe),e(Ug,sJe),e(E,lJe),e(E,ns),e(ns,oee),e(oee,iJe),e(ns,dJe),e(ns,sS),e(sS,cJe),e(ns,fJe),e(ns,lS),e(lS,mJe),e(ns,gJe),e(E,hJe),e(E,ss),e(ss,ree),e(ree,pJe),e(ss,_Je),e(ss,iS),e(iS,uJe),e(ss,bJe),e(ss,dS),e(dS,vJe),e(ss,FJe),e(E,TJe),e(E,ls),e(ls,tee),e(tee,MJe),e(ls,EJe),e(ls,cS),e(cS,CJe),e(ls,wJe),e(ls,fS),e(fS,AJe),e(ls,yJe),e(E,LJe),e(E,Jg),e(Jg,aee),e(aee,xJe),e(Jg,kJe),e(Jg,mS),e(mS,SJe),e(Jg,RJe),e(E,BJe),e(E,is),e(is,nee),e(nee,PJe),e(is,$Je),e(is,gS),e(gS,IJe),e(is,qJe),e(is,hS),e(hS,NJe),e(is,jJe),e(E,DJe),e(E,Yg),e(Yg,see),e(see,GJe),e(Yg,OJe),e(Yg,pS),e(pS,VJe),e(Yg,XJe),e(E,zJe),e(E,ds),e(ds,lee),e(lee,QJe),e(ds,WJe),e(ds,_S),e(_S,HJe),e(ds,UJe),e(ds,uS),e(uS,JJe),e(ds,YJe),e(E,KJe),e(E,cs),e(cs,iee),e(iee,ZJe),e(cs,eYe),e(cs,bS),e(bS,oYe),e(cs,rYe),e(cs,vS),e(vS,tYe),e(cs,aYe),e(E,nYe),e(E,fs),e(fs,dee),e(dee,sYe),e(fs,lYe),e(fs,FS),e(FS,iYe),e(fs,dYe),e(fs,TS),e(TS,cYe),e(fs,fYe),e(E,mYe),e(E,ms),e(ms,cee),e(cee,gYe),e(ms,hYe),e(ms,MS),e(MS,pYe),e(ms,_Ye),e(ms,ES),e(ES,uYe),e(ms,bYe),e(E,vYe),e(E,Kg),e(Kg,fee),e(fee,FYe),e(Kg,TYe),e(Kg,CS),e(CS,MYe),e(Kg,EYe),e(E,CYe),e(E,gs),e(gs,mee),e(mee,wYe),e(gs,AYe),e(gs,wS),e(wS,yYe),e(gs,LYe),e(gs,AS),e(AS,xYe),e(gs,kYe),e(E,SYe),e(E,hs),e(hs,gee),e(gee,RYe),e(hs,BYe),e(hs,yS),e(yS,PYe),e(hs,$Ye),e(hs,LS),e(LS,IYe),e(hs,qYe),e(E,NYe),e(E,ps),e(ps,hee),e(hee,jYe),e(ps,DYe),e(ps,xS),e(xS,GYe),e(ps,OYe),e(ps,kS),e(kS,VYe),e(ps,XYe),e(E,zYe),e(E,_s),e(_s,pee),e(pee,QYe),e(_s,WYe),e(_s,SS),e(SS,HYe),e(_s,UYe),e(_s,RS),e(RS,JYe),e(_s,YYe),e(E,KYe),e(E,us),e(us,_ee),e(_ee,ZYe),e(us,eKe),e(us,BS),e(BS,oKe),e(us,rKe),e(us,PS),e(PS,tKe),e(us,aKe),e(E,nKe),e(E,bs),e(bs,uee),e(uee,sKe),e(bs,lKe),e(bs,$S),e($S,iKe),e(bs,dKe),e(bs,IS),e(IS,cKe),e(bs,fKe),e(E,mKe),e(E,Zg),e(Zg,bee),e(bee,gKe),e(Zg,hKe),e(Zg,qS),e(qS,pKe),e(Zg,_Ke),e(E,uKe),e(E,vs),e(vs,vee),e(vee,bKe),e(vs,vKe),e(vs,NS),e(NS,FKe),e(vs,TKe),e(vs,jS),e(jS,MKe),e(vs,EKe),e(E,CKe),e(E,eh),e(eh,Fee),e(Fee,wKe),e(eh,AKe),e(eh,DS),e(DS,yKe),e(eh,LKe),e(E,xKe),e(E,oh),e(oh,Tee),e(Tee,kKe),e(oh,SKe),e(oh,GS),e(GS,RKe),e(oh,BKe),e(E,PKe),e(E,Fs),e(Fs,Mee),e(Mee,$Ke),e(Fs,IKe),e(Fs,OS),e(OS,qKe),e(Fs,NKe),e(Fs,VS),e(VS,jKe),e(Fs,DKe),e(E,GKe),e(E,Ts),e(Ts,Eee),e(Eee,OKe),e(Ts,VKe),e(Ts,XS),e(XS,XKe),e(Ts,zKe),e(Ts,zS),e(zS,QKe),e(Ts,WKe),e(E,HKe),e(E,rh),e(rh,Cee),e(Cee,UKe),e(rh,JKe),e(rh,QS),e(QS,YKe),e(rh,KKe),e(E,ZKe),e(E,Ms),e(Ms,wee),e(wee,eZe),e(Ms,oZe),e(Ms,WS),e(WS,rZe),e(Ms,tZe),e(Ms,HS),e(HS,aZe),e(Ms,nZe),e(E,sZe),e(E,Es),e(Es,Aee),e(Aee,lZe),e(Es,iZe),e(Es,US),e(US,dZe),e(Es,cZe),e(Es,JS),e(JS,fZe),e(Es,mZe),e(E,gZe),e(E,Cs),e(Cs,yee),e(yee,hZe),e(Cs,pZe),e(Cs,YS),e(YS,_Ze),e(Cs,uZe),e(Cs,KS),e(KS,bZe),e(Cs,vZe),e(E,FZe),e(E,ws),e(ws,Lee),e(Lee,TZe),e(ws,MZe),e(ws,ZS),e(ZS,EZe),e(ws,CZe),e(ws,eR),e(eR,wZe),e(ws,AZe),e(E,yZe),e(E,As),e(As,xee),e(xee,LZe),e(As,xZe),e(As,oR),e(oR,kZe),e(As,SZe),e(As,rR),e(rR,RZe),e(As,BZe),e(E,PZe),e(E,th),e(th,kee),e(kee,$Ze),e(th,IZe),e(th,tR),e(tR,qZe),e(th,NZe),e(E,jZe),e(E,ah),e(ah,See),e(See,DZe),e(ah,GZe),e(ah,aR),e(aR,OZe),e(ah,VZe),e(E,XZe),e(E,nh),e(nh,Ree),e(Ree,zZe),e(nh,QZe),e(nh,nR),e(nR,WZe),e(nh,HZe),e(E,UZe),e(E,sh),e(sh,Bee),e(Bee,JZe),e(sh,YZe),e(sh,sR),e(sR,KZe),e(sh,ZZe),e(E,eeo),e(E,ys),e(ys,Pee),e(Pee,oeo),e(ys,reo),e(ys,lR),e(lR,teo),e(ys,aeo),e(ys,iR),e(iR,neo),e(ys,seo),e(E,leo),e(E,lh),e(lh,$ee),e($ee,ieo),e(lh,deo),e(lh,dR),e(dR,ceo),e(lh,feo),e(E,meo),e(E,Ls),e(Ls,Iee),e(Iee,geo),e(Ls,heo),e(Ls,cR),e(cR,peo),e(Ls,_eo),e(Ls,fR),e(fR,ueo),e(Ls,beo),e(E,veo),e(E,xs),e(xs,qee),e(qee,Feo),e(xs,Teo),e(xs,mR),e(mR,Meo),e(xs,Eeo),e(xs,gR),e(gR,Ceo),e(xs,weo),e(E,Aeo),e(E,ks),e(ks,Nee),e(Nee,yeo),e(ks,Leo),e(ks,hR),e(hR,xeo),e(ks,keo),e(ks,pR),e(pR,Seo),e(ks,Reo),e(E,Beo),e(E,Ss),e(Ss,jee),e(jee,Peo),e(Ss,$eo),e(Ss,_R),e(_R,Ieo),e(Ss,qeo),e(Ss,uR),e(uR,Neo),e(Ss,jeo),e(E,Deo),e(E,Rs),e(Rs,Dee),e(Dee,Geo),e(Rs,Oeo),e(Rs,bR),e(bR,Veo),e(Rs,Xeo),e(Rs,vR),e(vR,zeo),e(Rs,Qeo),e(E,Weo),e(E,Bs),e(Bs,Gee),e(Gee,Heo),e(Bs,Ueo),e(Bs,FR),e(FR,Jeo),e(Bs,Yeo),e(Bs,TR),e(TR,Keo),e(Bs,Zeo),e(E,eoo),e(E,ih),e(ih,Oee),e(Oee,ooo),e(ih,roo),e(ih,MR),e(MR,too),e(ih,aoo),e(E,noo),e(E,dh),e(dh,Vee),e(Vee,soo),e(dh,loo),e(dh,ER),e(ER,ioo),e(dh,doo),e(E,coo),e(E,Ps),e(Ps,Xee),e(Xee,foo),e(Ps,moo),e(Ps,CR),e(CR,goo),e(Ps,hoo),e(Ps,wR),e(wR,poo),e(Ps,_oo),e(E,uoo),e(E,$s),e($s,zee),e(zee,boo),e($s,voo),e($s,AR),e(AR,Foo),e($s,Too),e($s,yR),e(yR,Moo),e($s,Eoo),e(E,Coo),e(E,Is),e(Is,Qee),e(Qee,woo),e(Is,Aoo),e(Is,LR),e(LR,yoo),e(Is,Loo),e(Is,xR),e(xR,xoo),e(Is,koo),e(E,Soo),e(E,ch),e(ch,Wee),e(Wee,Roo),e(ch,Boo),e(ch,kR),e(kR,Poo),e(ch,$oo),e(E,Ioo),e(E,fh),e(fh,Hee),e(Hee,qoo),e(fh,Noo),e(fh,SR),e(SR,joo),e(fh,Doo),e(E,Goo),e(E,mh),e(mh,Uee),e(Uee,Ooo),e(mh,Voo),e(mh,RR),e(RR,Xoo),e(mh,zoo),e(E,Qoo),e(E,gh),e(gh,Jee),e(Jee,Woo),e(gh,Hoo),e(gh,BR),e(BR,Uoo),e(gh,Joo),e(E,Yoo),e(E,hh),e(hh,Yee),e(Yee,Koo),e(hh,Zoo),e(hh,PR),e(PR,ero),e(hh,oro),e(E,rro),e(E,qs),e(qs,Kee),e(Kee,tro),e(qs,aro),e(qs,$R),e($R,nro),e(qs,sro),e(qs,IR),e(IR,lro),e(qs,iro),e(E,dro),e(E,ph),e(ph,Zee),e(Zee,cro),e(ph,fro),e(ph,qR),e(qR,mro),e(ph,gro),e(E,hro),e(E,_h),e(_h,eoe),e(eoe,pro),e(_h,_ro),e(_h,NR),e(NR,uro),e(_h,bro),e(E,vro),e(E,Ns),e(Ns,ooe),e(ooe,Fro),e(Ns,Tro),e(Ns,jR),e(jR,Mro),e(Ns,Ero),e(Ns,DR),e(DR,Cro),e(Ns,wro),e(E,Aro),e(E,js),e(js,roe),e(roe,yro),e(js,Lro),e(js,GR),e(GR,xro),e(js,kro),e(js,OR),e(OR,Sro),e(js,Rro),e(ho,Bro),e(ho,toe),e(toe,Pro),e(ho,$ro),g(YC,ho,null),e(Wo,Iro),e(Wo,uh),g(KC,uh,null),e(uh,qro),e(uh,aoe),e(aoe,Nro),b(c,sBe,u),b(c,Hi,u),e(Hi,bh),e(bh,noe),g(ZC,noe,null),e(Hi,jro),e(Hi,soe),e(soe,Dro),b(c,lBe,u),b(c,Ho,u),g(ew,Ho,null),e(Ho,Gro),e(Ho,ow),e(ow,Oro),e(ow,VR),e(VR,Vro),e(ow,Xro),e(Ho,zro),e(Ho,rw),e(rw,Qro),e(rw,loe),e(loe,Wro),e(rw,Hro),e(Ho,Uro),e(Ho,$e),g(tw,$e,null),e($e,Jro),e($e,ioe),e(ioe,Yro),e($e,Kro),e($e,Va),e(Va,Zro),e(Va,doe),e(doe,eto),e(Va,oto),e(Va,coe),e(coe,rto),e(Va,tto),e(Va,foe),e(foe,ato),e(Va,nto),e($e,sto),e($e,J),e(J,vh),e(vh,moe),e(moe,lto),e(vh,ito),e(vh,XR),e(XR,dto),e(vh,cto),e(J,fto),e(J,Fh),e(Fh,goe),e(goe,mto),e(Fh,gto),e(Fh,zR),e(zR,hto),e(Fh,pto),e(J,_to),e(J,Th),e(Th,hoe),e(hoe,uto),e(Th,bto),e(Th,QR),e(QR,vto),e(Th,Fto),e(J,Tto),e(J,Mh),e(Mh,poe),e(poe,Mto),e(Mh,Eto),e(Mh,WR),e(WR,Cto),e(Mh,wto),e(J,Ato),e(J,Eh),e(Eh,_oe),e(_oe,yto),e(Eh,Lto),e(Eh,HR),e(HR,xto),e(Eh,kto),e(J,Sto),e(J,Ch),e(Ch,uoe),e(uoe,Rto),e(Ch,Bto),e(Ch,UR),e(UR,Pto),e(Ch,$to),e(J,Ito),e(J,wh),e(wh,boe),e(boe,qto),e(wh,Nto),e(wh,JR),e(JR,jto),e(wh,Dto),e(J,Gto),e(J,Ah),e(Ah,voe),e(voe,Oto),e(Ah,Vto),e(Ah,YR),e(YR,Xto),e(Ah,zto),e(J,Qto),e(J,yh),e(yh,Foe),e(Foe,Wto),e(yh,Hto),e(yh,KR),e(KR,Uto),e(yh,Jto),e(J,Yto),e(J,Lh),e(Lh,Toe),e(Toe,Kto),e(Lh,Zto),e(Lh,ZR),e(ZR,eao),e(Lh,oao),e(J,rao),e(J,xh),e(xh,Moe),e(Moe,tao),e(xh,aao),e(xh,eB),e(eB,nao),e(xh,sao),e(J,lao),e(J,kh),e(kh,Eoe),e(Eoe,iao),e(kh,dao),e(kh,oB),e(oB,cao),e(kh,fao),e(J,mao),e(J,Sh),e(Sh,Coe),e(Coe,gao),e(Sh,hao),e(Sh,rB),e(rB,pao),e(Sh,_ao),e(J,uao),e(J,Rh),e(Rh,woe),e(woe,bao),e(Rh,vao),e(Rh,tB),e(tB,Fao),e(Rh,Tao),e(J,Mao),e(J,Bh),e(Bh,Aoe),e(Aoe,Eao),e(Bh,Cao),e(Bh,aB),e(aB,wao),e(Bh,Aao),e(J,yao),e(J,Ph),e(Ph,yoe),e(yoe,Lao),e(Ph,xao),e(Ph,nB),e(nB,kao),e(Ph,Sao),e(J,Rao),e(J,$h),e($h,Loe),e(Loe,Bao),e($h,Pao),e($h,sB),e(sB,$ao),e($h,Iao),e(J,qao),e(J,Ih),e(Ih,xoe),e(xoe,Nao),e(Ih,jao),e(Ih,lB),e(lB,Dao),e(Ih,Gao),e(J,Oao),e(J,qh),e(qh,koe),e(koe,Vao),e(qh,Xao),e(qh,iB),e(iB,zao),e(qh,Qao),e(J,Wao),e(J,Nh),e(Nh,Soe),e(Soe,Hao),e(Nh,Uao),e(Nh,dB),e(dB,Jao),e(Nh,Yao),e($e,Kao),g(jh,$e,null),e($e,Zao),e($e,Roe),e(Roe,eno),e($e,ono),g(aw,$e,null),e(Ho,rno),e(Ho,Dh),g(nw,Dh,null),e(Dh,tno),e(Dh,Boe),e(Boe,ano),b(c,iBe,u),b(c,Ui,u),e(Ui,Gh),e(Gh,Poe),g(sw,Poe,null),e(Ui,nno),e(Ui,$oe),e($oe,sno),b(c,dBe,u),b(c,Uo,u),g(lw,Uo,null),e(Uo,lno),e(Uo,iw),e(iw,ino),e(iw,cB),e(cB,dno),e(iw,cno),e(Uo,fno),e(Uo,dw),e(dw,mno),e(dw,Ioe),e(Ioe,gno),e(dw,hno),e(Uo,pno),e(Uo,Ie),g(cw,Ie,null),e(Ie,_no),e(Ie,qoe),e(qoe,uno),e(Ie,bno),e(Ie,Ji),e(Ji,vno),e(Ji,Noe),e(Noe,Fno),e(Ji,Tno),e(Ji,joe),e(joe,Mno),e(Ji,Eno),e(Ie,Cno),e(Ie,Ee),e(Ee,Oh),e(Oh,Doe),e(Doe,wno),e(Oh,Ano),e(Oh,fB),e(fB,yno),e(Oh,Lno),e(Ee,xno),e(Ee,Vh),e(Vh,Goe),e(Goe,kno),e(Vh,Sno),e(Vh,mB),e(mB,Rno),e(Vh,Bno),e(Ee,Pno),e(Ee,Xh),e(Xh,Ooe),e(Ooe,$no),e(Xh,Ino),e(Xh,gB),e(gB,qno),e(Xh,Nno),e(Ee,jno),e(Ee,zh),e(zh,Voe),e(Voe,Dno),e(zh,Gno),e(zh,hB),e(hB,Ono),e(zh,Vno),e(Ee,Xno),e(Ee,Qh),e(Qh,Xoe),e(Xoe,zno),e(Qh,Qno),e(Qh,pB),e(pB,Wno),e(Qh,Hno),e(Ee,Uno),e(Ee,Wh),e(Wh,zoe),e(zoe,Jno),e(Wh,Yno),e(Wh,_B),e(_B,Kno),e(Wh,Zno),e(Ee,eso),e(Ee,Hh),e(Hh,Qoe),e(Qoe,oso),e(Hh,rso),e(Hh,uB),e(uB,tso),e(Hh,aso),e(Ee,nso),e(Ee,Uh),e(Uh,Woe),e(Woe,sso),e(Uh,lso),e(Uh,bB),e(bB,iso),e(Uh,dso),e(Ee,cso),e(Ee,Jh),e(Jh,Hoe),e(Hoe,fso),e(Jh,mso),e(Jh,vB),e(vB,gso),e(Jh,hso),e(Ie,pso),g(Yh,Ie,null),e(Ie,_so),e(Ie,Uoe),e(Uoe,uso),e(Ie,bso),g(fw,Ie,null),e(Uo,vso),e(Uo,Kh),g(mw,Kh,null),e(Kh,Fso),e(Kh,Joe),e(Joe,Tso),b(c,cBe,u),b(c,Yi,u),e(Yi,Zh),e(Zh,Yoe),g(gw,Yoe,null),e(Yi,Mso),e(Yi,Koe),e(Koe,Eso),b(c,fBe,u),b(c,Jo,u),g(hw,Jo,null),e(Jo,Cso),e(Jo,Ki),e(Ki,wso),e(Ki,FB),e(FB,Aso),e(Ki,yso),e(Ki,TB),e(TB,Lso),e(Ki,xso),e(Jo,kso),e(Jo,pw),e(pw,Sso),e(pw,Zoe),e(Zoe,Rso),e(pw,Bso),e(Jo,Pso),e(Jo,Xr),g(_w,Xr,null),e(Xr,$so),e(Xr,ere),e(ere,Iso),e(Xr,qso),e(Xr,Zi),e(Zi,Nso),e(Zi,ore),e(ore,jso),e(Zi,Dso),e(Zi,MB),e(MB,Gso),e(Zi,Oso),e(Xr,Vso),e(Xr,rre),e(rre,Xso),e(Xr,zso),g(uw,Xr,null),e(Jo,Qso),e(Jo,qe),g(bw,qe,null),e(qe,Wso),e(qe,tre),e(tre,Hso),e(qe,Uso),e(qe,Xa),e(Xa,Jso),e(Xa,are),e(are,Yso),e(Xa,Kso),e(Xa,nre),e(nre,Zso),e(Xa,elo),e(Xa,sre),e(sre,olo),e(Xa,rlo),e(qe,tlo),e(qe,T),e(T,ep),e(ep,lre),e(lre,alo),e(ep,nlo),e(ep,EB),e(EB,slo),e(ep,llo),e(T,ilo),e(T,op),e(op,ire),e(ire,dlo),e(op,clo),e(op,CB),e(CB,flo),e(op,mlo),e(T,glo),e(T,rp),e(rp,dre),e(dre,hlo),e(rp,plo),e(rp,wB),e(wB,_lo),e(rp,ulo),e(T,blo),e(T,tp),e(tp,cre),e(cre,vlo),e(tp,Flo),e(tp,AB),e(AB,Tlo),e(tp,Mlo),e(T,Elo),e(T,ap),e(ap,fre),e(fre,Clo),e(ap,wlo),e(ap,yB),e(yB,Alo),e(ap,ylo),e(T,Llo),e(T,np),e(np,mre),e(mre,xlo),e(np,klo),e(np,LB),e(LB,Slo),e(np,Rlo),e(T,Blo),e(T,sp),e(sp,gre),e(gre,Plo),e(sp,$lo),e(sp,xB),e(xB,Ilo),e(sp,qlo),e(T,Nlo),e(T,lp),e(lp,hre),e(hre,jlo),e(lp,Dlo),e(lp,kB),e(kB,Glo),e(lp,Olo),e(T,Vlo),e(T,ip),e(ip,pre),e(pre,Xlo),e(ip,zlo),e(ip,SB),e(SB,Qlo),e(ip,Wlo),e(T,Hlo),e(T,dp),e(dp,_re),e(_re,Ulo),e(dp,Jlo),e(dp,RB),e(RB,Ylo),e(dp,Klo),e(T,Zlo),e(T,cp),e(cp,ure),e(ure,eio),e(cp,oio),e(cp,BB),e(BB,rio),e(cp,tio),e(T,aio),e(T,fp),e(fp,bre),e(bre,nio),e(fp,sio),e(fp,PB),e(PB,lio),e(fp,iio),e(T,dio),e(T,mp),e(mp,vre),e(vre,cio),e(mp,fio),e(mp,$B),e($B,mio),e(mp,gio),e(T,hio),e(T,gp),e(gp,Fre),e(Fre,pio),e(gp,_io),e(gp,IB),e(IB,uio),e(gp,bio),e(T,vio),e(T,hp),e(hp,Tre),e(Tre,Fio),e(hp,Tio),e(hp,qB),e(qB,Mio),e(hp,Eio),e(T,Cio),e(T,pp),e(pp,Mre),e(Mre,wio),e(pp,Aio),e(pp,NB),e(NB,yio),e(pp,Lio),e(T,xio),e(T,_p),e(_p,Ere),e(Ere,kio),e(_p,Sio),e(_p,jB),e(jB,Rio),e(_p,Bio),e(T,Pio),e(T,up),e(up,Cre),e(Cre,$io),e(up,Iio),e(up,DB),e(DB,qio),e(up,Nio),e(T,jio),e(T,bp),e(bp,wre),e(wre,Dio),e(bp,Gio),e(bp,GB),e(GB,Oio),e(bp,Vio),e(T,Xio),e(T,vp),e(vp,Are),e(Are,zio),e(vp,Qio),e(vp,OB),e(OB,Wio),e(vp,Hio),e(T,Uio),e(T,Fp),e(Fp,yre),e(yre,Jio),e(Fp,Yio),e(Fp,VB),e(VB,Kio),e(Fp,Zio),e(T,edo),e(T,Tp),e(Tp,Lre),e(Lre,odo),e(Tp,rdo),e(Tp,XB),e(XB,tdo),e(Tp,ado),e(T,ndo),e(T,Mp),e(Mp,xre),e(xre,sdo),e(Mp,ldo),e(Mp,zB),e(zB,ido),e(Mp,ddo),e(T,cdo),e(T,Ep),e(Ep,kre),e(kre,fdo),e(Ep,mdo),e(Ep,QB),e(QB,gdo),e(Ep,hdo),e(T,pdo),e(T,Cp),e(Cp,Sre),e(Sre,_do),e(Cp,udo),e(Cp,WB),e(WB,bdo),e(Cp,vdo),e(T,Fdo),e(T,wp),e(wp,Rre),e(Rre,Tdo),e(wp,Mdo),e(wp,HB),e(HB,Edo),e(wp,Cdo),e(T,wdo),e(T,Ap),e(Ap,Bre),e(Bre,Ado),e(Ap,ydo),e(Ap,UB),e(UB,Ldo),e(Ap,xdo),e(T,kdo),e(T,yp),e(yp,Pre),e(Pre,Sdo),e(yp,Rdo),e(yp,JB),e(JB,Bdo),e(yp,Pdo),e(T,$do),e(T,Lp),e(Lp,$re),e($re,Ido),e(Lp,qdo),e(Lp,YB),e(YB,Ndo),e(Lp,jdo),e(T,Ddo),e(T,xp),e(xp,Ire),e(Ire,Gdo),e(xp,Odo),e(xp,KB),e(KB,Vdo),e(xp,Xdo),e(T,zdo),e(T,kp),e(kp,qre),e(qre,Qdo),e(kp,Wdo),e(kp,ZB),e(ZB,Hdo),e(kp,Udo),e(T,Jdo),e(T,Ds),e(Ds,Nre),e(Nre,Ydo),e(Ds,Kdo),e(Ds,eP),e(eP,Zdo),e(Ds,eco),e(Ds,oP),e(oP,oco),e(Ds,rco),e(T,tco),e(T,Sp),e(Sp,jre),e(jre,aco),e(Sp,nco),e(Sp,rP),e(rP,sco),e(Sp,lco),e(T,ico),e(T,Rp),e(Rp,Dre),e(Dre,dco),e(Rp,cco),e(Rp,tP),e(tP,fco),e(Rp,mco),e(T,gco),e(T,Bp),e(Bp,Gre),e(Gre,hco),e(Bp,pco),e(Bp,aP),e(aP,_co),e(Bp,uco),e(T,bco),e(T,Pp),e(Pp,Ore),e(Ore,vco),e(Pp,Fco),e(Pp,nP),e(nP,Tco),e(Pp,Mco),e(T,Eco),e(T,$p),e($p,Vre),e(Vre,Cco),e($p,wco),e($p,sP),e(sP,Aco),e($p,yco),e(T,Lco),e(T,Ip),e(Ip,Xre),e(Xre,xco),e(Ip,kco),e(Ip,lP),e(lP,Sco),e(Ip,Rco),e(T,Bco),e(T,qp),e(qp,zre),e(zre,Pco),e(qp,$co),e(qp,iP),e(iP,Ico),e(qp,qco),e(T,Nco),e(T,Np),e(Np,Qre),e(Qre,jco),e(Np,Dco),e(Np,dP),e(dP,Gco),e(Np,Oco),e(T,Vco),e(T,jp),e(jp,Wre),e(Wre,Xco),e(jp,zco),e(jp,cP),e(cP,Qco),e(jp,Wco),e(T,Hco),e(T,Dp),e(Dp,Hre),e(Hre,Uco),e(Dp,Jco),e(Dp,fP),e(fP,Yco),e(Dp,Kco),e(T,Zco),e(T,Gp),e(Gp,Ure),e(Ure,efo),e(Gp,ofo),e(Gp,mP),e(mP,rfo),e(Gp,tfo),e(T,afo),e(T,Op),e(Op,Jre),e(Jre,nfo),e(Op,sfo),e(Op,gP),e(gP,lfo),e(Op,ifo),e(T,dfo),e(T,Vp),e(Vp,Yre),e(Yre,cfo),e(Vp,ffo),e(Vp,hP),e(hP,mfo),e(Vp,gfo),e(T,hfo),e(T,Xp),e(Xp,Kre),e(Kre,pfo),e(Xp,_fo),e(Xp,pP),e(pP,ufo),e(Xp,bfo),e(T,vfo),e(T,zp),e(zp,Zre),e(Zre,Ffo),e(zp,Tfo),e(zp,_P),e(_P,Mfo),e(zp,Efo),e(T,Cfo),e(T,Qp),e(Qp,ete),e(ete,wfo),e(Qp,Afo),e(Qp,uP),e(uP,yfo),e(Qp,Lfo),e(T,xfo),e(T,Wp),e(Wp,ote),e(ote,kfo),e(Wp,Sfo),e(Wp,bP),e(bP,Rfo),e(Wp,Bfo),e(T,Pfo),e(T,Hp),e(Hp,rte),e(rte,$fo),e(Hp,Ifo),e(Hp,vP),e(vP,qfo),e(Hp,Nfo),e(T,jfo),e(T,Up),e(Up,tte),e(tte,Dfo),e(Up,Gfo),e(Up,FP),e(FP,Ofo),e(Up,Vfo),e(T,Xfo),e(T,Jp),e(Jp,ate),e(ate,zfo),e(Jp,Qfo),e(Jp,TP),e(TP,Wfo),e(Jp,Hfo),e(T,Ufo),e(T,Yp),e(Yp,nte),e(nte,Jfo),e(Yp,Yfo),e(Yp,MP),e(MP,Kfo),e(Yp,Zfo),e(T,emo),e(T,Kp),e(Kp,ste),e(ste,omo),e(Kp,rmo),e(Kp,EP),e(EP,tmo),e(Kp,amo),e(T,nmo),e(T,Zp),e(Zp,lte),e(lte,smo),e(Zp,lmo),e(Zp,CP),e(CP,imo),e(Zp,dmo),e(T,cmo),e(T,e_),e(e_,ite),e(ite,fmo),e(e_,mmo),e(e_,wP),e(wP,gmo),e(e_,hmo),e(T,pmo),e(T,o_),e(o_,dte),e(dte,_mo),e(o_,umo),e(o_,AP),e(AP,bmo),e(o_,vmo),e(T,Fmo),e(T,r_),e(r_,cte),e(cte,Tmo),e(r_,Mmo),e(r_,yP),e(yP,Emo),e(r_,Cmo),e(T,wmo),e(T,t_),e(t_,fte),e(fte,Amo),e(t_,ymo),e(t_,LP),e(LP,Lmo),e(t_,xmo),e(T,kmo),e(T,a_),e(a_,mte),e(mte,Smo),e(a_,Rmo),e(a_,xP),e(xP,Bmo),e(a_,Pmo),e(T,$mo),e(T,n_),e(n_,gte),e(gte,Imo),e(n_,qmo),e(n_,kP),e(kP,Nmo),e(n_,jmo),e(T,Dmo),e(T,s_),e(s_,hte),e(hte,Gmo),e(s_,Omo),e(s_,SP),e(SP,Vmo),e(s_,Xmo),e(T,zmo),e(T,l_),e(l_,pte),e(pte,Qmo),e(l_,Wmo),e(l_,RP),e(RP,Hmo),e(l_,Umo),e(T,Jmo),e(T,i_),e(i_,_te),e(_te,Ymo),e(i_,Kmo),e(i_,BP),e(BP,Zmo),e(i_,ego),e(T,ogo),e(T,d_),e(d_,ute),e(ute,rgo),e(d_,tgo),e(d_,PP),e(PP,ago),e(d_,ngo),e(T,sgo),e(T,c_),e(c_,bte),e(bte,lgo),e(c_,igo),e(c_,$P),e($P,dgo),e(c_,cgo),e(T,fgo),e(T,f_),e(f_,vte),e(vte,mgo),e(f_,ggo),e(f_,IP),e(IP,hgo),e(f_,pgo),e(T,_go),e(T,m_),e(m_,Fte),e(Fte,ugo),e(m_,bgo),e(m_,qP),e(qP,vgo),e(m_,Fgo),e(T,Tgo),e(T,g_),e(g_,Tte),e(Tte,Mgo),e(g_,Ego),e(g_,NP),e(NP,Cgo),e(g_,wgo),e(T,Ago),e(T,h_),e(h_,Mte),e(Mte,ygo),e(h_,Lgo),e(h_,jP),e(jP,xgo),e(h_,kgo),e(T,Sgo),e(T,p_),e(p_,Ete),e(Ete,Rgo),e(p_,Bgo),e(p_,DP),e(DP,Pgo),e(p_,$go),e(T,Igo),e(T,__),e(__,Cte),e(Cte,qgo),e(__,Ngo),e(__,GP),e(GP,jgo),e(__,Dgo),e(T,Ggo),e(T,u_),e(u_,wte),e(wte,Ogo),e(u_,Vgo),e(u_,OP),e(OP,Xgo),e(u_,zgo),e(T,Qgo),e(T,b_),e(b_,Ate),e(Ate,Wgo),e(b_,Hgo),e(b_,VP),e(VP,Ugo),e(b_,Jgo),e(T,Ygo),e(T,v_),e(v_,yte),e(yte,Kgo),e(v_,Zgo),e(v_,XP),e(XP,eho),e(v_,oho),e(T,rho),e(T,F_),e(F_,Lte),e(Lte,tho),e(F_,aho),e(F_,zP),e(zP,nho),e(F_,sho),e(T,lho),e(T,T_),e(T_,xte),e(xte,iho),e(T_,dho),e(T_,QP),e(QP,cho),e(T_,fho),e(T,mho),e(T,M_),e(M_,kte),e(kte,gho),e(M_,hho),e(M_,WP),e(WP,pho),e(M_,_ho),e(T,uho),e(T,E_),e(E_,Ste),e(Ste,bho),e(E_,vho),e(E_,HP),e(HP,Fho),e(E_,Tho),e(T,Mho),e(T,C_),e(C_,Rte),e(Rte,Eho),e(C_,Cho),e(C_,UP),e(UP,who),e(C_,Aho),e(T,yho),e(T,w_),e(w_,Bte),e(Bte,Lho),e(w_,xho),e(w_,JP),e(JP,kho),e(w_,Sho),e(T,Rho),e(T,A_),e(A_,Pte),e(Pte,Bho),e(A_,Pho),e(A_,YP),e(YP,$ho),e(A_,Iho),e(T,qho),e(T,y_),e(y_,$te),e($te,Nho),e(y_,jho),e(y_,KP),e(KP,Dho),e(y_,Gho),e(T,Oho),e(T,L_),e(L_,Ite),e(Ite,Vho),e(L_,Xho),e(L_,ZP),e(ZP,zho),e(L_,Qho),e(T,Who),e(T,x_),e(x_,qte),e(qte,Hho),e(x_,Uho),e(x_,e$),e(e$,Jho),e(x_,Yho),e(T,Kho),e(T,k_),e(k_,Nte),e(Nte,Zho),e(k_,epo),e(k_,o$),e(o$,opo),e(k_,rpo),e(T,tpo),e(T,S_),e(S_,jte),e(jte,apo),e(S_,npo),e(S_,r$),e(r$,spo),e(S_,lpo),e(T,ipo),e(T,R_),e(R_,Dte),e(Dte,dpo),e(R_,cpo),e(R_,t$),e(t$,fpo),e(R_,mpo),e(T,gpo),e(T,B_),e(B_,Gte),e(Gte,hpo),e(B_,ppo),e(B_,a$),e(a$,_po),e(B_,upo),e(T,bpo),e(T,P_),e(P_,Ote),e(Ote,vpo),e(P_,Fpo),e(P_,n$),e(n$,Tpo),e(P_,Mpo),e(T,Epo),e(T,$_),e($_,Vte),e(Vte,Cpo),e($_,wpo),e($_,s$),e(s$,Apo),e($_,ypo),e(T,Lpo),e(T,I_),e(I_,Xte),e(Xte,xpo),e(I_,kpo),e(I_,l$),e(l$,Spo),e(I_,Rpo),e(T,Bpo),e(T,q_),e(q_,zte),e(zte,Ppo),e(q_,$po),e(q_,i$),e(i$,Ipo),e(q_,qpo),e(T,Npo),e(T,N_),e(N_,Qte),e(Qte,jpo),e(N_,Dpo),e(N_,d$),e(d$,Gpo),e(N_,Opo),e(T,Vpo),e(T,j_),e(j_,Wte),e(Wte,Xpo),e(j_,zpo),e(j_,c$),e(c$,Qpo),e(j_,Wpo),e(qe,Hpo),e(qe,D_),e(D_,Upo),e(D_,Hte),e(Hte,Jpo),e(D_,Ypo),e(D_,Ute),e(Ute,Kpo),e(qe,Zpo),e(qe,Jte),e(Jte,e_o),e(qe,o_o),g(vw,qe,null),b(c,mBe,u),b(c,ed,u),e(ed,G_),e(G_,Yte),g(Fw,Yte,null),e(ed,r_o),e(ed,Kte),e(Kte,t_o),b(c,gBe,u),b(c,Yo,u),g(Tw,Yo,null),e(Yo,a_o),e(Yo,od),e(od,n_o),e(od,f$),e(f$,s_o),e(od,l_o),e(od,m$),e(m$,i_o),e(od,d_o),e(Yo,c_o),e(Yo,Mw),e(Mw,f_o),e(Mw,Zte),e(Zte,m_o),e(Mw,g_o),e(Yo,h_o),e(Yo,zr),g(Ew,zr,null),e(zr,p_o),e(zr,eae),e(eae,__o),e(zr,u_o),e(zr,rd),e(rd,b_o),e(rd,oae),e(oae,v_o),e(rd,F_o),e(rd,g$),e(g$,T_o),e(rd,M_o),e(zr,E_o),e(zr,rae),e(rae,C_o),e(zr,w_o),g(Cw,zr,null),e(Yo,A_o),e(Yo,Ne),g(ww,Ne,null),e(Ne,y_o),e(Ne,tae),e(tae,L_o),e(Ne,x_o),e(Ne,za),e(za,k_o),e(za,aae),e(aae,S_o),e(za,R_o),e(za,nae),e(nae,B_o),e(za,P_o),e(za,sae),e(sae,$_o),e(za,I_o),e(Ne,q_o),e(Ne,S),e(S,O_),e(O_,lae),e(lae,N_o),e(O_,j_o),e(O_,h$),e(h$,D_o),e(O_,G_o),e(S,O_o),e(S,V_),e(V_,iae),e(iae,V_o),e(V_,X_o),e(V_,p$),e(p$,z_o),e(V_,Q_o),e(S,W_o),e(S,X_),e(X_,dae),e(dae,H_o),e(X_,U_o),e(X_,_$),e(_$,J_o),e(X_,Y_o),e(S,K_o),e(S,z_),e(z_,cae),e(cae,Z_o),e(z_,euo),e(z_,u$),e(u$,ouo),e(z_,ruo),e(S,tuo),e(S,Q_),e(Q_,fae),e(fae,auo),e(Q_,nuo),e(Q_,b$),e(b$,suo),e(Q_,luo),e(S,iuo),e(S,W_),e(W_,mae),e(mae,duo),e(W_,cuo),e(W_,v$),e(v$,fuo),e(W_,muo),e(S,guo),e(S,H_),e(H_,gae),e(gae,huo),e(H_,puo),e(H_,F$),e(F$,_uo),e(H_,uuo),e(S,buo),e(S,U_),e(U_,hae),e(hae,vuo),e(U_,Fuo),e(U_,T$),e(T$,Tuo),e(U_,Muo),e(S,Euo),e(S,J_),e(J_,pae),e(pae,Cuo),e(J_,wuo),e(J_,M$),e(M$,Auo),e(J_,yuo),e(S,Luo),e(S,Y_),e(Y_,_ae),e(_ae,xuo),e(Y_,kuo),e(Y_,E$),e(E$,Suo),e(Y_,Ruo),e(S,Buo),e(S,K_),e(K_,uae),e(uae,Puo),e(K_,$uo),e(K_,C$),e(C$,Iuo),e(K_,quo),e(S,Nuo),e(S,Z_),e(Z_,bae),e(bae,juo),e(Z_,Duo),e(Z_,w$),e(w$,Guo),e(Z_,Ouo),e(S,Vuo),e(S,eu),e(eu,vae),e(vae,Xuo),e(eu,zuo),e(eu,A$),e(A$,Quo),e(eu,Wuo),e(S,Huo),e(S,ou),e(ou,Fae),e(Fae,Uuo),e(ou,Juo),e(ou,y$),e(y$,Yuo),e(ou,Kuo),e(S,Zuo),e(S,ru),e(ru,Tae),e(Tae,e6o),e(ru,o6o),e(ru,L$),e(L$,r6o),e(ru,t6o),e(S,a6o),e(S,tu),e(tu,Mae),e(Mae,n6o),e(tu,s6o),e(tu,x$),e(x$,l6o),e(tu,i6o),e(S,d6o),e(S,au),e(au,Eae),e(Eae,c6o),e(au,f6o),e(au,k$),e(k$,m6o),e(au,g6o),e(S,h6o),e(S,nu),e(nu,Cae),e(Cae,p6o),e(nu,_6o),e(nu,S$),e(S$,u6o),e(nu,b6o),e(S,v6o),e(S,su),e(su,wae),e(wae,F6o),e(su,T6o),e(su,R$),e(R$,M6o),e(su,E6o),e(S,C6o),e(S,lu),e(lu,Aae),e(Aae,w6o),e(lu,A6o),e(lu,B$),e(B$,y6o),e(lu,L6o),e(S,x6o),e(S,iu),e(iu,yae),e(yae,k6o),e(iu,S6o),e(iu,P$),e(P$,R6o),e(iu,B6o),e(S,P6o),e(S,du),e(du,Lae),e(Lae,$6o),e(du,I6o),e(du,$$),e($$,q6o),e(du,N6o),e(S,j6o),e(S,cu),e(cu,xae),e(xae,D6o),e(cu,G6o),e(cu,I$),e(I$,O6o),e(cu,V6o),e(S,X6o),e(S,fu),e(fu,kae),e(kae,z6o),e(fu,Q6o),e(fu,q$),e(q$,W6o),e(fu,H6o),e(S,U6o),e(S,mu),e(mu,Sae),e(Sae,J6o),e(mu,Y6o),e(mu,N$),e(N$,K6o),e(mu,Z6o),e(S,e1o),e(S,gu),e(gu,Rae),e(Rae,o1o),e(gu,r1o),e(gu,j$),e(j$,t1o),e(gu,a1o),e(S,n1o),e(S,hu),e(hu,Bae),e(Bae,s1o),e(hu,l1o),e(hu,D$),e(D$,i1o),e(hu,d1o),e(S,c1o),e(S,pu),e(pu,Pae),e(Pae,f1o),e(pu,m1o),e(pu,G$),e(G$,g1o),e(pu,h1o),e(S,p1o),e(S,_u),e(_u,$ae),e($ae,_1o),e(_u,u1o),e(_u,O$),e(O$,b1o),e(_u,v1o),e(S,F1o),e(S,uu),e(uu,Iae),e(Iae,T1o),e(uu,M1o),e(uu,V$),e(V$,E1o),e(uu,C1o),e(S,w1o),e(S,bu),e(bu,qae),e(qae,A1o),e(bu,y1o),e(bu,X$),e(X$,L1o),e(bu,x1o),e(S,k1o),e(S,vu),e(vu,Nae),e(Nae,S1o),e(vu,R1o),e(vu,z$),e(z$,B1o),e(vu,P1o),e(S,$1o),e(S,Fu),e(Fu,jae),e(jae,I1o),e(Fu,q1o),e(Fu,Q$),e(Q$,N1o),e(Fu,j1o),e(S,D1o),e(S,Tu),e(Tu,Dae),e(Dae,G1o),e(Tu,O1o),e(Tu,W$),e(W$,V1o),e(Tu,X1o),e(S,z1o),e(S,Mu),e(Mu,Gae),e(Gae,Q1o),e(Mu,W1o),e(Mu,H$),e(H$,H1o),e(Mu,U1o),e(S,J1o),e(S,Eu),e(Eu,Oae),e(Oae,Y1o),e(Eu,K1o),e(Eu,U$),e(U$,Z1o),e(Eu,e4o),e(S,o4o),e(S,Cu),e(Cu,Vae),e(Vae,r4o),e(Cu,t4o),e(Cu,J$),e(J$,a4o),e(Cu,n4o),e(S,s4o),e(S,wu),e(wu,Xae),e(Xae,l4o),e(wu,i4o),e(wu,Y$),e(Y$,d4o),e(wu,c4o),e(S,f4o),e(S,Au),e(Au,zae),e(zae,m4o),e(Au,g4o),e(Au,K$),e(K$,h4o),e(Au,p4o),e(S,_4o),e(S,yu),e(yu,Qae),e(Qae,u4o),e(yu,b4o),e(yu,Z$),e(Z$,v4o),e(yu,F4o),e(Ne,T4o),e(Ne,Lu),e(Lu,M4o),e(Lu,Wae),e(Wae,E4o),e(Lu,C4o),e(Lu,Hae),e(Hae,w4o),e(Ne,A4o),e(Ne,Uae),e(Uae,y4o),e(Ne,L4o),g(Aw,Ne,null),b(c,hBe,u),b(c,td,u),e(td,xu),e(xu,Jae),g(yw,Jae,null),e(td,x4o),e(td,Yae),e(Yae,k4o),b(c,pBe,u),b(c,Ko,u),g(Lw,Ko,null),e(Ko,S4o),e(Ko,ad),e(ad,R4o),e(ad,eI),e(eI,B4o),e(ad,P4o),e(ad,oI),e(oI,$4o),e(ad,I4o),e(Ko,q4o),e(Ko,xw),e(xw,N4o),e(xw,Kae),e(Kae,j4o),e(xw,D4o),e(Ko,G4o),e(Ko,Qr),g(kw,Qr,null),e(Qr,O4o),e(Qr,Zae),e(Zae,V4o),e(Qr,X4o),e(Qr,nd),e(nd,z4o),e(nd,ene),e(ene,Q4o),e(nd,W4o),e(nd,rI),e(rI,H4o),e(nd,U4o),e(Qr,J4o),e(Qr,one),e(one,Y4o),e(Qr,K4o),g(Sw,Qr,null),e(Ko,Z4o),e(Ko,je),g(Rw,je,null),e(je,ebo),e(je,rne),e(rne,obo),e(je,rbo),e(je,Qa),e(Qa,tbo),e(Qa,tne),e(tne,abo),e(Qa,nbo),e(Qa,ane),e(ane,sbo),e(Qa,lbo),e(Qa,nne),e(nne,ibo),e(Qa,dbo),e(je,cbo),e(je,$),e($,ku),e(ku,sne),e(sne,fbo),e(ku,mbo),e(ku,tI),e(tI,gbo),e(ku,hbo),e($,pbo),e($,Su),e(Su,lne),e(lne,_bo),e(Su,ubo),e(Su,aI),e(aI,bbo),e(Su,vbo),e($,Fbo),e($,Ru),e(Ru,ine),e(ine,Tbo),e(Ru,Mbo),e(Ru,nI),e(nI,Ebo),e(Ru,Cbo),e($,wbo),e($,Bu),e(Bu,dne),e(dne,Abo),e(Bu,ybo),e(Bu,sI),e(sI,Lbo),e(Bu,xbo),e($,kbo),e($,Pu),e(Pu,cne),e(cne,Sbo),e(Pu,Rbo),e(Pu,lI),e(lI,Bbo),e(Pu,Pbo),e($,$bo),e($,$u),e($u,fne),e(fne,Ibo),e($u,qbo),e($u,iI),e(iI,Nbo),e($u,jbo),e($,Dbo),e($,Iu),e(Iu,mne),e(mne,Gbo),e(Iu,Obo),e(Iu,dI),e(dI,Vbo),e(Iu,Xbo),e($,zbo),e($,qu),e(qu,gne),e(gne,Qbo),e(qu,Wbo),e(qu,cI),e(cI,Hbo),e(qu,Ubo),e($,Jbo),e($,Nu),e(Nu,hne),e(hne,Ybo),e(Nu,Kbo),e(Nu,fI),e(fI,Zbo),e(Nu,e2o),e($,o2o),e($,ju),e(ju,pne),e(pne,r2o),e(ju,t2o),e(ju,mI),e(mI,a2o),e(ju,n2o),e($,s2o),e($,Du),e(Du,_ne),e(_ne,l2o),e(Du,i2o),e(Du,gI),e(gI,d2o),e(Du,c2o),e($,f2o),e($,Gu),e(Gu,une),e(une,m2o),e(Gu,g2o),e(Gu,hI),e(hI,h2o),e(Gu,p2o),e($,_2o),e($,Ou),e(Ou,bne),e(bne,u2o),e(Ou,b2o),e(Ou,pI),e(pI,v2o),e(Ou,F2o),e($,T2o),e($,Vu),e(Vu,vne),e(vne,M2o),e(Vu,E2o),e(Vu,_I),e(_I,C2o),e(Vu,w2o),e($,A2o),e($,Xu),e(Xu,Fne),e(Fne,y2o),e(Xu,L2o),e(Xu,uI),e(uI,x2o),e(Xu,k2o),e($,S2o),e($,zu),e(zu,Tne),e(Tne,R2o),e(zu,B2o),e(zu,bI),e(bI,P2o),e(zu,$2o),e($,I2o),e($,Qu),e(Qu,Mne),e(Mne,q2o),e(Qu,N2o),e(Qu,vI),e(vI,j2o),e(Qu,D2o),e($,G2o),e($,Wu),e(Wu,Ene),e(Ene,O2o),e(Wu,V2o),e(Wu,FI),e(FI,X2o),e(Wu,z2o),e($,Q2o),e($,Hu),e(Hu,Cne),e(Cne,W2o),e(Hu,H2o),e(Hu,TI),e(TI,U2o),e(Hu,J2o),e($,Y2o),e($,Uu),e(Uu,wne),e(wne,K2o),e(Uu,Z2o),e(Uu,MI),e(MI,e5o),e(Uu,o5o),e($,r5o),e($,Ju),e(Ju,Ane),e(Ane,t5o),e(Ju,a5o),e(Ju,EI),e(EI,n5o),e(Ju,s5o),e($,l5o),e($,Yu),e(Yu,yne),e(yne,i5o),e(Yu,d5o),e(Yu,CI),e(CI,c5o),e(Yu,f5o),e($,m5o),e($,Ku),e(Ku,Lne),e(Lne,g5o),e(Ku,h5o),e(Ku,wI),e(wI,p5o),e(Ku,_5o),e($,u5o),e($,Zu),e(Zu,xne),e(xne,b5o),e(Zu,v5o),e(Zu,AI),e(AI,F5o),e(Zu,T5o),e($,M5o),e($,e6),e(e6,kne),e(kne,E5o),e(e6,C5o),e(e6,yI),e(yI,w5o),e(e6,A5o),e($,y5o),e($,o6),e(o6,Sne),e(Sne,L5o),e(o6,x5o),e(o6,LI),e(LI,k5o),e(o6,S5o),e($,R5o),e($,r6),e(r6,Rne),e(Rne,B5o),e(r6,P5o),e(r6,xI),e(xI,$5o),e(r6,I5o),e($,q5o),e($,t6),e(t6,Bne),e(Bne,N5o),e(t6,j5o),e(t6,kI),e(kI,D5o),e(t6,G5o),e($,O5o),e($,a6),e(a6,Pne),e(Pne,V5o),e(a6,X5o),e(a6,SI),e(SI,z5o),e(a6,Q5o),e($,W5o),e($,n6),e(n6,$ne),e($ne,H5o),e(n6,U5o),e(n6,RI),e(RI,J5o),e(n6,Y5o),e($,K5o),e($,s6),e(s6,Ine),e(Ine,Z5o),e(s6,evo),e(s6,BI),e(BI,ovo),e(s6,rvo),e($,tvo),e($,l6),e(l6,qne),e(qne,avo),e(l6,nvo),e(l6,PI),e(PI,svo),e(l6,lvo),e($,ivo),e($,i6),e(i6,Nne),e(Nne,dvo),e(i6,cvo),e(i6,$I),e($I,fvo),e(i6,mvo),e($,gvo),e($,d6),e(d6,jne),e(jne,hvo),e(d6,pvo),e(d6,II),e(II,_vo),e(d6,uvo),e($,bvo),e($,c6),e(c6,Dne),e(Dne,vvo),e(c6,Fvo),e(c6,qI),e(qI,Tvo),e(c6,Mvo),e(je,Evo),e(je,f6),e(f6,Cvo),e(f6,Gne),e(Gne,wvo),e(f6,Avo),e(f6,One),e(One,yvo),e(je,Lvo),e(je,Vne),e(Vne,xvo),e(je,kvo),g(Bw,je,null),b(c,_Be,u),b(c,sd,u),e(sd,m6),e(m6,Xne),g(Pw,Xne,null),e(sd,Svo),e(sd,zne),e(zne,Rvo),b(c,uBe,u),b(c,Zo,u),g($w,Zo,null),e(Zo,Bvo),e(Zo,ld),e(ld,Pvo),e(ld,NI),e(NI,$vo),e(ld,Ivo),e(ld,jI),e(jI,qvo),e(ld,Nvo),e(Zo,jvo),e(Zo,Iw),e(Iw,Dvo),e(Iw,Qne),e(Qne,Gvo),e(Iw,Ovo),e(Zo,Vvo),e(Zo,Wr),g(qw,Wr,null),e(Wr,Xvo),e(Wr,Wne),e(Wne,zvo),e(Wr,Qvo),e(Wr,id),e(id,Wvo),e(id,Hne),e(Hne,Hvo),e(id,Uvo),e(id,DI),e(DI,Jvo),e(id,Yvo),e(Wr,Kvo),e(Wr,Une),e(Une,Zvo),e(Wr,eFo),g(Nw,Wr,null),e(Zo,oFo),e(Zo,De),g(jw,De,null),e(De,rFo),e(De,Jne),e(Jne,tFo),e(De,aFo),e(De,Wa),e(Wa,nFo),e(Wa,Yne),e(Yne,sFo),e(Wa,lFo),e(Wa,Kne),e(Kne,iFo),e(Wa,dFo),e(Wa,Zne),e(Zne,cFo),e(Wa,fFo),e(De,mFo),e(De,I),e(I,g6),e(g6,ese),e(ese,gFo),e(g6,hFo),e(g6,GI),e(GI,pFo),e(g6,_Fo),e(I,uFo),e(I,h6),e(h6,ose),e(ose,bFo),e(h6,vFo),e(h6,OI),e(OI,FFo),e(h6,TFo),e(I,MFo),e(I,p6),e(p6,rse),e(rse,EFo),e(p6,CFo),e(p6,VI),e(VI,wFo),e(p6,AFo),e(I,yFo),e(I,_6),e(_6,tse),e(tse,LFo),e(_6,xFo),e(_6,XI),e(XI,kFo),e(_6,SFo),e(I,RFo),e(I,u6),e(u6,ase),e(ase,BFo),e(u6,PFo),e(u6,zI),e(zI,$Fo),e(u6,IFo),e(I,qFo),e(I,b6),e(b6,nse),e(nse,NFo),e(b6,jFo),e(b6,QI),e(QI,DFo),e(b6,GFo),e(I,OFo),e(I,v6),e(v6,sse),e(sse,VFo),e(v6,XFo),e(v6,WI),e(WI,zFo),e(v6,QFo),e(I,WFo),e(I,F6),e(F6,lse),e(lse,HFo),e(F6,UFo),e(F6,HI),e(HI,JFo),e(F6,YFo),e(I,KFo),e(I,T6),e(T6,ise),e(ise,ZFo),e(T6,eTo),e(T6,UI),e(UI,oTo),e(T6,rTo),e(I,tTo),e(I,M6),e(M6,dse),e(dse,aTo),e(M6,nTo),e(M6,JI),e(JI,sTo),e(M6,lTo),e(I,iTo),e(I,E6),e(E6,cse),e(cse,dTo),e(E6,cTo),e(E6,YI),e(YI,fTo),e(E6,mTo),e(I,gTo),e(I,C6),e(C6,fse),e(fse,hTo),e(C6,pTo),e(C6,KI),e(KI,_To),e(C6,uTo),e(I,bTo),e(I,w6),e(w6,mse),e(mse,vTo),e(w6,FTo),e(w6,ZI),e(ZI,TTo),e(w6,MTo),e(I,ETo),e(I,A6),e(A6,gse),e(gse,CTo),e(A6,wTo),e(A6,eq),e(eq,ATo),e(A6,yTo),e(I,LTo),e(I,y6),e(y6,hse),e(hse,xTo),e(y6,kTo),e(y6,oq),e(oq,STo),e(y6,RTo),e(I,BTo),e(I,L6),e(L6,pse),e(pse,PTo),e(L6,$To),e(L6,rq),e(rq,ITo),e(L6,qTo),e(I,NTo),e(I,x6),e(x6,_se),e(_se,jTo),e(x6,DTo),e(x6,tq),e(tq,GTo),e(x6,OTo),e(I,VTo),e(I,k6),e(k6,use),e(use,XTo),e(k6,zTo),e(k6,aq),e(aq,QTo),e(k6,WTo),e(I,HTo),e(I,S6),e(S6,bse),e(bse,UTo),e(S6,JTo),e(S6,nq),e(nq,YTo),e(S6,KTo),e(I,ZTo),e(I,R6),e(R6,vse),e(vse,eMo),e(R6,oMo),e(R6,sq),e(sq,rMo),e(R6,tMo),e(I,aMo),e(I,B6),e(B6,Fse),e(Fse,nMo),e(B6,sMo),e(B6,lq),e(lq,lMo),e(B6,iMo),e(I,dMo),e(I,P6),e(P6,Tse),e(Tse,cMo),e(P6,fMo),e(P6,iq),e(iq,mMo),e(P6,gMo),e(I,hMo),e(I,$6),e($6,Mse),e(Mse,pMo),e($6,_Mo),e($6,dq),e(dq,uMo),e($6,bMo),e(I,vMo),e(I,I6),e(I6,Ese),e(Ese,FMo),e(I6,TMo),e(I6,cq),e(cq,MMo),e(I6,EMo),e(I,CMo),e(I,q6),e(q6,Cse),e(Cse,wMo),e(q6,AMo),e(q6,fq),e(fq,yMo),e(q6,LMo),e(I,xMo),e(I,N6),e(N6,wse),e(wse,kMo),e(N6,SMo),e(N6,mq),e(mq,RMo),e(N6,BMo),e(I,PMo),e(I,j6),e(j6,Ase),e(Ase,$Mo),e(j6,IMo),e(j6,gq),e(gq,qMo),e(j6,NMo),e(I,jMo),e(I,D6),e(D6,yse),e(yse,DMo),e(D6,GMo),e(D6,hq),e(hq,OMo),e(D6,VMo),e(I,XMo),e(I,G6),e(G6,Lse),e(Lse,zMo),e(G6,QMo),e(G6,pq),e(pq,WMo),e(G6,HMo),e(I,UMo),e(I,O6),e(O6,xse),e(xse,JMo),e(O6,YMo),e(O6,_q),e(_q,KMo),e(O6,ZMo),e(I,eEo),e(I,V6),e(V6,kse),e(kse,oEo),e(V6,rEo),e(V6,Sse),e(Sse,tEo),e(V6,aEo),e(I,nEo),e(I,X6),e(X6,Rse),e(Rse,sEo),e(X6,lEo),e(X6,uq),e(uq,iEo),e(X6,dEo),e(I,cEo),e(I,z6),e(z6,Bse),e(Bse,fEo),e(z6,mEo),e(z6,bq),e(bq,gEo),e(z6,hEo),e(I,pEo),e(I,Q6),e(Q6,Pse),e(Pse,_Eo),e(Q6,uEo),e(Q6,vq),e(vq,bEo),e(Q6,vEo),e(I,FEo),e(I,W6),e(W6,$se),e($se,TEo),e(W6,MEo),e(W6,Fq),e(Fq,EEo),e(W6,CEo),e(De,wEo),e(De,H6),e(H6,AEo),e(H6,Ise),e(Ise,yEo),e(H6,LEo),e(H6,qse),e(qse,xEo),e(De,kEo),e(De,Nse),e(Nse,SEo),e(De,REo),g(Dw,De,null),b(c,bBe,u),b(c,dd,u),e(dd,U6),e(U6,jse),g(Gw,jse,null),e(dd,BEo),e(dd,Dse),e(Dse,PEo),b(c,vBe,u),b(c,er,u),g(Ow,er,null),e(er,$Eo),e(er,cd),e(cd,IEo),e(cd,Tq),e(Tq,qEo),e(cd,NEo),e(cd,Mq),e(Mq,jEo),e(cd,DEo),e(er,GEo),e(er,Vw),e(Vw,OEo),e(Vw,Gse),e(Gse,VEo),e(Vw,XEo),e(er,zEo),e(er,Hr),g(Xw,Hr,null),e(Hr,QEo),e(Hr,Ose),e(Ose,WEo),e(Hr,HEo),e(Hr,fd),e(fd,UEo),e(fd,Vse),e(Vse,JEo),e(fd,YEo),e(fd,Eq),e(Eq,KEo),e(fd,ZEo),e(Hr,e3o),e(Hr,Xse),e(Xse,o3o),e(Hr,r3o),g(zw,Hr,null),e(er,t3o),e(er,Ge),g(Qw,Ge,null),e(Ge,a3o),e(Ge,zse),e(zse,n3o),e(Ge,s3o),e(Ge,Ha),e(Ha,l3o),e(Ha,Qse),e(Qse,i3o),e(Ha,d3o),e(Ha,Wse),e(Wse,c3o),e(Ha,f3o),e(Ha,Hse),e(Hse,m3o),e(Ha,g3o),e(Ge,h3o),e(Ge,ne),e(ne,J6),e(J6,Use),e(Use,p3o),e(J6,_3o),e(J6,Cq),e(Cq,u3o),e(J6,b3o),e(ne,v3o),e(ne,Y6),e(Y6,Jse),e(Jse,F3o),e(Y6,T3o),e(Y6,wq),e(wq,M3o),e(Y6,E3o),e(ne,C3o),e(ne,K6),e(K6,Yse),e(Yse,w3o),e(K6,A3o),e(K6,Aq),e(Aq,y3o),e(K6,L3o),e(ne,x3o),e(ne,Z6),e(Z6,Kse),e(Kse,k3o),e(Z6,S3o),e(Z6,yq),e(yq,R3o),e(Z6,B3o),e(ne,P3o),e(ne,e1),e(e1,Zse),e(Zse,$3o),e(e1,I3o),e(e1,Lq),e(Lq,q3o),e(e1,N3o),e(ne,j3o),e(ne,o1),e(o1,ele),e(ele,D3o),e(o1,G3o),e(o1,xq),e(xq,O3o),e(o1,V3o),e(ne,X3o),e(ne,r1),e(r1,ole),e(ole,z3o),e(r1,Q3o),e(r1,kq),e(kq,W3o),e(r1,H3o),e(ne,U3o),e(ne,t1),e(t1,rle),e(rle,J3o),e(t1,Y3o),e(t1,Sq),e(Sq,K3o),e(t1,Z3o),e(ne,eCo),e(ne,a1),e(a1,tle),e(tle,oCo),e(a1,rCo),e(a1,Rq),e(Rq,tCo),e(a1,aCo),e(ne,nCo),e(ne,n1),e(n1,ale),e(ale,sCo),e(n1,lCo),e(n1,Bq),e(Bq,iCo),e(n1,dCo),e(ne,cCo),e(ne,s1),e(s1,nle),e(nle,fCo),e(s1,mCo),e(s1,Pq),e(Pq,gCo),e(s1,hCo),e(ne,pCo),e(ne,l1),e(l1,sle),e(sle,_Co),e(l1,uCo),e(l1,$q),e($q,bCo),e(l1,vCo),e(ne,FCo),e(ne,i1),e(i1,lle),e(lle,TCo),e(i1,MCo),e(i1,Iq),e(Iq,ECo),e(i1,CCo),e(ne,wCo),e(ne,d1),e(d1,ile),e(ile,ACo),e(d1,yCo),e(d1,qq),e(qq,LCo),e(d1,xCo),e(ne,kCo),e(ne,c1),e(c1,dle),e(dle,SCo),e(c1,RCo),e(c1,Nq),e(Nq,BCo),e(c1,PCo),e(ne,$Co),e(ne,f1),e(f1,cle),e(cle,ICo),e(f1,qCo),e(f1,jq),e(jq,NCo),e(f1,jCo),e(ne,DCo),e(ne,m1),e(m1,fle),e(fle,GCo),e(m1,OCo),e(m1,Dq),e(Dq,VCo),e(m1,XCo),e(Ge,zCo),e(Ge,g1),e(g1,QCo),e(g1,mle),e(mle,WCo),e(g1,HCo),e(g1,gle),e(gle,UCo),e(Ge,JCo),e(Ge,hle),e(hle,YCo),e(Ge,KCo),g(Ww,Ge,null),b(c,FBe,u),b(c,md,u),e(md,h1),e(h1,ple),g(Hw,ple,null),e(md,ZCo),e(md,_le),e(_le,ewo),b(c,TBe,u),b(c,or,u),g(Uw,or,null),e(or,owo),e(or,gd),e(gd,rwo),e(gd,Gq),e(Gq,two),e(gd,awo),e(gd,Oq),e(Oq,nwo),e(gd,swo),e(or,lwo),e(or,Jw),e(Jw,iwo),e(Jw,ule),e(ule,dwo),e(Jw,cwo),e(or,fwo),e(or,Ur),g(Yw,Ur,null),e(Ur,mwo),e(Ur,ble),e(ble,gwo),e(Ur,hwo),e(Ur,hd),e(hd,pwo),e(hd,vle),e(vle,_wo),e(hd,uwo),e(hd,Vq),e(Vq,bwo),e(hd,vwo),e(Ur,Fwo),e(Ur,Fle),e(Fle,Two),e(Ur,Mwo),g(Kw,Ur,null),e(or,Ewo),e(or,Oe),g(Zw,Oe,null),e(Oe,Cwo),e(Oe,Tle),e(Tle,wwo),e(Oe,Awo),e(Oe,Ua),e(Ua,ywo),e(Ua,Mle),e(Mle,Lwo),e(Ua,xwo),e(Ua,Ele),e(Ele,kwo),e(Ua,Swo),e(Ua,Cle),e(Cle,Rwo),e(Ua,Bwo),e(Oe,Pwo),e(Oe,y),e(y,p1),e(p1,wle),e(wle,$wo),e(p1,Iwo),e(p1,Xq),e(Xq,qwo),e(p1,Nwo),e(y,jwo),e(y,_1),e(_1,Ale),e(Ale,Dwo),e(_1,Gwo),e(_1,zq),e(zq,Owo),e(_1,Vwo),e(y,Xwo),e(y,u1),e(u1,yle),e(yle,zwo),e(u1,Qwo),e(u1,Qq),e(Qq,Wwo),e(u1,Hwo),e(y,Uwo),e(y,b1),e(b1,Lle),e(Lle,Jwo),e(b1,Ywo),e(b1,Wq),e(Wq,Kwo),e(b1,Zwo),e(y,eAo),e(y,v1),e(v1,xle),e(xle,oAo),e(v1,rAo),e(v1,Hq),e(Hq,tAo),e(v1,aAo),e(y,nAo),e(y,F1),e(F1,kle),e(kle,sAo),e(F1,lAo),e(F1,Uq),e(Uq,iAo),e(F1,dAo),e(y,cAo),e(y,T1),e(T1,Sle),e(Sle,fAo),e(T1,mAo),e(T1,Jq),e(Jq,gAo),e(T1,hAo),e(y,pAo),e(y,M1),e(M1,Rle),e(Rle,_Ao),e(M1,uAo),e(M1,Yq),e(Yq,bAo),e(M1,vAo),e(y,FAo),e(y,E1),e(E1,Ble),e(Ble,TAo),e(E1,MAo),e(E1,Kq),e(Kq,EAo),e(E1,CAo),e(y,wAo),e(y,C1),e(C1,Ple),e(Ple,AAo),e(C1,yAo),e(C1,Zq),e(Zq,LAo),e(C1,xAo),e(y,kAo),e(y,w1),e(w1,$le),e($le,SAo),e(w1,RAo),e(w1,eN),e(eN,BAo),e(w1,PAo),e(y,$Ao),e(y,A1),e(A1,Ile),e(Ile,IAo),e(A1,qAo),e(A1,oN),e(oN,NAo),e(A1,jAo),e(y,DAo),e(y,y1),e(y1,qle),e(qle,GAo),e(y1,OAo),e(y1,rN),e(rN,VAo),e(y1,XAo),e(y,zAo),e(y,L1),e(L1,Nle),e(Nle,QAo),e(L1,WAo),e(L1,tN),e(tN,HAo),e(L1,UAo),e(y,JAo),e(y,x1),e(x1,jle),e(jle,YAo),e(x1,KAo),e(x1,aN),e(aN,ZAo),e(x1,e0o),e(y,o0o),e(y,k1),e(k1,Dle),e(Dle,r0o),e(k1,t0o),e(k1,nN),e(nN,a0o),e(k1,n0o),e(y,s0o),e(y,S1),e(S1,Gle),e(Gle,l0o),e(S1,i0o),e(S1,sN),e(sN,d0o),e(S1,c0o),e(y,f0o),e(y,R1),e(R1,Ole),e(Ole,m0o),e(R1,g0o),e(R1,lN),e(lN,h0o),e(R1,p0o),e(y,_0o),e(y,B1),e(B1,Vle),e(Vle,u0o),e(B1,b0o),e(B1,iN),e(iN,v0o),e(B1,F0o),e(y,T0o),e(y,P1),e(P1,Xle),e(Xle,M0o),e(P1,E0o),e(P1,dN),e(dN,C0o),e(P1,w0o),e(y,A0o),e(y,$1),e($1,zle),e(zle,y0o),e($1,L0o),e($1,cN),e(cN,x0o),e($1,k0o),e(y,S0o),e(y,I1),e(I1,Qle),e(Qle,R0o),e(I1,B0o),e(I1,fN),e(fN,P0o),e(I1,$0o),e(y,I0o),e(y,q1),e(q1,Wle),e(Wle,q0o),e(q1,N0o),e(q1,mN),e(mN,j0o),e(q1,D0o),e(y,G0o),e(y,N1),e(N1,Hle),e(Hle,O0o),e(N1,V0o),e(N1,gN),e(gN,X0o),e(N1,z0o),e(y,Q0o),e(y,j1),e(j1,Ule),e(Ule,W0o),e(j1,H0o),e(j1,hN),e(hN,U0o),e(j1,J0o),e(y,Y0o),e(y,D1),e(D1,Jle),e(Jle,K0o),e(D1,Z0o),e(D1,pN),e(pN,eyo),e(D1,oyo),e(y,ryo),e(y,G1),e(G1,Yle),e(Yle,tyo),e(G1,ayo),e(G1,_N),e(_N,nyo),e(G1,syo),e(y,lyo),e(y,O1),e(O1,Kle),e(Kle,iyo),e(O1,dyo),e(O1,uN),e(uN,cyo),e(O1,fyo),e(y,myo),e(y,V1),e(V1,Zle),e(Zle,gyo),e(V1,hyo),e(V1,bN),e(bN,pyo),e(V1,_yo),e(y,uyo),e(y,X1),e(X1,eie),e(eie,byo),e(X1,vyo),e(X1,vN),e(vN,Fyo),e(X1,Tyo),e(y,Myo),e(y,z1),e(z1,oie),e(oie,Eyo),e(z1,Cyo),e(z1,FN),e(FN,wyo),e(z1,Ayo),e(y,yyo),e(y,Q1),e(Q1,rie),e(rie,Lyo),e(Q1,xyo),e(Q1,TN),e(TN,kyo),e(Q1,Syo),e(y,Ryo),e(y,W1),e(W1,tie),e(tie,Byo),e(W1,Pyo),e(W1,MN),e(MN,$yo),e(W1,Iyo),e(y,qyo),e(y,H1),e(H1,aie),e(aie,Nyo),e(H1,jyo),e(H1,EN),e(EN,Dyo),e(H1,Gyo),e(y,Oyo),e(y,U1),e(U1,nie),e(nie,Vyo),e(U1,Xyo),e(U1,CN),e(CN,zyo),e(U1,Qyo),e(y,Wyo),e(y,J1),e(J1,sie),e(sie,Hyo),e(J1,Uyo),e(J1,wN),e(wN,Jyo),e(J1,Yyo),e(y,Kyo),e(y,Y1),e(Y1,lie),e(lie,Zyo),e(Y1,eLo),e(Y1,AN),e(AN,oLo),e(Y1,rLo),e(y,tLo),e(y,K1),e(K1,iie),e(iie,aLo),e(K1,nLo),e(K1,yN),e(yN,sLo),e(K1,lLo),e(y,iLo),e(y,Z1),e(Z1,die),e(die,dLo),e(Z1,cLo),e(Z1,LN),e(LN,fLo),e(Z1,mLo),e(y,gLo),e(y,e4),e(e4,cie),e(cie,hLo),e(e4,pLo),e(e4,xN),e(xN,_Lo),e(e4,uLo),e(y,bLo),e(y,o4),e(o4,fie),e(fie,vLo),e(o4,FLo),e(o4,kN),e(kN,TLo),e(o4,MLo),e(y,ELo),e(y,r4),e(r4,mie),e(mie,CLo),e(r4,wLo),e(r4,SN),e(SN,ALo),e(r4,yLo),e(y,LLo),e(y,t4),e(t4,gie),e(gie,xLo),e(t4,kLo),e(t4,RN),e(RN,SLo),e(t4,RLo),e(y,BLo),e(y,a4),e(a4,hie),e(hie,PLo),e(a4,$Lo),e(a4,BN),e(BN,ILo),e(a4,qLo),e(y,NLo),e(y,n4),e(n4,pie),e(pie,jLo),e(n4,DLo),e(n4,PN),e(PN,GLo),e(n4,OLo),e(y,VLo),e(y,s4),e(s4,_ie),e(_ie,XLo),e(s4,zLo),e(s4,$N),e($N,QLo),e(s4,WLo),e(y,HLo),e(y,l4),e(l4,uie),e(uie,ULo),e(l4,JLo),e(l4,IN),e(IN,YLo),e(l4,KLo),e(Oe,ZLo),e(Oe,i4),e(i4,e8o),e(i4,bie),e(bie,o8o),e(i4,r8o),e(i4,vie),e(vie,t8o),e(Oe,a8o),e(Oe,Fie),e(Fie,n8o),e(Oe,s8o),g(eA,Oe,null),b(c,MBe,u),b(c,pd,u),e(pd,d4),e(d4,Tie),g(oA,Tie,null),e(pd,l8o),e(pd,Mie),e(Mie,i8o),b(c,EBe,u),b(c,rr,u),g(rA,rr,null),e(rr,d8o),e(rr,_d),e(_d,c8o),e(_d,qN),e(qN,f8o),e(_d,m8o),e(_d,NN),e(NN,g8o),e(_d,h8o),e(rr,p8o),e(rr,tA),e(tA,_8o),e(tA,Eie),e(Eie,u8o),e(tA,b8o),e(rr,v8o),e(rr,Jr),g(aA,Jr,null),e(Jr,F8o),e(Jr,Cie),e(Cie,T8o),e(Jr,M8o),e(Jr,ud),e(ud,E8o),e(ud,wie),e(wie,C8o),e(ud,w8o),e(ud,jN),e(jN,A8o),e(ud,y8o),e(Jr,L8o),e(Jr,Aie),e(Aie,x8o),e(Jr,k8o),g(nA,Jr,null),e(rr,S8o),e(rr,Ve),g(sA,Ve,null),e(Ve,R8o),e(Ve,yie),e(yie,B8o),e(Ve,P8o),e(Ve,Ja),e(Ja,$8o),e(Ja,Lie),e(Lie,I8o),e(Ja,q8o),e(Ja,xie),e(xie,N8o),e(Ja,j8o),e(Ja,kie),e(kie,D8o),e(Ja,G8o),e(Ve,O8o),e(Ve,G),e(G,c4),e(c4,Sie),e(Sie,V8o),e(c4,X8o),e(c4,DN),e(DN,z8o),e(c4,Q8o),e(G,W8o),e(G,f4),e(f4,Rie),e(Rie,H8o),e(f4,U8o),e(f4,GN),e(GN,J8o),e(f4,Y8o),e(G,K8o),e(G,m4),e(m4,Bie),e(Bie,Z8o),e(m4,e7o),e(m4,ON),e(ON,o7o),e(m4,r7o),e(G,t7o),e(G,g4),e(g4,Pie),e(Pie,a7o),e(g4,n7o),e(g4,VN),e(VN,s7o),e(g4,l7o),e(G,i7o),e(G,h4),e(h4,$ie),e($ie,d7o),e(h4,c7o),e(h4,XN),e(XN,f7o),e(h4,m7o),e(G,g7o),e(G,p4),e(p4,Iie),e(Iie,h7o),e(p4,p7o),e(p4,zN),e(zN,_7o),e(p4,u7o),e(G,b7o),e(G,_4),e(_4,qie),e(qie,v7o),e(_4,F7o),e(_4,QN),e(QN,T7o),e(_4,M7o),e(G,E7o),e(G,u4),e(u4,Nie),e(Nie,C7o),e(u4,w7o),e(u4,WN),e(WN,A7o),e(u4,y7o),e(G,L7o),e(G,b4),e(b4,jie),e(jie,x7o),e(b4,k7o),e(b4,HN),e(HN,S7o),e(b4,R7o),e(G,B7o),e(G,v4),e(v4,Die),e(Die,P7o),e(v4,$7o),e(v4,UN),e(UN,I7o),e(v4,q7o),e(G,N7o),e(G,F4),e(F4,Gie),e(Gie,j7o),e(F4,D7o),e(F4,JN),e(JN,G7o),e(F4,O7o),e(G,V7o),e(G,T4),e(T4,Oie),e(Oie,X7o),e(T4,z7o),e(T4,YN),e(YN,Q7o),e(T4,W7o),e(G,H7o),e(G,M4),e(M4,Vie),e(Vie,U7o),e(M4,J7o),e(M4,KN),e(KN,Y7o),e(M4,K7o),e(G,Z7o),e(G,E4),e(E4,Xie),e(Xie,e9o),e(E4,o9o),e(E4,ZN),e(ZN,r9o),e(E4,t9o),e(G,a9o),e(G,C4),e(C4,zie),e(zie,n9o),e(C4,s9o),e(C4,ej),e(ej,l9o),e(C4,i9o),e(G,d9o),e(G,w4),e(w4,Qie),e(Qie,c9o),e(w4,f9o),e(w4,oj),e(oj,m9o),e(w4,g9o),e(G,h9o),e(G,A4),e(A4,Wie),e(Wie,p9o),e(A4,_9o),e(A4,rj),e(rj,u9o),e(A4,b9o),e(G,v9o),e(G,y4),e(y4,Hie),e(Hie,F9o),e(y4,T9o),e(y4,tj),e(tj,M9o),e(y4,E9o),e(G,C9o),e(G,L4),e(L4,Uie),e(Uie,w9o),e(L4,A9o),e(L4,aj),e(aj,y9o),e(L4,L9o),e(G,x9o),e(G,x4),e(x4,Jie),e(Jie,k9o),e(x4,S9o),e(x4,nj),e(nj,R9o),e(x4,B9o),e(G,P9o),e(G,k4),e(k4,Yie),e(Yie,$9o),e(k4,I9o),e(k4,sj),e(sj,q9o),e(k4,N9o),e(G,j9o),e(G,S4),e(S4,Kie),e(Kie,D9o),e(S4,G9o),e(S4,lj),e(lj,O9o),e(S4,V9o),e(G,X9o),e(G,R4),e(R4,Zie),e(Zie,z9o),e(R4,Q9o),e(R4,ij),e(ij,W9o),e(R4,H9o),e(G,U9o),e(G,B4),e(B4,ede),e(ede,J9o),e(B4,Y9o),e(B4,dj),e(dj,K9o),e(B4,Z9o),e(G,exo),e(G,P4),e(P4,ode),e(ode,oxo),e(P4,rxo),e(P4,cj),e(cj,txo),e(P4,axo),e(G,nxo),e(G,$4),e($4,rde),e(rde,sxo),e($4,lxo),e($4,fj),e(fj,ixo),e($4,dxo),e(G,cxo),e(G,I4),e(I4,tde),e(tde,fxo),e(I4,mxo),e(I4,mj),e(mj,gxo),e(I4,hxo),e(G,pxo),e(G,q4),e(q4,ade),e(ade,_xo),e(q4,uxo),e(q4,gj),e(gj,bxo),e(q4,vxo),e(Ve,Fxo),e(Ve,N4),e(N4,Txo),e(N4,nde),e(nde,Mxo),e(N4,Exo),e(N4,sde),e(sde,Cxo),e(Ve,wxo),e(Ve,lde),e(lde,Axo),e(Ve,yxo),g(lA,Ve,null),b(c,CBe,u),b(c,bd,u),e(bd,j4),e(j4,ide),g(iA,ide,null),e(bd,Lxo),e(bd,dde),e(dde,xxo),b(c,wBe,u),b(c,tr,u),g(dA,tr,null),e(tr,kxo),e(tr,vd),e(vd,Sxo),e(vd,hj),e(hj,Rxo),e(vd,Bxo),e(vd,pj),e(pj,Pxo),e(vd,$xo),e(tr,Ixo),e(tr,cA),e(cA,qxo),e(cA,cde),e(cde,Nxo),e(cA,jxo),e(tr,Dxo),e(tr,Yr),g(fA,Yr,null),e(Yr,Gxo),e(Yr,fde),e(fde,Oxo),e(Yr,Vxo),e(Yr,Fd),e(Fd,Xxo),e(Fd,mde),e(mde,zxo),e(Fd,Qxo),e(Fd,_j),e(_j,Wxo),e(Fd,Hxo),e(Yr,Uxo),e(Yr,gde),e(gde,Jxo),e(Yr,Yxo),g(mA,Yr,null),e(tr,Kxo),e(tr,Xe),g(gA,Xe,null),e(Xe,Zxo),e(Xe,hde),e(hde,eko),e(Xe,oko),e(Xe,Ya),e(Ya,rko),e(Ya,pde),e(pde,tko),e(Ya,ako),e(Ya,_de),e(_de,nko),e(Ya,sko),e(Ya,ude),e(ude,lko),e(Ya,iko),e(Xe,dko),e(Xe,da),e(da,D4),e(D4,bde),e(bde,cko),e(D4,fko),e(D4,uj),e(uj,mko),e(D4,gko),e(da,hko),e(da,G4),e(G4,vde),e(vde,pko),e(G4,_ko),e(G4,bj),e(bj,uko),e(G4,bko),e(da,vko),e(da,O4),e(O4,Fde),e(Fde,Fko),e(O4,Tko),e(O4,vj),e(vj,Mko),e(O4,Eko),e(da,Cko),e(da,V4),e(V4,Tde),e(Tde,wko),e(V4,Ako),e(V4,Fj),e(Fj,yko),e(V4,Lko),e(da,xko),e(da,X4),e(X4,Mde),e(Mde,kko),e(X4,Sko),e(X4,Tj),e(Tj,Rko),e(X4,Bko),e(Xe,Pko),e(Xe,z4),e(z4,$ko),e(z4,Ede),e(Ede,Iko),e(z4,qko),e(z4,Cde),e(Cde,Nko),e(Xe,jko),e(Xe,wde),e(wde,Dko),e(Xe,Gko),g(hA,Xe,null),b(c,ABe,u),b(c,Td,u),e(Td,Q4),e(Q4,Ade),g(pA,Ade,null),e(Td,Oko),e(Td,yde),e(yde,Vko),b(c,yBe,u),b(c,ar,u),g(_A,ar,null),e(ar,Xko),e(ar,Md),e(Md,zko),e(Md,Mj),e(Mj,Qko),e(Md,Wko),e(Md,Ej),e(Ej,Hko),e(Md,Uko),e(ar,Jko),e(ar,uA),e(uA,Yko),e(uA,Lde),e(Lde,Kko),e(uA,Zko),e(ar,eSo),e(ar,Kr),g(bA,Kr,null),e(Kr,oSo),e(Kr,xde),e(xde,rSo),e(Kr,tSo),e(Kr,Ed),e(Ed,aSo),e(Ed,kde),e(kde,nSo),e(Ed,sSo),e(Ed,Cj),e(Cj,lSo),e(Ed,iSo),e(Kr,dSo),e(Kr,Sde),e(Sde,cSo),e(Kr,fSo),g(vA,Kr,null),e(ar,mSo),e(ar,ze),g(FA,ze,null),e(ze,gSo),e(ze,Rde),e(Rde,hSo),e(ze,pSo),e(ze,Ka),e(Ka,_So),e(Ka,Bde),e(Bde,uSo),e(Ka,bSo),e(Ka,Pde),e(Pde,vSo),e(Ka,FSo),e(Ka,$de),e($de,TSo),e(Ka,MSo),e(ze,ESo),e(ze,j),e(j,W4),e(W4,Ide),e(Ide,CSo),e(W4,wSo),e(W4,wj),e(wj,ASo),e(W4,ySo),e(j,LSo),e(j,H4),e(H4,qde),e(qde,xSo),e(H4,kSo),e(H4,Aj),e(Aj,SSo),e(H4,RSo),e(j,BSo),e(j,U4),e(U4,Nde),e(Nde,PSo),e(U4,$So),e(U4,yj),e(yj,ISo),e(U4,qSo),e(j,NSo),e(j,J4),e(J4,jde),e(jde,jSo),e(J4,DSo),e(J4,Lj),e(Lj,GSo),e(J4,OSo),e(j,VSo),e(j,Y4),e(Y4,Dde),e(Dde,XSo),e(Y4,zSo),e(Y4,xj),e(xj,QSo),e(Y4,WSo),e(j,HSo),e(j,K4),e(K4,Gde),e(Gde,USo),e(K4,JSo),e(K4,kj),e(kj,YSo),e(K4,KSo),e(j,ZSo),e(j,Z4),e(Z4,Ode),e(Ode,eRo),e(Z4,oRo),e(Z4,Sj),e(Sj,rRo),e(Z4,tRo),e(j,aRo),e(j,eb),e(eb,Vde),e(Vde,nRo),e(eb,sRo),e(eb,Rj),e(Rj,lRo),e(eb,iRo),e(j,dRo),e(j,ob),e(ob,Xde),e(Xde,cRo),e(ob,fRo),e(ob,Bj),e(Bj,mRo),e(ob,gRo),e(j,hRo),e(j,rb),e(rb,zde),e(zde,pRo),e(rb,_Ro),e(rb,Pj),e(Pj,uRo),e(rb,bRo),e(j,vRo),e(j,tb),e(tb,Qde),e(Qde,FRo),e(tb,TRo),e(tb,$j),e($j,MRo),e(tb,ERo),e(j,CRo),e(j,ab),e(ab,Wde),e(Wde,wRo),e(ab,ARo),e(ab,Ij),e(Ij,yRo),e(ab,LRo),e(j,xRo),e(j,nb),e(nb,Hde),e(Hde,kRo),e(nb,SRo),e(nb,qj),e(qj,RRo),e(nb,BRo),e(j,PRo),e(j,sb),e(sb,Ude),e(Ude,$Ro),e(sb,IRo),e(sb,Nj),e(Nj,qRo),e(sb,NRo),e(j,jRo),e(j,lb),e(lb,Jde),e(Jde,DRo),e(lb,GRo),e(lb,jj),e(jj,ORo),e(lb,VRo),e(j,XRo),e(j,ib),e(ib,Yde),e(Yde,zRo),e(ib,QRo),e(ib,Dj),e(Dj,WRo),e(ib,HRo),e(j,URo),e(j,db),e(db,Kde),e(Kde,JRo),e(db,YRo),e(db,Gj),e(Gj,KRo),e(db,ZRo),e(j,eBo),e(j,cb),e(cb,Zde),e(Zde,oBo),e(cb,rBo),e(cb,Oj),e(Oj,tBo),e(cb,aBo),e(j,nBo),e(j,fb),e(fb,ece),e(ece,sBo),e(fb,lBo),e(fb,Vj),e(Vj,iBo),e(fb,dBo),e(j,cBo),e(j,mb),e(mb,oce),e(oce,fBo),e(mb,mBo),e(mb,Xj),e(Xj,gBo),e(mb,hBo),e(j,pBo),e(j,gb),e(gb,rce),e(rce,_Bo),e(gb,uBo),e(gb,zj),e(zj,bBo),e(gb,vBo),e(j,FBo),e(j,hb),e(hb,tce),e(tce,TBo),e(hb,MBo),e(hb,Qj),e(Qj,EBo),e(hb,CBo),e(j,wBo),e(j,pb),e(pb,ace),e(ace,ABo),e(pb,yBo),e(pb,Wj),e(Wj,LBo),e(pb,xBo),e(j,kBo),e(j,_b),e(_b,nce),e(nce,SBo),e(_b,RBo),e(_b,Hj),e(Hj,BBo),e(_b,PBo),e(j,$Bo),e(j,ub),e(ub,sce),e(sce,IBo),e(ub,qBo),e(ub,Uj),e(Uj,NBo),e(ub,jBo),e(j,DBo),e(j,bb),e(bb,lce),e(lce,GBo),e(bb,OBo),e(bb,Jj),e(Jj,VBo),e(bb,XBo),e(j,zBo),e(j,vb),e(vb,ice),e(ice,QBo),e(vb,WBo),e(vb,Yj),e(Yj,HBo),e(vb,UBo),e(j,JBo),e(j,Fb),e(Fb,dce),e(dce,YBo),e(Fb,KBo),e(Fb,Kj),e(Kj,ZBo),e(Fb,ePo),e(j,oPo),e(j,Tb),e(Tb,cce),e(cce,rPo),e(Tb,tPo),e(Tb,Zj),e(Zj,aPo),e(Tb,nPo),e(j,sPo),e(j,Mb),e(Mb,fce),e(fce,lPo),e(Mb,iPo),e(Mb,eD),e(eD,dPo),e(Mb,cPo),e(j,fPo),e(j,Eb),e(Eb,mce),e(mce,mPo),e(Eb,gPo),e(Eb,oD),e(oD,hPo),e(Eb,pPo),e(j,_Po),e(j,Cb),e(Cb,gce),e(gce,uPo),e(Cb,bPo),e(Cb,rD),e(rD,vPo),e(Cb,FPo),e(j,TPo),e(j,wb),e(wb,hce),e(hce,MPo),e(wb,EPo),e(wb,tD),e(tD,CPo),e(wb,wPo),e(ze,APo),e(ze,Ab),e(Ab,yPo),e(Ab,pce),e(pce,LPo),e(Ab,xPo),e(Ab,_ce),e(_ce,kPo),e(ze,SPo),e(ze,uce),e(uce,RPo),e(ze,BPo),g(TA,ze,null),b(c,LBe,u),b(c,Cd,u),e(Cd,yb),e(yb,bce),g(MA,bce,null),e(Cd,PPo),e(Cd,vce),e(vce,$Po),b(c,xBe,u),b(c,nr,u),g(EA,nr,null),e(nr,IPo),e(nr,wd),e(wd,qPo),e(wd,aD),e(aD,NPo),e(wd,jPo),e(wd,nD),e(nD,DPo),e(wd,GPo),e(nr,OPo),e(nr,CA),e(CA,VPo),e(CA,Fce),e(Fce,XPo),e(CA,zPo),e(nr,QPo),e(nr,Zr),g(wA,Zr,null),e(Zr,WPo),e(Zr,Tce),e(Tce,HPo),e(Zr,UPo),e(Zr,Ad),e(Ad,JPo),e(Ad,Mce),e(Mce,YPo),e(Ad,KPo),e(Ad,sD),e(sD,ZPo),e(Ad,e$o),e(Zr,o$o),e(Zr,Ece),e(Ece,r$o),e(Zr,t$o),g(AA,Zr,null),e(nr,a$o),e(nr,Qe),g(yA,Qe,null),e(Qe,n$o),e(Qe,Cce),e(Cce,s$o),e(Qe,l$o),e(Qe,Za),e(Za,i$o),e(Za,wce),e(wce,d$o),e(Za,c$o),e(Za,Ace),e(Ace,f$o),e(Za,m$o),e(Za,yce),e(yce,g$o),e(Za,h$o),e(Qe,p$o),e(Qe,R),e(R,Lb),e(Lb,Lce),e(Lce,_$o),e(Lb,u$o),e(Lb,lD),e(lD,b$o),e(Lb,v$o),e(R,F$o),e(R,xb),e(xb,xce),e(xce,T$o),e(xb,M$o),e(xb,iD),e(iD,E$o),e(xb,C$o),e(R,w$o),e(R,kb),e(kb,kce),e(kce,A$o),e(kb,y$o),e(kb,dD),e(dD,L$o),e(kb,x$o),e(R,k$o),e(R,Sb),e(Sb,Sce),e(Sce,S$o),e(Sb,R$o),e(Sb,cD),e(cD,B$o),e(Sb,P$o),e(R,$$o),e(R,Rb),e(Rb,Rce),e(Rce,I$o),e(Rb,q$o),e(Rb,fD),e(fD,N$o),e(Rb,j$o),e(R,D$o),e(R,Bb),e(Bb,Bce),e(Bce,G$o),e(Bb,O$o),e(Bb,mD),e(mD,V$o),e(Bb,X$o),e(R,z$o),e(R,Pb),e(Pb,Pce),e(Pce,Q$o),e(Pb,W$o),e(Pb,gD),e(gD,H$o),e(Pb,U$o),e(R,J$o),e(R,$b),e($b,$ce),e($ce,Y$o),e($b,K$o),e($b,hD),e(hD,Z$o),e($b,eIo),e(R,oIo),e(R,Ib),e(Ib,Ice),e(Ice,rIo),e(Ib,tIo),e(Ib,pD),e(pD,aIo),e(Ib,nIo),e(R,sIo),e(R,qb),e(qb,qce),e(qce,lIo),e(qb,iIo),e(qb,_D),e(_D,dIo),e(qb,cIo),e(R,fIo),e(R,Nb),e(Nb,Nce),e(Nce,mIo),e(Nb,gIo),e(Nb,uD),e(uD,hIo),e(Nb,pIo),e(R,_Io),e(R,jb),e(jb,jce),e(jce,uIo),e(jb,bIo),e(jb,bD),e(bD,vIo),e(jb,FIo),e(R,TIo),e(R,Db),e(Db,Dce),e(Dce,MIo),e(Db,EIo),e(Db,vD),e(vD,CIo),e(Db,wIo),e(R,AIo),e(R,Gb),e(Gb,Gce),e(Gce,yIo),e(Gb,LIo),e(Gb,FD),e(FD,xIo),e(Gb,kIo),e(R,SIo),e(R,Ob),e(Ob,Oce),e(Oce,RIo),e(Ob,BIo),e(Ob,TD),e(TD,PIo),e(Ob,$Io),e(R,IIo),e(R,Vb),e(Vb,Vce),e(Vce,qIo),e(Vb,NIo),e(Vb,MD),e(MD,jIo),e(Vb,DIo),e(R,GIo),e(R,Xb),e(Xb,Xce),e(Xce,OIo),e(Xb,VIo),e(Xb,ED),e(ED,XIo),e(Xb,zIo),e(R,QIo),e(R,zb),e(zb,zce),e(zce,WIo),e(zb,HIo),e(zb,CD),e(CD,UIo),e(zb,JIo),e(R,YIo),e(R,Qb),e(Qb,Qce),e(Qce,KIo),e(Qb,ZIo),e(Qb,wD),e(wD,eqo),e(Qb,oqo),e(R,rqo),e(R,Wb),e(Wb,Wce),e(Wce,tqo),e(Wb,aqo),e(Wb,AD),e(AD,nqo),e(Wb,sqo),e(R,lqo),e(R,Hb),e(Hb,Hce),e(Hce,iqo),e(Hb,dqo),e(Hb,yD),e(yD,cqo),e(Hb,fqo),e(R,mqo),e(R,Ub),e(Ub,Uce),e(Uce,gqo),e(Ub,hqo),e(Ub,LD),e(LD,pqo),e(Ub,_qo),e(R,uqo),e(R,Jb),e(Jb,Jce),e(Jce,bqo),e(Jb,vqo),e(Jb,xD),e(xD,Fqo),e(Jb,Tqo),e(R,Mqo),e(R,Yb),e(Yb,Yce),e(Yce,Eqo),e(Yb,Cqo),e(Yb,kD),e(kD,wqo),e(Yb,Aqo),e(R,yqo),e(R,Kb),e(Kb,Kce),e(Kce,Lqo),e(Kb,xqo),e(Kb,SD),e(SD,kqo),e(Kb,Sqo),e(R,Rqo),e(R,Zb),e(Zb,Zce),e(Zce,Bqo),e(Zb,Pqo),e(Zb,RD),e(RD,$qo),e(Zb,Iqo),e(R,qqo),e(R,e2),e(e2,efe),e(efe,Nqo),e(e2,jqo),e(e2,BD),e(BD,Dqo),e(e2,Gqo),e(R,Oqo),e(R,o2),e(o2,ofe),e(ofe,Vqo),e(o2,Xqo),e(o2,PD),e(PD,zqo),e(o2,Qqo),e(R,Wqo),e(R,r2),e(r2,rfe),e(rfe,Hqo),e(r2,Uqo),e(r2,$D),e($D,Jqo),e(r2,Yqo),e(R,Kqo),e(R,t2),e(t2,tfe),e(tfe,Zqo),e(t2,eNo),e(t2,ID),e(ID,oNo),e(t2,rNo),e(R,tNo),e(R,a2),e(a2,afe),e(afe,aNo),e(a2,nNo),e(a2,qD),e(qD,sNo),e(a2,lNo),e(R,iNo),e(R,n2),e(n2,nfe),e(nfe,dNo),e(n2,cNo),e(n2,ND),e(ND,fNo),e(n2,mNo),e(R,gNo),e(R,s2),e(s2,sfe),e(sfe,hNo),e(s2,pNo),e(s2,jD),e(jD,_No),e(s2,uNo),e(R,bNo),e(R,l2),e(l2,lfe),e(lfe,vNo),e(l2,FNo),e(l2,DD),e(DD,TNo),e(l2,MNo),e(R,ENo),e(R,i2),e(i2,ife),e(ife,CNo),e(i2,wNo),e(i2,GD),e(GD,ANo),e(i2,yNo),e(R,LNo),e(R,d2),e(d2,dfe),e(dfe,xNo),e(d2,kNo),e(d2,OD),e(OD,SNo),e(d2,RNo),e(R,BNo),e(R,c2),e(c2,cfe),e(cfe,PNo),e(c2,$No),e(c2,VD),e(VD,INo),e(c2,qNo),e(R,NNo),e(R,f2),e(f2,ffe),e(ffe,jNo),e(f2,DNo),e(f2,XD),e(XD,GNo),e(f2,ONo),e(R,VNo),e(R,m2),e(m2,mfe),e(mfe,XNo),e(m2,zNo),e(m2,zD),e(zD,QNo),e(m2,WNo),e(Qe,HNo),e(Qe,g2),e(g2,UNo),e(g2,gfe),e(gfe,JNo),e(g2,YNo),e(g2,hfe),e(hfe,KNo),e(Qe,ZNo),e(Qe,pfe),e(pfe,ejo),e(Qe,ojo),g(LA,Qe,null),b(c,kBe,u),b(c,yd,u),e(yd,h2),e(h2,_fe),g(xA,_fe,null),e(yd,rjo),e(yd,ufe),e(ufe,tjo),b(c,SBe,u),b(c,sr,u),g(kA,sr,null),e(sr,ajo),e(sr,Ld),e(Ld,njo),e(Ld,QD),e(QD,sjo),e(Ld,ljo),e(Ld,WD),e(WD,ijo),e(Ld,djo),e(sr,cjo),e(sr,SA),e(SA,fjo),e(SA,bfe),e(bfe,mjo),e(SA,gjo),e(sr,hjo),e(sr,et),g(RA,et,null),e(et,pjo),e(et,vfe),e(vfe,_jo),e(et,ujo),e(et,xd),e(xd,bjo),e(xd,Ffe),e(Ffe,vjo),e(xd,Fjo),e(xd,HD),e(HD,Tjo),e(xd,Mjo),e(et,Ejo),e(et,Tfe),e(Tfe,Cjo),e(et,wjo),g(BA,et,null),e(sr,Ajo),e(sr,We),g(PA,We,null),e(We,yjo),e(We,Mfe),e(Mfe,Ljo),e(We,xjo),e(We,en),e(en,kjo),e(en,Efe),e(Efe,Sjo),e(en,Rjo),e(en,Cfe),e(Cfe,Bjo),e(en,Pjo),e(en,wfe),e(wfe,$jo),e(en,Ijo),e(We,qjo),e(We,Afe),e(Afe,p2),e(p2,yfe),e(yfe,Njo),e(p2,jjo),e(p2,UD),e(UD,Djo),e(p2,Gjo),e(We,Ojo),e(We,_2),e(_2,Vjo),e(_2,Lfe),e(Lfe,Xjo),e(_2,zjo),e(_2,xfe),e(xfe,Qjo),e(We,Wjo),e(We,kfe),e(kfe,Hjo),e(We,Ujo),g($A,We,null),b(c,RBe,u),b(c,kd,u),e(kd,u2),e(u2,Sfe),g(IA,Sfe,null),e(kd,Jjo),e(kd,Rfe),e(Rfe,Yjo),b(c,BBe,u),b(c,lr,u),g(qA,lr,null),e(lr,Kjo),e(lr,Sd),e(Sd,Zjo),e(Sd,JD),e(JD,eDo),e(Sd,oDo),e(Sd,YD),e(YD,rDo),e(Sd,tDo),e(lr,aDo),e(lr,NA),e(NA,nDo),e(NA,Bfe),e(Bfe,sDo),e(NA,lDo),e(lr,iDo),e(lr,ot),g(jA,ot,null),e(ot,dDo),e(ot,Pfe),e(Pfe,cDo),e(ot,fDo),e(ot,Rd),e(Rd,mDo),e(Rd,$fe),e($fe,gDo),e(Rd,hDo),e(Rd,KD),e(KD,pDo),e(Rd,_Do),e(ot,uDo),e(ot,Ife),e(Ife,bDo),e(ot,vDo),g(DA,ot,null),e(lr,FDo),e(lr,He),g(GA,He,null),e(He,TDo),e(He,qfe),e(qfe,MDo),e(He,EDo),e(He,on),e(on,CDo),e(on,Nfe),e(Nfe,wDo),e(on,ADo),e(on,jfe),e(jfe,yDo),e(on,LDo),e(on,Dfe),e(Dfe,xDo),e(on,kDo),e(He,SDo),e(He,de),e(de,b2),e(b2,Gfe),e(Gfe,RDo),e(b2,BDo),e(b2,ZD),e(ZD,PDo),e(b2,$Do),e(de,IDo),e(de,v2),e(v2,Ofe),e(Ofe,qDo),e(v2,NDo),e(v2,eG),e(eG,jDo),e(v2,DDo),e(de,GDo),e(de,F2),e(F2,Vfe),e(Vfe,ODo),e(F2,VDo),e(F2,oG),e(oG,XDo),e(F2,zDo),e(de,QDo),e(de,Gs),e(Gs,Xfe),e(Xfe,WDo),e(Gs,HDo),e(Gs,rG),e(rG,UDo),e(Gs,JDo),e(Gs,tG),e(tG,YDo),e(Gs,KDo),e(de,ZDo),e(de,T2),e(T2,zfe),e(zfe,eGo),e(T2,oGo),e(T2,aG),e(aG,rGo),e(T2,tGo),e(de,aGo),e(de,ma),e(ma,Qfe),e(Qfe,nGo),e(ma,sGo),e(ma,nG),e(nG,lGo),e(ma,iGo),e(ma,sG),e(sG,dGo),e(ma,cGo),e(ma,lG),e(lG,fGo),e(ma,mGo),e(de,gGo),e(de,M2),e(M2,Wfe),e(Wfe,hGo),e(M2,pGo),e(M2,iG),e(iG,_Go),e(M2,uGo),e(de,bGo),e(de,E2),e(E2,Hfe),e(Hfe,vGo),e(E2,FGo),e(E2,dG),e(dG,TGo),e(E2,MGo),e(de,EGo),e(de,C2),e(C2,Ufe),e(Ufe,CGo),e(C2,wGo),e(C2,cG),e(cG,AGo),e(C2,yGo),e(de,LGo),e(de,w2),e(w2,Jfe),e(Jfe,xGo),e(w2,kGo),e(w2,fG),e(fG,SGo),e(w2,RGo),e(de,BGo),e(de,A2),e(A2,Yfe),e(Yfe,PGo),e(A2,$Go),e(A2,mG),e(mG,IGo),e(A2,qGo),e(de,NGo),e(de,y2),e(y2,Kfe),e(Kfe,jGo),e(y2,DGo),e(y2,gG),e(gG,GGo),e(y2,OGo),e(de,VGo),e(de,L2),e(L2,Zfe),e(Zfe,XGo),e(L2,zGo),e(L2,hG),e(hG,QGo),e(L2,WGo),e(He,HGo),e(He,x2),e(x2,UGo),e(x2,eme),e(eme,JGo),e(x2,YGo),e(x2,ome),e(ome,KGo),e(He,ZGo),e(He,rme),e(rme,eOo),e(He,oOo),g(OA,He,null),b(c,PBe,u),b(c,Bd,u),e(Bd,k2),e(k2,tme),g(VA,tme,null),e(Bd,rOo),e(Bd,ame),e(ame,tOo),b(c,$Be,u),b(c,ir,u),g(XA,ir,null),e(ir,aOo),e(ir,Pd),e(Pd,nOo),e(Pd,pG),e(pG,sOo),e(Pd,lOo),e(Pd,_G),e(_G,iOo),e(Pd,dOo),e(ir,cOo),e(ir,zA),e(zA,fOo),e(zA,nme),e(nme,mOo),e(zA,gOo),e(ir,hOo),e(ir,rt),g(QA,rt,null),e(rt,pOo),e(rt,sme),e(sme,_Oo),e(rt,uOo),e(rt,$d),e($d,bOo),e($d,lme),e(lme,vOo),e($d,FOo),e($d,uG),e(uG,TOo),e($d,MOo),e(rt,EOo),e(rt,ime),e(ime,COo),e(rt,wOo),g(WA,rt,null),e(ir,AOo),e(ir,Ue),g(HA,Ue,null),e(Ue,yOo),e(Ue,dme),e(dme,LOo),e(Ue,xOo),e(Ue,rn),e(rn,kOo),e(rn,cme),e(cme,SOo),e(rn,ROo),e(rn,fme),e(fme,BOo),e(rn,POo),e(rn,mme),e(mme,$Oo),e(rn,IOo),e(Ue,qOo),e(Ue,gme),e(gme,S2),e(S2,hme),e(hme,NOo),e(S2,jOo),e(S2,bG),e(bG,DOo),e(S2,GOo),e(Ue,OOo),e(Ue,R2),e(R2,VOo),e(R2,pme),e(pme,XOo),e(R2,zOo),e(R2,_me),e(_me,QOo),e(Ue,WOo),e(Ue,ume),e(ume,HOo),e(Ue,UOo),g(UA,Ue,null),b(c,IBe,u),b(c,Id,u),e(Id,B2),e(B2,bme),g(JA,bme,null),e(Id,JOo),e(Id,vme),e(vme,YOo),b(c,qBe,u),b(c,dr,u),g(YA,dr,null),e(dr,KOo),e(dr,qd),e(qd,ZOo),e(qd,vG),e(vG,eVo),e(qd,oVo),e(qd,FG),e(FG,rVo),e(qd,tVo),e(dr,aVo),e(dr,KA),e(KA,nVo),e(KA,Fme),e(Fme,sVo),e(KA,lVo),e(dr,iVo),e(dr,tt),g(ZA,tt,null),e(tt,dVo),e(tt,Tme),e(Tme,cVo),e(tt,fVo),e(tt,Nd),e(Nd,mVo),e(Nd,Mme),e(Mme,gVo),e(Nd,hVo),e(Nd,TG),e(TG,pVo),e(Nd,_Vo),e(tt,uVo),e(tt,Eme),e(Eme,bVo),e(tt,vVo),g(e0,tt,null),e(dr,FVo),e(dr,Je),g(o0,Je,null),e(Je,TVo),e(Je,Cme),e(Cme,MVo),e(Je,EVo),e(Je,tn),e(tn,CVo),e(tn,wme),e(wme,wVo),e(tn,AVo),e(tn,Ame),e(Ame,yVo),e(tn,LVo),e(tn,yme),e(yme,xVo),e(tn,kVo),e(Je,SVo),e(Je,Se),e(Se,P2),e(P2,Lme),e(Lme,RVo),e(P2,BVo),e(P2,MG),e(MG,PVo),e(P2,$Vo),e(Se,IVo),e(Se,$2),e($2,xme),e(xme,qVo),e($2,NVo),e($2,EG),e(EG,jVo),e($2,DVo),e(Se,GVo),e(Se,I2),e(I2,kme),e(kme,OVo),e(I2,VVo),e(I2,CG),e(CG,XVo),e(I2,zVo),e(Se,QVo),e(Se,q2),e(q2,Sme),e(Sme,WVo),e(q2,HVo),e(q2,wG),e(wG,UVo),e(q2,JVo),e(Se,YVo),e(Se,N2),e(N2,Rme),e(Rme,KVo),e(N2,ZVo),e(N2,AG),e(AG,eXo),e(N2,oXo),e(Se,rXo),e(Se,j2),e(j2,Bme),e(Bme,tXo),e(j2,aXo),e(j2,yG),e(yG,nXo),e(j2,sXo),e(Se,lXo),e(Se,D2),e(D2,Pme),e(Pme,iXo),e(D2,dXo),e(D2,LG),e(LG,cXo),e(D2,fXo),e(Se,mXo),e(Se,G2),e(G2,$me),e($me,gXo),e(G2,hXo),e(G2,xG),e(xG,pXo),e(G2,_Xo),e(Je,uXo),e(Je,O2),e(O2,bXo),e(O2,Ime),e(Ime,vXo),e(O2,FXo),e(O2,qme),e(qme,TXo),e(Je,MXo),e(Je,Nme),e(Nme,EXo),e(Je,CXo),g(r0,Je,null),b(c,NBe,u),b(c,jd,u),e(jd,V2),e(V2,jme),g(t0,jme,null),e(jd,wXo),e(jd,Dme),e(Dme,AXo),b(c,jBe,u),b(c,cr,u),g(a0,cr,null),e(cr,yXo),e(cr,Dd),e(Dd,LXo),e(Dd,kG),e(kG,xXo),e(Dd,kXo),e(Dd,SG),e(SG,SXo),e(Dd,RXo),e(cr,BXo),e(cr,n0),e(n0,PXo),e(n0,Gme),e(Gme,$Xo),e(n0,IXo),e(cr,qXo),e(cr,at),g(s0,at,null),e(at,NXo),e(at,Ome),e(Ome,jXo),e(at,DXo),e(at,Gd),e(Gd,GXo),e(Gd,Vme),e(Vme,OXo),e(Gd,VXo),e(Gd,RG),e(RG,XXo),e(Gd,zXo),e(at,QXo),e(at,Xme),e(Xme,WXo),e(at,HXo),g(l0,at,null),e(cr,UXo),e(cr,Ye),g(i0,Ye,null),e(Ye,JXo),e(Ye,zme),e(zme,YXo),e(Ye,KXo),e(Ye,an),e(an,ZXo),e(an,Qme),e(Qme,ezo),e(an,ozo),e(an,Wme),e(Wme,rzo),e(an,tzo),e(an,Hme),e(Hme,azo),e(an,nzo),e(Ye,szo),e(Ye,nn),e(nn,X2),e(X2,Ume),e(Ume,lzo),e(X2,izo),e(X2,BG),e(BG,dzo),e(X2,czo),e(nn,fzo),e(nn,z2),e(z2,Jme),e(Jme,mzo),e(z2,gzo),e(z2,PG),e(PG,hzo),e(z2,pzo),e(nn,_zo),e(nn,Q2),e(Q2,Yme),e(Yme,uzo),e(Q2,bzo),e(Q2,$G),e($G,vzo),e(Q2,Fzo),e(nn,Tzo),e(nn,W2),e(W2,Kme),e(Kme,Mzo),e(W2,Ezo),e(W2,IG),e(IG,Czo),e(W2,wzo),e(Ye,Azo),e(Ye,H2),e(H2,yzo),e(H2,Zme),e(Zme,Lzo),e(H2,xzo),e(H2,ege),e(ege,kzo),e(Ye,Szo),e(Ye,oge),e(oge,Rzo),e(Ye,Bzo),g(d0,Ye,null),b(c,DBe,u),b(c,Od,u),e(Od,U2),e(U2,rge),g(c0,rge,null),e(Od,Pzo),e(Od,tge),e(tge,$zo),b(c,GBe,u),b(c,fr,u),g(f0,fr,null),e(fr,Izo),e(fr,Vd),e(Vd,qzo),e(Vd,qG),e(qG,Nzo),e(Vd,jzo),e(Vd,NG),e(NG,Dzo),e(Vd,Gzo),e(fr,Ozo),e(fr,m0),e(m0,Vzo),e(m0,age),e(age,Xzo),e(m0,zzo),e(fr,Qzo),e(fr,nt),g(g0,nt,null),e(nt,Wzo),e(nt,nge),e(nge,Hzo),e(nt,Uzo),e(nt,Xd),e(Xd,Jzo),e(Xd,sge),e(sge,Yzo),e(Xd,Kzo),e(Xd,jG),e(jG,Zzo),e(Xd,eQo),e(nt,oQo),e(nt,lge),e(lge,rQo),e(nt,tQo),g(h0,nt,null),e(fr,aQo),e(fr,Ke),g(p0,Ke,null),e(Ke,nQo),e(Ke,ige),e(ige,sQo),e(Ke,lQo),e(Ke,sn),e(sn,iQo),e(sn,dge),e(dge,dQo),e(sn,cQo),e(sn,cge),e(cge,fQo),e(sn,mQo),e(sn,fge),e(fge,gQo),e(sn,hQo),e(Ke,pQo),e(Ke,Re),e(Re,J2),e(J2,mge),e(mge,_Qo),e(J2,uQo),e(J2,DG),e(DG,bQo),e(J2,vQo),e(Re,FQo),e(Re,Y2),e(Y2,gge),e(gge,TQo),e(Y2,MQo),e(Y2,GG),e(GG,EQo),e(Y2,CQo),e(Re,wQo),e(Re,K2),e(K2,hge),e(hge,AQo),e(K2,yQo),e(K2,OG),e(OG,LQo),e(K2,xQo),e(Re,kQo),e(Re,Z2),e(Z2,pge),e(pge,SQo),e(Z2,RQo),e(Z2,VG),e(VG,BQo),e(Z2,PQo),e(Re,$Qo),e(Re,e5),e(e5,_ge),e(_ge,IQo),e(e5,qQo),e(e5,XG),e(XG,NQo),e(e5,jQo),e(Re,DQo),e(Re,o5),e(o5,uge),e(uge,GQo),e(o5,OQo),e(o5,zG),e(zG,VQo),e(o5,XQo),e(Re,zQo),e(Re,r5),e(r5,bge),e(bge,QQo),e(r5,WQo),e(r5,QG),e(QG,HQo),e(r5,UQo),e(Re,JQo),e(Re,t5),e(t5,vge),e(vge,YQo),e(t5,KQo),e(t5,WG),e(WG,ZQo),e(t5,eWo),e(Ke,oWo),e(Ke,a5),e(a5,rWo),e(a5,Fge),e(Fge,tWo),e(a5,aWo),e(a5,Tge),e(Tge,nWo),e(Ke,sWo),e(Ke,Mge),e(Mge,lWo),e(Ke,iWo),g(_0,Ke,null),b(c,OBe,u),b(c,zd,u),e(zd,n5),e(n5,Ege),g(u0,Ege,null),e(zd,dWo),e(zd,Cge),e(Cge,cWo),b(c,VBe,u),b(c,mr,u),g(b0,mr,null),e(mr,fWo),e(mr,Qd),e(Qd,mWo),e(Qd,HG),e(HG,gWo),e(Qd,hWo),e(Qd,UG),e(UG,pWo),e(Qd,_Wo),e(mr,uWo),e(mr,v0),e(v0,bWo),e(v0,wge),e(wge,vWo),e(v0,FWo),e(mr,TWo),e(mr,st),g(F0,st,null),e(st,MWo),e(st,Age),e(Age,EWo),e(st,CWo),e(st,Wd),e(Wd,wWo),e(Wd,yge),e(yge,AWo),e(Wd,yWo),e(Wd,JG),e(JG,LWo),e(Wd,xWo),e(st,kWo),e(st,Lge),e(Lge,SWo),e(st,RWo),g(T0,st,null),e(mr,BWo),e(mr,Ze),g(M0,Ze,null),e(Ze,PWo),e(Ze,xge),e(xge,$Wo),e(Ze,IWo),e(Ze,ln),e(ln,qWo),e(ln,kge),e(kge,NWo),e(ln,jWo),e(ln,Sge),e(Sge,DWo),e(ln,GWo),e(ln,Rge),e(Rge,OWo),e(ln,VWo),e(Ze,XWo),e(Ze,E0),e(E0,s5),e(s5,Bge),e(Bge,zWo),e(s5,QWo),e(s5,YG),e(YG,WWo),e(s5,HWo),e(E0,UWo),e(E0,l5),e(l5,Pge),e(Pge,JWo),e(l5,YWo),e(l5,KG),e(KG,KWo),e(l5,ZWo),e(Ze,eHo),e(Ze,i5),e(i5,oHo),e(i5,$ge),e($ge,rHo),e(i5,tHo),e(i5,Ige),e(Ige,aHo),e(Ze,nHo),e(Ze,qge),e(qge,sHo),e(Ze,lHo),g(C0,Ze,null),b(c,XBe,u),b(c,Hd,u),e(Hd,d5),e(d5,Nge),g(w0,Nge,null),e(Hd,iHo),e(Hd,jge),e(jge,dHo),b(c,zBe,u),b(c,gr,u),g(A0,gr,null),e(gr,cHo),e(gr,Ud),e(Ud,fHo),e(Ud,ZG),e(ZG,mHo),e(Ud,gHo),e(Ud,eO),e(eO,hHo),e(Ud,pHo),e(gr,_Ho),e(gr,y0),e(y0,uHo),e(y0,Dge),e(Dge,bHo),e(y0,vHo),e(gr,FHo),e(gr,lt),g(L0,lt,null),e(lt,THo),e(lt,Gge),e(Gge,MHo),e(lt,EHo),e(lt,Jd),e(Jd,CHo),e(Jd,Oge),e(Oge,wHo),e(Jd,AHo),e(Jd,oO),e(oO,yHo),e(Jd,LHo),e(lt,xHo),e(lt,Vge),e(Vge,kHo),e(lt,SHo),g(x0,lt,null),e(gr,RHo),e(gr,eo),g(k0,eo,null),e(eo,BHo),e(eo,Xge),e(Xge,PHo),e(eo,$Ho),e(eo,dn),e(dn,IHo),e(dn,zge),e(zge,qHo),e(dn,NHo),e(dn,Qge),e(Qge,jHo),e(dn,DHo),e(dn,Wge),e(Wge,GHo),e(dn,OHo),e(eo,VHo),e(eo,cn),e(cn,c5),e(c5,Hge),e(Hge,XHo),e(c5,zHo),e(c5,rO),e(rO,QHo),e(c5,WHo),e(cn,HHo),e(cn,f5),e(f5,Uge),e(Uge,UHo),e(f5,JHo),e(f5,tO),e(tO,YHo),e(f5,KHo),e(cn,ZHo),e(cn,m5),e(m5,Jge),e(Jge,eUo),e(m5,oUo),e(m5,aO),e(aO,rUo),e(m5,tUo),e(cn,aUo),e(cn,g5),e(g5,Yge),e(Yge,nUo),e(g5,sUo),e(g5,nO),e(nO,lUo),e(g5,iUo),e(eo,dUo),e(eo,h5),e(h5,cUo),e(h5,Kge),e(Kge,fUo),e(h5,mUo),e(h5,Zge),e(Zge,gUo),e(eo,hUo),e(eo,ehe),e(ehe,pUo),e(eo,_Uo),g(S0,eo,null),b(c,QBe,u),b(c,Yd,u),e(Yd,p5),e(p5,ohe),g(R0,ohe,null),e(Yd,uUo),e(Yd,rhe),e(rhe,bUo),b(c,WBe,u),b(c,hr,u),g(B0,hr,null),e(hr,vUo),e(hr,Kd),e(Kd,FUo),e(Kd,sO),e(sO,TUo),e(Kd,MUo),e(Kd,lO),e(lO,EUo),e(Kd,CUo),e(hr,wUo),e(hr,P0),e(P0,AUo),e(P0,the),e(the,yUo),e(P0,LUo),e(hr,xUo),e(hr,it),g($0,it,null),e(it,kUo),e(it,ahe),e(ahe,SUo),e(it,RUo),e(it,Zd),e(Zd,BUo),e(Zd,nhe),e(nhe,PUo),e(Zd,$Uo),e(Zd,iO),e(iO,IUo),e(Zd,qUo),e(it,NUo),e(it,she),e(she,jUo),e(it,DUo),g(I0,it,null),e(hr,GUo),e(hr,oo),g(q0,oo,null),e(oo,OUo),e(oo,lhe),e(lhe,VUo),e(oo,XUo),e(oo,fn),e(fn,zUo),e(fn,ihe),e(ihe,QUo),e(fn,WUo),e(fn,dhe),e(dhe,HUo),e(fn,UUo),e(fn,che),e(che,JUo),e(fn,YUo),e(oo,KUo),e(oo,ec),e(ec,_5),e(_5,fhe),e(fhe,ZUo),e(_5,eJo),e(_5,dO),e(dO,oJo),e(_5,rJo),e(ec,tJo),e(ec,u5),e(u5,mhe),e(mhe,aJo),e(u5,nJo),e(u5,cO),e(cO,sJo),e(u5,lJo),e(ec,iJo),e(ec,b5),e(b5,ghe),e(ghe,dJo),e(b5,cJo),e(b5,fO),e(fO,fJo),e(b5,mJo),e(oo,gJo),e(oo,v5),e(v5,hJo),e(v5,hhe),e(hhe,pJo),e(v5,_Jo),e(v5,phe),e(phe,uJo),e(oo,bJo),e(oo,_he),e(_he,vJo),e(oo,FJo),g(N0,oo,null),b(c,HBe,u),b(c,oc,u),e(oc,F5),e(F5,uhe),g(j0,uhe,null),e(oc,TJo),e(oc,bhe),e(bhe,MJo),b(c,UBe,u),b(c,pr,u),g(D0,pr,null),e(pr,EJo),e(pr,rc),e(rc,CJo),e(rc,mO),e(mO,wJo),e(rc,AJo),e(rc,gO),e(gO,yJo),e(rc,LJo),e(pr,xJo),e(pr,G0),e(G0,kJo),e(G0,vhe),e(vhe,SJo),e(G0,RJo),e(pr,BJo),e(pr,dt),g(O0,dt,null),e(dt,PJo),e(dt,Fhe),e(Fhe,$Jo),e(dt,IJo),e(dt,tc),e(tc,qJo),e(tc,The),e(The,NJo),e(tc,jJo),e(tc,hO),e(hO,DJo),e(tc,GJo),e(dt,OJo),e(dt,Mhe),e(Mhe,VJo),e(dt,XJo),g(V0,dt,null),e(pr,zJo),e(pr,ro),g(X0,ro,null),e(ro,QJo),e(ro,Ehe),e(Ehe,WJo),e(ro,HJo),e(ro,mn),e(mn,UJo),e(mn,Che),e(Che,JJo),e(mn,YJo),e(mn,whe),e(whe,KJo),e(mn,ZJo),e(mn,Ahe),e(Ahe,eYo),e(mn,oYo),e(ro,rYo),e(ro,yhe),e(yhe,T5),e(T5,Lhe),e(Lhe,tYo),e(T5,aYo),e(T5,pO),e(pO,nYo),e(T5,sYo),e(ro,lYo),e(ro,M5),e(M5,iYo),e(M5,xhe),e(xhe,dYo),e(M5,cYo),e(M5,khe),e(khe,fYo),e(ro,mYo),e(ro,She),e(She,gYo),e(ro,hYo),g(z0,ro,null),b(c,JBe,u),b(c,ac,u),e(ac,E5),e(E5,Rhe),g(Q0,Rhe,null),e(ac,pYo),e(ac,Bhe),e(Bhe,_Yo),b(c,YBe,u),b(c,_r,u),g(W0,_r,null),e(_r,uYo),e(_r,nc),e(nc,bYo),e(nc,_O),e(_O,vYo),e(nc,FYo),e(nc,uO),e(uO,TYo),e(nc,MYo),e(_r,EYo),e(_r,H0),e(H0,CYo),e(H0,Phe),e(Phe,wYo),e(H0,AYo),e(_r,yYo),e(_r,ct),g(U0,ct,null),e(ct,LYo),e(ct,$he),e($he,xYo),e(ct,kYo),e(ct,sc),e(sc,SYo),e(sc,Ihe),e(Ihe,RYo),e(sc,BYo),e(sc,bO),e(bO,PYo),e(sc,$Yo),e(ct,IYo),e(ct,qhe),e(qhe,qYo),e(ct,NYo),g(J0,ct,null),e(_r,jYo),e(_r,to),g(Y0,to,null),e(to,DYo),e(to,Nhe),e(Nhe,GYo),e(to,OYo),e(to,gn),e(gn,VYo),e(gn,jhe),e(jhe,XYo),e(gn,zYo),e(gn,Dhe),e(Dhe,QYo),e(gn,WYo),e(gn,Ghe),e(Ghe,HYo),e(gn,UYo),e(to,JYo),e(to,Ohe),e(Ohe,C5),e(C5,Vhe),e(Vhe,YYo),e(C5,KYo),e(C5,vO),e(vO,ZYo),e(C5,eKo),e(to,oKo),e(to,w5),e(w5,rKo),e(w5,Xhe),e(Xhe,tKo),e(w5,aKo),e(w5,zhe),e(zhe,nKo),e(to,sKo),e(to,Qhe),e(Qhe,lKo),e(to,iKo),g(K0,to,null),b(c,KBe,u),b(c,lc,u),e(lc,A5),e(A5,Whe),g(Z0,Whe,null),e(lc,dKo),e(lc,Hhe),e(Hhe,cKo),b(c,ZBe,u),b(c,ur,u),g(ey,ur,null),e(ur,fKo),e(ur,ic),e(ic,mKo),e(ic,FO),e(FO,gKo),e(ic,hKo),e(ic,TO),e(TO,pKo),e(ic,_Ko),e(ur,uKo),e(ur,oy),e(oy,bKo),e(oy,Uhe),e(Uhe,vKo),e(oy,FKo),e(ur,TKo),e(ur,ft),g(ry,ft,null),e(ft,MKo),e(ft,Jhe),e(Jhe,EKo),e(ft,CKo),e(ft,dc),e(dc,wKo),e(dc,Yhe),e(Yhe,AKo),e(dc,yKo),e(dc,MO),e(MO,LKo),e(dc,xKo),e(ft,kKo),e(ft,Khe),e(Khe,SKo),e(ft,RKo),g(ty,ft,null),e(ur,BKo),e(ur,ao),g(ay,ao,null),e(ao,PKo),e(ao,Zhe),e(Zhe,$Ko),e(ao,IKo),e(ao,hn),e(hn,qKo),e(hn,epe),e(epe,NKo),e(hn,jKo),e(hn,ope),e(ope,DKo),e(hn,GKo),e(hn,rpe),e(rpe,OKo),e(hn,VKo),e(ao,XKo),e(ao,pn),e(pn,y5),e(y5,tpe),e(tpe,zKo),e(y5,QKo),e(y5,EO),e(EO,WKo),e(y5,HKo),e(pn,UKo),e(pn,L5),e(L5,ape),e(ape,JKo),e(L5,YKo),e(L5,CO),e(CO,KKo),e(L5,ZKo),e(pn,eZo),e(pn,x5),e(x5,npe),e(npe,oZo),e(x5,rZo),e(x5,wO),e(wO,tZo),e(x5,aZo),e(pn,nZo),e(pn,k5),e(k5,spe),e(spe,sZo),e(k5,lZo),e(k5,AO),e(AO,iZo),e(k5,dZo),e(ao,cZo),e(ao,S5),e(S5,fZo),e(S5,lpe),e(lpe,mZo),e(S5,gZo),e(S5,ipe),e(ipe,hZo),e(ao,pZo),e(ao,dpe),e(dpe,_Zo),e(ao,uZo),g(ny,ao,null),b(c,ePe,u),b(c,cc,u),e(cc,R5),e(R5,cpe),g(sy,cpe,null),e(cc,bZo),e(cc,fpe),e(fpe,vZo),b(c,oPe,u),b(c,br,u),g(ly,br,null),e(br,FZo),e(br,fc),e(fc,TZo),e(fc,yO),e(yO,MZo),e(fc,EZo),e(fc,LO),e(LO,CZo),e(fc,wZo),e(br,AZo),e(br,iy),e(iy,yZo),e(iy,mpe),e(mpe,LZo),e(iy,xZo),e(br,kZo),e(br,mt),g(dy,mt,null),e(mt,SZo),e(mt,gpe),e(gpe,RZo),e(mt,BZo),e(mt,mc),e(mc,PZo),e(mc,hpe),e(hpe,$Zo),e(mc,IZo),e(mc,xO),e(xO,qZo),e(mc,NZo),e(mt,jZo),e(mt,ppe),e(ppe,DZo),e(mt,GZo),g(cy,mt,null),e(br,OZo),e(br,no),g(fy,no,null),e(no,VZo),e(no,_pe),e(_pe,XZo),e(no,zZo),e(no,_n),e(_n,QZo),e(_n,upe),e(upe,WZo),e(_n,HZo),e(_n,bpe),e(bpe,UZo),e(_n,JZo),e(_n,vpe),e(vpe,YZo),e(_n,KZo),e(no,ZZo),e(no,Fpe),e(Fpe,B5),e(B5,Tpe),e(Tpe,eer),e(B5,oer),e(B5,kO),e(kO,rer),e(B5,ter),e(no,aer),e(no,P5),e(P5,ner),e(P5,Mpe),e(Mpe,ser),e(P5,ler),e(P5,Epe),e(Epe,ier),e(no,der),e(no,Cpe),e(Cpe,cer),e(no,fer),g(my,no,null),b(c,rPe,u),b(c,gc,u),e(gc,$5),e($5,wpe),g(gy,wpe,null),e(gc,mer),e(gc,Ape),e(Ape,ger),b(c,tPe,u),b(c,vr,u),g(hy,vr,null),e(vr,her),e(vr,hc),e(hc,per),e(hc,SO),e(SO,_er),e(hc,uer),e(hc,RO),e(RO,ber),e(hc,ver),e(vr,Fer),e(vr,py),e(py,Ter),e(py,ype),e(ype,Mer),e(py,Eer),e(vr,Cer),e(vr,gt),g(_y,gt,null),e(gt,wer),e(gt,Lpe),e(Lpe,Aer),e(gt,yer),e(gt,pc),e(pc,Ler),e(pc,xpe),e(xpe,xer),e(pc,ker),e(pc,BO),e(BO,Ser),e(pc,Rer),e(gt,Ber),e(gt,kpe),e(kpe,Per),e(gt,$er),g(uy,gt,null),e(vr,Ier),e(vr,po),g(by,po,null),e(po,qer),e(po,Spe),e(Spe,Ner),e(po,jer),e(po,un),e(un,Der),e(un,Rpe),e(Rpe,Ger),e(un,Oer),e(un,Bpe),e(Bpe,Ver),e(un,Xer),e(un,Ppe),e(Ppe,zer),e(un,Qer),e(po,Wer),e(po,x),e(x,I5),e(I5,$pe),e($pe,Her),e(I5,Uer),e(I5,PO),e(PO,Jer),e(I5,Yer),e(x,Ker),e(x,q5),e(q5,Ipe),e(Ipe,Zer),e(q5,eor),e(q5,$O),e($O,oor),e(q5,ror),e(x,tor),e(x,N5),e(N5,qpe),e(qpe,aor),e(N5,nor),e(N5,IO),e(IO,sor),e(N5,lor),e(x,ior),e(x,j5),e(j5,Npe),e(Npe,dor),e(j5,cor),e(j5,qO),e(qO,mor),e(j5,gor),e(x,hor),e(x,D5),e(D5,jpe),e(jpe,por),e(D5,_or),e(D5,NO),e(NO,uor),e(D5,bor),e(x,vor),e(x,G5),e(G5,Dpe),e(Dpe,For),e(G5,Tor),e(G5,jO),e(jO,Mor),e(G5,Eor),e(x,Cor),e(x,O5),e(O5,Gpe),e(Gpe,wor),e(O5,Aor),e(O5,DO),e(DO,yor),e(O5,Lor),e(x,xor),e(x,V5),e(V5,Ope),e(Ope,kor),e(V5,Sor),e(V5,GO),e(GO,Ror),e(V5,Bor),e(x,Por),e(x,X5),e(X5,Vpe),e(Vpe,$or),e(X5,Ior),e(X5,OO),e(OO,qor),e(X5,Nor),e(x,jor),e(x,z5),e(z5,Xpe),e(Xpe,Dor),e(z5,Gor),e(z5,VO),e(VO,Oor),e(z5,Vor),e(x,Xor),e(x,Q5),e(Q5,zpe),e(zpe,zor),e(Q5,Qor),e(Q5,XO),e(XO,Wor),e(Q5,Hor),e(x,Uor),e(x,W5),e(W5,Qpe),e(Qpe,Jor),e(W5,Yor),e(W5,zO),e(zO,Kor),e(W5,Zor),e(x,err),e(x,H5),e(H5,Wpe),e(Wpe,orr),e(H5,rrr),e(H5,QO),e(QO,trr),e(H5,arr),e(x,nrr),e(x,U5),e(U5,Hpe),e(Hpe,srr),e(U5,lrr),e(U5,WO),e(WO,irr),e(U5,drr),e(x,crr),e(x,J5),e(J5,Upe),e(Upe,frr),e(J5,mrr),e(J5,HO),e(HO,grr),e(J5,hrr),e(x,prr),e(x,Y5),e(Y5,Jpe),e(Jpe,_rr),e(Y5,urr),e(Y5,UO),e(UO,brr),e(Y5,vrr),e(x,Frr),e(x,Os),e(Os,Ype),e(Ype,Trr),e(Os,Mrr),e(Os,JO),e(JO,Err),e(Os,Crr),e(Os,YO),e(YO,wrr),e(Os,Arr),e(x,yrr),e(x,K5),e(K5,Kpe),e(Kpe,Lrr),e(K5,xrr),e(K5,KO),e(KO,krr),e(K5,Srr),e(x,Rrr),e(x,Z5),e(Z5,Zpe),e(Zpe,Brr),e(Z5,Prr),e(Z5,ZO),e(ZO,$rr),e(Z5,Irr),e(x,qrr),e(x,ev),e(ev,e_e),e(e_e,Nrr),e(ev,jrr),e(ev,eV),e(eV,Drr),e(ev,Grr),e(x,Orr),e(x,ov),e(ov,o_e),e(o_e,Vrr),e(ov,Xrr),e(ov,oV),e(oV,zrr),e(ov,Qrr),e(x,Wrr),e(x,rv),e(rv,r_e),e(r_e,Hrr),e(rv,Urr),e(rv,rV),e(rV,Jrr),e(rv,Yrr),e(x,Krr),e(x,tv),e(tv,t_e),e(t_e,Zrr),e(tv,etr),e(tv,tV),e(tV,otr),e(tv,rtr),e(x,ttr),e(x,av),e(av,a_e),e(a_e,atr),e(av,ntr),e(av,aV),e(aV,str),e(av,ltr),e(x,itr),e(x,nv),e(nv,n_e),e(n_e,dtr),e(nv,ctr),e(nv,nV),e(nV,ftr),e(nv,mtr),e(x,gtr),e(x,sv),e(sv,s_e),e(s_e,htr),e(sv,ptr),e(sv,sV),e(sV,_tr),e(sv,utr),e(x,btr),e(x,lv),e(lv,l_e),e(l_e,vtr),e(lv,Ftr),e(lv,lV),e(lV,Ttr),e(lv,Mtr),e(x,Etr),e(x,iv),e(iv,i_e),e(i_e,Ctr),e(iv,wtr),e(iv,iV),e(iV,Atr),e(iv,ytr),e(x,Ltr),e(x,dv),e(dv,d_e),e(d_e,xtr),e(dv,ktr),e(dv,dV),e(dV,Str),e(dv,Rtr),e(x,Btr),e(x,cv),e(cv,c_e),e(c_e,Ptr),e(cv,$tr),e(cv,cV),e(cV,Itr),e(cv,qtr),e(x,Ntr),e(x,fv),e(fv,f_e),e(f_e,jtr),e(fv,Dtr),e(fv,fV),e(fV,Gtr),e(fv,Otr),e(x,Vtr),e(x,mv),e(mv,m_e),e(m_e,Xtr),e(mv,ztr),e(mv,mV),e(mV,Qtr),e(mv,Wtr),e(x,Htr),e(x,gv),e(gv,g_e),e(g_e,Utr),e(gv,Jtr),e(gv,gV),e(gV,Ytr),e(gv,Ktr),e(x,Ztr),e(x,hv),e(hv,h_e),e(h_e,ear),e(hv,oar),e(hv,hV),e(hV,rar),e(hv,tar),e(x,aar),e(x,pv),e(pv,p_e),e(p_e,nar),e(pv,sar),e(pv,pV),e(pV,lar),e(pv,iar),e(x,dar),e(x,_v),e(_v,__e),e(__e,car),e(_v,far),e(_v,_V),e(_V,mar),e(_v,gar),e(x,har),e(x,uv),e(uv,u_e),e(u_e,par),e(uv,_ar),e(uv,uV),e(uV,uar),e(uv,bar),e(x,Far),e(x,bv),e(bv,b_e),e(b_e,Tar),e(bv,Mar),e(bv,bV),e(bV,Ear),e(bv,Car),e(x,war),e(x,vv),e(vv,v_e),e(v_e,Aar),e(vv,yar),e(vv,vV),e(vV,Lar),e(vv,xar),e(x,kar),e(x,Fv),e(Fv,F_e),e(F_e,Sar),e(Fv,Rar),e(Fv,FV),e(FV,Bar),e(Fv,Par),e(x,$ar),e(x,Tv),e(Tv,T_e),e(T_e,Iar),e(Tv,qar),e(Tv,TV),e(TV,Nar),e(Tv,jar),e(x,Dar),e(x,Mv),e(Mv,M_e),e(M_e,Gar),e(Mv,Oar),e(Mv,MV),e(MV,Var),e(Mv,Xar),e(x,zar),e(x,Ev),e(Ev,E_e),e(E_e,Qar),e(Ev,War),e(Ev,EV),e(EV,Har),e(Ev,Uar),e(x,Jar),e(x,Cv),e(Cv,C_e),e(C_e,Yar),e(Cv,Kar),e(Cv,CV),e(CV,Zar),e(Cv,enr),e(po,onr),e(po,w_e),e(w_e,rnr),e(po,tnr),g(vy,po,null),b(c,aPe,u),b(c,_c,u),e(_c,wv),e(wv,A_e),g(Fy,A_e,null),e(_c,anr),e(_c,y_e),e(y_e,nnr),b(c,nPe,u),b(c,Fr,u),g(Ty,Fr,null),e(Fr,snr),e(Fr,uc),e(uc,lnr),e(uc,wV),e(wV,inr),e(uc,dnr),e(uc,AV),e(AV,cnr),e(uc,fnr),e(Fr,mnr),e(Fr,My),e(My,gnr),e(My,L_e),e(L_e,hnr),e(My,pnr),e(Fr,_nr),e(Fr,ht),g(Ey,ht,null),e(ht,unr),e(ht,x_e),e(x_e,bnr),e(ht,vnr),e(ht,bc),e(bc,Fnr),e(bc,k_e),e(k_e,Tnr),e(bc,Mnr),e(bc,yV),e(yV,Enr),e(bc,Cnr),e(ht,wnr),e(ht,S_e),e(S_e,Anr),e(ht,ynr),g(Cy,ht,null),e(Fr,Lnr),e(Fr,_o),g(wy,_o,null),e(_o,xnr),e(_o,R_e),e(R_e,knr),e(_o,Snr),e(_o,bn),e(bn,Rnr),e(bn,B_e),e(B_e,Bnr),e(bn,Pnr),e(bn,P_e),e(P_e,$nr),e(bn,Inr),e(bn,$_e),e($_e,qnr),e(bn,Nnr),e(_o,jnr),e(_o,H),e(H,Av),e(Av,I_e),e(I_e,Dnr),e(Av,Gnr),e(Av,LV),e(LV,Onr),e(Av,Vnr),e(H,Xnr),e(H,yv),e(yv,q_e),e(q_e,znr),e(yv,Qnr),e(yv,xV),e(xV,Wnr),e(yv,Hnr),e(H,Unr),e(H,Lv),e(Lv,N_e),e(N_e,Jnr),e(Lv,Ynr),e(Lv,kV),e(kV,Knr),e(Lv,Znr),e(H,esr),e(H,xv),e(xv,j_e),e(j_e,osr),e(xv,rsr),e(xv,SV),e(SV,tsr),e(xv,asr),e(H,nsr),e(H,kv),e(kv,D_e),e(D_e,ssr),e(kv,lsr),e(kv,RV),e(RV,isr),e(kv,dsr),e(H,csr),e(H,Sv),e(Sv,G_e),e(G_e,fsr),e(Sv,msr),e(Sv,BV),e(BV,gsr),e(Sv,hsr),e(H,psr),e(H,Rv),e(Rv,O_e),e(O_e,_sr),e(Rv,usr),e(Rv,PV),e(PV,bsr),e(Rv,vsr),e(H,Fsr),e(H,Bv),e(Bv,V_e),e(V_e,Tsr),e(Bv,Msr),e(Bv,$V),e($V,Esr),e(Bv,Csr),e(H,wsr),e(H,Pv),e(Pv,X_e),e(X_e,Asr),e(Pv,ysr),e(Pv,IV),e(IV,Lsr),e(Pv,xsr),e(H,ksr),e(H,$v),e($v,z_e),e(z_e,Ssr),e($v,Rsr),e($v,qV),e(qV,Bsr),e($v,Psr),e(H,$sr),e(H,Iv),e(Iv,Q_e),e(Q_e,Isr),e(Iv,qsr),e(Iv,NV),e(NV,Nsr),e(Iv,jsr),e(H,Dsr),e(H,qv),e(qv,W_e),e(W_e,Gsr),e(qv,Osr),e(qv,jV),e(jV,Vsr),e(qv,Xsr),e(H,zsr),e(H,Nv),e(Nv,H_e),e(H_e,Qsr),e(Nv,Wsr),e(Nv,DV),e(DV,Hsr),e(Nv,Usr),e(H,Jsr),e(H,jv),e(jv,U_e),e(U_e,Ysr),e(jv,Ksr),e(jv,GV),e(GV,Zsr),e(jv,elr),e(H,olr),e(H,Dv),e(Dv,J_e),e(J_e,rlr),e(Dv,tlr),e(Dv,OV),e(OV,alr),e(Dv,nlr),e(H,slr),e(H,Gv),e(Gv,Y_e),e(Y_e,llr),e(Gv,ilr),e(Gv,VV),e(VV,dlr),e(Gv,clr),e(H,flr),e(H,Ov),e(Ov,K_e),e(K_e,mlr),e(Ov,glr),e(Ov,XV),e(XV,hlr),e(Ov,plr),e(H,_lr),e(H,Vv),e(Vv,Z_e),e(Z_e,ulr),e(Vv,blr),e(Vv,zV),e(zV,vlr),e(Vv,Flr),e(H,Tlr),e(H,Xv),e(Xv,eue),e(eue,Mlr),e(Xv,Elr),e(Xv,QV),e(QV,Clr),e(Xv,wlr),e(H,Alr),e(H,zv),e(zv,oue),e(oue,ylr),e(zv,Llr),e(zv,WV),e(WV,xlr),e(zv,klr),e(H,Slr),e(H,Qv),e(Qv,rue),e(rue,Rlr),e(Qv,Blr),e(Qv,HV),e(HV,Plr),e(Qv,$lr),e(H,Ilr),e(H,Wv),e(Wv,tue),e(tue,qlr),e(Wv,Nlr),e(Wv,UV),e(UV,jlr),e(Wv,Dlr),e(H,Glr),e(H,Hv),e(Hv,aue),e(aue,Olr),e(Hv,Vlr),e(Hv,JV),e(JV,Xlr),e(Hv,zlr),e(_o,Qlr),e(_o,nue),e(nue,Wlr),e(_o,Hlr),g(Ay,_o,null),b(c,sPe,u),b(c,vc,u),e(vc,Uv),e(Uv,sue),g(yy,sue,null),e(vc,Ulr),e(vc,lue),e(lue,Jlr),b(c,lPe,u),b(c,Tr,u),g(Ly,Tr,null),e(Tr,Ylr),e(Tr,Fc),e(Fc,Klr),e(Fc,YV),e(YV,Zlr),e(Fc,eir),e(Fc,KV),e(KV,oir),e(Fc,rir),e(Tr,tir),e(Tr,xy),e(xy,air),e(xy,iue),e(iue,nir),e(xy,sir),e(Tr,lir),e(Tr,pt),g(ky,pt,null),e(pt,iir),e(pt,due),e(due,dir),e(pt,cir),e(pt,Tc),e(Tc,fir),e(Tc,cue),e(cue,mir),e(Tc,gir),e(Tc,ZV),e(ZV,hir),e(Tc,pir),e(pt,_ir),e(pt,fue),e(fue,uir),e(pt,bir),g(Sy,pt,null),e(Tr,vir),e(Tr,uo),g(Ry,uo,null),e(uo,Fir),e(uo,mue),e(mue,Tir),e(uo,Mir),e(uo,vn),e(vn,Eir),e(vn,gue),e(gue,Cir),e(vn,wir),e(vn,hue),e(hue,Air),e(vn,yir),e(vn,pue),e(pue,Lir),e(vn,xir),e(uo,kir),e(uo,fe),e(fe,Jv),e(Jv,_ue),e(_ue,Sir),e(Jv,Rir),e(Jv,eX),e(eX,Bir),e(Jv,Pir),e(fe,$ir),e(fe,Yv),e(Yv,uue),e(uue,Iir),e(Yv,qir),e(Yv,oX),e(oX,Nir),e(Yv,jir),e(fe,Dir),e(fe,Kv),e(Kv,bue),e(bue,Gir),e(Kv,Oir),e(Kv,rX),e(rX,Vir),e(Kv,Xir),e(fe,zir),e(fe,Zv),e(Zv,vue),e(vue,Qir),e(Zv,Wir),e(Zv,tX),e(tX,Hir),e(Zv,Uir),e(fe,Jir),e(fe,eF),e(eF,Fue),e(Fue,Yir),e(eF,Kir),e(eF,aX),e(aX,Zir),e(eF,edr),e(fe,odr),e(fe,oF),e(oF,Tue),e(Tue,rdr),e(oF,tdr),e(oF,nX),e(nX,adr),e(oF,ndr),e(fe,sdr),e(fe,rF),e(rF,Mue),e(Mue,ldr),e(rF,idr),e(rF,sX),e(sX,ddr),e(rF,cdr),e(fe,fdr),e(fe,tF),e(tF,Eue),e(Eue,mdr),e(tF,gdr),e(tF,lX),e(lX,hdr),e(tF,pdr),e(fe,_dr),e(fe,aF),e(aF,Cue),e(Cue,udr),e(aF,bdr),e(aF,iX),e(iX,vdr),e(aF,Fdr),e(fe,Tdr),e(fe,nF),e(nF,wue),e(wue,Mdr),e(nF,Edr),e(nF,dX),e(dX,Cdr),e(nF,wdr),e(fe,Adr),e(fe,sF),e(sF,Aue),e(Aue,ydr),e(sF,Ldr),e(sF,cX),e(cX,xdr),e(sF,kdr),e(fe,Sdr),e(fe,lF),e(lF,yue),e(yue,Rdr),e(lF,Bdr),e(lF,fX),e(fX,Pdr),e(lF,$dr),e(uo,Idr),e(uo,Lue),e(Lue,qdr),e(uo,Ndr),g(By,uo,null),b(c,iPe,u),b(c,Mc,u),e(Mc,iF),e(iF,xue),g(Py,xue,null),e(Mc,jdr),e(Mc,kue),e(kue,Ddr),b(c,dPe,u),b(c,Mr,u),g($y,Mr,null),e(Mr,Gdr),e(Mr,Ec),e(Ec,Odr),e(Ec,mX),e(mX,Vdr),e(Ec,Xdr),e(Ec,gX),e(gX,zdr),e(Ec,Qdr),e(Mr,Wdr),e(Mr,Iy),e(Iy,Hdr),e(Iy,Sue),e(Sue,Udr),e(Iy,Jdr),e(Mr,Ydr),e(Mr,_t),g(qy,_t,null),e(_t,Kdr),e(_t,Rue),e(Rue,Zdr),e(_t,ecr),e(_t,Cc),e(Cc,ocr),e(Cc,Bue),e(Bue,rcr),e(Cc,tcr),e(Cc,hX),e(hX,acr),e(Cc,ncr),e(_t,scr),e(_t,Pue),e(Pue,lcr),e(_t,icr),g(Ny,_t,null),e(Mr,dcr),e(Mr,bo),g(jy,bo,null),e(bo,ccr),e(bo,$ue),e($ue,fcr),e(bo,mcr),e(bo,Fn),e(Fn,gcr),e(Fn,Iue),e(Iue,hcr),e(Fn,pcr),e(Fn,que),e(que,_cr),e(Fn,ucr),e(Fn,Nue),e(Nue,bcr),e(Fn,vcr),e(bo,Fcr),e(bo,Dy),e(Dy,dF),e(dF,jue),e(jue,Tcr),e(dF,Mcr),e(dF,pX),e(pX,Ecr),e(dF,Ccr),e(Dy,wcr),e(Dy,cF),e(cF,Due),e(Due,Acr),e(cF,ycr),e(cF,_X),e(_X,Lcr),e(cF,xcr),e(bo,kcr),e(bo,Gue),e(Gue,Scr),e(bo,Rcr),g(Gy,bo,null),b(c,cPe,u),b(c,wc,u),e(wc,fF),e(fF,Oue),g(Oy,Oue,null),e(wc,Bcr),e(wc,Vue),e(Vue,Pcr),b(c,fPe,u),b(c,Er,u),g(Vy,Er,null),e(Er,$cr),e(Er,Ac),e(Ac,Icr),e(Ac,uX),e(uX,qcr),e(Ac,Ncr),e(Ac,bX),e(bX,jcr),e(Ac,Dcr),e(Er,Gcr),e(Er,Xy),e(Xy,Ocr),e(Xy,Xue),e(Xue,Vcr),e(Xy,Xcr),e(Er,zcr),e(Er,ut),g(zy,ut,null),e(ut,Qcr),e(ut,zue),e(zue,Wcr),e(ut,Hcr),e(ut,yc),e(yc,Ucr),e(yc,Que),e(Que,Jcr),e(yc,Ycr),e(yc,vX),e(vX,Kcr),e(yc,Zcr),e(ut,efr),e(ut,Wue),e(Wue,ofr),e(ut,rfr),g(Qy,ut,null),e(Er,tfr),e(Er,vo),g(Wy,vo,null),e(vo,afr),e(vo,Hue),e(Hue,nfr),e(vo,sfr),e(vo,Tn),e(Tn,lfr),e(Tn,Uue),e(Uue,ifr),e(Tn,dfr),e(Tn,Jue),e(Jue,cfr),e(Tn,ffr),e(Tn,Yue),e(Yue,mfr),e(Tn,gfr),e(vo,hfr),e(vo,Y),e(Y,mF),e(mF,Kue),e(Kue,pfr),e(mF,_fr),e(mF,FX),e(FX,ufr),e(mF,bfr),e(Y,vfr),e(Y,gF),e(gF,Zue),e(Zue,Ffr),e(gF,Tfr),e(gF,TX),e(TX,Mfr),e(gF,Efr),e(Y,Cfr),e(Y,hF),e(hF,e6e),e(e6e,wfr),e(hF,Afr),e(hF,MX),e(MX,yfr),e(hF,Lfr),e(Y,xfr),e(Y,pF),e(pF,o6e),e(o6e,kfr),e(pF,Sfr),e(pF,EX),e(EX,Rfr),e(pF,Bfr),e(Y,Pfr),e(Y,_F),e(_F,r6e),e(r6e,$fr),e(_F,Ifr),e(_F,CX),e(CX,qfr),e(_F,Nfr),e(Y,jfr),e(Y,uF),e(uF,t6e),e(t6e,Dfr),e(uF,Gfr),e(uF,wX),e(wX,Ofr),e(uF,Vfr),e(Y,Xfr),e(Y,bF),e(bF,a6e),e(a6e,zfr),e(bF,Qfr),e(bF,AX),e(AX,Wfr),e(bF,Hfr),e(Y,Ufr),e(Y,vF),e(vF,n6e),e(n6e,Jfr),e(vF,Yfr),e(vF,yX),e(yX,Kfr),e(vF,Zfr),e(Y,emr),e(Y,FF),e(FF,s6e),e(s6e,omr),e(FF,rmr),e(FF,LX),e(LX,tmr),e(FF,amr),e(Y,nmr),e(Y,TF),e(TF,l6e),e(l6e,smr),e(TF,lmr),e(TF,xX),e(xX,imr),e(TF,dmr),e(Y,cmr),e(Y,MF),e(MF,i6e),e(i6e,fmr),e(MF,mmr),e(MF,kX),e(kX,gmr),e(MF,hmr),e(Y,pmr),e(Y,EF),e(EF,d6e),e(d6e,_mr),e(EF,umr),e(EF,SX),e(SX,bmr),e(EF,vmr),e(Y,Fmr),e(Y,CF),e(CF,c6e),e(c6e,Tmr),e(CF,Mmr),e(CF,RX),e(RX,Emr),e(CF,Cmr),e(Y,wmr),e(Y,wF),e(wF,f6e),e(f6e,Amr),e(wF,ymr),e(wF,BX),e(BX,Lmr),e(wF,xmr),e(Y,kmr),e(Y,AF),e(AF,m6e),e(m6e,Smr),e(AF,Rmr),e(AF,PX),e(PX,Bmr),e(AF,Pmr),e(Y,$mr),e(Y,yF),e(yF,g6e),e(g6e,Imr),e(yF,qmr),e(yF,$X),e($X,Nmr),e(yF,jmr),e(Y,Dmr),e(Y,LF),e(LF,h6e),e(h6e,Gmr),e(LF,Omr),e(LF,IX),e(IX,Vmr),e(LF,Xmr),e(Y,zmr),e(Y,xF),e(xF,p6e),e(p6e,Qmr),e(xF,Wmr),e(xF,qX),e(qX,Hmr),e(xF,Umr),e(Y,Jmr),e(Y,kF),e(kF,_6e),e(_6e,Ymr),e(kF,Kmr),e(kF,NX),e(NX,Zmr),e(kF,egr),e(Y,ogr),e(Y,SF),e(SF,u6e),e(u6e,rgr),e(SF,tgr),e(SF,jX),e(jX,agr),e(SF,ngr),e(vo,sgr),e(vo,b6e),e(b6e,lgr),e(vo,igr),g(Hy,vo,null),b(c,mPe,u),b(c,Lc,u),e(Lc,RF),e(RF,v6e),g(Uy,v6e,null),e(Lc,dgr),e(Lc,F6e),e(F6e,cgr),b(c,gPe,u),b(c,Cr,u),g(Jy,Cr,null),e(Cr,fgr),e(Cr,xc),e(xc,mgr),e(xc,DX),e(DX,ggr),e(xc,hgr),e(xc,GX),e(GX,pgr),e(xc,_gr),e(Cr,ugr),e(Cr,Yy),e(Yy,bgr),e(Yy,T6e),e(T6e,vgr),e(Yy,Fgr),e(Cr,Tgr),e(Cr,bt),g(Ky,bt,null),e(bt,Mgr),e(bt,M6e),e(M6e,Egr),e(bt,Cgr),e(bt,kc),e(kc,wgr),e(kc,E6e),e(E6e,Agr),e(kc,ygr),e(kc,OX),e(OX,Lgr),e(kc,xgr),e(bt,kgr),e(bt,C6e),e(C6e,Sgr),e(bt,Rgr),g(Zy,bt,null),e(Cr,Bgr),e(Cr,Fo),g(eL,Fo,null),e(Fo,Pgr),e(Fo,w6e),e(w6e,$gr),e(Fo,Igr),e(Fo,Mn),e(Mn,qgr),e(Mn,A6e),e(A6e,Ngr),e(Mn,jgr),e(Mn,y6e),e(y6e,Dgr),e(Mn,Ggr),e(Mn,L6e),e(L6e,Ogr),e(Mn,Vgr),e(Fo,Xgr),e(Fo,be),e(be,BF),e(BF,x6e),e(x6e,zgr),e(BF,Qgr),e(BF,VX),e(VX,Wgr),e(BF,Hgr),e(be,Ugr),e(be,PF),e(PF,k6e),e(k6e,Jgr),e(PF,Ygr),e(PF,XX),e(XX,Kgr),e(PF,Zgr),e(be,ehr),e(be,$F),e($F,S6e),e(S6e,ohr),e($F,rhr),e($F,zX),e(zX,thr),e($F,ahr),e(be,nhr),e(be,IF),e(IF,R6e),e(R6e,shr),e(IF,lhr),e(IF,QX),e(QX,ihr),e(IF,dhr),e(be,chr),e(be,qF),e(qF,B6e),e(B6e,fhr),e(qF,mhr),e(qF,WX),e(WX,ghr),e(qF,hhr),e(be,phr),e(be,NF),e(NF,P6e),e(P6e,_hr),e(NF,uhr),e(NF,HX),e(HX,bhr),e(NF,vhr),e(be,Fhr),e(be,jF),e(jF,$6e),e($6e,Thr),e(jF,Mhr),e(jF,UX),e(UX,Ehr),e(jF,Chr),e(be,whr),e(be,DF),e(DF,I6e),e(I6e,Ahr),e(DF,yhr),e(DF,JX),e(JX,Lhr),e(DF,xhr),e(be,khr),e(be,GF),e(GF,q6e),e(q6e,Shr),e(GF,Rhr),e(GF,YX),e(YX,Bhr),e(GF,Phr),e(be,$hr),e(be,OF),e(OF,N6e),e(N6e,Ihr),e(OF,qhr),e(OF,KX),e(KX,Nhr),e(OF,jhr),e(Fo,Dhr),e(Fo,j6e),e(j6e,Ghr),e(Fo,Ohr),g(oL,Fo,null),b(c,hPe,u),b(c,Sc,u),e(Sc,VF),e(VF,D6e),g(rL,D6e,null),e(Sc,Vhr),e(Sc,G6e),e(G6e,Xhr),b(c,pPe,u),b(c,wr,u),g(tL,wr,null),e(wr,zhr),e(wr,Rc),e(Rc,Qhr),e(Rc,ZX),e(ZX,Whr),e(Rc,Hhr),e(Rc,ez),e(ez,Uhr),e(Rc,Jhr),e(wr,Yhr),e(wr,aL),e(aL,Khr),e(aL,O6e),e(O6e,Zhr),e(aL,epr),e(wr,opr),e(wr,vt),g(nL,vt,null),e(vt,rpr),e(vt,V6e),e(V6e,tpr),e(vt,apr),e(vt,Bc),e(Bc,npr),e(Bc,X6e),e(X6e,spr),e(Bc,lpr),e(Bc,oz),e(oz,ipr),e(Bc,dpr),e(vt,cpr),e(vt,z6e),e(z6e,fpr),e(vt,mpr),g(sL,vt,null),e(wr,gpr),e(wr,To),g(lL,To,null),e(To,hpr),e(To,Q6e),e(Q6e,ppr),e(To,_pr),e(To,En),e(En,upr),e(En,W6e),e(W6e,bpr),e(En,vpr),e(En,H6e),e(H6e,Fpr),e(En,Tpr),e(En,U6e),e(U6e,Mpr),e(En,Epr),e(To,Cpr),e(To,V),e(V,XF),e(XF,J6e),e(J6e,wpr),e(XF,Apr),e(XF,rz),e(rz,ypr),e(XF,Lpr),e(V,xpr),e(V,zF),e(zF,Y6e),e(Y6e,kpr),e(zF,Spr),e(zF,tz),e(tz,Rpr),e(zF,Bpr),e(V,Ppr),e(V,QF),e(QF,K6e),e(K6e,$pr),e(QF,Ipr),e(QF,az),e(az,qpr),e(QF,Npr),e(V,jpr),e(V,WF),e(WF,Z6e),e(Z6e,Dpr),e(WF,Gpr),e(WF,nz),e(nz,Opr),e(WF,Vpr),e(V,Xpr),e(V,HF),e(HF,e1e),e(e1e,zpr),e(HF,Qpr),e(HF,sz),e(sz,Wpr),e(HF,Hpr),e(V,Upr),e(V,UF),e(UF,o1e),e(o1e,Jpr),e(UF,Ypr),e(UF,lz),e(lz,Kpr),e(UF,Zpr),e(V,e_r),e(V,JF),e(JF,r1e),e(r1e,o_r),e(JF,r_r),e(JF,iz),e(iz,t_r),e(JF,a_r),e(V,n_r),e(V,YF),e(YF,t1e),e(t1e,s_r),e(YF,l_r),e(YF,dz),e(dz,i_r),e(YF,d_r),e(V,c_r),e(V,KF),e(KF,a1e),e(a1e,f_r),e(KF,m_r),e(KF,cz),e(cz,g_r),e(KF,h_r),e(V,p_r),e(V,ZF),e(ZF,n1e),e(n1e,__r),e(ZF,u_r),e(ZF,fz),e(fz,b_r),e(ZF,v_r),e(V,F_r),e(V,eT),e(eT,s1e),e(s1e,T_r),e(eT,M_r),e(eT,mz),e(mz,E_r),e(eT,C_r),e(V,w_r),e(V,oT),e(oT,l1e),e(l1e,A_r),e(oT,y_r),e(oT,gz),e(gz,L_r),e(oT,x_r),e(V,k_r),e(V,rT),e(rT,i1e),e(i1e,S_r),e(rT,R_r),e(rT,hz),e(hz,B_r),e(rT,P_r),e(V,$_r),e(V,tT),e(tT,d1e),e(d1e,I_r),e(tT,q_r),e(tT,pz),e(pz,N_r),e(tT,j_r),e(V,D_r),e(V,aT),e(aT,c1e),e(c1e,G_r),e(aT,O_r),e(aT,_z),e(_z,V_r),e(aT,X_r),e(V,z_r),e(V,nT),e(nT,f1e),e(f1e,Q_r),e(nT,W_r),e(nT,uz),e(uz,H_r),e(nT,U_r),e(V,J_r),e(V,sT),e(sT,m1e),e(m1e,Y_r),e(sT,K_r),e(sT,bz),e(bz,Z_r),e(sT,eur),e(V,our),e(V,lT),e(lT,g1e),e(g1e,rur),e(lT,tur),e(lT,vz),e(vz,aur),e(lT,nur),e(V,sur),e(V,iT),e(iT,h1e),e(h1e,lur),e(iT,iur),e(iT,Fz),e(Fz,dur),e(iT,cur),e(V,fur),e(V,dT),e(dT,p1e),e(p1e,mur),e(dT,gur),e(dT,Tz),e(Tz,hur),e(dT,pur),e(V,_ur),e(V,cT),e(cT,_1e),e(_1e,uur),e(cT,bur),e(cT,Mz),e(Mz,vur),e(cT,Fur),e(V,Tur),e(V,fT),e(fT,u1e),e(u1e,Mur),e(fT,Eur),e(fT,Ez),e(Ez,Cur),e(fT,wur),e(V,Aur),e(V,mT),e(mT,b1e),e(b1e,yur),e(mT,Lur),e(mT,Cz),e(Cz,xur),e(mT,kur),e(V,Sur),e(V,gT),e(gT,v1e),e(v1e,Rur),e(gT,Bur),e(gT,wz),e(wz,Pur),e(gT,$ur),e(V,Iur),e(V,hT),e(hT,F1e),e(F1e,qur),e(hT,Nur),e(hT,Az),e(Az,jur),e(hT,Dur),e(V,Gur),e(V,pT),e(pT,T1e),e(T1e,Our),e(pT,Vur),e(pT,yz),e(yz,Xur),e(pT,zur),e(To,Qur),e(To,M1e),e(M1e,Wur),e(To,Hur),g(iL,To,null),b(c,_Pe,u),b(c,Pc,u),e(Pc,_T),e(_T,E1e),g(dL,E1e,null),e(Pc,Uur),e(Pc,C1e),e(C1e,Jur),b(c,uPe,u),b(c,Ar,u),g(cL,Ar,null),e(Ar,Yur),e(Ar,$c),e($c,Kur),e($c,Lz),e(Lz,Zur),e($c,e6r),e($c,xz),e(xz,o6r),e($c,r6r),e(Ar,t6r),e(Ar,fL),e(fL,a6r),e(fL,w1e),e(w1e,n6r),e(fL,s6r),e(Ar,l6r),e(Ar,Ft),g(mL,Ft,null),e(Ft,i6r),e(Ft,A1e),e(A1e,d6r),e(Ft,c6r),e(Ft,Ic),e(Ic,f6r),e(Ic,y1e),e(y1e,m6r),e(Ic,g6r),e(Ic,kz),e(kz,h6r),e(Ic,p6r),e(Ft,_6r),e(Ft,L1e),e(L1e,u6r),e(Ft,b6r),g(gL,Ft,null),e(Ar,v6r),e(Ar,Mo),g(hL,Mo,null),e(Mo,F6r),e(Mo,x1e),e(x1e,T6r),e(Mo,M6r),e(Mo,Cn),e(Cn,E6r),e(Cn,k1e),e(k1e,C6r),e(Cn,w6r),e(Cn,S1e),e(S1e,A6r),e(Cn,y6r),e(Cn,R1e),e(R1e,L6r),e(Cn,x6r),e(Mo,k6r),e(Mo,se),e(se,uT),e(uT,B1e),e(B1e,S6r),e(uT,R6r),e(uT,Sz),e(Sz,B6r),e(uT,P6r),e(se,$6r),e(se,bT),e(bT,P1e),e(P1e,I6r),e(bT,q6r),e(bT,Rz),e(Rz,N6r),e(bT,j6r),e(se,D6r),e(se,vT),e(vT,$1e),e($1e,G6r),e(vT,O6r),e(vT,Bz),e(Bz,V6r),e(vT,X6r),e(se,z6r),e(se,FT),e(FT,I1e),e(I1e,Q6r),e(FT,W6r),e(FT,Pz),e(Pz,H6r),e(FT,U6r),e(se,J6r),e(se,TT),e(TT,q1e),e(q1e,Y6r),e(TT,K6r),e(TT,$z),e($z,Z6r),e(TT,e1r),e(se,o1r),e(se,MT),e(MT,N1e),e(N1e,r1r),e(MT,t1r),e(MT,Iz),e(Iz,a1r),e(MT,n1r),e(se,s1r),e(se,ET),e(ET,j1e),e(j1e,l1r),e(ET,i1r),e(ET,qz),e(qz,d1r),e(ET,c1r),e(se,f1r),e(se,CT),e(CT,D1e),e(D1e,m1r),e(CT,g1r),e(CT,Nz),e(Nz,h1r),e(CT,p1r),e(se,_1r),e(se,wT),e(wT,G1e),e(G1e,u1r),e(wT,b1r),e(wT,jz),e(jz,v1r),e(wT,F1r),e(se,T1r),e(se,AT),e(AT,O1e),e(O1e,M1r),e(AT,E1r),e(AT,Dz),e(Dz,C1r),e(AT,w1r),e(se,A1r),e(se,yT),e(yT,V1e),e(V1e,y1r),e(yT,L1r),e(yT,Gz),e(Gz,x1r),e(yT,k1r),e(se,S1r),e(se,LT),e(LT,X1e),e(X1e,R1r),e(LT,B1r),e(LT,Oz),e(Oz,P1r),e(LT,$1r),e(se,I1r),e(se,xT),e(xT,z1e),e(z1e,q1r),e(xT,N1r),e(xT,Vz),e(Vz,j1r),e(xT,D1r),e(se,G1r),e(se,kT),e(kT,Q1e),e(Q1e,O1r),e(kT,V1r),e(kT,Xz),e(Xz,X1r),e(kT,z1r),e(se,Q1r),e(se,ST),e(ST,W1e),e(W1e,W1r),e(ST,H1r),e(ST,zz),e(zz,U1r),e(ST,J1r),e(se,Y1r),e(se,RT),e(RT,H1e),e(H1e,K1r),e(RT,Z1r),e(RT,Qz),e(Qz,e4r),e(RT,o4r),e(se,r4r),e(se,BT),e(BT,U1e),e(U1e,t4r),e(BT,a4r),e(BT,Wz),e(Wz,n4r),e(BT,s4r),e(Mo,l4r),e(Mo,J1e),e(J1e,i4r),e(Mo,d4r),g(pL,Mo,null),b(c,bPe,u),b(c,qc,u),e(qc,PT),e(PT,Y1e),g(_L,Y1e,null),e(qc,c4r),e(qc,K1e),e(K1e,f4r),b(c,vPe,u),b(c,yr,u),g(uL,yr,null),e(yr,m4r),e(yr,Nc),e(Nc,g4r),e(Nc,Hz),e(Hz,h4r),e(Nc,p4r),e(Nc,Uz),e(Uz,_4r),e(Nc,u4r),e(yr,b4r),e(yr,bL),e(bL,v4r),e(bL,Z1e),e(Z1e,F4r),e(bL,T4r),e(yr,M4r),e(yr,Tt),g(vL,Tt,null),e(Tt,E4r),e(Tt,e4e),e(e4e,C4r),e(Tt,w4r),e(Tt,jc),e(jc,A4r),e(jc,o4e),e(o4e,y4r),e(jc,L4r),e(jc,Jz),e(Jz,x4r),e(jc,k4r),e(Tt,S4r),e(Tt,r4e),e(r4e,R4r),e(Tt,B4r),g(FL,Tt,null),e(yr,P4r),e(yr,Eo),g(TL,Eo,null),e(Eo,$4r),e(Eo,t4e),e(t4e,I4r),e(Eo,q4r),e(Eo,wn),e(wn,N4r),e(wn,a4e),e(a4e,j4r),e(wn,D4r),e(wn,n4e),e(n4e,G4r),e(wn,O4r),e(wn,s4e),e(s4e,V4r),e(wn,X4r),e(Eo,z4r),e(Eo,l4e),e(l4e,$T),e($T,i4e),e(i4e,Q4r),e($T,W4r),e($T,Yz),e(Yz,H4r),e($T,U4r),e(Eo,J4r),e(Eo,d4e),e(d4e,Y4r),e(Eo,K4r),g(ML,Eo,null),b(c,FPe,u),b(c,Dc,u),e(Dc,IT),e(IT,c4e),g(EL,c4e,null),e(Dc,Z4r),e(Dc,f4e),e(f4e,ebr),b(c,TPe,u),b(c,Lr,u),g(CL,Lr,null),e(Lr,obr),e(Lr,Gc),e(Gc,rbr),e(Gc,Kz),e(Kz,tbr),e(Gc,abr),e(Gc,Zz),e(Zz,nbr),e(Gc,sbr),e(Lr,lbr),e(Lr,wL),e(wL,ibr),e(wL,m4e),e(m4e,dbr),e(wL,cbr),e(Lr,fbr),e(Lr,Mt),g(AL,Mt,null),e(Mt,mbr),e(Mt,g4e),e(g4e,gbr),e(Mt,hbr),e(Mt,Oc),e(Oc,pbr),e(Oc,h4e),e(h4e,_br),e(Oc,ubr),e(Oc,eQ),e(eQ,bbr),e(Oc,vbr),e(Mt,Fbr),e(Mt,p4e),e(p4e,Tbr),e(Mt,Mbr),g(yL,Mt,null),e(Lr,Ebr),e(Lr,Co),g(LL,Co,null),e(Co,Cbr),e(Co,_4e),e(_4e,wbr),e(Co,Abr),e(Co,An),e(An,ybr),e(An,u4e),e(u4e,Lbr),e(An,xbr),e(An,b4e),e(b4e,kbr),e(An,Sbr),e(An,v4e),e(v4e,Rbr),e(An,Bbr),e(Co,Pbr),e(Co,K),e(K,qT),e(qT,F4e),e(F4e,$br),e(qT,Ibr),e(qT,oQ),e(oQ,qbr),e(qT,Nbr),e(K,jbr),e(K,NT),e(NT,T4e),e(T4e,Dbr),e(NT,Gbr),e(NT,rQ),e(rQ,Obr),e(NT,Vbr),e(K,Xbr),e(K,jT),e(jT,M4e),e(M4e,zbr),e(jT,Qbr),e(jT,tQ),e(tQ,Wbr),e(jT,Hbr),e(K,Ubr),e(K,DT),e(DT,E4e),e(E4e,Jbr),e(DT,Ybr),e(DT,aQ),e(aQ,Kbr),e(DT,Zbr),e(K,e2r),e(K,GT),e(GT,C4e),e(C4e,o2r),e(GT,r2r),e(GT,nQ),e(nQ,t2r),e(GT,a2r),e(K,n2r),e(K,OT),e(OT,w4e),e(w4e,s2r),e(OT,l2r),e(OT,sQ),e(sQ,i2r),e(OT,d2r),e(K,c2r),e(K,VT),e(VT,A4e),e(A4e,f2r),e(VT,m2r),e(VT,lQ),e(lQ,g2r),e(VT,h2r),e(K,p2r),e(K,XT),e(XT,y4e),e(y4e,_2r),e(XT,u2r),e(XT,iQ),e(iQ,b2r),e(XT,v2r),e(K,F2r),e(K,zT),e(zT,L4e),e(L4e,T2r),e(zT,M2r),e(zT,dQ),e(dQ,E2r),e(zT,C2r),e(K,w2r),e(K,QT),e(QT,x4e),e(x4e,A2r),e(QT,y2r),e(QT,cQ),e(cQ,L2r),e(QT,x2r),e(K,k2r),e(K,WT),e(WT,k4e),e(k4e,S2r),e(WT,R2r),e(WT,fQ),e(fQ,B2r),e(WT,P2r),e(K,$2r),e(K,HT),e(HT,S4e),e(S4e,I2r),e(HT,q2r),e(HT,mQ),e(mQ,N2r),e(HT,j2r),e(K,D2r),e(K,UT),e(UT,R4e),e(R4e,G2r),e(UT,O2r),e(UT,gQ),e(gQ,V2r),e(UT,X2r),e(K,z2r),e(K,JT),e(JT,B4e),e(B4e,Q2r),e(JT,W2r),e(JT,hQ),e(hQ,H2r),e(JT,U2r),e(K,J2r),e(K,YT),e(YT,P4e),e(P4e,Y2r),e(YT,K2r),e(YT,pQ),e(pQ,Z2r),e(YT,e5r),e(K,o5r),e(K,KT),e(KT,$4e),e($4e,r5r),e(KT,t5r),e(KT,_Q),e(_Q,a5r),e(KT,n5r),e(K,s5r),e(K,ZT),e(ZT,I4e),e(I4e,l5r),e(ZT,i5r),e(ZT,uQ),e(uQ,d5r),e(ZT,c5r),e(K,f5r),e(K,eM),e(eM,q4e),e(q4e,m5r),e(eM,g5r),e(eM,bQ),e(bQ,h5r),e(eM,p5r),e(K,_5r),e(K,oM),e(oM,N4e),e(N4e,u5r),e(oM,b5r),e(oM,vQ),e(vQ,v5r),e(oM,F5r),e(K,T5r),e(K,rM),e(rM,j4e),e(j4e,M5r),e(rM,E5r),e(rM,FQ),e(FQ,C5r),e(rM,w5r),e(Co,A5r),e(Co,D4e),e(D4e,y5r),e(Co,L5r),g(xL,Co,null),b(c,MPe,u),b(c,Vc,u),e(Vc,tM),e(tM,G4e),g(kL,G4e,null),e(Vc,x5r),e(Vc,O4e),e(O4e,k5r),b(c,EPe,u),b(c,xr,u),g(SL,xr,null),e(xr,S5r),e(xr,Xc),e(Xc,R5r),e(Xc,TQ),e(TQ,B5r),e(Xc,P5r),e(Xc,MQ),e(MQ,$5r),e(Xc,I5r),e(xr,q5r),e(xr,RL),e(RL,N5r),e(RL,V4e),e(V4e,j5r),e(RL,D5r),e(xr,G5r),e(xr,Et),g(BL,Et,null),e(Et,O5r),e(Et,X4e),e(X4e,V5r),e(Et,X5r),e(Et,zc),e(zc,z5r),e(zc,z4e),e(z4e,Q5r),e(zc,W5r),e(zc,EQ),e(EQ,H5r),e(zc,U5r),e(Et,J5r),e(Et,Q4e),e(Q4e,Y5r),e(Et,K5r),g(PL,Et,null),e(xr,Z5r),e(xr,wo),g($L,wo,null),e(wo,evr),e(wo,W4e),e(W4e,ovr),e(wo,rvr),e(wo,yn),e(yn,tvr),e(yn,H4e),e(H4e,avr),e(yn,nvr),e(yn,U4e),e(U4e,svr),e(yn,lvr),e(yn,J4e),e(J4e,ivr),e(yn,dvr),e(wo,cvr),e(wo,Z),e(Z,aM),e(aM,Y4e),e(Y4e,fvr),e(aM,mvr),e(aM,CQ),e(CQ,gvr),e(aM,hvr),e(Z,pvr),e(Z,nM),e(nM,K4e),e(K4e,_vr),e(nM,uvr),e(nM,wQ),e(wQ,bvr),e(nM,vvr),e(Z,Fvr),e(Z,sM),e(sM,Z4e),e(Z4e,Tvr),e(sM,Mvr),e(sM,AQ),e(AQ,Evr),e(sM,Cvr),e(Z,wvr),e(Z,lM),e(lM,ebe),e(ebe,Avr),e(lM,yvr),e(lM,yQ),e(yQ,Lvr),e(lM,xvr),e(Z,kvr),e(Z,iM),e(iM,obe),e(obe,Svr),e(iM,Rvr),e(iM,LQ),e(LQ,Bvr),e(iM,Pvr),e(Z,$vr),e(Z,dM),e(dM,rbe),e(rbe,Ivr),e(dM,qvr),e(dM,xQ),e(xQ,Nvr),e(dM,jvr),e(Z,Dvr),e(Z,cM),e(cM,tbe),e(tbe,Gvr),e(cM,Ovr),e(cM,kQ),e(kQ,Vvr),e(cM,Xvr),e(Z,zvr),e(Z,fM),e(fM,abe),e(abe,Qvr),e(fM,Wvr),e(fM,SQ),e(SQ,Hvr),e(fM,Uvr),e(Z,Jvr),e(Z,mM),e(mM,nbe),e(nbe,Yvr),e(mM,Kvr),e(mM,RQ),e(RQ,Zvr),e(mM,eFr),e(Z,oFr),e(Z,gM),e(gM,sbe),e(sbe,rFr),e(gM,tFr),e(gM,BQ),e(BQ,aFr),e(gM,nFr),e(Z,sFr),e(Z,hM),e(hM,lbe),e(lbe,lFr),e(hM,iFr),e(hM,PQ),e(PQ,dFr),e(hM,cFr),e(Z,fFr),e(Z,pM),e(pM,ibe),e(ibe,mFr),e(pM,gFr),e(pM,$Q),e($Q,hFr),e(pM,pFr),e(Z,_Fr),e(Z,_M),e(_M,dbe),e(dbe,uFr),e(_M,bFr),e(_M,IQ),e(IQ,vFr),e(_M,FFr),e(Z,TFr),e(Z,uM),e(uM,cbe),e(cbe,MFr),e(uM,EFr),e(uM,qQ),e(qQ,CFr),e(uM,wFr),e(Z,AFr),e(Z,bM),e(bM,fbe),e(fbe,yFr),e(bM,LFr),e(bM,NQ),e(NQ,xFr),e(bM,kFr),e(Z,SFr),e(Z,vM),e(vM,mbe),e(mbe,RFr),e(vM,BFr),e(vM,jQ),e(jQ,PFr),e(vM,$Fr),e(Z,IFr),e(Z,FM),e(FM,gbe),e(gbe,qFr),e(FM,NFr),e(FM,DQ),e(DQ,jFr),e(FM,DFr),e(Z,GFr),e(Z,TM),e(TM,hbe),e(hbe,OFr),e(TM,VFr),e(TM,GQ),e(GQ,XFr),e(TM,zFr),e(Z,QFr),e(Z,MM),e(MM,pbe),e(pbe,WFr),e(MM,HFr),e(MM,OQ),e(OQ,UFr),e(MM,JFr),e(Z,YFr),e(Z,EM),e(EM,_be),e(_be,KFr),e(EM,ZFr),e(EM,VQ),e(VQ,eTr),e(EM,oTr),e(wo,rTr),e(wo,ube),e(ube,tTr),e(wo,aTr),g(IL,wo,null),b(c,CPe,u),b(c,Qc,u),e(Qc,CM),e(CM,bbe),g(qL,bbe,null),e(Qc,nTr),e(Qc,vbe),e(vbe,sTr),b(c,wPe,u),b(c,kr,u),g(NL,kr,null),e(kr,lTr),e(kr,Wc),e(Wc,iTr),e(Wc,XQ),e(XQ,dTr),e(Wc,cTr),e(Wc,zQ),e(zQ,fTr),e(Wc,mTr),e(kr,gTr),e(kr,jL),e(jL,hTr),e(jL,Fbe),e(Fbe,pTr),e(jL,_Tr),e(kr,uTr),e(kr,Ct),g(DL,Ct,null),e(Ct,bTr),e(Ct,Tbe),e(Tbe,vTr),e(Ct,FTr),e(Ct,Hc),e(Hc,TTr),e(Hc,Mbe),e(Mbe,MTr),e(Hc,ETr),e(Hc,QQ),e(QQ,CTr),e(Hc,wTr),e(Ct,ATr),e(Ct,Ebe),e(Ebe,yTr),e(Ct,LTr),g(GL,Ct,null),e(kr,xTr),e(kr,Ao),g(OL,Ao,null),e(Ao,kTr),e(Ao,Cbe),e(Cbe,STr),e(Ao,RTr),e(Ao,Ln),e(Ln,BTr),e(Ln,wbe),e(wbe,PTr),e(Ln,$Tr),e(Ln,Abe),e(Abe,ITr),e(Ln,qTr),e(Ln,ybe),e(ybe,NTr),e(Ln,jTr),e(Ao,DTr),e(Ao,Lbe),e(Lbe,wM),e(wM,xbe),e(xbe,GTr),e(wM,OTr),e(wM,WQ),e(WQ,VTr),e(wM,XTr),e(Ao,zTr),e(Ao,kbe),e(kbe,QTr),e(Ao,WTr),g(VL,Ao,null),b(c,APe,u),b(c,Uc,u),e(Uc,AM),e(AM,Sbe),g(XL,Sbe,null),e(Uc,HTr),e(Uc,Rbe),e(Rbe,UTr),b(c,yPe,u),b(c,Sr,u),g(zL,Sr,null),e(Sr,JTr),e(Sr,Jc),e(Jc,YTr),e(Jc,HQ),e(HQ,KTr),e(Jc,ZTr),e(Jc,UQ),e(UQ,eMr),e(Jc,oMr),e(Sr,rMr),e(Sr,QL),e(QL,tMr),e(QL,Bbe),e(Bbe,aMr),e(QL,nMr),e(Sr,sMr),e(Sr,wt),g(WL,wt,null),e(wt,lMr),e(wt,Pbe),e(Pbe,iMr),e(wt,dMr),e(wt,Yc),e(Yc,cMr),e(Yc,$be),e($be,fMr),e(Yc,mMr),e(Yc,JQ),e(JQ,gMr),e(Yc,hMr),e(wt,pMr),e(wt,Ibe),e(Ibe,_Mr),e(wt,uMr),g(HL,wt,null),e(Sr,bMr),e(Sr,yo),g(UL,yo,null),e(yo,vMr),e(yo,qbe),e(qbe,FMr),e(yo,TMr),e(yo,xn),e(xn,MMr),e(xn,Nbe),e(Nbe,EMr),e(xn,CMr),e(xn,jbe),e(jbe,wMr),e(xn,AMr),e(xn,Dbe),e(Dbe,yMr),e(xn,LMr),e(yo,xMr),e(yo,Gbe),e(Gbe,yM),e(yM,Obe),e(Obe,kMr),e(yM,SMr),e(yM,YQ),e(YQ,RMr),e(yM,BMr),e(yo,PMr),e(yo,Vbe),e(Vbe,$Mr),e(yo,IMr),g(JL,yo,null),b(c,LPe,u),b(c,Kc,u),e(Kc,LM),e(LM,Xbe),g(YL,Xbe,null),e(Kc,qMr),e(Kc,zbe),e(zbe,NMr),b(c,xPe,u),b(c,Rr,u),g(KL,Rr,null),e(Rr,jMr),e(Rr,Zc),e(Zc,DMr),e(Zc,KQ),e(KQ,GMr),e(Zc,OMr),e(Zc,ZQ),e(ZQ,VMr),e(Zc,XMr),e(Rr,zMr),e(Rr,ZL),e(ZL,QMr),e(ZL,Qbe),e(Qbe,WMr),e(ZL,HMr),e(Rr,UMr),e(Rr,At),g(e8,At,null),e(At,JMr),e(At,Wbe),e(Wbe,YMr),e(At,KMr),e(At,ef),e(ef,ZMr),e(ef,Hbe),e(Hbe,eEr),e(ef,oEr),e(ef,eW),e(eW,rEr),e(ef,tEr),e(At,aEr),e(At,Ube),e(Ube,nEr),e(At,sEr),g(o8,At,null),e(Rr,lEr),e(Rr,Lo),g(r8,Lo,null),e(Lo,iEr),e(Lo,Jbe),e(Jbe,dEr),e(Lo,cEr),e(Lo,kn),e(kn,fEr),e(kn,Ybe),e(Ybe,mEr),e(kn,gEr),e(kn,Kbe),e(Kbe,hEr),e(kn,pEr),e(kn,Zbe),e(Zbe,_Er),e(kn,uEr),e(Lo,bEr),e(Lo,z),e(z,xM),e(xM,e2e),e(e2e,vEr),e(xM,FEr),e(xM,oW),e(oW,TEr),e(xM,MEr),e(z,EEr),e(z,kM),e(kM,o2e),e(o2e,CEr),e(kM,wEr),e(kM,rW),e(rW,AEr),e(kM,yEr),e(z,LEr),e(z,SM),e(SM,r2e),e(r2e,xEr),e(SM,kEr),e(SM,tW),e(tW,SEr),e(SM,REr),e(z,BEr),e(z,RM),e(RM,t2e),e(t2e,PEr),e(RM,$Er),e(RM,aW),e(aW,IEr),e(RM,qEr),e(z,NEr),e(z,BM),e(BM,a2e),e(a2e,jEr),e(BM,DEr),e(BM,nW),e(nW,GEr),e(BM,OEr),e(z,VEr),e(z,PM),e(PM,n2e),e(n2e,XEr),e(PM,zEr),e(PM,sW),e(sW,QEr),e(PM,WEr),e(z,HEr),e(z,$M),e($M,s2e),e(s2e,UEr),e($M,JEr),e($M,lW),e(lW,YEr),e($M,KEr),e(z,ZEr),e(z,IM),e(IM,l2e),e(l2e,e3r),e(IM,o3r),e(IM,iW),e(iW,r3r),e(IM,t3r),e(z,a3r),e(z,qM),e(qM,i2e),e(i2e,n3r),e(qM,s3r),e(qM,dW),e(dW,l3r),e(qM,i3r),e(z,d3r),e(z,NM),e(NM,d2e),e(d2e,c3r),e(NM,f3r),e(NM,cW),e(cW,m3r),e(NM,g3r),e(z,h3r),e(z,jM),e(jM,c2e),e(c2e,p3r),e(jM,_3r),e(jM,fW),e(fW,u3r),e(jM,b3r),e(z,v3r),e(z,DM),e(DM,f2e),e(f2e,F3r),e(DM,T3r),e(DM,mW),e(mW,M3r),e(DM,E3r),e(z,C3r),e(z,GM),e(GM,m2e),e(m2e,w3r),e(GM,A3r),e(GM,gW),e(gW,y3r),e(GM,L3r),e(z,x3r),e(z,OM),e(OM,g2e),e(g2e,k3r),e(OM,S3r),e(OM,hW),e(hW,R3r),e(OM,B3r),e(z,P3r),e(z,VM),e(VM,h2e),e(h2e,$3r),e(VM,I3r),e(VM,pW),e(pW,q3r),e(VM,N3r),e(z,j3r),e(z,XM),e(XM,p2e),e(p2e,D3r),e(XM,G3r),e(XM,_W),e(_W,O3r),e(XM,V3r),e(z,X3r),e(z,zM),e(zM,_2e),e(_2e,z3r),e(zM,Q3r),e(zM,uW),e(uW,W3r),e(zM,H3r),e(z,U3r),e(z,QM),e(QM,u2e),e(u2e,J3r),e(QM,Y3r),e(QM,bW),e(bW,K3r),e(QM,Z3r),e(z,eCr),e(z,WM),e(WM,b2e),e(b2e,oCr),e(WM,rCr),e(WM,vW),e(vW,tCr),e(WM,aCr),e(z,nCr),e(z,HM),e(HM,v2e),e(v2e,sCr),e(HM,lCr),e(HM,FW),e(FW,iCr),e(HM,dCr),e(z,cCr),e(z,UM),e(UM,F2e),e(F2e,fCr),e(UM,mCr),e(UM,TW),e(TW,gCr),e(UM,hCr),e(z,pCr),e(z,JM),e(JM,T2e),e(T2e,_Cr),e(JM,uCr),e(JM,MW),e(MW,bCr),e(JM,vCr),e(z,FCr),e(z,YM),e(YM,M2e),e(M2e,TCr),e(YM,MCr),e(YM,EW),e(EW,ECr),e(YM,CCr),e(z,wCr),e(z,KM),e(KM,E2e),e(E2e,ACr),e(KM,yCr),e(KM,CW),e(CW,LCr),e(KM,xCr),e(z,kCr),e(z,ZM),e(ZM,C2e),e(C2e,SCr),e(ZM,RCr),e(ZM,wW),e(wW,BCr),e(ZM,PCr),e(Lo,$Cr),e(Lo,w2e),e(w2e,ICr),e(Lo,qCr),g(t8,Lo,null),b(c,kPe,u),b(c,of,u),e(of,eE),e(eE,A2e),g(a8,A2e,null),e(of,NCr),e(of,y2e),e(y2e,jCr),b(c,SPe,u),b(c,Br,u),g(n8,Br,null),e(Br,DCr),e(Br,rf),e(rf,GCr),e(rf,AW),e(AW,OCr),e(rf,VCr),e(rf,yW),e(yW,XCr),e(rf,zCr),e(Br,QCr),e(Br,s8),e(s8,WCr),e(s8,L2e),e(L2e,HCr),e(s8,UCr),e(Br,JCr),e(Br,yt),g(l8,yt,null),e(yt,YCr),e(yt,x2e),e(x2e,KCr),e(yt,ZCr),e(yt,tf),e(tf,ewr),e(tf,k2e),e(k2e,owr),e(tf,rwr),e(tf,LW),e(LW,twr),e(tf,awr),e(yt,nwr),e(yt,S2e),e(S2e,swr),e(yt,lwr),g(i8,yt,null),e(Br,iwr),e(Br,xo),g(d8,xo,null),e(xo,dwr),e(xo,R2e),e(R2e,cwr),e(xo,fwr),e(xo,Sn),e(Sn,mwr),e(Sn,B2e),e(B2e,gwr),e(Sn,hwr),e(Sn,P2e),e(P2e,pwr),e(Sn,_wr),e(Sn,$2e),e($2e,uwr),e(Sn,bwr),e(xo,vwr),e(xo,ca),e(ca,oE),e(oE,I2e),e(I2e,Fwr),e(oE,Twr),e(oE,xW),e(xW,Mwr),e(oE,Ewr),e(ca,Cwr),e(ca,rE),e(rE,q2e),e(q2e,wwr),e(rE,Awr),e(rE,kW),e(kW,ywr),e(rE,Lwr),e(ca,xwr),e(ca,tE),e(tE,N2e),e(N2e,kwr),e(tE,Swr),e(tE,SW),e(SW,Rwr),e(tE,Bwr),e(ca,Pwr),e(ca,aE),e(aE,j2e),e(j2e,$wr),e(aE,Iwr),e(aE,RW),e(RW,qwr),e(aE,Nwr),e(ca,jwr),e(ca,nE),e(nE,D2e),e(D2e,Dwr),e(nE,Gwr),e(nE,BW),e(BW,Owr),e(nE,Vwr),e(xo,Xwr),e(xo,G2e),e(G2e,zwr),e(xo,Qwr),g(c8,xo,null),b(c,RPe,u),b(c,af,u),e(af,sE),e(sE,O2e),g(f8,O2e,null),e(af,Wwr),e(af,V2e),e(V2e,Hwr),b(c,BPe,u),b(c,Pr,u),g(m8,Pr,null),e(Pr,Uwr),e(Pr,nf),e(nf,Jwr),e(nf,PW),e(PW,Ywr),e(nf,Kwr),e(nf,$W),e($W,Zwr),e(nf,eAr),e(Pr,oAr),e(Pr,g8),e(g8,rAr),e(g8,X2e),e(X2e,tAr),e(g8,aAr),e(Pr,nAr),e(Pr,Lt),g(h8,Lt,null),e(Lt,sAr),e(Lt,z2e),e(z2e,lAr),e(Lt,iAr),e(Lt,sf),e(sf,dAr),e(sf,Q2e),e(Q2e,cAr),e(sf,fAr),e(sf,IW),e(IW,mAr),e(sf,gAr),e(Lt,hAr),e(Lt,W2e),e(W2e,pAr),e(Lt,_Ar),g(p8,Lt,null),e(Pr,uAr),e(Pr,ko),g(_8,ko,null),e(ko,bAr),e(ko,H2e),e(H2e,vAr),e(ko,FAr),e(ko,Rn),e(Rn,TAr),e(Rn,U2e),e(U2e,MAr),e(Rn,EAr),e(Rn,J2e),e(J2e,CAr),e(Rn,wAr),e(Rn,Y2e),e(Y2e,AAr),e(Rn,yAr),e(ko,LAr),e(ko,me),e(me,lE),e(lE,K2e),e(K2e,xAr),e(lE,kAr),e(lE,qW),e(qW,SAr),e(lE,RAr),e(me,BAr),e(me,iE),e(iE,Z2e),e(Z2e,PAr),e(iE,$Ar),e(iE,NW),e(NW,IAr),e(iE,qAr),e(me,NAr),e(me,dE),e(dE,e5e),e(e5e,jAr),e(dE,DAr),e(dE,jW),e(jW,GAr),e(dE,OAr),e(me,VAr),e(me,cE),e(cE,o5e),e(o5e,XAr),e(cE,zAr),e(cE,DW),e(DW,QAr),e(cE,WAr),e(me,HAr),e(me,fE),e(fE,r5e),e(r5e,UAr),e(fE,JAr),e(fE,GW),e(GW,YAr),e(fE,KAr),e(me,ZAr),e(me,mE),e(mE,t5e),e(t5e,e0r),e(mE,o0r),e(mE,OW),e(OW,r0r),e(mE,t0r),e(me,a0r),e(me,gE),e(gE,a5e),e(a5e,n0r),e(gE,s0r),e(gE,VW),e(VW,l0r),e(gE,i0r),e(me,d0r),e(me,hE),e(hE,n5e),e(n5e,c0r),e(hE,f0r),e(hE,XW),e(XW,m0r),e(hE,g0r),e(me,h0r),e(me,pE),e(pE,s5e),e(s5e,p0r),e(pE,_0r),e(pE,zW),e(zW,u0r),e(pE,b0r),e(me,v0r),e(me,_E),e(_E,l5e),e(l5e,F0r),e(_E,T0r),e(_E,QW),e(QW,M0r),e(_E,E0r),e(me,C0r),e(me,uE),e(uE,i5e),e(i5e,w0r),e(uE,A0r),e(uE,WW),e(WW,y0r),e(uE,L0r),e(me,x0r),e(me,bE),e(bE,d5e),e(d5e,k0r),e(bE,S0r),e(bE,HW),e(HW,R0r),e(bE,B0r),e(ko,P0r),e(ko,c5e),e(c5e,$0r),e(ko,I0r),g(u8,ko,null),b(c,PPe,u),b(c,lf,u),e(lf,vE),e(vE,f5e),g(b8,f5e,null),e(lf,q0r),e(lf,m5e),e(m5e,N0r),b(c,$Pe,u),b(c,$r,u),g(v8,$r,null),e($r,j0r),e($r,df),e(df,D0r),e(df,UW),e(UW,G0r),e(df,O0r),e(df,JW),e(JW,V0r),e(df,X0r),e($r,z0r),e($r,F8),e(F8,Q0r),e(F8,g5e),e(g5e,W0r),e(F8,H0r),e($r,U0r),e($r,xt),g(T8,xt,null),e(xt,J0r),e(xt,h5e),e(h5e,Y0r),e(xt,K0r),e(xt,cf),e(cf,Z0r),e(cf,p5e),e(p5e,eyr),e(cf,oyr),e(cf,YW),e(YW,ryr),e(cf,tyr),e(xt,ayr),e(xt,_5e),e(_5e,nyr),e(xt,syr),g(M8,xt,null),e($r,lyr),e($r,So),g(E8,So,null),e(So,iyr),e(So,u5e),e(u5e,dyr),e(So,cyr),e(So,Bn),e(Bn,fyr),e(Bn,b5e),e(b5e,myr),e(Bn,gyr),e(Bn,v5e),e(v5e,hyr),e(Bn,pyr),e(Bn,F5e),e(F5e,_yr),e(Bn,uyr),e(So,byr),e(So,ve),e(ve,FE),e(FE,T5e),e(T5e,vyr),e(FE,Fyr),e(FE,KW),e(KW,Tyr),e(FE,Myr),e(ve,Eyr),e(ve,TE),e(TE,M5e),e(M5e,Cyr),e(TE,wyr),e(TE,ZW),e(ZW,Ayr),e(TE,yyr),e(ve,Lyr),e(ve,ME),e(ME,E5e),e(E5e,xyr),e(ME,kyr),e(ME,eH),e(eH,Syr),e(ME,Ryr),e(ve,Byr),e(ve,EE),e(EE,C5e),e(C5e,Pyr),e(EE,$yr),e(EE,oH),e(oH,Iyr),e(EE,qyr),e(ve,Nyr),e(ve,CE),e(CE,w5e),e(w5e,jyr),e(CE,Dyr),e(CE,rH),e(rH,Gyr),e(CE,Oyr),e(ve,Vyr),e(ve,wE),e(wE,A5e),e(A5e,Xyr),e(wE,zyr),e(wE,tH),e(tH,Qyr),e(wE,Wyr),e(ve,Hyr),e(ve,AE),e(AE,y5e),e(y5e,Uyr),e(AE,Jyr),e(AE,aH),e(aH,Yyr),e(AE,Kyr),e(ve,Zyr),e(ve,yE),e(yE,L5e),e(L5e,eLr),e(yE,oLr),e(yE,nH),e(nH,rLr),e(yE,tLr),e(ve,aLr),e(ve,LE),e(LE,x5e),e(x5e,nLr),e(LE,sLr),e(LE,sH),e(sH,lLr),e(LE,iLr),e(ve,dLr),e(ve,xE),e(xE,k5e),e(k5e,cLr),e(xE,fLr),e(xE,lH),e(lH,mLr),e(xE,gLr),e(So,hLr),e(So,S5e),e(S5e,pLr),e(So,_Lr),g(C8,So,null),b(c,IPe,u),b(c,ff,u),e(ff,kE),e(kE,R5e),g(w8,R5e,null),e(ff,uLr),e(ff,B5e),e(B5e,bLr),b(c,qPe,u),b(c,Ir,u),g(A8,Ir,null),e(Ir,vLr),e(Ir,mf),e(mf,FLr),e(mf,iH),e(iH,TLr),e(mf,MLr),e(mf,dH),e(dH,ELr),e(mf,CLr),e(Ir,wLr),e(Ir,y8),e(y8,ALr),e(y8,P5e),e(P5e,yLr),e(y8,LLr),e(Ir,xLr),e(Ir,kt),g(L8,kt,null),e(kt,kLr),e(kt,$5e),e($5e,SLr),e(kt,RLr),e(kt,gf),e(gf,BLr),e(gf,I5e),e(I5e,PLr),e(gf,$Lr),e(gf,cH),e(cH,ILr),e(gf,qLr),e(kt,NLr),e(kt,q5e),e(q5e,jLr),e(kt,DLr),g(x8,kt,null),e(Ir,GLr),e(Ir,Ro),g(k8,Ro,null),e(Ro,OLr),e(Ro,N5e),e(N5e,VLr),e(Ro,XLr),e(Ro,Pn),e(Pn,zLr),e(Pn,j5e),e(j5e,QLr),e(Pn,WLr),e(Pn,D5e),e(D5e,HLr),e(Pn,ULr),e(Pn,G5e),e(G5e,JLr),e(Pn,YLr),e(Ro,KLr),e(Ro,Ce),e(Ce,SE),e(SE,O5e),e(O5e,ZLr),e(SE,e8r),e(SE,fH),e(fH,o8r),e(SE,r8r),e(Ce,t8r),e(Ce,RE),e(RE,V5e),e(V5e,a8r),e(RE,n8r),e(RE,mH),e(mH,s8r),e(RE,l8r),e(Ce,i8r),e(Ce,BE),e(BE,X5e),e(X5e,d8r),e(BE,c8r),e(BE,gH),e(gH,f8r),e(BE,m8r),e(Ce,g8r),e(Ce,PE),e(PE,z5e),e(z5e,h8r),e(PE,p8r),e(PE,hH),e(hH,_8r),e(PE,u8r),e(Ce,b8r),e(Ce,$E),e($E,Q5e),e(Q5e,v8r),e($E,F8r),e($E,pH),e(pH,T8r),e($E,M8r),e(Ce,E8r),e(Ce,IE),e(IE,W5e),e(W5e,C8r),e(IE,w8r),e(IE,_H),e(_H,A8r),e(IE,y8r),e(Ce,L8r),e(Ce,qE),e(qE,H5e),e(H5e,x8r),e(qE,k8r),e(qE,uH),e(uH,S8r),e(qE,R8r),e(Ce,B8r),e(Ce,NE),e(NE,U5e),e(U5e,P8r),e(NE,$8r),e(NE,bH),e(bH,I8r),e(NE,q8r),e(Ce,N8r),e(Ce,jE),e(jE,J5e),e(J5e,j8r),e(jE,D8r),e(jE,vH),e(vH,G8r),e(jE,O8r),e(Ro,V8r),e(Ro,Y5e),e(Y5e,X8r),e(Ro,z8r),g(S8,Ro,null),b(c,NPe,u),b(c,hf,u),e(hf,DE),e(DE,K5e),g(R8,K5e,null),e(hf,Q8r),e(hf,Z5e),e(Z5e,W8r),b(c,jPe,u),b(c,qr,u),g(B8,qr,null),e(qr,H8r),e(qr,pf),e(pf,U8r),e(pf,FH),e(FH,J8r),e(pf,Y8r),e(pf,TH),e(TH,K8r),e(pf,Z8r),e(qr,e7r),e(qr,P8),e(P8,o7r),e(P8,eve),e(eve,r7r),e(P8,t7r),e(qr,a7r),e(qr,St),g($8,St,null),e(St,n7r),e(St,ove),e(ove,s7r),e(St,l7r),e(St,_f),e(_f,i7r),e(_f,rve),e(rve,d7r),e(_f,c7r),e(_f,MH),e(MH,f7r),e(_f,m7r),e(St,g7r),e(St,tve),e(tve,h7r),e(St,p7r),g(I8,St,null),e(qr,_7r),e(qr,Bo),g(q8,Bo,null),e(Bo,u7r),e(Bo,ave),e(ave,b7r),e(Bo,v7r),e(Bo,$n),e($n,F7r),e($n,nve),e(nve,T7r),e($n,M7r),e($n,sve),e(sve,E7r),e($n,C7r),e($n,lve),e(lve,w7r),e($n,A7r),e(Bo,y7r),e(Bo,Fe),e(Fe,GE),e(GE,ive),e(ive,L7r),e(GE,x7r),e(GE,EH),e(EH,k7r),e(GE,S7r),e(Fe,R7r),e(Fe,OE),e(OE,dve),e(dve,B7r),e(OE,P7r),e(OE,CH),e(CH,$7r),e(OE,I7r),e(Fe,q7r),e(Fe,VE),e(VE,cve),e(cve,N7r),e(VE,j7r),e(VE,wH),e(wH,D7r),e(VE,G7r),e(Fe,O7r),e(Fe,XE),e(XE,fve),e(fve,V7r),e(XE,X7r),e(XE,AH),e(AH,z7r),e(XE,Q7r),e(Fe,W7r),e(Fe,zE),e(zE,mve),e(mve,H7r),e(zE,U7r),e(zE,yH),e(yH,J7r),e(zE,Y7r),e(Fe,K7r),e(Fe,QE),e(QE,gve),e(gve,Z7r),e(QE,e9r),e(QE,LH),e(LH,o9r),e(QE,r9r),e(Fe,t9r),e(Fe,WE),e(WE,hve),e(hve,a9r),e(WE,n9r),e(WE,xH),e(xH,s9r),e(WE,l9r),e(Fe,i9r),e(Fe,HE),e(HE,pve),e(pve,d9r),e(HE,c9r),e(HE,kH),e(kH,f9r),e(HE,m9r),e(Fe,g9r),e(Fe,UE),e(UE,_ve),e(_ve,h9r),e(UE,p9r),e(UE,SH),e(SH,_9r),e(UE,u9r),e(Fe,b9r),e(Fe,JE),e(JE,uve),e(uve,v9r),e(JE,F9r),e(JE,RH),e(RH,T9r),e(JE,M9r),e(Bo,E9r),e(Bo,bve),e(bve,C9r),e(Bo,w9r),g(N8,Bo,null),b(c,DPe,u),b(c,uf,u),e(uf,YE),e(YE,vve),g(j8,vve,null),e(uf,A9r),e(uf,Fve),e(Fve,y9r),b(c,GPe,u),b(c,Nr,u),g(D8,Nr,null),e(Nr,L9r),e(Nr,bf),e(bf,x9r),e(bf,BH),e(BH,k9r),e(bf,S9r),e(bf,PH),e(PH,R9r),e(bf,B9r),e(Nr,P9r),e(Nr,G8),e(G8,$9r),e(G8,Tve),e(Tve,I9r),e(G8,q9r),e(Nr,N9r),e(Nr,Rt),g(O8,Rt,null),e(Rt,j9r),e(Rt,Mve),e(Mve,D9r),e(Rt,G9r),e(Rt,vf),e(vf,O9r),e(vf,Eve),e(Eve,V9r),e(vf,X9r),e(vf,$H),e($H,z9r),e(vf,Q9r),e(Rt,W9r),e(Rt,Cve),e(Cve,H9r),e(Rt,U9r),g(V8,Rt,null),e(Nr,J9r),e(Nr,Po),g(X8,Po,null),e(Po,Y9r),e(Po,wve),e(wve,K9r),e(Po,Z9r),e(Po,In),e(In,exr),e(In,Ave),e(Ave,oxr),e(In,rxr),e(In,yve),e(yve,txr),e(In,axr),e(In,Lve),e(Lve,nxr),e(In,sxr),e(Po,lxr),e(Po,Te),e(Te,KE),e(KE,xve),e(xve,ixr),e(KE,dxr),e(KE,IH),e(IH,cxr),e(KE,fxr),e(Te,mxr),e(Te,ZE),e(ZE,kve),e(kve,gxr),e(ZE,hxr),e(ZE,qH),e(qH,pxr),e(ZE,_xr),e(Te,uxr),e(Te,e3),e(e3,Sve),e(Sve,bxr),e(e3,vxr),e(e3,NH),e(NH,Fxr),e(e3,Txr),e(Te,Mxr),e(Te,o3),e(o3,Rve),e(Rve,Exr),e(o3,Cxr),e(o3,jH),e(jH,wxr),e(o3,Axr),e(Te,yxr),e(Te,r3),e(r3,Bve),e(Bve,Lxr),e(r3,xxr),e(r3,DH),e(DH,kxr),e(r3,Sxr),e(Te,Rxr),e(Te,t3),e(t3,Pve),e(Pve,Bxr),e(t3,Pxr),e(t3,GH),e(GH,$xr),e(t3,Ixr),e(Te,qxr),e(Te,a3),e(a3,$ve),e($ve,Nxr),e(a3,jxr),e(a3,OH),e(OH,Dxr),e(a3,Gxr),e(Te,Oxr),e(Te,n3),e(n3,Ive),e(Ive,Vxr),e(n3,Xxr),e(n3,VH),e(VH,zxr),e(n3,Qxr),e(Te,Wxr),e(Te,s3),e(s3,qve),e(qve,Hxr),e(s3,Uxr),e(s3,XH),e(XH,Jxr),e(s3,Yxr),e(Te,Kxr),e(Te,l3),e(l3,Nve),e(Nve,Zxr),e(l3,ekr),e(l3,zH),e(zH,okr),e(l3,rkr),e(Po,tkr),e(Po,jve),e(jve,akr),e(Po,nkr),g(z8,Po,null),b(c,OPe,u),b(c,Ff,u),e(Ff,i3),e(i3,Dve),g(Q8,Dve,null),e(Ff,skr),e(Ff,Gve),e(Gve,lkr),b(c,VPe,u),b(c,jr,u),g(W8,jr,null),e(jr,ikr),e(jr,Tf),e(Tf,dkr),e(Tf,QH),e(QH,ckr),e(Tf,fkr),e(Tf,WH),e(WH,mkr),e(Tf,gkr),e(jr,hkr),e(jr,H8),e(H8,pkr),e(H8,Ove),e(Ove,_kr),e(H8,ukr),e(jr,bkr),e(jr,Bt),g(U8,Bt,null),e(Bt,vkr),e(Bt,Vve),e(Vve,Fkr),e(Bt,Tkr),e(Bt,Mf),e(Mf,Mkr),e(Mf,Xve),e(Xve,Ekr),e(Mf,Ckr),e(Mf,HH),e(HH,wkr),e(Mf,Akr),e(Bt,ykr),e(Bt,zve),e(zve,Lkr),e(Bt,xkr),g(J8,Bt,null),e(jr,kkr),e(jr,$o),g(Y8,$o,null),e($o,Skr),e($o,Qve),e(Qve,Rkr),e($o,Bkr),e($o,qn),e(qn,Pkr),e(qn,Wve),e(Wve,$kr),e(qn,Ikr),e(qn,Hve),e(Hve,qkr),e(qn,Nkr),e(qn,Uve),e(Uve,jkr),e(qn,Dkr),e($o,Gkr),e($o,Be),e(Be,d3),e(d3,Jve),e(Jve,Okr),e(d3,Vkr),e(d3,UH),e(UH,Xkr),e(d3,zkr),e(Be,Qkr),e(Be,c3),e(c3,Yve),e(Yve,Wkr),e(c3,Hkr),e(c3,JH),e(JH,Ukr),e(c3,Jkr),e(Be,Ykr),e(Be,f3),e(f3,Kve),e(Kve,Kkr),e(f3,Zkr),e(f3,YH),e(YH,eSr),e(f3,oSr),e(Be,rSr),e(Be,m3),e(m3,Zve),e(Zve,tSr),e(m3,aSr),e(m3,KH),e(KH,nSr),e(m3,sSr),e(Be,lSr),e(Be,g3),e(g3,eFe),e(eFe,iSr),e(g3,dSr),e(g3,ZH),e(ZH,cSr),e(g3,fSr),e(Be,mSr),e(Be,h3),e(h3,oFe),e(oFe,gSr),e(h3,hSr),e(h3,eU),e(eU,pSr),e(h3,_Sr),e(Be,uSr),e(Be,p3),e(p3,rFe),e(rFe,bSr),e(p3,vSr),e(p3,oU),e(oU,FSr),e(p3,TSr),e(Be,MSr),e(Be,_3),e(_3,tFe),e(tFe,ESr),e(_3,CSr),e(_3,rU),e(rU,wSr),e(_3,ASr),e($o,ySr),e($o,aFe),e(aFe,LSr),e($o,xSr),g(K8,$o,null),b(c,XPe,u),b(c,Ef,u),e(Ef,u3),e(u3,nFe),g(Z8,nFe,null),e(Ef,kSr),e(Ef,sFe),e(sFe,SSr),b(c,zPe,u),b(c,Dr,u),g(e7,Dr,null),e(Dr,RSr),e(Dr,Cf),e(Cf,BSr),e(Cf,tU),e(tU,PSr),e(Cf,$Sr),e(Cf,aU),e(aU,ISr),e(Cf,qSr),e(Dr,NSr),e(Dr,o7),e(o7,jSr),e(o7,lFe),e(lFe,DSr),e(o7,GSr),e(Dr,OSr),e(Dr,Pt),g(r7,Pt,null),e(Pt,VSr),e(Pt,iFe),e(iFe,XSr),e(Pt,zSr),e(Pt,wf),e(wf,QSr),e(wf,dFe),e(dFe,WSr),e(wf,HSr),e(wf,nU),e(nU,USr),e(wf,JSr),e(Pt,YSr),e(Pt,cFe),e(cFe,KSr),e(Pt,ZSr),g(t7,Pt,null),e(Dr,eRr),e(Dr,Io),g(a7,Io,null),e(Io,oRr),e(Io,fFe),e(fFe,rRr),e(Io,tRr),e(Io,Nn),e(Nn,aRr),e(Nn,mFe),e(mFe,nRr),e(Nn,sRr),e(Nn,gFe),e(gFe,lRr),e(Nn,iRr),e(Nn,hFe),e(hFe,dRr),e(Nn,cRr),e(Io,fRr),e(Io,Pe),e(Pe,b3),e(b3,pFe),e(pFe,mRr),e(b3,gRr),e(b3,sU),e(sU,hRr),e(b3,pRr),e(Pe,_Rr),e(Pe,v3),e(v3,_Fe),e(_Fe,uRr),e(v3,bRr),e(v3,lU),e(lU,vRr),e(v3,FRr),e(Pe,TRr),e(Pe,F3),e(F3,uFe),e(uFe,MRr),e(F3,ERr),e(F3,iU),e(iU,CRr),e(F3,wRr),e(Pe,ARr),e(Pe,T3),e(T3,bFe),e(bFe,yRr),e(T3,LRr),e(T3,dU),e(dU,xRr),e(T3,kRr),e(Pe,SRr),e(Pe,M3),e(M3,vFe),e(vFe,RRr),e(M3,BRr),e(M3,cU),e(cU,PRr),e(M3,$Rr),e(Pe,IRr),e(Pe,E3),e(E3,FFe),e(FFe,qRr),e(E3,NRr),e(E3,fU),e(fU,jRr),e(E3,DRr),e(Pe,GRr),e(Pe,C3),e(C3,TFe),e(TFe,ORr),e(C3,VRr),e(C3,mU),e(mU,XRr),e(C3,zRr),e(Pe,QRr),e(Pe,w3),e(w3,MFe),e(MFe,WRr),e(w3,HRr),e(w3,gU),e(gU,URr),e(w3,JRr),e(Io,YRr),e(Io,EFe),e(EFe,KRr),e(Io,ZRr),g(n7,Io,null),b(c,QPe,u),b(c,Af,u),e(Af,A3),e(A3,CFe),g(s7,CFe,null),e(Af,eBr),e(Af,wFe),e(wFe,oBr),b(c,WPe,u),b(c,Gr,u),g(l7,Gr,null),e(Gr,rBr),e(Gr,yf),e(yf,tBr),e(yf,hU),e(hU,aBr),e(yf,nBr),e(yf,pU),e(pU,sBr),e(yf,lBr),e(Gr,iBr),e(Gr,i7),e(i7,dBr),e(i7,AFe),e(AFe,cBr),e(i7,fBr),e(Gr,mBr),e(Gr,$t),g(d7,$t,null),e($t,gBr),e($t,yFe),e(yFe,hBr),e($t,pBr),e($t,Lf),e(Lf,_Br),e(Lf,LFe),e(LFe,uBr),e(Lf,bBr),e(Lf,_U),e(_U,vBr),e(Lf,FBr),e($t,TBr),e($t,xFe),e(xFe,MBr),e($t,EBr),g(c7,$t,null),e(Gr,CBr),e(Gr,qo),g(f7,qo,null),e(qo,wBr),e(qo,kFe),e(kFe,ABr),e(qo,yBr),e(qo,jn),e(jn,LBr),e(jn,SFe),e(SFe,xBr),e(jn,kBr),e(jn,RFe),e(RFe,SBr),e(jn,RBr),e(jn,BFe),e(BFe,BBr),e(jn,PBr),e(qo,$Br),e(qo,PFe),e(PFe,y3),e(y3,$Fe),e($Fe,IBr),e(y3,qBr),e(y3,uU),e(uU,NBr),e(y3,jBr),e(qo,DBr),e(qo,IFe),e(IFe,GBr),e(qo,OBr),g(m7,qo,null),b(c,HPe,u),b(c,xf,u),e(xf,L3),e(L3,qFe),g(g7,qFe,null),e(xf,VBr),e(xf,NFe),e(NFe,XBr),b(c,UPe,u),b(c,Or,u),g(h7,Or,null),e(Or,zBr),e(Or,kf),e(kf,QBr),e(kf,bU),e(bU,WBr),e(kf,HBr),e(kf,vU),e(vU,UBr),e(kf,JBr),e(Or,YBr),e(Or,p7),e(p7,KBr),e(p7,jFe),e(jFe,ZBr),e(p7,ePr),e(Or,oPr),e(Or,It),g(_7,It,null),e(It,rPr),e(It,DFe),e(DFe,tPr),e(It,aPr),e(It,Sf),e(Sf,nPr),e(Sf,GFe),e(GFe,sPr),e(Sf,lPr),e(Sf,FU),e(FU,iPr),e(Sf,dPr),e(It,cPr),e(It,OFe),e(OFe,fPr),e(It,mPr),g(u7,It,null),e(Or,gPr),e(Or,No),g(b7,No,null),e(No,hPr),e(No,VFe),e(VFe,pPr),e(No,_Pr),e(No,Dn),e(Dn,uPr),e(Dn,XFe),e(XFe,bPr),e(Dn,vPr),e(Dn,zFe),e(zFe,FPr),e(Dn,TPr),e(Dn,QFe),e(QFe,MPr),e(Dn,EPr),e(No,CPr),e(No,v7),e(v7,x3),e(x3,WFe),e(WFe,wPr),e(x3,APr),e(x3,TU),e(TU,yPr),e(x3,LPr),e(v7,xPr),e(v7,k3),e(k3,HFe),e(HFe,kPr),e(k3,SPr),e(k3,MU),e(MU,RPr),e(k3,BPr),e(No,PPr),e(No,UFe),e(UFe,$Pr),e(No,IPr),g(F7,No,null),b(c,JPe,u),b(c,Rf,u),e(Rf,S3),e(S3,JFe),g(T7,JFe,null),e(Rf,qPr),e(Rf,YFe),e(YFe,NPr),b(c,YPe,u),b(c,Vr,u),g(M7,Vr,null),e(Vr,jPr),e(Vr,Bf),e(Bf,DPr),e(Bf,EU),e(EU,GPr),e(Bf,OPr),e(Bf,CU),e(CU,VPr),e(Bf,XPr),e(Vr,zPr),e(Vr,E7),e(E7,QPr),e(E7,KFe),e(KFe,WPr),e(E7,HPr),e(Vr,UPr),e(Vr,qt),g(C7,qt,null),e(qt,JPr),e(qt,ZFe),e(ZFe,YPr),e(qt,KPr),e(qt,Pf),e(Pf,ZPr),e(Pf,eTe),e(eTe,e$r),e(Pf,o$r),e(Pf,wU),e(wU,r$r),e(Pf,t$r),e(qt,a$r),e(qt,oTe),e(oTe,n$r),e(qt,s$r),g(w7,qt,null),e(Vr,l$r),e(Vr,jo),g(A7,jo,null),e(jo,i$r),e(jo,rTe),e(rTe,d$r),e(jo,c$r),e(jo,Gn),e(Gn,f$r),e(Gn,tTe),e(tTe,m$r),e(Gn,g$r),e(Gn,aTe),e(aTe,h$r),e(Gn,p$r),e(Gn,nTe),e(nTe,_$r),e(Gn,u$r),e(jo,b$r),e(jo,sTe),e(sTe,R3),e(R3,lTe),e(lTe,v$r),e(R3,F$r),e(R3,AU),e(AU,T$r),e(R3,M$r),e(jo,E$r),e(jo,iTe),e(iTe,C$r),e(jo,w$r),g(y7,jo,null),KPe=!0},p(c,[u]){const L7={};u&2&&(L7.$$scope={dirty:u,ctx:c}),Of.$set(L7);const dTe={};u&2&&(dTe.$$scope={dirty:u,ctx:c}),jh.$set(dTe);const cTe={};u&2&&(cTe.$$scope={dirty:u,ctx:c}),Yh.$set(cTe)},i(c){KPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(Of.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(tw.$$.fragment,c),h(jh.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(cw.$$.fragment,c),h(Yh.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(b8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(e7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(b7.$$.fragment,c),h(F7.$$.fragment,c),h(T7.$$.fragment,c),h(M7.$$.fragment,c),h(C7.$$.fragment,c),h(w7.$$.fragment,c),h(A7.$$.fragment,c),h(y7.$$.fragment,c),KPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(Of.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(tw.$$.fragment,c),p(jh.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(cw.$$.fragment,c),p(Yh.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(vL.$$.fragment,c),p(FL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(b8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(w8.$$.fragment,c),p(A8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(R8.$$.fragment,c),p(B8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(j8.$$.fragment,c),p(D8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(Q8.$$.fragment,c),p(W8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(Z8.$$.fragment,c),p(e7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(b7.$$.fragment,c),p(F7.$$.fragment,c),p(T7.$$.fragment,c),p(M7.$$.fragment,c),p(C7.$$.fragment,c),p(w7.$$.fragment,c),p(A7.$$.fragment,c),p(y7.$$.fragment,c),KPe=!1},d(c){t(ee),c&&t(co),c&&t(ce),_(he),c&&t(qf),c&&t(fa),c&&t(ke),c&&t(fo),c&&t(jf),_(Da,c),c&&t(mo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(YRe),c&&t(Xi),_(qC),c&&t(KRe),c&&t(Qn),c&&t(ZRe),_(NC,c),c&&t(eBe),c&&t(k9),c&&t(oBe),_(Of,c),c&&t(rBe),c&&t(zi),_(jC),c&&t(tBe),c&&t(Qo),_(DC),_(VC),_(XC),_(zC),c&&t(aBe),c&&t(Wi),_(QC),c&&t(nBe),c&&t(Wo),_(WC),_(JC),_(YC),_(KC),c&&t(sBe),c&&t(Hi),_(ZC),c&&t(lBe),c&&t(Ho),_(ew),_(tw),_(jh),_(aw),_(nw),c&&t(iBe),c&&t(Ui),_(sw),c&&t(dBe),c&&t(Uo),_(lw),_(cw),_(Yh),_(fw),_(mw),c&&t(cBe),c&&t(Yi),_(gw),c&&t(fBe),c&&t(Jo),_(hw),_(_w),_(uw),_(bw),_(vw),c&&t(mBe),c&&t(ed),_(Fw),c&&t(gBe),c&&t(Yo),_(Tw),_(Ew),_(Cw),_(ww),_(Aw),c&&t(hBe),c&&t(td),_(yw),c&&t(pBe),c&&t(Ko),_(Lw),_(kw),_(Sw),_(Rw),_(Bw),c&&t(_Be),c&&t(sd),_(Pw),c&&t(uBe),c&&t(Zo),_($w),_(qw),_(Nw),_(jw),_(Dw),c&&t(bBe),c&&t(dd),_(Gw),c&&t(vBe),c&&t(er),_(Ow),_(Xw),_(zw),_(Qw),_(Ww),c&&t(FBe),c&&t(md),_(Hw),c&&t(TBe),c&&t(or),_(Uw),_(Yw),_(Kw),_(Zw),_(eA),c&&t(MBe),c&&t(pd),_(oA),c&&t(EBe),c&&t(rr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(CBe),c&&t(bd),_(iA),c&&t(wBe),c&&t(tr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(ABe),c&&t(Td),_(pA),c&&t(yBe),c&&t(ar),_(_A),_(bA),_(vA),_(FA),_(TA),c&&t(LBe),c&&t(Cd),_(MA),c&&t(xBe),c&&t(nr),_(EA),_(wA),_(AA),_(yA),_(LA),c&&t(kBe),c&&t(yd),_(xA),c&&t(SBe),c&&t(sr),_(kA),_(RA),_(BA),_(PA),_($A),c&&t(RBe),c&&t(kd),_(IA),c&&t(BBe),c&&t(lr),_(qA),_(jA),_(DA),_(GA),_(OA),c&&t(PBe),c&&t(Bd),_(VA),c&&t($Be),c&&t(ir),_(XA),_(QA),_(WA),_(HA),_(UA),c&&t(IBe),c&&t(Id),_(JA),c&&t(qBe),c&&t(dr),_(YA),_(ZA),_(e0),_(o0),_(r0),c&&t(NBe),c&&t(jd),_(t0),c&&t(jBe),c&&t(cr),_(a0),_(s0),_(l0),_(i0),_(d0),c&&t(DBe),c&&t(Od),_(c0),c&&t(GBe),c&&t(fr),_(f0),_(g0),_(h0),_(p0),_(_0),c&&t(OBe),c&&t(zd),_(u0),c&&t(VBe),c&&t(mr),_(b0),_(F0),_(T0),_(M0),_(C0),c&&t(XBe),c&&t(Hd),_(w0),c&&t(zBe),c&&t(gr),_(A0),_(L0),_(x0),_(k0),_(S0),c&&t(QBe),c&&t(Yd),_(R0),c&&t(WBe),c&&t(hr),_(B0),_($0),_(I0),_(q0),_(N0),c&&t(HBe),c&&t(oc),_(j0),c&&t(UBe),c&&t(pr),_(D0),_(O0),_(V0),_(X0),_(z0),c&&t(JBe),c&&t(ac),_(Q0),c&&t(YBe),c&&t(_r),_(W0),_(U0),_(J0),_(Y0),_(K0),c&&t(KBe),c&&t(lc),_(Z0),c&&t(ZBe),c&&t(ur),_(ey),_(ry),_(ty),_(ay),_(ny),c&&t(ePe),c&&t(cc),_(sy),c&&t(oPe),c&&t(br),_(ly),_(dy),_(cy),_(fy),_(my),c&&t(rPe),c&&t(gc),_(gy),c&&t(tPe),c&&t(vr),_(hy),_(_y),_(uy),_(by),_(vy),c&&t(aPe),c&&t(_c),_(Fy),c&&t(nPe),c&&t(Fr),_(Ty),_(Ey),_(Cy),_(wy),_(Ay),c&&t(sPe),c&&t(vc),_(yy),c&&t(lPe),c&&t(Tr),_(Ly),_(ky),_(Sy),_(Ry),_(By),c&&t(iPe),c&&t(Mc),_(Py),c&&t(dPe),c&&t(Mr),_($y),_(qy),_(Ny),_(jy),_(Gy),c&&t(cPe),c&&t(wc),_(Oy),c&&t(fPe),c&&t(Er),_(Vy),_(zy),_(Qy),_(Wy),_(Hy),c&&t(mPe),c&&t(Lc),_(Uy),c&&t(gPe),c&&t(Cr),_(Jy),_(Ky),_(Zy),_(eL),_(oL),c&&t(hPe),c&&t(Sc),_(rL),c&&t(pPe),c&&t(wr),_(tL),_(nL),_(sL),_(lL),_(iL),c&&t(_Pe),c&&t(Pc),_(dL),c&&t(uPe),c&&t(Ar),_(cL),_(mL),_(gL),_(hL),_(pL),c&&t(bPe),c&&t(qc),_(_L),c&&t(vPe),c&&t(yr),_(uL),_(vL),_(FL),_(TL),_(ML),c&&t(FPe),c&&t(Dc),_(EL),c&&t(TPe),c&&t(Lr),_(CL),_(AL),_(yL),_(LL),_(xL),c&&t(MPe),c&&t(Vc),_(kL),c&&t(EPe),c&&t(xr),_(SL),_(BL),_(PL),_($L),_(IL),c&&t(CPe),c&&t(Qc),_(qL),c&&t(wPe),c&&t(kr),_(NL),_(DL),_(GL),_(OL),_(VL),c&&t(APe),c&&t(Uc),_(XL),c&&t(yPe),c&&t(Sr),_(zL),_(WL),_(HL),_(UL),_(JL),c&&t(LPe),c&&t(Kc),_(YL),c&&t(xPe),c&&t(Rr),_(KL),_(e8),_(o8),_(r8),_(t8),c&&t(kPe),c&&t(of),_(a8),c&&t(SPe),c&&t(Br),_(n8),_(l8),_(i8),_(d8),_(c8),c&&t(RPe),c&&t(af),_(f8),c&&t(BPe),c&&t(Pr),_(m8),_(h8),_(p8),_(_8),_(u8),c&&t(PPe),c&&t(lf),_(b8),c&&t($Pe),c&&t($r),_(v8),_(T8),_(M8),_(E8),_(C8),c&&t(IPe),c&&t(ff),_(w8),c&&t(qPe),c&&t(Ir),_(A8),_(L8),_(x8),_(k8),_(S8),c&&t(NPe),c&&t(hf),_(R8),c&&t(jPe),c&&t(qr),_(B8),_($8),_(I8),_(q8),_(N8),c&&t(DPe),c&&t(uf),_(j8),c&&t(GPe),c&&t(Nr),_(D8),_(O8),_(V8),_(X8),_(z8),c&&t(OPe),c&&t(Ff),_(Q8),c&&t(VPe),c&&t(jr),_(W8),_(U8),_(J8),_(Y8),_(K8),c&&t(XPe),c&&t(Ef),_(Z8),c&&t(zPe),c&&t(Dr),_(e7),_(r7),_(t7),_(a7),_(n7),c&&t(QPe),c&&t(Af),_(s7),c&&t(WPe),c&&t(Gr),_(l7),_(d7),_(c7),_(f7),_(m7),c&&t(HPe),c&&t(xf),_(g7),c&&t(UPe),c&&t(Or),_(h7),_(_7),_(u7),_(b7),_(F7),c&&t(JPe),c&&t(Rf),_(T7),c&&t(YPe),c&&t(Vr),_(M7),_(C7),_(w7),_(A7),_(y7)}}}const kAt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SAt(If){return wAt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class qAt extends TAt{constructor(ee){super();MAt(this,ee,SAt,xAt,EAt,{})}}export{qAt as default,kAt as metadata};
