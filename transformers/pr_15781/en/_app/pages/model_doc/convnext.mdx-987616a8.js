import{S as Qi,i as el,s as tl,e as n,k as c,w,t as r,M as ol,c as a,d as o,m as d,a as s,x as C,h as i,b as l,N as nl,F as e,g as f,y,q as b,o as T,B as $,v as al}from"../../chunks/vendor-6b77c823.js";import{T as Bt}from"../../chunks/Tip-39098574.js";import{D as G}from"../../chunks/Docstring-abef54e3.js";import{C as xo}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as pe}from"../../chunks/IconCopyLink-7a11ce68.js";function sl(q){let p,N,m,u,x;return{c(){p=n("p"),N=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){p=a(_,"P",{});var g=s(p);N=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(g,"CODE",{});var F=s(m);u=i(F,"Module"),F.forEach(o),x=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(_,g){f(_,p,g),e(p,N),e(p,m),e(m,u),e(p,x)},d(_){_&&o(p)}}}function rl(q){let p,N,m,u,x;return{c(){p=n("p"),N=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){p=a(_,"P",{});var g=s(p);N=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(g,"CODE",{});var F=s(m);u=i(F,"Module"),F.forEach(o),x=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(_,g){f(_,p,g),e(p,N),e(p,m),e(m,u),e(p,x)},d(_){_&&o(p)}}}function il(q){let p,N,m,u,x;return{c(){p=n("p"),N=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){p=a(_,"P",{});var g=s(p);N=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(g,"CODE",{});var F=s(m);u=i(F,"Module"),F.forEach(o),x=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(_,g){f(_,p,g),e(p,N),e(p,m),e(m,u),e(p,x)},d(_){_&&o(p)}}}function ll(q){let p,N,m,u,x,_,g,F,ee,X,E,S,M,O,te,I,oe,Y;return{c(){p=n("p"),N=r("TF 2.0 models accepts two formats as inputs:"),m=c(),u=n("ul"),x=n("li"),_=r("having all inputs as keyword arguments (like PyTorch models), or"),g=c(),F=n("li"),ee=r("having all inputs as a list, tuple or dict in the first positional arguments."),X=c(),E=n("p"),S=r("This second option is useful when using "),M=n("code"),O=r("tf.keras.Model.fit"),te=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=n("code"),oe=r("model(inputs)"),Y=r(".")},l(v){p=a(v,"P",{});var k=s(p);N=i(k,"TF 2.0 models accepts two formats as inputs:"),k.forEach(o),m=d(v),u=a(v,"UL",{});var P=s(u);x=a(P,"LI",{});var fe=s(x);_=i(fe,"having all inputs as keyword arguments (like PyTorch models), or"),fe.forEach(o),g=d(P),F=a(P,"LI",{});var me=s(F);ee=i(me,"having all inputs as a list, tuple or dict in the first positional arguments."),me.forEach(o),P.forEach(o),X=d(v),E=a(v,"P",{});var j=s(E);S=i(j,"This second option is useful when using "),M=a(j,"CODE",{});var Z=s(M);O=i(Z,"tf.keras.Model.fit"),Z.forEach(o),te=i(j,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=a(j,"CODE",{});var ue=s(I);oe=i(ue,"model(inputs)"),ue.forEach(o),Y=i(j,"."),j.forEach(o)},m(v,k){f(v,p,k),e(p,N),f(v,m,k),f(v,u,k),e(u,x),e(x,_),e(u,g),e(u,F),e(F,ee),f(v,X,k),f(v,E,k),e(E,S),e(E,M),e(M,O),e(E,te),e(E,I),e(I,oe),e(E,Y)},d(v){v&&o(p),v&&o(m),v&&o(u),v&&o(X),v&&o(E)}}}function cl(q){let p,N,m,u,x;return{c(){p=n("p"),N=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){p=a(_,"P",{});var g=s(p);N=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(g,"CODE",{});var F=s(m);u=i(F,"Module"),F.forEach(o),x=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(_,g){f(_,p,g),e(p,N),e(p,m),e(m,u),e(p,x)},d(_){_&&o(p)}}}function dl(q){let p,N,m,u,x,_,g,F,ee,X,E,S,M,O,te,I,oe,Y;return{c(){p=n("p"),N=r("TF 2.0 models accepts two formats as inputs:"),m=c(),u=n("ul"),x=n("li"),_=r("having all inputs as keyword arguments (like PyTorch models), or"),g=c(),F=n("li"),ee=r("having all inputs as a list, tuple or dict in the first positional arguments."),X=c(),E=n("p"),S=r("This second option is useful when using "),M=n("code"),O=r("tf.keras.Model.fit"),te=r(` method which currently requires having all the
tensors in the first argument of the model call function: `),I=n("code"),oe=r("model(inputs)"),Y=r(".")},l(v){p=a(v,"P",{});var k=s(p);N=i(k,"TF 2.0 models accepts two formats as inputs:"),k.forEach(o),m=d(v),u=a(v,"UL",{});var P=s(u);x=a(P,"LI",{});var fe=s(x);_=i(fe,"having all inputs as keyword arguments (like PyTorch models), or"),fe.forEach(o),g=d(P),F=a(P,"LI",{});var me=s(F);ee=i(me,"having all inputs as a list, tuple or dict in the first positional arguments."),me.forEach(o),P.forEach(o),X=d(v),E=a(v,"P",{});var j=s(E);S=i(j,"This second option is useful when using "),M=a(j,"CODE",{});var Z=s(M);O=i(Z,"tf.keras.Model.fit"),Z.forEach(o),te=i(j,` method which currently requires having all the
tensors in the first argument of the model call function: `),I=a(j,"CODE",{});var ue=s(I);oe=i(ue,"model(inputs)"),ue.forEach(o),Y=i(j,"."),j.forEach(o)},m(v,k){f(v,p,k),e(p,N),f(v,m,k),f(v,u,k),e(u,x),e(x,_),e(u,g),e(u,F),e(F,ee),f(v,X,k),f(v,E,k),e(E,S),e(E,M),e(M,O),e(E,te),e(E,I),e(I,oe),e(E,Y)},d(v){v&&o(p),v&&o(m),v&&o(u),v&&o(X),v&&o(E)}}}function hl(q){let p,N,m,u,x;return{c(){p=n("p"),N=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),m=n("code"),u=r("Module"),x=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(_){p=a(_,"P",{});var g=s(p);N=i(g,"Although the recipe for forward pass needs to be defined within this function, one should call the "),m=a(g,"CODE",{});var F=s(m);u=i(F,"Module"),F.forEach(o),x=i(g,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),g.forEach(o)},m(_,g){f(_,p,g),e(p,N),e(p,m),e(m,u),e(p,x)},d(_){_&&o(p)}}}function pl(q){let p,N,m,u,x,_,g,F,ee,X,E,S,M,O,te,I,oe,Y,v,k,P,fe,me,j,Z,ue,an,Kt,wo,Rn,sn,Rt,Gn,rn,Gt,Co,Yn,ln,Ie,qr,cn,Pe,Zn,Yt,Jn,Qn,dn,A,ea,Ze,ta,oa,Je,na,aa,Qe,sa,ra,et,ia,la,tt,ca,da,hn,ge,ze,yo,ot,ha,bo,pa,pn,_e,nt,fa,at,ma,Zt,ua,ga,fn,ve,qe,To,st,_a,$o,va,mn,L,rt,xa,xe,wa,Jt,Ca,ya,it,ba,Ta,$a,we,Na,Qt,Fa,Ea,eo,ka,ja,Ma,No,Ia,Pa,lt,un,Ce,Se,Fo,ct,za,Eo,qa,gn,ne,dt,Sa,ko,Aa,Oa,ht,La,to,Da,Xa,_n,ye,Ae,jo,pt,Wa,Mo,Va,vn,ae,ft,Ha,mt,Ua,ut,Ba,Ka,Ra,W,gt,Ga,be,Ya,oo,Za,Ja,Io,Qa,es,ts,Oe,os,Po,ns,as,_t,xn,Te,Le,zo,vt,ss,qo,rs,wn,K,xt,is,So,ls,cs,wt,ds,Ct,hs,ps,fs,V,yt,ms,$e,us,no,gs,_s,Ao,vs,xs,ws,De,Cs,Oo,ys,bs,bt,Cn,Ne,Xe,Lo,Tt,Ts,Do,$s,yn,R,$t,Ns,Xo,Fs,Es,Nt,ks,Ft,js,Ms,Is,H,Et,Ps,Fe,zs,ao,qs,Ss,Wo,As,Os,Ls,We,Ds,Vo,Xs,Ws,kt,bn,Ee,Ve,Ho,jt,Vs,Uo,Hs,Tn,D,Mt,Us,It,Bs,so,Ks,Rs,Gs,Pt,Ys,zt,Zs,Js,Qs,He,er,U,qt,tr,ke,or,ro,nr,ar,Bo,sr,rr,ir,Ue,lr,Ko,cr,dr,St,$n,je,Be,Ro,At,hr,Go,pr,Nn,z,Ot,fr,Yo,mr,ur,Lt,gr,io,_r,vr,xr,Dt,wr,Xt,Cr,yr,br,Ke,Tr,B,Wt,$r,Me,Nr,lo,Fr,Er,Zo,kr,jr,Mr,Re,Ir,Jo,Pr,zr,Vt,Fn;return _=new pe({}),O=new pe({}),ot=new pe({}),nt=new G({props:{name:"class transformers.models.convnext.modeling_convnext.ConvNextModelOutput",anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"pooler_output",val:": typing.Optional[torch.FloatTensor] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_convnext.py#L83",parametersDescription:[{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the model.`,name:"last_hidden_state"},{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.pooler_output",description:`<strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.dim[-1])</code>) &#x2014;
Global average pooling of the last feature map followed by a layernorm.`,name:"pooler_output"},{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.`,name:"hidden_states"}]}}),st=new pe({}),rt=new G({props:{name:"class transformers.ConvNextConfig",anchor:"transformers.ConvNextConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 4"},{name:"num_stages",val:" = 4"},{name:"hidden_sizes",val:" = None"},{name:"depths",val:" = None"},{name:"hidden_act",val:" = 'gelu'"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"layer_scale_init_value",val:" = 1e-06"},{name:"drop_path_rate",val:" = 0.0"},{name:"out_indices",val:" = [3, 5, 7, 11]"},{name:"pool_scales",val:" = [1, 2, 3, 6]"},{name:"use_auxiliary_head",val:" = True"},{name:"auxiliary_loss_weight",val:" = 0.4"},{name:"auxiliary_channels",val:" = 256"},{name:"auxiliary_num_convs",val:" = 1"},{name:"auxiliary_concat_input",val:" = False"},{name:"semantic_loss_ignore_index",val:" = 255"},{name:"apply_norm_after_stage",val:" = False"},{name:"legacy_output",val:" = False"},{name:"image_size",val:" = 224"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/configuration_convnext.py#L29",parametersDescription:[{anchor:"transformers.ConvNextConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ConvNextConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
Patch size to use in the patch embedding layer.`,name:"patch_size"},{anchor:"transformers.ConvNextConfig.num_stages",description:`<strong>num_stages</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
The number of stages in the model.`,name:"num_stages"},{anchor:"transformers.ConvNextConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [96, 192, 384, 768]) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ConvNextConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [3, 3, 9, 3]) &#x2014;
Depth (number of blocks) for each stage.`,name:"depths"},{anchor:"transformers.ConvNextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ConvNextConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ConvNextConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ConvNextConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The initial value for the layer scale.`,name:"layer_scale_init_value"},{anchor:"transformers.ConvNextConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The drop rate for stochastic depth.`,name:"drop_path_rate"},{anchor:"transformers.ConvNextConfig.out_indices",description:`<strong>out_indices</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[3, 5, 7, 11]</code>) &#x2014;
The indices of the output channels.`,name:"out_indices"},{anchor:"transformers.ConvNextConfig.pool_scales",description:`<strong>pool_scales</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[1, 2, 3, 6]</code>) &#x2014;
The scales of the pooling layers.`,name:"pool_scales"},{anchor:"transformers.ConvNextConfig.use_auxiliary_head",description:`<strong>use_auxiliary_head</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to use the auxiliary head.`,name:"use_auxiliary_head"},{anchor:"transformers.ConvNextConfig.auxiliary_loss_weight",description:`<strong>auxiliary_loss_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 0.4) &#x2014;
The weight of the auxiliary loss.`,name:"auxiliary_loss_weight"},{anchor:"transformers.ConvNextConfig.auxiliary_channels",description:`<strong>auxiliary_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The number of channels in the auxiliary head.`,name:"auxiliary_channels"},{anchor:"transformers.ConvNextConfig.auxiliary_hidden_sizes",description:`<strong>auxiliary_hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[128, 128]</code>) &#x2014;
The dimensionality (hidden size) of the auxiliary head.`,name:"auxiliary_hidden_sizes"},{anchor:"transformers.ConvNextConfig.auxiliary_depths",description:`<strong>auxiliary_depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to <code>[3, 3]</code>) &#x2014;
The depth (number of blocks) of the auxiliary head.`,name:"auxiliary_depths"},{anchor:"transformers.ConvNextConfig.legacy_output",description:`<strong>legacy_output</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to return the legacy outputs or not (with logits of shape <code>height / 4 , width / 4</code>)</p>
<p>This argument is only present for backward compatibility reasons and will be removed in v5 of Transformers.`,name:"legacy_output"}]}}),lt=new xo({props:{code:`from transformers import ConvNextModel, ConvNextConfig

# Initializing a ConvNext convnext-tiny-224 style configuration
configuration = ConvNextConfig()
# Initializing a model from the convnext-tiny-224 style configuration
model = ConvNextModel(configuration)
# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextModel, ConvNextConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ConvNext convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ConvNextConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),ct=new pe({}),dt=new G({props:{name:"class transformers.ConvNextFeatureExtractor",anchor:"transformers.ConvNextFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 224"},{name:"resample",val:" = 3"},{name:"crop_pct",val:" = None"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/feature_extraction_convnext.py#L36",parametersDescription:[{anchor:"transformers.ConvNextFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize (and optionally center crop) the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.ConvNextFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Resize the input to the given size. If 384 or larger, the image is resized to (<code>size</code>, <code>size</code>). Else, the
smaller edge of the image will be matched to int(<code>size</code>/ <code>crop_pct</code>), after which the image is cropped to
<code>size</code>. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.ConvNextFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.ConvNextFeatureExtractor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The percentage of the image to crop. If <code>None</code>, then a cropping percentage of 224 / 256 is used. Only has
an effect if <code>do_resize</code> is set to <code>True</code> and <code>size</code> &lt; 384.`,name:"crop_pct"},{anchor:"transformers.ConvNextFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.ConvNextFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.ConvNextFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}]}}),pt=new pe({}),ft=new G({props:{name:"class transformers.ConvNextModel",anchor:"transformers.ConvNextModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_convnext.py#L421",parametersDescription:[{anchor:"transformers.ConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),gt=new G({props:{name:"forward",anchor:"transformers.ConvNextModel.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_convnext.py#L436",parametersDescription:[{anchor:"transformers.ConvNextModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15781/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"
>transformers.models.convnext.modeling_convnext.ConvNextModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the model.</li>
<li><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.dim[-1])</code>) \u2014 Global average pooling of the last feature map followed by a layernorm.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"
>transformers.models.convnext.modeling_convnext.ConvNextModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Oe=new Bt({props:{$$slots:{default:[sl]},$$scope:{ctx:q}}}),_t=new xo({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">768</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),vt=new pe({}),xt=new G({props:{name:"class transformers.ConvNextForImageClassification",anchor:"transformers.ConvNextForImageClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_convnext.py#L487",parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),yt=new G({props:{name:"forward",anchor:"transformers.ConvNextForImageClassification.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_convnext.py#L502",parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15781/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ConvNextForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <code>transformers.models.convnext.modeling_convnext.ConvNextClassifierOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.models.convnext.modeling_convnext.ConvNextClassifierOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),De=new Bt({props:{$$slots:{default:[rl]},$$scope:{ctx:q}}}),bt=new xo({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
tabby, tabby cat`}}),Tt=new pe({}),$t=new G({props:{name:"class transformers.ConvNextForSemanticSegmentation",anchor:"transformers.ConvNextForSemanticSegmentation",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_convnext.py#L773",parametersDescription:[{anchor:"transformers.ConvNextForSemanticSegmentation.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Et=new G({props:{name:"forward",anchor:"transformers.ConvNextForSemanticSegmentation.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"},{name:"legacy_output",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_convnext.py#L801",parametersDescription:[{anchor:"transformers.ConvNextForSemanticSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextForSemanticSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextForSemanticSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15781/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ConvNextForSemanticSegmentation.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Ground truth semantic segmentation maps for computing the loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels &gt; 1</code>, a classification loss is computed (Cross-Entropy).`,name:"labels"},{anchor:"transformers.ConvNextForSemanticSegmentation.forward.legacy_output",description:`<strong>legacy_output</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to return the legacy outputs or not (with logits of shape <code>height / 4 , width / 4</code>). Will default
to <code>self.config.legacy_output</code>.</p>
<p>This argument is only present for backward compatibility reasons and will be removed in v5 of Transformers.`,name:"legacy_output"}],returnDescription:`
<p>A <code>transformers.modeling_outputs.SemanticSegmentationModelOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels, logits_height, logits_width)</code>) \u2014 Classification scores for each pixel.</p>
<Tip warning={true}>
<p>The logits returned do not necessarily have the same size as the <code>pixel_values</code> passed as inputs. This is
to avoid doing two interpolations and lose some quality when a user needs to resize the logits to the
original image size as post-processing. You should always check your logits shape and resize as needed.</p>
</Tip>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, patch_size, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, patch_size, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><code>transformers.modeling_outputs.SemanticSegmentationModelOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),We=new Bt({props:{$$slots:{default:[il]},$$scope:{ctx:q}}}),kt=new xo({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextForSemanticSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("microsoft/beit-base-finetuned-ade-640-640")
model = ConvNextForSemanticSegmentation.from_pretrained("microsoft/beit-base-finetuned-ade-640-640")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
# logits are of shape (batch_size, num_labels, height, width)
logits = outputs.logits`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextForSemanticSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;microsoft/beit-base-finetuned-ade-640-640&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;microsoft/beit-base-finetuned-ade-640-640&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># logits are of shape (batch_size, num_labels, height, width)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits`}}),jt=new pe({}),Mt=new G({props:{name:"class transformers.TFConvNextModel",anchor:"transformers.TFConvNextModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_tf_convnext.py#L428",parametersDescription:[{anchor:"transformers.TFConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),He=new Bt({props:{$$slots:{default:[ll]},$$scope:{ctx:q}}}),qt=new G({props:{name:"call",anchor:"transformers.TFConvNextModel.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"training",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_tf_convnext.py#L433",parametersDescription:[{anchor:"transformers.TFConvNextModel.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextFeatureExtractor">ConvNextFeatureExtractor</a>. See
<code>ConvNextFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextModel.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextModel.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15781/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used
in eager mode, in graph mode the value will always be set to True.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15781/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>pooler_output</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, hidden_size)</code>) \u2014 Last layer hidden-state of the first token of the sequence (classification token) further processed by a
Linear layer and a Tanh activation function. The Linear layer weights are trained from the next sentence
prediction (classification) objective during pretraining.</p>
<p>This output is usually <em>not</em> a good summary of the semantic content of the input, you\u2019re often better with
averaging or pooling the sequence of hidden-states for the whole input sequence.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15781/en/main_classes/output#transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling"
>transformers.modeling_tf_outputs.TFBaseModelOutputWithPooling</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Ue=new Bt({props:{$$slots:{default:[cl]},$$scope:{ctx:q}}}),St=new xo({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),At=new pe({}),Ot=new G({props:{name:"class transformers.TFConvNextForImageClassification",anchor:"transformers.TFConvNextForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_tf_convnext.py#L496",parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.TFPreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ke=new Bt({props:{$$slots:{default:[dl]},$$scope:{ctx:q}}}),Wt=new G({props:{name:"call",anchor:"transformers.TFConvNextForImageClassification.call",parameters:[{name:"pixel_values",val:": typing.Union[typing.List[tensorflow.python.framework.ops.Tensor], typing.List[numpy.ndarray], typing.List[tensorflow.python.keras.engine.keras_tensor.KerasTensor], typing.Dict[str, tensorflow.python.framework.ops.Tensor], typing.Dict[str, numpy.ndarray], typing.Dict[str, tensorflow.python.keras.engine.keras_tensor.KerasTensor], tensorflow.python.framework.ops.Tensor, numpy.ndarray, tensorflow.python.keras.engine.keras_tensor.KerasTensor, NoneType] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"},{name:"labels",val:": typing.Union[numpy.ndarray, tensorflow.python.framework.ops.Tensor, NoneType] = None"},{name:"training",val:": typing.Optional[bool] = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/convnext/modeling_tf_convnext.py#L511",parametersDescription:[{anchor:"transformers.TFConvNextForImageClassification.call.pixel_values",description:`<strong>pixel_values</strong> (<code>np.ndarray</code>, <code>tf.Tensor</code>, <code>List[tf.Tensor]</code> \`<code>Dict[str, tf.Tensor]</code> or <code>Dict[str, np.ndarray]</code> and each example must have the shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextFeatureExtractor">ConvNextFeatureExtractor</a>. See
<code>ConvNextFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.TFConvNextForImageClassification.call.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail. This argument can be used only in eager mode, in graph mode the value in the config will be
used instead.`,name:"output_hidden_states"},{anchor:"transformers.TFConvNextForImageClassification.call.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15781/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple. This argument can be used
in eager mode, in graph mode the value will always be set to True.`,name:"return_dict"},{anchor:"transformers.TFConvNextForImageClassification.call.labels",description:`<strong>labels</strong> (<code>tf.Tensor</code> or <code>np.ndarray</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15781/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or a tuple of <code>tf.Tensor</code> (if
<code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various elements depending on the
configuration (<a
  href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, )</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</p>
</li>
<li>
<p><strong>logits</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for the output of the embeddings + one for the output of each layer) of shape
<code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(tf.Tensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>tf.Tensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15781/en/main_classes/output#transformers.modeling_tf_outputs.TFSequenceClassifierOutput"
>transformers.modeling_tf_outputs.TFSequenceClassifierOutput</a> or <code>tuple(tf.Tensor)</code></p>
`}}),Re=new Bt({props:{$$slots:{default:[hl]},$$scope:{ctx:q}}}),Vt=new xo({props:{code:`from transformers import ConvNextFeatureExtractor, TFConvNextForImageClassification
import tensorflow as tf
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = TFViTForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(images=image, return_tensors="tf")
outputs = model(**inputs)
logits = outputs.logits
# model predicts one of the 1000 ImageNet classes
predicted_class_idx = tf.math.argmax(logits, axis=-1)[0]
print("Predicted class:", model.config.id2label[int(predicted_class_idx)])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, TFConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFViTForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>logits = outputs.logits
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_class_idx = tf.math.argmax(logits, axis=-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predicted class:&quot;</span>, model.config.id2label[<span class="hljs-built_in">int</span>(predicted_class_idx)])`}}),{c(){p=n("meta"),N=c(),m=n("h1"),u=n("a"),x=n("span"),w(_.$$.fragment),g=c(),F=n("span"),ee=r("ConvNeXT"),X=c(),E=n("h2"),S=n("a"),M=n("span"),w(O.$$.fragment),te=c(),I=n("span"),oe=r("Overview"),Y=c(),v=n("p"),k=r("The ConvNeXT model was proposed in "),P=n("a"),fe=r("A ConvNet for the 2020s"),me=r(` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),j=c(),Z=n("p"),ue=r("The abstract from the paper is the following:"),an=c(),Kt=n("p"),wo=n("em"),Rn=r(`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),sn=c(),Rt=n("p"),Gn=r("Tips:"),rn=c(),Gt=n("ul"),Co=n("li"),Yn=r("See the code examples below each model regarding usage."),ln=c(),Ie=n("img"),cn=c(),Pe=n("small"),Zn=r("ConvNeXT architecture. Taken from the "),Yt=n("a"),Jn=r("original paper"),Qn=r("."),dn=c(),A=n("p"),ea=r("This model was contributed by "),Ze=n("a"),ta=r("nielsr"),oa=r(". TensorFlow version of the model was contributed by "),Je=n("a"),na=r("ariG23498"),aa=r(`,
`),Qe=n("a"),sa=r("gante"),ra=r(", and "),et=n("a"),ia=r("sayakpaul"),la=r(" (equal contribution). The original code can be found "),tt=n("a"),ca=r("here"),da=r("."),hn=c(),ge=n("h2"),ze=n("a"),yo=n("span"),w(ot.$$.fragment),ha=c(),bo=n("span"),pa=r("ConvNeXT specific outputs"),pn=c(),_e=n("div"),w(nt.$$.fragment),fa=c(),at=n("p"),ma=r("Class for "),Zt=n("a"),ua=r("ConvNextModel"),ga=r("\u2019s outputs, with potential hidden states (feature maps)."),fn=c(),ve=n("h2"),qe=n("a"),To=n("span"),w(st.$$.fragment),_a=c(),$o=n("span"),va=r("ConvNextConfig"),mn=c(),L=n("div"),w(rt.$$.fragment),xa=c(),xe=n("p"),wa=r("This is the configuration class to store the configuration of a "),Jt=n("a"),Ca=r("ConvNextModel"),ya=r(`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),it=n("a"),ba=r("facebook/convnext-tiny-224"),Ta=r(" architecture."),$a=c(),we=n("p"),Na=r("Configuration objects inherit from "),Qt=n("a"),Fa=r("PretrainedConfig"),Ea=r(` and can be used to control the model outputs. Read the
documentation from `),eo=n("a"),ka=r("PretrainedConfig"),ja=r(" for more information."),Ma=c(),No=n("p"),Ia=r("Example:"),Pa=c(),w(lt.$$.fragment),un=c(),Ce=n("h2"),Se=n("a"),Fo=n("span"),w(ct.$$.fragment),za=c(),Eo=n("span"),qa=r("ConvNextFeatureExtractor"),gn=c(),ne=n("div"),w(dt.$$.fragment),Sa=c(),ko=n("p"),Aa=r("Constructs a ConvNeXT feature extractor."),Oa=c(),ht=n("p"),La=r("This feature extractor inherits from "),to=n("a"),Da=r("FeatureExtractionMixin"),Xa=r(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),_n=c(),ye=n("h2"),Ae=n("a"),jo=n("span"),w(pt.$$.fragment),Wa=c(),Mo=n("span"),Va=r("ConvNextModel"),vn=c(),ae=n("div"),w(ft.$$.fragment),Ha=c(),mt=n("p"),Ua=r(`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),ut=n("a"),Ba=r("torch.nn.Module"),Ka=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ra=c(),W=n("div"),w(gt.$$.fragment),Ga=c(),be=n("p"),Ya=r("The "),oo=n("a"),Za=r("ConvNextModel"),Ja=r(" forward method, overrides the "),Io=n("code"),Qa=r("__call__"),es=r(" special method."),ts=c(),w(Oe.$$.fragment),os=c(),Po=n("p"),ns=r("Example:"),as=c(),w(_t.$$.fragment),xn=c(),Te=n("h2"),Le=n("a"),zo=n("span"),w(vt.$$.fragment),ss=c(),qo=n("span"),rs=r("ConvNextForImageClassification"),wn=c(),K=n("div"),w(xt.$$.fragment),is=c(),So=n("p"),ls=r(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),cs=c(),wt=n("p"),ds=r("This model is a PyTorch "),Ct=n("a"),hs=r("torch.nn.Module"),ps=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),fs=c(),V=n("div"),w(yt.$$.fragment),ms=c(),$e=n("p"),us=r("The "),no=n("a"),gs=r("ConvNextForImageClassification"),_s=r(" forward method, overrides the "),Ao=n("code"),vs=r("__call__"),xs=r(" special method."),ws=c(),w(De.$$.fragment),Cs=c(),Oo=n("p"),ys=r("Example:"),bs=c(),w(bt.$$.fragment),Cn=c(),Ne=n("h2"),Xe=n("a"),Lo=n("span"),w(Tt.$$.fragment),Ts=c(),Do=n("span"),$s=r("ConvNextForSemanticSegmentation"),yn=c(),R=n("div"),w($t.$$.fragment),Ns=c(),Xo=n("p"),Fs=r("ConvNext Model transformer with a semantic segmentation head on top e.g. for ADE20k, CityScapes."),Es=c(),Nt=n("p"),ks=r("This model is a PyTorch "),Ft=n("a"),js=r("torch.nn.Module"),Ms=r(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Is=c(),H=n("div"),w(Et.$$.fragment),Ps=c(),Fe=n("p"),zs=r("The "),ao=n("a"),qs=r("ConvNextForSemanticSegmentation"),Ss=r(" forward method, overrides the "),Wo=n("code"),As=r("__call__"),Os=r(" special method."),Ls=c(),w(We.$$.fragment),Ds=c(),Vo=n("p"),Xs=r("Examples:"),Ws=c(),w(kt.$$.fragment),bn=c(),Ee=n("h2"),Ve=n("a"),Ho=n("span"),w(jt.$$.fragment),Vs=c(),Uo=n("span"),Hs=r("TFConvNextModel"),Tn=c(),D=n("div"),w(Mt.$$.fragment),Us=c(),It=n("p"),Bs=r(`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),so=n("a"),Ks=r("TFPreTrainedModel"),Rs=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Gs=c(),Pt=n("p"),Ys=r("This model is also a "),zt=n("a"),Zs=r("tf.keras.Model"),Js=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Qs=c(),w(He.$$.fragment),er=c(),U=n("div"),w(qt.$$.fragment),tr=c(),ke=n("p"),or=r("The "),ro=n("a"),nr=r("TFConvNextModel"),ar=r(" forward method, overrides the "),Bo=n("code"),sr=r("__call__"),rr=r(" special method."),ir=c(),w(Ue.$$.fragment),lr=c(),Ko=n("p"),cr=r("Examples:"),dr=c(),w(St.$$.fragment),$n=c(),je=n("h2"),Be=n("a"),Ro=n("span"),w(At.$$.fragment),hr=c(),Go=n("span"),pr=r("TFConvNextForImageClassification"),Nn=c(),z=n("div"),w(Ot.$$.fragment),fr=c(),Yo=n("p"),mr=r(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),ur=c(),Lt=n("p"),gr=r("This model inherits from "),io=n("a"),_r=r("TFPreTrainedModel"),vr=r(`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),xr=c(),Dt=n("p"),wr=r("This model is also a "),Xt=n("a"),Cr=r("tf.keras.Model"),yr=r(` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),br=c(),w(Ke.$$.fragment),Tr=c(),B=n("div"),w(Wt.$$.fragment),$r=c(),Me=n("p"),Nr=r("The "),lo=n("a"),Fr=r("TFConvNextForImageClassification"),Er=r(" forward method, overrides the "),Zo=n("code"),kr=r("__call__"),jr=r(" special method."),Mr=c(),w(Re.$$.fragment),Ir=c(),Jo=n("p"),Pr=r("Examples:"),zr=c(),w(Vt.$$.fragment),this.h()},l(t){const h=ol('[data-svelte="svelte-1phssyn"]',document.head);p=a(h,"META",{name:!0,content:!0}),h.forEach(o),N=d(t),m=a(t,"H1",{class:!0});var Ht=s(m);u=a(Ht,"A",{id:!0,class:!0,href:!0});var Qo=s(u);x=a(Qo,"SPAN",{});var en=s(x);C(_.$$.fragment,en),en.forEach(o),Qo.forEach(o),g=d(Ht),F=a(Ht,"SPAN",{});var tn=s(F);ee=i(tn,"ConvNeXT"),tn.forEach(o),Ht.forEach(o),X=d(t),E=a(t,"H2",{class:!0});var Ut=s(E);S=a(Ut,"A",{id:!0,class:!0,href:!0});var on=s(S);M=a(on,"SPAN",{});var nn=s(M);C(O.$$.fragment,nn),nn.forEach(o),on.forEach(o),te=d(Ut),I=a(Ut,"SPAN",{});var Sr=s(I);oe=i(Sr,"Overview"),Sr.forEach(o),Ut.forEach(o),Y=d(t),v=a(t,"P",{});var En=s(v);k=i(En,"The ConvNeXT model was proposed in "),P=a(En,"A",{href:!0,rel:!0});var Ar=s(P);fe=i(Ar,"A ConvNet for the 2020s"),Ar.forEach(o),me=i(En,` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),En.forEach(o),j=d(t),Z=a(t,"P",{});var Or=s(Z);ue=i(Or,"The abstract from the paper is the following:"),Or.forEach(o),an=d(t),Kt=a(t,"P",{});var Lr=s(Kt);wo=a(Lr,"EM",{});var Dr=s(wo);Rn=i(Dr,`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),Dr.forEach(o),Lr.forEach(o),sn=d(t),Rt=a(t,"P",{});var Xr=s(Rt);Gn=i(Xr,"Tips:"),Xr.forEach(o),rn=d(t),Gt=a(t,"UL",{});var Wr=s(Gt);Co=a(Wr,"LI",{});var Vr=s(Co);Yn=i(Vr,"See the code examples below each model regarding usage."),Vr.forEach(o),Wr.forEach(o),ln=d(t),Ie=a(t,"IMG",{src:!0,alt:!0,width:!0}),cn=d(t),Pe=a(t,"SMALL",{});var kn=s(Pe);Zn=i(kn,"ConvNeXT architecture. Taken from the "),Yt=a(kn,"A",{href:!0});var Hr=s(Yt);Jn=i(Hr,"original paper"),Hr.forEach(o),Qn=i(kn,"."),kn.forEach(o),dn=d(t),A=a(t,"P",{});var J=s(A);ea=i(J,"This model was contributed by "),Ze=a(J,"A",{href:!0,rel:!0});var Ur=s(Ze);ta=i(Ur,"nielsr"),Ur.forEach(o),oa=i(J,". TensorFlow version of the model was contributed by "),Je=a(J,"A",{href:!0,rel:!0});var Br=s(Je);na=i(Br,"ariG23498"),Br.forEach(o),aa=i(J,`,
`),Qe=a(J,"A",{href:!0,rel:!0});var Kr=s(Qe);sa=i(Kr,"gante"),Kr.forEach(o),ra=i(J,", and "),et=a(J,"A",{href:!0,rel:!0});var Rr=s(et);ia=i(Rr,"sayakpaul"),Rr.forEach(o),la=i(J," (equal contribution). The original code can be found "),tt=a(J,"A",{href:!0,rel:!0});var Gr=s(tt);ca=i(Gr,"here"),Gr.forEach(o),da=i(J,"."),J.forEach(o),hn=d(t),ge=a(t,"H2",{class:!0});var jn=s(ge);ze=a(jn,"A",{id:!0,class:!0,href:!0});var Yr=s(ze);yo=a(Yr,"SPAN",{});var Zr=s(yo);C(ot.$$.fragment,Zr),Zr.forEach(o),Yr.forEach(o),ha=d(jn),bo=a(jn,"SPAN",{});var Jr=s(bo);pa=i(Jr,"ConvNeXT specific outputs"),Jr.forEach(o),jn.forEach(o),pn=d(t),_e=a(t,"DIV",{class:!0});var Mn=s(_e);C(nt.$$.fragment,Mn),fa=d(Mn),at=a(Mn,"P",{});var In=s(at);ma=i(In,"Class for "),Zt=a(In,"A",{href:!0});var Qr=s(Zt);ua=i(Qr,"ConvNextModel"),Qr.forEach(o),ga=i(In,"\u2019s outputs, with potential hidden states (feature maps)."),In.forEach(o),Mn.forEach(o),fn=d(t),ve=a(t,"H2",{class:!0});var Pn=s(ve);qe=a(Pn,"A",{id:!0,class:!0,href:!0});var ei=s(qe);To=a(ei,"SPAN",{});var ti=s(To);C(st.$$.fragment,ti),ti.forEach(o),ei.forEach(o),_a=d(Pn),$o=a(Pn,"SPAN",{});var oi=s($o);va=i(oi,"ConvNextConfig"),oi.forEach(o),Pn.forEach(o),mn=d(t),L=a(t,"DIV",{class:!0});var se=s(L);C(rt.$$.fragment,se),xa=d(se),xe=a(se,"P",{});var co=s(xe);wa=i(co,"This is the configuration class to store the configuration of a "),Jt=a(co,"A",{href:!0});var ni=s(Jt);Ca=i(ni,"ConvNextModel"),ni.forEach(o),ya=i(co,`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),it=a(co,"A",{href:!0,rel:!0});var ai=s(it);ba=i(ai,"facebook/convnext-tiny-224"),ai.forEach(o),Ta=i(co," architecture."),co.forEach(o),$a=d(se),we=a(se,"P",{});var ho=s(we);Na=i(ho,"Configuration objects inherit from "),Qt=a(ho,"A",{href:!0});var si=s(Qt);Fa=i(si,"PretrainedConfig"),si.forEach(o),Ea=i(ho,` and can be used to control the model outputs. Read the
documentation from `),eo=a(ho,"A",{href:!0});var ri=s(eo);ka=i(ri,"PretrainedConfig"),ri.forEach(o),ja=i(ho," for more information."),ho.forEach(o),Ma=d(se),No=a(se,"P",{});var ii=s(No);Ia=i(ii,"Example:"),ii.forEach(o),Pa=d(se),C(lt.$$.fragment,se),se.forEach(o),un=d(t),Ce=a(t,"H2",{class:!0});var zn=s(Ce);Se=a(zn,"A",{id:!0,class:!0,href:!0});var li=s(Se);Fo=a(li,"SPAN",{});var ci=s(Fo);C(ct.$$.fragment,ci),ci.forEach(o),li.forEach(o),za=d(zn),Eo=a(zn,"SPAN",{});var di=s(Eo);qa=i(di,"ConvNextFeatureExtractor"),di.forEach(o),zn.forEach(o),gn=d(t),ne=a(t,"DIV",{class:!0});var po=s(ne);C(dt.$$.fragment,po),Sa=d(po),ko=a(po,"P",{});var hi=s(ko);Aa=i(hi,"Constructs a ConvNeXT feature extractor."),hi.forEach(o),Oa=d(po),ht=a(po,"P",{});var qn=s(ht);La=i(qn,"This feature extractor inherits from "),to=a(qn,"A",{href:!0});var pi=s(to);Da=i(pi,"FeatureExtractionMixin"),pi.forEach(o),Xa=i(qn,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),qn.forEach(o),po.forEach(o),_n=d(t),ye=a(t,"H2",{class:!0});var Sn=s(ye);Ae=a(Sn,"A",{id:!0,class:!0,href:!0});var fi=s(Ae);jo=a(fi,"SPAN",{});var mi=s(jo);C(pt.$$.fragment,mi),mi.forEach(o),fi.forEach(o),Wa=d(Sn),Mo=a(Sn,"SPAN",{});var ui=s(Mo);Va=i(ui,"ConvNextModel"),ui.forEach(o),Sn.forEach(o),vn=d(t),ae=a(t,"DIV",{class:!0});var fo=s(ae);C(ft.$$.fragment,fo),Ha=d(fo),mt=a(fo,"P",{});var An=s(mt);Ua=i(An,`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),ut=a(An,"A",{href:!0,rel:!0});var gi=s(ut);Ba=i(gi,"torch.nn.Module"),gi.forEach(o),Ka=i(An,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),An.forEach(o),Ra=d(fo),W=a(fo,"DIV",{class:!0});var re=s(W);C(gt.$$.fragment,re),Ga=d(re),be=a(re,"P",{});var mo=s(be);Ya=i(mo,"The "),oo=a(mo,"A",{href:!0});var _i=s(oo);Za=i(_i,"ConvNextModel"),_i.forEach(o),Ja=i(mo," forward method, overrides the "),Io=a(mo,"CODE",{});var vi=s(Io);Qa=i(vi,"__call__"),vi.forEach(o),es=i(mo," special method."),mo.forEach(o),ts=d(re),C(Oe.$$.fragment,re),os=d(re),Po=a(re,"P",{});var xi=s(Po);ns=i(xi,"Example:"),xi.forEach(o),as=d(re),C(_t.$$.fragment,re),re.forEach(o),fo.forEach(o),xn=d(t),Te=a(t,"H2",{class:!0});var On=s(Te);Le=a(On,"A",{id:!0,class:!0,href:!0});var wi=s(Le);zo=a(wi,"SPAN",{});var Ci=s(zo);C(vt.$$.fragment,Ci),Ci.forEach(o),wi.forEach(o),ss=d(On),qo=a(On,"SPAN",{});var yi=s(qo);rs=i(yi,"ConvNextForImageClassification"),yi.forEach(o),On.forEach(o),wn=d(t),K=a(t,"DIV",{class:!0});var Ge=s(K);C(xt.$$.fragment,Ge),is=d(Ge),So=a(Ge,"P",{});var bi=s(So);ls=i(bi,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),bi.forEach(o),cs=d(Ge),wt=a(Ge,"P",{});var Ln=s(wt);ds=i(Ln,"This model is a PyTorch "),Ct=a(Ln,"A",{href:!0,rel:!0});var Ti=s(Ct);hs=i(Ti,"torch.nn.Module"),Ti.forEach(o),ps=i(Ln,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Ln.forEach(o),fs=d(Ge),V=a(Ge,"DIV",{class:!0});var ie=s(V);C(yt.$$.fragment,ie),ms=d(ie),$e=a(ie,"P",{});var uo=s($e);us=i(uo,"The "),no=a(uo,"A",{href:!0});var $i=s(no);gs=i($i,"ConvNextForImageClassification"),$i.forEach(o),_s=i(uo," forward method, overrides the "),Ao=a(uo,"CODE",{});var Ni=s(Ao);vs=i(Ni,"__call__"),Ni.forEach(o),xs=i(uo," special method."),uo.forEach(o),ws=d(ie),C(De.$$.fragment,ie),Cs=d(ie),Oo=a(ie,"P",{});var Fi=s(Oo);ys=i(Fi,"Example:"),Fi.forEach(o),bs=d(ie),C(bt.$$.fragment,ie),ie.forEach(o),Ge.forEach(o),Cn=d(t),Ne=a(t,"H2",{class:!0});var Dn=s(Ne);Xe=a(Dn,"A",{id:!0,class:!0,href:!0});var Ei=s(Xe);Lo=a(Ei,"SPAN",{});var ki=s(Lo);C(Tt.$$.fragment,ki),ki.forEach(o),Ei.forEach(o),Ts=d(Dn),Do=a(Dn,"SPAN",{});var ji=s(Do);$s=i(ji,"ConvNextForSemanticSegmentation"),ji.forEach(o),Dn.forEach(o),yn=d(t),R=a(t,"DIV",{class:!0});var Ye=s(R);C($t.$$.fragment,Ye),Ns=d(Ye),Xo=a(Ye,"P",{});var Mi=s(Xo);Fs=i(Mi,"ConvNext Model transformer with a semantic segmentation head on top e.g. for ADE20k, CityScapes."),Mi.forEach(o),Es=d(Ye),Nt=a(Ye,"P",{});var Xn=s(Nt);ks=i(Xn,"This model is a PyTorch "),Ft=a(Xn,"A",{href:!0,rel:!0});var Ii=s(Ft);js=i(Ii,"torch.nn.Module"),Ii.forEach(o),Ms=i(Xn,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Xn.forEach(o),Is=d(Ye),H=a(Ye,"DIV",{class:!0});var le=s(H);C(Et.$$.fragment,le),Ps=d(le),Fe=a(le,"P",{});var go=s(Fe);zs=i(go,"The "),ao=a(go,"A",{href:!0});var Pi=s(ao);qs=i(Pi,"ConvNextForSemanticSegmentation"),Pi.forEach(o),Ss=i(go," forward method, overrides the "),Wo=a(go,"CODE",{});var zi=s(Wo);As=i(zi,"__call__"),zi.forEach(o),Os=i(go," special method."),go.forEach(o),Ls=d(le),C(We.$$.fragment,le),Ds=d(le),Vo=a(le,"P",{});var qi=s(Vo);Xs=i(qi,"Examples:"),qi.forEach(o),Ws=d(le),C(kt.$$.fragment,le),le.forEach(o),Ye.forEach(o),bn=d(t),Ee=a(t,"H2",{class:!0});var Wn=s(Ee);Ve=a(Wn,"A",{id:!0,class:!0,href:!0});var Si=s(Ve);Ho=a(Si,"SPAN",{});var Ai=s(Ho);C(jt.$$.fragment,Ai),Ai.forEach(o),Si.forEach(o),Vs=d(Wn),Uo=a(Wn,"SPAN",{});var Oi=s(Uo);Hs=i(Oi,"TFConvNextModel"),Oi.forEach(o),Wn.forEach(o),Tn=d(t),D=a(t,"DIV",{class:!0});var ce=s(D);C(Mt.$$.fragment,ce),Us=d(ce),It=a(ce,"P",{});var Vn=s(It);Bs=i(Vn,`The bare ConvNext model outputting raw features without any specific head on top.
This model inherits from `),so=a(Vn,"A",{href:!0});var Li=s(so);Ks=i(Li,"TFPreTrainedModel"),Li.forEach(o),Rs=i(Vn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Vn.forEach(o),Gs=d(ce),Pt=a(ce,"P",{});var Hn=s(Pt);Ys=i(Hn,"This model is also a "),zt=a(Hn,"A",{href:!0,rel:!0});var Di=s(zt);Zs=i(Di,"tf.keras.Model"),Di.forEach(o),Js=i(Hn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Hn.forEach(o),Qs=d(ce),C(He.$$.fragment,ce),er=d(ce),U=a(ce,"DIV",{class:!0});var de=s(U);C(qt.$$.fragment,de),tr=d(de),ke=a(de,"P",{});var _o=s(ke);or=i(_o,"The "),ro=a(_o,"A",{href:!0});var Xi=s(ro);nr=i(Xi,"TFConvNextModel"),Xi.forEach(o),ar=i(_o," forward method, overrides the "),Bo=a(_o,"CODE",{});var Wi=s(Bo);sr=i(Wi,"__call__"),Wi.forEach(o),rr=i(_o," special method."),_o.forEach(o),ir=d(de),C(Ue.$$.fragment,de),lr=d(de),Ko=a(de,"P",{});var Vi=s(Ko);cr=i(Vi,"Examples:"),Vi.forEach(o),dr=d(de),C(St.$$.fragment,de),de.forEach(o),ce.forEach(o),$n=d(t),je=a(t,"H2",{class:!0});var Un=s(je);Be=a(Un,"A",{id:!0,class:!0,href:!0});var Hi=s(Be);Ro=a(Hi,"SPAN",{});var Ui=s(Ro);C(At.$$.fragment,Ui),Ui.forEach(o),Hi.forEach(o),hr=d(Un),Go=a(Un,"SPAN",{});var Bi=s(Go);pr=i(Bi,"TFConvNextForImageClassification"),Bi.forEach(o),Un.forEach(o),Nn=d(t),z=a(t,"DIV",{class:!0});var Q=s(z);C(Ot.$$.fragment,Q),fr=d(Q),Yo=a(Q,"P",{});var Ki=s(Yo);mr=i(Ki,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Ki.forEach(o),ur=d(Q),Lt=a(Q,"P",{});var Bn=s(Lt);gr=i(Bn,"This model inherits from "),io=a(Bn,"A",{href:!0});var Ri=s(io);_r=i(Ri,"TFPreTrainedModel"),Ri.forEach(o),vr=i(Bn,`. Check the superclass documentation for the generic methods the
library implements for all its model (such as downloading or saving, resizing the input embeddings, pruning heads
etc.)`),Bn.forEach(o),xr=d(Q),Dt=a(Q,"P",{});var Kn=s(Dt);wr=i(Kn,"This model is also a "),Xt=a(Kn,"A",{href:!0,rel:!0});var Gi=s(Xt);Cr=i(Gi,"tf.keras.Model"),Gi.forEach(o),yr=i(Kn,` subclass. Use it
as a regular TF 2.0 Keras Model and refer to the TF 2.0 documentation for all matter related to general usage and
behavior.`),Kn.forEach(o),br=d(Q),C(Ke.$$.fragment,Q),Tr=d(Q),B=a(Q,"DIV",{class:!0});var he=s(B);C(Wt.$$.fragment,he),$r=d(he),Me=a(he,"P",{});var vo=s(Me);Nr=i(vo,"The "),lo=a(vo,"A",{href:!0});var Yi=s(lo);Fr=i(Yi,"TFConvNextForImageClassification"),Yi.forEach(o),Er=i(vo," forward method, overrides the "),Zo=a(vo,"CODE",{});var Zi=s(Zo);kr=i(Zi,"__call__"),Zi.forEach(o),jr=i(vo," special method."),vo.forEach(o),Mr=d(he),C(Re.$$.fragment,he),Ir=d(he),Jo=a(he,"P",{});var Ji=s(Jo);Pr=i(Ji,"Examples:"),Ji.forEach(o),zr=d(he),C(Vt.$$.fragment,he),he.forEach(o),Q.forEach(o),this.h()},h(){l(p,"name","hf:doc:metadata"),l(p,"content",JSON.stringify(fl)),l(u,"id","convnext"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#convnext"),l(m,"class","relative group"),l(S,"id","overview"),l(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(S,"href","#overview"),l(E,"class","relative group"),l(P,"href","https://arxiv.org/abs/2201.03545"),l(P,"rel","nofollow"),nl(Ie.src,qr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/convnext_architecture.jpg")||l(Ie,"src",qr),l(Ie,"alt","drawing"),l(Ie,"width","600"),l(Yt,"href","https://arxiv.org/abs/2201.03545"),l(Ze,"href","https://huggingface.co/nielsr"),l(Ze,"rel","nofollow"),l(Je,"href","https://github.com/ariG23498"),l(Je,"rel","nofollow"),l(Qe,"href","https://github.com/gante"),l(Qe,"rel","nofollow"),l(et,"href","https://github.com/sayakpaul"),l(et,"rel","nofollow"),l(tt,"href","https://github.com/facebookresearch/ConvNeXt"),l(tt,"rel","nofollow"),l(ze,"id","transformers.models.convnext.modeling_convnext.ConvNextModelOutput"),l(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ze,"href","#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"),l(ge,"class","relative group"),l(Zt,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextModel"),l(_e,"class","docstring"),l(qe,"id","transformers.ConvNextConfig"),l(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(qe,"href","#transformers.ConvNextConfig"),l(ve,"class","relative group"),l(Jt,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextModel"),l(it,"href","https://huggingface.co/facebook/convnext-tiny-224"),l(it,"rel","nofollow"),l(Qt,"href","/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig"),l(eo,"href","/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig"),l(L,"class","docstring"),l(Se,"id","transformers.ConvNextFeatureExtractor"),l(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Se,"href","#transformers.ConvNextFeatureExtractor"),l(Ce,"class","relative group"),l(to,"href","/docs/transformers/pr_15781/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(ne,"class","docstring"),l(Ae,"id","transformers.ConvNextModel"),l(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ae,"href","#transformers.ConvNextModel"),l(ye,"class","relative group"),l(ut,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ut,"rel","nofollow"),l(oo,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextModel"),l(W,"class","docstring"),l(ae,"class","docstring"),l(Le,"id","transformers.ConvNextForImageClassification"),l(Le,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Le,"href","#transformers.ConvNextForImageClassification"),l(Te,"class","relative group"),l(Ct,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Ct,"rel","nofollow"),l(no,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextForImageClassification"),l(V,"class","docstring"),l(K,"class","docstring"),l(Xe,"id","transformers.ConvNextForSemanticSegmentation"),l(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Xe,"href","#transformers.ConvNextForSemanticSegmentation"),l(Ne,"class","relative group"),l(Ft,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Ft,"rel","nofollow"),l(ao,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextForSemanticSegmentation"),l(H,"class","docstring"),l(R,"class","docstring"),l(Ve,"id","transformers.TFConvNextModel"),l(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ve,"href","#transformers.TFConvNextModel"),l(Ee,"class","relative group"),l(so,"href","/docs/transformers/pr_15781/en/main_classes/model#transformers.TFPreTrainedModel"),l(zt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(zt,"rel","nofollow"),l(ro,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.TFConvNextModel"),l(U,"class","docstring"),l(D,"class","docstring"),l(Be,"id","transformers.TFConvNextForImageClassification"),l(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Be,"href","#transformers.TFConvNextForImageClassification"),l(je,"class","relative group"),l(io,"href","/docs/transformers/pr_15781/en/main_classes/model#transformers.TFPreTrainedModel"),l(Xt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),l(Xt,"rel","nofollow"),l(lo,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),l(B,"class","docstring"),l(z,"class","docstring")},m(t,h){e(document.head,p),f(t,N,h),f(t,m,h),e(m,u),e(u,x),y(_,x,null),e(m,g),e(m,F),e(F,ee),f(t,X,h),f(t,E,h),e(E,S),e(S,M),y(O,M,null),e(E,te),e(E,I),e(I,oe),f(t,Y,h),f(t,v,h),e(v,k),e(v,P),e(P,fe),e(v,me),f(t,j,h),f(t,Z,h),e(Z,ue),f(t,an,h),f(t,Kt,h),e(Kt,wo),e(wo,Rn),f(t,sn,h),f(t,Rt,h),e(Rt,Gn),f(t,rn,h),f(t,Gt,h),e(Gt,Co),e(Co,Yn),f(t,ln,h),f(t,Ie,h),f(t,cn,h),f(t,Pe,h),e(Pe,Zn),e(Pe,Yt),e(Yt,Jn),e(Pe,Qn),f(t,dn,h),f(t,A,h),e(A,ea),e(A,Ze),e(Ze,ta),e(A,oa),e(A,Je),e(Je,na),e(A,aa),e(A,Qe),e(Qe,sa),e(A,ra),e(A,et),e(et,ia),e(A,la),e(A,tt),e(tt,ca),e(A,da),f(t,hn,h),f(t,ge,h),e(ge,ze),e(ze,yo),y(ot,yo,null),e(ge,ha),e(ge,bo),e(bo,pa),f(t,pn,h),f(t,_e,h),y(nt,_e,null),e(_e,fa),e(_e,at),e(at,ma),e(at,Zt),e(Zt,ua),e(at,ga),f(t,fn,h),f(t,ve,h),e(ve,qe),e(qe,To),y(st,To,null),e(ve,_a),e(ve,$o),e($o,va),f(t,mn,h),f(t,L,h),y(rt,L,null),e(L,xa),e(L,xe),e(xe,wa),e(xe,Jt),e(Jt,Ca),e(xe,ya),e(xe,it),e(it,ba),e(xe,Ta),e(L,$a),e(L,we),e(we,Na),e(we,Qt),e(Qt,Fa),e(we,Ea),e(we,eo),e(eo,ka),e(we,ja),e(L,Ma),e(L,No),e(No,Ia),e(L,Pa),y(lt,L,null),f(t,un,h),f(t,Ce,h),e(Ce,Se),e(Se,Fo),y(ct,Fo,null),e(Ce,za),e(Ce,Eo),e(Eo,qa),f(t,gn,h),f(t,ne,h),y(dt,ne,null),e(ne,Sa),e(ne,ko),e(ko,Aa),e(ne,Oa),e(ne,ht),e(ht,La),e(ht,to),e(to,Da),e(ht,Xa),f(t,_n,h),f(t,ye,h),e(ye,Ae),e(Ae,jo),y(pt,jo,null),e(ye,Wa),e(ye,Mo),e(Mo,Va),f(t,vn,h),f(t,ae,h),y(ft,ae,null),e(ae,Ha),e(ae,mt),e(mt,Ua),e(mt,ut),e(ut,Ba),e(mt,Ka),e(ae,Ra),e(ae,W),y(gt,W,null),e(W,Ga),e(W,be),e(be,Ya),e(be,oo),e(oo,Za),e(be,Ja),e(be,Io),e(Io,Qa),e(be,es),e(W,ts),y(Oe,W,null),e(W,os),e(W,Po),e(Po,ns),e(W,as),y(_t,W,null),f(t,xn,h),f(t,Te,h),e(Te,Le),e(Le,zo),y(vt,zo,null),e(Te,ss),e(Te,qo),e(qo,rs),f(t,wn,h),f(t,K,h),y(xt,K,null),e(K,is),e(K,So),e(So,ls),e(K,cs),e(K,wt),e(wt,ds),e(wt,Ct),e(Ct,hs),e(wt,ps),e(K,fs),e(K,V),y(yt,V,null),e(V,ms),e(V,$e),e($e,us),e($e,no),e(no,gs),e($e,_s),e($e,Ao),e(Ao,vs),e($e,xs),e(V,ws),y(De,V,null),e(V,Cs),e(V,Oo),e(Oo,ys),e(V,bs),y(bt,V,null),f(t,Cn,h),f(t,Ne,h),e(Ne,Xe),e(Xe,Lo),y(Tt,Lo,null),e(Ne,Ts),e(Ne,Do),e(Do,$s),f(t,yn,h),f(t,R,h),y($t,R,null),e(R,Ns),e(R,Xo),e(Xo,Fs),e(R,Es),e(R,Nt),e(Nt,ks),e(Nt,Ft),e(Ft,js),e(Nt,Ms),e(R,Is),e(R,H),y(Et,H,null),e(H,Ps),e(H,Fe),e(Fe,zs),e(Fe,ao),e(ao,qs),e(Fe,Ss),e(Fe,Wo),e(Wo,As),e(Fe,Os),e(H,Ls),y(We,H,null),e(H,Ds),e(H,Vo),e(Vo,Xs),e(H,Ws),y(kt,H,null),f(t,bn,h),f(t,Ee,h),e(Ee,Ve),e(Ve,Ho),y(jt,Ho,null),e(Ee,Vs),e(Ee,Uo),e(Uo,Hs),f(t,Tn,h),f(t,D,h),y(Mt,D,null),e(D,Us),e(D,It),e(It,Bs),e(It,so),e(so,Ks),e(It,Rs),e(D,Gs),e(D,Pt),e(Pt,Ys),e(Pt,zt),e(zt,Zs),e(Pt,Js),e(D,Qs),y(He,D,null),e(D,er),e(D,U),y(qt,U,null),e(U,tr),e(U,ke),e(ke,or),e(ke,ro),e(ro,nr),e(ke,ar),e(ke,Bo),e(Bo,sr),e(ke,rr),e(U,ir),y(Ue,U,null),e(U,lr),e(U,Ko),e(Ko,cr),e(U,dr),y(St,U,null),f(t,$n,h),f(t,je,h),e(je,Be),e(Be,Ro),y(At,Ro,null),e(je,hr),e(je,Go),e(Go,pr),f(t,Nn,h),f(t,z,h),y(Ot,z,null),e(z,fr),e(z,Yo),e(Yo,mr),e(z,ur),e(z,Lt),e(Lt,gr),e(Lt,io),e(io,_r),e(Lt,vr),e(z,xr),e(z,Dt),e(Dt,wr),e(Dt,Xt),e(Xt,Cr),e(Dt,yr),e(z,br),y(Ke,z,null),e(z,Tr),e(z,B),y(Wt,B,null),e(B,$r),e(B,Me),e(Me,Nr),e(Me,lo),e(lo,Fr),e(Me,Er),e(Me,Zo),e(Zo,kr),e(Me,jr),e(B,Mr),y(Re,B,null),e(B,Ir),e(B,Jo),e(Jo,Pr),e(B,zr),y(Vt,B,null),Fn=!0},p(t,[h]){const Ht={};h&2&&(Ht.$$scope={dirty:h,ctx:t}),Oe.$set(Ht);const Qo={};h&2&&(Qo.$$scope={dirty:h,ctx:t}),De.$set(Qo);const en={};h&2&&(en.$$scope={dirty:h,ctx:t}),We.$set(en);const tn={};h&2&&(tn.$$scope={dirty:h,ctx:t}),He.$set(tn);const Ut={};h&2&&(Ut.$$scope={dirty:h,ctx:t}),Ue.$set(Ut);const on={};h&2&&(on.$$scope={dirty:h,ctx:t}),Ke.$set(on);const nn={};h&2&&(nn.$$scope={dirty:h,ctx:t}),Re.$set(nn)},i(t){Fn||(b(_.$$.fragment,t),b(O.$$.fragment,t),b(ot.$$.fragment,t),b(nt.$$.fragment,t),b(st.$$.fragment,t),b(rt.$$.fragment,t),b(lt.$$.fragment,t),b(ct.$$.fragment,t),b(dt.$$.fragment,t),b(pt.$$.fragment,t),b(ft.$$.fragment,t),b(gt.$$.fragment,t),b(Oe.$$.fragment,t),b(_t.$$.fragment,t),b(vt.$$.fragment,t),b(xt.$$.fragment,t),b(yt.$$.fragment,t),b(De.$$.fragment,t),b(bt.$$.fragment,t),b(Tt.$$.fragment,t),b($t.$$.fragment,t),b(Et.$$.fragment,t),b(We.$$.fragment,t),b(kt.$$.fragment,t),b(jt.$$.fragment,t),b(Mt.$$.fragment,t),b(He.$$.fragment,t),b(qt.$$.fragment,t),b(Ue.$$.fragment,t),b(St.$$.fragment,t),b(At.$$.fragment,t),b(Ot.$$.fragment,t),b(Ke.$$.fragment,t),b(Wt.$$.fragment,t),b(Re.$$.fragment,t),b(Vt.$$.fragment,t),Fn=!0)},o(t){T(_.$$.fragment,t),T(O.$$.fragment,t),T(ot.$$.fragment,t),T(nt.$$.fragment,t),T(st.$$.fragment,t),T(rt.$$.fragment,t),T(lt.$$.fragment,t),T(ct.$$.fragment,t),T(dt.$$.fragment,t),T(pt.$$.fragment,t),T(ft.$$.fragment,t),T(gt.$$.fragment,t),T(Oe.$$.fragment,t),T(_t.$$.fragment,t),T(vt.$$.fragment,t),T(xt.$$.fragment,t),T(yt.$$.fragment,t),T(De.$$.fragment,t),T(bt.$$.fragment,t),T(Tt.$$.fragment,t),T($t.$$.fragment,t),T(Et.$$.fragment,t),T(We.$$.fragment,t),T(kt.$$.fragment,t),T(jt.$$.fragment,t),T(Mt.$$.fragment,t),T(He.$$.fragment,t),T(qt.$$.fragment,t),T(Ue.$$.fragment,t),T(St.$$.fragment,t),T(At.$$.fragment,t),T(Ot.$$.fragment,t),T(Ke.$$.fragment,t),T(Wt.$$.fragment,t),T(Re.$$.fragment,t),T(Vt.$$.fragment,t),Fn=!1},d(t){o(p),t&&o(N),t&&o(m),$(_),t&&o(X),t&&o(E),$(O),t&&o(Y),t&&o(v),t&&o(j),t&&o(Z),t&&o(an),t&&o(Kt),t&&o(sn),t&&o(Rt),t&&o(rn),t&&o(Gt),t&&o(ln),t&&o(Ie),t&&o(cn),t&&o(Pe),t&&o(dn),t&&o(A),t&&o(hn),t&&o(ge),$(ot),t&&o(pn),t&&o(_e),$(nt),t&&o(fn),t&&o(ve),$(st),t&&o(mn),t&&o(L),$(rt),$(lt),t&&o(un),t&&o(Ce),$(ct),t&&o(gn),t&&o(ne),$(dt),t&&o(_n),t&&o(ye),$(pt),t&&o(vn),t&&o(ae),$(ft),$(gt),$(Oe),$(_t),t&&o(xn),t&&o(Te),$(vt),t&&o(wn),t&&o(K),$(xt),$(yt),$(De),$(bt),t&&o(Cn),t&&o(Ne),$(Tt),t&&o(yn),t&&o(R),$($t),$(Et),$(We),$(kt),t&&o(bn),t&&o(Ee),$(jt),t&&o(Tn),t&&o(D),$(Mt),$(He),$(qt),$(Ue),$(St),t&&o($n),t&&o(je),$(At),t&&o(Nn),t&&o(z),$(Ot),$(Ke),$(Wt),$(Re),$(Vt)}}}const fl={local:"convnext",sections:[{local:"overview",title:"Overview"},{local:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput",title:"ConvNeXT specific outputs"},{local:"transformers.ConvNextConfig",title:"ConvNextConfig"},{local:"transformers.ConvNextFeatureExtractor",title:"ConvNextFeatureExtractor"},{local:"transformers.ConvNextModel",title:"ConvNextModel"},{local:"transformers.ConvNextForImageClassification",title:"ConvNextForImageClassification"},{local:"transformers.ConvNextForSemanticSegmentation",title:"ConvNextForSemanticSegmentation"},{local:"transformers.TFConvNextModel",title:"TFConvNextModel"},{local:"transformers.TFConvNextForImageClassification",title:"TFConvNextForImageClassification"}],title:"ConvNeXT"};function ml(q){return al(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class wl extends Qi{constructor(p){super();el(this,p,ml,pl,tl,{})}}export{wl as default,fl as metadata};
