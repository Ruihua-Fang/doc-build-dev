import{S as _Ct,i as uCt,s as bCt,e as a,k as l,w as f,t as o,M as vCt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as TCt}from"../../chunks/vendor-6b77c823.js";import{T as ukr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function FCt(If){let K,io,de,Ee,lo,fe,Ce,Vo,Ii,Nf,fa,Ni,Di,lE,Df,Be,co,ji,Gn,iE,On,Xn,dE,qi,Vn,cE,Gi,jf,qa;return{c(){K=a("p"),io=o("If your "),de=a("code"),Ee=o("NewModelConfig"),lo=o(" is a subclass of "),fe=a("code"),Ce=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ii=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),Di=o('"new-model"'),lE=o(")."),Df=l(),Be=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),iE=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),dE=o(`, make sure its
`),qi=a("code"),Vn=o("config_class"),cE=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){K=n(fo,"P",{});var pe=s(K);io=r(pe,"If your "),de=n(pe,"CODE",{});var ZL=s(de);Ee=r(ZL,"NewModelConfig"),ZL.forEach(t),lo=r(pe," is a subclass of "),fe=n(pe,"CODE",{});var Oi=s(fe);Ce=r(Oi,"PretrainedConfig"),Oi.forEach(t),Vo=r(pe,`, make sure its
`),Ii=n(pe,"CODE",{});var e9=s(Ii);Nf=r(e9,"model_type"),e9.forEach(t),fa=r(pe," attribute is set to the same key you use when registering the config (here "),Ni=n(pe,"CODE",{});var o9=s(Ni);Di=r(o9,'"new-model"'),o9.forEach(t),lE=r(pe,")."),pe.forEach(t),Df=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),iE=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var r9=s(On);Xn=r(r9,"PreTrainedModel"),r9.forEach(t),dE=r(zo,`, make sure its
`),qi=n(zo,"CODE",{});var qf=s(qi);Vn=r(qf,"config_class"),qf.forEach(t),cE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var t9=s(Gi);jf=r(t9,"NewModelConfig"),t9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel")},m(fo,pe){b(fo,K,pe),e(K,io),e(K,de),e(de,Ee),e(K,lo),e(K,fe),e(fe,Ce),e(K,Vo),e(K,Ii),e(Ii,Nf),e(K,fa),e(K,Ni),e(Ni,Di),e(K,lE),b(fo,Df,pe),b(fo,Be,pe),e(Be,co),e(Be,ji),e(ji,Gn),e(Be,iE),e(Be,On),e(On,Xn),e(Be,dE),e(Be,qi),e(qi,Vn),e(Be,cE),e(Be,Gi),e(Gi,jf),e(Be,qa)},d(fo){fo&&t(K),fo&&t(Df),fo&&t(Be)}}}function CCt(If){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){K=n(fe,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(fe){fe&&t(K)}}}function MCt(If){let K,io,de,Ee,lo;return{c(){K=a("p"),io=o("Passing "),de=a("code"),Ee=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(fe){K=n(fe,"P",{});var Ce=s(K);io=r(Ce,"Passing "),de=n(Ce,"CODE",{});var Vo=s(de);Ee=r(Vo,"use_auth_token=True"),Vo.forEach(t),lo=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(fe,Ce){b(fe,K,Ce),e(K,io),e(K,de),e(de,Ee),e(K,lo)},d(fe){fe&&t(K)}}}function ECt(If){let K,io,de,Ee,lo,fe,Ce,Vo,Ii,Nf,fa,Ni,Di,lE,Df,Be,co,ji,Gn,iE,On,Xn,dE,qi,Vn,cE,Gi,jf,qa,fo,pe,ZL,Oi,e9,o9,zo,Ga,r9,qf,t9,b$e,nke,Xi,Gf,GQ,fE,v$e,OQ,T$e,ske,zn,F$e,XQ,C$e,M$e,VQ,E$e,y$e,lke,mE,ike,a9,w$e,dke,Of,cke,Vi,Xf,zQ,gE,A$e,WQ,L$e,fke,Wo,hE,B$e,pE,x$e,n9,k$e,R$e,S$e,_E,P$e,QQ,$$e,I$e,N$e,mo,uE,D$e,HQ,j$e,q$e,zi,G$e,UQ,O$e,X$e,JQ,V$e,z$e,W$e,v,Vf,YQ,Q$e,H$e,s9,U$e,J$e,Y$e,zf,KQ,K$e,Z$e,l9,eIe,oIe,rIe,Wf,ZQ,tIe,aIe,i9,nIe,sIe,lIe,Qf,eH,iIe,dIe,d9,cIe,fIe,mIe,Hf,oH,gIe,hIe,c9,pIe,_Ie,uIe,Uf,rH,bIe,vIe,f9,TIe,FIe,CIe,Jf,tH,MIe,EIe,m9,yIe,wIe,AIe,Yf,aH,LIe,BIe,g9,xIe,kIe,RIe,Kf,nH,SIe,PIe,h9,$Ie,IIe,NIe,Zf,sH,DIe,jIe,p9,qIe,GIe,OIe,em,lH,XIe,VIe,_9,zIe,WIe,QIe,om,iH,HIe,UIe,u9,JIe,YIe,KIe,rm,dH,ZIe,eNe,b9,oNe,rNe,tNe,tm,cH,aNe,nNe,v9,sNe,lNe,iNe,am,fH,dNe,cNe,T9,fNe,mNe,gNe,nm,mH,hNe,pNe,F9,_Ne,uNe,bNe,sm,gH,vNe,TNe,C9,FNe,CNe,MNe,lm,hH,ENe,yNe,M9,wNe,ANe,LNe,im,pH,BNe,xNe,E9,kNe,RNe,SNe,dm,_H,PNe,$Ne,y9,INe,NNe,DNe,cm,uH,jNe,qNe,w9,GNe,ONe,XNe,fm,bH,VNe,zNe,A9,WNe,QNe,HNe,mm,vH,UNe,JNe,L9,YNe,KNe,ZNe,gm,TH,eDe,oDe,B9,rDe,tDe,aDe,hm,FH,nDe,sDe,x9,lDe,iDe,dDe,pm,CH,cDe,fDe,k9,mDe,gDe,hDe,_m,MH,pDe,_De,R9,uDe,bDe,vDe,um,EH,TDe,FDe,S9,CDe,MDe,EDe,bm,yH,yDe,wDe,P9,ADe,LDe,BDe,vm,wH,xDe,kDe,$9,RDe,SDe,PDe,Tm,AH,$De,IDe,I9,NDe,DDe,jDe,Fm,LH,qDe,GDe,N9,ODe,XDe,VDe,Cm,BH,zDe,WDe,D9,QDe,HDe,UDe,Mm,xH,JDe,YDe,j9,KDe,ZDe,eje,Em,kH,oje,rje,q9,tje,aje,nje,ym,RH,sje,lje,G9,ije,dje,cje,wm,SH,fje,mje,O9,gje,hje,pje,Am,PH,_je,uje,X9,bje,vje,Tje,Lm,$H,Fje,Cje,V9,Mje,Eje,yje,Bm,IH,wje,Aje,z9,Lje,Bje,xje,xm,NH,kje,Rje,W9,Sje,Pje,$je,km,DH,Ije,Nje,Q9,Dje,jje,qje,Rm,jH,Gje,Oje,H9,Xje,Vje,zje,Sm,qH,Wje,Qje,U9,Hje,Uje,Jje,Pm,GH,Yje,Kje,J9,Zje,eqe,oqe,$m,OH,rqe,tqe,Y9,aqe,nqe,sqe,Im,XH,lqe,iqe,K9,dqe,cqe,fqe,Nm,VH,mqe,gqe,Z9,hqe,pqe,_qe,Dm,zH,uqe,bqe,eB,vqe,Tqe,Fqe,jm,WH,Cqe,Mqe,oB,Eqe,yqe,wqe,qm,QH,Aqe,Lqe,rB,Bqe,xqe,kqe,Gm,HH,Rqe,Sqe,tB,Pqe,$qe,Iqe,Om,UH,Nqe,Dqe,aB,jqe,qqe,Gqe,Xm,JH,Oqe,Xqe,nB,Vqe,zqe,Wqe,Vm,YH,Qqe,Hqe,sB,Uqe,Jqe,Yqe,zm,KH,Kqe,Zqe,lB,eGe,oGe,rGe,Wm,ZH,tGe,aGe,iB,nGe,sGe,lGe,Qm,eU,iGe,dGe,dB,cGe,fGe,mGe,Hm,oU,gGe,hGe,cB,pGe,_Ge,uGe,Um,rU,bGe,vGe,fB,TGe,FGe,CGe,Jm,tU,MGe,EGe,mB,yGe,wGe,AGe,Ym,aU,LGe,BGe,gB,xGe,kGe,RGe,Km,nU,SGe,PGe,hB,$Ge,IGe,NGe,Zm,sU,DGe,jGe,pB,qGe,GGe,OGe,eg,lU,XGe,VGe,_B,zGe,WGe,QGe,og,iU,HGe,UGe,uB,JGe,YGe,KGe,rg,dU,ZGe,eOe,bB,oOe,rOe,tOe,tg,cU,aOe,nOe,vB,sOe,lOe,iOe,ag,fU,dOe,cOe,TB,fOe,mOe,gOe,ng,mU,hOe,pOe,FB,_Oe,uOe,bOe,sg,gU,vOe,TOe,CB,FOe,COe,MOe,lg,hU,EOe,yOe,MB,wOe,AOe,LOe,ig,pU,BOe,xOe,EB,kOe,ROe,SOe,dg,_U,POe,$Oe,yB,IOe,NOe,DOe,cg,uU,jOe,qOe,wB,GOe,OOe,XOe,fg,bU,VOe,zOe,AB,WOe,QOe,HOe,mg,vU,UOe,JOe,LB,YOe,KOe,ZOe,gg,TU,eXe,oXe,BB,rXe,tXe,aXe,hg,FU,nXe,sXe,xB,lXe,iXe,dXe,pg,CU,cXe,fXe,kB,mXe,gXe,hXe,_g,MU,pXe,_Xe,RB,uXe,bXe,vXe,ug,EU,TXe,FXe,SB,CXe,MXe,EXe,bg,yU,yXe,wXe,PB,AXe,LXe,BXe,vg,wU,xXe,kXe,$B,RXe,SXe,PXe,Tg,AU,$Xe,IXe,IB,NXe,DXe,jXe,Fg,LU,qXe,GXe,NB,OXe,XXe,VXe,Cg,BU,zXe,WXe,DB,QXe,HXe,UXe,Mg,xU,JXe,YXe,jB,KXe,ZXe,eVe,Eg,kU,oVe,rVe,qB,tVe,aVe,nVe,yg,RU,sVe,lVe,GB,iVe,dVe,cVe,wg,SU,fVe,mVe,OB,gVe,hVe,pVe,Ag,PU,_Ve,uVe,XB,bVe,vVe,TVe,Lg,$U,FVe,CVe,VB,MVe,EVe,yVe,Bg,IU,wVe,AVe,zB,LVe,BVe,xVe,xg,NU,kVe,RVe,WB,SVe,PVe,$Ve,kg,DU,IVe,NVe,QB,DVe,jVe,qVe,Rg,jU,GVe,OVe,HB,XVe,VVe,zVe,Sg,qU,WVe,QVe,UB,HVe,UVe,JVe,GU,YVe,KVe,bE,ZVe,Pg,vE,eze,OU,oze,mke,Wi,$g,XU,TE,rze,VU,tze,gke,Qo,FE,aze,CE,nze,JB,sze,lze,ize,ME,dze,zU,cze,fze,mze,go,EE,gze,WU,hze,pze,Oa,_ze,QU,uze,bze,HU,vze,Tze,UU,Fze,Cze,Mze,E,Wn,JU,Eze,yze,YB,wze,Aze,KB,Lze,Bze,xze,Qn,YU,kze,Rze,ZB,Sze,Pze,ex,$ze,Ize,Nze,Hn,KU,Dze,jze,ox,qze,Gze,rx,Oze,Xze,Vze,Ig,ZU,zze,Wze,tx,Qze,Hze,Uze,Un,eJ,Jze,Yze,ax,Kze,Zze,nx,eWe,oWe,rWe,Ng,oJ,tWe,aWe,sx,nWe,sWe,lWe,Dg,rJ,iWe,dWe,lx,cWe,fWe,mWe,jg,tJ,gWe,hWe,ix,pWe,_We,uWe,Jn,aJ,bWe,vWe,dx,TWe,FWe,cx,CWe,MWe,EWe,Yn,nJ,yWe,wWe,fx,AWe,LWe,mx,BWe,xWe,kWe,Kn,sJ,RWe,SWe,gx,PWe,$We,hx,IWe,NWe,DWe,qg,lJ,jWe,qWe,px,GWe,OWe,XWe,Gg,iJ,VWe,zWe,_x,WWe,QWe,HWe,Zn,dJ,UWe,JWe,ux,YWe,KWe,bx,ZWe,eQe,oQe,Og,cJ,rQe,tQe,vx,aQe,nQe,sQe,es,fJ,lQe,iQe,Tx,dQe,cQe,Fx,fQe,mQe,gQe,os,mJ,hQe,pQe,Cx,_Qe,uQe,Mx,bQe,vQe,TQe,rs,gJ,FQe,CQe,Ex,MQe,EQe,hJ,yQe,wQe,AQe,Xg,pJ,LQe,BQe,yx,xQe,kQe,RQe,ts,_J,SQe,PQe,wx,$Qe,IQe,Ax,NQe,DQe,jQe,Vg,uJ,qQe,GQe,Lx,OQe,XQe,VQe,as,bJ,zQe,WQe,Bx,QQe,HQe,xx,UQe,JQe,YQe,ns,vJ,KQe,ZQe,kx,eHe,oHe,Rx,rHe,tHe,aHe,ss,TJ,nHe,sHe,Sx,lHe,iHe,Px,dHe,cHe,fHe,zg,FJ,mHe,gHe,$x,hHe,pHe,_He,ls,CJ,uHe,bHe,Ix,vHe,THe,Nx,FHe,CHe,MHe,Wg,MJ,EHe,yHe,Dx,wHe,AHe,LHe,is,EJ,BHe,xHe,jx,kHe,RHe,qx,SHe,PHe,$He,ds,yJ,IHe,NHe,Gx,DHe,jHe,Ox,qHe,GHe,OHe,cs,wJ,XHe,VHe,Xx,zHe,WHe,Vx,QHe,HHe,UHe,fs,AJ,JHe,YHe,zx,KHe,ZHe,Wx,eUe,oUe,rUe,Qg,LJ,tUe,aUe,Qx,nUe,sUe,lUe,ms,BJ,iUe,dUe,Hx,cUe,fUe,Ux,mUe,gUe,hUe,gs,xJ,pUe,_Ue,Jx,uUe,bUe,Yx,vUe,TUe,FUe,hs,kJ,CUe,MUe,Kx,EUe,yUe,Zx,wUe,AUe,LUe,ps,RJ,BUe,xUe,ek,kUe,RUe,ok,SUe,PUe,$Ue,_s,SJ,IUe,NUe,rk,DUe,jUe,tk,qUe,GUe,OUe,us,PJ,XUe,VUe,ak,zUe,WUe,nk,QUe,HUe,UUe,Hg,$J,JUe,YUe,sk,KUe,ZUe,eJe,bs,IJ,oJe,rJe,lk,tJe,aJe,ik,nJe,sJe,lJe,Ug,NJ,iJe,dJe,dk,cJe,fJe,mJe,Jg,DJ,gJe,hJe,ck,pJe,_Je,uJe,vs,jJ,bJe,vJe,fk,TJe,FJe,mk,CJe,MJe,EJe,Ts,qJ,yJe,wJe,gk,AJe,LJe,hk,BJe,xJe,kJe,Yg,GJ,RJe,SJe,pk,PJe,$Je,IJe,Fs,OJ,NJe,DJe,_k,jJe,qJe,uk,GJe,OJe,XJe,Cs,XJ,VJe,zJe,bk,WJe,QJe,vk,HJe,UJe,JJe,Ms,VJ,YJe,KJe,Tk,ZJe,eYe,Fk,oYe,rYe,tYe,Es,zJ,aYe,nYe,Ck,sYe,lYe,Mk,iYe,dYe,cYe,ys,WJ,fYe,mYe,Ek,gYe,hYe,yk,pYe,_Ye,uYe,Kg,QJ,bYe,vYe,wk,TYe,FYe,CYe,Zg,HJ,MYe,EYe,Ak,yYe,wYe,AYe,eh,UJ,LYe,BYe,Lk,xYe,kYe,RYe,oh,JJ,SYe,PYe,Bk,$Ye,IYe,NYe,ws,YJ,DYe,jYe,xk,qYe,GYe,kk,OYe,XYe,VYe,rh,KJ,zYe,WYe,Rk,QYe,HYe,UYe,As,ZJ,JYe,YYe,Sk,KYe,ZYe,Pk,eKe,oKe,rKe,Ls,eY,tKe,aKe,$k,nKe,sKe,Ik,lKe,iKe,dKe,Bs,oY,cKe,fKe,Nk,mKe,gKe,Dk,hKe,pKe,_Ke,xs,rY,uKe,bKe,jk,vKe,TKe,qk,FKe,CKe,MKe,ks,tY,EKe,yKe,Gk,wKe,AKe,Ok,LKe,BKe,xKe,Rs,aY,kKe,RKe,Xk,SKe,PKe,Vk,$Ke,IKe,NKe,th,nY,DKe,jKe,zk,qKe,GKe,OKe,ah,sY,XKe,VKe,Wk,zKe,WKe,QKe,Ss,lY,HKe,UKe,Qk,JKe,YKe,Hk,KKe,ZKe,eZe,Ps,iY,oZe,rZe,Uk,tZe,aZe,Jk,nZe,sZe,lZe,$s,dY,iZe,dZe,Yk,cZe,fZe,Kk,mZe,gZe,hZe,nh,cY,pZe,_Ze,Zk,uZe,bZe,vZe,sh,fY,TZe,FZe,eR,CZe,MZe,EZe,lh,mY,yZe,wZe,oR,AZe,LZe,BZe,ih,gY,xZe,kZe,rR,RZe,SZe,PZe,Is,hY,$Ze,IZe,tR,NZe,DZe,aR,jZe,qZe,GZe,dh,pY,OZe,XZe,nR,VZe,zZe,WZe,ch,_Y,QZe,HZe,sR,UZe,JZe,YZe,Ns,uY,KZe,ZZe,lR,eeo,oeo,iR,reo,teo,aeo,Ds,bY,neo,seo,dR,leo,ieo,cR,deo,ceo,feo,vY,meo,geo,yE,heo,fh,wE,peo,TY,_eo,hke,Qi,mh,FY,AE,ueo,CY,beo,pke,Ho,LE,veo,BE,Teo,fR,Feo,Ceo,Meo,xE,Eeo,MY,yeo,weo,Aeo,$e,kE,Leo,EY,Beo,xeo,Xa,keo,yY,Reo,Seo,wY,Peo,$eo,AY,Ieo,Neo,Deo,re,gh,LY,jeo,qeo,mR,Geo,Oeo,Xeo,hh,BY,Veo,zeo,gR,Weo,Qeo,Heo,ph,xY,Ueo,Jeo,hR,Yeo,Keo,Zeo,_h,kY,eoo,ooo,pR,roo,too,aoo,uh,RY,noo,soo,_R,loo,ioo,doo,bh,SY,coo,foo,uR,moo,goo,hoo,vh,PY,poo,_oo,bR,uoo,boo,voo,Th,$Y,Too,Foo,vR,Coo,Moo,Eoo,Fh,IY,yoo,woo,TR,Aoo,Loo,Boo,Ch,NY,xoo,koo,FR,Roo,Soo,Poo,Mh,DY,$oo,Ioo,CR,Noo,Doo,joo,Eh,jY,qoo,Goo,MR,Ooo,Xoo,Voo,yh,qY,zoo,Woo,ER,Qoo,Hoo,Uoo,wh,GY,Joo,Yoo,yR,Koo,Zoo,ero,Ah,OY,oro,rro,wR,tro,aro,nro,Lh,XY,sro,lro,AR,iro,dro,cro,Bh,VY,fro,mro,LR,gro,hro,pro,xh,zY,_ro,uro,BR,bro,vro,Tro,kh,Fro,WY,Cro,Mro,RE,Ero,Rh,SE,yro,QY,wro,_ke,Hi,Sh,HY,PE,Aro,UY,Lro,uke,Uo,$E,Bro,IE,xro,xR,kro,Rro,Sro,NE,Pro,JY,$ro,Iro,Nro,Ie,DE,Dro,YY,jro,qro,Ui,Gro,KY,Oro,Xro,ZY,Vro,zro,Wro,xe,Ph,eK,Qro,Hro,kR,Uro,Jro,Yro,$h,oK,Kro,Zro,RR,eto,oto,rto,Ih,rK,tto,ato,SR,nto,sto,lto,Nh,tK,ito,dto,PR,cto,fto,mto,Dh,aK,gto,hto,$R,pto,_to,uto,jh,nK,bto,vto,IR,Tto,Fto,Cto,qh,sK,Mto,Eto,NR,yto,wto,Ato,Gh,lK,Lto,Bto,DR,xto,kto,Rto,Oh,Sto,iK,Pto,$to,jE,Ito,Xh,qE,Nto,dK,Dto,bke,Ji,Vh,cK,GE,jto,fK,qto,vke,Jo,OE,Gto,Yi,Oto,mK,Xto,Vto,gK,zto,Wto,Qto,XE,Hto,hK,Uto,Jto,Yto,Vr,VE,Kto,pK,Zto,eao,Ki,oao,_K,rao,tao,uK,aao,nao,sao,bK,lao,iao,zE,dao,Ne,WE,cao,vK,fao,mao,Va,gao,TK,hao,pao,FK,_ao,uao,CK,bao,vao,Tao,F,zh,MK,Fao,Cao,jR,Mao,Eao,yao,Wh,EK,wao,Aao,qR,Lao,Bao,xao,Qh,yK,kao,Rao,GR,Sao,Pao,$ao,Hh,wK,Iao,Nao,OR,Dao,jao,qao,Uh,AK,Gao,Oao,XR,Xao,Vao,zao,Jh,LK,Wao,Qao,VR,Hao,Uao,Jao,Yh,BK,Yao,Kao,zR,Zao,eno,ono,Kh,xK,rno,tno,WR,ano,nno,sno,Zh,kK,lno,ino,QR,dno,cno,fno,ep,RK,mno,gno,HR,hno,pno,_no,op,SK,uno,bno,UR,vno,Tno,Fno,rp,PK,Cno,Mno,JR,Eno,yno,wno,tp,$K,Ano,Lno,YR,Bno,xno,kno,ap,IK,Rno,Sno,KR,Pno,$no,Ino,np,NK,Nno,Dno,ZR,jno,qno,Gno,sp,DK,Ono,Xno,eS,Vno,zno,Wno,lp,jK,Qno,Hno,oS,Uno,Jno,Yno,ip,qK,Kno,Zno,rS,eso,oso,rso,dp,GK,tso,aso,tS,nso,sso,lso,cp,OK,iso,dso,aS,cso,fso,mso,fp,XK,gso,hso,nS,pso,_so,uso,mp,VK,bso,vso,sS,Tso,Fso,Cso,gp,zK,Mso,Eso,lS,yso,wso,Aso,hp,WK,Lso,Bso,iS,xso,kso,Rso,pp,QK,Sso,Pso,dS,$so,Iso,Nso,_p,HK,Dso,jso,cS,qso,Gso,Oso,up,UK,Xso,Vso,fS,zso,Wso,Qso,bp,JK,Hso,Uso,mS,Jso,Yso,Kso,js,YK,Zso,elo,gS,olo,rlo,hS,tlo,alo,nlo,vp,KK,slo,llo,pS,ilo,dlo,clo,Tp,ZK,flo,mlo,_S,glo,hlo,plo,Fp,eZ,_lo,ulo,uS,blo,vlo,Tlo,Cp,oZ,Flo,Clo,bS,Mlo,Elo,ylo,Mp,rZ,wlo,Alo,vS,Llo,Blo,xlo,Ep,tZ,klo,Rlo,TS,Slo,Plo,$lo,yp,aZ,Ilo,Nlo,FS,Dlo,jlo,qlo,wp,nZ,Glo,Olo,CS,Xlo,Vlo,zlo,Ap,sZ,Wlo,Qlo,MS,Hlo,Ulo,Jlo,Lp,lZ,Ylo,Klo,ES,Zlo,eio,oio,Bp,iZ,rio,tio,yS,aio,nio,sio,xp,dZ,lio,iio,wS,dio,cio,fio,kp,cZ,mio,gio,AS,hio,pio,_io,Rp,fZ,uio,bio,LS,vio,Tio,Fio,Sp,mZ,Cio,Mio,BS,Eio,yio,wio,Pp,gZ,Aio,Lio,xS,Bio,xio,kio,$p,hZ,Rio,Sio,kS,Pio,$io,Iio,Ip,pZ,Nio,Dio,RS,jio,qio,Gio,Np,_Z,Oio,Xio,SS,Vio,zio,Wio,Dp,uZ,Qio,Hio,PS,Uio,Jio,Yio,jp,bZ,Kio,Zio,$S,edo,odo,rdo,qp,vZ,tdo,ado,IS,ndo,sdo,ldo,Gp,TZ,ido,ddo,NS,cdo,fdo,mdo,Op,FZ,gdo,hdo,DS,pdo,_do,udo,Xp,CZ,bdo,vdo,jS,Tdo,Fdo,Cdo,Vp,MZ,Mdo,Edo,qS,ydo,wdo,Ado,zp,EZ,Ldo,Bdo,GS,xdo,kdo,Rdo,Wp,yZ,Sdo,Pdo,OS,$do,Ido,Ndo,Qp,wZ,Ddo,jdo,XS,qdo,Gdo,Odo,Hp,AZ,Xdo,Vdo,VS,zdo,Wdo,Qdo,Up,LZ,Hdo,Udo,zS,Jdo,Ydo,Kdo,Jp,BZ,Zdo,eco,WS,oco,rco,tco,Yp,xZ,aco,nco,QS,sco,lco,ico,Kp,kZ,dco,cco,HS,fco,mco,gco,Zp,RZ,hco,pco,US,_co,uco,bco,e_,SZ,vco,Tco,JS,Fco,Cco,Mco,o_,PZ,Eco,yco,YS,wco,Aco,Lco,r_,$Z,Bco,xco,KS,kco,Rco,Sco,t_,IZ,Pco,$co,ZS,Ico,Nco,Dco,a_,NZ,jco,qco,eP,Gco,Oco,Xco,n_,DZ,Vco,zco,oP,Wco,Qco,Hco,s_,jZ,Uco,Jco,rP,Yco,Kco,Zco,l_,qZ,efo,ofo,tP,rfo,tfo,afo,i_,GZ,nfo,sfo,aP,lfo,ifo,dfo,d_,OZ,cfo,ffo,nP,mfo,gfo,hfo,c_,XZ,pfo,_fo,sP,ufo,bfo,vfo,f_,VZ,Tfo,Ffo,lP,Cfo,Mfo,Efo,m_,zZ,yfo,wfo,iP,Afo,Lfo,Bfo,g_,WZ,xfo,kfo,dP,Rfo,Sfo,Pfo,h_,QZ,$fo,Ifo,cP,Nfo,Dfo,jfo,p_,HZ,qfo,Gfo,fP,Ofo,Xfo,Vfo,__,UZ,zfo,Wfo,mP,Qfo,Hfo,Ufo,u_,JZ,Jfo,Yfo,gP,Kfo,Zfo,emo,b_,YZ,omo,rmo,hP,tmo,amo,nmo,v_,KZ,smo,lmo,pP,imo,dmo,cmo,T_,ZZ,fmo,mmo,_P,gmo,hmo,pmo,F_,eee,_mo,umo,uP,bmo,vmo,Tmo,C_,oee,Fmo,Cmo,bP,Mmo,Emo,ymo,M_,ree,wmo,Amo,vP,Lmo,Bmo,xmo,E_,tee,kmo,Rmo,TP,Smo,Pmo,$mo,y_,aee,Imo,Nmo,FP,Dmo,jmo,qmo,w_,nee,Gmo,Omo,CP,Xmo,Vmo,zmo,A_,Wmo,see,Qmo,Hmo,lee,Umo,Jmo,iee,Ymo,Kmo,QE,Tke,Zi,L_,dee,HE,Zmo,cee,ego,Fke,Yo,UE,ogo,ed,rgo,fee,tgo,ago,mee,ngo,sgo,lgo,JE,igo,gee,dgo,cgo,fgo,zr,YE,mgo,hee,ggo,hgo,od,pgo,pee,_go,ugo,_ee,bgo,vgo,Tgo,uee,Fgo,Cgo,KE,Mgo,De,ZE,Ego,bee,ygo,wgo,za,Ago,vee,Lgo,Bgo,Tee,xgo,kgo,Fee,Rgo,Sgo,Pgo,k,B_,Cee,$go,Igo,MP,Ngo,Dgo,jgo,x_,Mee,qgo,Ggo,EP,Ogo,Xgo,Vgo,k_,Eee,zgo,Wgo,yP,Qgo,Hgo,Ugo,R_,yee,Jgo,Ygo,wP,Kgo,Zgo,eho,S_,wee,oho,rho,AP,tho,aho,nho,P_,Aee,sho,lho,LP,iho,dho,cho,$_,Lee,fho,mho,BP,gho,hho,pho,I_,Bee,_ho,uho,xP,bho,vho,Tho,N_,xee,Fho,Cho,kP,Mho,Eho,yho,D_,kee,who,Aho,RP,Lho,Bho,xho,j_,Ree,kho,Rho,SP,Sho,Pho,$ho,q_,See,Iho,Nho,PP,Dho,jho,qho,G_,Pee,Gho,Oho,$P,Xho,Vho,zho,O_,$ee,Who,Qho,IP,Hho,Uho,Jho,X_,Iee,Yho,Kho,NP,Zho,epo,opo,V_,Nee,rpo,tpo,DP,apo,npo,spo,z_,Dee,lpo,ipo,jP,dpo,cpo,fpo,W_,jee,mpo,gpo,qP,hpo,ppo,_po,Q_,qee,upo,bpo,GP,vpo,Tpo,Fpo,H_,Gee,Cpo,Mpo,OP,Epo,ypo,wpo,U_,Oee,Apo,Lpo,XP,Bpo,xpo,kpo,J_,Xee,Rpo,Spo,VP,Ppo,$po,Ipo,Y_,Vee,Npo,Dpo,zP,jpo,qpo,Gpo,K_,zee,Opo,Xpo,WP,Vpo,zpo,Wpo,Z_,Wee,Qpo,Hpo,QP,Upo,Jpo,Ypo,eu,Qee,Kpo,Zpo,HP,e_o,o_o,r_o,ou,Hee,t_o,a_o,UP,n_o,s_o,l_o,ru,Uee,i_o,d_o,JP,c_o,f_o,m_o,tu,Jee,g_o,h_o,YP,p_o,__o,u_o,au,Yee,b_o,v_o,KP,T_o,F_o,C_o,nu,Kee,M_o,E_o,ZP,y_o,w_o,A_o,su,Zee,L_o,B_o,e$,x_o,k_o,R_o,lu,eoe,S_o,P_o,o$,$_o,I_o,N_o,iu,ooe,D_o,j_o,r$,q_o,G_o,O_o,du,roe,X_o,V_o,t$,z_o,W_o,Q_o,cu,toe,H_o,U_o,a$,J_o,Y_o,K_o,fu,aoe,Z_o,euo,n$,ouo,ruo,tuo,mu,noe,auo,nuo,s$,suo,luo,iuo,gu,soe,duo,cuo,l$,fuo,muo,guo,hu,huo,loe,puo,_uo,ioe,uuo,buo,doe,vuo,Tuo,e3,Cke,rd,pu,coe,o3,Fuo,foe,Cuo,Mke,Ko,r3,Muo,td,Euo,moe,yuo,wuo,goe,Auo,Luo,Buo,t3,xuo,hoe,kuo,Ruo,Suo,Wr,a3,Puo,poe,$uo,Iuo,ad,Nuo,_oe,Duo,juo,uoe,quo,Guo,Ouo,boe,Xuo,Vuo,n3,zuo,je,s3,Wuo,voe,Quo,Huo,Wa,Uuo,Toe,Juo,Yuo,Foe,Kuo,Zuo,Coe,e1o,o1o,r1o,$,_u,Moe,t1o,a1o,i$,n1o,s1o,l1o,uu,Eoe,i1o,d1o,d$,c1o,f1o,m1o,bu,yoe,g1o,h1o,c$,p1o,_1o,u1o,vu,woe,b1o,v1o,f$,T1o,F1o,C1o,Tu,Aoe,M1o,E1o,m$,y1o,w1o,A1o,Fu,Loe,L1o,B1o,g$,x1o,k1o,R1o,Cu,Boe,S1o,P1o,h$,$1o,I1o,N1o,Mu,xoe,D1o,j1o,p$,q1o,G1o,O1o,Eu,koe,X1o,V1o,_$,z1o,W1o,Q1o,yu,Roe,H1o,U1o,u$,J1o,Y1o,K1o,wu,Soe,Z1o,ebo,b$,obo,rbo,tbo,Au,Poe,abo,nbo,v$,sbo,lbo,ibo,Lu,$oe,dbo,cbo,T$,fbo,mbo,gbo,Bu,Ioe,hbo,pbo,F$,_bo,ubo,bbo,xu,Noe,vbo,Tbo,C$,Fbo,Cbo,Mbo,ku,Doe,Ebo,ybo,M$,wbo,Abo,Lbo,Ru,joe,Bbo,xbo,E$,kbo,Rbo,Sbo,Su,qoe,Pbo,$bo,y$,Ibo,Nbo,Dbo,Pu,Goe,jbo,qbo,w$,Gbo,Obo,Xbo,$u,Ooe,Vbo,zbo,A$,Wbo,Qbo,Hbo,Iu,Xoe,Ubo,Jbo,L$,Ybo,Kbo,Zbo,Nu,Voe,e5o,o5o,B$,r5o,t5o,a5o,Du,zoe,n5o,s5o,x$,l5o,i5o,d5o,ju,Woe,c5o,f5o,k$,m5o,g5o,h5o,qu,Qoe,p5o,_5o,R$,u5o,b5o,v5o,Gu,Hoe,T5o,F5o,S$,C5o,M5o,E5o,Ou,Uoe,y5o,w5o,P$,A5o,L5o,B5o,Xu,Joe,x5o,k5o,$$,R5o,S5o,P5o,Vu,Yoe,$5o,I5o,I$,N5o,D5o,j5o,zu,Koe,q5o,G5o,N$,O5o,X5o,V5o,Wu,Zoe,z5o,W5o,D$,Q5o,H5o,U5o,Qu,ere,J5o,Y5o,j$,K5o,Z5o,e2o,Hu,ore,o2o,r2o,q$,t2o,a2o,n2o,Uu,rre,s2o,l2o,G$,i2o,d2o,c2o,Ju,tre,f2o,m2o,O$,g2o,h2o,p2o,Yu,_2o,are,u2o,b2o,nre,v2o,T2o,sre,F2o,C2o,l3,Eke,nd,Ku,lre,i3,M2o,ire,E2o,yke,Zo,d3,y2o,sd,w2o,dre,A2o,L2o,cre,B2o,x2o,k2o,c3,R2o,fre,S2o,P2o,$2o,Qr,f3,I2o,mre,N2o,D2o,ld,j2o,gre,q2o,G2o,hre,O2o,X2o,V2o,pre,z2o,W2o,m3,Q2o,qe,g3,H2o,_re,U2o,J2o,Qa,Y2o,ure,K2o,Z2o,bre,evo,ovo,vre,rvo,tvo,avo,I,Zu,Tre,nvo,svo,X$,lvo,ivo,dvo,e1,Fre,cvo,fvo,V$,mvo,gvo,hvo,o1,Cre,pvo,_vo,z$,uvo,bvo,vvo,r1,Mre,Tvo,Fvo,W$,Cvo,Mvo,Evo,t1,Ere,yvo,wvo,Q$,Avo,Lvo,Bvo,a1,yre,xvo,kvo,H$,Rvo,Svo,Pvo,n1,wre,$vo,Ivo,U$,Nvo,Dvo,jvo,s1,Are,qvo,Gvo,J$,Ovo,Xvo,Vvo,l1,Lre,zvo,Wvo,Y$,Qvo,Hvo,Uvo,i1,Bre,Jvo,Yvo,K$,Kvo,Zvo,eTo,d1,xre,oTo,rTo,Z$,tTo,aTo,nTo,c1,kre,sTo,lTo,eI,iTo,dTo,cTo,f1,Rre,fTo,mTo,oI,gTo,hTo,pTo,m1,Sre,_To,uTo,rI,bTo,vTo,TTo,g1,Pre,FTo,CTo,tI,MTo,ETo,yTo,h1,$re,wTo,ATo,aI,LTo,BTo,xTo,p1,Ire,kTo,RTo,nI,STo,PTo,$To,_1,Nre,ITo,NTo,sI,DTo,jTo,qTo,u1,Dre,GTo,OTo,lI,XTo,VTo,zTo,b1,jre,WTo,QTo,iI,HTo,UTo,JTo,v1,qre,YTo,KTo,dI,ZTo,e7o,o7o,T1,Gre,r7o,t7o,cI,a7o,n7o,s7o,F1,Ore,l7o,i7o,fI,d7o,c7o,f7o,C1,Xre,m7o,g7o,mI,h7o,p7o,_7o,M1,Vre,u7o,b7o,gI,v7o,T7o,F7o,E1,zre,C7o,M7o,hI,E7o,y7o,w7o,y1,Wre,A7o,L7o,pI,B7o,x7o,k7o,w1,Qre,R7o,S7o,_I,P7o,$7o,I7o,A1,Hre,N7o,D7o,uI,j7o,q7o,G7o,L1,Ure,O7o,X7o,bI,V7o,z7o,W7o,B1,Jre,Q7o,H7o,Yre,U7o,J7o,Y7o,x1,Kre,K7o,Z7o,vI,e8o,o8o,r8o,k1,Zre,t8o,a8o,TI,n8o,s8o,l8o,R1,ete,i8o,d8o,FI,c8o,f8o,m8o,S1,ote,g8o,h8o,CI,p8o,_8o,u8o,P1,b8o,rte,v8o,T8o,tte,F8o,C8o,ate,M8o,E8o,h3,wke,id,$1,nte,p3,y8o,ste,w8o,Ake,er,_3,A8o,dd,L8o,lte,B8o,x8o,ite,k8o,R8o,S8o,u3,P8o,dte,$8o,I8o,N8o,Hr,b3,D8o,cte,j8o,q8o,cd,G8o,fte,O8o,X8o,mte,V8o,z8o,W8o,gte,Q8o,H8o,v3,U8o,Ge,T3,J8o,hte,Y8o,K8o,Ha,Z8o,pte,eFo,oFo,_te,rFo,tFo,ute,aFo,nFo,sFo,se,I1,bte,lFo,iFo,MI,dFo,cFo,fFo,N1,vte,mFo,gFo,EI,hFo,pFo,_Fo,D1,Tte,uFo,bFo,yI,vFo,TFo,FFo,j1,Fte,CFo,MFo,wI,EFo,yFo,wFo,q1,Cte,AFo,LFo,AI,BFo,xFo,kFo,G1,Mte,RFo,SFo,LI,PFo,$Fo,IFo,O1,Ete,NFo,DFo,BI,jFo,qFo,GFo,X1,yte,OFo,XFo,xI,VFo,zFo,WFo,V1,wte,QFo,HFo,kI,UFo,JFo,YFo,z1,Ate,KFo,ZFo,RI,eCo,oCo,rCo,W1,Lte,tCo,aCo,SI,nCo,sCo,lCo,Q1,Bte,iCo,dCo,PI,cCo,fCo,mCo,H1,xte,gCo,hCo,$I,pCo,_Co,uCo,U1,kte,bCo,vCo,II,TCo,FCo,CCo,J1,Rte,MCo,ECo,NI,yCo,wCo,ACo,Y1,Ste,LCo,BCo,DI,xCo,kCo,RCo,K1,SCo,Pte,PCo,$Co,$te,ICo,NCo,Ite,DCo,jCo,F3,Lke,fd,Z1,Nte,C3,qCo,Dte,GCo,Bke,or,M3,OCo,md,XCo,jte,VCo,zCo,qte,WCo,QCo,HCo,E3,UCo,Gte,JCo,YCo,KCo,Ur,y3,ZCo,Ote,eMo,oMo,gd,rMo,Xte,tMo,aMo,Vte,nMo,sMo,lMo,zte,iMo,dMo,w3,cMo,Oe,A3,fMo,Wte,mMo,gMo,Ua,hMo,Qte,pMo,_Mo,Hte,uMo,bMo,Ute,vMo,TMo,FMo,A,eb,Jte,CMo,MMo,jI,EMo,yMo,wMo,ob,Yte,AMo,LMo,qI,BMo,xMo,kMo,rb,Kte,RMo,SMo,GI,PMo,$Mo,IMo,tb,Zte,NMo,DMo,OI,jMo,qMo,GMo,ab,eae,OMo,XMo,XI,VMo,zMo,WMo,nb,oae,QMo,HMo,VI,UMo,JMo,YMo,sb,rae,KMo,ZMo,zI,e4o,o4o,r4o,lb,tae,t4o,a4o,WI,n4o,s4o,l4o,ib,aae,i4o,d4o,QI,c4o,f4o,m4o,db,nae,g4o,h4o,HI,p4o,_4o,u4o,cb,sae,b4o,v4o,UI,T4o,F4o,C4o,fb,lae,M4o,E4o,JI,y4o,w4o,A4o,mb,iae,L4o,B4o,YI,x4o,k4o,R4o,gb,dae,S4o,P4o,KI,$4o,I4o,N4o,hb,cae,D4o,j4o,ZI,q4o,G4o,O4o,pb,fae,X4o,V4o,eN,z4o,W4o,Q4o,_b,mae,H4o,U4o,oN,J4o,Y4o,K4o,ub,gae,Z4o,eEo,rN,oEo,rEo,tEo,bb,hae,aEo,nEo,tN,sEo,lEo,iEo,vb,pae,dEo,cEo,aN,fEo,mEo,gEo,Tb,_ae,hEo,pEo,nN,_Eo,uEo,bEo,Fb,uae,vEo,TEo,sN,FEo,CEo,MEo,Cb,bae,EEo,yEo,lN,wEo,AEo,LEo,Mb,vae,BEo,xEo,iN,kEo,REo,SEo,Eb,Tae,PEo,$Eo,dN,IEo,NEo,DEo,yb,Fae,jEo,qEo,cN,GEo,OEo,XEo,wb,Cae,VEo,zEo,fN,WEo,QEo,HEo,Ab,Mae,UEo,JEo,mN,YEo,KEo,ZEo,Lb,Eae,e3o,o3o,gN,r3o,t3o,a3o,Bb,yae,n3o,s3o,hN,l3o,i3o,d3o,xb,wae,c3o,f3o,pN,m3o,g3o,h3o,kb,Aae,p3o,_3o,_N,u3o,b3o,v3o,Rb,Lae,T3o,F3o,uN,C3o,M3o,E3o,Sb,Bae,y3o,w3o,bN,A3o,L3o,B3o,Pb,xae,x3o,k3o,vN,R3o,S3o,P3o,$b,kae,$3o,I3o,TN,N3o,D3o,j3o,Ib,Rae,q3o,G3o,FN,O3o,X3o,V3o,Nb,Sae,z3o,W3o,CN,Q3o,H3o,U3o,Db,Pae,J3o,Y3o,MN,K3o,Z3o,eyo,jb,$ae,oyo,ryo,EN,tyo,ayo,nyo,qb,Iae,syo,lyo,yN,iyo,dyo,cyo,Gb,Nae,fyo,myo,wN,gyo,hyo,pyo,Ob,Dae,_yo,uyo,AN,byo,vyo,Tyo,Xb,jae,Fyo,Cyo,LN,Myo,Eyo,yyo,Vb,qae,wyo,Ayo,BN,Lyo,Byo,xyo,zb,Gae,kyo,Ryo,xN,Syo,Pyo,$yo,Wb,Iyo,Oae,Nyo,Dyo,Xae,jyo,qyo,Vae,Gyo,Oyo,L3,xke,hd,Qb,zae,B3,Xyo,Wae,Vyo,kke,rr,x3,zyo,pd,Wyo,Qae,Qyo,Hyo,Hae,Uyo,Jyo,Yyo,k3,Kyo,Uae,Zyo,ewo,owo,Jr,R3,rwo,Jae,two,awo,_d,nwo,Yae,swo,lwo,Kae,iwo,dwo,cwo,Zae,fwo,mwo,S3,gwo,Xe,P3,hwo,ene,pwo,_wo,Ja,uwo,one,bwo,vwo,rne,Two,Fwo,tne,Cwo,Mwo,Ewo,G,Hb,ane,ywo,wwo,kN,Awo,Lwo,Bwo,Ub,nne,xwo,kwo,RN,Rwo,Swo,Pwo,Jb,sne,$wo,Iwo,SN,Nwo,Dwo,jwo,Yb,lne,qwo,Gwo,PN,Owo,Xwo,Vwo,Kb,ine,zwo,Wwo,$N,Qwo,Hwo,Uwo,Zb,dne,Jwo,Ywo,IN,Kwo,Zwo,e6o,e5,cne,o6o,r6o,NN,t6o,a6o,n6o,o5,fne,s6o,l6o,DN,i6o,d6o,c6o,r5,mne,f6o,m6o,jN,g6o,h6o,p6o,t5,gne,_6o,u6o,qN,b6o,v6o,T6o,a5,hne,F6o,C6o,GN,M6o,E6o,y6o,n5,pne,w6o,A6o,ON,L6o,B6o,x6o,s5,_ne,k6o,R6o,XN,S6o,P6o,$6o,l5,une,I6o,N6o,VN,D6o,j6o,q6o,i5,bne,G6o,O6o,zN,X6o,V6o,z6o,d5,vne,W6o,Q6o,WN,H6o,U6o,J6o,c5,Tne,Y6o,K6o,QN,Z6o,eAo,oAo,f5,Fne,rAo,tAo,HN,aAo,nAo,sAo,m5,Cne,lAo,iAo,UN,dAo,cAo,fAo,g5,Mne,mAo,gAo,JN,hAo,pAo,_Ao,h5,Ene,uAo,bAo,YN,vAo,TAo,FAo,p5,yne,CAo,MAo,KN,EAo,yAo,wAo,_5,wne,AAo,LAo,ZN,BAo,xAo,kAo,u5,Ane,RAo,SAo,eD,PAo,$Ao,IAo,b5,Lne,NAo,DAo,oD,jAo,qAo,GAo,v5,Bne,OAo,XAo,rD,VAo,zAo,WAo,T5,xne,QAo,HAo,tD,UAo,JAo,YAo,F5,kne,KAo,ZAo,aD,e0o,o0o,r0o,C5,t0o,Rne,a0o,n0o,Sne,s0o,l0o,Pne,i0o,d0o,$3,Rke,ud,M5,$ne,I3,c0o,Ine,f0o,Ske,tr,N3,m0o,bd,g0o,Nne,h0o,p0o,Dne,_0o,u0o,b0o,D3,v0o,jne,T0o,F0o,C0o,Yr,j3,M0o,qne,E0o,y0o,vd,w0o,Gne,A0o,L0o,One,B0o,x0o,k0o,Xne,R0o,S0o,q3,P0o,Ve,G3,$0o,Vne,I0o,N0o,Ya,D0o,zne,j0o,q0o,Wne,G0o,O0o,Qne,X0o,V0o,z0o,da,E5,Hne,W0o,Q0o,nD,H0o,U0o,J0o,y5,Une,Y0o,K0o,sD,Z0o,eLo,oLo,w5,Jne,rLo,tLo,lD,aLo,nLo,sLo,A5,Yne,lLo,iLo,iD,dLo,cLo,fLo,L5,Kne,mLo,gLo,dD,hLo,pLo,_Lo,B5,uLo,Zne,bLo,vLo,ese,TLo,FLo,ose,CLo,MLo,O3,Pke,Td,x5,rse,X3,ELo,tse,yLo,$ke,ar,V3,wLo,Fd,ALo,ase,LLo,BLo,nse,xLo,kLo,RLo,z3,SLo,sse,PLo,$Lo,ILo,Kr,W3,NLo,lse,DLo,jLo,Cd,qLo,ise,GLo,OLo,dse,XLo,VLo,zLo,cse,WLo,QLo,Q3,HLo,ze,H3,ULo,fse,JLo,YLo,Ka,KLo,mse,ZLo,e9o,gse,o9o,r9o,hse,t9o,a9o,n9o,j,k5,pse,s9o,l9o,cD,i9o,d9o,c9o,R5,_se,f9o,m9o,fD,g9o,h9o,p9o,S5,use,_9o,u9o,mD,b9o,v9o,T9o,P5,bse,F9o,C9o,gD,M9o,E9o,y9o,$5,vse,w9o,A9o,hD,L9o,B9o,x9o,I5,Tse,k9o,R9o,pD,S9o,P9o,$9o,N5,Fse,I9o,N9o,_D,D9o,j9o,q9o,D5,Cse,G9o,O9o,uD,X9o,V9o,z9o,j5,Mse,W9o,Q9o,bD,H9o,U9o,J9o,q5,Ese,Y9o,K9o,vD,Z9o,eBo,oBo,G5,yse,rBo,tBo,TD,aBo,nBo,sBo,O5,wse,lBo,iBo,FD,dBo,cBo,fBo,X5,Ase,mBo,gBo,CD,hBo,pBo,_Bo,V5,Lse,uBo,bBo,MD,vBo,TBo,FBo,z5,Bse,CBo,MBo,ED,EBo,yBo,wBo,W5,xse,ABo,LBo,yD,BBo,xBo,kBo,Q5,kse,RBo,SBo,wD,PBo,$Bo,IBo,H5,Rse,NBo,DBo,AD,jBo,qBo,GBo,U5,Sse,OBo,XBo,LD,VBo,zBo,WBo,J5,Pse,QBo,HBo,BD,UBo,JBo,YBo,Y5,$se,KBo,ZBo,xD,exo,oxo,rxo,K5,Ise,txo,axo,kD,nxo,sxo,lxo,Z5,Nse,ixo,dxo,RD,cxo,fxo,mxo,e2,Dse,gxo,hxo,SD,pxo,_xo,uxo,o2,jse,bxo,vxo,PD,Txo,Fxo,Cxo,r2,qse,Mxo,Exo,$D,yxo,wxo,Axo,t2,Gse,Lxo,Bxo,ID,xxo,kxo,Rxo,a2,Ose,Sxo,Pxo,ND,$xo,Ixo,Nxo,n2,Xse,Dxo,jxo,DD,qxo,Gxo,Oxo,s2,Vse,Xxo,Vxo,jD,zxo,Wxo,Qxo,l2,zse,Hxo,Uxo,qD,Jxo,Yxo,Kxo,i2,Wse,Zxo,eko,GD,oko,rko,tko,d2,Qse,ako,nko,OD,sko,lko,iko,c2,dko,Hse,cko,fko,Use,mko,gko,Jse,hko,pko,U3,Ike,Md,f2,Yse,J3,_ko,Kse,uko,Nke,nr,Y3,bko,Ed,vko,Zse,Tko,Fko,ele,Cko,Mko,Eko,K3,yko,ole,wko,Ako,Lko,Zr,Z3,Bko,rle,xko,kko,yd,Rko,tle,Sko,Pko,ale,$ko,Iko,Nko,nle,Dko,jko,ey,qko,We,oy,Gko,sle,Oko,Xko,Za,Vko,lle,zko,Wko,ile,Qko,Hko,dle,Uko,Jko,Yko,R,m2,cle,Kko,Zko,XD,eRo,oRo,rRo,g2,fle,tRo,aRo,VD,nRo,sRo,lRo,h2,mle,iRo,dRo,zD,cRo,fRo,mRo,p2,gle,gRo,hRo,WD,pRo,_Ro,uRo,_2,hle,bRo,vRo,QD,TRo,FRo,CRo,u2,ple,MRo,ERo,HD,yRo,wRo,ARo,b2,_le,LRo,BRo,UD,xRo,kRo,RRo,v2,ule,SRo,PRo,JD,$Ro,IRo,NRo,T2,ble,DRo,jRo,YD,qRo,GRo,ORo,F2,vle,XRo,VRo,KD,zRo,WRo,QRo,C2,Tle,HRo,URo,ZD,JRo,YRo,KRo,M2,Fle,ZRo,eSo,ej,oSo,rSo,tSo,E2,Cle,aSo,nSo,oj,sSo,lSo,iSo,y2,Mle,dSo,cSo,rj,fSo,mSo,gSo,w2,Ele,hSo,pSo,tj,_So,uSo,bSo,A2,yle,vSo,TSo,aj,FSo,CSo,MSo,L2,wle,ESo,ySo,nj,wSo,ASo,LSo,B2,Ale,BSo,xSo,sj,kSo,RSo,SSo,x2,Lle,PSo,$So,lj,ISo,NSo,DSo,k2,Ble,jSo,qSo,ij,GSo,OSo,XSo,R2,xle,VSo,zSo,dj,WSo,QSo,HSo,S2,kle,USo,JSo,cj,YSo,KSo,ZSo,P2,Rle,ePo,oPo,fj,rPo,tPo,aPo,$2,Sle,nPo,sPo,mj,lPo,iPo,dPo,I2,Ple,cPo,fPo,gj,mPo,gPo,hPo,N2,$le,pPo,_Po,hj,uPo,bPo,vPo,D2,Ile,TPo,FPo,pj,CPo,MPo,EPo,j2,Nle,yPo,wPo,_j,APo,LPo,BPo,q2,Dle,xPo,kPo,uj,RPo,SPo,PPo,G2,jle,$Po,IPo,bj,NPo,DPo,jPo,O2,qle,qPo,GPo,vj,OPo,XPo,VPo,X2,Gle,zPo,WPo,Tj,QPo,HPo,UPo,V2,Ole,JPo,YPo,Fj,KPo,ZPo,e$o,z2,Xle,o$o,r$o,Cj,t$o,a$o,n$o,W2,Vle,s$o,l$o,Mj,i$o,d$o,c$o,Q2,zle,f$o,m$o,Ej,g$o,h$o,p$o,H2,Wle,_$o,u$o,yj,b$o,v$o,T$o,U2,Qle,F$o,C$o,wj,M$o,E$o,y$o,J2,Hle,w$o,A$o,Aj,L$o,B$o,x$o,Y2,k$o,Ule,R$o,S$o,Jle,P$o,$$o,Yle,I$o,N$o,ry,Dke,wd,K2,Kle,ty,D$o,Zle,j$o,jke,sr,ay,q$o,Ad,G$o,eie,O$o,X$o,oie,V$o,z$o,W$o,ny,Q$o,rie,H$o,U$o,J$o,et,sy,Y$o,tie,K$o,Z$o,Ld,eIo,aie,oIo,rIo,nie,tIo,aIo,nIo,sie,sIo,lIo,ly,iIo,Qe,iy,dIo,lie,cIo,fIo,en,mIo,iie,gIo,hIo,die,pIo,_Io,cie,uIo,bIo,vIo,fie,Z2,mie,TIo,FIo,Lj,CIo,MIo,EIo,ev,yIo,gie,wIo,AIo,hie,LIo,BIo,pie,xIo,kIo,dy,qke,Bd,ov,_ie,cy,RIo,uie,SIo,Gke,lr,fy,PIo,xd,$Io,bie,IIo,NIo,vie,DIo,jIo,qIo,my,GIo,Tie,OIo,XIo,VIo,ot,gy,zIo,Fie,WIo,QIo,kd,HIo,Cie,UIo,JIo,Mie,YIo,KIo,ZIo,Eie,eNo,oNo,hy,rNo,He,py,tNo,yie,aNo,nNo,on,sNo,wie,lNo,iNo,Aie,dNo,cNo,Lie,fNo,mNo,gNo,me,rv,Bie,hNo,pNo,Bj,_No,uNo,bNo,tv,xie,vNo,TNo,xj,FNo,CNo,MNo,qs,kie,ENo,yNo,kj,wNo,ANo,Rj,LNo,BNo,xNo,av,Rie,kNo,RNo,Sj,SNo,PNo,$No,ma,Sie,INo,NNo,Pj,DNo,jNo,$j,qNo,GNo,Ij,ONo,XNo,VNo,nv,Pie,zNo,WNo,Nj,QNo,HNo,UNo,sv,$ie,JNo,YNo,Dj,KNo,ZNo,eDo,lv,Iie,oDo,rDo,jj,tDo,aDo,nDo,iv,Nie,sDo,lDo,qj,iDo,dDo,cDo,dv,Die,fDo,mDo,Gj,gDo,hDo,pDo,cv,jie,_Do,uDo,Oj,bDo,vDo,TDo,fv,FDo,qie,CDo,MDo,Gie,EDo,yDo,Oie,wDo,ADo,_y,Oke,Rd,mv,Xie,uy,LDo,Vie,BDo,Xke,ir,by,xDo,Sd,kDo,zie,RDo,SDo,Wie,PDo,$Do,IDo,vy,NDo,Qie,DDo,jDo,qDo,rt,Ty,GDo,Hie,ODo,XDo,Pd,VDo,Uie,zDo,WDo,Jie,QDo,HDo,UDo,Yie,JDo,YDo,Fy,KDo,Ue,Cy,ZDo,Kie,ejo,ojo,rn,rjo,Zie,tjo,ajo,ede,njo,sjo,ode,ljo,ijo,djo,rde,gv,tde,cjo,fjo,Xj,mjo,gjo,hjo,hv,pjo,ade,_jo,ujo,nde,bjo,vjo,sde,Tjo,Fjo,My,Vke,$d,pv,lde,Ey,Cjo,ide,Mjo,zke,dr,yy,Ejo,Id,yjo,dde,wjo,Ajo,cde,Ljo,Bjo,xjo,wy,kjo,fde,Rjo,Sjo,Pjo,tt,Ay,$jo,mde,Ijo,Njo,Nd,Djo,gde,jjo,qjo,hde,Gjo,Ojo,Xjo,pde,Vjo,zjo,Ly,Wjo,Je,By,Qjo,_de,Hjo,Ujo,tn,Jjo,ude,Yjo,Kjo,bde,Zjo,eqo,vde,oqo,rqo,tqo,ke,_v,Tde,aqo,nqo,Vj,sqo,lqo,iqo,uv,Fde,dqo,cqo,zj,fqo,mqo,gqo,bv,Cde,hqo,pqo,Wj,_qo,uqo,bqo,vv,Mde,vqo,Tqo,Qj,Fqo,Cqo,Mqo,Tv,Ede,Eqo,yqo,Hj,wqo,Aqo,Lqo,Fv,yde,Bqo,xqo,Uj,kqo,Rqo,Sqo,Cv,wde,Pqo,$qo,Jj,Iqo,Nqo,Dqo,Mv,Ade,jqo,qqo,Yj,Gqo,Oqo,Xqo,Ev,Vqo,Lde,zqo,Wqo,Bde,Qqo,Hqo,xde,Uqo,Jqo,xy,Wke,Dd,yv,kde,ky,Yqo,Rde,Kqo,Qke,cr,Ry,Zqo,jd,eGo,Sde,oGo,rGo,Pde,tGo,aGo,nGo,Sy,sGo,$de,lGo,iGo,dGo,at,Py,cGo,Ide,fGo,mGo,qd,gGo,Nde,hGo,pGo,Dde,_Go,uGo,bGo,jde,vGo,TGo,$y,FGo,Ye,Iy,CGo,qde,MGo,EGo,an,yGo,Gde,wGo,AGo,Ode,LGo,BGo,Xde,xGo,kGo,RGo,nn,wv,Vde,SGo,PGo,Kj,$Go,IGo,NGo,Av,zde,DGo,jGo,Zj,qGo,GGo,OGo,Lv,Wde,XGo,VGo,eq,zGo,WGo,QGo,Bv,Qde,HGo,UGo,oq,JGo,YGo,KGo,xv,ZGo,Hde,eOo,oOo,Ude,rOo,tOo,Jde,aOo,nOo,Ny,Hke,Gd,kv,Yde,Dy,sOo,Kde,lOo,Uke,fr,jy,iOo,Od,dOo,Zde,cOo,fOo,ece,mOo,gOo,hOo,qy,pOo,oce,_Oo,uOo,bOo,nt,Gy,vOo,rce,TOo,FOo,Xd,COo,tce,MOo,EOo,ace,yOo,wOo,AOo,nce,LOo,BOo,Oy,xOo,Ke,Xy,kOo,sce,ROo,SOo,sn,POo,lce,$Oo,IOo,ice,NOo,DOo,dce,jOo,qOo,GOo,Re,Rv,cce,OOo,XOo,rq,VOo,zOo,WOo,Sv,fce,QOo,HOo,tq,UOo,JOo,YOo,Pv,mce,KOo,ZOo,aq,eXo,oXo,rXo,$v,gce,tXo,aXo,nq,nXo,sXo,lXo,Iv,hce,iXo,dXo,sq,cXo,fXo,mXo,Nv,pce,gXo,hXo,lq,pXo,_Xo,uXo,Dv,_ce,bXo,vXo,iq,TXo,FXo,CXo,jv,uce,MXo,EXo,dq,yXo,wXo,AXo,qv,LXo,bce,BXo,xXo,vce,kXo,RXo,Tce,SXo,PXo,Vy,Jke,Vd,Gv,Fce,zy,$Xo,Cce,IXo,Yke,mr,Wy,NXo,zd,DXo,Mce,jXo,qXo,Ece,GXo,OXo,XXo,Qy,VXo,yce,zXo,WXo,QXo,st,Hy,HXo,wce,UXo,JXo,Wd,YXo,Ace,KXo,ZXo,Lce,eVo,oVo,rVo,Bce,tVo,aVo,Uy,nVo,Ze,Jy,sVo,xce,lVo,iVo,ln,dVo,kce,cVo,fVo,Rce,mVo,gVo,Sce,hVo,pVo,_Vo,Yy,Ov,Pce,uVo,bVo,cq,vVo,TVo,FVo,Xv,$ce,CVo,MVo,fq,EVo,yVo,wVo,Vv,AVo,Ice,LVo,BVo,Nce,xVo,kVo,Dce,RVo,SVo,Ky,Kke,Qd,zv,jce,Zy,PVo,qce,$Vo,Zke,gr,ew,IVo,Hd,NVo,Gce,DVo,jVo,Oce,qVo,GVo,OVo,ow,XVo,Xce,VVo,zVo,WVo,lt,rw,QVo,Vce,HVo,UVo,Ud,JVo,zce,YVo,KVo,Wce,ZVo,ezo,ozo,Qce,rzo,tzo,tw,azo,eo,aw,nzo,Hce,szo,lzo,dn,izo,Uce,dzo,czo,Jce,fzo,mzo,Yce,gzo,hzo,pzo,cn,Wv,Kce,_zo,uzo,mq,bzo,vzo,Tzo,Qv,Zce,Fzo,Czo,gq,Mzo,Ezo,yzo,Hv,efe,wzo,Azo,hq,Lzo,Bzo,xzo,Uv,ofe,kzo,Rzo,pq,Szo,Pzo,$zo,Jv,Izo,rfe,Nzo,Dzo,tfe,jzo,qzo,afe,Gzo,Ozo,nw,eRe,Jd,Yv,nfe,sw,Xzo,sfe,Vzo,oRe,hr,lw,zzo,Yd,Wzo,lfe,Qzo,Hzo,ife,Uzo,Jzo,Yzo,iw,Kzo,dfe,Zzo,eWo,oWo,it,dw,rWo,cfe,tWo,aWo,Kd,nWo,ffe,sWo,lWo,mfe,iWo,dWo,cWo,gfe,fWo,mWo,cw,gWo,oo,fw,hWo,hfe,pWo,_Wo,fn,uWo,pfe,bWo,vWo,_fe,TWo,FWo,ufe,CWo,MWo,EWo,Zd,Kv,bfe,yWo,wWo,_q,AWo,LWo,BWo,Zv,vfe,xWo,kWo,uq,RWo,SWo,PWo,eT,Tfe,$Wo,IWo,bq,NWo,DWo,jWo,oT,qWo,Ffe,GWo,OWo,Cfe,XWo,VWo,Mfe,zWo,WWo,mw,rRe,ec,rT,Efe,gw,QWo,yfe,HWo,tRe,pr,hw,UWo,oc,JWo,wfe,YWo,KWo,Afe,ZWo,eQo,oQo,pw,rQo,Lfe,tQo,aQo,nQo,dt,_w,sQo,Bfe,lQo,iQo,rc,dQo,xfe,cQo,fQo,kfe,mQo,gQo,hQo,Rfe,pQo,_Qo,uw,uQo,ro,bw,bQo,Sfe,vQo,TQo,mn,FQo,Pfe,CQo,MQo,$fe,EQo,yQo,Ife,wQo,AQo,LQo,Nfe,tT,Dfe,BQo,xQo,vq,kQo,RQo,SQo,aT,PQo,jfe,$Qo,IQo,qfe,NQo,DQo,Gfe,jQo,qQo,vw,aRe,tc,nT,Ofe,Tw,GQo,Xfe,OQo,nRe,_r,Fw,XQo,ac,VQo,Vfe,zQo,WQo,zfe,QQo,HQo,UQo,Cw,JQo,Wfe,YQo,KQo,ZQo,ct,Mw,eHo,Qfe,oHo,rHo,nc,tHo,Hfe,aHo,nHo,Ufe,sHo,lHo,iHo,Jfe,dHo,cHo,Ew,fHo,to,yw,mHo,Yfe,gHo,hHo,gn,pHo,Kfe,_Ho,uHo,Zfe,bHo,vHo,eme,THo,FHo,CHo,ome,sT,rme,MHo,EHo,Tq,yHo,wHo,AHo,lT,LHo,tme,BHo,xHo,ame,kHo,RHo,nme,SHo,PHo,ww,sRe,sc,iT,sme,Aw,$Ho,lme,IHo,lRe,ur,Lw,NHo,lc,DHo,ime,jHo,qHo,dme,GHo,OHo,XHo,Bw,VHo,cme,zHo,WHo,QHo,ft,xw,HHo,fme,UHo,JHo,ic,YHo,mme,KHo,ZHo,gme,eUo,oUo,rUo,hme,tUo,aUo,kw,nUo,ao,Rw,sUo,pme,lUo,iUo,hn,dUo,_me,cUo,fUo,ume,mUo,gUo,bme,hUo,pUo,_Uo,dc,dT,vme,uUo,bUo,Fq,vUo,TUo,FUo,cT,Tme,CUo,MUo,Cq,EUo,yUo,wUo,fT,Fme,AUo,LUo,Mq,BUo,xUo,kUo,mT,RUo,Cme,SUo,PUo,Mme,$Uo,IUo,Eme,NUo,DUo,Sw,iRe,cc,gT,yme,Pw,jUo,wme,qUo,dRe,br,$w,GUo,fc,OUo,Ame,XUo,VUo,Lme,zUo,WUo,QUo,Iw,HUo,Bme,UUo,JUo,YUo,mt,Nw,KUo,xme,ZUo,eJo,mc,oJo,kme,rJo,tJo,Rme,aJo,nJo,sJo,Sme,lJo,iJo,Dw,dJo,no,jw,cJo,Pme,fJo,mJo,pn,gJo,$me,hJo,pJo,Ime,_Jo,uJo,Nme,bJo,vJo,TJo,Dme,hT,jme,FJo,CJo,Eq,MJo,EJo,yJo,pT,wJo,qme,AJo,LJo,Gme,BJo,xJo,Ome,kJo,RJo,qw,cRe,gc,_T,Xme,Gw,SJo,Vme,PJo,fRe,vr,Ow,$Jo,hc,IJo,zme,NJo,DJo,Wme,jJo,qJo,GJo,Xw,OJo,Qme,XJo,VJo,zJo,gt,Vw,WJo,Hme,QJo,HJo,pc,UJo,Ume,JJo,YJo,Jme,KJo,ZJo,eYo,Yme,oYo,rYo,zw,tYo,ho,Ww,aYo,Kme,nYo,sYo,_n,lYo,Zme,iYo,dYo,ege,cYo,fYo,oge,mYo,gYo,hYo,B,uT,rge,pYo,_Yo,yq,uYo,bYo,vYo,bT,tge,TYo,FYo,wq,CYo,MYo,EYo,vT,age,yYo,wYo,Aq,AYo,LYo,BYo,TT,nge,xYo,kYo,Lq,RYo,SYo,PYo,FT,sge,$Yo,IYo,Bq,NYo,DYo,jYo,CT,lge,qYo,GYo,xq,OYo,XYo,VYo,MT,ige,zYo,WYo,kq,QYo,HYo,UYo,ET,dge,JYo,YYo,Rq,KYo,ZYo,eKo,yT,cge,oKo,rKo,Sq,tKo,aKo,nKo,wT,fge,sKo,lKo,Pq,iKo,dKo,cKo,AT,mge,fKo,mKo,$q,gKo,hKo,pKo,LT,gge,_Ko,uKo,Iq,bKo,vKo,TKo,BT,hge,FKo,CKo,Nq,MKo,EKo,yKo,xT,pge,wKo,AKo,Dq,LKo,BKo,xKo,kT,_ge,kKo,RKo,jq,SKo,PKo,$Ko,RT,uge,IKo,NKo,qq,DKo,jKo,qKo,Gs,bge,GKo,OKo,Gq,XKo,VKo,Oq,zKo,WKo,QKo,ST,vge,HKo,UKo,Xq,JKo,YKo,KKo,PT,Tge,ZKo,eZo,Vq,oZo,rZo,tZo,$T,Fge,aZo,nZo,zq,sZo,lZo,iZo,IT,Cge,dZo,cZo,Wq,fZo,mZo,gZo,NT,Mge,hZo,pZo,Qq,_Zo,uZo,bZo,DT,Ege,vZo,TZo,Hq,FZo,CZo,MZo,jT,yge,EZo,yZo,Uq,wZo,AZo,LZo,qT,wge,BZo,xZo,Jq,kZo,RZo,SZo,GT,Age,PZo,$Zo,Yq,IZo,NZo,DZo,OT,Lge,jZo,qZo,Kq,GZo,OZo,XZo,XT,Bge,VZo,zZo,Zq,WZo,QZo,HZo,VT,xge,UZo,JZo,eG,YZo,KZo,ZZo,zT,kge,eer,oer,oG,rer,ter,aer,WT,Rge,ner,ser,rG,ler,ier,der,QT,Sge,cer,fer,tG,mer,ger,her,HT,Pge,per,_er,aG,uer,ber,ver,UT,$ge,Ter,Fer,nG,Cer,Mer,Eer,JT,Ige,yer,wer,sG,Aer,Ler,Ber,YT,Nge,xer,ker,lG,Rer,Ser,Per,KT,Dge,$er,Ier,iG,Ner,Der,jer,ZT,jge,qer,Ger,dG,Oer,Xer,Ver,e7,qge,zer,Wer,cG,Qer,Her,Uer,o7,Gge,Jer,Yer,fG,Ker,Zer,eor,r7,Oge,oor,ror,mG,tor,aor,nor,t7,Xge,sor,lor,gG,ior,dor,cor,Vge,mor,gor,Qw,mRe,_c,a7,zge,Hw,hor,Wge,por,gRe,Tr,Uw,_or,uc,uor,Qge,bor,vor,Hge,Tor,For,Cor,Jw,Mor,Uge,Eor,yor,wor,ht,Yw,Aor,Jge,Lor,Bor,bc,xor,Yge,kor,Ror,Kge,Sor,Por,$or,Zge,Ior,Nor,Kw,Dor,po,Zw,jor,ehe,qor,Gor,un,Oor,ohe,Xor,Vor,rhe,zor,Wor,the,Qor,Hor,Uor,H,n7,ahe,Jor,Yor,hG,Kor,Zor,err,s7,nhe,orr,rrr,pG,trr,arr,nrr,l7,she,srr,lrr,_G,irr,drr,crr,i7,lhe,frr,mrr,uG,grr,hrr,prr,d7,ihe,_rr,urr,bG,brr,vrr,Trr,c7,dhe,Frr,Crr,vG,Mrr,Err,yrr,f7,che,wrr,Arr,TG,Lrr,Brr,xrr,m7,fhe,krr,Rrr,FG,Srr,Prr,$rr,g7,mhe,Irr,Nrr,CG,Drr,jrr,qrr,h7,ghe,Grr,Orr,MG,Xrr,Vrr,zrr,p7,hhe,Wrr,Qrr,EG,Hrr,Urr,Jrr,_7,phe,Yrr,Krr,yG,Zrr,etr,otr,u7,_he,rtr,ttr,wG,atr,ntr,str,b7,uhe,ltr,itr,AG,dtr,ctr,ftr,v7,bhe,mtr,gtr,LG,htr,ptr,_tr,T7,vhe,utr,btr,BG,vtr,Ttr,Ftr,F7,The,Ctr,Mtr,xG,Etr,ytr,wtr,C7,Fhe,Atr,Ltr,kG,Btr,xtr,ktr,M7,Che,Rtr,Str,RG,Ptr,$tr,Itr,E7,Mhe,Ntr,Dtr,SG,jtr,qtr,Gtr,y7,Ehe,Otr,Xtr,PG,Vtr,ztr,Wtr,w7,yhe,Qtr,Htr,$G,Utr,Jtr,Ytr,whe,Ktr,Ztr,e6,hRe,vc,A7,Ahe,o6,ear,Lhe,oar,pRe,Fr,r6,rar,Tc,tar,Bhe,aar,nar,xhe,sar,lar,iar,t6,dar,khe,car,far,mar,pt,a6,gar,Rhe,har,par,Fc,_ar,She,uar,bar,Phe,Tar,Far,Car,$he,Mar,Ear,n6,yar,_o,s6,war,Ihe,Aar,Lar,bn,Bar,Nhe,xar,kar,Dhe,Rar,Sar,jhe,Par,$ar,Iar,ge,L7,qhe,Nar,Dar,IG,jar,qar,Gar,B7,Ghe,Oar,Xar,NG,Var,zar,War,x7,Ohe,Qar,Har,DG,Uar,Jar,Yar,k7,Xhe,Kar,Zar,jG,enr,onr,rnr,R7,Vhe,tnr,anr,qG,nnr,snr,lnr,S7,zhe,inr,dnr,GG,cnr,fnr,mnr,P7,Whe,gnr,hnr,OG,pnr,_nr,unr,$7,Qhe,bnr,vnr,XG,Tnr,Fnr,Cnr,I7,Hhe,Mnr,Enr,VG,ynr,wnr,Anr,N7,Uhe,Lnr,Bnr,zG,xnr,knr,Rnr,D7,Jhe,Snr,Pnr,WG,$nr,Inr,Nnr,Yhe,Dnr,jnr,l6,_Re,Cc,j7,Khe,i6,qnr,Zhe,Gnr,uRe,Cr,d6,Onr,Mc,Xnr,epe,Vnr,znr,ope,Wnr,Qnr,Hnr,c6,Unr,rpe,Jnr,Ynr,Knr,_t,f6,Znr,tpe,esr,osr,Ec,rsr,ape,tsr,asr,npe,nsr,ssr,lsr,spe,isr,dsr,m6,csr,uo,g6,fsr,lpe,msr,gsr,vn,hsr,ipe,psr,_sr,dpe,usr,bsr,cpe,vsr,Tsr,Fsr,h6,q7,fpe,Csr,Msr,QG,Esr,ysr,wsr,G7,mpe,Asr,Lsr,HG,Bsr,xsr,ksr,gpe,Rsr,Ssr,p6,bRe,yc,O7,hpe,_6,Psr,ppe,$sr,vRe,Mr,u6,Isr,wc,Nsr,_pe,Dsr,jsr,upe,qsr,Gsr,Osr,b6,Xsr,bpe,Vsr,zsr,Wsr,ut,v6,Qsr,vpe,Hsr,Usr,Ac,Jsr,Tpe,Ysr,Ksr,Fpe,Zsr,elr,olr,Cpe,rlr,tlr,T6,alr,bo,F6,nlr,Mpe,slr,llr,Tn,ilr,Epe,dlr,clr,ype,flr,mlr,wpe,glr,hlr,plr,J,X7,Ape,_lr,ulr,UG,blr,vlr,Tlr,V7,Lpe,Flr,Clr,JG,Mlr,Elr,ylr,z7,Bpe,wlr,Alr,YG,Llr,Blr,xlr,W7,xpe,klr,Rlr,KG,Slr,Plr,$lr,Q7,kpe,Ilr,Nlr,ZG,Dlr,jlr,qlr,H7,Rpe,Glr,Olr,eO,Xlr,Vlr,zlr,U7,Spe,Wlr,Qlr,oO,Hlr,Ulr,Jlr,J7,Ppe,Ylr,Klr,rO,Zlr,eir,oir,Y7,$pe,rir,tir,tO,air,nir,sir,K7,Ipe,lir,iir,aO,dir,cir,fir,Z7,Npe,mir,gir,nO,hir,pir,_ir,e8,Dpe,uir,bir,sO,vir,Tir,Fir,o8,jpe,Cir,Mir,lO,Eir,yir,wir,r8,qpe,Air,Lir,iO,Bir,xir,kir,t8,Gpe,Rir,Sir,dO,Pir,$ir,Iir,a8,Ope,Nir,Dir,cO,jir,qir,Gir,n8,Xpe,Oir,Xir,fO,Vir,zir,Wir,s8,Vpe,Qir,Hir,mO,Uir,Jir,Yir,l8,zpe,Kir,Zir,gO,edr,odr,rdr,i8,Wpe,tdr,adr,hO,ndr,sdr,ldr,Qpe,idr,ddr,C6,TRe,Lc,d8,Hpe,M6,cdr,Upe,fdr,FRe,Er,E6,mdr,Bc,gdr,Jpe,hdr,pdr,Ype,_dr,udr,bdr,y6,vdr,Kpe,Tdr,Fdr,Cdr,bt,w6,Mdr,Zpe,Edr,ydr,xc,wdr,e_e,Adr,Ldr,o_e,Bdr,xdr,kdr,r_e,Rdr,Sdr,A6,Pdr,vo,L6,$dr,t_e,Idr,Ndr,Fn,Ddr,a_e,jdr,qdr,n_e,Gdr,Odr,s_e,Xdr,Vdr,zdr,_e,c8,l_e,Wdr,Qdr,pO,Hdr,Udr,Jdr,f8,i_e,Ydr,Kdr,_O,Zdr,ecr,ocr,m8,d_e,rcr,tcr,uO,acr,ncr,scr,g8,c_e,lcr,icr,bO,dcr,ccr,fcr,h8,f_e,mcr,gcr,vO,hcr,pcr,_cr,p8,m_e,ucr,bcr,TO,vcr,Tcr,Fcr,_8,g_e,Ccr,Mcr,FO,Ecr,ycr,wcr,u8,h_e,Acr,Lcr,CO,Bcr,xcr,kcr,b8,p_e,Rcr,Scr,MO,Pcr,$cr,Icr,v8,__e,Ncr,Dcr,EO,jcr,qcr,Gcr,u_e,Ocr,Xcr,B6,CRe,kc,T8,b_e,x6,Vcr,v_e,zcr,MRe,yr,k6,Wcr,Rc,Qcr,T_e,Hcr,Ucr,F_e,Jcr,Ycr,Kcr,R6,Zcr,C_e,efr,ofr,rfr,vt,S6,tfr,M_e,afr,nfr,Sc,sfr,E_e,lfr,ifr,y_e,dfr,cfr,ffr,w_e,mfr,gfr,P6,hfr,To,$6,pfr,A_e,_fr,ufr,Cn,bfr,L_e,vfr,Tfr,B_e,Ffr,Cfr,x_e,Mfr,Efr,yfr,V,F8,k_e,wfr,Afr,yO,Lfr,Bfr,xfr,C8,R_e,kfr,Rfr,wO,Sfr,Pfr,$fr,M8,S_e,Ifr,Nfr,AO,Dfr,jfr,qfr,E8,P_e,Gfr,Ofr,LO,Xfr,Vfr,zfr,y8,$_e,Wfr,Qfr,BO,Hfr,Ufr,Jfr,w8,I_e,Yfr,Kfr,xO,Zfr,emr,omr,A8,N_e,rmr,tmr,kO,amr,nmr,smr,L8,D_e,lmr,imr,RO,dmr,cmr,fmr,B8,j_e,mmr,gmr,SO,hmr,pmr,_mr,x8,q_e,umr,bmr,PO,vmr,Tmr,Fmr,k8,G_e,Cmr,Mmr,$O,Emr,ymr,wmr,R8,O_e,Amr,Lmr,IO,Bmr,xmr,kmr,S8,X_e,Rmr,Smr,NO,Pmr,$mr,Imr,P8,V_e,Nmr,Dmr,DO,jmr,qmr,Gmr,$8,z_e,Omr,Xmr,jO,Vmr,zmr,Wmr,I8,W_e,Qmr,Hmr,qO,Umr,Jmr,Ymr,N8,Q_e,Kmr,Zmr,GO,egr,ogr,rgr,D8,H_e,tgr,agr,OO,ngr,sgr,lgr,j8,U_e,igr,dgr,XO,cgr,fgr,mgr,q8,J_e,ggr,hgr,VO,pgr,_gr,ugr,G8,Y_e,bgr,vgr,zO,Tgr,Fgr,Cgr,O8,K_e,Mgr,Egr,WO,ygr,wgr,Agr,X8,Z_e,Lgr,Bgr,QO,xgr,kgr,Rgr,V8,eue,Sgr,Pgr,HO,$gr,Igr,Ngr,z8,oue,Dgr,jgr,UO,qgr,Ggr,Ogr,rue,Xgr,Vgr,I6,ERe,Pc,W8,tue,N6,zgr,aue,Wgr,yRe,wr,D6,Qgr,$c,Hgr,nue,Ugr,Jgr,sue,Ygr,Kgr,Zgr,j6,ehr,lue,ohr,rhr,thr,Tt,q6,ahr,iue,nhr,shr,Ic,lhr,due,ihr,dhr,cue,chr,fhr,mhr,fue,ghr,hhr,G6,phr,Fo,O6,_hr,mue,uhr,bhr,Mn,vhr,gue,Thr,Fhr,hue,Chr,Mhr,pue,Ehr,yhr,whr,ae,Q8,_ue,Ahr,Lhr,JO,Bhr,xhr,khr,H8,uue,Rhr,Shr,YO,Phr,$hr,Ihr,U8,bue,Nhr,Dhr,KO,jhr,qhr,Ghr,J8,vue,Ohr,Xhr,ZO,Vhr,zhr,Whr,Y8,Tue,Qhr,Hhr,eX,Uhr,Jhr,Yhr,K8,Fue,Khr,Zhr,oX,epr,opr,rpr,Z8,Cue,tpr,apr,rX,npr,spr,lpr,eF,Mue,ipr,dpr,tX,cpr,fpr,mpr,oF,Eue,gpr,hpr,aX,ppr,_pr,upr,rF,yue,bpr,vpr,nX,Tpr,Fpr,Cpr,tF,wue,Mpr,Epr,sX,ypr,wpr,Apr,aF,Aue,Lpr,Bpr,lX,xpr,kpr,Rpr,nF,Lue,Spr,Ppr,iX,$pr,Ipr,Npr,sF,Bue,Dpr,jpr,dX,qpr,Gpr,Opr,lF,xue,Xpr,Vpr,cX,zpr,Wpr,Qpr,iF,kue,Hpr,Upr,fX,Jpr,Ypr,Kpr,dF,Rue,Zpr,e_r,mX,o_r,r_r,t_r,Sue,a_r,n_r,X6,wRe,Nc,cF,Pue,V6,s_r,$ue,l_r,ARe,Ar,z6,i_r,Dc,d_r,Iue,c_r,f_r,Nue,m_r,g_r,h_r,W6,p_r,Due,__r,u_r,b_r,Ft,Q6,v_r,jue,T_r,F_r,jc,C_r,que,M_r,E_r,Gue,y_r,w_r,A_r,Oue,L_r,B_r,H6,x_r,Co,U6,k_r,Xue,R_r,S_r,En,P_r,Vue,$_r,I_r,zue,N_r,D_r,Wue,j_r,q_r,G_r,Que,fF,Hue,O_r,X_r,gX,V_r,z_r,W_r,Uue,Q_r,H_r,J6,LRe,qc,mF,Jue,Y6,U_r,Yue,J_r,BRe,Lr,K6,Y_r,Gc,K_r,Kue,Z_r,eur,Zue,our,rur,tur,Z6,aur,e1e,nur,sur,lur,Ct,eA,iur,o1e,dur,cur,Oc,fur,r1e,mur,gur,t1e,hur,pur,_ur,a1e,uur,bur,oA,vur,Mo,rA,Tur,n1e,Fur,Cur,yn,Mur,s1e,Eur,yur,l1e,wur,Aur,i1e,Lur,Bur,xur,Y,gF,d1e,kur,Rur,hX,Sur,Pur,$ur,hF,c1e,Iur,Nur,pX,Dur,jur,qur,pF,f1e,Gur,Our,_X,Xur,Vur,zur,_F,m1e,Wur,Qur,uX,Hur,Uur,Jur,uF,g1e,Yur,Kur,bX,Zur,e1r,o1r,bF,h1e,r1r,t1r,vX,a1r,n1r,s1r,vF,p1e,l1r,i1r,TX,d1r,c1r,f1r,TF,_1e,m1r,g1r,FX,h1r,p1r,_1r,FF,u1e,u1r,b1r,CX,v1r,T1r,F1r,CF,b1e,C1r,M1r,MX,E1r,y1r,w1r,MF,v1e,A1r,L1r,EX,B1r,x1r,k1r,EF,T1e,R1r,S1r,yX,P1r,$1r,I1r,yF,F1e,N1r,D1r,wX,j1r,q1r,G1r,wF,C1e,O1r,X1r,AX,V1r,z1r,W1r,AF,M1e,Q1r,H1r,LX,U1r,J1r,Y1r,LF,E1e,K1r,Z1r,BX,ebr,obr,rbr,BF,y1e,tbr,abr,xX,nbr,sbr,lbr,xF,w1e,ibr,dbr,kX,cbr,fbr,mbr,kF,A1e,gbr,hbr,RX,pbr,_br,ubr,RF,L1e,bbr,vbr,SX,Tbr,Fbr,Cbr,B1e,Mbr,Ebr,tA,xRe,Xc,SF,x1e,aA,ybr,k1e,wbr,kRe,Br,nA,Abr,Vc,Lbr,R1e,Bbr,xbr,S1e,kbr,Rbr,Sbr,sA,Pbr,P1e,$br,Ibr,Nbr,Mt,lA,Dbr,$1e,jbr,qbr,zc,Gbr,I1e,Obr,Xbr,N1e,Vbr,zbr,Wbr,D1e,Qbr,Hbr,iA,Ubr,Eo,dA,Jbr,j1e,Ybr,Kbr,wn,Zbr,q1e,e5r,o5r,G1e,r5r,t5r,O1e,a5r,n5r,s5r,Z,PF,X1e,l5r,i5r,PX,d5r,c5r,f5r,$F,V1e,m5r,g5r,$X,h5r,p5r,_5r,IF,z1e,u5r,b5r,IX,v5r,T5r,F5r,NF,W1e,C5r,M5r,NX,E5r,y5r,w5r,DF,Q1e,A5r,L5r,DX,B5r,x5r,k5r,jF,H1e,R5r,S5r,jX,P5r,$5r,I5r,qF,U1e,N5r,D5r,qX,j5r,q5r,G5r,GF,J1e,O5r,X5r,GX,V5r,z5r,W5r,OF,Y1e,Q5r,H5r,OX,U5r,J5r,Y5r,XF,K1e,K5r,Z5r,XX,e2r,o2r,r2r,VF,Z1e,t2r,a2r,VX,n2r,s2r,l2r,zF,ebe,i2r,d2r,zX,c2r,f2r,m2r,WF,obe,g2r,h2r,WX,p2r,_2r,u2r,QF,rbe,b2r,v2r,QX,T2r,F2r,C2r,HF,tbe,M2r,E2r,HX,y2r,w2r,A2r,UF,abe,L2r,B2r,UX,x2r,k2r,R2r,JF,nbe,S2r,P2r,JX,$2r,I2r,N2r,YF,sbe,D2r,j2r,YX,q2r,G2r,O2r,KF,lbe,X2r,V2r,KX,z2r,W2r,Q2r,ibe,H2r,U2r,cA,RRe,Wc,ZF,dbe,fA,J2r,cbe,Y2r,SRe,xr,mA,K2r,Qc,Z2r,fbe,evr,ovr,mbe,rvr,tvr,avr,gA,nvr,gbe,svr,lvr,ivr,Et,hA,dvr,hbe,cvr,fvr,Hc,mvr,pbe,gvr,hvr,_be,pvr,_vr,uvr,ube,bvr,vvr,pA,Tvr,yo,_A,Fvr,bbe,Cvr,Mvr,An,Evr,vbe,yvr,wvr,Tbe,Avr,Lvr,Fbe,Bvr,xvr,kvr,Cbe,eC,Mbe,Rvr,Svr,ZX,Pvr,$vr,Ivr,Ebe,Nvr,Dvr,uA,PRe,Uc,oC,ybe,bA,jvr,wbe,qvr,$Re,kr,vA,Gvr,Jc,Ovr,Abe,Xvr,Vvr,Lbe,zvr,Wvr,Qvr,TA,Hvr,Bbe,Uvr,Jvr,Yvr,yt,FA,Kvr,xbe,Zvr,eTr,Yc,oTr,kbe,rTr,tTr,Rbe,aTr,nTr,sTr,Sbe,lTr,iTr,CA,dTr,wo,MA,cTr,Pbe,fTr,mTr,Ln,gTr,$be,hTr,pTr,Ibe,_Tr,uTr,Nbe,bTr,vTr,TTr,Dbe,rC,jbe,FTr,CTr,eV,MTr,ETr,yTr,qbe,wTr,ATr,EA,IRe,Kc,tC,Gbe,yA,LTr,Obe,BTr,NRe,Rr,wA,xTr,Zc,kTr,Xbe,RTr,STr,Vbe,PTr,$Tr,ITr,AA,NTr,zbe,DTr,jTr,qTr,wt,LA,GTr,Wbe,OTr,XTr,ef,VTr,Qbe,zTr,WTr,Hbe,QTr,HTr,UTr,Ube,JTr,YTr,BA,KTr,Ao,xA,ZTr,Jbe,e7r,o7r,Bn,r7r,Ybe,t7r,a7r,Kbe,n7r,s7r,Zbe,l7r,i7r,d7r,z,aC,e5e,c7r,f7r,oV,m7r,g7r,h7r,nC,o5e,p7r,_7r,rV,u7r,b7r,v7r,sC,r5e,T7r,F7r,tV,C7r,M7r,E7r,lC,t5e,y7r,w7r,aV,A7r,L7r,B7r,iC,a5e,x7r,k7r,nV,R7r,S7r,P7r,dC,n5e,$7r,I7r,sV,N7r,D7r,j7r,cC,s5e,q7r,G7r,lV,O7r,X7r,V7r,fC,l5e,z7r,W7r,iV,Q7r,H7r,U7r,mC,i5e,J7r,Y7r,dV,K7r,Z7r,e8r,gC,d5e,o8r,r8r,cV,t8r,a8r,n8r,hC,c5e,s8r,l8r,fV,i8r,d8r,c8r,pC,f5e,f8r,m8r,mV,g8r,h8r,p8r,_C,m5e,_8r,u8r,gV,b8r,v8r,T8r,uC,g5e,F8r,C8r,hV,M8r,E8r,y8r,bC,h5e,w8r,A8r,pV,L8r,B8r,x8r,vC,p5e,k8r,R8r,_V,S8r,P8r,$8r,TC,_5e,I8r,N8r,uV,D8r,j8r,q8r,FC,u5e,G8r,O8r,bV,X8r,V8r,z8r,CC,b5e,W8r,Q8r,vV,H8r,U8r,J8r,MC,v5e,Y8r,K8r,TV,Z8r,eFr,oFr,EC,T5e,rFr,tFr,FV,aFr,nFr,sFr,yC,F5e,lFr,iFr,CV,dFr,cFr,fFr,wC,C5e,mFr,gFr,MV,hFr,pFr,_Fr,AC,M5e,uFr,bFr,EV,vFr,TFr,FFr,LC,E5e,CFr,MFr,yV,EFr,yFr,wFr,y5e,AFr,LFr,kA,DRe,of,BC,w5e,RA,BFr,A5e,xFr,jRe,Sr,SA,kFr,rf,RFr,L5e,SFr,PFr,B5e,$Fr,IFr,NFr,PA,DFr,x5e,jFr,qFr,GFr,At,$A,OFr,k5e,XFr,VFr,tf,zFr,R5e,WFr,QFr,S5e,HFr,UFr,JFr,P5e,YFr,KFr,IA,ZFr,Lo,NA,eCr,$5e,oCr,rCr,xn,tCr,I5e,aCr,nCr,N5e,sCr,lCr,D5e,iCr,dCr,cCr,ca,xC,j5e,fCr,mCr,wV,gCr,hCr,pCr,kC,q5e,_Cr,uCr,AV,bCr,vCr,TCr,RC,G5e,FCr,CCr,LV,MCr,ECr,yCr,SC,O5e,wCr,ACr,BV,LCr,BCr,xCr,PC,X5e,kCr,RCr,xV,SCr,PCr,$Cr,V5e,ICr,NCr,DA,qRe,af,$C,z5e,jA,DCr,W5e,jCr,GRe,Pr,qA,qCr,nf,GCr,Q5e,OCr,XCr,H5e,VCr,zCr,WCr,GA,QCr,U5e,HCr,UCr,JCr,Lt,OA,YCr,J5e,KCr,ZCr,sf,eMr,Y5e,oMr,rMr,K5e,tMr,aMr,nMr,Z5e,sMr,lMr,XA,iMr,Bo,VA,dMr,e2e,cMr,fMr,kn,mMr,o2e,gMr,hMr,r2e,pMr,_Mr,t2e,uMr,bMr,vMr,ce,IC,a2e,TMr,FMr,kV,CMr,MMr,EMr,NC,n2e,yMr,wMr,RV,AMr,LMr,BMr,DC,s2e,xMr,kMr,SV,RMr,SMr,PMr,jC,l2e,$Mr,IMr,PV,NMr,DMr,jMr,qC,i2e,qMr,GMr,$V,OMr,XMr,VMr,GC,d2e,zMr,WMr,IV,QMr,HMr,UMr,OC,c2e,JMr,YMr,NV,KMr,ZMr,e4r,XC,f2e,o4r,r4r,DV,t4r,a4r,n4r,VC,m2e,s4r,l4r,jV,i4r,d4r,c4r,zC,g2e,f4r,m4r,qV,g4r,h4r,p4r,WC,h2e,_4r,u4r,GV,b4r,v4r,T4r,QC,p2e,F4r,C4r,OV,M4r,E4r,y4r,_2e,w4r,A4r,zA,ORe,lf,HC,u2e,WA,L4r,b2e,B4r,XRe,$r,QA,x4r,df,k4r,v2e,R4r,S4r,T2e,P4r,$4r,I4r,HA,N4r,F2e,D4r,j4r,q4r,Bt,UA,G4r,C2e,O4r,X4r,cf,V4r,M2e,z4r,W4r,E2e,Q4r,H4r,U4r,y2e,J4r,Y4r,JA,K4r,xo,YA,Z4r,w2e,eEr,oEr,Rn,rEr,A2e,tEr,aEr,L2e,nEr,sEr,B2e,lEr,iEr,dEr,ue,UC,x2e,cEr,fEr,XV,mEr,gEr,hEr,JC,k2e,pEr,_Er,VV,uEr,bEr,vEr,YC,R2e,TEr,FEr,zV,CEr,MEr,EEr,KC,S2e,yEr,wEr,WV,AEr,LEr,BEr,ZC,P2e,xEr,kEr,QV,REr,SEr,PEr,eM,$2e,$Er,IEr,HV,NEr,DEr,jEr,oM,I2e,qEr,GEr,UV,OEr,XEr,VEr,rM,N2e,zEr,WEr,JV,QEr,HEr,UEr,tM,D2e,JEr,YEr,YV,KEr,ZEr,e3r,aM,j2e,o3r,r3r,KV,t3r,a3r,n3r,q2e,s3r,l3r,KA,VRe,ff,nM,G2e,ZA,i3r,O2e,d3r,zRe,Ir,e0,c3r,mf,f3r,X2e,m3r,g3r,V2e,h3r,p3r,_3r,o0,u3r,z2e,b3r,v3r,T3r,xt,r0,F3r,W2e,C3r,M3r,gf,E3r,Q2e,y3r,w3r,H2e,A3r,L3r,B3r,U2e,x3r,k3r,t0,R3r,ko,a0,S3r,J2e,P3r,$3r,Sn,I3r,Y2e,N3r,D3r,K2e,j3r,q3r,Z2e,G3r,O3r,X3r,Me,sM,eve,V3r,z3r,ZV,W3r,Q3r,H3r,lM,ove,U3r,J3r,ez,Y3r,K3r,Z3r,iM,rve,eyr,oyr,oz,ryr,tyr,ayr,dM,tve,nyr,syr,rz,lyr,iyr,dyr,cM,ave,cyr,fyr,tz,myr,gyr,hyr,fM,nve,pyr,_yr,az,uyr,byr,vyr,mM,sve,Tyr,Fyr,nz,Cyr,Myr,Eyr,gM,lve,yyr,wyr,sz,Ayr,Lyr,Byr,hM,ive,xyr,kyr,lz,Ryr,Syr,Pyr,dve,$yr,Iyr,n0,WRe,hf,pM,cve,s0,Nyr,fve,Dyr,QRe,Nr,l0,jyr,pf,qyr,mve,Gyr,Oyr,gve,Xyr,Vyr,zyr,i0,Wyr,hve,Qyr,Hyr,Uyr,kt,d0,Jyr,pve,Yyr,Kyr,_f,Zyr,_ve,ewr,owr,uve,rwr,twr,awr,bve,nwr,swr,c0,lwr,Ro,f0,iwr,vve,dwr,cwr,Pn,fwr,Tve,mwr,gwr,Fve,hwr,pwr,Cve,_wr,uwr,bwr,be,_M,Mve,vwr,Twr,iz,Fwr,Cwr,Mwr,uM,Eve,Ewr,ywr,dz,wwr,Awr,Lwr,bM,yve,Bwr,xwr,cz,kwr,Rwr,Swr,vM,wve,Pwr,$wr,fz,Iwr,Nwr,Dwr,TM,Ave,jwr,qwr,mz,Gwr,Owr,Xwr,FM,Lve,Vwr,zwr,gz,Wwr,Qwr,Hwr,CM,Bve,Uwr,Jwr,hz,Ywr,Kwr,Zwr,MM,xve,e6r,o6r,pz,r6r,t6r,a6r,EM,kve,n6r,s6r,_z,l6r,i6r,d6r,yM,Rve,c6r,f6r,uz,m6r,g6r,h6r,Sve,p6r,_6r,m0,HRe,uf,wM,Pve,g0,u6r,$ve,b6r,URe,Dr,h0,v6r,bf,T6r,Ive,F6r,C6r,Nve,M6r,E6r,y6r,p0,w6r,Dve,A6r,L6r,B6r,Rt,_0,x6r,jve,k6r,R6r,vf,S6r,qve,P6r,$6r,Gve,I6r,N6r,D6r,Ove,j6r,q6r,u0,G6r,So,b0,O6r,Xve,X6r,V6r,$n,z6r,Vve,W6r,Q6r,zve,H6r,U6r,Wve,J6r,Y6r,K6r,ve,AM,Qve,Z6r,eAr,bz,oAr,rAr,tAr,LM,Hve,aAr,nAr,vz,sAr,lAr,iAr,BM,Uve,dAr,cAr,Tz,fAr,mAr,gAr,xM,Jve,hAr,pAr,Fz,_Ar,uAr,bAr,kM,Yve,vAr,TAr,Cz,FAr,CAr,MAr,RM,Kve,EAr,yAr,Mz,wAr,AAr,LAr,SM,Zve,BAr,xAr,Ez,kAr,RAr,SAr,PM,eTe,PAr,$Ar,yz,IAr,NAr,DAr,$M,oTe,jAr,qAr,wz,GAr,OAr,XAr,IM,rTe,VAr,zAr,Az,WAr,QAr,HAr,tTe,UAr,JAr,v0,JRe,Tf,NM,aTe,T0,YAr,nTe,KAr,YRe,jr,F0,ZAr,Ff,e0r,sTe,o0r,r0r,lTe,t0r,a0r,n0r,C0,s0r,iTe,l0r,i0r,d0r,St,M0,c0r,dTe,f0r,m0r,Cf,g0r,cTe,h0r,p0r,fTe,_0r,u0r,b0r,mTe,v0r,T0r,E0,F0r,Po,y0,C0r,gTe,M0r,E0r,In,y0r,hTe,w0r,A0r,pTe,L0r,B0r,_Te,x0r,k0r,R0r,Se,DM,uTe,S0r,P0r,Lz,$0r,I0r,N0r,jM,bTe,D0r,j0r,Bz,q0r,G0r,O0r,qM,vTe,X0r,V0r,xz,z0r,W0r,Q0r,GM,TTe,H0r,U0r,kz,J0r,Y0r,K0r,OM,FTe,Z0r,eLr,Rz,oLr,rLr,tLr,XM,CTe,aLr,nLr,Sz,sLr,lLr,iLr,VM,MTe,dLr,cLr,Pz,fLr,mLr,gLr,zM,ETe,hLr,pLr,$z,_Lr,uLr,bLr,yTe,vLr,TLr,w0,KRe,Mf,WM,wTe,A0,FLr,ATe,CLr,ZRe,qr,L0,MLr,Ef,ELr,LTe,yLr,wLr,BTe,ALr,LLr,BLr,B0,xLr,xTe,kLr,RLr,SLr,Pt,x0,PLr,kTe,$Lr,ILr,yf,NLr,RTe,DLr,jLr,STe,qLr,GLr,OLr,PTe,XLr,VLr,k0,zLr,$o,R0,WLr,$Te,QLr,HLr,Nn,ULr,ITe,JLr,YLr,NTe,KLr,ZLr,DTe,e9r,o9r,r9r,Pe,QM,jTe,t9r,a9r,Iz,n9r,s9r,l9r,HM,qTe,i9r,d9r,Nz,c9r,f9r,m9r,UM,GTe,g9r,h9r,Dz,p9r,_9r,u9r,JM,OTe,b9r,v9r,jz,T9r,F9r,C9r,YM,XTe,M9r,E9r,qz,y9r,w9r,A9r,KM,VTe,L9r,B9r,Gz,x9r,k9r,R9r,ZM,zTe,S9r,P9r,Oz,$9r,I9r,N9r,e4,WTe,D9r,j9r,Xz,q9r,G9r,O9r,QTe,X9r,V9r,S0,eSe,wf,o4,HTe,P0,z9r,UTe,W9r,oSe,Gr,$0,Q9r,Af,H9r,JTe,U9r,J9r,YTe,Y9r,K9r,Z9r,I0,eBr,KTe,oBr,rBr,tBr,$t,N0,aBr,ZTe,nBr,sBr,Lf,lBr,e7e,iBr,dBr,o7e,cBr,fBr,mBr,r7e,gBr,hBr,D0,pBr,Io,j0,_Br,t7e,uBr,bBr,Dn,vBr,a7e,TBr,FBr,n7e,CBr,MBr,s7e,EBr,yBr,wBr,l7e,r4,i7e,ABr,LBr,Vz,BBr,xBr,kBr,d7e,RBr,SBr,q0,rSe,Bf,t4,c7e,G0,PBr,f7e,$Br,tSe,Or,O0,IBr,xf,NBr,m7e,DBr,jBr,g7e,qBr,GBr,OBr,X0,XBr,h7e,VBr,zBr,WBr,It,V0,QBr,p7e,HBr,UBr,kf,JBr,_7e,YBr,KBr,u7e,ZBr,exr,oxr,b7e,rxr,txr,z0,axr,No,W0,nxr,v7e,sxr,lxr,jn,ixr,T7e,dxr,cxr,F7e,fxr,mxr,C7e,gxr,hxr,pxr,Q0,a4,M7e,_xr,uxr,zz,bxr,vxr,Txr,n4,E7e,Fxr,Cxr,Wz,Mxr,Exr,yxr,y7e,wxr,Axr,H0,aSe,Rf,s4,w7e,U0,Lxr,A7e,Bxr,nSe,Xr,J0,xxr,Sf,kxr,L7e,Rxr,Sxr,B7e,Pxr,$xr,Ixr,Y0,Nxr,x7e,Dxr,jxr,qxr,Nt,K0,Gxr,k7e,Oxr,Xxr,Pf,Vxr,R7e,zxr,Wxr,S7e,Qxr,Hxr,Uxr,P7e,Jxr,Yxr,Z0,Kxr,Do,eL,Zxr,$7e,ekr,okr,qn,rkr,I7e,tkr,akr,N7e,nkr,skr,D7e,lkr,ikr,dkr,j7e,l4,q7e,ckr,fkr,Qz,mkr,gkr,hkr,G7e,pkr,_kr,oL,sSe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),fE=new X({}),mE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new ukr({props:{warning:!0,$$slots:{default:[FCt]},$$scope:{ctx:If}}}),gE=new X({}),hE=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/configuration_auto.py#L538"}}),uE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/configuration_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),bE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),vE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/configuration_auto.py#L683",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),TE=new X({}),FE=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/tokenization_auto.py#L351"}}),EE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15781/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),yE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),wE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),AE=new X({}),LE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),kE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15781/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),kh=new ukr({props:{$$slots:{default:[CCt]},$$scope:{ctx:If}}}),RE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),SE=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),PE=new X({}),$E=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/processing_auto.py#L70"}}),DE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Oh=new ukr({props:{$$slots:{default:[MCt]},$$scope:{ctx:If}}}),jE=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),qE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),GE=new X({}),OE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L706"}}),VE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),zE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),WE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HE=new X({}),UE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L713"}}),YE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),KE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),ZE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e3=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o3=new X({}),r3=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L728"}}),a3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),n3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),s3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i3=new X({}),d3=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L735"}}),f3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),m3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),g3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),h3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p3=new X({}),_3=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L742"}}),b3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),v3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),T3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),F3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C3=new X({}),M3=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L751"}}),y3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),w3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),A3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),L3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B3=new X({}),x3=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L785"}}),R3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),S3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),P3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I3=new X({}),N3=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L792"}}),j3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),G3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),O3=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X3=new X({}),V3=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L778"}}),W3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Q3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),H3=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),U3=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J3=new X({}),Y3=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L760"}}),Z3=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),oy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ry=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new X({}),ay=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L767"}}),sy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L801"}}),gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),hy=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),py=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_y=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L840"}}),Ty=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Fy=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Cy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),My=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ey=new X({}),yy=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L847"}}),Ay=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ly=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),By=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ky=new X({}),Ry=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L870"}}),Py=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),$y=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Iy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ny=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),jy=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L854"}}),Gy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Wy=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L861"}}),Hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Jy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),ew=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L879"}}),rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new X({}),lw=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L886"}}),dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L833"}}),_w=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Fw=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L808"}}),Mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new X({}),Lw=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L815"}}),xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextForSemanticSegmentation">ConvNextForSemanticSegmentation</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_auto.py#L824"}}),Nw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Dw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),jw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),Vw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),Ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hw=new X({}),Uw=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),Yw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Kw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Zw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),e6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o6=new X({}),r6=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),a6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),n6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),s6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),l6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i6=new X({}),d6=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),f6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),m6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),g6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_6=new X({}),u6=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),v6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),T6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),F6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M6=new X({}),E6=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),w6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),A6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),L6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x6=new X({}),k6=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),S6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),P6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),$6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),I6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N6=new X({}),D6=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),q6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),G6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),O6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V6=new X({}),z6=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Q6=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),H6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),U6=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),J6=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y6=new X({}),K6=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),eA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),rA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new X({}),nA=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),lA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),dA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new X({}),mA=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),hA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),_A=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new X({}),vA=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),FA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),MA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),wA=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),LA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),xA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),SA=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),$A=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),NA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),DA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),qA=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),OA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),VA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),QA=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),UA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),JA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),YA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),e0=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),r0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),t0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),a0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s0=new X({}),l0=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),d0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),c0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),f0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),_0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),b0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new X({}),F0=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),M0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),y0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new X({}),L0=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),x0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),R0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),N0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),D0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),j0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),V0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),W0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new X({}),J0=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),K0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Z0=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),eL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15781/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15781/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15781/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){K=a("meta"),io=l(),de=a("h1"),Ee=a("a"),lo=a("span"),f(fe.$$.fragment),Ce=l(),Vo=a("span"),Ii=o("Auto Classes"),Nf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),lE=o("from_pretrained()"),Df=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),iE=o("AutoConfig"),On=o(", "),Xn=a("a"),dE=o("AutoModel"),qi=o(`, and
`),Vn=a("a"),cE=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),pe=a("p"),ZL=o("will create a model that is an instance of "),Oi=a("a"),e9=o("BertModel"),o9=o("."),zo=l(),Ga=a("p"),r9=o("There is one class of "),qf=a("code"),t9=o("AutoModel"),b$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),nke=l(),Xi=a("h2"),Gf=a("a"),GQ=a("span"),f(fE.$$.fragment),v$e=l(),OQ=a("span"),T$e=o("Extending the Auto Classes"),ske=l(),zn=a("p"),F$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),XQ=a("code"),C$e=o("NewModel"),M$e=o(", make sure you have a "),VQ=a("code"),E$e=o("NewModelConfig"),y$e=o(` then you can add those to the auto
classes like this:`),lke=l(),f(mE.$$.fragment),ike=l(),a9=a("p"),w$e=o("You will then be able to use the auto classes like you would usually do!"),dke=l(),f(Of.$$.fragment),cke=l(),Vi=a("h2"),Xf=a("a"),zQ=a("span"),f(gE.$$.fragment),A$e=l(),WQ=a("span"),L$e=o("AutoConfig"),fke=l(),Wo=a("div"),f(hE.$$.fragment),B$e=l(),pE=a("p"),x$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),n9=a("a"),k$e=o("from_pretrained()"),R$e=o(" class method."),S$e=l(),_E=a("p"),P$e=o("This class cannot be instantiated directly using "),QQ=a("code"),$$e=o("__init__()"),I$e=o(" (throws an error)."),N$e=l(),mo=a("div"),f(uE.$$.fragment),D$e=l(),HQ=a("p"),j$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),q$e=l(),zi=a("p"),G$e=o("The configuration class to instantiate is selected based on the "),UQ=a("code"),O$e=o("model_type"),X$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),JQ=a("code"),V$e=o("pretrained_model_name_or_path"),z$e=o(":"),W$e=l(),v=a("ul"),Vf=a("li"),YQ=a("strong"),Q$e=o("albert"),H$e=o(" \u2014 "),s9=a("a"),U$e=o("AlbertConfig"),J$e=o(" (ALBERT model)"),Y$e=l(),zf=a("li"),KQ=a("strong"),K$e=o("bart"),Z$e=o(" \u2014 "),l9=a("a"),eIe=o("BartConfig"),oIe=o(" (BART model)"),rIe=l(),Wf=a("li"),ZQ=a("strong"),tIe=o("beit"),aIe=o(" \u2014 "),i9=a("a"),nIe=o("BeitConfig"),sIe=o(" (BEiT model)"),lIe=l(),Qf=a("li"),eH=a("strong"),iIe=o("bert"),dIe=o(" \u2014 "),d9=a("a"),cIe=o("BertConfig"),fIe=o(" (BERT model)"),mIe=l(),Hf=a("li"),oH=a("strong"),gIe=o("bert-generation"),hIe=o(" \u2014 "),c9=a("a"),pIe=o("BertGenerationConfig"),_Ie=o(" (Bert Generation model)"),uIe=l(),Uf=a("li"),rH=a("strong"),bIe=o("big_bird"),vIe=o(" \u2014 "),f9=a("a"),TIe=o("BigBirdConfig"),FIe=o(" (BigBird model)"),CIe=l(),Jf=a("li"),tH=a("strong"),MIe=o("bigbird_pegasus"),EIe=o(" \u2014 "),m9=a("a"),yIe=o("BigBirdPegasusConfig"),wIe=o(" (BigBirdPegasus model)"),AIe=l(),Yf=a("li"),aH=a("strong"),LIe=o("blenderbot"),BIe=o(" \u2014 "),g9=a("a"),xIe=o("BlenderbotConfig"),kIe=o(" (Blenderbot model)"),RIe=l(),Kf=a("li"),nH=a("strong"),SIe=o("blenderbot-small"),PIe=o(" \u2014 "),h9=a("a"),$Ie=o("BlenderbotSmallConfig"),IIe=o(" (BlenderbotSmall model)"),NIe=l(),Zf=a("li"),sH=a("strong"),DIe=o("camembert"),jIe=o(" \u2014 "),p9=a("a"),qIe=o("CamembertConfig"),GIe=o(" (CamemBERT model)"),OIe=l(),em=a("li"),lH=a("strong"),XIe=o("canine"),VIe=o(" \u2014 "),_9=a("a"),zIe=o("CanineConfig"),WIe=o(" (Canine model)"),QIe=l(),om=a("li"),iH=a("strong"),HIe=o("clip"),UIe=o(" \u2014 "),u9=a("a"),JIe=o("CLIPConfig"),YIe=o(" (CLIP model)"),KIe=l(),rm=a("li"),dH=a("strong"),ZIe=o("convbert"),eNe=o(" \u2014 "),b9=a("a"),oNe=o("ConvBertConfig"),rNe=o(" (ConvBERT model)"),tNe=l(),tm=a("li"),cH=a("strong"),aNe=o("convnext"),nNe=o(" \u2014 "),v9=a("a"),sNe=o("ConvNextConfig"),lNe=o(" (ConvNext model)"),iNe=l(),am=a("li"),fH=a("strong"),dNe=o("ctrl"),cNe=o(" \u2014 "),T9=a("a"),fNe=o("CTRLConfig"),mNe=o(" (CTRL model)"),gNe=l(),nm=a("li"),mH=a("strong"),hNe=o("data2vec-audio"),pNe=o(" \u2014 "),F9=a("a"),_Ne=o("Data2VecAudioConfig"),uNe=o(" (Data2VecAudio model)"),bNe=l(),sm=a("li"),gH=a("strong"),vNe=o("data2vec-text"),TNe=o(" \u2014 "),C9=a("a"),FNe=o("Data2VecTextConfig"),CNe=o(" (Data2VecText model)"),MNe=l(),lm=a("li"),hH=a("strong"),ENe=o("deberta"),yNe=o(" \u2014 "),M9=a("a"),wNe=o("DebertaConfig"),ANe=o(" (DeBERTa model)"),LNe=l(),im=a("li"),pH=a("strong"),BNe=o("deberta-v2"),xNe=o(" \u2014 "),E9=a("a"),kNe=o("DebertaV2Config"),RNe=o(" (DeBERTa-v2 model)"),SNe=l(),dm=a("li"),_H=a("strong"),PNe=o("decision_transformer"),$Ne=o(" \u2014 "),y9=a("a"),INe=o("DecisionTransformerConfig"),NNe=o(" (Decision Transformer model)"),DNe=l(),cm=a("li"),uH=a("strong"),jNe=o("deit"),qNe=o(" \u2014 "),w9=a("a"),GNe=o("DeiTConfig"),ONe=o(" (DeiT model)"),XNe=l(),fm=a("li"),bH=a("strong"),VNe=o("detr"),zNe=o(" \u2014 "),A9=a("a"),WNe=o("DetrConfig"),QNe=o(" (DETR model)"),HNe=l(),mm=a("li"),vH=a("strong"),UNe=o("distilbert"),JNe=o(" \u2014 "),L9=a("a"),YNe=o("DistilBertConfig"),KNe=o(" (DistilBERT model)"),ZNe=l(),gm=a("li"),TH=a("strong"),eDe=o("dpr"),oDe=o(" \u2014 "),B9=a("a"),rDe=o("DPRConfig"),tDe=o(" (DPR model)"),aDe=l(),hm=a("li"),FH=a("strong"),nDe=o("electra"),sDe=o(" \u2014 "),x9=a("a"),lDe=o("ElectraConfig"),iDe=o(" (ELECTRA model)"),dDe=l(),pm=a("li"),CH=a("strong"),cDe=o("encoder-decoder"),fDe=o(" \u2014 "),k9=a("a"),mDe=o("EncoderDecoderConfig"),gDe=o(" (Encoder decoder model)"),hDe=l(),_m=a("li"),MH=a("strong"),pDe=o("flaubert"),_De=o(" \u2014 "),R9=a("a"),uDe=o("FlaubertConfig"),bDe=o(" (FlauBERT model)"),vDe=l(),um=a("li"),EH=a("strong"),TDe=o("fnet"),FDe=o(" \u2014 "),S9=a("a"),CDe=o("FNetConfig"),MDe=o(" (FNet model)"),EDe=l(),bm=a("li"),yH=a("strong"),yDe=o("fsmt"),wDe=o(" \u2014 "),P9=a("a"),ADe=o("FSMTConfig"),LDe=o(" (FairSeq Machine-Translation model)"),BDe=l(),vm=a("li"),wH=a("strong"),xDe=o("funnel"),kDe=o(" \u2014 "),$9=a("a"),RDe=o("FunnelConfig"),SDe=o(" (Funnel Transformer model)"),PDe=l(),Tm=a("li"),AH=a("strong"),$De=o("glpn"),IDe=o(" \u2014 "),I9=a("a"),NDe=o("GLPNConfig"),DDe=o(" (GLPN model)"),jDe=l(),Fm=a("li"),LH=a("strong"),qDe=o("gpt2"),GDe=o(" \u2014 "),N9=a("a"),ODe=o("GPT2Config"),XDe=o(" (OpenAI GPT-2 model)"),VDe=l(),Cm=a("li"),BH=a("strong"),zDe=o("gpt_neo"),WDe=o(" \u2014 "),D9=a("a"),QDe=o("GPTNeoConfig"),HDe=o(" (GPT Neo model)"),UDe=l(),Mm=a("li"),xH=a("strong"),JDe=o("gptj"),YDe=o(" \u2014 "),j9=a("a"),KDe=o("GPTJConfig"),ZDe=o(" (GPT-J model)"),eje=l(),Em=a("li"),kH=a("strong"),oje=o("hubert"),rje=o(" \u2014 "),q9=a("a"),tje=o("HubertConfig"),aje=o(" (Hubert model)"),nje=l(),ym=a("li"),RH=a("strong"),sje=o("ibert"),lje=o(" \u2014 "),G9=a("a"),ije=o("IBertConfig"),dje=o(" (I-BERT model)"),cje=l(),wm=a("li"),SH=a("strong"),fje=o("imagegpt"),mje=o(" \u2014 "),O9=a("a"),gje=o("ImageGPTConfig"),hje=o(" (ImageGPT model)"),pje=l(),Am=a("li"),PH=a("strong"),_je=o("layoutlm"),uje=o(" \u2014 "),X9=a("a"),bje=o("LayoutLMConfig"),vje=o(" (LayoutLM model)"),Tje=l(),Lm=a("li"),$H=a("strong"),Fje=o("layoutlmv2"),Cje=o(" \u2014 "),V9=a("a"),Mje=o("LayoutLMv2Config"),Eje=o(" (LayoutLMv2 model)"),yje=l(),Bm=a("li"),IH=a("strong"),wje=o("led"),Aje=o(" \u2014 "),z9=a("a"),Lje=o("LEDConfig"),Bje=o(" (LED model)"),xje=l(),xm=a("li"),NH=a("strong"),kje=o("longformer"),Rje=o(" \u2014 "),W9=a("a"),Sje=o("LongformerConfig"),Pje=o(" (Longformer model)"),$je=l(),km=a("li"),DH=a("strong"),Ije=o("luke"),Nje=o(" \u2014 "),Q9=a("a"),Dje=o("LukeConfig"),jje=o(" (LUKE model)"),qje=l(),Rm=a("li"),jH=a("strong"),Gje=o("lxmert"),Oje=o(" \u2014 "),H9=a("a"),Xje=o("LxmertConfig"),Vje=o(" (LXMERT model)"),zje=l(),Sm=a("li"),qH=a("strong"),Wje=o("m2m_100"),Qje=o(" \u2014 "),U9=a("a"),Hje=o("M2M100Config"),Uje=o(" (M2M100 model)"),Jje=l(),Pm=a("li"),GH=a("strong"),Yje=o("marian"),Kje=o(" \u2014 "),J9=a("a"),Zje=o("MarianConfig"),eqe=o(" (Marian model)"),oqe=l(),$m=a("li"),OH=a("strong"),rqe=o("maskformer"),tqe=o(" \u2014 "),Y9=a("a"),aqe=o("MaskFormerConfig"),nqe=o(" (MaskFormer model)"),sqe=l(),Im=a("li"),XH=a("strong"),lqe=o("mbart"),iqe=o(" \u2014 "),K9=a("a"),dqe=o("MBartConfig"),cqe=o(" (mBART model)"),fqe=l(),Nm=a("li"),VH=a("strong"),mqe=o("megatron-bert"),gqe=o(" \u2014 "),Z9=a("a"),hqe=o("MegatronBertConfig"),pqe=o(" (MegatronBert model)"),_qe=l(),Dm=a("li"),zH=a("strong"),uqe=o("mobilebert"),bqe=o(" \u2014 "),eB=a("a"),vqe=o("MobileBertConfig"),Tqe=o(" (MobileBERT model)"),Fqe=l(),jm=a("li"),WH=a("strong"),Cqe=o("mpnet"),Mqe=o(" \u2014 "),oB=a("a"),Eqe=o("MPNetConfig"),yqe=o(" (MPNet model)"),wqe=l(),qm=a("li"),QH=a("strong"),Aqe=o("mt5"),Lqe=o(" \u2014 "),rB=a("a"),Bqe=o("MT5Config"),xqe=o(" (mT5 model)"),kqe=l(),Gm=a("li"),HH=a("strong"),Rqe=o("nystromformer"),Sqe=o(" \u2014 "),tB=a("a"),Pqe=o("NystromformerConfig"),$qe=o(" (Nystromformer model)"),Iqe=l(),Om=a("li"),UH=a("strong"),Nqe=o("openai-gpt"),Dqe=o(" \u2014 "),aB=a("a"),jqe=o("OpenAIGPTConfig"),qqe=o(" (OpenAI GPT model)"),Gqe=l(),Xm=a("li"),JH=a("strong"),Oqe=o("pegasus"),Xqe=o(" \u2014 "),nB=a("a"),Vqe=o("PegasusConfig"),zqe=o(" (Pegasus model)"),Wqe=l(),Vm=a("li"),YH=a("strong"),Qqe=o("perceiver"),Hqe=o(" \u2014 "),sB=a("a"),Uqe=o("PerceiverConfig"),Jqe=o(" (Perceiver model)"),Yqe=l(),zm=a("li"),KH=a("strong"),Kqe=o("plbart"),Zqe=o(" \u2014 "),lB=a("a"),eGe=o("PLBartConfig"),oGe=o(" (PLBart model)"),rGe=l(),Wm=a("li"),ZH=a("strong"),tGe=o("poolformer"),aGe=o(" \u2014 "),iB=a("a"),nGe=o("PoolFormerConfig"),sGe=o(" (PoolFormer model)"),lGe=l(),Qm=a("li"),eU=a("strong"),iGe=o("prophetnet"),dGe=o(" \u2014 "),dB=a("a"),cGe=o("ProphetNetConfig"),fGe=o(" (ProphetNet model)"),mGe=l(),Hm=a("li"),oU=a("strong"),gGe=o("qdqbert"),hGe=o(" \u2014 "),cB=a("a"),pGe=o("QDQBertConfig"),_Ge=o(" (QDQBert model)"),uGe=l(),Um=a("li"),rU=a("strong"),bGe=o("rag"),vGe=o(" \u2014 "),fB=a("a"),TGe=o("RagConfig"),FGe=o(" (RAG model)"),CGe=l(),Jm=a("li"),tU=a("strong"),MGe=o("realm"),EGe=o(" \u2014 "),mB=a("a"),yGe=o("RealmConfig"),wGe=o(" (Realm model)"),AGe=l(),Ym=a("li"),aU=a("strong"),LGe=o("reformer"),BGe=o(" \u2014 "),gB=a("a"),xGe=o("ReformerConfig"),kGe=o(" (Reformer model)"),RGe=l(),Km=a("li"),nU=a("strong"),SGe=o("rembert"),PGe=o(" \u2014 "),hB=a("a"),$Ge=o("RemBertConfig"),IGe=o(" (RemBERT model)"),NGe=l(),Zm=a("li"),sU=a("strong"),DGe=o("resnet"),jGe=o(" \u2014 "),pB=a("a"),qGe=o("ResNetConfig"),GGe=o(" (ResNet model)"),OGe=l(),eg=a("li"),lU=a("strong"),XGe=o("retribert"),VGe=o(" \u2014 "),_B=a("a"),zGe=o("RetriBertConfig"),WGe=o(" (RetriBERT model)"),QGe=l(),og=a("li"),iU=a("strong"),HGe=o("roberta"),UGe=o(" \u2014 "),uB=a("a"),JGe=o("RobertaConfig"),YGe=o(" (RoBERTa model)"),KGe=l(),rg=a("li"),dU=a("strong"),ZGe=o("roformer"),eOe=o(" \u2014 "),bB=a("a"),oOe=o("RoFormerConfig"),rOe=o(" (RoFormer model)"),tOe=l(),tg=a("li"),cU=a("strong"),aOe=o("segformer"),nOe=o(" \u2014 "),vB=a("a"),sOe=o("SegformerConfig"),lOe=o(" (SegFormer model)"),iOe=l(),ag=a("li"),fU=a("strong"),dOe=o("sew"),cOe=o(" \u2014 "),TB=a("a"),fOe=o("SEWConfig"),mOe=o(" (SEW model)"),gOe=l(),ng=a("li"),mU=a("strong"),hOe=o("sew-d"),pOe=o(" \u2014 "),FB=a("a"),_Oe=o("SEWDConfig"),uOe=o(" (SEW-D model)"),bOe=l(),sg=a("li"),gU=a("strong"),vOe=o("speech-encoder-decoder"),TOe=o(" \u2014 "),CB=a("a"),FOe=o("SpeechEncoderDecoderConfig"),COe=o(" (Speech Encoder decoder model)"),MOe=l(),lg=a("li"),hU=a("strong"),EOe=o("speech_to_text"),yOe=o(" \u2014 "),MB=a("a"),wOe=o("Speech2TextConfig"),AOe=o(" (Speech2Text model)"),LOe=l(),ig=a("li"),pU=a("strong"),BOe=o("speech_to_text_2"),xOe=o(" \u2014 "),EB=a("a"),kOe=o("Speech2Text2Config"),ROe=o(" (Speech2Text2 model)"),SOe=l(),dg=a("li"),_U=a("strong"),POe=o("splinter"),$Oe=o(" \u2014 "),yB=a("a"),IOe=o("SplinterConfig"),NOe=o(" (Splinter model)"),DOe=l(),cg=a("li"),uU=a("strong"),jOe=o("squeezebert"),qOe=o(" \u2014 "),wB=a("a"),GOe=o("SqueezeBertConfig"),OOe=o(" (SqueezeBERT model)"),XOe=l(),fg=a("li"),bU=a("strong"),VOe=o("swin"),zOe=o(" \u2014 "),AB=a("a"),WOe=o("SwinConfig"),QOe=o(" (Swin model)"),HOe=l(),mg=a("li"),vU=a("strong"),UOe=o("t5"),JOe=o(" \u2014 "),LB=a("a"),YOe=o("T5Config"),KOe=o(" (T5 model)"),ZOe=l(),gg=a("li"),TU=a("strong"),eXe=o("tapas"),oXe=o(" \u2014 "),BB=a("a"),rXe=o("TapasConfig"),tXe=o(" (TAPAS model)"),aXe=l(),hg=a("li"),FU=a("strong"),nXe=o("transfo-xl"),sXe=o(" \u2014 "),xB=a("a"),lXe=o("TransfoXLConfig"),iXe=o(" (Transformer-XL model)"),dXe=l(),pg=a("li"),CU=a("strong"),cXe=o("trocr"),fXe=o(" \u2014 "),kB=a("a"),mXe=o("TrOCRConfig"),gXe=o(" (TrOCR model)"),hXe=l(),_g=a("li"),MU=a("strong"),pXe=o("unispeech"),_Xe=o(" \u2014 "),RB=a("a"),uXe=o("UniSpeechConfig"),bXe=o(" (UniSpeech model)"),vXe=l(),ug=a("li"),EU=a("strong"),TXe=o("unispeech-sat"),FXe=o(" \u2014 "),SB=a("a"),CXe=o("UniSpeechSatConfig"),MXe=o(" (UniSpeechSat model)"),EXe=l(),bg=a("li"),yU=a("strong"),yXe=o("van"),wXe=o(" \u2014 "),PB=a("a"),AXe=o("VanConfig"),LXe=o(" (VAN model)"),BXe=l(),vg=a("li"),wU=a("strong"),xXe=o("vilt"),kXe=o(" \u2014 "),$B=a("a"),RXe=o("ViltConfig"),SXe=o(" (ViLT model)"),PXe=l(),Tg=a("li"),AU=a("strong"),$Xe=o("vision-encoder-decoder"),IXe=o(" \u2014 "),IB=a("a"),NXe=o("VisionEncoderDecoderConfig"),DXe=o(" (Vision Encoder decoder model)"),jXe=l(),Fg=a("li"),LU=a("strong"),qXe=o("vision-text-dual-encoder"),GXe=o(" \u2014 "),NB=a("a"),OXe=o("VisionTextDualEncoderConfig"),XXe=o(" (VisionTextDualEncoder model)"),VXe=l(),Cg=a("li"),BU=a("strong"),zXe=o("visual_bert"),WXe=o(" \u2014 "),DB=a("a"),QXe=o("VisualBertConfig"),HXe=o(" (VisualBert model)"),UXe=l(),Mg=a("li"),xU=a("strong"),JXe=o("vit"),YXe=o(" \u2014 "),jB=a("a"),KXe=o("ViTConfig"),ZXe=o(" (ViT model)"),eVe=l(),Eg=a("li"),kU=a("strong"),oVe=o("vit_mae"),rVe=o(" \u2014 "),qB=a("a"),tVe=o("ViTMAEConfig"),aVe=o(" (ViTMAE model)"),nVe=l(),yg=a("li"),RU=a("strong"),sVe=o("wav2vec2"),lVe=o(" \u2014 "),GB=a("a"),iVe=o("Wav2Vec2Config"),dVe=o(" (Wav2Vec2 model)"),cVe=l(),wg=a("li"),SU=a("strong"),fVe=o("wavlm"),mVe=o(" \u2014 "),OB=a("a"),gVe=o("WavLMConfig"),hVe=o(" (WavLM model)"),pVe=l(),Ag=a("li"),PU=a("strong"),_Ve=o("xglm"),uVe=o(" \u2014 "),XB=a("a"),bVe=o("XGLMConfig"),vVe=o(" (XGLM model)"),TVe=l(),Lg=a("li"),$U=a("strong"),FVe=o("xlm"),CVe=o(" \u2014 "),VB=a("a"),MVe=o("XLMConfig"),EVe=o(" (XLM model)"),yVe=l(),Bg=a("li"),IU=a("strong"),wVe=o("xlm-prophetnet"),AVe=o(" \u2014 "),zB=a("a"),LVe=o("XLMProphetNetConfig"),BVe=o(" (XLMProphetNet model)"),xVe=l(),xg=a("li"),NU=a("strong"),kVe=o("xlm-roberta"),RVe=o(" \u2014 "),WB=a("a"),SVe=o("XLMRobertaConfig"),PVe=o(" (XLM-RoBERTa model)"),$Ve=l(),kg=a("li"),DU=a("strong"),IVe=o("xlm-roberta-xl"),NVe=o(" \u2014 "),QB=a("a"),DVe=o("XLMRobertaXLConfig"),jVe=o(" (XLM-RoBERTa-XL model)"),qVe=l(),Rg=a("li"),jU=a("strong"),GVe=o("xlnet"),OVe=o(" \u2014 "),HB=a("a"),XVe=o("XLNetConfig"),VVe=o(" (XLNet model)"),zVe=l(),Sg=a("li"),qU=a("strong"),WVe=o("yoso"),QVe=o(" \u2014 "),UB=a("a"),HVe=o("YosoConfig"),UVe=o(" (YOSO model)"),JVe=l(),GU=a("p"),YVe=o("Examples:"),KVe=l(),f(bE.$$.fragment),ZVe=l(),Pg=a("div"),f(vE.$$.fragment),eze=l(),OU=a("p"),oze=o("Register a new configuration for this class."),mke=l(),Wi=a("h2"),$g=a("a"),XU=a("span"),f(TE.$$.fragment),rze=l(),VU=a("span"),tze=o("AutoTokenizer"),gke=l(),Qo=a("div"),f(FE.$$.fragment),aze=l(),CE=a("p"),nze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JB=a("a"),sze=o("AutoTokenizer.from_pretrained()"),lze=o(" class method."),ize=l(),ME=a("p"),dze=o("This class cannot be instantiated directly using "),zU=a("code"),cze=o("__init__()"),fze=o(" (throws an error)."),mze=l(),go=a("div"),f(EE.$$.fragment),gze=l(),WU=a("p"),hze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pze=l(),Oa=a("p"),_ze=o("The tokenizer class to instantiate is selected based on the "),QU=a("code"),uze=o("model_type"),bze=o(` property of the config object (either
passed as an argument or loaded from `),HU=a("code"),vze=o("pretrained_model_name_or_path"),Tze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UU=a("code"),Fze=o("pretrained_model_name_or_path"),Cze=o(":"),Mze=l(),E=a("ul"),Wn=a("li"),JU=a("strong"),Eze=o("albert"),yze=o(" \u2014 "),YB=a("a"),wze=o("AlbertTokenizer"),Aze=o(" or "),KB=a("a"),Lze=o("AlbertTokenizerFast"),Bze=o(" (ALBERT model)"),xze=l(),Qn=a("li"),YU=a("strong"),kze=o("bart"),Rze=o(" \u2014 "),ZB=a("a"),Sze=o("BartTokenizer"),Pze=o(" or "),ex=a("a"),$ze=o("BartTokenizerFast"),Ize=o(" (BART model)"),Nze=l(),Hn=a("li"),KU=a("strong"),Dze=o("barthez"),jze=o(" \u2014 "),ox=a("a"),qze=o("BarthezTokenizer"),Gze=o(" or "),rx=a("a"),Oze=o("BarthezTokenizerFast"),Xze=o(" (BARThez model)"),Vze=l(),Ig=a("li"),ZU=a("strong"),zze=o("bartpho"),Wze=o(" \u2014 "),tx=a("a"),Qze=o("BartphoTokenizer"),Hze=o(" (BARTpho model)"),Uze=l(),Un=a("li"),eJ=a("strong"),Jze=o("bert"),Yze=o(" \u2014 "),ax=a("a"),Kze=o("BertTokenizer"),Zze=o(" or "),nx=a("a"),eWe=o("BertTokenizerFast"),oWe=o(" (BERT model)"),rWe=l(),Ng=a("li"),oJ=a("strong"),tWe=o("bert-generation"),aWe=o(" \u2014 "),sx=a("a"),nWe=o("BertGenerationTokenizer"),sWe=o(" (Bert Generation model)"),lWe=l(),Dg=a("li"),rJ=a("strong"),iWe=o("bert-japanese"),dWe=o(" \u2014 "),lx=a("a"),cWe=o("BertJapaneseTokenizer"),fWe=o(" (BertJapanese model)"),mWe=l(),jg=a("li"),tJ=a("strong"),gWe=o("bertweet"),hWe=o(" \u2014 "),ix=a("a"),pWe=o("BertweetTokenizer"),_We=o(" (Bertweet model)"),uWe=l(),Jn=a("li"),aJ=a("strong"),bWe=o("big_bird"),vWe=o(" \u2014 "),dx=a("a"),TWe=o("BigBirdTokenizer"),FWe=o(" or "),cx=a("a"),CWe=o("BigBirdTokenizerFast"),MWe=o(" (BigBird model)"),EWe=l(),Yn=a("li"),nJ=a("strong"),yWe=o("bigbird_pegasus"),wWe=o(" \u2014 "),fx=a("a"),AWe=o("PegasusTokenizer"),LWe=o(" or "),mx=a("a"),BWe=o("PegasusTokenizerFast"),xWe=o(" (BigBirdPegasus model)"),kWe=l(),Kn=a("li"),sJ=a("strong"),RWe=o("blenderbot"),SWe=o(" \u2014 "),gx=a("a"),PWe=o("BlenderbotTokenizer"),$We=o(" or "),hx=a("a"),IWe=o("BlenderbotTokenizerFast"),NWe=o(" (Blenderbot model)"),DWe=l(),qg=a("li"),lJ=a("strong"),jWe=o("blenderbot-small"),qWe=o(" \u2014 "),px=a("a"),GWe=o("BlenderbotSmallTokenizer"),OWe=o(" (BlenderbotSmall model)"),XWe=l(),Gg=a("li"),iJ=a("strong"),VWe=o("byt5"),zWe=o(" \u2014 "),_x=a("a"),WWe=o("ByT5Tokenizer"),QWe=o(" (ByT5 model)"),HWe=l(),Zn=a("li"),dJ=a("strong"),UWe=o("camembert"),JWe=o(" \u2014 "),ux=a("a"),YWe=o("CamembertTokenizer"),KWe=o(" or "),bx=a("a"),ZWe=o("CamembertTokenizerFast"),eQe=o(" (CamemBERT model)"),oQe=l(),Og=a("li"),cJ=a("strong"),rQe=o("canine"),tQe=o(" \u2014 "),vx=a("a"),aQe=o("CanineTokenizer"),nQe=o(" (Canine model)"),sQe=l(),es=a("li"),fJ=a("strong"),lQe=o("clip"),iQe=o(" \u2014 "),Tx=a("a"),dQe=o("CLIPTokenizer"),cQe=o(" or "),Fx=a("a"),fQe=o("CLIPTokenizerFast"),mQe=o(" (CLIP model)"),gQe=l(),os=a("li"),mJ=a("strong"),hQe=o("convbert"),pQe=o(" \u2014 "),Cx=a("a"),_Qe=o("ConvBertTokenizer"),uQe=o(" or "),Mx=a("a"),bQe=o("ConvBertTokenizerFast"),vQe=o(" (ConvBERT model)"),TQe=l(),rs=a("li"),gJ=a("strong"),FQe=o("cpm"),CQe=o(" \u2014 "),Ex=a("a"),MQe=o("CpmTokenizer"),EQe=o(" or "),hJ=a("code"),yQe=o("CpmTokenizerFast"),wQe=o(" (CPM model)"),AQe=l(),Xg=a("li"),pJ=a("strong"),LQe=o("ctrl"),BQe=o(" \u2014 "),yx=a("a"),xQe=o("CTRLTokenizer"),kQe=o(" (CTRL model)"),RQe=l(),ts=a("li"),_J=a("strong"),SQe=o("deberta"),PQe=o(" \u2014 "),wx=a("a"),$Qe=o("DebertaTokenizer"),IQe=o(" or "),Ax=a("a"),NQe=o("DebertaTokenizerFast"),DQe=o(" (DeBERTa model)"),jQe=l(),Vg=a("li"),uJ=a("strong"),qQe=o("deberta-v2"),GQe=o(" \u2014 "),Lx=a("a"),OQe=o("DebertaV2Tokenizer"),XQe=o(" (DeBERTa-v2 model)"),VQe=l(),as=a("li"),bJ=a("strong"),zQe=o("distilbert"),WQe=o(" \u2014 "),Bx=a("a"),QQe=o("DistilBertTokenizer"),HQe=o(" or "),xx=a("a"),UQe=o("DistilBertTokenizerFast"),JQe=o(" (DistilBERT model)"),YQe=l(),ns=a("li"),vJ=a("strong"),KQe=o("dpr"),ZQe=o(" \u2014 "),kx=a("a"),eHe=o("DPRQuestionEncoderTokenizer"),oHe=o(" or "),Rx=a("a"),rHe=o("DPRQuestionEncoderTokenizerFast"),tHe=o(" (DPR model)"),aHe=l(),ss=a("li"),TJ=a("strong"),nHe=o("electra"),sHe=o(" \u2014 "),Sx=a("a"),lHe=o("ElectraTokenizer"),iHe=o(" or "),Px=a("a"),dHe=o("ElectraTokenizerFast"),cHe=o(" (ELECTRA model)"),fHe=l(),zg=a("li"),FJ=a("strong"),mHe=o("flaubert"),gHe=o(" \u2014 "),$x=a("a"),hHe=o("FlaubertTokenizer"),pHe=o(" (FlauBERT model)"),_He=l(),ls=a("li"),CJ=a("strong"),uHe=o("fnet"),bHe=o(" \u2014 "),Ix=a("a"),vHe=o("FNetTokenizer"),THe=o(" or "),Nx=a("a"),FHe=o("FNetTokenizerFast"),CHe=o(" (FNet model)"),MHe=l(),Wg=a("li"),MJ=a("strong"),EHe=o("fsmt"),yHe=o(" \u2014 "),Dx=a("a"),wHe=o("FSMTTokenizer"),AHe=o(" (FairSeq Machine-Translation model)"),LHe=l(),is=a("li"),EJ=a("strong"),BHe=o("funnel"),xHe=o(" \u2014 "),jx=a("a"),kHe=o("FunnelTokenizer"),RHe=o(" or "),qx=a("a"),SHe=o("FunnelTokenizerFast"),PHe=o(" (Funnel Transformer model)"),$He=l(),ds=a("li"),yJ=a("strong"),IHe=o("gpt2"),NHe=o(" \u2014 "),Gx=a("a"),DHe=o("GPT2Tokenizer"),jHe=o(" or "),Ox=a("a"),qHe=o("GPT2TokenizerFast"),GHe=o(" (OpenAI GPT-2 model)"),OHe=l(),cs=a("li"),wJ=a("strong"),XHe=o("gpt_neo"),VHe=o(" \u2014 "),Xx=a("a"),zHe=o("GPT2Tokenizer"),WHe=o(" or "),Vx=a("a"),QHe=o("GPT2TokenizerFast"),HHe=o(" (GPT Neo model)"),UHe=l(),fs=a("li"),AJ=a("strong"),JHe=o("herbert"),YHe=o(" \u2014 "),zx=a("a"),KHe=o("HerbertTokenizer"),ZHe=o(" or "),Wx=a("a"),eUe=o("HerbertTokenizerFast"),oUe=o(" (HerBERT model)"),rUe=l(),Qg=a("li"),LJ=a("strong"),tUe=o("hubert"),aUe=o(" \u2014 "),Qx=a("a"),nUe=o("Wav2Vec2CTCTokenizer"),sUe=o(" (Hubert model)"),lUe=l(),ms=a("li"),BJ=a("strong"),iUe=o("ibert"),dUe=o(" \u2014 "),Hx=a("a"),cUe=o("RobertaTokenizer"),fUe=o(" or "),Ux=a("a"),mUe=o("RobertaTokenizerFast"),gUe=o(" (I-BERT model)"),hUe=l(),gs=a("li"),xJ=a("strong"),pUe=o("layoutlm"),_Ue=o(" \u2014 "),Jx=a("a"),uUe=o("LayoutLMTokenizer"),bUe=o(" or "),Yx=a("a"),vUe=o("LayoutLMTokenizerFast"),TUe=o(" (LayoutLM model)"),FUe=l(),hs=a("li"),kJ=a("strong"),CUe=o("layoutlmv2"),MUe=o(" \u2014 "),Kx=a("a"),EUe=o("LayoutLMv2Tokenizer"),yUe=o(" or "),Zx=a("a"),wUe=o("LayoutLMv2TokenizerFast"),AUe=o(" (LayoutLMv2 model)"),LUe=l(),ps=a("li"),RJ=a("strong"),BUe=o("layoutxlm"),xUe=o(" \u2014 "),ek=a("a"),kUe=o("LayoutXLMTokenizer"),RUe=o(" or "),ok=a("a"),SUe=o("LayoutXLMTokenizerFast"),PUe=o(" (LayoutXLM model)"),$Ue=l(),_s=a("li"),SJ=a("strong"),IUe=o("led"),NUe=o(" \u2014 "),rk=a("a"),DUe=o("LEDTokenizer"),jUe=o(" or "),tk=a("a"),qUe=o("LEDTokenizerFast"),GUe=o(" (LED model)"),OUe=l(),us=a("li"),PJ=a("strong"),XUe=o("longformer"),VUe=o(" \u2014 "),ak=a("a"),zUe=o("LongformerTokenizer"),WUe=o(" or "),nk=a("a"),QUe=o("LongformerTokenizerFast"),HUe=o(" (Longformer model)"),UUe=l(),Hg=a("li"),$J=a("strong"),JUe=o("luke"),YUe=o(" \u2014 "),sk=a("a"),KUe=o("LukeTokenizer"),ZUe=o(" (LUKE model)"),eJe=l(),bs=a("li"),IJ=a("strong"),oJe=o("lxmert"),rJe=o(" \u2014 "),lk=a("a"),tJe=o("LxmertTokenizer"),aJe=o(" or "),ik=a("a"),nJe=o("LxmertTokenizerFast"),sJe=o(" (LXMERT model)"),lJe=l(),Ug=a("li"),NJ=a("strong"),iJe=o("m2m_100"),dJe=o(" \u2014 "),dk=a("a"),cJe=o("M2M100Tokenizer"),fJe=o(" (M2M100 model)"),mJe=l(),Jg=a("li"),DJ=a("strong"),gJe=o("marian"),hJe=o(" \u2014 "),ck=a("a"),pJe=o("MarianTokenizer"),_Je=o(" (Marian model)"),uJe=l(),vs=a("li"),jJ=a("strong"),bJe=o("mbart"),vJe=o(" \u2014 "),fk=a("a"),TJe=o("MBartTokenizer"),FJe=o(" or "),mk=a("a"),CJe=o("MBartTokenizerFast"),MJe=o(" (mBART model)"),EJe=l(),Ts=a("li"),qJ=a("strong"),yJe=o("mbart50"),wJe=o(" \u2014 "),gk=a("a"),AJe=o("MBart50Tokenizer"),LJe=o(" or "),hk=a("a"),BJe=o("MBart50TokenizerFast"),xJe=o(" (mBART-50 model)"),kJe=l(),Yg=a("li"),GJ=a("strong"),RJe=o("mluke"),SJe=o(" \u2014 "),pk=a("a"),PJe=o("MLukeTokenizer"),$Je=o(" (mLUKE model)"),IJe=l(),Fs=a("li"),OJ=a("strong"),NJe=o("mobilebert"),DJe=o(" \u2014 "),_k=a("a"),jJe=o("MobileBertTokenizer"),qJe=o(" or "),uk=a("a"),GJe=o("MobileBertTokenizerFast"),OJe=o(" (MobileBERT model)"),XJe=l(),Cs=a("li"),XJ=a("strong"),VJe=o("mpnet"),zJe=o(" \u2014 "),bk=a("a"),WJe=o("MPNetTokenizer"),QJe=o(" or "),vk=a("a"),HJe=o("MPNetTokenizerFast"),UJe=o(" (MPNet model)"),JJe=l(),Ms=a("li"),VJ=a("strong"),YJe=o("mt5"),KJe=o(" \u2014 "),Tk=a("a"),ZJe=o("MT5Tokenizer"),eYe=o(" or "),Fk=a("a"),oYe=o("MT5TokenizerFast"),rYe=o(" (mT5 model)"),tYe=l(),Es=a("li"),zJ=a("strong"),aYe=o("openai-gpt"),nYe=o(" \u2014 "),Ck=a("a"),sYe=o("OpenAIGPTTokenizer"),lYe=o(" or "),Mk=a("a"),iYe=o("OpenAIGPTTokenizerFast"),dYe=o(" (OpenAI GPT model)"),cYe=l(),ys=a("li"),WJ=a("strong"),fYe=o("pegasus"),mYe=o(" \u2014 "),Ek=a("a"),gYe=o("PegasusTokenizer"),hYe=o(" or "),yk=a("a"),pYe=o("PegasusTokenizerFast"),_Ye=o(" (Pegasus model)"),uYe=l(),Kg=a("li"),QJ=a("strong"),bYe=o("perceiver"),vYe=o(" \u2014 "),wk=a("a"),TYe=o("PerceiverTokenizer"),FYe=o(" (Perceiver model)"),CYe=l(),Zg=a("li"),HJ=a("strong"),MYe=o("phobert"),EYe=o(" \u2014 "),Ak=a("a"),yYe=o("PhobertTokenizer"),wYe=o(" (PhoBERT model)"),AYe=l(),eh=a("li"),UJ=a("strong"),LYe=o("plbart"),BYe=o(" \u2014 "),Lk=a("a"),xYe=o("PLBartTokenizer"),kYe=o(" (PLBart model)"),RYe=l(),oh=a("li"),JJ=a("strong"),SYe=o("prophetnet"),PYe=o(" \u2014 "),Bk=a("a"),$Ye=o("ProphetNetTokenizer"),IYe=o(" (ProphetNet model)"),NYe=l(),ws=a("li"),YJ=a("strong"),DYe=o("qdqbert"),jYe=o(" \u2014 "),xk=a("a"),qYe=o("BertTokenizer"),GYe=o(" or "),kk=a("a"),OYe=o("BertTokenizerFast"),XYe=o(" (QDQBert model)"),VYe=l(),rh=a("li"),KJ=a("strong"),zYe=o("rag"),WYe=o(" \u2014 "),Rk=a("a"),QYe=o("RagTokenizer"),HYe=o(" (RAG model)"),UYe=l(),As=a("li"),ZJ=a("strong"),JYe=o("realm"),YYe=o(" \u2014 "),Sk=a("a"),KYe=o("RealmTokenizer"),ZYe=o(" or "),Pk=a("a"),eKe=o("RealmTokenizerFast"),oKe=o(" (Realm model)"),rKe=l(),Ls=a("li"),eY=a("strong"),tKe=o("reformer"),aKe=o(" \u2014 "),$k=a("a"),nKe=o("ReformerTokenizer"),sKe=o(" or "),Ik=a("a"),lKe=o("ReformerTokenizerFast"),iKe=o(" (Reformer model)"),dKe=l(),Bs=a("li"),oY=a("strong"),cKe=o("rembert"),fKe=o(" \u2014 "),Nk=a("a"),mKe=o("RemBertTokenizer"),gKe=o(" or "),Dk=a("a"),hKe=o("RemBertTokenizerFast"),pKe=o(" (RemBERT model)"),_Ke=l(),xs=a("li"),rY=a("strong"),uKe=o("retribert"),bKe=o(" \u2014 "),jk=a("a"),vKe=o("RetriBertTokenizer"),TKe=o(" or "),qk=a("a"),FKe=o("RetriBertTokenizerFast"),CKe=o(" (RetriBERT model)"),MKe=l(),ks=a("li"),tY=a("strong"),EKe=o("roberta"),yKe=o(" \u2014 "),Gk=a("a"),wKe=o("RobertaTokenizer"),AKe=o(" or "),Ok=a("a"),LKe=o("RobertaTokenizerFast"),BKe=o(" (RoBERTa model)"),xKe=l(),Rs=a("li"),aY=a("strong"),kKe=o("roformer"),RKe=o(" \u2014 "),Xk=a("a"),SKe=o("RoFormerTokenizer"),PKe=o(" or "),Vk=a("a"),$Ke=o("RoFormerTokenizerFast"),IKe=o(" (RoFormer model)"),NKe=l(),th=a("li"),nY=a("strong"),DKe=o("speech_to_text"),jKe=o(" \u2014 "),zk=a("a"),qKe=o("Speech2TextTokenizer"),GKe=o(" (Speech2Text model)"),OKe=l(),ah=a("li"),sY=a("strong"),XKe=o("speech_to_text_2"),VKe=o(" \u2014 "),Wk=a("a"),zKe=o("Speech2Text2Tokenizer"),WKe=o(" (Speech2Text2 model)"),QKe=l(),Ss=a("li"),lY=a("strong"),HKe=o("splinter"),UKe=o(" \u2014 "),Qk=a("a"),JKe=o("SplinterTokenizer"),YKe=o(" or "),Hk=a("a"),KKe=o("SplinterTokenizerFast"),ZKe=o(" (Splinter model)"),eZe=l(),Ps=a("li"),iY=a("strong"),oZe=o("squeezebert"),rZe=o(" \u2014 "),Uk=a("a"),tZe=o("SqueezeBertTokenizer"),aZe=o(" or "),Jk=a("a"),nZe=o("SqueezeBertTokenizerFast"),sZe=o(" (SqueezeBERT model)"),lZe=l(),$s=a("li"),dY=a("strong"),iZe=o("t5"),dZe=o(" \u2014 "),Yk=a("a"),cZe=o("T5Tokenizer"),fZe=o(" or "),Kk=a("a"),mZe=o("T5TokenizerFast"),gZe=o(" (T5 model)"),hZe=l(),nh=a("li"),cY=a("strong"),pZe=o("tapas"),_Ze=o(" \u2014 "),Zk=a("a"),uZe=o("TapasTokenizer"),bZe=o(" (TAPAS model)"),vZe=l(),sh=a("li"),fY=a("strong"),TZe=o("transfo-xl"),FZe=o(" \u2014 "),eR=a("a"),CZe=o("TransfoXLTokenizer"),MZe=o(" (Transformer-XL model)"),EZe=l(),lh=a("li"),mY=a("strong"),yZe=o("wav2vec2"),wZe=o(" \u2014 "),oR=a("a"),AZe=o("Wav2Vec2CTCTokenizer"),LZe=o(" (Wav2Vec2 model)"),BZe=l(),ih=a("li"),gY=a("strong"),xZe=o("wav2vec2_phoneme"),kZe=o(" \u2014 "),rR=a("a"),RZe=o("Wav2Vec2PhonemeCTCTokenizer"),SZe=o(" (Wav2Vec2Phoneme model)"),PZe=l(),Is=a("li"),hY=a("strong"),$Ze=o("xglm"),IZe=o(" \u2014 "),tR=a("a"),NZe=o("XGLMTokenizer"),DZe=o(" or "),aR=a("a"),jZe=o("XGLMTokenizerFast"),qZe=o(" (XGLM model)"),GZe=l(),dh=a("li"),pY=a("strong"),OZe=o("xlm"),XZe=o(" \u2014 "),nR=a("a"),VZe=o("XLMTokenizer"),zZe=o(" (XLM model)"),WZe=l(),ch=a("li"),_Y=a("strong"),QZe=o("xlm-prophetnet"),HZe=o(" \u2014 "),sR=a("a"),UZe=o("XLMProphetNetTokenizer"),JZe=o(" (XLMProphetNet model)"),YZe=l(),Ns=a("li"),uY=a("strong"),KZe=o("xlm-roberta"),ZZe=o(" \u2014 "),lR=a("a"),eeo=o("XLMRobertaTokenizer"),oeo=o(" or "),iR=a("a"),reo=o("XLMRobertaTokenizerFast"),teo=o(" (XLM-RoBERTa model)"),aeo=l(),Ds=a("li"),bY=a("strong"),neo=o("xlnet"),seo=o(" \u2014 "),dR=a("a"),leo=o("XLNetTokenizer"),ieo=o(" or "),cR=a("a"),deo=o("XLNetTokenizerFast"),ceo=o(" (XLNet model)"),feo=l(),vY=a("p"),meo=o("Examples:"),geo=l(),f(yE.$$.fragment),heo=l(),fh=a("div"),f(wE.$$.fragment),peo=l(),TY=a("p"),_eo=o("Register a new tokenizer in this mapping."),hke=l(),Qi=a("h2"),mh=a("a"),FY=a("span"),f(AE.$$.fragment),ueo=l(),CY=a("span"),beo=o("AutoFeatureExtractor"),pke=l(),Ho=a("div"),f(LE.$$.fragment),veo=l(),BE=a("p"),Teo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fR=a("a"),Feo=o("AutoFeatureExtractor.from_pretrained()"),Ceo=o(" class method."),Meo=l(),xE=a("p"),Eeo=o("This class cannot be instantiated directly using "),MY=a("code"),yeo=o("__init__()"),weo=o(" (throws an error)."),Aeo=l(),$e=a("div"),f(kE.$$.fragment),Leo=l(),EY=a("p"),Beo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),xeo=l(),Xa=a("p"),keo=o("The feature extractor class to instantiate is selected based on the "),yY=a("code"),Reo=o("model_type"),Seo=o(` property of the config object
(either passed as an argument or loaded from `),wY=a("code"),Peo=o("pretrained_model_name_or_path"),$eo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),AY=a("code"),Ieo=o("pretrained_model_name_or_path"),Neo=o(":"),Deo=l(),re=a("ul"),gh=a("li"),LY=a("strong"),jeo=o("beit"),qeo=o(" \u2014 "),mR=a("a"),Geo=o("BeitFeatureExtractor"),Oeo=o(" (BEiT model)"),Xeo=l(),hh=a("li"),BY=a("strong"),Veo=o("clip"),zeo=o(" \u2014 "),gR=a("a"),Weo=o("CLIPFeatureExtractor"),Qeo=o(" (CLIP model)"),Heo=l(),ph=a("li"),xY=a("strong"),Ueo=o("convnext"),Jeo=o(" \u2014 "),hR=a("a"),Yeo=o("ConvNextFeatureExtractor"),Keo=o(" (ConvNext model)"),Zeo=l(),_h=a("li"),kY=a("strong"),eoo=o("deit"),ooo=o(" \u2014 "),pR=a("a"),roo=o("DeiTFeatureExtractor"),too=o(" (DeiT model)"),aoo=l(),uh=a("li"),RY=a("strong"),noo=o("detr"),soo=o(" \u2014 "),_R=a("a"),loo=o("DetrFeatureExtractor"),ioo=o(" (DETR model)"),doo=l(),bh=a("li"),SY=a("strong"),coo=o("hubert"),foo=o(" \u2014 "),uR=a("a"),moo=o("Wav2Vec2FeatureExtractor"),goo=o(" (Hubert model)"),hoo=l(),vh=a("li"),PY=a("strong"),poo=o("layoutlmv2"),_oo=o(" \u2014 "),bR=a("a"),uoo=o("LayoutLMv2FeatureExtractor"),boo=o(" (LayoutLMv2 model)"),voo=l(),Th=a("li"),$Y=a("strong"),Too=o("maskformer"),Foo=o(" \u2014 "),vR=a("a"),Coo=o("MaskFormerFeatureExtractor"),Moo=o(" (MaskFormer model)"),Eoo=l(),Fh=a("li"),IY=a("strong"),yoo=o("perceiver"),woo=o(" \u2014 "),TR=a("a"),Aoo=o("PerceiverFeatureExtractor"),Loo=o(" (Perceiver model)"),Boo=l(),Ch=a("li"),NY=a("strong"),xoo=o("poolformer"),koo=o(" \u2014 "),FR=a("a"),Roo=o("PoolFormerFeatureExtractor"),Soo=o(" (PoolFormer model)"),Poo=l(),Mh=a("li"),DY=a("strong"),$oo=o("resnet"),Ioo=o(" \u2014 "),CR=a("a"),Noo=o("ConvNextFeatureExtractor"),Doo=o(" (ResNet model)"),joo=l(),Eh=a("li"),jY=a("strong"),qoo=o("segformer"),Goo=o(" \u2014 "),MR=a("a"),Ooo=o("SegformerFeatureExtractor"),Xoo=o(" (SegFormer model)"),Voo=l(),yh=a("li"),qY=a("strong"),zoo=o("speech_to_text"),Woo=o(" \u2014 "),ER=a("a"),Qoo=o("Speech2TextFeatureExtractor"),Hoo=o(" (Speech2Text model)"),Uoo=l(),wh=a("li"),GY=a("strong"),Joo=o("swin"),Yoo=o(" \u2014 "),yR=a("a"),Koo=o("ViTFeatureExtractor"),Zoo=o(" (Swin model)"),ero=l(),Ah=a("li"),OY=a("strong"),oro=o("van"),rro=o(" \u2014 "),wR=a("a"),tro=o("ConvNextFeatureExtractor"),aro=o(" (VAN model)"),nro=l(),Lh=a("li"),XY=a("strong"),sro=o("vit"),lro=o(" \u2014 "),AR=a("a"),iro=o("ViTFeatureExtractor"),dro=o(" (ViT model)"),cro=l(),Bh=a("li"),VY=a("strong"),fro=o("vit_mae"),mro=o(" \u2014 "),LR=a("a"),gro=o("ViTFeatureExtractor"),hro=o(" (ViTMAE model)"),pro=l(),xh=a("li"),zY=a("strong"),_ro=o("wav2vec2"),uro=o(" \u2014 "),BR=a("a"),bro=o("Wav2Vec2FeatureExtractor"),vro=o(" (Wav2Vec2 model)"),Tro=l(),f(kh.$$.fragment),Fro=l(),WY=a("p"),Cro=o("Examples:"),Mro=l(),f(RE.$$.fragment),Ero=l(),Rh=a("div"),f(SE.$$.fragment),yro=l(),QY=a("p"),wro=o("Register a new feature extractor for this class."),_ke=l(),Hi=a("h2"),Sh=a("a"),HY=a("span"),f(PE.$$.fragment),Aro=l(),UY=a("span"),Lro=o("AutoProcessor"),uke=l(),Uo=a("div"),f($E.$$.fragment),Bro=l(),IE=a("p"),xro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xR=a("a"),kro=o("AutoProcessor.from_pretrained()"),Rro=o(" class method."),Sro=l(),NE=a("p"),Pro=o("This class cannot be instantiated directly using "),JY=a("code"),$ro=o("__init__()"),Iro=o(" (throws an error)."),Nro=l(),Ie=a("div"),f(DE.$$.fragment),Dro=l(),YY=a("p"),jro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qro=l(),Ui=a("p"),Gro=o("The processor class to instantiate is selected based on the "),KY=a("code"),Oro=o("model_type"),Xro=o(` property of the config object (either
passed as an argument or loaded from `),ZY=a("code"),Vro=o("pretrained_model_name_or_path"),zro=o(" if possible):"),Wro=l(),xe=a("ul"),Ph=a("li"),eK=a("strong"),Qro=o("clip"),Hro=o(" \u2014 "),kR=a("a"),Uro=o("CLIPProcessor"),Jro=o(" (CLIP model)"),Yro=l(),$h=a("li"),oK=a("strong"),Kro=o("layoutlmv2"),Zro=o(" \u2014 "),RR=a("a"),eto=o("LayoutLMv2Processor"),oto=o(" (LayoutLMv2 model)"),rto=l(),Ih=a("li"),rK=a("strong"),tto=o("layoutxlm"),ato=o(" \u2014 "),SR=a("a"),nto=o("LayoutXLMProcessor"),sto=o(" (LayoutXLM model)"),lto=l(),Nh=a("li"),tK=a("strong"),ito=o("speech_to_text"),dto=o(" \u2014 "),PR=a("a"),cto=o("Speech2TextProcessor"),fto=o(" (Speech2Text model)"),mto=l(),Dh=a("li"),aK=a("strong"),gto=o("speech_to_text_2"),hto=o(" \u2014 "),$R=a("a"),pto=o("Speech2Text2Processor"),_to=o(" (Speech2Text2 model)"),uto=l(),jh=a("li"),nK=a("strong"),bto=o("trocr"),vto=o(" \u2014 "),IR=a("a"),Tto=o("TrOCRProcessor"),Fto=o(" (TrOCR model)"),Cto=l(),qh=a("li"),sK=a("strong"),Mto=o("vision-text-dual-encoder"),Eto=o(" \u2014 "),NR=a("a"),yto=o("VisionTextDualEncoderProcessor"),wto=o(" (VisionTextDualEncoder model)"),Ato=l(),Gh=a("li"),lK=a("strong"),Lto=o("wav2vec2"),Bto=o(" \u2014 "),DR=a("a"),xto=o("Wav2Vec2Processor"),kto=o(" (Wav2Vec2 model)"),Rto=l(),f(Oh.$$.fragment),Sto=l(),iK=a("p"),Pto=o("Examples:"),$to=l(),f(jE.$$.fragment),Ito=l(),Xh=a("div"),f(qE.$$.fragment),Nto=l(),dK=a("p"),Dto=o("Register a new processor for this class."),bke=l(),Ji=a("h2"),Vh=a("a"),cK=a("span"),f(GE.$$.fragment),jto=l(),fK=a("span"),qto=o("AutoModel"),vke=l(),Jo=a("div"),f(OE.$$.fragment),Gto=l(),Yi=a("p"),Oto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=a("code"),Xto=o("from_pretrained()"),Vto=o("class method or the "),gK=a("code"),zto=o("from_config()"),Wto=o(`class
method.`),Qto=l(),XE=a("p"),Hto=o("This class cannot be instantiated directly using "),hK=a("code"),Uto=o("__init__()"),Jto=o(" (throws an error)."),Yto=l(),Vr=a("div"),f(VE.$$.fragment),Kto=l(),pK=a("p"),Zto=o("Instantiates one of the base model classes of the library from a configuration."),eao=l(),Ki=a("p"),oao=o(`Note:
Loading a model from its configuration file does `),_K=a("strong"),rao=o("not"),tao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=a("code"),aao=o("from_pretrained()"),nao=o("to load the model weights."),sao=l(),bK=a("p"),lao=o("Examples:"),iao=l(),f(zE.$$.fragment),dao=l(),Ne=a("div"),f(WE.$$.fragment),cao=l(),vK=a("p"),fao=o("Instantiate one of the base model classes of the library from a pretrained model."),mao=l(),Va=a("p"),gao=o("The model class to instantiate is selected based on the "),TK=a("code"),hao=o("model_type"),pao=o(` property of the config object (either
passed as an argument or loaded from `),FK=a("code"),_ao=o("pretrained_model_name_or_path"),uao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CK=a("code"),bao=o("pretrained_model_name_or_path"),vao=o(":"),Tao=l(),F=a("ul"),zh=a("li"),MK=a("strong"),Fao=o("albert"),Cao=o(" \u2014 "),jR=a("a"),Mao=o("AlbertModel"),Eao=o(" (ALBERT model)"),yao=l(),Wh=a("li"),EK=a("strong"),wao=o("bart"),Aao=o(" \u2014 "),qR=a("a"),Lao=o("BartModel"),Bao=o(" (BART model)"),xao=l(),Qh=a("li"),yK=a("strong"),kao=o("beit"),Rao=o(" \u2014 "),GR=a("a"),Sao=o("BeitModel"),Pao=o(" (BEiT model)"),$ao=l(),Hh=a("li"),wK=a("strong"),Iao=o("bert"),Nao=o(" \u2014 "),OR=a("a"),Dao=o("BertModel"),jao=o(" (BERT model)"),qao=l(),Uh=a("li"),AK=a("strong"),Gao=o("bert-generation"),Oao=o(" \u2014 "),XR=a("a"),Xao=o("BertGenerationEncoder"),Vao=o(" (Bert Generation model)"),zao=l(),Jh=a("li"),LK=a("strong"),Wao=o("big_bird"),Qao=o(" \u2014 "),VR=a("a"),Hao=o("BigBirdModel"),Uao=o(" (BigBird model)"),Jao=l(),Yh=a("li"),BK=a("strong"),Yao=o("bigbird_pegasus"),Kao=o(" \u2014 "),zR=a("a"),Zao=o("BigBirdPegasusModel"),eno=o(" (BigBirdPegasus model)"),ono=l(),Kh=a("li"),xK=a("strong"),rno=o("blenderbot"),tno=o(" \u2014 "),WR=a("a"),ano=o("BlenderbotModel"),nno=o(" (Blenderbot model)"),sno=l(),Zh=a("li"),kK=a("strong"),lno=o("blenderbot-small"),ino=o(" \u2014 "),QR=a("a"),dno=o("BlenderbotSmallModel"),cno=o(" (BlenderbotSmall model)"),fno=l(),ep=a("li"),RK=a("strong"),mno=o("camembert"),gno=o(" \u2014 "),HR=a("a"),hno=o("CamembertModel"),pno=o(" (CamemBERT model)"),_no=l(),op=a("li"),SK=a("strong"),uno=o("canine"),bno=o(" \u2014 "),UR=a("a"),vno=o("CanineModel"),Tno=o(" (Canine model)"),Fno=l(),rp=a("li"),PK=a("strong"),Cno=o("clip"),Mno=o(" \u2014 "),JR=a("a"),Eno=o("CLIPModel"),yno=o(" (CLIP model)"),wno=l(),tp=a("li"),$K=a("strong"),Ano=o("convbert"),Lno=o(" \u2014 "),YR=a("a"),Bno=o("ConvBertModel"),xno=o(" (ConvBERT model)"),kno=l(),ap=a("li"),IK=a("strong"),Rno=o("convnext"),Sno=o(" \u2014 "),KR=a("a"),Pno=o("ConvNextModel"),$no=o(" (ConvNext model)"),Ino=l(),np=a("li"),NK=a("strong"),Nno=o("ctrl"),Dno=o(" \u2014 "),ZR=a("a"),jno=o("CTRLModel"),qno=o(" (CTRL model)"),Gno=l(),sp=a("li"),DK=a("strong"),Ono=o("data2vec-audio"),Xno=o(" \u2014 "),eS=a("a"),Vno=o("Data2VecAudioModel"),zno=o(" (Data2VecAudio model)"),Wno=l(),lp=a("li"),jK=a("strong"),Qno=o("data2vec-text"),Hno=o(" \u2014 "),oS=a("a"),Uno=o("Data2VecTextModel"),Jno=o(" (Data2VecText model)"),Yno=l(),ip=a("li"),qK=a("strong"),Kno=o("deberta"),Zno=o(" \u2014 "),rS=a("a"),eso=o("DebertaModel"),oso=o(" (DeBERTa model)"),rso=l(),dp=a("li"),GK=a("strong"),tso=o("deberta-v2"),aso=o(" \u2014 "),tS=a("a"),nso=o("DebertaV2Model"),sso=o(" (DeBERTa-v2 model)"),lso=l(),cp=a("li"),OK=a("strong"),iso=o("decision_transformer"),dso=o(" \u2014 "),aS=a("a"),cso=o("DecisionTransformerModel"),fso=o(" (Decision Transformer model)"),mso=l(),fp=a("li"),XK=a("strong"),gso=o("deit"),hso=o(" \u2014 "),nS=a("a"),pso=o("DeiTModel"),_so=o(" (DeiT model)"),uso=l(),mp=a("li"),VK=a("strong"),bso=o("detr"),vso=o(" \u2014 "),sS=a("a"),Tso=o("DetrModel"),Fso=o(" (DETR model)"),Cso=l(),gp=a("li"),zK=a("strong"),Mso=o("distilbert"),Eso=o(" \u2014 "),lS=a("a"),yso=o("DistilBertModel"),wso=o(" (DistilBERT model)"),Aso=l(),hp=a("li"),WK=a("strong"),Lso=o("dpr"),Bso=o(" \u2014 "),iS=a("a"),xso=o("DPRQuestionEncoder"),kso=o(" (DPR model)"),Rso=l(),pp=a("li"),QK=a("strong"),Sso=o("electra"),Pso=o(" \u2014 "),dS=a("a"),$so=o("ElectraModel"),Iso=o(" (ELECTRA model)"),Nso=l(),_p=a("li"),HK=a("strong"),Dso=o("flaubert"),jso=o(" \u2014 "),cS=a("a"),qso=o("FlaubertModel"),Gso=o(" (FlauBERT model)"),Oso=l(),up=a("li"),UK=a("strong"),Xso=o("fnet"),Vso=o(" \u2014 "),fS=a("a"),zso=o("FNetModel"),Wso=o(" (FNet model)"),Qso=l(),bp=a("li"),JK=a("strong"),Hso=o("fsmt"),Uso=o(" \u2014 "),mS=a("a"),Jso=o("FSMTModel"),Yso=o(" (FairSeq Machine-Translation model)"),Kso=l(),js=a("li"),YK=a("strong"),Zso=o("funnel"),elo=o(" \u2014 "),gS=a("a"),olo=o("FunnelModel"),rlo=o(" or "),hS=a("a"),tlo=o("FunnelBaseModel"),alo=o(" (Funnel Transformer model)"),nlo=l(),vp=a("li"),KK=a("strong"),slo=o("glpn"),llo=o(" \u2014 "),pS=a("a"),ilo=o("GLPNModel"),dlo=o(" (GLPN model)"),clo=l(),Tp=a("li"),ZK=a("strong"),flo=o("gpt2"),mlo=o(" \u2014 "),_S=a("a"),glo=o("GPT2Model"),hlo=o(" (OpenAI GPT-2 model)"),plo=l(),Fp=a("li"),eZ=a("strong"),_lo=o("gpt_neo"),ulo=o(" \u2014 "),uS=a("a"),blo=o("GPTNeoModel"),vlo=o(" (GPT Neo model)"),Tlo=l(),Cp=a("li"),oZ=a("strong"),Flo=o("gptj"),Clo=o(" \u2014 "),bS=a("a"),Mlo=o("GPTJModel"),Elo=o(" (GPT-J model)"),ylo=l(),Mp=a("li"),rZ=a("strong"),wlo=o("hubert"),Alo=o(" \u2014 "),vS=a("a"),Llo=o("HubertModel"),Blo=o(" (Hubert model)"),xlo=l(),Ep=a("li"),tZ=a("strong"),klo=o("ibert"),Rlo=o(" \u2014 "),TS=a("a"),Slo=o("IBertModel"),Plo=o(" (I-BERT model)"),$lo=l(),yp=a("li"),aZ=a("strong"),Ilo=o("imagegpt"),Nlo=o(" \u2014 "),FS=a("a"),Dlo=o("ImageGPTModel"),jlo=o(" (ImageGPT model)"),qlo=l(),wp=a("li"),nZ=a("strong"),Glo=o("layoutlm"),Olo=o(" \u2014 "),CS=a("a"),Xlo=o("LayoutLMModel"),Vlo=o(" (LayoutLM model)"),zlo=l(),Ap=a("li"),sZ=a("strong"),Wlo=o("layoutlmv2"),Qlo=o(" \u2014 "),MS=a("a"),Hlo=o("LayoutLMv2Model"),Ulo=o(" (LayoutLMv2 model)"),Jlo=l(),Lp=a("li"),lZ=a("strong"),Ylo=o("led"),Klo=o(" \u2014 "),ES=a("a"),Zlo=o("LEDModel"),eio=o(" (LED model)"),oio=l(),Bp=a("li"),iZ=a("strong"),rio=o("longformer"),tio=o(" \u2014 "),yS=a("a"),aio=o("LongformerModel"),nio=o(" (Longformer model)"),sio=l(),xp=a("li"),dZ=a("strong"),lio=o("luke"),iio=o(" \u2014 "),wS=a("a"),dio=o("LukeModel"),cio=o(" (LUKE model)"),fio=l(),kp=a("li"),cZ=a("strong"),mio=o("lxmert"),gio=o(" \u2014 "),AS=a("a"),hio=o("LxmertModel"),pio=o(" (LXMERT model)"),_io=l(),Rp=a("li"),fZ=a("strong"),uio=o("m2m_100"),bio=o(" \u2014 "),LS=a("a"),vio=o("M2M100Model"),Tio=o(" (M2M100 model)"),Fio=l(),Sp=a("li"),mZ=a("strong"),Cio=o("marian"),Mio=o(" \u2014 "),BS=a("a"),Eio=o("MarianModel"),yio=o(" (Marian model)"),wio=l(),Pp=a("li"),gZ=a("strong"),Aio=o("maskformer"),Lio=o(" \u2014 "),xS=a("a"),Bio=o("MaskFormerModel"),xio=o(" (MaskFormer model)"),kio=l(),$p=a("li"),hZ=a("strong"),Rio=o("mbart"),Sio=o(" \u2014 "),kS=a("a"),Pio=o("MBartModel"),$io=o(" (mBART model)"),Iio=l(),Ip=a("li"),pZ=a("strong"),Nio=o("megatron-bert"),Dio=o(" \u2014 "),RS=a("a"),jio=o("MegatronBertModel"),qio=o(" (MegatronBert model)"),Gio=l(),Np=a("li"),_Z=a("strong"),Oio=o("mobilebert"),Xio=o(" \u2014 "),SS=a("a"),Vio=o("MobileBertModel"),zio=o(" (MobileBERT model)"),Wio=l(),Dp=a("li"),uZ=a("strong"),Qio=o("mpnet"),Hio=o(" \u2014 "),PS=a("a"),Uio=o("MPNetModel"),Jio=o(" (MPNet model)"),Yio=l(),jp=a("li"),bZ=a("strong"),Kio=o("mt5"),Zio=o(" \u2014 "),$S=a("a"),edo=o("MT5Model"),odo=o(" (mT5 model)"),rdo=l(),qp=a("li"),vZ=a("strong"),tdo=o("nystromformer"),ado=o(" \u2014 "),IS=a("a"),ndo=o("NystromformerModel"),sdo=o(" (Nystromformer model)"),ldo=l(),Gp=a("li"),TZ=a("strong"),ido=o("openai-gpt"),ddo=o(" \u2014 "),NS=a("a"),cdo=o("OpenAIGPTModel"),fdo=o(" (OpenAI GPT model)"),mdo=l(),Op=a("li"),FZ=a("strong"),gdo=o("pegasus"),hdo=o(" \u2014 "),DS=a("a"),pdo=o("PegasusModel"),_do=o(" (Pegasus model)"),udo=l(),Xp=a("li"),CZ=a("strong"),bdo=o("perceiver"),vdo=o(" \u2014 "),jS=a("a"),Tdo=o("PerceiverModel"),Fdo=o(" (Perceiver model)"),Cdo=l(),Vp=a("li"),MZ=a("strong"),Mdo=o("plbart"),Edo=o(" \u2014 "),qS=a("a"),ydo=o("PLBartModel"),wdo=o(" (PLBart model)"),Ado=l(),zp=a("li"),EZ=a("strong"),Ldo=o("poolformer"),Bdo=o(" \u2014 "),GS=a("a"),xdo=o("PoolFormerModel"),kdo=o(" (PoolFormer model)"),Rdo=l(),Wp=a("li"),yZ=a("strong"),Sdo=o("prophetnet"),Pdo=o(" \u2014 "),OS=a("a"),$do=o("ProphetNetModel"),Ido=o(" (ProphetNet model)"),Ndo=l(),Qp=a("li"),wZ=a("strong"),Ddo=o("qdqbert"),jdo=o(" \u2014 "),XS=a("a"),qdo=o("QDQBertModel"),Gdo=o(" (QDQBert model)"),Odo=l(),Hp=a("li"),AZ=a("strong"),Xdo=o("reformer"),Vdo=o(" \u2014 "),VS=a("a"),zdo=o("ReformerModel"),Wdo=o(" (Reformer model)"),Qdo=l(),Up=a("li"),LZ=a("strong"),Hdo=o("rembert"),Udo=o(" \u2014 "),zS=a("a"),Jdo=o("RemBertModel"),Ydo=o(" (RemBERT model)"),Kdo=l(),Jp=a("li"),BZ=a("strong"),Zdo=o("resnet"),eco=o(" \u2014 "),WS=a("a"),oco=o("ResNetModel"),rco=o(" (ResNet model)"),tco=l(),Yp=a("li"),xZ=a("strong"),aco=o("retribert"),nco=o(" \u2014 "),QS=a("a"),sco=o("RetriBertModel"),lco=o(" (RetriBERT model)"),ico=l(),Kp=a("li"),kZ=a("strong"),dco=o("roberta"),cco=o(" \u2014 "),HS=a("a"),fco=o("RobertaModel"),mco=o(" (RoBERTa model)"),gco=l(),Zp=a("li"),RZ=a("strong"),hco=o("roformer"),pco=o(" \u2014 "),US=a("a"),_co=o("RoFormerModel"),uco=o(" (RoFormer model)"),bco=l(),e_=a("li"),SZ=a("strong"),vco=o("segformer"),Tco=o(" \u2014 "),JS=a("a"),Fco=o("SegformerModel"),Cco=o(" (SegFormer model)"),Mco=l(),o_=a("li"),PZ=a("strong"),Eco=o("sew"),yco=o(" \u2014 "),YS=a("a"),wco=o("SEWModel"),Aco=o(" (SEW model)"),Lco=l(),r_=a("li"),$Z=a("strong"),Bco=o("sew-d"),xco=o(" \u2014 "),KS=a("a"),kco=o("SEWDModel"),Rco=o(" (SEW-D model)"),Sco=l(),t_=a("li"),IZ=a("strong"),Pco=o("speech_to_text"),$co=o(" \u2014 "),ZS=a("a"),Ico=o("Speech2TextModel"),Nco=o(" (Speech2Text model)"),Dco=l(),a_=a("li"),NZ=a("strong"),jco=o("splinter"),qco=o(" \u2014 "),eP=a("a"),Gco=o("SplinterModel"),Oco=o(" (Splinter model)"),Xco=l(),n_=a("li"),DZ=a("strong"),Vco=o("squeezebert"),zco=o(" \u2014 "),oP=a("a"),Wco=o("SqueezeBertModel"),Qco=o(" (SqueezeBERT model)"),Hco=l(),s_=a("li"),jZ=a("strong"),Uco=o("swin"),Jco=o(" \u2014 "),rP=a("a"),Yco=o("SwinModel"),Kco=o(" (Swin model)"),Zco=l(),l_=a("li"),qZ=a("strong"),efo=o("t5"),ofo=o(" \u2014 "),tP=a("a"),rfo=o("T5Model"),tfo=o(" (T5 model)"),afo=l(),i_=a("li"),GZ=a("strong"),nfo=o("tapas"),sfo=o(" \u2014 "),aP=a("a"),lfo=o("TapasModel"),ifo=o(" (TAPAS model)"),dfo=l(),d_=a("li"),OZ=a("strong"),cfo=o("transfo-xl"),ffo=o(" \u2014 "),nP=a("a"),mfo=o("TransfoXLModel"),gfo=o(" (Transformer-XL model)"),hfo=l(),c_=a("li"),XZ=a("strong"),pfo=o("unispeech"),_fo=o(" \u2014 "),sP=a("a"),ufo=o("UniSpeechModel"),bfo=o(" (UniSpeech model)"),vfo=l(),f_=a("li"),VZ=a("strong"),Tfo=o("unispeech-sat"),Ffo=o(" \u2014 "),lP=a("a"),Cfo=o("UniSpeechSatModel"),Mfo=o(" (UniSpeechSat model)"),Efo=l(),m_=a("li"),zZ=a("strong"),yfo=o("van"),wfo=o(" \u2014 "),iP=a("a"),Afo=o("VanModel"),Lfo=o(" (VAN model)"),Bfo=l(),g_=a("li"),WZ=a("strong"),xfo=o("vilt"),kfo=o(" \u2014 "),dP=a("a"),Rfo=o("ViltModel"),Sfo=o(" (ViLT model)"),Pfo=l(),h_=a("li"),QZ=a("strong"),$fo=o("vision-text-dual-encoder"),Ifo=o(" \u2014 "),cP=a("a"),Nfo=o("VisionTextDualEncoderModel"),Dfo=o(" (VisionTextDualEncoder model)"),jfo=l(),p_=a("li"),HZ=a("strong"),qfo=o("visual_bert"),Gfo=o(" \u2014 "),fP=a("a"),Ofo=o("VisualBertModel"),Xfo=o(" (VisualBert model)"),Vfo=l(),__=a("li"),UZ=a("strong"),zfo=o("vit"),Wfo=o(" \u2014 "),mP=a("a"),Qfo=o("ViTModel"),Hfo=o(" (ViT model)"),Ufo=l(),u_=a("li"),JZ=a("strong"),Jfo=o("vit_mae"),Yfo=o(" \u2014 "),gP=a("a"),Kfo=o("ViTMAEModel"),Zfo=o(" (ViTMAE model)"),emo=l(),b_=a("li"),YZ=a("strong"),omo=o("wav2vec2"),rmo=o(" \u2014 "),hP=a("a"),tmo=o("Wav2Vec2Model"),amo=o(" (Wav2Vec2 model)"),nmo=l(),v_=a("li"),KZ=a("strong"),smo=o("wavlm"),lmo=o(" \u2014 "),pP=a("a"),imo=o("WavLMModel"),dmo=o(" (WavLM model)"),cmo=l(),T_=a("li"),ZZ=a("strong"),fmo=o("xglm"),mmo=o(" \u2014 "),_P=a("a"),gmo=o("XGLMModel"),hmo=o(" (XGLM model)"),pmo=l(),F_=a("li"),eee=a("strong"),_mo=o("xlm"),umo=o(" \u2014 "),uP=a("a"),bmo=o("XLMModel"),vmo=o(" (XLM model)"),Tmo=l(),C_=a("li"),oee=a("strong"),Fmo=o("xlm-prophetnet"),Cmo=o(" \u2014 "),bP=a("a"),Mmo=o("XLMProphetNetModel"),Emo=o(" (XLMProphetNet model)"),ymo=l(),M_=a("li"),ree=a("strong"),wmo=o("xlm-roberta"),Amo=o(" \u2014 "),vP=a("a"),Lmo=o("XLMRobertaModel"),Bmo=o(" (XLM-RoBERTa model)"),xmo=l(),E_=a("li"),tee=a("strong"),kmo=o("xlm-roberta-xl"),Rmo=o(" \u2014 "),TP=a("a"),Smo=o("XLMRobertaXLModel"),Pmo=o(" (XLM-RoBERTa-XL model)"),$mo=l(),y_=a("li"),aee=a("strong"),Imo=o("xlnet"),Nmo=o(" \u2014 "),FP=a("a"),Dmo=o("XLNetModel"),jmo=o(" (XLNet model)"),qmo=l(),w_=a("li"),nee=a("strong"),Gmo=o("yoso"),Omo=o(" \u2014 "),CP=a("a"),Xmo=o("YosoModel"),Vmo=o(" (YOSO model)"),zmo=l(),A_=a("p"),Wmo=o("The model is set in evaluation mode by default using "),see=a("code"),Qmo=o("model.eval()"),Hmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lee=a("code"),Umo=o("model.train()"),Jmo=l(),iee=a("p"),Ymo=o("Examples:"),Kmo=l(),f(QE.$$.fragment),Tke=l(),Zi=a("h2"),L_=a("a"),dee=a("span"),f(HE.$$.fragment),Zmo=l(),cee=a("span"),ego=o("AutoModelForPreTraining"),Fke=l(),Yo=a("div"),f(UE.$$.fragment),ogo=l(),ed=a("p"),rgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fee=a("code"),tgo=o("from_pretrained()"),ago=o("class method or the "),mee=a("code"),ngo=o("from_config()"),sgo=o(`class
method.`),lgo=l(),JE=a("p"),igo=o("This class cannot be instantiated directly using "),gee=a("code"),dgo=o("__init__()"),cgo=o(" (throws an error)."),fgo=l(),zr=a("div"),f(YE.$$.fragment),mgo=l(),hee=a("p"),ggo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hgo=l(),od=a("p"),pgo=o(`Note:
Loading a model from its configuration file does `),pee=a("strong"),_go=o("not"),ugo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("code"),bgo=o("from_pretrained()"),vgo=o("to load the model weights."),Tgo=l(),uee=a("p"),Fgo=o("Examples:"),Cgo=l(),f(KE.$$.fragment),Mgo=l(),De=a("div"),f(ZE.$$.fragment),Ego=l(),bee=a("p"),ygo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wgo=l(),za=a("p"),Ago=o("The model class to instantiate is selected based on the "),vee=a("code"),Lgo=o("model_type"),Bgo=o(` property of the config object (either
passed as an argument or loaded from `),Tee=a("code"),xgo=o("pretrained_model_name_or_path"),kgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fee=a("code"),Rgo=o("pretrained_model_name_or_path"),Sgo=o(":"),Pgo=l(),k=a("ul"),B_=a("li"),Cee=a("strong"),$go=o("albert"),Igo=o(" \u2014 "),MP=a("a"),Ngo=o("AlbertForPreTraining"),Dgo=o(" (ALBERT model)"),jgo=l(),x_=a("li"),Mee=a("strong"),qgo=o("bart"),Ggo=o(" \u2014 "),EP=a("a"),Ogo=o("BartForConditionalGeneration"),Xgo=o(" (BART model)"),Vgo=l(),k_=a("li"),Eee=a("strong"),zgo=o("bert"),Wgo=o(" \u2014 "),yP=a("a"),Qgo=o("BertForPreTraining"),Hgo=o(" (BERT model)"),Ugo=l(),R_=a("li"),yee=a("strong"),Jgo=o("big_bird"),Ygo=o(" \u2014 "),wP=a("a"),Kgo=o("BigBirdForPreTraining"),Zgo=o(" (BigBird model)"),eho=l(),S_=a("li"),wee=a("strong"),oho=o("camembert"),rho=o(" \u2014 "),AP=a("a"),tho=o("CamembertForMaskedLM"),aho=o(" (CamemBERT model)"),nho=l(),P_=a("li"),Aee=a("strong"),sho=o("ctrl"),lho=o(" \u2014 "),LP=a("a"),iho=o("CTRLLMHeadModel"),dho=o(" (CTRL model)"),cho=l(),$_=a("li"),Lee=a("strong"),fho=o("data2vec-text"),mho=o(" \u2014 "),BP=a("a"),gho=o("Data2VecTextForMaskedLM"),hho=o(" (Data2VecText model)"),pho=l(),I_=a("li"),Bee=a("strong"),_ho=o("deberta"),uho=o(" \u2014 "),xP=a("a"),bho=o("DebertaForMaskedLM"),vho=o(" (DeBERTa model)"),Tho=l(),N_=a("li"),xee=a("strong"),Fho=o("deberta-v2"),Cho=o(" \u2014 "),kP=a("a"),Mho=o("DebertaV2ForMaskedLM"),Eho=o(" (DeBERTa-v2 model)"),yho=l(),D_=a("li"),kee=a("strong"),who=o("distilbert"),Aho=o(" \u2014 "),RP=a("a"),Lho=o("DistilBertForMaskedLM"),Bho=o(" (DistilBERT model)"),xho=l(),j_=a("li"),Ree=a("strong"),kho=o("electra"),Rho=o(" \u2014 "),SP=a("a"),Sho=o("ElectraForPreTraining"),Pho=o(" (ELECTRA model)"),$ho=l(),q_=a("li"),See=a("strong"),Iho=o("flaubert"),Nho=o(" \u2014 "),PP=a("a"),Dho=o("FlaubertWithLMHeadModel"),jho=o(" (FlauBERT model)"),qho=l(),G_=a("li"),Pee=a("strong"),Gho=o("fnet"),Oho=o(" \u2014 "),$P=a("a"),Xho=o("FNetForPreTraining"),Vho=o(" (FNet model)"),zho=l(),O_=a("li"),$ee=a("strong"),Who=o("fsmt"),Qho=o(" \u2014 "),IP=a("a"),Hho=o("FSMTForConditionalGeneration"),Uho=o(" (FairSeq Machine-Translation model)"),Jho=l(),X_=a("li"),Iee=a("strong"),Yho=o("funnel"),Kho=o(" \u2014 "),NP=a("a"),Zho=o("FunnelForPreTraining"),epo=o(" (Funnel Transformer model)"),opo=l(),V_=a("li"),Nee=a("strong"),rpo=o("gpt2"),tpo=o(" \u2014 "),DP=a("a"),apo=o("GPT2LMHeadModel"),npo=o(" (OpenAI GPT-2 model)"),spo=l(),z_=a("li"),Dee=a("strong"),lpo=o("ibert"),ipo=o(" \u2014 "),jP=a("a"),dpo=o("IBertForMaskedLM"),cpo=o(" (I-BERT model)"),fpo=l(),W_=a("li"),jee=a("strong"),mpo=o("layoutlm"),gpo=o(" \u2014 "),qP=a("a"),hpo=o("LayoutLMForMaskedLM"),ppo=o(" (LayoutLM model)"),_po=l(),Q_=a("li"),qee=a("strong"),upo=o("longformer"),bpo=o(" \u2014 "),GP=a("a"),vpo=o("LongformerForMaskedLM"),Tpo=o(" (Longformer model)"),Fpo=l(),H_=a("li"),Gee=a("strong"),Cpo=o("lxmert"),Mpo=o(" \u2014 "),OP=a("a"),Epo=o("LxmertForPreTraining"),ypo=o(" (LXMERT model)"),wpo=l(),U_=a("li"),Oee=a("strong"),Apo=o("megatron-bert"),Lpo=o(" \u2014 "),XP=a("a"),Bpo=o("MegatronBertForPreTraining"),xpo=o(" (MegatronBert model)"),kpo=l(),J_=a("li"),Xee=a("strong"),Rpo=o("mobilebert"),Spo=o(" \u2014 "),VP=a("a"),Ppo=o("MobileBertForPreTraining"),$po=o(" (MobileBERT model)"),Ipo=l(),Y_=a("li"),Vee=a("strong"),Npo=o("mpnet"),Dpo=o(" \u2014 "),zP=a("a"),jpo=o("MPNetForMaskedLM"),qpo=o(" (MPNet model)"),Gpo=l(),K_=a("li"),zee=a("strong"),Opo=o("openai-gpt"),Xpo=o(" \u2014 "),WP=a("a"),Vpo=o("OpenAIGPTLMHeadModel"),zpo=o(" (OpenAI GPT model)"),Wpo=l(),Z_=a("li"),Wee=a("strong"),Qpo=o("retribert"),Hpo=o(" \u2014 "),QP=a("a"),Upo=o("RetriBertModel"),Jpo=o(" (RetriBERT model)"),Ypo=l(),eu=a("li"),Qee=a("strong"),Kpo=o("roberta"),Zpo=o(" \u2014 "),HP=a("a"),e_o=o("RobertaForMaskedLM"),o_o=o(" (RoBERTa model)"),r_o=l(),ou=a("li"),Hee=a("strong"),t_o=o("squeezebert"),a_o=o(" \u2014 "),UP=a("a"),n_o=o("SqueezeBertForMaskedLM"),s_o=o(" (SqueezeBERT model)"),l_o=l(),ru=a("li"),Uee=a("strong"),i_o=o("t5"),d_o=o(" \u2014 "),JP=a("a"),c_o=o("T5ForConditionalGeneration"),f_o=o(" (T5 model)"),m_o=l(),tu=a("li"),Jee=a("strong"),g_o=o("tapas"),h_o=o(" \u2014 "),YP=a("a"),p_o=o("TapasForMaskedLM"),__o=o(" (TAPAS model)"),u_o=l(),au=a("li"),Yee=a("strong"),b_o=o("transfo-xl"),v_o=o(" \u2014 "),KP=a("a"),T_o=o("TransfoXLLMHeadModel"),F_o=o(" (Transformer-XL model)"),C_o=l(),nu=a("li"),Kee=a("strong"),M_o=o("unispeech"),E_o=o(" \u2014 "),ZP=a("a"),y_o=o("UniSpeechForPreTraining"),w_o=o(" (UniSpeech model)"),A_o=l(),su=a("li"),Zee=a("strong"),L_o=o("unispeech-sat"),B_o=o(" \u2014 "),e$=a("a"),x_o=o("UniSpeechSatForPreTraining"),k_o=o(" (UniSpeechSat model)"),R_o=l(),lu=a("li"),eoe=a("strong"),S_o=o("visual_bert"),P_o=o(" \u2014 "),o$=a("a"),$_o=o("VisualBertForPreTraining"),I_o=o(" (VisualBert model)"),N_o=l(),iu=a("li"),ooe=a("strong"),D_o=o("vit_mae"),j_o=o(" \u2014 "),r$=a("a"),q_o=o("ViTMAEForPreTraining"),G_o=o(" (ViTMAE model)"),O_o=l(),du=a("li"),roe=a("strong"),X_o=o("wav2vec2"),V_o=o(" \u2014 "),t$=a("a"),z_o=o("Wav2Vec2ForPreTraining"),W_o=o(" (Wav2Vec2 model)"),Q_o=l(),cu=a("li"),toe=a("strong"),H_o=o("xlm"),U_o=o(" \u2014 "),a$=a("a"),J_o=o("XLMWithLMHeadModel"),Y_o=o(" (XLM model)"),K_o=l(),fu=a("li"),aoe=a("strong"),Z_o=o("xlm-roberta"),euo=o(" \u2014 "),n$=a("a"),ouo=o("XLMRobertaForMaskedLM"),ruo=o(" (XLM-RoBERTa model)"),tuo=l(),mu=a("li"),noe=a("strong"),auo=o("xlm-roberta-xl"),nuo=o(" \u2014 "),s$=a("a"),suo=o("XLMRobertaXLForMaskedLM"),luo=o(" (XLM-RoBERTa-XL model)"),iuo=l(),gu=a("li"),soe=a("strong"),duo=o("xlnet"),cuo=o(" \u2014 "),l$=a("a"),fuo=o("XLNetLMHeadModel"),muo=o(" (XLNet model)"),guo=l(),hu=a("p"),huo=o("The model is set in evaluation mode by default using "),loe=a("code"),puo=o("model.eval()"),_uo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ioe=a("code"),uuo=o("model.train()"),buo=l(),doe=a("p"),vuo=o("Examples:"),Tuo=l(),f(e3.$$.fragment),Cke=l(),rd=a("h2"),pu=a("a"),coe=a("span"),f(o3.$$.fragment),Fuo=l(),foe=a("span"),Cuo=o("AutoModelForCausalLM"),Mke=l(),Ko=a("div"),f(r3.$$.fragment),Muo=l(),td=a("p"),Euo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),moe=a("code"),yuo=o("from_pretrained()"),wuo=o("class method or the "),goe=a("code"),Auo=o("from_config()"),Luo=o(`class
method.`),Buo=l(),t3=a("p"),xuo=o("This class cannot be instantiated directly using "),hoe=a("code"),kuo=o("__init__()"),Ruo=o(" (throws an error)."),Suo=l(),Wr=a("div"),f(a3.$$.fragment),Puo=l(),poe=a("p"),$uo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Iuo=l(),ad=a("p"),Nuo=o(`Note:
Loading a model from its configuration file does `),_oe=a("strong"),Duo=o("not"),juo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=a("code"),quo=o("from_pretrained()"),Guo=o("to load the model weights."),Ouo=l(),boe=a("p"),Xuo=o("Examples:"),Vuo=l(),f(n3.$$.fragment),zuo=l(),je=a("div"),f(s3.$$.fragment),Wuo=l(),voe=a("p"),Quo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Huo=l(),Wa=a("p"),Uuo=o("The model class to instantiate is selected based on the "),Toe=a("code"),Juo=o("model_type"),Yuo=o(` property of the config object (either
passed as an argument or loaded from `),Foe=a("code"),Kuo=o("pretrained_model_name_or_path"),Zuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Coe=a("code"),e1o=o("pretrained_model_name_or_path"),o1o=o(":"),r1o=l(),$=a("ul"),_u=a("li"),Moe=a("strong"),t1o=o("bart"),a1o=o(" \u2014 "),i$=a("a"),n1o=o("BartForCausalLM"),s1o=o(" (BART model)"),l1o=l(),uu=a("li"),Eoe=a("strong"),i1o=o("bert"),d1o=o(" \u2014 "),d$=a("a"),c1o=o("BertLMHeadModel"),f1o=o(" (BERT model)"),m1o=l(),bu=a("li"),yoe=a("strong"),g1o=o("bert-generation"),h1o=o(" \u2014 "),c$=a("a"),p1o=o("BertGenerationDecoder"),_1o=o(" (Bert Generation model)"),u1o=l(),vu=a("li"),woe=a("strong"),b1o=o("big_bird"),v1o=o(" \u2014 "),f$=a("a"),T1o=o("BigBirdForCausalLM"),F1o=o(" (BigBird model)"),C1o=l(),Tu=a("li"),Aoe=a("strong"),M1o=o("bigbird_pegasus"),E1o=o(" \u2014 "),m$=a("a"),y1o=o("BigBirdPegasusForCausalLM"),w1o=o(" (BigBirdPegasus model)"),A1o=l(),Fu=a("li"),Loe=a("strong"),L1o=o("blenderbot"),B1o=o(" \u2014 "),g$=a("a"),x1o=o("BlenderbotForCausalLM"),k1o=o(" (Blenderbot model)"),R1o=l(),Cu=a("li"),Boe=a("strong"),S1o=o("blenderbot-small"),P1o=o(" \u2014 "),h$=a("a"),$1o=o("BlenderbotSmallForCausalLM"),I1o=o(" (BlenderbotSmall model)"),N1o=l(),Mu=a("li"),xoe=a("strong"),D1o=o("camembert"),j1o=o(" \u2014 "),p$=a("a"),q1o=o("CamembertForCausalLM"),G1o=o(" (CamemBERT model)"),O1o=l(),Eu=a("li"),koe=a("strong"),X1o=o("ctrl"),V1o=o(" \u2014 "),_$=a("a"),z1o=o("CTRLLMHeadModel"),W1o=o(" (CTRL model)"),Q1o=l(),yu=a("li"),Roe=a("strong"),H1o=o("data2vec-text"),U1o=o(" \u2014 "),u$=a("a"),J1o=o("Data2VecTextForCausalLM"),Y1o=o(" (Data2VecText model)"),K1o=l(),wu=a("li"),Soe=a("strong"),Z1o=o("electra"),ebo=o(" \u2014 "),b$=a("a"),obo=o("ElectraForCausalLM"),rbo=o(" (ELECTRA model)"),tbo=l(),Au=a("li"),Poe=a("strong"),abo=o("gpt2"),nbo=o(" \u2014 "),v$=a("a"),sbo=o("GPT2LMHeadModel"),lbo=o(" (OpenAI GPT-2 model)"),ibo=l(),Lu=a("li"),$oe=a("strong"),dbo=o("gpt_neo"),cbo=o(" \u2014 "),T$=a("a"),fbo=o("GPTNeoForCausalLM"),mbo=o(" (GPT Neo model)"),gbo=l(),Bu=a("li"),Ioe=a("strong"),hbo=o("gptj"),pbo=o(" \u2014 "),F$=a("a"),_bo=o("GPTJForCausalLM"),ubo=o(" (GPT-J model)"),bbo=l(),xu=a("li"),Noe=a("strong"),vbo=o("marian"),Tbo=o(" \u2014 "),C$=a("a"),Fbo=o("MarianForCausalLM"),Cbo=o(" (Marian model)"),Mbo=l(),ku=a("li"),Doe=a("strong"),Ebo=o("mbart"),ybo=o(" \u2014 "),M$=a("a"),wbo=o("MBartForCausalLM"),Abo=o(" (mBART model)"),Lbo=l(),Ru=a("li"),joe=a("strong"),Bbo=o("megatron-bert"),xbo=o(" \u2014 "),E$=a("a"),kbo=o("MegatronBertForCausalLM"),Rbo=o(" (MegatronBert model)"),Sbo=l(),Su=a("li"),qoe=a("strong"),Pbo=o("openai-gpt"),$bo=o(" \u2014 "),y$=a("a"),Ibo=o("OpenAIGPTLMHeadModel"),Nbo=o(" (OpenAI GPT model)"),Dbo=l(),Pu=a("li"),Goe=a("strong"),jbo=o("pegasus"),qbo=o(" \u2014 "),w$=a("a"),Gbo=o("PegasusForCausalLM"),Obo=o(" (Pegasus model)"),Xbo=l(),$u=a("li"),Ooe=a("strong"),Vbo=o("plbart"),zbo=o(" \u2014 "),A$=a("a"),Wbo=o("PLBartForCausalLM"),Qbo=o(" (PLBart model)"),Hbo=l(),Iu=a("li"),Xoe=a("strong"),Ubo=o("prophetnet"),Jbo=o(" \u2014 "),L$=a("a"),Ybo=o("ProphetNetForCausalLM"),Kbo=o(" (ProphetNet model)"),Zbo=l(),Nu=a("li"),Voe=a("strong"),e5o=o("qdqbert"),o5o=o(" \u2014 "),B$=a("a"),r5o=o("QDQBertLMHeadModel"),t5o=o(" (QDQBert model)"),a5o=l(),Du=a("li"),zoe=a("strong"),n5o=o("reformer"),s5o=o(" \u2014 "),x$=a("a"),l5o=o("ReformerModelWithLMHead"),i5o=o(" (Reformer model)"),d5o=l(),ju=a("li"),Woe=a("strong"),c5o=o("rembert"),f5o=o(" \u2014 "),k$=a("a"),m5o=o("RemBertForCausalLM"),g5o=o(" (RemBERT model)"),h5o=l(),qu=a("li"),Qoe=a("strong"),p5o=o("roberta"),_5o=o(" \u2014 "),R$=a("a"),u5o=o("RobertaForCausalLM"),b5o=o(" (RoBERTa model)"),v5o=l(),Gu=a("li"),Hoe=a("strong"),T5o=o("roformer"),F5o=o(" \u2014 "),S$=a("a"),C5o=o("RoFormerForCausalLM"),M5o=o(" (RoFormer model)"),E5o=l(),Ou=a("li"),Uoe=a("strong"),y5o=o("speech_to_text_2"),w5o=o(" \u2014 "),P$=a("a"),A5o=o("Speech2Text2ForCausalLM"),L5o=o(" (Speech2Text2 model)"),B5o=l(),Xu=a("li"),Joe=a("strong"),x5o=o("transfo-xl"),k5o=o(" \u2014 "),$$=a("a"),R5o=o("TransfoXLLMHeadModel"),S5o=o(" (Transformer-XL model)"),P5o=l(),Vu=a("li"),Yoe=a("strong"),$5o=o("trocr"),I5o=o(" \u2014 "),I$=a("a"),N5o=o("TrOCRForCausalLM"),D5o=o(" (TrOCR model)"),j5o=l(),zu=a("li"),Koe=a("strong"),q5o=o("xglm"),G5o=o(" \u2014 "),N$=a("a"),O5o=o("XGLMForCausalLM"),X5o=o(" (XGLM model)"),V5o=l(),Wu=a("li"),Zoe=a("strong"),z5o=o("xlm"),W5o=o(" \u2014 "),D$=a("a"),Q5o=o("XLMWithLMHeadModel"),H5o=o(" (XLM model)"),U5o=l(),Qu=a("li"),ere=a("strong"),J5o=o("xlm-prophetnet"),Y5o=o(" \u2014 "),j$=a("a"),K5o=o("XLMProphetNetForCausalLM"),Z5o=o(" (XLMProphetNet model)"),e2o=l(),Hu=a("li"),ore=a("strong"),o2o=o("xlm-roberta"),r2o=o(" \u2014 "),q$=a("a"),t2o=o("XLMRobertaForCausalLM"),a2o=o(" (XLM-RoBERTa model)"),n2o=l(),Uu=a("li"),rre=a("strong"),s2o=o("xlm-roberta-xl"),l2o=o(" \u2014 "),G$=a("a"),i2o=o("XLMRobertaXLForCausalLM"),d2o=o(" (XLM-RoBERTa-XL model)"),c2o=l(),Ju=a("li"),tre=a("strong"),f2o=o("xlnet"),m2o=o(" \u2014 "),O$=a("a"),g2o=o("XLNetLMHeadModel"),h2o=o(" (XLNet model)"),p2o=l(),Yu=a("p"),_2o=o("The model is set in evaluation mode by default using "),are=a("code"),u2o=o("model.eval()"),b2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nre=a("code"),v2o=o("model.train()"),T2o=l(),sre=a("p"),F2o=o("Examples:"),C2o=l(),f(l3.$$.fragment),Eke=l(),nd=a("h2"),Ku=a("a"),lre=a("span"),f(i3.$$.fragment),M2o=l(),ire=a("span"),E2o=o("AutoModelForMaskedLM"),yke=l(),Zo=a("div"),f(d3.$$.fragment),y2o=l(),sd=a("p"),w2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dre=a("code"),A2o=o("from_pretrained()"),L2o=o("class method or the "),cre=a("code"),B2o=o("from_config()"),x2o=o(`class
method.`),k2o=l(),c3=a("p"),R2o=o("This class cannot be instantiated directly using "),fre=a("code"),S2o=o("__init__()"),P2o=o(" (throws an error)."),$2o=l(),Qr=a("div"),f(f3.$$.fragment),I2o=l(),mre=a("p"),N2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D2o=l(),ld=a("p"),j2o=o(`Note:
Loading a model from its configuration file does `),gre=a("strong"),q2o=o("not"),G2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hre=a("code"),O2o=o("from_pretrained()"),X2o=o("to load the model weights."),V2o=l(),pre=a("p"),z2o=o("Examples:"),W2o=l(),f(m3.$$.fragment),Q2o=l(),qe=a("div"),f(g3.$$.fragment),H2o=l(),_re=a("p"),U2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),J2o=l(),Qa=a("p"),Y2o=o("The model class to instantiate is selected based on the "),ure=a("code"),K2o=o("model_type"),Z2o=o(` property of the config object (either
passed as an argument or loaded from `),bre=a("code"),evo=o("pretrained_model_name_or_path"),ovo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vre=a("code"),rvo=o("pretrained_model_name_or_path"),tvo=o(":"),avo=l(),I=a("ul"),Zu=a("li"),Tre=a("strong"),nvo=o("albert"),svo=o(" \u2014 "),X$=a("a"),lvo=o("AlbertForMaskedLM"),ivo=o(" (ALBERT model)"),dvo=l(),e1=a("li"),Fre=a("strong"),cvo=o("bart"),fvo=o(" \u2014 "),V$=a("a"),mvo=o("BartForConditionalGeneration"),gvo=o(" (BART model)"),hvo=l(),o1=a("li"),Cre=a("strong"),pvo=o("bert"),_vo=o(" \u2014 "),z$=a("a"),uvo=o("BertForMaskedLM"),bvo=o(" (BERT model)"),vvo=l(),r1=a("li"),Mre=a("strong"),Tvo=o("big_bird"),Fvo=o(" \u2014 "),W$=a("a"),Cvo=o("BigBirdForMaskedLM"),Mvo=o(" (BigBird model)"),Evo=l(),t1=a("li"),Ere=a("strong"),yvo=o("camembert"),wvo=o(" \u2014 "),Q$=a("a"),Avo=o("CamembertForMaskedLM"),Lvo=o(" (CamemBERT model)"),Bvo=l(),a1=a("li"),yre=a("strong"),xvo=o("convbert"),kvo=o(" \u2014 "),H$=a("a"),Rvo=o("ConvBertForMaskedLM"),Svo=o(" (ConvBERT model)"),Pvo=l(),n1=a("li"),wre=a("strong"),$vo=o("data2vec-text"),Ivo=o(" \u2014 "),U$=a("a"),Nvo=o("Data2VecTextForMaskedLM"),Dvo=o(" (Data2VecText model)"),jvo=l(),s1=a("li"),Are=a("strong"),qvo=o("deberta"),Gvo=o(" \u2014 "),J$=a("a"),Ovo=o("DebertaForMaskedLM"),Xvo=o(" (DeBERTa model)"),Vvo=l(),l1=a("li"),Lre=a("strong"),zvo=o("deberta-v2"),Wvo=o(" \u2014 "),Y$=a("a"),Qvo=o("DebertaV2ForMaskedLM"),Hvo=o(" (DeBERTa-v2 model)"),Uvo=l(),i1=a("li"),Bre=a("strong"),Jvo=o("distilbert"),Yvo=o(" \u2014 "),K$=a("a"),Kvo=o("DistilBertForMaskedLM"),Zvo=o(" (DistilBERT model)"),eTo=l(),d1=a("li"),xre=a("strong"),oTo=o("electra"),rTo=o(" \u2014 "),Z$=a("a"),tTo=o("ElectraForMaskedLM"),aTo=o(" (ELECTRA model)"),nTo=l(),c1=a("li"),kre=a("strong"),sTo=o("flaubert"),lTo=o(" \u2014 "),eI=a("a"),iTo=o("FlaubertWithLMHeadModel"),dTo=o(" (FlauBERT model)"),cTo=l(),f1=a("li"),Rre=a("strong"),fTo=o("fnet"),mTo=o(" \u2014 "),oI=a("a"),gTo=o("FNetForMaskedLM"),hTo=o(" (FNet model)"),pTo=l(),m1=a("li"),Sre=a("strong"),_To=o("funnel"),uTo=o(" \u2014 "),rI=a("a"),bTo=o("FunnelForMaskedLM"),vTo=o(" (Funnel Transformer model)"),TTo=l(),g1=a("li"),Pre=a("strong"),FTo=o("ibert"),CTo=o(" \u2014 "),tI=a("a"),MTo=o("IBertForMaskedLM"),ETo=o(" (I-BERT model)"),yTo=l(),h1=a("li"),$re=a("strong"),wTo=o("layoutlm"),ATo=o(" \u2014 "),aI=a("a"),LTo=o("LayoutLMForMaskedLM"),BTo=o(" (LayoutLM model)"),xTo=l(),p1=a("li"),Ire=a("strong"),kTo=o("longformer"),RTo=o(" \u2014 "),nI=a("a"),STo=o("LongformerForMaskedLM"),PTo=o(" (Longformer model)"),$To=l(),_1=a("li"),Nre=a("strong"),ITo=o("mbart"),NTo=o(" \u2014 "),sI=a("a"),DTo=o("MBartForConditionalGeneration"),jTo=o(" (mBART model)"),qTo=l(),u1=a("li"),Dre=a("strong"),GTo=o("megatron-bert"),OTo=o(" \u2014 "),lI=a("a"),XTo=o("MegatronBertForMaskedLM"),VTo=o(" (MegatronBert model)"),zTo=l(),b1=a("li"),jre=a("strong"),WTo=o("mobilebert"),QTo=o(" \u2014 "),iI=a("a"),HTo=o("MobileBertForMaskedLM"),UTo=o(" (MobileBERT model)"),JTo=l(),v1=a("li"),qre=a("strong"),YTo=o("mpnet"),KTo=o(" \u2014 "),dI=a("a"),ZTo=o("MPNetForMaskedLM"),e7o=o(" (MPNet model)"),o7o=l(),T1=a("li"),Gre=a("strong"),r7o=o("nystromformer"),t7o=o(" \u2014 "),cI=a("a"),a7o=o("NystromformerForMaskedLM"),n7o=o(" (Nystromformer model)"),s7o=l(),F1=a("li"),Ore=a("strong"),l7o=o("perceiver"),i7o=o(" \u2014 "),fI=a("a"),d7o=o("PerceiverForMaskedLM"),c7o=o(" (Perceiver model)"),f7o=l(),C1=a("li"),Xre=a("strong"),m7o=o("qdqbert"),g7o=o(" \u2014 "),mI=a("a"),h7o=o("QDQBertForMaskedLM"),p7o=o(" (QDQBert model)"),_7o=l(),M1=a("li"),Vre=a("strong"),u7o=o("reformer"),b7o=o(" \u2014 "),gI=a("a"),v7o=o("ReformerForMaskedLM"),T7o=o(" (Reformer model)"),F7o=l(),E1=a("li"),zre=a("strong"),C7o=o("rembert"),M7o=o(" \u2014 "),hI=a("a"),E7o=o("RemBertForMaskedLM"),y7o=o(" (RemBERT model)"),w7o=l(),y1=a("li"),Wre=a("strong"),A7o=o("roberta"),L7o=o(" \u2014 "),pI=a("a"),B7o=o("RobertaForMaskedLM"),x7o=o(" (RoBERTa model)"),k7o=l(),w1=a("li"),Qre=a("strong"),R7o=o("roformer"),S7o=o(" \u2014 "),_I=a("a"),P7o=o("RoFormerForMaskedLM"),$7o=o(" (RoFormer model)"),I7o=l(),A1=a("li"),Hre=a("strong"),N7o=o("squeezebert"),D7o=o(" \u2014 "),uI=a("a"),j7o=o("SqueezeBertForMaskedLM"),q7o=o(" (SqueezeBERT model)"),G7o=l(),L1=a("li"),Ure=a("strong"),O7o=o("tapas"),X7o=o(" \u2014 "),bI=a("a"),V7o=o("TapasForMaskedLM"),z7o=o(" (TAPAS model)"),W7o=l(),B1=a("li"),Jre=a("strong"),Q7o=o("wav2vec2"),H7o=o(" \u2014 "),Yre=a("code"),U7o=o("Wav2Vec2ForMaskedLM"),J7o=o("(Wav2Vec2 model)"),Y7o=l(),x1=a("li"),Kre=a("strong"),K7o=o("xlm"),Z7o=o(" \u2014 "),vI=a("a"),e8o=o("XLMWithLMHeadModel"),o8o=o(" (XLM model)"),r8o=l(),k1=a("li"),Zre=a("strong"),t8o=o("xlm-roberta"),a8o=o(" \u2014 "),TI=a("a"),n8o=o("XLMRobertaForMaskedLM"),s8o=o(" (XLM-RoBERTa model)"),l8o=l(),R1=a("li"),ete=a("strong"),i8o=o("xlm-roberta-xl"),d8o=o(" \u2014 "),FI=a("a"),c8o=o("XLMRobertaXLForMaskedLM"),f8o=o(" (XLM-RoBERTa-XL model)"),m8o=l(),S1=a("li"),ote=a("strong"),g8o=o("yoso"),h8o=o(" \u2014 "),CI=a("a"),p8o=o("YosoForMaskedLM"),_8o=o(" (YOSO model)"),u8o=l(),P1=a("p"),b8o=o("The model is set in evaluation mode by default using "),rte=a("code"),v8o=o("model.eval()"),T8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tte=a("code"),F8o=o("model.train()"),C8o=l(),ate=a("p"),M8o=o("Examples:"),E8o=l(),f(h3.$$.fragment),wke=l(),id=a("h2"),$1=a("a"),nte=a("span"),f(p3.$$.fragment),y8o=l(),ste=a("span"),w8o=o("AutoModelForSeq2SeqLM"),Ake=l(),er=a("div"),f(_3.$$.fragment),A8o=l(),dd=a("p"),L8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lte=a("code"),B8o=o("from_pretrained()"),x8o=o("class method or the "),ite=a("code"),k8o=o("from_config()"),R8o=o(`class
method.`),S8o=l(),u3=a("p"),P8o=o("This class cannot be instantiated directly using "),dte=a("code"),$8o=o("__init__()"),I8o=o(" (throws an error)."),N8o=l(),Hr=a("div"),f(b3.$$.fragment),D8o=l(),cte=a("p"),j8o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),q8o=l(),cd=a("p"),G8o=o(`Note:
Loading a model from its configuration file does `),fte=a("strong"),O8o=o("not"),X8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=a("code"),V8o=o("from_pretrained()"),z8o=o("to load the model weights."),W8o=l(),gte=a("p"),Q8o=o("Examples:"),H8o=l(),f(v3.$$.fragment),U8o=l(),Ge=a("div"),f(T3.$$.fragment),J8o=l(),hte=a("p"),Y8o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),K8o=l(),Ha=a("p"),Z8o=o("The model class to instantiate is selected based on the "),pte=a("code"),eFo=o("model_type"),oFo=o(` property of the config object (either
passed as an argument or loaded from `),_te=a("code"),rFo=o("pretrained_model_name_or_path"),tFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=a("code"),aFo=o("pretrained_model_name_or_path"),nFo=o(":"),sFo=l(),se=a("ul"),I1=a("li"),bte=a("strong"),lFo=o("bart"),iFo=o(" \u2014 "),MI=a("a"),dFo=o("BartForConditionalGeneration"),cFo=o(" (BART model)"),fFo=l(),N1=a("li"),vte=a("strong"),mFo=o("bigbird_pegasus"),gFo=o(" \u2014 "),EI=a("a"),hFo=o("BigBirdPegasusForConditionalGeneration"),pFo=o(" (BigBirdPegasus model)"),_Fo=l(),D1=a("li"),Tte=a("strong"),uFo=o("blenderbot"),bFo=o(" \u2014 "),yI=a("a"),vFo=o("BlenderbotForConditionalGeneration"),TFo=o(" (Blenderbot model)"),FFo=l(),j1=a("li"),Fte=a("strong"),CFo=o("blenderbot-small"),MFo=o(" \u2014 "),wI=a("a"),EFo=o("BlenderbotSmallForConditionalGeneration"),yFo=o(" (BlenderbotSmall model)"),wFo=l(),q1=a("li"),Cte=a("strong"),AFo=o("encoder-decoder"),LFo=o(" \u2014 "),AI=a("a"),BFo=o("EncoderDecoderModel"),xFo=o(" (Encoder decoder model)"),kFo=l(),G1=a("li"),Mte=a("strong"),RFo=o("fsmt"),SFo=o(" \u2014 "),LI=a("a"),PFo=o("FSMTForConditionalGeneration"),$Fo=o(" (FairSeq Machine-Translation model)"),IFo=l(),O1=a("li"),Ete=a("strong"),NFo=o("led"),DFo=o(" \u2014 "),BI=a("a"),jFo=o("LEDForConditionalGeneration"),qFo=o(" (LED model)"),GFo=l(),X1=a("li"),yte=a("strong"),OFo=o("m2m_100"),XFo=o(" \u2014 "),xI=a("a"),VFo=o("M2M100ForConditionalGeneration"),zFo=o(" (M2M100 model)"),WFo=l(),V1=a("li"),wte=a("strong"),QFo=o("marian"),HFo=o(" \u2014 "),kI=a("a"),UFo=o("MarianMTModel"),JFo=o(" (Marian model)"),YFo=l(),z1=a("li"),Ate=a("strong"),KFo=o("mbart"),ZFo=o(" \u2014 "),RI=a("a"),eCo=o("MBartForConditionalGeneration"),oCo=o(" (mBART model)"),rCo=l(),W1=a("li"),Lte=a("strong"),tCo=o("mt5"),aCo=o(" \u2014 "),SI=a("a"),nCo=o("MT5ForConditionalGeneration"),sCo=o(" (mT5 model)"),lCo=l(),Q1=a("li"),Bte=a("strong"),iCo=o("pegasus"),dCo=o(" \u2014 "),PI=a("a"),cCo=o("PegasusForConditionalGeneration"),fCo=o(" (Pegasus model)"),mCo=l(),H1=a("li"),xte=a("strong"),gCo=o("plbart"),hCo=o(" \u2014 "),$I=a("a"),pCo=o("PLBartForConditionalGeneration"),_Co=o(" (PLBart model)"),uCo=l(),U1=a("li"),kte=a("strong"),bCo=o("prophetnet"),vCo=o(" \u2014 "),II=a("a"),TCo=o("ProphetNetForConditionalGeneration"),FCo=o(" (ProphetNet model)"),CCo=l(),J1=a("li"),Rte=a("strong"),MCo=o("t5"),ECo=o(" \u2014 "),NI=a("a"),yCo=o("T5ForConditionalGeneration"),wCo=o(" (T5 model)"),ACo=l(),Y1=a("li"),Ste=a("strong"),LCo=o("xlm-prophetnet"),BCo=o(" \u2014 "),DI=a("a"),xCo=o("XLMProphetNetForConditionalGeneration"),kCo=o(" (XLMProphetNet model)"),RCo=l(),K1=a("p"),SCo=o("The model is set in evaluation mode by default using "),Pte=a("code"),PCo=o("model.eval()"),$Co=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=a("code"),ICo=o("model.train()"),NCo=l(),Ite=a("p"),DCo=o("Examples:"),jCo=l(),f(F3.$$.fragment),Lke=l(),fd=a("h2"),Z1=a("a"),Nte=a("span"),f(C3.$$.fragment),qCo=l(),Dte=a("span"),GCo=o("AutoModelForSequenceClassification"),Bke=l(),or=a("div"),f(M3.$$.fragment),OCo=l(),md=a("p"),XCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jte=a("code"),VCo=o("from_pretrained()"),zCo=o("class method or the "),qte=a("code"),WCo=o("from_config()"),QCo=o(`class
method.`),HCo=l(),E3=a("p"),UCo=o("This class cannot be instantiated directly using "),Gte=a("code"),JCo=o("__init__()"),YCo=o(" (throws an error)."),KCo=l(),Ur=a("div"),f(y3.$$.fragment),ZCo=l(),Ote=a("p"),eMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),oMo=l(),gd=a("p"),rMo=o(`Note:
Loading a model from its configuration file does `),Xte=a("strong"),tMo=o("not"),aMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vte=a("code"),nMo=o("from_pretrained()"),sMo=o("to load the model weights."),lMo=l(),zte=a("p"),iMo=o("Examples:"),dMo=l(),f(w3.$$.fragment),cMo=l(),Oe=a("div"),f(A3.$$.fragment),fMo=l(),Wte=a("p"),mMo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gMo=l(),Ua=a("p"),hMo=o("The model class to instantiate is selected based on the "),Qte=a("code"),pMo=o("model_type"),_Mo=o(` property of the config object (either
passed as an argument or loaded from `),Hte=a("code"),uMo=o("pretrained_model_name_or_path"),bMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ute=a("code"),vMo=o("pretrained_model_name_or_path"),TMo=o(":"),FMo=l(),A=a("ul"),eb=a("li"),Jte=a("strong"),CMo=o("albert"),MMo=o(" \u2014 "),jI=a("a"),EMo=o("AlbertForSequenceClassification"),yMo=o(" (ALBERT model)"),wMo=l(),ob=a("li"),Yte=a("strong"),AMo=o("bart"),LMo=o(" \u2014 "),qI=a("a"),BMo=o("BartForSequenceClassification"),xMo=o(" (BART model)"),kMo=l(),rb=a("li"),Kte=a("strong"),RMo=o("bert"),SMo=o(" \u2014 "),GI=a("a"),PMo=o("BertForSequenceClassification"),$Mo=o(" (BERT model)"),IMo=l(),tb=a("li"),Zte=a("strong"),NMo=o("big_bird"),DMo=o(" \u2014 "),OI=a("a"),jMo=o("BigBirdForSequenceClassification"),qMo=o(" (BigBird model)"),GMo=l(),ab=a("li"),eae=a("strong"),OMo=o("bigbird_pegasus"),XMo=o(" \u2014 "),XI=a("a"),VMo=o("BigBirdPegasusForSequenceClassification"),zMo=o(" (BigBirdPegasus model)"),WMo=l(),nb=a("li"),oae=a("strong"),QMo=o("camembert"),HMo=o(" \u2014 "),VI=a("a"),UMo=o("CamembertForSequenceClassification"),JMo=o(" (CamemBERT model)"),YMo=l(),sb=a("li"),rae=a("strong"),KMo=o("canine"),ZMo=o(" \u2014 "),zI=a("a"),e4o=o("CanineForSequenceClassification"),o4o=o(" (Canine model)"),r4o=l(),lb=a("li"),tae=a("strong"),t4o=o("convbert"),a4o=o(" \u2014 "),WI=a("a"),n4o=o("ConvBertForSequenceClassification"),s4o=o(" (ConvBERT model)"),l4o=l(),ib=a("li"),aae=a("strong"),i4o=o("ctrl"),d4o=o(" \u2014 "),QI=a("a"),c4o=o("CTRLForSequenceClassification"),f4o=o(" (CTRL model)"),m4o=l(),db=a("li"),nae=a("strong"),g4o=o("data2vec-text"),h4o=o(" \u2014 "),HI=a("a"),p4o=o("Data2VecTextForSequenceClassification"),_4o=o(" (Data2VecText model)"),u4o=l(),cb=a("li"),sae=a("strong"),b4o=o("deberta"),v4o=o(" \u2014 "),UI=a("a"),T4o=o("DebertaForSequenceClassification"),F4o=o(" (DeBERTa model)"),C4o=l(),fb=a("li"),lae=a("strong"),M4o=o("deberta-v2"),E4o=o(" \u2014 "),JI=a("a"),y4o=o("DebertaV2ForSequenceClassification"),w4o=o(" (DeBERTa-v2 model)"),A4o=l(),mb=a("li"),iae=a("strong"),L4o=o("distilbert"),B4o=o(" \u2014 "),YI=a("a"),x4o=o("DistilBertForSequenceClassification"),k4o=o(" (DistilBERT model)"),R4o=l(),gb=a("li"),dae=a("strong"),S4o=o("electra"),P4o=o(" \u2014 "),KI=a("a"),$4o=o("ElectraForSequenceClassification"),I4o=o(" (ELECTRA model)"),N4o=l(),hb=a("li"),cae=a("strong"),D4o=o("flaubert"),j4o=o(" \u2014 "),ZI=a("a"),q4o=o("FlaubertForSequenceClassification"),G4o=o(" (FlauBERT model)"),O4o=l(),pb=a("li"),fae=a("strong"),X4o=o("fnet"),V4o=o(" \u2014 "),eN=a("a"),z4o=o("FNetForSequenceClassification"),W4o=o(" (FNet model)"),Q4o=l(),_b=a("li"),mae=a("strong"),H4o=o("funnel"),U4o=o(" \u2014 "),oN=a("a"),J4o=o("FunnelForSequenceClassification"),Y4o=o(" (Funnel Transformer model)"),K4o=l(),ub=a("li"),gae=a("strong"),Z4o=o("gpt2"),eEo=o(" \u2014 "),rN=a("a"),oEo=o("GPT2ForSequenceClassification"),rEo=o(" (OpenAI GPT-2 model)"),tEo=l(),bb=a("li"),hae=a("strong"),aEo=o("gpt_neo"),nEo=o(" \u2014 "),tN=a("a"),sEo=o("GPTNeoForSequenceClassification"),lEo=o(" (GPT Neo model)"),iEo=l(),vb=a("li"),pae=a("strong"),dEo=o("gptj"),cEo=o(" \u2014 "),aN=a("a"),fEo=o("GPTJForSequenceClassification"),mEo=o(" (GPT-J model)"),gEo=l(),Tb=a("li"),_ae=a("strong"),hEo=o("ibert"),pEo=o(" \u2014 "),nN=a("a"),_Eo=o("IBertForSequenceClassification"),uEo=o(" (I-BERT model)"),bEo=l(),Fb=a("li"),uae=a("strong"),vEo=o("layoutlm"),TEo=o(" \u2014 "),sN=a("a"),FEo=o("LayoutLMForSequenceClassification"),CEo=o(" (LayoutLM model)"),MEo=l(),Cb=a("li"),bae=a("strong"),EEo=o("layoutlmv2"),yEo=o(" \u2014 "),lN=a("a"),wEo=o("LayoutLMv2ForSequenceClassification"),AEo=o(" (LayoutLMv2 model)"),LEo=l(),Mb=a("li"),vae=a("strong"),BEo=o("led"),xEo=o(" \u2014 "),iN=a("a"),kEo=o("LEDForSequenceClassification"),REo=o(" (LED model)"),SEo=l(),Eb=a("li"),Tae=a("strong"),PEo=o("longformer"),$Eo=o(" \u2014 "),dN=a("a"),IEo=o("LongformerForSequenceClassification"),NEo=o(" (Longformer model)"),DEo=l(),yb=a("li"),Fae=a("strong"),jEo=o("mbart"),qEo=o(" \u2014 "),cN=a("a"),GEo=o("MBartForSequenceClassification"),OEo=o(" (mBART model)"),XEo=l(),wb=a("li"),Cae=a("strong"),VEo=o("megatron-bert"),zEo=o(" \u2014 "),fN=a("a"),WEo=o("MegatronBertForSequenceClassification"),QEo=o(" (MegatronBert model)"),HEo=l(),Ab=a("li"),Mae=a("strong"),UEo=o("mobilebert"),JEo=o(" \u2014 "),mN=a("a"),YEo=o("MobileBertForSequenceClassification"),KEo=o(" (MobileBERT model)"),ZEo=l(),Lb=a("li"),Eae=a("strong"),e3o=o("mpnet"),o3o=o(" \u2014 "),gN=a("a"),r3o=o("MPNetForSequenceClassification"),t3o=o(" (MPNet model)"),a3o=l(),Bb=a("li"),yae=a("strong"),n3o=o("nystromformer"),s3o=o(" \u2014 "),hN=a("a"),l3o=o("NystromformerForSequenceClassification"),i3o=o(" (Nystromformer model)"),d3o=l(),xb=a("li"),wae=a("strong"),c3o=o("openai-gpt"),f3o=o(" \u2014 "),pN=a("a"),m3o=o("OpenAIGPTForSequenceClassification"),g3o=o(" (OpenAI GPT model)"),h3o=l(),kb=a("li"),Aae=a("strong"),p3o=o("perceiver"),_3o=o(" \u2014 "),_N=a("a"),u3o=o("PerceiverForSequenceClassification"),b3o=o(" (Perceiver model)"),v3o=l(),Rb=a("li"),Lae=a("strong"),T3o=o("plbart"),F3o=o(" \u2014 "),uN=a("a"),C3o=o("PLBartForSequenceClassification"),M3o=o(" (PLBart model)"),E3o=l(),Sb=a("li"),Bae=a("strong"),y3o=o("qdqbert"),w3o=o(" \u2014 "),bN=a("a"),A3o=o("QDQBertForSequenceClassification"),L3o=o(" (QDQBert model)"),B3o=l(),Pb=a("li"),xae=a("strong"),x3o=o("reformer"),k3o=o(" \u2014 "),vN=a("a"),R3o=o("ReformerForSequenceClassification"),S3o=o(" (Reformer model)"),P3o=l(),$b=a("li"),kae=a("strong"),$3o=o("rembert"),I3o=o(" \u2014 "),TN=a("a"),N3o=o("RemBertForSequenceClassification"),D3o=o(" (RemBERT model)"),j3o=l(),Ib=a("li"),Rae=a("strong"),q3o=o("roberta"),G3o=o(" \u2014 "),FN=a("a"),O3o=o("RobertaForSequenceClassification"),X3o=o(" (RoBERTa model)"),V3o=l(),Nb=a("li"),Sae=a("strong"),z3o=o("roformer"),W3o=o(" \u2014 "),CN=a("a"),Q3o=o("RoFormerForSequenceClassification"),H3o=o(" (RoFormer model)"),U3o=l(),Db=a("li"),Pae=a("strong"),J3o=o("squeezebert"),Y3o=o(" \u2014 "),MN=a("a"),K3o=o("SqueezeBertForSequenceClassification"),Z3o=o(" (SqueezeBERT model)"),eyo=l(),jb=a("li"),$ae=a("strong"),oyo=o("tapas"),ryo=o(" \u2014 "),EN=a("a"),tyo=o("TapasForSequenceClassification"),ayo=o(" (TAPAS model)"),nyo=l(),qb=a("li"),Iae=a("strong"),syo=o("transfo-xl"),lyo=o(" \u2014 "),yN=a("a"),iyo=o("TransfoXLForSequenceClassification"),dyo=o(" (Transformer-XL model)"),cyo=l(),Gb=a("li"),Nae=a("strong"),fyo=o("xlm"),myo=o(" \u2014 "),wN=a("a"),gyo=o("XLMForSequenceClassification"),hyo=o(" (XLM model)"),pyo=l(),Ob=a("li"),Dae=a("strong"),_yo=o("xlm-roberta"),uyo=o(" \u2014 "),AN=a("a"),byo=o("XLMRobertaForSequenceClassification"),vyo=o(" (XLM-RoBERTa model)"),Tyo=l(),Xb=a("li"),jae=a("strong"),Fyo=o("xlm-roberta-xl"),Cyo=o(" \u2014 "),LN=a("a"),Myo=o("XLMRobertaXLForSequenceClassification"),Eyo=o(" (XLM-RoBERTa-XL model)"),yyo=l(),Vb=a("li"),qae=a("strong"),wyo=o("xlnet"),Ayo=o(" \u2014 "),BN=a("a"),Lyo=o("XLNetForSequenceClassification"),Byo=o(" (XLNet model)"),xyo=l(),zb=a("li"),Gae=a("strong"),kyo=o("yoso"),Ryo=o(" \u2014 "),xN=a("a"),Syo=o("YosoForSequenceClassification"),Pyo=o(" (YOSO model)"),$yo=l(),Wb=a("p"),Iyo=o("The model is set in evaluation mode by default using "),Oae=a("code"),Nyo=o("model.eval()"),Dyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xae=a("code"),jyo=o("model.train()"),qyo=l(),Vae=a("p"),Gyo=o("Examples:"),Oyo=l(),f(L3.$$.fragment),xke=l(),hd=a("h2"),Qb=a("a"),zae=a("span"),f(B3.$$.fragment),Xyo=l(),Wae=a("span"),Vyo=o("AutoModelForMultipleChoice"),kke=l(),rr=a("div"),f(x3.$$.fragment),zyo=l(),pd=a("p"),Wyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Qae=a("code"),Qyo=o("from_pretrained()"),Hyo=o("class method or the "),Hae=a("code"),Uyo=o("from_config()"),Jyo=o(`class
method.`),Yyo=l(),k3=a("p"),Kyo=o("This class cannot be instantiated directly using "),Uae=a("code"),Zyo=o("__init__()"),ewo=o(" (throws an error)."),owo=l(),Jr=a("div"),f(R3.$$.fragment),rwo=l(),Jae=a("p"),two=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),awo=l(),_d=a("p"),nwo=o(`Note:
Loading a model from its configuration file does `),Yae=a("strong"),swo=o("not"),lwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kae=a("code"),iwo=o("from_pretrained()"),dwo=o("to load the model weights."),cwo=l(),Zae=a("p"),fwo=o("Examples:"),mwo=l(),f(S3.$$.fragment),gwo=l(),Xe=a("div"),f(P3.$$.fragment),hwo=l(),ene=a("p"),pwo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_wo=l(),Ja=a("p"),uwo=o("The model class to instantiate is selected based on the "),one=a("code"),bwo=o("model_type"),vwo=o(` property of the config object (either
passed as an argument or loaded from `),rne=a("code"),Two=o("pretrained_model_name_or_path"),Fwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=a("code"),Cwo=o("pretrained_model_name_or_path"),Mwo=o(":"),Ewo=l(),G=a("ul"),Hb=a("li"),ane=a("strong"),ywo=o("albert"),wwo=o(" \u2014 "),kN=a("a"),Awo=o("AlbertForMultipleChoice"),Lwo=o(" (ALBERT model)"),Bwo=l(),Ub=a("li"),nne=a("strong"),xwo=o("bert"),kwo=o(" \u2014 "),RN=a("a"),Rwo=o("BertForMultipleChoice"),Swo=o(" (BERT model)"),Pwo=l(),Jb=a("li"),sne=a("strong"),$wo=o("big_bird"),Iwo=o(" \u2014 "),SN=a("a"),Nwo=o("BigBirdForMultipleChoice"),Dwo=o(" (BigBird model)"),jwo=l(),Yb=a("li"),lne=a("strong"),qwo=o("camembert"),Gwo=o(" \u2014 "),PN=a("a"),Owo=o("CamembertForMultipleChoice"),Xwo=o(" (CamemBERT model)"),Vwo=l(),Kb=a("li"),ine=a("strong"),zwo=o("canine"),Wwo=o(" \u2014 "),$N=a("a"),Qwo=o("CanineForMultipleChoice"),Hwo=o(" (Canine model)"),Uwo=l(),Zb=a("li"),dne=a("strong"),Jwo=o("convbert"),Ywo=o(" \u2014 "),IN=a("a"),Kwo=o("ConvBertForMultipleChoice"),Zwo=o(" (ConvBERT model)"),e6o=l(),e5=a("li"),cne=a("strong"),o6o=o("data2vec-text"),r6o=o(" \u2014 "),NN=a("a"),t6o=o("Data2VecTextForMultipleChoice"),a6o=o(" (Data2VecText model)"),n6o=l(),o5=a("li"),fne=a("strong"),s6o=o("distilbert"),l6o=o(" \u2014 "),DN=a("a"),i6o=o("DistilBertForMultipleChoice"),d6o=o(" (DistilBERT model)"),c6o=l(),r5=a("li"),mne=a("strong"),f6o=o("electra"),m6o=o(" \u2014 "),jN=a("a"),g6o=o("ElectraForMultipleChoice"),h6o=o(" (ELECTRA model)"),p6o=l(),t5=a("li"),gne=a("strong"),_6o=o("flaubert"),u6o=o(" \u2014 "),qN=a("a"),b6o=o("FlaubertForMultipleChoice"),v6o=o(" (FlauBERT model)"),T6o=l(),a5=a("li"),hne=a("strong"),F6o=o("fnet"),C6o=o(" \u2014 "),GN=a("a"),M6o=o("FNetForMultipleChoice"),E6o=o(" (FNet model)"),y6o=l(),n5=a("li"),pne=a("strong"),w6o=o("funnel"),A6o=o(" \u2014 "),ON=a("a"),L6o=o("FunnelForMultipleChoice"),B6o=o(" (Funnel Transformer model)"),x6o=l(),s5=a("li"),_ne=a("strong"),k6o=o("ibert"),R6o=o(" \u2014 "),XN=a("a"),S6o=o("IBertForMultipleChoice"),P6o=o(" (I-BERT model)"),$6o=l(),l5=a("li"),une=a("strong"),I6o=o("longformer"),N6o=o(" \u2014 "),VN=a("a"),D6o=o("LongformerForMultipleChoice"),j6o=o(" (Longformer model)"),q6o=l(),i5=a("li"),bne=a("strong"),G6o=o("megatron-bert"),O6o=o(" \u2014 "),zN=a("a"),X6o=o("MegatronBertForMultipleChoice"),V6o=o(" (MegatronBert model)"),z6o=l(),d5=a("li"),vne=a("strong"),W6o=o("mobilebert"),Q6o=o(" \u2014 "),WN=a("a"),H6o=o("MobileBertForMultipleChoice"),U6o=o(" (MobileBERT model)"),J6o=l(),c5=a("li"),Tne=a("strong"),Y6o=o("mpnet"),K6o=o(" \u2014 "),QN=a("a"),Z6o=o("MPNetForMultipleChoice"),eAo=o(" (MPNet model)"),oAo=l(),f5=a("li"),Fne=a("strong"),rAo=o("nystromformer"),tAo=o(" \u2014 "),HN=a("a"),aAo=o("NystromformerForMultipleChoice"),nAo=o(" (Nystromformer model)"),sAo=l(),m5=a("li"),Cne=a("strong"),lAo=o("qdqbert"),iAo=o(" \u2014 "),UN=a("a"),dAo=o("QDQBertForMultipleChoice"),cAo=o(" (QDQBert model)"),fAo=l(),g5=a("li"),Mne=a("strong"),mAo=o("rembert"),gAo=o(" \u2014 "),JN=a("a"),hAo=o("RemBertForMultipleChoice"),pAo=o(" (RemBERT model)"),_Ao=l(),h5=a("li"),Ene=a("strong"),uAo=o("roberta"),bAo=o(" \u2014 "),YN=a("a"),vAo=o("RobertaForMultipleChoice"),TAo=o(" (RoBERTa model)"),FAo=l(),p5=a("li"),yne=a("strong"),CAo=o("roformer"),MAo=o(" \u2014 "),KN=a("a"),EAo=o("RoFormerForMultipleChoice"),yAo=o(" (RoFormer model)"),wAo=l(),_5=a("li"),wne=a("strong"),AAo=o("squeezebert"),LAo=o(" \u2014 "),ZN=a("a"),BAo=o("SqueezeBertForMultipleChoice"),xAo=o(" (SqueezeBERT model)"),kAo=l(),u5=a("li"),Ane=a("strong"),RAo=o("xlm"),SAo=o(" \u2014 "),eD=a("a"),PAo=o("XLMForMultipleChoice"),$Ao=o(" (XLM model)"),IAo=l(),b5=a("li"),Lne=a("strong"),NAo=o("xlm-roberta"),DAo=o(" \u2014 "),oD=a("a"),jAo=o("XLMRobertaForMultipleChoice"),qAo=o(" (XLM-RoBERTa model)"),GAo=l(),v5=a("li"),Bne=a("strong"),OAo=o("xlm-roberta-xl"),XAo=o(" \u2014 "),rD=a("a"),VAo=o("XLMRobertaXLForMultipleChoice"),zAo=o(" (XLM-RoBERTa-XL model)"),WAo=l(),T5=a("li"),xne=a("strong"),QAo=o("xlnet"),HAo=o(" \u2014 "),tD=a("a"),UAo=o("XLNetForMultipleChoice"),JAo=o(" (XLNet model)"),YAo=l(),F5=a("li"),kne=a("strong"),KAo=o("yoso"),ZAo=o(" \u2014 "),aD=a("a"),e0o=o("YosoForMultipleChoice"),o0o=o(" (YOSO model)"),r0o=l(),C5=a("p"),t0o=o("The model is set in evaluation mode by default using "),Rne=a("code"),a0o=o("model.eval()"),n0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sne=a("code"),s0o=o("model.train()"),l0o=l(),Pne=a("p"),i0o=o("Examples:"),d0o=l(),f($3.$$.fragment),Rke=l(),ud=a("h2"),M5=a("a"),$ne=a("span"),f(I3.$$.fragment),c0o=l(),Ine=a("span"),f0o=o("AutoModelForNextSentencePrediction"),Ske=l(),tr=a("div"),f(N3.$$.fragment),m0o=l(),bd=a("p"),g0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nne=a("code"),h0o=o("from_pretrained()"),p0o=o("class method or the "),Dne=a("code"),_0o=o("from_config()"),u0o=o(`class
method.`),b0o=l(),D3=a("p"),v0o=o("This class cannot be instantiated directly using "),jne=a("code"),T0o=o("__init__()"),F0o=o(" (throws an error)."),C0o=l(),Yr=a("div"),f(j3.$$.fragment),M0o=l(),qne=a("p"),E0o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),y0o=l(),vd=a("p"),w0o=o(`Note:
Loading a model from its configuration file does `),Gne=a("strong"),A0o=o("not"),L0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),One=a("code"),B0o=o("from_pretrained()"),x0o=o("to load the model weights."),k0o=l(),Xne=a("p"),R0o=o("Examples:"),S0o=l(),f(q3.$$.fragment),P0o=l(),Ve=a("div"),f(G3.$$.fragment),$0o=l(),Vne=a("p"),I0o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),N0o=l(),Ya=a("p"),D0o=o("The model class to instantiate is selected based on the "),zne=a("code"),j0o=o("model_type"),q0o=o(` property of the config object (either
passed as an argument or loaded from `),Wne=a("code"),G0o=o("pretrained_model_name_or_path"),O0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=a("code"),X0o=o("pretrained_model_name_or_path"),V0o=o(":"),z0o=l(),da=a("ul"),E5=a("li"),Hne=a("strong"),W0o=o("bert"),Q0o=o(" \u2014 "),nD=a("a"),H0o=o("BertForNextSentencePrediction"),U0o=o(" (BERT model)"),J0o=l(),y5=a("li"),Une=a("strong"),Y0o=o("fnet"),K0o=o(" \u2014 "),sD=a("a"),Z0o=o("FNetForNextSentencePrediction"),eLo=o(" (FNet model)"),oLo=l(),w5=a("li"),Jne=a("strong"),rLo=o("megatron-bert"),tLo=o(" \u2014 "),lD=a("a"),aLo=o("MegatronBertForNextSentencePrediction"),nLo=o(" (MegatronBert model)"),sLo=l(),A5=a("li"),Yne=a("strong"),lLo=o("mobilebert"),iLo=o(" \u2014 "),iD=a("a"),dLo=o("MobileBertForNextSentencePrediction"),cLo=o(" (MobileBERT model)"),fLo=l(),L5=a("li"),Kne=a("strong"),mLo=o("qdqbert"),gLo=o(" \u2014 "),dD=a("a"),hLo=o("QDQBertForNextSentencePrediction"),pLo=o(" (QDQBert model)"),_Lo=l(),B5=a("p"),uLo=o("The model is set in evaluation mode by default using "),Zne=a("code"),bLo=o("model.eval()"),vLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ese=a("code"),TLo=o("model.train()"),FLo=l(),ose=a("p"),CLo=o("Examples:"),MLo=l(),f(O3.$$.fragment),Pke=l(),Td=a("h2"),x5=a("a"),rse=a("span"),f(X3.$$.fragment),ELo=l(),tse=a("span"),yLo=o("AutoModelForTokenClassification"),$ke=l(),ar=a("div"),f(V3.$$.fragment),wLo=l(),Fd=a("p"),ALo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ase=a("code"),LLo=o("from_pretrained()"),BLo=o("class method or the "),nse=a("code"),xLo=o("from_config()"),kLo=o(`class
method.`),RLo=l(),z3=a("p"),SLo=o("This class cannot be instantiated directly using "),sse=a("code"),PLo=o("__init__()"),$Lo=o(" (throws an error)."),ILo=l(),Kr=a("div"),f(W3.$$.fragment),NLo=l(),lse=a("p"),DLo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jLo=l(),Cd=a("p"),qLo=o(`Note:
Loading a model from its configuration file does `),ise=a("strong"),GLo=o("not"),OLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dse=a("code"),XLo=o("from_pretrained()"),VLo=o("to load the model weights."),zLo=l(),cse=a("p"),WLo=o("Examples:"),QLo=l(),f(Q3.$$.fragment),HLo=l(),ze=a("div"),f(H3.$$.fragment),ULo=l(),fse=a("p"),JLo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YLo=l(),Ka=a("p"),KLo=o("The model class to instantiate is selected based on the "),mse=a("code"),ZLo=o("model_type"),e9o=o(` property of the config object (either
passed as an argument or loaded from `),gse=a("code"),o9o=o("pretrained_model_name_or_path"),r9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hse=a("code"),t9o=o("pretrained_model_name_or_path"),a9o=o(":"),n9o=l(),j=a("ul"),k5=a("li"),pse=a("strong"),s9o=o("albert"),l9o=o(" \u2014 "),cD=a("a"),i9o=o("AlbertForTokenClassification"),d9o=o(" (ALBERT model)"),c9o=l(),R5=a("li"),_se=a("strong"),f9o=o("bert"),m9o=o(" \u2014 "),fD=a("a"),g9o=o("BertForTokenClassification"),h9o=o(" (BERT model)"),p9o=l(),S5=a("li"),use=a("strong"),_9o=o("big_bird"),u9o=o(" \u2014 "),mD=a("a"),b9o=o("BigBirdForTokenClassification"),v9o=o(" (BigBird model)"),T9o=l(),P5=a("li"),bse=a("strong"),F9o=o("camembert"),C9o=o(" \u2014 "),gD=a("a"),M9o=o("CamembertForTokenClassification"),E9o=o(" (CamemBERT model)"),y9o=l(),$5=a("li"),vse=a("strong"),w9o=o("canine"),A9o=o(" \u2014 "),hD=a("a"),L9o=o("CanineForTokenClassification"),B9o=o(" (Canine model)"),x9o=l(),I5=a("li"),Tse=a("strong"),k9o=o("convbert"),R9o=o(" \u2014 "),pD=a("a"),S9o=o("ConvBertForTokenClassification"),P9o=o(" (ConvBERT model)"),$9o=l(),N5=a("li"),Fse=a("strong"),I9o=o("data2vec-text"),N9o=o(" \u2014 "),_D=a("a"),D9o=o("Data2VecTextForTokenClassification"),j9o=o(" (Data2VecText model)"),q9o=l(),D5=a("li"),Cse=a("strong"),G9o=o("deberta"),O9o=o(" \u2014 "),uD=a("a"),X9o=o("DebertaForTokenClassification"),V9o=o(" (DeBERTa model)"),z9o=l(),j5=a("li"),Mse=a("strong"),W9o=o("deberta-v2"),Q9o=o(" \u2014 "),bD=a("a"),H9o=o("DebertaV2ForTokenClassification"),U9o=o(" (DeBERTa-v2 model)"),J9o=l(),q5=a("li"),Ese=a("strong"),Y9o=o("distilbert"),K9o=o(" \u2014 "),vD=a("a"),Z9o=o("DistilBertForTokenClassification"),eBo=o(" (DistilBERT model)"),oBo=l(),G5=a("li"),yse=a("strong"),rBo=o("electra"),tBo=o(" \u2014 "),TD=a("a"),aBo=o("ElectraForTokenClassification"),nBo=o(" (ELECTRA model)"),sBo=l(),O5=a("li"),wse=a("strong"),lBo=o("flaubert"),iBo=o(" \u2014 "),FD=a("a"),dBo=o("FlaubertForTokenClassification"),cBo=o(" (FlauBERT model)"),fBo=l(),X5=a("li"),Ase=a("strong"),mBo=o("fnet"),gBo=o(" \u2014 "),CD=a("a"),hBo=o("FNetForTokenClassification"),pBo=o(" (FNet model)"),_Bo=l(),V5=a("li"),Lse=a("strong"),uBo=o("funnel"),bBo=o(" \u2014 "),MD=a("a"),vBo=o("FunnelForTokenClassification"),TBo=o(" (Funnel Transformer model)"),FBo=l(),z5=a("li"),Bse=a("strong"),CBo=o("gpt2"),MBo=o(" \u2014 "),ED=a("a"),EBo=o("GPT2ForTokenClassification"),yBo=o(" (OpenAI GPT-2 model)"),wBo=l(),W5=a("li"),xse=a("strong"),ABo=o("ibert"),LBo=o(" \u2014 "),yD=a("a"),BBo=o("IBertForTokenClassification"),xBo=o(" (I-BERT model)"),kBo=l(),Q5=a("li"),kse=a("strong"),RBo=o("layoutlm"),SBo=o(" \u2014 "),wD=a("a"),PBo=o("LayoutLMForTokenClassification"),$Bo=o(" (LayoutLM model)"),IBo=l(),H5=a("li"),Rse=a("strong"),NBo=o("layoutlmv2"),DBo=o(" \u2014 "),AD=a("a"),jBo=o("LayoutLMv2ForTokenClassification"),qBo=o(" (LayoutLMv2 model)"),GBo=l(),U5=a("li"),Sse=a("strong"),OBo=o("longformer"),XBo=o(" \u2014 "),LD=a("a"),VBo=o("LongformerForTokenClassification"),zBo=o(" (Longformer model)"),WBo=l(),J5=a("li"),Pse=a("strong"),QBo=o("megatron-bert"),HBo=o(" \u2014 "),BD=a("a"),UBo=o("MegatronBertForTokenClassification"),JBo=o(" (MegatronBert model)"),YBo=l(),Y5=a("li"),$se=a("strong"),KBo=o("mobilebert"),ZBo=o(" \u2014 "),xD=a("a"),exo=o("MobileBertForTokenClassification"),oxo=o(" (MobileBERT model)"),rxo=l(),K5=a("li"),Ise=a("strong"),txo=o("mpnet"),axo=o(" \u2014 "),kD=a("a"),nxo=o("MPNetForTokenClassification"),sxo=o(" (MPNet model)"),lxo=l(),Z5=a("li"),Nse=a("strong"),ixo=o("nystromformer"),dxo=o(" \u2014 "),RD=a("a"),cxo=o("NystromformerForTokenClassification"),fxo=o(" (Nystromformer model)"),mxo=l(),e2=a("li"),Dse=a("strong"),gxo=o("qdqbert"),hxo=o(" \u2014 "),SD=a("a"),pxo=o("QDQBertForTokenClassification"),_xo=o(" (QDQBert model)"),uxo=l(),o2=a("li"),jse=a("strong"),bxo=o("rembert"),vxo=o(" \u2014 "),PD=a("a"),Txo=o("RemBertForTokenClassification"),Fxo=o(" (RemBERT model)"),Cxo=l(),r2=a("li"),qse=a("strong"),Mxo=o("roberta"),Exo=o(" \u2014 "),$D=a("a"),yxo=o("RobertaForTokenClassification"),wxo=o(" (RoBERTa model)"),Axo=l(),t2=a("li"),Gse=a("strong"),Lxo=o("roformer"),Bxo=o(" \u2014 "),ID=a("a"),xxo=o("RoFormerForTokenClassification"),kxo=o(" (RoFormer model)"),Rxo=l(),a2=a("li"),Ose=a("strong"),Sxo=o("squeezebert"),Pxo=o(" \u2014 "),ND=a("a"),$xo=o("SqueezeBertForTokenClassification"),Ixo=o(" (SqueezeBERT model)"),Nxo=l(),n2=a("li"),Xse=a("strong"),Dxo=o("xlm"),jxo=o(" \u2014 "),DD=a("a"),qxo=o("XLMForTokenClassification"),Gxo=o(" (XLM model)"),Oxo=l(),s2=a("li"),Vse=a("strong"),Xxo=o("xlm-roberta"),Vxo=o(" \u2014 "),jD=a("a"),zxo=o("XLMRobertaForTokenClassification"),Wxo=o(" (XLM-RoBERTa model)"),Qxo=l(),l2=a("li"),zse=a("strong"),Hxo=o("xlm-roberta-xl"),Uxo=o(" \u2014 "),qD=a("a"),Jxo=o("XLMRobertaXLForTokenClassification"),Yxo=o(" (XLM-RoBERTa-XL model)"),Kxo=l(),i2=a("li"),Wse=a("strong"),Zxo=o("xlnet"),eko=o(" \u2014 "),GD=a("a"),oko=o("XLNetForTokenClassification"),rko=o(" (XLNet model)"),tko=l(),d2=a("li"),Qse=a("strong"),ako=o("yoso"),nko=o(" \u2014 "),OD=a("a"),sko=o("YosoForTokenClassification"),lko=o(" (YOSO model)"),iko=l(),c2=a("p"),dko=o("The model is set in evaluation mode by default using "),Hse=a("code"),cko=o("model.eval()"),fko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=a("code"),mko=o("model.train()"),gko=l(),Jse=a("p"),hko=o("Examples:"),pko=l(),f(U3.$$.fragment),Ike=l(),Md=a("h2"),f2=a("a"),Yse=a("span"),f(J3.$$.fragment),_ko=l(),Kse=a("span"),uko=o("AutoModelForQuestionAnswering"),Nke=l(),nr=a("div"),f(Y3.$$.fragment),bko=l(),Ed=a("p"),vko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zse=a("code"),Tko=o("from_pretrained()"),Fko=o("class method or the "),ele=a("code"),Cko=o("from_config()"),Mko=o(`class
method.`),Eko=l(),K3=a("p"),yko=o("This class cannot be instantiated directly using "),ole=a("code"),wko=o("__init__()"),Ako=o(" (throws an error)."),Lko=l(),Zr=a("div"),f(Z3.$$.fragment),Bko=l(),rle=a("p"),xko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kko=l(),yd=a("p"),Rko=o(`Note:
Loading a model from its configuration file does `),tle=a("strong"),Sko=o("not"),Pko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=a("code"),$ko=o("from_pretrained()"),Iko=o("to load the model weights."),Nko=l(),nle=a("p"),Dko=o("Examples:"),jko=l(),f(ey.$$.fragment),qko=l(),We=a("div"),f(oy.$$.fragment),Gko=l(),sle=a("p"),Oko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Xko=l(),Za=a("p"),Vko=o("The model class to instantiate is selected based on the "),lle=a("code"),zko=o("model_type"),Wko=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),Qko=o("pretrained_model_name_or_path"),Hko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),Uko=o("pretrained_model_name_or_path"),Jko=o(":"),Yko=l(),R=a("ul"),m2=a("li"),cle=a("strong"),Kko=o("albert"),Zko=o(" \u2014 "),XD=a("a"),eRo=o("AlbertForQuestionAnswering"),oRo=o(" (ALBERT model)"),rRo=l(),g2=a("li"),fle=a("strong"),tRo=o("bart"),aRo=o(" \u2014 "),VD=a("a"),nRo=o("BartForQuestionAnswering"),sRo=o(" (BART model)"),lRo=l(),h2=a("li"),mle=a("strong"),iRo=o("bert"),dRo=o(" \u2014 "),zD=a("a"),cRo=o("BertForQuestionAnswering"),fRo=o(" (BERT model)"),mRo=l(),p2=a("li"),gle=a("strong"),gRo=o("big_bird"),hRo=o(" \u2014 "),WD=a("a"),pRo=o("BigBirdForQuestionAnswering"),_Ro=o(" (BigBird model)"),uRo=l(),_2=a("li"),hle=a("strong"),bRo=o("bigbird_pegasus"),vRo=o(" \u2014 "),QD=a("a"),TRo=o("BigBirdPegasusForQuestionAnswering"),FRo=o(" (BigBirdPegasus model)"),CRo=l(),u2=a("li"),ple=a("strong"),MRo=o("camembert"),ERo=o(" \u2014 "),HD=a("a"),yRo=o("CamembertForQuestionAnswering"),wRo=o(" (CamemBERT model)"),ARo=l(),b2=a("li"),_le=a("strong"),LRo=o("canine"),BRo=o(" \u2014 "),UD=a("a"),xRo=o("CanineForQuestionAnswering"),kRo=o(" (Canine model)"),RRo=l(),v2=a("li"),ule=a("strong"),SRo=o("convbert"),PRo=o(" \u2014 "),JD=a("a"),$Ro=o("ConvBertForQuestionAnswering"),IRo=o(" (ConvBERT model)"),NRo=l(),T2=a("li"),ble=a("strong"),DRo=o("data2vec-text"),jRo=o(" \u2014 "),YD=a("a"),qRo=o("Data2VecTextForQuestionAnswering"),GRo=o(" (Data2VecText model)"),ORo=l(),F2=a("li"),vle=a("strong"),XRo=o("deberta"),VRo=o(" \u2014 "),KD=a("a"),zRo=o("DebertaForQuestionAnswering"),WRo=o(" (DeBERTa model)"),QRo=l(),C2=a("li"),Tle=a("strong"),HRo=o("deberta-v2"),URo=o(" \u2014 "),ZD=a("a"),JRo=o("DebertaV2ForQuestionAnswering"),YRo=o(" (DeBERTa-v2 model)"),KRo=l(),M2=a("li"),Fle=a("strong"),ZRo=o("distilbert"),eSo=o(" \u2014 "),ej=a("a"),oSo=o("DistilBertForQuestionAnswering"),rSo=o(" (DistilBERT model)"),tSo=l(),E2=a("li"),Cle=a("strong"),aSo=o("electra"),nSo=o(" \u2014 "),oj=a("a"),sSo=o("ElectraForQuestionAnswering"),lSo=o(" (ELECTRA model)"),iSo=l(),y2=a("li"),Mle=a("strong"),dSo=o("flaubert"),cSo=o(" \u2014 "),rj=a("a"),fSo=o("FlaubertForQuestionAnsweringSimple"),mSo=o(" (FlauBERT model)"),gSo=l(),w2=a("li"),Ele=a("strong"),hSo=o("fnet"),pSo=o(" \u2014 "),tj=a("a"),_So=o("FNetForQuestionAnswering"),uSo=o(" (FNet model)"),bSo=l(),A2=a("li"),yle=a("strong"),vSo=o("funnel"),TSo=o(" \u2014 "),aj=a("a"),FSo=o("FunnelForQuestionAnswering"),CSo=o(" (Funnel Transformer model)"),MSo=l(),L2=a("li"),wle=a("strong"),ESo=o("gptj"),ySo=o(" \u2014 "),nj=a("a"),wSo=o("GPTJForQuestionAnswering"),ASo=o(" (GPT-J model)"),LSo=l(),B2=a("li"),Ale=a("strong"),BSo=o("ibert"),xSo=o(" \u2014 "),sj=a("a"),kSo=o("IBertForQuestionAnswering"),RSo=o(" (I-BERT model)"),SSo=l(),x2=a("li"),Lle=a("strong"),PSo=o("layoutlmv2"),$So=o(" \u2014 "),lj=a("a"),ISo=o("LayoutLMv2ForQuestionAnswering"),NSo=o(" (LayoutLMv2 model)"),DSo=l(),k2=a("li"),Ble=a("strong"),jSo=o("led"),qSo=o(" \u2014 "),ij=a("a"),GSo=o("LEDForQuestionAnswering"),OSo=o(" (LED model)"),XSo=l(),R2=a("li"),xle=a("strong"),VSo=o("longformer"),zSo=o(" \u2014 "),dj=a("a"),WSo=o("LongformerForQuestionAnswering"),QSo=o(" (Longformer model)"),HSo=l(),S2=a("li"),kle=a("strong"),USo=o("lxmert"),JSo=o(" \u2014 "),cj=a("a"),YSo=o("LxmertForQuestionAnswering"),KSo=o(" (LXMERT model)"),ZSo=l(),P2=a("li"),Rle=a("strong"),ePo=o("mbart"),oPo=o(" \u2014 "),fj=a("a"),rPo=o("MBartForQuestionAnswering"),tPo=o(" (mBART model)"),aPo=l(),$2=a("li"),Sle=a("strong"),nPo=o("megatron-bert"),sPo=o(" \u2014 "),mj=a("a"),lPo=o("MegatronBertForQuestionAnswering"),iPo=o(" (MegatronBert model)"),dPo=l(),I2=a("li"),Ple=a("strong"),cPo=o("mobilebert"),fPo=o(" \u2014 "),gj=a("a"),mPo=o("MobileBertForQuestionAnswering"),gPo=o(" (MobileBERT model)"),hPo=l(),N2=a("li"),$le=a("strong"),pPo=o("mpnet"),_Po=o(" \u2014 "),hj=a("a"),uPo=o("MPNetForQuestionAnswering"),bPo=o(" (MPNet model)"),vPo=l(),D2=a("li"),Ile=a("strong"),TPo=o("nystromformer"),FPo=o(" \u2014 "),pj=a("a"),CPo=o("NystromformerForQuestionAnswering"),MPo=o(" (Nystromformer model)"),EPo=l(),j2=a("li"),Nle=a("strong"),yPo=o("qdqbert"),wPo=o(" \u2014 "),_j=a("a"),APo=o("QDQBertForQuestionAnswering"),LPo=o(" (QDQBert model)"),BPo=l(),q2=a("li"),Dle=a("strong"),xPo=o("reformer"),kPo=o(" \u2014 "),uj=a("a"),RPo=o("ReformerForQuestionAnswering"),SPo=o(" (Reformer model)"),PPo=l(),G2=a("li"),jle=a("strong"),$Po=o("rembert"),IPo=o(" \u2014 "),bj=a("a"),NPo=o("RemBertForQuestionAnswering"),DPo=o(" (RemBERT model)"),jPo=l(),O2=a("li"),qle=a("strong"),qPo=o("roberta"),GPo=o(" \u2014 "),vj=a("a"),OPo=o("RobertaForQuestionAnswering"),XPo=o(" (RoBERTa model)"),VPo=l(),X2=a("li"),Gle=a("strong"),zPo=o("roformer"),WPo=o(" \u2014 "),Tj=a("a"),QPo=o("RoFormerForQuestionAnswering"),HPo=o(" (RoFormer model)"),UPo=l(),V2=a("li"),Ole=a("strong"),JPo=o("splinter"),YPo=o(" \u2014 "),Fj=a("a"),KPo=o("SplinterForQuestionAnswering"),ZPo=o(" (Splinter model)"),e$o=l(),z2=a("li"),Xle=a("strong"),o$o=o("squeezebert"),r$o=o(" \u2014 "),Cj=a("a"),t$o=o("SqueezeBertForQuestionAnswering"),a$o=o(" (SqueezeBERT model)"),n$o=l(),W2=a("li"),Vle=a("strong"),s$o=o("xlm"),l$o=o(" \u2014 "),Mj=a("a"),i$o=o("XLMForQuestionAnsweringSimple"),d$o=o(" (XLM model)"),c$o=l(),Q2=a("li"),zle=a("strong"),f$o=o("xlm-roberta"),m$o=o(" \u2014 "),Ej=a("a"),g$o=o("XLMRobertaForQuestionAnswering"),h$o=o(" (XLM-RoBERTa model)"),p$o=l(),H2=a("li"),Wle=a("strong"),_$o=o("xlm-roberta-xl"),u$o=o(" \u2014 "),yj=a("a"),b$o=o("XLMRobertaXLForQuestionAnswering"),v$o=o(" (XLM-RoBERTa-XL model)"),T$o=l(),U2=a("li"),Qle=a("strong"),F$o=o("xlnet"),C$o=o(" \u2014 "),wj=a("a"),M$o=o("XLNetForQuestionAnsweringSimple"),E$o=o(" (XLNet model)"),y$o=l(),J2=a("li"),Hle=a("strong"),w$o=o("yoso"),A$o=o(" \u2014 "),Aj=a("a"),L$o=o("YosoForQuestionAnswering"),B$o=o(" (YOSO model)"),x$o=l(),Y2=a("p"),k$o=o("The model is set in evaluation mode by default using "),Ule=a("code"),R$o=o("model.eval()"),S$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jle=a("code"),P$o=o("model.train()"),$$o=l(),Yle=a("p"),I$o=o("Examples:"),N$o=l(),f(ry.$$.fragment),Dke=l(),wd=a("h2"),K2=a("a"),Kle=a("span"),f(ty.$$.fragment),D$o=l(),Zle=a("span"),j$o=o("AutoModelForTableQuestionAnswering"),jke=l(),sr=a("div"),f(ay.$$.fragment),q$o=l(),Ad=a("p"),G$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eie=a("code"),O$o=o("from_pretrained()"),X$o=o("class method or the "),oie=a("code"),V$o=o("from_config()"),z$o=o(`class
method.`),W$o=l(),ny=a("p"),Q$o=o("This class cannot be instantiated directly using "),rie=a("code"),H$o=o("__init__()"),U$o=o(" (throws an error)."),J$o=l(),et=a("div"),f(sy.$$.fragment),Y$o=l(),tie=a("p"),K$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z$o=l(),Ld=a("p"),eIo=o(`Note:
Loading a model from its configuration file does `),aie=a("strong"),oIo=o("not"),rIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nie=a("code"),tIo=o("from_pretrained()"),aIo=o("to load the model weights."),nIo=l(),sie=a("p"),sIo=o("Examples:"),lIo=l(),f(ly.$$.fragment),iIo=l(),Qe=a("div"),f(iy.$$.fragment),dIo=l(),lie=a("p"),cIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fIo=l(),en=a("p"),mIo=o("The model class to instantiate is selected based on the "),iie=a("code"),gIo=o("model_type"),hIo=o(` property of the config object (either
passed as an argument or loaded from `),die=a("code"),pIo=o("pretrained_model_name_or_path"),_Io=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=a("code"),uIo=o("pretrained_model_name_or_path"),bIo=o(":"),vIo=l(),fie=a("ul"),Z2=a("li"),mie=a("strong"),TIo=o("tapas"),FIo=o(" \u2014 "),Lj=a("a"),CIo=o("TapasForQuestionAnswering"),MIo=o(" (TAPAS model)"),EIo=l(),ev=a("p"),yIo=o("The model is set in evaluation mode by default using "),gie=a("code"),wIo=o("model.eval()"),AIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),LIo=o("model.train()"),BIo=l(),pie=a("p"),xIo=o("Examples:"),kIo=l(),f(dy.$$.fragment),qke=l(),Bd=a("h2"),ov=a("a"),_ie=a("span"),f(cy.$$.fragment),RIo=l(),uie=a("span"),SIo=o("AutoModelForImageClassification"),Gke=l(),lr=a("div"),f(fy.$$.fragment),PIo=l(),xd=a("p"),$Io=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bie=a("code"),IIo=o("from_pretrained()"),NIo=o("class method or the "),vie=a("code"),DIo=o("from_config()"),jIo=o(`class
method.`),qIo=l(),my=a("p"),GIo=o("This class cannot be instantiated directly using "),Tie=a("code"),OIo=o("__init__()"),XIo=o(" (throws an error)."),VIo=l(),ot=a("div"),f(gy.$$.fragment),zIo=l(),Fie=a("p"),WIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QIo=l(),kd=a("p"),HIo=o(`Note:
Loading a model from its configuration file does `),Cie=a("strong"),UIo=o("not"),JIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=a("code"),YIo=o("from_pretrained()"),KIo=o("to load the model weights."),ZIo=l(),Eie=a("p"),eNo=o("Examples:"),oNo=l(),f(hy.$$.fragment),rNo=l(),He=a("div"),f(py.$$.fragment),tNo=l(),yie=a("p"),aNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nNo=l(),on=a("p"),sNo=o("The model class to instantiate is selected based on the "),wie=a("code"),lNo=o("model_type"),iNo=o(` property of the config object (either
passed as an argument or loaded from `),Aie=a("code"),dNo=o("pretrained_model_name_or_path"),cNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=a("code"),fNo=o("pretrained_model_name_or_path"),mNo=o(":"),gNo=l(),me=a("ul"),rv=a("li"),Bie=a("strong"),hNo=o("beit"),pNo=o(" \u2014 "),Bj=a("a"),_No=o("BeitForImageClassification"),uNo=o(" (BEiT model)"),bNo=l(),tv=a("li"),xie=a("strong"),vNo=o("convnext"),TNo=o(" \u2014 "),xj=a("a"),FNo=o("ConvNextForImageClassification"),CNo=o(" (ConvNext model)"),MNo=l(),qs=a("li"),kie=a("strong"),ENo=o("deit"),yNo=o(" \u2014 "),kj=a("a"),wNo=o("DeiTForImageClassification"),ANo=o(" or "),Rj=a("a"),LNo=o("DeiTForImageClassificationWithTeacher"),BNo=o(" (DeiT model)"),xNo=l(),av=a("li"),Rie=a("strong"),kNo=o("imagegpt"),RNo=o(" \u2014 "),Sj=a("a"),SNo=o("ImageGPTForImageClassification"),PNo=o(" (ImageGPT model)"),$No=l(),ma=a("li"),Sie=a("strong"),INo=o("perceiver"),NNo=o(" \u2014 "),Pj=a("a"),DNo=o("PerceiverForImageClassificationLearned"),jNo=o(" or "),$j=a("a"),qNo=o("PerceiverForImageClassificationFourier"),GNo=o(" or "),Ij=a("a"),ONo=o("PerceiverForImageClassificationConvProcessing"),XNo=o(" (Perceiver model)"),VNo=l(),nv=a("li"),Pie=a("strong"),zNo=o("poolformer"),WNo=o(" \u2014 "),Nj=a("a"),QNo=o("PoolFormerForImageClassification"),HNo=o(" (PoolFormer model)"),UNo=l(),sv=a("li"),$ie=a("strong"),JNo=o("resnet"),YNo=o(" \u2014 "),Dj=a("a"),KNo=o("ResNetForImageClassification"),ZNo=o(" (ResNet model)"),eDo=l(),lv=a("li"),Iie=a("strong"),oDo=o("segformer"),rDo=o(" \u2014 "),jj=a("a"),tDo=o("SegformerForImageClassification"),aDo=o(" (SegFormer model)"),nDo=l(),iv=a("li"),Nie=a("strong"),sDo=o("swin"),lDo=o(" \u2014 "),qj=a("a"),iDo=o("SwinForImageClassification"),dDo=o(" (Swin model)"),cDo=l(),dv=a("li"),Die=a("strong"),fDo=o("van"),mDo=o(" \u2014 "),Gj=a("a"),gDo=o("VanForImageClassification"),hDo=o(" (VAN model)"),pDo=l(),cv=a("li"),jie=a("strong"),_Do=o("vit"),uDo=o(" \u2014 "),Oj=a("a"),bDo=o("ViTForImageClassification"),vDo=o(" (ViT model)"),TDo=l(),fv=a("p"),FDo=o("The model is set in evaluation mode by default using "),qie=a("code"),CDo=o("model.eval()"),MDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),EDo=o("model.train()"),yDo=l(),Oie=a("p"),wDo=o("Examples:"),ADo=l(),f(_y.$$.fragment),Oke=l(),Rd=a("h2"),mv=a("a"),Xie=a("span"),f(uy.$$.fragment),LDo=l(),Vie=a("span"),BDo=o("AutoModelForVision2Seq"),Xke=l(),ir=a("div"),f(by.$$.fragment),xDo=l(),Sd=a("p"),kDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zie=a("code"),RDo=o("from_pretrained()"),SDo=o("class method or the "),Wie=a("code"),PDo=o("from_config()"),$Do=o(`class
method.`),IDo=l(),vy=a("p"),NDo=o("This class cannot be instantiated directly using "),Qie=a("code"),DDo=o("__init__()"),jDo=o(" (throws an error)."),qDo=l(),rt=a("div"),f(Ty.$$.fragment),GDo=l(),Hie=a("p"),ODo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XDo=l(),Pd=a("p"),VDo=o(`Note:
Loading a model from its configuration file does `),Uie=a("strong"),zDo=o("not"),WDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jie=a("code"),QDo=o("from_pretrained()"),HDo=o("to load the model weights."),UDo=l(),Yie=a("p"),JDo=o("Examples:"),YDo=l(),f(Fy.$$.fragment),KDo=l(),Ue=a("div"),f(Cy.$$.fragment),ZDo=l(),Kie=a("p"),ejo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ojo=l(),rn=a("p"),rjo=o("The model class to instantiate is selected based on the "),Zie=a("code"),tjo=o("model_type"),ajo=o(` property of the config object (either
passed as an argument or loaded from `),ede=a("code"),njo=o("pretrained_model_name_or_path"),sjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=a("code"),ljo=o("pretrained_model_name_or_path"),ijo=o(":"),djo=l(),rde=a("ul"),gv=a("li"),tde=a("strong"),cjo=o("vision-encoder-decoder"),fjo=o(" \u2014 "),Xj=a("a"),mjo=o("VisionEncoderDecoderModel"),gjo=o(" (Vision Encoder decoder model)"),hjo=l(),hv=a("p"),pjo=o("The model is set in evaluation mode by default using "),ade=a("code"),_jo=o("model.eval()"),ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nde=a("code"),bjo=o("model.train()"),vjo=l(),sde=a("p"),Tjo=o("Examples:"),Fjo=l(),f(My.$$.fragment),Vke=l(),$d=a("h2"),pv=a("a"),lde=a("span"),f(Ey.$$.fragment),Cjo=l(),ide=a("span"),Mjo=o("AutoModelForAudioClassification"),zke=l(),dr=a("div"),f(yy.$$.fragment),Ejo=l(),Id=a("p"),yjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dde=a("code"),wjo=o("from_pretrained()"),Ajo=o("class method or the "),cde=a("code"),Ljo=o("from_config()"),Bjo=o(`class
method.`),xjo=l(),wy=a("p"),kjo=o("This class cannot be instantiated directly using "),fde=a("code"),Rjo=o("__init__()"),Sjo=o(" (throws an error)."),Pjo=l(),tt=a("div"),f(Ay.$$.fragment),$jo=l(),mde=a("p"),Ijo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Njo=l(),Nd=a("p"),Djo=o(`Note:
Loading a model from its configuration file does `),gde=a("strong"),jjo=o("not"),qjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hde=a("code"),Gjo=o("from_pretrained()"),Ojo=o("to load the model weights."),Xjo=l(),pde=a("p"),Vjo=o("Examples:"),zjo=l(),f(Ly.$$.fragment),Wjo=l(),Je=a("div"),f(By.$$.fragment),Qjo=l(),_de=a("p"),Hjo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ujo=l(),tn=a("p"),Jjo=o("The model class to instantiate is selected based on the "),ude=a("code"),Yjo=o("model_type"),Kjo=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),Zjo=o("pretrained_model_name_or_path"),eqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=a("code"),oqo=o("pretrained_model_name_or_path"),rqo=o(":"),tqo=l(),ke=a("ul"),_v=a("li"),Tde=a("strong"),aqo=o("data2vec-audio"),nqo=o(" \u2014 "),Vj=a("a"),sqo=o("Data2VecAudioForSequenceClassification"),lqo=o(" (Data2VecAudio model)"),iqo=l(),uv=a("li"),Fde=a("strong"),dqo=o("hubert"),cqo=o(" \u2014 "),zj=a("a"),fqo=o("HubertForSequenceClassification"),mqo=o(" (Hubert model)"),gqo=l(),bv=a("li"),Cde=a("strong"),hqo=o("sew"),pqo=o(" \u2014 "),Wj=a("a"),_qo=o("SEWForSequenceClassification"),uqo=o(" (SEW model)"),bqo=l(),vv=a("li"),Mde=a("strong"),vqo=o("sew-d"),Tqo=o(" \u2014 "),Qj=a("a"),Fqo=o("SEWDForSequenceClassification"),Cqo=o(" (SEW-D model)"),Mqo=l(),Tv=a("li"),Ede=a("strong"),Eqo=o("unispeech"),yqo=o(" \u2014 "),Hj=a("a"),wqo=o("UniSpeechForSequenceClassification"),Aqo=o(" (UniSpeech model)"),Lqo=l(),Fv=a("li"),yde=a("strong"),Bqo=o("unispeech-sat"),xqo=o(" \u2014 "),Uj=a("a"),kqo=o("UniSpeechSatForSequenceClassification"),Rqo=o(" (UniSpeechSat model)"),Sqo=l(),Cv=a("li"),wde=a("strong"),Pqo=o("wav2vec2"),$qo=o(" \u2014 "),Jj=a("a"),Iqo=o("Wav2Vec2ForSequenceClassification"),Nqo=o(" (Wav2Vec2 model)"),Dqo=l(),Mv=a("li"),Ade=a("strong"),jqo=o("wavlm"),qqo=o(" \u2014 "),Yj=a("a"),Gqo=o("WavLMForSequenceClassification"),Oqo=o(" (WavLM model)"),Xqo=l(),Ev=a("p"),Vqo=o("The model is set in evaluation mode by default using "),Lde=a("code"),zqo=o("model.eval()"),Wqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=a("code"),Qqo=o("model.train()"),Hqo=l(),xde=a("p"),Uqo=o("Examples:"),Jqo=l(),f(xy.$$.fragment),Wke=l(),Dd=a("h2"),yv=a("a"),kde=a("span"),f(ky.$$.fragment),Yqo=l(),Rde=a("span"),Kqo=o("AutoModelForAudioFrameClassification"),Qke=l(),cr=a("div"),f(Ry.$$.fragment),Zqo=l(),jd=a("p"),eGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Sde=a("code"),oGo=o("from_pretrained()"),rGo=o("class method or the "),Pde=a("code"),tGo=o("from_config()"),aGo=o(`class
method.`),nGo=l(),Sy=a("p"),sGo=o("This class cannot be instantiated directly using "),$de=a("code"),lGo=o("__init__()"),iGo=o(" (throws an error)."),dGo=l(),at=a("div"),f(Py.$$.fragment),cGo=l(),Ide=a("p"),fGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),mGo=l(),qd=a("p"),gGo=o(`Note:
Loading a model from its configuration file does `),Nde=a("strong"),hGo=o("not"),pGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dde=a("code"),_Go=o("from_pretrained()"),uGo=o("to load the model weights."),bGo=l(),jde=a("p"),vGo=o("Examples:"),TGo=l(),f($y.$$.fragment),FGo=l(),Ye=a("div"),f(Iy.$$.fragment),CGo=l(),qde=a("p"),MGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),EGo=l(),an=a("p"),yGo=o("The model class to instantiate is selected based on the "),Gde=a("code"),wGo=o("model_type"),AGo=o(` property of the config object (either
passed as an argument or loaded from `),Ode=a("code"),LGo=o("pretrained_model_name_or_path"),BGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=a("code"),xGo=o("pretrained_model_name_or_path"),kGo=o(":"),RGo=l(),nn=a("ul"),wv=a("li"),Vde=a("strong"),SGo=o("data2vec-audio"),PGo=o(" \u2014 "),Kj=a("a"),$Go=o("Data2VecAudioForAudioFrameClassification"),IGo=o(" (Data2VecAudio model)"),NGo=l(),Av=a("li"),zde=a("strong"),DGo=o("unispeech-sat"),jGo=o(" \u2014 "),Zj=a("a"),qGo=o("UniSpeechSatForAudioFrameClassification"),GGo=o(" (UniSpeechSat model)"),OGo=l(),Lv=a("li"),Wde=a("strong"),XGo=o("wav2vec2"),VGo=o(" \u2014 "),eq=a("a"),zGo=o("Wav2Vec2ForAudioFrameClassification"),WGo=o(" (Wav2Vec2 model)"),QGo=l(),Bv=a("li"),Qde=a("strong"),HGo=o("wavlm"),UGo=o(" \u2014 "),oq=a("a"),JGo=o("WavLMForAudioFrameClassification"),YGo=o(" (WavLM model)"),KGo=l(),xv=a("p"),ZGo=o("The model is set in evaluation mode by default using "),Hde=a("code"),eOo=o("model.eval()"),oOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=a("code"),rOo=o("model.train()"),tOo=l(),Jde=a("p"),aOo=o("Examples:"),nOo=l(),f(Ny.$$.fragment),Hke=l(),Gd=a("h2"),kv=a("a"),Yde=a("span"),f(Dy.$$.fragment),sOo=l(),Kde=a("span"),lOo=o("AutoModelForCTC"),Uke=l(),fr=a("div"),f(jy.$$.fragment),iOo=l(),Od=a("p"),dOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Zde=a("code"),cOo=o("from_pretrained()"),fOo=o("class method or the "),ece=a("code"),mOo=o("from_config()"),gOo=o(`class
method.`),hOo=l(),qy=a("p"),pOo=o("This class cannot be instantiated directly using "),oce=a("code"),_Oo=o("__init__()"),uOo=o(" (throws an error)."),bOo=l(),nt=a("div"),f(Gy.$$.fragment),vOo=l(),rce=a("p"),TOo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),FOo=l(),Xd=a("p"),COo=o(`Note:
Loading a model from its configuration file does `),tce=a("strong"),MOo=o("not"),EOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=a("code"),yOo=o("from_pretrained()"),wOo=o("to load the model weights."),AOo=l(),nce=a("p"),LOo=o("Examples:"),BOo=l(),f(Oy.$$.fragment),xOo=l(),Ke=a("div"),f(Xy.$$.fragment),kOo=l(),sce=a("p"),ROo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),SOo=l(),sn=a("p"),POo=o("The model class to instantiate is selected based on the "),lce=a("code"),$Oo=o("model_type"),IOo=o(` property of the config object (either
passed as an argument or loaded from `),ice=a("code"),NOo=o("pretrained_model_name_or_path"),DOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=a("code"),jOo=o("pretrained_model_name_or_path"),qOo=o(":"),GOo=l(),Re=a("ul"),Rv=a("li"),cce=a("strong"),OOo=o("data2vec-audio"),XOo=o(" \u2014 "),rq=a("a"),VOo=o("Data2VecAudioForCTC"),zOo=o(" (Data2VecAudio model)"),WOo=l(),Sv=a("li"),fce=a("strong"),QOo=o("hubert"),HOo=o(" \u2014 "),tq=a("a"),UOo=o("HubertForCTC"),JOo=o(" (Hubert model)"),YOo=l(),Pv=a("li"),mce=a("strong"),KOo=o("sew"),ZOo=o(" \u2014 "),aq=a("a"),eXo=o("SEWForCTC"),oXo=o(" (SEW model)"),rXo=l(),$v=a("li"),gce=a("strong"),tXo=o("sew-d"),aXo=o(" \u2014 "),nq=a("a"),nXo=o("SEWDForCTC"),sXo=o(" (SEW-D model)"),lXo=l(),Iv=a("li"),hce=a("strong"),iXo=o("unispeech"),dXo=o(" \u2014 "),sq=a("a"),cXo=o("UniSpeechForCTC"),fXo=o(" (UniSpeech model)"),mXo=l(),Nv=a("li"),pce=a("strong"),gXo=o("unispeech-sat"),hXo=o(" \u2014 "),lq=a("a"),pXo=o("UniSpeechSatForCTC"),_Xo=o(" (UniSpeechSat model)"),uXo=l(),Dv=a("li"),_ce=a("strong"),bXo=o("wav2vec2"),vXo=o(" \u2014 "),iq=a("a"),TXo=o("Wav2Vec2ForCTC"),FXo=o(" (Wav2Vec2 model)"),CXo=l(),jv=a("li"),uce=a("strong"),MXo=o("wavlm"),EXo=o(" \u2014 "),dq=a("a"),yXo=o("WavLMForCTC"),wXo=o(" (WavLM model)"),AXo=l(),qv=a("p"),LXo=o("The model is set in evaluation mode by default using "),bce=a("code"),BXo=o("model.eval()"),xXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),kXo=o("model.train()"),RXo=l(),Tce=a("p"),SXo=o("Examples:"),PXo=l(),f(Vy.$$.fragment),Jke=l(),Vd=a("h2"),Gv=a("a"),Fce=a("span"),f(zy.$$.fragment),$Xo=l(),Cce=a("span"),IXo=o("AutoModelForSpeechSeq2Seq"),Yke=l(),mr=a("div"),f(Wy.$$.fragment),NXo=l(),zd=a("p"),DXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mce=a("code"),jXo=o("from_pretrained()"),qXo=o("class method or the "),Ece=a("code"),GXo=o("from_config()"),OXo=o(`class
method.`),XXo=l(),Qy=a("p"),VXo=o("This class cannot be instantiated directly using "),yce=a("code"),zXo=o("__init__()"),WXo=o(" (throws an error)."),QXo=l(),st=a("div"),f(Hy.$$.fragment),HXo=l(),wce=a("p"),UXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JXo=l(),Wd=a("p"),YXo=o(`Note:
Loading a model from its configuration file does `),Ace=a("strong"),KXo=o("not"),ZXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lce=a("code"),eVo=o("from_pretrained()"),oVo=o("to load the model weights."),rVo=l(),Bce=a("p"),tVo=o("Examples:"),aVo=l(),f(Uy.$$.fragment),nVo=l(),Ze=a("div"),f(Jy.$$.fragment),sVo=l(),xce=a("p"),lVo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iVo=l(),ln=a("p"),dVo=o("The model class to instantiate is selected based on the "),kce=a("code"),cVo=o("model_type"),fVo=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),mVo=o("pretrained_model_name_or_path"),gVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),hVo=o("pretrained_model_name_or_path"),pVo=o(":"),_Vo=l(),Yy=a("ul"),Ov=a("li"),Pce=a("strong"),uVo=o("speech-encoder-decoder"),bVo=o(" \u2014 "),cq=a("a"),vVo=o("SpeechEncoderDecoderModel"),TVo=o(" (Speech Encoder decoder model)"),FVo=l(),Xv=a("li"),$ce=a("strong"),CVo=o("speech_to_text"),MVo=o(" \u2014 "),fq=a("a"),EVo=o("Speech2TextForConditionalGeneration"),yVo=o(" (Speech2Text model)"),wVo=l(),Vv=a("p"),AVo=o("The model is set in evaluation mode by default using "),Ice=a("code"),LVo=o("model.eval()"),BVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),xVo=o("model.train()"),kVo=l(),Dce=a("p"),RVo=o("Examples:"),SVo=l(),f(Ky.$$.fragment),Kke=l(),Qd=a("h2"),zv=a("a"),jce=a("span"),f(Zy.$$.fragment),PVo=l(),qce=a("span"),$Vo=o("AutoModelForAudioXVector"),Zke=l(),gr=a("div"),f(ew.$$.fragment),IVo=l(),Hd=a("p"),NVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gce=a("code"),DVo=o("from_pretrained()"),jVo=o("class method or the "),Oce=a("code"),qVo=o("from_config()"),GVo=o(`class
method.`),OVo=l(),ow=a("p"),XVo=o("This class cannot be instantiated directly using "),Xce=a("code"),VVo=o("__init__()"),zVo=o(" (throws an error)."),WVo=l(),lt=a("div"),f(rw.$$.fragment),QVo=l(),Vce=a("p"),HVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),UVo=l(),Ud=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),zce=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=a("code"),ZVo=o("from_pretrained()"),ezo=o("to load the model weights."),ozo=l(),Qce=a("p"),rzo=o("Examples:"),tzo=l(),f(tw.$$.fragment),azo=l(),eo=a("div"),f(aw.$$.fragment),nzo=l(),Hce=a("p"),szo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lzo=l(),dn=a("p"),izo=o("The model class to instantiate is selected based on the "),Uce=a("code"),dzo=o("model_type"),czo=o(` property of the config object (either
passed as an argument or loaded from `),Jce=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=a("code"),gzo=o("pretrained_model_name_or_path"),hzo=o(":"),pzo=l(),cn=a("ul"),Wv=a("li"),Kce=a("strong"),_zo=o("data2vec-audio"),uzo=o(" \u2014 "),mq=a("a"),bzo=o("Data2VecAudioForXVector"),vzo=o(" (Data2VecAudio model)"),Tzo=l(),Qv=a("li"),Zce=a("strong"),Fzo=o("unispeech-sat"),Czo=o(" \u2014 "),gq=a("a"),Mzo=o("UniSpeechSatForXVector"),Ezo=o(" (UniSpeechSat model)"),yzo=l(),Hv=a("li"),efe=a("strong"),wzo=o("wav2vec2"),Azo=o(" \u2014 "),hq=a("a"),Lzo=o("Wav2Vec2ForXVector"),Bzo=o(" (Wav2Vec2 model)"),xzo=l(),Uv=a("li"),ofe=a("strong"),kzo=o("wavlm"),Rzo=o(" \u2014 "),pq=a("a"),Szo=o("WavLMForXVector"),Pzo=o(" (WavLM model)"),$zo=l(),Jv=a("p"),Izo=o("The model is set in evaluation mode by default using "),rfe=a("code"),Nzo=o("model.eval()"),Dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=a("code"),jzo=o("model.train()"),qzo=l(),afe=a("p"),Gzo=o("Examples:"),Ozo=l(),f(nw.$$.fragment),eRe=l(),Jd=a("h2"),Yv=a("a"),nfe=a("span"),f(sw.$$.fragment),Xzo=l(),sfe=a("span"),Vzo=o("AutoModelForMaskedImageModeling"),oRe=l(),hr=a("div"),f(lw.$$.fragment),zzo=l(),Yd=a("p"),Wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lfe=a("code"),Qzo=o("from_pretrained()"),Hzo=o("class method or the "),ife=a("code"),Uzo=o("from_config()"),Jzo=o(`class
method.`),Yzo=l(),iw=a("p"),Kzo=o("This class cannot be instantiated directly using "),dfe=a("code"),Zzo=o("__init__()"),eWo=o(" (throws an error)."),oWo=l(),it=a("div"),f(dw.$$.fragment),rWo=l(),cfe=a("p"),tWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),aWo=l(),Kd=a("p"),nWo=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),sWo=o("not"),lWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mfe=a("code"),iWo=o("from_pretrained()"),dWo=o("to load the model weights."),cWo=l(),gfe=a("p"),fWo=o("Examples:"),mWo=l(),f(cw.$$.fragment),gWo=l(),oo=a("div"),f(fw.$$.fragment),hWo=l(),hfe=a("p"),pWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_Wo=l(),fn=a("p"),uWo=o("The model class to instantiate is selected based on the "),pfe=a("code"),bWo=o("model_type"),vWo=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),TWo=o("pretrained_model_name_or_path"),FWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),CWo=o("pretrained_model_name_or_path"),MWo=o(":"),EWo=l(),Zd=a("ul"),Kv=a("li"),bfe=a("strong"),yWo=o("deit"),wWo=o(" \u2014 "),_q=a("a"),AWo=o("DeiTForMaskedImageModeling"),LWo=o(" (DeiT model)"),BWo=l(),Zv=a("li"),vfe=a("strong"),xWo=o("swin"),kWo=o(" \u2014 "),uq=a("a"),RWo=o("SwinForMaskedImageModeling"),SWo=o(" (Swin model)"),PWo=l(),eT=a("li"),Tfe=a("strong"),$Wo=o("vit"),IWo=o(" \u2014 "),bq=a("a"),NWo=o("ViTForMaskedImageModeling"),DWo=o(" (ViT model)"),jWo=l(),oT=a("p"),qWo=o("The model is set in evaluation mode by default using "),Ffe=a("code"),GWo=o("model.eval()"),OWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),XWo=o("model.train()"),VWo=l(),Mfe=a("p"),zWo=o("Examples:"),WWo=l(),f(mw.$$.fragment),rRe=l(),ec=a("h2"),rT=a("a"),Efe=a("span"),f(gw.$$.fragment),QWo=l(),yfe=a("span"),HWo=o("AutoModelForObjectDetection"),tRe=l(),pr=a("div"),f(hw.$$.fragment),UWo=l(),oc=a("p"),JWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wfe=a("code"),YWo=o("from_pretrained()"),KWo=o("class method or the "),Afe=a("code"),ZWo=o("from_config()"),eQo=o(`class
method.`),oQo=l(),pw=a("p"),rQo=o("This class cannot be instantiated directly using "),Lfe=a("code"),tQo=o("__init__()"),aQo=o(" (throws an error)."),nQo=l(),dt=a("div"),f(_w.$$.fragment),sQo=l(),Bfe=a("p"),lQo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),iQo=l(),rc=a("p"),dQo=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),cQo=o("not"),fQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kfe=a("code"),mQo=o("from_pretrained()"),gQo=o("to load the model weights."),hQo=l(),Rfe=a("p"),pQo=o("Examples:"),_Qo=l(),f(uw.$$.fragment),uQo=l(),ro=a("div"),f(bw.$$.fragment),bQo=l(),Sfe=a("p"),vQo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),TQo=l(),mn=a("p"),FQo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),CQo=o("model_type"),MQo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),EQo=o("pretrained_model_name_or_path"),yQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=a("code"),wQo=o("pretrained_model_name_or_path"),AQo=o(":"),LQo=l(),Nfe=a("ul"),tT=a("li"),Dfe=a("strong"),BQo=o("detr"),xQo=o(" \u2014 "),vq=a("a"),kQo=o("DetrForObjectDetection"),RQo=o(" (DETR model)"),SQo=l(),aT=a("p"),PQo=o("The model is set in evaluation mode by default using "),jfe=a("code"),$Qo=o("model.eval()"),IQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=a("code"),NQo=o("model.train()"),DQo=l(),Gfe=a("p"),jQo=o("Examples:"),qQo=l(),f(vw.$$.fragment),aRe=l(),tc=a("h2"),nT=a("a"),Ofe=a("span"),f(Tw.$$.fragment),GQo=l(),Xfe=a("span"),OQo=o("AutoModelForImageSegmentation"),nRe=l(),_r=a("div"),f(Fw.$$.fragment),XQo=l(),ac=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Vfe=a("code"),zQo=o("from_pretrained()"),WQo=o("class method or the "),zfe=a("code"),QQo=o("from_config()"),HQo=o(`class
method.`),UQo=l(),Cw=a("p"),JQo=o("This class cannot be instantiated directly using "),Wfe=a("code"),YQo=o("__init__()"),KQo=o(" (throws an error)."),ZQo=l(),ct=a("div"),f(Mw.$$.fragment),eHo=l(),Qfe=a("p"),oHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rHo=l(),nc=a("p"),tHo=o(`Note:
Loading a model from its configuration file does `),Hfe=a("strong"),aHo=o("not"),nHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ufe=a("code"),sHo=o("from_pretrained()"),lHo=o("to load the model weights."),iHo=l(),Jfe=a("p"),dHo=o("Examples:"),cHo=l(),f(Ew.$$.fragment),fHo=l(),to=a("div"),f(yw.$$.fragment),mHo=l(),Yfe=a("p"),gHo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hHo=l(),gn=a("p"),pHo=o("The model class to instantiate is selected based on the "),Kfe=a("code"),_Ho=o("model_type"),uHo=o(` property of the config object (either
passed as an argument or loaded from `),Zfe=a("code"),bHo=o("pretrained_model_name_or_path"),vHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=a("code"),THo=o("pretrained_model_name_or_path"),FHo=o(":"),CHo=l(),ome=a("ul"),sT=a("li"),rme=a("strong"),MHo=o("detr"),EHo=o(" \u2014 "),Tq=a("a"),yHo=o("DetrForSegmentation"),wHo=o(" (DETR model)"),AHo=l(),lT=a("p"),LHo=o("The model is set in evaluation mode by default using "),tme=a("code"),BHo=o("model.eval()"),xHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),kHo=o("model.train()"),RHo=l(),nme=a("p"),SHo=o("Examples:"),PHo=l(),f(ww.$$.fragment),sRe=l(),sc=a("h2"),iT=a("a"),sme=a("span"),f(Aw.$$.fragment),$Ho=l(),lme=a("span"),IHo=o("AutoModelForSemanticSegmentation"),lRe=l(),ur=a("div"),f(Lw.$$.fragment),NHo=l(),lc=a("p"),DHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ime=a("code"),jHo=o("from_pretrained()"),qHo=o("class method or the "),dme=a("code"),GHo=o("from_config()"),OHo=o(`class
method.`),XHo=l(),Bw=a("p"),VHo=o("This class cannot be instantiated directly using "),cme=a("code"),zHo=o("__init__()"),WHo=o(" (throws an error)."),QHo=l(),ft=a("div"),f(xw.$$.fragment),HHo=l(),fme=a("p"),UHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),JHo=l(),ic=a("p"),YHo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),KHo=o("not"),ZHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gme=a("code"),eUo=o("from_pretrained()"),oUo=o("to load the model weights."),rUo=l(),hme=a("p"),tUo=o("Examples:"),aUo=l(),f(kw.$$.fragment),nUo=l(),ao=a("div"),f(Rw.$$.fragment),sUo=l(),pme=a("p"),lUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),iUo=l(),hn=a("p"),dUo=o("The model class to instantiate is selected based on the "),_me=a("code"),cUo=o("model_type"),fUo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),mUo=o("pretrained_model_name_or_path"),gUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),hUo=o("pretrained_model_name_or_path"),pUo=o(":"),_Uo=l(),dc=a("ul"),dT=a("li"),vme=a("strong"),uUo=o("beit"),bUo=o(" \u2014 "),Fq=a("a"),vUo=o("BeitForSemanticSegmentation"),TUo=o(" (BEiT model)"),FUo=l(),cT=a("li"),Tme=a("strong"),CUo=o("convnext"),MUo=o(" \u2014 "),Cq=a("a"),EUo=o("ConvNextForSemanticSegmentation"),yUo=o(" (ConvNext model)"),wUo=l(),fT=a("li"),Fme=a("strong"),AUo=o("segformer"),LUo=o(" \u2014 "),Mq=a("a"),BUo=o("SegformerForSemanticSegmentation"),xUo=o(" (SegFormer model)"),kUo=l(),mT=a("p"),RUo=o("The model is set in evaluation mode by default using "),Cme=a("code"),SUo=o("model.eval()"),PUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=a("code"),$Uo=o("model.train()"),IUo=l(),Eme=a("p"),NUo=o("Examples:"),DUo=l(),f(Sw.$$.fragment),iRe=l(),cc=a("h2"),gT=a("a"),yme=a("span"),f(Pw.$$.fragment),jUo=l(),wme=a("span"),qUo=o("AutoModelForInstanceSegmentation"),dRe=l(),br=a("div"),f($w.$$.fragment),GUo=l(),fc=a("p"),OUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ame=a("code"),XUo=o("from_pretrained()"),VUo=o("class method or the "),Lme=a("code"),zUo=o("from_config()"),WUo=o(`class
method.`),QUo=l(),Iw=a("p"),HUo=o("This class cannot be instantiated directly using "),Bme=a("code"),UUo=o("__init__()"),JUo=o(" (throws an error)."),YUo=l(),mt=a("div"),f(Nw.$$.fragment),KUo=l(),xme=a("p"),ZUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eJo=l(),mc=a("p"),oJo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),rJo=o("not"),tJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rme=a("code"),aJo=o("from_pretrained()"),nJo=o("to load the model weights."),sJo=l(),Sme=a("p"),lJo=o("Examples:"),iJo=l(),f(Dw.$$.fragment),dJo=l(),no=a("div"),f(jw.$$.fragment),cJo=l(),Pme=a("p"),fJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mJo=l(),pn=a("p"),gJo=o("The model class to instantiate is selected based on the "),$me=a("code"),hJo=o("model_type"),pJo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),_Jo=o("pretrained_model_name_or_path"),uJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(":"),TJo=l(),Dme=a("ul"),hT=a("li"),jme=a("strong"),FJo=o("maskformer"),CJo=o(" \u2014 "),Eq=a("a"),MJo=o("MaskFormerForInstanceSegmentation"),EJo=o(" (MaskFormer model)"),yJo=l(),pT=a("p"),wJo=o("The model is set in evaluation mode by default using "),qme=a("code"),AJo=o("model.eval()"),LJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=a("code"),BJo=o("model.train()"),xJo=l(),Ome=a("p"),kJo=o("Examples:"),RJo=l(),f(qw.$$.fragment),cRe=l(),gc=a("h2"),_T=a("a"),Xme=a("span"),f(Gw.$$.fragment),SJo=l(),Vme=a("span"),PJo=o("TFAutoModel"),fRe=l(),vr=a("div"),f(Ow.$$.fragment),$Jo=l(),hc=a("p"),IJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zme=a("code"),NJo=o("from_pretrained()"),DJo=o("class method or the "),Wme=a("code"),jJo=o("from_config()"),qJo=o(`class
method.`),GJo=l(),Xw=a("p"),OJo=o("This class cannot be instantiated directly using "),Qme=a("code"),XJo=o("__init__()"),VJo=o(" (throws an error)."),zJo=l(),gt=a("div"),f(Vw.$$.fragment),WJo=l(),Hme=a("p"),QJo=o("Instantiates one of the base model classes of the library from a configuration."),HJo=l(),pc=a("p"),UJo=o(`Note:
Loading a model from its configuration file does `),Ume=a("strong"),JJo=o("not"),YJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jme=a("code"),KJo=o("from_pretrained()"),ZJo=o("to load the model weights."),eYo=l(),Yme=a("p"),oYo=o("Examples:"),rYo=l(),f(zw.$$.fragment),tYo=l(),ho=a("div"),f(Ww.$$.fragment),aYo=l(),Kme=a("p"),nYo=o("Instantiate one of the base model classes of the library from a pretrained model."),sYo=l(),_n=a("p"),lYo=o("The model class to instantiate is selected based on the "),Zme=a("code"),iYo=o("model_type"),dYo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),cYo=o("pretrained_model_name_or_path"),fYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),mYo=o("pretrained_model_name_or_path"),gYo=o(":"),hYo=l(),B=a("ul"),uT=a("li"),rge=a("strong"),pYo=o("albert"),_Yo=o(" \u2014 "),yq=a("a"),uYo=o("TFAlbertModel"),bYo=o(" (ALBERT model)"),vYo=l(),bT=a("li"),tge=a("strong"),TYo=o("bart"),FYo=o(" \u2014 "),wq=a("a"),CYo=o("TFBartModel"),MYo=o(" (BART model)"),EYo=l(),vT=a("li"),age=a("strong"),yYo=o("bert"),wYo=o(" \u2014 "),Aq=a("a"),AYo=o("TFBertModel"),LYo=o(" (BERT model)"),BYo=l(),TT=a("li"),nge=a("strong"),xYo=o("blenderbot"),kYo=o(" \u2014 "),Lq=a("a"),RYo=o("TFBlenderbotModel"),SYo=o(" (Blenderbot model)"),PYo=l(),FT=a("li"),sge=a("strong"),$Yo=o("blenderbot-small"),IYo=o(" \u2014 "),Bq=a("a"),NYo=o("TFBlenderbotSmallModel"),DYo=o(" (BlenderbotSmall model)"),jYo=l(),CT=a("li"),lge=a("strong"),qYo=o("camembert"),GYo=o(" \u2014 "),xq=a("a"),OYo=o("TFCamembertModel"),XYo=o(" (CamemBERT model)"),VYo=l(),MT=a("li"),ige=a("strong"),zYo=o("clip"),WYo=o(" \u2014 "),kq=a("a"),QYo=o("TFCLIPModel"),HYo=o(" (CLIP model)"),UYo=l(),ET=a("li"),dge=a("strong"),JYo=o("convbert"),YYo=o(" \u2014 "),Rq=a("a"),KYo=o("TFConvBertModel"),ZYo=o(" (ConvBERT model)"),eKo=l(),yT=a("li"),cge=a("strong"),oKo=o("convnext"),rKo=o(" \u2014 "),Sq=a("a"),tKo=o("TFConvNextModel"),aKo=o(" (ConvNext model)"),nKo=l(),wT=a("li"),fge=a("strong"),sKo=o("ctrl"),lKo=o(" \u2014 "),Pq=a("a"),iKo=o("TFCTRLModel"),dKo=o(" (CTRL model)"),cKo=l(),AT=a("li"),mge=a("strong"),fKo=o("deberta"),mKo=o(" \u2014 "),$q=a("a"),gKo=o("TFDebertaModel"),hKo=o(" (DeBERTa model)"),pKo=l(),LT=a("li"),gge=a("strong"),_Ko=o("deberta-v2"),uKo=o(" \u2014 "),Iq=a("a"),bKo=o("TFDebertaV2Model"),vKo=o(" (DeBERTa-v2 model)"),TKo=l(),BT=a("li"),hge=a("strong"),FKo=o("distilbert"),CKo=o(" \u2014 "),Nq=a("a"),MKo=o("TFDistilBertModel"),EKo=o(" (DistilBERT model)"),yKo=l(),xT=a("li"),pge=a("strong"),wKo=o("dpr"),AKo=o(" \u2014 "),Dq=a("a"),LKo=o("TFDPRQuestionEncoder"),BKo=o(" (DPR model)"),xKo=l(),kT=a("li"),_ge=a("strong"),kKo=o("electra"),RKo=o(" \u2014 "),jq=a("a"),SKo=o("TFElectraModel"),PKo=o(" (ELECTRA model)"),$Ko=l(),RT=a("li"),uge=a("strong"),IKo=o("flaubert"),NKo=o(" \u2014 "),qq=a("a"),DKo=o("TFFlaubertModel"),jKo=o(" (FlauBERT model)"),qKo=l(),Gs=a("li"),bge=a("strong"),GKo=o("funnel"),OKo=o(" \u2014 "),Gq=a("a"),XKo=o("TFFunnelModel"),VKo=o(" or "),Oq=a("a"),zKo=o("TFFunnelBaseModel"),WKo=o(" (Funnel Transformer model)"),QKo=l(),ST=a("li"),vge=a("strong"),HKo=o("gpt2"),UKo=o(" \u2014 "),Xq=a("a"),JKo=o("TFGPT2Model"),YKo=o(" (OpenAI GPT-2 model)"),KKo=l(),PT=a("li"),Tge=a("strong"),ZKo=o("hubert"),eZo=o(" \u2014 "),Vq=a("a"),oZo=o("TFHubertModel"),rZo=o(" (Hubert model)"),tZo=l(),$T=a("li"),Fge=a("strong"),aZo=o("layoutlm"),nZo=o(" \u2014 "),zq=a("a"),sZo=o("TFLayoutLMModel"),lZo=o(" (LayoutLM model)"),iZo=l(),IT=a("li"),Cge=a("strong"),dZo=o("led"),cZo=o(" \u2014 "),Wq=a("a"),fZo=o("TFLEDModel"),mZo=o(" (LED model)"),gZo=l(),NT=a("li"),Mge=a("strong"),hZo=o("longformer"),pZo=o(" \u2014 "),Qq=a("a"),_Zo=o("TFLongformerModel"),uZo=o(" (Longformer model)"),bZo=l(),DT=a("li"),Ege=a("strong"),vZo=o("lxmert"),TZo=o(" \u2014 "),Hq=a("a"),FZo=o("TFLxmertModel"),CZo=o(" (LXMERT model)"),MZo=l(),jT=a("li"),yge=a("strong"),EZo=o("marian"),yZo=o(" \u2014 "),Uq=a("a"),wZo=o("TFMarianModel"),AZo=o(" (Marian model)"),LZo=l(),qT=a("li"),wge=a("strong"),BZo=o("mbart"),xZo=o(" \u2014 "),Jq=a("a"),kZo=o("TFMBartModel"),RZo=o(" (mBART model)"),SZo=l(),GT=a("li"),Age=a("strong"),PZo=o("mobilebert"),$Zo=o(" \u2014 "),Yq=a("a"),IZo=o("TFMobileBertModel"),NZo=o(" (MobileBERT model)"),DZo=l(),OT=a("li"),Lge=a("strong"),jZo=o("mpnet"),qZo=o(" \u2014 "),Kq=a("a"),GZo=o("TFMPNetModel"),OZo=o(" (MPNet model)"),XZo=l(),XT=a("li"),Bge=a("strong"),VZo=o("mt5"),zZo=o(" \u2014 "),Zq=a("a"),WZo=o("TFMT5Model"),QZo=o(" (mT5 model)"),HZo=l(),VT=a("li"),xge=a("strong"),UZo=o("openai-gpt"),JZo=o(" \u2014 "),eG=a("a"),YZo=o("TFOpenAIGPTModel"),KZo=o(" (OpenAI GPT model)"),ZZo=l(),zT=a("li"),kge=a("strong"),eer=o("pegasus"),oer=o(" \u2014 "),oG=a("a"),rer=o("TFPegasusModel"),ter=o(" (Pegasus model)"),aer=l(),WT=a("li"),Rge=a("strong"),ner=o("rembert"),ser=o(" \u2014 "),rG=a("a"),ler=o("TFRemBertModel"),ier=o(" (RemBERT model)"),der=l(),QT=a("li"),Sge=a("strong"),cer=o("roberta"),fer=o(" \u2014 "),tG=a("a"),mer=o("TFRobertaModel"),ger=o(" (RoBERTa model)"),her=l(),HT=a("li"),Pge=a("strong"),per=o("roformer"),_er=o(" \u2014 "),aG=a("a"),uer=o("TFRoFormerModel"),ber=o(" (RoFormer model)"),ver=l(),UT=a("li"),$ge=a("strong"),Ter=o("speech_to_text"),Fer=o(" \u2014 "),nG=a("a"),Cer=o("TFSpeech2TextModel"),Mer=o(" (Speech2Text model)"),Eer=l(),JT=a("li"),Ige=a("strong"),yer=o("t5"),wer=o(" \u2014 "),sG=a("a"),Aer=o("TFT5Model"),Ler=o(" (T5 model)"),Ber=l(),YT=a("li"),Nge=a("strong"),xer=o("tapas"),ker=o(" \u2014 "),lG=a("a"),Rer=o("TFTapasModel"),Ser=o(" (TAPAS model)"),Per=l(),KT=a("li"),Dge=a("strong"),$er=o("transfo-xl"),Ier=o(" \u2014 "),iG=a("a"),Ner=o("TFTransfoXLModel"),Der=o(" (Transformer-XL model)"),jer=l(),ZT=a("li"),jge=a("strong"),qer=o("vit"),Ger=o(" \u2014 "),dG=a("a"),Oer=o("TFViTModel"),Xer=o(" (ViT model)"),Ver=l(),e7=a("li"),qge=a("strong"),zer=o("wav2vec2"),Wer=o(" \u2014 "),cG=a("a"),Qer=o("TFWav2Vec2Model"),Her=o(" (Wav2Vec2 model)"),Uer=l(),o7=a("li"),Gge=a("strong"),Jer=o("xlm"),Yer=o(" \u2014 "),fG=a("a"),Ker=o("TFXLMModel"),Zer=o(" (XLM model)"),eor=l(),r7=a("li"),Oge=a("strong"),oor=o("xlm-roberta"),ror=o(" \u2014 "),mG=a("a"),tor=o("TFXLMRobertaModel"),aor=o(" (XLM-RoBERTa model)"),nor=l(),t7=a("li"),Xge=a("strong"),sor=o("xlnet"),lor=o(" \u2014 "),gG=a("a"),ior=o("TFXLNetModel"),dor=o(" (XLNet model)"),cor=l(),Vge=a("p"),mor=o("Examples:"),gor=l(),f(Qw.$$.fragment),mRe=l(),_c=a("h2"),a7=a("a"),zge=a("span"),f(Hw.$$.fragment),hor=l(),Wge=a("span"),por=o("TFAutoModelForPreTraining"),gRe=l(),Tr=a("div"),f(Uw.$$.fragment),_or=l(),uc=a("p"),uor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qge=a("code"),bor=o("from_pretrained()"),vor=o("class method or the "),Hge=a("code"),Tor=o("from_config()"),For=o(`class
method.`),Cor=l(),Jw=a("p"),Mor=o("This class cannot be instantiated directly using "),Uge=a("code"),Eor=o("__init__()"),yor=o(" (throws an error)."),wor=l(),ht=a("div"),f(Yw.$$.fragment),Aor=l(),Jge=a("p"),Lor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Bor=l(),bc=a("p"),xor=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),kor=o("not"),Ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kge=a("code"),Sor=o("from_pretrained()"),Por=o("to load the model weights."),$or=l(),Zge=a("p"),Ior=o("Examples:"),Nor=l(),f(Kw.$$.fragment),Dor=l(),po=a("div"),f(Zw.$$.fragment),jor=l(),ehe=a("p"),qor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gor=l(),un=a("p"),Oor=o("The model class to instantiate is selected based on the "),ohe=a("code"),Xor=o("model_type"),Vor=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),zor=o("pretrained_model_name_or_path"),Wor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),Qor=o("pretrained_model_name_or_path"),Hor=o(":"),Uor=l(),H=a("ul"),n7=a("li"),ahe=a("strong"),Jor=o("albert"),Yor=o(" \u2014 "),hG=a("a"),Kor=o("TFAlbertForPreTraining"),Zor=o(" (ALBERT model)"),err=l(),s7=a("li"),nhe=a("strong"),orr=o("bart"),rrr=o(" \u2014 "),pG=a("a"),trr=o("TFBartForConditionalGeneration"),arr=o(" (BART model)"),nrr=l(),l7=a("li"),she=a("strong"),srr=o("bert"),lrr=o(" \u2014 "),_G=a("a"),irr=o("TFBertForPreTraining"),drr=o(" (BERT model)"),crr=l(),i7=a("li"),lhe=a("strong"),frr=o("camembert"),mrr=o(" \u2014 "),uG=a("a"),grr=o("TFCamembertForMaskedLM"),hrr=o(" (CamemBERT model)"),prr=l(),d7=a("li"),ihe=a("strong"),_rr=o("ctrl"),urr=o(" \u2014 "),bG=a("a"),brr=o("TFCTRLLMHeadModel"),vrr=o(" (CTRL model)"),Trr=l(),c7=a("li"),dhe=a("strong"),Frr=o("distilbert"),Crr=o(" \u2014 "),vG=a("a"),Mrr=o("TFDistilBertForMaskedLM"),Err=o(" (DistilBERT model)"),yrr=l(),f7=a("li"),che=a("strong"),wrr=o("electra"),Arr=o(" \u2014 "),TG=a("a"),Lrr=o("TFElectraForPreTraining"),Brr=o(" (ELECTRA model)"),xrr=l(),m7=a("li"),fhe=a("strong"),krr=o("flaubert"),Rrr=o(" \u2014 "),FG=a("a"),Srr=o("TFFlaubertWithLMHeadModel"),Prr=o(" (FlauBERT model)"),$rr=l(),g7=a("li"),mhe=a("strong"),Irr=o("funnel"),Nrr=o(" \u2014 "),CG=a("a"),Drr=o("TFFunnelForPreTraining"),jrr=o(" (Funnel Transformer model)"),qrr=l(),h7=a("li"),ghe=a("strong"),Grr=o("gpt2"),Orr=o(" \u2014 "),MG=a("a"),Xrr=o("TFGPT2LMHeadModel"),Vrr=o(" (OpenAI GPT-2 model)"),zrr=l(),p7=a("li"),hhe=a("strong"),Wrr=o("layoutlm"),Qrr=o(" \u2014 "),EG=a("a"),Hrr=o("TFLayoutLMForMaskedLM"),Urr=o(" (LayoutLM model)"),Jrr=l(),_7=a("li"),phe=a("strong"),Yrr=o("lxmert"),Krr=o(" \u2014 "),yG=a("a"),Zrr=o("TFLxmertForPreTraining"),etr=o(" (LXMERT model)"),otr=l(),u7=a("li"),_he=a("strong"),rtr=o("mobilebert"),ttr=o(" \u2014 "),wG=a("a"),atr=o("TFMobileBertForPreTraining"),ntr=o(" (MobileBERT model)"),str=l(),b7=a("li"),uhe=a("strong"),ltr=o("mpnet"),itr=o(" \u2014 "),AG=a("a"),dtr=o("TFMPNetForMaskedLM"),ctr=o(" (MPNet model)"),ftr=l(),v7=a("li"),bhe=a("strong"),mtr=o("openai-gpt"),gtr=o(" \u2014 "),LG=a("a"),htr=o("TFOpenAIGPTLMHeadModel"),ptr=o(" (OpenAI GPT model)"),_tr=l(),T7=a("li"),vhe=a("strong"),utr=o("roberta"),btr=o(" \u2014 "),BG=a("a"),vtr=o("TFRobertaForMaskedLM"),Ttr=o(" (RoBERTa model)"),Ftr=l(),F7=a("li"),The=a("strong"),Ctr=o("t5"),Mtr=o(" \u2014 "),xG=a("a"),Etr=o("TFT5ForConditionalGeneration"),ytr=o(" (T5 model)"),wtr=l(),C7=a("li"),Fhe=a("strong"),Atr=o("tapas"),Ltr=o(" \u2014 "),kG=a("a"),Btr=o("TFTapasForMaskedLM"),xtr=o(" (TAPAS model)"),ktr=l(),M7=a("li"),Che=a("strong"),Rtr=o("transfo-xl"),Str=o(" \u2014 "),RG=a("a"),Ptr=o("TFTransfoXLLMHeadModel"),$tr=o(" (Transformer-XL model)"),Itr=l(),E7=a("li"),Mhe=a("strong"),Ntr=o("xlm"),Dtr=o(" \u2014 "),SG=a("a"),jtr=o("TFXLMWithLMHeadModel"),qtr=o(" (XLM model)"),Gtr=l(),y7=a("li"),Ehe=a("strong"),Otr=o("xlm-roberta"),Xtr=o(" \u2014 "),PG=a("a"),Vtr=o("TFXLMRobertaForMaskedLM"),ztr=o(" (XLM-RoBERTa model)"),Wtr=l(),w7=a("li"),yhe=a("strong"),Qtr=o("xlnet"),Htr=o(" \u2014 "),$G=a("a"),Utr=o("TFXLNetLMHeadModel"),Jtr=o(" (XLNet model)"),Ytr=l(),whe=a("p"),Ktr=o("Examples:"),Ztr=l(),f(e6.$$.fragment),hRe=l(),vc=a("h2"),A7=a("a"),Ahe=a("span"),f(o6.$$.fragment),ear=l(),Lhe=a("span"),oar=o("TFAutoModelForCausalLM"),pRe=l(),Fr=a("div"),f(r6.$$.fragment),rar=l(),Tc=a("p"),tar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bhe=a("code"),aar=o("from_pretrained()"),nar=o("class method or the "),xhe=a("code"),sar=o("from_config()"),lar=o(`class
method.`),iar=l(),t6=a("p"),dar=o("This class cannot be instantiated directly using "),khe=a("code"),car=o("__init__()"),far=o(" (throws an error)."),mar=l(),pt=a("div"),f(a6.$$.fragment),gar=l(),Rhe=a("p"),har=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),par=l(),Fc=a("p"),_ar=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),uar=o("not"),bar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Phe=a("code"),Tar=o("from_pretrained()"),Far=o("to load the model weights."),Car=l(),$he=a("p"),Mar=o("Examples:"),Ear=l(),f(n6.$$.fragment),yar=l(),_o=a("div"),f(s6.$$.fragment),war=l(),Ihe=a("p"),Aar=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lar=l(),bn=a("p"),Bar=o("The model class to instantiate is selected based on the "),Nhe=a("code"),xar=o("model_type"),kar=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),Rar=o("pretrained_model_name_or_path"),Sar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),Par=o("pretrained_model_name_or_path"),$ar=o(":"),Iar=l(),ge=a("ul"),L7=a("li"),qhe=a("strong"),Nar=o("bert"),Dar=o(" \u2014 "),IG=a("a"),jar=o("TFBertLMHeadModel"),qar=o(" (BERT model)"),Gar=l(),B7=a("li"),Ghe=a("strong"),Oar=o("camembert"),Xar=o(" \u2014 "),NG=a("a"),Var=o("TFCamembertForCausalLM"),zar=o(" (CamemBERT model)"),War=l(),x7=a("li"),Ohe=a("strong"),Qar=o("ctrl"),Har=o(" \u2014 "),DG=a("a"),Uar=o("TFCTRLLMHeadModel"),Jar=o(" (CTRL model)"),Yar=l(),k7=a("li"),Xhe=a("strong"),Kar=o("gpt2"),Zar=o(" \u2014 "),jG=a("a"),enr=o("TFGPT2LMHeadModel"),onr=o(" (OpenAI GPT-2 model)"),rnr=l(),R7=a("li"),Vhe=a("strong"),tnr=o("openai-gpt"),anr=o(" \u2014 "),qG=a("a"),nnr=o("TFOpenAIGPTLMHeadModel"),snr=o(" (OpenAI GPT model)"),lnr=l(),S7=a("li"),zhe=a("strong"),inr=o("rembert"),dnr=o(" \u2014 "),GG=a("a"),cnr=o("TFRemBertForCausalLM"),fnr=o(" (RemBERT model)"),mnr=l(),P7=a("li"),Whe=a("strong"),gnr=o("roberta"),hnr=o(" \u2014 "),OG=a("a"),pnr=o("TFRobertaForCausalLM"),_nr=o(" (RoBERTa model)"),unr=l(),$7=a("li"),Qhe=a("strong"),bnr=o("roformer"),vnr=o(" \u2014 "),XG=a("a"),Tnr=o("TFRoFormerForCausalLM"),Fnr=o(" (RoFormer model)"),Cnr=l(),I7=a("li"),Hhe=a("strong"),Mnr=o("transfo-xl"),Enr=o(" \u2014 "),VG=a("a"),ynr=o("TFTransfoXLLMHeadModel"),wnr=o(" (Transformer-XL model)"),Anr=l(),N7=a("li"),Uhe=a("strong"),Lnr=o("xlm"),Bnr=o(" \u2014 "),zG=a("a"),xnr=o("TFXLMWithLMHeadModel"),knr=o(" (XLM model)"),Rnr=l(),D7=a("li"),Jhe=a("strong"),Snr=o("xlnet"),Pnr=o(" \u2014 "),WG=a("a"),$nr=o("TFXLNetLMHeadModel"),Inr=o(" (XLNet model)"),Nnr=l(),Yhe=a("p"),Dnr=o("Examples:"),jnr=l(),f(l6.$$.fragment),_Re=l(),Cc=a("h2"),j7=a("a"),Khe=a("span"),f(i6.$$.fragment),qnr=l(),Zhe=a("span"),Gnr=o("TFAutoModelForImageClassification"),uRe=l(),Cr=a("div"),f(d6.$$.fragment),Onr=l(),Mc=a("p"),Xnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),epe=a("code"),Vnr=o("from_pretrained()"),znr=o("class method or the "),ope=a("code"),Wnr=o("from_config()"),Qnr=o(`class
method.`),Hnr=l(),c6=a("p"),Unr=o("This class cannot be instantiated directly using "),rpe=a("code"),Jnr=o("__init__()"),Ynr=o(" (throws an error)."),Knr=l(),_t=a("div"),f(f6.$$.fragment),Znr=l(),tpe=a("p"),esr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),osr=l(),Ec=a("p"),rsr=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),tsr=o("not"),asr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=a("code"),nsr=o("from_pretrained()"),ssr=o("to load the model weights."),lsr=l(),spe=a("p"),isr=o("Examples:"),dsr=l(),f(m6.$$.fragment),csr=l(),uo=a("div"),f(g6.$$.fragment),fsr=l(),lpe=a("p"),msr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gsr=l(),vn=a("p"),hsr=o("The model class to instantiate is selected based on the "),ipe=a("code"),psr=o("model_type"),_sr=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),usr=o("pretrained_model_name_or_path"),bsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),vsr=o("pretrained_model_name_or_path"),Tsr=o(":"),Fsr=l(),h6=a("ul"),q7=a("li"),fpe=a("strong"),Csr=o("convnext"),Msr=o(" \u2014 "),QG=a("a"),Esr=o("TFConvNextForImageClassification"),ysr=o(" (ConvNext model)"),wsr=l(),G7=a("li"),mpe=a("strong"),Asr=o("vit"),Lsr=o(" \u2014 "),HG=a("a"),Bsr=o("TFViTForImageClassification"),xsr=o(" (ViT model)"),ksr=l(),gpe=a("p"),Rsr=o("Examples:"),Ssr=l(),f(p6.$$.fragment),bRe=l(),yc=a("h2"),O7=a("a"),hpe=a("span"),f(_6.$$.fragment),Psr=l(),ppe=a("span"),$sr=o("TFAutoModelForMaskedLM"),vRe=l(),Mr=a("div"),f(u6.$$.fragment),Isr=l(),wc=a("p"),Nsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_pe=a("code"),Dsr=o("from_pretrained()"),jsr=o("class method or the "),upe=a("code"),qsr=o("from_config()"),Gsr=o(`class
method.`),Osr=l(),b6=a("p"),Xsr=o("This class cannot be instantiated directly using "),bpe=a("code"),Vsr=o("__init__()"),zsr=o(" (throws an error)."),Wsr=l(),ut=a("div"),f(v6.$$.fragment),Qsr=l(),vpe=a("p"),Hsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Usr=l(),Ac=a("p"),Jsr=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),Ysr=o("not"),Ksr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=a("code"),Zsr=o("from_pretrained()"),elr=o("to load the model weights."),olr=l(),Cpe=a("p"),rlr=o("Examples:"),tlr=l(),f(T6.$$.fragment),alr=l(),bo=a("div"),f(F6.$$.fragment),nlr=l(),Mpe=a("p"),slr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),llr=l(),Tn=a("p"),ilr=o("The model class to instantiate is selected based on the "),Epe=a("code"),dlr=o("model_type"),clr=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),flr=o("pretrained_model_name_or_path"),mlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),glr=o("pretrained_model_name_or_path"),hlr=o(":"),plr=l(),J=a("ul"),X7=a("li"),Ape=a("strong"),_lr=o("albert"),ulr=o(" \u2014 "),UG=a("a"),blr=o("TFAlbertForMaskedLM"),vlr=o(" (ALBERT model)"),Tlr=l(),V7=a("li"),Lpe=a("strong"),Flr=o("bert"),Clr=o(" \u2014 "),JG=a("a"),Mlr=o("TFBertForMaskedLM"),Elr=o(" (BERT model)"),ylr=l(),z7=a("li"),Bpe=a("strong"),wlr=o("camembert"),Alr=o(" \u2014 "),YG=a("a"),Llr=o("TFCamembertForMaskedLM"),Blr=o(" (CamemBERT model)"),xlr=l(),W7=a("li"),xpe=a("strong"),klr=o("convbert"),Rlr=o(" \u2014 "),KG=a("a"),Slr=o("TFConvBertForMaskedLM"),Plr=o(" (ConvBERT model)"),$lr=l(),Q7=a("li"),kpe=a("strong"),Ilr=o("deberta"),Nlr=o(" \u2014 "),ZG=a("a"),Dlr=o("TFDebertaForMaskedLM"),jlr=o(" (DeBERTa model)"),qlr=l(),H7=a("li"),Rpe=a("strong"),Glr=o("deberta-v2"),Olr=o(" \u2014 "),eO=a("a"),Xlr=o("TFDebertaV2ForMaskedLM"),Vlr=o(" (DeBERTa-v2 model)"),zlr=l(),U7=a("li"),Spe=a("strong"),Wlr=o("distilbert"),Qlr=o(" \u2014 "),oO=a("a"),Hlr=o("TFDistilBertForMaskedLM"),Ulr=o(" (DistilBERT model)"),Jlr=l(),J7=a("li"),Ppe=a("strong"),Ylr=o("electra"),Klr=o(" \u2014 "),rO=a("a"),Zlr=o("TFElectraForMaskedLM"),eir=o(" (ELECTRA model)"),oir=l(),Y7=a("li"),$pe=a("strong"),rir=o("flaubert"),tir=o(" \u2014 "),tO=a("a"),air=o("TFFlaubertWithLMHeadModel"),nir=o(" (FlauBERT model)"),sir=l(),K7=a("li"),Ipe=a("strong"),lir=o("funnel"),iir=o(" \u2014 "),aO=a("a"),dir=o("TFFunnelForMaskedLM"),cir=o(" (Funnel Transformer model)"),fir=l(),Z7=a("li"),Npe=a("strong"),mir=o("layoutlm"),gir=o(" \u2014 "),nO=a("a"),hir=o("TFLayoutLMForMaskedLM"),pir=o(" (LayoutLM model)"),_ir=l(),e8=a("li"),Dpe=a("strong"),uir=o("longformer"),bir=o(" \u2014 "),sO=a("a"),vir=o("TFLongformerForMaskedLM"),Tir=o(" (Longformer model)"),Fir=l(),o8=a("li"),jpe=a("strong"),Cir=o("mobilebert"),Mir=o(" \u2014 "),lO=a("a"),Eir=o("TFMobileBertForMaskedLM"),yir=o(" (MobileBERT model)"),wir=l(),r8=a("li"),qpe=a("strong"),Air=o("mpnet"),Lir=o(" \u2014 "),iO=a("a"),Bir=o("TFMPNetForMaskedLM"),xir=o(" (MPNet model)"),kir=l(),t8=a("li"),Gpe=a("strong"),Rir=o("rembert"),Sir=o(" \u2014 "),dO=a("a"),Pir=o("TFRemBertForMaskedLM"),$ir=o(" (RemBERT model)"),Iir=l(),a8=a("li"),Ope=a("strong"),Nir=o("roberta"),Dir=o(" \u2014 "),cO=a("a"),jir=o("TFRobertaForMaskedLM"),qir=o(" (RoBERTa model)"),Gir=l(),n8=a("li"),Xpe=a("strong"),Oir=o("roformer"),Xir=o(" \u2014 "),fO=a("a"),Vir=o("TFRoFormerForMaskedLM"),zir=o(" (RoFormer model)"),Wir=l(),s8=a("li"),Vpe=a("strong"),Qir=o("tapas"),Hir=o(" \u2014 "),mO=a("a"),Uir=o("TFTapasForMaskedLM"),Jir=o(" (TAPAS model)"),Yir=l(),l8=a("li"),zpe=a("strong"),Kir=o("xlm"),Zir=o(" \u2014 "),gO=a("a"),edr=o("TFXLMWithLMHeadModel"),odr=o(" (XLM model)"),rdr=l(),i8=a("li"),Wpe=a("strong"),tdr=o("xlm-roberta"),adr=o(" \u2014 "),hO=a("a"),ndr=o("TFXLMRobertaForMaskedLM"),sdr=o(" (XLM-RoBERTa model)"),ldr=l(),Qpe=a("p"),idr=o("Examples:"),ddr=l(),f(C6.$$.fragment),TRe=l(),Lc=a("h2"),d8=a("a"),Hpe=a("span"),f(M6.$$.fragment),cdr=l(),Upe=a("span"),fdr=o("TFAutoModelForSeq2SeqLM"),FRe=l(),Er=a("div"),f(E6.$$.fragment),mdr=l(),Bc=a("p"),gdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Jpe=a("code"),hdr=o("from_pretrained()"),pdr=o("class method or the "),Ype=a("code"),_dr=o("from_config()"),udr=o(`class
method.`),bdr=l(),y6=a("p"),vdr=o("This class cannot be instantiated directly using "),Kpe=a("code"),Tdr=o("__init__()"),Fdr=o(" (throws an error)."),Cdr=l(),bt=a("div"),f(w6.$$.fragment),Mdr=l(),Zpe=a("p"),Edr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ydr=l(),xc=a("p"),wdr=o(`Note:
Loading a model from its configuration file does `),e_e=a("strong"),Adr=o("not"),Ldr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o_e=a("code"),Bdr=o("from_pretrained()"),xdr=o("to load the model weights."),kdr=l(),r_e=a("p"),Rdr=o("Examples:"),Sdr=l(),f(A6.$$.fragment),Pdr=l(),vo=a("div"),f(L6.$$.fragment),$dr=l(),t_e=a("p"),Idr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ndr=l(),Fn=a("p"),Ddr=o("The model class to instantiate is selected based on the "),a_e=a("code"),jdr=o("model_type"),qdr=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),Gdr=o("pretrained_model_name_or_path"),Odr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),Xdr=o("pretrained_model_name_or_path"),Vdr=o(":"),zdr=l(),_e=a("ul"),c8=a("li"),l_e=a("strong"),Wdr=o("bart"),Qdr=o(" \u2014 "),pO=a("a"),Hdr=o("TFBartForConditionalGeneration"),Udr=o(" (BART model)"),Jdr=l(),f8=a("li"),i_e=a("strong"),Ydr=o("blenderbot"),Kdr=o(" \u2014 "),_O=a("a"),Zdr=o("TFBlenderbotForConditionalGeneration"),ecr=o(" (Blenderbot model)"),ocr=l(),m8=a("li"),d_e=a("strong"),rcr=o("blenderbot-small"),tcr=o(" \u2014 "),uO=a("a"),acr=o("TFBlenderbotSmallForConditionalGeneration"),ncr=o(" (BlenderbotSmall model)"),scr=l(),g8=a("li"),c_e=a("strong"),lcr=o("encoder-decoder"),icr=o(" \u2014 "),bO=a("a"),dcr=o("TFEncoderDecoderModel"),ccr=o(" (Encoder decoder model)"),fcr=l(),h8=a("li"),f_e=a("strong"),mcr=o("led"),gcr=o(" \u2014 "),vO=a("a"),hcr=o("TFLEDForConditionalGeneration"),pcr=o(" (LED model)"),_cr=l(),p8=a("li"),m_e=a("strong"),ucr=o("marian"),bcr=o(" \u2014 "),TO=a("a"),vcr=o("TFMarianMTModel"),Tcr=o(" (Marian model)"),Fcr=l(),_8=a("li"),g_e=a("strong"),Ccr=o("mbart"),Mcr=o(" \u2014 "),FO=a("a"),Ecr=o("TFMBartForConditionalGeneration"),ycr=o(" (mBART model)"),wcr=l(),u8=a("li"),h_e=a("strong"),Acr=o("mt5"),Lcr=o(" \u2014 "),CO=a("a"),Bcr=o("TFMT5ForConditionalGeneration"),xcr=o(" (mT5 model)"),kcr=l(),b8=a("li"),p_e=a("strong"),Rcr=o("pegasus"),Scr=o(" \u2014 "),MO=a("a"),Pcr=o("TFPegasusForConditionalGeneration"),$cr=o(" (Pegasus model)"),Icr=l(),v8=a("li"),__e=a("strong"),Ncr=o("t5"),Dcr=o(" \u2014 "),EO=a("a"),jcr=o("TFT5ForConditionalGeneration"),qcr=o(" (T5 model)"),Gcr=l(),u_e=a("p"),Ocr=o("Examples:"),Xcr=l(),f(B6.$$.fragment),CRe=l(),kc=a("h2"),T8=a("a"),b_e=a("span"),f(x6.$$.fragment),Vcr=l(),v_e=a("span"),zcr=o("TFAutoModelForSequenceClassification"),MRe=l(),yr=a("div"),f(k6.$$.fragment),Wcr=l(),Rc=a("p"),Qcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T_e=a("code"),Hcr=o("from_pretrained()"),Ucr=o("class method or the "),F_e=a("code"),Jcr=o("from_config()"),Ycr=o(`class
method.`),Kcr=l(),R6=a("p"),Zcr=o("This class cannot be instantiated directly using "),C_e=a("code"),efr=o("__init__()"),ofr=o(" (throws an error)."),rfr=l(),vt=a("div"),f(S6.$$.fragment),tfr=l(),M_e=a("p"),afr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nfr=l(),Sc=a("p"),sfr=o(`Note:
Loading a model from its configuration file does `),E_e=a("strong"),lfr=o("not"),ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y_e=a("code"),dfr=o("from_pretrained()"),cfr=o("to load the model weights."),ffr=l(),w_e=a("p"),mfr=o("Examples:"),gfr=l(),f(P6.$$.fragment),hfr=l(),To=a("div"),f($6.$$.fragment),pfr=l(),A_e=a("p"),_fr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ufr=l(),Cn=a("p"),bfr=o("The model class to instantiate is selected based on the "),L_e=a("code"),vfr=o("model_type"),Tfr=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),Ffr=o("pretrained_model_name_or_path"),Cfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(":"),yfr=l(),V=a("ul"),F8=a("li"),k_e=a("strong"),wfr=o("albert"),Afr=o(" \u2014 "),yO=a("a"),Lfr=o("TFAlbertForSequenceClassification"),Bfr=o(" (ALBERT model)"),xfr=l(),C8=a("li"),R_e=a("strong"),kfr=o("bert"),Rfr=o(" \u2014 "),wO=a("a"),Sfr=o("TFBertForSequenceClassification"),Pfr=o(" (BERT model)"),$fr=l(),M8=a("li"),S_e=a("strong"),Ifr=o("camembert"),Nfr=o(" \u2014 "),AO=a("a"),Dfr=o("TFCamembertForSequenceClassification"),jfr=o(" (CamemBERT model)"),qfr=l(),E8=a("li"),P_e=a("strong"),Gfr=o("convbert"),Ofr=o(" \u2014 "),LO=a("a"),Xfr=o("TFConvBertForSequenceClassification"),Vfr=o(" (ConvBERT model)"),zfr=l(),y8=a("li"),$_e=a("strong"),Wfr=o("ctrl"),Qfr=o(" \u2014 "),BO=a("a"),Hfr=o("TFCTRLForSequenceClassification"),Ufr=o(" (CTRL model)"),Jfr=l(),w8=a("li"),I_e=a("strong"),Yfr=o("deberta"),Kfr=o(" \u2014 "),xO=a("a"),Zfr=o("TFDebertaForSequenceClassification"),emr=o(" (DeBERTa model)"),omr=l(),A8=a("li"),N_e=a("strong"),rmr=o("deberta-v2"),tmr=o(" \u2014 "),kO=a("a"),amr=o("TFDebertaV2ForSequenceClassification"),nmr=o(" (DeBERTa-v2 model)"),smr=l(),L8=a("li"),D_e=a("strong"),lmr=o("distilbert"),imr=o(" \u2014 "),RO=a("a"),dmr=o("TFDistilBertForSequenceClassification"),cmr=o(" (DistilBERT model)"),fmr=l(),B8=a("li"),j_e=a("strong"),mmr=o("electra"),gmr=o(" \u2014 "),SO=a("a"),hmr=o("TFElectraForSequenceClassification"),pmr=o(" (ELECTRA model)"),_mr=l(),x8=a("li"),q_e=a("strong"),umr=o("flaubert"),bmr=o(" \u2014 "),PO=a("a"),vmr=o("TFFlaubertForSequenceClassification"),Tmr=o(" (FlauBERT model)"),Fmr=l(),k8=a("li"),G_e=a("strong"),Cmr=o("funnel"),Mmr=o(" \u2014 "),$O=a("a"),Emr=o("TFFunnelForSequenceClassification"),ymr=o(" (Funnel Transformer model)"),wmr=l(),R8=a("li"),O_e=a("strong"),Amr=o("gpt2"),Lmr=o(" \u2014 "),IO=a("a"),Bmr=o("TFGPT2ForSequenceClassification"),xmr=o(" (OpenAI GPT-2 model)"),kmr=l(),S8=a("li"),X_e=a("strong"),Rmr=o("layoutlm"),Smr=o(" \u2014 "),NO=a("a"),Pmr=o("TFLayoutLMForSequenceClassification"),$mr=o(" (LayoutLM model)"),Imr=l(),P8=a("li"),V_e=a("strong"),Nmr=o("longformer"),Dmr=o(" \u2014 "),DO=a("a"),jmr=o("TFLongformerForSequenceClassification"),qmr=o(" (Longformer model)"),Gmr=l(),$8=a("li"),z_e=a("strong"),Omr=o("mobilebert"),Xmr=o(" \u2014 "),jO=a("a"),Vmr=o("TFMobileBertForSequenceClassification"),zmr=o(" (MobileBERT model)"),Wmr=l(),I8=a("li"),W_e=a("strong"),Qmr=o("mpnet"),Hmr=o(" \u2014 "),qO=a("a"),Umr=o("TFMPNetForSequenceClassification"),Jmr=o(" (MPNet model)"),Ymr=l(),N8=a("li"),Q_e=a("strong"),Kmr=o("openai-gpt"),Zmr=o(" \u2014 "),GO=a("a"),egr=o("TFOpenAIGPTForSequenceClassification"),ogr=o(" (OpenAI GPT model)"),rgr=l(),D8=a("li"),H_e=a("strong"),tgr=o("rembert"),agr=o(" \u2014 "),OO=a("a"),ngr=o("TFRemBertForSequenceClassification"),sgr=o(" (RemBERT model)"),lgr=l(),j8=a("li"),U_e=a("strong"),igr=o("roberta"),dgr=o(" \u2014 "),XO=a("a"),cgr=o("TFRobertaForSequenceClassification"),fgr=o(" (RoBERTa model)"),mgr=l(),q8=a("li"),J_e=a("strong"),ggr=o("roformer"),hgr=o(" \u2014 "),VO=a("a"),pgr=o("TFRoFormerForSequenceClassification"),_gr=o(" (RoFormer model)"),ugr=l(),G8=a("li"),Y_e=a("strong"),bgr=o("tapas"),vgr=o(" \u2014 "),zO=a("a"),Tgr=o("TFTapasForSequenceClassification"),Fgr=o(" (TAPAS model)"),Cgr=l(),O8=a("li"),K_e=a("strong"),Mgr=o("transfo-xl"),Egr=o(" \u2014 "),WO=a("a"),ygr=o("TFTransfoXLForSequenceClassification"),wgr=o(" (Transformer-XL model)"),Agr=l(),X8=a("li"),Z_e=a("strong"),Lgr=o("xlm"),Bgr=o(" \u2014 "),QO=a("a"),xgr=o("TFXLMForSequenceClassification"),kgr=o(" (XLM model)"),Rgr=l(),V8=a("li"),eue=a("strong"),Sgr=o("xlm-roberta"),Pgr=o(" \u2014 "),HO=a("a"),$gr=o("TFXLMRobertaForSequenceClassification"),Igr=o(" (XLM-RoBERTa model)"),Ngr=l(),z8=a("li"),oue=a("strong"),Dgr=o("xlnet"),jgr=o(" \u2014 "),UO=a("a"),qgr=o("TFXLNetForSequenceClassification"),Ggr=o(" (XLNet model)"),Ogr=l(),rue=a("p"),Xgr=o("Examples:"),Vgr=l(),f(I6.$$.fragment),ERe=l(),Pc=a("h2"),W8=a("a"),tue=a("span"),f(N6.$$.fragment),zgr=l(),aue=a("span"),Wgr=o("TFAutoModelForMultipleChoice"),yRe=l(),wr=a("div"),f(D6.$$.fragment),Qgr=l(),$c=a("p"),Hgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nue=a("code"),Ugr=o("from_pretrained()"),Jgr=o("class method or the "),sue=a("code"),Ygr=o("from_config()"),Kgr=o(`class
method.`),Zgr=l(),j6=a("p"),ehr=o("This class cannot be instantiated directly using "),lue=a("code"),ohr=o("__init__()"),rhr=o(" (throws an error)."),thr=l(),Tt=a("div"),f(q6.$$.fragment),ahr=l(),iue=a("p"),nhr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),shr=l(),Ic=a("p"),lhr=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),ihr=o("not"),dhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=a("code"),chr=o("from_pretrained()"),fhr=o("to load the model weights."),mhr=l(),fue=a("p"),ghr=o("Examples:"),hhr=l(),f(G6.$$.fragment),phr=l(),Fo=a("div"),f(O6.$$.fragment),_hr=l(),mue=a("p"),uhr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),bhr=l(),Mn=a("p"),vhr=o("The model class to instantiate is selected based on the "),gue=a("code"),Thr=o("model_type"),Fhr=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),Chr=o("pretrained_model_name_or_path"),Mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),Ehr=o("pretrained_model_name_or_path"),yhr=o(":"),whr=l(),ae=a("ul"),Q8=a("li"),_ue=a("strong"),Ahr=o("albert"),Lhr=o(" \u2014 "),JO=a("a"),Bhr=o("TFAlbertForMultipleChoice"),xhr=o(" (ALBERT model)"),khr=l(),H8=a("li"),uue=a("strong"),Rhr=o("bert"),Shr=o(" \u2014 "),YO=a("a"),Phr=o("TFBertForMultipleChoice"),$hr=o(" (BERT model)"),Ihr=l(),U8=a("li"),bue=a("strong"),Nhr=o("camembert"),Dhr=o(" \u2014 "),KO=a("a"),jhr=o("TFCamembertForMultipleChoice"),qhr=o(" (CamemBERT model)"),Ghr=l(),J8=a("li"),vue=a("strong"),Ohr=o("convbert"),Xhr=o(" \u2014 "),ZO=a("a"),Vhr=o("TFConvBertForMultipleChoice"),zhr=o(" (ConvBERT model)"),Whr=l(),Y8=a("li"),Tue=a("strong"),Qhr=o("distilbert"),Hhr=o(" \u2014 "),eX=a("a"),Uhr=o("TFDistilBertForMultipleChoice"),Jhr=o(" (DistilBERT model)"),Yhr=l(),K8=a("li"),Fue=a("strong"),Khr=o("electra"),Zhr=o(" \u2014 "),oX=a("a"),epr=o("TFElectraForMultipleChoice"),opr=o(" (ELECTRA model)"),rpr=l(),Z8=a("li"),Cue=a("strong"),tpr=o("flaubert"),apr=o(" \u2014 "),rX=a("a"),npr=o("TFFlaubertForMultipleChoice"),spr=o(" (FlauBERT model)"),lpr=l(),eF=a("li"),Mue=a("strong"),ipr=o("funnel"),dpr=o(" \u2014 "),tX=a("a"),cpr=o("TFFunnelForMultipleChoice"),fpr=o(" (Funnel Transformer model)"),mpr=l(),oF=a("li"),Eue=a("strong"),gpr=o("longformer"),hpr=o(" \u2014 "),aX=a("a"),ppr=o("TFLongformerForMultipleChoice"),_pr=o(" (Longformer model)"),upr=l(),rF=a("li"),yue=a("strong"),bpr=o("mobilebert"),vpr=o(" \u2014 "),nX=a("a"),Tpr=o("TFMobileBertForMultipleChoice"),Fpr=o(" (MobileBERT model)"),Cpr=l(),tF=a("li"),wue=a("strong"),Mpr=o("mpnet"),Epr=o(" \u2014 "),sX=a("a"),ypr=o("TFMPNetForMultipleChoice"),wpr=o(" (MPNet model)"),Apr=l(),aF=a("li"),Aue=a("strong"),Lpr=o("rembert"),Bpr=o(" \u2014 "),lX=a("a"),xpr=o("TFRemBertForMultipleChoice"),kpr=o(" (RemBERT model)"),Rpr=l(),nF=a("li"),Lue=a("strong"),Spr=o("roberta"),Ppr=o(" \u2014 "),iX=a("a"),$pr=o("TFRobertaForMultipleChoice"),Ipr=o(" (RoBERTa model)"),Npr=l(),sF=a("li"),Bue=a("strong"),Dpr=o("roformer"),jpr=o(" \u2014 "),dX=a("a"),qpr=o("TFRoFormerForMultipleChoice"),Gpr=o(" (RoFormer model)"),Opr=l(),lF=a("li"),xue=a("strong"),Xpr=o("xlm"),Vpr=o(" \u2014 "),cX=a("a"),zpr=o("TFXLMForMultipleChoice"),Wpr=o(" (XLM model)"),Qpr=l(),iF=a("li"),kue=a("strong"),Hpr=o("xlm-roberta"),Upr=o(" \u2014 "),fX=a("a"),Jpr=o("TFXLMRobertaForMultipleChoice"),Ypr=o(" (XLM-RoBERTa model)"),Kpr=l(),dF=a("li"),Rue=a("strong"),Zpr=o("xlnet"),e_r=o(" \u2014 "),mX=a("a"),o_r=o("TFXLNetForMultipleChoice"),r_r=o(" (XLNet model)"),t_r=l(),Sue=a("p"),a_r=o("Examples:"),n_r=l(),f(X6.$$.fragment),wRe=l(),Nc=a("h2"),cF=a("a"),Pue=a("span"),f(V6.$$.fragment),s_r=l(),$ue=a("span"),l_r=o("TFAutoModelForTableQuestionAnswering"),ARe=l(),Ar=a("div"),f(z6.$$.fragment),i_r=l(),Dc=a("p"),d_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Iue=a("code"),c_r=o("from_pretrained()"),f_r=o("class method or the "),Nue=a("code"),m_r=o("from_config()"),g_r=o(`class
method.`),h_r=l(),W6=a("p"),p_r=o("This class cannot be instantiated directly using "),Due=a("code"),__r=o("__init__()"),u_r=o(" (throws an error)."),b_r=l(),Ft=a("div"),f(Q6.$$.fragment),v_r=l(),jue=a("p"),T_r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),F_r=l(),jc=a("p"),C_r=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),M_r=o("not"),E_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gue=a("code"),y_r=o("from_pretrained()"),w_r=o("to load the model weights."),A_r=l(),Oue=a("p"),L_r=o("Examples:"),B_r=l(),f(H6.$$.fragment),x_r=l(),Co=a("div"),f(U6.$$.fragment),k_r=l(),Xue=a("p"),R_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S_r=l(),En=a("p"),P_r=o("The model class to instantiate is selected based on the "),Vue=a("code"),$_r=o("model_type"),I_r=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),N_r=o("pretrained_model_name_or_path"),D_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),j_r=o("pretrained_model_name_or_path"),q_r=o(":"),G_r=l(),Que=a("ul"),fF=a("li"),Hue=a("strong"),O_r=o("tapas"),X_r=o(" \u2014 "),gX=a("a"),V_r=o("TFTapasForQuestionAnswering"),z_r=o(" (TAPAS model)"),W_r=l(),Uue=a("p"),Q_r=o("Examples:"),H_r=l(),f(J6.$$.fragment),LRe=l(),qc=a("h2"),mF=a("a"),Jue=a("span"),f(Y6.$$.fragment),U_r=l(),Yue=a("span"),J_r=o("TFAutoModelForTokenClassification"),BRe=l(),Lr=a("div"),f(K6.$$.fragment),Y_r=l(),Gc=a("p"),K_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Kue=a("code"),Z_r=o("from_pretrained()"),eur=o("class method or the "),Zue=a("code"),our=o("from_config()"),rur=o(`class
method.`),tur=l(),Z6=a("p"),aur=o("This class cannot be instantiated directly using "),e1e=a("code"),nur=o("__init__()"),sur=o(" (throws an error)."),lur=l(),Ct=a("div"),f(eA.$$.fragment),iur=l(),o1e=a("p"),dur=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),cur=l(),Oc=a("p"),fur=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),mur=o("not"),gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),t1e=a("code"),hur=o("from_pretrained()"),pur=o("to load the model weights."),_ur=l(),a1e=a("p"),uur=o("Examples:"),bur=l(),f(oA.$$.fragment),vur=l(),Mo=a("div"),f(rA.$$.fragment),Tur=l(),n1e=a("p"),Fur=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cur=l(),yn=a("p"),Mur=o("The model class to instantiate is selected based on the "),s1e=a("code"),Eur=o("model_type"),yur=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),wur=o("pretrained_model_name_or_path"),Aur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),Lur=o("pretrained_model_name_or_path"),Bur=o(":"),xur=l(),Y=a("ul"),gF=a("li"),d1e=a("strong"),kur=o("albert"),Rur=o(" \u2014 "),hX=a("a"),Sur=o("TFAlbertForTokenClassification"),Pur=o(" (ALBERT model)"),$ur=l(),hF=a("li"),c1e=a("strong"),Iur=o("bert"),Nur=o(" \u2014 "),pX=a("a"),Dur=o("TFBertForTokenClassification"),jur=o(" (BERT model)"),qur=l(),pF=a("li"),f1e=a("strong"),Gur=o("camembert"),Our=o(" \u2014 "),_X=a("a"),Xur=o("TFCamembertForTokenClassification"),Vur=o(" (CamemBERT model)"),zur=l(),_F=a("li"),m1e=a("strong"),Wur=o("convbert"),Qur=o(" \u2014 "),uX=a("a"),Hur=o("TFConvBertForTokenClassification"),Uur=o(" (ConvBERT model)"),Jur=l(),uF=a("li"),g1e=a("strong"),Yur=o("deberta"),Kur=o(" \u2014 "),bX=a("a"),Zur=o("TFDebertaForTokenClassification"),e1r=o(" (DeBERTa model)"),o1r=l(),bF=a("li"),h1e=a("strong"),r1r=o("deberta-v2"),t1r=o(" \u2014 "),vX=a("a"),a1r=o("TFDebertaV2ForTokenClassification"),n1r=o(" (DeBERTa-v2 model)"),s1r=l(),vF=a("li"),p1e=a("strong"),l1r=o("distilbert"),i1r=o(" \u2014 "),TX=a("a"),d1r=o("TFDistilBertForTokenClassification"),c1r=o(" (DistilBERT model)"),f1r=l(),TF=a("li"),_1e=a("strong"),m1r=o("electra"),g1r=o(" \u2014 "),FX=a("a"),h1r=o("TFElectraForTokenClassification"),p1r=o(" (ELECTRA model)"),_1r=l(),FF=a("li"),u1e=a("strong"),u1r=o("flaubert"),b1r=o(" \u2014 "),CX=a("a"),v1r=o("TFFlaubertForTokenClassification"),T1r=o(" (FlauBERT model)"),F1r=l(),CF=a("li"),b1e=a("strong"),C1r=o("funnel"),M1r=o(" \u2014 "),MX=a("a"),E1r=o("TFFunnelForTokenClassification"),y1r=o(" (Funnel Transformer model)"),w1r=l(),MF=a("li"),v1e=a("strong"),A1r=o("layoutlm"),L1r=o(" \u2014 "),EX=a("a"),B1r=o("TFLayoutLMForTokenClassification"),x1r=o(" (LayoutLM model)"),k1r=l(),EF=a("li"),T1e=a("strong"),R1r=o("longformer"),S1r=o(" \u2014 "),yX=a("a"),P1r=o("TFLongformerForTokenClassification"),$1r=o(" (Longformer model)"),I1r=l(),yF=a("li"),F1e=a("strong"),N1r=o("mobilebert"),D1r=o(" \u2014 "),wX=a("a"),j1r=o("TFMobileBertForTokenClassification"),q1r=o(" (MobileBERT model)"),G1r=l(),wF=a("li"),C1e=a("strong"),O1r=o("mpnet"),X1r=o(" \u2014 "),AX=a("a"),V1r=o("TFMPNetForTokenClassification"),z1r=o(" (MPNet model)"),W1r=l(),AF=a("li"),M1e=a("strong"),Q1r=o("rembert"),H1r=o(" \u2014 "),LX=a("a"),U1r=o("TFRemBertForTokenClassification"),J1r=o(" (RemBERT model)"),Y1r=l(),LF=a("li"),E1e=a("strong"),K1r=o("roberta"),Z1r=o(" \u2014 "),BX=a("a"),ebr=o("TFRobertaForTokenClassification"),obr=o(" (RoBERTa model)"),rbr=l(),BF=a("li"),y1e=a("strong"),tbr=o("roformer"),abr=o(" \u2014 "),xX=a("a"),nbr=o("TFRoFormerForTokenClassification"),sbr=o(" (RoFormer model)"),lbr=l(),xF=a("li"),w1e=a("strong"),ibr=o("xlm"),dbr=o(" \u2014 "),kX=a("a"),cbr=o("TFXLMForTokenClassification"),fbr=o(" (XLM model)"),mbr=l(),kF=a("li"),A1e=a("strong"),gbr=o("xlm-roberta"),hbr=o(" \u2014 "),RX=a("a"),pbr=o("TFXLMRobertaForTokenClassification"),_br=o(" (XLM-RoBERTa model)"),ubr=l(),RF=a("li"),L1e=a("strong"),bbr=o("xlnet"),vbr=o(" \u2014 "),SX=a("a"),Tbr=o("TFXLNetForTokenClassification"),Fbr=o(" (XLNet model)"),Cbr=l(),B1e=a("p"),Mbr=o("Examples:"),Ebr=l(),f(tA.$$.fragment),xRe=l(),Xc=a("h2"),SF=a("a"),x1e=a("span"),f(aA.$$.fragment),ybr=l(),k1e=a("span"),wbr=o("TFAutoModelForQuestionAnswering"),kRe=l(),Br=a("div"),f(nA.$$.fragment),Abr=l(),Vc=a("p"),Lbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),R1e=a("code"),Bbr=o("from_pretrained()"),xbr=o("class method or the "),S1e=a("code"),kbr=o("from_config()"),Rbr=o(`class
method.`),Sbr=l(),sA=a("p"),Pbr=o("This class cannot be instantiated directly using "),P1e=a("code"),$br=o("__init__()"),Ibr=o(" (throws an error)."),Nbr=l(),Mt=a("div"),f(lA.$$.fragment),Dbr=l(),$1e=a("p"),jbr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),qbr=l(),zc=a("p"),Gbr=o(`Note:
Loading a model from its configuration file does `),I1e=a("strong"),Obr=o("not"),Xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),N1e=a("code"),Vbr=o("from_pretrained()"),zbr=o("to load the model weights."),Wbr=l(),D1e=a("p"),Qbr=o("Examples:"),Hbr=l(),f(iA.$$.fragment),Ubr=l(),Eo=a("div"),f(dA.$$.fragment),Jbr=l(),j1e=a("p"),Ybr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Kbr=l(),wn=a("p"),Zbr=o("The model class to instantiate is selected based on the "),q1e=a("code"),e5r=o("model_type"),o5r=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),r5r=o("pretrained_model_name_or_path"),t5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),a5r=o("pretrained_model_name_or_path"),n5r=o(":"),s5r=l(),Z=a("ul"),PF=a("li"),X1e=a("strong"),l5r=o("albert"),i5r=o(" \u2014 "),PX=a("a"),d5r=o("TFAlbertForQuestionAnswering"),c5r=o(" (ALBERT model)"),f5r=l(),$F=a("li"),V1e=a("strong"),m5r=o("bert"),g5r=o(" \u2014 "),$X=a("a"),h5r=o("TFBertForQuestionAnswering"),p5r=o(" (BERT model)"),_5r=l(),IF=a("li"),z1e=a("strong"),u5r=o("camembert"),b5r=o(" \u2014 "),IX=a("a"),v5r=o("TFCamembertForQuestionAnswering"),T5r=o(" (CamemBERT model)"),F5r=l(),NF=a("li"),W1e=a("strong"),C5r=o("convbert"),M5r=o(" \u2014 "),NX=a("a"),E5r=o("TFConvBertForQuestionAnswering"),y5r=o(" (ConvBERT model)"),w5r=l(),DF=a("li"),Q1e=a("strong"),A5r=o("deberta"),L5r=o(" \u2014 "),DX=a("a"),B5r=o("TFDebertaForQuestionAnswering"),x5r=o(" (DeBERTa model)"),k5r=l(),jF=a("li"),H1e=a("strong"),R5r=o("deberta-v2"),S5r=o(" \u2014 "),jX=a("a"),P5r=o("TFDebertaV2ForQuestionAnswering"),$5r=o(" (DeBERTa-v2 model)"),I5r=l(),qF=a("li"),U1e=a("strong"),N5r=o("distilbert"),D5r=o(" \u2014 "),qX=a("a"),j5r=o("TFDistilBertForQuestionAnswering"),q5r=o(" (DistilBERT model)"),G5r=l(),GF=a("li"),J1e=a("strong"),O5r=o("electra"),X5r=o(" \u2014 "),GX=a("a"),V5r=o("TFElectraForQuestionAnswering"),z5r=o(" (ELECTRA model)"),W5r=l(),OF=a("li"),Y1e=a("strong"),Q5r=o("flaubert"),H5r=o(" \u2014 "),OX=a("a"),U5r=o("TFFlaubertForQuestionAnsweringSimple"),J5r=o(" (FlauBERT model)"),Y5r=l(),XF=a("li"),K1e=a("strong"),K5r=o("funnel"),Z5r=o(" \u2014 "),XX=a("a"),e2r=o("TFFunnelForQuestionAnswering"),o2r=o(" (Funnel Transformer model)"),r2r=l(),VF=a("li"),Z1e=a("strong"),t2r=o("longformer"),a2r=o(" \u2014 "),VX=a("a"),n2r=o("TFLongformerForQuestionAnswering"),s2r=o(" (Longformer model)"),l2r=l(),zF=a("li"),ebe=a("strong"),i2r=o("mobilebert"),d2r=o(" \u2014 "),zX=a("a"),c2r=o("TFMobileBertForQuestionAnswering"),f2r=o(" (MobileBERT model)"),m2r=l(),WF=a("li"),obe=a("strong"),g2r=o("mpnet"),h2r=o(" \u2014 "),WX=a("a"),p2r=o("TFMPNetForQuestionAnswering"),_2r=o(" (MPNet model)"),u2r=l(),QF=a("li"),rbe=a("strong"),b2r=o("rembert"),v2r=o(" \u2014 "),QX=a("a"),T2r=o("TFRemBertForQuestionAnswering"),F2r=o(" (RemBERT model)"),C2r=l(),HF=a("li"),tbe=a("strong"),M2r=o("roberta"),E2r=o(" \u2014 "),HX=a("a"),y2r=o("TFRobertaForQuestionAnswering"),w2r=o(" (RoBERTa model)"),A2r=l(),UF=a("li"),abe=a("strong"),L2r=o("roformer"),B2r=o(" \u2014 "),UX=a("a"),x2r=o("TFRoFormerForQuestionAnswering"),k2r=o(" (RoFormer model)"),R2r=l(),JF=a("li"),nbe=a("strong"),S2r=o("xlm"),P2r=o(" \u2014 "),JX=a("a"),$2r=o("TFXLMForQuestionAnsweringSimple"),I2r=o(" (XLM model)"),N2r=l(),YF=a("li"),sbe=a("strong"),D2r=o("xlm-roberta"),j2r=o(" \u2014 "),YX=a("a"),q2r=o("TFXLMRobertaForQuestionAnswering"),G2r=o(" (XLM-RoBERTa model)"),O2r=l(),KF=a("li"),lbe=a("strong"),X2r=o("xlnet"),V2r=o(" \u2014 "),KX=a("a"),z2r=o("TFXLNetForQuestionAnsweringSimple"),W2r=o(" (XLNet model)"),Q2r=l(),ibe=a("p"),H2r=o("Examples:"),U2r=l(),f(cA.$$.fragment),RRe=l(),Wc=a("h2"),ZF=a("a"),dbe=a("span"),f(fA.$$.fragment),J2r=l(),cbe=a("span"),Y2r=o("TFAutoModelForVision2Seq"),SRe=l(),xr=a("div"),f(mA.$$.fragment),K2r=l(),Qc=a("p"),Z2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fbe=a("code"),evr=o("from_pretrained()"),ovr=o("class method or the "),mbe=a("code"),rvr=o("from_config()"),tvr=o(`class
method.`),avr=l(),gA=a("p"),nvr=o("This class cannot be instantiated directly using "),gbe=a("code"),svr=o("__init__()"),lvr=o(" (throws an error)."),ivr=l(),Et=a("div"),f(hA.$$.fragment),dvr=l(),hbe=a("p"),cvr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fvr=l(),Hc=a("p"),mvr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),gvr=o("not"),hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_be=a("code"),pvr=o("from_pretrained()"),_vr=o("to load the model weights."),uvr=l(),ube=a("p"),bvr=o("Examples:"),vvr=l(),f(pA.$$.fragment),Tvr=l(),yo=a("div"),f(_A.$$.fragment),Fvr=l(),bbe=a("p"),Cvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Mvr=l(),An=a("p"),Evr=o("The model class to instantiate is selected based on the "),vbe=a("code"),yvr=o("model_type"),wvr=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),Avr=o("pretrained_model_name_or_path"),Lvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=a("code"),Bvr=o("pretrained_model_name_or_path"),xvr=o(":"),kvr=l(),Cbe=a("ul"),eC=a("li"),Mbe=a("strong"),Rvr=o("vision-encoder-decoder"),Svr=o(" \u2014 "),ZX=a("a"),Pvr=o("TFVisionEncoderDecoderModel"),$vr=o(" (Vision Encoder decoder model)"),Ivr=l(),Ebe=a("p"),Nvr=o("Examples:"),Dvr=l(),f(uA.$$.fragment),PRe=l(),Uc=a("h2"),oC=a("a"),ybe=a("span"),f(bA.$$.fragment),jvr=l(),wbe=a("span"),qvr=o("TFAutoModelForSpeechSeq2Seq"),$Re=l(),kr=a("div"),f(vA.$$.fragment),Gvr=l(),Jc=a("p"),Ovr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Abe=a("code"),Xvr=o("from_pretrained()"),Vvr=o("class method or the "),Lbe=a("code"),zvr=o("from_config()"),Wvr=o(`class
method.`),Qvr=l(),TA=a("p"),Hvr=o("This class cannot be instantiated directly using "),Bbe=a("code"),Uvr=o("__init__()"),Jvr=o(" (throws an error)."),Yvr=l(),yt=a("div"),f(FA.$$.fragment),Kvr=l(),xbe=a("p"),Zvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),eTr=l(),Yc=a("p"),oTr=o(`Note:
Loading a model from its configuration file does `),kbe=a("strong"),rTr=o("not"),tTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rbe=a("code"),aTr=o("from_pretrained()"),nTr=o("to load the model weights."),sTr=l(),Sbe=a("p"),lTr=o("Examples:"),iTr=l(),f(CA.$$.fragment),dTr=l(),wo=a("div"),f(MA.$$.fragment),cTr=l(),Pbe=a("p"),fTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mTr=l(),Ln=a("p"),gTr=o("The model class to instantiate is selected based on the "),$be=a("code"),hTr=o("model_type"),pTr=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),_Tr=o("pretrained_model_name_or_path"),uTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(":"),TTr=l(),Dbe=a("ul"),rC=a("li"),jbe=a("strong"),FTr=o("speech_to_text"),CTr=o(" \u2014 "),eV=a("a"),MTr=o("TFSpeech2TextForConditionalGeneration"),ETr=o(" (Speech2Text model)"),yTr=l(),qbe=a("p"),wTr=o("Examples:"),ATr=l(),f(EA.$$.fragment),IRe=l(),Kc=a("h2"),tC=a("a"),Gbe=a("span"),f(yA.$$.fragment),LTr=l(),Obe=a("span"),BTr=o("FlaxAutoModel"),NRe=l(),Rr=a("div"),f(wA.$$.fragment),xTr=l(),Zc=a("p"),kTr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xbe=a("code"),RTr=o("from_pretrained()"),STr=o("class method or the "),Vbe=a("code"),PTr=o("from_config()"),$Tr=o(`class
method.`),ITr=l(),AA=a("p"),NTr=o("This class cannot be instantiated directly using "),zbe=a("code"),DTr=o("__init__()"),jTr=o(" (throws an error)."),qTr=l(),wt=a("div"),f(LA.$$.fragment),GTr=l(),Wbe=a("p"),OTr=o("Instantiates one of the base model classes of the library from a configuration."),XTr=l(),ef=a("p"),VTr=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),zTr=o("not"),WTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hbe=a("code"),QTr=o("from_pretrained()"),HTr=o("to load the model weights."),UTr=l(),Ube=a("p"),JTr=o("Examples:"),YTr=l(),f(BA.$$.fragment),KTr=l(),Ao=a("div"),f(xA.$$.fragment),ZTr=l(),Jbe=a("p"),e7r=o("Instantiate one of the base model classes of the library from a pretrained model."),o7r=l(),Bn=a("p"),r7r=o("The model class to instantiate is selected based on the "),Ybe=a("code"),t7r=o("model_type"),a7r=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),n7r=o("pretrained_model_name_or_path"),s7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),l7r=o("pretrained_model_name_or_path"),i7r=o(":"),d7r=l(),z=a("ul"),aC=a("li"),e5e=a("strong"),c7r=o("albert"),f7r=o(" \u2014 "),oV=a("a"),m7r=o("FlaxAlbertModel"),g7r=o(" (ALBERT model)"),h7r=l(),nC=a("li"),o5e=a("strong"),p7r=o("bart"),_7r=o(" \u2014 "),rV=a("a"),u7r=o("FlaxBartModel"),b7r=o(" (BART model)"),v7r=l(),sC=a("li"),r5e=a("strong"),T7r=o("beit"),F7r=o(" \u2014 "),tV=a("a"),C7r=o("FlaxBeitModel"),M7r=o(" (BEiT model)"),E7r=l(),lC=a("li"),t5e=a("strong"),y7r=o("bert"),w7r=o(" \u2014 "),aV=a("a"),A7r=o("FlaxBertModel"),L7r=o(" (BERT model)"),B7r=l(),iC=a("li"),a5e=a("strong"),x7r=o("big_bird"),k7r=o(" \u2014 "),nV=a("a"),R7r=o("FlaxBigBirdModel"),S7r=o(" (BigBird model)"),P7r=l(),dC=a("li"),n5e=a("strong"),$7r=o("blenderbot"),I7r=o(" \u2014 "),sV=a("a"),N7r=o("FlaxBlenderbotModel"),D7r=o(" (Blenderbot model)"),j7r=l(),cC=a("li"),s5e=a("strong"),q7r=o("blenderbot-small"),G7r=o(" \u2014 "),lV=a("a"),O7r=o("FlaxBlenderbotSmallModel"),X7r=o(" (BlenderbotSmall model)"),V7r=l(),fC=a("li"),l5e=a("strong"),z7r=o("clip"),W7r=o(" \u2014 "),iV=a("a"),Q7r=o("FlaxCLIPModel"),H7r=o(" (CLIP model)"),U7r=l(),mC=a("li"),i5e=a("strong"),J7r=o("distilbert"),Y7r=o(" \u2014 "),dV=a("a"),K7r=o("FlaxDistilBertModel"),Z7r=o(" (DistilBERT model)"),e8r=l(),gC=a("li"),d5e=a("strong"),o8r=o("electra"),r8r=o(" \u2014 "),cV=a("a"),t8r=o("FlaxElectraModel"),a8r=o(" (ELECTRA model)"),n8r=l(),hC=a("li"),c5e=a("strong"),s8r=o("gpt2"),l8r=o(" \u2014 "),fV=a("a"),i8r=o("FlaxGPT2Model"),d8r=o(" (OpenAI GPT-2 model)"),c8r=l(),pC=a("li"),f5e=a("strong"),f8r=o("gpt_neo"),m8r=o(" \u2014 "),mV=a("a"),g8r=o("FlaxGPTNeoModel"),h8r=o(" (GPT Neo model)"),p8r=l(),_C=a("li"),m5e=a("strong"),_8r=o("gptj"),u8r=o(" \u2014 "),gV=a("a"),b8r=o("FlaxGPTJModel"),v8r=o(" (GPT-J model)"),T8r=l(),uC=a("li"),g5e=a("strong"),F8r=o("marian"),C8r=o(" \u2014 "),hV=a("a"),M8r=o("FlaxMarianModel"),E8r=o(" (Marian model)"),y8r=l(),bC=a("li"),h5e=a("strong"),w8r=o("mbart"),A8r=o(" \u2014 "),pV=a("a"),L8r=o("FlaxMBartModel"),B8r=o(" (mBART model)"),x8r=l(),vC=a("li"),p5e=a("strong"),k8r=o("mt5"),R8r=o(" \u2014 "),_V=a("a"),S8r=o("FlaxMT5Model"),P8r=o(" (mT5 model)"),$8r=l(),TC=a("li"),_5e=a("strong"),I8r=o("pegasus"),N8r=o(" \u2014 "),uV=a("a"),D8r=o("FlaxPegasusModel"),j8r=o(" (Pegasus model)"),q8r=l(),FC=a("li"),u5e=a("strong"),G8r=o("roberta"),O8r=o(" \u2014 "),bV=a("a"),X8r=o("FlaxRobertaModel"),V8r=o(" (RoBERTa model)"),z8r=l(),CC=a("li"),b5e=a("strong"),W8r=o("roformer"),Q8r=o(" \u2014 "),vV=a("a"),H8r=o("FlaxRoFormerModel"),U8r=o(" (RoFormer model)"),J8r=l(),MC=a("li"),v5e=a("strong"),Y8r=o("t5"),K8r=o(" \u2014 "),TV=a("a"),Z8r=o("FlaxT5Model"),eFr=o(" (T5 model)"),oFr=l(),EC=a("li"),T5e=a("strong"),rFr=o("vision-text-dual-encoder"),tFr=o(" \u2014 "),FV=a("a"),aFr=o("FlaxVisionTextDualEncoderModel"),nFr=o(" (VisionTextDualEncoder model)"),sFr=l(),yC=a("li"),F5e=a("strong"),lFr=o("vit"),iFr=o(" \u2014 "),CV=a("a"),dFr=o("FlaxViTModel"),cFr=o(" (ViT model)"),fFr=l(),wC=a("li"),C5e=a("strong"),mFr=o("wav2vec2"),gFr=o(" \u2014 "),MV=a("a"),hFr=o("FlaxWav2Vec2Model"),pFr=o(" (Wav2Vec2 model)"),_Fr=l(),AC=a("li"),M5e=a("strong"),uFr=o("xglm"),bFr=o(" \u2014 "),EV=a("a"),vFr=o("FlaxXGLMModel"),TFr=o(" (XGLM model)"),FFr=l(),LC=a("li"),E5e=a("strong"),CFr=o("xlm-roberta"),MFr=o(" \u2014 "),yV=a("a"),EFr=o("FlaxXLMRobertaModel"),yFr=o(" (XLM-RoBERTa model)"),wFr=l(),y5e=a("p"),AFr=o("Examples:"),LFr=l(),f(kA.$$.fragment),DRe=l(),of=a("h2"),BC=a("a"),w5e=a("span"),f(RA.$$.fragment),BFr=l(),A5e=a("span"),xFr=o("FlaxAutoModelForCausalLM"),jRe=l(),Sr=a("div"),f(SA.$$.fragment),kFr=l(),rf=a("p"),RFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),L5e=a("code"),SFr=o("from_pretrained()"),PFr=o("class method or the "),B5e=a("code"),$Fr=o("from_config()"),IFr=o(`class
method.`),NFr=l(),PA=a("p"),DFr=o("This class cannot be instantiated directly using "),x5e=a("code"),jFr=o("__init__()"),qFr=o(" (throws an error)."),GFr=l(),At=a("div"),f($A.$$.fragment),OFr=l(),k5e=a("p"),XFr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),VFr=l(),tf=a("p"),zFr=o(`Note:
Loading a model from its configuration file does `),R5e=a("strong"),WFr=o("not"),QFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),S5e=a("code"),HFr=o("from_pretrained()"),UFr=o("to load the model weights."),JFr=l(),P5e=a("p"),YFr=o("Examples:"),KFr=l(),f(IA.$$.fragment),ZFr=l(),Lo=a("div"),f(NA.$$.fragment),eCr=l(),$5e=a("p"),oCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rCr=l(),xn=a("p"),tCr=o("The model class to instantiate is selected based on the "),I5e=a("code"),aCr=o("model_type"),nCr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(":"),cCr=l(),ca=a("ul"),xC=a("li"),j5e=a("strong"),fCr=o("bart"),mCr=o(" \u2014 "),wV=a("a"),gCr=o("FlaxBartForCausalLM"),hCr=o(" (BART model)"),pCr=l(),kC=a("li"),q5e=a("strong"),_Cr=o("gpt2"),uCr=o(" \u2014 "),AV=a("a"),bCr=o("FlaxGPT2LMHeadModel"),vCr=o(" (OpenAI GPT-2 model)"),TCr=l(),RC=a("li"),G5e=a("strong"),FCr=o("gpt_neo"),CCr=o(" \u2014 "),LV=a("a"),MCr=o("FlaxGPTNeoForCausalLM"),ECr=o(" (GPT Neo model)"),yCr=l(),SC=a("li"),O5e=a("strong"),wCr=o("gptj"),ACr=o(" \u2014 "),BV=a("a"),LCr=o("FlaxGPTJForCausalLM"),BCr=o(" (GPT-J model)"),xCr=l(),PC=a("li"),X5e=a("strong"),kCr=o("xglm"),RCr=o(" \u2014 "),xV=a("a"),SCr=o("FlaxXGLMForCausalLM"),PCr=o(" (XGLM model)"),$Cr=l(),V5e=a("p"),ICr=o("Examples:"),NCr=l(),f(DA.$$.fragment),qRe=l(),af=a("h2"),$C=a("a"),z5e=a("span"),f(jA.$$.fragment),DCr=l(),W5e=a("span"),jCr=o("FlaxAutoModelForPreTraining"),GRe=l(),Pr=a("div"),f(qA.$$.fragment),qCr=l(),nf=a("p"),GCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Q5e=a("code"),OCr=o("from_pretrained()"),XCr=o("class method or the "),H5e=a("code"),VCr=o("from_config()"),zCr=o(`class
method.`),WCr=l(),GA=a("p"),QCr=o("This class cannot be instantiated directly using "),U5e=a("code"),HCr=o("__init__()"),UCr=o(" (throws an error)."),JCr=l(),Lt=a("div"),f(OA.$$.fragment),YCr=l(),J5e=a("p"),KCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZCr=l(),sf=a("p"),eMr=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),oMr=o("not"),rMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K5e=a("code"),tMr=o("from_pretrained()"),aMr=o("to load the model weights."),nMr=l(),Z5e=a("p"),sMr=o("Examples:"),lMr=l(),f(XA.$$.fragment),iMr=l(),Bo=a("div"),f(VA.$$.fragment),dMr=l(),e2e=a("p"),cMr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fMr=l(),kn=a("p"),mMr=o("The model class to instantiate is selected based on the "),o2e=a("code"),gMr=o("model_type"),hMr=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),pMr=o("pretrained_model_name_or_path"),_Mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),uMr=o("pretrained_model_name_or_path"),bMr=o(":"),vMr=l(),ce=a("ul"),IC=a("li"),a2e=a("strong"),TMr=o("albert"),FMr=o(" \u2014 "),kV=a("a"),CMr=o("FlaxAlbertForPreTraining"),MMr=o(" (ALBERT model)"),EMr=l(),NC=a("li"),n2e=a("strong"),yMr=o("bart"),wMr=o(" \u2014 "),RV=a("a"),AMr=o("FlaxBartForConditionalGeneration"),LMr=o(" (BART model)"),BMr=l(),DC=a("li"),s2e=a("strong"),xMr=o("bert"),kMr=o(" \u2014 "),SV=a("a"),RMr=o("FlaxBertForPreTraining"),SMr=o(" (BERT model)"),PMr=l(),jC=a("li"),l2e=a("strong"),$Mr=o("big_bird"),IMr=o(" \u2014 "),PV=a("a"),NMr=o("FlaxBigBirdForPreTraining"),DMr=o(" (BigBird model)"),jMr=l(),qC=a("li"),i2e=a("strong"),qMr=o("electra"),GMr=o(" \u2014 "),$V=a("a"),OMr=o("FlaxElectraForPreTraining"),XMr=o(" (ELECTRA model)"),VMr=l(),GC=a("li"),d2e=a("strong"),zMr=o("mbart"),WMr=o(" \u2014 "),IV=a("a"),QMr=o("FlaxMBartForConditionalGeneration"),HMr=o(" (mBART model)"),UMr=l(),OC=a("li"),c2e=a("strong"),JMr=o("mt5"),YMr=o(" \u2014 "),NV=a("a"),KMr=o("FlaxMT5ForConditionalGeneration"),ZMr=o(" (mT5 model)"),e4r=l(),XC=a("li"),f2e=a("strong"),o4r=o("roberta"),r4r=o(" \u2014 "),DV=a("a"),t4r=o("FlaxRobertaForMaskedLM"),a4r=o(" (RoBERTa model)"),n4r=l(),VC=a("li"),m2e=a("strong"),s4r=o("roformer"),l4r=o(" \u2014 "),jV=a("a"),i4r=o("FlaxRoFormerForMaskedLM"),d4r=o(" (RoFormer model)"),c4r=l(),zC=a("li"),g2e=a("strong"),f4r=o("t5"),m4r=o(" \u2014 "),qV=a("a"),g4r=o("FlaxT5ForConditionalGeneration"),h4r=o(" (T5 model)"),p4r=l(),WC=a("li"),h2e=a("strong"),_4r=o("wav2vec2"),u4r=o(" \u2014 "),GV=a("a"),b4r=o("FlaxWav2Vec2ForPreTraining"),v4r=o(" (Wav2Vec2 model)"),T4r=l(),QC=a("li"),p2e=a("strong"),F4r=o("xlm-roberta"),C4r=o(" \u2014 "),OV=a("a"),M4r=o("FlaxXLMRobertaForMaskedLM"),E4r=o(" (XLM-RoBERTa model)"),y4r=l(),_2e=a("p"),w4r=o("Examples:"),A4r=l(),f(zA.$$.fragment),ORe=l(),lf=a("h2"),HC=a("a"),u2e=a("span"),f(WA.$$.fragment),L4r=l(),b2e=a("span"),B4r=o("FlaxAutoModelForMaskedLM"),XRe=l(),$r=a("div"),f(QA.$$.fragment),x4r=l(),df=a("p"),k4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),v2e=a("code"),R4r=o("from_pretrained()"),S4r=o("class method or the "),T2e=a("code"),P4r=o("from_config()"),$4r=o(`class
method.`),I4r=l(),HA=a("p"),N4r=o("This class cannot be instantiated directly using "),F2e=a("code"),D4r=o("__init__()"),j4r=o(" (throws an error)."),q4r=l(),Bt=a("div"),f(UA.$$.fragment),G4r=l(),C2e=a("p"),O4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),X4r=l(),cf=a("p"),V4r=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),z4r=o("not"),W4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),E2e=a("code"),Q4r=o("from_pretrained()"),H4r=o("to load the model weights."),U4r=l(),y2e=a("p"),J4r=o("Examples:"),Y4r=l(),f(JA.$$.fragment),K4r=l(),xo=a("div"),f(YA.$$.fragment),Z4r=l(),w2e=a("p"),eEr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oEr=l(),Rn=a("p"),rEr=o("The model class to instantiate is selected based on the "),A2e=a("code"),tEr=o("model_type"),aEr=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),nEr=o("pretrained_model_name_or_path"),sEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),lEr=o("pretrained_model_name_or_path"),iEr=o(":"),dEr=l(),ue=a("ul"),UC=a("li"),x2e=a("strong"),cEr=o("albert"),fEr=o(" \u2014 "),XV=a("a"),mEr=o("FlaxAlbertForMaskedLM"),gEr=o(" (ALBERT model)"),hEr=l(),JC=a("li"),k2e=a("strong"),pEr=o("bart"),_Er=o(" \u2014 "),VV=a("a"),uEr=o("FlaxBartForConditionalGeneration"),bEr=o(" (BART model)"),vEr=l(),YC=a("li"),R2e=a("strong"),TEr=o("bert"),FEr=o(" \u2014 "),zV=a("a"),CEr=o("FlaxBertForMaskedLM"),MEr=o(" (BERT model)"),EEr=l(),KC=a("li"),S2e=a("strong"),yEr=o("big_bird"),wEr=o(" \u2014 "),WV=a("a"),AEr=o("FlaxBigBirdForMaskedLM"),LEr=o(" (BigBird model)"),BEr=l(),ZC=a("li"),P2e=a("strong"),xEr=o("distilbert"),kEr=o(" \u2014 "),QV=a("a"),REr=o("FlaxDistilBertForMaskedLM"),SEr=o(" (DistilBERT model)"),PEr=l(),eM=a("li"),$2e=a("strong"),$Er=o("electra"),IEr=o(" \u2014 "),HV=a("a"),NEr=o("FlaxElectraForMaskedLM"),DEr=o(" (ELECTRA model)"),jEr=l(),oM=a("li"),I2e=a("strong"),qEr=o("mbart"),GEr=o(" \u2014 "),UV=a("a"),OEr=o("FlaxMBartForConditionalGeneration"),XEr=o(" (mBART model)"),VEr=l(),rM=a("li"),N2e=a("strong"),zEr=o("roberta"),WEr=o(" \u2014 "),JV=a("a"),QEr=o("FlaxRobertaForMaskedLM"),HEr=o(" (RoBERTa model)"),UEr=l(),tM=a("li"),D2e=a("strong"),JEr=o("roformer"),YEr=o(" \u2014 "),YV=a("a"),KEr=o("FlaxRoFormerForMaskedLM"),ZEr=o(" (RoFormer model)"),e3r=l(),aM=a("li"),j2e=a("strong"),o3r=o("xlm-roberta"),r3r=o(" \u2014 "),KV=a("a"),t3r=o("FlaxXLMRobertaForMaskedLM"),a3r=o(" (XLM-RoBERTa model)"),n3r=l(),q2e=a("p"),s3r=o("Examples:"),l3r=l(),f(KA.$$.fragment),VRe=l(),ff=a("h2"),nM=a("a"),G2e=a("span"),f(ZA.$$.fragment),i3r=l(),O2e=a("span"),d3r=o("FlaxAutoModelForSeq2SeqLM"),zRe=l(),Ir=a("div"),f(e0.$$.fragment),c3r=l(),mf=a("p"),f3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),X2e=a("code"),m3r=o("from_pretrained()"),g3r=o("class method or the "),V2e=a("code"),h3r=o("from_config()"),p3r=o(`class
method.`),_3r=l(),o0=a("p"),u3r=o("This class cannot be instantiated directly using "),z2e=a("code"),b3r=o("__init__()"),v3r=o(" (throws an error)."),T3r=l(),xt=a("div"),f(r0.$$.fragment),F3r=l(),W2e=a("p"),C3r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),M3r=l(),gf=a("p"),E3r=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),y3r=o("not"),w3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H2e=a("code"),A3r=o("from_pretrained()"),L3r=o("to load the model weights."),B3r=l(),U2e=a("p"),x3r=o("Examples:"),k3r=l(),f(t0.$$.fragment),R3r=l(),ko=a("div"),f(a0.$$.fragment),S3r=l(),J2e=a("p"),P3r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$3r=l(),Sn=a("p"),I3r=o("The model class to instantiate is selected based on the "),Y2e=a("code"),N3r=o("model_type"),D3r=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),j3r=o("pretrained_model_name_or_path"),q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),G3r=o("pretrained_model_name_or_path"),O3r=o(":"),X3r=l(),Me=a("ul"),sM=a("li"),eve=a("strong"),V3r=o("bart"),z3r=o(" \u2014 "),ZV=a("a"),W3r=o("FlaxBartForConditionalGeneration"),Q3r=o(" (BART model)"),H3r=l(),lM=a("li"),ove=a("strong"),U3r=o("blenderbot"),J3r=o(" \u2014 "),ez=a("a"),Y3r=o("FlaxBlenderbotForConditionalGeneration"),K3r=o(" (Blenderbot model)"),Z3r=l(),iM=a("li"),rve=a("strong"),eyr=o("blenderbot-small"),oyr=o(" \u2014 "),oz=a("a"),ryr=o("FlaxBlenderbotSmallForConditionalGeneration"),tyr=o(" (BlenderbotSmall model)"),ayr=l(),dM=a("li"),tve=a("strong"),nyr=o("encoder-decoder"),syr=o(" \u2014 "),rz=a("a"),lyr=o("FlaxEncoderDecoderModel"),iyr=o(" (Encoder decoder model)"),dyr=l(),cM=a("li"),ave=a("strong"),cyr=o("marian"),fyr=o(" \u2014 "),tz=a("a"),myr=o("FlaxMarianMTModel"),gyr=o(" (Marian model)"),hyr=l(),fM=a("li"),nve=a("strong"),pyr=o("mbart"),_yr=o(" \u2014 "),az=a("a"),uyr=o("FlaxMBartForConditionalGeneration"),byr=o(" (mBART model)"),vyr=l(),mM=a("li"),sve=a("strong"),Tyr=o("mt5"),Fyr=o(" \u2014 "),nz=a("a"),Cyr=o("FlaxMT5ForConditionalGeneration"),Myr=o(" (mT5 model)"),Eyr=l(),gM=a("li"),lve=a("strong"),yyr=o("pegasus"),wyr=o(" \u2014 "),sz=a("a"),Ayr=o("FlaxPegasusForConditionalGeneration"),Lyr=o(" (Pegasus model)"),Byr=l(),hM=a("li"),ive=a("strong"),xyr=o("t5"),kyr=o(" \u2014 "),lz=a("a"),Ryr=o("FlaxT5ForConditionalGeneration"),Syr=o(" (T5 model)"),Pyr=l(),dve=a("p"),$yr=o("Examples:"),Iyr=l(),f(n0.$$.fragment),WRe=l(),hf=a("h2"),pM=a("a"),cve=a("span"),f(s0.$$.fragment),Nyr=l(),fve=a("span"),Dyr=o("FlaxAutoModelForSequenceClassification"),QRe=l(),Nr=a("div"),f(l0.$$.fragment),jyr=l(),pf=a("p"),qyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mve=a("code"),Gyr=o("from_pretrained()"),Oyr=o("class method or the "),gve=a("code"),Xyr=o("from_config()"),Vyr=o(`class
method.`),zyr=l(),i0=a("p"),Wyr=o("This class cannot be instantiated directly using "),hve=a("code"),Qyr=o("__init__()"),Hyr=o(" (throws an error)."),Uyr=l(),kt=a("div"),f(d0.$$.fragment),Jyr=l(),pve=a("p"),Yyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Kyr=l(),_f=a("p"),Zyr=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),ewr=o("not"),owr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uve=a("code"),rwr=o("from_pretrained()"),twr=o("to load the model weights."),awr=l(),bve=a("p"),nwr=o("Examples:"),swr=l(),f(c0.$$.fragment),lwr=l(),Ro=a("div"),f(f0.$$.fragment),iwr=l(),vve=a("p"),dwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cwr=l(),Pn=a("p"),fwr=o("The model class to instantiate is selected based on the "),Tve=a("code"),mwr=o("model_type"),gwr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),hwr=o("pretrained_model_name_or_path"),pwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),_wr=o("pretrained_model_name_or_path"),uwr=o(":"),bwr=l(),be=a("ul"),_M=a("li"),Mve=a("strong"),vwr=o("albert"),Twr=o(" \u2014 "),iz=a("a"),Fwr=o("FlaxAlbertForSequenceClassification"),Cwr=o(" (ALBERT model)"),Mwr=l(),uM=a("li"),Eve=a("strong"),Ewr=o("bart"),ywr=o(" \u2014 "),dz=a("a"),wwr=o("FlaxBartForSequenceClassification"),Awr=o(" (BART model)"),Lwr=l(),bM=a("li"),yve=a("strong"),Bwr=o("bert"),xwr=o(" \u2014 "),cz=a("a"),kwr=o("FlaxBertForSequenceClassification"),Rwr=o(" (BERT model)"),Swr=l(),vM=a("li"),wve=a("strong"),Pwr=o("big_bird"),$wr=o(" \u2014 "),fz=a("a"),Iwr=o("FlaxBigBirdForSequenceClassification"),Nwr=o(" (BigBird model)"),Dwr=l(),TM=a("li"),Ave=a("strong"),jwr=o("distilbert"),qwr=o(" \u2014 "),mz=a("a"),Gwr=o("FlaxDistilBertForSequenceClassification"),Owr=o(" (DistilBERT model)"),Xwr=l(),FM=a("li"),Lve=a("strong"),Vwr=o("electra"),zwr=o(" \u2014 "),gz=a("a"),Wwr=o("FlaxElectraForSequenceClassification"),Qwr=o(" (ELECTRA model)"),Hwr=l(),CM=a("li"),Bve=a("strong"),Uwr=o("mbart"),Jwr=o(" \u2014 "),hz=a("a"),Ywr=o("FlaxMBartForSequenceClassification"),Kwr=o(" (mBART model)"),Zwr=l(),MM=a("li"),xve=a("strong"),e6r=o("roberta"),o6r=o(" \u2014 "),pz=a("a"),r6r=o("FlaxRobertaForSequenceClassification"),t6r=o(" (RoBERTa model)"),a6r=l(),EM=a("li"),kve=a("strong"),n6r=o("roformer"),s6r=o(" \u2014 "),_z=a("a"),l6r=o("FlaxRoFormerForSequenceClassification"),i6r=o(" (RoFormer model)"),d6r=l(),yM=a("li"),Rve=a("strong"),c6r=o("xlm-roberta"),f6r=o(" \u2014 "),uz=a("a"),m6r=o("FlaxXLMRobertaForSequenceClassification"),g6r=o(" (XLM-RoBERTa model)"),h6r=l(),Sve=a("p"),p6r=o("Examples:"),_6r=l(),f(m0.$$.fragment),HRe=l(),uf=a("h2"),wM=a("a"),Pve=a("span"),f(g0.$$.fragment),u6r=l(),$ve=a("span"),b6r=o("FlaxAutoModelForQuestionAnswering"),URe=l(),Dr=a("div"),f(h0.$$.fragment),v6r=l(),bf=a("p"),T6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ive=a("code"),F6r=o("from_pretrained()"),C6r=o("class method or the "),Nve=a("code"),M6r=o("from_config()"),E6r=o(`class
method.`),y6r=l(),p0=a("p"),w6r=o("This class cannot be instantiated directly using "),Dve=a("code"),A6r=o("__init__()"),L6r=o(" (throws an error)."),B6r=l(),Rt=a("div"),f(_0.$$.fragment),x6r=l(),jve=a("p"),k6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R6r=l(),vf=a("p"),S6r=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),P6r=o("not"),$6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gve=a("code"),I6r=o("from_pretrained()"),N6r=o("to load the model weights."),D6r=l(),Ove=a("p"),j6r=o("Examples:"),q6r=l(),f(u0.$$.fragment),G6r=l(),So=a("div"),f(b0.$$.fragment),O6r=l(),Xve=a("p"),X6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),V6r=l(),$n=a("p"),z6r=o("The model class to instantiate is selected based on the "),Vve=a("code"),W6r=o("model_type"),Q6r=o(` property of the config object (either
passed as an argument or loaded from `),zve=a("code"),H6r=o("pretrained_model_name_or_path"),U6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(":"),K6r=l(),ve=a("ul"),AM=a("li"),Qve=a("strong"),Z6r=o("albert"),eAr=o(" \u2014 "),bz=a("a"),oAr=o("FlaxAlbertForQuestionAnswering"),rAr=o(" (ALBERT model)"),tAr=l(),LM=a("li"),Hve=a("strong"),aAr=o("bart"),nAr=o(" \u2014 "),vz=a("a"),sAr=o("FlaxBartForQuestionAnswering"),lAr=o(" (BART model)"),iAr=l(),BM=a("li"),Uve=a("strong"),dAr=o("bert"),cAr=o(" \u2014 "),Tz=a("a"),fAr=o("FlaxBertForQuestionAnswering"),mAr=o(" (BERT model)"),gAr=l(),xM=a("li"),Jve=a("strong"),hAr=o("big_bird"),pAr=o(" \u2014 "),Fz=a("a"),_Ar=o("FlaxBigBirdForQuestionAnswering"),uAr=o(" (BigBird model)"),bAr=l(),kM=a("li"),Yve=a("strong"),vAr=o("distilbert"),TAr=o(" \u2014 "),Cz=a("a"),FAr=o("FlaxDistilBertForQuestionAnswering"),CAr=o(" (DistilBERT model)"),MAr=l(),RM=a("li"),Kve=a("strong"),EAr=o("electra"),yAr=o(" \u2014 "),Mz=a("a"),wAr=o("FlaxElectraForQuestionAnswering"),AAr=o(" (ELECTRA model)"),LAr=l(),SM=a("li"),Zve=a("strong"),BAr=o("mbart"),xAr=o(" \u2014 "),Ez=a("a"),kAr=o("FlaxMBartForQuestionAnswering"),RAr=o(" (mBART model)"),SAr=l(),PM=a("li"),eTe=a("strong"),PAr=o("roberta"),$Ar=o(" \u2014 "),yz=a("a"),IAr=o("FlaxRobertaForQuestionAnswering"),NAr=o(" (RoBERTa model)"),DAr=l(),$M=a("li"),oTe=a("strong"),jAr=o("roformer"),qAr=o(" \u2014 "),wz=a("a"),GAr=o("FlaxRoFormerForQuestionAnswering"),OAr=o(" (RoFormer model)"),XAr=l(),IM=a("li"),rTe=a("strong"),VAr=o("xlm-roberta"),zAr=o(" \u2014 "),Az=a("a"),WAr=o("FlaxXLMRobertaForQuestionAnswering"),QAr=o(" (XLM-RoBERTa model)"),HAr=l(),tTe=a("p"),UAr=o("Examples:"),JAr=l(),f(v0.$$.fragment),JRe=l(),Tf=a("h2"),NM=a("a"),aTe=a("span"),f(T0.$$.fragment),YAr=l(),nTe=a("span"),KAr=o("FlaxAutoModelForTokenClassification"),YRe=l(),jr=a("div"),f(F0.$$.fragment),ZAr=l(),Ff=a("p"),e0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sTe=a("code"),o0r=o("from_pretrained()"),r0r=o("class method or the "),lTe=a("code"),t0r=o("from_config()"),a0r=o(`class
method.`),n0r=l(),C0=a("p"),s0r=o("This class cannot be instantiated directly using "),iTe=a("code"),l0r=o("__init__()"),i0r=o(" (throws an error)."),d0r=l(),St=a("div"),f(M0.$$.fragment),c0r=l(),dTe=a("p"),f0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),m0r=l(),Cf=a("p"),g0r=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),h0r=o("not"),p0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fTe=a("code"),_0r=o("from_pretrained()"),u0r=o("to load the model weights."),b0r=l(),mTe=a("p"),v0r=o("Examples:"),T0r=l(),f(E0.$$.fragment),F0r=l(),Po=a("div"),f(y0.$$.fragment),C0r=l(),gTe=a("p"),M0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E0r=l(),In=a("p"),y0r=o("The model class to instantiate is selected based on the "),hTe=a("code"),w0r=o("model_type"),A0r=o(` property of the config object (either
passed as an argument or loaded from `),pTe=a("code"),L0r=o("pretrained_model_name_or_path"),B0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=a("code"),x0r=o("pretrained_model_name_or_path"),k0r=o(":"),R0r=l(),Se=a("ul"),DM=a("li"),uTe=a("strong"),S0r=o("albert"),P0r=o(" \u2014 "),Lz=a("a"),$0r=o("FlaxAlbertForTokenClassification"),I0r=o(" (ALBERT model)"),N0r=l(),jM=a("li"),bTe=a("strong"),D0r=o("bert"),j0r=o(" \u2014 "),Bz=a("a"),q0r=o("FlaxBertForTokenClassification"),G0r=o(" (BERT model)"),O0r=l(),qM=a("li"),vTe=a("strong"),X0r=o("big_bird"),V0r=o(" \u2014 "),xz=a("a"),z0r=o("FlaxBigBirdForTokenClassification"),W0r=o(" (BigBird model)"),Q0r=l(),GM=a("li"),TTe=a("strong"),H0r=o("distilbert"),U0r=o(" \u2014 "),kz=a("a"),J0r=o("FlaxDistilBertForTokenClassification"),Y0r=o(" (DistilBERT model)"),K0r=l(),OM=a("li"),FTe=a("strong"),Z0r=o("electra"),eLr=o(" \u2014 "),Rz=a("a"),oLr=o("FlaxElectraForTokenClassification"),rLr=o(" (ELECTRA model)"),tLr=l(),XM=a("li"),CTe=a("strong"),aLr=o("roberta"),nLr=o(" \u2014 "),Sz=a("a"),sLr=o("FlaxRobertaForTokenClassification"),lLr=o(" (RoBERTa model)"),iLr=l(),VM=a("li"),MTe=a("strong"),dLr=o("roformer"),cLr=o(" \u2014 "),Pz=a("a"),fLr=o("FlaxRoFormerForTokenClassification"),mLr=o(" (RoFormer model)"),gLr=l(),zM=a("li"),ETe=a("strong"),hLr=o("xlm-roberta"),pLr=o(" \u2014 "),$z=a("a"),_Lr=o("FlaxXLMRobertaForTokenClassification"),uLr=o(" (XLM-RoBERTa model)"),bLr=l(),yTe=a("p"),vLr=o("Examples:"),TLr=l(),f(w0.$$.fragment),KRe=l(),Mf=a("h2"),WM=a("a"),wTe=a("span"),f(A0.$$.fragment),FLr=l(),ATe=a("span"),CLr=o("FlaxAutoModelForMultipleChoice"),ZRe=l(),qr=a("div"),f(L0.$$.fragment),MLr=l(),Ef=a("p"),ELr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LTe=a("code"),yLr=o("from_pretrained()"),wLr=o("class method or the "),BTe=a("code"),ALr=o("from_config()"),LLr=o(`class
method.`),BLr=l(),B0=a("p"),xLr=o("This class cannot be instantiated directly using "),xTe=a("code"),kLr=o("__init__()"),RLr=o(" (throws an error)."),SLr=l(),Pt=a("div"),f(x0.$$.fragment),PLr=l(),kTe=a("p"),$Lr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ILr=l(),yf=a("p"),NLr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),DLr=o("not"),jLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),STe=a("code"),qLr=o("from_pretrained()"),GLr=o("to load the model weights."),OLr=l(),PTe=a("p"),XLr=o("Examples:"),VLr=l(),f(k0.$$.fragment),zLr=l(),$o=a("div"),f(R0.$$.fragment),WLr=l(),$Te=a("p"),QLr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HLr=l(),Nn=a("p"),ULr=o("The model class to instantiate is selected based on the "),ITe=a("code"),JLr=o("model_type"),YLr=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),KLr=o("pretrained_model_name_or_path"),ZLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),e9r=o("pretrained_model_name_or_path"),o9r=o(":"),r9r=l(),Pe=a("ul"),QM=a("li"),jTe=a("strong"),t9r=o("albert"),a9r=o(" \u2014 "),Iz=a("a"),n9r=o("FlaxAlbertForMultipleChoice"),s9r=o(" (ALBERT model)"),l9r=l(),HM=a("li"),qTe=a("strong"),i9r=o("bert"),d9r=o(" \u2014 "),Nz=a("a"),c9r=o("FlaxBertForMultipleChoice"),f9r=o(" (BERT model)"),m9r=l(),UM=a("li"),GTe=a("strong"),g9r=o("big_bird"),h9r=o(" \u2014 "),Dz=a("a"),p9r=o("FlaxBigBirdForMultipleChoice"),_9r=o(" (BigBird model)"),u9r=l(),JM=a("li"),OTe=a("strong"),b9r=o("distilbert"),v9r=o(" \u2014 "),jz=a("a"),T9r=o("FlaxDistilBertForMultipleChoice"),F9r=o(" (DistilBERT model)"),C9r=l(),YM=a("li"),XTe=a("strong"),M9r=o("electra"),E9r=o(" \u2014 "),qz=a("a"),y9r=o("FlaxElectraForMultipleChoice"),w9r=o(" (ELECTRA model)"),A9r=l(),KM=a("li"),VTe=a("strong"),L9r=o("roberta"),B9r=o(" \u2014 "),Gz=a("a"),x9r=o("FlaxRobertaForMultipleChoice"),k9r=o(" (RoBERTa model)"),R9r=l(),ZM=a("li"),zTe=a("strong"),S9r=o("roformer"),P9r=o(" \u2014 "),Oz=a("a"),$9r=o("FlaxRoFormerForMultipleChoice"),I9r=o(" (RoFormer model)"),N9r=l(),e4=a("li"),WTe=a("strong"),D9r=o("xlm-roberta"),j9r=o(" \u2014 "),Xz=a("a"),q9r=o("FlaxXLMRobertaForMultipleChoice"),G9r=o(" (XLM-RoBERTa model)"),O9r=l(),QTe=a("p"),X9r=o("Examples:"),V9r=l(),f(S0.$$.fragment),eSe=l(),wf=a("h2"),o4=a("a"),HTe=a("span"),f(P0.$$.fragment),z9r=l(),UTe=a("span"),W9r=o("FlaxAutoModelForNextSentencePrediction"),oSe=l(),Gr=a("div"),f($0.$$.fragment),Q9r=l(),Af=a("p"),H9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JTe=a("code"),U9r=o("from_pretrained()"),J9r=o("class method or the "),YTe=a("code"),Y9r=o("from_config()"),K9r=o(`class
method.`),Z9r=l(),I0=a("p"),eBr=o("This class cannot be instantiated directly using "),KTe=a("code"),oBr=o("__init__()"),rBr=o(" (throws an error)."),tBr=l(),$t=a("div"),f(N0.$$.fragment),aBr=l(),ZTe=a("p"),nBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sBr=l(),Lf=a("p"),lBr=o(`Note:
Loading a model from its configuration file does `),e7e=a("strong"),iBr=o("not"),dBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o7e=a("code"),cBr=o("from_pretrained()"),fBr=o("to load the model weights."),mBr=l(),r7e=a("p"),gBr=o("Examples:"),hBr=l(),f(D0.$$.fragment),pBr=l(),Io=a("div"),f(j0.$$.fragment),_Br=l(),t7e=a("p"),uBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bBr=l(),Dn=a("p"),vBr=o("The model class to instantiate is selected based on the "),a7e=a("code"),TBr=o("model_type"),FBr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),CBr=o("pretrained_model_name_or_path"),MBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),EBr=o("pretrained_model_name_or_path"),yBr=o(":"),wBr=l(),l7e=a("ul"),r4=a("li"),i7e=a("strong"),ABr=o("bert"),LBr=o(" \u2014 "),Vz=a("a"),BBr=o("FlaxBertForNextSentencePrediction"),xBr=o(" (BERT model)"),kBr=l(),d7e=a("p"),RBr=o("Examples:"),SBr=l(),f(q0.$$.fragment),rSe=l(),Bf=a("h2"),t4=a("a"),c7e=a("span"),f(G0.$$.fragment),PBr=l(),f7e=a("span"),$Br=o("FlaxAutoModelForImageClassification"),tSe=l(),Or=a("div"),f(O0.$$.fragment),IBr=l(),xf=a("p"),NBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),m7e=a("code"),DBr=o("from_pretrained()"),jBr=o("class method or the "),g7e=a("code"),qBr=o("from_config()"),GBr=o(`class
method.`),OBr=l(),X0=a("p"),XBr=o("This class cannot be instantiated directly using "),h7e=a("code"),VBr=o("__init__()"),zBr=o(" (throws an error)."),WBr=l(),It=a("div"),f(V0.$$.fragment),QBr=l(),p7e=a("p"),HBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UBr=l(),kf=a("p"),JBr=o(`Note:
Loading a model from its configuration file does `),_7e=a("strong"),YBr=o("not"),KBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),u7e=a("code"),ZBr=o("from_pretrained()"),exr=o("to load the model weights."),oxr=l(),b7e=a("p"),rxr=o("Examples:"),txr=l(),f(z0.$$.fragment),axr=l(),No=a("div"),f(W0.$$.fragment),nxr=l(),v7e=a("p"),sxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lxr=l(),jn=a("p"),ixr=o("The model class to instantiate is selected based on the "),T7e=a("code"),dxr=o("model_type"),cxr=o(` property of the config object (either
passed as an argument or loaded from `),F7e=a("code"),fxr=o("pretrained_model_name_or_path"),mxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(":"),pxr=l(),Q0=a("ul"),a4=a("li"),M7e=a("strong"),_xr=o("beit"),uxr=o(" \u2014 "),zz=a("a"),bxr=o("FlaxBeitForImageClassification"),vxr=o(" (BEiT model)"),Txr=l(),n4=a("li"),E7e=a("strong"),Fxr=o("vit"),Cxr=o(" \u2014 "),Wz=a("a"),Mxr=o("FlaxViTForImageClassification"),Exr=o(" (ViT model)"),yxr=l(),y7e=a("p"),wxr=o("Examples:"),Axr=l(),f(H0.$$.fragment),aSe=l(),Rf=a("h2"),s4=a("a"),w7e=a("span"),f(U0.$$.fragment),Lxr=l(),A7e=a("span"),Bxr=o("FlaxAutoModelForVision2Seq"),nSe=l(),Xr=a("div"),f(J0.$$.fragment),xxr=l(),Sf=a("p"),kxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),L7e=a("code"),Rxr=o("from_pretrained()"),Sxr=o("class method or the "),B7e=a("code"),Pxr=o("from_config()"),$xr=o(`class
method.`),Ixr=l(),Y0=a("p"),Nxr=o("This class cannot be instantiated directly using "),x7e=a("code"),Dxr=o("__init__()"),jxr=o(" (throws an error)."),qxr=l(),Nt=a("div"),f(K0.$$.fragment),Gxr=l(),k7e=a("p"),Oxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xxr=l(),Pf=a("p"),Vxr=o(`Note:
Loading a model from its configuration file does `),R7e=a("strong"),zxr=o("not"),Wxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),S7e=a("code"),Qxr=o("from_pretrained()"),Hxr=o("to load the model weights."),Uxr=l(),P7e=a("p"),Jxr=o("Examples:"),Yxr=l(),f(Z0.$$.fragment),Kxr=l(),Do=a("div"),f(eL.$$.fragment),Zxr=l(),$7e=a("p"),ekr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),okr=l(),qn=a("p"),rkr=o("The model class to instantiate is selected based on the "),I7e=a("code"),tkr=o("model_type"),akr=o(` property of the config object (either
passed as an argument or loaded from `),N7e=a("code"),nkr=o("pretrained_model_name_or_path"),skr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=a("code"),lkr=o("pretrained_model_name_or_path"),ikr=o(":"),dkr=l(),j7e=a("ul"),l4=a("li"),q7e=a("strong"),ckr=o("vision-encoder-decoder"),fkr=o(" \u2014 "),Qz=a("a"),mkr=o("FlaxVisionEncoderDecoderModel"),gkr=o(" (Vision Encoder decoder model)"),hkr=l(),G7e=a("p"),pkr=o("Examples:"),_kr=l(),f(oL.$$.fragment),this.h()},l(c){const u=vCt('[data-svelte="svelte-1phssyn"]',document.head);K=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var rL=s(de);Ee=n(rL,"A",{id:!0,class:!0,href:!0});var O7e=s(Ee);lo=n(O7e,"SPAN",{});var X7e=s(lo);m(fe.$$.fragment,X7e),X7e.forEach(t),O7e.forEach(t),Ce=i(rL),Vo=n(rL,"SPAN",{});var bkr=s(Vo);Ii=r(bkr,"Auto Classes"),bkr.forEach(t),rL.forEach(t),Nf=i(c),fa=n(c,"P",{});var lSe=s(fa);Ni=r(lSe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(lSe,"CODE",{});var vkr=s(Di);lE=r(vkr,"from_pretrained()"),vkr.forEach(t),Df=r(lSe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),lSe.forEach(t),Be=i(c),co=n(c,"P",{});var i4=s(co);ji=r(i4,"Instantiating one of "),Gn=n(i4,"A",{href:!0});var Tkr=s(Gn);iE=r(Tkr,"AutoConfig"),Tkr.forEach(t),On=r(i4,", "),Xn=n(i4,"A",{href:!0});var Fkr=s(Xn);dE=r(Fkr,"AutoModel"),Fkr.forEach(t),qi=r(i4,`, and
`),Vn=n(i4,"A",{href:!0});var Ckr=s(Vn);cE=r(Ckr,"AutoTokenizer"),Ckr.forEach(t),Gi=r(i4," will directly create a class of the relevant architecture. For instance"),i4.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),pe=n(c,"P",{});var iSe=s(pe);ZL=r(iSe,"will create a model that is an instance of "),Oi=n(iSe,"A",{href:!0});var Mkr=s(Oi);e9=r(Mkr,"BertModel"),Mkr.forEach(t),o9=r(iSe,"."),iSe.forEach(t),zo=i(c),Ga=n(c,"P",{});var dSe=s(Ga);r9=r(dSe,"There is one class of "),qf=n(dSe,"CODE",{});var Ekr=s(qf);t9=r(Ekr,"AutoModel"),Ekr.forEach(t),b$e=r(dSe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),dSe.forEach(t),nke=i(c),Xi=n(c,"H2",{class:!0});var cSe=s(Xi);Gf=n(cSe,"A",{id:!0,class:!0,href:!0});var ykr=s(Gf);GQ=n(ykr,"SPAN",{});var wkr=s(GQ);m(fE.$$.fragment,wkr),wkr.forEach(t),ykr.forEach(t),v$e=i(cSe),OQ=n(cSe,"SPAN",{});var Akr=s(OQ);T$e=r(Akr,"Extending the Auto Classes"),Akr.forEach(t),cSe.forEach(t),ske=i(c),zn=n(c,"P",{});var Hz=s(zn);F$e=r(Hz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),XQ=n(Hz,"CODE",{});var Lkr=s(XQ);C$e=r(Lkr,"NewModel"),Lkr.forEach(t),M$e=r(Hz,", make sure you have a "),VQ=n(Hz,"CODE",{});var Bkr=s(VQ);E$e=r(Bkr,"NewModelConfig"),Bkr.forEach(t),y$e=r(Hz,` then you can add those to the auto
classes like this:`),Hz.forEach(t),lke=i(c),m(mE.$$.fragment,c),ike=i(c),a9=n(c,"P",{});var xkr=s(a9);w$e=r(xkr,"You will then be able to use the auto classes like you would usually do!"),xkr.forEach(t),dke=i(c),m(Of.$$.fragment,c),cke=i(c),Vi=n(c,"H2",{class:!0});var fSe=s(Vi);Xf=n(fSe,"A",{id:!0,class:!0,href:!0});var kkr=s(Xf);zQ=n(kkr,"SPAN",{});var Rkr=s(zQ);m(gE.$$.fragment,Rkr),Rkr.forEach(t),kkr.forEach(t),A$e=i(fSe),WQ=n(fSe,"SPAN",{});var Skr=s(WQ);L$e=r(Skr,"AutoConfig"),Skr.forEach(t),fSe.forEach(t),fke=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(hE.$$.fragment,Os),B$e=i(Os),pE=n(Os,"P",{});var mSe=s(pE);x$e=r(mSe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),n9=n(mSe,"A",{href:!0});var Pkr=s(n9);k$e=r(Pkr,"from_pretrained()"),Pkr.forEach(t),R$e=r(mSe," class method."),mSe.forEach(t),S$e=i(Os),_E=n(Os,"P",{});var gSe=s(_E);P$e=r(gSe,"This class cannot be instantiated directly using "),QQ=n(gSe,"CODE",{});var $kr=s(QQ);$$e=r($kr,"__init__()"),$kr.forEach(t),I$e=r(gSe," (throws an error)."),gSe.forEach(t),N$e=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(uE.$$.fragment,ga),D$e=i(ga),HQ=n(ga,"P",{});var Ikr=s(HQ);j$e=r(Ikr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Ikr.forEach(t),q$e=i(ga),zi=n(ga,"P",{});var Uz=s(zi);G$e=r(Uz,"The configuration class to instantiate is selected based on the "),UQ=n(Uz,"CODE",{});var Nkr=s(UQ);O$e=r(Nkr,"model_type"),Nkr.forEach(t),X$e=r(Uz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),JQ=n(Uz,"CODE",{});var Dkr=s(JQ);V$e=r(Dkr,"pretrained_model_name_or_path"),Dkr.forEach(t),z$e=r(Uz,":"),Uz.forEach(t),W$e=i(ga),v=n(ga,"UL",{});var T=s(v);Vf=n(T,"LI",{});var V7e=s(Vf);YQ=n(V7e,"STRONG",{});var jkr=s(YQ);Q$e=r(jkr,"albert"),jkr.forEach(t),H$e=r(V7e," \u2014 "),s9=n(V7e,"A",{href:!0});var qkr=s(s9);U$e=r(qkr,"AlbertConfig"),qkr.forEach(t),J$e=r(V7e," (ALBERT model)"),V7e.forEach(t),Y$e=i(T),zf=n(T,"LI",{});var z7e=s(zf);KQ=n(z7e,"STRONG",{});var Gkr=s(KQ);K$e=r(Gkr,"bart"),Gkr.forEach(t),Z$e=r(z7e," \u2014 "),l9=n(z7e,"A",{href:!0});var Okr=s(l9);eIe=r(Okr,"BartConfig"),Okr.forEach(t),oIe=r(z7e," (BART model)"),z7e.forEach(t),rIe=i(T),Wf=n(T,"LI",{});var W7e=s(Wf);ZQ=n(W7e,"STRONG",{});var Xkr=s(ZQ);tIe=r(Xkr,"beit"),Xkr.forEach(t),aIe=r(W7e," \u2014 "),i9=n(W7e,"A",{href:!0});var Vkr=s(i9);nIe=r(Vkr,"BeitConfig"),Vkr.forEach(t),sIe=r(W7e," (BEiT model)"),W7e.forEach(t),lIe=i(T),Qf=n(T,"LI",{});var Q7e=s(Qf);eH=n(Q7e,"STRONG",{});var zkr=s(eH);iIe=r(zkr,"bert"),zkr.forEach(t),dIe=r(Q7e," \u2014 "),d9=n(Q7e,"A",{href:!0});var Wkr=s(d9);cIe=r(Wkr,"BertConfig"),Wkr.forEach(t),fIe=r(Q7e," (BERT model)"),Q7e.forEach(t),mIe=i(T),Hf=n(T,"LI",{});var H7e=s(Hf);oH=n(H7e,"STRONG",{});var Qkr=s(oH);gIe=r(Qkr,"bert-generation"),Qkr.forEach(t),hIe=r(H7e," \u2014 "),c9=n(H7e,"A",{href:!0});var Hkr=s(c9);pIe=r(Hkr,"BertGenerationConfig"),Hkr.forEach(t),_Ie=r(H7e," (Bert Generation model)"),H7e.forEach(t),uIe=i(T),Uf=n(T,"LI",{});var U7e=s(Uf);rH=n(U7e,"STRONG",{});var Ukr=s(rH);bIe=r(Ukr,"big_bird"),Ukr.forEach(t),vIe=r(U7e," \u2014 "),f9=n(U7e,"A",{href:!0});var Jkr=s(f9);TIe=r(Jkr,"BigBirdConfig"),Jkr.forEach(t),FIe=r(U7e," (BigBird model)"),U7e.forEach(t),CIe=i(T),Jf=n(T,"LI",{});var J7e=s(Jf);tH=n(J7e,"STRONG",{});var Ykr=s(tH);MIe=r(Ykr,"bigbird_pegasus"),Ykr.forEach(t),EIe=r(J7e," \u2014 "),m9=n(J7e,"A",{href:!0});var Kkr=s(m9);yIe=r(Kkr,"BigBirdPegasusConfig"),Kkr.forEach(t),wIe=r(J7e," (BigBirdPegasus model)"),J7e.forEach(t),AIe=i(T),Yf=n(T,"LI",{});var Y7e=s(Yf);aH=n(Y7e,"STRONG",{});var Zkr=s(aH);LIe=r(Zkr,"blenderbot"),Zkr.forEach(t),BIe=r(Y7e," \u2014 "),g9=n(Y7e,"A",{href:!0});var eRr=s(g9);xIe=r(eRr,"BlenderbotConfig"),eRr.forEach(t),kIe=r(Y7e," (Blenderbot model)"),Y7e.forEach(t),RIe=i(T),Kf=n(T,"LI",{});var K7e=s(Kf);nH=n(K7e,"STRONG",{});var oRr=s(nH);SIe=r(oRr,"blenderbot-small"),oRr.forEach(t),PIe=r(K7e," \u2014 "),h9=n(K7e,"A",{href:!0});var rRr=s(h9);$Ie=r(rRr,"BlenderbotSmallConfig"),rRr.forEach(t),IIe=r(K7e," (BlenderbotSmall model)"),K7e.forEach(t),NIe=i(T),Zf=n(T,"LI",{});var Z7e=s(Zf);sH=n(Z7e,"STRONG",{});var tRr=s(sH);DIe=r(tRr,"camembert"),tRr.forEach(t),jIe=r(Z7e," \u2014 "),p9=n(Z7e,"A",{href:!0});var aRr=s(p9);qIe=r(aRr,"CamembertConfig"),aRr.forEach(t),GIe=r(Z7e," (CamemBERT model)"),Z7e.forEach(t),OIe=i(T),em=n(T,"LI",{});var e8e=s(em);lH=n(e8e,"STRONG",{});var nRr=s(lH);XIe=r(nRr,"canine"),nRr.forEach(t),VIe=r(e8e," \u2014 "),_9=n(e8e,"A",{href:!0});var sRr=s(_9);zIe=r(sRr,"CanineConfig"),sRr.forEach(t),WIe=r(e8e," (Canine model)"),e8e.forEach(t),QIe=i(T),om=n(T,"LI",{});var o8e=s(om);iH=n(o8e,"STRONG",{});var lRr=s(iH);HIe=r(lRr,"clip"),lRr.forEach(t),UIe=r(o8e," \u2014 "),u9=n(o8e,"A",{href:!0});var iRr=s(u9);JIe=r(iRr,"CLIPConfig"),iRr.forEach(t),YIe=r(o8e," (CLIP model)"),o8e.forEach(t),KIe=i(T),rm=n(T,"LI",{});var r8e=s(rm);dH=n(r8e,"STRONG",{});var dRr=s(dH);ZIe=r(dRr,"convbert"),dRr.forEach(t),eNe=r(r8e," \u2014 "),b9=n(r8e,"A",{href:!0});var cRr=s(b9);oNe=r(cRr,"ConvBertConfig"),cRr.forEach(t),rNe=r(r8e," (ConvBERT model)"),r8e.forEach(t),tNe=i(T),tm=n(T,"LI",{});var t8e=s(tm);cH=n(t8e,"STRONG",{});var fRr=s(cH);aNe=r(fRr,"convnext"),fRr.forEach(t),nNe=r(t8e," \u2014 "),v9=n(t8e,"A",{href:!0});var mRr=s(v9);sNe=r(mRr,"ConvNextConfig"),mRr.forEach(t),lNe=r(t8e," (ConvNext model)"),t8e.forEach(t),iNe=i(T),am=n(T,"LI",{});var a8e=s(am);fH=n(a8e,"STRONG",{});var gRr=s(fH);dNe=r(gRr,"ctrl"),gRr.forEach(t),cNe=r(a8e," \u2014 "),T9=n(a8e,"A",{href:!0});var hRr=s(T9);fNe=r(hRr,"CTRLConfig"),hRr.forEach(t),mNe=r(a8e," (CTRL model)"),a8e.forEach(t),gNe=i(T),nm=n(T,"LI",{});var n8e=s(nm);mH=n(n8e,"STRONG",{});var pRr=s(mH);hNe=r(pRr,"data2vec-audio"),pRr.forEach(t),pNe=r(n8e," \u2014 "),F9=n(n8e,"A",{href:!0});var _Rr=s(F9);_Ne=r(_Rr,"Data2VecAudioConfig"),_Rr.forEach(t),uNe=r(n8e," (Data2VecAudio model)"),n8e.forEach(t),bNe=i(T),sm=n(T,"LI",{});var s8e=s(sm);gH=n(s8e,"STRONG",{});var uRr=s(gH);vNe=r(uRr,"data2vec-text"),uRr.forEach(t),TNe=r(s8e," \u2014 "),C9=n(s8e,"A",{href:!0});var bRr=s(C9);FNe=r(bRr,"Data2VecTextConfig"),bRr.forEach(t),CNe=r(s8e," (Data2VecText model)"),s8e.forEach(t),MNe=i(T),lm=n(T,"LI",{});var l8e=s(lm);hH=n(l8e,"STRONG",{});var vRr=s(hH);ENe=r(vRr,"deberta"),vRr.forEach(t),yNe=r(l8e," \u2014 "),M9=n(l8e,"A",{href:!0});var TRr=s(M9);wNe=r(TRr,"DebertaConfig"),TRr.forEach(t),ANe=r(l8e," (DeBERTa model)"),l8e.forEach(t),LNe=i(T),im=n(T,"LI",{});var i8e=s(im);pH=n(i8e,"STRONG",{});var FRr=s(pH);BNe=r(FRr,"deberta-v2"),FRr.forEach(t),xNe=r(i8e," \u2014 "),E9=n(i8e,"A",{href:!0});var CRr=s(E9);kNe=r(CRr,"DebertaV2Config"),CRr.forEach(t),RNe=r(i8e," (DeBERTa-v2 model)"),i8e.forEach(t),SNe=i(T),dm=n(T,"LI",{});var d8e=s(dm);_H=n(d8e,"STRONG",{});var MRr=s(_H);PNe=r(MRr,"decision_transformer"),MRr.forEach(t),$Ne=r(d8e," \u2014 "),y9=n(d8e,"A",{href:!0});var ERr=s(y9);INe=r(ERr,"DecisionTransformerConfig"),ERr.forEach(t),NNe=r(d8e," (Decision Transformer model)"),d8e.forEach(t),DNe=i(T),cm=n(T,"LI",{});var c8e=s(cm);uH=n(c8e,"STRONG",{});var yRr=s(uH);jNe=r(yRr,"deit"),yRr.forEach(t),qNe=r(c8e," \u2014 "),w9=n(c8e,"A",{href:!0});var wRr=s(w9);GNe=r(wRr,"DeiTConfig"),wRr.forEach(t),ONe=r(c8e," (DeiT model)"),c8e.forEach(t),XNe=i(T),fm=n(T,"LI",{});var f8e=s(fm);bH=n(f8e,"STRONG",{});var ARr=s(bH);VNe=r(ARr,"detr"),ARr.forEach(t),zNe=r(f8e," \u2014 "),A9=n(f8e,"A",{href:!0});var LRr=s(A9);WNe=r(LRr,"DetrConfig"),LRr.forEach(t),QNe=r(f8e," (DETR model)"),f8e.forEach(t),HNe=i(T),mm=n(T,"LI",{});var m8e=s(mm);vH=n(m8e,"STRONG",{});var BRr=s(vH);UNe=r(BRr,"distilbert"),BRr.forEach(t),JNe=r(m8e," \u2014 "),L9=n(m8e,"A",{href:!0});var xRr=s(L9);YNe=r(xRr,"DistilBertConfig"),xRr.forEach(t),KNe=r(m8e," (DistilBERT model)"),m8e.forEach(t),ZNe=i(T),gm=n(T,"LI",{});var g8e=s(gm);TH=n(g8e,"STRONG",{});var kRr=s(TH);eDe=r(kRr,"dpr"),kRr.forEach(t),oDe=r(g8e," \u2014 "),B9=n(g8e,"A",{href:!0});var RRr=s(B9);rDe=r(RRr,"DPRConfig"),RRr.forEach(t),tDe=r(g8e," (DPR model)"),g8e.forEach(t),aDe=i(T),hm=n(T,"LI",{});var h8e=s(hm);FH=n(h8e,"STRONG",{});var SRr=s(FH);nDe=r(SRr,"electra"),SRr.forEach(t),sDe=r(h8e," \u2014 "),x9=n(h8e,"A",{href:!0});var PRr=s(x9);lDe=r(PRr,"ElectraConfig"),PRr.forEach(t),iDe=r(h8e," (ELECTRA model)"),h8e.forEach(t),dDe=i(T),pm=n(T,"LI",{});var p8e=s(pm);CH=n(p8e,"STRONG",{});var $Rr=s(CH);cDe=r($Rr,"encoder-decoder"),$Rr.forEach(t),fDe=r(p8e," \u2014 "),k9=n(p8e,"A",{href:!0});var IRr=s(k9);mDe=r(IRr,"EncoderDecoderConfig"),IRr.forEach(t),gDe=r(p8e," (Encoder decoder model)"),p8e.forEach(t),hDe=i(T),_m=n(T,"LI",{});var _8e=s(_m);MH=n(_8e,"STRONG",{});var NRr=s(MH);pDe=r(NRr,"flaubert"),NRr.forEach(t),_De=r(_8e," \u2014 "),R9=n(_8e,"A",{href:!0});var DRr=s(R9);uDe=r(DRr,"FlaubertConfig"),DRr.forEach(t),bDe=r(_8e," (FlauBERT model)"),_8e.forEach(t),vDe=i(T),um=n(T,"LI",{});var u8e=s(um);EH=n(u8e,"STRONG",{});var jRr=s(EH);TDe=r(jRr,"fnet"),jRr.forEach(t),FDe=r(u8e," \u2014 "),S9=n(u8e,"A",{href:!0});var qRr=s(S9);CDe=r(qRr,"FNetConfig"),qRr.forEach(t),MDe=r(u8e," (FNet model)"),u8e.forEach(t),EDe=i(T),bm=n(T,"LI",{});var b8e=s(bm);yH=n(b8e,"STRONG",{});var GRr=s(yH);yDe=r(GRr,"fsmt"),GRr.forEach(t),wDe=r(b8e," \u2014 "),P9=n(b8e,"A",{href:!0});var ORr=s(P9);ADe=r(ORr,"FSMTConfig"),ORr.forEach(t),LDe=r(b8e," (FairSeq Machine-Translation model)"),b8e.forEach(t),BDe=i(T),vm=n(T,"LI",{});var v8e=s(vm);wH=n(v8e,"STRONG",{});var XRr=s(wH);xDe=r(XRr,"funnel"),XRr.forEach(t),kDe=r(v8e," \u2014 "),$9=n(v8e,"A",{href:!0});var VRr=s($9);RDe=r(VRr,"FunnelConfig"),VRr.forEach(t),SDe=r(v8e," (Funnel Transformer model)"),v8e.forEach(t),PDe=i(T),Tm=n(T,"LI",{});var T8e=s(Tm);AH=n(T8e,"STRONG",{});var zRr=s(AH);$De=r(zRr,"glpn"),zRr.forEach(t),IDe=r(T8e," \u2014 "),I9=n(T8e,"A",{href:!0});var WRr=s(I9);NDe=r(WRr,"GLPNConfig"),WRr.forEach(t),DDe=r(T8e," (GLPN model)"),T8e.forEach(t),jDe=i(T),Fm=n(T,"LI",{});var F8e=s(Fm);LH=n(F8e,"STRONG",{});var QRr=s(LH);qDe=r(QRr,"gpt2"),QRr.forEach(t),GDe=r(F8e," \u2014 "),N9=n(F8e,"A",{href:!0});var HRr=s(N9);ODe=r(HRr,"GPT2Config"),HRr.forEach(t),XDe=r(F8e," (OpenAI GPT-2 model)"),F8e.forEach(t),VDe=i(T),Cm=n(T,"LI",{});var C8e=s(Cm);BH=n(C8e,"STRONG",{});var URr=s(BH);zDe=r(URr,"gpt_neo"),URr.forEach(t),WDe=r(C8e," \u2014 "),D9=n(C8e,"A",{href:!0});var JRr=s(D9);QDe=r(JRr,"GPTNeoConfig"),JRr.forEach(t),HDe=r(C8e," (GPT Neo model)"),C8e.forEach(t),UDe=i(T),Mm=n(T,"LI",{});var M8e=s(Mm);xH=n(M8e,"STRONG",{});var YRr=s(xH);JDe=r(YRr,"gptj"),YRr.forEach(t),YDe=r(M8e," \u2014 "),j9=n(M8e,"A",{href:!0});var KRr=s(j9);KDe=r(KRr,"GPTJConfig"),KRr.forEach(t),ZDe=r(M8e," (GPT-J model)"),M8e.forEach(t),eje=i(T),Em=n(T,"LI",{});var E8e=s(Em);kH=n(E8e,"STRONG",{});var ZRr=s(kH);oje=r(ZRr,"hubert"),ZRr.forEach(t),rje=r(E8e," \u2014 "),q9=n(E8e,"A",{href:!0});var eSr=s(q9);tje=r(eSr,"HubertConfig"),eSr.forEach(t),aje=r(E8e," (Hubert model)"),E8e.forEach(t),nje=i(T),ym=n(T,"LI",{});var y8e=s(ym);RH=n(y8e,"STRONG",{});var oSr=s(RH);sje=r(oSr,"ibert"),oSr.forEach(t),lje=r(y8e," \u2014 "),G9=n(y8e,"A",{href:!0});var rSr=s(G9);ije=r(rSr,"IBertConfig"),rSr.forEach(t),dje=r(y8e," (I-BERT model)"),y8e.forEach(t),cje=i(T),wm=n(T,"LI",{});var w8e=s(wm);SH=n(w8e,"STRONG",{});var tSr=s(SH);fje=r(tSr,"imagegpt"),tSr.forEach(t),mje=r(w8e," \u2014 "),O9=n(w8e,"A",{href:!0});var aSr=s(O9);gje=r(aSr,"ImageGPTConfig"),aSr.forEach(t),hje=r(w8e," (ImageGPT model)"),w8e.forEach(t),pje=i(T),Am=n(T,"LI",{});var A8e=s(Am);PH=n(A8e,"STRONG",{});var nSr=s(PH);_je=r(nSr,"layoutlm"),nSr.forEach(t),uje=r(A8e," \u2014 "),X9=n(A8e,"A",{href:!0});var sSr=s(X9);bje=r(sSr,"LayoutLMConfig"),sSr.forEach(t),vje=r(A8e," (LayoutLM model)"),A8e.forEach(t),Tje=i(T),Lm=n(T,"LI",{});var L8e=s(Lm);$H=n(L8e,"STRONG",{});var lSr=s($H);Fje=r(lSr,"layoutlmv2"),lSr.forEach(t),Cje=r(L8e," \u2014 "),V9=n(L8e,"A",{href:!0});var iSr=s(V9);Mje=r(iSr,"LayoutLMv2Config"),iSr.forEach(t),Eje=r(L8e," (LayoutLMv2 model)"),L8e.forEach(t),yje=i(T),Bm=n(T,"LI",{});var B8e=s(Bm);IH=n(B8e,"STRONG",{});var dSr=s(IH);wje=r(dSr,"led"),dSr.forEach(t),Aje=r(B8e," \u2014 "),z9=n(B8e,"A",{href:!0});var cSr=s(z9);Lje=r(cSr,"LEDConfig"),cSr.forEach(t),Bje=r(B8e," (LED model)"),B8e.forEach(t),xje=i(T),xm=n(T,"LI",{});var x8e=s(xm);NH=n(x8e,"STRONG",{});var fSr=s(NH);kje=r(fSr,"longformer"),fSr.forEach(t),Rje=r(x8e," \u2014 "),W9=n(x8e,"A",{href:!0});var mSr=s(W9);Sje=r(mSr,"LongformerConfig"),mSr.forEach(t),Pje=r(x8e," (Longformer model)"),x8e.forEach(t),$je=i(T),km=n(T,"LI",{});var k8e=s(km);DH=n(k8e,"STRONG",{});var gSr=s(DH);Ije=r(gSr,"luke"),gSr.forEach(t),Nje=r(k8e," \u2014 "),Q9=n(k8e,"A",{href:!0});var hSr=s(Q9);Dje=r(hSr,"LukeConfig"),hSr.forEach(t),jje=r(k8e," (LUKE model)"),k8e.forEach(t),qje=i(T),Rm=n(T,"LI",{});var R8e=s(Rm);jH=n(R8e,"STRONG",{});var pSr=s(jH);Gje=r(pSr,"lxmert"),pSr.forEach(t),Oje=r(R8e," \u2014 "),H9=n(R8e,"A",{href:!0});var _Sr=s(H9);Xje=r(_Sr,"LxmertConfig"),_Sr.forEach(t),Vje=r(R8e," (LXMERT model)"),R8e.forEach(t),zje=i(T),Sm=n(T,"LI",{});var S8e=s(Sm);qH=n(S8e,"STRONG",{});var uSr=s(qH);Wje=r(uSr,"m2m_100"),uSr.forEach(t),Qje=r(S8e," \u2014 "),U9=n(S8e,"A",{href:!0});var bSr=s(U9);Hje=r(bSr,"M2M100Config"),bSr.forEach(t),Uje=r(S8e," (M2M100 model)"),S8e.forEach(t),Jje=i(T),Pm=n(T,"LI",{});var P8e=s(Pm);GH=n(P8e,"STRONG",{});var vSr=s(GH);Yje=r(vSr,"marian"),vSr.forEach(t),Kje=r(P8e," \u2014 "),J9=n(P8e,"A",{href:!0});var TSr=s(J9);Zje=r(TSr,"MarianConfig"),TSr.forEach(t),eqe=r(P8e," (Marian model)"),P8e.forEach(t),oqe=i(T),$m=n(T,"LI",{});var $8e=s($m);OH=n($8e,"STRONG",{});var FSr=s(OH);rqe=r(FSr,"maskformer"),FSr.forEach(t),tqe=r($8e," \u2014 "),Y9=n($8e,"A",{href:!0});var CSr=s(Y9);aqe=r(CSr,"MaskFormerConfig"),CSr.forEach(t),nqe=r($8e," (MaskFormer model)"),$8e.forEach(t),sqe=i(T),Im=n(T,"LI",{});var I8e=s(Im);XH=n(I8e,"STRONG",{});var MSr=s(XH);lqe=r(MSr,"mbart"),MSr.forEach(t),iqe=r(I8e," \u2014 "),K9=n(I8e,"A",{href:!0});var ESr=s(K9);dqe=r(ESr,"MBartConfig"),ESr.forEach(t),cqe=r(I8e," (mBART model)"),I8e.forEach(t),fqe=i(T),Nm=n(T,"LI",{});var N8e=s(Nm);VH=n(N8e,"STRONG",{});var ySr=s(VH);mqe=r(ySr,"megatron-bert"),ySr.forEach(t),gqe=r(N8e," \u2014 "),Z9=n(N8e,"A",{href:!0});var wSr=s(Z9);hqe=r(wSr,"MegatronBertConfig"),wSr.forEach(t),pqe=r(N8e," (MegatronBert model)"),N8e.forEach(t),_qe=i(T),Dm=n(T,"LI",{});var D8e=s(Dm);zH=n(D8e,"STRONG",{});var ASr=s(zH);uqe=r(ASr,"mobilebert"),ASr.forEach(t),bqe=r(D8e," \u2014 "),eB=n(D8e,"A",{href:!0});var LSr=s(eB);vqe=r(LSr,"MobileBertConfig"),LSr.forEach(t),Tqe=r(D8e," (MobileBERT model)"),D8e.forEach(t),Fqe=i(T),jm=n(T,"LI",{});var j8e=s(jm);WH=n(j8e,"STRONG",{});var BSr=s(WH);Cqe=r(BSr,"mpnet"),BSr.forEach(t),Mqe=r(j8e," \u2014 "),oB=n(j8e,"A",{href:!0});var xSr=s(oB);Eqe=r(xSr,"MPNetConfig"),xSr.forEach(t),yqe=r(j8e," (MPNet model)"),j8e.forEach(t),wqe=i(T),qm=n(T,"LI",{});var q8e=s(qm);QH=n(q8e,"STRONG",{});var kSr=s(QH);Aqe=r(kSr,"mt5"),kSr.forEach(t),Lqe=r(q8e," \u2014 "),rB=n(q8e,"A",{href:!0});var RSr=s(rB);Bqe=r(RSr,"MT5Config"),RSr.forEach(t),xqe=r(q8e," (mT5 model)"),q8e.forEach(t),kqe=i(T),Gm=n(T,"LI",{});var G8e=s(Gm);HH=n(G8e,"STRONG",{});var SSr=s(HH);Rqe=r(SSr,"nystromformer"),SSr.forEach(t),Sqe=r(G8e," \u2014 "),tB=n(G8e,"A",{href:!0});var PSr=s(tB);Pqe=r(PSr,"NystromformerConfig"),PSr.forEach(t),$qe=r(G8e," (Nystromformer model)"),G8e.forEach(t),Iqe=i(T),Om=n(T,"LI",{});var O8e=s(Om);UH=n(O8e,"STRONG",{});var $Sr=s(UH);Nqe=r($Sr,"openai-gpt"),$Sr.forEach(t),Dqe=r(O8e," \u2014 "),aB=n(O8e,"A",{href:!0});var ISr=s(aB);jqe=r(ISr,"OpenAIGPTConfig"),ISr.forEach(t),qqe=r(O8e," (OpenAI GPT model)"),O8e.forEach(t),Gqe=i(T),Xm=n(T,"LI",{});var X8e=s(Xm);JH=n(X8e,"STRONG",{});var NSr=s(JH);Oqe=r(NSr,"pegasus"),NSr.forEach(t),Xqe=r(X8e," \u2014 "),nB=n(X8e,"A",{href:!0});var DSr=s(nB);Vqe=r(DSr,"PegasusConfig"),DSr.forEach(t),zqe=r(X8e," (Pegasus model)"),X8e.forEach(t),Wqe=i(T),Vm=n(T,"LI",{});var V8e=s(Vm);YH=n(V8e,"STRONG",{});var jSr=s(YH);Qqe=r(jSr,"perceiver"),jSr.forEach(t),Hqe=r(V8e," \u2014 "),sB=n(V8e,"A",{href:!0});var qSr=s(sB);Uqe=r(qSr,"PerceiverConfig"),qSr.forEach(t),Jqe=r(V8e," (Perceiver model)"),V8e.forEach(t),Yqe=i(T),zm=n(T,"LI",{});var z8e=s(zm);KH=n(z8e,"STRONG",{});var GSr=s(KH);Kqe=r(GSr,"plbart"),GSr.forEach(t),Zqe=r(z8e," \u2014 "),lB=n(z8e,"A",{href:!0});var OSr=s(lB);eGe=r(OSr,"PLBartConfig"),OSr.forEach(t),oGe=r(z8e," (PLBart model)"),z8e.forEach(t),rGe=i(T),Wm=n(T,"LI",{});var W8e=s(Wm);ZH=n(W8e,"STRONG",{});var XSr=s(ZH);tGe=r(XSr,"poolformer"),XSr.forEach(t),aGe=r(W8e," \u2014 "),iB=n(W8e,"A",{href:!0});var VSr=s(iB);nGe=r(VSr,"PoolFormerConfig"),VSr.forEach(t),sGe=r(W8e," (PoolFormer model)"),W8e.forEach(t),lGe=i(T),Qm=n(T,"LI",{});var Q8e=s(Qm);eU=n(Q8e,"STRONG",{});var zSr=s(eU);iGe=r(zSr,"prophetnet"),zSr.forEach(t),dGe=r(Q8e," \u2014 "),dB=n(Q8e,"A",{href:!0});var WSr=s(dB);cGe=r(WSr,"ProphetNetConfig"),WSr.forEach(t),fGe=r(Q8e," (ProphetNet model)"),Q8e.forEach(t),mGe=i(T),Hm=n(T,"LI",{});var H8e=s(Hm);oU=n(H8e,"STRONG",{});var QSr=s(oU);gGe=r(QSr,"qdqbert"),QSr.forEach(t),hGe=r(H8e," \u2014 "),cB=n(H8e,"A",{href:!0});var HSr=s(cB);pGe=r(HSr,"QDQBertConfig"),HSr.forEach(t),_Ge=r(H8e," (QDQBert model)"),H8e.forEach(t),uGe=i(T),Um=n(T,"LI",{});var U8e=s(Um);rU=n(U8e,"STRONG",{});var USr=s(rU);bGe=r(USr,"rag"),USr.forEach(t),vGe=r(U8e," \u2014 "),fB=n(U8e,"A",{href:!0});var JSr=s(fB);TGe=r(JSr,"RagConfig"),JSr.forEach(t),FGe=r(U8e," (RAG model)"),U8e.forEach(t),CGe=i(T),Jm=n(T,"LI",{});var J8e=s(Jm);tU=n(J8e,"STRONG",{});var YSr=s(tU);MGe=r(YSr,"realm"),YSr.forEach(t),EGe=r(J8e," \u2014 "),mB=n(J8e,"A",{href:!0});var KSr=s(mB);yGe=r(KSr,"RealmConfig"),KSr.forEach(t),wGe=r(J8e," (Realm model)"),J8e.forEach(t),AGe=i(T),Ym=n(T,"LI",{});var Y8e=s(Ym);aU=n(Y8e,"STRONG",{});var ZSr=s(aU);LGe=r(ZSr,"reformer"),ZSr.forEach(t),BGe=r(Y8e," \u2014 "),gB=n(Y8e,"A",{href:!0});var ePr=s(gB);xGe=r(ePr,"ReformerConfig"),ePr.forEach(t),kGe=r(Y8e," (Reformer model)"),Y8e.forEach(t),RGe=i(T),Km=n(T,"LI",{});var K8e=s(Km);nU=n(K8e,"STRONG",{});var oPr=s(nU);SGe=r(oPr,"rembert"),oPr.forEach(t),PGe=r(K8e," \u2014 "),hB=n(K8e,"A",{href:!0});var rPr=s(hB);$Ge=r(rPr,"RemBertConfig"),rPr.forEach(t),IGe=r(K8e," (RemBERT model)"),K8e.forEach(t),NGe=i(T),Zm=n(T,"LI",{});var Z8e=s(Zm);sU=n(Z8e,"STRONG",{});var tPr=s(sU);DGe=r(tPr,"resnet"),tPr.forEach(t),jGe=r(Z8e," \u2014 "),pB=n(Z8e,"A",{href:!0});var aPr=s(pB);qGe=r(aPr,"ResNetConfig"),aPr.forEach(t),GGe=r(Z8e," (ResNet model)"),Z8e.forEach(t),OGe=i(T),eg=n(T,"LI",{});var eFe=s(eg);lU=n(eFe,"STRONG",{});var nPr=s(lU);XGe=r(nPr,"retribert"),nPr.forEach(t),VGe=r(eFe," \u2014 "),_B=n(eFe,"A",{href:!0});var sPr=s(_B);zGe=r(sPr,"RetriBertConfig"),sPr.forEach(t),WGe=r(eFe," (RetriBERT model)"),eFe.forEach(t),QGe=i(T),og=n(T,"LI",{});var oFe=s(og);iU=n(oFe,"STRONG",{});var lPr=s(iU);HGe=r(lPr,"roberta"),lPr.forEach(t),UGe=r(oFe," \u2014 "),uB=n(oFe,"A",{href:!0});var iPr=s(uB);JGe=r(iPr,"RobertaConfig"),iPr.forEach(t),YGe=r(oFe," (RoBERTa model)"),oFe.forEach(t),KGe=i(T),rg=n(T,"LI",{});var rFe=s(rg);dU=n(rFe,"STRONG",{});var dPr=s(dU);ZGe=r(dPr,"roformer"),dPr.forEach(t),eOe=r(rFe," \u2014 "),bB=n(rFe,"A",{href:!0});var cPr=s(bB);oOe=r(cPr,"RoFormerConfig"),cPr.forEach(t),rOe=r(rFe," (RoFormer model)"),rFe.forEach(t),tOe=i(T),tg=n(T,"LI",{});var tFe=s(tg);cU=n(tFe,"STRONG",{});var fPr=s(cU);aOe=r(fPr,"segformer"),fPr.forEach(t),nOe=r(tFe," \u2014 "),vB=n(tFe,"A",{href:!0});var mPr=s(vB);sOe=r(mPr,"SegformerConfig"),mPr.forEach(t),lOe=r(tFe," (SegFormer model)"),tFe.forEach(t),iOe=i(T),ag=n(T,"LI",{});var aFe=s(ag);fU=n(aFe,"STRONG",{});var gPr=s(fU);dOe=r(gPr,"sew"),gPr.forEach(t),cOe=r(aFe," \u2014 "),TB=n(aFe,"A",{href:!0});var hPr=s(TB);fOe=r(hPr,"SEWConfig"),hPr.forEach(t),mOe=r(aFe," (SEW model)"),aFe.forEach(t),gOe=i(T),ng=n(T,"LI",{});var nFe=s(ng);mU=n(nFe,"STRONG",{});var pPr=s(mU);hOe=r(pPr,"sew-d"),pPr.forEach(t),pOe=r(nFe," \u2014 "),FB=n(nFe,"A",{href:!0});var _Pr=s(FB);_Oe=r(_Pr,"SEWDConfig"),_Pr.forEach(t),uOe=r(nFe," (SEW-D model)"),nFe.forEach(t),bOe=i(T),sg=n(T,"LI",{});var sFe=s(sg);gU=n(sFe,"STRONG",{});var uPr=s(gU);vOe=r(uPr,"speech-encoder-decoder"),uPr.forEach(t),TOe=r(sFe," \u2014 "),CB=n(sFe,"A",{href:!0});var bPr=s(CB);FOe=r(bPr,"SpeechEncoderDecoderConfig"),bPr.forEach(t),COe=r(sFe," (Speech Encoder decoder model)"),sFe.forEach(t),MOe=i(T),lg=n(T,"LI",{});var lFe=s(lg);hU=n(lFe,"STRONG",{});var vPr=s(hU);EOe=r(vPr,"speech_to_text"),vPr.forEach(t),yOe=r(lFe," \u2014 "),MB=n(lFe,"A",{href:!0});var TPr=s(MB);wOe=r(TPr,"Speech2TextConfig"),TPr.forEach(t),AOe=r(lFe," (Speech2Text model)"),lFe.forEach(t),LOe=i(T),ig=n(T,"LI",{});var iFe=s(ig);pU=n(iFe,"STRONG",{});var FPr=s(pU);BOe=r(FPr,"speech_to_text_2"),FPr.forEach(t),xOe=r(iFe," \u2014 "),EB=n(iFe,"A",{href:!0});var CPr=s(EB);kOe=r(CPr,"Speech2Text2Config"),CPr.forEach(t),ROe=r(iFe," (Speech2Text2 model)"),iFe.forEach(t),SOe=i(T),dg=n(T,"LI",{});var dFe=s(dg);_U=n(dFe,"STRONG",{});var MPr=s(_U);POe=r(MPr,"splinter"),MPr.forEach(t),$Oe=r(dFe," \u2014 "),yB=n(dFe,"A",{href:!0});var EPr=s(yB);IOe=r(EPr,"SplinterConfig"),EPr.forEach(t),NOe=r(dFe," (Splinter model)"),dFe.forEach(t),DOe=i(T),cg=n(T,"LI",{});var cFe=s(cg);uU=n(cFe,"STRONG",{});var yPr=s(uU);jOe=r(yPr,"squeezebert"),yPr.forEach(t),qOe=r(cFe," \u2014 "),wB=n(cFe,"A",{href:!0});var wPr=s(wB);GOe=r(wPr,"SqueezeBertConfig"),wPr.forEach(t),OOe=r(cFe," (SqueezeBERT model)"),cFe.forEach(t),XOe=i(T),fg=n(T,"LI",{});var fFe=s(fg);bU=n(fFe,"STRONG",{});var APr=s(bU);VOe=r(APr,"swin"),APr.forEach(t),zOe=r(fFe," \u2014 "),AB=n(fFe,"A",{href:!0});var LPr=s(AB);WOe=r(LPr,"SwinConfig"),LPr.forEach(t),QOe=r(fFe," (Swin model)"),fFe.forEach(t),HOe=i(T),mg=n(T,"LI",{});var mFe=s(mg);vU=n(mFe,"STRONG",{});var BPr=s(vU);UOe=r(BPr,"t5"),BPr.forEach(t),JOe=r(mFe," \u2014 "),LB=n(mFe,"A",{href:!0});var xPr=s(LB);YOe=r(xPr,"T5Config"),xPr.forEach(t),KOe=r(mFe," (T5 model)"),mFe.forEach(t),ZOe=i(T),gg=n(T,"LI",{});var gFe=s(gg);TU=n(gFe,"STRONG",{});var kPr=s(TU);eXe=r(kPr,"tapas"),kPr.forEach(t),oXe=r(gFe," \u2014 "),BB=n(gFe,"A",{href:!0});var RPr=s(BB);rXe=r(RPr,"TapasConfig"),RPr.forEach(t),tXe=r(gFe," (TAPAS model)"),gFe.forEach(t),aXe=i(T),hg=n(T,"LI",{});var hFe=s(hg);FU=n(hFe,"STRONG",{});var SPr=s(FU);nXe=r(SPr,"transfo-xl"),SPr.forEach(t),sXe=r(hFe," \u2014 "),xB=n(hFe,"A",{href:!0});var PPr=s(xB);lXe=r(PPr,"TransfoXLConfig"),PPr.forEach(t),iXe=r(hFe," (Transformer-XL model)"),hFe.forEach(t),dXe=i(T),pg=n(T,"LI",{});var pFe=s(pg);CU=n(pFe,"STRONG",{});var $Pr=s(CU);cXe=r($Pr,"trocr"),$Pr.forEach(t),fXe=r(pFe," \u2014 "),kB=n(pFe,"A",{href:!0});var IPr=s(kB);mXe=r(IPr,"TrOCRConfig"),IPr.forEach(t),gXe=r(pFe," (TrOCR model)"),pFe.forEach(t),hXe=i(T),_g=n(T,"LI",{});var _Fe=s(_g);MU=n(_Fe,"STRONG",{});var NPr=s(MU);pXe=r(NPr,"unispeech"),NPr.forEach(t),_Xe=r(_Fe," \u2014 "),RB=n(_Fe,"A",{href:!0});var DPr=s(RB);uXe=r(DPr,"UniSpeechConfig"),DPr.forEach(t),bXe=r(_Fe," (UniSpeech model)"),_Fe.forEach(t),vXe=i(T),ug=n(T,"LI",{});var uFe=s(ug);EU=n(uFe,"STRONG",{});var jPr=s(EU);TXe=r(jPr,"unispeech-sat"),jPr.forEach(t),FXe=r(uFe," \u2014 "),SB=n(uFe,"A",{href:!0});var qPr=s(SB);CXe=r(qPr,"UniSpeechSatConfig"),qPr.forEach(t),MXe=r(uFe," (UniSpeechSat model)"),uFe.forEach(t),EXe=i(T),bg=n(T,"LI",{});var bFe=s(bg);yU=n(bFe,"STRONG",{});var GPr=s(yU);yXe=r(GPr,"van"),GPr.forEach(t),wXe=r(bFe," \u2014 "),PB=n(bFe,"A",{href:!0});var OPr=s(PB);AXe=r(OPr,"VanConfig"),OPr.forEach(t),LXe=r(bFe," (VAN model)"),bFe.forEach(t),BXe=i(T),vg=n(T,"LI",{});var vFe=s(vg);wU=n(vFe,"STRONG",{});var XPr=s(wU);xXe=r(XPr,"vilt"),XPr.forEach(t),kXe=r(vFe," \u2014 "),$B=n(vFe,"A",{href:!0});var VPr=s($B);RXe=r(VPr,"ViltConfig"),VPr.forEach(t),SXe=r(vFe," (ViLT model)"),vFe.forEach(t),PXe=i(T),Tg=n(T,"LI",{});var TFe=s(Tg);AU=n(TFe,"STRONG",{});var zPr=s(AU);$Xe=r(zPr,"vision-encoder-decoder"),zPr.forEach(t),IXe=r(TFe," \u2014 "),IB=n(TFe,"A",{href:!0});var WPr=s(IB);NXe=r(WPr,"VisionEncoderDecoderConfig"),WPr.forEach(t),DXe=r(TFe," (Vision Encoder decoder model)"),TFe.forEach(t),jXe=i(T),Fg=n(T,"LI",{});var FFe=s(Fg);LU=n(FFe,"STRONG",{});var QPr=s(LU);qXe=r(QPr,"vision-text-dual-encoder"),QPr.forEach(t),GXe=r(FFe," \u2014 "),NB=n(FFe,"A",{href:!0});var HPr=s(NB);OXe=r(HPr,"VisionTextDualEncoderConfig"),HPr.forEach(t),XXe=r(FFe," (VisionTextDualEncoder model)"),FFe.forEach(t),VXe=i(T),Cg=n(T,"LI",{});var CFe=s(Cg);BU=n(CFe,"STRONG",{});var UPr=s(BU);zXe=r(UPr,"visual_bert"),UPr.forEach(t),WXe=r(CFe," \u2014 "),DB=n(CFe,"A",{href:!0});var JPr=s(DB);QXe=r(JPr,"VisualBertConfig"),JPr.forEach(t),HXe=r(CFe," (VisualBert model)"),CFe.forEach(t),UXe=i(T),Mg=n(T,"LI",{});var MFe=s(Mg);xU=n(MFe,"STRONG",{});var YPr=s(xU);JXe=r(YPr,"vit"),YPr.forEach(t),YXe=r(MFe," \u2014 "),jB=n(MFe,"A",{href:!0});var KPr=s(jB);KXe=r(KPr,"ViTConfig"),KPr.forEach(t),ZXe=r(MFe," (ViT model)"),MFe.forEach(t),eVe=i(T),Eg=n(T,"LI",{});var EFe=s(Eg);kU=n(EFe,"STRONG",{});var ZPr=s(kU);oVe=r(ZPr,"vit_mae"),ZPr.forEach(t),rVe=r(EFe," \u2014 "),qB=n(EFe,"A",{href:!0});var e$r=s(qB);tVe=r(e$r,"ViTMAEConfig"),e$r.forEach(t),aVe=r(EFe," (ViTMAE model)"),EFe.forEach(t),nVe=i(T),yg=n(T,"LI",{});var yFe=s(yg);RU=n(yFe,"STRONG",{});var o$r=s(RU);sVe=r(o$r,"wav2vec2"),o$r.forEach(t),lVe=r(yFe," \u2014 "),GB=n(yFe,"A",{href:!0});var r$r=s(GB);iVe=r(r$r,"Wav2Vec2Config"),r$r.forEach(t),dVe=r(yFe," (Wav2Vec2 model)"),yFe.forEach(t),cVe=i(T),wg=n(T,"LI",{});var wFe=s(wg);SU=n(wFe,"STRONG",{});var t$r=s(SU);fVe=r(t$r,"wavlm"),t$r.forEach(t),mVe=r(wFe," \u2014 "),OB=n(wFe,"A",{href:!0});var a$r=s(OB);gVe=r(a$r,"WavLMConfig"),a$r.forEach(t),hVe=r(wFe," (WavLM model)"),wFe.forEach(t),pVe=i(T),Ag=n(T,"LI",{});var AFe=s(Ag);PU=n(AFe,"STRONG",{});var n$r=s(PU);_Ve=r(n$r,"xglm"),n$r.forEach(t),uVe=r(AFe," \u2014 "),XB=n(AFe,"A",{href:!0});var s$r=s(XB);bVe=r(s$r,"XGLMConfig"),s$r.forEach(t),vVe=r(AFe," (XGLM model)"),AFe.forEach(t),TVe=i(T),Lg=n(T,"LI",{});var LFe=s(Lg);$U=n(LFe,"STRONG",{});var l$r=s($U);FVe=r(l$r,"xlm"),l$r.forEach(t),CVe=r(LFe," \u2014 "),VB=n(LFe,"A",{href:!0});var i$r=s(VB);MVe=r(i$r,"XLMConfig"),i$r.forEach(t),EVe=r(LFe," (XLM model)"),LFe.forEach(t),yVe=i(T),Bg=n(T,"LI",{});var BFe=s(Bg);IU=n(BFe,"STRONG",{});var d$r=s(IU);wVe=r(d$r,"xlm-prophetnet"),d$r.forEach(t),AVe=r(BFe," \u2014 "),zB=n(BFe,"A",{href:!0});var c$r=s(zB);LVe=r(c$r,"XLMProphetNetConfig"),c$r.forEach(t),BVe=r(BFe," (XLMProphetNet model)"),BFe.forEach(t),xVe=i(T),xg=n(T,"LI",{});var xFe=s(xg);NU=n(xFe,"STRONG",{});var f$r=s(NU);kVe=r(f$r,"xlm-roberta"),f$r.forEach(t),RVe=r(xFe," \u2014 "),WB=n(xFe,"A",{href:!0});var m$r=s(WB);SVe=r(m$r,"XLMRobertaConfig"),m$r.forEach(t),PVe=r(xFe," (XLM-RoBERTa model)"),xFe.forEach(t),$Ve=i(T),kg=n(T,"LI",{});var kFe=s(kg);DU=n(kFe,"STRONG",{});var g$r=s(DU);IVe=r(g$r,"xlm-roberta-xl"),g$r.forEach(t),NVe=r(kFe," \u2014 "),QB=n(kFe,"A",{href:!0});var h$r=s(QB);DVe=r(h$r,"XLMRobertaXLConfig"),h$r.forEach(t),jVe=r(kFe," (XLM-RoBERTa-XL model)"),kFe.forEach(t),qVe=i(T),Rg=n(T,"LI",{});var RFe=s(Rg);jU=n(RFe,"STRONG",{});var p$r=s(jU);GVe=r(p$r,"xlnet"),p$r.forEach(t),OVe=r(RFe," \u2014 "),HB=n(RFe,"A",{href:!0});var _$r=s(HB);XVe=r(_$r,"XLNetConfig"),_$r.forEach(t),VVe=r(RFe," (XLNet model)"),RFe.forEach(t),zVe=i(T),Sg=n(T,"LI",{});var SFe=s(Sg);qU=n(SFe,"STRONG",{});var u$r=s(qU);WVe=r(u$r,"yoso"),u$r.forEach(t),QVe=r(SFe," \u2014 "),UB=n(SFe,"A",{href:!0});var b$r=s(UB);HVe=r(b$r,"YosoConfig"),b$r.forEach(t),UVe=r(SFe," (YOSO model)"),SFe.forEach(t),T.forEach(t),JVe=i(ga),GU=n(ga,"P",{});var v$r=s(GU);YVe=r(v$r,"Examples:"),v$r.forEach(t),KVe=i(ga),m(bE.$$.fragment,ga),ga.forEach(t),ZVe=i(Os),Pg=n(Os,"DIV",{class:!0});var hSe=s(Pg);m(vE.$$.fragment,hSe),eze=i(hSe),OU=n(hSe,"P",{});var T$r=s(OU);oze=r(T$r,"Register a new configuration for this class."),T$r.forEach(t),hSe.forEach(t),Os.forEach(t),mke=i(c),Wi=n(c,"H2",{class:!0});var pSe=s(Wi);$g=n(pSe,"A",{id:!0,class:!0,href:!0});var F$r=s($g);XU=n(F$r,"SPAN",{});var C$r=s(XU);m(TE.$$.fragment,C$r),C$r.forEach(t),F$r.forEach(t),rze=i(pSe),VU=n(pSe,"SPAN",{});var M$r=s(VU);tze=r(M$r,"AutoTokenizer"),M$r.forEach(t),pSe.forEach(t),gke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(FE.$$.fragment,Xs),aze=i(Xs),CE=n(Xs,"P",{});var _Se=s(CE);nze=r(_Se,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),JB=n(_Se,"A",{href:!0});var E$r=s(JB);sze=r(E$r,"AutoTokenizer.from_pretrained()"),E$r.forEach(t),lze=r(_Se," class method."),_Se.forEach(t),ize=i(Xs),ME=n(Xs,"P",{});var uSe=s(ME);dze=r(uSe,"This class cannot be instantiated directly using "),zU=n(uSe,"CODE",{});var y$r=s(zU);cze=r(y$r,"__init__()"),y$r.forEach(t),fze=r(uSe," (throws an error)."),uSe.forEach(t),mze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(EE.$$.fragment,ha),gze=i(ha),WU=n(ha,"P",{});var w$r=s(WU);hze=r(w$r,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),w$r.forEach(t),pze=i(ha),Oa=n(ha,"P",{});var d4=s(Oa);_ze=r(d4,"The tokenizer class to instantiate is selected based on the "),QU=n(d4,"CODE",{});var A$r=s(QU);uze=r(A$r,"model_type"),A$r.forEach(t),bze=r(d4,` property of the config object (either
passed as an argument or loaded from `),HU=n(d4,"CODE",{});var L$r=s(HU);vze=r(L$r,"pretrained_model_name_or_path"),L$r.forEach(t),Tze=r(d4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UU=n(d4,"CODE",{});var B$r=s(UU);Fze=r(B$r,"pretrained_model_name_or_path"),B$r.forEach(t),Cze=r(d4,":"),d4.forEach(t),Mze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var tL=s(Wn);JU=n(tL,"STRONG",{});var x$r=s(JU);Eze=r(x$r,"albert"),x$r.forEach(t),yze=r(tL," \u2014 "),YB=n(tL,"A",{href:!0});var k$r=s(YB);wze=r(k$r,"AlbertTokenizer"),k$r.forEach(t),Aze=r(tL," or "),KB=n(tL,"A",{href:!0});var R$r=s(KB);Lze=r(R$r,"AlbertTokenizerFast"),R$r.forEach(t),Bze=r(tL," (ALBERT model)"),tL.forEach(t),xze=i(y),Qn=n(y,"LI",{});var aL=s(Qn);YU=n(aL,"STRONG",{});var S$r=s(YU);kze=r(S$r,"bart"),S$r.forEach(t),Rze=r(aL," \u2014 "),ZB=n(aL,"A",{href:!0});var P$r=s(ZB);Sze=r(P$r,"BartTokenizer"),P$r.forEach(t),Pze=r(aL," or "),ex=n(aL,"A",{href:!0});var $$r=s(ex);$ze=r($$r,"BartTokenizerFast"),$$r.forEach(t),Ize=r(aL," (BART model)"),aL.forEach(t),Nze=i(y),Hn=n(y,"LI",{});var nL=s(Hn);KU=n(nL,"STRONG",{});var I$r=s(KU);Dze=r(I$r,"barthez"),I$r.forEach(t),jze=r(nL," \u2014 "),ox=n(nL,"A",{href:!0});var N$r=s(ox);qze=r(N$r,"BarthezTokenizer"),N$r.forEach(t),Gze=r(nL," or "),rx=n(nL,"A",{href:!0});var D$r=s(rx);Oze=r(D$r,"BarthezTokenizerFast"),D$r.forEach(t),Xze=r(nL," (BARThez model)"),nL.forEach(t),Vze=i(y),Ig=n(y,"LI",{});var PFe=s(Ig);ZU=n(PFe,"STRONG",{});var j$r=s(ZU);zze=r(j$r,"bartpho"),j$r.forEach(t),Wze=r(PFe," \u2014 "),tx=n(PFe,"A",{href:!0});var q$r=s(tx);Qze=r(q$r,"BartphoTokenizer"),q$r.forEach(t),Hze=r(PFe," (BARTpho model)"),PFe.forEach(t),Uze=i(y),Un=n(y,"LI",{});var sL=s(Un);eJ=n(sL,"STRONG",{});var G$r=s(eJ);Jze=r(G$r,"bert"),G$r.forEach(t),Yze=r(sL," \u2014 "),ax=n(sL,"A",{href:!0});var O$r=s(ax);Kze=r(O$r,"BertTokenizer"),O$r.forEach(t),Zze=r(sL," or "),nx=n(sL,"A",{href:!0});var X$r=s(nx);eWe=r(X$r,"BertTokenizerFast"),X$r.forEach(t),oWe=r(sL," (BERT model)"),sL.forEach(t),rWe=i(y),Ng=n(y,"LI",{});var $Fe=s(Ng);oJ=n($Fe,"STRONG",{});var V$r=s(oJ);tWe=r(V$r,"bert-generation"),V$r.forEach(t),aWe=r($Fe," \u2014 "),sx=n($Fe,"A",{href:!0});var z$r=s(sx);nWe=r(z$r,"BertGenerationTokenizer"),z$r.forEach(t),sWe=r($Fe," (Bert Generation model)"),$Fe.forEach(t),lWe=i(y),Dg=n(y,"LI",{});var IFe=s(Dg);rJ=n(IFe,"STRONG",{});var W$r=s(rJ);iWe=r(W$r,"bert-japanese"),W$r.forEach(t),dWe=r(IFe," \u2014 "),lx=n(IFe,"A",{href:!0});var Q$r=s(lx);cWe=r(Q$r,"BertJapaneseTokenizer"),Q$r.forEach(t),fWe=r(IFe," (BertJapanese model)"),IFe.forEach(t),mWe=i(y),jg=n(y,"LI",{});var NFe=s(jg);tJ=n(NFe,"STRONG",{});var H$r=s(tJ);gWe=r(H$r,"bertweet"),H$r.forEach(t),hWe=r(NFe," \u2014 "),ix=n(NFe,"A",{href:!0});var U$r=s(ix);pWe=r(U$r,"BertweetTokenizer"),U$r.forEach(t),_We=r(NFe," (Bertweet model)"),NFe.forEach(t),uWe=i(y),Jn=n(y,"LI",{});var lL=s(Jn);aJ=n(lL,"STRONG",{});var J$r=s(aJ);bWe=r(J$r,"big_bird"),J$r.forEach(t),vWe=r(lL," \u2014 "),dx=n(lL,"A",{href:!0});var Y$r=s(dx);TWe=r(Y$r,"BigBirdTokenizer"),Y$r.forEach(t),FWe=r(lL," or "),cx=n(lL,"A",{href:!0});var K$r=s(cx);CWe=r(K$r,"BigBirdTokenizerFast"),K$r.forEach(t),MWe=r(lL," (BigBird model)"),lL.forEach(t),EWe=i(y),Yn=n(y,"LI",{});var iL=s(Yn);nJ=n(iL,"STRONG",{});var Z$r=s(nJ);yWe=r(Z$r,"bigbird_pegasus"),Z$r.forEach(t),wWe=r(iL," \u2014 "),fx=n(iL,"A",{href:!0});var eIr=s(fx);AWe=r(eIr,"PegasusTokenizer"),eIr.forEach(t),LWe=r(iL," or "),mx=n(iL,"A",{href:!0});var oIr=s(mx);BWe=r(oIr,"PegasusTokenizerFast"),oIr.forEach(t),xWe=r(iL," (BigBirdPegasus model)"),iL.forEach(t),kWe=i(y),Kn=n(y,"LI",{});var dL=s(Kn);sJ=n(dL,"STRONG",{});var rIr=s(sJ);RWe=r(rIr,"blenderbot"),rIr.forEach(t),SWe=r(dL," \u2014 "),gx=n(dL,"A",{href:!0});var tIr=s(gx);PWe=r(tIr,"BlenderbotTokenizer"),tIr.forEach(t),$We=r(dL," or "),hx=n(dL,"A",{href:!0});var aIr=s(hx);IWe=r(aIr,"BlenderbotTokenizerFast"),aIr.forEach(t),NWe=r(dL," (Blenderbot model)"),dL.forEach(t),DWe=i(y),qg=n(y,"LI",{});var DFe=s(qg);lJ=n(DFe,"STRONG",{});var nIr=s(lJ);jWe=r(nIr,"blenderbot-small"),nIr.forEach(t),qWe=r(DFe," \u2014 "),px=n(DFe,"A",{href:!0});var sIr=s(px);GWe=r(sIr,"BlenderbotSmallTokenizer"),sIr.forEach(t),OWe=r(DFe," (BlenderbotSmall model)"),DFe.forEach(t),XWe=i(y),Gg=n(y,"LI",{});var jFe=s(Gg);iJ=n(jFe,"STRONG",{});var lIr=s(iJ);VWe=r(lIr,"byt5"),lIr.forEach(t),zWe=r(jFe," \u2014 "),_x=n(jFe,"A",{href:!0});var iIr=s(_x);WWe=r(iIr,"ByT5Tokenizer"),iIr.forEach(t),QWe=r(jFe," (ByT5 model)"),jFe.forEach(t),HWe=i(y),Zn=n(y,"LI",{});var cL=s(Zn);dJ=n(cL,"STRONG",{});var dIr=s(dJ);UWe=r(dIr,"camembert"),dIr.forEach(t),JWe=r(cL," \u2014 "),ux=n(cL,"A",{href:!0});var cIr=s(ux);YWe=r(cIr,"CamembertTokenizer"),cIr.forEach(t),KWe=r(cL," or "),bx=n(cL,"A",{href:!0});var fIr=s(bx);ZWe=r(fIr,"CamembertTokenizerFast"),fIr.forEach(t),eQe=r(cL," (CamemBERT model)"),cL.forEach(t),oQe=i(y),Og=n(y,"LI",{});var qFe=s(Og);cJ=n(qFe,"STRONG",{});var mIr=s(cJ);rQe=r(mIr,"canine"),mIr.forEach(t),tQe=r(qFe," \u2014 "),vx=n(qFe,"A",{href:!0});var gIr=s(vx);aQe=r(gIr,"CanineTokenizer"),gIr.forEach(t),nQe=r(qFe," (Canine model)"),qFe.forEach(t),sQe=i(y),es=n(y,"LI",{});var fL=s(es);fJ=n(fL,"STRONG",{});var hIr=s(fJ);lQe=r(hIr,"clip"),hIr.forEach(t),iQe=r(fL," \u2014 "),Tx=n(fL,"A",{href:!0});var pIr=s(Tx);dQe=r(pIr,"CLIPTokenizer"),pIr.forEach(t),cQe=r(fL," or "),Fx=n(fL,"A",{href:!0});var _Ir=s(Fx);fQe=r(_Ir,"CLIPTokenizerFast"),_Ir.forEach(t),mQe=r(fL," (CLIP model)"),fL.forEach(t),gQe=i(y),os=n(y,"LI",{});var mL=s(os);mJ=n(mL,"STRONG",{});var uIr=s(mJ);hQe=r(uIr,"convbert"),uIr.forEach(t),pQe=r(mL," \u2014 "),Cx=n(mL,"A",{href:!0});var bIr=s(Cx);_Qe=r(bIr,"ConvBertTokenizer"),bIr.forEach(t),uQe=r(mL," or "),Mx=n(mL,"A",{href:!0});var vIr=s(Mx);bQe=r(vIr,"ConvBertTokenizerFast"),vIr.forEach(t),vQe=r(mL," (ConvBERT model)"),mL.forEach(t),TQe=i(y),rs=n(y,"LI",{});var gL=s(rs);gJ=n(gL,"STRONG",{});var TIr=s(gJ);FQe=r(TIr,"cpm"),TIr.forEach(t),CQe=r(gL," \u2014 "),Ex=n(gL,"A",{href:!0});var FIr=s(Ex);MQe=r(FIr,"CpmTokenizer"),FIr.forEach(t),EQe=r(gL," or "),hJ=n(gL,"CODE",{});var CIr=s(hJ);yQe=r(CIr,"CpmTokenizerFast"),CIr.forEach(t),wQe=r(gL," (CPM model)"),gL.forEach(t),AQe=i(y),Xg=n(y,"LI",{});var GFe=s(Xg);pJ=n(GFe,"STRONG",{});var MIr=s(pJ);LQe=r(MIr,"ctrl"),MIr.forEach(t),BQe=r(GFe," \u2014 "),yx=n(GFe,"A",{href:!0});var EIr=s(yx);xQe=r(EIr,"CTRLTokenizer"),EIr.forEach(t),kQe=r(GFe," (CTRL model)"),GFe.forEach(t),RQe=i(y),ts=n(y,"LI",{});var hL=s(ts);_J=n(hL,"STRONG",{});var yIr=s(_J);SQe=r(yIr,"deberta"),yIr.forEach(t),PQe=r(hL," \u2014 "),wx=n(hL,"A",{href:!0});var wIr=s(wx);$Qe=r(wIr,"DebertaTokenizer"),wIr.forEach(t),IQe=r(hL," or "),Ax=n(hL,"A",{href:!0});var AIr=s(Ax);NQe=r(AIr,"DebertaTokenizerFast"),AIr.forEach(t),DQe=r(hL," (DeBERTa model)"),hL.forEach(t),jQe=i(y),Vg=n(y,"LI",{});var OFe=s(Vg);uJ=n(OFe,"STRONG",{});var LIr=s(uJ);qQe=r(LIr,"deberta-v2"),LIr.forEach(t),GQe=r(OFe," \u2014 "),Lx=n(OFe,"A",{href:!0});var BIr=s(Lx);OQe=r(BIr,"DebertaV2Tokenizer"),BIr.forEach(t),XQe=r(OFe," (DeBERTa-v2 model)"),OFe.forEach(t),VQe=i(y),as=n(y,"LI",{});var pL=s(as);bJ=n(pL,"STRONG",{});var xIr=s(bJ);zQe=r(xIr,"distilbert"),xIr.forEach(t),WQe=r(pL," \u2014 "),Bx=n(pL,"A",{href:!0});var kIr=s(Bx);QQe=r(kIr,"DistilBertTokenizer"),kIr.forEach(t),HQe=r(pL," or "),xx=n(pL,"A",{href:!0});var RIr=s(xx);UQe=r(RIr,"DistilBertTokenizerFast"),RIr.forEach(t),JQe=r(pL," (DistilBERT model)"),pL.forEach(t),YQe=i(y),ns=n(y,"LI",{});var _L=s(ns);vJ=n(_L,"STRONG",{});var SIr=s(vJ);KQe=r(SIr,"dpr"),SIr.forEach(t),ZQe=r(_L," \u2014 "),kx=n(_L,"A",{href:!0});var PIr=s(kx);eHe=r(PIr,"DPRQuestionEncoderTokenizer"),PIr.forEach(t),oHe=r(_L," or "),Rx=n(_L,"A",{href:!0});var $Ir=s(Rx);rHe=r($Ir,"DPRQuestionEncoderTokenizerFast"),$Ir.forEach(t),tHe=r(_L," (DPR model)"),_L.forEach(t),aHe=i(y),ss=n(y,"LI",{});var uL=s(ss);TJ=n(uL,"STRONG",{});var IIr=s(TJ);nHe=r(IIr,"electra"),IIr.forEach(t),sHe=r(uL," \u2014 "),Sx=n(uL,"A",{href:!0});var NIr=s(Sx);lHe=r(NIr,"ElectraTokenizer"),NIr.forEach(t),iHe=r(uL," or "),Px=n(uL,"A",{href:!0});var DIr=s(Px);dHe=r(DIr,"ElectraTokenizerFast"),DIr.forEach(t),cHe=r(uL," (ELECTRA model)"),uL.forEach(t),fHe=i(y),zg=n(y,"LI",{});var XFe=s(zg);FJ=n(XFe,"STRONG",{});var jIr=s(FJ);mHe=r(jIr,"flaubert"),jIr.forEach(t),gHe=r(XFe," \u2014 "),$x=n(XFe,"A",{href:!0});var qIr=s($x);hHe=r(qIr,"FlaubertTokenizer"),qIr.forEach(t),pHe=r(XFe," (FlauBERT model)"),XFe.forEach(t),_He=i(y),ls=n(y,"LI",{});var bL=s(ls);CJ=n(bL,"STRONG",{});var GIr=s(CJ);uHe=r(GIr,"fnet"),GIr.forEach(t),bHe=r(bL," \u2014 "),Ix=n(bL,"A",{href:!0});var OIr=s(Ix);vHe=r(OIr,"FNetTokenizer"),OIr.forEach(t),THe=r(bL," or "),Nx=n(bL,"A",{href:!0});var XIr=s(Nx);FHe=r(XIr,"FNetTokenizerFast"),XIr.forEach(t),CHe=r(bL," (FNet model)"),bL.forEach(t),MHe=i(y),Wg=n(y,"LI",{});var VFe=s(Wg);MJ=n(VFe,"STRONG",{});var VIr=s(MJ);EHe=r(VIr,"fsmt"),VIr.forEach(t),yHe=r(VFe," \u2014 "),Dx=n(VFe,"A",{href:!0});var zIr=s(Dx);wHe=r(zIr,"FSMTTokenizer"),zIr.forEach(t),AHe=r(VFe," (FairSeq Machine-Translation model)"),VFe.forEach(t),LHe=i(y),is=n(y,"LI",{});var vL=s(is);EJ=n(vL,"STRONG",{});var WIr=s(EJ);BHe=r(WIr,"funnel"),WIr.forEach(t),xHe=r(vL," \u2014 "),jx=n(vL,"A",{href:!0});var QIr=s(jx);kHe=r(QIr,"FunnelTokenizer"),QIr.forEach(t),RHe=r(vL," or "),qx=n(vL,"A",{href:!0});var HIr=s(qx);SHe=r(HIr,"FunnelTokenizerFast"),HIr.forEach(t),PHe=r(vL," (Funnel Transformer model)"),vL.forEach(t),$He=i(y),ds=n(y,"LI",{});var TL=s(ds);yJ=n(TL,"STRONG",{});var UIr=s(yJ);IHe=r(UIr,"gpt2"),UIr.forEach(t),NHe=r(TL," \u2014 "),Gx=n(TL,"A",{href:!0});var JIr=s(Gx);DHe=r(JIr,"GPT2Tokenizer"),JIr.forEach(t),jHe=r(TL," or "),Ox=n(TL,"A",{href:!0});var YIr=s(Ox);qHe=r(YIr,"GPT2TokenizerFast"),YIr.forEach(t),GHe=r(TL," (OpenAI GPT-2 model)"),TL.forEach(t),OHe=i(y),cs=n(y,"LI",{});var FL=s(cs);wJ=n(FL,"STRONG",{});var KIr=s(wJ);XHe=r(KIr,"gpt_neo"),KIr.forEach(t),VHe=r(FL," \u2014 "),Xx=n(FL,"A",{href:!0});var ZIr=s(Xx);zHe=r(ZIr,"GPT2Tokenizer"),ZIr.forEach(t),WHe=r(FL," or "),Vx=n(FL,"A",{href:!0});var eNr=s(Vx);QHe=r(eNr,"GPT2TokenizerFast"),eNr.forEach(t),HHe=r(FL," (GPT Neo model)"),FL.forEach(t),UHe=i(y),fs=n(y,"LI",{});var CL=s(fs);AJ=n(CL,"STRONG",{});var oNr=s(AJ);JHe=r(oNr,"herbert"),oNr.forEach(t),YHe=r(CL," \u2014 "),zx=n(CL,"A",{href:!0});var rNr=s(zx);KHe=r(rNr,"HerbertTokenizer"),rNr.forEach(t),ZHe=r(CL," or "),Wx=n(CL,"A",{href:!0});var tNr=s(Wx);eUe=r(tNr,"HerbertTokenizerFast"),tNr.forEach(t),oUe=r(CL," (HerBERT model)"),CL.forEach(t),rUe=i(y),Qg=n(y,"LI",{});var zFe=s(Qg);LJ=n(zFe,"STRONG",{});var aNr=s(LJ);tUe=r(aNr,"hubert"),aNr.forEach(t),aUe=r(zFe," \u2014 "),Qx=n(zFe,"A",{href:!0});var nNr=s(Qx);nUe=r(nNr,"Wav2Vec2CTCTokenizer"),nNr.forEach(t),sUe=r(zFe," (Hubert model)"),zFe.forEach(t),lUe=i(y),ms=n(y,"LI",{});var ML=s(ms);BJ=n(ML,"STRONG",{});var sNr=s(BJ);iUe=r(sNr,"ibert"),sNr.forEach(t),dUe=r(ML," \u2014 "),Hx=n(ML,"A",{href:!0});var lNr=s(Hx);cUe=r(lNr,"RobertaTokenizer"),lNr.forEach(t),fUe=r(ML," or "),Ux=n(ML,"A",{href:!0});var iNr=s(Ux);mUe=r(iNr,"RobertaTokenizerFast"),iNr.forEach(t),gUe=r(ML," (I-BERT model)"),ML.forEach(t),hUe=i(y),gs=n(y,"LI",{});var EL=s(gs);xJ=n(EL,"STRONG",{});var dNr=s(xJ);pUe=r(dNr,"layoutlm"),dNr.forEach(t),_Ue=r(EL," \u2014 "),Jx=n(EL,"A",{href:!0});var cNr=s(Jx);uUe=r(cNr,"LayoutLMTokenizer"),cNr.forEach(t),bUe=r(EL," or "),Yx=n(EL,"A",{href:!0});var fNr=s(Yx);vUe=r(fNr,"LayoutLMTokenizerFast"),fNr.forEach(t),TUe=r(EL," (LayoutLM model)"),EL.forEach(t),FUe=i(y),hs=n(y,"LI",{});var yL=s(hs);kJ=n(yL,"STRONG",{});var mNr=s(kJ);CUe=r(mNr,"layoutlmv2"),mNr.forEach(t),MUe=r(yL," \u2014 "),Kx=n(yL,"A",{href:!0});var gNr=s(Kx);EUe=r(gNr,"LayoutLMv2Tokenizer"),gNr.forEach(t),yUe=r(yL," or "),Zx=n(yL,"A",{href:!0});var hNr=s(Zx);wUe=r(hNr,"LayoutLMv2TokenizerFast"),hNr.forEach(t),AUe=r(yL," (LayoutLMv2 model)"),yL.forEach(t),LUe=i(y),ps=n(y,"LI",{});var wL=s(ps);RJ=n(wL,"STRONG",{});var pNr=s(RJ);BUe=r(pNr,"layoutxlm"),pNr.forEach(t),xUe=r(wL," \u2014 "),ek=n(wL,"A",{href:!0});var _Nr=s(ek);kUe=r(_Nr,"LayoutXLMTokenizer"),_Nr.forEach(t),RUe=r(wL," or "),ok=n(wL,"A",{href:!0});var uNr=s(ok);SUe=r(uNr,"LayoutXLMTokenizerFast"),uNr.forEach(t),PUe=r(wL," (LayoutXLM model)"),wL.forEach(t),$Ue=i(y),_s=n(y,"LI",{});var AL=s(_s);SJ=n(AL,"STRONG",{});var bNr=s(SJ);IUe=r(bNr,"led"),bNr.forEach(t),NUe=r(AL," \u2014 "),rk=n(AL,"A",{href:!0});var vNr=s(rk);DUe=r(vNr,"LEDTokenizer"),vNr.forEach(t),jUe=r(AL," or "),tk=n(AL,"A",{href:!0});var TNr=s(tk);qUe=r(TNr,"LEDTokenizerFast"),TNr.forEach(t),GUe=r(AL," (LED model)"),AL.forEach(t),OUe=i(y),us=n(y,"LI",{});var LL=s(us);PJ=n(LL,"STRONG",{});var FNr=s(PJ);XUe=r(FNr,"longformer"),FNr.forEach(t),VUe=r(LL," \u2014 "),ak=n(LL,"A",{href:!0});var CNr=s(ak);zUe=r(CNr,"LongformerTokenizer"),CNr.forEach(t),WUe=r(LL," or "),nk=n(LL,"A",{href:!0});var MNr=s(nk);QUe=r(MNr,"LongformerTokenizerFast"),MNr.forEach(t),HUe=r(LL," (Longformer model)"),LL.forEach(t),UUe=i(y),Hg=n(y,"LI",{});var WFe=s(Hg);$J=n(WFe,"STRONG",{});var ENr=s($J);JUe=r(ENr,"luke"),ENr.forEach(t),YUe=r(WFe," \u2014 "),sk=n(WFe,"A",{href:!0});var yNr=s(sk);KUe=r(yNr,"LukeTokenizer"),yNr.forEach(t),ZUe=r(WFe," (LUKE model)"),WFe.forEach(t),eJe=i(y),bs=n(y,"LI",{});var BL=s(bs);IJ=n(BL,"STRONG",{});var wNr=s(IJ);oJe=r(wNr,"lxmert"),wNr.forEach(t),rJe=r(BL," \u2014 "),lk=n(BL,"A",{href:!0});var ANr=s(lk);tJe=r(ANr,"LxmertTokenizer"),ANr.forEach(t),aJe=r(BL," or "),ik=n(BL,"A",{href:!0});var LNr=s(ik);nJe=r(LNr,"LxmertTokenizerFast"),LNr.forEach(t),sJe=r(BL," (LXMERT model)"),BL.forEach(t),lJe=i(y),Ug=n(y,"LI",{});var QFe=s(Ug);NJ=n(QFe,"STRONG",{});var BNr=s(NJ);iJe=r(BNr,"m2m_100"),BNr.forEach(t),dJe=r(QFe," \u2014 "),dk=n(QFe,"A",{href:!0});var xNr=s(dk);cJe=r(xNr,"M2M100Tokenizer"),xNr.forEach(t),fJe=r(QFe," (M2M100 model)"),QFe.forEach(t),mJe=i(y),Jg=n(y,"LI",{});var HFe=s(Jg);DJ=n(HFe,"STRONG",{});var kNr=s(DJ);gJe=r(kNr,"marian"),kNr.forEach(t),hJe=r(HFe," \u2014 "),ck=n(HFe,"A",{href:!0});var RNr=s(ck);pJe=r(RNr,"MarianTokenizer"),RNr.forEach(t),_Je=r(HFe," (Marian model)"),HFe.forEach(t),uJe=i(y),vs=n(y,"LI",{});var xL=s(vs);jJ=n(xL,"STRONG",{});var SNr=s(jJ);bJe=r(SNr,"mbart"),SNr.forEach(t),vJe=r(xL," \u2014 "),fk=n(xL,"A",{href:!0});var PNr=s(fk);TJe=r(PNr,"MBartTokenizer"),PNr.forEach(t),FJe=r(xL," or "),mk=n(xL,"A",{href:!0});var $Nr=s(mk);CJe=r($Nr,"MBartTokenizerFast"),$Nr.forEach(t),MJe=r(xL," (mBART model)"),xL.forEach(t),EJe=i(y),Ts=n(y,"LI",{});var kL=s(Ts);qJ=n(kL,"STRONG",{});var INr=s(qJ);yJe=r(INr,"mbart50"),INr.forEach(t),wJe=r(kL," \u2014 "),gk=n(kL,"A",{href:!0});var NNr=s(gk);AJe=r(NNr,"MBart50Tokenizer"),NNr.forEach(t),LJe=r(kL," or "),hk=n(kL,"A",{href:!0});var DNr=s(hk);BJe=r(DNr,"MBart50TokenizerFast"),DNr.forEach(t),xJe=r(kL," (mBART-50 model)"),kL.forEach(t),kJe=i(y),Yg=n(y,"LI",{});var UFe=s(Yg);GJ=n(UFe,"STRONG",{});var jNr=s(GJ);RJe=r(jNr,"mluke"),jNr.forEach(t),SJe=r(UFe," \u2014 "),pk=n(UFe,"A",{href:!0});var qNr=s(pk);PJe=r(qNr,"MLukeTokenizer"),qNr.forEach(t),$Je=r(UFe," (mLUKE model)"),UFe.forEach(t),IJe=i(y),Fs=n(y,"LI",{});var RL=s(Fs);OJ=n(RL,"STRONG",{});var GNr=s(OJ);NJe=r(GNr,"mobilebert"),GNr.forEach(t),DJe=r(RL," \u2014 "),_k=n(RL,"A",{href:!0});var ONr=s(_k);jJe=r(ONr,"MobileBertTokenizer"),ONr.forEach(t),qJe=r(RL," or "),uk=n(RL,"A",{href:!0});var XNr=s(uk);GJe=r(XNr,"MobileBertTokenizerFast"),XNr.forEach(t),OJe=r(RL," (MobileBERT model)"),RL.forEach(t),XJe=i(y),Cs=n(y,"LI",{});var SL=s(Cs);XJ=n(SL,"STRONG",{});var VNr=s(XJ);VJe=r(VNr,"mpnet"),VNr.forEach(t),zJe=r(SL," \u2014 "),bk=n(SL,"A",{href:!0});var zNr=s(bk);WJe=r(zNr,"MPNetTokenizer"),zNr.forEach(t),QJe=r(SL," or "),vk=n(SL,"A",{href:!0});var WNr=s(vk);HJe=r(WNr,"MPNetTokenizerFast"),WNr.forEach(t),UJe=r(SL," (MPNet model)"),SL.forEach(t),JJe=i(y),Ms=n(y,"LI",{});var PL=s(Ms);VJ=n(PL,"STRONG",{});var QNr=s(VJ);YJe=r(QNr,"mt5"),QNr.forEach(t),KJe=r(PL," \u2014 "),Tk=n(PL,"A",{href:!0});var HNr=s(Tk);ZJe=r(HNr,"MT5Tokenizer"),HNr.forEach(t),eYe=r(PL," or "),Fk=n(PL,"A",{href:!0});var UNr=s(Fk);oYe=r(UNr,"MT5TokenizerFast"),UNr.forEach(t),rYe=r(PL," (mT5 model)"),PL.forEach(t),tYe=i(y),Es=n(y,"LI",{});var $L=s(Es);zJ=n($L,"STRONG",{});var JNr=s(zJ);aYe=r(JNr,"openai-gpt"),JNr.forEach(t),nYe=r($L," \u2014 "),Ck=n($L,"A",{href:!0});var YNr=s(Ck);sYe=r(YNr,"OpenAIGPTTokenizer"),YNr.forEach(t),lYe=r($L," or "),Mk=n($L,"A",{href:!0});var KNr=s(Mk);iYe=r(KNr,"OpenAIGPTTokenizerFast"),KNr.forEach(t),dYe=r($L," (OpenAI GPT model)"),$L.forEach(t),cYe=i(y),ys=n(y,"LI",{});var IL=s(ys);WJ=n(IL,"STRONG",{});var ZNr=s(WJ);fYe=r(ZNr,"pegasus"),ZNr.forEach(t),mYe=r(IL," \u2014 "),Ek=n(IL,"A",{href:!0});var eDr=s(Ek);gYe=r(eDr,"PegasusTokenizer"),eDr.forEach(t),hYe=r(IL," or "),yk=n(IL,"A",{href:!0});var oDr=s(yk);pYe=r(oDr,"PegasusTokenizerFast"),oDr.forEach(t),_Ye=r(IL," (Pegasus model)"),IL.forEach(t),uYe=i(y),Kg=n(y,"LI",{});var JFe=s(Kg);QJ=n(JFe,"STRONG",{});var rDr=s(QJ);bYe=r(rDr,"perceiver"),rDr.forEach(t),vYe=r(JFe," \u2014 "),wk=n(JFe,"A",{href:!0});var tDr=s(wk);TYe=r(tDr,"PerceiverTokenizer"),tDr.forEach(t),FYe=r(JFe," (Perceiver model)"),JFe.forEach(t),CYe=i(y),Zg=n(y,"LI",{});var YFe=s(Zg);HJ=n(YFe,"STRONG",{});var aDr=s(HJ);MYe=r(aDr,"phobert"),aDr.forEach(t),EYe=r(YFe," \u2014 "),Ak=n(YFe,"A",{href:!0});var nDr=s(Ak);yYe=r(nDr,"PhobertTokenizer"),nDr.forEach(t),wYe=r(YFe," (PhoBERT model)"),YFe.forEach(t),AYe=i(y),eh=n(y,"LI",{});var KFe=s(eh);UJ=n(KFe,"STRONG",{});var sDr=s(UJ);LYe=r(sDr,"plbart"),sDr.forEach(t),BYe=r(KFe," \u2014 "),Lk=n(KFe,"A",{href:!0});var lDr=s(Lk);xYe=r(lDr,"PLBartTokenizer"),lDr.forEach(t),kYe=r(KFe," (PLBart model)"),KFe.forEach(t),RYe=i(y),oh=n(y,"LI",{});var ZFe=s(oh);JJ=n(ZFe,"STRONG",{});var iDr=s(JJ);SYe=r(iDr,"prophetnet"),iDr.forEach(t),PYe=r(ZFe," \u2014 "),Bk=n(ZFe,"A",{href:!0});var dDr=s(Bk);$Ye=r(dDr,"ProphetNetTokenizer"),dDr.forEach(t),IYe=r(ZFe," (ProphetNet model)"),ZFe.forEach(t),NYe=i(y),ws=n(y,"LI",{});var NL=s(ws);YJ=n(NL,"STRONG",{});var cDr=s(YJ);DYe=r(cDr,"qdqbert"),cDr.forEach(t),jYe=r(NL," \u2014 "),xk=n(NL,"A",{href:!0});var fDr=s(xk);qYe=r(fDr,"BertTokenizer"),fDr.forEach(t),GYe=r(NL," or "),kk=n(NL,"A",{href:!0});var mDr=s(kk);OYe=r(mDr,"BertTokenizerFast"),mDr.forEach(t),XYe=r(NL," (QDQBert model)"),NL.forEach(t),VYe=i(y),rh=n(y,"LI",{});var eCe=s(rh);KJ=n(eCe,"STRONG",{});var gDr=s(KJ);zYe=r(gDr,"rag"),gDr.forEach(t),WYe=r(eCe," \u2014 "),Rk=n(eCe,"A",{href:!0});var hDr=s(Rk);QYe=r(hDr,"RagTokenizer"),hDr.forEach(t),HYe=r(eCe," (RAG model)"),eCe.forEach(t),UYe=i(y),As=n(y,"LI",{});var DL=s(As);ZJ=n(DL,"STRONG",{});var pDr=s(ZJ);JYe=r(pDr,"realm"),pDr.forEach(t),YYe=r(DL," \u2014 "),Sk=n(DL,"A",{href:!0});var _Dr=s(Sk);KYe=r(_Dr,"RealmTokenizer"),_Dr.forEach(t),ZYe=r(DL," or "),Pk=n(DL,"A",{href:!0});var uDr=s(Pk);eKe=r(uDr,"RealmTokenizerFast"),uDr.forEach(t),oKe=r(DL," (Realm model)"),DL.forEach(t),rKe=i(y),Ls=n(y,"LI",{});var jL=s(Ls);eY=n(jL,"STRONG",{});var bDr=s(eY);tKe=r(bDr,"reformer"),bDr.forEach(t),aKe=r(jL," \u2014 "),$k=n(jL,"A",{href:!0});var vDr=s($k);nKe=r(vDr,"ReformerTokenizer"),vDr.forEach(t),sKe=r(jL," or "),Ik=n(jL,"A",{href:!0});var TDr=s(Ik);lKe=r(TDr,"ReformerTokenizerFast"),TDr.forEach(t),iKe=r(jL," (Reformer model)"),jL.forEach(t),dKe=i(y),Bs=n(y,"LI",{});var qL=s(Bs);oY=n(qL,"STRONG",{});var FDr=s(oY);cKe=r(FDr,"rembert"),FDr.forEach(t),fKe=r(qL," \u2014 "),Nk=n(qL,"A",{href:!0});var CDr=s(Nk);mKe=r(CDr,"RemBertTokenizer"),CDr.forEach(t),gKe=r(qL," or "),Dk=n(qL,"A",{href:!0});var MDr=s(Dk);hKe=r(MDr,"RemBertTokenizerFast"),MDr.forEach(t),pKe=r(qL," (RemBERT model)"),qL.forEach(t),_Ke=i(y),xs=n(y,"LI",{});var GL=s(xs);rY=n(GL,"STRONG",{});var EDr=s(rY);uKe=r(EDr,"retribert"),EDr.forEach(t),bKe=r(GL," \u2014 "),jk=n(GL,"A",{href:!0});var yDr=s(jk);vKe=r(yDr,"RetriBertTokenizer"),yDr.forEach(t),TKe=r(GL," or "),qk=n(GL,"A",{href:!0});var wDr=s(qk);FKe=r(wDr,"RetriBertTokenizerFast"),wDr.forEach(t),CKe=r(GL," (RetriBERT model)"),GL.forEach(t),MKe=i(y),ks=n(y,"LI",{});var OL=s(ks);tY=n(OL,"STRONG",{});var ADr=s(tY);EKe=r(ADr,"roberta"),ADr.forEach(t),yKe=r(OL," \u2014 "),Gk=n(OL,"A",{href:!0});var LDr=s(Gk);wKe=r(LDr,"RobertaTokenizer"),LDr.forEach(t),AKe=r(OL," or "),Ok=n(OL,"A",{href:!0});var BDr=s(Ok);LKe=r(BDr,"RobertaTokenizerFast"),BDr.forEach(t),BKe=r(OL," (RoBERTa model)"),OL.forEach(t),xKe=i(y),Rs=n(y,"LI",{});var XL=s(Rs);aY=n(XL,"STRONG",{});var xDr=s(aY);kKe=r(xDr,"roformer"),xDr.forEach(t),RKe=r(XL," \u2014 "),Xk=n(XL,"A",{href:!0});var kDr=s(Xk);SKe=r(kDr,"RoFormerTokenizer"),kDr.forEach(t),PKe=r(XL," or "),Vk=n(XL,"A",{href:!0});var RDr=s(Vk);$Ke=r(RDr,"RoFormerTokenizerFast"),RDr.forEach(t),IKe=r(XL," (RoFormer model)"),XL.forEach(t),NKe=i(y),th=n(y,"LI",{});var oCe=s(th);nY=n(oCe,"STRONG",{});var SDr=s(nY);DKe=r(SDr,"speech_to_text"),SDr.forEach(t),jKe=r(oCe," \u2014 "),zk=n(oCe,"A",{href:!0});var PDr=s(zk);qKe=r(PDr,"Speech2TextTokenizer"),PDr.forEach(t),GKe=r(oCe," (Speech2Text model)"),oCe.forEach(t),OKe=i(y),ah=n(y,"LI",{});var rCe=s(ah);sY=n(rCe,"STRONG",{});var $Dr=s(sY);XKe=r($Dr,"speech_to_text_2"),$Dr.forEach(t),VKe=r(rCe," \u2014 "),Wk=n(rCe,"A",{href:!0});var IDr=s(Wk);zKe=r(IDr,"Speech2Text2Tokenizer"),IDr.forEach(t),WKe=r(rCe," (Speech2Text2 model)"),rCe.forEach(t),QKe=i(y),Ss=n(y,"LI",{});var VL=s(Ss);lY=n(VL,"STRONG",{});var NDr=s(lY);HKe=r(NDr,"splinter"),NDr.forEach(t),UKe=r(VL," \u2014 "),Qk=n(VL,"A",{href:!0});var DDr=s(Qk);JKe=r(DDr,"SplinterTokenizer"),DDr.forEach(t),YKe=r(VL," or "),Hk=n(VL,"A",{href:!0});var jDr=s(Hk);KKe=r(jDr,"SplinterTokenizerFast"),jDr.forEach(t),ZKe=r(VL," (Splinter model)"),VL.forEach(t),eZe=i(y),Ps=n(y,"LI",{});var zL=s(Ps);iY=n(zL,"STRONG",{});var qDr=s(iY);oZe=r(qDr,"squeezebert"),qDr.forEach(t),rZe=r(zL," \u2014 "),Uk=n(zL,"A",{href:!0});var GDr=s(Uk);tZe=r(GDr,"SqueezeBertTokenizer"),GDr.forEach(t),aZe=r(zL," or "),Jk=n(zL,"A",{href:!0});var ODr=s(Jk);nZe=r(ODr,"SqueezeBertTokenizerFast"),ODr.forEach(t),sZe=r(zL," (SqueezeBERT model)"),zL.forEach(t),lZe=i(y),$s=n(y,"LI",{});var WL=s($s);dY=n(WL,"STRONG",{});var XDr=s(dY);iZe=r(XDr,"t5"),XDr.forEach(t),dZe=r(WL," \u2014 "),Yk=n(WL,"A",{href:!0});var VDr=s(Yk);cZe=r(VDr,"T5Tokenizer"),VDr.forEach(t),fZe=r(WL," or "),Kk=n(WL,"A",{href:!0});var zDr=s(Kk);mZe=r(zDr,"T5TokenizerFast"),zDr.forEach(t),gZe=r(WL," (T5 model)"),WL.forEach(t),hZe=i(y),nh=n(y,"LI",{});var tCe=s(nh);cY=n(tCe,"STRONG",{});var WDr=s(cY);pZe=r(WDr,"tapas"),WDr.forEach(t),_Ze=r(tCe," \u2014 "),Zk=n(tCe,"A",{href:!0});var QDr=s(Zk);uZe=r(QDr,"TapasTokenizer"),QDr.forEach(t),bZe=r(tCe," (TAPAS model)"),tCe.forEach(t),vZe=i(y),sh=n(y,"LI",{});var aCe=s(sh);fY=n(aCe,"STRONG",{});var HDr=s(fY);TZe=r(HDr,"transfo-xl"),HDr.forEach(t),FZe=r(aCe," \u2014 "),eR=n(aCe,"A",{href:!0});var UDr=s(eR);CZe=r(UDr,"TransfoXLTokenizer"),UDr.forEach(t),MZe=r(aCe," (Transformer-XL model)"),aCe.forEach(t),EZe=i(y),lh=n(y,"LI",{});var nCe=s(lh);mY=n(nCe,"STRONG",{});var JDr=s(mY);yZe=r(JDr,"wav2vec2"),JDr.forEach(t),wZe=r(nCe," \u2014 "),oR=n(nCe,"A",{href:!0});var YDr=s(oR);AZe=r(YDr,"Wav2Vec2CTCTokenizer"),YDr.forEach(t),LZe=r(nCe," (Wav2Vec2 model)"),nCe.forEach(t),BZe=i(y),ih=n(y,"LI",{});var sCe=s(ih);gY=n(sCe,"STRONG",{});var KDr=s(gY);xZe=r(KDr,"wav2vec2_phoneme"),KDr.forEach(t),kZe=r(sCe," \u2014 "),rR=n(sCe,"A",{href:!0});var ZDr=s(rR);RZe=r(ZDr,"Wav2Vec2PhonemeCTCTokenizer"),ZDr.forEach(t),SZe=r(sCe," (Wav2Vec2Phoneme model)"),sCe.forEach(t),PZe=i(y),Is=n(y,"LI",{});var QL=s(Is);hY=n(QL,"STRONG",{});var ejr=s(hY);$Ze=r(ejr,"xglm"),ejr.forEach(t),IZe=r(QL," \u2014 "),tR=n(QL,"A",{href:!0});var ojr=s(tR);NZe=r(ojr,"XGLMTokenizer"),ojr.forEach(t),DZe=r(QL," or "),aR=n(QL,"A",{href:!0});var rjr=s(aR);jZe=r(rjr,"XGLMTokenizerFast"),rjr.forEach(t),qZe=r(QL," (XGLM model)"),QL.forEach(t),GZe=i(y),dh=n(y,"LI",{});var lCe=s(dh);pY=n(lCe,"STRONG",{});var tjr=s(pY);OZe=r(tjr,"xlm"),tjr.forEach(t),XZe=r(lCe," \u2014 "),nR=n(lCe,"A",{href:!0});var ajr=s(nR);VZe=r(ajr,"XLMTokenizer"),ajr.forEach(t),zZe=r(lCe," (XLM model)"),lCe.forEach(t),WZe=i(y),ch=n(y,"LI",{});var iCe=s(ch);_Y=n(iCe,"STRONG",{});var njr=s(_Y);QZe=r(njr,"xlm-prophetnet"),njr.forEach(t),HZe=r(iCe," \u2014 "),sR=n(iCe,"A",{href:!0});var sjr=s(sR);UZe=r(sjr,"XLMProphetNetTokenizer"),sjr.forEach(t),JZe=r(iCe," (XLMProphetNet model)"),iCe.forEach(t),YZe=i(y),Ns=n(y,"LI",{});var HL=s(Ns);uY=n(HL,"STRONG",{});var ljr=s(uY);KZe=r(ljr,"xlm-roberta"),ljr.forEach(t),ZZe=r(HL," \u2014 "),lR=n(HL,"A",{href:!0});var ijr=s(lR);eeo=r(ijr,"XLMRobertaTokenizer"),ijr.forEach(t),oeo=r(HL," or "),iR=n(HL,"A",{href:!0});var djr=s(iR);reo=r(djr,"XLMRobertaTokenizerFast"),djr.forEach(t),teo=r(HL," (XLM-RoBERTa model)"),HL.forEach(t),aeo=i(y),Ds=n(y,"LI",{});var UL=s(Ds);bY=n(UL,"STRONG",{});var cjr=s(bY);neo=r(cjr,"xlnet"),cjr.forEach(t),seo=r(UL," \u2014 "),dR=n(UL,"A",{href:!0});var fjr=s(dR);leo=r(fjr,"XLNetTokenizer"),fjr.forEach(t),ieo=r(UL," or "),cR=n(UL,"A",{href:!0});var mjr=s(cR);deo=r(mjr,"XLNetTokenizerFast"),mjr.forEach(t),ceo=r(UL," (XLNet model)"),UL.forEach(t),y.forEach(t),feo=i(ha),vY=n(ha,"P",{});var gjr=s(vY);meo=r(gjr,"Examples:"),gjr.forEach(t),geo=i(ha),m(yE.$$.fragment,ha),ha.forEach(t),heo=i(Xs),fh=n(Xs,"DIV",{class:!0});var bSe=s(fh);m(wE.$$.fragment,bSe),peo=i(bSe),TY=n(bSe,"P",{});var hjr=s(TY);_eo=r(hjr,"Register a new tokenizer in this mapping."),hjr.forEach(t),bSe.forEach(t),Xs.forEach(t),hke=i(c),Qi=n(c,"H2",{class:!0});var vSe=s(Qi);mh=n(vSe,"A",{id:!0,class:!0,href:!0});var pjr=s(mh);FY=n(pjr,"SPAN",{});var _jr=s(FY);m(AE.$$.fragment,_jr),_jr.forEach(t),pjr.forEach(t),ueo=i(vSe),CY=n(vSe,"SPAN",{});var ujr=s(CY);beo=r(ujr,"AutoFeatureExtractor"),ujr.forEach(t),vSe.forEach(t),pke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(LE.$$.fragment,Vs),veo=i(Vs),BE=n(Vs,"P",{});var TSe=s(BE);Teo=r(TSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),fR=n(TSe,"A",{href:!0});var bjr=s(fR);Feo=r(bjr,"AutoFeatureExtractor.from_pretrained()"),bjr.forEach(t),Ceo=r(TSe," class method."),TSe.forEach(t),Meo=i(Vs),xE=n(Vs,"P",{});var FSe=s(xE);Eeo=r(FSe,"This class cannot be instantiated directly using "),MY=n(FSe,"CODE",{});var vjr=s(MY);yeo=r(vjr,"__init__()"),vjr.forEach(t),weo=r(FSe," (throws an error)."),FSe.forEach(t),Aeo=i(Vs),$e=n(Vs,"DIV",{class:!0});var Dt=s($e);m(kE.$$.fragment,Dt),Leo=i(Dt),EY=n(Dt,"P",{});var Tjr=s(EY);Beo=r(Tjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Tjr.forEach(t),xeo=i(Dt),Xa=n(Dt,"P",{});var c4=s(Xa);keo=r(c4,"The feature extractor class to instantiate is selected based on the "),yY=n(c4,"CODE",{});var Fjr=s(yY);Reo=r(Fjr,"model_type"),Fjr.forEach(t),Seo=r(c4,` property of the config object
(either passed as an argument or loaded from `),wY=n(c4,"CODE",{});var Cjr=s(wY);Peo=r(Cjr,"pretrained_model_name_or_path"),Cjr.forEach(t),$eo=r(c4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),AY=n(c4,"CODE",{});var Mjr=s(AY);Ieo=r(Mjr,"pretrained_model_name_or_path"),Mjr.forEach(t),Neo=r(c4,":"),c4.forEach(t),Deo=i(Dt),re=n(Dt,"UL",{});var ne=s(re);gh=n(ne,"LI",{});var dCe=s(gh);LY=n(dCe,"STRONG",{});var Ejr=s(LY);jeo=r(Ejr,"beit"),Ejr.forEach(t),qeo=r(dCe," \u2014 "),mR=n(dCe,"A",{href:!0});var yjr=s(mR);Geo=r(yjr,"BeitFeatureExtractor"),yjr.forEach(t),Oeo=r(dCe," (BEiT model)"),dCe.forEach(t),Xeo=i(ne),hh=n(ne,"LI",{});var cCe=s(hh);BY=n(cCe,"STRONG",{});var wjr=s(BY);Veo=r(wjr,"clip"),wjr.forEach(t),zeo=r(cCe," \u2014 "),gR=n(cCe,"A",{href:!0});var Ajr=s(gR);Weo=r(Ajr,"CLIPFeatureExtractor"),Ajr.forEach(t),Qeo=r(cCe," (CLIP model)"),cCe.forEach(t),Heo=i(ne),ph=n(ne,"LI",{});var fCe=s(ph);xY=n(fCe,"STRONG",{});var Ljr=s(xY);Ueo=r(Ljr,"convnext"),Ljr.forEach(t),Jeo=r(fCe," \u2014 "),hR=n(fCe,"A",{href:!0});var Bjr=s(hR);Yeo=r(Bjr,"ConvNextFeatureExtractor"),Bjr.forEach(t),Keo=r(fCe," (ConvNext model)"),fCe.forEach(t),Zeo=i(ne),_h=n(ne,"LI",{});var mCe=s(_h);kY=n(mCe,"STRONG",{});var xjr=s(kY);eoo=r(xjr,"deit"),xjr.forEach(t),ooo=r(mCe," \u2014 "),pR=n(mCe,"A",{href:!0});var kjr=s(pR);roo=r(kjr,"DeiTFeatureExtractor"),kjr.forEach(t),too=r(mCe," (DeiT model)"),mCe.forEach(t),aoo=i(ne),uh=n(ne,"LI",{});var gCe=s(uh);RY=n(gCe,"STRONG",{});var Rjr=s(RY);noo=r(Rjr,"detr"),Rjr.forEach(t),soo=r(gCe," \u2014 "),_R=n(gCe,"A",{href:!0});var Sjr=s(_R);loo=r(Sjr,"DetrFeatureExtractor"),Sjr.forEach(t),ioo=r(gCe," (DETR model)"),gCe.forEach(t),doo=i(ne),bh=n(ne,"LI",{});var hCe=s(bh);SY=n(hCe,"STRONG",{});var Pjr=s(SY);coo=r(Pjr,"hubert"),Pjr.forEach(t),foo=r(hCe," \u2014 "),uR=n(hCe,"A",{href:!0});var $jr=s(uR);moo=r($jr,"Wav2Vec2FeatureExtractor"),$jr.forEach(t),goo=r(hCe," (Hubert model)"),hCe.forEach(t),hoo=i(ne),vh=n(ne,"LI",{});var pCe=s(vh);PY=n(pCe,"STRONG",{});var Ijr=s(PY);poo=r(Ijr,"layoutlmv2"),Ijr.forEach(t),_oo=r(pCe," \u2014 "),bR=n(pCe,"A",{href:!0});var Njr=s(bR);uoo=r(Njr,"LayoutLMv2FeatureExtractor"),Njr.forEach(t),boo=r(pCe," (LayoutLMv2 model)"),pCe.forEach(t),voo=i(ne),Th=n(ne,"LI",{});var _Ce=s(Th);$Y=n(_Ce,"STRONG",{});var Djr=s($Y);Too=r(Djr,"maskformer"),Djr.forEach(t),Foo=r(_Ce," \u2014 "),vR=n(_Ce,"A",{href:!0});var jjr=s(vR);Coo=r(jjr,"MaskFormerFeatureExtractor"),jjr.forEach(t),Moo=r(_Ce," (MaskFormer model)"),_Ce.forEach(t),Eoo=i(ne),Fh=n(ne,"LI",{});var uCe=s(Fh);IY=n(uCe,"STRONG",{});var qjr=s(IY);yoo=r(qjr,"perceiver"),qjr.forEach(t),woo=r(uCe," \u2014 "),TR=n(uCe,"A",{href:!0});var Gjr=s(TR);Aoo=r(Gjr,"PerceiverFeatureExtractor"),Gjr.forEach(t),Loo=r(uCe," (Perceiver model)"),uCe.forEach(t),Boo=i(ne),Ch=n(ne,"LI",{});var bCe=s(Ch);NY=n(bCe,"STRONG",{});var Ojr=s(NY);xoo=r(Ojr,"poolformer"),Ojr.forEach(t),koo=r(bCe," \u2014 "),FR=n(bCe,"A",{href:!0});var Xjr=s(FR);Roo=r(Xjr,"PoolFormerFeatureExtractor"),Xjr.forEach(t),Soo=r(bCe," (PoolFormer model)"),bCe.forEach(t),Poo=i(ne),Mh=n(ne,"LI",{});var vCe=s(Mh);DY=n(vCe,"STRONG",{});var Vjr=s(DY);$oo=r(Vjr,"resnet"),Vjr.forEach(t),Ioo=r(vCe," \u2014 "),CR=n(vCe,"A",{href:!0});var zjr=s(CR);Noo=r(zjr,"ConvNextFeatureExtractor"),zjr.forEach(t),Doo=r(vCe," (ResNet model)"),vCe.forEach(t),joo=i(ne),Eh=n(ne,"LI",{});var TCe=s(Eh);jY=n(TCe,"STRONG",{});var Wjr=s(jY);qoo=r(Wjr,"segformer"),Wjr.forEach(t),Goo=r(TCe," \u2014 "),MR=n(TCe,"A",{href:!0});var Qjr=s(MR);Ooo=r(Qjr,"SegformerFeatureExtractor"),Qjr.forEach(t),Xoo=r(TCe," (SegFormer model)"),TCe.forEach(t),Voo=i(ne),yh=n(ne,"LI",{});var FCe=s(yh);qY=n(FCe,"STRONG",{});var Hjr=s(qY);zoo=r(Hjr,"speech_to_text"),Hjr.forEach(t),Woo=r(FCe," \u2014 "),ER=n(FCe,"A",{href:!0});var Ujr=s(ER);Qoo=r(Ujr,"Speech2TextFeatureExtractor"),Ujr.forEach(t),Hoo=r(FCe," (Speech2Text model)"),FCe.forEach(t),Uoo=i(ne),wh=n(ne,"LI",{});var CCe=s(wh);GY=n(CCe,"STRONG",{});var Jjr=s(GY);Joo=r(Jjr,"swin"),Jjr.forEach(t),Yoo=r(CCe," \u2014 "),yR=n(CCe,"A",{href:!0});var Yjr=s(yR);Koo=r(Yjr,"ViTFeatureExtractor"),Yjr.forEach(t),Zoo=r(CCe," (Swin model)"),CCe.forEach(t),ero=i(ne),Ah=n(ne,"LI",{});var MCe=s(Ah);OY=n(MCe,"STRONG",{});var Kjr=s(OY);oro=r(Kjr,"van"),Kjr.forEach(t),rro=r(MCe," \u2014 "),wR=n(MCe,"A",{href:!0});var Zjr=s(wR);tro=r(Zjr,"ConvNextFeatureExtractor"),Zjr.forEach(t),aro=r(MCe," (VAN model)"),MCe.forEach(t),nro=i(ne),Lh=n(ne,"LI",{});var ECe=s(Lh);XY=n(ECe,"STRONG",{});var eqr=s(XY);sro=r(eqr,"vit"),eqr.forEach(t),lro=r(ECe," \u2014 "),AR=n(ECe,"A",{href:!0});var oqr=s(AR);iro=r(oqr,"ViTFeatureExtractor"),oqr.forEach(t),dro=r(ECe," (ViT model)"),ECe.forEach(t),cro=i(ne),Bh=n(ne,"LI",{});var yCe=s(Bh);VY=n(yCe,"STRONG",{});var rqr=s(VY);fro=r(rqr,"vit_mae"),rqr.forEach(t),mro=r(yCe," \u2014 "),LR=n(yCe,"A",{href:!0});var tqr=s(LR);gro=r(tqr,"ViTFeatureExtractor"),tqr.forEach(t),hro=r(yCe," (ViTMAE model)"),yCe.forEach(t),pro=i(ne),xh=n(ne,"LI",{});var wCe=s(xh);zY=n(wCe,"STRONG",{});var aqr=s(zY);_ro=r(aqr,"wav2vec2"),aqr.forEach(t),uro=r(wCe," \u2014 "),BR=n(wCe,"A",{href:!0});var nqr=s(BR);bro=r(nqr,"Wav2Vec2FeatureExtractor"),nqr.forEach(t),vro=r(wCe," (Wav2Vec2 model)"),wCe.forEach(t),ne.forEach(t),Tro=i(Dt),m(kh.$$.fragment,Dt),Fro=i(Dt),WY=n(Dt,"P",{});var sqr=s(WY);Cro=r(sqr,"Examples:"),sqr.forEach(t),Mro=i(Dt),m(RE.$$.fragment,Dt),Dt.forEach(t),Ero=i(Vs),Rh=n(Vs,"DIV",{class:!0});var CSe=s(Rh);m(SE.$$.fragment,CSe),yro=i(CSe),QY=n(CSe,"P",{});var lqr=s(QY);wro=r(lqr,"Register a new feature extractor for this class."),lqr.forEach(t),CSe.forEach(t),Vs.forEach(t),_ke=i(c),Hi=n(c,"H2",{class:!0});var MSe=s(Hi);Sh=n(MSe,"A",{id:!0,class:!0,href:!0});var iqr=s(Sh);HY=n(iqr,"SPAN",{});var dqr=s(HY);m(PE.$$.fragment,dqr),dqr.forEach(t),iqr.forEach(t),Aro=i(MSe),UY=n(MSe,"SPAN",{});var cqr=s(UY);Lro=r(cqr,"AutoProcessor"),cqr.forEach(t),MSe.forEach(t),uke=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m($E.$$.fragment,zs),Bro=i(zs),IE=n(zs,"P",{});var ESe=s(IE);xro=r(ESe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xR=n(ESe,"A",{href:!0});var fqr=s(xR);kro=r(fqr,"AutoProcessor.from_pretrained()"),fqr.forEach(t),Rro=r(ESe," class method."),ESe.forEach(t),Sro=i(zs),NE=n(zs,"P",{});var ySe=s(NE);Pro=r(ySe,"This class cannot be instantiated directly using "),JY=n(ySe,"CODE",{});var mqr=s(JY);$ro=r(mqr,"__init__()"),mqr.forEach(t),Iro=r(ySe," (throws an error)."),ySe.forEach(t),Nro=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(DE.$$.fragment,jt),Dro=i(jt),YY=n(jt,"P",{});var gqr=s(YY);jro=r(gqr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gqr.forEach(t),qro=i(jt),Ui=n(jt,"P",{});var Jz=s(Ui);Gro=r(Jz,"The processor class to instantiate is selected based on the "),KY=n(Jz,"CODE",{});var hqr=s(KY);Oro=r(hqr,"model_type"),hqr.forEach(t),Xro=r(Jz,` property of the config object (either
passed as an argument or loaded from `),ZY=n(Jz,"CODE",{});var pqr=s(ZY);Vro=r(pqr,"pretrained_model_name_or_path"),pqr.forEach(t),zro=r(Jz," if possible):"),Jz.forEach(t),Wro=i(jt),xe=n(jt,"UL",{});var jo=s(xe);Ph=n(jo,"LI",{});var ACe=s(Ph);eK=n(ACe,"STRONG",{});var _qr=s(eK);Qro=r(_qr,"clip"),_qr.forEach(t),Hro=r(ACe," \u2014 "),kR=n(ACe,"A",{href:!0});var uqr=s(kR);Uro=r(uqr,"CLIPProcessor"),uqr.forEach(t),Jro=r(ACe," (CLIP model)"),ACe.forEach(t),Yro=i(jo),$h=n(jo,"LI",{});var LCe=s($h);oK=n(LCe,"STRONG",{});var bqr=s(oK);Kro=r(bqr,"layoutlmv2"),bqr.forEach(t),Zro=r(LCe," \u2014 "),RR=n(LCe,"A",{href:!0});var vqr=s(RR);eto=r(vqr,"LayoutLMv2Processor"),vqr.forEach(t),oto=r(LCe," (LayoutLMv2 model)"),LCe.forEach(t),rto=i(jo),Ih=n(jo,"LI",{});var BCe=s(Ih);rK=n(BCe,"STRONG",{});var Tqr=s(rK);tto=r(Tqr,"layoutxlm"),Tqr.forEach(t),ato=r(BCe," \u2014 "),SR=n(BCe,"A",{href:!0});var Fqr=s(SR);nto=r(Fqr,"LayoutXLMProcessor"),Fqr.forEach(t),sto=r(BCe," (LayoutXLM model)"),BCe.forEach(t),lto=i(jo),Nh=n(jo,"LI",{});var xCe=s(Nh);tK=n(xCe,"STRONG",{});var Cqr=s(tK);ito=r(Cqr,"speech_to_text"),Cqr.forEach(t),dto=r(xCe," \u2014 "),PR=n(xCe,"A",{href:!0});var Mqr=s(PR);cto=r(Mqr,"Speech2TextProcessor"),Mqr.forEach(t),fto=r(xCe," (Speech2Text model)"),xCe.forEach(t),mto=i(jo),Dh=n(jo,"LI",{});var kCe=s(Dh);aK=n(kCe,"STRONG",{});var Eqr=s(aK);gto=r(Eqr,"speech_to_text_2"),Eqr.forEach(t),hto=r(kCe," \u2014 "),$R=n(kCe,"A",{href:!0});var yqr=s($R);pto=r(yqr,"Speech2Text2Processor"),yqr.forEach(t),_to=r(kCe," (Speech2Text2 model)"),kCe.forEach(t),uto=i(jo),jh=n(jo,"LI",{});var RCe=s(jh);nK=n(RCe,"STRONG",{});var wqr=s(nK);bto=r(wqr,"trocr"),wqr.forEach(t),vto=r(RCe," \u2014 "),IR=n(RCe,"A",{href:!0});var Aqr=s(IR);Tto=r(Aqr,"TrOCRProcessor"),Aqr.forEach(t),Fto=r(RCe," (TrOCR model)"),RCe.forEach(t),Cto=i(jo),qh=n(jo,"LI",{});var SCe=s(qh);sK=n(SCe,"STRONG",{});var Lqr=s(sK);Mto=r(Lqr,"vision-text-dual-encoder"),Lqr.forEach(t),Eto=r(SCe," \u2014 "),NR=n(SCe,"A",{href:!0});var Bqr=s(NR);yto=r(Bqr,"VisionTextDualEncoderProcessor"),Bqr.forEach(t),wto=r(SCe," (VisionTextDualEncoder model)"),SCe.forEach(t),Ato=i(jo),Gh=n(jo,"LI",{});var PCe=s(Gh);lK=n(PCe,"STRONG",{});var xqr=s(lK);Lto=r(xqr,"wav2vec2"),xqr.forEach(t),Bto=r(PCe," \u2014 "),DR=n(PCe,"A",{href:!0});var kqr=s(DR);xto=r(kqr,"Wav2Vec2Processor"),kqr.forEach(t),kto=r(PCe," (Wav2Vec2 model)"),PCe.forEach(t),jo.forEach(t),Rto=i(jt),m(Oh.$$.fragment,jt),Sto=i(jt),iK=n(jt,"P",{});var Rqr=s(iK);Pto=r(Rqr,"Examples:"),Rqr.forEach(t),$to=i(jt),m(jE.$$.fragment,jt),jt.forEach(t),Ito=i(zs),Xh=n(zs,"DIV",{class:!0});var wSe=s(Xh);m(qE.$$.fragment,wSe),Nto=i(wSe),dK=n(wSe,"P",{});var Sqr=s(dK);Dto=r(Sqr,"Register a new processor for this class."),Sqr.forEach(t),wSe.forEach(t),zs.forEach(t),bke=i(c),Ji=n(c,"H2",{class:!0});var ASe=s(Ji);Vh=n(ASe,"A",{id:!0,class:!0,href:!0});var Pqr=s(Vh);cK=n(Pqr,"SPAN",{});var $qr=s(cK);m(GE.$$.fragment,$qr),$qr.forEach(t),Pqr.forEach(t),jto=i(ASe),fK=n(ASe,"SPAN",{});var Iqr=s(fK);qto=r(Iqr,"AutoModel"),Iqr.forEach(t),ASe.forEach(t),vke=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(OE.$$.fragment,Ws),Gto=i(Ws),Yi=n(Ws,"P",{});var Yz=s(Yi);Oto=r(Yz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=n(Yz,"CODE",{});var Nqr=s(mK);Xto=r(Nqr,"from_pretrained()"),Nqr.forEach(t),Vto=r(Yz,"class method or the "),gK=n(Yz,"CODE",{});var Dqr=s(gK);zto=r(Dqr,"from_config()"),Dqr.forEach(t),Wto=r(Yz,`class
method.`),Yz.forEach(t),Qto=i(Ws),XE=n(Ws,"P",{});var LSe=s(XE);Hto=r(LSe,"This class cannot be instantiated directly using "),hK=n(LSe,"CODE",{});var jqr=s(hK);Uto=r(jqr,"__init__()"),jqr.forEach(t),Jto=r(LSe," (throws an error)."),LSe.forEach(t),Yto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(VE.$$.fragment,Qs),Kto=i(Qs),pK=n(Qs,"P",{});var qqr=s(pK);Zto=r(qqr,"Instantiates one of the base model classes of the library from a configuration."),qqr.forEach(t),eao=i(Qs),Ki=n(Qs,"P",{});var Kz=s(Ki);oao=r(Kz,`Note:
Loading a model from its configuration file does `),_K=n(Kz,"STRONG",{});var Gqr=s(_K);rao=r(Gqr,"not"),Gqr.forEach(t),tao=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),uK=n(Kz,"CODE",{});var Oqr=s(uK);aao=r(Oqr,"from_pretrained()"),Oqr.forEach(t),nao=r(Kz,"to load the model weights."),Kz.forEach(t),sao=i(Qs),bK=n(Qs,"P",{});var Xqr=s(bK);lao=r(Xqr,"Examples:"),Xqr.forEach(t),iao=i(Qs),m(zE.$$.fragment,Qs),Qs.forEach(t),dao=i(Ws),Ne=n(Ws,"DIV",{class:!0});var qt=s(Ne);m(WE.$$.fragment,qt),cao=i(qt),vK=n(qt,"P",{});var Vqr=s(vK);fao=r(Vqr,"Instantiate one of the base model classes of the library from a pretrained model."),Vqr.forEach(t),mao=i(qt),Va=n(qt,"P",{});var f4=s(Va);gao=r(f4,"The model class to instantiate is selected based on the "),TK=n(f4,"CODE",{});var zqr=s(TK);hao=r(zqr,"model_type"),zqr.forEach(t),pao=r(f4,` property of the config object (either
passed as an argument or loaded from `),FK=n(f4,"CODE",{});var Wqr=s(FK);_ao=r(Wqr,"pretrained_model_name_or_path"),Wqr.forEach(t),uao=r(f4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CK=n(f4,"CODE",{});var Qqr=s(CK);bao=r(Qqr,"pretrained_model_name_or_path"),Qqr.forEach(t),vao=r(f4,":"),f4.forEach(t),Tao=i(qt),F=n(qt,"UL",{});var C=s(F);zh=n(C,"LI",{});var $Ce=s(zh);MK=n($Ce,"STRONG",{});var Hqr=s(MK);Fao=r(Hqr,"albert"),Hqr.forEach(t),Cao=r($Ce," \u2014 "),jR=n($Ce,"A",{href:!0});var Uqr=s(jR);Mao=r(Uqr,"AlbertModel"),Uqr.forEach(t),Eao=r($Ce," (ALBERT model)"),$Ce.forEach(t),yao=i(C),Wh=n(C,"LI",{});var ICe=s(Wh);EK=n(ICe,"STRONG",{});var Jqr=s(EK);wao=r(Jqr,"bart"),Jqr.forEach(t),Aao=r(ICe," \u2014 "),qR=n(ICe,"A",{href:!0});var Yqr=s(qR);Lao=r(Yqr,"BartModel"),Yqr.forEach(t),Bao=r(ICe," (BART model)"),ICe.forEach(t),xao=i(C),Qh=n(C,"LI",{});var NCe=s(Qh);yK=n(NCe,"STRONG",{});var Kqr=s(yK);kao=r(Kqr,"beit"),Kqr.forEach(t),Rao=r(NCe," \u2014 "),GR=n(NCe,"A",{href:!0});var Zqr=s(GR);Sao=r(Zqr,"BeitModel"),Zqr.forEach(t),Pao=r(NCe," (BEiT model)"),NCe.forEach(t),$ao=i(C),Hh=n(C,"LI",{});var DCe=s(Hh);wK=n(DCe,"STRONG",{});var eGr=s(wK);Iao=r(eGr,"bert"),eGr.forEach(t),Nao=r(DCe," \u2014 "),OR=n(DCe,"A",{href:!0});var oGr=s(OR);Dao=r(oGr,"BertModel"),oGr.forEach(t),jao=r(DCe," (BERT model)"),DCe.forEach(t),qao=i(C),Uh=n(C,"LI",{});var jCe=s(Uh);AK=n(jCe,"STRONG",{});var rGr=s(AK);Gao=r(rGr,"bert-generation"),rGr.forEach(t),Oao=r(jCe," \u2014 "),XR=n(jCe,"A",{href:!0});var tGr=s(XR);Xao=r(tGr,"BertGenerationEncoder"),tGr.forEach(t),Vao=r(jCe," (Bert Generation model)"),jCe.forEach(t),zao=i(C),Jh=n(C,"LI",{});var qCe=s(Jh);LK=n(qCe,"STRONG",{});var aGr=s(LK);Wao=r(aGr,"big_bird"),aGr.forEach(t),Qao=r(qCe," \u2014 "),VR=n(qCe,"A",{href:!0});var nGr=s(VR);Hao=r(nGr,"BigBirdModel"),nGr.forEach(t),Uao=r(qCe," (BigBird model)"),qCe.forEach(t),Jao=i(C),Yh=n(C,"LI",{});var GCe=s(Yh);BK=n(GCe,"STRONG",{});var sGr=s(BK);Yao=r(sGr,"bigbird_pegasus"),sGr.forEach(t),Kao=r(GCe," \u2014 "),zR=n(GCe,"A",{href:!0});var lGr=s(zR);Zao=r(lGr,"BigBirdPegasusModel"),lGr.forEach(t),eno=r(GCe," (BigBirdPegasus model)"),GCe.forEach(t),ono=i(C),Kh=n(C,"LI",{});var OCe=s(Kh);xK=n(OCe,"STRONG",{});var iGr=s(xK);rno=r(iGr,"blenderbot"),iGr.forEach(t),tno=r(OCe," \u2014 "),WR=n(OCe,"A",{href:!0});var dGr=s(WR);ano=r(dGr,"BlenderbotModel"),dGr.forEach(t),nno=r(OCe," (Blenderbot model)"),OCe.forEach(t),sno=i(C),Zh=n(C,"LI",{});var XCe=s(Zh);kK=n(XCe,"STRONG",{});var cGr=s(kK);lno=r(cGr,"blenderbot-small"),cGr.forEach(t),ino=r(XCe," \u2014 "),QR=n(XCe,"A",{href:!0});var fGr=s(QR);dno=r(fGr,"BlenderbotSmallModel"),fGr.forEach(t),cno=r(XCe," (BlenderbotSmall model)"),XCe.forEach(t),fno=i(C),ep=n(C,"LI",{});var VCe=s(ep);RK=n(VCe,"STRONG",{});var mGr=s(RK);mno=r(mGr,"camembert"),mGr.forEach(t),gno=r(VCe," \u2014 "),HR=n(VCe,"A",{href:!0});var gGr=s(HR);hno=r(gGr,"CamembertModel"),gGr.forEach(t),pno=r(VCe," (CamemBERT model)"),VCe.forEach(t),_no=i(C),op=n(C,"LI",{});var zCe=s(op);SK=n(zCe,"STRONG",{});var hGr=s(SK);uno=r(hGr,"canine"),hGr.forEach(t),bno=r(zCe," \u2014 "),UR=n(zCe,"A",{href:!0});var pGr=s(UR);vno=r(pGr,"CanineModel"),pGr.forEach(t),Tno=r(zCe," (Canine model)"),zCe.forEach(t),Fno=i(C),rp=n(C,"LI",{});var WCe=s(rp);PK=n(WCe,"STRONG",{});var _Gr=s(PK);Cno=r(_Gr,"clip"),_Gr.forEach(t),Mno=r(WCe," \u2014 "),JR=n(WCe,"A",{href:!0});var uGr=s(JR);Eno=r(uGr,"CLIPModel"),uGr.forEach(t),yno=r(WCe," (CLIP model)"),WCe.forEach(t),wno=i(C),tp=n(C,"LI",{});var QCe=s(tp);$K=n(QCe,"STRONG",{});var bGr=s($K);Ano=r(bGr,"convbert"),bGr.forEach(t),Lno=r(QCe," \u2014 "),YR=n(QCe,"A",{href:!0});var vGr=s(YR);Bno=r(vGr,"ConvBertModel"),vGr.forEach(t),xno=r(QCe," (ConvBERT model)"),QCe.forEach(t),kno=i(C),ap=n(C,"LI",{});var HCe=s(ap);IK=n(HCe,"STRONG",{});var TGr=s(IK);Rno=r(TGr,"convnext"),TGr.forEach(t),Sno=r(HCe," \u2014 "),KR=n(HCe,"A",{href:!0});var FGr=s(KR);Pno=r(FGr,"ConvNextModel"),FGr.forEach(t),$no=r(HCe," (ConvNext model)"),HCe.forEach(t),Ino=i(C),np=n(C,"LI",{});var UCe=s(np);NK=n(UCe,"STRONG",{});var CGr=s(NK);Nno=r(CGr,"ctrl"),CGr.forEach(t),Dno=r(UCe," \u2014 "),ZR=n(UCe,"A",{href:!0});var MGr=s(ZR);jno=r(MGr,"CTRLModel"),MGr.forEach(t),qno=r(UCe," (CTRL model)"),UCe.forEach(t),Gno=i(C),sp=n(C,"LI",{});var JCe=s(sp);DK=n(JCe,"STRONG",{});var EGr=s(DK);Ono=r(EGr,"data2vec-audio"),EGr.forEach(t),Xno=r(JCe," \u2014 "),eS=n(JCe,"A",{href:!0});var yGr=s(eS);Vno=r(yGr,"Data2VecAudioModel"),yGr.forEach(t),zno=r(JCe," (Data2VecAudio model)"),JCe.forEach(t),Wno=i(C),lp=n(C,"LI",{});var YCe=s(lp);jK=n(YCe,"STRONG",{});var wGr=s(jK);Qno=r(wGr,"data2vec-text"),wGr.forEach(t),Hno=r(YCe," \u2014 "),oS=n(YCe,"A",{href:!0});var AGr=s(oS);Uno=r(AGr,"Data2VecTextModel"),AGr.forEach(t),Jno=r(YCe," (Data2VecText model)"),YCe.forEach(t),Yno=i(C),ip=n(C,"LI",{});var KCe=s(ip);qK=n(KCe,"STRONG",{});var LGr=s(qK);Kno=r(LGr,"deberta"),LGr.forEach(t),Zno=r(KCe," \u2014 "),rS=n(KCe,"A",{href:!0});var BGr=s(rS);eso=r(BGr,"DebertaModel"),BGr.forEach(t),oso=r(KCe," (DeBERTa model)"),KCe.forEach(t),rso=i(C),dp=n(C,"LI",{});var ZCe=s(dp);GK=n(ZCe,"STRONG",{});var xGr=s(GK);tso=r(xGr,"deberta-v2"),xGr.forEach(t),aso=r(ZCe," \u2014 "),tS=n(ZCe,"A",{href:!0});var kGr=s(tS);nso=r(kGr,"DebertaV2Model"),kGr.forEach(t),sso=r(ZCe," (DeBERTa-v2 model)"),ZCe.forEach(t),lso=i(C),cp=n(C,"LI",{});var eMe=s(cp);OK=n(eMe,"STRONG",{});var RGr=s(OK);iso=r(RGr,"decision_transformer"),RGr.forEach(t),dso=r(eMe," \u2014 "),aS=n(eMe,"A",{href:!0});var SGr=s(aS);cso=r(SGr,"DecisionTransformerModel"),SGr.forEach(t),fso=r(eMe," (Decision Transformer model)"),eMe.forEach(t),mso=i(C),fp=n(C,"LI",{});var oMe=s(fp);XK=n(oMe,"STRONG",{});var PGr=s(XK);gso=r(PGr,"deit"),PGr.forEach(t),hso=r(oMe," \u2014 "),nS=n(oMe,"A",{href:!0});var $Gr=s(nS);pso=r($Gr,"DeiTModel"),$Gr.forEach(t),_so=r(oMe," (DeiT model)"),oMe.forEach(t),uso=i(C),mp=n(C,"LI",{});var rMe=s(mp);VK=n(rMe,"STRONG",{});var IGr=s(VK);bso=r(IGr,"detr"),IGr.forEach(t),vso=r(rMe," \u2014 "),sS=n(rMe,"A",{href:!0});var NGr=s(sS);Tso=r(NGr,"DetrModel"),NGr.forEach(t),Fso=r(rMe," (DETR model)"),rMe.forEach(t),Cso=i(C),gp=n(C,"LI",{});var tMe=s(gp);zK=n(tMe,"STRONG",{});var DGr=s(zK);Mso=r(DGr,"distilbert"),DGr.forEach(t),Eso=r(tMe," \u2014 "),lS=n(tMe,"A",{href:!0});var jGr=s(lS);yso=r(jGr,"DistilBertModel"),jGr.forEach(t),wso=r(tMe," (DistilBERT model)"),tMe.forEach(t),Aso=i(C),hp=n(C,"LI",{});var aMe=s(hp);WK=n(aMe,"STRONG",{});var qGr=s(WK);Lso=r(qGr,"dpr"),qGr.forEach(t),Bso=r(aMe," \u2014 "),iS=n(aMe,"A",{href:!0});var GGr=s(iS);xso=r(GGr,"DPRQuestionEncoder"),GGr.forEach(t),kso=r(aMe," (DPR model)"),aMe.forEach(t),Rso=i(C),pp=n(C,"LI",{});var nMe=s(pp);QK=n(nMe,"STRONG",{});var OGr=s(QK);Sso=r(OGr,"electra"),OGr.forEach(t),Pso=r(nMe," \u2014 "),dS=n(nMe,"A",{href:!0});var XGr=s(dS);$so=r(XGr,"ElectraModel"),XGr.forEach(t),Iso=r(nMe," (ELECTRA model)"),nMe.forEach(t),Nso=i(C),_p=n(C,"LI",{});var sMe=s(_p);HK=n(sMe,"STRONG",{});var VGr=s(HK);Dso=r(VGr,"flaubert"),VGr.forEach(t),jso=r(sMe," \u2014 "),cS=n(sMe,"A",{href:!0});var zGr=s(cS);qso=r(zGr,"FlaubertModel"),zGr.forEach(t),Gso=r(sMe," (FlauBERT model)"),sMe.forEach(t),Oso=i(C),up=n(C,"LI",{});var lMe=s(up);UK=n(lMe,"STRONG",{});var WGr=s(UK);Xso=r(WGr,"fnet"),WGr.forEach(t),Vso=r(lMe," \u2014 "),fS=n(lMe,"A",{href:!0});var QGr=s(fS);zso=r(QGr,"FNetModel"),QGr.forEach(t),Wso=r(lMe," (FNet model)"),lMe.forEach(t),Qso=i(C),bp=n(C,"LI",{});var iMe=s(bp);JK=n(iMe,"STRONG",{});var HGr=s(JK);Hso=r(HGr,"fsmt"),HGr.forEach(t),Uso=r(iMe," \u2014 "),mS=n(iMe,"A",{href:!0});var UGr=s(mS);Jso=r(UGr,"FSMTModel"),UGr.forEach(t),Yso=r(iMe," (FairSeq Machine-Translation model)"),iMe.forEach(t),Kso=i(C),js=n(C,"LI",{});var JL=s(js);YK=n(JL,"STRONG",{});var JGr=s(YK);Zso=r(JGr,"funnel"),JGr.forEach(t),elo=r(JL," \u2014 "),gS=n(JL,"A",{href:!0});var YGr=s(gS);olo=r(YGr,"FunnelModel"),YGr.forEach(t),rlo=r(JL," or "),hS=n(JL,"A",{href:!0});var KGr=s(hS);tlo=r(KGr,"FunnelBaseModel"),KGr.forEach(t),alo=r(JL," (Funnel Transformer model)"),JL.forEach(t),nlo=i(C),vp=n(C,"LI",{});var dMe=s(vp);KK=n(dMe,"STRONG",{});var ZGr=s(KK);slo=r(ZGr,"glpn"),ZGr.forEach(t),llo=r(dMe," \u2014 "),pS=n(dMe,"A",{href:!0});var eOr=s(pS);ilo=r(eOr,"GLPNModel"),eOr.forEach(t),dlo=r(dMe," (GLPN model)"),dMe.forEach(t),clo=i(C),Tp=n(C,"LI",{});var cMe=s(Tp);ZK=n(cMe,"STRONG",{});var oOr=s(ZK);flo=r(oOr,"gpt2"),oOr.forEach(t),mlo=r(cMe," \u2014 "),_S=n(cMe,"A",{href:!0});var rOr=s(_S);glo=r(rOr,"GPT2Model"),rOr.forEach(t),hlo=r(cMe," (OpenAI GPT-2 model)"),cMe.forEach(t),plo=i(C),Fp=n(C,"LI",{});var fMe=s(Fp);eZ=n(fMe,"STRONG",{});var tOr=s(eZ);_lo=r(tOr,"gpt_neo"),tOr.forEach(t),ulo=r(fMe," \u2014 "),uS=n(fMe,"A",{href:!0});var aOr=s(uS);blo=r(aOr,"GPTNeoModel"),aOr.forEach(t),vlo=r(fMe," (GPT Neo model)"),fMe.forEach(t),Tlo=i(C),Cp=n(C,"LI",{});var mMe=s(Cp);oZ=n(mMe,"STRONG",{});var nOr=s(oZ);Flo=r(nOr,"gptj"),nOr.forEach(t),Clo=r(mMe," \u2014 "),bS=n(mMe,"A",{href:!0});var sOr=s(bS);Mlo=r(sOr,"GPTJModel"),sOr.forEach(t),Elo=r(mMe," (GPT-J model)"),mMe.forEach(t),ylo=i(C),Mp=n(C,"LI",{});var gMe=s(Mp);rZ=n(gMe,"STRONG",{});var lOr=s(rZ);wlo=r(lOr,"hubert"),lOr.forEach(t),Alo=r(gMe," \u2014 "),vS=n(gMe,"A",{href:!0});var iOr=s(vS);Llo=r(iOr,"HubertModel"),iOr.forEach(t),Blo=r(gMe," (Hubert model)"),gMe.forEach(t),xlo=i(C),Ep=n(C,"LI",{});var hMe=s(Ep);tZ=n(hMe,"STRONG",{});var dOr=s(tZ);klo=r(dOr,"ibert"),dOr.forEach(t),Rlo=r(hMe," \u2014 "),TS=n(hMe,"A",{href:!0});var cOr=s(TS);Slo=r(cOr,"IBertModel"),cOr.forEach(t),Plo=r(hMe," (I-BERT model)"),hMe.forEach(t),$lo=i(C),yp=n(C,"LI",{});var pMe=s(yp);aZ=n(pMe,"STRONG",{});var fOr=s(aZ);Ilo=r(fOr,"imagegpt"),fOr.forEach(t),Nlo=r(pMe," \u2014 "),FS=n(pMe,"A",{href:!0});var mOr=s(FS);Dlo=r(mOr,"ImageGPTModel"),mOr.forEach(t),jlo=r(pMe," (ImageGPT model)"),pMe.forEach(t),qlo=i(C),wp=n(C,"LI",{});var _Me=s(wp);nZ=n(_Me,"STRONG",{});var gOr=s(nZ);Glo=r(gOr,"layoutlm"),gOr.forEach(t),Olo=r(_Me," \u2014 "),CS=n(_Me,"A",{href:!0});var hOr=s(CS);Xlo=r(hOr,"LayoutLMModel"),hOr.forEach(t),Vlo=r(_Me," (LayoutLM model)"),_Me.forEach(t),zlo=i(C),Ap=n(C,"LI",{});var uMe=s(Ap);sZ=n(uMe,"STRONG",{});var pOr=s(sZ);Wlo=r(pOr,"layoutlmv2"),pOr.forEach(t),Qlo=r(uMe," \u2014 "),MS=n(uMe,"A",{href:!0});var _Or=s(MS);Hlo=r(_Or,"LayoutLMv2Model"),_Or.forEach(t),Ulo=r(uMe," (LayoutLMv2 model)"),uMe.forEach(t),Jlo=i(C),Lp=n(C,"LI",{});var bMe=s(Lp);lZ=n(bMe,"STRONG",{});var uOr=s(lZ);Ylo=r(uOr,"led"),uOr.forEach(t),Klo=r(bMe," \u2014 "),ES=n(bMe,"A",{href:!0});var bOr=s(ES);Zlo=r(bOr,"LEDModel"),bOr.forEach(t),eio=r(bMe," (LED model)"),bMe.forEach(t),oio=i(C),Bp=n(C,"LI",{});var vMe=s(Bp);iZ=n(vMe,"STRONG",{});var vOr=s(iZ);rio=r(vOr,"longformer"),vOr.forEach(t),tio=r(vMe," \u2014 "),yS=n(vMe,"A",{href:!0});var TOr=s(yS);aio=r(TOr,"LongformerModel"),TOr.forEach(t),nio=r(vMe," (Longformer model)"),vMe.forEach(t),sio=i(C),xp=n(C,"LI",{});var TMe=s(xp);dZ=n(TMe,"STRONG",{});var FOr=s(dZ);lio=r(FOr,"luke"),FOr.forEach(t),iio=r(TMe," \u2014 "),wS=n(TMe,"A",{href:!0});var COr=s(wS);dio=r(COr,"LukeModel"),COr.forEach(t),cio=r(TMe," (LUKE model)"),TMe.forEach(t),fio=i(C),kp=n(C,"LI",{});var FMe=s(kp);cZ=n(FMe,"STRONG",{});var MOr=s(cZ);mio=r(MOr,"lxmert"),MOr.forEach(t),gio=r(FMe," \u2014 "),AS=n(FMe,"A",{href:!0});var EOr=s(AS);hio=r(EOr,"LxmertModel"),EOr.forEach(t),pio=r(FMe," (LXMERT model)"),FMe.forEach(t),_io=i(C),Rp=n(C,"LI",{});var CMe=s(Rp);fZ=n(CMe,"STRONG",{});var yOr=s(fZ);uio=r(yOr,"m2m_100"),yOr.forEach(t),bio=r(CMe," \u2014 "),LS=n(CMe,"A",{href:!0});var wOr=s(LS);vio=r(wOr,"M2M100Model"),wOr.forEach(t),Tio=r(CMe," (M2M100 model)"),CMe.forEach(t),Fio=i(C),Sp=n(C,"LI",{});var MMe=s(Sp);mZ=n(MMe,"STRONG",{});var AOr=s(mZ);Cio=r(AOr,"marian"),AOr.forEach(t),Mio=r(MMe," \u2014 "),BS=n(MMe,"A",{href:!0});var LOr=s(BS);Eio=r(LOr,"MarianModel"),LOr.forEach(t),yio=r(MMe," (Marian model)"),MMe.forEach(t),wio=i(C),Pp=n(C,"LI",{});var EMe=s(Pp);gZ=n(EMe,"STRONG",{});var BOr=s(gZ);Aio=r(BOr,"maskformer"),BOr.forEach(t),Lio=r(EMe," \u2014 "),xS=n(EMe,"A",{href:!0});var xOr=s(xS);Bio=r(xOr,"MaskFormerModel"),xOr.forEach(t),xio=r(EMe," (MaskFormer model)"),EMe.forEach(t),kio=i(C),$p=n(C,"LI",{});var yMe=s($p);hZ=n(yMe,"STRONG",{});var kOr=s(hZ);Rio=r(kOr,"mbart"),kOr.forEach(t),Sio=r(yMe," \u2014 "),kS=n(yMe,"A",{href:!0});var ROr=s(kS);Pio=r(ROr,"MBartModel"),ROr.forEach(t),$io=r(yMe," (mBART model)"),yMe.forEach(t),Iio=i(C),Ip=n(C,"LI",{});var wMe=s(Ip);pZ=n(wMe,"STRONG",{});var SOr=s(pZ);Nio=r(SOr,"megatron-bert"),SOr.forEach(t),Dio=r(wMe," \u2014 "),RS=n(wMe,"A",{href:!0});var POr=s(RS);jio=r(POr,"MegatronBertModel"),POr.forEach(t),qio=r(wMe," (MegatronBert model)"),wMe.forEach(t),Gio=i(C),Np=n(C,"LI",{});var AMe=s(Np);_Z=n(AMe,"STRONG",{});var $Or=s(_Z);Oio=r($Or,"mobilebert"),$Or.forEach(t),Xio=r(AMe," \u2014 "),SS=n(AMe,"A",{href:!0});var IOr=s(SS);Vio=r(IOr,"MobileBertModel"),IOr.forEach(t),zio=r(AMe," (MobileBERT model)"),AMe.forEach(t),Wio=i(C),Dp=n(C,"LI",{});var LMe=s(Dp);uZ=n(LMe,"STRONG",{});var NOr=s(uZ);Qio=r(NOr,"mpnet"),NOr.forEach(t),Hio=r(LMe," \u2014 "),PS=n(LMe,"A",{href:!0});var DOr=s(PS);Uio=r(DOr,"MPNetModel"),DOr.forEach(t),Jio=r(LMe," (MPNet model)"),LMe.forEach(t),Yio=i(C),jp=n(C,"LI",{});var BMe=s(jp);bZ=n(BMe,"STRONG",{});var jOr=s(bZ);Kio=r(jOr,"mt5"),jOr.forEach(t),Zio=r(BMe," \u2014 "),$S=n(BMe,"A",{href:!0});var qOr=s($S);edo=r(qOr,"MT5Model"),qOr.forEach(t),odo=r(BMe," (mT5 model)"),BMe.forEach(t),rdo=i(C),qp=n(C,"LI",{});var xMe=s(qp);vZ=n(xMe,"STRONG",{});var GOr=s(vZ);tdo=r(GOr,"nystromformer"),GOr.forEach(t),ado=r(xMe," \u2014 "),IS=n(xMe,"A",{href:!0});var OOr=s(IS);ndo=r(OOr,"NystromformerModel"),OOr.forEach(t),sdo=r(xMe," (Nystromformer model)"),xMe.forEach(t),ldo=i(C),Gp=n(C,"LI",{});var kMe=s(Gp);TZ=n(kMe,"STRONG",{});var XOr=s(TZ);ido=r(XOr,"openai-gpt"),XOr.forEach(t),ddo=r(kMe," \u2014 "),NS=n(kMe,"A",{href:!0});var VOr=s(NS);cdo=r(VOr,"OpenAIGPTModel"),VOr.forEach(t),fdo=r(kMe," (OpenAI GPT model)"),kMe.forEach(t),mdo=i(C),Op=n(C,"LI",{});var RMe=s(Op);FZ=n(RMe,"STRONG",{});var zOr=s(FZ);gdo=r(zOr,"pegasus"),zOr.forEach(t),hdo=r(RMe," \u2014 "),DS=n(RMe,"A",{href:!0});var WOr=s(DS);pdo=r(WOr,"PegasusModel"),WOr.forEach(t),_do=r(RMe," (Pegasus model)"),RMe.forEach(t),udo=i(C),Xp=n(C,"LI",{});var SMe=s(Xp);CZ=n(SMe,"STRONG",{});var QOr=s(CZ);bdo=r(QOr,"perceiver"),QOr.forEach(t),vdo=r(SMe," \u2014 "),jS=n(SMe,"A",{href:!0});var HOr=s(jS);Tdo=r(HOr,"PerceiverModel"),HOr.forEach(t),Fdo=r(SMe," (Perceiver model)"),SMe.forEach(t),Cdo=i(C),Vp=n(C,"LI",{});var PMe=s(Vp);MZ=n(PMe,"STRONG",{});var UOr=s(MZ);Mdo=r(UOr,"plbart"),UOr.forEach(t),Edo=r(PMe," \u2014 "),qS=n(PMe,"A",{href:!0});var JOr=s(qS);ydo=r(JOr,"PLBartModel"),JOr.forEach(t),wdo=r(PMe," (PLBart model)"),PMe.forEach(t),Ado=i(C),zp=n(C,"LI",{});var $Me=s(zp);EZ=n($Me,"STRONG",{});var YOr=s(EZ);Ldo=r(YOr,"poolformer"),YOr.forEach(t),Bdo=r($Me," \u2014 "),GS=n($Me,"A",{href:!0});var KOr=s(GS);xdo=r(KOr,"PoolFormerModel"),KOr.forEach(t),kdo=r($Me," (PoolFormer model)"),$Me.forEach(t),Rdo=i(C),Wp=n(C,"LI",{});var IMe=s(Wp);yZ=n(IMe,"STRONG",{});var ZOr=s(yZ);Sdo=r(ZOr,"prophetnet"),ZOr.forEach(t),Pdo=r(IMe," \u2014 "),OS=n(IMe,"A",{href:!0});var eXr=s(OS);$do=r(eXr,"ProphetNetModel"),eXr.forEach(t),Ido=r(IMe," (ProphetNet model)"),IMe.forEach(t),Ndo=i(C),Qp=n(C,"LI",{});var NMe=s(Qp);wZ=n(NMe,"STRONG",{});var oXr=s(wZ);Ddo=r(oXr,"qdqbert"),oXr.forEach(t),jdo=r(NMe," \u2014 "),XS=n(NMe,"A",{href:!0});var rXr=s(XS);qdo=r(rXr,"QDQBertModel"),rXr.forEach(t),Gdo=r(NMe," (QDQBert model)"),NMe.forEach(t),Odo=i(C),Hp=n(C,"LI",{});var DMe=s(Hp);AZ=n(DMe,"STRONG",{});var tXr=s(AZ);Xdo=r(tXr,"reformer"),tXr.forEach(t),Vdo=r(DMe," \u2014 "),VS=n(DMe,"A",{href:!0});var aXr=s(VS);zdo=r(aXr,"ReformerModel"),aXr.forEach(t),Wdo=r(DMe," (Reformer model)"),DMe.forEach(t),Qdo=i(C),Up=n(C,"LI",{});var jMe=s(Up);LZ=n(jMe,"STRONG",{});var nXr=s(LZ);Hdo=r(nXr,"rembert"),nXr.forEach(t),Udo=r(jMe," \u2014 "),zS=n(jMe,"A",{href:!0});var sXr=s(zS);Jdo=r(sXr,"RemBertModel"),sXr.forEach(t),Ydo=r(jMe," (RemBERT model)"),jMe.forEach(t),Kdo=i(C),Jp=n(C,"LI",{});var qMe=s(Jp);BZ=n(qMe,"STRONG",{});var lXr=s(BZ);Zdo=r(lXr,"resnet"),lXr.forEach(t),eco=r(qMe," \u2014 "),WS=n(qMe,"A",{href:!0});var iXr=s(WS);oco=r(iXr,"ResNetModel"),iXr.forEach(t),rco=r(qMe," (ResNet model)"),qMe.forEach(t),tco=i(C),Yp=n(C,"LI",{});var GMe=s(Yp);xZ=n(GMe,"STRONG",{});var dXr=s(xZ);aco=r(dXr,"retribert"),dXr.forEach(t),nco=r(GMe," \u2014 "),QS=n(GMe,"A",{href:!0});var cXr=s(QS);sco=r(cXr,"RetriBertModel"),cXr.forEach(t),lco=r(GMe," (RetriBERT model)"),GMe.forEach(t),ico=i(C),Kp=n(C,"LI",{});var OMe=s(Kp);kZ=n(OMe,"STRONG",{});var fXr=s(kZ);dco=r(fXr,"roberta"),fXr.forEach(t),cco=r(OMe," \u2014 "),HS=n(OMe,"A",{href:!0});var mXr=s(HS);fco=r(mXr,"RobertaModel"),mXr.forEach(t),mco=r(OMe," (RoBERTa model)"),OMe.forEach(t),gco=i(C),Zp=n(C,"LI",{});var XMe=s(Zp);RZ=n(XMe,"STRONG",{});var gXr=s(RZ);hco=r(gXr,"roformer"),gXr.forEach(t),pco=r(XMe," \u2014 "),US=n(XMe,"A",{href:!0});var hXr=s(US);_co=r(hXr,"RoFormerModel"),hXr.forEach(t),uco=r(XMe," (RoFormer model)"),XMe.forEach(t),bco=i(C),e_=n(C,"LI",{});var VMe=s(e_);SZ=n(VMe,"STRONG",{});var pXr=s(SZ);vco=r(pXr,"segformer"),pXr.forEach(t),Tco=r(VMe," \u2014 "),JS=n(VMe,"A",{href:!0});var _Xr=s(JS);Fco=r(_Xr,"SegformerModel"),_Xr.forEach(t),Cco=r(VMe," (SegFormer model)"),VMe.forEach(t),Mco=i(C),o_=n(C,"LI",{});var zMe=s(o_);PZ=n(zMe,"STRONG",{});var uXr=s(PZ);Eco=r(uXr,"sew"),uXr.forEach(t),yco=r(zMe," \u2014 "),YS=n(zMe,"A",{href:!0});var bXr=s(YS);wco=r(bXr,"SEWModel"),bXr.forEach(t),Aco=r(zMe," (SEW model)"),zMe.forEach(t),Lco=i(C),r_=n(C,"LI",{});var WMe=s(r_);$Z=n(WMe,"STRONG",{});var vXr=s($Z);Bco=r(vXr,"sew-d"),vXr.forEach(t),xco=r(WMe," \u2014 "),KS=n(WMe,"A",{href:!0});var TXr=s(KS);kco=r(TXr,"SEWDModel"),TXr.forEach(t),Rco=r(WMe," (SEW-D model)"),WMe.forEach(t),Sco=i(C),t_=n(C,"LI",{});var QMe=s(t_);IZ=n(QMe,"STRONG",{});var FXr=s(IZ);Pco=r(FXr,"speech_to_text"),FXr.forEach(t),$co=r(QMe," \u2014 "),ZS=n(QMe,"A",{href:!0});var CXr=s(ZS);Ico=r(CXr,"Speech2TextModel"),CXr.forEach(t),Nco=r(QMe," (Speech2Text model)"),QMe.forEach(t),Dco=i(C),a_=n(C,"LI",{});var HMe=s(a_);NZ=n(HMe,"STRONG",{});var MXr=s(NZ);jco=r(MXr,"splinter"),MXr.forEach(t),qco=r(HMe," \u2014 "),eP=n(HMe,"A",{href:!0});var EXr=s(eP);Gco=r(EXr,"SplinterModel"),EXr.forEach(t),Oco=r(HMe," (Splinter model)"),HMe.forEach(t),Xco=i(C),n_=n(C,"LI",{});var UMe=s(n_);DZ=n(UMe,"STRONG",{});var yXr=s(DZ);Vco=r(yXr,"squeezebert"),yXr.forEach(t),zco=r(UMe," \u2014 "),oP=n(UMe,"A",{href:!0});var wXr=s(oP);Wco=r(wXr,"SqueezeBertModel"),wXr.forEach(t),Qco=r(UMe," (SqueezeBERT model)"),UMe.forEach(t),Hco=i(C),s_=n(C,"LI",{});var JMe=s(s_);jZ=n(JMe,"STRONG",{});var AXr=s(jZ);Uco=r(AXr,"swin"),AXr.forEach(t),Jco=r(JMe," \u2014 "),rP=n(JMe,"A",{href:!0});var LXr=s(rP);Yco=r(LXr,"SwinModel"),LXr.forEach(t),Kco=r(JMe," (Swin model)"),JMe.forEach(t),Zco=i(C),l_=n(C,"LI",{});var YMe=s(l_);qZ=n(YMe,"STRONG",{});var BXr=s(qZ);efo=r(BXr,"t5"),BXr.forEach(t),ofo=r(YMe," \u2014 "),tP=n(YMe,"A",{href:!0});var xXr=s(tP);rfo=r(xXr,"T5Model"),xXr.forEach(t),tfo=r(YMe," (T5 model)"),YMe.forEach(t),afo=i(C),i_=n(C,"LI",{});var KMe=s(i_);GZ=n(KMe,"STRONG",{});var kXr=s(GZ);nfo=r(kXr,"tapas"),kXr.forEach(t),sfo=r(KMe," \u2014 "),aP=n(KMe,"A",{href:!0});var RXr=s(aP);lfo=r(RXr,"TapasModel"),RXr.forEach(t),ifo=r(KMe," (TAPAS model)"),KMe.forEach(t),dfo=i(C),d_=n(C,"LI",{});var ZMe=s(d_);OZ=n(ZMe,"STRONG",{});var SXr=s(OZ);cfo=r(SXr,"transfo-xl"),SXr.forEach(t),ffo=r(ZMe," \u2014 "),nP=n(ZMe,"A",{href:!0});var PXr=s(nP);mfo=r(PXr,"TransfoXLModel"),PXr.forEach(t),gfo=r(ZMe," (Transformer-XL model)"),ZMe.forEach(t),hfo=i(C),c_=n(C,"LI",{});var e4e=s(c_);XZ=n(e4e,"STRONG",{});var $Xr=s(XZ);pfo=r($Xr,"unispeech"),$Xr.forEach(t),_fo=r(e4e," \u2014 "),sP=n(e4e,"A",{href:!0});var IXr=s(sP);ufo=r(IXr,"UniSpeechModel"),IXr.forEach(t),bfo=r(e4e," (UniSpeech model)"),e4e.forEach(t),vfo=i(C),f_=n(C,"LI",{});var o4e=s(f_);VZ=n(o4e,"STRONG",{});var NXr=s(VZ);Tfo=r(NXr,"unispeech-sat"),NXr.forEach(t),Ffo=r(o4e," \u2014 "),lP=n(o4e,"A",{href:!0});var DXr=s(lP);Cfo=r(DXr,"UniSpeechSatModel"),DXr.forEach(t),Mfo=r(o4e," (UniSpeechSat model)"),o4e.forEach(t),Efo=i(C),m_=n(C,"LI",{});var r4e=s(m_);zZ=n(r4e,"STRONG",{});var jXr=s(zZ);yfo=r(jXr,"van"),jXr.forEach(t),wfo=r(r4e," \u2014 "),iP=n(r4e,"A",{href:!0});var qXr=s(iP);Afo=r(qXr,"VanModel"),qXr.forEach(t),Lfo=r(r4e," (VAN model)"),r4e.forEach(t),Bfo=i(C),g_=n(C,"LI",{});var t4e=s(g_);WZ=n(t4e,"STRONG",{});var GXr=s(WZ);xfo=r(GXr,"vilt"),GXr.forEach(t),kfo=r(t4e," \u2014 "),dP=n(t4e,"A",{href:!0});var OXr=s(dP);Rfo=r(OXr,"ViltModel"),OXr.forEach(t),Sfo=r(t4e," (ViLT model)"),t4e.forEach(t),Pfo=i(C),h_=n(C,"LI",{});var a4e=s(h_);QZ=n(a4e,"STRONG",{});var XXr=s(QZ);$fo=r(XXr,"vision-text-dual-encoder"),XXr.forEach(t),Ifo=r(a4e," \u2014 "),cP=n(a4e,"A",{href:!0});var VXr=s(cP);Nfo=r(VXr,"VisionTextDualEncoderModel"),VXr.forEach(t),Dfo=r(a4e," (VisionTextDualEncoder model)"),a4e.forEach(t),jfo=i(C),p_=n(C,"LI",{});var n4e=s(p_);HZ=n(n4e,"STRONG",{});var zXr=s(HZ);qfo=r(zXr,"visual_bert"),zXr.forEach(t),Gfo=r(n4e," \u2014 "),fP=n(n4e,"A",{href:!0});var WXr=s(fP);Ofo=r(WXr,"VisualBertModel"),WXr.forEach(t),Xfo=r(n4e," (VisualBert model)"),n4e.forEach(t),Vfo=i(C),__=n(C,"LI",{});var s4e=s(__);UZ=n(s4e,"STRONG",{});var QXr=s(UZ);zfo=r(QXr,"vit"),QXr.forEach(t),Wfo=r(s4e," \u2014 "),mP=n(s4e,"A",{href:!0});var HXr=s(mP);Qfo=r(HXr,"ViTModel"),HXr.forEach(t),Hfo=r(s4e," (ViT model)"),s4e.forEach(t),Ufo=i(C),u_=n(C,"LI",{});var l4e=s(u_);JZ=n(l4e,"STRONG",{});var UXr=s(JZ);Jfo=r(UXr,"vit_mae"),UXr.forEach(t),Yfo=r(l4e," \u2014 "),gP=n(l4e,"A",{href:!0});var JXr=s(gP);Kfo=r(JXr,"ViTMAEModel"),JXr.forEach(t),Zfo=r(l4e," (ViTMAE model)"),l4e.forEach(t),emo=i(C),b_=n(C,"LI",{});var i4e=s(b_);YZ=n(i4e,"STRONG",{});var YXr=s(YZ);omo=r(YXr,"wav2vec2"),YXr.forEach(t),rmo=r(i4e," \u2014 "),hP=n(i4e,"A",{href:!0});var KXr=s(hP);tmo=r(KXr,"Wav2Vec2Model"),KXr.forEach(t),amo=r(i4e," (Wav2Vec2 model)"),i4e.forEach(t),nmo=i(C),v_=n(C,"LI",{});var d4e=s(v_);KZ=n(d4e,"STRONG",{});var ZXr=s(KZ);smo=r(ZXr,"wavlm"),ZXr.forEach(t),lmo=r(d4e," \u2014 "),pP=n(d4e,"A",{href:!0});var eVr=s(pP);imo=r(eVr,"WavLMModel"),eVr.forEach(t),dmo=r(d4e," (WavLM model)"),d4e.forEach(t),cmo=i(C),T_=n(C,"LI",{});var c4e=s(T_);ZZ=n(c4e,"STRONG",{});var oVr=s(ZZ);fmo=r(oVr,"xglm"),oVr.forEach(t),mmo=r(c4e," \u2014 "),_P=n(c4e,"A",{href:!0});var rVr=s(_P);gmo=r(rVr,"XGLMModel"),rVr.forEach(t),hmo=r(c4e," (XGLM model)"),c4e.forEach(t),pmo=i(C),F_=n(C,"LI",{});var f4e=s(F_);eee=n(f4e,"STRONG",{});var tVr=s(eee);_mo=r(tVr,"xlm"),tVr.forEach(t),umo=r(f4e," \u2014 "),uP=n(f4e,"A",{href:!0});var aVr=s(uP);bmo=r(aVr,"XLMModel"),aVr.forEach(t),vmo=r(f4e," (XLM model)"),f4e.forEach(t),Tmo=i(C),C_=n(C,"LI",{});var m4e=s(C_);oee=n(m4e,"STRONG",{});var nVr=s(oee);Fmo=r(nVr,"xlm-prophetnet"),nVr.forEach(t),Cmo=r(m4e," \u2014 "),bP=n(m4e,"A",{href:!0});var sVr=s(bP);Mmo=r(sVr,"XLMProphetNetModel"),sVr.forEach(t),Emo=r(m4e," (XLMProphetNet model)"),m4e.forEach(t),ymo=i(C),M_=n(C,"LI",{});var g4e=s(M_);ree=n(g4e,"STRONG",{});var lVr=s(ree);wmo=r(lVr,"xlm-roberta"),lVr.forEach(t),Amo=r(g4e," \u2014 "),vP=n(g4e,"A",{href:!0});var iVr=s(vP);Lmo=r(iVr,"XLMRobertaModel"),iVr.forEach(t),Bmo=r(g4e," (XLM-RoBERTa model)"),g4e.forEach(t),xmo=i(C),E_=n(C,"LI",{});var h4e=s(E_);tee=n(h4e,"STRONG",{});var dVr=s(tee);kmo=r(dVr,"xlm-roberta-xl"),dVr.forEach(t),Rmo=r(h4e," \u2014 "),TP=n(h4e,"A",{href:!0});var cVr=s(TP);Smo=r(cVr,"XLMRobertaXLModel"),cVr.forEach(t),Pmo=r(h4e," (XLM-RoBERTa-XL model)"),h4e.forEach(t),$mo=i(C),y_=n(C,"LI",{});var p4e=s(y_);aee=n(p4e,"STRONG",{});var fVr=s(aee);Imo=r(fVr,"xlnet"),fVr.forEach(t),Nmo=r(p4e," \u2014 "),FP=n(p4e,"A",{href:!0});var mVr=s(FP);Dmo=r(mVr,"XLNetModel"),mVr.forEach(t),jmo=r(p4e," (XLNet model)"),p4e.forEach(t),qmo=i(C),w_=n(C,"LI",{});var _4e=s(w_);nee=n(_4e,"STRONG",{});var gVr=s(nee);Gmo=r(gVr,"yoso"),gVr.forEach(t),Omo=r(_4e," \u2014 "),CP=n(_4e,"A",{href:!0});var hVr=s(CP);Xmo=r(hVr,"YosoModel"),hVr.forEach(t),Vmo=r(_4e," (YOSO model)"),_4e.forEach(t),C.forEach(t),zmo=i(qt),A_=n(qt,"P",{});var u4e=s(A_);Wmo=r(u4e,"The model is set in evaluation mode by default using "),see=n(u4e,"CODE",{});var pVr=s(see);Qmo=r(pVr,"model.eval()"),pVr.forEach(t),Hmo=r(u4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lee=n(u4e,"CODE",{});var _Vr=s(lee);Umo=r(_Vr,"model.train()"),_Vr.forEach(t),u4e.forEach(t),Jmo=i(qt),iee=n(qt,"P",{});var uVr=s(iee);Ymo=r(uVr,"Examples:"),uVr.forEach(t),Kmo=i(qt),m(QE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),Tke=i(c),Zi=n(c,"H2",{class:!0});var BSe=s(Zi);L_=n(BSe,"A",{id:!0,class:!0,href:!0});var bVr=s(L_);dee=n(bVr,"SPAN",{});var vVr=s(dee);m(HE.$$.fragment,vVr),vVr.forEach(t),bVr.forEach(t),Zmo=i(BSe),cee=n(BSe,"SPAN",{});var TVr=s(cee);ego=r(TVr,"AutoModelForPreTraining"),TVr.forEach(t),BSe.forEach(t),Fke=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(UE.$$.fragment,Hs),ogo=i(Hs),ed=n(Hs,"P",{});var Zz=s(ed);rgo=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fee=n(Zz,"CODE",{});var FVr=s(fee);tgo=r(FVr,"from_pretrained()"),FVr.forEach(t),ago=r(Zz,"class method or the "),mee=n(Zz,"CODE",{});var CVr=s(mee);ngo=r(CVr,"from_config()"),CVr.forEach(t),sgo=r(Zz,`class
method.`),Zz.forEach(t),lgo=i(Hs),JE=n(Hs,"P",{});var xSe=s(JE);igo=r(xSe,"This class cannot be instantiated directly using "),gee=n(xSe,"CODE",{});var MVr=s(gee);dgo=r(MVr,"__init__()"),MVr.forEach(t),cgo=r(xSe," (throws an error)."),xSe.forEach(t),fgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(YE.$$.fragment,Us),mgo=i(Us),hee=n(Us,"P",{});var EVr=s(hee);ggo=r(EVr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EVr.forEach(t),hgo=i(Us),od=n(Us,"P",{});var eW=s(od);pgo=r(eW,`Note:
Loading a model from its configuration file does `),pee=n(eW,"STRONG",{});var yVr=s(pee);_go=r(yVr,"not"),yVr.forEach(t),ugo=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(eW,"CODE",{});var wVr=s(_ee);bgo=r(wVr,"from_pretrained()"),wVr.forEach(t),vgo=r(eW,"to load the model weights."),eW.forEach(t),Tgo=i(Us),uee=n(Us,"P",{});var AVr=s(uee);Fgo=r(AVr,"Examples:"),AVr.forEach(t),Cgo=i(Us),m(KE.$$.fragment,Us),Us.forEach(t),Mgo=i(Hs),De=n(Hs,"DIV",{class:!0});var Gt=s(De);m(ZE.$$.fragment,Gt),Ego=i(Gt),bee=n(Gt,"P",{});var LVr=s(bee);ygo=r(LVr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),LVr.forEach(t),wgo=i(Gt),za=n(Gt,"P",{});var m4=s(za);Ago=r(m4,"The model class to instantiate is selected based on the "),vee=n(m4,"CODE",{});var BVr=s(vee);Lgo=r(BVr,"model_type"),BVr.forEach(t),Bgo=r(m4,` property of the config object (either
passed as an argument or loaded from `),Tee=n(m4,"CODE",{});var xVr=s(Tee);xgo=r(xVr,"pretrained_model_name_or_path"),xVr.forEach(t),kgo=r(m4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fee=n(m4,"CODE",{});var kVr=s(Fee);Rgo=r(kVr,"pretrained_model_name_or_path"),kVr.forEach(t),Sgo=r(m4,":"),m4.forEach(t),Pgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);B_=n(S,"LI",{});var b4e=s(B_);Cee=n(b4e,"STRONG",{});var RVr=s(Cee);$go=r(RVr,"albert"),RVr.forEach(t),Igo=r(b4e," \u2014 "),MP=n(b4e,"A",{href:!0});var SVr=s(MP);Ngo=r(SVr,"AlbertForPreTraining"),SVr.forEach(t),Dgo=r(b4e," (ALBERT model)"),b4e.forEach(t),jgo=i(S),x_=n(S,"LI",{});var v4e=s(x_);Mee=n(v4e,"STRONG",{});var PVr=s(Mee);qgo=r(PVr,"bart"),PVr.forEach(t),Ggo=r(v4e," \u2014 "),EP=n(v4e,"A",{href:!0});var $Vr=s(EP);Ogo=r($Vr,"BartForConditionalGeneration"),$Vr.forEach(t),Xgo=r(v4e," (BART model)"),v4e.forEach(t),Vgo=i(S),k_=n(S,"LI",{});var T4e=s(k_);Eee=n(T4e,"STRONG",{});var IVr=s(Eee);zgo=r(IVr,"bert"),IVr.forEach(t),Wgo=r(T4e," \u2014 "),yP=n(T4e,"A",{href:!0});var NVr=s(yP);Qgo=r(NVr,"BertForPreTraining"),NVr.forEach(t),Hgo=r(T4e," (BERT model)"),T4e.forEach(t),Ugo=i(S),R_=n(S,"LI",{});var F4e=s(R_);yee=n(F4e,"STRONG",{});var DVr=s(yee);Jgo=r(DVr,"big_bird"),DVr.forEach(t),Ygo=r(F4e," \u2014 "),wP=n(F4e,"A",{href:!0});var jVr=s(wP);Kgo=r(jVr,"BigBirdForPreTraining"),jVr.forEach(t),Zgo=r(F4e," (BigBird model)"),F4e.forEach(t),eho=i(S),S_=n(S,"LI",{});var C4e=s(S_);wee=n(C4e,"STRONG",{});var qVr=s(wee);oho=r(qVr,"camembert"),qVr.forEach(t),rho=r(C4e," \u2014 "),AP=n(C4e,"A",{href:!0});var GVr=s(AP);tho=r(GVr,"CamembertForMaskedLM"),GVr.forEach(t),aho=r(C4e," (CamemBERT model)"),C4e.forEach(t),nho=i(S),P_=n(S,"LI",{});var M4e=s(P_);Aee=n(M4e,"STRONG",{});var OVr=s(Aee);sho=r(OVr,"ctrl"),OVr.forEach(t),lho=r(M4e," \u2014 "),LP=n(M4e,"A",{href:!0});var XVr=s(LP);iho=r(XVr,"CTRLLMHeadModel"),XVr.forEach(t),dho=r(M4e," (CTRL model)"),M4e.forEach(t),cho=i(S),$_=n(S,"LI",{});var E4e=s($_);Lee=n(E4e,"STRONG",{});var VVr=s(Lee);fho=r(VVr,"data2vec-text"),VVr.forEach(t),mho=r(E4e," \u2014 "),BP=n(E4e,"A",{href:!0});var zVr=s(BP);gho=r(zVr,"Data2VecTextForMaskedLM"),zVr.forEach(t),hho=r(E4e," (Data2VecText model)"),E4e.forEach(t),pho=i(S),I_=n(S,"LI",{});var y4e=s(I_);Bee=n(y4e,"STRONG",{});var WVr=s(Bee);_ho=r(WVr,"deberta"),WVr.forEach(t),uho=r(y4e," \u2014 "),xP=n(y4e,"A",{href:!0});var QVr=s(xP);bho=r(QVr,"DebertaForMaskedLM"),QVr.forEach(t),vho=r(y4e," (DeBERTa model)"),y4e.forEach(t),Tho=i(S),N_=n(S,"LI",{});var w4e=s(N_);xee=n(w4e,"STRONG",{});var HVr=s(xee);Fho=r(HVr,"deberta-v2"),HVr.forEach(t),Cho=r(w4e," \u2014 "),kP=n(w4e,"A",{href:!0});var UVr=s(kP);Mho=r(UVr,"DebertaV2ForMaskedLM"),UVr.forEach(t),Eho=r(w4e," (DeBERTa-v2 model)"),w4e.forEach(t),yho=i(S),D_=n(S,"LI",{});var A4e=s(D_);kee=n(A4e,"STRONG",{});var JVr=s(kee);who=r(JVr,"distilbert"),JVr.forEach(t),Aho=r(A4e," \u2014 "),RP=n(A4e,"A",{href:!0});var YVr=s(RP);Lho=r(YVr,"DistilBertForMaskedLM"),YVr.forEach(t),Bho=r(A4e," (DistilBERT model)"),A4e.forEach(t),xho=i(S),j_=n(S,"LI",{});var L4e=s(j_);Ree=n(L4e,"STRONG",{});var KVr=s(Ree);kho=r(KVr,"electra"),KVr.forEach(t),Rho=r(L4e," \u2014 "),SP=n(L4e,"A",{href:!0});var ZVr=s(SP);Sho=r(ZVr,"ElectraForPreTraining"),ZVr.forEach(t),Pho=r(L4e," (ELECTRA model)"),L4e.forEach(t),$ho=i(S),q_=n(S,"LI",{});var B4e=s(q_);See=n(B4e,"STRONG",{});var ezr=s(See);Iho=r(ezr,"flaubert"),ezr.forEach(t),Nho=r(B4e," \u2014 "),PP=n(B4e,"A",{href:!0});var ozr=s(PP);Dho=r(ozr,"FlaubertWithLMHeadModel"),ozr.forEach(t),jho=r(B4e," (FlauBERT model)"),B4e.forEach(t),qho=i(S),G_=n(S,"LI",{});var x4e=s(G_);Pee=n(x4e,"STRONG",{});var rzr=s(Pee);Gho=r(rzr,"fnet"),rzr.forEach(t),Oho=r(x4e," \u2014 "),$P=n(x4e,"A",{href:!0});var tzr=s($P);Xho=r(tzr,"FNetForPreTraining"),tzr.forEach(t),Vho=r(x4e," (FNet model)"),x4e.forEach(t),zho=i(S),O_=n(S,"LI",{});var k4e=s(O_);$ee=n(k4e,"STRONG",{});var azr=s($ee);Who=r(azr,"fsmt"),azr.forEach(t),Qho=r(k4e," \u2014 "),IP=n(k4e,"A",{href:!0});var nzr=s(IP);Hho=r(nzr,"FSMTForConditionalGeneration"),nzr.forEach(t),Uho=r(k4e," (FairSeq Machine-Translation model)"),k4e.forEach(t),Jho=i(S),X_=n(S,"LI",{});var R4e=s(X_);Iee=n(R4e,"STRONG",{});var szr=s(Iee);Yho=r(szr,"funnel"),szr.forEach(t),Kho=r(R4e," \u2014 "),NP=n(R4e,"A",{href:!0});var lzr=s(NP);Zho=r(lzr,"FunnelForPreTraining"),lzr.forEach(t),epo=r(R4e," (Funnel Transformer model)"),R4e.forEach(t),opo=i(S),V_=n(S,"LI",{});var S4e=s(V_);Nee=n(S4e,"STRONG",{});var izr=s(Nee);rpo=r(izr,"gpt2"),izr.forEach(t),tpo=r(S4e," \u2014 "),DP=n(S4e,"A",{href:!0});var dzr=s(DP);apo=r(dzr,"GPT2LMHeadModel"),dzr.forEach(t),npo=r(S4e," (OpenAI GPT-2 model)"),S4e.forEach(t),spo=i(S),z_=n(S,"LI",{});var P4e=s(z_);Dee=n(P4e,"STRONG",{});var czr=s(Dee);lpo=r(czr,"ibert"),czr.forEach(t),ipo=r(P4e," \u2014 "),jP=n(P4e,"A",{href:!0});var fzr=s(jP);dpo=r(fzr,"IBertForMaskedLM"),fzr.forEach(t),cpo=r(P4e," (I-BERT model)"),P4e.forEach(t),fpo=i(S),W_=n(S,"LI",{});var $4e=s(W_);jee=n($4e,"STRONG",{});var mzr=s(jee);mpo=r(mzr,"layoutlm"),mzr.forEach(t),gpo=r($4e," \u2014 "),qP=n($4e,"A",{href:!0});var gzr=s(qP);hpo=r(gzr,"LayoutLMForMaskedLM"),gzr.forEach(t),ppo=r($4e," (LayoutLM model)"),$4e.forEach(t),_po=i(S),Q_=n(S,"LI",{});var I4e=s(Q_);qee=n(I4e,"STRONG",{});var hzr=s(qee);upo=r(hzr,"longformer"),hzr.forEach(t),bpo=r(I4e," \u2014 "),GP=n(I4e,"A",{href:!0});var pzr=s(GP);vpo=r(pzr,"LongformerForMaskedLM"),pzr.forEach(t),Tpo=r(I4e," (Longformer model)"),I4e.forEach(t),Fpo=i(S),H_=n(S,"LI",{});var N4e=s(H_);Gee=n(N4e,"STRONG",{});var _zr=s(Gee);Cpo=r(_zr,"lxmert"),_zr.forEach(t),Mpo=r(N4e," \u2014 "),OP=n(N4e,"A",{href:!0});var uzr=s(OP);Epo=r(uzr,"LxmertForPreTraining"),uzr.forEach(t),ypo=r(N4e," (LXMERT model)"),N4e.forEach(t),wpo=i(S),U_=n(S,"LI",{});var D4e=s(U_);Oee=n(D4e,"STRONG",{});var bzr=s(Oee);Apo=r(bzr,"megatron-bert"),bzr.forEach(t),Lpo=r(D4e," \u2014 "),XP=n(D4e,"A",{href:!0});var vzr=s(XP);Bpo=r(vzr,"MegatronBertForPreTraining"),vzr.forEach(t),xpo=r(D4e," (MegatronBert model)"),D4e.forEach(t),kpo=i(S),J_=n(S,"LI",{});var j4e=s(J_);Xee=n(j4e,"STRONG",{});var Tzr=s(Xee);Rpo=r(Tzr,"mobilebert"),Tzr.forEach(t),Spo=r(j4e," \u2014 "),VP=n(j4e,"A",{href:!0});var Fzr=s(VP);Ppo=r(Fzr,"MobileBertForPreTraining"),Fzr.forEach(t),$po=r(j4e," (MobileBERT model)"),j4e.forEach(t),Ipo=i(S),Y_=n(S,"LI",{});var q4e=s(Y_);Vee=n(q4e,"STRONG",{});var Czr=s(Vee);Npo=r(Czr,"mpnet"),Czr.forEach(t),Dpo=r(q4e," \u2014 "),zP=n(q4e,"A",{href:!0});var Mzr=s(zP);jpo=r(Mzr,"MPNetForMaskedLM"),Mzr.forEach(t),qpo=r(q4e," (MPNet model)"),q4e.forEach(t),Gpo=i(S),K_=n(S,"LI",{});var G4e=s(K_);zee=n(G4e,"STRONG",{});var Ezr=s(zee);Opo=r(Ezr,"openai-gpt"),Ezr.forEach(t),Xpo=r(G4e," \u2014 "),WP=n(G4e,"A",{href:!0});var yzr=s(WP);Vpo=r(yzr,"OpenAIGPTLMHeadModel"),yzr.forEach(t),zpo=r(G4e," (OpenAI GPT model)"),G4e.forEach(t),Wpo=i(S),Z_=n(S,"LI",{});var O4e=s(Z_);Wee=n(O4e,"STRONG",{});var wzr=s(Wee);Qpo=r(wzr,"retribert"),wzr.forEach(t),Hpo=r(O4e," \u2014 "),QP=n(O4e,"A",{href:!0});var Azr=s(QP);Upo=r(Azr,"RetriBertModel"),Azr.forEach(t),Jpo=r(O4e," (RetriBERT model)"),O4e.forEach(t),Ypo=i(S),eu=n(S,"LI",{});var X4e=s(eu);Qee=n(X4e,"STRONG",{});var Lzr=s(Qee);Kpo=r(Lzr,"roberta"),Lzr.forEach(t),Zpo=r(X4e," \u2014 "),HP=n(X4e,"A",{href:!0});var Bzr=s(HP);e_o=r(Bzr,"RobertaForMaskedLM"),Bzr.forEach(t),o_o=r(X4e," (RoBERTa model)"),X4e.forEach(t),r_o=i(S),ou=n(S,"LI",{});var V4e=s(ou);Hee=n(V4e,"STRONG",{});var xzr=s(Hee);t_o=r(xzr,"squeezebert"),xzr.forEach(t),a_o=r(V4e," \u2014 "),UP=n(V4e,"A",{href:!0});var kzr=s(UP);n_o=r(kzr,"SqueezeBertForMaskedLM"),kzr.forEach(t),s_o=r(V4e," (SqueezeBERT model)"),V4e.forEach(t),l_o=i(S),ru=n(S,"LI",{});var z4e=s(ru);Uee=n(z4e,"STRONG",{});var Rzr=s(Uee);i_o=r(Rzr,"t5"),Rzr.forEach(t),d_o=r(z4e," \u2014 "),JP=n(z4e,"A",{href:!0});var Szr=s(JP);c_o=r(Szr,"T5ForConditionalGeneration"),Szr.forEach(t),f_o=r(z4e," (T5 model)"),z4e.forEach(t),m_o=i(S),tu=n(S,"LI",{});var W4e=s(tu);Jee=n(W4e,"STRONG",{});var Pzr=s(Jee);g_o=r(Pzr,"tapas"),Pzr.forEach(t),h_o=r(W4e," \u2014 "),YP=n(W4e,"A",{href:!0});var $zr=s(YP);p_o=r($zr,"TapasForMaskedLM"),$zr.forEach(t),__o=r(W4e," (TAPAS model)"),W4e.forEach(t),u_o=i(S),au=n(S,"LI",{});var Q4e=s(au);Yee=n(Q4e,"STRONG",{});var Izr=s(Yee);b_o=r(Izr,"transfo-xl"),Izr.forEach(t),v_o=r(Q4e," \u2014 "),KP=n(Q4e,"A",{href:!0});var Nzr=s(KP);T_o=r(Nzr,"TransfoXLLMHeadModel"),Nzr.forEach(t),F_o=r(Q4e," (Transformer-XL model)"),Q4e.forEach(t),C_o=i(S),nu=n(S,"LI",{});var H4e=s(nu);Kee=n(H4e,"STRONG",{});var Dzr=s(Kee);M_o=r(Dzr,"unispeech"),Dzr.forEach(t),E_o=r(H4e," \u2014 "),ZP=n(H4e,"A",{href:!0});var jzr=s(ZP);y_o=r(jzr,"UniSpeechForPreTraining"),jzr.forEach(t),w_o=r(H4e," (UniSpeech model)"),H4e.forEach(t),A_o=i(S),su=n(S,"LI",{});var U4e=s(su);Zee=n(U4e,"STRONG",{});var qzr=s(Zee);L_o=r(qzr,"unispeech-sat"),qzr.forEach(t),B_o=r(U4e," \u2014 "),e$=n(U4e,"A",{href:!0});var Gzr=s(e$);x_o=r(Gzr,"UniSpeechSatForPreTraining"),Gzr.forEach(t),k_o=r(U4e," (UniSpeechSat model)"),U4e.forEach(t),R_o=i(S),lu=n(S,"LI",{});var J4e=s(lu);eoe=n(J4e,"STRONG",{});var Ozr=s(eoe);S_o=r(Ozr,"visual_bert"),Ozr.forEach(t),P_o=r(J4e," \u2014 "),o$=n(J4e,"A",{href:!0});var Xzr=s(o$);$_o=r(Xzr,"VisualBertForPreTraining"),Xzr.forEach(t),I_o=r(J4e," (VisualBert model)"),J4e.forEach(t),N_o=i(S),iu=n(S,"LI",{});var Y4e=s(iu);ooe=n(Y4e,"STRONG",{});var Vzr=s(ooe);D_o=r(Vzr,"vit_mae"),Vzr.forEach(t),j_o=r(Y4e," \u2014 "),r$=n(Y4e,"A",{href:!0});var zzr=s(r$);q_o=r(zzr,"ViTMAEForPreTraining"),zzr.forEach(t),G_o=r(Y4e," (ViTMAE model)"),Y4e.forEach(t),O_o=i(S),du=n(S,"LI",{});var K4e=s(du);roe=n(K4e,"STRONG",{});var Wzr=s(roe);X_o=r(Wzr,"wav2vec2"),Wzr.forEach(t),V_o=r(K4e," \u2014 "),t$=n(K4e,"A",{href:!0});var Qzr=s(t$);z_o=r(Qzr,"Wav2Vec2ForPreTraining"),Qzr.forEach(t),W_o=r(K4e," (Wav2Vec2 model)"),K4e.forEach(t),Q_o=i(S),cu=n(S,"LI",{});var Z4e=s(cu);toe=n(Z4e,"STRONG",{});var Hzr=s(toe);H_o=r(Hzr,"xlm"),Hzr.forEach(t),U_o=r(Z4e," \u2014 "),a$=n(Z4e,"A",{href:!0});var Uzr=s(a$);J_o=r(Uzr,"XLMWithLMHeadModel"),Uzr.forEach(t),Y_o=r(Z4e," (XLM model)"),Z4e.forEach(t),K_o=i(S),fu=n(S,"LI",{});var eEe=s(fu);aoe=n(eEe,"STRONG",{});var Jzr=s(aoe);Z_o=r(Jzr,"xlm-roberta"),Jzr.forEach(t),euo=r(eEe," \u2014 "),n$=n(eEe,"A",{href:!0});var Yzr=s(n$);ouo=r(Yzr,"XLMRobertaForMaskedLM"),Yzr.forEach(t),ruo=r(eEe," (XLM-RoBERTa model)"),eEe.forEach(t),tuo=i(S),mu=n(S,"LI",{});var oEe=s(mu);noe=n(oEe,"STRONG",{});var Kzr=s(noe);auo=r(Kzr,"xlm-roberta-xl"),Kzr.forEach(t),nuo=r(oEe," \u2014 "),s$=n(oEe,"A",{href:!0});var Zzr=s(s$);suo=r(Zzr,"XLMRobertaXLForMaskedLM"),Zzr.forEach(t),luo=r(oEe," (XLM-RoBERTa-XL model)"),oEe.forEach(t),iuo=i(S),gu=n(S,"LI",{});var rEe=s(gu);soe=n(rEe,"STRONG",{});var eWr=s(soe);duo=r(eWr,"xlnet"),eWr.forEach(t),cuo=r(rEe," \u2014 "),l$=n(rEe,"A",{href:!0});var oWr=s(l$);fuo=r(oWr,"XLNetLMHeadModel"),oWr.forEach(t),muo=r(rEe," (XLNet model)"),rEe.forEach(t),S.forEach(t),guo=i(Gt),hu=n(Gt,"P",{});var tEe=s(hu);huo=r(tEe,"The model is set in evaluation mode by default using "),loe=n(tEe,"CODE",{});var rWr=s(loe);puo=r(rWr,"model.eval()"),rWr.forEach(t),_uo=r(tEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ioe=n(tEe,"CODE",{});var tWr=s(ioe);uuo=r(tWr,"model.train()"),tWr.forEach(t),tEe.forEach(t),buo=i(Gt),doe=n(Gt,"P",{});var aWr=s(doe);vuo=r(aWr,"Examples:"),aWr.forEach(t),Tuo=i(Gt),m(e3.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),Cke=i(c),rd=n(c,"H2",{class:!0});var kSe=s(rd);pu=n(kSe,"A",{id:!0,class:!0,href:!0});var nWr=s(pu);coe=n(nWr,"SPAN",{});var sWr=s(coe);m(o3.$$.fragment,sWr),sWr.forEach(t),nWr.forEach(t),Fuo=i(kSe),foe=n(kSe,"SPAN",{});var lWr=s(foe);Cuo=r(lWr,"AutoModelForCausalLM"),lWr.forEach(t),kSe.forEach(t),Mke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(r3.$$.fragment,Js),Muo=i(Js),td=n(Js,"P",{});var oW=s(td);Euo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),moe=n(oW,"CODE",{});var iWr=s(moe);yuo=r(iWr,"from_pretrained()"),iWr.forEach(t),wuo=r(oW,"class method or the "),goe=n(oW,"CODE",{});var dWr=s(goe);Auo=r(dWr,"from_config()"),dWr.forEach(t),Luo=r(oW,`class
method.`),oW.forEach(t),Buo=i(Js),t3=n(Js,"P",{});var RSe=s(t3);xuo=r(RSe,"This class cannot be instantiated directly using "),hoe=n(RSe,"CODE",{});var cWr=s(hoe);kuo=r(cWr,"__init__()"),cWr.forEach(t),Ruo=r(RSe," (throws an error)."),RSe.forEach(t),Suo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(a3.$$.fragment,Ys),Puo=i(Ys),poe=n(Ys,"P",{});var fWr=s(poe);$uo=r(fWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fWr.forEach(t),Iuo=i(Ys),ad=n(Ys,"P",{});var rW=s(ad);Nuo=r(rW,`Note:
Loading a model from its configuration file does `),_oe=n(rW,"STRONG",{});var mWr=s(_oe);Duo=r(mWr,"not"),mWr.forEach(t),juo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),uoe=n(rW,"CODE",{});var gWr=s(uoe);quo=r(gWr,"from_pretrained()"),gWr.forEach(t),Guo=r(rW,"to load the model weights."),rW.forEach(t),Ouo=i(Ys),boe=n(Ys,"P",{});var hWr=s(boe);Xuo=r(hWr,"Examples:"),hWr.forEach(t),Vuo=i(Ys),m(n3.$$.fragment,Ys),Ys.forEach(t),zuo=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(s3.$$.fragment,Ot),Wuo=i(Ot),voe=n(Ot,"P",{});var pWr=s(voe);Quo=r(pWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pWr.forEach(t),Huo=i(Ot),Wa=n(Ot,"P",{});var g4=s(Wa);Uuo=r(g4,"The model class to instantiate is selected based on the "),Toe=n(g4,"CODE",{});var _Wr=s(Toe);Juo=r(_Wr,"model_type"),_Wr.forEach(t),Yuo=r(g4,` property of the config object (either
passed as an argument or loaded from `),Foe=n(g4,"CODE",{});var uWr=s(Foe);Kuo=r(uWr,"pretrained_model_name_or_path"),uWr.forEach(t),Zuo=r(g4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Coe=n(g4,"CODE",{});var bWr=s(Coe);e1o=r(bWr,"pretrained_model_name_or_path"),bWr.forEach(t),o1o=r(g4,":"),g4.forEach(t),r1o=i(Ot),$=n(Ot,"UL",{});var N=s($);_u=n(N,"LI",{});var aEe=s(_u);Moe=n(aEe,"STRONG",{});var vWr=s(Moe);t1o=r(vWr,"bart"),vWr.forEach(t),a1o=r(aEe," \u2014 "),i$=n(aEe,"A",{href:!0});var TWr=s(i$);n1o=r(TWr,"BartForCausalLM"),TWr.forEach(t),s1o=r(aEe," (BART model)"),aEe.forEach(t),l1o=i(N),uu=n(N,"LI",{});var nEe=s(uu);Eoe=n(nEe,"STRONG",{});var FWr=s(Eoe);i1o=r(FWr,"bert"),FWr.forEach(t),d1o=r(nEe," \u2014 "),d$=n(nEe,"A",{href:!0});var CWr=s(d$);c1o=r(CWr,"BertLMHeadModel"),CWr.forEach(t),f1o=r(nEe," (BERT model)"),nEe.forEach(t),m1o=i(N),bu=n(N,"LI",{});var sEe=s(bu);yoe=n(sEe,"STRONG",{});var MWr=s(yoe);g1o=r(MWr,"bert-generation"),MWr.forEach(t),h1o=r(sEe," \u2014 "),c$=n(sEe,"A",{href:!0});var EWr=s(c$);p1o=r(EWr,"BertGenerationDecoder"),EWr.forEach(t),_1o=r(sEe," (Bert Generation model)"),sEe.forEach(t),u1o=i(N),vu=n(N,"LI",{});var lEe=s(vu);woe=n(lEe,"STRONG",{});var yWr=s(woe);b1o=r(yWr,"big_bird"),yWr.forEach(t),v1o=r(lEe," \u2014 "),f$=n(lEe,"A",{href:!0});var wWr=s(f$);T1o=r(wWr,"BigBirdForCausalLM"),wWr.forEach(t),F1o=r(lEe," (BigBird model)"),lEe.forEach(t),C1o=i(N),Tu=n(N,"LI",{});var iEe=s(Tu);Aoe=n(iEe,"STRONG",{});var AWr=s(Aoe);M1o=r(AWr,"bigbird_pegasus"),AWr.forEach(t),E1o=r(iEe," \u2014 "),m$=n(iEe,"A",{href:!0});var LWr=s(m$);y1o=r(LWr,"BigBirdPegasusForCausalLM"),LWr.forEach(t),w1o=r(iEe," (BigBirdPegasus model)"),iEe.forEach(t),A1o=i(N),Fu=n(N,"LI",{});var dEe=s(Fu);Loe=n(dEe,"STRONG",{});var BWr=s(Loe);L1o=r(BWr,"blenderbot"),BWr.forEach(t),B1o=r(dEe," \u2014 "),g$=n(dEe,"A",{href:!0});var xWr=s(g$);x1o=r(xWr,"BlenderbotForCausalLM"),xWr.forEach(t),k1o=r(dEe," (Blenderbot model)"),dEe.forEach(t),R1o=i(N),Cu=n(N,"LI",{});var cEe=s(Cu);Boe=n(cEe,"STRONG",{});var kWr=s(Boe);S1o=r(kWr,"blenderbot-small"),kWr.forEach(t),P1o=r(cEe," \u2014 "),h$=n(cEe,"A",{href:!0});var RWr=s(h$);$1o=r(RWr,"BlenderbotSmallForCausalLM"),RWr.forEach(t),I1o=r(cEe," (BlenderbotSmall model)"),cEe.forEach(t),N1o=i(N),Mu=n(N,"LI",{});var fEe=s(Mu);xoe=n(fEe,"STRONG",{});var SWr=s(xoe);D1o=r(SWr,"camembert"),SWr.forEach(t),j1o=r(fEe," \u2014 "),p$=n(fEe,"A",{href:!0});var PWr=s(p$);q1o=r(PWr,"CamembertForCausalLM"),PWr.forEach(t),G1o=r(fEe," (CamemBERT model)"),fEe.forEach(t),O1o=i(N),Eu=n(N,"LI",{});var mEe=s(Eu);koe=n(mEe,"STRONG",{});var $Wr=s(koe);X1o=r($Wr,"ctrl"),$Wr.forEach(t),V1o=r(mEe," \u2014 "),_$=n(mEe,"A",{href:!0});var IWr=s(_$);z1o=r(IWr,"CTRLLMHeadModel"),IWr.forEach(t),W1o=r(mEe," (CTRL model)"),mEe.forEach(t),Q1o=i(N),yu=n(N,"LI",{});var gEe=s(yu);Roe=n(gEe,"STRONG",{});var NWr=s(Roe);H1o=r(NWr,"data2vec-text"),NWr.forEach(t),U1o=r(gEe," \u2014 "),u$=n(gEe,"A",{href:!0});var DWr=s(u$);J1o=r(DWr,"Data2VecTextForCausalLM"),DWr.forEach(t),Y1o=r(gEe," (Data2VecText model)"),gEe.forEach(t),K1o=i(N),wu=n(N,"LI",{});var hEe=s(wu);Soe=n(hEe,"STRONG",{});var jWr=s(Soe);Z1o=r(jWr,"electra"),jWr.forEach(t),ebo=r(hEe," \u2014 "),b$=n(hEe,"A",{href:!0});var qWr=s(b$);obo=r(qWr,"ElectraForCausalLM"),qWr.forEach(t),rbo=r(hEe," (ELECTRA model)"),hEe.forEach(t),tbo=i(N),Au=n(N,"LI",{});var pEe=s(Au);Poe=n(pEe,"STRONG",{});var GWr=s(Poe);abo=r(GWr,"gpt2"),GWr.forEach(t),nbo=r(pEe," \u2014 "),v$=n(pEe,"A",{href:!0});var OWr=s(v$);sbo=r(OWr,"GPT2LMHeadModel"),OWr.forEach(t),lbo=r(pEe," (OpenAI GPT-2 model)"),pEe.forEach(t),ibo=i(N),Lu=n(N,"LI",{});var _Ee=s(Lu);$oe=n(_Ee,"STRONG",{});var XWr=s($oe);dbo=r(XWr,"gpt_neo"),XWr.forEach(t),cbo=r(_Ee," \u2014 "),T$=n(_Ee,"A",{href:!0});var VWr=s(T$);fbo=r(VWr,"GPTNeoForCausalLM"),VWr.forEach(t),mbo=r(_Ee," (GPT Neo model)"),_Ee.forEach(t),gbo=i(N),Bu=n(N,"LI",{});var uEe=s(Bu);Ioe=n(uEe,"STRONG",{});var zWr=s(Ioe);hbo=r(zWr,"gptj"),zWr.forEach(t),pbo=r(uEe," \u2014 "),F$=n(uEe,"A",{href:!0});var WWr=s(F$);_bo=r(WWr,"GPTJForCausalLM"),WWr.forEach(t),ubo=r(uEe," (GPT-J model)"),uEe.forEach(t),bbo=i(N),xu=n(N,"LI",{});var bEe=s(xu);Noe=n(bEe,"STRONG",{});var QWr=s(Noe);vbo=r(QWr,"marian"),QWr.forEach(t),Tbo=r(bEe," \u2014 "),C$=n(bEe,"A",{href:!0});var HWr=s(C$);Fbo=r(HWr,"MarianForCausalLM"),HWr.forEach(t),Cbo=r(bEe," (Marian model)"),bEe.forEach(t),Mbo=i(N),ku=n(N,"LI",{});var vEe=s(ku);Doe=n(vEe,"STRONG",{});var UWr=s(Doe);Ebo=r(UWr,"mbart"),UWr.forEach(t),ybo=r(vEe," \u2014 "),M$=n(vEe,"A",{href:!0});var JWr=s(M$);wbo=r(JWr,"MBartForCausalLM"),JWr.forEach(t),Abo=r(vEe," (mBART model)"),vEe.forEach(t),Lbo=i(N),Ru=n(N,"LI",{});var TEe=s(Ru);joe=n(TEe,"STRONG",{});var YWr=s(joe);Bbo=r(YWr,"megatron-bert"),YWr.forEach(t),xbo=r(TEe," \u2014 "),E$=n(TEe,"A",{href:!0});var KWr=s(E$);kbo=r(KWr,"MegatronBertForCausalLM"),KWr.forEach(t),Rbo=r(TEe," (MegatronBert model)"),TEe.forEach(t),Sbo=i(N),Su=n(N,"LI",{});var FEe=s(Su);qoe=n(FEe,"STRONG",{});var ZWr=s(qoe);Pbo=r(ZWr,"openai-gpt"),ZWr.forEach(t),$bo=r(FEe," \u2014 "),y$=n(FEe,"A",{href:!0});var eQr=s(y$);Ibo=r(eQr,"OpenAIGPTLMHeadModel"),eQr.forEach(t),Nbo=r(FEe," (OpenAI GPT model)"),FEe.forEach(t),Dbo=i(N),Pu=n(N,"LI",{});var CEe=s(Pu);Goe=n(CEe,"STRONG",{});var oQr=s(Goe);jbo=r(oQr,"pegasus"),oQr.forEach(t),qbo=r(CEe," \u2014 "),w$=n(CEe,"A",{href:!0});var rQr=s(w$);Gbo=r(rQr,"PegasusForCausalLM"),rQr.forEach(t),Obo=r(CEe," (Pegasus model)"),CEe.forEach(t),Xbo=i(N),$u=n(N,"LI",{});var MEe=s($u);Ooe=n(MEe,"STRONG",{});var tQr=s(Ooe);Vbo=r(tQr,"plbart"),tQr.forEach(t),zbo=r(MEe," \u2014 "),A$=n(MEe,"A",{href:!0});var aQr=s(A$);Wbo=r(aQr,"PLBartForCausalLM"),aQr.forEach(t),Qbo=r(MEe," (PLBart model)"),MEe.forEach(t),Hbo=i(N),Iu=n(N,"LI",{});var EEe=s(Iu);Xoe=n(EEe,"STRONG",{});var nQr=s(Xoe);Ubo=r(nQr,"prophetnet"),nQr.forEach(t),Jbo=r(EEe," \u2014 "),L$=n(EEe,"A",{href:!0});var sQr=s(L$);Ybo=r(sQr,"ProphetNetForCausalLM"),sQr.forEach(t),Kbo=r(EEe," (ProphetNet model)"),EEe.forEach(t),Zbo=i(N),Nu=n(N,"LI",{});var yEe=s(Nu);Voe=n(yEe,"STRONG",{});var lQr=s(Voe);e5o=r(lQr,"qdqbert"),lQr.forEach(t),o5o=r(yEe," \u2014 "),B$=n(yEe,"A",{href:!0});var iQr=s(B$);r5o=r(iQr,"QDQBertLMHeadModel"),iQr.forEach(t),t5o=r(yEe," (QDQBert model)"),yEe.forEach(t),a5o=i(N),Du=n(N,"LI",{});var wEe=s(Du);zoe=n(wEe,"STRONG",{});var dQr=s(zoe);n5o=r(dQr,"reformer"),dQr.forEach(t),s5o=r(wEe," \u2014 "),x$=n(wEe,"A",{href:!0});var cQr=s(x$);l5o=r(cQr,"ReformerModelWithLMHead"),cQr.forEach(t),i5o=r(wEe," (Reformer model)"),wEe.forEach(t),d5o=i(N),ju=n(N,"LI",{});var AEe=s(ju);Woe=n(AEe,"STRONG",{});var fQr=s(Woe);c5o=r(fQr,"rembert"),fQr.forEach(t),f5o=r(AEe," \u2014 "),k$=n(AEe,"A",{href:!0});var mQr=s(k$);m5o=r(mQr,"RemBertForCausalLM"),mQr.forEach(t),g5o=r(AEe," (RemBERT model)"),AEe.forEach(t),h5o=i(N),qu=n(N,"LI",{});var LEe=s(qu);Qoe=n(LEe,"STRONG",{});var gQr=s(Qoe);p5o=r(gQr,"roberta"),gQr.forEach(t),_5o=r(LEe," \u2014 "),R$=n(LEe,"A",{href:!0});var hQr=s(R$);u5o=r(hQr,"RobertaForCausalLM"),hQr.forEach(t),b5o=r(LEe," (RoBERTa model)"),LEe.forEach(t),v5o=i(N),Gu=n(N,"LI",{});var BEe=s(Gu);Hoe=n(BEe,"STRONG",{});var pQr=s(Hoe);T5o=r(pQr,"roformer"),pQr.forEach(t),F5o=r(BEe," \u2014 "),S$=n(BEe,"A",{href:!0});var _Qr=s(S$);C5o=r(_Qr,"RoFormerForCausalLM"),_Qr.forEach(t),M5o=r(BEe," (RoFormer model)"),BEe.forEach(t),E5o=i(N),Ou=n(N,"LI",{});var xEe=s(Ou);Uoe=n(xEe,"STRONG",{});var uQr=s(Uoe);y5o=r(uQr,"speech_to_text_2"),uQr.forEach(t),w5o=r(xEe," \u2014 "),P$=n(xEe,"A",{href:!0});var bQr=s(P$);A5o=r(bQr,"Speech2Text2ForCausalLM"),bQr.forEach(t),L5o=r(xEe," (Speech2Text2 model)"),xEe.forEach(t),B5o=i(N),Xu=n(N,"LI",{});var kEe=s(Xu);Joe=n(kEe,"STRONG",{});var vQr=s(Joe);x5o=r(vQr,"transfo-xl"),vQr.forEach(t),k5o=r(kEe," \u2014 "),$$=n(kEe,"A",{href:!0});var TQr=s($$);R5o=r(TQr,"TransfoXLLMHeadModel"),TQr.forEach(t),S5o=r(kEe," (Transformer-XL model)"),kEe.forEach(t),P5o=i(N),Vu=n(N,"LI",{});var REe=s(Vu);Yoe=n(REe,"STRONG",{});var FQr=s(Yoe);$5o=r(FQr,"trocr"),FQr.forEach(t),I5o=r(REe," \u2014 "),I$=n(REe,"A",{href:!0});var CQr=s(I$);N5o=r(CQr,"TrOCRForCausalLM"),CQr.forEach(t),D5o=r(REe," (TrOCR model)"),REe.forEach(t),j5o=i(N),zu=n(N,"LI",{});var SEe=s(zu);Koe=n(SEe,"STRONG",{});var MQr=s(Koe);q5o=r(MQr,"xglm"),MQr.forEach(t),G5o=r(SEe," \u2014 "),N$=n(SEe,"A",{href:!0});var EQr=s(N$);O5o=r(EQr,"XGLMForCausalLM"),EQr.forEach(t),X5o=r(SEe," (XGLM model)"),SEe.forEach(t),V5o=i(N),Wu=n(N,"LI",{});var PEe=s(Wu);Zoe=n(PEe,"STRONG",{});var yQr=s(Zoe);z5o=r(yQr,"xlm"),yQr.forEach(t),W5o=r(PEe," \u2014 "),D$=n(PEe,"A",{href:!0});var wQr=s(D$);Q5o=r(wQr,"XLMWithLMHeadModel"),wQr.forEach(t),H5o=r(PEe," (XLM model)"),PEe.forEach(t),U5o=i(N),Qu=n(N,"LI",{});var $Ee=s(Qu);ere=n($Ee,"STRONG",{});var AQr=s(ere);J5o=r(AQr,"xlm-prophetnet"),AQr.forEach(t),Y5o=r($Ee," \u2014 "),j$=n($Ee,"A",{href:!0});var LQr=s(j$);K5o=r(LQr,"XLMProphetNetForCausalLM"),LQr.forEach(t),Z5o=r($Ee," (XLMProphetNet model)"),$Ee.forEach(t),e2o=i(N),Hu=n(N,"LI",{});var IEe=s(Hu);ore=n(IEe,"STRONG",{});var BQr=s(ore);o2o=r(BQr,"xlm-roberta"),BQr.forEach(t),r2o=r(IEe," \u2014 "),q$=n(IEe,"A",{href:!0});var xQr=s(q$);t2o=r(xQr,"XLMRobertaForCausalLM"),xQr.forEach(t),a2o=r(IEe," (XLM-RoBERTa model)"),IEe.forEach(t),n2o=i(N),Uu=n(N,"LI",{});var NEe=s(Uu);rre=n(NEe,"STRONG",{});var kQr=s(rre);s2o=r(kQr,"xlm-roberta-xl"),kQr.forEach(t),l2o=r(NEe," \u2014 "),G$=n(NEe,"A",{href:!0});var RQr=s(G$);i2o=r(RQr,"XLMRobertaXLForCausalLM"),RQr.forEach(t),d2o=r(NEe," (XLM-RoBERTa-XL model)"),NEe.forEach(t),c2o=i(N),Ju=n(N,"LI",{});var DEe=s(Ju);tre=n(DEe,"STRONG",{});var SQr=s(tre);f2o=r(SQr,"xlnet"),SQr.forEach(t),m2o=r(DEe," \u2014 "),O$=n(DEe,"A",{href:!0});var PQr=s(O$);g2o=r(PQr,"XLNetLMHeadModel"),PQr.forEach(t),h2o=r(DEe," (XLNet model)"),DEe.forEach(t),N.forEach(t),p2o=i(Ot),Yu=n(Ot,"P",{});var jEe=s(Yu);_2o=r(jEe,"The model is set in evaluation mode by default using "),are=n(jEe,"CODE",{});var $Qr=s(are);u2o=r($Qr,"model.eval()"),$Qr.forEach(t),b2o=r(jEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nre=n(jEe,"CODE",{});var IQr=s(nre);v2o=r(IQr,"model.train()"),IQr.forEach(t),jEe.forEach(t),T2o=i(Ot),sre=n(Ot,"P",{});var NQr=s(sre);F2o=r(NQr,"Examples:"),NQr.forEach(t),C2o=i(Ot),m(l3.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),Eke=i(c),nd=n(c,"H2",{class:!0});var SSe=s(nd);Ku=n(SSe,"A",{id:!0,class:!0,href:!0});var DQr=s(Ku);lre=n(DQr,"SPAN",{});var jQr=s(lre);m(i3.$$.fragment,jQr),jQr.forEach(t),DQr.forEach(t),M2o=i(SSe),ire=n(SSe,"SPAN",{});var qQr=s(ire);E2o=r(qQr,"AutoModelForMaskedLM"),qQr.forEach(t),SSe.forEach(t),yke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(d3.$$.fragment,Ks),y2o=i(Ks),sd=n(Ks,"P",{});var tW=s(sd);w2o=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dre=n(tW,"CODE",{});var GQr=s(dre);A2o=r(GQr,"from_pretrained()"),GQr.forEach(t),L2o=r(tW,"class method or the "),cre=n(tW,"CODE",{});var OQr=s(cre);B2o=r(OQr,"from_config()"),OQr.forEach(t),x2o=r(tW,`class
method.`),tW.forEach(t),k2o=i(Ks),c3=n(Ks,"P",{});var PSe=s(c3);R2o=r(PSe,"This class cannot be instantiated directly using "),fre=n(PSe,"CODE",{});var XQr=s(fre);S2o=r(XQr,"__init__()"),XQr.forEach(t),P2o=r(PSe," (throws an error)."),PSe.forEach(t),$2o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(f3.$$.fragment,Zs),I2o=i(Zs),mre=n(Zs,"P",{});var VQr=s(mre);N2o=r(VQr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VQr.forEach(t),D2o=i(Zs),ld=n(Zs,"P",{});var aW=s(ld);j2o=r(aW,`Note:
Loading a model from its configuration file does `),gre=n(aW,"STRONG",{});var zQr=s(gre);q2o=r(zQr,"not"),zQr.forEach(t),G2o=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hre=n(aW,"CODE",{});var WQr=s(hre);O2o=r(WQr,"from_pretrained()"),WQr.forEach(t),X2o=r(aW,"to load the model weights."),aW.forEach(t),V2o=i(Zs),pre=n(Zs,"P",{});var QQr=s(pre);z2o=r(QQr,"Examples:"),QQr.forEach(t),W2o=i(Zs),m(m3.$$.fragment,Zs),Zs.forEach(t),Q2o=i(Ks),qe=n(Ks,"DIV",{class:!0});var Xt=s(qe);m(g3.$$.fragment,Xt),H2o=i(Xt),_re=n(Xt,"P",{});var HQr=s(_re);U2o=r(HQr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HQr.forEach(t),J2o=i(Xt),Qa=n(Xt,"P",{});var h4=s(Qa);Y2o=r(h4,"The model class to instantiate is selected based on the "),ure=n(h4,"CODE",{});var UQr=s(ure);K2o=r(UQr,"model_type"),UQr.forEach(t),Z2o=r(h4,` property of the config object (either
passed as an argument or loaded from `),bre=n(h4,"CODE",{});var JQr=s(bre);evo=r(JQr,"pretrained_model_name_or_path"),JQr.forEach(t),ovo=r(h4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vre=n(h4,"CODE",{});var YQr=s(vre);rvo=r(YQr,"pretrained_model_name_or_path"),YQr.forEach(t),tvo=r(h4,":"),h4.forEach(t),avo=i(Xt),I=n(Xt,"UL",{});var D=s(I);Zu=n(D,"LI",{});var qEe=s(Zu);Tre=n(qEe,"STRONG",{});var KQr=s(Tre);nvo=r(KQr,"albert"),KQr.forEach(t),svo=r(qEe," \u2014 "),X$=n(qEe,"A",{href:!0});var ZQr=s(X$);lvo=r(ZQr,"AlbertForMaskedLM"),ZQr.forEach(t),ivo=r(qEe," (ALBERT model)"),qEe.forEach(t),dvo=i(D),e1=n(D,"LI",{});var GEe=s(e1);Fre=n(GEe,"STRONG",{});var eHr=s(Fre);cvo=r(eHr,"bart"),eHr.forEach(t),fvo=r(GEe," \u2014 "),V$=n(GEe,"A",{href:!0});var oHr=s(V$);mvo=r(oHr,"BartForConditionalGeneration"),oHr.forEach(t),gvo=r(GEe," (BART model)"),GEe.forEach(t),hvo=i(D),o1=n(D,"LI",{});var OEe=s(o1);Cre=n(OEe,"STRONG",{});var rHr=s(Cre);pvo=r(rHr,"bert"),rHr.forEach(t),_vo=r(OEe," \u2014 "),z$=n(OEe,"A",{href:!0});var tHr=s(z$);uvo=r(tHr,"BertForMaskedLM"),tHr.forEach(t),bvo=r(OEe," (BERT model)"),OEe.forEach(t),vvo=i(D),r1=n(D,"LI",{});var XEe=s(r1);Mre=n(XEe,"STRONG",{});var aHr=s(Mre);Tvo=r(aHr,"big_bird"),aHr.forEach(t),Fvo=r(XEe," \u2014 "),W$=n(XEe,"A",{href:!0});var nHr=s(W$);Cvo=r(nHr,"BigBirdForMaskedLM"),nHr.forEach(t),Mvo=r(XEe," (BigBird model)"),XEe.forEach(t),Evo=i(D),t1=n(D,"LI",{});var VEe=s(t1);Ere=n(VEe,"STRONG",{});var sHr=s(Ere);yvo=r(sHr,"camembert"),sHr.forEach(t),wvo=r(VEe," \u2014 "),Q$=n(VEe,"A",{href:!0});var lHr=s(Q$);Avo=r(lHr,"CamembertForMaskedLM"),lHr.forEach(t),Lvo=r(VEe," (CamemBERT model)"),VEe.forEach(t),Bvo=i(D),a1=n(D,"LI",{});var zEe=s(a1);yre=n(zEe,"STRONG",{});var iHr=s(yre);xvo=r(iHr,"convbert"),iHr.forEach(t),kvo=r(zEe," \u2014 "),H$=n(zEe,"A",{href:!0});var dHr=s(H$);Rvo=r(dHr,"ConvBertForMaskedLM"),dHr.forEach(t),Svo=r(zEe," (ConvBERT model)"),zEe.forEach(t),Pvo=i(D),n1=n(D,"LI",{});var WEe=s(n1);wre=n(WEe,"STRONG",{});var cHr=s(wre);$vo=r(cHr,"data2vec-text"),cHr.forEach(t),Ivo=r(WEe," \u2014 "),U$=n(WEe,"A",{href:!0});var fHr=s(U$);Nvo=r(fHr,"Data2VecTextForMaskedLM"),fHr.forEach(t),Dvo=r(WEe," (Data2VecText model)"),WEe.forEach(t),jvo=i(D),s1=n(D,"LI",{});var QEe=s(s1);Are=n(QEe,"STRONG",{});var mHr=s(Are);qvo=r(mHr,"deberta"),mHr.forEach(t),Gvo=r(QEe," \u2014 "),J$=n(QEe,"A",{href:!0});var gHr=s(J$);Ovo=r(gHr,"DebertaForMaskedLM"),gHr.forEach(t),Xvo=r(QEe," (DeBERTa model)"),QEe.forEach(t),Vvo=i(D),l1=n(D,"LI",{});var HEe=s(l1);Lre=n(HEe,"STRONG",{});var hHr=s(Lre);zvo=r(hHr,"deberta-v2"),hHr.forEach(t),Wvo=r(HEe," \u2014 "),Y$=n(HEe,"A",{href:!0});var pHr=s(Y$);Qvo=r(pHr,"DebertaV2ForMaskedLM"),pHr.forEach(t),Hvo=r(HEe," (DeBERTa-v2 model)"),HEe.forEach(t),Uvo=i(D),i1=n(D,"LI",{});var UEe=s(i1);Bre=n(UEe,"STRONG",{});var _Hr=s(Bre);Jvo=r(_Hr,"distilbert"),_Hr.forEach(t),Yvo=r(UEe," \u2014 "),K$=n(UEe,"A",{href:!0});var uHr=s(K$);Kvo=r(uHr,"DistilBertForMaskedLM"),uHr.forEach(t),Zvo=r(UEe," (DistilBERT model)"),UEe.forEach(t),eTo=i(D),d1=n(D,"LI",{});var JEe=s(d1);xre=n(JEe,"STRONG",{});var bHr=s(xre);oTo=r(bHr,"electra"),bHr.forEach(t),rTo=r(JEe," \u2014 "),Z$=n(JEe,"A",{href:!0});var vHr=s(Z$);tTo=r(vHr,"ElectraForMaskedLM"),vHr.forEach(t),aTo=r(JEe," (ELECTRA model)"),JEe.forEach(t),nTo=i(D),c1=n(D,"LI",{});var YEe=s(c1);kre=n(YEe,"STRONG",{});var THr=s(kre);sTo=r(THr,"flaubert"),THr.forEach(t),lTo=r(YEe," \u2014 "),eI=n(YEe,"A",{href:!0});var FHr=s(eI);iTo=r(FHr,"FlaubertWithLMHeadModel"),FHr.forEach(t),dTo=r(YEe," (FlauBERT model)"),YEe.forEach(t),cTo=i(D),f1=n(D,"LI",{});var KEe=s(f1);Rre=n(KEe,"STRONG",{});var CHr=s(Rre);fTo=r(CHr,"fnet"),CHr.forEach(t),mTo=r(KEe," \u2014 "),oI=n(KEe,"A",{href:!0});var MHr=s(oI);gTo=r(MHr,"FNetForMaskedLM"),MHr.forEach(t),hTo=r(KEe," (FNet model)"),KEe.forEach(t),pTo=i(D),m1=n(D,"LI",{});var ZEe=s(m1);Sre=n(ZEe,"STRONG",{});var EHr=s(Sre);_To=r(EHr,"funnel"),EHr.forEach(t),uTo=r(ZEe," \u2014 "),rI=n(ZEe,"A",{href:!0});var yHr=s(rI);bTo=r(yHr,"FunnelForMaskedLM"),yHr.forEach(t),vTo=r(ZEe," (Funnel Transformer model)"),ZEe.forEach(t),TTo=i(D),g1=n(D,"LI",{});var e3e=s(g1);Pre=n(e3e,"STRONG",{});var wHr=s(Pre);FTo=r(wHr,"ibert"),wHr.forEach(t),CTo=r(e3e," \u2014 "),tI=n(e3e,"A",{href:!0});var AHr=s(tI);MTo=r(AHr,"IBertForMaskedLM"),AHr.forEach(t),ETo=r(e3e," (I-BERT model)"),e3e.forEach(t),yTo=i(D),h1=n(D,"LI",{});var o3e=s(h1);$re=n(o3e,"STRONG",{});var LHr=s($re);wTo=r(LHr,"layoutlm"),LHr.forEach(t),ATo=r(o3e," \u2014 "),aI=n(o3e,"A",{href:!0});var BHr=s(aI);LTo=r(BHr,"LayoutLMForMaskedLM"),BHr.forEach(t),BTo=r(o3e," (LayoutLM model)"),o3e.forEach(t),xTo=i(D),p1=n(D,"LI",{});var r3e=s(p1);Ire=n(r3e,"STRONG",{});var xHr=s(Ire);kTo=r(xHr,"longformer"),xHr.forEach(t),RTo=r(r3e," \u2014 "),nI=n(r3e,"A",{href:!0});var kHr=s(nI);STo=r(kHr,"LongformerForMaskedLM"),kHr.forEach(t),PTo=r(r3e," (Longformer model)"),r3e.forEach(t),$To=i(D),_1=n(D,"LI",{});var t3e=s(_1);Nre=n(t3e,"STRONG",{});var RHr=s(Nre);ITo=r(RHr,"mbart"),RHr.forEach(t),NTo=r(t3e," \u2014 "),sI=n(t3e,"A",{href:!0});var SHr=s(sI);DTo=r(SHr,"MBartForConditionalGeneration"),SHr.forEach(t),jTo=r(t3e," (mBART model)"),t3e.forEach(t),qTo=i(D),u1=n(D,"LI",{});var a3e=s(u1);Dre=n(a3e,"STRONG",{});var PHr=s(Dre);GTo=r(PHr,"megatron-bert"),PHr.forEach(t),OTo=r(a3e," \u2014 "),lI=n(a3e,"A",{href:!0});var $Hr=s(lI);XTo=r($Hr,"MegatronBertForMaskedLM"),$Hr.forEach(t),VTo=r(a3e," (MegatronBert model)"),a3e.forEach(t),zTo=i(D),b1=n(D,"LI",{});var n3e=s(b1);jre=n(n3e,"STRONG",{});var IHr=s(jre);WTo=r(IHr,"mobilebert"),IHr.forEach(t),QTo=r(n3e," \u2014 "),iI=n(n3e,"A",{href:!0});var NHr=s(iI);HTo=r(NHr,"MobileBertForMaskedLM"),NHr.forEach(t),UTo=r(n3e," (MobileBERT model)"),n3e.forEach(t),JTo=i(D),v1=n(D,"LI",{});var s3e=s(v1);qre=n(s3e,"STRONG",{});var DHr=s(qre);YTo=r(DHr,"mpnet"),DHr.forEach(t),KTo=r(s3e," \u2014 "),dI=n(s3e,"A",{href:!0});var jHr=s(dI);ZTo=r(jHr,"MPNetForMaskedLM"),jHr.forEach(t),e7o=r(s3e," (MPNet model)"),s3e.forEach(t),o7o=i(D),T1=n(D,"LI",{});var l3e=s(T1);Gre=n(l3e,"STRONG",{});var qHr=s(Gre);r7o=r(qHr,"nystromformer"),qHr.forEach(t),t7o=r(l3e," \u2014 "),cI=n(l3e,"A",{href:!0});var GHr=s(cI);a7o=r(GHr,"NystromformerForMaskedLM"),GHr.forEach(t),n7o=r(l3e," (Nystromformer model)"),l3e.forEach(t),s7o=i(D),F1=n(D,"LI",{});var i3e=s(F1);Ore=n(i3e,"STRONG",{});var OHr=s(Ore);l7o=r(OHr,"perceiver"),OHr.forEach(t),i7o=r(i3e," \u2014 "),fI=n(i3e,"A",{href:!0});var XHr=s(fI);d7o=r(XHr,"PerceiverForMaskedLM"),XHr.forEach(t),c7o=r(i3e," (Perceiver model)"),i3e.forEach(t),f7o=i(D),C1=n(D,"LI",{});var d3e=s(C1);Xre=n(d3e,"STRONG",{});var VHr=s(Xre);m7o=r(VHr,"qdqbert"),VHr.forEach(t),g7o=r(d3e," \u2014 "),mI=n(d3e,"A",{href:!0});var zHr=s(mI);h7o=r(zHr,"QDQBertForMaskedLM"),zHr.forEach(t),p7o=r(d3e," (QDQBert model)"),d3e.forEach(t),_7o=i(D),M1=n(D,"LI",{});var c3e=s(M1);Vre=n(c3e,"STRONG",{});var WHr=s(Vre);u7o=r(WHr,"reformer"),WHr.forEach(t),b7o=r(c3e," \u2014 "),gI=n(c3e,"A",{href:!0});var QHr=s(gI);v7o=r(QHr,"ReformerForMaskedLM"),QHr.forEach(t),T7o=r(c3e," (Reformer model)"),c3e.forEach(t),F7o=i(D),E1=n(D,"LI",{});var f3e=s(E1);zre=n(f3e,"STRONG",{});var HHr=s(zre);C7o=r(HHr,"rembert"),HHr.forEach(t),M7o=r(f3e," \u2014 "),hI=n(f3e,"A",{href:!0});var UHr=s(hI);E7o=r(UHr,"RemBertForMaskedLM"),UHr.forEach(t),y7o=r(f3e," (RemBERT model)"),f3e.forEach(t),w7o=i(D),y1=n(D,"LI",{});var m3e=s(y1);Wre=n(m3e,"STRONG",{});var JHr=s(Wre);A7o=r(JHr,"roberta"),JHr.forEach(t),L7o=r(m3e," \u2014 "),pI=n(m3e,"A",{href:!0});var YHr=s(pI);B7o=r(YHr,"RobertaForMaskedLM"),YHr.forEach(t),x7o=r(m3e," (RoBERTa model)"),m3e.forEach(t),k7o=i(D),w1=n(D,"LI",{});var g3e=s(w1);Qre=n(g3e,"STRONG",{});var KHr=s(Qre);R7o=r(KHr,"roformer"),KHr.forEach(t),S7o=r(g3e," \u2014 "),_I=n(g3e,"A",{href:!0});var ZHr=s(_I);P7o=r(ZHr,"RoFormerForMaskedLM"),ZHr.forEach(t),$7o=r(g3e," (RoFormer model)"),g3e.forEach(t),I7o=i(D),A1=n(D,"LI",{});var h3e=s(A1);Hre=n(h3e,"STRONG",{});var eUr=s(Hre);N7o=r(eUr,"squeezebert"),eUr.forEach(t),D7o=r(h3e," \u2014 "),uI=n(h3e,"A",{href:!0});var oUr=s(uI);j7o=r(oUr,"SqueezeBertForMaskedLM"),oUr.forEach(t),q7o=r(h3e," (SqueezeBERT model)"),h3e.forEach(t),G7o=i(D),L1=n(D,"LI",{});var p3e=s(L1);Ure=n(p3e,"STRONG",{});var rUr=s(Ure);O7o=r(rUr,"tapas"),rUr.forEach(t),X7o=r(p3e," \u2014 "),bI=n(p3e,"A",{href:!0});var tUr=s(bI);V7o=r(tUr,"TapasForMaskedLM"),tUr.forEach(t),z7o=r(p3e," (TAPAS model)"),p3e.forEach(t),W7o=i(D),B1=n(D,"LI",{});var _3e=s(B1);Jre=n(_3e,"STRONG",{});var aUr=s(Jre);Q7o=r(aUr,"wav2vec2"),aUr.forEach(t),H7o=r(_3e," \u2014 "),Yre=n(_3e,"CODE",{});var nUr=s(Yre);U7o=r(nUr,"Wav2Vec2ForMaskedLM"),nUr.forEach(t),J7o=r(_3e,"(Wav2Vec2 model)"),_3e.forEach(t),Y7o=i(D),x1=n(D,"LI",{});var u3e=s(x1);Kre=n(u3e,"STRONG",{});var sUr=s(Kre);K7o=r(sUr,"xlm"),sUr.forEach(t),Z7o=r(u3e," \u2014 "),vI=n(u3e,"A",{href:!0});var lUr=s(vI);e8o=r(lUr,"XLMWithLMHeadModel"),lUr.forEach(t),o8o=r(u3e," (XLM model)"),u3e.forEach(t),r8o=i(D),k1=n(D,"LI",{});var b3e=s(k1);Zre=n(b3e,"STRONG",{});var iUr=s(Zre);t8o=r(iUr,"xlm-roberta"),iUr.forEach(t),a8o=r(b3e," \u2014 "),TI=n(b3e,"A",{href:!0});var dUr=s(TI);n8o=r(dUr,"XLMRobertaForMaskedLM"),dUr.forEach(t),s8o=r(b3e," (XLM-RoBERTa model)"),b3e.forEach(t),l8o=i(D),R1=n(D,"LI",{});var v3e=s(R1);ete=n(v3e,"STRONG",{});var cUr=s(ete);i8o=r(cUr,"xlm-roberta-xl"),cUr.forEach(t),d8o=r(v3e," \u2014 "),FI=n(v3e,"A",{href:!0});var fUr=s(FI);c8o=r(fUr,"XLMRobertaXLForMaskedLM"),fUr.forEach(t),f8o=r(v3e," (XLM-RoBERTa-XL model)"),v3e.forEach(t),m8o=i(D),S1=n(D,"LI",{});var T3e=s(S1);ote=n(T3e,"STRONG",{});var mUr=s(ote);g8o=r(mUr,"yoso"),mUr.forEach(t),h8o=r(T3e," \u2014 "),CI=n(T3e,"A",{href:!0});var gUr=s(CI);p8o=r(gUr,"YosoForMaskedLM"),gUr.forEach(t),_8o=r(T3e," (YOSO model)"),T3e.forEach(t),D.forEach(t),u8o=i(Xt),P1=n(Xt,"P",{});var F3e=s(P1);b8o=r(F3e,"The model is set in evaluation mode by default using "),rte=n(F3e,"CODE",{});var hUr=s(rte);v8o=r(hUr,"model.eval()"),hUr.forEach(t),T8o=r(F3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tte=n(F3e,"CODE",{});var pUr=s(tte);F8o=r(pUr,"model.train()"),pUr.forEach(t),F3e.forEach(t),C8o=i(Xt),ate=n(Xt,"P",{});var _Ur=s(ate);M8o=r(_Ur,"Examples:"),_Ur.forEach(t),E8o=i(Xt),m(h3.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),wke=i(c),id=n(c,"H2",{class:!0});var $Se=s(id);$1=n($Se,"A",{id:!0,class:!0,href:!0});var uUr=s($1);nte=n(uUr,"SPAN",{});var bUr=s(nte);m(p3.$$.fragment,bUr),bUr.forEach(t),uUr.forEach(t),y8o=i($Se),ste=n($Se,"SPAN",{});var vUr=s(ste);w8o=r(vUr,"AutoModelForSeq2SeqLM"),vUr.forEach(t),$Se.forEach(t),Ake=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(_3.$$.fragment,el),A8o=i(el),dd=n(el,"P",{});var nW=s(dd);L8o=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lte=n(nW,"CODE",{});var TUr=s(lte);B8o=r(TUr,"from_pretrained()"),TUr.forEach(t),x8o=r(nW,"class method or the "),ite=n(nW,"CODE",{});var FUr=s(ite);k8o=r(FUr,"from_config()"),FUr.forEach(t),R8o=r(nW,`class
method.`),nW.forEach(t),S8o=i(el),u3=n(el,"P",{});var ISe=s(u3);P8o=r(ISe,"This class cannot be instantiated directly using "),dte=n(ISe,"CODE",{});var CUr=s(dte);$8o=r(CUr,"__init__()"),CUr.forEach(t),I8o=r(ISe," (throws an error)."),ISe.forEach(t),N8o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(b3.$$.fragment,ol),D8o=i(ol),cte=n(ol,"P",{});var MUr=s(cte);j8o=r(MUr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MUr.forEach(t),q8o=i(ol),cd=n(ol,"P",{});var sW=s(cd);G8o=r(sW,`Note:
Loading a model from its configuration file does `),fte=n(sW,"STRONG",{});var EUr=s(fte);O8o=r(EUr,"not"),EUr.forEach(t),X8o=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mte=n(sW,"CODE",{});var yUr=s(mte);V8o=r(yUr,"from_pretrained()"),yUr.forEach(t),z8o=r(sW,"to load the model weights."),sW.forEach(t),W8o=i(ol),gte=n(ol,"P",{});var wUr=s(gte);Q8o=r(wUr,"Examples:"),wUr.forEach(t),H8o=i(ol),m(v3.$$.fragment,ol),ol.forEach(t),U8o=i(el),Ge=n(el,"DIV",{class:!0});var Vt=s(Ge);m(T3.$$.fragment,Vt),J8o=i(Vt),hte=n(Vt,"P",{});var AUr=s(hte);Y8o=r(AUr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AUr.forEach(t),K8o=i(Vt),Ha=n(Vt,"P",{});var p4=s(Ha);Z8o=r(p4,"The model class to instantiate is selected based on the "),pte=n(p4,"CODE",{});var LUr=s(pte);eFo=r(LUr,"model_type"),LUr.forEach(t),oFo=r(p4,` property of the config object (either
passed as an argument or loaded from `),_te=n(p4,"CODE",{});var BUr=s(_te);rFo=r(BUr,"pretrained_model_name_or_path"),BUr.forEach(t),tFo=r(p4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=n(p4,"CODE",{});var xUr=s(ute);aFo=r(xUr,"pretrained_model_name_or_path"),xUr.forEach(t),nFo=r(p4,":"),p4.forEach(t),sFo=i(Vt),se=n(Vt,"UL",{});var ie=s(se);I1=n(ie,"LI",{});var C3e=s(I1);bte=n(C3e,"STRONG",{});var kUr=s(bte);lFo=r(kUr,"bart"),kUr.forEach(t),iFo=r(C3e," \u2014 "),MI=n(C3e,"A",{href:!0});var RUr=s(MI);dFo=r(RUr,"BartForConditionalGeneration"),RUr.forEach(t),cFo=r(C3e," (BART model)"),C3e.forEach(t),fFo=i(ie),N1=n(ie,"LI",{});var M3e=s(N1);vte=n(M3e,"STRONG",{});var SUr=s(vte);mFo=r(SUr,"bigbird_pegasus"),SUr.forEach(t),gFo=r(M3e," \u2014 "),EI=n(M3e,"A",{href:!0});var PUr=s(EI);hFo=r(PUr,"BigBirdPegasusForConditionalGeneration"),PUr.forEach(t),pFo=r(M3e," (BigBirdPegasus model)"),M3e.forEach(t),_Fo=i(ie),D1=n(ie,"LI",{});var E3e=s(D1);Tte=n(E3e,"STRONG",{});var $Ur=s(Tte);uFo=r($Ur,"blenderbot"),$Ur.forEach(t),bFo=r(E3e," \u2014 "),yI=n(E3e,"A",{href:!0});var IUr=s(yI);vFo=r(IUr,"BlenderbotForConditionalGeneration"),IUr.forEach(t),TFo=r(E3e," (Blenderbot model)"),E3e.forEach(t),FFo=i(ie),j1=n(ie,"LI",{});var y3e=s(j1);Fte=n(y3e,"STRONG",{});var NUr=s(Fte);CFo=r(NUr,"blenderbot-small"),NUr.forEach(t),MFo=r(y3e," \u2014 "),wI=n(y3e,"A",{href:!0});var DUr=s(wI);EFo=r(DUr,"BlenderbotSmallForConditionalGeneration"),DUr.forEach(t),yFo=r(y3e," (BlenderbotSmall model)"),y3e.forEach(t),wFo=i(ie),q1=n(ie,"LI",{});var w3e=s(q1);Cte=n(w3e,"STRONG",{});var jUr=s(Cte);AFo=r(jUr,"encoder-decoder"),jUr.forEach(t),LFo=r(w3e," \u2014 "),AI=n(w3e,"A",{href:!0});var qUr=s(AI);BFo=r(qUr,"EncoderDecoderModel"),qUr.forEach(t),xFo=r(w3e," (Encoder decoder model)"),w3e.forEach(t),kFo=i(ie),G1=n(ie,"LI",{});var A3e=s(G1);Mte=n(A3e,"STRONG",{});var GUr=s(Mte);RFo=r(GUr,"fsmt"),GUr.forEach(t),SFo=r(A3e," \u2014 "),LI=n(A3e,"A",{href:!0});var OUr=s(LI);PFo=r(OUr,"FSMTForConditionalGeneration"),OUr.forEach(t),$Fo=r(A3e," (FairSeq Machine-Translation model)"),A3e.forEach(t),IFo=i(ie),O1=n(ie,"LI",{});var L3e=s(O1);Ete=n(L3e,"STRONG",{});var XUr=s(Ete);NFo=r(XUr,"led"),XUr.forEach(t),DFo=r(L3e," \u2014 "),BI=n(L3e,"A",{href:!0});var VUr=s(BI);jFo=r(VUr,"LEDForConditionalGeneration"),VUr.forEach(t),qFo=r(L3e," (LED model)"),L3e.forEach(t),GFo=i(ie),X1=n(ie,"LI",{});var B3e=s(X1);yte=n(B3e,"STRONG",{});var zUr=s(yte);OFo=r(zUr,"m2m_100"),zUr.forEach(t),XFo=r(B3e," \u2014 "),xI=n(B3e,"A",{href:!0});var WUr=s(xI);VFo=r(WUr,"M2M100ForConditionalGeneration"),WUr.forEach(t),zFo=r(B3e," (M2M100 model)"),B3e.forEach(t),WFo=i(ie),V1=n(ie,"LI",{});var x3e=s(V1);wte=n(x3e,"STRONG",{});var QUr=s(wte);QFo=r(QUr,"marian"),QUr.forEach(t),HFo=r(x3e," \u2014 "),kI=n(x3e,"A",{href:!0});var HUr=s(kI);UFo=r(HUr,"MarianMTModel"),HUr.forEach(t),JFo=r(x3e," (Marian model)"),x3e.forEach(t),YFo=i(ie),z1=n(ie,"LI",{});var k3e=s(z1);Ate=n(k3e,"STRONG",{});var UUr=s(Ate);KFo=r(UUr,"mbart"),UUr.forEach(t),ZFo=r(k3e," \u2014 "),RI=n(k3e,"A",{href:!0});var JUr=s(RI);eCo=r(JUr,"MBartForConditionalGeneration"),JUr.forEach(t),oCo=r(k3e," (mBART model)"),k3e.forEach(t),rCo=i(ie),W1=n(ie,"LI",{});var R3e=s(W1);Lte=n(R3e,"STRONG",{});var YUr=s(Lte);tCo=r(YUr,"mt5"),YUr.forEach(t),aCo=r(R3e," \u2014 "),SI=n(R3e,"A",{href:!0});var KUr=s(SI);nCo=r(KUr,"MT5ForConditionalGeneration"),KUr.forEach(t),sCo=r(R3e," (mT5 model)"),R3e.forEach(t),lCo=i(ie),Q1=n(ie,"LI",{});var S3e=s(Q1);Bte=n(S3e,"STRONG",{});var ZUr=s(Bte);iCo=r(ZUr,"pegasus"),ZUr.forEach(t),dCo=r(S3e," \u2014 "),PI=n(S3e,"A",{href:!0});var eJr=s(PI);cCo=r(eJr,"PegasusForConditionalGeneration"),eJr.forEach(t),fCo=r(S3e," (Pegasus model)"),S3e.forEach(t),mCo=i(ie),H1=n(ie,"LI",{});var P3e=s(H1);xte=n(P3e,"STRONG",{});var oJr=s(xte);gCo=r(oJr,"plbart"),oJr.forEach(t),hCo=r(P3e," \u2014 "),$I=n(P3e,"A",{href:!0});var rJr=s($I);pCo=r(rJr,"PLBartForConditionalGeneration"),rJr.forEach(t),_Co=r(P3e," (PLBart model)"),P3e.forEach(t),uCo=i(ie),U1=n(ie,"LI",{});var $3e=s(U1);kte=n($3e,"STRONG",{});var tJr=s(kte);bCo=r(tJr,"prophetnet"),tJr.forEach(t),vCo=r($3e," \u2014 "),II=n($3e,"A",{href:!0});var aJr=s(II);TCo=r(aJr,"ProphetNetForConditionalGeneration"),aJr.forEach(t),FCo=r($3e," (ProphetNet model)"),$3e.forEach(t),CCo=i(ie),J1=n(ie,"LI",{});var I3e=s(J1);Rte=n(I3e,"STRONG",{});var nJr=s(Rte);MCo=r(nJr,"t5"),nJr.forEach(t),ECo=r(I3e," \u2014 "),NI=n(I3e,"A",{href:!0});var sJr=s(NI);yCo=r(sJr,"T5ForConditionalGeneration"),sJr.forEach(t),wCo=r(I3e," (T5 model)"),I3e.forEach(t),ACo=i(ie),Y1=n(ie,"LI",{});var N3e=s(Y1);Ste=n(N3e,"STRONG",{});var lJr=s(Ste);LCo=r(lJr,"xlm-prophetnet"),lJr.forEach(t),BCo=r(N3e," \u2014 "),DI=n(N3e,"A",{href:!0});var iJr=s(DI);xCo=r(iJr,"XLMProphetNetForConditionalGeneration"),iJr.forEach(t),kCo=r(N3e," (XLMProphetNet model)"),N3e.forEach(t),ie.forEach(t),RCo=i(Vt),K1=n(Vt,"P",{});var D3e=s(K1);SCo=r(D3e,"The model is set in evaluation mode by default using "),Pte=n(D3e,"CODE",{});var dJr=s(Pte);PCo=r(dJr,"model.eval()"),dJr.forEach(t),$Co=r(D3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=n(D3e,"CODE",{});var cJr=s($te);ICo=r(cJr,"model.train()"),cJr.forEach(t),D3e.forEach(t),NCo=i(Vt),Ite=n(Vt,"P",{});var fJr=s(Ite);DCo=r(fJr,"Examples:"),fJr.forEach(t),jCo=i(Vt),m(F3.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),Lke=i(c),fd=n(c,"H2",{class:!0});var NSe=s(fd);Z1=n(NSe,"A",{id:!0,class:!0,href:!0});var mJr=s(Z1);Nte=n(mJr,"SPAN",{});var gJr=s(Nte);m(C3.$$.fragment,gJr),gJr.forEach(t),mJr.forEach(t),qCo=i(NSe),Dte=n(NSe,"SPAN",{});var hJr=s(Dte);GCo=r(hJr,"AutoModelForSequenceClassification"),hJr.forEach(t),NSe.forEach(t),Bke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(M3.$$.fragment,rl),OCo=i(rl),md=n(rl,"P",{});var lW=s(md);XCo=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jte=n(lW,"CODE",{});var pJr=s(jte);VCo=r(pJr,"from_pretrained()"),pJr.forEach(t),zCo=r(lW,"class method or the "),qte=n(lW,"CODE",{});var _Jr=s(qte);WCo=r(_Jr,"from_config()"),_Jr.forEach(t),QCo=r(lW,`class
method.`),lW.forEach(t),HCo=i(rl),E3=n(rl,"P",{});var DSe=s(E3);UCo=r(DSe,"This class cannot be instantiated directly using "),Gte=n(DSe,"CODE",{});var uJr=s(Gte);JCo=r(uJr,"__init__()"),uJr.forEach(t),YCo=r(DSe," (throws an error)."),DSe.forEach(t),KCo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(y3.$$.fragment,tl),ZCo=i(tl),Ote=n(tl,"P",{});var bJr=s(Ote);eMo=r(bJr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bJr.forEach(t),oMo=i(tl),gd=n(tl,"P",{});var iW=s(gd);rMo=r(iW,`Note:
Loading a model from its configuration file does `),Xte=n(iW,"STRONG",{});var vJr=s(Xte);tMo=r(vJr,"not"),vJr.forEach(t),aMo=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vte=n(iW,"CODE",{});var TJr=s(Vte);nMo=r(TJr,"from_pretrained()"),TJr.forEach(t),sMo=r(iW,"to load the model weights."),iW.forEach(t),lMo=i(tl),zte=n(tl,"P",{});var FJr=s(zte);iMo=r(FJr,"Examples:"),FJr.forEach(t),dMo=i(tl),m(w3.$$.fragment,tl),tl.forEach(t),cMo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(A3.$$.fragment,zt),fMo=i(zt),Wte=n(zt,"P",{});var CJr=s(Wte);mMo=r(CJr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),CJr.forEach(t),gMo=i(zt),Ua=n(zt,"P",{});var _4=s(Ua);hMo=r(_4,"The model class to instantiate is selected based on the "),Qte=n(_4,"CODE",{});var MJr=s(Qte);pMo=r(MJr,"model_type"),MJr.forEach(t),_Mo=r(_4,` property of the config object (either
passed as an argument or loaded from `),Hte=n(_4,"CODE",{});var EJr=s(Hte);uMo=r(EJr,"pretrained_model_name_or_path"),EJr.forEach(t),bMo=r(_4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ute=n(_4,"CODE",{});var yJr=s(Ute);vMo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),TMo=r(_4,":"),_4.forEach(t),FMo=i(zt),A=n(zt,"UL",{});var L=s(A);eb=n(L,"LI",{});var j3e=s(eb);Jte=n(j3e,"STRONG",{});var wJr=s(Jte);CMo=r(wJr,"albert"),wJr.forEach(t),MMo=r(j3e," \u2014 "),jI=n(j3e,"A",{href:!0});var AJr=s(jI);EMo=r(AJr,"AlbertForSequenceClassification"),AJr.forEach(t),yMo=r(j3e," (ALBERT model)"),j3e.forEach(t),wMo=i(L),ob=n(L,"LI",{});var q3e=s(ob);Yte=n(q3e,"STRONG",{});var LJr=s(Yte);AMo=r(LJr,"bart"),LJr.forEach(t),LMo=r(q3e," \u2014 "),qI=n(q3e,"A",{href:!0});var BJr=s(qI);BMo=r(BJr,"BartForSequenceClassification"),BJr.forEach(t),xMo=r(q3e," (BART model)"),q3e.forEach(t),kMo=i(L),rb=n(L,"LI",{});var G3e=s(rb);Kte=n(G3e,"STRONG",{});var xJr=s(Kte);RMo=r(xJr,"bert"),xJr.forEach(t),SMo=r(G3e," \u2014 "),GI=n(G3e,"A",{href:!0});var kJr=s(GI);PMo=r(kJr,"BertForSequenceClassification"),kJr.forEach(t),$Mo=r(G3e," (BERT model)"),G3e.forEach(t),IMo=i(L),tb=n(L,"LI",{});var O3e=s(tb);Zte=n(O3e,"STRONG",{});var RJr=s(Zte);NMo=r(RJr,"big_bird"),RJr.forEach(t),DMo=r(O3e," \u2014 "),OI=n(O3e,"A",{href:!0});var SJr=s(OI);jMo=r(SJr,"BigBirdForSequenceClassification"),SJr.forEach(t),qMo=r(O3e," (BigBird model)"),O3e.forEach(t),GMo=i(L),ab=n(L,"LI",{});var X3e=s(ab);eae=n(X3e,"STRONG",{});var PJr=s(eae);OMo=r(PJr,"bigbird_pegasus"),PJr.forEach(t),XMo=r(X3e," \u2014 "),XI=n(X3e,"A",{href:!0});var $Jr=s(XI);VMo=r($Jr,"BigBirdPegasusForSequenceClassification"),$Jr.forEach(t),zMo=r(X3e," (BigBirdPegasus model)"),X3e.forEach(t),WMo=i(L),nb=n(L,"LI",{});var V3e=s(nb);oae=n(V3e,"STRONG",{});var IJr=s(oae);QMo=r(IJr,"camembert"),IJr.forEach(t),HMo=r(V3e," \u2014 "),VI=n(V3e,"A",{href:!0});var NJr=s(VI);UMo=r(NJr,"CamembertForSequenceClassification"),NJr.forEach(t),JMo=r(V3e," (CamemBERT model)"),V3e.forEach(t),YMo=i(L),sb=n(L,"LI",{});var z3e=s(sb);rae=n(z3e,"STRONG",{});var DJr=s(rae);KMo=r(DJr,"canine"),DJr.forEach(t),ZMo=r(z3e," \u2014 "),zI=n(z3e,"A",{href:!0});var jJr=s(zI);e4o=r(jJr,"CanineForSequenceClassification"),jJr.forEach(t),o4o=r(z3e," (Canine model)"),z3e.forEach(t),r4o=i(L),lb=n(L,"LI",{});var W3e=s(lb);tae=n(W3e,"STRONG",{});var qJr=s(tae);t4o=r(qJr,"convbert"),qJr.forEach(t),a4o=r(W3e," \u2014 "),WI=n(W3e,"A",{href:!0});var GJr=s(WI);n4o=r(GJr,"ConvBertForSequenceClassification"),GJr.forEach(t),s4o=r(W3e," (ConvBERT model)"),W3e.forEach(t),l4o=i(L),ib=n(L,"LI",{});var Q3e=s(ib);aae=n(Q3e,"STRONG",{});var OJr=s(aae);i4o=r(OJr,"ctrl"),OJr.forEach(t),d4o=r(Q3e," \u2014 "),QI=n(Q3e,"A",{href:!0});var XJr=s(QI);c4o=r(XJr,"CTRLForSequenceClassification"),XJr.forEach(t),f4o=r(Q3e," (CTRL model)"),Q3e.forEach(t),m4o=i(L),db=n(L,"LI",{});var H3e=s(db);nae=n(H3e,"STRONG",{});var VJr=s(nae);g4o=r(VJr,"data2vec-text"),VJr.forEach(t),h4o=r(H3e," \u2014 "),HI=n(H3e,"A",{href:!0});var zJr=s(HI);p4o=r(zJr,"Data2VecTextForSequenceClassification"),zJr.forEach(t),_4o=r(H3e," (Data2VecText model)"),H3e.forEach(t),u4o=i(L),cb=n(L,"LI",{});var U3e=s(cb);sae=n(U3e,"STRONG",{});var WJr=s(sae);b4o=r(WJr,"deberta"),WJr.forEach(t),v4o=r(U3e," \u2014 "),UI=n(U3e,"A",{href:!0});var QJr=s(UI);T4o=r(QJr,"DebertaForSequenceClassification"),QJr.forEach(t),F4o=r(U3e," (DeBERTa model)"),U3e.forEach(t),C4o=i(L),fb=n(L,"LI",{});var J3e=s(fb);lae=n(J3e,"STRONG",{});var HJr=s(lae);M4o=r(HJr,"deberta-v2"),HJr.forEach(t),E4o=r(J3e," \u2014 "),JI=n(J3e,"A",{href:!0});var UJr=s(JI);y4o=r(UJr,"DebertaV2ForSequenceClassification"),UJr.forEach(t),w4o=r(J3e," (DeBERTa-v2 model)"),J3e.forEach(t),A4o=i(L),mb=n(L,"LI",{});var Y3e=s(mb);iae=n(Y3e,"STRONG",{});var JJr=s(iae);L4o=r(JJr,"distilbert"),JJr.forEach(t),B4o=r(Y3e," \u2014 "),YI=n(Y3e,"A",{href:!0});var YJr=s(YI);x4o=r(YJr,"DistilBertForSequenceClassification"),YJr.forEach(t),k4o=r(Y3e," (DistilBERT model)"),Y3e.forEach(t),R4o=i(L),gb=n(L,"LI",{});var K3e=s(gb);dae=n(K3e,"STRONG",{});var KJr=s(dae);S4o=r(KJr,"electra"),KJr.forEach(t),P4o=r(K3e," \u2014 "),KI=n(K3e,"A",{href:!0});var ZJr=s(KI);$4o=r(ZJr,"ElectraForSequenceClassification"),ZJr.forEach(t),I4o=r(K3e," (ELECTRA model)"),K3e.forEach(t),N4o=i(L),hb=n(L,"LI",{});var Z3e=s(hb);cae=n(Z3e,"STRONG",{});var eYr=s(cae);D4o=r(eYr,"flaubert"),eYr.forEach(t),j4o=r(Z3e," \u2014 "),ZI=n(Z3e,"A",{href:!0});var oYr=s(ZI);q4o=r(oYr,"FlaubertForSequenceClassification"),oYr.forEach(t),G4o=r(Z3e," (FlauBERT model)"),Z3e.forEach(t),O4o=i(L),pb=n(L,"LI",{});var eye=s(pb);fae=n(eye,"STRONG",{});var rYr=s(fae);X4o=r(rYr,"fnet"),rYr.forEach(t),V4o=r(eye," \u2014 "),eN=n(eye,"A",{href:!0});var tYr=s(eN);z4o=r(tYr,"FNetForSequenceClassification"),tYr.forEach(t),W4o=r(eye," (FNet model)"),eye.forEach(t),Q4o=i(L),_b=n(L,"LI",{});var oye=s(_b);mae=n(oye,"STRONG",{});var aYr=s(mae);H4o=r(aYr,"funnel"),aYr.forEach(t),U4o=r(oye," \u2014 "),oN=n(oye,"A",{href:!0});var nYr=s(oN);J4o=r(nYr,"FunnelForSequenceClassification"),nYr.forEach(t),Y4o=r(oye," (Funnel Transformer model)"),oye.forEach(t),K4o=i(L),ub=n(L,"LI",{});var rye=s(ub);gae=n(rye,"STRONG",{});var sYr=s(gae);Z4o=r(sYr,"gpt2"),sYr.forEach(t),eEo=r(rye," \u2014 "),rN=n(rye,"A",{href:!0});var lYr=s(rN);oEo=r(lYr,"GPT2ForSequenceClassification"),lYr.forEach(t),rEo=r(rye," (OpenAI GPT-2 model)"),rye.forEach(t),tEo=i(L),bb=n(L,"LI",{});var tye=s(bb);hae=n(tye,"STRONG",{});var iYr=s(hae);aEo=r(iYr,"gpt_neo"),iYr.forEach(t),nEo=r(tye," \u2014 "),tN=n(tye,"A",{href:!0});var dYr=s(tN);sEo=r(dYr,"GPTNeoForSequenceClassification"),dYr.forEach(t),lEo=r(tye," (GPT Neo model)"),tye.forEach(t),iEo=i(L),vb=n(L,"LI",{});var aye=s(vb);pae=n(aye,"STRONG",{});var cYr=s(pae);dEo=r(cYr,"gptj"),cYr.forEach(t),cEo=r(aye," \u2014 "),aN=n(aye,"A",{href:!0});var fYr=s(aN);fEo=r(fYr,"GPTJForSequenceClassification"),fYr.forEach(t),mEo=r(aye," (GPT-J model)"),aye.forEach(t),gEo=i(L),Tb=n(L,"LI",{});var nye=s(Tb);_ae=n(nye,"STRONG",{});var mYr=s(_ae);hEo=r(mYr,"ibert"),mYr.forEach(t),pEo=r(nye," \u2014 "),nN=n(nye,"A",{href:!0});var gYr=s(nN);_Eo=r(gYr,"IBertForSequenceClassification"),gYr.forEach(t),uEo=r(nye," (I-BERT model)"),nye.forEach(t),bEo=i(L),Fb=n(L,"LI",{});var sye=s(Fb);uae=n(sye,"STRONG",{});var hYr=s(uae);vEo=r(hYr,"layoutlm"),hYr.forEach(t),TEo=r(sye," \u2014 "),sN=n(sye,"A",{href:!0});var pYr=s(sN);FEo=r(pYr,"LayoutLMForSequenceClassification"),pYr.forEach(t),CEo=r(sye," (LayoutLM model)"),sye.forEach(t),MEo=i(L),Cb=n(L,"LI",{});var lye=s(Cb);bae=n(lye,"STRONG",{});var _Yr=s(bae);EEo=r(_Yr,"layoutlmv2"),_Yr.forEach(t),yEo=r(lye," \u2014 "),lN=n(lye,"A",{href:!0});var uYr=s(lN);wEo=r(uYr,"LayoutLMv2ForSequenceClassification"),uYr.forEach(t),AEo=r(lye," (LayoutLMv2 model)"),lye.forEach(t),LEo=i(L),Mb=n(L,"LI",{});var iye=s(Mb);vae=n(iye,"STRONG",{});var bYr=s(vae);BEo=r(bYr,"led"),bYr.forEach(t),xEo=r(iye," \u2014 "),iN=n(iye,"A",{href:!0});var vYr=s(iN);kEo=r(vYr,"LEDForSequenceClassification"),vYr.forEach(t),REo=r(iye," (LED model)"),iye.forEach(t),SEo=i(L),Eb=n(L,"LI",{});var dye=s(Eb);Tae=n(dye,"STRONG",{});var TYr=s(Tae);PEo=r(TYr,"longformer"),TYr.forEach(t),$Eo=r(dye," \u2014 "),dN=n(dye,"A",{href:!0});var FYr=s(dN);IEo=r(FYr,"LongformerForSequenceClassification"),FYr.forEach(t),NEo=r(dye," (Longformer model)"),dye.forEach(t),DEo=i(L),yb=n(L,"LI",{});var cye=s(yb);Fae=n(cye,"STRONG",{});var CYr=s(Fae);jEo=r(CYr,"mbart"),CYr.forEach(t),qEo=r(cye," \u2014 "),cN=n(cye,"A",{href:!0});var MYr=s(cN);GEo=r(MYr,"MBartForSequenceClassification"),MYr.forEach(t),OEo=r(cye," (mBART model)"),cye.forEach(t),XEo=i(L),wb=n(L,"LI",{});var fye=s(wb);Cae=n(fye,"STRONG",{});var EYr=s(Cae);VEo=r(EYr,"megatron-bert"),EYr.forEach(t),zEo=r(fye," \u2014 "),fN=n(fye,"A",{href:!0});var yYr=s(fN);WEo=r(yYr,"MegatronBertForSequenceClassification"),yYr.forEach(t),QEo=r(fye," (MegatronBert model)"),fye.forEach(t),HEo=i(L),Ab=n(L,"LI",{});var mye=s(Ab);Mae=n(mye,"STRONG",{});var wYr=s(Mae);UEo=r(wYr,"mobilebert"),wYr.forEach(t),JEo=r(mye," \u2014 "),mN=n(mye,"A",{href:!0});var AYr=s(mN);YEo=r(AYr,"MobileBertForSequenceClassification"),AYr.forEach(t),KEo=r(mye," (MobileBERT model)"),mye.forEach(t),ZEo=i(L),Lb=n(L,"LI",{});var gye=s(Lb);Eae=n(gye,"STRONG",{});var LYr=s(Eae);e3o=r(LYr,"mpnet"),LYr.forEach(t),o3o=r(gye," \u2014 "),gN=n(gye,"A",{href:!0});var BYr=s(gN);r3o=r(BYr,"MPNetForSequenceClassification"),BYr.forEach(t),t3o=r(gye," (MPNet model)"),gye.forEach(t),a3o=i(L),Bb=n(L,"LI",{});var hye=s(Bb);yae=n(hye,"STRONG",{});var xYr=s(yae);n3o=r(xYr,"nystromformer"),xYr.forEach(t),s3o=r(hye," \u2014 "),hN=n(hye,"A",{href:!0});var kYr=s(hN);l3o=r(kYr,"NystromformerForSequenceClassification"),kYr.forEach(t),i3o=r(hye," (Nystromformer model)"),hye.forEach(t),d3o=i(L),xb=n(L,"LI",{});var pye=s(xb);wae=n(pye,"STRONG",{});var RYr=s(wae);c3o=r(RYr,"openai-gpt"),RYr.forEach(t),f3o=r(pye," \u2014 "),pN=n(pye,"A",{href:!0});var SYr=s(pN);m3o=r(SYr,"OpenAIGPTForSequenceClassification"),SYr.forEach(t),g3o=r(pye," (OpenAI GPT model)"),pye.forEach(t),h3o=i(L),kb=n(L,"LI",{});var _ye=s(kb);Aae=n(_ye,"STRONG",{});var PYr=s(Aae);p3o=r(PYr,"perceiver"),PYr.forEach(t),_3o=r(_ye," \u2014 "),_N=n(_ye,"A",{href:!0});var $Yr=s(_N);u3o=r($Yr,"PerceiverForSequenceClassification"),$Yr.forEach(t),b3o=r(_ye," (Perceiver model)"),_ye.forEach(t),v3o=i(L),Rb=n(L,"LI",{});var uye=s(Rb);Lae=n(uye,"STRONG",{});var IYr=s(Lae);T3o=r(IYr,"plbart"),IYr.forEach(t),F3o=r(uye," \u2014 "),uN=n(uye,"A",{href:!0});var NYr=s(uN);C3o=r(NYr,"PLBartForSequenceClassification"),NYr.forEach(t),M3o=r(uye," (PLBart model)"),uye.forEach(t),E3o=i(L),Sb=n(L,"LI",{});var bye=s(Sb);Bae=n(bye,"STRONG",{});var DYr=s(Bae);y3o=r(DYr,"qdqbert"),DYr.forEach(t),w3o=r(bye," \u2014 "),bN=n(bye,"A",{href:!0});var jYr=s(bN);A3o=r(jYr,"QDQBertForSequenceClassification"),jYr.forEach(t),L3o=r(bye," (QDQBert model)"),bye.forEach(t),B3o=i(L),Pb=n(L,"LI",{});var vye=s(Pb);xae=n(vye,"STRONG",{});var qYr=s(xae);x3o=r(qYr,"reformer"),qYr.forEach(t),k3o=r(vye," \u2014 "),vN=n(vye,"A",{href:!0});var GYr=s(vN);R3o=r(GYr,"ReformerForSequenceClassification"),GYr.forEach(t),S3o=r(vye," (Reformer model)"),vye.forEach(t),P3o=i(L),$b=n(L,"LI",{});var Tye=s($b);kae=n(Tye,"STRONG",{});var OYr=s(kae);$3o=r(OYr,"rembert"),OYr.forEach(t),I3o=r(Tye," \u2014 "),TN=n(Tye,"A",{href:!0});var XYr=s(TN);N3o=r(XYr,"RemBertForSequenceClassification"),XYr.forEach(t),D3o=r(Tye," (RemBERT model)"),Tye.forEach(t),j3o=i(L),Ib=n(L,"LI",{});var Fye=s(Ib);Rae=n(Fye,"STRONG",{});var VYr=s(Rae);q3o=r(VYr,"roberta"),VYr.forEach(t),G3o=r(Fye," \u2014 "),FN=n(Fye,"A",{href:!0});var zYr=s(FN);O3o=r(zYr,"RobertaForSequenceClassification"),zYr.forEach(t),X3o=r(Fye," (RoBERTa model)"),Fye.forEach(t),V3o=i(L),Nb=n(L,"LI",{});var Cye=s(Nb);Sae=n(Cye,"STRONG",{});var WYr=s(Sae);z3o=r(WYr,"roformer"),WYr.forEach(t),W3o=r(Cye," \u2014 "),CN=n(Cye,"A",{href:!0});var QYr=s(CN);Q3o=r(QYr,"RoFormerForSequenceClassification"),QYr.forEach(t),H3o=r(Cye," (RoFormer model)"),Cye.forEach(t),U3o=i(L),Db=n(L,"LI",{});var Mye=s(Db);Pae=n(Mye,"STRONG",{});var HYr=s(Pae);J3o=r(HYr,"squeezebert"),HYr.forEach(t),Y3o=r(Mye," \u2014 "),MN=n(Mye,"A",{href:!0});var UYr=s(MN);K3o=r(UYr,"SqueezeBertForSequenceClassification"),UYr.forEach(t),Z3o=r(Mye," (SqueezeBERT model)"),Mye.forEach(t),eyo=i(L),jb=n(L,"LI",{});var Eye=s(jb);$ae=n(Eye,"STRONG",{});var JYr=s($ae);oyo=r(JYr,"tapas"),JYr.forEach(t),ryo=r(Eye," \u2014 "),EN=n(Eye,"A",{href:!0});var YYr=s(EN);tyo=r(YYr,"TapasForSequenceClassification"),YYr.forEach(t),ayo=r(Eye," (TAPAS model)"),Eye.forEach(t),nyo=i(L),qb=n(L,"LI",{});var yye=s(qb);Iae=n(yye,"STRONG",{});var KYr=s(Iae);syo=r(KYr,"transfo-xl"),KYr.forEach(t),lyo=r(yye," \u2014 "),yN=n(yye,"A",{href:!0});var ZYr=s(yN);iyo=r(ZYr,"TransfoXLForSequenceClassification"),ZYr.forEach(t),dyo=r(yye," (Transformer-XL model)"),yye.forEach(t),cyo=i(L),Gb=n(L,"LI",{});var wye=s(Gb);Nae=n(wye,"STRONG",{});var eKr=s(Nae);fyo=r(eKr,"xlm"),eKr.forEach(t),myo=r(wye," \u2014 "),wN=n(wye,"A",{href:!0});var oKr=s(wN);gyo=r(oKr,"XLMForSequenceClassification"),oKr.forEach(t),hyo=r(wye," (XLM model)"),wye.forEach(t),pyo=i(L),Ob=n(L,"LI",{});var Aye=s(Ob);Dae=n(Aye,"STRONG",{});var rKr=s(Dae);_yo=r(rKr,"xlm-roberta"),rKr.forEach(t),uyo=r(Aye," \u2014 "),AN=n(Aye,"A",{href:!0});var tKr=s(AN);byo=r(tKr,"XLMRobertaForSequenceClassification"),tKr.forEach(t),vyo=r(Aye," (XLM-RoBERTa model)"),Aye.forEach(t),Tyo=i(L),Xb=n(L,"LI",{});var Lye=s(Xb);jae=n(Lye,"STRONG",{});var aKr=s(jae);Fyo=r(aKr,"xlm-roberta-xl"),aKr.forEach(t),Cyo=r(Lye," \u2014 "),LN=n(Lye,"A",{href:!0});var nKr=s(LN);Myo=r(nKr,"XLMRobertaXLForSequenceClassification"),nKr.forEach(t),Eyo=r(Lye," (XLM-RoBERTa-XL model)"),Lye.forEach(t),yyo=i(L),Vb=n(L,"LI",{});var Bye=s(Vb);qae=n(Bye,"STRONG",{});var sKr=s(qae);wyo=r(sKr,"xlnet"),sKr.forEach(t),Ayo=r(Bye," \u2014 "),BN=n(Bye,"A",{href:!0});var lKr=s(BN);Lyo=r(lKr,"XLNetForSequenceClassification"),lKr.forEach(t),Byo=r(Bye," (XLNet model)"),Bye.forEach(t),xyo=i(L),zb=n(L,"LI",{});var xye=s(zb);Gae=n(xye,"STRONG",{});var iKr=s(Gae);kyo=r(iKr,"yoso"),iKr.forEach(t),Ryo=r(xye," \u2014 "),xN=n(xye,"A",{href:!0});var dKr=s(xN);Syo=r(dKr,"YosoForSequenceClassification"),dKr.forEach(t),Pyo=r(xye," (YOSO model)"),xye.forEach(t),L.forEach(t),$yo=i(zt),Wb=n(zt,"P",{});var kye=s(Wb);Iyo=r(kye,"The model is set in evaluation mode by default using "),Oae=n(kye,"CODE",{});var cKr=s(Oae);Nyo=r(cKr,"model.eval()"),cKr.forEach(t),Dyo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xae=n(kye,"CODE",{});var fKr=s(Xae);jyo=r(fKr,"model.train()"),fKr.forEach(t),kye.forEach(t),qyo=i(zt),Vae=n(zt,"P",{});var mKr=s(Vae);Gyo=r(mKr,"Examples:"),mKr.forEach(t),Oyo=i(zt),m(L3.$$.fragment,zt),zt.forEach(t),rl.forEach(t),xke=i(c),hd=n(c,"H2",{class:!0});var jSe=s(hd);Qb=n(jSe,"A",{id:!0,class:!0,href:!0});var gKr=s(Qb);zae=n(gKr,"SPAN",{});var hKr=s(zae);m(B3.$$.fragment,hKr),hKr.forEach(t),gKr.forEach(t),Xyo=i(jSe),Wae=n(jSe,"SPAN",{});var pKr=s(Wae);Vyo=r(pKr,"AutoModelForMultipleChoice"),pKr.forEach(t),jSe.forEach(t),kke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(x3.$$.fragment,al),zyo=i(al),pd=n(al,"P",{});var dW=s(pd);Wyo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Qae=n(dW,"CODE",{});var _Kr=s(Qae);Qyo=r(_Kr,"from_pretrained()"),_Kr.forEach(t),Hyo=r(dW,"class method or the "),Hae=n(dW,"CODE",{});var uKr=s(Hae);Uyo=r(uKr,"from_config()"),uKr.forEach(t),Jyo=r(dW,`class
method.`),dW.forEach(t),Yyo=i(al),k3=n(al,"P",{});var qSe=s(k3);Kyo=r(qSe,"This class cannot be instantiated directly using "),Uae=n(qSe,"CODE",{});var bKr=s(Uae);Zyo=r(bKr,"__init__()"),bKr.forEach(t),ewo=r(qSe," (throws an error)."),qSe.forEach(t),owo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(R3.$$.fragment,nl),rwo=i(nl),Jae=n(nl,"P",{});var vKr=s(Jae);two=r(vKr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vKr.forEach(t),awo=i(nl),_d=n(nl,"P",{});var cW=s(_d);nwo=r(cW,`Note:
Loading a model from its configuration file does `),Yae=n(cW,"STRONG",{});var TKr=s(Yae);swo=r(TKr,"not"),TKr.forEach(t),lwo=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kae=n(cW,"CODE",{});var FKr=s(Kae);iwo=r(FKr,"from_pretrained()"),FKr.forEach(t),dwo=r(cW,"to load the model weights."),cW.forEach(t),cwo=i(nl),Zae=n(nl,"P",{});var CKr=s(Zae);fwo=r(CKr,"Examples:"),CKr.forEach(t),mwo=i(nl),m(S3.$$.fragment,nl),nl.forEach(t),gwo=i(al),Xe=n(al,"DIV",{class:!0});var Wt=s(Xe);m(P3.$$.fragment,Wt),hwo=i(Wt),ene=n(Wt,"P",{});var MKr=s(ene);pwo=r(MKr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MKr.forEach(t),_wo=i(Wt),Ja=n(Wt,"P",{});var u4=s(Ja);uwo=r(u4,"The model class to instantiate is selected based on the "),one=n(u4,"CODE",{});var EKr=s(one);bwo=r(EKr,"model_type"),EKr.forEach(t),vwo=r(u4,` property of the config object (either
passed as an argument or loaded from `),rne=n(u4,"CODE",{});var yKr=s(rne);Two=r(yKr,"pretrained_model_name_or_path"),yKr.forEach(t),Fwo=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tne=n(u4,"CODE",{});var wKr=s(tne);Cwo=r(wKr,"pretrained_model_name_or_path"),wKr.forEach(t),Mwo=r(u4,":"),u4.forEach(t),Ewo=i(Wt),G=n(Wt,"UL",{});var O=s(G);Hb=n(O,"LI",{});var Rye=s(Hb);ane=n(Rye,"STRONG",{});var AKr=s(ane);ywo=r(AKr,"albert"),AKr.forEach(t),wwo=r(Rye," \u2014 "),kN=n(Rye,"A",{href:!0});var LKr=s(kN);Awo=r(LKr,"AlbertForMultipleChoice"),LKr.forEach(t),Lwo=r(Rye," (ALBERT model)"),Rye.forEach(t),Bwo=i(O),Ub=n(O,"LI",{});var Sye=s(Ub);nne=n(Sye,"STRONG",{});var BKr=s(nne);xwo=r(BKr,"bert"),BKr.forEach(t),kwo=r(Sye," \u2014 "),RN=n(Sye,"A",{href:!0});var xKr=s(RN);Rwo=r(xKr,"BertForMultipleChoice"),xKr.forEach(t),Swo=r(Sye," (BERT model)"),Sye.forEach(t),Pwo=i(O),Jb=n(O,"LI",{});var Pye=s(Jb);sne=n(Pye,"STRONG",{});var kKr=s(sne);$wo=r(kKr,"big_bird"),kKr.forEach(t),Iwo=r(Pye," \u2014 "),SN=n(Pye,"A",{href:!0});var RKr=s(SN);Nwo=r(RKr,"BigBirdForMultipleChoice"),RKr.forEach(t),Dwo=r(Pye," (BigBird model)"),Pye.forEach(t),jwo=i(O),Yb=n(O,"LI",{});var $ye=s(Yb);lne=n($ye,"STRONG",{});var SKr=s(lne);qwo=r(SKr,"camembert"),SKr.forEach(t),Gwo=r($ye," \u2014 "),PN=n($ye,"A",{href:!0});var PKr=s(PN);Owo=r(PKr,"CamembertForMultipleChoice"),PKr.forEach(t),Xwo=r($ye," (CamemBERT model)"),$ye.forEach(t),Vwo=i(O),Kb=n(O,"LI",{});var Iye=s(Kb);ine=n(Iye,"STRONG",{});var $Kr=s(ine);zwo=r($Kr,"canine"),$Kr.forEach(t),Wwo=r(Iye," \u2014 "),$N=n(Iye,"A",{href:!0});var IKr=s($N);Qwo=r(IKr,"CanineForMultipleChoice"),IKr.forEach(t),Hwo=r(Iye," (Canine model)"),Iye.forEach(t),Uwo=i(O),Zb=n(O,"LI",{});var Nye=s(Zb);dne=n(Nye,"STRONG",{});var NKr=s(dne);Jwo=r(NKr,"convbert"),NKr.forEach(t),Ywo=r(Nye," \u2014 "),IN=n(Nye,"A",{href:!0});var DKr=s(IN);Kwo=r(DKr,"ConvBertForMultipleChoice"),DKr.forEach(t),Zwo=r(Nye," (ConvBERT model)"),Nye.forEach(t),e6o=i(O),e5=n(O,"LI",{});var Dye=s(e5);cne=n(Dye,"STRONG",{});var jKr=s(cne);o6o=r(jKr,"data2vec-text"),jKr.forEach(t),r6o=r(Dye," \u2014 "),NN=n(Dye,"A",{href:!0});var qKr=s(NN);t6o=r(qKr,"Data2VecTextForMultipleChoice"),qKr.forEach(t),a6o=r(Dye," (Data2VecText model)"),Dye.forEach(t),n6o=i(O),o5=n(O,"LI",{});var jye=s(o5);fne=n(jye,"STRONG",{});var GKr=s(fne);s6o=r(GKr,"distilbert"),GKr.forEach(t),l6o=r(jye," \u2014 "),DN=n(jye,"A",{href:!0});var OKr=s(DN);i6o=r(OKr,"DistilBertForMultipleChoice"),OKr.forEach(t),d6o=r(jye," (DistilBERT model)"),jye.forEach(t),c6o=i(O),r5=n(O,"LI",{});var qye=s(r5);mne=n(qye,"STRONG",{});var XKr=s(mne);f6o=r(XKr,"electra"),XKr.forEach(t),m6o=r(qye," \u2014 "),jN=n(qye,"A",{href:!0});var VKr=s(jN);g6o=r(VKr,"ElectraForMultipleChoice"),VKr.forEach(t),h6o=r(qye," (ELECTRA model)"),qye.forEach(t),p6o=i(O),t5=n(O,"LI",{});var Gye=s(t5);gne=n(Gye,"STRONG",{});var zKr=s(gne);_6o=r(zKr,"flaubert"),zKr.forEach(t),u6o=r(Gye," \u2014 "),qN=n(Gye,"A",{href:!0});var WKr=s(qN);b6o=r(WKr,"FlaubertForMultipleChoice"),WKr.forEach(t),v6o=r(Gye," (FlauBERT model)"),Gye.forEach(t),T6o=i(O),a5=n(O,"LI",{});var Oye=s(a5);hne=n(Oye,"STRONG",{});var QKr=s(hne);F6o=r(QKr,"fnet"),QKr.forEach(t),C6o=r(Oye," \u2014 "),GN=n(Oye,"A",{href:!0});var HKr=s(GN);M6o=r(HKr,"FNetForMultipleChoice"),HKr.forEach(t),E6o=r(Oye," (FNet model)"),Oye.forEach(t),y6o=i(O),n5=n(O,"LI",{});var Xye=s(n5);pne=n(Xye,"STRONG",{});var UKr=s(pne);w6o=r(UKr,"funnel"),UKr.forEach(t),A6o=r(Xye," \u2014 "),ON=n(Xye,"A",{href:!0});var JKr=s(ON);L6o=r(JKr,"FunnelForMultipleChoice"),JKr.forEach(t),B6o=r(Xye," (Funnel Transformer model)"),Xye.forEach(t),x6o=i(O),s5=n(O,"LI",{});var Vye=s(s5);_ne=n(Vye,"STRONG",{});var YKr=s(_ne);k6o=r(YKr,"ibert"),YKr.forEach(t),R6o=r(Vye," \u2014 "),XN=n(Vye,"A",{href:!0});var KKr=s(XN);S6o=r(KKr,"IBertForMultipleChoice"),KKr.forEach(t),P6o=r(Vye," (I-BERT model)"),Vye.forEach(t),$6o=i(O),l5=n(O,"LI",{});var zye=s(l5);une=n(zye,"STRONG",{});var ZKr=s(une);I6o=r(ZKr,"longformer"),ZKr.forEach(t),N6o=r(zye," \u2014 "),VN=n(zye,"A",{href:!0});var eZr=s(VN);D6o=r(eZr,"LongformerForMultipleChoice"),eZr.forEach(t),j6o=r(zye," (Longformer model)"),zye.forEach(t),q6o=i(O),i5=n(O,"LI",{});var Wye=s(i5);bne=n(Wye,"STRONG",{});var oZr=s(bne);G6o=r(oZr,"megatron-bert"),oZr.forEach(t),O6o=r(Wye," \u2014 "),zN=n(Wye,"A",{href:!0});var rZr=s(zN);X6o=r(rZr,"MegatronBertForMultipleChoice"),rZr.forEach(t),V6o=r(Wye," (MegatronBert model)"),Wye.forEach(t),z6o=i(O),d5=n(O,"LI",{});var Qye=s(d5);vne=n(Qye,"STRONG",{});var tZr=s(vne);W6o=r(tZr,"mobilebert"),tZr.forEach(t),Q6o=r(Qye," \u2014 "),WN=n(Qye,"A",{href:!0});var aZr=s(WN);H6o=r(aZr,"MobileBertForMultipleChoice"),aZr.forEach(t),U6o=r(Qye," (MobileBERT model)"),Qye.forEach(t),J6o=i(O),c5=n(O,"LI",{});var Hye=s(c5);Tne=n(Hye,"STRONG",{});var nZr=s(Tne);Y6o=r(nZr,"mpnet"),nZr.forEach(t),K6o=r(Hye," \u2014 "),QN=n(Hye,"A",{href:!0});var sZr=s(QN);Z6o=r(sZr,"MPNetForMultipleChoice"),sZr.forEach(t),eAo=r(Hye," (MPNet model)"),Hye.forEach(t),oAo=i(O),f5=n(O,"LI",{});var Uye=s(f5);Fne=n(Uye,"STRONG",{});var lZr=s(Fne);rAo=r(lZr,"nystromformer"),lZr.forEach(t),tAo=r(Uye," \u2014 "),HN=n(Uye,"A",{href:!0});var iZr=s(HN);aAo=r(iZr,"NystromformerForMultipleChoice"),iZr.forEach(t),nAo=r(Uye," (Nystromformer model)"),Uye.forEach(t),sAo=i(O),m5=n(O,"LI",{});var Jye=s(m5);Cne=n(Jye,"STRONG",{});var dZr=s(Cne);lAo=r(dZr,"qdqbert"),dZr.forEach(t),iAo=r(Jye," \u2014 "),UN=n(Jye,"A",{href:!0});var cZr=s(UN);dAo=r(cZr,"QDQBertForMultipleChoice"),cZr.forEach(t),cAo=r(Jye," (QDQBert model)"),Jye.forEach(t),fAo=i(O),g5=n(O,"LI",{});var Yye=s(g5);Mne=n(Yye,"STRONG",{});var fZr=s(Mne);mAo=r(fZr,"rembert"),fZr.forEach(t),gAo=r(Yye," \u2014 "),JN=n(Yye,"A",{href:!0});var mZr=s(JN);hAo=r(mZr,"RemBertForMultipleChoice"),mZr.forEach(t),pAo=r(Yye," (RemBERT model)"),Yye.forEach(t),_Ao=i(O),h5=n(O,"LI",{});var Kye=s(h5);Ene=n(Kye,"STRONG",{});var gZr=s(Ene);uAo=r(gZr,"roberta"),gZr.forEach(t),bAo=r(Kye," \u2014 "),YN=n(Kye,"A",{href:!0});var hZr=s(YN);vAo=r(hZr,"RobertaForMultipleChoice"),hZr.forEach(t),TAo=r(Kye," (RoBERTa model)"),Kye.forEach(t),FAo=i(O),p5=n(O,"LI",{});var Zye=s(p5);yne=n(Zye,"STRONG",{});var pZr=s(yne);CAo=r(pZr,"roformer"),pZr.forEach(t),MAo=r(Zye," \u2014 "),KN=n(Zye,"A",{href:!0});var _Zr=s(KN);EAo=r(_Zr,"RoFormerForMultipleChoice"),_Zr.forEach(t),yAo=r(Zye," (RoFormer model)"),Zye.forEach(t),wAo=i(O),_5=n(O,"LI",{});var ewe=s(_5);wne=n(ewe,"STRONG",{});var uZr=s(wne);AAo=r(uZr,"squeezebert"),uZr.forEach(t),LAo=r(ewe," \u2014 "),ZN=n(ewe,"A",{href:!0});var bZr=s(ZN);BAo=r(bZr,"SqueezeBertForMultipleChoice"),bZr.forEach(t),xAo=r(ewe," (SqueezeBERT model)"),ewe.forEach(t),kAo=i(O),u5=n(O,"LI",{});var owe=s(u5);Ane=n(owe,"STRONG",{});var vZr=s(Ane);RAo=r(vZr,"xlm"),vZr.forEach(t),SAo=r(owe," \u2014 "),eD=n(owe,"A",{href:!0});var TZr=s(eD);PAo=r(TZr,"XLMForMultipleChoice"),TZr.forEach(t),$Ao=r(owe," (XLM model)"),owe.forEach(t),IAo=i(O),b5=n(O,"LI",{});var rwe=s(b5);Lne=n(rwe,"STRONG",{});var FZr=s(Lne);NAo=r(FZr,"xlm-roberta"),FZr.forEach(t),DAo=r(rwe," \u2014 "),oD=n(rwe,"A",{href:!0});var CZr=s(oD);jAo=r(CZr,"XLMRobertaForMultipleChoice"),CZr.forEach(t),qAo=r(rwe," (XLM-RoBERTa model)"),rwe.forEach(t),GAo=i(O),v5=n(O,"LI",{});var twe=s(v5);Bne=n(twe,"STRONG",{});var MZr=s(Bne);OAo=r(MZr,"xlm-roberta-xl"),MZr.forEach(t),XAo=r(twe," \u2014 "),rD=n(twe,"A",{href:!0});var EZr=s(rD);VAo=r(EZr,"XLMRobertaXLForMultipleChoice"),EZr.forEach(t),zAo=r(twe," (XLM-RoBERTa-XL model)"),twe.forEach(t),WAo=i(O),T5=n(O,"LI",{});var awe=s(T5);xne=n(awe,"STRONG",{});var yZr=s(xne);QAo=r(yZr,"xlnet"),yZr.forEach(t),HAo=r(awe," \u2014 "),tD=n(awe,"A",{href:!0});var wZr=s(tD);UAo=r(wZr,"XLNetForMultipleChoice"),wZr.forEach(t),JAo=r(awe," (XLNet model)"),awe.forEach(t),YAo=i(O),F5=n(O,"LI",{});var nwe=s(F5);kne=n(nwe,"STRONG",{});var AZr=s(kne);KAo=r(AZr,"yoso"),AZr.forEach(t),ZAo=r(nwe," \u2014 "),aD=n(nwe,"A",{href:!0});var LZr=s(aD);e0o=r(LZr,"YosoForMultipleChoice"),LZr.forEach(t),o0o=r(nwe," (YOSO model)"),nwe.forEach(t),O.forEach(t),r0o=i(Wt),C5=n(Wt,"P",{});var swe=s(C5);t0o=r(swe,"The model is set in evaluation mode by default using "),Rne=n(swe,"CODE",{});var BZr=s(Rne);a0o=r(BZr,"model.eval()"),BZr.forEach(t),n0o=r(swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sne=n(swe,"CODE",{});var xZr=s(Sne);s0o=r(xZr,"model.train()"),xZr.forEach(t),swe.forEach(t),l0o=i(Wt),Pne=n(Wt,"P",{});var kZr=s(Pne);i0o=r(kZr,"Examples:"),kZr.forEach(t),d0o=i(Wt),m($3.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),Rke=i(c),ud=n(c,"H2",{class:!0});var GSe=s(ud);M5=n(GSe,"A",{id:!0,class:!0,href:!0});var RZr=s(M5);$ne=n(RZr,"SPAN",{});var SZr=s($ne);m(I3.$$.fragment,SZr),SZr.forEach(t),RZr.forEach(t),c0o=i(GSe),Ine=n(GSe,"SPAN",{});var PZr=s(Ine);f0o=r(PZr,"AutoModelForNextSentencePrediction"),PZr.forEach(t),GSe.forEach(t),Ske=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(N3.$$.fragment,sl),m0o=i(sl),bd=n(sl,"P",{});var fW=s(bd);g0o=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nne=n(fW,"CODE",{});var $Zr=s(Nne);h0o=r($Zr,"from_pretrained()"),$Zr.forEach(t),p0o=r(fW,"class method or the "),Dne=n(fW,"CODE",{});var IZr=s(Dne);_0o=r(IZr,"from_config()"),IZr.forEach(t),u0o=r(fW,`class
method.`),fW.forEach(t),b0o=i(sl),D3=n(sl,"P",{});var OSe=s(D3);v0o=r(OSe,"This class cannot be instantiated directly using "),jne=n(OSe,"CODE",{});var NZr=s(jne);T0o=r(NZr,"__init__()"),NZr.forEach(t),F0o=r(OSe," (throws an error)."),OSe.forEach(t),C0o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(j3.$$.fragment,ll),M0o=i(ll),qne=n(ll,"P",{});var DZr=s(qne);E0o=r(DZr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),DZr.forEach(t),y0o=i(ll),vd=n(ll,"P",{});var mW=s(vd);w0o=r(mW,`Note:
Loading a model from its configuration file does `),Gne=n(mW,"STRONG",{});var jZr=s(Gne);A0o=r(jZr,"not"),jZr.forEach(t),L0o=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),One=n(mW,"CODE",{});var qZr=s(One);B0o=r(qZr,"from_pretrained()"),qZr.forEach(t),x0o=r(mW,"to load the model weights."),mW.forEach(t),k0o=i(ll),Xne=n(ll,"P",{});var GZr=s(Xne);R0o=r(GZr,"Examples:"),GZr.forEach(t),S0o=i(ll),m(q3.$$.fragment,ll),ll.forEach(t),P0o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(G3.$$.fragment,Qt),$0o=i(Qt),Vne=n(Qt,"P",{});var OZr=s(Vne);I0o=r(OZr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OZr.forEach(t),N0o=i(Qt),Ya=n(Qt,"P",{});var b4=s(Ya);D0o=r(b4,"The model class to instantiate is selected based on the "),zne=n(b4,"CODE",{});var XZr=s(zne);j0o=r(XZr,"model_type"),XZr.forEach(t),q0o=r(b4,` property of the config object (either
passed as an argument or loaded from `),Wne=n(b4,"CODE",{});var VZr=s(Wne);G0o=r(VZr,"pretrained_model_name_or_path"),VZr.forEach(t),O0o=r(b4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qne=n(b4,"CODE",{});var zZr=s(Qne);X0o=r(zZr,"pretrained_model_name_or_path"),zZr.forEach(t),V0o=r(b4,":"),b4.forEach(t),z0o=i(Qt),da=n(Qt,"UL",{});var il=s(da);E5=n(il,"LI",{});var lwe=s(E5);Hne=n(lwe,"STRONG",{});var WZr=s(Hne);W0o=r(WZr,"bert"),WZr.forEach(t),Q0o=r(lwe," \u2014 "),nD=n(lwe,"A",{href:!0});var QZr=s(nD);H0o=r(QZr,"BertForNextSentencePrediction"),QZr.forEach(t),U0o=r(lwe," (BERT model)"),lwe.forEach(t),J0o=i(il),y5=n(il,"LI",{});var iwe=s(y5);Une=n(iwe,"STRONG",{});var HZr=s(Une);Y0o=r(HZr,"fnet"),HZr.forEach(t),K0o=r(iwe," \u2014 "),sD=n(iwe,"A",{href:!0});var UZr=s(sD);Z0o=r(UZr,"FNetForNextSentencePrediction"),UZr.forEach(t),eLo=r(iwe," (FNet model)"),iwe.forEach(t),oLo=i(il),w5=n(il,"LI",{});var dwe=s(w5);Jne=n(dwe,"STRONG",{});var JZr=s(Jne);rLo=r(JZr,"megatron-bert"),JZr.forEach(t),tLo=r(dwe," \u2014 "),lD=n(dwe,"A",{href:!0});var YZr=s(lD);aLo=r(YZr,"MegatronBertForNextSentencePrediction"),YZr.forEach(t),nLo=r(dwe," (MegatronBert model)"),dwe.forEach(t),sLo=i(il),A5=n(il,"LI",{});var cwe=s(A5);Yne=n(cwe,"STRONG",{});var KZr=s(Yne);lLo=r(KZr,"mobilebert"),KZr.forEach(t),iLo=r(cwe," \u2014 "),iD=n(cwe,"A",{href:!0});var ZZr=s(iD);dLo=r(ZZr,"MobileBertForNextSentencePrediction"),ZZr.forEach(t),cLo=r(cwe," (MobileBERT model)"),cwe.forEach(t),fLo=i(il),L5=n(il,"LI",{});var fwe=s(L5);Kne=n(fwe,"STRONG",{});var eet=s(Kne);mLo=r(eet,"qdqbert"),eet.forEach(t),gLo=r(fwe," \u2014 "),dD=n(fwe,"A",{href:!0});var oet=s(dD);hLo=r(oet,"QDQBertForNextSentencePrediction"),oet.forEach(t),pLo=r(fwe," (QDQBert model)"),fwe.forEach(t),il.forEach(t),_Lo=i(Qt),B5=n(Qt,"P",{});var mwe=s(B5);uLo=r(mwe,"The model is set in evaluation mode by default using "),Zne=n(mwe,"CODE",{});var ret=s(Zne);bLo=r(ret,"model.eval()"),ret.forEach(t),vLo=r(mwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ese=n(mwe,"CODE",{});var tet=s(ese);TLo=r(tet,"model.train()"),tet.forEach(t),mwe.forEach(t),FLo=i(Qt),ose=n(Qt,"P",{});var aet=s(ose);CLo=r(aet,"Examples:"),aet.forEach(t),MLo=i(Qt),m(O3.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Pke=i(c),Td=n(c,"H2",{class:!0});var XSe=s(Td);x5=n(XSe,"A",{id:!0,class:!0,href:!0});var net=s(x5);rse=n(net,"SPAN",{});var set=s(rse);m(X3.$$.fragment,set),set.forEach(t),net.forEach(t),ELo=i(XSe),tse=n(XSe,"SPAN",{});var iet=s(tse);yLo=r(iet,"AutoModelForTokenClassification"),iet.forEach(t),XSe.forEach(t),$ke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(V3.$$.fragment,dl),wLo=i(dl),Fd=n(dl,"P",{});var gW=s(Fd);ALo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ase=n(gW,"CODE",{});var det=s(ase);LLo=r(det,"from_pretrained()"),det.forEach(t),BLo=r(gW,"class method or the "),nse=n(gW,"CODE",{});var cet=s(nse);xLo=r(cet,"from_config()"),cet.forEach(t),kLo=r(gW,`class
method.`),gW.forEach(t),RLo=i(dl),z3=n(dl,"P",{});var VSe=s(z3);SLo=r(VSe,"This class cannot be instantiated directly using "),sse=n(VSe,"CODE",{});var fet=s(sse);PLo=r(fet,"__init__()"),fet.forEach(t),$Lo=r(VSe," (throws an error)."),VSe.forEach(t),ILo=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(W3.$$.fragment,cl),NLo=i(cl),lse=n(cl,"P",{});var met=s(lse);DLo=r(met,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),met.forEach(t),jLo=i(cl),Cd=n(cl,"P",{});var hW=s(Cd);qLo=r(hW,`Note:
Loading a model from its configuration file does `),ise=n(hW,"STRONG",{});var get=s(ise);GLo=r(get,"not"),get.forEach(t),OLo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),dse=n(hW,"CODE",{});var het=s(dse);XLo=r(het,"from_pretrained()"),het.forEach(t),VLo=r(hW,"to load the model weights."),hW.forEach(t),zLo=i(cl),cse=n(cl,"P",{});var pet=s(cse);WLo=r(pet,"Examples:"),pet.forEach(t),QLo=i(cl),m(Q3.$$.fragment,cl),cl.forEach(t),HLo=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(H3.$$.fragment,Ht),ULo=i(Ht),fse=n(Ht,"P",{});var _et=s(fse);JLo=r(_et,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_et.forEach(t),YLo=i(Ht),Ka=n(Ht,"P",{});var v4=s(Ka);KLo=r(v4,"The model class to instantiate is selected based on the "),mse=n(v4,"CODE",{});var uet=s(mse);ZLo=r(uet,"model_type"),uet.forEach(t),e9o=r(v4,` property of the config object (either
passed as an argument or loaded from `),gse=n(v4,"CODE",{});var bet=s(gse);o9o=r(bet,"pretrained_model_name_or_path"),bet.forEach(t),r9o=r(v4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hse=n(v4,"CODE",{});var vet=s(hse);t9o=r(vet,"pretrained_model_name_or_path"),vet.forEach(t),a9o=r(v4,":"),v4.forEach(t),n9o=i(Ht),j=n(Ht,"UL",{});var q=s(j);k5=n(q,"LI",{});var gwe=s(k5);pse=n(gwe,"STRONG",{});var Tet=s(pse);s9o=r(Tet,"albert"),Tet.forEach(t),l9o=r(gwe," \u2014 "),cD=n(gwe,"A",{href:!0});var Fet=s(cD);i9o=r(Fet,"AlbertForTokenClassification"),Fet.forEach(t),d9o=r(gwe," (ALBERT model)"),gwe.forEach(t),c9o=i(q),R5=n(q,"LI",{});var hwe=s(R5);_se=n(hwe,"STRONG",{});var Cet=s(_se);f9o=r(Cet,"bert"),Cet.forEach(t),m9o=r(hwe," \u2014 "),fD=n(hwe,"A",{href:!0});var Met=s(fD);g9o=r(Met,"BertForTokenClassification"),Met.forEach(t),h9o=r(hwe," (BERT model)"),hwe.forEach(t),p9o=i(q),S5=n(q,"LI",{});var pwe=s(S5);use=n(pwe,"STRONG",{});var Eet=s(use);_9o=r(Eet,"big_bird"),Eet.forEach(t),u9o=r(pwe," \u2014 "),mD=n(pwe,"A",{href:!0});var yet=s(mD);b9o=r(yet,"BigBirdForTokenClassification"),yet.forEach(t),v9o=r(pwe," (BigBird model)"),pwe.forEach(t),T9o=i(q),P5=n(q,"LI",{});var _we=s(P5);bse=n(_we,"STRONG",{});var wet=s(bse);F9o=r(wet,"camembert"),wet.forEach(t),C9o=r(_we," \u2014 "),gD=n(_we,"A",{href:!0});var Aet=s(gD);M9o=r(Aet,"CamembertForTokenClassification"),Aet.forEach(t),E9o=r(_we," (CamemBERT model)"),_we.forEach(t),y9o=i(q),$5=n(q,"LI",{});var uwe=s($5);vse=n(uwe,"STRONG",{});var Let=s(vse);w9o=r(Let,"canine"),Let.forEach(t),A9o=r(uwe," \u2014 "),hD=n(uwe,"A",{href:!0});var Bet=s(hD);L9o=r(Bet,"CanineForTokenClassification"),Bet.forEach(t),B9o=r(uwe," (Canine model)"),uwe.forEach(t),x9o=i(q),I5=n(q,"LI",{});var bwe=s(I5);Tse=n(bwe,"STRONG",{});var xet=s(Tse);k9o=r(xet,"convbert"),xet.forEach(t),R9o=r(bwe," \u2014 "),pD=n(bwe,"A",{href:!0});var ket=s(pD);S9o=r(ket,"ConvBertForTokenClassification"),ket.forEach(t),P9o=r(bwe," (ConvBERT model)"),bwe.forEach(t),$9o=i(q),N5=n(q,"LI",{});var vwe=s(N5);Fse=n(vwe,"STRONG",{});var Ret=s(Fse);I9o=r(Ret,"data2vec-text"),Ret.forEach(t),N9o=r(vwe," \u2014 "),_D=n(vwe,"A",{href:!0});var Set=s(_D);D9o=r(Set,"Data2VecTextForTokenClassification"),Set.forEach(t),j9o=r(vwe," (Data2VecText model)"),vwe.forEach(t),q9o=i(q),D5=n(q,"LI",{});var Twe=s(D5);Cse=n(Twe,"STRONG",{});var Pet=s(Cse);G9o=r(Pet,"deberta"),Pet.forEach(t),O9o=r(Twe," \u2014 "),uD=n(Twe,"A",{href:!0});var $et=s(uD);X9o=r($et,"DebertaForTokenClassification"),$et.forEach(t),V9o=r(Twe," (DeBERTa model)"),Twe.forEach(t),z9o=i(q),j5=n(q,"LI",{});var Fwe=s(j5);Mse=n(Fwe,"STRONG",{});var Iet=s(Mse);W9o=r(Iet,"deberta-v2"),Iet.forEach(t),Q9o=r(Fwe," \u2014 "),bD=n(Fwe,"A",{href:!0});var Net=s(bD);H9o=r(Net,"DebertaV2ForTokenClassification"),Net.forEach(t),U9o=r(Fwe," (DeBERTa-v2 model)"),Fwe.forEach(t),J9o=i(q),q5=n(q,"LI",{});var Cwe=s(q5);Ese=n(Cwe,"STRONG",{});var Det=s(Ese);Y9o=r(Det,"distilbert"),Det.forEach(t),K9o=r(Cwe," \u2014 "),vD=n(Cwe,"A",{href:!0});var jet=s(vD);Z9o=r(jet,"DistilBertForTokenClassification"),jet.forEach(t),eBo=r(Cwe," (DistilBERT model)"),Cwe.forEach(t),oBo=i(q),G5=n(q,"LI",{});var Mwe=s(G5);yse=n(Mwe,"STRONG",{});var qet=s(yse);rBo=r(qet,"electra"),qet.forEach(t),tBo=r(Mwe," \u2014 "),TD=n(Mwe,"A",{href:!0});var Get=s(TD);aBo=r(Get,"ElectraForTokenClassification"),Get.forEach(t),nBo=r(Mwe," (ELECTRA model)"),Mwe.forEach(t),sBo=i(q),O5=n(q,"LI",{});var Ewe=s(O5);wse=n(Ewe,"STRONG",{});var Oet=s(wse);lBo=r(Oet,"flaubert"),Oet.forEach(t),iBo=r(Ewe," \u2014 "),FD=n(Ewe,"A",{href:!0});var Xet=s(FD);dBo=r(Xet,"FlaubertForTokenClassification"),Xet.forEach(t),cBo=r(Ewe," (FlauBERT model)"),Ewe.forEach(t),fBo=i(q),X5=n(q,"LI",{});var ywe=s(X5);Ase=n(ywe,"STRONG",{});var Vet=s(Ase);mBo=r(Vet,"fnet"),Vet.forEach(t),gBo=r(ywe," \u2014 "),CD=n(ywe,"A",{href:!0});var zet=s(CD);hBo=r(zet,"FNetForTokenClassification"),zet.forEach(t),pBo=r(ywe," (FNet model)"),ywe.forEach(t),_Bo=i(q),V5=n(q,"LI",{});var wwe=s(V5);Lse=n(wwe,"STRONG",{});var Wet=s(Lse);uBo=r(Wet,"funnel"),Wet.forEach(t),bBo=r(wwe," \u2014 "),MD=n(wwe,"A",{href:!0});var Qet=s(MD);vBo=r(Qet,"FunnelForTokenClassification"),Qet.forEach(t),TBo=r(wwe," (Funnel Transformer model)"),wwe.forEach(t),FBo=i(q),z5=n(q,"LI",{});var Awe=s(z5);Bse=n(Awe,"STRONG",{});var Het=s(Bse);CBo=r(Het,"gpt2"),Het.forEach(t),MBo=r(Awe," \u2014 "),ED=n(Awe,"A",{href:!0});var Uet=s(ED);EBo=r(Uet,"GPT2ForTokenClassification"),Uet.forEach(t),yBo=r(Awe," (OpenAI GPT-2 model)"),Awe.forEach(t),wBo=i(q),W5=n(q,"LI",{});var Lwe=s(W5);xse=n(Lwe,"STRONG",{});var Jet=s(xse);ABo=r(Jet,"ibert"),Jet.forEach(t),LBo=r(Lwe," \u2014 "),yD=n(Lwe,"A",{href:!0});var Yet=s(yD);BBo=r(Yet,"IBertForTokenClassification"),Yet.forEach(t),xBo=r(Lwe," (I-BERT model)"),Lwe.forEach(t),kBo=i(q),Q5=n(q,"LI",{});var Bwe=s(Q5);kse=n(Bwe,"STRONG",{});var Ket=s(kse);RBo=r(Ket,"layoutlm"),Ket.forEach(t),SBo=r(Bwe," \u2014 "),wD=n(Bwe,"A",{href:!0});var Zet=s(wD);PBo=r(Zet,"LayoutLMForTokenClassification"),Zet.forEach(t),$Bo=r(Bwe," (LayoutLM model)"),Bwe.forEach(t),IBo=i(q),H5=n(q,"LI",{});var xwe=s(H5);Rse=n(xwe,"STRONG",{});var eot=s(Rse);NBo=r(eot,"layoutlmv2"),eot.forEach(t),DBo=r(xwe," \u2014 "),AD=n(xwe,"A",{href:!0});var oot=s(AD);jBo=r(oot,"LayoutLMv2ForTokenClassification"),oot.forEach(t),qBo=r(xwe," (LayoutLMv2 model)"),xwe.forEach(t),GBo=i(q),U5=n(q,"LI",{});var kwe=s(U5);Sse=n(kwe,"STRONG",{});var rot=s(Sse);OBo=r(rot,"longformer"),rot.forEach(t),XBo=r(kwe," \u2014 "),LD=n(kwe,"A",{href:!0});var tot=s(LD);VBo=r(tot,"LongformerForTokenClassification"),tot.forEach(t),zBo=r(kwe," (Longformer model)"),kwe.forEach(t),WBo=i(q),J5=n(q,"LI",{});var Rwe=s(J5);Pse=n(Rwe,"STRONG",{});var aot=s(Pse);QBo=r(aot,"megatron-bert"),aot.forEach(t),HBo=r(Rwe," \u2014 "),BD=n(Rwe,"A",{href:!0});var not=s(BD);UBo=r(not,"MegatronBertForTokenClassification"),not.forEach(t),JBo=r(Rwe," (MegatronBert model)"),Rwe.forEach(t),YBo=i(q),Y5=n(q,"LI",{});var Swe=s(Y5);$se=n(Swe,"STRONG",{});var sot=s($se);KBo=r(sot,"mobilebert"),sot.forEach(t),ZBo=r(Swe," \u2014 "),xD=n(Swe,"A",{href:!0});var lot=s(xD);exo=r(lot,"MobileBertForTokenClassification"),lot.forEach(t),oxo=r(Swe," (MobileBERT model)"),Swe.forEach(t),rxo=i(q),K5=n(q,"LI",{});var Pwe=s(K5);Ise=n(Pwe,"STRONG",{});var iot=s(Ise);txo=r(iot,"mpnet"),iot.forEach(t),axo=r(Pwe," \u2014 "),kD=n(Pwe,"A",{href:!0});var dot=s(kD);nxo=r(dot,"MPNetForTokenClassification"),dot.forEach(t),sxo=r(Pwe," (MPNet model)"),Pwe.forEach(t),lxo=i(q),Z5=n(q,"LI",{});var $we=s(Z5);Nse=n($we,"STRONG",{});var cot=s(Nse);ixo=r(cot,"nystromformer"),cot.forEach(t),dxo=r($we," \u2014 "),RD=n($we,"A",{href:!0});var fot=s(RD);cxo=r(fot,"NystromformerForTokenClassification"),fot.forEach(t),fxo=r($we," (Nystromformer model)"),$we.forEach(t),mxo=i(q),e2=n(q,"LI",{});var Iwe=s(e2);Dse=n(Iwe,"STRONG",{});var mot=s(Dse);gxo=r(mot,"qdqbert"),mot.forEach(t),hxo=r(Iwe," \u2014 "),SD=n(Iwe,"A",{href:!0});var got=s(SD);pxo=r(got,"QDQBertForTokenClassification"),got.forEach(t),_xo=r(Iwe," (QDQBert model)"),Iwe.forEach(t),uxo=i(q),o2=n(q,"LI",{});var Nwe=s(o2);jse=n(Nwe,"STRONG",{});var hot=s(jse);bxo=r(hot,"rembert"),hot.forEach(t),vxo=r(Nwe," \u2014 "),PD=n(Nwe,"A",{href:!0});var pot=s(PD);Txo=r(pot,"RemBertForTokenClassification"),pot.forEach(t),Fxo=r(Nwe," (RemBERT model)"),Nwe.forEach(t),Cxo=i(q),r2=n(q,"LI",{});var Dwe=s(r2);qse=n(Dwe,"STRONG",{});var _ot=s(qse);Mxo=r(_ot,"roberta"),_ot.forEach(t),Exo=r(Dwe," \u2014 "),$D=n(Dwe,"A",{href:!0});var uot=s($D);yxo=r(uot,"RobertaForTokenClassification"),uot.forEach(t),wxo=r(Dwe," (RoBERTa model)"),Dwe.forEach(t),Axo=i(q),t2=n(q,"LI",{});var jwe=s(t2);Gse=n(jwe,"STRONG",{});var bot=s(Gse);Lxo=r(bot,"roformer"),bot.forEach(t),Bxo=r(jwe," \u2014 "),ID=n(jwe,"A",{href:!0});var vot=s(ID);xxo=r(vot,"RoFormerForTokenClassification"),vot.forEach(t),kxo=r(jwe," (RoFormer model)"),jwe.forEach(t),Rxo=i(q),a2=n(q,"LI",{});var qwe=s(a2);Ose=n(qwe,"STRONG",{});var Tot=s(Ose);Sxo=r(Tot,"squeezebert"),Tot.forEach(t),Pxo=r(qwe," \u2014 "),ND=n(qwe,"A",{href:!0});var Fot=s(ND);$xo=r(Fot,"SqueezeBertForTokenClassification"),Fot.forEach(t),Ixo=r(qwe," (SqueezeBERT model)"),qwe.forEach(t),Nxo=i(q),n2=n(q,"LI",{});var Gwe=s(n2);Xse=n(Gwe,"STRONG",{});var Cot=s(Xse);Dxo=r(Cot,"xlm"),Cot.forEach(t),jxo=r(Gwe," \u2014 "),DD=n(Gwe,"A",{href:!0});var Mot=s(DD);qxo=r(Mot,"XLMForTokenClassification"),Mot.forEach(t),Gxo=r(Gwe," (XLM model)"),Gwe.forEach(t),Oxo=i(q),s2=n(q,"LI",{});var Owe=s(s2);Vse=n(Owe,"STRONG",{});var Eot=s(Vse);Xxo=r(Eot,"xlm-roberta"),Eot.forEach(t),Vxo=r(Owe," \u2014 "),jD=n(Owe,"A",{href:!0});var yot=s(jD);zxo=r(yot,"XLMRobertaForTokenClassification"),yot.forEach(t),Wxo=r(Owe," (XLM-RoBERTa model)"),Owe.forEach(t),Qxo=i(q),l2=n(q,"LI",{});var Xwe=s(l2);zse=n(Xwe,"STRONG",{});var wot=s(zse);Hxo=r(wot,"xlm-roberta-xl"),wot.forEach(t),Uxo=r(Xwe," \u2014 "),qD=n(Xwe,"A",{href:!0});var Aot=s(qD);Jxo=r(Aot,"XLMRobertaXLForTokenClassification"),Aot.forEach(t),Yxo=r(Xwe," (XLM-RoBERTa-XL model)"),Xwe.forEach(t),Kxo=i(q),i2=n(q,"LI",{});var Vwe=s(i2);Wse=n(Vwe,"STRONG",{});var Lot=s(Wse);Zxo=r(Lot,"xlnet"),Lot.forEach(t),eko=r(Vwe," \u2014 "),GD=n(Vwe,"A",{href:!0});var Bot=s(GD);oko=r(Bot,"XLNetForTokenClassification"),Bot.forEach(t),rko=r(Vwe," (XLNet model)"),Vwe.forEach(t),tko=i(q),d2=n(q,"LI",{});var zwe=s(d2);Qse=n(zwe,"STRONG",{});var xot=s(Qse);ako=r(xot,"yoso"),xot.forEach(t),nko=r(zwe," \u2014 "),OD=n(zwe,"A",{href:!0});var kot=s(OD);sko=r(kot,"YosoForTokenClassification"),kot.forEach(t),lko=r(zwe," (YOSO model)"),zwe.forEach(t),q.forEach(t),iko=i(Ht),c2=n(Ht,"P",{});var Wwe=s(c2);dko=r(Wwe,"The model is set in evaluation mode by default using "),Hse=n(Wwe,"CODE",{});var Rot=s(Hse);cko=r(Rot,"model.eval()"),Rot.forEach(t),fko=r(Wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Use=n(Wwe,"CODE",{});var Sot=s(Use);mko=r(Sot,"model.train()"),Sot.forEach(t),Wwe.forEach(t),gko=i(Ht),Jse=n(Ht,"P",{});var Pot=s(Jse);hko=r(Pot,"Examples:"),Pot.forEach(t),pko=i(Ht),m(U3.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Ike=i(c),Md=n(c,"H2",{class:!0});var zSe=s(Md);f2=n(zSe,"A",{id:!0,class:!0,href:!0});var $ot=s(f2);Yse=n($ot,"SPAN",{});var Iot=s(Yse);m(J3.$$.fragment,Iot),Iot.forEach(t),$ot.forEach(t),_ko=i(zSe),Kse=n(zSe,"SPAN",{});var Not=s(Kse);uko=r(Not,"AutoModelForQuestionAnswering"),Not.forEach(t),zSe.forEach(t),Nke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Y3.$$.fragment,fl),bko=i(fl),Ed=n(fl,"P",{});var pW=s(Ed);vko=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Zse=n(pW,"CODE",{});var Dot=s(Zse);Tko=r(Dot,"from_pretrained()"),Dot.forEach(t),Fko=r(pW,"class method or the "),ele=n(pW,"CODE",{});var jot=s(ele);Cko=r(jot,"from_config()"),jot.forEach(t),Mko=r(pW,`class
method.`),pW.forEach(t),Eko=i(fl),K3=n(fl,"P",{});var WSe=s(K3);yko=r(WSe,"This class cannot be instantiated directly using "),ole=n(WSe,"CODE",{});var qot=s(ole);wko=r(qot,"__init__()"),qot.forEach(t),Ako=r(WSe," (throws an error)."),WSe.forEach(t),Lko=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Z3.$$.fragment,ml),Bko=i(ml),rle=n(ml,"P",{});var Got=s(rle);xko=r(Got,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Got.forEach(t),kko=i(ml),yd=n(ml,"P",{});var _W=s(yd);Rko=r(_W,`Note:
Loading a model from its configuration file does `),tle=n(_W,"STRONG",{});var Oot=s(tle);Sko=r(Oot,"not"),Oot.forEach(t),Pko=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),ale=n(_W,"CODE",{});var Xot=s(ale);$ko=r(Xot,"from_pretrained()"),Xot.forEach(t),Iko=r(_W,"to load the model weights."),_W.forEach(t),Nko=i(ml),nle=n(ml,"P",{});var Vot=s(nle);Dko=r(Vot,"Examples:"),Vot.forEach(t),jko=i(ml),m(ey.$$.fragment,ml),ml.forEach(t),qko=i(fl),We=n(fl,"DIV",{class:!0});var Ut=s(We);m(oy.$$.fragment,Ut),Gko=i(Ut),sle=n(Ut,"P",{});var zot=s(sle);Oko=r(zot,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zot.forEach(t),Xko=i(Ut),Za=n(Ut,"P",{});var T4=s(Za);Vko=r(T4,"The model class to instantiate is selected based on the "),lle=n(T4,"CODE",{});var Wot=s(lle);zko=r(Wot,"model_type"),Wot.forEach(t),Wko=r(T4,` property of the config object (either
passed as an argument or loaded from `),ile=n(T4,"CODE",{});var Qot=s(ile);Qko=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),Hko=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(T4,"CODE",{});var Hot=s(dle);Uko=r(Hot,"pretrained_model_name_or_path"),Hot.forEach(t),Jko=r(T4,":"),T4.forEach(t),Yko=i(Ut),R=n(Ut,"UL",{});var P=s(R);m2=n(P,"LI",{});var Qwe=s(m2);cle=n(Qwe,"STRONG",{});var Uot=s(cle);Kko=r(Uot,"albert"),Uot.forEach(t),Zko=r(Qwe," \u2014 "),XD=n(Qwe,"A",{href:!0});var Jot=s(XD);eRo=r(Jot,"AlbertForQuestionAnswering"),Jot.forEach(t),oRo=r(Qwe," (ALBERT model)"),Qwe.forEach(t),rRo=i(P),g2=n(P,"LI",{});var Hwe=s(g2);fle=n(Hwe,"STRONG",{});var Yot=s(fle);tRo=r(Yot,"bart"),Yot.forEach(t),aRo=r(Hwe," \u2014 "),VD=n(Hwe,"A",{href:!0});var Kot=s(VD);nRo=r(Kot,"BartForQuestionAnswering"),Kot.forEach(t),sRo=r(Hwe," (BART model)"),Hwe.forEach(t),lRo=i(P),h2=n(P,"LI",{});var Uwe=s(h2);mle=n(Uwe,"STRONG",{});var Zot=s(mle);iRo=r(Zot,"bert"),Zot.forEach(t),dRo=r(Uwe," \u2014 "),zD=n(Uwe,"A",{href:!0});var ert=s(zD);cRo=r(ert,"BertForQuestionAnswering"),ert.forEach(t),fRo=r(Uwe," (BERT model)"),Uwe.forEach(t),mRo=i(P),p2=n(P,"LI",{});var Jwe=s(p2);gle=n(Jwe,"STRONG",{});var ort=s(gle);gRo=r(ort,"big_bird"),ort.forEach(t),hRo=r(Jwe," \u2014 "),WD=n(Jwe,"A",{href:!0});var rrt=s(WD);pRo=r(rrt,"BigBirdForQuestionAnswering"),rrt.forEach(t),_Ro=r(Jwe," (BigBird model)"),Jwe.forEach(t),uRo=i(P),_2=n(P,"LI",{});var Ywe=s(_2);hle=n(Ywe,"STRONG",{});var trt=s(hle);bRo=r(trt,"bigbird_pegasus"),trt.forEach(t),vRo=r(Ywe," \u2014 "),QD=n(Ywe,"A",{href:!0});var art=s(QD);TRo=r(art,"BigBirdPegasusForQuestionAnswering"),art.forEach(t),FRo=r(Ywe," (BigBirdPegasus model)"),Ywe.forEach(t),CRo=i(P),u2=n(P,"LI",{});var Kwe=s(u2);ple=n(Kwe,"STRONG",{});var nrt=s(ple);MRo=r(nrt,"camembert"),nrt.forEach(t),ERo=r(Kwe," \u2014 "),HD=n(Kwe,"A",{href:!0});var srt=s(HD);yRo=r(srt,"CamembertForQuestionAnswering"),srt.forEach(t),wRo=r(Kwe," (CamemBERT model)"),Kwe.forEach(t),ARo=i(P),b2=n(P,"LI",{});var Zwe=s(b2);_le=n(Zwe,"STRONG",{});var lrt=s(_le);LRo=r(lrt,"canine"),lrt.forEach(t),BRo=r(Zwe," \u2014 "),UD=n(Zwe,"A",{href:!0});var irt=s(UD);xRo=r(irt,"CanineForQuestionAnswering"),irt.forEach(t),kRo=r(Zwe," (Canine model)"),Zwe.forEach(t),RRo=i(P),v2=n(P,"LI",{});var e6e=s(v2);ule=n(e6e,"STRONG",{});var drt=s(ule);SRo=r(drt,"convbert"),drt.forEach(t),PRo=r(e6e," \u2014 "),JD=n(e6e,"A",{href:!0});var crt=s(JD);$Ro=r(crt,"ConvBertForQuestionAnswering"),crt.forEach(t),IRo=r(e6e," (ConvBERT model)"),e6e.forEach(t),NRo=i(P),T2=n(P,"LI",{});var o6e=s(T2);ble=n(o6e,"STRONG",{});var frt=s(ble);DRo=r(frt,"data2vec-text"),frt.forEach(t),jRo=r(o6e," \u2014 "),YD=n(o6e,"A",{href:!0});var mrt=s(YD);qRo=r(mrt,"Data2VecTextForQuestionAnswering"),mrt.forEach(t),GRo=r(o6e," (Data2VecText model)"),o6e.forEach(t),ORo=i(P),F2=n(P,"LI",{});var r6e=s(F2);vle=n(r6e,"STRONG",{});var grt=s(vle);XRo=r(grt,"deberta"),grt.forEach(t),VRo=r(r6e," \u2014 "),KD=n(r6e,"A",{href:!0});var hrt=s(KD);zRo=r(hrt,"DebertaForQuestionAnswering"),hrt.forEach(t),WRo=r(r6e," (DeBERTa model)"),r6e.forEach(t),QRo=i(P),C2=n(P,"LI",{});var t6e=s(C2);Tle=n(t6e,"STRONG",{});var prt=s(Tle);HRo=r(prt,"deberta-v2"),prt.forEach(t),URo=r(t6e," \u2014 "),ZD=n(t6e,"A",{href:!0});var _rt=s(ZD);JRo=r(_rt,"DebertaV2ForQuestionAnswering"),_rt.forEach(t),YRo=r(t6e," (DeBERTa-v2 model)"),t6e.forEach(t),KRo=i(P),M2=n(P,"LI",{});var a6e=s(M2);Fle=n(a6e,"STRONG",{});var urt=s(Fle);ZRo=r(urt,"distilbert"),urt.forEach(t),eSo=r(a6e," \u2014 "),ej=n(a6e,"A",{href:!0});var brt=s(ej);oSo=r(brt,"DistilBertForQuestionAnswering"),brt.forEach(t),rSo=r(a6e," (DistilBERT model)"),a6e.forEach(t),tSo=i(P),E2=n(P,"LI",{});var n6e=s(E2);Cle=n(n6e,"STRONG",{});var vrt=s(Cle);aSo=r(vrt,"electra"),vrt.forEach(t),nSo=r(n6e," \u2014 "),oj=n(n6e,"A",{href:!0});var Trt=s(oj);sSo=r(Trt,"ElectraForQuestionAnswering"),Trt.forEach(t),lSo=r(n6e," (ELECTRA model)"),n6e.forEach(t),iSo=i(P),y2=n(P,"LI",{});var s6e=s(y2);Mle=n(s6e,"STRONG",{});var Frt=s(Mle);dSo=r(Frt,"flaubert"),Frt.forEach(t),cSo=r(s6e," \u2014 "),rj=n(s6e,"A",{href:!0});var Crt=s(rj);fSo=r(Crt,"FlaubertForQuestionAnsweringSimple"),Crt.forEach(t),mSo=r(s6e," (FlauBERT model)"),s6e.forEach(t),gSo=i(P),w2=n(P,"LI",{});var l6e=s(w2);Ele=n(l6e,"STRONG",{});var Mrt=s(Ele);hSo=r(Mrt,"fnet"),Mrt.forEach(t),pSo=r(l6e," \u2014 "),tj=n(l6e,"A",{href:!0});var Ert=s(tj);_So=r(Ert,"FNetForQuestionAnswering"),Ert.forEach(t),uSo=r(l6e," (FNet model)"),l6e.forEach(t),bSo=i(P),A2=n(P,"LI",{});var i6e=s(A2);yle=n(i6e,"STRONG",{});var yrt=s(yle);vSo=r(yrt,"funnel"),yrt.forEach(t),TSo=r(i6e," \u2014 "),aj=n(i6e,"A",{href:!0});var wrt=s(aj);FSo=r(wrt,"FunnelForQuestionAnswering"),wrt.forEach(t),CSo=r(i6e," (Funnel Transformer model)"),i6e.forEach(t),MSo=i(P),L2=n(P,"LI",{});var d6e=s(L2);wle=n(d6e,"STRONG",{});var Art=s(wle);ESo=r(Art,"gptj"),Art.forEach(t),ySo=r(d6e," \u2014 "),nj=n(d6e,"A",{href:!0});var Lrt=s(nj);wSo=r(Lrt,"GPTJForQuestionAnswering"),Lrt.forEach(t),ASo=r(d6e," (GPT-J model)"),d6e.forEach(t),LSo=i(P),B2=n(P,"LI",{});var c6e=s(B2);Ale=n(c6e,"STRONG",{});var Brt=s(Ale);BSo=r(Brt,"ibert"),Brt.forEach(t),xSo=r(c6e," \u2014 "),sj=n(c6e,"A",{href:!0});var xrt=s(sj);kSo=r(xrt,"IBertForQuestionAnswering"),xrt.forEach(t),RSo=r(c6e," (I-BERT model)"),c6e.forEach(t),SSo=i(P),x2=n(P,"LI",{});var f6e=s(x2);Lle=n(f6e,"STRONG",{});var krt=s(Lle);PSo=r(krt,"layoutlmv2"),krt.forEach(t),$So=r(f6e," \u2014 "),lj=n(f6e,"A",{href:!0});var Rrt=s(lj);ISo=r(Rrt,"LayoutLMv2ForQuestionAnswering"),Rrt.forEach(t),NSo=r(f6e," (LayoutLMv2 model)"),f6e.forEach(t),DSo=i(P),k2=n(P,"LI",{});var m6e=s(k2);Ble=n(m6e,"STRONG",{});var Srt=s(Ble);jSo=r(Srt,"led"),Srt.forEach(t),qSo=r(m6e," \u2014 "),ij=n(m6e,"A",{href:!0});var Prt=s(ij);GSo=r(Prt,"LEDForQuestionAnswering"),Prt.forEach(t),OSo=r(m6e," (LED model)"),m6e.forEach(t),XSo=i(P),R2=n(P,"LI",{});var g6e=s(R2);xle=n(g6e,"STRONG",{});var $rt=s(xle);VSo=r($rt,"longformer"),$rt.forEach(t),zSo=r(g6e," \u2014 "),dj=n(g6e,"A",{href:!0});var Irt=s(dj);WSo=r(Irt,"LongformerForQuestionAnswering"),Irt.forEach(t),QSo=r(g6e," (Longformer model)"),g6e.forEach(t),HSo=i(P),S2=n(P,"LI",{});var h6e=s(S2);kle=n(h6e,"STRONG",{});var Nrt=s(kle);USo=r(Nrt,"lxmert"),Nrt.forEach(t),JSo=r(h6e," \u2014 "),cj=n(h6e,"A",{href:!0});var Drt=s(cj);YSo=r(Drt,"LxmertForQuestionAnswering"),Drt.forEach(t),KSo=r(h6e," (LXMERT model)"),h6e.forEach(t),ZSo=i(P),P2=n(P,"LI",{});var p6e=s(P2);Rle=n(p6e,"STRONG",{});var jrt=s(Rle);ePo=r(jrt,"mbart"),jrt.forEach(t),oPo=r(p6e," \u2014 "),fj=n(p6e,"A",{href:!0});var qrt=s(fj);rPo=r(qrt,"MBartForQuestionAnswering"),qrt.forEach(t),tPo=r(p6e," (mBART model)"),p6e.forEach(t),aPo=i(P),$2=n(P,"LI",{});var _6e=s($2);Sle=n(_6e,"STRONG",{});var Grt=s(Sle);nPo=r(Grt,"megatron-bert"),Grt.forEach(t),sPo=r(_6e," \u2014 "),mj=n(_6e,"A",{href:!0});var Ort=s(mj);lPo=r(Ort,"MegatronBertForQuestionAnswering"),Ort.forEach(t),iPo=r(_6e," (MegatronBert model)"),_6e.forEach(t),dPo=i(P),I2=n(P,"LI",{});var u6e=s(I2);Ple=n(u6e,"STRONG",{});var Xrt=s(Ple);cPo=r(Xrt,"mobilebert"),Xrt.forEach(t),fPo=r(u6e," \u2014 "),gj=n(u6e,"A",{href:!0});var Vrt=s(gj);mPo=r(Vrt,"MobileBertForQuestionAnswering"),Vrt.forEach(t),gPo=r(u6e," (MobileBERT model)"),u6e.forEach(t),hPo=i(P),N2=n(P,"LI",{});var b6e=s(N2);$le=n(b6e,"STRONG",{});var zrt=s($le);pPo=r(zrt,"mpnet"),zrt.forEach(t),_Po=r(b6e," \u2014 "),hj=n(b6e,"A",{href:!0});var Wrt=s(hj);uPo=r(Wrt,"MPNetForQuestionAnswering"),Wrt.forEach(t),bPo=r(b6e," (MPNet model)"),b6e.forEach(t),vPo=i(P),D2=n(P,"LI",{});var v6e=s(D2);Ile=n(v6e,"STRONG",{});var Qrt=s(Ile);TPo=r(Qrt,"nystromformer"),Qrt.forEach(t),FPo=r(v6e," \u2014 "),pj=n(v6e,"A",{href:!0});var Hrt=s(pj);CPo=r(Hrt,"NystromformerForQuestionAnswering"),Hrt.forEach(t),MPo=r(v6e," (Nystromformer model)"),v6e.forEach(t),EPo=i(P),j2=n(P,"LI",{});var T6e=s(j2);Nle=n(T6e,"STRONG",{});var Urt=s(Nle);yPo=r(Urt,"qdqbert"),Urt.forEach(t),wPo=r(T6e," \u2014 "),_j=n(T6e,"A",{href:!0});var Jrt=s(_j);APo=r(Jrt,"QDQBertForQuestionAnswering"),Jrt.forEach(t),LPo=r(T6e," (QDQBert model)"),T6e.forEach(t),BPo=i(P),q2=n(P,"LI",{});var F6e=s(q2);Dle=n(F6e,"STRONG",{});var Yrt=s(Dle);xPo=r(Yrt,"reformer"),Yrt.forEach(t),kPo=r(F6e," \u2014 "),uj=n(F6e,"A",{href:!0});var Krt=s(uj);RPo=r(Krt,"ReformerForQuestionAnswering"),Krt.forEach(t),SPo=r(F6e," (Reformer model)"),F6e.forEach(t),PPo=i(P),G2=n(P,"LI",{});var C6e=s(G2);jle=n(C6e,"STRONG",{});var Zrt=s(jle);$Po=r(Zrt,"rembert"),Zrt.forEach(t),IPo=r(C6e," \u2014 "),bj=n(C6e,"A",{href:!0});var ett=s(bj);NPo=r(ett,"RemBertForQuestionAnswering"),ett.forEach(t),DPo=r(C6e," (RemBERT model)"),C6e.forEach(t),jPo=i(P),O2=n(P,"LI",{});var M6e=s(O2);qle=n(M6e,"STRONG",{});var ott=s(qle);qPo=r(ott,"roberta"),ott.forEach(t),GPo=r(M6e," \u2014 "),vj=n(M6e,"A",{href:!0});var rtt=s(vj);OPo=r(rtt,"RobertaForQuestionAnswering"),rtt.forEach(t),XPo=r(M6e," (RoBERTa model)"),M6e.forEach(t),VPo=i(P),X2=n(P,"LI",{});var E6e=s(X2);Gle=n(E6e,"STRONG",{});var ttt=s(Gle);zPo=r(ttt,"roformer"),ttt.forEach(t),WPo=r(E6e," \u2014 "),Tj=n(E6e,"A",{href:!0});var att=s(Tj);QPo=r(att,"RoFormerForQuestionAnswering"),att.forEach(t),HPo=r(E6e," (RoFormer model)"),E6e.forEach(t),UPo=i(P),V2=n(P,"LI",{});var y6e=s(V2);Ole=n(y6e,"STRONG",{});var ntt=s(Ole);JPo=r(ntt,"splinter"),ntt.forEach(t),YPo=r(y6e," \u2014 "),Fj=n(y6e,"A",{href:!0});var stt=s(Fj);KPo=r(stt,"SplinterForQuestionAnswering"),stt.forEach(t),ZPo=r(y6e," (Splinter model)"),y6e.forEach(t),e$o=i(P),z2=n(P,"LI",{});var w6e=s(z2);Xle=n(w6e,"STRONG",{});var ltt=s(Xle);o$o=r(ltt,"squeezebert"),ltt.forEach(t),r$o=r(w6e," \u2014 "),Cj=n(w6e,"A",{href:!0});var itt=s(Cj);t$o=r(itt,"SqueezeBertForQuestionAnswering"),itt.forEach(t),a$o=r(w6e," (SqueezeBERT model)"),w6e.forEach(t),n$o=i(P),W2=n(P,"LI",{});var A6e=s(W2);Vle=n(A6e,"STRONG",{});var dtt=s(Vle);s$o=r(dtt,"xlm"),dtt.forEach(t),l$o=r(A6e," \u2014 "),Mj=n(A6e,"A",{href:!0});var ctt=s(Mj);i$o=r(ctt,"XLMForQuestionAnsweringSimple"),ctt.forEach(t),d$o=r(A6e," (XLM model)"),A6e.forEach(t),c$o=i(P),Q2=n(P,"LI",{});var L6e=s(Q2);zle=n(L6e,"STRONG",{});var ftt=s(zle);f$o=r(ftt,"xlm-roberta"),ftt.forEach(t),m$o=r(L6e," \u2014 "),Ej=n(L6e,"A",{href:!0});var mtt=s(Ej);g$o=r(mtt,"XLMRobertaForQuestionAnswering"),mtt.forEach(t),h$o=r(L6e," (XLM-RoBERTa model)"),L6e.forEach(t),p$o=i(P),H2=n(P,"LI",{});var B6e=s(H2);Wle=n(B6e,"STRONG",{});var gtt=s(Wle);_$o=r(gtt,"xlm-roberta-xl"),gtt.forEach(t),u$o=r(B6e," \u2014 "),yj=n(B6e,"A",{href:!0});var htt=s(yj);b$o=r(htt,"XLMRobertaXLForQuestionAnswering"),htt.forEach(t),v$o=r(B6e," (XLM-RoBERTa-XL model)"),B6e.forEach(t),T$o=i(P),U2=n(P,"LI",{});var x6e=s(U2);Qle=n(x6e,"STRONG",{});var ptt=s(Qle);F$o=r(ptt,"xlnet"),ptt.forEach(t),C$o=r(x6e," \u2014 "),wj=n(x6e,"A",{href:!0});var _tt=s(wj);M$o=r(_tt,"XLNetForQuestionAnsweringSimple"),_tt.forEach(t),E$o=r(x6e," (XLNet model)"),x6e.forEach(t),y$o=i(P),J2=n(P,"LI",{});var k6e=s(J2);Hle=n(k6e,"STRONG",{});var utt=s(Hle);w$o=r(utt,"yoso"),utt.forEach(t),A$o=r(k6e," \u2014 "),Aj=n(k6e,"A",{href:!0});var btt=s(Aj);L$o=r(btt,"YosoForQuestionAnswering"),btt.forEach(t),B$o=r(k6e," (YOSO model)"),k6e.forEach(t),P.forEach(t),x$o=i(Ut),Y2=n(Ut,"P",{});var R6e=s(Y2);k$o=r(R6e,"The model is set in evaluation mode by default using "),Ule=n(R6e,"CODE",{});var vtt=s(Ule);R$o=r(vtt,"model.eval()"),vtt.forEach(t),S$o=r(R6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jle=n(R6e,"CODE",{});var Ttt=s(Jle);P$o=r(Ttt,"model.train()"),Ttt.forEach(t),R6e.forEach(t),$$o=i(Ut),Yle=n(Ut,"P",{});var Ftt=s(Yle);I$o=r(Ftt,"Examples:"),Ftt.forEach(t),N$o=i(Ut),m(ry.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),Dke=i(c),wd=n(c,"H2",{class:!0});var QSe=s(wd);K2=n(QSe,"A",{id:!0,class:!0,href:!0});var Ctt=s(K2);Kle=n(Ctt,"SPAN",{});var Mtt=s(Kle);m(ty.$$.fragment,Mtt),Mtt.forEach(t),Ctt.forEach(t),D$o=i(QSe),Zle=n(QSe,"SPAN",{});var Ett=s(Zle);j$o=r(Ett,"AutoModelForTableQuestionAnswering"),Ett.forEach(t),QSe.forEach(t),jke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(ay.$$.fragment,gl),q$o=i(gl),Ad=n(gl,"P",{});var uW=s(Ad);G$o=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),eie=n(uW,"CODE",{});var ytt=s(eie);O$o=r(ytt,"from_pretrained()"),ytt.forEach(t),X$o=r(uW,"class method or the "),oie=n(uW,"CODE",{});var wtt=s(oie);V$o=r(wtt,"from_config()"),wtt.forEach(t),z$o=r(uW,`class
method.`),uW.forEach(t),W$o=i(gl),ny=n(gl,"P",{});var HSe=s(ny);Q$o=r(HSe,"This class cannot be instantiated directly using "),rie=n(HSe,"CODE",{});var Att=s(rie);H$o=r(Att,"__init__()"),Att.forEach(t),U$o=r(HSe," (throws an error)."),HSe.forEach(t),J$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(sy.$$.fragment,hl),Y$o=i(hl),tie=n(hl,"P",{});var Ltt=s(tie);K$o=r(Ltt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Ltt.forEach(t),Z$o=i(hl),Ld=n(hl,"P",{});var bW=s(Ld);eIo=r(bW,`Note:
Loading a model from its configuration file does `),aie=n(bW,"STRONG",{});var Btt=s(aie);oIo=r(Btt,"not"),Btt.forEach(t),rIo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nie=n(bW,"CODE",{});var xtt=s(nie);tIo=r(xtt,"from_pretrained()"),xtt.forEach(t),aIo=r(bW,"to load the model weights."),bW.forEach(t),nIo=i(hl),sie=n(hl,"P",{});var ktt=s(sie);sIo=r(ktt,"Examples:"),ktt.forEach(t),lIo=i(hl),m(ly.$$.fragment,hl),hl.forEach(t),iIo=i(gl),Qe=n(gl,"DIV",{class:!0});var Jt=s(Qe);m(iy.$$.fragment,Jt),dIo=i(Jt),lie=n(Jt,"P",{});var Rtt=s(lie);cIo=r(Rtt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rtt.forEach(t),fIo=i(Jt),en=n(Jt,"P",{});var F4=s(en);mIo=r(F4,"The model class to instantiate is selected based on the "),iie=n(F4,"CODE",{});var Stt=s(iie);gIo=r(Stt,"model_type"),Stt.forEach(t),hIo=r(F4,` property of the config object (either
passed as an argument or loaded from `),die=n(F4,"CODE",{});var Ptt=s(die);pIo=r(Ptt,"pretrained_model_name_or_path"),Ptt.forEach(t),_Io=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=n(F4,"CODE",{});var $tt=s(cie);uIo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),bIo=r(F4,":"),F4.forEach(t),vIo=i(Jt),fie=n(Jt,"UL",{});var Itt=s(fie);Z2=n(Itt,"LI",{});var S6e=s(Z2);mie=n(S6e,"STRONG",{});var Ntt=s(mie);TIo=r(Ntt,"tapas"),Ntt.forEach(t),FIo=r(S6e," \u2014 "),Lj=n(S6e,"A",{href:!0});var Dtt=s(Lj);CIo=r(Dtt,"TapasForQuestionAnswering"),Dtt.forEach(t),MIo=r(S6e," (TAPAS model)"),S6e.forEach(t),Itt.forEach(t),EIo=i(Jt),ev=n(Jt,"P",{});var P6e=s(ev);yIo=r(P6e,"The model is set in evaluation mode by default using "),gie=n(P6e,"CODE",{});var jtt=s(gie);wIo=r(jtt,"model.eval()"),jtt.forEach(t),AIo=r(P6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(P6e,"CODE",{});var qtt=s(hie);LIo=r(qtt,"model.train()"),qtt.forEach(t),P6e.forEach(t),BIo=i(Jt),pie=n(Jt,"P",{});var Gtt=s(pie);xIo=r(Gtt,"Examples:"),Gtt.forEach(t),kIo=i(Jt),m(dy.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),qke=i(c),Bd=n(c,"H2",{class:!0});var USe=s(Bd);ov=n(USe,"A",{id:!0,class:!0,href:!0});var Ott=s(ov);_ie=n(Ott,"SPAN",{});var Xtt=s(_ie);m(cy.$$.fragment,Xtt),Xtt.forEach(t),Ott.forEach(t),RIo=i(USe),uie=n(USe,"SPAN",{});var Vtt=s(uie);SIo=r(Vtt,"AutoModelForImageClassification"),Vtt.forEach(t),USe.forEach(t),Gke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(fy.$$.fragment,pl),PIo=i(pl),xd=n(pl,"P",{});var vW=s(xd);$Io=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bie=n(vW,"CODE",{});var ztt=s(bie);IIo=r(ztt,"from_pretrained()"),ztt.forEach(t),NIo=r(vW,"class method or the "),vie=n(vW,"CODE",{});var Wtt=s(vie);DIo=r(Wtt,"from_config()"),Wtt.forEach(t),jIo=r(vW,`class
method.`),vW.forEach(t),qIo=i(pl),my=n(pl,"P",{});var JSe=s(my);GIo=r(JSe,"This class cannot be instantiated directly using "),Tie=n(JSe,"CODE",{});var Qtt=s(Tie);OIo=r(Qtt,"__init__()"),Qtt.forEach(t),XIo=r(JSe," (throws an error)."),JSe.forEach(t),VIo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(gy.$$.fragment,_l),zIo=i(_l),Fie=n(_l,"P",{});var Htt=s(Fie);WIo=r(Htt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Htt.forEach(t),QIo=i(_l),kd=n(_l,"P",{});var TW=s(kd);HIo=r(TW,`Note:
Loading a model from its configuration file does `),Cie=n(TW,"STRONG",{});var Utt=s(Cie);UIo=r(Utt,"not"),Utt.forEach(t),JIo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mie=n(TW,"CODE",{});var Jtt=s(Mie);YIo=r(Jtt,"from_pretrained()"),Jtt.forEach(t),KIo=r(TW,"to load the model weights."),TW.forEach(t),ZIo=i(_l),Eie=n(_l,"P",{});var Ytt=s(Eie);eNo=r(Ytt,"Examples:"),Ytt.forEach(t),oNo=i(_l),m(hy.$$.fragment,_l),_l.forEach(t),rNo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(py.$$.fragment,Yt),tNo=i(Yt),yie=n(Yt,"P",{});var Ktt=s(yie);aNo=r(Ktt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ktt.forEach(t),nNo=i(Yt),on=n(Yt,"P",{});var C4=s(on);sNo=r(C4,"The model class to instantiate is selected based on the "),wie=n(C4,"CODE",{});var Ztt=s(wie);lNo=r(Ztt,"model_type"),Ztt.forEach(t),iNo=r(C4,` property of the config object (either
passed as an argument or loaded from `),Aie=n(C4,"CODE",{});var eat=s(Aie);dNo=r(eat,"pretrained_model_name_or_path"),eat.forEach(t),cNo=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lie=n(C4,"CODE",{});var oat=s(Lie);fNo=r(oat,"pretrained_model_name_or_path"),oat.forEach(t),mNo=r(C4,":"),C4.forEach(t),gNo=i(Yt),me=n(Yt,"UL",{});var Te=s(me);rv=n(Te,"LI",{});var $6e=s(rv);Bie=n($6e,"STRONG",{});var rat=s(Bie);hNo=r(rat,"beit"),rat.forEach(t),pNo=r($6e," \u2014 "),Bj=n($6e,"A",{href:!0});var tat=s(Bj);_No=r(tat,"BeitForImageClassification"),tat.forEach(t),uNo=r($6e," (BEiT model)"),$6e.forEach(t),bNo=i(Te),tv=n(Te,"LI",{});var I6e=s(tv);xie=n(I6e,"STRONG",{});var aat=s(xie);vNo=r(aat,"convnext"),aat.forEach(t),TNo=r(I6e," \u2014 "),xj=n(I6e,"A",{href:!0});var nat=s(xj);FNo=r(nat,"ConvNextForImageClassification"),nat.forEach(t),CNo=r(I6e," (ConvNext model)"),I6e.forEach(t),MNo=i(Te),qs=n(Te,"LI",{});var YL=s(qs);kie=n(YL,"STRONG",{});var sat=s(kie);ENo=r(sat,"deit"),sat.forEach(t),yNo=r(YL," \u2014 "),kj=n(YL,"A",{href:!0});var lat=s(kj);wNo=r(lat,"DeiTForImageClassification"),lat.forEach(t),ANo=r(YL," or "),Rj=n(YL,"A",{href:!0});var iat=s(Rj);LNo=r(iat,"DeiTForImageClassificationWithTeacher"),iat.forEach(t),BNo=r(YL," (DeiT model)"),YL.forEach(t),xNo=i(Te),av=n(Te,"LI",{});var N6e=s(av);Rie=n(N6e,"STRONG",{});var dat=s(Rie);kNo=r(dat,"imagegpt"),dat.forEach(t),RNo=r(N6e," \u2014 "),Sj=n(N6e,"A",{href:!0});var cat=s(Sj);SNo=r(cat,"ImageGPTForImageClassification"),cat.forEach(t),PNo=r(N6e," (ImageGPT model)"),N6e.forEach(t),$No=i(Te),ma=n(Te,"LI",{});var $f=s(ma);Sie=n($f,"STRONG",{});var fat=s(Sie);INo=r(fat,"perceiver"),fat.forEach(t),NNo=r($f," \u2014 "),Pj=n($f,"A",{href:!0});var mat=s(Pj);DNo=r(mat,"PerceiverForImageClassificationLearned"),mat.forEach(t),jNo=r($f," or "),$j=n($f,"A",{href:!0});var gat=s($j);qNo=r(gat,"PerceiverForImageClassificationFourier"),gat.forEach(t),GNo=r($f," or "),Ij=n($f,"A",{href:!0});var hat=s(Ij);ONo=r(hat,"PerceiverForImageClassificationConvProcessing"),hat.forEach(t),XNo=r($f," (Perceiver model)"),$f.forEach(t),VNo=i(Te),nv=n(Te,"LI",{});var D6e=s(nv);Pie=n(D6e,"STRONG",{});var pat=s(Pie);zNo=r(pat,"poolformer"),pat.forEach(t),WNo=r(D6e," \u2014 "),Nj=n(D6e,"A",{href:!0});var _at=s(Nj);QNo=r(_at,"PoolFormerForImageClassification"),_at.forEach(t),HNo=r(D6e," (PoolFormer model)"),D6e.forEach(t),UNo=i(Te),sv=n(Te,"LI",{});var j6e=s(sv);$ie=n(j6e,"STRONG",{});var uat=s($ie);JNo=r(uat,"resnet"),uat.forEach(t),YNo=r(j6e," \u2014 "),Dj=n(j6e,"A",{href:!0});var bat=s(Dj);KNo=r(bat,"ResNetForImageClassification"),bat.forEach(t),ZNo=r(j6e," (ResNet model)"),j6e.forEach(t),eDo=i(Te),lv=n(Te,"LI",{});var q6e=s(lv);Iie=n(q6e,"STRONG",{});var vat=s(Iie);oDo=r(vat,"segformer"),vat.forEach(t),rDo=r(q6e," \u2014 "),jj=n(q6e,"A",{href:!0});var Tat=s(jj);tDo=r(Tat,"SegformerForImageClassification"),Tat.forEach(t),aDo=r(q6e," (SegFormer model)"),q6e.forEach(t),nDo=i(Te),iv=n(Te,"LI",{});var G6e=s(iv);Nie=n(G6e,"STRONG",{});var Fat=s(Nie);sDo=r(Fat,"swin"),Fat.forEach(t),lDo=r(G6e," \u2014 "),qj=n(G6e,"A",{href:!0});var Cat=s(qj);iDo=r(Cat,"SwinForImageClassification"),Cat.forEach(t),dDo=r(G6e," (Swin model)"),G6e.forEach(t),cDo=i(Te),dv=n(Te,"LI",{});var O6e=s(dv);Die=n(O6e,"STRONG",{});var Mat=s(Die);fDo=r(Mat,"van"),Mat.forEach(t),mDo=r(O6e," \u2014 "),Gj=n(O6e,"A",{href:!0});var Eat=s(Gj);gDo=r(Eat,"VanForImageClassification"),Eat.forEach(t),hDo=r(O6e," (VAN model)"),O6e.forEach(t),pDo=i(Te),cv=n(Te,"LI",{});var X6e=s(cv);jie=n(X6e,"STRONG",{});var yat=s(jie);_Do=r(yat,"vit"),yat.forEach(t),uDo=r(X6e," \u2014 "),Oj=n(X6e,"A",{href:!0});var wat=s(Oj);bDo=r(wat,"ViTForImageClassification"),wat.forEach(t),vDo=r(X6e," (ViT model)"),X6e.forEach(t),Te.forEach(t),TDo=i(Yt),fv=n(Yt,"P",{});var V6e=s(fv);FDo=r(V6e,"The model is set in evaluation mode by default using "),qie=n(V6e,"CODE",{});var Aat=s(qie);CDo=r(Aat,"model.eval()"),Aat.forEach(t),MDo=r(V6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(V6e,"CODE",{});var Lat=s(Gie);EDo=r(Lat,"model.train()"),Lat.forEach(t),V6e.forEach(t),yDo=i(Yt),Oie=n(Yt,"P",{});var Bat=s(Oie);wDo=r(Bat,"Examples:"),Bat.forEach(t),ADo=i(Yt),m(_y.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Oke=i(c),Rd=n(c,"H2",{class:!0});var YSe=s(Rd);mv=n(YSe,"A",{id:!0,class:!0,href:!0});var xat=s(mv);Xie=n(xat,"SPAN",{});var kat=s(Xie);m(uy.$$.fragment,kat),kat.forEach(t),xat.forEach(t),LDo=i(YSe),Vie=n(YSe,"SPAN",{});var Rat=s(Vie);BDo=r(Rat,"AutoModelForVision2Seq"),Rat.forEach(t),YSe.forEach(t),Xke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(by.$$.fragment,ul),xDo=i(ul),Sd=n(ul,"P",{});var FW=s(Sd);kDo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zie=n(FW,"CODE",{});var Sat=s(zie);RDo=r(Sat,"from_pretrained()"),Sat.forEach(t),SDo=r(FW,"class method or the "),Wie=n(FW,"CODE",{});var Pat=s(Wie);PDo=r(Pat,"from_config()"),Pat.forEach(t),$Do=r(FW,`class
method.`),FW.forEach(t),IDo=i(ul),vy=n(ul,"P",{});var KSe=s(vy);NDo=r(KSe,"This class cannot be instantiated directly using "),Qie=n(KSe,"CODE",{});var $at=s(Qie);DDo=r($at,"__init__()"),$at.forEach(t),jDo=r(KSe," (throws an error)."),KSe.forEach(t),qDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Ty.$$.fragment,bl),GDo=i(bl),Hie=n(bl,"P",{});var Iat=s(Hie);ODo=r(Iat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Iat.forEach(t),XDo=i(bl),Pd=n(bl,"P",{});var CW=s(Pd);VDo=r(CW,`Note:
Loading a model from its configuration file does `),Uie=n(CW,"STRONG",{});var Nat=s(Uie);zDo=r(Nat,"not"),Nat.forEach(t),WDo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jie=n(CW,"CODE",{});var Dat=s(Jie);QDo=r(Dat,"from_pretrained()"),Dat.forEach(t),HDo=r(CW,"to load the model weights."),CW.forEach(t),UDo=i(bl),Yie=n(bl,"P",{});var jat=s(Yie);JDo=r(jat,"Examples:"),jat.forEach(t),YDo=i(bl),m(Fy.$$.fragment,bl),bl.forEach(t),KDo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Cy.$$.fragment,Kt),ZDo=i(Kt),Kie=n(Kt,"P",{});var qat=s(Kie);ejo=r(qat,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qat.forEach(t),ojo=i(Kt),rn=n(Kt,"P",{});var M4=s(rn);rjo=r(M4,"The model class to instantiate is selected based on the "),Zie=n(M4,"CODE",{});var Gat=s(Zie);tjo=r(Gat,"model_type"),Gat.forEach(t),ajo=r(M4,` property of the config object (either
passed as an argument or loaded from `),ede=n(M4,"CODE",{});var Oat=s(ede);njo=r(Oat,"pretrained_model_name_or_path"),Oat.forEach(t),sjo=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ode=n(M4,"CODE",{});var Xat=s(ode);ljo=r(Xat,"pretrained_model_name_or_path"),Xat.forEach(t),ijo=r(M4,":"),M4.forEach(t),djo=i(Kt),rde=n(Kt,"UL",{});var Vat=s(rde);gv=n(Vat,"LI",{});var z6e=s(gv);tde=n(z6e,"STRONG",{});var zat=s(tde);cjo=r(zat,"vision-encoder-decoder"),zat.forEach(t),fjo=r(z6e," \u2014 "),Xj=n(z6e,"A",{href:!0});var Wat=s(Xj);mjo=r(Wat,"VisionEncoderDecoderModel"),Wat.forEach(t),gjo=r(z6e," (Vision Encoder decoder model)"),z6e.forEach(t),Vat.forEach(t),hjo=i(Kt),hv=n(Kt,"P",{});var W6e=s(hv);pjo=r(W6e,"The model is set in evaluation mode by default using "),ade=n(W6e,"CODE",{});var Qat=s(ade);_jo=r(Qat,"model.eval()"),Qat.forEach(t),ujo=r(W6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nde=n(W6e,"CODE",{});var Hat=s(nde);bjo=r(Hat,"model.train()"),Hat.forEach(t),W6e.forEach(t),vjo=i(Kt),sde=n(Kt,"P",{});var Uat=s(sde);Tjo=r(Uat,"Examples:"),Uat.forEach(t),Fjo=i(Kt),m(My.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),Vke=i(c),$d=n(c,"H2",{class:!0});var ZSe=s($d);pv=n(ZSe,"A",{id:!0,class:!0,href:!0});var Jat=s(pv);lde=n(Jat,"SPAN",{});var Yat=s(lde);m(Ey.$$.fragment,Yat),Yat.forEach(t),Jat.forEach(t),Cjo=i(ZSe),ide=n(ZSe,"SPAN",{});var Kat=s(ide);Mjo=r(Kat,"AutoModelForAudioClassification"),Kat.forEach(t),ZSe.forEach(t),zke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(yy.$$.fragment,vl),Ejo=i(vl),Id=n(vl,"P",{});var MW=s(Id);yjo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dde=n(MW,"CODE",{});var Zat=s(dde);wjo=r(Zat,"from_pretrained()"),Zat.forEach(t),Ajo=r(MW,"class method or the "),cde=n(MW,"CODE",{});var ent=s(cde);Ljo=r(ent,"from_config()"),ent.forEach(t),Bjo=r(MW,`class
method.`),MW.forEach(t),xjo=i(vl),wy=n(vl,"P",{});var ePe=s(wy);kjo=r(ePe,"This class cannot be instantiated directly using "),fde=n(ePe,"CODE",{});var ont=s(fde);Rjo=r(ont,"__init__()"),ont.forEach(t),Sjo=r(ePe," (throws an error)."),ePe.forEach(t),Pjo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(Ay.$$.fragment,Tl),$jo=i(Tl),mde=n(Tl,"P",{});var rnt=s(mde);Ijo=r(rnt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rnt.forEach(t),Njo=i(Tl),Nd=n(Tl,"P",{});var EW=s(Nd);Djo=r(EW,`Note:
Loading a model from its configuration file does `),gde=n(EW,"STRONG",{});var tnt=s(gde);jjo=r(tnt,"not"),tnt.forEach(t),qjo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hde=n(EW,"CODE",{});var ant=s(hde);Gjo=r(ant,"from_pretrained()"),ant.forEach(t),Ojo=r(EW,"to load the model weights."),EW.forEach(t),Xjo=i(Tl),pde=n(Tl,"P",{});var nnt=s(pde);Vjo=r(nnt,"Examples:"),nnt.forEach(t),zjo=i(Tl),m(Ly.$$.fragment,Tl),Tl.forEach(t),Wjo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(By.$$.fragment,Zt),Qjo=i(Zt),_de=n(Zt,"P",{});var snt=s(_de);Hjo=r(snt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),snt.forEach(t),Ujo=i(Zt),tn=n(Zt,"P",{});var E4=s(tn);Jjo=r(E4,"The model class to instantiate is selected based on the "),ude=n(E4,"CODE",{});var lnt=s(ude);Yjo=r(lnt,"model_type"),lnt.forEach(t),Kjo=r(E4,` property of the config object (either
passed as an argument or loaded from `),bde=n(E4,"CODE",{});var int=s(bde);Zjo=r(int,"pretrained_model_name_or_path"),int.forEach(t),eqo=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=n(E4,"CODE",{});var dnt=s(vde);oqo=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),rqo=r(E4,":"),E4.forEach(t),tqo=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);_v=n(qo,"LI",{});var Q6e=s(_v);Tde=n(Q6e,"STRONG",{});var cnt=s(Tde);aqo=r(cnt,"data2vec-audio"),cnt.forEach(t),nqo=r(Q6e," \u2014 "),Vj=n(Q6e,"A",{href:!0});var fnt=s(Vj);sqo=r(fnt,"Data2VecAudioForSequenceClassification"),fnt.forEach(t),lqo=r(Q6e," (Data2VecAudio model)"),Q6e.forEach(t),iqo=i(qo),uv=n(qo,"LI",{});var H6e=s(uv);Fde=n(H6e,"STRONG",{});var mnt=s(Fde);dqo=r(mnt,"hubert"),mnt.forEach(t),cqo=r(H6e," \u2014 "),zj=n(H6e,"A",{href:!0});var gnt=s(zj);fqo=r(gnt,"HubertForSequenceClassification"),gnt.forEach(t),mqo=r(H6e," (Hubert model)"),H6e.forEach(t),gqo=i(qo),bv=n(qo,"LI",{});var U6e=s(bv);Cde=n(U6e,"STRONG",{});var hnt=s(Cde);hqo=r(hnt,"sew"),hnt.forEach(t),pqo=r(U6e," \u2014 "),Wj=n(U6e,"A",{href:!0});var pnt=s(Wj);_qo=r(pnt,"SEWForSequenceClassification"),pnt.forEach(t),uqo=r(U6e," (SEW model)"),U6e.forEach(t),bqo=i(qo),vv=n(qo,"LI",{});var J6e=s(vv);Mde=n(J6e,"STRONG",{});var _nt=s(Mde);vqo=r(_nt,"sew-d"),_nt.forEach(t),Tqo=r(J6e," \u2014 "),Qj=n(J6e,"A",{href:!0});var unt=s(Qj);Fqo=r(unt,"SEWDForSequenceClassification"),unt.forEach(t),Cqo=r(J6e," (SEW-D model)"),J6e.forEach(t),Mqo=i(qo),Tv=n(qo,"LI",{});var Y6e=s(Tv);Ede=n(Y6e,"STRONG",{});var bnt=s(Ede);Eqo=r(bnt,"unispeech"),bnt.forEach(t),yqo=r(Y6e," \u2014 "),Hj=n(Y6e,"A",{href:!0});var vnt=s(Hj);wqo=r(vnt,"UniSpeechForSequenceClassification"),vnt.forEach(t),Aqo=r(Y6e," (UniSpeech model)"),Y6e.forEach(t),Lqo=i(qo),Fv=n(qo,"LI",{});var K6e=s(Fv);yde=n(K6e,"STRONG",{});var Tnt=s(yde);Bqo=r(Tnt,"unispeech-sat"),Tnt.forEach(t),xqo=r(K6e," \u2014 "),Uj=n(K6e,"A",{href:!0});var Fnt=s(Uj);kqo=r(Fnt,"UniSpeechSatForSequenceClassification"),Fnt.forEach(t),Rqo=r(K6e," (UniSpeechSat model)"),K6e.forEach(t),Sqo=i(qo),Cv=n(qo,"LI",{});var Z6e=s(Cv);wde=n(Z6e,"STRONG",{});var Cnt=s(wde);Pqo=r(Cnt,"wav2vec2"),Cnt.forEach(t),$qo=r(Z6e," \u2014 "),Jj=n(Z6e,"A",{href:!0});var Mnt=s(Jj);Iqo=r(Mnt,"Wav2Vec2ForSequenceClassification"),Mnt.forEach(t),Nqo=r(Z6e," (Wav2Vec2 model)"),Z6e.forEach(t),Dqo=i(qo),Mv=n(qo,"LI",{});var eAe=s(Mv);Ade=n(eAe,"STRONG",{});var Ent=s(Ade);jqo=r(Ent,"wavlm"),Ent.forEach(t),qqo=r(eAe," \u2014 "),Yj=n(eAe,"A",{href:!0});var ynt=s(Yj);Gqo=r(ynt,"WavLMForSequenceClassification"),ynt.forEach(t),Oqo=r(eAe," (WavLM model)"),eAe.forEach(t),qo.forEach(t),Xqo=i(Zt),Ev=n(Zt,"P",{});var oAe=s(Ev);Vqo=r(oAe,"The model is set in evaluation mode by default using "),Lde=n(oAe,"CODE",{});var wnt=s(Lde);zqo=r(wnt,"model.eval()"),wnt.forEach(t),Wqo=r(oAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bde=n(oAe,"CODE",{});var Ant=s(Bde);Qqo=r(Ant,"model.train()"),Ant.forEach(t),oAe.forEach(t),Hqo=i(Zt),xde=n(Zt,"P",{});var Lnt=s(xde);Uqo=r(Lnt,"Examples:"),Lnt.forEach(t),Jqo=i(Zt),m(xy.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Wke=i(c),Dd=n(c,"H2",{class:!0});var oPe=s(Dd);yv=n(oPe,"A",{id:!0,class:!0,href:!0});var Bnt=s(yv);kde=n(Bnt,"SPAN",{});var xnt=s(kde);m(ky.$$.fragment,xnt),xnt.forEach(t),Bnt.forEach(t),Yqo=i(oPe),Rde=n(oPe,"SPAN",{});var knt=s(Rde);Kqo=r(knt,"AutoModelForAudioFrameClassification"),knt.forEach(t),oPe.forEach(t),Qke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Ry.$$.fragment,Fl),Zqo=i(Fl),jd=n(Fl,"P",{});var yW=s(jd);eGo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Sde=n(yW,"CODE",{});var Rnt=s(Sde);oGo=r(Rnt,"from_pretrained()"),Rnt.forEach(t),rGo=r(yW,"class method or the "),Pde=n(yW,"CODE",{});var Snt=s(Pde);tGo=r(Snt,"from_config()"),Snt.forEach(t),aGo=r(yW,`class
method.`),yW.forEach(t),nGo=i(Fl),Sy=n(Fl,"P",{});var rPe=s(Sy);sGo=r(rPe,"This class cannot be instantiated directly using "),$de=n(rPe,"CODE",{});var Pnt=s($de);lGo=r(Pnt,"__init__()"),Pnt.forEach(t),iGo=r(rPe," (throws an error)."),rPe.forEach(t),dGo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(Py.$$.fragment,Cl),cGo=i(Cl),Ide=n(Cl,"P",{});var $nt=s(Ide);fGo=r($nt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$nt.forEach(t),mGo=i(Cl),qd=n(Cl,"P",{});var wW=s(qd);gGo=r(wW,`Note:
Loading a model from its configuration file does `),Nde=n(wW,"STRONG",{});var Int=s(Nde);hGo=r(Int,"not"),Int.forEach(t),pGo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dde=n(wW,"CODE",{});var Nnt=s(Dde);_Go=r(Nnt,"from_pretrained()"),Nnt.forEach(t),uGo=r(wW,"to load the model weights."),wW.forEach(t),bGo=i(Cl),jde=n(Cl,"P",{});var Dnt=s(jde);vGo=r(Dnt,"Examples:"),Dnt.forEach(t),TGo=i(Cl),m($y.$$.fragment,Cl),Cl.forEach(t),FGo=i(Fl),Ye=n(Fl,"DIV",{class:!0});var ea=s(Ye);m(Iy.$$.fragment,ea),CGo=i(ea),qde=n(ea,"P",{});var jnt=s(qde);MGo=r(jnt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jnt.forEach(t),EGo=i(ea),an=n(ea,"P",{});var y4=s(an);yGo=r(y4,"The model class to instantiate is selected based on the "),Gde=n(y4,"CODE",{});var qnt=s(Gde);wGo=r(qnt,"model_type"),qnt.forEach(t),AGo=r(y4,` property of the config object (either
passed as an argument or loaded from `),Ode=n(y4,"CODE",{});var Gnt=s(Ode);LGo=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),BGo=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xde=n(y4,"CODE",{});var Ont=s(Xde);xGo=r(Ont,"pretrained_model_name_or_path"),Ont.forEach(t),kGo=r(y4,":"),y4.forEach(t),RGo=i(ea),nn=n(ea,"UL",{});var w4=s(nn);wv=n(w4,"LI",{});var rAe=s(wv);Vde=n(rAe,"STRONG",{});var Xnt=s(Vde);SGo=r(Xnt,"data2vec-audio"),Xnt.forEach(t),PGo=r(rAe," \u2014 "),Kj=n(rAe,"A",{href:!0});var Vnt=s(Kj);$Go=r(Vnt,"Data2VecAudioForAudioFrameClassification"),Vnt.forEach(t),IGo=r(rAe," (Data2VecAudio model)"),rAe.forEach(t),NGo=i(w4),Av=n(w4,"LI",{});var tAe=s(Av);zde=n(tAe,"STRONG",{});var znt=s(zde);DGo=r(znt,"unispeech-sat"),znt.forEach(t),jGo=r(tAe," \u2014 "),Zj=n(tAe,"A",{href:!0});var Wnt=s(Zj);qGo=r(Wnt,"UniSpeechSatForAudioFrameClassification"),Wnt.forEach(t),GGo=r(tAe," (UniSpeechSat model)"),tAe.forEach(t),OGo=i(w4),Lv=n(w4,"LI",{});var aAe=s(Lv);Wde=n(aAe,"STRONG",{});var Qnt=s(Wde);XGo=r(Qnt,"wav2vec2"),Qnt.forEach(t),VGo=r(aAe," \u2014 "),eq=n(aAe,"A",{href:!0});var Hnt=s(eq);zGo=r(Hnt,"Wav2Vec2ForAudioFrameClassification"),Hnt.forEach(t),WGo=r(aAe," (Wav2Vec2 model)"),aAe.forEach(t),QGo=i(w4),Bv=n(w4,"LI",{});var nAe=s(Bv);Qde=n(nAe,"STRONG",{});var Unt=s(Qde);HGo=r(Unt,"wavlm"),Unt.forEach(t),UGo=r(nAe," \u2014 "),oq=n(nAe,"A",{href:!0});var Jnt=s(oq);JGo=r(Jnt,"WavLMForAudioFrameClassification"),Jnt.forEach(t),YGo=r(nAe," (WavLM model)"),nAe.forEach(t),w4.forEach(t),KGo=i(ea),xv=n(ea,"P",{});var sAe=s(xv);ZGo=r(sAe,"The model is set in evaluation mode by default using "),Hde=n(sAe,"CODE",{});var Ynt=s(Hde);eOo=r(Ynt,"model.eval()"),Ynt.forEach(t),oOo=r(sAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=n(sAe,"CODE",{});var Knt=s(Ude);rOo=r(Knt,"model.train()"),Knt.forEach(t),sAe.forEach(t),tOo=i(ea),Jde=n(ea,"P",{});var Znt=s(Jde);aOo=r(Znt,"Examples:"),Znt.forEach(t),nOo=i(ea),m(Ny.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),Hke=i(c),Gd=n(c,"H2",{class:!0});var tPe=s(Gd);kv=n(tPe,"A",{id:!0,class:!0,href:!0});var est=s(kv);Yde=n(est,"SPAN",{});var ost=s(Yde);m(Dy.$$.fragment,ost),ost.forEach(t),est.forEach(t),sOo=i(tPe),Kde=n(tPe,"SPAN",{});var rst=s(Kde);lOo=r(rst,"AutoModelForCTC"),rst.forEach(t),tPe.forEach(t),Uke=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m(jy.$$.fragment,Ml),iOo=i(Ml),Od=n(Ml,"P",{});var AW=s(Od);dOo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Zde=n(AW,"CODE",{});var tst=s(Zde);cOo=r(tst,"from_pretrained()"),tst.forEach(t),fOo=r(AW,"class method or the "),ece=n(AW,"CODE",{});var ast=s(ece);mOo=r(ast,"from_config()"),ast.forEach(t),gOo=r(AW,`class
method.`),AW.forEach(t),hOo=i(Ml),qy=n(Ml,"P",{});var aPe=s(qy);pOo=r(aPe,"This class cannot be instantiated directly using "),oce=n(aPe,"CODE",{});var nst=s(oce);_Oo=r(nst,"__init__()"),nst.forEach(t),uOo=r(aPe," (throws an error)."),aPe.forEach(t),bOo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Gy.$$.fragment,El),vOo=i(El),rce=n(El,"P",{});var sst=s(rce);TOo=r(sst,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),sst.forEach(t),FOo=i(El),Xd=n(El,"P",{});var LW=s(Xd);COo=r(LW,`Note:
Loading a model from its configuration file does `),tce=n(LW,"STRONG",{});var lst=s(tce);MOo=r(lst,"not"),lst.forEach(t),EOo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ace=n(LW,"CODE",{});var ist=s(ace);yOo=r(ist,"from_pretrained()"),ist.forEach(t),wOo=r(LW,"to load the model weights."),LW.forEach(t),AOo=i(El),nce=n(El,"P",{});var dst=s(nce);LOo=r(dst,"Examples:"),dst.forEach(t),BOo=i(El),m(Oy.$$.fragment,El),El.forEach(t),xOo=i(Ml),Ke=n(Ml,"DIV",{class:!0});var oa=s(Ke);m(Xy.$$.fragment,oa),kOo=i(oa),sce=n(oa,"P",{});var cst=s(sce);ROo=r(cst,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),cst.forEach(t),SOo=i(oa),sn=n(oa,"P",{});var A4=s(sn);POo=r(A4,"The model class to instantiate is selected based on the "),lce=n(A4,"CODE",{});var fst=s(lce);$Oo=r(fst,"model_type"),fst.forEach(t),IOo=r(A4,` property of the config object (either
passed as an argument or loaded from `),ice=n(A4,"CODE",{});var mst=s(ice);NOo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),DOo=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dce=n(A4,"CODE",{});var gst=s(dce);jOo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),qOo=r(A4,":"),A4.forEach(t),GOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Rv=n(Go,"LI",{});var lAe=s(Rv);cce=n(lAe,"STRONG",{});var hst=s(cce);OOo=r(hst,"data2vec-audio"),hst.forEach(t),XOo=r(lAe," \u2014 "),rq=n(lAe,"A",{href:!0});var pst=s(rq);VOo=r(pst,"Data2VecAudioForCTC"),pst.forEach(t),zOo=r(lAe," (Data2VecAudio model)"),lAe.forEach(t),WOo=i(Go),Sv=n(Go,"LI",{});var iAe=s(Sv);fce=n(iAe,"STRONG",{});var _st=s(fce);QOo=r(_st,"hubert"),_st.forEach(t),HOo=r(iAe," \u2014 "),tq=n(iAe,"A",{href:!0});var ust=s(tq);UOo=r(ust,"HubertForCTC"),ust.forEach(t),JOo=r(iAe," (Hubert model)"),iAe.forEach(t),YOo=i(Go),Pv=n(Go,"LI",{});var dAe=s(Pv);mce=n(dAe,"STRONG",{});var bst=s(mce);KOo=r(bst,"sew"),bst.forEach(t),ZOo=r(dAe," \u2014 "),aq=n(dAe,"A",{href:!0});var vst=s(aq);eXo=r(vst,"SEWForCTC"),vst.forEach(t),oXo=r(dAe," (SEW model)"),dAe.forEach(t),rXo=i(Go),$v=n(Go,"LI",{});var cAe=s($v);gce=n(cAe,"STRONG",{});var Tst=s(gce);tXo=r(Tst,"sew-d"),Tst.forEach(t),aXo=r(cAe," \u2014 "),nq=n(cAe,"A",{href:!0});var Fst=s(nq);nXo=r(Fst,"SEWDForCTC"),Fst.forEach(t),sXo=r(cAe," (SEW-D model)"),cAe.forEach(t),lXo=i(Go),Iv=n(Go,"LI",{});var fAe=s(Iv);hce=n(fAe,"STRONG",{});var Cst=s(hce);iXo=r(Cst,"unispeech"),Cst.forEach(t),dXo=r(fAe," \u2014 "),sq=n(fAe,"A",{href:!0});var Mst=s(sq);cXo=r(Mst,"UniSpeechForCTC"),Mst.forEach(t),fXo=r(fAe," (UniSpeech model)"),fAe.forEach(t),mXo=i(Go),Nv=n(Go,"LI",{});var mAe=s(Nv);pce=n(mAe,"STRONG",{});var Est=s(pce);gXo=r(Est,"unispeech-sat"),Est.forEach(t),hXo=r(mAe," \u2014 "),lq=n(mAe,"A",{href:!0});var yst=s(lq);pXo=r(yst,"UniSpeechSatForCTC"),yst.forEach(t),_Xo=r(mAe," (UniSpeechSat model)"),mAe.forEach(t),uXo=i(Go),Dv=n(Go,"LI",{});var gAe=s(Dv);_ce=n(gAe,"STRONG",{});var wst=s(_ce);bXo=r(wst,"wav2vec2"),wst.forEach(t),vXo=r(gAe," \u2014 "),iq=n(gAe,"A",{href:!0});var Ast=s(iq);TXo=r(Ast,"Wav2Vec2ForCTC"),Ast.forEach(t),FXo=r(gAe," (Wav2Vec2 model)"),gAe.forEach(t),CXo=i(Go),jv=n(Go,"LI",{});var hAe=s(jv);uce=n(hAe,"STRONG",{});var Lst=s(uce);MXo=r(Lst,"wavlm"),Lst.forEach(t),EXo=r(hAe," \u2014 "),dq=n(hAe,"A",{href:!0});var Bst=s(dq);yXo=r(Bst,"WavLMForCTC"),Bst.forEach(t),wXo=r(hAe," (WavLM model)"),hAe.forEach(t),Go.forEach(t),AXo=i(oa),qv=n(oa,"P",{});var pAe=s(qv);LXo=r(pAe,"The model is set in evaluation mode by default using "),bce=n(pAe,"CODE",{});var xst=s(bce);BXo=r(xst,"model.eval()"),xst.forEach(t),xXo=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(pAe,"CODE",{});var kst=s(vce);kXo=r(kst,"model.train()"),kst.forEach(t),pAe.forEach(t),RXo=i(oa),Tce=n(oa,"P",{});var Rst=s(Tce);SXo=r(Rst,"Examples:"),Rst.forEach(t),PXo=i(oa),m(Vy.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Jke=i(c),Vd=n(c,"H2",{class:!0});var nPe=s(Vd);Gv=n(nPe,"A",{id:!0,class:!0,href:!0});var Sst=s(Gv);Fce=n(Sst,"SPAN",{});var Pst=s(Fce);m(zy.$$.fragment,Pst),Pst.forEach(t),Sst.forEach(t),$Xo=i(nPe),Cce=n(nPe,"SPAN",{});var $st=s(Cce);IXo=r($st,"AutoModelForSpeechSeq2Seq"),$st.forEach(t),nPe.forEach(t),Yke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Wy.$$.fragment,yl),NXo=i(yl),zd=n(yl,"P",{});var BW=s(zd);DXo=r(BW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mce=n(BW,"CODE",{});var Ist=s(Mce);jXo=r(Ist,"from_pretrained()"),Ist.forEach(t),qXo=r(BW,"class method or the "),Ece=n(BW,"CODE",{});var Nst=s(Ece);GXo=r(Nst,"from_config()"),Nst.forEach(t),OXo=r(BW,`class
method.`),BW.forEach(t),XXo=i(yl),Qy=n(yl,"P",{});var sPe=s(Qy);VXo=r(sPe,"This class cannot be instantiated directly using "),yce=n(sPe,"CODE",{});var Dst=s(yce);zXo=r(Dst,"__init__()"),Dst.forEach(t),WXo=r(sPe," (throws an error)."),sPe.forEach(t),QXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Hy.$$.fragment,wl),HXo=i(wl),wce=n(wl,"P",{});var jst=s(wce);UXo=r(jst,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jst.forEach(t),JXo=i(wl),Wd=n(wl,"P",{});var xW=s(Wd);YXo=r(xW,`Note:
Loading a model from its configuration file does `),Ace=n(xW,"STRONG",{});var qst=s(Ace);KXo=r(qst,"not"),qst.forEach(t),ZXo=r(xW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lce=n(xW,"CODE",{});var Gst=s(Lce);eVo=r(Gst,"from_pretrained()"),Gst.forEach(t),oVo=r(xW,"to load the model weights."),xW.forEach(t),rVo=i(wl),Bce=n(wl,"P",{});var Ost=s(Bce);tVo=r(Ost,"Examples:"),Ost.forEach(t),aVo=i(wl),m(Uy.$$.fragment,wl),wl.forEach(t),nVo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(Jy.$$.fragment,ra),sVo=i(ra),xce=n(ra,"P",{});var Xst=s(xce);lVo=r(Xst,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xst.forEach(t),iVo=i(ra),ln=n(ra,"P",{});var L4=s(ln);dVo=r(L4,"The model class to instantiate is selected based on the "),kce=n(L4,"CODE",{});var Vst=s(kce);cVo=r(Vst,"model_type"),Vst.forEach(t),fVo=r(L4,` property of the config object (either
passed as an argument or loaded from `),Rce=n(L4,"CODE",{});var zst=s(Rce);mVo=r(zst,"pretrained_model_name_or_path"),zst.forEach(t),gVo=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(L4,"CODE",{});var Wst=s(Sce);hVo=r(Wst,"pretrained_model_name_or_path"),Wst.forEach(t),pVo=r(L4,":"),L4.forEach(t),_Vo=i(ra),Yy=n(ra,"UL",{});var lPe=s(Yy);Ov=n(lPe,"LI",{});var _Ae=s(Ov);Pce=n(_Ae,"STRONG",{});var Qst=s(Pce);uVo=r(Qst,"speech-encoder-decoder"),Qst.forEach(t),bVo=r(_Ae," \u2014 "),cq=n(_Ae,"A",{href:!0});var Hst=s(cq);vVo=r(Hst,"SpeechEncoderDecoderModel"),Hst.forEach(t),TVo=r(_Ae," (Speech Encoder decoder model)"),_Ae.forEach(t),FVo=i(lPe),Xv=n(lPe,"LI",{});var uAe=s(Xv);$ce=n(uAe,"STRONG",{});var Ust=s($ce);CVo=r(Ust,"speech_to_text"),Ust.forEach(t),MVo=r(uAe," \u2014 "),fq=n(uAe,"A",{href:!0});var Jst=s(fq);EVo=r(Jst,"Speech2TextForConditionalGeneration"),Jst.forEach(t),yVo=r(uAe," (Speech2Text model)"),uAe.forEach(t),lPe.forEach(t),wVo=i(ra),Vv=n(ra,"P",{});var bAe=s(Vv);AVo=r(bAe,"The model is set in evaluation mode by default using "),Ice=n(bAe,"CODE",{});var Yst=s(Ice);LVo=r(Yst,"model.eval()"),Yst.forEach(t),BVo=r(bAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(bAe,"CODE",{});var Kst=s(Nce);xVo=r(Kst,"model.train()"),Kst.forEach(t),bAe.forEach(t),kVo=i(ra),Dce=n(ra,"P",{});var Zst=s(Dce);RVo=r(Zst,"Examples:"),Zst.forEach(t),SVo=i(ra),m(Ky.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Kke=i(c),Qd=n(c,"H2",{class:!0});var iPe=s(Qd);zv=n(iPe,"A",{id:!0,class:!0,href:!0});var elt=s(zv);jce=n(elt,"SPAN",{});var olt=s(jce);m(Zy.$$.fragment,olt),olt.forEach(t),elt.forEach(t),PVo=i(iPe),qce=n(iPe,"SPAN",{});var rlt=s(qce);$Vo=r(rlt,"AutoModelForAudioXVector"),rlt.forEach(t),iPe.forEach(t),Zke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(ew.$$.fragment,Al),IVo=i(Al),Hd=n(Al,"P",{});var kW=s(Hd);NVo=r(kW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Gce=n(kW,"CODE",{});var tlt=s(Gce);DVo=r(tlt,"from_pretrained()"),tlt.forEach(t),jVo=r(kW,"class method or the "),Oce=n(kW,"CODE",{});var alt=s(Oce);qVo=r(alt,"from_config()"),alt.forEach(t),GVo=r(kW,`class
method.`),kW.forEach(t),OVo=i(Al),ow=n(Al,"P",{});var dPe=s(ow);XVo=r(dPe,"This class cannot be instantiated directly using "),Xce=n(dPe,"CODE",{});var nlt=s(Xce);VVo=r(nlt,"__init__()"),nlt.forEach(t),zVo=r(dPe," (throws an error)."),dPe.forEach(t),WVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(rw.$$.fragment,Ll),QVo=i(Ll),Vce=n(Ll,"P",{});var slt=s(Vce);HVo=r(slt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),slt.forEach(t),UVo=i(Ll),Ud=n(Ll,"P",{});var RW=s(Ud);JVo=r(RW,`Note:
Loading a model from its configuration file does `),zce=n(RW,"STRONG",{});var llt=s(zce);YVo=r(llt,"not"),llt.forEach(t),KVo=r(RW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wce=n(RW,"CODE",{});var ilt=s(Wce);ZVo=r(ilt,"from_pretrained()"),ilt.forEach(t),ezo=r(RW,"to load the model weights."),RW.forEach(t),ozo=i(Ll),Qce=n(Ll,"P",{});var dlt=s(Qce);rzo=r(dlt,"Examples:"),dlt.forEach(t),tzo=i(Ll),m(tw.$$.fragment,Ll),Ll.forEach(t),azo=i(Al),eo=n(Al,"DIV",{class:!0});var ta=s(eo);m(aw.$$.fragment,ta),nzo=i(ta),Hce=n(ta,"P",{});var clt=s(Hce);szo=r(clt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),clt.forEach(t),lzo=i(ta),dn=n(ta,"P",{});var B4=s(dn);izo=r(B4,"The model class to instantiate is selected based on the "),Uce=n(B4,"CODE",{});var flt=s(Uce);dzo=r(flt,"model_type"),flt.forEach(t),czo=r(B4,` property of the config object (either
passed as an argument or loaded from `),Jce=n(B4,"CODE",{});var mlt=s(Jce);fzo=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),mzo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yce=n(B4,"CODE",{});var glt=s(Yce);gzo=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),hzo=r(B4,":"),B4.forEach(t),pzo=i(ta),cn=n(ta,"UL",{});var x4=s(cn);Wv=n(x4,"LI",{});var vAe=s(Wv);Kce=n(vAe,"STRONG",{});var hlt=s(Kce);_zo=r(hlt,"data2vec-audio"),hlt.forEach(t),uzo=r(vAe," \u2014 "),mq=n(vAe,"A",{href:!0});var plt=s(mq);bzo=r(plt,"Data2VecAudioForXVector"),plt.forEach(t),vzo=r(vAe," (Data2VecAudio model)"),vAe.forEach(t),Tzo=i(x4),Qv=n(x4,"LI",{});var TAe=s(Qv);Zce=n(TAe,"STRONG",{});var _lt=s(Zce);Fzo=r(_lt,"unispeech-sat"),_lt.forEach(t),Czo=r(TAe," \u2014 "),gq=n(TAe,"A",{href:!0});var ult=s(gq);Mzo=r(ult,"UniSpeechSatForXVector"),ult.forEach(t),Ezo=r(TAe," (UniSpeechSat model)"),TAe.forEach(t),yzo=i(x4),Hv=n(x4,"LI",{});var FAe=s(Hv);efe=n(FAe,"STRONG",{});var blt=s(efe);wzo=r(blt,"wav2vec2"),blt.forEach(t),Azo=r(FAe," \u2014 "),hq=n(FAe,"A",{href:!0});var vlt=s(hq);Lzo=r(vlt,"Wav2Vec2ForXVector"),vlt.forEach(t),Bzo=r(FAe," (Wav2Vec2 model)"),FAe.forEach(t),xzo=i(x4),Uv=n(x4,"LI",{});var CAe=s(Uv);ofe=n(CAe,"STRONG",{});var Tlt=s(ofe);kzo=r(Tlt,"wavlm"),Tlt.forEach(t),Rzo=r(CAe," \u2014 "),pq=n(CAe,"A",{href:!0});var Flt=s(pq);Szo=r(Flt,"WavLMForXVector"),Flt.forEach(t),Pzo=r(CAe," (WavLM model)"),CAe.forEach(t),x4.forEach(t),$zo=i(ta),Jv=n(ta,"P",{});var MAe=s(Jv);Izo=r(MAe,"The model is set in evaluation mode by default using "),rfe=n(MAe,"CODE",{});var Clt=s(rfe);Nzo=r(Clt,"model.eval()"),Clt.forEach(t),Dzo=r(MAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tfe=n(MAe,"CODE",{});var Mlt=s(tfe);jzo=r(Mlt,"model.train()"),Mlt.forEach(t),MAe.forEach(t),qzo=i(ta),afe=n(ta,"P",{});var Elt=s(afe);Gzo=r(Elt,"Examples:"),Elt.forEach(t),Ozo=i(ta),m(nw.$$.fragment,ta),ta.forEach(t),Al.forEach(t),eRe=i(c),Jd=n(c,"H2",{class:!0});var cPe=s(Jd);Yv=n(cPe,"A",{id:!0,class:!0,href:!0});var ylt=s(Yv);nfe=n(ylt,"SPAN",{});var wlt=s(nfe);m(sw.$$.fragment,wlt),wlt.forEach(t),ylt.forEach(t),Xzo=i(cPe),sfe=n(cPe,"SPAN",{});var Alt=s(sfe);Vzo=r(Alt,"AutoModelForMaskedImageModeling"),Alt.forEach(t),cPe.forEach(t),oRe=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(lw.$$.fragment,Bl),zzo=i(Bl),Yd=n(Bl,"P",{});var SW=s(Yd);Wzo=r(SW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),lfe=n(SW,"CODE",{});var Llt=s(lfe);Qzo=r(Llt,"from_pretrained()"),Llt.forEach(t),Hzo=r(SW,"class method or the "),ife=n(SW,"CODE",{});var Blt=s(ife);Uzo=r(Blt,"from_config()"),Blt.forEach(t),Jzo=r(SW,`class
method.`),SW.forEach(t),Yzo=i(Bl),iw=n(Bl,"P",{});var fPe=s(iw);Kzo=r(fPe,"This class cannot be instantiated directly using "),dfe=n(fPe,"CODE",{});var xlt=s(dfe);Zzo=r(xlt,"__init__()"),xlt.forEach(t),eWo=r(fPe," (throws an error)."),fPe.forEach(t),oWo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(dw.$$.fragment,xl),rWo=i(xl),cfe=n(xl,"P",{});var klt=s(cfe);tWo=r(klt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),klt.forEach(t),aWo=i(xl),Kd=n(xl,"P",{});var PW=s(Kd);nWo=r(PW,`Note:
Loading a model from its configuration file does `),ffe=n(PW,"STRONG",{});var Rlt=s(ffe);sWo=r(Rlt,"not"),Rlt.forEach(t),lWo=r(PW,` load the model weights. It only affects the
model\u2019s configuration. Use `),mfe=n(PW,"CODE",{});var Slt=s(mfe);iWo=r(Slt,"from_pretrained()"),Slt.forEach(t),dWo=r(PW,"to load the model weights."),PW.forEach(t),cWo=i(xl),gfe=n(xl,"P",{});var Plt=s(gfe);fWo=r(Plt,"Examples:"),Plt.forEach(t),mWo=i(xl),m(cw.$$.fragment,xl),xl.forEach(t),gWo=i(Bl),oo=n(Bl,"DIV",{class:!0});var aa=s(oo);m(fw.$$.fragment,aa),hWo=i(aa),hfe=n(aa,"P",{});var $lt=s(hfe);pWo=r($lt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$lt.forEach(t),_Wo=i(aa),fn=n(aa,"P",{});var k4=s(fn);uWo=r(k4,"The model class to instantiate is selected based on the "),pfe=n(k4,"CODE",{});var Ilt=s(pfe);bWo=r(Ilt,"model_type"),Ilt.forEach(t),vWo=r(k4,` property of the config object (either
passed as an argument or loaded from `),_fe=n(k4,"CODE",{});var Nlt=s(_fe);TWo=r(Nlt,"pretrained_model_name_or_path"),Nlt.forEach(t),FWo=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(k4,"CODE",{});var Dlt=s(ufe);CWo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),MWo=r(k4,":"),k4.forEach(t),EWo=i(aa),Zd=n(aa,"UL",{});var $W=s(Zd);Kv=n($W,"LI",{});var EAe=s(Kv);bfe=n(EAe,"STRONG",{});var jlt=s(bfe);yWo=r(jlt,"deit"),jlt.forEach(t),wWo=r(EAe," \u2014 "),_q=n(EAe,"A",{href:!0});var qlt=s(_q);AWo=r(qlt,"DeiTForMaskedImageModeling"),qlt.forEach(t),LWo=r(EAe," (DeiT model)"),EAe.forEach(t),BWo=i($W),Zv=n($W,"LI",{});var yAe=s(Zv);vfe=n(yAe,"STRONG",{});var Glt=s(vfe);xWo=r(Glt,"swin"),Glt.forEach(t),kWo=r(yAe," \u2014 "),uq=n(yAe,"A",{href:!0});var Olt=s(uq);RWo=r(Olt,"SwinForMaskedImageModeling"),Olt.forEach(t),SWo=r(yAe," (Swin model)"),yAe.forEach(t),PWo=i($W),eT=n($W,"LI",{});var wAe=s(eT);Tfe=n(wAe,"STRONG",{});var Xlt=s(Tfe);$Wo=r(Xlt,"vit"),Xlt.forEach(t),IWo=r(wAe," \u2014 "),bq=n(wAe,"A",{href:!0});var Vlt=s(bq);NWo=r(Vlt,"ViTForMaskedImageModeling"),Vlt.forEach(t),DWo=r(wAe," (ViT model)"),wAe.forEach(t),$W.forEach(t),jWo=i(aa),oT=n(aa,"P",{});var AAe=s(oT);qWo=r(AAe,"The model is set in evaluation mode by default using "),Ffe=n(AAe,"CODE",{});var zlt=s(Ffe);GWo=r(zlt,"model.eval()"),zlt.forEach(t),OWo=r(AAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(AAe,"CODE",{});var Wlt=s(Cfe);XWo=r(Wlt,"model.train()"),Wlt.forEach(t),AAe.forEach(t),VWo=i(aa),Mfe=n(aa,"P",{});var Qlt=s(Mfe);zWo=r(Qlt,"Examples:"),Qlt.forEach(t),WWo=i(aa),m(mw.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),rRe=i(c),ec=n(c,"H2",{class:!0});var mPe=s(ec);rT=n(mPe,"A",{id:!0,class:!0,href:!0});var Hlt=s(rT);Efe=n(Hlt,"SPAN",{});var Ult=s(Efe);m(gw.$$.fragment,Ult),Ult.forEach(t),Hlt.forEach(t),QWo=i(mPe),yfe=n(mPe,"SPAN",{});var Jlt=s(yfe);HWo=r(Jlt,"AutoModelForObjectDetection"),Jlt.forEach(t),mPe.forEach(t),tRe=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(hw.$$.fragment,kl),UWo=i(kl),oc=n(kl,"P",{});var IW=s(oc);JWo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),wfe=n(IW,"CODE",{});var Ylt=s(wfe);YWo=r(Ylt,"from_pretrained()"),Ylt.forEach(t),KWo=r(IW,"class method or the "),Afe=n(IW,"CODE",{});var Klt=s(Afe);ZWo=r(Klt,"from_config()"),Klt.forEach(t),eQo=r(IW,`class
method.`),IW.forEach(t),oQo=i(kl),pw=n(kl,"P",{});var gPe=s(pw);rQo=r(gPe,"This class cannot be instantiated directly using "),Lfe=n(gPe,"CODE",{});var Zlt=s(Lfe);tQo=r(Zlt,"__init__()"),Zlt.forEach(t),aQo=r(gPe," (throws an error)."),gPe.forEach(t),nQo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(_w.$$.fragment,Rl),sQo=i(Rl),Bfe=n(Rl,"P",{});var eit=s(Bfe);lQo=r(eit,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),eit.forEach(t),iQo=i(Rl),rc=n(Rl,"P",{});var NW=s(rc);dQo=r(NW,`Note:
Loading a model from its configuration file does `),xfe=n(NW,"STRONG",{});var oit=s(xfe);cQo=r(oit,"not"),oit.forEach(t),fQo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),kfe=n(NW,"CODE",{});var rit=s(kfe);mQo=r(rit,"from_pretrained()"),rit.forEach(t),gQo=r(NW,"to load the model weights."),NW.forEach(t),hQo=i(Rl),Rfe=n(Rl,"P",{});var tit=s(Rfe);pQo=r(tit,"Examples:"),tit.forEach(t),_Qo=i(Rl),m(uw.$$.fragment,Rl),Rl.forEach(t),uQo=i(kl),ro=n(kl,"DIV",{class:!0});var na=s(ro);m(bw.$$.fragment,na),bQo=i(na),Sfe=n(na,"P",{});var ait=s(Sfe);vQo=r(ait,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ait.forEach(t),TQo=i(na),mn=n(na,"P",{});var R4=s(mn);FQo=r(R4,"The model class to instantiate is selected based on the "),Pfe=n(R4,"CODE",{});var nit=s(Pfe);CQo=r(nit,"model_type"),nit.forEach(t),MQo=r(R4,` property of the config object (either
passed as an argument or loaded from `),$fe=n(R4,"CODE",{});var sit=s($fe);EQo=r(sit,"pretrained_model_name_or_path"),sit.forEach(t),yQo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ife=n(R4,"CODE",{});var lit=s(Ife);wQo=r(lit,"pretrained_model_name_or_path"),lit.forEach(t),AQo=r(R4,":"),R4.forEach(t),LQo=i(na),Nfe=n(na,"UL",{});var iit=s(Nfe);tT=n(iit,"LI",{});var LAe=s(tT);Dfe=n(LAe,"STRONG",{});var dit=s(Dfe);BQo=r(dit,"detr"),dit.forEach(t),xQo=r(LAe," \u2014 "),vq=n(LAe,"A",{href:!0});var cit=s(vq);kQo=r(cit,"DetrForObjectDetection"),cit.forEach(t),RQo=r(LAe," (DETR model)"),LAe.forEach(t),iit.forEach(t),SQo=i(na),aT=n(na,"P",{});var BAe=s(aT);PQo=r(BAe,"The model is set in evaluation mode by default using "),jfe=n(BAe,"CODE",{});var fit=s(jfe);$Qo=r(fit,"model.eval()"),fit.forEach(t),IQo=r(BAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qfe=n(BAe,"CODE",{});var mit=s(qfe);NQo=r(mit,"model.train()"),mit.forEach(t),BAe.forEach(t),DQo=i(na),Gfe=n(na,"P",{});var git=s(Gfe);jQo=r(git,"Examples:"),git.forEach(t),qQo=i(na),m(vw.$$.fragment,na),na.forEach(t),kl.forEach(t),aRe=i(c),tc=n(c,"H2",{class:!0});var hPe=s(tc);nT=n(hPe,"A",{id:!0,class:!0,href:!0});var hit=s(nT);Ofe=n(hit,"SPAN",{});var pit=s(Ofe);m(Tw.$$.fragment,pit),pit.forEach(t),hit.forEach(t),GQo=i(hPe),Xfe=n(hPe,"SPAN",{});var _it=s(Xfe);OQo=r(_it,"AutoModelForImageSegmentation"),_it.forEach(t),hPe.forEach(t),nRe=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(Fw.$$.fragment,Sl),XQo=i(Sl),ac=n(Sl,"P",{});var DW=s(ac);VQo=r(DW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Vfe=n(DW,"CODE",{});var uit=s(Vfe);zQo=r(uit,"from_pretrained()"),uit.forEach(t),WQo=r(DW,"class method or the "),zfe=n(DW,"CODE",{});var bit=s(zfe);QQo=r(bit,"from_config()"),bit.forEach(t),HQo=r(DW,`class
method.`),DW.forEach(t),UQo=i(Sl),Cw=n(Sl,"P",{});var pPe=s(Cw);JQo=r(pPe,"This class cannot be instantiated directly using "),Wfe=n(pPe,"CODE",{});var vit=s(Wfe);YQo=r(vit,"__init__()"),vit.forEach(t),KQo=r(pPe," (throws an error)."),pPe.forEach(t),ZQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(Mw.$$.fragment,Pl),eHo=i(Pl),Qfe=n(Pl,"P",{});var Tit=s(Qfe);oHo=r(Tit,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tit.forEach(t),rHo=i(Pl),nc=n(Pl,"P",{});var jW=s(nc);tHo=r(jW,`Note:
Loading a model from its configuration file does `),Hfe=n(jW,"STRONG",{});var Fit=s(Hfe);aHo=r(Fit,"not"),Fit.forEach(t),nHo=r(jW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ufe=n(jW,"CODE",{});var Cit=s(Ufe);sHo=r(Cit,"from_pretrained()"),Cit.forEach(t),lHo=r(jW,"to load the model weights."),jW.forEach(t),iHo=i(Pl),Jfe=n(Pl,"P",{});var Mit=s(Jfe);dHo=r(Mit,"Examples:"),Mit.forEach(t),cHo=i(Pl),m(Ew.$$.fragment,Pl),Pl.forEach(t),fHo=i(Sl),to=n(Sl,"DIV",{class:!0});var sa=s(to);m(yw.$$.fragment,sa),mHo=i(sa),Yfe=n(sa,"P",{});var Eit=s(Yfe);gHo=r(Eit,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Eit.forEach(t),hHo=i(sa),gn=n(sa,"P",{});var S4=s(gn);pHo=r(S4,"The model class to instantiate is selected based on the "),Kfe=n(S4,"CODE",{});var yit=s(Kfe);_Ho=r(yit,"model_type"),yit.forEach(t),uHo=r(S4,` property of the config object (either
passed as an argument or loaded from `),Zfe=n(S4,"CODE",{});var wit=s(Zfe);bHo=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),vHo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=n(S4,"CODE",{});var Ait=s(eme);THo=r(Ait,"pretrained_model_name_or_path"),Ait.forEach(t),FHo=r(S4,":"),S4.forEach(t),CHo=i(sa),ome=n(sa,"UL",{});var Lit=s(ome);sT=n(Lit,"LI",{});var xAe=s(sT);rme=n(xAe,"STRONG",{});var Bit=s(rme);MHo=r(Bit,"detr"),Bit.forEach(t),EHo=r(xAe," \u2014 "),Tq=n(xAe,"A",{href:!0});var xit=s(Tq);yHo=r(xit,"DetrForSegmentation"),xit.forEach(t),wHo=r(xAe," (DETR model)"),xAe.forEach(t),Lit.forEach(t),AHo=i(sa),lT=n(sa,"P",{});var kAe=s(lT);LHo=r(kAe,"The model is set in evaluation mode by default using "),tme=n(kAe,"CODE",{});var kit=s(tme);BHo=r(kit,"model.eval()"),kit.forEach(t),xHo=r(kAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(kAe,"CODE",{});var Rit=s(ame);kHo=r(Rit,"model.train()"),Rit.forEach(t),kAe.forEach(t),RHo=i(sa),nme=n(sa,"P",{});var Sit=s(nme);SHo=r(Sit,"Examples:"),Sit.forEach(t),PHo=i(sa),m(ww.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),sRe=i(c),sc=n(c,"H2",{class:!0});var _Pe=s(sc);iT=n(_Pe,"A",{id:!0,class:!0,href:!0});var Pit=s(iT);sme=n(Pit,"SPAN",{});var $it=s(sme);m(Aw.$$.fragment,$it),$it.forEach(t),Pit.forEach(t),$Ho=i(_Pe),lme=n(_Pe,"SPAN",{});var Iit=s(lme);IHo=r(Iit,"AutoModelForSemanticSegmentation"),Iit.forEach(t),_Pe.forEach(t),lRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(Lw.$$.fragment,$l),NHo=i($l),lc=n($l,"P",{});var qW=s(lc);DHo=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),ime=n(qW,"CODE",{});var Nit=s(ime);jHo=r(Nit,"from_pretrained()"),Nit.forEach(t),qHo=r(qW,"class method or the "),dme=n(qW,"CODE",{});var Dit=s(dme);GHo=r(Dit,"from_config()"),Dit.forEach(t),OHo=r(qW,`class
method.`),qW.forEach(t),XHo=i($l),Bw=n($l,"P",{});var uPe=s(Bw);VHo=r(uPe,"This class cannot be instantiated directly using "),cme=n(uPe,"CODE",{});var jit=s(cme);zHo=r(jit,"__init__()"),jit.forEach(t),WHo=r(uPe," (throws an error)."),uPe.forEach(t),QHo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(xw.$$.fragment,Il),HHo=i(Il),fme=n(Il,"P",{});var qit=s(fme);UHo=r(qit,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qit.forEach(t),JHo=i(Il),ic=n(Il,"P",{});var GW=s(ic);YHo=r(GW,`Note:
Loading a model from its configuration file does `),mme=n(GW,"STRONG",{});var Git=s(mme);KHo=r(Git,"not"),Git.forEach(t),ZHo=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),gme=n(GW,"CODE",{});var Oit=s(gme);eUo=r(Oit,"from_pretrained()"),Oit.forEach(t),oUo=r(GW,"to load the model weights."),GW.forEach(t),rUo=i(Il),hme=n(Il,"P",{});var Xit=s(hme);tUo=r(Xit,"Examples:"),Xit.forEach(t),aUo=i(Il),m(kw.$$.fragment,Il),Il.forEach(t),nUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(Rw.$$.fragment,la),sUo=i(la),pme=n(la,"P",{});var Vit=s(pme);lUo=r(Vit,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Vit.forEach(t),iUo=i(la),hn=n(la,"P",{});var P4=s(hn);dUo=r(P4,"The model class to instantiate is selected based on the "),_me=n(P4,"CODE",{});var zit=s(_me);cUo=r(zit,"model_type"),zit.forEach(t),fUo=r(P4,` property of the config object (either
passed as an argument or loaded from `),ume=n(P4,"CODE",{});var Wit=s(ume);mUo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),gUo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(P4,"CODE",{});var Qit=s(bme);hUo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),pUo=r(P4,":"),P4.forEach(t),_Uo=i(la),dc=n(la,"UL",{});var OW=s(dc);dT=n(OW,"LI",{});var RAe=s(dT);vme=n(RAe,"STRONG",{});var Hit=s(vme);uUo=r(Hit,"beit"),Hit.forEach(t),bUo=r(RAe," \u2014 "),Fq=n(RAe,"A",{href:!0});var Uit=s(Fq);vUo=r(Uit,"BeitForSemanticSegmentation"),Uit.forEach(t),TUo=r(RAe," (BEiT model)"),RAe.forEach(t),FUo=i(OW),cT=n(OW,"LI",{});var SAe=s(cT);Tme=n(SAe,"STRONG",{});var Jit=s(Tme);CUo=r(Jit,"convnext"),Jit.forEach(t),MUo=r(SAe," \u2014 "),Cq=n(SAe,"A",{href:!0});var Yit=s(Cq);EUo=r(Yit,"ConvNextForSemanticSegmentation"),Yit.forEach(t),yUo=r(SAe," (ConvNext model)"),SAe.forEach(t),wUo=i(OW),fT=n(OW,"LI",{});var PAe=s(fT);Fme=n(PAe,"STRONG",{});var Kit=s(Fme);AUo=r(Kit,"segformer"),Kit.forEach(t),LUo=r(PAe," \u2014 "),Mq=n(PAe,"A",{href:!0});var Zit=s(Mq);BUo=r(Zit,"SegformerForSemanticSegmentation"),Zit.forEach(t),xUo=r(PAe," (SegFormer model)"),PAe.forEach(t),OW.forEach(t),kUo=i(la),mT=n(la,"P",{});var $Ae=s(mT);RUo=r($Ae,"The model is set in evaluation mode by default using "),Cme=n($Ae,"CODE",{});var edt=s(Cme);SUo=r(edt,"model.eval()"),edt.forEach(t),PUo=r($Ae,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mme=n($Ae,"CODE",{});var odt=s(Mme);$Uo=r(odt,"model.train()"),odt.forEach(t),$Ae.forEach(t),IUo=i(la),Eme=n(la,"P",{});var rdt=s(Eme);NUo=r(rdt,"Examples:"),rdt.forEach(t),DUo=i(la),m(Sw.$$.fragment,la),la.forEach(t),$l.forEach(t),iRe=i(c),cc=n(c,"H2",{class:!0});var bPe=s(cc);gT=n(bPe,"A",{id:!0,class:!0,href:!0});var tdt=s(gT);yme=n(tdt,"SPAN",{});var adt=s(yme);m(Pw.$$.fragment,adt),adt.forEach(t),tdt.forEach(t),jUo=i(bPe),wme=n(bPe,"SPAN",{});var ndt=s(wme);qUo=r(ndt,"AutoModelForInstanceSegmentation"),ndt.forEach(t),bPe.forEach(t),dRe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m($w.$$.fragment,Nl),GUo=i(Nl),fc=n(Nl,"P",{});var XW=s(fc);OUo=r(XW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),Ame=n(XW,"CODE",{});var sdt=s(Ame);XUo=r(sdt,"from_pretrained()"),sdt.forEach(t),VUo=r(XW,"class method or the "),Lme=n(XW,"CODE",{});var ldt=s(Lme);zUo=r(ldt,"from_config()"),ldt.forEach(t),WUo=r(XW,`class
method.`),XW.forEach(t),QUo=i(Nl),Iw=n(Nl,"P",{});var vPe=s(Iw);HUo=r(vPe,"This class cannot be instantiated directly using "),Bme=n(vPe,"CODE",{});var idt=s(Bme);UUo=r(idt,"__init__()"),idt.forEach(t),JUo=r(vPe," (throws an error)."),vPe.forEach(t),YUo=i(Nl),mt=n(Nl,"DIV",{class:!0});var Dl=s(mt);m(Nw.$$.fragment,Dl),KUo=i(Dl),xme=n(Dl,"P",{});var ddt=s(xme);ZUo=r(ddt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ddt.forEach(t),eJo=i(Dl),mc=n(Dl,"P",{});var VW=s(mc);oJo=r(VW,`Note:
Loading a model from its configuration file does `),kme=n(VW,"STRONG",{});var cdt=s(kme);rJo=r(cdt,"not"),cdt.forEach(t),tJo=r(VW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rme=n(VW,"CODE",{});var fdt=s(Rme);aJo=r(fdt,"from_pretrained()"),fdt.forEach(t),nJo=r(VW,"to load the model weights."),VW.forEach(t),sJo=i(Dl),Sme=n(Dl,"P",{});var mdt=s(Sme);lJo=r(mdt,"Examples:"),mdt.forEach(t),iJo=i(Dl),m(Dw.$$.fragment,Dl),Dl.forEach(t),dJo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(jw.$$.fragment,ia),cJo=i(ia),Pme=n(ia,"P",{});var gdt=s(Pme);fJo=r(gdt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),gdt.forEach(t),mJo=i(ia),pn=n(ia,"P",{});var $4=s(pn);gJo=r($4,"The model class to instantiate is selected based on the "),$me=n($4,"CODE",{});var hdt=s($me);hJo=r(hdt,"model_type"),hdt.forEach(t),pJo=r($4,` property of the config object (either
passed as an argument or loaded from `),Ime=n($4,"CODE",{});var pdt=s(Ime);_Jo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),uJo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n($4,"CODE",{});var _dt=s(Nme);bJo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),vJo=r($4,":"),$4.forEach(t),TJo=i(ia),Dme=n(ia,"UL",{});var udt=s(Dme);hT=n(udt,"LI",{});var IAe=s(hT);jme=n(IAe,"STRONG",{});var bdt=s(jme);FJo=r(bdt,"maskformer"),bdt.forEach(t),CJo=r(IAe," \u2014 "),Eq=n(IAe,"A",{href:!0});var vdt=s(Eq);MJo=r(vdt,"MaskFormerForInstanceSegmentation"),vdt.forEach(t),EJo=r(IAe," (MaskFormer model)"),IAe.forEach(t),udt.forEach(t),yJo=i(ia),pT=n(ia,"P",{});var NAe=s(pT);wJo=r(NAe,"The model is set in evaluation mode by default using "),qme=n(NAe,"CODE",{});var Tdt=s(qme);AJo=r(Tdt,"model.eval()"),Tdt.forEach(t),LJo=r(NAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=n(NAe,"CODE",{});var Fdt=s(Gme);BJo=r(Fdt,"model.train()"),Fdt.forEach(t),NAe.forEach(t),xJo=i(ia),Ome=n(ia,"P",{});var Cdt=s(Ome);kJo=r(Cdt,"Examples:"),Cdt.forEach(t),RJo=i(ia),m(qw.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),cRe=i(c),gc=n(c,"H2",{class:!0});var TPe=s(gc);_T=n(TPe,"A",{id:!0,class:!0,href:!0});var Mdt=s(_T);Xme=n(Mdt,"SPAN",{});var Edt=s(Xme);m(Gw.$$.fragment,Edt),Edt.forEach(t),Mdt.forEach(t),SJo=i(TPe),Vme=n(TPe,"SPAN",{});var ydt=s(Vme);PJo=r(ydt,"TFAutoModel"),ydt.forEach(t),TPe.forEach(t),fRe=i(c),vr=n(c,"DIV",{class:!0});var jl=s(vr);m(Ow.$$.fragment,jl),$Jo=i(jl),hc=n(jl,"P",{});var zW=s(hc);IJo=r(zW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),zme=n(zW,"CODE",{});var wdt=s(zme);NJo=r(wdt,"from_pretrained()"),wdt.forEach(t),DJo=r(zW,"class method or the "),Wme=n(zW,"CODE",{});var Adt=s(Wme);jJo=r(Adt,"from_config()"),Adt.forEach(t),qJo=r(zW,`class
method.`),zW.forEach(t),GJo=i(jl),Xw=n(jl,"P",{});var FPe=s(Xw);OJo=r(FPe,"This class cannot be instantiated directly using "),Qme=n(FPe,"CODE",{});var Ldt=s(Qme);XJo=r(Ldt,"__init__()"),Ldt.forEach(t),VJo=r(FPe," (throws an error)."),FPe.forEach(t),zJo=i(jl),gt=n(jl,"DIV",{class:!0});var ql=s(gt);m(Vw.$$.fragment,ql),WJo=i(ql),Hme=n(ql,"P",{});var Bdt=s(Hme);QJo=r(Bdt,"Instantiates one of the base model classes of the library from a configuration."),Bdt.forEach(t),HJo=i(ql),pc=n(ql,"P",{});var WW=s(pc);UJo=r(WW,`Note:
Loading a model from its configuration file does `),Ume=n(WW,"STRONG",{});var xdt=s(Ume);JJo=r(xdt,"not"),xdt.forEach(t),YJo=r(WW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jme=n(WW,"CODE",{});var kdt=s(Jme);KJo=r(kdt,"from_pretrained()"),kdt.forEach(t),ZJo=r(WW,"to load the model weights."),WW.forEach(t),eYo=i(ql),Yme=n(ql,"P",{});var Rdt=s(Yme);oYo=r(Rdt,"Examples:"),Rdt.forEach(t),rYo=i(ql),m(zw.$$.fragment,ql),ql.forEach(t),tYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(Ww.$$.fragment,pa),aYo=i(pa),Kme=n(pa,"P",{});var Sdt=s(Kme);nYo=r(Sdt,"Instantiate one of the base model classes of the library from a pretrained model."),Sdt.forEach(t),sYo=i(pa),_n=n(pa,"P",{});var I4=s(_n);lYo=r(I4,"The model class to instantiate is selected based on the "),Zme=n(I4,"CODE",{});var Pdt=s(Zme);iYo=r(Pdt,"model_type"),Pdt.forEach(t),dYo=r(I4,` property of the config object (either
passed as an argument or loaded from `),ege=n(I4,"CODE",{});var $dt=s(ege);cYo=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),fYo=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(I4,"CODE",{});var Idt=s(oge);mYo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),gYo=r(I4,":"),I4.forEach(t),hYo=i(pa),B=n(pa,"UL",{});var x=s(B);uT=n(x,"LI",{});var DAe=s(uT);rge=n(DAe,"STRONG",{});var Ndt=s(rge);pYo=r(Ndt,"albert"),Ndt.forEach(t),_Yo=r(DAe," \u2014 "),yq=n(DAe,"A",{href:!0});var Ddt=s(yq);uYo=r(Ddt,"TFAlbertModel"),Ddt.forEach(t),bYo=r(DAe," (ALBERT model)"),DAe.forEach(t),vYo=i(x),bT=n(x,"LI",{});var jAe=s(bT);tge=n(jAe,"STRONG",{});var jdt=s(tge);TYo=r(jdt,"bart"),jdt.forEach(t),FYo=r(jAe," \u2014 "),wq=n(jAe,"A",{href:!0});var qdt=s(wq);CYo=r(qdt,"TFBartModel"),qdt.forEach(t),MYo=r(jAe," (BART model)"),jAe.forEach(t),EYo=i(x),vT=n(x,"LI",{});var qAe=s(vT);age=n(qAe,"STRONG",{});var Gdt=s(age);yYo=r(Gdt,"bert"),Gdt.forEach(t),wYo=r(qAe," \u2014 "),Aq=n(qAe,"A",{href:!0});var Odt=s(Aq);AYo=r(Odt,"TFBertModel"),Odt.forEach(t),LYo=r(qAe," (BERT model)"),qAe.forEach(t),BYo=i(x),TT=n(x,"LI",{});var GAe=s(TT);nge=n(GAe,"STRONG",{});var Xdt=s(nge);xYo=r(Xdt,"blenderbot"),Xdt.forEach(t),kYo=r(GAe," \u2014 "),Lq=n(GAe,"A",{href:!0});var Vdt=s(Lq);RYo=r(Vdt,"TFBlenderbotModel"),Vdt.forEach(t),SYo=r(GAe," (Blenderbot model)"),GAe.forEach(t),PYo=i(x),FT=n(x,"LI",{});var OAe=s(FT);sge=n(OAe,"STRONG",{});var zdt=s(sge);$Yo=r(zdt,"blenderbot-small"),zdt.forEach(t),IYo=r(OAe," \u2014 "),Bq=n(OAe,"A",{href:!0});var Wdt=s(Bq);NYo=r(Wdt,"TFBlenderbotSmallModel"),Wdt.forEach(t),DYo=r(OAe," (BlenderbotSmall model)"),OAe.forEach(t),jYo=i(x),CT=n(x,"LI",{});var XAe=s(CT);lge=n(XAe,"STRONG",{});var Qdt=s(lge);qYo=r(Qdt,"camembert"),Qdt.forEach(t),GYo=r(XAe," \u2014 "),xq=n(XAe,"A",{href:!0});var Hdt=s(xq);OYo=r(Hdt,"TFCamembertModel"),Hdt.forEach(t),XYo=r(XAe," (CamemBERT model)"),XAe.forEach(t),VYo=i(x),MT=n(x,"LI",{});var VAe=s(MT);ige=n(VAe,"STRONG",{});var Udt=s(ige);zYo=r(Udt,"clip"),Udt.forEach(t),WYo=r(VAe," \u2014 "),kq=n(VAe,"A",{href:!0});var Jdt=s(kq);QYo=r(Jdt,"TFCLIPModel"),Jdt.forEach(t),HYo=r(VAe," (CLIP model)"),VAe.forEach(t),UYo=i(x),ET=n(x,"LI",{});var zAe=s(ET);dge=n(zAe,"STRONG",{});var Ydt=s(dge);JYo=r(Ydt,"convbert"),Ydt.forEach(t),YYo=r(zAe," \u2014 "),Rq=n(zAe,"A",{href:!0});var Kdt=s(Rq);KYo=r(Kdt,"TFConvBertModel"),Kdt.forEach(t),ZYo=r(zAe," (ConvBERT model)"),zAe.forEach(t),eKo=i(x),yT=n(x,"LI",{});var WAe=s(yT);cge=n(WAe,"STRONG",{});var Zdt=s(cge);oKo=r(Zdt,"convnext"),Zdt.forEach(t),rKo=r(WAe," \u2014 "),Sq=n(WAe,"A",{href:!0});var ect=s(Sq);tKo=r(ect,"TFConvNextModel"),ect.forEach(t),aKo=r(WAe," (ConvNext model)"),WAe.forEach(t),nKo=i(x),wT=n(x,"LI",{});var QAe=s(wT);fge=n(QAe,"STRONG",{});var oct=s(fge);sKo=r(oct,"ctrl"),oct.forEach(t),lKo=r(QAe," \u2014 "),Pq=n(QAe,"A",{href:!0});var rct=s(Pq);iKo=r(rct,"TFCTRLModel"),rct.forEach(t),dKo=r(QAe," (CTRL model)"),QAe.forEach(t),cKo=i(x),AT=n(x,"LI",{});var HAe=s(AT);mge=n(HAe,"STRONG",{});var tct=s(mge);fKo=r(tct,"deberta"),tct.forEach(t),mKo=r(HAe," \u2014 "),$q=n(HAe,"A",{href:!0});var act=s($q);gKo=r(act,"TFDebertaModel"),act.forEach(t),hKo=r(HAe," (DeBERTa model)"),HAe.forEach(t),pKo=i(x),LT=n(x,"LI",{});var UAe=s(LT);gge=n(UAe,"STRONG",{});var nct=s(gge);_Ko=r(nct,"deberta-v2"),nct.forEach(t),uKo=r(UAe," \u2014 "),Iq=n(UAe,"A",{href:!0});var sct=s(Iq);bKo=r(sct,"TFDebertaV2Model"),sct.forEach(t),vKo=r(UAe," (DeBERTa-v2 model)"),UAe.forEach(t),TKo=i(x),BT=n(x,"LI",{});var JAe=s(BT);hge=n(JAe,"STRONG",{});var lct=s(hge);FKo=r(lct,"distilbert"),lct.forEach(t),CKo=r(JAe," \u2014 "),Nq=n(JAe,"A",{href:!0});var ict=s(Nq);MKo=r(ict,"TFDistilBertModel"),ict.forEach(t),EKo=r(JAe," (DistilBERT model)"),JAe.forEach(t),yKo=i(x),xT=n(x,"LI",{});var YAe=s(xT);pge=n(YAe,"STRONG",{});var dct=s(pge);wKo=r(dct,"dpr"),dct.forEach(t),AKo=r(YAe," \u2014 "),Dq=n(YAe,"A",{href:!0});var cct=s(Dq);LKo=r(cct,"TFDPRQuestionEncoder"),cct.forEach(t),BKo=r(YAe," (DPR model)"),YAe.forEach(t),xKo=i(x),kT=n(x,"LI",{});var KAe=s(kT);_ge=n(KAe,"STRONG",{});var fct=s(_ge);kKo=r(fct,"electra"),fct.forEach(t),RKo=r(KAe," \u2014 "),jq=n(KAe,"A",{href:!0});var mct=s(jq);SKo=r(mct,"TFElectraModel"),mct.forEach(t),PKo=r(KAe," (ELECTRA model)"),KAe.forEach(t),$Ko=i(x),RT=n(x,"LI",{});var ZAe=s(RT);uge=n(ZAe,"STRONG",{});var gct=s(uge);IKo=r(gct,"flaubert"),gct.forEach(t),NKo=r(ZAe," \u2014 "),qq=n(ZAe,"A",{href:!0});var hct=s(qq);DKo=r(hct,"TFFlaubertModel"),hct.forEach(t),jKo=r(ZAe," (FlauBERT model)"),ZAe.forEach(t),qKo=i(x),Gs=n(x,"LI",{});var KL=s(Gs);bge=n(KL,"STRONG",{});var pct=s(bge);GKo=r(pct,"funnel"),pct.forEach(t),OKo=r(KL," \u2014 "),Gq=n(KL,"A",{href:!0});var _ct=s(Gq);XKo=r(_ct,"TFFunnelModel"),_ct.forEach(t),VKo=r(KL," or "),Oq=n(KL,"A",{href:!0});var uct=s(Oq);zKo=r(uct,"TFFunnelBaseModel"),uct.forEach(t),WKo=r(KL," (Funnel Transformer model)"),KL.forEach(t),QKo=i(x),ST=n(x,"LI",{});var e0e=s(ST);vge=n(e0e,"STRONG",{});var bct=s(vge);HKo=r(bct,"gpt2"),bct.forEach(t),UKo=r(e0e," \u2014 "),Xq=n(e0e,"A",{href:!0});var vct=s(Xq);JKo=r(vct,"TFGPT2Model"),vct.forEach(t),YKo=r(e0e," (OpenAI GPT-2 model)"),e0e.forEach(t),KKo=i(x),PT=n(x,"LI",{});var o0e=s(PT);Tge=n(o0e,"STRONG",{});var Tct=s(Tge);ZKo=r(Tct,"hubert"),Tct.forEach(t),eZo=r(o0e," \u2014 "),Vq=n(o0e,"A",{href:!0});var Fct=s(Vq);oZo=r(Fct,"TFHubertModel"),Fct.forEach(t),rZo=r(o0e," (Hubert model)"),o0e.forEach(t),tZo=i(x),$T=n(x,"LI",{});var r0e=s($T);Fge=n(r0e,"STRONG",{});var Cct=s(Fge);aZo=r(Cct,"layoutlm"),Cct.forEach(t),nZo=r(r0e," \u2014 "),zq=n(r0e,"A",{href:!0});var Mct=s(zq);sZo=r(Mct,"TFLayoutLMModel"),Mct.forEach(t),lZo=r(r0e," (LayoutLM model)"),r0e.forEach(t),iZo=i(x),IT=n(x,"LI",{});var t0e=s(IT);Cge=n(t0e,"STRONG",{});var Ect=s(Cge);dZo=r(Ect,"led"),Ect.forEach(t),cZo=r(t0e," \u2014 "),Wq=n(t0e,"A",{href:!0});var yct=s(Wq);fZo=r(yct,"TFLEDModel"),yct.forEach(t),mZo=r(t0e," (LED model)"),t0e.forEach(t),gZo=i(x),NT=n(x,"LI",{});var a0e=s(NT);Mge=n(a0e,"STRONG",{});var wct=s(Mge);hZo=r(wct,"longformer"),wct.forEach(t),pZo=r(a0e," \u2014 "),Qq=n(a0e,"A",{href:!0});var Act=s(Qq);_Zo=r(Act,"TFLongformerModel"),Act.forEach(t),uZo=r(a0e," (Longformer model)"),a0e.forEach(t),bZo=i(x),DT=n(x,"LI",{});var n0e=s(DT);Ege=n(n0e,"STRONG",{});var Lct=s(Ege);vZo=r(Lct,"lxmert"),Lct.forEach(t),TZo=r(n0e," \u2014 "),Hq=n(n0e,"A",{href:!0});var Bct=s(Hq);FZo=r(Bct,"TFLxmertModel"),Bct.forEach(t),CZo=r(n0e," (LXMERT model)"),n0e.forEach(t),MZo=i(x),jT=n(x,"LI",{});var s0e=s(jT);yge=n(s0e,"STRONG",{});var xct=s(yge);EZo=r(xct,"marian"),xct.forEach(t),yZo=r(s0e," \u2014 "),Uq=n(s0e,"A",{href:!0});var kct=s(Uq);wZo=r(kct,"TFMarianModel"),kct.forEach(t),AZo=r(s0e," (Marian model)"),s0e.forEach(t),LZo=i(x),qT=n(x,"LI",{});var l0e=s(qT);wge=n(l0e,"STRONG",{});var Rct=s(wge);BZo=r(Rct,"mbart"),Rct.forEach(t),xZo=r(l0e," \u2014 "),Jq=n(l0e,"A",{href:!0});var Sct=s(Jq);kZo=r(Sct,"TFMBartModel"),Sct.forEach(t),RZo=r(l0e," (mBART model)"),l0e.forEach(t),SZo=i(x),GT=n(x,"LI",{});var i0e=s(GT);Age=n(i0e,"STRONG",{});var Pct=s(Age);PZo=r(Pct,"mobilebert"),Pct.forEach(t),$Zo=r(i0e," \u2014 "),Yq=n(i0e,"A",{href:!0});var $ct=s(Yq);IZo=r($ct,"TFMobileBertModel"),$ct.forEach(t),NZo=r(i0e," (MobileBERT model)"),i0e.forEach(t),DZo=i(x),OT=n(x,"LI",{});var d0e=s(OT);Lge=n(d0e,"STRONG",{});var Ict=s(Lge);jZo=r(Ict,"mpnet"),Ict.forEach(t),qZo=r(d0e," \u2014 "),Kq=n(d0e,"A",{href:!0});var Nct=s(Kq);GZo=r(Nct,"TFMPNetModel"),Nct.forEach(t),OZo=r(d0e," (MPNet model)"),d0e.forEach(t),XZo=i(x),XT=n(x,"LI",{});var c0e=s(XT);Bge=n(c0e,"STRONG",{});var Dct=s(Bge);VZo=r(Dct,"mt5"),Dct.forEach(t),zZo=r(c0e," \u2014 "),Zq=n(c0e,"A",{href:!0});var jct=s(Zq);WZo=r(jct,"TFMT5Model"),jct.forEach(t),QZo=r(c0e," (mT5 model)"),c0e.forEach(t),HZo=i(x),VT=n(x,"LI",{});var f0e=s(VT);xge=n(f0e,"STRONG",{});var qct=s(xge);UZo=r(qct,"openai-gpt"),qct.forEach(t),JZo=r(f0e," \u2014 "),eG=n(f0e,"A",{href:!0});var Gct=s(eG);YZo=r(Gct,"TFOpenAIGPTModel"),Gct.forEach(t),KZo=r(f0e," (OpenAI GPT model)"),f0e.forEach(t),ZZo=i(x),zT=n(x,"LI",{});var m0e=s(zT);kge=n(m0e,"STRONG",{});var Oct=s(kge);eer=r(Oct,"pegasus"),Oct.forEach(t),oer=r(m0e," \u2014 "),oG=n(m0e,"A",{href:!0});var Xct=s(oG);rer=r(Xct,"TFPegasusModel"),Xct.forEach(t),ter=r(m0e," (Pegasus model)"),m0e.forEach(t),aer=i(x),WT=n(x,"LI",{});var g0e=s(WT);Rge=n(g0e,"STRONG",{});var Vct=s(Rge);ner=r(Vct,"rembert"),Vct.forEach(t),ser=r(g0e," \u2014 "),rG=n(g0e,"A",{href:!0});var zct=s(rG);ler=r(zct,"TFRemBertModel"),zct.forEach(t),ier=r(g0e," (RemBERT model)"),g0e.forEach(t),der=i(x),QT=n(x,"LI",{});var h0e=s(QT);Sge=n(h0e,"STRONG",{});var Wct=s(Sge);cer=r(Wct,"roberta"),Wct.forEach(t),fer=r(h0e," \u2014 "),tG=n(h0e,"A",{href:!0});var Qct=s(tG);mer=r(Qct,"TFRobertaModel"),Qct.forEach(t),ger=r(h0e," (RoBERTa model)"),h0e.forEach(t),her=i(x),HT=n(x,"LI",{});var p0e=s(HT);Pge=n(p0e,"STRONG",{});var Hct=s(Pge);per=r(Hct,"roformer"),Hct.forEach(t),_er=r(p0e," \u2014 "),aG=n(p0e,"A",{href:!0});var Uct=s(aG);uer=r(Uct,"TFRoFormerModel"),Uct.forEach(t),ber=r(p0e," (RoFormer model)"),p0e.forEach(t),ver=i(x),UT=n(x,"LI",{});var _0e=s(UT);$ge=n(_0e,"STRONG",{});var Jct=s($ge);Ter=r(Jct,"speech_to_text"),Jct.forEach(t),Fer=r(_0e," \u2014 "),nG=n(_0e,"A",{href:!0});var Yct=s(nG);Cer=r(Yct,"TFSpeech2TextModel"),Yct.forEach(t),Mer=r(_0e," (Speech2Text model)"),_0e.forEach(t),Eer=i(x),JT=n(x,"LI",{});var u0e=s(JT);Ige=n(u0e,"STRONG",{});var Kct=s(Ige);yer=r(Kct,"t5"),Kct.forEach(t),wer=r(u0e," \u2014 "),sG=n(u0e,"A",{href:!0});var Zct=s(sG);Aer=r(Zct,"TFT5Model"),Zct.forEach(t),Ler=r(u0e," (T5 model)"),u0e.forEach(t),Ber=i(x),YT=n(x,"LI",{});var b0e=s(YT);Nge=n(b0e,"STRONG",{});var eft=s(Nge);xer=r(eft,"tapas"),eft.forEach(t),ker=r(b0e," \u2014 "),lG=n(b0e,"A",{href:!0});var oft=s(lG);Rer=r(oft,"TFTapasModel"),oft.forEach(t),Ser=r(b0e," (TAPAS model)"),b0e.forEach(t),Per=i(x),KT=n(x,"LI",{});var v0e=s(KT);Dge=n(v0e,"STRONG",{});var rft=s(Dge);$er=r(rft,"transfo-xl"),rft.forEach(t),Ier=r(v0e," \u2014 "),iG=n(v0e,"A",{href:!0});var tft=s(iG);Ner=r(tft,"TFTransfoXLModel"),tft.forEach(t),Der=r(v0e," (Transformer-XL model)"),v0e.forEach(t),jer=i(x),ZT=n(x,"LI",{});var T0e=s(ZT);jge=n(T0e,"STRONG",{});var aft=s(jge);qer=r(aft,"vit"),aft.forEach(t),Ger=r(T0e," \u2014 "),dG=n(T0e,"A",{href:!0});var nft=s(dG);Oer=r(nft,"TFViTModel"),nft.forEach(t),Xer=r(T0e," (ViT model)"),T0e.forEach(t),Ver=i(x),e7=n(x,"LI",{});var F0e=s(e7);qge=n(F0e,"STRONG",{});var sft=s(qge);zer=r(sft,"wav2vec2"),sft.forEach(t),Wer=r(F0e," \u2014 "),cG=n(F0e,"A",{href:!0});var lft=s(cG);Qer=r(lft,"TFWav2Vec2Model"),lft.forEach(t),Her=r(F0e," (Wav2Vec2 model)"),F0e.forEach(t),Uer=i(x),o7=n(x,"LI",{});var C0e=s(o7);Gge=n(C0e,"STRONG",{});var ift=s(Gge);Jer=r(ift,"xlm"),ift.forEach(t),Yer=r(C0e," \u2014 "),fG=n(C0e,"A",{href:!0});var dft=s(fG);Ker=r(dft,"TFXLMModel"),dft.forEach(t),Zer=r(C0e," (XLM model)"),C0e.forEach(t),eor=i(x),r7=n(x,"LI",{});var M0e=s(r7);Oge=n(M0e,"STRONG",{});var cft=s(Oge);oor=r(cft,"xlm-roberta"),cft.forEach(t),ror=r(M0e," \u2014 "),mG=n(M0e,"A",{href:!0});var fft=s(mG);tor=r(fft,"TFXLMRobertaModel"),fft.forEach(t),aor=r(M0e," (XLM-RoBERTa model)"),M0e.forEach(t),nor=i(x),t7=n(x,"LI",{});var E0e=s(t7);Xge=n(E0e,"STRONG",{});var mft=s(Xge);sor=r(mft,"xlnet"),mft.forEach(t),lor=r(E0e," \u2014 "),gG=n(E0e,"A",{href:!0});var gft=s(gG);ior=r(gft,"TFXLNetModel"),gft.forEach(t),dor=r(E0e," (XLNet model)"),E0e.forEach(t),x.forEach(t),cor=i(pa),Vge=n(pa,"P",{});var hft=s(Vge);mor=r(hft,"Examples:"),hft.forEach(t),gor=i(pa),m(Qw.$$.fragment,pa),pa.forEach(t),jl.forEach(t),mRe=i(c),_c=n(c,"H2",{class:!0});var CPe=s(_c);a7=n(CPe,"A",{id:!0,class:!0,href:!0});var pft=s(a7);zge=n(pft,"SPAN",{});var _ft=s(zge);m(Hw.$$.fragment,_ft),_ft.forEach(t),pft.forEach(t),hor=i(CPe),Wge=n(CPe,"SPAN",{});var uft=s(Wge);por=r(uft,"TFAutoModelForPreTraining"),uft.forEach(t),CPe.forEach(t),gRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(Uw.$$.fragment,Gl),_or=i(Gl),uc=n(Gl,"P",{});var QW=s(uc);uor=r(QW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Qge=n(QW,"CODE",{});var bft=s(Qge);bor=r(bft,"from_pretrained()"),bft.forEach(t),vor=r(QW,"class method or the "),Hge=n(QW,"CODE",{});var vft=s(Hge);Tor=r(vft,"from_config()"),vft.forEach(t),For=r(QW,`class
method.`),QW.forEach(t),Cor=i(Gl),Jw=n(Gl,"P",{});var MPe=s(Jw);Mor=r(MPe,"This class cannot be instantiated directly using "),Uge=n(MPe,"CODE",{});var Tft=s(Uge);Eor=r(Tft,"__init__()"),Tft.forEach(t),yor=r(MPe," (throws an error)."),MPe.forEach(t),wor=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(Yw.$$.fragment,Ol),Aor=i(Ol),Jge=n(Ol,"P",{});var Fft=s(Jge);Lor=r(Fft,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fft.forEach(t),Bor=i(Ol),bc=n(Ol,"P",{});var HW=s(bc);xor=r(HW,`Note:
Loading a model from its configuration file does `),Yge=n(HW,"STRONG",{});var Cft=s(Yge);kor=r(Cft,"not"),Cft.forEach(t),Ror=r(HW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kge=n(HW,"CODE",{});var Mft=s(Kge);Sor=r(Mft,"from_pretrained()"),Mft.forEach(t),Por=r(HW,"to load the model weights."),HW.forEach(t),$or=i(Ol),Zge=n(Ol,"P",{});var Eft=s(Zge);Ior=r(Eft,"Examples:"),Eft.forEach(t),Nor=i(Ol),m(Kw.$$.fragment,Ol),Ol.forEach(t),Dor=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(Zw.$$.fragment,_a),jor=i(_a),ehe=n(_a,"P",{});var yft=s(ehe);qor=r(yft,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yft.forEach(t),Gor=i(_a),un=n(_a,"P",{});var N4=s(un);Oor=r(N4,"The model class to instantiate is selected based on the "),ohe=n(N4,"CODE",{});var wft=s(ohe);Xor=r(wft,"model_type"),wft.forEach(t),Vor=r(N4,` property of the config object (either
passed as an argument or loaded from `),rhe=n(N4,"CODE",{});var Aft=s(rhe);zor=r(Aft,"pretrained_model_name_or_path"),Aft.forEach(t),Wor=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(N4,"CODE",{});var Lft=s(the);Qor=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),Hor=r(N4,":"),N4.forEach(t),Uor=i(_a),H=n(_a,"UL",{});var U=s(H);n7=n(U,"LI",{});var y0e=s(n7);ahe=n(y0e,"STRONG",{});var Bft=s(ahe);Jor=r(Bft,"albert"),Bft.forEach(t),Yor=r(y0e," \u2014 "),hG=n(y0e,"A",{href:!0});var xft=s(hG);Kor=r(xft,"TFAlbertForPreTraining"),xft.forEach(t),Zor=r(y0e," (ALBERT model)"),y0e.forEach(t),err=i(U),s7=n(U,"LI",{});var w0e=s(s7);nhe=n(w0e,"STRONG",{});var kft=s(nhe);orr=r(kft,"bart"),kft.forEach(t),rrr=r(w0e," \u2014 "),pG=n(w0e,"A",{href:!0});var Rft=s(pG);trr=r(Rft,"TFBartForConditionalGeneration"),Rft.forEach(t),arr=r(w0e," (BART model)"),w0e.forEach(t),nrr=i(U),l7=n(U,"LI",{});var A0e=s(l7);she=n(A0e,"STRONG",{});var Sft=s(she);srr=r(Sft,"bert"),Sft.forEach(t),lrr=r(A0e," \u2014 "),_G=n(A0e,"A",{href:!0});var Pft=s(_G);irr=r(Pft,"TFBertForPreTraining"),Pft.forEach(t),drr=r(A0e," (BERT model)"),A0e.forEach(t),crr=i(U),i7=n(U,"LI",{});var L0e=s(i7);lhe=n(L0e,"STRONG",{});var $ft=s(lhe);frr=r($ft,"camembert"),$ft.forEach(t),mrr=r(L0e," \u2014 "),uG=n(L0e,"A",{href:!0});var Ift=s(uG);grr=r(Ift,"TFCamembertForMaskedLM"),Ift.forEach(t),hrr=r(L0e," (CamemBERT model)"),L0e.forEach(t),prr=i(U),d7=n(U,"LI",{});var B0e=s(d7);ihe=n(B0e,"STRONG",{});var Nft=s(ihe);_rr=r(Nft,"ctrl"),Nft.forEach(t),urr=r(B0e," \u2014 "),bG=n(B0e,"A",{href:!0});var Dft=s(bG);brr=r(Dft,"TFCTRLLMHeadModel"),Dft.forEach(t),vrr=r(B0e," (CTRL model)"),B0e.forEach(t),Trr=i(U),c7=n(U,"LI",{});var x0e=s(c7);dhe=n(x0e,"STRONG",{});var jft=s(dhe);Frr=r(jft,"distilbert"),jft.forEach(t),Crr=r(x0e," \u2014 "),vG=n(x0e,"A",{href:!0});var qft=s(vG);Mrr=r(qft,"TFDistilBertForMaskedLM"),qft.forEach(t),Err=r(x0e," (DistilBERT model)"),x0e.forEach(t),yrr=i(U),f7=n(U,"LI",{});var k0e=s(f7);che=n(k0e,"STRONG",{});var Gft=s(che);wrr=r(Gft,"electra"),Gft.forEach(t),Arr=r(k0e," \u2014 "),TG=n(k0e,"A",{href:!0});var Oft=s(TG);Lrr=r(Oft,"TFElectraForPreTraining"),Oft.forEach(t),Brr=r(k0e," (ELECTRA model)"),k0e.forEach(t),xrr=i(U),m7=n(U,"LI",{});var R0e=s(m7);fhe=n(R0e,"STRONG",{});var Xft=s(fhe);krr=r(Xft,"flaubert"),Xft.forEach(t),Rrr=r(R0e," \u2014 "),FG=n(R0e,"A",{href:!0});var Vft=s(FG);Srr=r(Vft,"TFFlaubertWithLMHeadModel"),Vft.forEach(t),Prr=r(R0e," (FlauBERT model)"),R0e.forEach(t),$rr=i(U),g7=n(U,"LI",{});var S0e=s(g7);mhe=n(S0e,"STRONG",{});var zft=s(mhe);Irr=r(zft,"funnel"),zft.forEach(t),Nrr=r(S0e," \u2014 "),CG=n(S0e,"A",{href:!0});var Wft=s(CG);Drr=r(Wft,"TFFunnelForPreTraining"),Wft.forEach(t),jrr=r(S0e," (Funnel Transformer model)"),S0e.forEach(t),qrr=i(U),h7=n(U,"LI",{});var P0e=s(h7);ghe=n(P0e,"STRONG",{});var Qft=s(ghe);Grr=r(Qft,"gpt2"),Qft.forEach(t),Orr=r(P0e," \u2014 "),MG=n(P0e,"A",{href:!0});var Hft=s(MG);Xrr=r(Hft,"TFGPT2LMHeadModel"),Hft.forEach(t),Vrr=r(P0e," (OpenAI GPT-2 model)"),P0e.forEach(t),zrr=i(U),p7=n(U,"LI",{});var $0e=s(p7);hhe=n($0e,"STRONG",{});var Uft=s(hhe);Wrr=r(Uft,"layoutlm"),Uft.forEach(t),Qrr=r($0e," \u2014 "),EG=n($0e,"A",{href:!0});var Jft=s(EG);Hrr=r(Jft,"TFLayoutLMForMaskedLM"),Jft.forEach(t),Urr=r($0e," (LayoutLM model)"),$0e.forEach(t),Jrr=i(U),_7=n(U,"LI",{});var I0e=s(_7);phe=n(I0e,"STRONG",{});var Yft=s(phe);Yrr=r(Yft,"lxmert"),Yft.forEach(t),Krr=r(I0e," \u2014 "),yG=n(I0e,"A",{href:!0});var Kft=s(yG);Zrr=r(Kft,"TFLxmertForPreTraining"),Kft.forEach(t),etr=r(I0e," (LXMERT model)"),I0e.forEach(t),otr=i(U),u7=n(U,"LI",{});var N0e=s(u7);_he=n(N0e,"STRONG",{});var Zft=s(_he);rtr=r(Zft,"mobilebert"),Zft.forEach(t),ttr=r(N0e," \u2014 "),wG=n(N0e,"A",{href:!0});var emt=s(wG);atr=r(emt,"TFMobileBertForPreTraining"),emt.forEach(t),ntr=r(N0e," (MobileBERT model)"),N0e.forEach(t),str=i(U),b7=n(U,"LI",{});var D0e=s(b7);uhe=n(D0e,"STRONG",{});var omt=s(uhe);ltr=r(omt,"mpnet"),omt.forEach(t),itr=r(D0e," \u2014 "),AG=n(D0e,"A",{href:!0});var rmt=s(AG);dtr=r(rmt,"TFMPNetForMaskedLM"),rmt.forEach(t),ctr=r(D0e," (MPNet model)"),D0e.forEach(t),ftr=i(U),v7=n(U,"LI",{});var j0e=s(v7);bhe=n(j0e,"STRONG",{});var tmt=s(bhe);mtr=r(tmt,"openai-gpt"),tmt.forEach(t),gtr=r(j0e," \u2014 "),LG=n(j0e,"A",{href:!0});var amt=s(LG);htr=r(amt,"TFOpenAIGPTLMHeadModel"),amt.forEach(t),ptr=r(j0e," (OpenAI GPT model)"),j0e.forEach(t),_tr=i(U),T7=n(U,"LI",{});var q0e=s(T7);vhe=n(q0e,"STRONG",{});var nmt=s(vhe);utr=r(nmt,"roberta"),nmt.forEach(t),btr=r(q0e," \u2014 "),BG=n(q0e,"A",{href:!0});var smt=s(BG);vtr=r(smt,"TFRobertaForMaskedLM"),smt.forEach(t),Ttr=r(q0e," (RoBERTa model)"),q0e.forEach(t),Ftr=i(U),F7=n(U,"LI",{});var G0e=s(F7);The=n(G0e,"STRONG",{});var lmt=s(The);Ctr=r(lmt,"t5"),lmt.forEach(t),Mtr=r(G0e," \u2014 "),xG=n(G0e,"A",{href:!0});var imt=s(xG);Etr=r(imt,"TFT5ForConditionalGeneration"),imt.forEach(t),ytr=r(G0e," (T5 model)"),G0e.forEach(t),wtr=i(U),C7=n(U,"LI",{});var O0e=s(C7);Fhe=n(O0e,"STRONG",{});var dmt=s(Fhe);Atr=r(dmt,"tapas"),dmt.forEach(t),Ltr=r(O0e," \u2014 "),kG=n(O0e,"A",{href:!0});var cmt=s(kG);Btr=r(cmt,"TFTapasForMaskedLM"),cmt.forEach(t),xtr=r(O0e," (TAPAS model)"),O0e.forEach(t),ktr=i(U),M7=n(U,"LI",{});var X0e=s(M7);Che=n(X0e,"STRONG",{});var fmt=s(Che);Rtr=r(fmt,"transfo-xl"),fmt.forEach(t),Str=r(X0e," \u2014 "),RG=n(X0e,"A",{href:!0});var mmt=s(RG);Ptr=r(mmt,"TFTransfoXLLMHeadModel"),mmt.forEach(t),$tr=r(X0e," (Transformer-XL model)"),X0e.forEach(t),Itr=i(U),E7=n(U,"LI",{});var V0e=s(E7);Mhe=n(V0e,"STRONG",{});var gmt=s(Mhe);Ntr=r(gmt,"xlm"),gmt.forEach(t),Dtr=r(V0e," \u2014 "),SG=n(V0e,"A",{href:!0});var hmt=s(SG);jtr=r(hmt,"TFXLMWithLMHeadModel"),hmt.forEach(t),qtr=r(V0e," (XLM model)"),V0e.forEach(t),Gtr=i(U),y7=n(U,"LI",{});var z0e=s(y7);Ehe=n(z0e,"STRONG",{});var pmt=s(Ehe);Otr=r(pmt,"xlm-roberta"),pmt.forEach(t),Xtr=r(z0e," \u2014 "),PG=n(z0e,"A",{href:!0});var _mt=s(PG);Vtr=r(_mt,"TFXLMRobertaForMaskedLM"),_mt.forEach(t),ztr=r(z0e," (XLM-RoBERTa model)"),z0e.forEach(t),Wtr=i(U),w7=n(U,"LI",{});var W0e=s(w7);yhe=n(W0e,"STRONG",{});var umt=s(yhe);Qtr=r(umt,"xlnet"),umt.forEach(t),Htr=r(W0e," \u2014 "),$G=n(W0e,"A",{href:!0});var bmt=s($G);Utr=r(bmt,"TFXLNetLMHeadModel"),bmt.forEach(t),Jtr=r(W0e," (XLNet model)"),W0e.forEach(t),U.forEach(t),Ytr=i(_a),whe=n(_a,"P",{});var vmt=s(whe);Ktr=r(vmt,"Examples:"),vmt.forEach(t),Ztr=i(_a),m(e6.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),hRe=i(c),vc=n(c,"H2",{class:!0});var EPe=s(vc);A7=n(EPe,"A",{id:!0,class:!0,href:!0});var Tmt=s(A7);Ahe=n(Tmt,"SPAN",{});var Fmt=s(Ahe);m(o6.$$.fragment,Fmt),Fmt.forEach(t),Tmt.forEach(t),ear=i(EPe),Lhe=n(EPe,"SPAN",{});var Cmt=s(Lhe);oar=r(Cmt,"TFAutoModelForCausalLM"),Cmt.forEach(t),EPe.forEach(t),pRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(r6.$$.fragment,Xl),rar=i(Xl),Tc=n(Xl,"P",{});var UW=s(Tc);tar=r(UW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Bhe=n(UW,"CODE",{});var Mmt=s(Bhe);aar=r(Mmt,"from_pretrained()"),Mmt.forEach(t),nar=r(UW,"class method or the "),xhe=n(UW,"CODE",{});var Emt=s(xhe);sar=r(Emt,"from_config()"),Emt.forEach(t),lar=r(UW,`class
method.`),UW.forEach(t),iar=i(Xl),t6=n(Xl,"P",{});var yPe=s(t6);dar=r(yPe,"This class cannot be instantiated directly using "),khe=n(yPe,"CODE",{});var ymt=s(khe);car=r(ymt,"__init__()"),ymt.forEach(t),far=r(yPe," (throws an error)."),yPe.forEach(t),mar=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(a6.$$.fragment,Vl),gar=i(Vl),Rhe=n(Vl,"P",{});var wmt=s(Rhe);har=r(wmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wmt.forEach(t),par=i(Vl),Fc=n(Vl,"P",{});var JW=s(Fc);_ar=r(JW,`Note:
Loading a model from its configuration file does `),She=n(JW,"STRONG",{});var Amt=s(She);uar=r(Amt,"not"),Amt.forEach(t),bar=r(JW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Phe=n(JW,"CODE",{});var Lmt=s(Phe);Tar=r(Lmt,"from_pretrained()"),Lmt.forEach(t),Far=r(JW,"to load the model weights."),JW.forEach(t),Car=i(Vl),$he=n(Vl,"P",{});var Bmt=s($he);Mar=r(Bmt,"Examples:"),Bmt.forEach(t),Ear=i(Vl),m(n6.$$.fragment,Vl),Vl.forEach(t),yar=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(s6.$$.fragment,ua),war=i(ua),Ihe=n(ua,"P",{});var xmt=s(Ihe);Aar=r(xmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xmt.forEach(t),Lar=i(ua),bn=n(ua,"P",{});var D4=s(bn);Bar=r(D4,"The model class to instantiate is selected based on the "),Nhe=n(D4,"CODE",{});var kmt=s(Nhe);xar=r(kmt,"model_type"),kmt.forEach(t),kar=r(D4,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(D4,"CODE",{});var Rmt=s(Dhe);Rar=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),Sar=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(D4,"CODE",{});var Smt=s(jhe);Par=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),$ar=r(D4,":"),D4.forEach(t),Iar=i(ua),ge=n(ua,"UL",{});var Fe=s(ge);L7=n(Fe,"LI",{});var Q0e=s(L7);qhe=n(Q0e,"STRONG",{});var Pmt=s(qhe);Nar=r(Pmt,"bert"),Pmt.forEach(t),Dar=r(Q0e," \u2014 "),IG=n(Q0e,"A",{href:!0});var $mt=s(IG);jar=r($mt,"TFBertLMHeadModel"),$mt.forEach(t),qar=r(Q0e," (BERT model)"),Q0e.forEach(t),Gar=i(Fe),B7=n(Fe,"LI",{});var H0e=s(B7);Ghe=n(H0e,"STRONG",{});var Imt=s(Ghe);Oar=r(Imt,"camembert"),Imt.forEach(t),Xar=r(H0e," \u2014 "),NG=n(H0e,"A",{href:!0});var Nmt=s(NG);Var=r(Nmt,"TFCamembertForCausalLM"),Nmt.forEach(t),zar=r(H0e," (CamemBERT model)"),H0e.forEach(t),War=i(Fe),x7=n(Fe,"LI",{});var U0e=s(x7);Ohe=n(U0e,"STRONG",{});var Dmt=s(Ohe);Qar=r(Dmt,"ctrl"),Dmt.forEach(t),Har=r(U0e," \u2014 "),DG=n(U0e,"A",{href:!0});var jmt=s(DG);Uar=r(jmt,"TFCTRLLMHeadModel"),jmt.forEach(t),Jar=r(U0e," (CTRL model)"),U0e.forEach(t),Yar=i(Fe),k7=n(Fe,"LI",{});var J0e=s(k7);Xhe=n(J0e,"STRONG",{});var qmt=s(Xhe);Kar=r(qmt,"gpt2"),qmt.forEach(t),Zar=r(J0e," \u2014 "),jG=n(J0e,"A",{href:!0});var Gmt=s(jG);enr=r(Gmt,"TFGPT2LMHeadModel"),Gmt.forEach(t),onr=r(J0e," (OpenAI GPT-2 model)"),J0e.forEach(t),rnr=i(Fe),R7=n(Fe,"LI",{});var Y0e=s(R7);Vhe=n(Y0e,"STRONG",{});var Omt=s(Vhe);tnr=r(Omt,"openai-gpt"),Omt.forEach(t),anr=r(Y0e," \u2014 "),qG=n(Y0e,"A",{href:!0});var Xmt=s(qG);nnr=r(Xmt,"TFOpenAIGPTLMHeadModel"),Xmt.forEach(t),snr=r(Y0e," (OpenAI GPT model)"),Y0e.forEach(t),lnr=i(Fe),S7=n(Fe,"LI",{});var K0e=s(S7);zhe=n(K0e,"STRONG",{});var Vmt=s(zhe);inr=r(Vmt,"rembert"),Vmt.forEach(t),dnr=r(K0e," \u2014 "),GG=n(K0e,"A",{href:!0});var zmt=s(GG);cnr=r(zmt,"TFRemBertForCausalLM"),zmt.forEach(t),fnr=r(K0e," (RemBERT model)"),K0e.forEach(t),mnr=i(Fe),P7=n(Fe,"LI",{});var Z0e=s(P7);Whe=n(Z0e,"STRONG",{});var Wmt=s(Whe);gnr=r(Wmt,"roberta"),Wmt.forEach(t),hnr=r(Z0e," \u2014 "),OG=n(Z0e,"A",{href:!0});var Qmt=s(OG);pnr=r(Qmt,"TFRobertaForCausalLM"),Qmt.forEach(t),_nr=r(Z0e," (RoBERTa model)"),Z0e.forEach(t),unr=i(Fe),$7=n(Fe,"LI",{});var eLe=s($7);Qhe=n(eLe,"STRONG",{});var Hmt=s(Qhe);bnr=r(Hmt,"roformer"),Hmt.forEach(t),vnr=r(eLe," \u2014 "),XG=n(eLe,"A",{href:!0});var Umt=s(XG);Tnr=r(Umt,"TFRoFormerForCausalLM"),Umt.forEach(t),Fnr=r(eLe," (RoFormer model)"),eLe.forEach(t),Cnr=i(Fe),I7=n(Fe,"LI",{});var oLe=s(I7);Hhe=n(oLe,"STRONG",{});var Jmt=s(Hhe);Mnr=r(Jmt,"transfo-xl"),Jmt.forEach(t),Enr=r(oLe," \u2014 "),VG=n(oLe,"A",{href:!0});var Ymt=s(VG);ynr=r(Ymt,"TFTransfoXLLMHeadModel"),Ymt.forEach(t),wnr=r(oLe," (Transformer-XL model)"),oLe.forEach(t),Anr=i(Fe),N7=n(Fe,"LI",{});var rLe=s(N7);Uhe=n(rLe,"STRONG",{});var Kmt=s(Uhe);Lnr=r(Kmt,"xlm"),Kmt.forEach(t),Bnr=r(rLe," \u2014 "),zG=n(rLe,"A",{href:!0});var Zmt=s(zG);xnr=r(Zmt,"TFXLMWithLMHeadModel"),Zmt.forEach(t),knr=r(rLe," (XLM model)"),rLe.forEach(t),Rnr=i(Fe),D7=n(Fe,"LI",{});var tLe=s(D7);Jhe=n(tLe,"STRONG",{});var egt=s(Jhe);Snr=r(egt,"xlnet"),egt.forEach(t),Pnr=r(tLe," \u2014 "),WG=n(tLe,"A",{href:!0});var ogt=s(WG);$nr=r(ogt,"TFXLNetLMHeadModel"),ogt.forEach(t),Inr=r(tLe," (XLNet model)"),tLe.forEach(t),Fe.forEach(t),Nnr=i(ua),Yhe=n(ua,"P",{});var rgt=s(Yhe);Dnr=r(rgt,"Examples:"),rgt.forEach(t),jnr=i(ua),m(l6.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),_Re=i(c),Cc=n(c,"H2",{class:!0});var wPe=s(Cc);j7=n(wPe,"A",{id:!0,class:!0,href:!0});var tgt=s(j7);Khe=n(tgt,"SPAN",{});var agt=s(Khe);m(i6.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),qnr=i(wPe),Zhe=n(wPe,"SPAN",{});var ngt=s(Zhe);Gnr=r(ngt,"TFAutoModelForImageClassification"),ngt.forEach(t),wPe.forEach(t),uRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(d6.$$.fragment,zl),Onr=i(zl),Mc=n(zl,"P",{});var YW=s(Mc);Xnr=r(YW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),epe=n(YW,"CODE",{});var sgt=s(epe);Vnr=r(sgt,"from_pretrained()"),sgt.forEach(t),znr=r(YW,"class method or the "),ope=n(YW,"CODE",{});var lgt=s(ope);Wnr=r(lgt,"from_config()"),lgt.forEach(t),Qnr=r(YW,`class
method.`),YW.forEach(t),Hnr=i(zl),c6=n(zl,"P",{});var APe=s(c6);Unr=r(APe,"This class cannot be instantiated directly using "),rpe=n(APe,"CODE",{});var igt=s(rpe);Jnr=r(igt,"__init__()"),igt.forEach(t),Ynr=r(APe," (throws an error)."),APe.forEach(t),Knr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(f6.$$.fragment,Wl),Znr=i(Wl),tpe=n(Wl,"P",{});var dgt=s(tpe);esr=r(dgt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dgt.forEach(t),osr=i(Wl),Ec=n(Wl,"P",{});var KW=s(Ec);rsr=r(KW,`Note:
Loading a model from its configuration file does `),ape=n(KW,"STRONG",{});var cgt=s(ape);tsr=r(cgt,"not"),cgt.forEach(t),asr=r(KW,` load the model weights. It only affects the
model\u2019s configuration. Use `),npe=n(KW,"CODE",{});var fgt=s(npe);nsr=r(fgt,"from_pretrained()"),fgt.forEach(t),ssr=r(KW,"to load the model weights."),KW.forEach(t),lsr=i(Wl),spe=n(Wl,"P",{});var mgt=s(spe);isr=r(mgt,"Examples:"),mgt.forEach(t),dsr=i(Wl),m(m6.$$.fragment,Wl),Wl.forEach(t),csr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(g6.$$.fragment,ba),fsr=i(ba),lpe=n(ba,"P",{});var ggt=s(lpe);msr=r(ggt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ggt.forEach(t),gsr=i(ba),vn=n(ba,"P",{});var j4=s(vn);hsr=r(j4,"The model class to instantiate is selected based on the "),ipe=n(j4,"CODE",{});var hgt=s(ipe);psr=r(hgt,"model_type"),hgt.forEach(t),_sr=r(j4,` property of the config object (either
passed as an argument or loaded from `),dpe=n(j4,"CODE",{});var pgt=s(dpe);usr=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),bsr=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(j4,"CODE",{});var _gt=s(cpe);vsr=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),Tsr=r(j4,":"),j4.forEach(t),Fsr=i(ba),h6=n(ba,"UL",{});var LPe=s(h6);q7=n(LPe,"LI",{});var aLe=s(q7);fpe=n(aLe,"STRONG",{});var ugt=s(fpe);Csr=r(ugt,"convnext"),ugt.forEach(t),Msr=r(aLe," \u2014 "),QG=n(aLe,"A",{href:!0});var bgt=s(QG);Esr=r(bgt,"TFConvNextForImageClassification"),bgt.forEach(t),ysr=r(aLe," (ConvNext model)"),aLe.forEach(t),wsr=i(LPe),G7=n(LPe,"LI",{});var nLe=s(G7);mpe=n(nLe,"STRONG",{});var vgt=s(mpe);Asr=r(vgt,"vit"),vgt.forEach(t),Lsr=r(nLe," \u2014 "),HG=n(nLe,"A",{href:!0});var Tgt=s(HG);Bsr=r(Tgt,"TFViTForImageClassification"),Tgt.forEach(t),xsr=r(nLe," (ViT model)"),nLe.forEach(t),LPe.forEach(t),ksr=i(ba),gpe=n(ba,"P",{});var Fgt=s(gpe);Rsr=r(Fgt,"Examples:"),Fgt.forEach(t),Ssr=i(ba),m(p6.$$.fragment,ba),ba.forEach(t),zl.forEach(t),bRe=i(c),yc=n(c,"H2",{class:!0});var BPe=s(yc);O7=n(BPe,"A",{id:!0,class:!0,href:!0});var Cgt=s(O7);hpe=n(Cgt,"SPAN",{});var Mgt=s(hpe);m(_6.$$.fragment,Mgt),Mgt.forEach(t),Cgt.forEach(t),Psr=i(BPe),ppe=n(BPe,"SPAN",{});var Egt=s(ppe);$sr=r(Egt,"TFAutoModelForMaskedLM"),Egt.forEach(t),BPe.forEach(t),vRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(u6.$$.fragment,Ql),Isr=i(Ql),wc=n(Ql,"P",{});var ZW=s(wc);Nsr=r(ZW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_pe=n(ZW,"CODE",{});var ygt=s(_pe);Dsr=r(ygt,"from_pretrained()"),ygt.forEach(t),jsr=r(ZW,"class method or the "),upe=n(ZW,"CODE",{});var wgt=s(upe);qsr=r(wgt,"from_config()"),wgt.forEach(t),Gsr=r(ZW,`class
method.`),ZW.forEach(t),Osr=i(Ql),b6=n(Ql,"P",{});var xPe=s(b6);Xsr=r(xPe,"This class cannot be instantiated directly using "),bpe=n(xPe,"CODE",{});var Agt=s(bpe);Vsr=r(Agt,"__init__()"),Agt.forEach(t),zsr=r(xPe," (throws an error)."),xPe.forEach(t),Wsr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(v6.$$.fragment,Hl),Qsr=i(Hl),vpe=n(Hl,"P",{});var Lgt=s(vpe);Hsr=r(Lgt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lgt.forEach(t),Usr=i(Hl),Ac=n(Hl,"P",{});var eQ=s(Ac);Jsr=r(eQ,`Note:
Loading a model from its configuration file does `),Tpe=n(eQ,"STRONG",{});var Bgt=s(Tpe);Ysr=r(Bgt,"not"),Bgt.forEach(t),Ksr=r(eQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fpe=n(eQ,"CODE",{});var xgt=s(Fpe);Zsr=r(xgt,"from_pretrained()"),xgt.forEach(t),elr=r(eQ,"to load the model weights."),eQ.forEach(t),olr=i(Hl),Cpe=n(Hl,"P",{});var kgt=s(Cpe);rlr=r(kgt,"Examples:"),kgt.forEach(t),tlr=i(Hl),m(T6.$$.fragment,Hl),Hl.forEach(t),alr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(F6.$$.fragment,va),nlr=i(va),Mpe=n(va,"P",{});var Rgt=s(Mpe);slr=r(Rgt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rgt.forEach(t),llr=i(va),Tn=n(va,"P",{});var q4=s(Tn);ilr=r(q4,"The model class to instantiate is selected based on the "),Epe=n(q4,"CODE",{});var Sgt=s(Epe);dlr=r(Sgt,"model_type"),Sgt.forEach(t),clr=r(q4,` property of the config object (either
passed as an argument or loaded from `),ype=n(q4,"CODE",{});var Pgt=s(ype);flr=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),mlr=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(q4,"CODE",{});var $gt=s(wpe);glr=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),hlr=r(q4,":"),q4.forEach(t),plr=i(va),J=n(va,"UL",{});var ee=s(J);X7=n(ee,"LI",{});var sLe=s(X7);Ape=n(sLe,"STRONG",{});var Igt=s(Ape);_lr=r(Igt,"albert"),Igt.forEach(t),ulr=r(sLe," \u2014 "),UG=n(sLe,"A",{href:!0});var Ngt=s(UG);blr=r(Ngt,"TFAlbertForMaskedLM"),Ngt.forEach(t),vlr=r(sLe," (ALBERT model)"),sLe.forEach(t),Tlr=i(ee),V7=n(ee,"LI",{});var lLe=s(V7);Lpe=n(lLe,"STRONG",{});var Dgt=s(Lpe);Flr=r(Dgt,"bert"),Dgt.forEach(t),Clr=r(lLe," \u2014 "),JG=n(lLe,"A",{href:!0});var jgt=s(JG);Mlr=r(jgt,"TFBertForMaskedLM"),jgt.forEach(t),Elr=r(lLe," (BERT model)"),lLe.forEach(t),ylr=i(ee),z7=n(ee,"LI",{});var iLe=s(z7);Bpe=n(iLe,"STRONG",{});var qgt=s(Bpe);wlr=r(qgt,"camembert"),qgt.forEach(t),Alr=r(iLe," \u2014 "),YG=n(iLe,"A",{href:!0});var Ggt=s(YG);Llr=r(Ggt,"TFCamembertForMaskedLM"),Ggt.forEach(t),Blr=r(iLe," (CamemBERT model)"),iLe.forEach(t),xlr=i(ee),W7=n(ee,"LI",{});var dLe=s(W7);xpe=n(dLe,"STRONG",{});var Ogt=s(xpe);klr=r(Ogt,"convbert"),Ogt.forEach(t),Rlr=r(dLe," \u2014 "),KG=n(dLe,"A",{href:!0});var Xgt=s(KG);Slr=r(Xgt,"TFConvBertForMaskedLM"),Xgt.forEach(t),Plr=r(dLe," (ConvBERT model)"),dLe.forEach(t),$lr=i(ee),Q7=n(ee,"LI",{});var cLe=s(Q7);kpe=n(cLe,"STRONG",{});var Vgt=s(kpe);Ilr=r(Vgt,"deberta"),Vgt.forEach(t),Nlr=r(cLe," \u2014 "),ZG=n(cLe,"A",{href:!0});var zgt=s(ZG);Dlr=r(zgt,"TFDebertaForMaskedLM"),zgt.forEach(t),jlr=r(cLe," (DeBERTa model)"),cLe.forEach(t),qlr=i(ee),H7=n(ee,"LI",{});var fLe=s(H7);Rpe=n(fLe,"STRONG",{});var Wgt=s(Rpe);Glr=r(Wgt,"deberta-v2"),Wgt.forEach(t),Olr=r(fLe," \u2014 "),eO=n(fLe,"A",{href:!0});var Qgt=s(eO);Xlr=r(Qgt,"TFDebertaV2ForMaskedLM"),Qgt.forEach(t),Vlr=r(fLe," (DeBERTa-v2 model)"),fLe.forEach(t),zlr=i(ee),U7=n(ee,"LI",{});var mLe=s(U7);Spe=n(mLe,"STRONG",{});var Hgt=s(Spe);Wlr=r(Hgt,"distilbert"),Hgt.forEach(t),Qlr=r(mLe," \u2014 "),oO=n(mLe,"A",{href:!0});var Ugt=s(oO);Hlr=r(Ugt,"TFDistilBertForMaskedLM"),Ugt.forEach(t),Ulr=r(mLe," (DistilBERT model)"),mLe.forEach(t),Jlr=i(ee),J7=n(ee,"LI",{});var gLe=s(J7);Ppe=n(gLe,"STRONG",{});var Jgt=s(Ppe);Ylr=r(Jgt,"electra"),Jgt.forEach(t),Klr=r(gLe," \u2014 "),rO=n(gLe,"A",{href:!0});var Ygt=s(rO);Zlr=r(Ygt,"TFElectraForMaskedLM"),Ygt.forEach(t),eir=r(gLe," (ELECTRA model)"),gLe.forEach(t),oir=i(ee),Y7=n(ee,"LI",{});var hLe=s(Y7);$pe=n(hLe,"STRONG",{});var Kgt=s($pe);rir=r(Kgt,"flaubert"),Kgt.forEach(t),tir=r(hLe," \u2014 "),tO=n(hLe,"A",{href:!0});var Zgt=s(tO);air=r(Zgt,"TFFlaubertWithLMHeadModel"),Zgt.forEach(t),nir=r(hLe," (FlauBERT model)"),hLe.forEach(t),sir=i(ee),K7=n(ee,"LI",{});var pLe=s(K7);Ipe=n(pLe,"STRONG",{});var eht=s(Ipe);lir=r(eht,"funnel"),eht.forEach(t),iir=r(pLe," \u2014 "),aO=n(pLe,"A",{href:!0});var oht=s(aO);dir=r(oht,"TFFunnelForMaskedLM"),oht.forEach(t),cir=r(pLe," (Funnel Transformer model)"),pLe.forEach(t),fir=i(ee),Z7=n(ee,"LI",{});var _Le=s(Z7);Npe=n(_Le,"STRONG",{});var rht=s(Npe);mir=r(rht,"layoutlm"),rht.forEach(t),gir=r(_Le," \u2014 "),nO=n(_Le,"A",{href:!0});var tht=s(nO);hir=r(tht,"TFLayoutLMForMaskedLM"),tht.forEach(t),pir=r(_Le," (LayoutLM model)"),_Le.forEach(t),_ir=i(ee),e8=n(ee,"LI",{});var uLe=s(e8);Dpe=n(uLe,"STRONG",{});var aht=s(Dpe);uir=r(aht,"longformer"),aht.forEach(t),bir=r(uLe," \u2014 "),sO=n(uLe,"A",{href:!0});var nht=s(sO);vir=r(nht,"TFLongformerForMaskedLM"),nht.forEach(t),Tir=r(uLe," (Longformer model)"),uLe.forEach(t),Fir=i(ee),o8=n(ee,"LI",{});var bLe=s(o8);jpe=n(bLe,"STRONG",{});var sht=s(jpe);Cir=r(sht,"mobilebert"),sht.forEach(t),Mir=r(bLe," \u2014 "),lO=n(bLe,"A",{href:!0});var lht=s(lO);Eir=r(lht,"TFMobileBertForMaskedLM"),lht.forEach(t),yir=r(bLe," (MobileBERT model)"),bLe.forEach(t),wir=i(ee),r8=n(ee,"LI",{});var vLe=s(r8);qpe=n(vLe,"STRONG",{});var iht=s(qpe);Air=r(iht,"mpnet"),iht.forEach(t),Lir=r(vLe," \u2014 "),iO=n(vLe,"A",{href:!0});var dht=s(iO);Bir=r(dht,"TFMPNetForMaskedLM"),dht.forEach(t),xir=r(vLe," (MPNet model)"),vLe.forEach(t),kir=i(ee),t8=n(ee,"LI",{});var TLe=s(t8);Gpe=n(TLe,"STRONG",{});var cht=s(Gpe);Rir=r(cht,"rembert"),cht.forEach(t),Sir=r(TLe," \u2014 "),dO=n(TLe,"A",{href:!0});var fht=s(dO);Pir=r(fht,"TFRemBertForMaskedLM"),fht.forEach(t),$ir=r(TLe," (RemBERT model)"),TLe.forEach(t),Iir=i(ee),a8=n(ee,"LI",{});var FLe=s(a8);Ope=n(FLe,"STRONG",{});var mht=s(Ope);Nir=r(mht,"roberta"),mht.forEach(t),Dir=r(FLe," \u2014 "),cO=n(FLe,"A",{href:!0});var ght=s(cO);jir=r(ght,"TFRobertaForMaskedLM"),ght.forEach(t),qir=r(FLe," (RoBERTa model)"),FLe.forEach(t),Gir=i(ee),n8=n(ee,"LI",{});var CLe=s(n8);Xpe=n(CLe,"STRONG",{});var hht=s(Xpe);Oir=r(hht,"roformer"),hht.forEach(t),Xir=r(CLe," \u2014 "),fO=n(CLe,"A",{href:!0});var pht=s(fO);Vir=r(pht,"TFRoFormerForMaskedLM"),pht.forEach(t),zir=r(CLe," (RoFormer model)"),CLe.forEach(t),Wir=i(ee),s8=n(ee,"LI",{});var MLe=s(s8);Vpe=n(MLe,"STRONG",{});var _ht=s(Vpe);Qir=r(_ht,"tapas"),_ht.forEach(t),Hir=r(MLe," \u2014 "),mO=n(MLe,"A",{href:!0});var uht=s(mO);Uir=r(uht,"TFTapasForMaskedLM"),uht.forEach(t),Jir=r(MLe," (TAPAS model)"),MLe.forEach(t),Yir=i(ee),l8=n(ee,"LI",{});var ELe=s(l8);zpe=n(ELe,"STRONG",{});var bht=s(zpe);Kir=r(bht,"xlm"),bht.forEach(t),Zir=r(ELe," \u2014 "),gO=n(ELe,"A",{href:!0});var vht=s(gO);edr=r(vht,"TFXLMWithLMHeadModel"),vht.forEach(t),odr=r(ELe," (XLM model)"),ELe.forEach(t),rdr=i(ee),i8=n(ee,"LI",{});var yLe=s(i8);Wpe=n(yLe,"STRONG",{});var Tht=s(Wpe);tdr=r(Tht,"xlm-roberta"),Tht.forEach(t),adr=r(yLe," \u2014 "),hO=n(yLe,"A",{href:!0});var Fht=s(hO);ndr=r(Fht,"TFXLMRobertaForMaskedLM"),Fht.forEach(t),sdr=r(yLe," (XLM-RoBERTa model)"),yLe.forEach(t),ee.forEach(t),ldr=i(va),Qpe=n(va,"P",{});var Cht=s(Qpe);idr=r(Cht,"Examples:"),Cht.forEach(t),ddr=i(va),m(C6.$$.fragment,va),va.forEach(t),Ql.forEach(t),TRe=i(c),Lc=n(c,"H2",{class:!0});var kPe=s(Lc);d8=n(kPe,"A",{id:!0,class:!0,href:!0});var Mht=s(d8);Hpe=n(Mht,"SPAN",{});var Eht=s(Hpe);m(M6.$$.fragment,Eht),Eht.forEach(t),Mht.forEach(t),cdr=i(kPe),Upe=n(kPe,"SPAN",{});var yht=s(Upe);fdr=r(yht,"TFAutoModelForSeq2SeqLM"),yht.forEach(t),kPe.forEach(t),FRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(E6.$$.fragment,Ul),mdr=i(Ul),Bc=n(Ul,"P",{});var oQ=s(Bc);gdr=r(oQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Jpe=n(oQ,"CODE",{});var wht=s(Jpe);hdr=r(wht,"from_pretrained()"),wht.forEach(t),pdr=r(oQ,"class method or the "),Ype=n(oQ,"CODE",{});var Aht=s(Ype);_dr=r(Aht,"from_config()"),Aht.forEach(t),udr=r(oQ,`class
method.`),oQ.forEach(t),bdr=i(Ul),y6=n(Ul,"P",{});var RPe=s(y6);vdr=r(RPe,"This class cannot be instantiated directly using "),Kpe=n(RPe,"CODE",{});var Lht=s(Kpe);Tdr=r(Lht,"__init__()"),Lht.forEach(t),Fdr=r(RPe," (throws an error)."),RPe.forEach(t),Cdr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(w6.$$.fragment,Jl),Mdr=i(Jl),Zpe=n(Jl,"P",{});var Bht=s(Zpe);Edr=r(Bht,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bht.forEach(t),ydr=i(Jl),xc=n(Jl,"P",{});var rQ=s(xc);wdr=r(rQ,`Note:
Loading a model from its configuration file does `),e_e=n(rQ,"STRONG",{});var xht=s(e_e);Adr=r(xht,"not"),xht.forEach(t),Ldr=r(rQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),o_e=n(rQ,"CODE",{});var kht=s(o_e);Bdr=r(kht,"from_pretrained()"),kht.forEach(t),xdr=r(rQ,"to load the model weights."),rQ.forEach(t),kdr=i(Jl),r_e=n(Jl,"P",{});var Rht=s(r_e);Rdr=r(Rht,"Examples:"),Rht.forEach(t),Sdr=i(Jl),m(A6.$$.fragment,Jl),Jl.forEach(t),Pdr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(L6.$$.fragment,Ta),$dr=i(Ta),t_e=n(Ta,"P",{});var Sht=s(t_e);Idr=r(Sht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Sht.forEach(t),Ndr=i(Ta),Fn=n(Ta,"P",{});var G4=s(Fn);Ddr=r(G4,"The model class to instantiate is selected based on the "),a_e=n(G4,"CODE",{});var Pht=s(a_e);jdr=r(Pht,"model_type"),Pht.forEach(t),qdr=r(G4,` property of the config object (either
passed as an argument or loaded from `),n_e=n(G4,"CODE",{});var $ht=s(n_e);Gdr=r($ht,"pretrained_model_name_or_path"),$ht.forEach(t),Odr=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(G4,"CODE",{});var Iht=s(s_e);Xdr=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),Vdr=r(G4,":"),G4.forEach(t),zdr=i(Ta),_e=n(Ta,"UL",{});var ye=s(_e);c8=n(ye,"LI",{});var wLe=s(c8);l_e=n(wLe,"STRONG",{});var Nht=s(l_e);Wdr=r(Nht,"bart"),Nht.forEach(t),Qdr=r(wLe," \u2014 "),pO=n(wLe,"A",{href:!0});var Dht=s(pO);Hdr=r(Dht,"TFBartForConditionalGeneration"),Dht.forEach(t),Udr=r(wLe," (BART model)"),wLe.forEach(t),Jdr=i(ye),f8=n(ye,"LI",{});var ALe=s(f8);i_e=n(ALe,"STRONG",{});var jht=s(i_e);Ydr=r(jht,"blenderbot"),jht.forEach(t),Kdr=r(ALe," \u2014 "),_O=n(ALe,"A",{href:!0});var qht=s(_O);Zdr=r(qht,"TFBlenderbotForConditionalGeneration"),qht.forEach(t),ecr=r(ALe," (Blenderbot model)"),ALe.forEach(t),ocr=i(ye),m8=n(ye,"LI",{});var LLe=s(m8);d_e=n(LLe,"STRONG",{});var Ght=s(d_e);rcr=r(Ght,"blenderbot-small"),Ght.forEach(t),tcr=r(LLe," \u2014 "),uO=n(LLe,"A",{href:!0});var Oht=s(uO);acr=r(Oht,"TFBlenderbotSmallForConditionalGeneration"),Oht.forEach(t),ncr=r(LLe," (BlenderbotSmall model)"),LLe.forEach(t),scr=i(ye),g8=n(ye,"LI",{});var BLe=s(g8);c_e=n(BLe,"STRONG",{});var Xht=s(c_e);lcr=r(Xht,"encoder-decoder"),Xht.forEach(t),icr=r(BLe," \u2014 "),bO=n(BLe,"A",{href:!0});var Vht=s(bO);dcr=r(Vht,"TFEncoderDecoderModel"),Vht.forEach(t),ccr=r(BLe," (Encoder decoder model)"),BLe.forEach(t),fcr=i(ye),h8=n(ye,"LI",{});var xLe=s(h8);f_e=n(xLe,"STRONG",{});var zht=s(f_e);mcr=r(zht,"led"),zht.forEach(t),gcr=r(xLe," \u2014 "),vO=n(xLe,"A",{href:!0});var Wht=s(vO);hcr=r(Wht,"TFLEDForConditionalGeneration"),Wht.forEach(t),pcr=r(xLe," (LED model)"),xLe.forEach(t),_cr=i(ye),p8=n(ye,"LI",{});var kLe=s(p8);m_e=n(kLe,"STRONG",{});var Qht=s(m_e);ucr=r(Qht,"marian"),Qht.forEach(t),bcr=r(kLe," \u2014 "),TO=n(kLe,"A",{href:!0});var Hht=s(TO);vcr=r(Hht,"TFMarianMTModel"),Hht.forEach(t),Tcr=r(kLe," (Marian model)"),kLe.forEach(t),Fcr=i(ye),_8=n(ye,"LI",{});var RLe=s(_8);g_e=n(RLe,"STRONG",{});var Uht=s(g_e);Ccr=r(Uht,"mbart"),Uht.forEach(t),Mcr=r(RLe," \u2014 "),FO=n(RLe,"A",{href:!0});var Jht=s(FO);Ecr=r(Jht,"TFMBartForConditionalGeneration"),Jht.forEach(t),ycr=r(RLe," (mBART model)"),RLe.forEach(t),wcr=i(ye),u8=n(ye,"LI",{});var SLe=s(u8);h_e=n(SLe,"STRONG",{});var Yht=s(h_e);Acr=r(Yht,"mt5"),Yht.forEach(t),Lcr=r(SLe," \u2014 "),CO=n(SLe,"A",{href:!0});var Kht=s(CO);Bcr=r(Kht,"TFMT5ForConditionalGeneration"),Kht.forEach(t),xcr=r(SLe," (mT5 model)"),SLe.forEach(t),kcr=i(ye),b8=n(ye,"LI",{});var PLe=s(b8);p_e=n(PLe,"STRONG",{});var Zht=s(p_e);Rcr=r(Zht,"pegasus"),Zht.forEach(t),Scr=r(PLe," \u2014 "),MO=n(PLe,"A",{href:!0});var ept=s(MO);Pcr=r(ept,"TFPegasusForConditionalGeneration"),ept.forEach(t),$cr=r(PLe," (Pegasus model)"),PLe.forEach(t),Icr=i(ye),v8=n(ye,"LI",{});var $Le=s(v8);__e=n($Le,"STRONG",{});var opt=s(__e);Ncr=r(opt,"t5"),opt.forEach(t),Dcr=r($Le," \u2014 "),EO=n($Le,"A",{href:!0});var rpt=s(EO);jcr=r(rpt,"TFT5ForConditionalGeneration"),rpt.forEach(t),qcr=r($Le," (T5 model)"),$Le.forEach(t),ye.forEach(t),Gcr=i(Ta),u_e=n(Ta,"P",{});var tpt=s(u_e);Ocr=r(tpt,"Examples:"),tpt.forEach(t),Xcr=i(Ta),m(B6.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),CRe=i(c),kc=n(c,"H2",{class:!0});var SPe=s(kc);T8=n(SPe,"A",{id:!0,class:!0,href:!0});var apt=s(T8);b_e=n(apt,"SPAN",{});var npt=s(b_e);m(x6.$$.fragment,npt),npt.forEach(t),apt.forEach(t),Vcr=i(SPe),v_e=n(SPe,"SPAN",{});var spt=s(v_e);zcr=r(spt,"TFAutoModelForSequenceClassification"),spt.forEach(t),SPe.forEach(t),MRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(k6.$$.fragment,Yl),Wcr=i(Yl),Rc=n(Yl,"P",{});var tQ=s(Rc);Qcr=r(tQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),T_e=n(tQ,"CODE",{});var lpt=s(T_e);Hcr=r(lpt,"from_pretrained()"),lpt.forEach(t),Ucr=r(tQ,"class method or the "),F_e=n(tQ,"CODE",{});var ipt=s(F_e);Jcr=r(ipt,"from_config()"),ipt.forEach(t),Ycr=r(tQ,`class
method.`),tQ.forEach(t),Kcr=i(Yl),R6=n(Yl,"P",{});var PPe=s(R6);Zcr=r(PPe,"This class cannot be instantiated directly using "),C_e=n(PPe,"CODE",{});var dpt=s(C_e);efr=r(dpt,"__init__()"),dpt.forEach(t),ofr=r(PPe," (throws an error)."),PPe.forEach(t),rfr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(S6.$$.fragment,Kl),tfr=i(Kl),M_e=n(Kl,"P",{});var cpt=s(M_e);afr=r(cpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cpt.forEach(t),nfr=i(Kl),Sc=n(Kl,"P",{});var aQ=s(Sc);sfr=r(aQ,`Note:
Loading a model from its configuration file does `),E_e=n(aQ,"STRONG",{});var fpt=s(E_e);lfr=r(fpt,"not"),fpt.forEach(t),ifr=r(aQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),y_e=n(aQ,"CODE",{});var mpt=s(y_e);dfr=r(mpt,"from_pretrained()"),mpt.forEach(t),cfr=r(aQ,"to load the model weights."),aQ.forEach(t),ffr=i(Kl),w_e=n(Kl,"P",{});var gpt=s(w_e);mfr=r(gpt,"Examples:"),gpt.forEach(t),gfr=i(Kl),m(P6.$$.fragment,Kl),Kl.forEach(t),hfr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m($6.$$.fragment,Fa),pfr=i(Fa),A_e=n(Fa,"P",{});var hpt=s(A_e);_fr=r(hpt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hpt.forEach(t),ufr=i(Fa),Cn=n(Fa,"P",{});var O4=s(Cn);bfr=r(O4,"The model class to instantiate is selected based on the "),L_e=n(O4,"CODE",{});var ppt=s(L_e);vfr=r(ppt,"model_type"),ppt.forEach(t),Tfr=r(O4,` property of the config object (either
passed as an argument or loaded from `),B_e=n(O4,"CODE",{});var _pt=s(B_e);Ffr=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),Cfr=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(O4,"CODE",{});var upt=s(x_e);Mfr=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),Efr=r(O4,":"),O4.forEach(t),yfr=i(Fa),V=n(Fa,"UL",{});var W=s(V);F8=n(W,"LI",{});var ILe=s(F8);k_e=n(ILe,"STRONG",{});var bpt=s(k_e);wfr=r(bpt,"albert"),bpt.forEach(t),Afr=r(ILe," \u2014 "),yO=n(ILe,"A",{href:!0});var vpt=s(yO);Lfr=r(vpt,"TFAlbertForSequenceClassification"),vpt.forEach(t),Bfr=r(ILe," (ALBERT model)"),ILe.forEach(t),xfr=i(W),C8=n(W,"LI",{});var NLe=s(C8);R_e=n(NLe,"STRONG",{});var Tpt=s(R_e);kfr=r(Tpt,"bert"),Tpt.forEach(t),Rfr=r(NLe," \u2014 "),wO=n(NLe,"A",{href:!0});var Fpt=s(wO);Sfr=r(Fpt,"TFBertForSequenceClassification"),Fpt.forEach(t),Pfr=r(NLe," (BERT model)"),NLe.forEach(t),$fr=i(W),M8=n(W,"LI",{});var DLe=s(M8);S_e=n(DLe,"STRONG",{});var Cpt=s(S_e);Ifr=r(Cpt,"camembert"),Cpt.forEach(t),Nfr=r(DLe," \u2014 "),AO=n(DLe,"A",{href:!0});var Mpt=s(AO);Dfr=r(Mpt,"TFCamembertForSequenceClassification"),Mpt.forEach(t),jfr=r(DLe," (CamemBERT model)"),DLe.forEach(t),qfr=i(W),E8=n(W,"LI",{});var jLe=s(E8);P_e=n(jLe,"STRONG",{});var Ept=s(P_e);Gfr=r(Ept,"convbert"),Ept.forEach(t),Ofr=r(jLe," \u2014 "),LO=n(jLe,"A",{href:!0});var ypt=s(LO);Xfr=r(ypt,"TFConvBertForSequenceClassification"),ypt.forEach(t),Vfr=r(jLe," (ConvBERT model)"),jLe.forEach(t),zfr=i(W),y8=n(W,"LI",{});var qLe=s(y8);$_e=n(qLe,"STRONG",{});var wpt=s($_e);Wfr=r(wpt,"ctrl"),wpt.forEach(t),Qfr=r(qLe," \u2014 "),BO=n(qLe,"A",{href:!0});var Apt=s(BO);Hfr=r(Apt,"TFCTRLForSequenceClassification"),Apt.forEach(t),Ufr=r(qLe," (CTRL model)"),qLe.forEach(t),Jfr=i(W),w8=n(W,"LI",{});var GLe=s(w8);I_e=n(GLe,"STRONG",{});var Lpt=s(I_e);Yfr=r(Lpt,"deberta"),Lpt.forEach(t),Kfr=r(GLe," \u2014 "),xO=n(GLe,"A",{href:!0});var Bpt=s(xO);Zfr=r(Bpt,"TFDebertaForSequenceClassification"),Bpt.forEach(t),emr=r(GLe," (DeBERTa model)"),GLe.forEach(t),omr=i(W),A8=n(W,"LI",{});var OLe=s(A8);N_e=n(OLe,"STRONG",{});var xpt=s(N_e);rmr=r(xpt,"deberta-v2"),xpt.forEach(t),tmr=r(OLe," \u2014 "),kO=n(OLe,"A",{href:!0});var kpt=s(kO);amr=r(kpt,"TFDebertaV2ForSequenceClassification"),kpt.forEach(t),nmr=r(OLe," (DeBERTa-v2 model)"),OLe.forEach(t),smr=i(W),L8=n(W,"LI",{});var XLe=s(L8);D_e=n(XLe,"STRONG",{});var Rpt=s(D_e);lmr=r(Rpt,"distilbert"),Rpt.forEach(t),imr=r(XLe," \u2014 "),RO=n(XLe,"A",{href:!0});var Spt=s(RO);dmr=r(Spt,"TFDistilBertForSequenceClassification"),Spt.forEach(t),cmr=r(XLe," (DistilBERT model)"),XLe.forEach(t),fmr=i(W),B8=n(W,"LI",{});var VLe=s(B8);j_e=n(VLe,"STRONG",{});var Ppt=s(j_e);mmr=r(Ppt,"electra"),Ppt.forEach(t),gmr=r(VLe," \u2014 "),SO=n(VLe,"A",{href:!0});var $pt=s(SO);hmr=r($pt,"TFElectraForSequenceClassification"),$pt.forEach(t),pmr=r(VLe," (ELECTRA model)"),VLe.forEach(t),_mr=i(W),x8=n(W,"LI",{});var zLe=s(x8);q_e=n(zLe,"STRONG",{});var Ipt=s(q_e);umr=r(Ipt,"flaubert"),Ipt.forEach(t),bmr=r(zLe," \u2014 "),PO=n(zLe,"A",{href:!0});var Npt=s(PO);vmr=r(Npt,"TFFlaubertForSequenceClassification"),Npt.forEach(t),Tmr=r(zLe," (FlauBERT model)"),zLe.forEach(t),Fmr=i(W),k8=n(W,"LI",{});var WLe=s(k8);G_e=n(WLe,"STRONG",{});var Dpt=s(G_e);Cmr=r(Dpt,"funnel"),Dpt.forEach(t),Mmr=r(WLe," \u2014 "),$O=n(WLe,"A",{href:!0});var jpt=s($O);Emr=r(jpt,"TFFunnelForSequenceClassification"),jpt.forEach(t),ymr=r(WLe," (Funnel Transformer model)"),WLe.forEach(t),wmr=i(W),R8=n(W,"LI",{});var QLe=s(R8);O_e=n(QLe,"STRONG",{});var qpt=s(O_e);Amr=r(qpt,"gpt2"),qpt.forEach(t),Lmr=r(QLe," \u2014 "),IO=n(QLe,"A",{href:!0});var Gpt=s(IO);Bmr=r(Gpt,"TFGPT2ForSequenceClassification"),Gpt.forEach(t),xmr=r(QLe," (OpenAI GPT-2 model)"),QLe.forEach(t),kmr=i(W),S8=n(W,"LI",{});var HLe=s(S8);X_e=n(HLe,"STRONG",{});var Opt=s(X_e);Rmr=r(Opt,"layoutlm"),Opt.forEach(t),Smr=r(HLe," \u2014 "),NO=n(HLe,"A",{href:!0});var Xpt=s(NO);Pmr=r(Xpt,"TFLayoutLMForSequenceClassification"),Xpt.forEach(t),$mr=r(HLe," (LayoutLM model)"),HLe.forEach(t),Imr=i(W),P8=n(W,"LI",{});var ULe=s(P8);V_e=n(ULe,"STRONG",{});var Vpt=s(V_e);Nmr=r(Vpt,"longformer"),Vpt.forEach(t),Dmr=r(ULe," \u2014 "),DO=n(ULe,"A",{href:!0});var zpt=s(DO);jmr=r(zpt,"TFLongformerForSequenceClassification"),zpt.forEach(t),qmr=r(ULe," (Longformer model)"),ULe.forEach(t),Gmr=i(W),$8=n(W,"LI",{});var JLe=s($8);z_e=n(JLe,"STRONG",{});var Wpt=s(z_e);Omr=r(Wpt,"mobilebert"),Wpt.forEach(t),Xmr=r(JLe," \u2014 "),jO=n(JLe,"A",{href:!0});var Qpt=s(jO);Vmr=r(Qpt,"TFMobileBertForSequenceClassification"),Qpt.forEach(t),zmr=r(JLe," (MobileBERT model)"),JLe.forEach(t),Wmr=i(W),I8=n(W,"LI",{});var YLe=s(I8);W_e=n(YLe,"STRONG",{});var Hpt=s(W_e);Qmr=r(Hpt,"mpnet"),Hpt.forEach(t),Hmr=r(YLe," \u2014 "),qO=n(YLe,"A",{href:!0});var Upt=s(qO);Umr=r(Upt,"TFMPNetForSequenceClassification"),Upt.forEach(t),Jmr=r(YLe," (MPNet model)"),YLe.forEach(t),Ymr=i(W),N8=n(W,"LI",{});var KLe=s(N8);Q_e=n(KLe,"STRONG",{});var Jpt=s(Q_e);Kmr=r(Jpt,"openai-gpt"),Jpt.forEach(t),Zmr=r(KLe," \u2014 "),GO=n(KLe,"A",{href:!0});var Ypt=s(GO);egr=r(Ypt,"TFOpenAIGPTForSequenceClassification"),Ypt.forEach(t),ogr=r(KLe," (OpenAI GPT model)"),KLe.forEach(t),rgr=i(W),D8=n(W,"LI",{});var ZLe=s(D8);H_e=n(ZLe,"STRONG",{});var Kpt=s(H_e);tgr=r(Kpt,"rembert"),Kpt.forEach(t),agr=r(ZLe," \u2014 "),OO=n(ZLe,"A",{href:!0});var Zpt=s(OO);ngr=r(Zpt,"TFRemBertForSequenceClassification"),Zpt.forEach(t),sgr=r(ZLe," (RemBERT model)"),ZLe.forEach(t),lgr=i(W),j8=n(W,"LI",{});var e9e=s(j8);U_e=n(e9e,"STRONG",{});var e_t=s(U_e);igr=r(e_t,"roberta"),e_t.forEach(t),dgr=r(e9e," \u2014 "),XO=n(e9e,"A",{href:!0});var o_t=s(XO);cgr=r(o_t,"TFRobertaForSequenceClassification"),o_t.forEach(t),fgr=r(e9e," (RoBERTa model)"),e9e.forEach(t),mgr=i(W),q8=n(W,"LI",{});var o9e=s(q8);J_e=n(o9e,"STRONG",{});var r_t=s(J_e);ggr=r(r_t,"roformer"),r_t.forEach(t),hgr=r(o9e," \u2014 "),VO=n(o9e,"A",{href:!0});var t_t=s(VO);pgr=r(t_t,"TFRoFormerForSequenceClassification"),t_t.forEach(t),_gr=r(o9e," (RoFormer model)"),o9e.forEach(t),ugr=i(W),G8=n(W,"LI",{});var r9e=s(G8);Y_e=n(r9e,"STRONG",{});var a_t=s(Y_e);bgr=r(a_t,"tapas"),a_t.forEach(t),vgr=r(r9e," \u2014 "),zO=n(r9e,"A",{href:!0});var n_t=s(zO);Tgr=r(n_t,"TFTapasForSequenceClassification"),n_t.forEach(t),Fgr=r(r9e," (TAPAS model)"),r9e.forEach(t),Cgr=i(W),O8=n(W,"LI",{});var t9e=s(O8);K_e=n(t9e,"STRONG",{});var s_t=s(K_e);Mgr=r(s_t,"transfo-xl"),s_t.forEach(t),Egr=r(t9e," \u2014 "),WO=n(t9e,"A",{href:!0});var l_t=s(WO);ygr=r(l_t,"TFTransfoXLForSequenceClassification"),l_t.forEach(t),wgr=r(t9e," (Transformer-XL model)"),t9e.forEach(t),Agr=i(W),X8=n(W,"LI",{});var a9e=s(X8);Z_e=n(a9e,"STRONG",{});var i_t=s(Z_e);Lgr=r(i_t,"xlm"),i_t.forEach(t),Bgr=r(a9e," \u2014 "),QO=n(a9e,"A",{href:!0});var d_t=s(QO);xgr=r(d_t,"TFXLMForSequenceClassification"),d_t.forEach(t),kgr=r(a9e," (XLM model)"),a9e.forEach(t),Rgr=i(W),V8=n(W,"LI",{});var n9e=s(V8);eue=n(n9e,"STRONG",{});var c_t=s(eue);Sgr=r(c_t,"xlm-roberta"),c_t.forEach(t),Pgr=r(n9e," \u2014 "),HO=n(n9e,"A",{href:!0});var f_t=s(HO);$gr=r(f_t,"TFXLMRobertaForSequenceClassification"),f_t.forEach(t),Igr=r(n9e," (XLM-RoBERTa model)"),n9e.forEach(t),Ngr=i(W),z8=n(W,"LI",{});var s9e=s(z8);oue=n(s9e,"STRONG",{});var m_t=s(oue);Dgr=r(m_t,"xlnet"),m_t.forEach(t),jgr=r(s9e," \u2014 "),UO=n(s9e,"A",{href:!0});var g_t=s(UO);qgr=r(g_t,"TFXLNetForSequenceClassification"),g_t.forEach(t),Ggr=r(s9e," (XLNet model)"),s9e.forEach(t),W.forEach(t),Ogr=i(Fa),rue=n(Fa,"P",{});var h_t=s(rue);Xgr=r(h_t,"Examples:"),h_t.forEach(t),Vgr=i(Fa),m(I6.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),ERe=i(c),Pc=n(c,"H2",{class:!0});var $Pe=s(Pc);W8=n($Pe,"A",{id:!0,class:!0,href:!0});var p_t=s(W8);tue=n(p_t,"SPAN",{});var __t=s(tue);m(N6.$$.fragment,__t),__t.forEach(t),p_t.forEach(t),zgr=i($Pe),aue=n($Pe,"SPAN",{});var u_t=s(aue);Wgr=r(u_t,"TFAutoModelForMultipleChoice"),u_t.forEach(t),$Pe.forEach(t),yRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(D6.$$.fragment,Zl),Qgr=i(Zl),$c=n(Zl,"P",{});var nQ=s($c);Hgr=r(nQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nue=n(nQ,"CODE",{});var b_t=s(nue);Ugr=r(b_t,"from_pretrained()"),b_t.forEach(t),Jgr=r(nQ,"class method or the "),sue=n(nQ,"CODE",{});var v_t=s(sue);Ygr=r(v_t,"from_config()"),v_t.forEach(t),Kgr=r(nQ,`class
method.`),nQ.forEach(t),Zgr=i(Zl),j6=n(Zl,"P",{});var IPe=s(j6);ehr=r(IPe,"This class cannot be instantiated directly using "),lue=n(IPe,"CODE",{});var T_t=s(lue);ohr=r(T_t,"__init__()"),T_t.forEach(t),rhr=r(IPe," (throws an error)."),IPe.forEach(t),thr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(q6.$$.fragment,ei),ahr=i(ei),iue=n(ei,"P",{});var F_t=s(iue);nhr=r(F_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F_t.forEach(t),shr=i(ei),Ic=n(ei,"P",{});var sQ=s(Ic);lhr=r(sQ,`Note:
Loading a model from its configuration file does `),due=n(sQ,"STRONG",{});var C_t=s(due);ihr=r(C_t,"not"),C_t.forEach(t),dhr=r(sQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=n(sQ,"CODE",{});var M_t=s(cue);chr=r(M_t,"from_pretrained()"),M_t.forEach(t),fhr=r(sQ,"to load the model weights."),sQ.forEach(t),mhr=i(ei),fue=n(ei,"P",{});var E_t=s(fue);ghr=r(E_t,"Examples:"),E_t.forEach(t),hhr=i(ei),m(G6.$$.fragment,ei),ei.forEach(t),phr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(O6.$$.fragment,Ca),_hr=i(Ca),mue=n(Ca,"P",{});var y_t=s(mue);uhr=r(y_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y_t.forEach(t),bhr=i(Ca),Mn=n(Ca,"P",{});var X4=s(Mn);vhr=r(X4,"The model class to instantiate is selected based on the "),gue=n(X4,"CODE",{});var w_t=s(gue);Thr=r(w_t,"model_type"),w_t.forEach(t),Fhr=r(X4,` property of the config object (either
passed as an argument or loaded from `),hue=n(X4,"CODE",{});var A_t=s(hue);Chr=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),Mhr=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(X4,"CODE",{});var L_t=s(pue);Ehr=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),yhr=r(X4,":"),X4.forEach(t),whr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);Q8=n(le,"LI",{});var l9e=s(Q8);_ue=n(l9e,"STRONG",{});var B_t=s(_ue);Ahr=r(B_t,"albert"),B_t.forEach(t),Lhr=r(l9e," \u2014 "),JO=n(l9e,"A",{href:!0});var x_t=s(JO);Bhr=r(x_t,"TFAlbertForMultipleChoice"),x_t.forEach(t),xhr=r(l9e," (ALBERT model)"),l9e.forEach(t),khr=i(le),H8=n(le,"LI",{});var i9e=s(H8);uue=n(i9e,"STRONG",{});var k_t=s(uue);Rhr=r(k_t,"bert"),k_t.forEach(t),Shr=r(i9e," \u2014 "),YO=n(i9e,"A",{href:!0});var R_t=s(YO);Phr=r(R_t,"TFBertForMultipleChoice"),R_t.forEach(t),$hr=r(i9e," (BERT model)"),i9e.forEach(t),Ihr=i(le),U8=n(le,"LI",{});var d9e=s(U8);bue=n(d9e,"STRONG",{});var S_t=s(bue);Nhr=r(S_t,"camembert"),S_t.forEach(t),Dhr=r(d9e," \u2014 "),KO=n(d9e,"A",{href:!0});var P_t=s(KO);jhr=r(P_t,"TFCamembertForMultipleChoice"),P_t.forEach(t),qhr=r(d9e," (CamemBERT model)"),d9e.forEach(t),Ghr=i(le),J8=n(le,"LI",{});var c9e=s(J8);vue=n(c9e,"STRONG",{});var $_t=s(vue);Ohr=r($_t,"convbert"),$_t.forEach(t),Xhr=r(c9e," \u2014 "),ZO=n(c9e,"A",{href:!0});var I_t=s(ZO);Vhr=r(I_t,"TFConvBertForMultipleChoice"),I_t.forEach(t),zhr=r(c9e," (ConvBERT model)"),c9e.forEach(t),Whr=i(le),Y8=n(le,"LI",{});var f9e=s(Y8);Tue=n(f9e,"STRONG",{});var N_t=s(Tue);Qhr=r(N_t,"distilbert"),N_t.forEach(t),Hhr=r(f9e," \u2014 "),eX=n(f9e,"A",{href:!0});var D_t=s(eX);Uhr=r(D_t,"TFDistilBertForMultipleChoice"),D_t.forEach(t),Jhr=r(f9e," (DistilBERT model)"),f9e.forEach(t),Yhr=i(le),K8=n(le,"LI",{});var m9e=s(K8);Fue=n(m9e,"STRONG",{});var j_t=s(Fue);Khr=r(j_t,"electra"),j_t.forEach(t),Zhr=r(m9e," \u2014 "),oX=n(m9e,"A",{href:!0});var q_t=s(oX);epr=r(q_t,"TFElectraForMultipleChoice"),q_t.forEach(t),opr=r(m9e," (ELECTRA model)"),m9e.forEach(t),rpr=i(le),Z8=n(le,"LI",{});var g9e=s(Z8);Cue=n(g9e,"STRONG",{});var G_t=s(Cue);tpr=r(G_t,"flaubert"),G_t.forEach(t),apr=r(g9e," \u2014 "),rX=n(g9e,"A",{href:!0});var O_t=s(rX);npr=r(O_t,"TFFlaubertForMultipleChoice"),O_t.forEach(t),spr=r(g9e," (FlauBERT model)"),g9e.forEach(t),lpr=i(le),eF=n(le,"LI",{});var h9e=s(eF);Mue=n(h9e,"STRONG",{});var X_t=s(Mue);ipr=r(X_t,"funnel"),X_t.forEach(t),dpr=r(h9e," \u2014 "),tX=n(h9e,"A",{href:!0});var V_t=s(tX);cpr=r(V_t,"TFFunnelForMultipleChoice"),V_t.forEach(t),fpr=r(h9e," (Funnel Transformer model)"),h9e.forEach(t),mpr=i(le),oF=n(le,"LI",{});var p9e=s(oF);Eue=n(p9e,"STRONG",{});var z_t=s(Eue);gpr=r(z_t,"longformer"),z_t.forEach(t),hpr=r(p9e," \u2014 "),aX=n(p9e,"A",{href:!0});var W_t=s(aX);ppr=r(W_t,"TFLongformerForMultipleChoice"),W_t.forEach(t),_pr=r(p9e," (Longformer model)"),p9e.forEach(t),upr=i(le),rF=n(le,"LI",{});var _9e=s(rF);yue=n(_9e,"STRONG",{});var Q_t=s(yue);bpr=r(Q_t,"mobilebert"),Q_t.forEach(t),vpr=r(_9e," \u2014 "),nX=n(_9e,"A",{href:!0});var H_t=s(nX);Tpr=r(H_t,"TFMobileBertForMultipleChoice"),H_t.forEach(t),Fpr=r(_9e," (MobileBERT model)"),_9e.forEach(t),Cpr=i(le),tF=n(le,"LI",{});var u9e=s(tF);wue=n(u9e,"STRONG",{});var U_t=s(wue);Mpr=r(U_t,"mpnet"),U_t.forEach(t),Epr=r(u9e," \u2014 "),sX=n(u9e,"A",{href:!0});var J_t=s(sX);ypr=r(J_t,"TFMPNetForMultipleChoice"),J_t.forEach(t),wpr=r(u9e," (MPNet model)"),u9e.forEach(t),Apr=i(le),aF=n(le,"LI",{});var b9e=s(aF);Aue=n(b9e,"STRONG",{});var Y_t=s(Aue);Lpr=r(Y_t,"rembert"),Y_t.forEach(t),Bpr=r(b9e," \u2014 "),lX=n(b9e,"A",{href:!0});var K_t=s(lX);xpr=r(K_t,"TFRemBertForMultipleChoice"),K_t.forEach(t),kpr=r(b9e," (RemBERT model)"),b9e.forEach(t),Rpr=i(le),nF=n(le,"LI",{});var v9e=s(nF);Lue=n(v9e,"STRONG",{});var Z_t=s(Lue);Spr=r(Z_t,"roberta"),Z_t.forEach(t),Ppr=r(v9e," \u2014 "),iX=n(v9e,"A",{href:!0});var eut=s(iX);$pr=r(eut,"TFRobertaForMultipleChoice"),eut.forEach(t),Ipr=r(v9e," (RoBERTa model)"),v9e.forEach(t),Npr=i(le),sF=n(le,"LI",{});var T9e=s(sF);Bue=n(T9e,"STRONG",{});var out=s(Bue);Dpr=r(out,"roformer"),out.forEach(t),jpr=r(T9e," \u2014 "),dX=n(T9e,"A",{href:!0});var rut=s(dX);qpr=r(rut,"TFRoFormerForMultipleChoice"),rut.forEach(t),Gpr=r(T9e," (RoFormer model)"),T9e.forEach(t),Opr=i(le),lF=n(le,"LI",{});var F9e=s(lF);xue=n(F9e,"STRONG",{});var tut=s(xue);Xpr=r(tut,"xlm"),tut.forEach(t),Vpr=r(F9e," \u2014 "),cX=n(F9e,"A",{href:!0});var aut=s(cX);zpr=r(aut,"TFXLMForMultipleChoice"),aut.forEach(t),Wpr=r(F9e," (XLM model)"),F9e.forEach(t),Qpr=i(le),iF=n(le,"LI",{});var C9e=s(iF);kue=n(C9e,"STRONG",{});var nut=s(kue);Hpr=r(nut,"xlm-roberta"),nut.forEach(t),Upr=r(C9e," \u2014 "),fX=n(C9e,"A",{href:!0});var sut=s(fX);Jpr=r(sut,"TFXLMRobertaForMultipleChoice"),sut.forEach(t),Ypr=r(C9e," (XLM-RoBERTa model)"),C9e.forEach(t),Kpr=i(le),dF=n(le,"LI",{});var M9e=s(dF);Rue=n(M9e,"STRONG",{});var lut=s(Rue);Zpr=r(lut,"xlnet"),lut.forEach(t),e_r=r(M9e," \u2014 "),mX=n(M9e,"A",{href:!0});var iut=s(mX);o_r=r(iut,"TFXLNetForMultipleChoice"),iut.forEach(t),r_r=r(M9e," (XLNet model)"),M9e.forEach(t),le.forEach(t),t_r=i(Ca),Sue=n(Ca,"P",{});var dut=s(Sue);a_r=r(dut,"Examples:"),dut.forEach(t),n_r=i(Ca),m(X6.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),wRe=i(c),Nc=n(c,"H2",{class:!0});var NPe=s(Nc);cF=n(NPe,"A",{id:!0,class:!0,href:!0});var cut=s(cF);Pue=n(cut,"SPAN",{});var fut=s(Pue);m(V6.$$.fragment,fut),fut.forEach(t),cut.forEach(t),s_r=i(NPe),$ue=n(NPe,"SPAN",{});var mut=s($ue);l_r=r(mut,"TFAutoModelForTableQuestionAnswering"),mut.forEach(t),NPe.forEach(t),ARe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(z6.$$.fragment,oi),i_r=i(oi),Dc=n(oi,"P",{});var lQ=s(Dc);d_r=r(lQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Iue=n(lQ,"CODE",{});var gut=s(Iue);c_r=r(gut,"from_pretrained()"),gut.forEach(t),f_r=r(lQ,"class method or the "),Nue=n(lQ,"CODE",{});var hut=s(Nue);m_r=r(hut,"from_config()"),hut.forEach(t),g_r=r(lQ,`class
method.`),lQ.forEach(t),h_r=i(oi),W6=n(oi,"P",{});var DPe=s(W6);p_r=r(DPe,"This class cannot be instantiated directly using "),Due=n(DPe,"CODE",{});var put=s(Due);__r=r(put,"__init__()"),put.forEach(t),u_r=r(DPe," (throws an error)."),DPe.forEach(t),b_r=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(Q6.$$.fragment,ri),v_r=i(ri),jue=n(ri,"P",{});var _ut=s(jue);T_r=r(_ut,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_ut.forEach(t),F_r=i(ri),jc=n(ri,"P",{});var iQ=s(jc);C_r=r(iQ,`Note:
Loading a model from its configuration file does `),que=n(iQ,"STRONG",{});var uut=s(que);M_r=r(uut,"not"),uut.forEach(t),E_r=r(iQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gue=n(iQ,"CODE",{});var but=s(Gue);y_r=r(but,"from_pretrained()"),but.forEach(t),w_r=r(iQ,"to load the model weights."),iQ.forEach(t),A_r=i(ri),Oue=n(ri,"P",{});var vut=s(Oue);L_r=r(vut,"Examples:"),vut.forEach(t),B_r=i(ri),m(H6.$$.fragment,ri),ri.forEach(t),x_r=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(U6.$$.fragment,Ma),k_r=i(Ma),Xue=n(Ma,"P",{});var Tut=s(Xue);R_r=r(Tut,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Tut.forEach(t),S_r=i(Ma),En=n(Ma,"P",{});var V4=s(En);P_r=r(V4,"The model class to instantiate is selected based on the "),Vue=n(V4,"CODE",{});var Fut=s(Vue);$_r=r(Fut,"model_type"),Fut.forEach(t),I_r=r(V4,` property of the config object (either
passed as an argument or loaded from `),zue=n(V4,"CODE",{});var Cut=s(zue);N_r=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),D_r=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(V4,"CODE",{});var Mut=s(Wue);j_r=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),q_r=r(V4,":"),V4.forEach(t),G_r=i(Ma),Que=n(Ma,"UL",{});var Eut=s(Que);fF=n(Eut,"LI",{});var E9e=s(fF);Hue=n(E9e,"STRONG",{});var yut=s(Hue);O_r=r(yut,"tapas"),yut.forEach(t),X_r=r(E9e," \u2014 "),gX=n(E9e,"A",{href:!0});var wut=s(gX);V_r=r(wut,"TFTapasForQuestionAnswering"),wut.forEach(t),z_r=r(E9e," (TAPAS model)"),E9e.forEach(t),Eut.forEach(t),W_r=i(Ma),Uue=n(Ma,"P",{});var Aut=s(Uue);Q_r=r(Aut,"Examples:"),Aut.forEach(t),H_r=i(Ma),m(J6.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),LRe=i(c),qc=n(c,"H2",{class:!0});var jPe=s(qc);mF=n(jPe,"A",{id:!0,class:!0,href:!0});var Lut=s(mF);Jue=n(Lut,"SPAN",{});var But=s(Jue);m(Y6.$$.fragment,But),But.forEach(t),Lut.forEach(t),U_r=i(jPe),Yue=n(jPe,"SPAN",{});var xut=s(Yue);J_r=r(xut,"TFAutoModelForTokenClassification"),xut.forEach(t),jPe.forEach(t),BRe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(K6.$$.fragment,ti),Y_r=i(ti),Gc=n(ti,"P",{});var dQ=s(Gc);K_r=r(dQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Kue=n(dQ,"CODE",{});var kut=s(Kue);Z_r=r(kut,"from_pretrained()"),kut.forEach(t),eur=r(dQ,"class method or the "),Zue=n(dQ,"CODE",{});var Rut=s(Zue);our=r(Rut,"from_config()"),Rut.forEach(t),rur=r(dQ,`class
method.`),dQ.forEach(t),tur=i(ti),Z6=n(ti,"P",{});var qPe=s(Z6);aur=r(qPe,"This class cannot be instantiated directly using "),e1e=n(qPe,"CODE",{});var Sut=s(e1e);nur=r(Sut,"__init__()"),Sut.forEach(t),sur=r(qPe," (throws an error)."),qPe.forEach(t),lur=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(eA.$$.fragment,ai),iur=i(ai),o1e=n(ai,"P",{});var Put=s(o1e);dur=r(Put,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Put.forEach(t),cur=i(ai),Oc=n(ai,"P",{});var cQ=s(Oc);fur=r(cQ,`Note:
Loading a model from its configuration file does `),r1e=n(cQ,"STRONG",{});var $ut=s(r1e);mur=r($ut,"not"),$ut.forEach(t),gur=r(cQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),t1e=n(cQ,"CODE",{});var Iut=s(t1e);hur=r(Iut,"from_pretrained()"),Iut.forEach(t),pur=r(cQ,"to load the model weights."),cQ.forEach(t),_ur=i(ai),a1e=n(ai,"P",{});var Nut=s(a1e);uur=r(Nut,"Examples:"),Nut.forEach(t),bur=i(ai),m(oA.$$.fragment,ai),ai.forEach(t),vur=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(rA.$$.fragment,Ea),Tur=i(Ea),n1e=n(Ea,"P",{});var Dut=s(n1e);Fur=r(Dut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Dut.forEach(t),Cur=i(Ea),yn=n(Ea,"P",{});var z4=s(yn);Mur=r(z4,"The model class to instantiate is selected based on the "),s1e=n(z4,"CODE",{});var jut=s(s1e);Eur=r(jut,"model_type"),jut.forEach(t),yur=r(z4,` property of the config object (either
passed as an argument or loaded from `),l1e=n(z4,"CODE",{});var qut=s(l1e);wur=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),Aur=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(z4,"CODE",{});var Gut=s(i1e);Lur=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),Bur=r(z4,":"),z4.forEach(t),xur=i(Ea),Y=n(Ea,"UL",{});var oe=s(Y);gF=n(oe,"LI",{});var y9e=s(gF);d1e=n(y9e,"STRONG",{});var Out=s(d1e);kur=r(Out,"albert"),Out.forEach(t),Rur=r(y9e," \u2014 "),hX=n(y9e,"A",{href:!0});var Xut=s(hX);Sur=r(Xut,"TFAlbertForTokenClassification"),Xut.forEach(t),Pur=r(y9e," (ALBERT model)"),y9e.forEach(t),$ur=i(oe),hF=n(oe,"LI",{});var w9e=s(hF);c1e=n(w9e,"STRONG",{});var Vut=s(c1e);Iur=r(Vut,"bert"),Vut.forEach(t),Nur=r(w9e," \u2014 "),pX=n(w9e,"A",{href:!0});var zut=s(pX);Dur=r(zut,"TFBertForTokenClassification"),zut.forEach(t),jur=r(w9e," (BERT model)"),w9e.forEach(t),qur=i(oe),pF=n(oe,"LI",{});var A9e=s(pF);f1e=n(A9e,"STRONG",{});var Wut=s(f1e);Gur=r(Wut,"camembert"),Wut.forEach(t),Our=r(A9e," \u2014 "),_X=n(A9e,"A",{href:!0});var Qut=s(_X);Xur=r(Qut,"TFCamembertForTokenClassification"),Qut.forEach(t),Vur=r(A9e," (CamemBERT model)"),A9e.forEach(t),zur=i(oe),_F=n(oe,"LI",{});var L9e=s(_F);m1e=n(L9e,"STRONG",{});var Hut=s(m1e);Wur=r(Hut,"convbert"),Hut.forEach(t),Qur=r(L9e," \u2014 "),uX=n(L9e,"A",{href:!0});var Uut=s(uX);Hur=r(Uut,"TFConvBertForTokenClassification"),Uut.forEach(t),Uur=r(L9e," (ConvBERT model)"),L9e.forEach(t),Jur=i(oe),uF=n(oe,"LI",{});var B9e=s(uF);g1e=n(B9e,"STRONG",{});var Jut=s(g1e);Yur=r(Jut,"deberta"),Jut.forEach(t),Kur=r(B9e," \u2014 "),bX=n(B9e,"A",{href:!0});var Yut=s(bX);Zur=r(Yut,"TFDebertaForTokenClassification"),Yut.forEach(t),e1r=r(B9e," (DeBERTa model)"),B9e.forEach(t),o1r=i(oe),bF=n(oe,"LI",{});var x9e=s(bF);h1e=n(x9e,"STRONG",{});var Kut=s(h1e);r1r=r(Kut,"deberta-v2"),Kut.forEach(t),t1r=r(x9e," \u2014 "),vX=n(x9e,"A",{href:!0});var Zut=s(vX);a1r=r(Zut,"TFDebertaV2ForTokenClassification"),Zut.forEach(t),n1r=r(x9e," (DeBERTa-v2 model)"),x9e.forEach(t),s1r=i(oe),vF=n(oe,"LI",{});var k9e=s(vF);p1e=n(k9e,"STRONG",{});var e1t=s(p1e);l1r=r(e1t,"distilbert"),e1t.forEach(t),i1r=r(k9e," \u2014 "),TX=n(k9e,"A",{href:!0});var o1t=s(TX);d1r=r(o1t,"TFDistilBertForTokenClassification"),o1t.forEach(t),c1r=r(k9e," (DistilBERT model)"),k9e.forEach(t),f1r=i(oe),TF=n(oe,"LI",{});var R9e=s(TF);_1e=n(R9e,"STRONG",{});var r1t=s(_1e);m1r=r(r1t,"electra"),r1t.forEach(t),g1r=r(R9e," \u2014 "),FX=n(R9e,"A",{href:!0});var t1t=s(FX);h1r=r(t1t,"TFElectraForTokenClassification"),t1t.forEach(t),p1r=r(R9e," (ELECTRA model)"),R9e.forEach(t),_1r=i(oe),FF=n(oe,"LI",{});var S9e=s(FF);u1e=n(S9e,"STRONG",{});var a1t=s(u1e);u1r=r(a1t,"flaubert"),a1t.forEach(t),b1r=r(S9e," \u2014 "),CX=n(S9e,"A",{href:!0});var n1t=s(CX);v1r=r(n1t,"TFFlaubertForTokenClassification"),n1t.forEach(t),T1r=r(S9e," (FlauBERT model)"),S9e.forEach(t),F1r=i(oe),CF=n(oe,"LI",{});var P9e=s(CF);b1e=n(P9e,"STRONG",{});var s1t=s(b1e);C1r=r(s1t,"funnel"),s1t.forEach(t),M1r=r(P9e," \u2014 "),MX=n(P9e,"A",{href:!0});var l1t=s(MX);E1r=r(l1t,"TFFunnelForTokenClassification"),l1t.forEach(t),y1r=r(P9e," (Funnel Transformer model)"),P9e.forEach(t),w1r=i(oe),MF=n(oe,"LI",{});var $9e=s(MF);v1e=n($9e,"STRONG",{});var i1t=s(v1e);A1r=r(i1t,"layoutlm"),i1t.forEach(t),L1r=r($9e," \u2014 "),EX=n($9e,"A",{href:!0});var d1t=s(EX);B1r=r(d1t,"TFLayoutLMForTokenClassification"),d1t.forEach(t),x1r=r($9e," (LayoutLM model)"),$9e.forEach(t),k1r=i(oe),EF=n(oe,"LI",{});var I9e=s(EF);T1e=n(I9e,"STRONG",{});var c1t=s(T1e);R1r=r(c1t,"longformer"),c1t.forEach(t),S1r=r(I9e," \u2014 "),yX=n(I9e,"A",{href:!0});var f1t=s(yX);P1r=r(f1t,"TFLongformerForTokenClassification"),f1t.forEach(t),$1r=r(I9e," (Longformer model)"),I9e.forEach(t),I1r=i(oe),yF=n(oe,"LI",{});var N9e=s(yF);F1e=n(N9e,"STRONG",{});var m1t=s(F1e);N1r=r(m1t,"mobilebert"),m1t.forEach(t),D1r=r(N9e," \u2014 "),wX=n(N9e,"A",{href:!0});var g1t=s(wX);j1r=r(g1t,"TFMobileBertForTokenClassification"),g1t.forEach(t),q1r=r(N9e," (MobileBERT model)"),N9e.forEach(t),G1r=i(oe),wF=n(oe,"LI",{});var D9e=s(wF);C1e=n(D9e,"STRONG",{});var h1t=s(C1e);O1r=r(h1t,"mpnet"),h1t.forEach(t),X1r=r(D9e," \u2014 "),AX=n(D9e,"A",{href:!0});var p1t=s(AX);V1r=r(p1t,"TFMPNetForTokenClassification"),p1t.forEach(t),z1r=r(D9e," (MPNet model)"),D9e.forEach(t),W1r=i(oe),AF=n(oe,"LI",{});var j9e=s(AF);M1e=n(j9e,"STRONG",{});var _1t=s(M1e);Q1r=r(_1t,"rembert"),_1t.forEach(t),H1r=r(j9e," \u2014 "),LX=n(j9e,"A",{href:!0});var u1t=s(LX);U1r=r(u1t,"TFRemBertForTokenClassification"),u1t.forEach(t),J1r=r(j9e," (RemBERT model)"),j9e.forEach(t),Y1r=i(oe),LF=n(oe,"LI",{});var q9e=s(LF);E1e=n(q9e,"STRONG",{});var b1t=s(E1e);K1r=r(b1t,"roberta"),b1t.forEach(t),Z1r=r(q9e," \u2014 "),BX=n(q9e,"A",{href:!0});var v1t=s(BX);ebr=r(v1t,"TFRobertaForTokenClassification"),v1t.forEach(t),obr=r(q9e," (RoBERTa model)"),q9e.forEach(t),rbr=i(oe),BF=n(oe,"LI",{});var G9e=s(BF);y1e=n(G9e,"STRONG",{});var T1t=s(y1e);tbr=r(T1t,"roformer"),T1t.forEach(t),abr=r(G9e," \u2014 "),xX=n(G9e,"A",{href:!0});var F1t=s(xX);nbr=r(F1t,"TFRoFormerForTokenClassification"),F1t.forEach(t),sbr=r(G9e," (RoFormer model)"),G9e.forEach(t),lbr=i(oe),xF=n(oe,"LI",{});var O9e=s(xF);w1e=n(O9e,"STRONG",{});var C1t=s(w1e);ibr=r(C1t,"xlm"),C1t.forEach(t),dbr=r(O9e," \u2014 "),kX=n(O9e,"A",{href:!0});var M1t=s(kX);cbr=r(M1t,"TFXLMForTokenClassification"),M1t.forEach(t),fbr=r(O9e," (XLM model)"),O9e.forEach(t),mbr=i(oe),kF=n(oe,"LI",{});var X9e=s(kF);A1e=n(X9e,"STRONG",{});var E1t=s(A1e);gbr=r(E1t,"xlm-roberta"),E1t.forEach(t),hbr=r(X9e," \u2014 "),RX=n(X9e,"A",{href:!0});var y1t=s(RX);pbr=r(y1t,"TFXLMRobertaForTokenClassification"),y1t.forEach(t),_br=r(X9e," (XLM-RoBERTa model)"),X9e.forEach(t),ubr=i(oe),RF=n(oe,"LI",{});var V9e=s(RF);L1e=n(V9e,"STRONG",{});var w1t=s(L1e);bbr=r(w1t,"xlnet"),w1t.forEach(t),vbr=r(V9e," \u2014 "),SX=n(V9e,"A",{href:!0});var A1t=s(SX);Tbr=r(A1t,"TFXLNetForTokenClassification"),A1t.forEach(t),Fbr=r(V9e," (XLNet model)"),V9e.forEach(t),oe.forEach(t),Cbr=i(Ea),B1e=n(Ea,"P",{});var L1t=s(B1e);Mbr=r(L1t,"Examples:"),L1t.forEach(t),Ebr=i(Ea),m(tA.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),xRe=i(c),Xc=n(c,"H2",{class:!0});var GPe=s(Xc);SF=n(GPe,"A",{id:!0,class:!0,href:!0});var B1t=s(SF);x1e=n(B1t,"SPAN",{});var x1t=s(x1e);m(aA.$$.fragment,x1t),x1t.forEach(t),B1t.forEach(t),ybr=i(GPe),k1e=n(GPe,"SPAN",{});var k1t=s(k1e);wbr=r(k1t,"TFAutoModelForQuestionAnswering"),k1t.forEach(t),GPe.forEach(t),kRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(nA.$$.fragment,ni),Abr=i(ni),Vc=n(ni,"P",{});var fQ=s(Vc);Lbr=r(fQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),R1e=n(fQ,"CODE",{});var R1t=s(R1e);Bbr=r(R1t,"from_pretrained()"),R1t.forEach(t),xbr=r(fQ,"class method or the "),S1e=n(fQ,"CODE",{});var S1t=s(S1e);kbr=r(S1t,"from_config()"),S1t.forEach(t),Rbr=r(fQ,`class
method.`),fQ.forEach(t),Sbr=i(ni),sA=n(ni,"P",{});var OPe=s(sA);Pbr=r(OPe,"This class cannot be instantiated directly using "),P1e=n(OPe,"CODE",{});var P1t=s(P1e);$br=r(P1t,"__init__()"),P1t.forEach(t),Ibr=r(OPe," (throws an error)."),OPe.forEach(t),Nbr=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(lA.$$.fragment,si),Dbr=i(si),$1e=n(si,"P",{});var $1t=s($1e);jbr=r($1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$1t.forEach(t),qbr=i(si),zc=n(si,"P",{});var mQ=s(zc);Gbr=r(mQ,`Note:
Loading a model from its configuration file does `),I1e=n(mQ,"STRONG",{});var I1t=s(I1e);Obr=r(I1t,"not"),I1t.forEach(t),Xbr=r(mQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),N1e=n(mQ,"CODE",{});var N1t=s(N1e);Vbr=r(N1t,"from_pretrained()"),N1t.forEach(t),zbr=r(mQ,"to load the model weights."),mQ.forEach(t),Wbr=i(si),D1e=n(si,"P",{});var D1t=s(D1e);Qbr=r(D1t,"Examples:"),D1t.forEach(t),Hbr=i(si),m(iA.$$.fragment,si),si.forEach(t),Ubr=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(dA.$$.fragment,ya),Jbr=i(ya),j1e=n(ya,"P",{});var j1t=s(j1e);Ybr=r(j1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),j1t.forEach(t),Kbr=i(ya),wn=n(ya,"P",{});var W4=s(wn);Zbr=r(W4,"The model class to instantiate is selected based on the "),q1e=n(W4,"CODE",{});var q1t=s(q1e);e5r=r(q1t,"model_type"),q1t.forEach(t),o5r=r(W4,` property of the config object (either
passed as an argument or loaded from `),G1e=n(W4,"CODE",{});var G1t=s(G1e);r5r=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),t5r=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(W4,"CODE",{});var O1t=s(O1e);a5r=r(O1t,"pretrained_model_name_or_path"),O1t.forEach(t),n5r=r(W4,":"),W4.forEach(t),s5r=i(ya),Z=n(ya,"UL",{});var te=s(Z);PF=n(te,"LI",{});var z9e=s(PF);X1e=n(z9e,"STRONG",{});var X1t=s(X1e);l5r=r(X1t,"albert"),X1t.forEach(t),i5r=r(z9e," \u2014 "),PX=n(z9e,"A",{href:!0});var V1t=s(PX);d5r=r(V1t,"TFAlbertForQuestionAnswering"),V1t.forEach(t),c5r=r(z9e," (ALBERT model)"),z9e.forEach(t),f5r=i(te),$F=n(te,"LI",{});var W9e=s($F);V1e=n(W9e,"STRONG",{});var z1t=s(V1e);m5r=r(z1t,"bert"),z1t.forEach(t),g5r=r(W9e," \u2014 "),$X=n(W9e,"A",{href:!0});var W1t=s($X);h5r=r(W1t,"TFBertForQuestionAnswering"),W1t.forEach(t),p5r=r(W9e," (BERT model)"),W9e.forEach(t),_5r=i(te),IF=n(te,"LI",{});var Q9e=s(IF);z1e=n(Q9e,"STRONG",{});var Q1t=s(z1e);u5r=r(Q1t,"camembert"),Q1t.forEach(t),b5r=r(Q9e," \u2014 "),IX=n(Q9e,"A",{href:!0});var H1t=s(IX);v5r=r(H1t,"TFCamembertForQuestionAnswering"),H1t.forEach(t),T5r=r(Q9e," (CamemBERT model)"),Q9e.forEach(t),F5r=i(te),NF=n(te,"LI",{});var H9e=s(NF);W1e=n(H9e,"STRONG",{});var U1t=s(W1e);C5r=r(U1t,"convbert"),U1t.forEach(t),M5r=r(H9e," \u2014 "),NX=n(H9e,"A",{href:!0});var J1t=s(NX);E5r=r(J1t,"TFConvBertForQuestionAnswering"),J1t.forEach(t),y5r=r(H9e," (ConvBERT model)"),H9e.forEach(t),w5r=i(te),DF=n(te,"LI",{});var U9e=s(DF);Q1e=n(U9e,"STRONG",{});var Y1t=s(Q1e);A5r=r(Y1t,"deberta"),Y1t.forEach(t),L5r=r(U9e," \u2014 "),DX=n(U9e,"A",{href:!0});var K1t=s(DX);B5r=r(K1t,"TFDebertaForQuestionAnswering"),K1t.forEach(t),x5r=r(U9e," (DeBERTa model)"),U9e.forEach(t),k5r=i(te),jF=n(te,"LI",{});var J9e=s(jF);H1e=n(J9e,"STRONG",{});var Z1t=s(H1e);R5r=r(Z1t,"deberta-v2"),Z1t.forEach(t),S5r=r(J9e," \u2014 "),jX=n(J9e,"A",{href:!0});var ebt=s(jX);P5r=r(ebt,"TFDebertaV2ForQuestionAnswering"),ebt.forEach(t),$5r=r(J9e," (DeBERTa-v2 model)"),J9e.forEach(t),I5r=i(te),qF=n(te,"LI",{});var Y9e=s(qF);U1e=n(Y9e,"STRONG",{});var obt=s(U1e);N5r=r(obt,"distilbert"),obt.forEach(t),D5r=r(Y9e," \u2014 "),qX=n(Y9e,"A",{href:!0});var rbt=s(qX);j5r=r(rbt,"TFDistilBertForQuestionAnswering"),rbt.forEach(t),q5r=r(Y9e," (DistilBERT model)"),Y9e.forEach(t),G5r=i(te),GF=n(te,"LI",{});var K9e=s(GF);J1e=n(K9e,"STRONG",{});var tbt=s(J1e);O5r=r(tbt,"electra"),tbt.forEach(t),X5r=r(K9e," \u2014 "),GX=n(K9e,"A",{href:!0});var abt=s(GX);V5r=r(abt,"TFElectraForQuestionAnswering"),abt.forEach(t),z5r=r(K9e," (ELECTRA model)"),K9e.forEach(t),W5r=i(te),OF=n(te,"LI",{});var Z9e=s(OF);Y1e=n(Z9e,"STRONG",{});var nbt=s(Y1e);Q5r=r(nbt,"flaubert"),nbt.forEach(t),H5r=r(Z9e," \u2014 "),OX=n(Z9e,"A",{href:!0});var sbt=s(OX);U5r=r(sbt,"TFFlaubertForQuestionAnsweringSimple"),sbt.forEach(t),J5r=r(Z9e," (FlauBERT model)"),Z9e.forEach(t),Y5r=i(te),XF=n(te,"LI",{});var eBe=s(XF);K1e=n(eBe,"STRONG",{});var lbt=s(K1e);K5r=r(lbt,"funnel"),lbt.forEach(t),Z5r=r(eBe," \u2014 "),XX=n(eBe,"A",{href:!0});var ibt=s(XX);e2r=r(ibt,"TFFunnelForQuestionAnswering"),ibt.forEach(t),o2r=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),r2r=i(te),VF=n(te,"LI",{});var oBe=s(VF);Z1e=n(oBe,"STRONG",{});var dbt=s(Z1e);t2r=r(dbt,"longformer"),dbt.forEach(t),a2r=r(oBe," \u2014 "),VX=n(oBe,"A",{href:!0});var cbt=s(VX);n2r=r(cbt,"TFLongformerForQuestionAnswering"),cbt.forEach(t),s2r=r(oBe," (Longformer model)"),oBe.forEach(t),l2r=i(te),zF=n(te,"LI",{});var rBe=s(zF);ebe=n(rBe,"STRONG",{});var fbt=s(ebe);i2r=r(fbt,"mobilebert"),fbt.forEach(t),d2r=r(rBe," \u2014 "),zX=n(rBe,"A",{href:!0});var mbt=s(zX);c2r=r(mbt,"TFMobileBertForQuestionAnswering"),mbt.forEach(t),f2r=r(rBe," (MobileBERT model)"),rBe.forEach(t),m2r=i(te),WF=n(te,"LI",{});var tBe=s(WF);obe=n(tBe,"STRONG",{});var gbt=s(obe);g2r=r(gbt,"mpnet"),gbt.forEach(t),h2r=r(tBe," \u2014 "),WX=n(tBe,"A",{href:!0});var hbt=s(WX);p2r=r(hbt,"TFMPNetForQuestionAnswering"),hbt.forEach(t),_2r=r(tBe," (MPNet model)"),tBe.forEach(t),u2r=i(te),QF=n(te,"LI",{});var aBe=s(QF);rbe=n(aBe,"STRONG",{});var pbt=s(rbe);b2r=r(pbt,"rembert"),pbt.forEach(t),v2r=r(aBe," \u2014 "),QX=n(aBe,"A",{href:!0});var _bt=s(QX);T2r=r(_bt,"TFRemBertForQuestionAnswering"),_bt.forEach(t),F2r=r(aBe," (RemBERT model)"),aBe.forEach(t),C2r=i(te),HF=n(te,"LI",{});var nBe=s(HF);tbe=n(nBe,"STRONG",{});var ubt=s(tbe);M2r=r(ubt,"roberta"),ubt.forEach(t),E2r=r(nBe," \u2014 "),HX=n(nBe,"A",{href:!0});var bbt=s(HX);y2r=r(bbt,"TFRobertaForQuestionAnswering"),bbt.forEach(t),w2r=r(nBe," (RoBERTa model)"),nBe.forEach(t),A2r=i(te),UF=n(te,"LI",{});var sBe=s(UF);abe=n(sBe,"STRONG",{});var vbt=s(abe);L2r=r(vbt,"roformer"),vbt.forEach(t),B2r=r(sBe," \u2014 "),UX=n(sBe,"A",{href:!0});var Tbt=s(UX);x2r=r(Tbt,"TFRoFormerForQuestionAnswering"),Tbt.forEach(t),k2r=r(sBe," (RoFormer model)"),sBe.forEach(t),R2r=i(te),JF=n(te,"LI",{});var lBe=s(JF);nbe=n(lBe,"STRONG",{});var Fbt=s(nbe);S2r=r(Fbt,"xlm"),Fbt.forEach(t),P2r=r(lBe," \u2014 "),JX=n(lBe,"A",{href:!0});var Cbt=s(JX);$2r=r(Cbt,"TFXLMForQuestionAnsweringSimple"),Cbt.forEach(t),I2r=r(lBe," (XLM model)"),lBe.forEach(t),N2r=i(te),YF=n(te,"LI",{});var iBe=s(YF);sbe=n(iBe,"STRONG",{});var Mbt=s(sbe);D2r=r(Mbt,"xlm-roberta"),Mbt.forEach(t),j2r=r(iBe," \u2014 "),YX=n(iBe,"A",{href:!0});var Ebt=s(YX);q2r=r(Ebt,"TFXLMRobertaForQuestionAnswering"),Ebt.forEach(t),G2r=r(iBe," (XLM-RoBERTa model)"),iBe.forEach(t),O2r=i(te),KF=n(te,"LI",{});var dBe=s(KF);lbe=n(dBe,"STRONG",{});var ybt=s(lbe);X2r=r(ybt,"xlnet"),ybt.forEach(t),V2r=r(dBe," \u2014 "),KX=n(dBe,"A",{href:!0});var wbt=s(KX);z2r=r(wbt,"TFXLNetForQuestionAnsweringSimple"),wbt.forEach(t),W2r=r(dBe," (XLNet model)"),dBe.forEach(t),te.forEach(t),Q2r=i(ya),ibe=n(ya,"P",{});var Abt=s(ibe);H2r=r(Abt,"Examples:"),Abt.forEach(t),U2r=i(ya),m(cA.$$.fragment,ya),ya.forEach(t),ni.forEach(t),RRe=i(c),Wc=n(c,"H2",{class:!0});var XPe=s(Wc);ZF=n(XPe,"A",{id:!0,class:!0,href:!0});var Lbt=s(ZF);dbe=n(Lbt,"SPAN",{});var Bbt=s(dbe);m(fA.$$.fragment,Bbt),Bbt.forEach(t),Lbt.forEach(t),J2r=i(XPe),cbe=n(XPe,"SPAN",{});var xbt=s(cbe);Y2r=r(xbt,"TFAutoModelForVision2Seq"),xbt.forEach(t),XPe.forEach(t),SRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(mA.$$.fragment,li),K2r=i(li),Qc=n(li,"P",{});var gQ=s(Qc);Z2r=r(gQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fbe=n(gQ,"CODE",{});var kbt=s(fbe);evr=r(kbt,"from_pretrained()"),kbt.forEach(t),ovr=r(gQ,"class method or the "),mbe=n(gQ,"CODE",{});var Rbt=s(mbe);rvr=r(Rbt,"from_config()"),Rbt.forEach(t),tvr=r(gQ,`class
method.`),gQ.forEach(t),avr=i(li),gA=n(li,"P",{});var VPe=s(gA);nvr=r(VPe,"This class cannot be instantiated directly using "),gbe=n(VPe,"CODE",{});var Sbt=s(gbe);svr=r(Sbt,"__init__()"),Sbt.forEach(t),lvr=r(VPe," (throws an error)."),VPe.forEach(t),ivr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(hA.$$.fragment,ii),dvr=i(ii),hbe=n(ii,"P",{});var Pbt=s(hbe);cvr=r(Pbt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pbt.forEach(t),fvr=i(ii),Hc=n(ii,"P",{});var hQ=s(Hc);mvr=r(hQ,`Note:
Loading a model from its configuration file does `),pbe=n(hQ,"STRONG",{});var $bt=s(pbe);gvr=r($bt,"not"),$bt.forEach(t),hvr=r(hQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_be=n(hQ,"CODE",{});var Ibt=s(_be);pvr=r(Ibt,"from_pretrained()"),Ibt.forEach(t),_vr=r(hQ,"to load the model weights."),hQ.forEach(t),uvr=i(ii),ube=n(ii,"P",{});var Nbt=s(ube);bvr=r(Nbt,"Examples:"),Nbt.forEach(t),vvr=i(ii),m(pA.$$.fragment,ii),ii.forEach(t),Tvr=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(_A.$$.fragment,wa),Fvr=i(wa),bbe=n(wa,"P",{});var Dbt=s(bbe);Cvr=r(Dbt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Dbt.forEach(t),Mvr=i(wa),An=n(wa,"P",{});var Q4=s(An);Evr=r(Q4,"The model class to instantiate is selected based on the "),vbe=n(Q4,"CODE",{});var jbt=s(vbe);yvr=r(jbt,"model_type"),jbt.forEach(t),wvr=r(Q4,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(Q4,"CODE",{});var qbt=s(Tbe);Avr=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),Lvr=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fbe=n(Q4,"CODE",{});var Gbt=s(Fbe);Bvr=r(Gbt,"pretrained_model_name_or_path"),Gbt.forEach(t),xvr=r(Q4,":"),Q4.forEach(t),kvr=i(wa),Cbe=n(wa,"UL",{});var Obt=s(Cbe);eC=n(Obt,"LI",{});var cBe=s(eC);Mbe=n(cBe,"STRONG",{});var Xbt=s(Mbe);Rvr=r(Xbt,"vision-encoder-decoder"),Xbt.forEach(t),Svr=r(cBe," \u2014 "),ZX=n(cBe,"A",{href:!0});var Vbt=s(ZX);Pvr=r(Vbt,"TFVisionEncoderDecoderModel"),Vbt.forEach(t),$vr=r(cBe," (Vision Encoder decoder model)"),cBe.forEach(t),Obt.forEach(t),Ivr=i(wa),Ebe=n(wa,"P",{});var zbt=s(Ebe);Nvr=r(zbt,"Examples:"),zbt.forEach(t),Dvr=i(wa),m(uA.$$.fragment,wa),wa.forEach(t),li.forEach(t),PRe=i(c),Uc=n(c,"H2",{class:!0});var zPe=s(Uc);oC=n(zPe,"A",{id:!0,class:!0,href:!0});var Wbt=s(oC);ybe=n(Wbt,"SPAN",{});var Qbt=s(ybe);m(bA.$$.fragment,Qbt),Qbt.forEach(t),Wbt.forEach(t),jvr=i(zPe),wbe=n(zPe,"SPAN",{});var Hbt=s(wbe);qvr=r(Hbt,"TFAutoModelForSpeechSeq2Seq"),Hbt.forEach(t),zPe.forEach(t),$Re=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(vA.$$.fragment,di),Gvr=i(di),Jc=n(di,"P",{});var pQ=s(Jc);Ovr=r(pQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Abe=n(pQ,"CODE",{});var Ubt=s(Abe);Xvr=r(Ubt,"from_pretrained()"),Ubt.forEach(t),Vvr=r(pQ,"class method or the "),Lbe=n(pQ,"CODE",{});var Jbt=s(Lbe);zvr=r(Jbt,"from_config()"),Jbt.forEach(t),Wvr=r(pQ,`class
method.`),pQ.forEach(t),Qvr=i(di),TA=n(di,"P",{});var WPe=s(TA);Hvr=r(WPe,"This class cannot be instantiated directly using "),Bbe=n(WPe,"CODE",{});var Ybt=s(Bbe);Uvr=r(Ybt,"__init__()"),Ybt.forEach(t),Jvr=r(WPe," (throws an error)."),WPe.forEach(t),Yvr=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(FA.$$.fragment,ci),Kvr=i(ci),xbe=n(ci,"P",{});var Kbt=s(xbe);Zvr=r(Kbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Kbt.forEach(t),eTr=i(ci),Yc=n(ci,"P",{});var _Q=s(Yc);oTr=r(_Q,`Note:
Loading a model from its configuration file does `),kbe=n(_Q,"STRONG",{});var Zbt=s(kbe);rTr=r(Zbt,"not"),Zbt.forEach(t),tTr=r(_Q,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rbe=n(_Q,"CODE",{});var e5t=s(Rbe);aTr=r(e5t,"from_pretrained()"),e5t.forEach(t),nTr=r(_Q,"to load the model weights."),_Q.forEach(t),sTr=i(ci),Sbe=n(ci,"P",{});var o5t=s(Sbe);lTr=r(o5t,"Examples:"),o5t.forEach(t),iTr=i(ci),m(CA.$$.fragment,ci),ci.forEach(t),dTr=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(MA.$$.fragment,Aa),cTr=i(Aa),Pbe=n(Aa,"P",{});var r5t=s(Pbe);fTr=r(r5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),r5t.forEach(t),mTr=i(Aa),Ln=n(Aa,"P",{});var H4=s(Ln);gTr=r(H4,"The model class to instantiate is selected based on the "),$be=n(H4,"CODE",{});var t5t=s($be);hTr=r(t5t,"model_type"),t5t.forEach(t),pTr=r(H4,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(H4,"CODE",{});var a5t=s(Ibe);_Tr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),uTr=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(H4,"CODE",{});var n5t=s(Nbe);bTr=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),vTr=r(H4,":"),H4.forEach(t),TTr=i(Aa),Dbe=n(Aa,"UL",{});var s5t=s(Dbe);rC=n(s5t,"LI",{});var fBe=s(rC);jbe=n(fBe,"STRONG",{});var l5t=s(jbe);FTr=r(l5t,"speech_to_text"),l5t.forEach(t),CTr=r(fBe," \u2014 "),eV=n(fBe,"A",{href:!0});var i5t=s(eV);MTr=r(i5t,"TFSpeech2TextForConditionalGeneration"),i5t.forEach(t),ETr=r(fBe," (Speech2Text model)"),fBe.forEach(t),s5t.forEach(t),yTr=i(Aa),qbe=n(Aa,"P",{});var d5t=s(qbe);wTr=r(d5t,"Examples:"),d5t.forEach(t),ATr=i(Aa),m(EA.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),IRe=i(c),Kc=n(c,"H2",{class:!0});var QPe=s(Kc);tC=n(QPe,"A",{id:!0,class:!0,href:!0});var c5t=s(tC);Gbe=n(c5t,"SPAN",{});var f5t=s(Gbe);m(yA.$$.fragment,f5t),f5t.forEach(t),c5t.forEach(t),LTr=i(QPe),Obe=n(QPe,"SPAN",{});var m5t=s(Obe);BTr=r(m5t,"FlaxAutoModel"),m5t.forEach(t),QPe.forEach(t),NRe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(wA.$$.fragment,fi),xTr=i(fi),Zc=n(fi,"P",{});var uQ=s(Zc);kTr=r(uQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xbe=n(uQ,"CODE",{});var g5t=s(Xbe);RTr=r(g5t,"from_pretrained()"),g5t.forEach(t),STr=r(uQ,"class method or the "),Vbe=n(uQ,"CODE",{});var h5t=s(Vbe);PTr=r(h5t,"from_config()"),h5t.forEach(t),$Tr=r(uQ,`class
method.`),uQ.forEach(t),ITr=i(fi),AA=n(fi,"P",{});var HPe=s(AA);NTr=r(HPe,"This class cannot be instantiated directly using "),zbe=n(HPe,"CODE",{});var p5t=s(zbe);DTr=r(p5t,"__init__()"),p5t.forEach(t),jTr=r(HPe," (throws an error)."),HPe.forEach(t),qTr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(LA.$$.fragment,mi),GTr=i(mi),Wbe=n(mi,"P",{});var _5t=s(Wbe);OTr=r(_5t,"Instantiates one of the base model classes of the library from a configuration."),_5t.forEach(t),XTr=i(mi),ef=n(mi,"P",{});var bQ=s(ef);VTr=r(bQ,`Note:
Loading a model from its configuration file does `),Qbe=n(bQ,"STRONG",{});var u5t=s(Qbe);zTr=r(u5t,"not"),u5t.forEach(t),WTr=r(bQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hbe=n(bQ,"CODE",{});var b5t=s(Hbe);QTr=r(b5t,"from_pretrained()"),b5t.forEach(t),HTr=r(bQ,"to load the model weights."),bQ.forEach(t),UTr=i(mi),Ube=n(mi,"P",{});var v5t=s(Ube);JTr=r(v5t,"Examples:"),v5t.forEach(t),YTr=i(mi),m(BA.$$.fragment,mi),mi.forEach(t),KTr=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(xA.$$.fragment,La),ZTr=i(La),Jbe=n(La,"P",{});var T5t=s(Jbe);e7r=r(T5t,"Instantiate one of the base model classes of the library from a pretrained model."),T5t.forEach(t),o7r=i(La),Bn=n(La,"P",{});var U4=s(Bn);r7r=r(U4,"The model class to instantiate is selected based on the "),Ybe=n(U4,"CODE",{});var F5t=s(Ybe);t7r=r(F5t,"model_type"),F5t.forEach(t),a7r=r(U4,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(U4,"CODE",{});var C5t=s(Kbe);n7r=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),s7r=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(U4,"CODE",{});var M5t=s(Zbe);l7r=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),i7r=r(U4,":"),U4.forEach(t),d7r=i(La),z=n(La,"UL",{});var Q=s(z);aC=n(Q,"LI",{});var mBe=s(aC);e5e=n(mBe,"STRONG",{});var E5t=s(e5e);c7r=r(E5t,"albert"),E5t.forEach(t),f7r=r(mBe," \u2014 "),oV=n(mBe,"A",{href:!0});var y5t=s(oV);m7r=r(y5t,"FlaxAlbertModel"),y5t.forEach(t),g7r=r(mBe," (ALBERT model)"),mBe.forEach(t),h7r=i(Q),nC=n(Q,"LI",{});var gBe=s(nC);o5e=n(gBe,"STRONG",{});var w5t=s(o5e);p7r=r(w5t,"bart"),w5t.forEach(t),_7r=r(gBe," \u2014 "),rV=n(gBe,"A",{href:!0});var A5t=s(rV);u7r=r(A5t,"FlaxBartModel"),A5t.forEach(t),b7r=r(gBe," (BART model)"),gBe.forEach(t),v7r=i(Q),sC=n(Q,"LI",{});var hBe=s(sC);r5e=n(hBe,"STRONG",{});var L5t=s(r5e);T7r=r(L5t,"beit"),L5t.forEach(t),F7r=r(hBe," \u2014 "),tV=n(hBe,"A",{href:!0});var B5t=s(tV);C7r=r(B5t,"FlaxBeitModel"),B5t.forEach(t),M7r=r(hBe," (BEiT model)"),hBe.forEach(t),E7r=i(Q),lC=n(Q,"LI",{});var pBe=s(lC);t5e=n(pBe,"STRONG",{});var x5t=s(t5e);y7r=r(x5t,"bert"),x5t.forEach(t),w7r=r(pBe," \u2014 "),aV=n(pBe,"A",{href:!0});var k5t=s(aV);A7r=r(k5t,"FlaxBertModel"),k5t.forEach(t),L7r=r(pBe," (BERT model)"),pBe.forEach(t),B7r=i(Q),iC=n(Q,"LI",{});var _Be=s(iC);a5e=n(_Be,"STRONG",{});var R5t=s(a5e);x7r=r(R5t,"big_bird"),R5t.forEach(t),k7r=r(_Be," \u2014 "),nV=n(_Be,"A",{href:!0});var S5t=s(nV);R7r=r(S5t,"FlaxBigBirdModel"),S5t.forEach(t),S7r=r(_Be," (BigBird model)"),_Be.forEach(t),P7r=i(Q),dC=n(Q,"LI",{});var uBe=s(dC);n5e=n(uBe,"STRONG",{});var P5t=s(n5e);$7r=r(P5t,"blenderbot"),P5t.forEach(t),I7r=r(uBe," \u2014 "),sV=n(uBe,"A",{href:!0});var $5t=s(sV);N7r=r($5t,"FlaxBlenderbotModel"),$5t.forEach(t),D7r=r(uBe," (Blenderbot model)"),uBe.forEach(t),j7r=i(Q),cC=n(Q,"LI",{});var bBe=s(cC);s5e=n(bBe,"STRONG",{});var I5t=s(s5e);q7r=r(I5t,"blenderbot-small"),I5t.forEach(t),G7r=r(bBe," \u2014 "),lV=n(bBe,"A",{href:!0});var N5t=s(lV);O7r=r(N5t,"FlaxBlenderbotSmallModel"),N5t.forEach(t),X7r=r(bBe," (BlenderbotSmall model)"),bBe.forEach(t),V7r=i(Q),fC=n(Q,"LI",{});var vBe=s(fC);l5e=n(vBe,"STRONG",{});var D5t=s(l5e);z7r=r(D5t,"clip"),D5t.forEach(t),W7r=r(vBe," \u2014 "),iV=n(vBe,"A",{href:!0});var j5t=s(iV);Q7r=r(j5t,"FlaxCLIPModel"),j5t.forEach(t),H7r=r(vBe," (CLIP model)"),vBe.forEach(t),U7r=i(Q),mC=n(Q,"LI",{});var TBe=s(mC);i5e=n(TBe,"STRONG",{});var q5t=s(i5e);J7r=r(q5t,"distilbert"),q5t.forEach(t),Y7r=r(TBe," \u2014 "),dV=n(TBe,"A",{href:!0});var G5t=s(dV);K7r=r(G5t,"FlaxDistilBertModel"),G5t.forEach(t),Z7r=r(TBe," (DistilBERT model)"),TBe.forEach(t),e8r=i(Q),gC=n(Q,"LI",{});var FBe=s(gC);d5e=n(FBe,"STRONG",{});var O5t=s(d5e);o8r=r(O5t,"electra"),O5t.forEach(t),r8r=r(FBe," \u2014 "),cV=n(FBe,"A",{href:!0});var X5t=s(cV);t8r=r(X5t,"FlaxElectraModel"),X5t.forEach(t),a8r=r(FBe," (ELECTRA model)"),FBe.forEach(t),n8r=i(Q),hC=n(Q,"LI",{});var CBe=s(hC);c5e=n(CBe,"STRONG",{});var V5t=s(c5e);s8r=r(V5t,"gpt2"),V5t.forEach(t),l8r=r(CBe," \u2014 "),fV=n(CBe,"A",{href:!0});var z5t=s(fV);i8r=r(z5t,"FlaxGPT2Model"),z5t.forEach(t),d8r=r(CBe," (OpenAI GPT-2 model)"),CBe.forEach(t),c8r=i(Q),pC=n(Q,"LI",{});var MBe=s(pC);f5e=n(MBe,"STRONG",{});var W5t=s(f5e);f8r=r(W5t,"gpt_neo"),W5t.forEach(t),m8r=r(MBe," \u2014 "),mV=n(MBe,"A",{href:!0});var Q5t=s(mV);g8r=r(Q5t,"FlaxGPTNeoModel"),Q5t.forEach(t),h8r=r(MBe," (GPT Neo model)"),MBe.forEach(t),p8r=i(Q),_C=n(Q,"LI",{});var EBe=s(_C);m5e=n(EBe,"STRONG",{});var H5t=s(m5e);_8r=r(H5t,"gptj"),H5t.forEach(t),u8r=r(EBe," \u2014 "),gV=n(EBe,"A",{href:!0});var U5t=s(gV);b8r=r(U5t,"FlaxGPTJModel"),U5t.forEach(t),v8r=r(EBe," (GPT-J model)"),EBe.forEach(t),T8r=i(Q),uC=n(Q,"LI",{});var yBe=s(uC);g5e=n(yBe,"STRONG",{});var J5t=s(g5e);F8r=r(J5t,"marian"),J5t.forEach(t),C8r=r(yBe," \u2014 "),hV=n(yBe,"A",{href:!0});var Y5t=s(hV);M8r=r(Y5t,"FlaxMarianModel"),Y5t.forEach(t),E8r=r(yBe," (Marian model)"),yBe.forEach(t),y8r=i(Q),bC=n(Q,"LI",{});var wBe=s(bC);h5e=n(wBe,"STRONG",{});var K5t=s(h5e);w8r=r(K5t,"mbart"),K5t.forEach(t),A8r=r(wBe," \u2014 "),pV=n(wBe,"A",{href:!0});var Z5t=s(pV);L8r=r(Z5t,"FlaxMBartModel"),Z5t.forEach(t),B8r=r(wBe," (mBART model)"),wBe.forEach(t),x8r=i(Q),vC=n(Q,"LI",{});var ABe=s(vC);p5e=n(ABe,"STRONG",{});var e2t=s(p5e);k8r=r(e2t,"mt5"),e2t.forEach(t),R8r=r(ABe," \u2014 "),_V=n(ABe,"A",{href:!0});var o2t=s(_V);S8r=r(o2t,"FlaxMT5Model"),o2t.forEach(t),P8r=r(ABe," (mT5 model)"),ABe.forEach(t),$8r=i(Q),TC=n(Q,"LI",{});var LBe=s(TC);_5e=n(LBe,"STRONG",{});var r2t=s(_5e);I8r=r(r2t,"pegasus"),r2t.forEach(t),N8r=r(LBe," \u2014 "),uV=n(LBe,"A",{href:!0});var t2t=s(uV);D8r=r(t2t,"FlaxPegasusModel"),t2t.forEach(t),j8r=r(LBe," (Pegasus model)"),LBe.forEach(t),q8r=i(Q),FC=n(Q,"LI",{});var BBe=s(FC);u5e=n(BBe,"STRONG",{});var a2t=s(u5e);G8r=r(a2t,"roberta"),a2t.forEach(t),O8r=r(BBe," \u2014 "),bV=n(BBe,"A",{href:!0});var n2t=s(bV);X8r=r(n2t,"FlaxRobertaModel"),n2t.forEach(t),V8r=r(BBe," (RoBERTa model)"),BBe.forEach(t),z8r=i(Q),CC=n(Q,"LI",{});var xBe=s(CC);b5e=n(xBe,"STRONG",{});var s2t=s(b5e);W8r=r(s2t,"roformer"),s2t.forEach(t),Q8r=r(xBe," \u2014 "),vV=n(xBe,"A",{href:!0});var l2t=s(vV);H8r=r(l2t,"FlaxRoFormerModel"),l2t.forEach(t),U8r=r(xBe," (RoFormer model)"),xBe.forEach(t),J8r=i(Q),MC=n(Q,"LI",{});var kBe=s(MC);v5e=n(kBe,"STRONG",{});var i2t=s(v5e);Y8r=r(i2t,"t5"),i2t.forEach(t),K8r=r(kBe," \u2014 "),TV=n(kBe,"A",{href:!0});var d2t=s(TV);Z8r=r(d2t,"FlaxT5Model"),d2t.forEach(t),eFr=r(kBe," (T5 model)"),kBe.forEach(t),oFr=i(Q),EC=n(Q,"LI",{});var RBe=s(EC);T5e=n(RBe,"STRONG",{});var c2t=s(T5e);rFr=r(c2t,"vision-text-dual-encoder"),c2t.forEach(t),tFr=r(RBe," \u2014 "),FV=n(RBe,"A",{href:!0});var f2t=s(FV);aFr=r(f2t,"FlaxVisionTextDualEncoderModel"),f2t.forEach(t),nFr=r(RBe," (VisionTextDualEncoder model)"),RBe.forEach(t),sFr=i(Q),yC=n(Q,"LI",{});var SBe=s(yC);F5e=n(SBe,"STRONG",{});var m2t=s(F5e);lFr=r(m2t,"vit"),m2t.forEach(t),iFr=r(SBe," \u2014 "),CV=n(SBe,"A",{href:!0});var g2t=s(CV);dFr=r(g2t,"FlaxViTModel"),g2t.forEach(t),cFr=r(SBe," (ViT model)"),SBe.forEach(t),fFr=i(Q),wC=n(Q,"LI",{});var PBe=s(wC);C5e=n(PBe,"STRONG",{});var h2t=s(C5e);mFr=r(h2t,"wav2vec2"),h2t.forEach(t),gFr=r(PBe," \u2014 "),MV=n(PBe,"A",{href:!0});var p2t=s(MV);hFr=r(p2t,"FlaxWav2Vec2Model"),p2t.forEach(t),pFr=r(PBe," (Wav2Vec2 model)"),PBe.forEach(t),_Fr=i(Q),AC=n(Q,"LI",{});var $Be=s(AC);M5e=n($Be,"STRONG",{});var _2t=s(M5e);uFr=r(_2t,"xglm"),_2t.forEach(t),bFr=r($Be," \u2014 "),EV=n($Be,"A",{href:!0});var u2t=s(EV);vFr=r(u2t,"FlaxXGLMModel"),u2t.forEach(t),TFr=r($Be," (XGLM model)"),$Be.forEach(t),FFr=i(Q),LC=n(Q,"LI",{});var IBe=s(LC);E5e=n(IBe,"STRONG",{});var b2t=s(E5e);CFr=r(b2t,"xlm-roberta"),b2t.forEach(t),MFr=r(IBe," \u2014 "),yV=n(IBe,"A",{href:!0});var v2t=s(yV);EFr=r(v2t,"FlaxXLMRobertaModel"),v2t.forEach(t),yFr=r(IBe," (XLM-RoBERTa model)"),IBe.forEach(t),Q.forEach(t),wFr=i(La),y5e=n(La,"P",{});var T2t=s(y5e);AFr=r(T2t,"Examples:"),T2t.forEach(t),LFr=i(La),m(kA.$$.fragment,La),La.forEach(t),fi.forEach(t),DRe=i(c),of=n(c,"H2",{class:!0});var UPe=s(of);BC=n(UPe,"A",{id:!0,class:!0,href:!0});var F2t=s(BC);w5e=n(F2t,"SPAN",{});var C2t=s(w5e);m(RA.$$.fragment,C2t),C2t.forEach(t),F2t.forEach(t),BFr=i(UPe),A5e=n(UPe,"SPAN",{});var M2t=s(A5e);xFr=r(M2t,"FlaxAutoModelForCausalLM"),M2t.forEach(t),UPe.forEach(t),jRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(SA.$$.fragment,gi),kFr=i(gi),rf=n(gi,"P",{});var vQ=s(rf);RFr=r(vQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),L5e=n(vQ,"CODE",{});var E2t=s(L5e);SFr=r(E2t,"from_pretrained()"),E2t.forEach(t),PFr=r(vQ,"class method or the "),B5e=n(vQ,"CODE",{});var y2t=s(B5e);$Fr=r(y2t,"from_config()"),y2t.forEach(t),IFr=r(vQ,`class
method.`),vQ.forEach(t),NFr=i(gi),PA=n(gi,"P",{});var JPe=s(PA);DFr=r(JPe,"This class cannot be instantiated directly using "),x5e=n(JPe,"CODE",{});var w2t=s(x5e);jFr=r(w2t,"__init__()"),w2t.forEach(t),qFr=r(JPe," (throws an error)."),JPe.forEach(t),GFr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m($A.$$.fragment,hi),OFr=i(hi),k5e=n(hi,"P",{});var A2t=s(k5e);XFr=r(A2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),A2t.forEach(t),VFr=i(hi),tf=n(hi,"P",{});var TQ=s(tf);zFr=r(TQ,`Note:
Loading a model from its configuration file does `),R5e=n(TQ,"STRONG",{});var L2t=s(R5e);WFr=r(L2t,"not"),L2t.forEach(t),QFr=r(TQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),S5e=n(TQ,"CODE",{});var B2t=s(S5e);HFr=r(B2t,"from_pretrained()"),B2t.forEach(t),UFr=r(TQ,"to load the model weights."),TQ.forEach(t),JFr=i(hi),P5e=n(hi,"P",{});var x2t=s(P5e);YFr=r(x2t,"Examples:"),x2t.forEach(t),KFr=i(hi),m(IA.$$.fragment,hi),hi.forEach(t),ZFr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(NA.$$.fragment,Ba),eCr=i(Ba),$5e=n(Ba,"P",{});var k2t=s($5e);oCr=r(k2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k2t.forEach(t),rCr=i(Ba),xn=n(Ba,"P",{});var J4=s(xn);tCr=r(J4,"The model class to instantiate is selected based on the "),I5e=n(J4,"CODE",{});var R2t=s(I5e);aCr=r(R2t,"model_type"),R2t.forEach(t),nCr=r(J4,` property of the config object (either
passed as an argument or loaded from `),N5e=n(J4,"CODE",{});var S2t=s(N5e);sCr=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),lCr=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D5e=n(J4,"CODE",{});var P2t=s(D5e);iCr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),dCr=r(J4,":"),J4.forEach(t),cCr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);xC=n(pi,"LI",{});var NBe=s(xC);j5e=n(NBe,"STRONG",{});var $2t=s(j5e);fCr=r($2t,"bart"),$2t.forEach(t),mCr=r(NBe," \u2014 "),wV=n(NBe,"A",{href:!0});var I2t=s(wV);gCr=r(I2t,"FlaxBartForCausalLM"),I2t.forEach(t),hCr=r(NBe," (BART model)"),NBe.forEach(t),pCr=i(pi),kC=n(pi,"LI",{});var DBe=s(kC);q5e=n(DBe,"STRONG",{});var N2t=s(q5e);_Cr=r(N2t,"gpt2"),N2t.forEach(t),uCr=r(DBe," \u2014 "),AV=n(DBe,"A",{href:!0});var D2t=s(AV);bCr=r(D2t,"FlaxGPT2LMHeadModel"),D2t.forEach(t),vCr=r(DBe," (OpenAI GPT-2 model)"),DBe.forEach(t),TCr=i(pi),RC=n(pi,"LI",{});var jBe=s(RC);G5e=n(jBe,"STRONG",{});var j2t=s(G5e);FCr=r(j2t,"gpt_neo"),j2t.forEach(t),CCr=r(jBe," \u2014 "),LV=n(jBe,"A",{href:!0});var q2t=s(LV);MCr=r(q2t,"FlaxGPTNeoForCausalLM"),q2t.forEach(t),ECr=r(jBe," (GPT Neo model)"),jBe.forEach(t),yCr=i(pi),SC=n(pi,"LI",{});var qBe=s(SC);O5e=n(qBe,"STRONG",{});var G2t=s(O5e);wCr=r(G2t,"gptj"),G2t.forEach(t),ACr=r(qBe," \u2014 "),BV=n(qBe,"A",{href:!0});var O2t=s(BV);LCr=r(O2t,"FlaxGPTJForCausalLM"),O2t.forEach(t),BCr=r(qBe," (GPT-J model)"),qBe.forEach(t),xCr=i(pi),PC=n(pi,"LI",{});var GBe=s(PC);X5e=n(GBe,"STRONG",{});var X2t=s(X5e);kCr=r(X2t,"xglm"),X2t.forEach(t),RCr=r(GBe," \u2014 "),xV=n(GBe,"A",{href:!0});var V2t=s(xV);SCr=r(V2t,"FlaxXGLMForCausalLM"),V2t.forEach(t),PCr=r(GBe," (XGLM model)"),GBe.forEach(t),pi.forEach(t),$Cr=i(Ba),V5e=n(Ba,"P",{});var z2t=s(V5e);ICr=r(z2t,"Examples:"),z2t.forEach(t),NCr=i(Ba),m(DA.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),qRe=i(c),af=n(c,"H2",{class:!0});var YPe=s(af);$C=n(YPe,"A",{id:!0,class:!0,href:!0});var W2t=s($C);z5e=n(W2t,"SPAN",{});var Q2t=s(z5e);m(jA.$$.fragment,Q2t),Q2t.forEach(t),W2t.forEach(t),DCr=i(YPe),W5e=n(YPe,"SPAN",{});var H2t=s(W5e);jCr=r(H2t,"FlaxAutoModelForPreTraining"),H2t.forEach(t),YPe.forEach(t),GRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(qA.$$.fragment,_i),qCr=i(_i),nf=n(_i,"P",{});var FQ=s(nf);GCr=r(FQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Q5e=n(FQ,"CODE",{});var U2t=s(Q5e);OCr=r(U2t,"from_pretrained()"),U2t.forEach(t),XCr=r(FQ,"class method or the "),H5e=n(FQ,"CODE",{});var J2t=s(H5e);VCr=r(J2t,"from_config()"),J2t.forEach(t),zCr=r(FQ,`class
method.`),FQ.forEach(t),WCr=i(_i),GA=n(_i,"P",{});var KPe=s(GA);QCr=r(KPe,"This class cannot be instantiated directly using "),U5e=n(KPe,"CODE",{});var Y2t=s(U5e);HCr=r(Y2t,"__init__()"),Y2t.forEach(t),UCr=r(KPe," (throws an error)."),KPe.forEach(t),JCr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(OA.$$.fragment,ui),YCr=i(ui),J5e=n(ui,"P",{});var K2t=s(J5e);KCr=r(K2t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),K2t.forEach(t),ZCr=i(ui),sf=n(ui,"P",{});var CQ=s(sf);eMr=r(CQ,`Note:
Loading a model from its configuration file does `),Y5e=n(CQ,"STRONG",{});var Z2t=s(Y5e);oMr=r(Z2t,"not"),Z2t.forEach(t),rMr=r(CQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),K5e=n(CQ,"CODE",{});var evt=s(K5e);tMr=r(evt,"from_pretrained()"),evt.forEach(t),aMr=r(CQ,"to load the model weights."),CQ.forEach(t),nMr=i(ui),Z5e=n(ui,"P",{});var ovt=s(Z5e);sMr=r(ovt,"Examples:"),ovt.forEach(t),lMr=i(ui),m(XA.$$.fragment,ui),ui.forEach(t),iMr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(VA.$$.fragment,xa),dMr=i(xa),e2e=n(xa,"P",{});var rvt=s(e2e);cMr=r(rvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rvt.forEach(t),fMr=i(xa),kn=n(xa,"P",{});var Y4=s(kn);mMr=r(Y4,"The model class to instantiate is selected based on the "),o2e=n(Y4,"CODE",{});var tvt=s(o2e);gMr=r(tvt,"model_type"),tvt.forEach(t),hMr=r(Y4,` property of the config object (either
passed as an argument or loaded from `),r2e=n(Y4,"CODE",{});var avt=s(r2e);pMr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),_Mr=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(Y4,"CODE",{});var nvt=s(t2e);uMr=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),bMr=r(Y4,":"),Y4.forEach(t),vMr=i(xa),ce=n(xa,"UL",{});var he=s(ce);IC=n(he,"LI",{});var OBe=s(IC);a2e=n(OBe,"STRONG",{});var svt=s(a2e);TMr=r(svt,"albert"),svt.forEach(t),FMr=r(OBe," \u2014 "),kV=n(OBe,"A",{href:!0});var lvt=s(kV);CMr=r(lvt,"FlaxAlbertForPreTraining"),lvt.forEach(t),MMr=r(OBe," (ALBERT model)"),OBe.forEach(t),EMr=i(he),NC=n(he,"LI",{});var XBe=s(NC);n2e=n(XBe,"STRONG",{});var ivt=s(n2e);yMr=r(ivt,"bart"),ivt.forEach(t),wMr=r(XBe," \u2014 "),RV=n(XBe,"A",{href:!0});var dvt=s(RV);AMr=r(dvt,"FlaxBartForConditionalGeneration"),dvt.forEach(t),LMr=r(XBe," (BART model)"),XBe.forEach(t),BMr=i(he),DC=n(he,"LI",{});var VBe=s(DC);s2e=n(VBe,"STRONG",{});var cvt=s(s2e);xMr=r(cvt,"bert"),cvt.forEach(t),kMr=r(VBe," \u2014 "),SV=n(VBe,"A",{href:!0});var fvt=s(SV);RMr=r(fvt,"FlaxBertForPreTraining"),fvt.forEach(t),SMr=r(VBe," (BERT model)"),VBe.forEach(t),PMr=i(he),jC=n(he,"LI",{});var zBe=s(jC);l2e=n(zBe,"STRONG",{});var mvt=s(l2e);$Mr=r(mvt,"big_bird"),mvt.forEach(t),IMr=r(zBe," \u2014 "),PV=n(zBe,"A",{href:!0});var gvt=s(PV);NMr=r(gvt,"FlaxBigBirdForPreTraining"),gvt.forEach(t),DMr=r(zBe," (BigBird model)"),zBe.forEach(t),jMr=i(he),qC=n(he,"LI",{});var WBe=s(qC);i2e=n(WBe,"STRONG",{});var hvt=s(i2e);qMr=r(hvt,"electra"),hvt.forEach(t),GMr=r(WBe," \u2014 "),$V=n(WBe,"A",{href:!0});var pvt=s($V);OMr=r(pvt,"FlaxElectraForPreTraining"),pvt.forEach(t),XMr=r(WBe," (ELECTRA model)"),WBe.forEach(t),VMr=i(he),GC=n(he,"LI",{});var QBe=s(GC);d2e=n(QBe,"STRONG",{});var _vt=s(d2e);zMr=r(_vt,"mbart"),_vt.forEach(t),WMr=r(QBe," \u2014 "),IV=n(QBe,"A",{href:!0});var uvt=s(IV);QMr=r(uvt,"FlaxMBartForConditionalGeneration"),uvt.forEach(t),HMr=r(QBe," (mBART model)"),QBe.forEach(t),UMr=i(he),OC=n(he,"LI",{});var HBe=s(OC);c2e=n(HBe,"STRONG",{});var bvt=s(c2e);JMr=r(bvt,"mt5"),bvt.forEach(t),YMr=r(HBe," \u2014 "),NV=n(HBe,"A",{href:!0});var vvt=s(NV);KMr=r(vvt,"FlaxMT5ForConditionalGeneration"),vvt.forEach(t),ZMr=r(HBe," (mT5 model)"),HBe.forEach(t),e4r=i(he),XC=n(he,"LI",{});var UBe=s(XC);f2e=n(UBe,"STRONG",{});var Tvt=s(f2e);o4r=r(Tvt,"roberta"),Tvt.forEach(t),r4r=r(UBe," \u2014 "),DV=n(UBe,"A",{href:!0});var Fvt=s(DV);t4r=r(Fvt,"FlaxRobertaForMaskedLM"),Fvt.forEach(t),a4r=r(UBe," (RoBERTa model)"),UBe.forEach(t),n4r=i(he),VC=n(he,"LI",{});var JBe=s(VC);m2e=n(JBe,"STRONG",{});var Cvt=s(m2e);s4r=r(Cvt,"roformer"),Cvt.forEach(t),l4r=r(JBe," \u2014 "),jV=n(JBe,"A",{href:!0});var Mvt=s(jV);i4r=r(Mvt,"FlaxRoFormerForMaskedLM"),Mvt.forEach(t),d4r=r(JBe," (RoFormer model)"),JBe.forEach(t),c4r=i(he),zC=n(he,"LI",{});var YBe=s(zC);g2e=n(YBe,"STRONG",{});var Evt=s(g2e);f4r=r(Evt,"t5"),Evt.forEach(t),m4r=r(YBe," \u2014 "),qV=n(YBe,"A",{href:!0});var yvt=s(qV);g4r=r(yvt,"FlaxT5ForConditionalGeneration"),yvt.forEach(t),h4r=r(YBe," (T5 model)"),YBe.forEach(t),p4r=i(he),WC=n(he,"LI",{});var KBe=s(WC);h2e=n(KBe,"STRONG",{});var wvt=s(h2e);_4r=r(wvt,"wav2vec2"),wvt.forEach(t),u4r=r(KBe," \u2014 "),GV=n(KBe,"A",{href:!0});var Avt=s(GV);b4r=r(Avt,"FlaxWav2Vec2ForPreTraining"),Avt.forEach(t),v4r=r(KBe," (Wav2Vec2 model)"),KBe.forEach(t),T4r=i(he),QC=n(he,"LI",{});var ZBe=s(QC);p2e=n(ZBe,"STRONG",{});var Lvt=s(p2e);F4r=r(Lvt,"xlm-roberta"),Lvt.forEach(t),C4r=r(ZBe," \u2014 "),OV=n(ZBe,"A",{href:!0});var Bvt=s(OV);M4r=r(Bvt,"FlaxXLMRobertaForMaskedLM"),Bvt.forEach(t),E4r=r(ZBe," (XLM-RoBERTa model)"),ZBe.forEach(t),he.forEach(t),y4r=i(xa),_2e=n(xa,"P",{});var xvt=s(_2e);w4r=r(xvt,"Examples:"),xvt.forEach(t),A4r=i(xa),m(zA.$$.fragment,xa),xa.forEach(t),_i.forEach(t),ORe=i(c),lf=n(c,"H2",{class:!0});var ZPe=s(lf);HC=n(ZPe,"A",{id:!0,class:!0,href:!0});var kvt=s(HC);u2e=n(kvt,"SPAN",{});var Rvt=s(u2e);m(WA.$$.fragment,Rvt),Rvt.forEach(t),kvt.forEach(t),L4r=i(ZPe),b2e=n(ZPe,"SPAN",{});var Svt=s(b2e);B4r=r(Svt,"FlaxAutoModelForMaskedLM"),Svt.forEach(t),ZPe.forEach(t),XRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(QA.$$.fragment,bi),x4r=i(bi),df=n(bi,"P",{});var MQ=s(df);k4r=r(MQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),v2e=n(MQ,"CODE",{});var Pvt=s(v2e);R4r=r(Pvt,"from_pretrained()"),Pvt.forEach(t),S4r=r(MQ,"class method or the "),T2e=n(MQ,"CODE",{});var $vt=s(T2e);P4r=r($vt,"from_config()"),$vt.forEach(t),$4r=r(MQ,`class
method.`),MQ.forEach(t),I4r=i(bi),HA=n(bi,"P",{});var e$e=s(HA);N4r=r(e$e,"This class cannot be instantiated directly using "),F2e=n(e$e,"CODE",{});var Ivt=s(F2e);D4r=r(Ivt,"__init__()"),Ivt.forEach(t),j4r=r(e$e," (throws an error)."),e$e.forEach(t),q4r=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(UA.$$.fragment,vi),G4r=i(vi),C2e=n(vi,"P",{});var Nvt=s(C2e);O4r=r(Nvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nvt.forEach(t),X4r=i(vi),cf=n(vi,"P",{});var EQ=s(cf);V4r=r(EQ,`Note:
Loading a model from its configuration file does `),M2e=n(EQ,"STRONG",{});var Dvt=s(M2e);z4r=r(Dvt,"not"),Dvt.forEach(t),W4r=r(EQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),E2e=n(EQ,"CODE",{});var jvt=s(E2e);Q4r=r(jvt,"from_pretrained()"),jvt.forEach(t),H4r=r(EQ,"to load the model weights."),EQ.forEach(t),U4r=i(vi),y2e=n(vi,"P",{});var qvt=s(y2e);J4r=r(qvt,"Examples:"),qvt.forEach(t),Y4r=i(vi),m(JA.$$.fragment,vi),vi.forEach(t),K4r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(YA.$$.fragment,ka),Z4r=i(ka),w2e=n(ka,"P",{});var Gvt=s(w2e);eEr=r(Gvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gvt.forEach(t),oEr=i(ka),Rn=n(ka,"P",{});var K4=s(Rn);rEr=r(K4,"The model class to instantiate is selected based on the "),A2e=n(K4,"CODE",{});var Ovt=s(A2e);tEr=r(Ovt,"model_type"),Ovt.forEach(t),aEr=r(K4,` property of the config object (either
passed as an argument or loaded from `),L2e=n(K4,"CODE",{});var Xvt=s(L2e);nEr=r(Xvt,"pretrained_model_name_or_path"),Xvt.forEach(t),sEr=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(K4,"CODE",{});var Vvt=s(B2e);lEr=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),iEr=r(K4,":"),K4.forEach(t),dEr=i(ka),ue=n(ka,"UL",{});var we=s(ue);UC=n(we,"LI",{});var exe=s(UC);x2e=n(exe,"STRONG",{});var zvt=s(x2e);cEr=r(zvt,"albert"),zvt.forEach(t),fEr=r(exe," \u2014 "),XV=n(exe,"A",{href:!0});var Wvt=s(XV);mEr=r(Wvt,"FlaxAlbertForMaskedLM"),Wvt.forEach(t),gEr=r(exe," (ALBERT model)"),exe.forEach(t),hEr=i(we),JC=n(we,"LI",{});var oxe=s(JC);k2e=n(oxe,"STRONG",{});var Qvt=s(k2e);pEr=r(Qvt,"bart"),Qvt.forEach(t),_Er=r(oxe," \u2014 "),VV=n(oxe,"A",{href:!0});var Hvt=s(VV);uEr=r(Hvt,"FlaxBartForConditionalGeneration"),Hvt.forEach(t),bEr=r(oxe," (BART model)"),oxe.forEach(t),vEr=i(we),YC=n(we,"LI",{});var rxe=s(YC);R2e=n(rxe,"STRONG",{});var Uvt=s(R2e);TEr=r(Uvt,"bert"),Uvt.forEach(t),FEr=r(rxe," \u2014 "),zV=n(rxe,"A",{href:!0});var Jvt=s(zV);CEr=r(Jvt,"FlaxBertForMaskedLM"),Jvt.forEach(t),MEr=r(rxe," (BERT model)"),rxe.forEach(t),EEr=i(we),KC=n(we,"LI",{});var txe=s(KC);S2e=n(txe,"STRONG",{});var Yvt=s(S2e);yEr=r(Yvt,"big_bird"),Yvt.forEach(t),wEr=r(txe," \u2014 "),WV=n(txe,"A",{href:!0});var Kvt=s(WV);AEr=r(Kvt,"FlaxBigBirdForMaskedLM"),Kvt.forEach(t),LEr=r(txe," (BigBird model)"),txe.forEach(t),BEr=i(we),ZC=n(we,"LI",{});var axe=s(ZC);P2e=n(axe,"STRONG",{});var Zvt=s(P2e);xEr=r(Zvt,"distilbert"),Zvt.forEach(t),kEr=r(axe," \u2014 "),QV=n(axe,"A",{href:!0});var eTt=s(QV);REr=r(eTt,"FlaxDistilBertForMaskedLM"),eTt.forEach(t),SEr=r(axe," (DistilBERT model)"),axe.forEach(t),PEr=i(we),eM=n(we,"LI",{});var nxe=s(eM);$2e=n(nxe,"STRONG",{});var oTt=s($2e);$Er=r(oTt,"electra"),oTt.forEach(t),IEr=r(nxe," \u2014 "),HV=n(nxe,"A",{href:!0});var rTt=s(HV);NEr=r(rTt,"FlaxElectraForMaskedLM"),rTt.forEach(t),DEr=r(nxe," (ELECTRA model)"),nxe.forEach(t),jEr=i(we),oM=n(we,"LI",{});var sxe=s(oM);I2e=n(sxe,"STRONG",{});var tTt=s(I2e);qEr=r(tTt,"mbart"),tTt.forEach(t),GEr=r(sxe," \u2014 "),UV=n(sxe,"A",{href:!0});var aTt=s(UV);OEr=r(aTt,"FlaxMBartForConditionalGeneration"),aTt.forEach(t),XEr=r(sxe," (mBART model)"),sxe.forEach(t),VEr=i(we),rM=n(we,"LI",{});var lxe=s(rM);N2e=n(lxe,"STRONG",{});var nTt=s(N2e);zEr=r(nTt,"roberta"),nTt.forEach(t),WEr=r(lxe," \u2014 "),JV=n(lxe,"A",{href:!0});var sTt=s(JV);QEr=r(sTt,"FlaxRobertaForMaskedLM"),sTt.forEach(t),HEr=r(lxe," (RoBERTa model)"),lxe.forEach(t),UEr=i(we),tM=n(we,"LI",{});var ixe=s(tM);D2e=n(ixe,"STRONG",{});var lTt=s(D2e);JEr=r(lTt,"roformer"),lTt.forEach(t),YEr=r(ixe," \u2014 "),YV=n(ixe,"A",{href:!0});var iTt=s(YV);KEr=r(iTt,"FlaxRoFormerForMaskedLM"),iTt.forEach(t),ZEr=r(ixe," (RoFormer model)"),ixe.forEach(t),e3r=i(we),aM=n(we,"LI",{});var dxe=s(aM);j2e=n(dxe,"STRONG",{});var dTt=s(j2e);o3r=r(dTt,"xlm-roberta"),dTt.forEach(t),r3r=r(dxe," \u2014 "),KV=n(dxe,"A",{href:!0});var cTt=s(KV);t3r=r(cTt,"FlaxXLMRobertaForMaskedLM"),cTt.forEach(t),a3r=r(dxe," (XLM-RoBERTa model)"),dxe.forEach(t),we.forEach(t),n3r=i(ka),q2e=n(ka,"P",{});var fTt=s(q2e);s3r=r(fTt,"Examples:"),fTt.forEach(t),l3r=i(ka),m(KA.$$.fragment,ka),ka.forEach(t),bi.forEach(t),VRe=i(c),ff=n(c,"H2",{class:!0});var o$e=s(ff);nM=n(o$e,"A",{id:!0,class:!0,href:!0});var mTt=s(nM);G2e=n(mTt,"SPAN",{});var gTt=s(G2e);m(ZA.$$.fragment,gTt),gTt.forEach(t),mTt.forEach(t),i3r=i(o$e),O2e=n(o$e,"SPAN",{});var hTt=s(O2e);d3r=r(hTt,"FlaxAutoModelForSeq2SeqLM"),hTt.forEach(t),o$e.forEach(t),zRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(e0.$$.fragment,Ti),c3r=i(Ti),mf=n(Ti,"P",{});var yQ=s(mf);f3r=r(yQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),X2e=n(yQ,"CODE",{});var pTt=s(X2e);m3r=r(pTt,"from_pretrained()"),pTt.forEach(t),g3r=r(yQ,"class method or the "),V2e=n(yQ,"CODE",{});var _Tt=s(V2e);h3r=r(_Tt,"from_config()"),_Tt.forEach(t),p3r=r(yQ,`class
method.`),yQ.forEach(t),_3r=i(Ti),o0=n(Ti,"P",{});var r$e=s(o0);u3r=r(r$e,"This class cannot be instantiated directly using "),z2e=n(r$e,"CODE",{});var uTt=s(z2e);b3r=r(uTt,"__init__()"),uTt.forEach(t),v3r=r(r$e," (throws an error)."),r$e.forEach(t),T3r=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(r0.$$.fragment,Fi),F3r=i(Fi),W2e=n(Fi,"P",{});var bTt=s(W2e);C3r=r(bTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bTt.forEach(t),M3r=i(Fi),gf=n(Fi,"P",{});var wQ=s(gf);E3r=r(wQ,`Note:
Loading a model from its configuration file does `),Q2e=n(wQ,"STRONG",{});var vTt=s(Q2e);y3r=r(vTt,"not"),vTt.forEach(t),w3r=r(wQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),H2e=n(wQ,"CODE",{});var TTt=s(H2e);A3r=r(TTt,"from_pretrained()"),TTt.forEach(t),L3r=r(wQ,"to load the model weights."),wQ.forEach(t),B3r=i(Fi),U2e=n(Fi,"P",{});var FTt=s(U2e);x3r=r(FTt,"Examples:"),FTt.forEach(t),k3r=i(Fi),m(t0.$$.fragment,Fi),Fi.forEach(t),R3r=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(a0.$$.fragment,Ra),S3r=i(Ra),J2e=n(Ra,"P",{});var CTt=s(J2e);P3r=r(CTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CTt.forEach(t),$3r=i(Ra),Sn=n(Ra,"P",{});var Z4=s(Sn);I3r=r(Z4,"The model class to instantiate is selected based on the "),Y2e=n(Z4,"CODE",{});var MTt=s(Y2e);N3r=r(MTt,"model_type"),MTt.forEach(t),D3r=r(Z4,` property of the config object (either
passed as an argument or loaded from `),K2e=n(Z4,"CODE",{});var ETt=s(K2e);j3r=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),q3r=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(Z4,"CODE",{});var yTt=s(Z2e);G3r=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),O3r=r(Z4,":"),Z4.forEach(t),X3r=i(Ra),Me=n(Ra,"UL",{});var so=s(Me);sM=n(so,"LI",{});var cxe=s(sM);eve=n(cxe,"STRONG",{});var wTt=s(eve);V3r=r(wTt,"bart"),wTt.forEach(t),z3r=r(cxe," \u2014 "),ZV=n(cxe,"A",{href:!0});var ATt=s(ZV);W3r=r(ATt,"FlaxBartForConditionalGeneration"),ATt.forEach(t),Q3r=r(cxe," (BART model)"),cxe.forEach(t),H3r=i(so),lM=n(so,"LI",{});var fxe=s(lM);ove=n(fxe,"STRONG",{});var LTt=s(ove);U3r=r(LTt,"blenderbot"),LTt.forEach(t),J3r=r(fxe," \u2014 "),ez=n(fxe,"A",{href:!0});var BTt=s(ez);Y3r=r(BTt,"FlaxBlenderbotForConditionalGeneration"),BTt.forEach(t),K3r=r(fxe," (Blenderbot model)"),fxe.forEach(t),Z3r=i(so),iM=n(so,"LI",{});var mxe=s(iM);rve=n(mxe,"STRONG",{});var xTt=s(rve);eyr=r(xTt,"blenderbot-small"),xTt.forEach(t),oyr=r(mxe," \u2014 "),oz=n(mxe,"A",{href:!0});var kTt=s(oz);ryr=r(kTt,"FlaxBlenderbotSmallForConditionalGeneration"),kTt.forEach(t),tyr=r(mxe," (BlenderbotSmall model)"),mxe.forEach(t),ayr=i(so),dM=n(so,"LI",{});var gxe=s(dM);tve=n(gxe,"STRONG",{});var RTt=s(tve);nyr=r(RTt,"encoder-decoder"),RTt.forEach(t),syr=r(gxe," \u2014 "),rz=n(gxe,"A",{href:!0});var STt=s(rz);lyr=r(STt,"FlaxEncoderDecoderModel"),STt.forEach(t),iyr=r(gxe," (Encoder decoder model)"),gxe.forEach(t),dyr=i(so),cM=n(so,"LI",{});var hxe=s(cM);ave=n(hxe,"STRONG",{});var PTt=s(ave);cyr=r(PTt,"marian"),PTt.forEach(t),fyr=r(hxe," \u2014 "),tz=n(hxe,"A",{href:!0});var $Tt=s(tz);myr=r($Tt,"FlaxMarianMTModel"),$Tt.forEach(t),gyr=r(hxe," (Marian model)"),hxe.forEach(t),hyr=i(so),fM=n(so,"LI",{});var pxe=s(fM);nve=n(pxe,"STRONG",{});var ITt=s(nve);pyr=r(ITt,"mbart"),ITt.forEach(t),_yr=r(pxe," \u2014 "),az=n(pxe,"A",{href:!0});var NTt=s(az);uyr=r(NTt,"FlaxMBartForConditionalGeneration"),NTt.forEach(t),byr=r(pxe," (mBART model)"),pxe.forEach(t),vyr=i(so),mM=n(so,"LI",{});var _xe=s(mM);sve=n(_xe,"STRONG",{});var DTt=s(sve);Tyr=r(DTt,"mt5"),DTt.forEach(t),Fyr=r(_xe," \u2014 "),nz=n(_xe,"A",{href:!0});var jTt=s(nz);Cyr=r(jTt,"FlaxMT5ForConditionalGeneration"),jTt.forEach(t),Myr=r(_xe," (mT5 model)"),_xe.forEach(t),Eyr=i(so),gM=n(so,"LI",{});var uxe=s(gM);lve=n(uxe,"STRONG",{});var qTt=s(lve);yyr=r(qTt,"pegasus"),qTt.forEach(t),wyr=r(uxe," \u2014 "),sz=n(uxe,"A",{href:!0});var GTt=s(sz);Ayr=r(GTt,"FlaxPegasusForConditionalGeneration"),GTt.forEach(t),Lyr=r(uxe," (Pegasus model)"),uxe.forEach(t),Byr=i(so),hM=n(so,"LI",{});var bxe=s(hM);ive=n(bxe,"STRONG",{});var OTt=s(ive);xyr=r(OTt,"t5"),OTt.forEach(t),kyr=r(bxe," \u2014 "),lz=n(bxe,"A",{href:!0});var XTt=s(lz);Ryr=r(XTt,"FlaxT5ForConditionalGeneration"),XTt.forEach(t),Syr=r(bxe," (T5 model)"),bxe.forEach(t),so.forEach(t),Pyr=i(Ra),dve=n(Ra,"P",{});var VTt=s(dve);$yr=r(VTt,"Examples:"),VTt.forEach(t),Iyr=i(Ra),m(n0.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),WRe=i(c),hf=n(c,"H2",{class:!0});var t$e=s(hf);pM=n(t$e,"A",{id:!0,class:!0,href:!0});var zTt=s(pM);cve=n(zTt,"SPAN",{});var WTt=s(cve);m(s0.$$.fragment,WTt),WTt.forEach(t),zTt.forEach(t),Nyr=i(t$e),fve=n(t$e,"SPAN",{});var QTt=s(fve);Dyr=r(QTt,"FlaxAutoModelForSequenceClassification"),QTt.forEach(t),t$e.forEach(t),QRe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(l0.$$.fragment,Ci),jyr=i(Ci),pf=n(Ci,"P",{});var AQ=s(pf);qyr=r(AQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mve=n(AQ,"CODE",{});var HTt=s(mve);Gyr=r(HTt,"from_pretrained()"),HTt.forEach(t),Oyr=r(AQ,"class method or the "),gve=n(AQ,"CODE",{});var UTt=s(gve);Xyr=r(UTt,"from_config()"),UTt.forEach(t),Vyr=r(AQ,`class
method.`),AQ.forEach(t),zyr=i(Ci),i0=n(Ci,"P",{});var a$e=s(i0);Wyr=r(a$e,"This class cannot be instantiated directly using "),hve=n(a$e,"CODE",{});var JTt=s(hve);Qyr=r(JTt,"__init__()"),JTt.forEach(t),Hyr=r(a$e," (throws an error)."),a$e.forEach(t),Uyr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(d0.$$.fragment,Mi),Jyr=i(Mi),pve=n(Mi,"P",{});var YTt=s(pve);Yyr=r(YTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YTt.forEach(t),Kyr=i(Mi),_f=n(Mi,"P",{});var LQ=s(_f);Zyr=r(LQ,`Note:
Loading a model from its configuration file does `),_ve=n(LQ,"STRONG",{});var KTt=s(_ve);ewr=r(KTt,"not"),KTt.forEach(t),owr=r(LQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uve=n(LQ,"CODE",{});var ZTt=s(uve);rwr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),twr=r(LQ,"to load the model weights."),LQ.forEach(t),awr=i(Mi),bve=n(Mi,"P",{});var e7t=s(bve);nwr=r(e7t,"Examples:"),e7t.forEach(t),swr=i(Mi),m(c0.$$.fragment,Mi),Mi.forEach(t),lwr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(f0.$$.fragment,Sa),iwr=i(Sa),vve=n(Sa,"P",{});var o7t=s(vve);dwr=r(o7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),o7t.forEach(t),cwr=i(Sa),Pn=n(Sa,"P",{});var eE=s(Pn);fwr=r(eE,"The model class to instantiate is selected based on the "),Tve=n(eE,"CODE",{});var r7t=s(Tve);mwr=r(r7t,"model_type"),r7t.forEach(t),gwr=r(eE,` property of the config object (either
passed as an argument or loaded from `),Fve=n(eE,"CODE",{});var t7t=s(Fve);hwr=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),pwr=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(eE,"CODE",{});var a7t=s(Cve);_wr=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),uwr=r(eE,":"),eE.forEach(t),bwr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);_M=n(Ae,"LI",{});var vxe=s(_M);Mve=n(vxe,"STRONG",{});var n7t=s(Mve);vwr=r(n7t,"albert"),n7t.forEach(t),Twr=r(vxe," \u2014 "),iz=n(vxe,"A",{href:!0});var s7t=s(iz);Fwr=r(s7t,"FlaxAlbertForSequenceClassification"),s7t.forEach(t),Cwr=r(vxe," (ALBERT model)"),vxe.forEach(t),Mwr=i(Ae),uM=n(Ae,"LI",{});var Txe=s(uM);Eve=n(Txe,"STRONG",{});var l7t=s(Eve);Ewr=r(l7t,"bart"),l7t.forEach(t),ywr=r(Txe," \u2014 "),dz=n(Txe,"A",{href:!0});var i7t=s(dz);wwr=r(i7t,"FlaxBartForSequenceClassification"),i7t.forEach(t),Awr=r(Txe," (BART model)"),Txe.forEach(t),Lwr=i(Ae),bM=n(Ae,"LI",{});var Fxe=s(bM);yve=n(Fxe,"STRONG",{});var d7t=s(yve);Bwr=r(d7t,"bert"),d7t.forEach(t),xwr=r(Fxe," \u2014 "),cz=n(Fxe,"A",{href:!0});var c7t=s(cz);kwr=r(c7t,"FlaxBertForSequenceClassification"),c7t.forEach(t),Rwr=r(Fxe," (BERT model)"),Fxe.forEach(t),Swr=i(Ae),vM=n(Ae,"LI",{});var Cxe=s(vM);wve=n(Cxe,"STRONG",{});var f7t=s(wve);Pwr=r(f7t,"big_bird"),f7t.forEach(t),$wr=r(Cxe," \u2014 "),fz=n(Cxe,"A",{href:!0});var m7t=s(fz);Iwr=r(m7t,"FlaxBigBirdForSequenceClassification"),m7t.forEach(t),Nwr=r(Cxe," (BigBird model)"),Cxe.forEach(t),Dwr=i(Ae),TM=n(Ae,"LI",{});var Mxe=s(TM);Ave=n(Mxe,"STRONG",{});var g7t=s(Ave);jwr=r(g7t,"distilbert"),g7t.forEach(t),qwr=r(Mxe," \u2014 "),mz=n(Mxe,"A",{href:!0});var h7t=s(mz);Gwr=r(h7t,"FlaxDistilBertForSequenceClassification"),h7t.forEach(t),Owr=r(Mxe," (DistilBERT model)"),Mxe.forEach(t),Xwr=i(Ae),FM=n(Ae,"LI",{});var Exe=s(FM);Lve=n(Exe,"STRONG",{});var p7t=s(Lve);Vwr=r(p7t,"electra"),p7t.forEach(t),zwr=r(Exe," \u2014 "),gz=n(Exe,"A",{href:!0});var _7t=s(gz);Wwr=r(_7t,"FlaxElectraForSequenceClassification"),_7t.forEach(t),Qwr=r(Exe," (ELECTRA model)"),Exe.forEach(t),Hwr=i(Ae),CM=n(Ae,"LI",{});var yxe=s(CM);Bve=n(yxe,"STRONG",{});var u7t=s(Bve);Uwr=r(u7t,"mbart"),u7t.forEach(t),Jwr=r(yxe," \u2014 "),hz=n(yxe,"A",{href:!0});var b7t=s(hz);Ywr=r(b7t,"FlaxMBartForSequenceClassification"),b7t.forEach(t),Kwr=r(yxe," (mBART model)"),yxe.forEach(t),Zwr=i(Ae),MM=n(Ae,"LI",{});var wxe=s(MM);xve=n(wxe,"STRONG",{});var v7t=s(xve);e6r=r(v7t,"roberta"),v7t.forEach(t),o6r=r(wxe," \u2014 "),pz=n(wxe,"A",{href:!0});var T7t=s(pz);r6r=r(T7t,"FlaxRobertaForSequenceClassification"),T7t.forEach(t),t6r=r(wxe," (RoBERTa model)"),wxe.forEach(t),a6r=i(Ae),EM=n(Ae,"LI",{});var Axe=s(EM);kve=n(Axe,"STRONG",{});var F7t=s(kve);n6r=r(F7t,"roformer"),F7t.forEach(t),s6r=r(Axe," \u2014 "),_z=n(Axe,"A",{href:!0});var C7t=s(_z);l6r=r(C7t,"FlaxRoFormerForSequenceClassification"),C7t.forEach(t),i6r=r(Axe," (RoFormer model)"),Axe.forEach(t),d6r=i(Ae),yM=n(Ae,"LI",{});var Lxe=s(yM);Rve=n(Lxe,"STRONG",{});var M7t=s(Rve);c6r=r(M7t,"xlm-roberta"),M7t.forEach(t),f6r=r(Lxe," \u2014 "),uz=n(Lxe,"A",{href:!0});var E7t=s(uz);m6r=r(E7t,"FlaxXLMRobertaForSequenceClassification"),E7t.forEach(t),g6r=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),Ae.forEach(t),h6r=i(Sa),Sve=n(Sa,"P",{});var y7t=s(Sve);p6r=r(y7t,"Examples:"),y7t.forEach(t),_6r=i(Sa),m(m0.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),HRe=i(c),uf=n(c,"H2",{class:!0});var n$e=s(uf);wM=n(n$e,"A",{id:!0,class:!0,href:!0});var w7t=s(wM);Pve=n(w7t,"SPAN",{});var A7t=s(Pve);m(g0.$$.fragment,A7t),A7t.forEach(t),w7t.forEach(t),u6r=i(n$e),$ve=n(n$e,"SPAN",{});var L7t=s($ve);b6r=r(L7t,"FlaxAutoModelForQuestionAnswering"),L7t.forEach(t),n$e.forEach(t),URe=i(c),Dr=n(c,"DIV",{class:!0});var Ei=s(Dr);m(h0.$$.fragment,Ei),v6r=i(Ei),bf=n(Ei,"P",{});var BQ=s(bf);T6r=r(BQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Ive=n(BQ,"CODE",{});var B7t=s(Ive);F6r=r(B7t,"from_pretrained()"),B7t.forEach(t),C6r=r(BQ,"class method or the "),Nve=n(BQ,"CODE",{});var x7t=s(Nve);M6r=r(x7t,"from_config()"),x7t.forEach(t),E6r=r(BQ,`class
method.`),BQ.forEach(t),y6r=i(Ei),p0=n(Ei,"P",{});var s$e=s(p0);w6r=r(s$e,"This class cannot be instantiated directly using "),Dve=n(s$e,"CODE",{});var k7t=s(Dve);A6r=r(k7t,"__init__()"),k7t.forEach(t),L6r=r(s$e," (throws an error)."),s$e.forEach(t),B6r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(_0.$$.fragment,yi),x6r=i(yi),jve=n(yi,"P",{});var R7t=s(jve);k6r=r(R7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),R7t.forEach(t),R6r=i(yi),vf=n(yi,"P",{});var xQ=s(vf);S6r=r(xQ,`Note:
Loading a model from its configuration file does `),qve=n(xQ,"STRONG",{});var S7t=s(qve);P6r=r(S7t,"not"),S7t.forEach(t),$6r=r(xQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gve=n(xQ,"CODE",{});var P7t=s(Gve);I6r=r(P7t,"from_pretrained()"),P7t.forEach(t),N6r=r(xQ,"to load the model weights."),xQ.forEach(t),D6r=i(yi),Ove=n(yi,"P",{});var $7t=s(Ove);j6r=r($7t,"Examples:"),$7t.forEach(t),q6r=i(yi),m(u0.$$.fragment,yi),yi.forEach(t),G6r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(b0.$$.fragment,Pa),O6r=i(Pa),Xve=n(Pa,"P",{});var I7t=s(Xve);X6r=r(I7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I7t.forEach(t),V6r=i(Pa),$n=n(Pa,"P",{});var oE=s($n);z6r=r(oE,"The model class to instantiate is selected based on the "),Vve=n(oE,"CODE",{});var N7t=s(Vve);W6r=r(N7t,"model_type"),N7t.forEach(t),Q6r=r(oE,` property of the config object (either
passed as an argument or loaded from `),zve=n(oE,"CODE",{});var D7t=s(zve);H6r=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),U6r=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(oE,"CODE",{});var j7t=s(Wve);J6r=r(j7t,"pretrained_model_name_or_path"),j7t.forEach(t),Y6r=r(oE,":"),oE.forEach(t),K6r=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);AM=n(Le,"LI",{});var Bxe=s(AM);Qve=n(Bxe,"STRONG",{});var q7t=s(Qve);Z6r=r(q7t,"albert"),q7t.forEach(t),eAr=r(Bxe," \u2014 "),bz=n(Bxe,"A",{href:!0});var G7t=s(bz);oAr=r(G7t,"FlaxAlbertForQuestionAnswering"),G7t.forEach(t),rAr=r(Bxe," (ALBERT model)"),Bxe.forEach(t),tAr=i(Le),LM=n(Le,"LI",{});var xxe=s(LM);Hve=n(xxe,"STRONG",{});var O7t=s(Hve);aAr=r(O7t,"bart"),O7t.forEach(t),nAr=r(xxe," \u2014 "),vz=n(xxe,"A",{href:!0});var X7t=s(vz);sAr=r(X7t,"FlaxBartForQuestionAnswering"),X7t.forEach(t),lAr=r(xxe," (BART model)"),xxe.forEach(t),iAr=i(Le),BM=n(Le,"LI",{});var kxe=s(BM);Uve=n(kxe,"STRONG",{});var V7t=s(Uve);dAr=r(V7t,"bert"),V7t.forEach(t),cAr=r(kxe," \u2014 "),Tz=n(kxe,"A",{href:!0});var z7t=s(Tz);fAr=r(z7t,"FlaxBertForQuestionAnswering"),z7t.forEach(t),mAr=r(kxe," (BERT model)"),kxe.forEach(t),gAr=i(Le),xM=n(Le,"LI",{});var Rxe=s(xM);Jve=n(Rxe,"STRONG",{});var W7t=s(Jve);hAr=r(W7t,"big_bird"),W7t.forEach(t),pAr=r(Rxe," \u2014 "),Fz=n(Rxe,"A",{href:!0});var Q7t=s(Fz);_Ar=r(Q7t,"FlaxBigBirdForQuestionAnswering"),Q7t.forEach(t),uAr=r(Rxe," (BigBird model)"),Rxe.forEach(t),bAr=i(Le),kM=n(Le,"LI",{});var Sxe=s(kM);Yve=n(Sxe,"STRONG",{});var H7t=s(Yve);vAr=r(H7t,"distilbert"),H7t.forEach(t),TAr=r(Sxe," \u2014 "),Cz=n(Sxe,"A",{href:!0});var U7t=s(Cz);FAr=r(U7t,"FlaxDistilBertForQuestionAnswering"),U7t.forEach(t),CAr=r(Sxe," (DistilBERT model)"),Sxe.forEach(t),MAr=i(Le),RM=n(Le,"LI",{});var Pxe=s(RM);Kve=n(Pxe,"STRONG",{});var J7t=s(Kve);EAr=r(J7t,"electra"),J7t.forEach(t),yAr=r(Pxe," \u2014 "),Mz=n(Pxe,"A",{href:!0});var Y7t=s(Mz);wAr=r(Y7t,"FlaxElectraForQuestionAnswering"),Y7t.forEach(t),AAr=r(Pxe," (ELECTRA model)"),Pxe.forEach(t),LAr=i(Le),SM=n(Le,"LI",{});var $xe=s(SM);Zve=n($xe,"STRONG",{});var K7t=s(Zve);BAr=r(K7t,"mbart"),K7t.forEach(t),xAr=r($xe," \u2014 "),Ez=n($xe,"A",{href:!0});var Z7t=s(Ez);kAr=r(Z7t,"FlaxMBartForQuestionAnswering"),Z7t.forEach(t),RAr=r($xe," (mBART model)"),$xe.forEach(t),SAr=i(Le),PM=n(Le,"LI",{});var Ixe=s(PM);eTe=n(Ixe,"STRONG",{});var e8t=s(eTe);PAr=r(e8t,"roberta"),e8t.forEach(t),$Ar=r(Ixe," \u2014 "),yz=n(Ixe,"A",{href:!0});var o8t=s(yz);IAr=r(o8t,"FlaxRobertaForQuestionAnswering"),o8t.forEach(t),NAr=r(Ixe," (RoBERTa model)"),Ixe.forEach(t),DAr=i(Le),$M=n(Le,"LI",{});var Nxe=s($M);oTe=n(Nxe,"STRONG",{});var r8t=s(oTe);jAr=r(r8t,"roformer"),r8t.forEach(t),qAr=r(Nxe," \u2014 "),wz=n(Nxe,"A",{href:!0});var t8t=s(wz);GAr=r(t8t,"FlaxRoFormerForQuestionAnswering"),t8t.forEach(t),OAr=r(Nxe," (RoFormer model)"),Nxe.forEach(t),XAr=i(Le),IM=n(Le,"LI",{});var Dxe=s(IM);rTe=n(Dxe,"STRONG",{});var a8t=s(rTe);VAr=r(a8t,"xlm-roberta"),a8t.forEach(t),zAr=r(Dxe," \u2014 "),Az=n(Dxe,"A",{href:!0});var n8t=s(Az);WAr=r(n8t,"FlaxXLMRobertaForQuestionAnswering"),n8t.forEach(t),QAr=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),Le.forEach(t),HAr=i(Pa),tTe=n(Pa,"P",{});var s8t=s(tTe);UAr=r(s8t,"Examples:"),s8t.forEach(t),JAr=i(Pa),m(v0.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),JRe=i(c),Tf=n(c,"H2",{class:!0});var l$e=s(Tf);NM=n(l$e,"A",{id:!0,class:!0,href:!0});var l8t=s(NM);aTe=n(l8t,"SPAN",{});var i8t=s(aTe);m(T0.$$.fragment,i8t),i8t.forEach(t),l8t.forEach(t),YAr=i(l$e),nTe=n(l$e,"SPAN",{});var d8t=s(nTe);KAr=r(d8t,"FlaxAutoModelForTokenClassification"),d8t.forEach(t),l$e.forEach(t),YRe=i(c),jr=n(c,"DIV",{class:!0});var wi=s(jr);m(F0.$$.fragment,wi),ZAr=i(wi),Ff=n(wi,"P",{});var kQ=s(Ff);e0r=r(kQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sTe=n(kQ,"CODE",{});var c8t=s(sTe);o0r=r(c8t,"from_pretrained()"),c8t.forEach(t),r0r=r(kQ,"class method or the "),lTe=n(kQ,"CODE",{});var f8t=s(lTe);t0r=r(f8t,"from_config()"),f8t.forEach(t),a0r=r(kQ,`class
method.`),kQ.forEach(t),n0r=i(wi),C0=n(wi,"P",{});var i$e=s(C0);s0r=r(i$e,"This class cannot be instantiated directly using "),iTe=n(i$e,"CODE",{});var m8t=s(iTe);l0r=r(m8t,"__init__()"),m8t.forEach(t),i0r=r(i$e," (throws an error)."),i$e.forEach(t),d0r=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(M0.$$.fragment,Ai),c0r=i(Ai),dTe=n(Ai,"P",{});var g8t=s(dTe);f0r=r(g8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g8t.forEach(t),m0r=i(Ai),Cf=n(Ai,"P",{});var RQ=s(Cf);g0r=r(RQ,`Note:
Loading a model from its configuration file does `),cTe=n(RQ,"STRONG",{});var h8t=s(cTe);h0r=r(h8t,"not"),h8t.forEach(t),p0r=r(RQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fTe=n(RQ,"CODE",{});var p8t=s(fTe);_0r=r(p8t,"from_pretrained()"),p8t.forEach(t),u0r=r(RQ,"to load the model weights."),RQ.forEach(t),b0r=i(Ai),mTe=n(Ai,"P",{});var _8t=s(mTe);v0r=r(_8t,"Examples:"),_8t.forEach(t),T0r=i(Ai),m(E0.$$.fragment,Ai),Ai.forEach(t),F0r=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(y0.$$.fragment,$a),C0r=i($a),gTe=n($a,"P",{});var u8t=s(gTe);M0r=r(u8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u8t.forEach(t),E0r=i($a),In=n($a,"P",{});var rE=s(In);y0r=r(rE,"The model class to instantiate is selected based on the "),hTe=n(rE,"CODE",{});var b8t=s(hTe);w0r=r(b8t,"model_type"),b8t.forEach(t),A0r=r(rE,` property of the config object (either
passed as an argument or loaded from `),pTe=n(rE,"CODE",{});var v8t=s(pTe);L0r=r(v8t,"pretrained_model_name_or_path"),v8t.forEach(t),B0r=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Te=n(rE,"CODE",{});var T8t=s(_Te);x0r=r(T8t,"pretrained_model_name_or_path"),T8t.forEach(t),k0r=r(rE,":"),rE.forEach(t),R0r=i($a),Se=n($a,"UL",{});var Oo=s(Se);DM=n(Oo,"LI",{});var jxe=s(DM);uTe=n(jxe,"STRONG",{});var F8t=s(uTe);S0r=r(F8t,"albert"),F8t.forEach(t),P0r=r(jxe," \u2014 "),Lz=n(jxe,"A",{href:!0});var C8t=s(Lz);$0r=r(C8t,"FlaxAlbertForTokenClassification"),C8t.forEach(t),I0r=r(jxe," (ALBERT model)"),jxe.forEach(t),N0r=i(Oo),jM=n(Oo,"LI",{});var qxe=s(jM);bTe=n(qxe,"STRONG",{});var M8t=s(bTe);D0r=r(M8t,"bert"),M8t.forEach(t),j0r=r(qxe," \u2014 "),Bz=n(qxe,"A",{href:!0});var E8t=s(Bz);q0r=r(E8t,"FlaxBertForTokenClassification"),E8t.forEach(t),G0r=r(qxe," (BERT model)"),qxe.forEach(t),O0r=i(Oo),qM=n(Oo,"LI",{});var Gxe=s(qM);vTe=n(Gxe,"STRONG",{});var y8t=s(vTe);X0r=r(y8t,"big_bird"),y8t.forEach(t),V0r=r(Gxe," \u2014 "),xz=n(Gxe,"A",{href:!0});var w8t=s(xz);z0r=r(w8t,"FlaxBigBirdForTokenClassification"),w8t.forEach(t),W0r=r(Gxe," (BigBird model)"),Gxe.forEach(t),Q0r=i(Oo),GM=n(Oo,"LI",{});var Oxe=s(GM);TTe=n(Oxe,"STRONG",{});var A8t=s(TTe);H0r=r(A8t,"distilbert"),A8t.forEach(t),U0r=r(Oxe," \u2014 "),kz=n(Oxe,"A",{href:!0});var L8t=s(kz);J0r=r(L8t,"FlaxDistilBertForTokenClassification"),L8t.forEach(t),Y0r=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),K0r=i(Oo),OM=n(Oo,"LI",{});var Xxe=s(OM);FTe=n(Xxe,"STRONG",{});var B8t=s(FTe);Z0r=r(B8t,"electra"),B8t.forEach(t),eLr=r(Xxe," \u2014 "),Rz=n(Xxe,"A",{href:!0});var x8t=s(Rz);oLr=r(x8t,"FlaxElectraForTokenClassification"),x8t.forEach(t),rLr=r(Xxe," (ELECTRA model)"),Xxe.forEach(t),tLr=i(Oo),XM=n(Oo,"LI",{});var Vxe=s(XM);CTe=n(Vxe,"STRONG",{});var k8t=s(CTe);aLr=r(k8t,"roberta"),k8t.forEach(t),nLr=r(Vxe," \u2014 "),Sz=n(Vxe,"A",{href:!0});var R8t=s(Sz);sLr=r(R8t,"FlaxRobertaForTokenClassification"),R8t.forEach(t),lLr=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),iLr=i(Oo),VM=n(Oo,"LI",{});var zxe=s(VM);MTe=n(zxe,"STRONG",{});var S8t=s(MTe);dLr=r(S8t,"roformer"),S8t.forEach(t),cLr=r(zxe," \u2014 "),Pz=n(zxe,"A",{href:!0});var P8t=s(Pz);fLr=r(P8t,"FlaxRoFormerForTokenClassification"),P8t.forEach(t),mLr=r(zxe," (RoFormer model)"),zxe.forEach(t),gLr=i(Oo),zM=n(Oo,"LI",{});var Wxe=s(zM);ETe=n(Wxe,"STRONG",{});var $8t=s(ETe);hLr=r($8t,"xlm-roberta"),$8t.forEach(t),pLr=r(Wxe," \u2014 "),$z=n(Wxe,"A",{href:!0});var I8t=s($z);_Lr=r(I8t,"FlaxXLMRobertaForTokenClassification"),I8t.forEach(t),uLr=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),Oo.forEach(t),bLr=i($a),yTe=n($a,"P",{});var N8t=s(yTe);vLr=r(N8t,"Examples:"),N8t.forEach(t),TLr=i($a),m(w0.$$.fragment,$a),$a.forEach(t),wi.forEach(t),KRe=i(c),Mf=n(c,"H2",{class:!0});var d$e=s(Mf);WM=n(d$e,"A",{id:!0,class:!0,href:!0});var D8t=s(WM);wTe=n(D8t,"SPAN",{});var j8t=s(wTe);m(A0.$$.fragment,j8t),j8t.forEach(t),D8t.forEach(t),FLr=i(d$e),ATe=n(d$e,"SPAN",{});var q8t=s(ATe);CLr=r(q8t,"FlaxAutoModelForMultipleChoice"),q8t.forEach(t),d$e.forEach(t),ZRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(L0.$$.fragment,Li),MLr=i(Li),Ef=n(Li,"P",{});var SQ=s(Ef);ELr=r(SQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LTe=n(SQ,"CODE",{});var G8t=s(LTe);yLr=r(G8t,"from_pretrained()"),G8t.forEach(t),wLr=r(SQ,"class method or the "),BTe=n(SQ,"CODE",{});var O8t=s(BTe);ALr=r(O8t,"from_config()"),O8t.forEach(t),LLr=r(SQ,`class
method.`),SQ.forEach(t),BLr=i(Li),B0=n(Li,"P",{});var c$e=s(B0);xLr=r(c$e,"This class cannot be instantiated directly using "),xTe=n(c$e,"CODE",{});var X8t=s(xTe);kLr=r(X8t,"__init__()"),X8t.forEach(t),RLr=r(c$e," (throws an error)."),c$e.forEach(t),SLr=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(x0.$$.fragment,Bi),PLr=i(Bi),kTe=n(Bi,"P",{});var V8t=s(kTe);$Lr=r(V8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V8t.forEach(t),ILr=i(Bi),yf=n(Bi,"P",{});var PQ=s(yf);NLr=r(PQ,`Note:
Loading a model from its configuration file does `),RTe=n(PQ,"STRONG",{});var z8t=s(RTe);DLr=r(z8t,"not"),z8t.forEach(t),jLr=r(PQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),STe=n(PQ,"CODE",{});var W8t=s(STe);qLr=r(W8t,"from_pretrained()"),W8t.forEach(t),GLr=r(PQ,"to load the model weights."),PQ.forEach(t),OLr=i(Bi),PTe=n(Bi,"P",{});var Q8t=s(PTe);XLr=r(Q8t,"Examples:"),Q8t.forEach(t),VLr=i(Bi),m(k0.$$.fragment,Bi),Bi.forEach(t),zLr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(R0.$$.fragment,Ia),WLr=i(Ia),$Te=n(Ia,"P",{});var H8t=s($Te);QLr=r(H8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),H8t.forEach(t),HLr=i(Ia),Nn=n(Ia,"P",{});var tE=s(Nn);ULr=r(tE,"The model class to instantiate is selected based on the "),ITe=n(tE,"CODE",{});var U8t=s(ITe);JLr=r(U8t,"model_type"),U8t.forEach(t),YLr=r(tE,` property of the config object (either
passed as an argument or loaded from `),NTe=n(tE,"CODE",{});var J8t=s(NTe);KLr=r(J8t,"pretrained_model_name_or_path"),J8t.forEach(t),ZLr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(tE,"CODE",{});var Y8t=s(DTe);e9r=r(Y8t,"pretrained_model_name_or_path"),Y8t.forEach(t),o9r=r(tE,":"),tE.forEach(t),r9r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);QM=n(Xo,"LI",{});var Qxe=s(QM);jTe=n(Qxe,"STRONG",{});var K8t=s(jTe);t9r=r(K8t,"albert"),K8t.forEach(t),a9r=r(Qxe," \u2014 "),Iz=n(Qxe,"A",{href:!0});var Z8t=s(Iz);n9r=r(Z8t,"FlaxAlbertForMultipleChoice"),Z8t.forEach(t),s9r=r(Qxe," (ALBERT model)"),Qxe.forEach(t),l9r=i(Xo),HM=n(Xo,"LI",{});var Hxe=s(HM);qTe=n(Hxe,"STRONG",{});var eFt=s(qTe);i9r=r(eFt,"bert"),eFt.forEach(t),d9r=r(Hxe," \u2014 "),Nz=n(Hxe,"A",{href:!0});var oFt=s(Nz);c9r=r(oFt,"FlaxBertForMultipleChoice"),oFt.forEach(t),f9r=r(Hxe," (BERT model)"),Hxe.forEach(t),m9r=i(Xo),UM=n(Xo,"LI",{});var Uxe=s(UM);GTe=n(Uxe,"STRONG",{});var rFt=s(GTe);g9r=r(rFt,"big_bird"),rFt.forEach(t),h9r=r(Uxe," \u2014 "),Dz=n(Uxe,"A",{href:!0});var tFt=s(Dz);p9r=r(tFt,"FlaxBigBirdForMultipleChoice"),tFt.forEach(t),_9r=r(Uxe," (BigBird model)"),Uxe.forEach(t),u9r=i(Xo),JM=n(Xo,"LI",{});var Jxe=s(JM);OTe=n(Jxe,"STRONG",{});var aFt=s(OTe);b9r=r(aFt,"distilbert"),aFt.forEach(t),v9r=r(Jxe," \u2014 "),jz=n(Jxe,"A",{href:!0});var nFt=s(jz);T9r=r(nFt,"FlaxDistilBertForMultipleChoice"),nFt.forEach(t),F9r=r(Jxe," (DistilBERT model)"),Jxe.forEach(t),C9r=i(Xo),YM=n(Xo,"LI",{});var Yxe=s(YM);XTe=n(Yxe,"STRONG",{});var sFt=s(XTe);M9r=r(sFt,"electra"),sFt.forEach(t),E9r=r(Yxe," \u2014 "),qz=n(Yxe,"A",{href:!0});var lFt=s(qz);y9r=r(lFt,"FlaxElectraForMultipleChoice"),lFt.forEach(t),w9r=r(Yxe," (ELECTRA model)"),Yxe.forEach(t),A9r=i(Xo),KM=n(Xo,"LI",{});var Kxe=s(KM);VTe=n(Kxe,"STRONG",{});var iFt=s(VTe);L9r=r(iFt,"roberta"),iFt.forEach(t),B9r=r(Kxe," \u2014 "),Gz=n(Kxe,"A",{href:!0});var dFt=s(Gz);x9r=r(dFt,"FlaxRobertaForMultipleChoice"),dFt.forEach(t),k9r=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),R9r=i(Xo),ZM=n(Xo,"LI",{});var Zxe=s(ZM);zTe=n(Zxe,"STRONG",{});var cFt=s(zTe);S9r=r(cFt,"roformer"),cFt.forEach(t),P9r=r(Zxe," \u2014 "),Oz=n(Zxe,"A",{href:!0});var fFt=s(Oz);$9r=r(fFt,"FlaxRoFormerForMultipleChoice"),fFt.forEach(t),I9r=r(Zxe," (RoFormer model)"),Zxe.forEach(t),N9r=i(Xo),e4=n(Xo,"LI",{});var eke=s(e4);WTe=n(eke,"STRONG",{});var mFt=s(WTe);D9r=r(mFt,"xlm-roberta"),mFt.forEach(t),j9r=r(eke," \u2014 "),Xz=n(eke,"A",{href:!0});var gFt=s(Xz);q9r=r(gFt,"FlaxXLMRobertaForMultipleChoice"),gFt.forEach(t),G9r=r(eke," (XLM-RoBERTa model)"),eke.forEach(t),Xo.forEach(t),O9r=i(Ia),QTe=n(Ia,"P",{});var hFt=s(QTe);X9r=r(hFt,"Examples:"),hFt.forEach(t),V9r=i(Ia),m(S0.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),eSe=i(c),wf=n(c,"H2",{class:!0});var f$e=s(wf);o4=n(f$e,"A",{id:!0,class:!0,href:!0});var pFt=s(o4);HTe=n(pFt,"SPAN",{});var _Ft=s(HTe);m(P0.$$.fragment,_Ft),_Ft.forEach(t),pFt.forEach(t),z9r=i(f$e),UTe=n(f$e,"SPAN",{});var uFt=s(UTe);W9r=r(uFt,"FlaxAutoModelForNextSentencePrediction"),uFt.forEach(t),f$e.forEach(t),oSe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m($0.$$.fragment,xi),Q9r=i(xi),Af=n(xi,"P",{});var $Q=s(Af);H9r=r($Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JTe=n($Q,"CODE",{});var bFt=s(JTe);U9r=r(bFt,"from_pretrained()"),bFt.forEach(t),J9r=r($Q,"class method or the "),YTe=n($Q,"CODE",{});var vFt=s(YTe);Y9r=r(vFt,"from_config()"),vFt.forEach(t),K9r=r($Q,`class
method.`),$Q.forEach(t),Z9r=i(xi),I0=n(xi,"P",{});var m$e=s(I0);eBr=r(m$e,"This class cannot be instantiated directly using "),KTe=n(m$e,"CODE",{});var TFt=s(KTe);oBr=r(TFt,"__init__()"),TFt.forEach(t),rBr=r(m$e," (throws an error)."),m$e.forEach(t),tBr=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(N0.$$.fragment,ki),aBr=i(ki),ZTe=n(ki,"P",{});var FFt=s(ZTe);nBr=r(FFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FFt.forEach(t),sBr=i(ki),Lf=n(ki,"P",{});var IQ=s(Lf);lBr=r(IQ,`Note:
Loading a model from its configuration file does `),e7e=n(IQ,"STRONG",{});var CFt=s(e7e);iBr=r(CFt,"not"),CFt.forEach(t),dBr=r(IQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),o7e=n(IQ,"CODE",{});var MFt=s(o7e);cBr=r(MFt,"from_pretrained()"),MFt.forEach(t),fBr=r(IQ,"to load the model weights."),IQ.forEach(t),mBr=i(ki),r7e=n(ki,"P",{});var EFt=s(r7e);gBr=r(EFt,"Examples:"),EFt.forEach(t),hBr=i(ki),m(D0.$$.fragment,ki),ki.forEach(t),pBr=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);m(j0.$$.fragment,Na),_Br=i(Na),t7e=n(Na,"P",{});var yFt=s(t7e);uBr=r(yFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yFt.forEach(t),bBr=i(Na),Dn=n(Na,"P",{});var aE=s(Dn);vBr=r(aE,"The model class to instantiate is selected based on the "),a7e=n(aE,"CODE",{});var wFt=s(a7e);TBr=r(wFt,"model_type"),wFt.forEach(t),FBr=r(aE,` property of the config object (either
passed as an argument or loaded from `),n7e=n(aE,"CODE",{});var AFt=s(n7e);CBr=r(AFt,"pretrained_model_name_or_path"),AFt.forEach(t),MBr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(aE,"CODE",{});var LFt=s(s7e);EBr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),yBr=r(aE,":"),aE.forEach(t),wBr=i(Na),l7e=n(Na,"UL",{});var BFt=s(l7e);r4=n(BFt,"LI",{});var oke=s(r4);i7e=n(oke,"STRONG",{});var xFt=s(i7e);ABr=r(xFt,"bert"),xFt.forEach(t),LBr=r(oke," \u2014 "),Vz=n(oke,"A",{href:!0});var kFt=s(Vz);BBr=r(kFt,"FlaxBertForNextSentencePrediction"),kFt.forEach(t),xBr=r(oke," (BERT model)"),oke.forEach(t),BFt.forEach(t),kBr=i(Na),d7e=n(Na,"P",{});var RFt=s(d7e);RBr=r(RFt,"Examples:"),RFt.forEach(t),SBr=i(Na),m(q0.$$.fragment,Na),Na.forEach(t),xi.forEach(t),rSe=i(c),Bf=n(c,"H2",{class:!0});var g$e=s(Bf);t4=n(g$e,"A",{id:!0,class:!0,href:!0});var SFt=s(t4);c7e=n(SFt,"SPAN",{});var PFt=s(c7e);m(G0.$$.fragment,PFt),PFt.forEach(t),SFt.forEach(t),PBr=i(g$e),f7e=n(g$e,"SPAN",{});var $Ft=s(f7e);$Br=r($Ft,"FlaxAutoModelForImageClassification"),$Ft.forEach(t),g$e.forEach(t),tSe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(O0.$$.fragment,Ri),IBr=i(Ri),xf=n(Ri,"P",{});var NQ=s(xf);NBr=r(NQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),m7e=n(NQ,"CODE",{});var IFt=s(m7e);DBr=r(IFt,"from_pretrained()"),IFt.forEach(t),jBr=r(NQ,"class method or the "),g7e=n(NQ,"CODE",{});var NFt=s(g7e);qBr=r(NFt,"from_config()"),NFt.forEach(t),GBr=r(NQ,`class
method.`),NQ.forEach(t),OBr=i(Ri),X0=n(Ri,"P",{});var h$e=s(X0);XBr=r(h$e,"This class cannot be instantiated directly using "),h7e=n(h$e,"CODE",{});var DFt=s(h7e);VBr=r(DFt,"__init__()"),DFt.forEach(t),zBr=r(h$e," (throws an error)."),h$e.forEach(t),WBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(V0.$$.fragment,Si),QBr=i(Si),p7e=n(Si,"P",{});var jFt=s(p7e);HBr=r(jFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jFt.forEach(t),UBr=i(Si),kf=n(Si,"P",{});var DQ=s(kf);JBr=r(DQ,`Note:
Loading a model from its configuration file does `),_7e=n(DQ,"STRONG",{});var qFt=s(_7e);YBr=r(qFt,"not"),qFt.forEach(t),KBr=r(DQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),u7e=n(DQ,"CODE",{});var GFt=s(u7e);ZBr=r(GFt,"from_pretrained()"),GFt.forEach(t),exr=r(DQ,"to load the model weights."),DQ.forEach(t),oxr=i(Si),b7e=n(Si,"P",{});var OFt=s(b7e);rxr=r(OFt,"Examples:"),OFt.forEach(t),txr=i(Si),m(z0.$$.fragment,Si),Si.forEach(t),axr=i(Ri),No=n(Ri,"DIV",{class:!0});var Da=s(No);m(W0.$$.fragment,Da),nxr=i(Da),v7e=n(Da,"P",{});var XFt=s(v7e);sxr=r(XFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XFt.forEach(t),lxr=i(Da),jn=n(Da,"P",{});var nE=s(jn);ixr=r(nE,"The model class to instantiate is selected based on the "),T7e=n(nE,"CODE",{});var VFt=s(T7e);dxr=r(VFt,"model_type"),VFt.forEach(t),cxr=r(nE,` property of the config object (either
passed as an argument or loaded from `),F7e=n(nE,"CODE",{});var zFt=s(F7e);fxr=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),mxr=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C7e=n(nE,"CODE",{});var WFt=s(C7e);gxr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),hxr=r(nE,":"),nE.forEach(t),pxr=i(Da),Q0=n(Da,"UL",{});var p$e=s(Q0);a4=n(p$e,"LI",{});var rke=s(a4);M7e=n(rke,"STRONG",{});var QFt=s(M7e);_xr=r(QFt,"beit"),QFt.forEach(t),uxr=r(rke," \u2014 "),zz=n(rke,"A",{href:!0});var HFt=s(zz);bxr=r(HFt,"FlaxBeitForImageClassification"),HFt.forEach(t),vxr=r(rke," (BEiT model)"),rke.forEach(t),Txr=i(p$e),n4=n(p$e,"LI",{});var tke=s(n4);E7e=n(tke,"STRONG",{});var UFt=s(E7e);Fxr=r(UFt,"vit"),UFt.forEach(t),Cxr=r(tke," \u2014 "),Wz=n(tke,"A",{href:!0});var JFt=s(Wz);Mxr=r(JFt,"FlaxViTForImageClassification"),JFt.forEach(t),Exr=r(tke," (ViT model)"),tke.forEach(t),p$e.forEach(t),yxr=i(Da),y7e=n(Da,"P",{});var YFt=s(y7e);wxr=r(YFt,"Examples:"),YFt.forEach(t),Axr=i(Da),m(H0.$$.fragment,Da),Da.forEach(t),Ri.forEach(t),aSe=i(c),Rf=n(c,"H2",{class:!0});var _$e=s(Rf);s4=n(_$e,"A",{id:!0,class:!0,href:!0});var KFt=s(s4);w7e=n(KFt,"SPAN",{});var ZFt=s(w7e);m(U0.$$.fragment,ZFt),ZFt.forEach(t),KFt.forEach(t),Lxr=i(_$e),A7e=n(_$e,"SPAN",{});var eCt=s(A7e);Bxr=r(eCt,"FlaxAutoModelForVision2Seq"),eCt.forEach(t),_$e.forEach(t),nSe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(J0.$$.fragment,Pi),xxr=i(Pi),Sf=n(Pi,"P",{});var jQ=s(Sf);kxr=r(jQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),L7e=n(jQ,"CODE",{});var oCt=s(L7e);Rxr=r(oCt,"from_pretrained()"),oCt.forEach(t),Sxr=r(jQ,"class method or the "),B7e=n(jQ,"CODE",{});var rCt=s(B7e);Pxr=r(rCt,"from_config()"),rCt.forEach(t),$xr=r(jQ,`class
method.`),jQ.forEach(t),Ixr=i(Pi),Y0=n(Pi,"P",{});var u$e=s(Y0);Nxr=r(u$e,"This class cannot be instantiated directly using "),x7e=n(u$e,"CODE",{});var tCt=s(x7e);Dxr=r(tCt,"__init__()"),tCt.forEach(t),jxr=r(u$e," (throws an error)."),u$e.forEach(t),qxr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);m(K0.$$.fragment,$i),Gxr=i($i),k7e=n($i,"P",{});var aCt=s(k7e);Oxr=r(aCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aCt.forEach(t),Xxr=i($i),Pf=n($i,"P",{});var qQ=s(Pf);Vxr=r(qQ,`Note:
Loading a model from its configuration file does `),R7e=n(qQ,"STRONG",{});var nCt=s(R7e);zxr=r(nCt,"not"),nCt.forEach(t),Wxr=r(qQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),S7e=n(qQ,"CODE",{});var sCt=s(S7e);Qxr=r(sCt,"from_pretrained()"),sCt.forEach(t),Hxr=r(qQ,"to load the model weights."),qQ.forEach(t),Uxr=i($i),P7e=n($i,"P",{});var lCt=s(P7e);Jxr=r(lCt,"Examples:"),lCt.forEach(t),Yxr=i($i),m(Z0.$$.fragment,$i),$i.forEach(t),Kxr=i(Pi),Do=n(Pi,"DIV",{class:!0});var ja=s(Do);m(eL.$$.fragment,ja),Zxr=i(ja),$7e=n(ja,"P",{});var iCt=s($7e);ekr=r(iCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iCt.forEach(t),okr=i(ja),qn=n(ja,"P",{});var sE=s(qn);rkr=r(sE,"The model class to instantiate is selected based on the "),I7e=n(sE,"CODE",{});var dCt=s(I7e);tkr=r(dCt,"model_type"),dCt.forEach(t),akr=r(sE,` property of the config object (either
passed as an argument or loaded from `),N7e=n(sE,"CODE",{});var cCt=s(N7e);nkr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),skr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D7e=n(sE,"CODE",{});var fCt=s(D7e);lkr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),ikr=r(sE,":"),sE.forEach(t),dkr=i(ja),j7e=n(ja,"UL",{});var mCt=s(j7e);l4=n(mCt,"LI",{});var ake=s(l4);q7e=n(ake,"STRONG",{});var gCt=s(q7e);ckr=r(gCt,"vision-encoder-decoder"),gCt.forEach(t),fkr=r(ake," \u2014 "),Qz=n(ake,"A",{href:!0});var hCt=s(Qz);mkr=r(hCt,"FlaxVisionEncoderDecoderModel"),hCt.forEach(t),gkr=r(ake," (Vision Encoder decoder model)"),ake.forEach(t),mCt.forEach(t),hkr=i(ja),G7e=n(ja,"P",{});var pCt=s(G7e);pkr=r(pCt,"Examples:"),pCt.forEach(t),_kr=i(ja),m(oL.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(K,"name","hf:doc:metadata"),d(K,"content",JSON.stringify(yCt)),d(Ee,"id","auto-classes"),d(Ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ee,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(Vi,"class","relative group"),d(n9,"href","/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(s9,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertConfig"),d(l9,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartConfig"),d(i9,"href","/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitConfig"),d(d9,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertConfig"),d(c9,"href","/docs/transformers/pr_15781/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(f9,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdConfig"),d(m9,"href","/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(g9,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(h9,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(p9,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertConfig"),d(_9,"href","/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineConfig"),d(u9,"href","/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPConfig"),d(b9,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertConfig"),d(v9,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextConfig"),d(T9,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLConfig"),d(F9,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(C9,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(M9,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaConfig"),d(E9,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(y9,"href","/docs/transformers/pr_15781/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(w9,"href","/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTConfig"),d(A9,"href","/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrConfig"),d(L9,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertConfig"),d(B9,"href","/docs/transformers/pr_15781/en/model_doc/dpr#transformers.DPRConfig"),d(x9,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraConfig"),d(k9,"href","/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(R9,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertConfig"),d(S9,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetConfig"),d(P9,"href","/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTConfig"),d($9,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelConfig"),d(I9,"href","/docs/transformers/pr_15781/en/model_doc/glpn#transformers.GLPNConfig"),d(N9,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Config"),d(D9,"href","/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(j9,"href","/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJConfig"),d(q9,"href","/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertConfig"),d(G9,"href","/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertConfig"),d(O9,"href","/docs/transformers/pr_15781/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(X9,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(V9,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(z9,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDConfig"),d(W9,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerConfig"),d(Q9,"href","/docs/transformers/pr_15781/en/model_doc/luke#transformers.LukeConfig"),d(H9,"href","/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertConfig"),d(U9,"href","/docs/transformers/pr_15781/en/model_doc/m2m_100#transformers.M2M100Config"),d(J9,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianConfig"),d(Y9,"href","/docs/transformers/pr_15781/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(K9,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartConfig"),d(Z9,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(eB,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(oB,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetConfig"),d(rB,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Config"),d(tB,"href","/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(aB,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(nB,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusConfig"),d(sB,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverConfig"),d(lB,"href","/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartConfig"),d(iB,"href","/docs/transformers/pr_15781/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(dB,"href","/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(cB,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(fB,"href","/docs/transformers/pr_15781/en/model_doc/rag#transformers.RagConfig"),d(mB,"href","/docs/transformers/pr_15781/en/model_doc/realm#transformers.RealmConfig"),d(gB,"href","/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerConfig"),d(hB,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertConfig"),d(pB,"href","/docs/transformers/pr_15781/en/model_doc/resnet#transformers.ResNetConfig"),d(_B,"href","/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertConfig"),d(uB,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaConfig"),d(bB,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerConfig"),d(vB,"href","/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerConfig"),d(TB,"href","/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWConfig"),d(FB,"href","/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDConfig"),d(CB,"href","/docs/transformers/pr_15781/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(MB,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(EB,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(yB,"href","/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterConfig"),d(wB,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(AB,"href","/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinConfig"),d(LB,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Config"),d(BB,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasConfig"),d(xB,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(kB,"href","/docs/transformers/pr_15781/en/model_doc/trocr#transformers.TrOCRConfig"),d(RB,"href","/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(SB,"href","/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(PB,"href","/docs/transformers/pr_15781/en/model_doc/van#transformers.VanConfig"),d($B,"href","/docs/transformers/pr_15781/en/model_doc/vilt#transformers.ViltConfig"),d(IB,"href","/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(NB,"href","/docs/transformers/pr_15781/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(DB,"href","/docs/transformers/pr_15781/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(jB,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTConfig"),d(qB,"href","/docs/transformers/pr_15781/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(GB,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(OB,"href","/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMConfig"),d(XB,"href","/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMConfig"),d(VB,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMConfig"),d(zB,"href","/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(WB,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(QB,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(HB,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetConfig"),d(UB,"href","/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Pg,"class","docstring"),d(Wo,"class","docstring"),d($g,"id","transformers.AutoTokenizer"),d($g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($g,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(JB,"href","/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(YB,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertTokenizer"),d(KB,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ZB,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartTokenizer"),d(ex,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartTokenizerFast"),d(ox,"href","/docs/transformers/pr_15781/en/model_doc/barthez#transformers.BarthezTokenizer"),d(rx,"href","/docs/transformers/pr_15781/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(tx,"href","/docs/transformers/pr_15781/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(ax,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertTokenizer"),d(nx,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertTokenizerFast"),d(sx,"href","/docs/transformers/pr_15781/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(lx,"href","/docs/transformers/pr_15781/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(ix,"href","/docs/transformers/pr_15781/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(dx,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(cx,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(fx,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(mx,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(gx,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(hx,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(px,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(_x,"href","/docs/transformers/pr_15781/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(ux,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertTokenizer"),d(bx,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(vx,"href","/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineTokenizer"),d(Tx,"href","/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPTokenizer"),d(Fx,"href","/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Cx,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Mx,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Ex,"href","/docs/transformers/pr_15781/en/model_doc/cpm#transformers.CpmTokenizer"),d(yx,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(wx,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Ax,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Lx,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Bx,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(xx,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(kx,"href","/docs/transformers/pr_15781/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Rx,"href","/docs/transformers/pr_15781/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Sx,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraTokenizer"),d(Px,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraTokenizerFast"),d($x,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Ix,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetTokenizer"),d(Nx,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Dx,"href","/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(jx,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelTokenizer"),d(qx,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Gx,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Ox,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Xx,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Vx,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(zx,"href","/docs/transformers/pr_15781/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Wx,"href","/docs/transformers/pr_15781/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Qx,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Hx,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Ux,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Jx,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Yx,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Kx,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Zx,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ek,"href","/docs/transformers/pr_15781/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(ok,"href","/docs/transformers/pr_15781/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(rk,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDTokenizer"),d(tk,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDTokenizerFast"),d(ak,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerTokenizer"),d(nk,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(sk,"href","/docs/transformers/pr_15781/en/model_doc/luke#transformers.LukeTokenizer"),d(lk,"href","/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(ik,"href","/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(dk,"href","/docs/transformers/pr_15781/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(ck,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianTokenizer"),d(fk,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartTokenizer"),d(mk,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(gk,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(hk,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(pk,"href","/docs/transformers/pr_15781/en/model_doc/mluke#transformers.MLukeTokenizer"),d(_k,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(uk,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(bk,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(vk,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(Tk,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.T5Tokenizer"),d(Fk,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Ck,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(Mk,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Ek,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(yk,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(wk,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Ak,"href","/docs/transformers/pr_15781/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Lk,"href","/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartTokenizer"),d(Bk,"href","/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(xk,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertTokenizer"),d(kk,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertTokenizerFast"),d(Rk,"href","/docs/transformers/pr_15781/en/model_doc/rag#transformers.RagTokenizer"),d(Sk,"href","/docs/transformers/pr_15781/en/model_doc/realm#transformers.RealmTokenizer"),d(Pk,"href","/docs/transformers/pr_15781/en/model_doc/realm#transformers.RealmTokenizerFast"),d($k,"href","/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Ik,"href","/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Nk,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Dk,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(jk,"href","/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(qk,"href","/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Gk,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaTokenizer"),d(Ok,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Xk,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(Vk,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(zk,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Wk,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Qk,"href","/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Hk,"href","/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(Uk,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Jk,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Yk,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.T5Tokenizer"),d(Kk,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Zk,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasTokenizer"),d(eR,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(oR,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(rR,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(tR,"href","/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMTokenizer"),d(aR,"href","/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(nR,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMTokenizer"),d(sR,"href","/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(lR,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(iR,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(dR,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(cR,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(fh,"class","docstring"),d(Qo,"class","docstring"),d(mh,"id","transformers.AutoFeatureExtractor"),d(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mh,"href","#transformers.AutoFeatureExtractor"),d(Qi,"class","relative group"),d(fR,"href","/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(mR,"href","/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(gR,"href","/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(hR,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(pR,"href","/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(_R,"href","/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(uR,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(bR,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(vR,"href","/docs/transformers/pr_15781/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(TR,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(FR,"href","/docs/transformers/pr_15781/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(CR,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(MR,"href","/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(ER,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(yR,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(wR,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(AR,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(LR,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(BR,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Rh,"class","docstring"),d(Ho,"class","docstring"),d(Sh,"id","transformers.AutoProcessor"),d(Sh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sh,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(xR,"href","/docs/transformers/pr_15781/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(kR,"href","/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPProcessor"),d(RR,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(SR,"href","/docs/transformers/pr_15781/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(PR,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d($R,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(IR,"href","/docs/transformers/pr_15781/en/model_doc/trocr#transformers.TrOCRProcessor"),d(NR,"href","/docs/transformers/pr_15781/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(DR,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Xh,"class","docstring"),d(Uo,"class","docstring"),d(Vh,"id","transformers.AutoModel"),d(Vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(Vr,"class","docstring"),d(jR,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertModel"),d(qR,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartModel"),d(GR,"href","/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitModel"),d(OR,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertModel"),d(XR,"href","/docs/transformers/pr_15781/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(VR,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdModel"),d(zR,"href","/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(WR,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(QR,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(HR,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertModel"),d(UR,"href","/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineModel"),d(JR,"href","/docs/transformers/pr_15781/en/model_doc/clip#transformers.CLIPModel"),d(YR,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertModel"),d(KR,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextModel"),d(ZR,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLModel"),d(eS,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(oS,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(rS,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaModel"),d(tS,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(aS,"href","/docs/transformers/pr_15781/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(nS,"href","/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTModel"),d(sS,"href","/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrModel"),d(lS,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertModel"),d(iS,"href","/docs/transformers/pr_15781/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(dS,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraModel"),d(cS,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertModel"),d(fS,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetModel"),d(mS,"href","/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTModel"),d(gS,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelModel"),d(hS,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelBaseModel"),d(pS,"href","/docs/transformers/pr_15781/en/model_doc/glpn#transformers.GLPNModel"),d(_S,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2Model"),d(uS,"href","/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(bS,"href","/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJModel"),d(vS,"href","/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertModel"),d(TS,"href","/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertModel"),d(FS,"href","/docs/transformers/pr_15781/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(CS,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(MS,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(ES,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDModel"),d(yS,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerModel"),d(wS,"href","/docs/transformers/pr_15781/en/model_doc/luke#transformers.LukeModel"),d(AS,"href","/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertModel"),d(LS,"href","/docs/transformers/pr_15781/en/model_doc/m2m_100#transformers.M2M100Model"),d(BS,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianModel"),d(xS,"href","/docs/transformers/pr_15781/en/model_doc/maskformer#transformers.MaskFormerModel"),d(kS,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartModel"),d(RS,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(SS,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertModel"),d(PS,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetModel"),d($S,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5Model"),d(IS,"href","/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerModel"),d(NS,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(DS,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusModel"),d(jS,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverModel"),d(qS,"href","/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartModel"),d(GS,"href","/docs/transformers/pr_15781/en/model_doc/poolformer#transformers.PoolFormerModel"),d(OS,"href","/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(XS,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertModel"),d(VS,"href","/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerModel"),d(zS,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertModel"),d(WS,"href","/docs/transformers/pr_15781/en/model_doc/resnet#transformers.ResNetModel"),d(QS,"href","/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertModel"),d(HS,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaModel"),d(US,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerModel"),d(JS,"href","/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerModel"),d(YS,"href","/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWModel"),d(KS,"href","/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDModel"),d(ZS,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(eP,"href","/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterModel"),d(oP,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(rP,"href","/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinModel"),d(tP,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5Model"),d(aP,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasModel"),d(nP,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(sP,"href","/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechModel"),d(lP,"href","/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(iP,"href","/docs/transformers/pr_15781/en/model_doc/van#transformers.VanModel"),d(dP,"href","/docs/transformers/pr_15781/en/model_doc/vilt#transformers.ViltModel"),d(cP,"href","/docs/transformers/pr_15781/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(fP,"href","/docs/transformers/pr_15781/en/model_doc/visual_bert#transformers.VisualBertModel"),d(mP,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTModel"),d(gP,"href","/docs/transformers/pr_15781/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(hP,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(pP,"href","/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMModel"),d(_P,"href","/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMModel"),d(uP,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMModel"),d(bP,"href","/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(vP,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(TP,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(FP,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetModel"),d(CP,"href","/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring"),d(Jo,"class","docstring"),d(L_,"id","transformers.AutoModelForPreTraining"),d(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(zr,"class","docstring"),d(MP,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForPreTraining"),d(EP,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(yP,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForPreTraining"),d(wP,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(AP,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(LP,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(BP,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(xP,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(kP,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(RP,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(SP,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForPreTraining"),d(PP,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d($P,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForPreTraining"),d(IP,"href","/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(NP,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(DP,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(jP,"href","/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(qP,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(GP,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(OP,"href","/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(XP,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(VP,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(zP,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(WP,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(QP,"href","/docs/transformers/pr_15781/en/model_doc/retribert#transformers.RetriBertModel"),d(HP,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(UP,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(JP,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(YP,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(KP,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(ZP,"href","/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(e$,"href","/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(o$,"href","/docs/transformers/pr_15781/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(r$,"href","/docs/transformers/pr_15781/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(t$,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(a$,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(n$,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(s$,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(l$,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(pu,"id","transformers.AutoModelForCausalLM"),d(pu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(Wr,"class","docstring"),d(i$,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForCausalLM"),d(d$,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertLMHeadModel"),d(c$,"href","/docs/transformers/pr_15781/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(f$,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(m$,"href","/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(g$,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(h$,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(p$,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(_$,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(u$,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(b$,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForCausalLM"),d(v$,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(T$,"href","/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(F$,"href","/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(C$,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianForCausalLM"),d(M$,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForCausalLM"),d(E$,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(y$,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(w$,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(A$,"href","/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(L$,"href","/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(B$,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(x$,"href","/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(k$,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(R$,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(S$,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(P$,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d($$,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(I$,"href","/docs/transformers/pr_15781/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(N$,"href","/docs/transformers/pr_15781/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(D$,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(j$,"href","/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(q$,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(G$,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(O$,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(Ku,"id","transformers.AutoModelForMaskedLM"),d(Ku,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ku,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(Qr,"class","docstring"),d(X$,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(V$,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(z$,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForMaskedLM"),d(W$,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(Q$,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(H$,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(U$,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(J$,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(Y$,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(K$,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(Z$,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(eI,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(oI,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(rI,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(tI,"href","/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(aI,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(nI,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(sI,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(lI,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(iI,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(dI,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(cI,"href","/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(fI,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(mI,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(gI,"href","/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(hI,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(pI,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(_I,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(uI,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(bI,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(vI,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(TI,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(FI,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(CI,"href","/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(qe,"class","docstring"),d(Zo,"class","docstring"),d($1,"id","transformers.AutoModelForSeq2SeqLM"),d($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(Hr,"class","docstring"),d(MI,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(EI,"href","/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(yI,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(wI,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(AI,"href","/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(LI,"href","/docs/transformers/pr_15781/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_15781/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.MarianMTModel"),d(RI,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(PI,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d($I,"href","/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(II,"href","/docs/transformers/pr_15781/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(NI,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(DI,"href","/docs/transformers/pr_15781/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(Z1,"id","transformers.AutoModelForSequenceClassification"),d(Z1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z1,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Ur,"class","docstring"),d(jI,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(qI,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForSequenceClassification"),d(GI,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForSequenceClassification"),d(OI,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(XI,"href","/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(VI,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(zI,"href","/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(WI,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(QI,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(HI,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(UI,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(JI,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(YI,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(KI,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(oN,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(rN,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(tN,"href","/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(aN,"href","/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(nN,"href","/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(sN,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(lN,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(iN,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDForSequenceClassification"),d(dN,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(cN,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(fN,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(gN,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(hN,"href","/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(pN,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(_N,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(uN,"href","/docs/transformers/pr_15781/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(bN,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(vN,"href","/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(TN,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(FN,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(CN,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(MN,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(EN,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(yN,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(wN,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(AN,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(LN,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(BN,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(xN,"href","/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(Qb,"id","transformers.AutoModelForMultipleChoice"),d(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qb,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(Jr,"class","docstring"),d(kN,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(PN,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d($N,"href","/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(IN,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(DN,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(qN,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(ON,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(XN,"href","/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(VN,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(zN,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(HN,"href","/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(UN,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(KN,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(eD,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(oD,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(rD,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(tD,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(aD,"href","/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring"),d(rr,"class","docstring"),d(M5,"id","transformers.AutoModelForNextSentencePrediction"),d(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M5,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(Yr,"class","docstring"),d(nD,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(sD,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(iD,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(dD,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Ve,"class","docstring"),d(tr,"class","docstring"),d(x5,"id","transformers.AutoModelForTokenClassification"),d(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x5,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(Kr,"class","docstring"),d(cD,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(fD,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForTokenClassification"),d(mD,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(gD,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(hD,"href","/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineForTokenClassification"),d(pD,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(_D,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(uD,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(bD,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(vD,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(TD,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(FD,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(CD,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(MD,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(ED,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(yD,"href","/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(wD,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(AD,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(LD,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(BD,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(xD,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(kD,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(RD,"href","/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(SD,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(PD,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d($D,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(ID,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(ND,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(DD,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(jD,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(qD,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(GD,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(OD,"href","/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(f2,"id","transformers.AutoModelForQuestionAnswering"),d(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f2,"href","#transformers.AutoModelForQuestionAnswering"),d(Md,"class","relative group"),d(Zr,"class","docstring"),d(XD,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_15781/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(UD,"href","/docs/transformers/pr_15781/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(ej,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(oj,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(rj,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(tj,"href","/docs/transformers/pr_15781/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(aj,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(nj,"href","/docs/transformers/pr_15781/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(sj,"href","/docs/transformers/pr_15781/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(lj,"href","/docs/transformers/pr_15781/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(ij,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(dj,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(cj,"href","/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(fj,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(mj,"href","/docs/transformers/pr_15781/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(gj,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(hj,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(pj,"href","/docs/transformers/pr_15781/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(_j,"href","/docs/transformers/pr_15781/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(uj,"href","/docs/transformers/pr_15781/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(bj,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(vj,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(Tj,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(Fj,"href","/docs/transformers/pr_15781/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(Cj,"href","/docs/transformers/pr_15781/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(Mj,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(Ej,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(yj,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(wj,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(Aj,"href","/docs/transformers/pr_15781/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring"),d(nr,"class","docstring"),d(K2,"id","transformers.AutoModelForTableQuestionAnswering"),d(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(wd,"class","relative group"),d(et,"class","docstring"),d(Lj,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(Qe,"class","docstring"),d(sr,"class","docstring"),d(ov,"id","transformers.AutoModelForImageClassification"),d(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ov,"href","#transformers.AutoModelForImageClassification"),d(Bd,"class","relative group"),d(ot,"class","docstring"),d(Bj,"href","/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitForImageClassification"),d(xj,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(kj,"href","/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTForImageClassification"),d(Rj,"href","/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(Sj,"href","/docs/transformers/pr_15781/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(Pj,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d($j,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(Ij,"href","/docs/transformers/pr_15781/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(Nj,"href","/docs/transformers/pr_15781/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(Dj,"href","/docs/transformers/pr_15781/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(jj,"href","/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(qj,"href","/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinForImageClassification"),d(Gj,"href","/docs/transformers/pr_15781/en/model_doc/van#transformers.VanForImageClassification"),d(Oj,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(mv,"id","transformers.AutoModelForVision2Seq"),d(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mv,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(rt,"class","docstring"),d(Xj,"href","/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(pv,"id","transformers.AutoModelForAudioClassification"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(tt,"class","docstring"),d(Vj,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(zj,"href","/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(Wj,"href","/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(Qj,"href","/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(Hj,"href","/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(Uj,"href","/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(Jj,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(Yj,"href","/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(yv,"id","transformers.AutoModelForAudioFrameClassification"),d(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yv,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(at,"class","docstring"),d(Kj,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(Zj,"href","/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(eq,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(oq,"href","/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(kv,"id","transformers.AutoModelForCTC"),d(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kv,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nt,"class","docstring"),d(rq,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(tq,"href","/docs/transformers/pr_15781/en/model_doc/hubert#transformers.HubertForCTC"),d(aq,"href","/docs/transformers/pr_15781/en/model_doc/sew#transformers.SEWForCTC"),d(nq,"href","/docs/transformers/pr_15781/en/model_doc/sew-d#transformers.SEWDForCTC"),d(sq,"href","/docs/transformers/pr_15781/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(lq,"href","/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(iq,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(dq,"href","/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(Gv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Vd,"class","relative group"),d(st,"class","docstring"),d(cq,"href","/docs/transformers/pr_15781/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(fq,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(zv,"id","transformers.AutoModelForAudioXVector"),d(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zv,"href","#transformers.AutoModelForAudioXVector"),d(Qd,"class","relative group"),d(lt,"class","docstring"),d(mq,"href","/docs/transformers/pr_15781/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(gq,"href","/docs/transformers/pr_15781/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(hq,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(pq,"href","/docs/transformers/pr_15781/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(Yv,"id","transformers.AutoModelForMaskedImageModeling"),d(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(it,"class","docstring"),d(_q,"href","/docs/transformers/pr_15781/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(uq,"href","/docs/transformers/pr_15781/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(bq,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(rT,"id","transformers.AutoModelForObjectDetection"),d(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rT,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(dt,"class","docstring"),d(vq,"href","/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(nT,"id","transformers.AutoModelForImageSegmentation"),d(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nT,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(ct,"class","docstring"),d(Tq,"href","/docs/transformers/pr_15781/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(iT,"id","transformers.AutoModelForSemanticSegmentation"),d(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iT,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(ft,"class","docstring"),d(Fq,"href","/docs/transformers/pr_15781/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(Cq,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.ConvNextForSemanticSegmentation"),d(Mq,"href","/docs/transformers/pr_15781/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(gT,"id","transformers.AutoModelForInstanceSegmentation"),d(gT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gT,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(Eq,"href","/docs/transformers/pr_15781/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(_T,"id","transformers.TFAutoModel"),d(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_T,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(yq,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertModel"),d(wq,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.TFBartModel"),d(Aq,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertModel"),d(Lq,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Bq,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(xq,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertModel"),d(kq,"href","/docs/transformers/pr_15781/en/model_doc/clip#transformers.TFCLIPModel"),d(Rq,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertModel"),d(Sq,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.TFConvNextModel"),d(Pq,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.TFCTRLModel"),d($q,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaModel"),d(Iq,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(Nq,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Dq,"href","/docs/transformers/pr_15781/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(jq,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraModel"),d(qq,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(Gq,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelModel"),d(Oq,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Xq,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.TFGPT2Model"),d(Vq,"href","/docs/transformers/pr_15781/en/model_doc/hubert#transformers.TFHubertModel"),d(zq,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(Wq,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.TFLEDModel"),d(Qq,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerModel"),d(Hq,"href","/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Uq,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.TFMarianModel"),d(Jq,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.TFMBartModel"),d(Yq,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Kq,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Zq,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.TFMT5Model"),d(eG,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(oG,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.TFPegasusModel"),d(rG,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertModel"),d(tG,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaModel"),d(aG,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerModel"),d(nG,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(sG,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.TFT5Model"),d(lG,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasModel"),d(iG,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(dG,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.TFViTModel"),d(cG,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(fG,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMModel"),d(mG,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(gG,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(a7,"id","transformers.TFAutoModelForPreTraining"),d(a7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a7,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(hG,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(pG,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(_G,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForPreTraining"),d(uG,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(bG,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(vG,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(TG,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(FG,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(CG,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(MG,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(EG,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(yG,"href","/docs/transformers/pr_15781/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(wG,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(AG,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(LG,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(BG,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(xG,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(kG,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(RG,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(SG,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(PG,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d($G,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(A7,"id","transformers.TFAutoModelForCausalLM"),d(A7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A7,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(IG,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(NG,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(DG,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(jG,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(qG,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(GG,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(OG,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(XG,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(VG,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(zG,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(WG,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d(j7,"id","transformers.TFAutoModelForImageClassification"),d(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j7,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(QG,"href","/docs/transformers/pr_15781/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(HG,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(O7,"id","transformers.TFAutoModelForMaskedLM"),d(O7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O7,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(UG,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(JG,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(YG,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(KG,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(ZG,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(eO,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(oO,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(rO,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(tO,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(aO,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(nO,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(sO,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(lO,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(iO,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(dO,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(cO,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(fO,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(mO,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(gO,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(hO,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(d8,"id","transformers.TFAutoModelForSeq2SeqLM"),d(d8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d8,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(pO,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(_O,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(uO,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(bO,"href","/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(vO,"href","/docs/transformers/pr_15781/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(TO,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.TFMarianMTModel"),d(FO,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(CO,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(MO,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(EO,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(T8,"id","transformers.TFAutoModelForSequenceClassification"),d(T8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T8,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(yO,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(wO,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(AO,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(LO,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(BO,"href","/docs/transformers/pr_15781/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(xO,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(kO,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(RO,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(SO,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(PO,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d($O,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(IO,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(NO,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(DO,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(jO,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(qO,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(GO,"href","/docs/transformers/pr_15781/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(OO,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(XO,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(VO,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(zO,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(WO,"href","/docs/transformers/pr_15781/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(QO,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(HO,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(UO,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(W8,"id","transformers.TFAutoModelForMultipleChoice"),d(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W8,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(JO,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(YO,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(KO,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(ZO,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(eX,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(oX,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(rX,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(tX,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(aX,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(nX,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(sX,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(lX,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(iX,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(dX,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(cX,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(fX,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(mX,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(cF,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Ft,"class","docstring"),d(gX,"href","/docs/transformers/pr_15781/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(mF,"id","transformers.TFAutoModelForTokenClassification"),d(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mF,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(hX,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(pX,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(_X,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(uX,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(bX,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(vX,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(TX,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(FX,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(CX,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(MX,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(EX,"href","/docs/transformers/pr_15781/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(yX,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(wX,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(AX,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(LX,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(BX,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(xX,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(kX,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(RX,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(SX,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(SF,"id","transformers.TFAutoModelForQuestionAnswering"),d(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SF,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(PX,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d($X,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(IX,"href","/docs/transformers/pr_15781/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(NX,"href","/docs/transformers/pr_15781/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(DX,"href","/docs/transformers/pr_15781/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(jX,"href","/docs/transformers/pr_15781/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(GX,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(OX,"href","/docs/transformers/pr_15781/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(XX,"href","/docs/transformers/pr_15781/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_15781/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(zX,"href","/docs/transformers/pr_15781/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_15781/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(QX,"href","/docs/transformers/pr_15781/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(HX,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(UX,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(JX,"href","/docs/transformers/pr_15781/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(YX,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(KX,"href","/docs/transformers/pr_15781/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(ZF,"id","transformers.TFAutoModelForVision2Seq"),d(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZF,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(ZX,"href","/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(oC,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oC,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(eV,"href","/docs/transformers/pr_15781/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(tC,"id","transformers.FlaxAutoModel"),d(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tC,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(oV,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertModel"),d(rV,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartModel"),d(tV,"href","/docs/transformers/pr_15781/en/model_doc/beit#transformers.FlaxBeitModel"),d(aV,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertModel"),d(nV,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(sV,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(lV,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(iV,"href","/docs/transformers/pr_15781/en/model_doc/clip#transformers.FlaxCLIPModel"),d(dV,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(cV,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraModel"),d(fV,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(mV,"href","/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(gV,"href","/docs/transformers/pr_15781/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(hV,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.FlaxMarianModel"),d(pV,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartModel"),d(_V,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.FlaxMT5Model"),d(uV,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(bV,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(vV,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(TV,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.FlaxT5Model"),d(FV,"href","/docs/transformers/pr_15781/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(CV,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.FlaxViTModel"),d(MV,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(EV,"href","/docs/transformers/pr_15781/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(yV,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(BC,"id","transformers.FlaxAutoModelForCausalLM"),d(BC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BC,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(wV,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(AV,"href","/docs/transformers/pr_15781/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(LV,"href","/docs/transformers/pr_15781/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(BV,"href","/docs/transformers/pr_15781/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(xV,"href","/docs/transformers/pr_15781/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d($C,"id","transformers.FlaxAutoModelForPreTraining"),d($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($C,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(kV,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(RV,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(SV,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(PV,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d($V,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(IV,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(NV,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(DV,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(jV,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(qV,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_15781/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(OV,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(HC,"id","transformers.FlaxAutoModelForMaskedLM"),d(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HC,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(XV,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(VV,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(zV,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(WV,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(QV,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(HV,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(UV,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(YV,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(KV,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(nM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(ZV,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(ez,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(oz,"href","/docs/transformers/pr_15781/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(rz,"href","/docs/transformers/pr_15781/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(tz,"href","/docs/transformers/pr_15781/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(az,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(nz,"href","/docs/transformers/pr_15781/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(sz,"href","/docs/transformers/pr_15781/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(lz,"href","/docs/transformers/pr_15781/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(pM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(iz,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(dz,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(cz,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(mz,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(gz,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(hz,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(pz,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(_z,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(uz,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(wM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(wM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(bz,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(vz,"href","/docs/transformers/pr_15781/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(Tz,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(Fz,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(Cz,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(Mz,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(Ez,"href","/docs/transformers/pr_15781/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(yz,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(wz,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Az,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(Dr,"class","docstring"),d(NM,"id","transformers.FlaxAutoModelForTokenClassification"),d(NM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(Lz,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Bz,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(xz,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(kz,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(Rz,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Sz,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Pz,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d($z,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(WM,"id","transformers.FlaxAutoModelForMultipleChoice"),d(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WM,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(Iz,"href","/docs/transformers/pr_15781/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_15781/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(jz,"href","/docs/transformers/pr_15781/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_15781/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_15781/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_15781/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_15781/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(o4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(Vz,"href","/docs/transformers/pr_15781/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(t4,"id","transformers.FlaxAutoModelForImageClassification"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(zz,"href","/docs/transformers/pr_15781/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(Wz,"href","/docs/transformers/pr_15781/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(s4,"id","transformers.FlaxAutoModelForVision2Seq"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(Nt,"class","docstring"),d(Qz,"href","/docs/transformers/pr_15781/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(Do,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,K),b(c,io,u),b(c,de,u),e(de,Ee),e(Ee,lo),g(fe,lo,null),e(de,Ce),e(de,Vo),e(Vo,Ii),b(c,Nf,u),b(c,fa,u),e(fa,Ni),e(fa,Di),e(Di,lE),e(fa,Df),b(c,Be,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,iE),e(co,On),e(co,Xn),e(Xn,dE),e(co,qi),e(co,Vn),e(Vn,cE),e(co,Gi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,pe,u),e(pe,ZL),e(pe,Oi),e(Oi,e9),e(pe,o9),b(c,zo,u),b(c,Ga,u),e(Ga,r9),e(Ga,qf),e(qf,t9),e(Ga,b$e),b(c,nke,u),b(c,Xi,u),e(Xi,Gf),e(Gf,GQ),g(fE,GQ,null),e(Xi,v$e),e(Xi,OQ),e(OQ,T$e),b(c,ske,u),b(c,zn,u),e(zn,F$e),e(zn,XQ),e(XQ,C$e),e(zn,M$e),e(zn,VQ),e(VQ,E$e),e(zn,y$e),b(c,lke,u),g(mE,c,u),b(c,ike,u),b(c,a9,u),e(a9,w$e),b(c,dke,u),g(Of,c,u),b(c,cke,u),b(c,Vi,u),e(Vi,Xf),e(Xf,zQ),g(gE,zQ,null),e(Vi,A$e),e(Vi,WQ),e(WQ,L$e),b(c,fke,u),b(c,Wo,u),g(hE,Wo,null),e(Wo,B$e),e(Wo,pE),e(pE,x$e),e(pE,n9),e(n9,k$e),e(pE,R$e),e(Wo,S$e),e(Wo,_E),e(_E,P$e),e(_E,QQ),e(QQ,$$e),e(_E,I$e),e(Wo,N$e),e(Wo,mo),g(uE,mo,null),e(mo,D$e),e(mo,HQ),e(HQ,j$e),e(mo,q$e),e(mo,zi),e(zi,G$e),e(zi,UQ),e(UQ,O$e),e(zi,X$e),e(zi,JQ),e(JQ,V$e),e(zi,z$e),e(mo,W$e),e(mo,v),e(v,Vf),e(Vf,YQ),e(YQ,Q$e),e(Vf,H$e),e(Vf,s9),e(s9,U$e),e(Vf,J$e),e(v,Y$e),e(v,zf),e(zf,KQ),e(KQ,K$e),e(zf,Z$e),e(zf,l9),e(l9,eIe),e(zf,oIe),e(v,rIe),e(v,Wf),e(Wf,ZQ),e(ZQ,tIe),e(Wf,aIe),e(Wf,i9),e(i9,nIe),e(Wf,sIe),e(v,lIe),e(v,Qf),e(Qf,eH),e(eH,iIe),e(Qf,dIe),e(Qf,d9),e(d9,cIe),e(Qf,fIe),e(v,mIe),e(v,Hf),e(Hf,oH),e(oH,gIe),e(Hf,hIe),e(Hf,c9),e(c9,pIe),e(Hf,_Ie),e(v,uIe),e(v,Uf),e(Uf,rH),e(rH,bIe),e(Uf,vIe),e(Uf,f9),e(f9,TIe),e(Uf,FIe),e(v,CIe),e(v,Jf),e(Jf,tH),e(tH,MIe),e(Jf,EIe),e(Jf,m9),e(m9,yIe),e(Jf,wIe),e(v,AIe),e(v,Yf),e(Yf,aH),e(aH,LIe),e(Yf,BIe),e(Yf,g9),e(g9,xIe),e(Yf,kIe),e(v,RIe),e(v,Kf),e(Kf,nH),e(nH,SIe),e(Kf,PIe),e(Kf,h9),e(h9,$Ie),e(Kf,IIe),e(v,NIe),e(v,Zf),e(Zf,sH),e(sH,DIe),e(Zf,jIe),e(Zf,p9),e(p9,qIe),e(Zf,GIe),e(v,OIe),e(v,em),e(em,lH),e(lH,XIe),e(em,VIe),e(em,_9),e(_9,zIe),e(em,WIe),e(v,QIe),e(v,om),e(om,iH),e(iH,HIe),e(om,UIe),e(om,u9),e(u9,JIe),e(om,YIe),e(v,KIe),e(v,rm),e(rm,dH),e(dH,ZIe),e(rm,eNe),e(rm,b9),e(b9,oNe),e(rm,rNe),e(v,tNe),e(v,tm),e(tm,cH),e(cH,aNe),e(tm,nNe),e(tm,v9),e(v9,sNe),e(tm,lNe),e(v,iNe),e(v,am),e(am,fH),e(fH,dNe),e(am,cNe),e(am,T9),e(T9,fNe),e(am,mNe),e(v,gNe),e(v,nm),e(nm,mH),e(mH,hNe),e(nm,pNe),e(nm,F9),e(F9,_Ne),e(nm,uNe),e(v,bNe),e(v,sm),e(sm,gH),e(gH,vNe),e(sm,TNe),e(sm,C9),e(C9,FNe),e(sm,CNe),e(v,MNe),e(v,lm),e(lm,hH),e(hH,ENe),e(lm,yNe),e(lm,M9),e(M9,wNe),e(lm,ANe),e(v,LNe),e(v,im),e(im,pH),e(pH,BNe),e(im,xNe),e(im,E9),e(E9,kNe),e(im,RNe),e(v,SNe),e(v,dm),e(dm,_H),e(_H,PNe),e(dm,$Ne),e(dm,y9),e(y9,INe),e(dm,NNe),e(v,DNe),e(v,cm),e(cm,uH),e(uH,jNe),e(cm,qNe),e(cm,w9),e(w9,GNe),e(cm,ONe),e(v,XNe),e(v,fm),e(fm,bH),e(bH,VNe),e(fm,zNe),e(fm,A9),e(A9,WNe),e(fm,QNe),e(v,HNe),e(v,mm),e(mm,vH),e(vH,UNe),e(mm,JNe),e(mm,L9),e(L9,YNe),e(mm,KNe),e(v,ZNe),e(v,gm),e(gm,TH),e(TH,eDe),e(gm,oDe),e(gm,B9),e(B9,rDe),e(gm,tDe),e(v,aDe),e(v,hm),e(hm,FH),e(FH,nDe),e(hm,sDe),e(hm,x9),e(x9,lDe),e(hm,iDe),e(v,dDe),e(v,pm),e(pm,CH),e(CH,cDe),e(pm,fDe),e(pm,k9),e(k9,mDe),e(pm,gDe),e(v,hDe),e(v,_m),e(_m,MH),e(MH,pDe),e(_m,_De),e(_m,R9),e(R9,uDe),e(_m,bDe),e(v,vDe),e(v,um),e(um,EH),e(EH,TDe),e(um,FDe),e(um,S9),e(S9,CDe),e(um,MDe),e(v,EDe),e(v,bm),e(bm,yH),e(yH,yDe),e(bm,wDe),e(bm,P9),e(P9,ADe),e(bm,LDe),e(v,BDe),e(v,vm),e(vm,wH),e(wH,xDe),e(vm,kDe),e(vm,$9),e($9,RDe),e(vm,SDe),e(v,PDe),e(v,Tm),e(Tm,AH),e(AH,$De),e(Tm,IDe),e(Tm,I9),e(I9,NDe),e(Tm,DDe),e(v,jDe),e(v,Fm),e(Fm,LH),e(LH,qDe),e(Fm,GDe),e(Fm,N9),e(N9,ODe),e(Fm,XDe),e(v,VDe),e(v,Cm),e(Cm,BH),e(BH,zDe),e(Cm,WDe),e(Cm,D9),e(D9,QDe),e(Cm,HDe),e(v,UDe),e(v,Mm),e(Mm,xH),e(xH,JDe),e(Mm,YDe),e(Mm,j9),e(j9,KDe),e(Mm,ZDe),e(v,eje),e(v,Em),e(Em,kH),e(kH,oje),e(Em,rje),e(Em,q9),e(q9,tje),e(Em,aje),e(v,nje),e(v,ym),e(ym,RH),e(RH,sje),e(ym,lje),e(ym,G9),e(G9,ije),e(ym,dje),e(v,cje),e(v,wm),e(wm,SH),e(SH,fje),e(wm,mje),e(wm,O9),e(O9,gje),e(wm,hje),e(v,pje),e(v,Am),e(Am,PH),e(PH,_je),e(Am,uje),e(Am,X9),e(X9,bje),e(Am,vje),e(v,Tje),e(v,Lm),e(Lm,$H),e($H,Fje),e(Lm,Cje),e(Lm,V9),e(V9,Mje),e(Lm,Eje),e(v,yje),e(v,Bm),e(Bm,IH),e(IH,wje),e(Bm,Aje),e(Bm,z9),e(z9,Lje),e(Bm,Bje),e(v,xje),e(v,xm),e(xm,NH),e(NH,kje),e(xm,Rje),e(xm,W9),e(W9,Sje),e(xm,Pje),e(v,$je),e(v,km),e(km,DH),e(DH,Ije),e(km,Nje),e(km,Q9),e(Q9,Dje),e(km,jje),e(v,qje),e(v,Rm),e(Rm,jH),e(jH,Gje),e(Rm,Oje),e(Rm,H9),e(H9,Xje),e(Rm,Vje),e(v,zje),e(v,Sm),e(Sm,qH),e(qH,Wje),e(Sm,Qje),e(Sm,U9),e(U9,Hje),e(Sm,Uje),e(v,Jje),e(v,Pm),e(Pm,GH),e(GH,Yje),e(Pm,Kje),e(Pm,J9),e(J9,Zje),e(Pm,eqe),e(v,oqe),e(v,$m),e($m,OH),e(OH,rqe),e($m,tqe),e($m,Y9),e(Y9,aqe),e($m,nqe),e(v,sqe),e(v,Im),e(Im,XH),e(XH,lqe),e(Im,iqe),e(Im,K9),e(K9,dqe),e(Im,cqe),e(v,fqe),e(v,Nm),e(Nm,VH),e(VH,mqe),e(Nm,gqe),e(Nm,Z9),e(Z9,hqe),e(Nm,pqe),e(v,_qe),e(v,Dm),e(Dm,zH),e(zH,uqe),e(Dm,bqe),e(Dm,eB),e(eB,vqe),e(Dm,Tqe),e(v,Fqe),e(v,jm),e(jm,WH),e(WH,Cqe),e(jm,Mqe),e(jm,oB),e(oB,Eqe),e(jm,yqe),e(v,wqe),e(v,qm),e(qm,QH),e(QH,Aqe),e(qm,Lqe),e(qm,rB),e(rB,Bqe),e(qm,xqe),e(v,kqe),e(v,Gm),e(Gm,HH),e(HH,Rqe),e(Gm,Sqe),e(Gm,tB),e(tB,Pqe),e(Gm,$qe),e(v,Iqe),e(v,Om),e(Om,UH),e(UH,Nqe),e(Om,Dqe),e(Om,aB),e(aB,jqe),e(Om,qqe),e(v,Gqe),e(v,Xm),e(Xm,JH),e(JH,Oqe),e(Xm,Xqe),e(Xm,nB),e(nB,Vqe),e(Xm,zqe),e(v,Wqe),e(v,Vm),e(Vm,YH),e(YH,Qqe),e(Vm,Hqe),e(Vm,sB),e(sB,Uqe),e(Vm,Jqe),e(v,Yqe),e(v,zm),e(zm,KH),e(KH,Kqe),e(zm,Zqe),e(zm,lB),e(lB,eGe),e(zm,oGe),e(v,rGe),e(v,Wm),e(Wm,ZH),e(ZH,tGe),e(Wm,aGe),e(Wm,iB),e(iB,nGe),e(Wm,sGe),e(v,lGe),e(v,Qm),e(Qm,eU),e(eU,iGe),e(Qm,dGe),e(Qm,dB),e(dB,cGe),e(Qm,fGe),e(v,mGe),e(v,Hm),e(Hm,oU),e(oU,gGe),e(Hm,hGe),e(Hm,cB),e(cB,pGe),e(Hm,_Ge),e(v,uGe),e(v,Um),e(Um,rU),e(rU,bGe),e(Um,vGe),e(Um,fB),e(fB,TGe),e(Um,FGe),e(v,CGe),e(v,Jm),e(Jm,tU),e(tU,MGe),e(Jm,EGe),e(Jm,mB),e(mB,yGe),e(Jm,wGe),e(v,AGe),e(v,Ym),e(Ym,aU),e(aU,LGe),e(Ym,BGe),e(Ym,gB),e(gB,xGe),e(Ym,kGe),e(v,RGe),e(v,Km),e(Km,nU),e(nU,SGe),e(Km,PGe),e(Km,hB),e(hB,$Ge),e(Km,IGe),e(v,NGe),e(v,Zm),e(Zm,sU),e(sU,DGe),e(Zm,jGe),e(Zm,pB),e(pB,qGe),e(Zm,GGe),e(v,OGe),e(v,eg),e(eg,lU),e(lU,XGe),e(eg,VGe),e(eg,_B),e(_B,zGe),e(eg,WGe),e(v,QGe),e(v,og),e(og,iU),e(iU,HGe),e(og,UGe),e(og,uB),e(uB,JGe),e(og,YGe),e(v,KGe),e(v,rg),e(rg,dU),e(dU,ZGe),e(rg,eOe),e(rg,bB),e(bB,oOe),e(rg,rOe),e(v,tOe),e(v,tg),e(tg,cU),e(cU,aOe),e(tg,nOe),e(tg,vB),e(vB,sOe),e(tg,lOe),e(v,iOe),e(v,ag),e(ag,fU),e(fU,dOe),e(ag,cOe),e(ag,TB),e(TB,fOe),e(ag,mOe),e(v,gOe),e(v,ng),e(ng,mU),e(mU,hOe),e(ng,pOe),e(ng,FB),e(FB,_Oe),e(ng,uOe),e(v,bOe),e(v,sg),e(sg,gU),e(gU,vOe),e(sg,TOe),e(sg,CB),e(CB,FOe),e(sg,COe),e(v,MOe),e(v,lg),e(lg,hU),e(hU,EOe),e(lg,yOe),e(lg,MB),e(MB,wOe),e(lg,AOe),e(v,LOe),e(v,ig),e(ig,pU),e(pU,BOe),e(ig,xOe),e(ig,EB),e(EB,kOe),e(ig,ROe),e(v,SOe),e(v,dg),e(dg,_U),e(_U,POe),e(dg,$Oe),e(dg,yB),e(yB,IOe),e(dg,NOe),e(v,DOe),e(v,cg),e(cg,uU),e(uU,jOe),e(cg,qOe),e(cg,wB),e(wB,GOe),e(cg,OOe),e(v,XOe),e(v,fg),e(fg,bU),e(bU,VOe),e(fg,zOe),e(fg,AB),e(AB,WOe),e(fg,QOe),e(v,HOe),e(v,mg),e(mg,vU),e(vU,UOe),e(mg,JOe),e(mg,LB),e(LB,YOe),e(mg,KOe),e(v,ZOe),e(v,gg),e(gg,TU),e(TU,eXe),e(gg,oXe),e(gg,BB),e(BB,rXe),e(gg,tXe),e(v,aXe),e(v,hg),e(hg,FU),e(FU,nXe),e(hg,sXe),e(hg,xB),e(xB,lXe),e(hg,iXe),e(v,dXe),e(v,pg),e(pg,CU),e(CU,cXe),e(pg,fXe),e(pg,kB),e(kB,mXe),e(pg,gXe),e(v,hXe),e(v,_g),e(_g,MU),e(MU,pXe),e(_g,_Xe),e(_g,RB),e(RB,uXe),e(_g,bXe),e(v,vXe),e(v,ug),e(ug,EU),e(EU,TXe),e(ug,FXe),e(ug,SB),e(SB,CXe),e(ug,MXe),e(v,EXe),e(v,bg),e(bg,yU),e(yU,yXe),e(bg,wXe),e(bg,PB),e(PB,AXe),e(bg,LXe),e(v,BXe),e(v,vg),e(vg,wU),e(wU,xXe),e(vg,kXe),e(vg,$B),e($B,RXe),e(vg,SXe),e(v,PXe),e(v,Tg),e(Tg,AU),e(AU,$Xe),e(Tg,IXe),e(Tg,IB),e(IB,NXe),e(Tg,DXe),e(v,jXe),e(v,Fg),e(Fg,LU),e(LU,qXe),e(Fg,GXe),e(Fg,NB),e(NB,OXe),e(Fg,XXe),e(v,VXe),e(v,Cg),e(Cg,BU),e(BU,zXe),e(Cg,WXe),e(Cg,DB),e(DB,QXe),e(Cg,HXe),e(v,UXe),e(v,Mg),e(Mg,xU),e(xU,JXe),e(Mg,YXe),e(Mg,jB),e(jB,KXe),e(Mg,ZXe),e(v,eVe),e(v,Eg),e(Eg,kU),e(kU,oVe),e(Eg,rVe),e(Eg,qB),e(qB,tVe),e(Eg,aVe),e(v,nVe),e(v,yg),e(yg,RU),e(RU,sVe),e(yg,lVe),e(yg,GB),e(GB,iVe),e(yg,dVe),e(v,cVe),e(v,wg),e(wg,SU),e(SU,fVe),e(wg,mVe),e(wg,OB),e(OB,gVe),e(wg,hVe),e(v,pVe),e(v,Ag),e(Ag,PU),e(PU,_Ve),e(Ag,uVe),e(Ag,XB),e(XB,bVe),e(Ag,vVe),e(v,TVe),e(v,Lg),e(Lg,$U),e($U,FVe),e(Lg,CVe),e(Lg,VB),e(VB,MVe),e(Lg,EVe),e(v,yVe),e(v,Bg),e(Bg,IU),e(IU,wVe),e(Bg,AVe),e(Bg,zB),e(zB,LVe),e(Bg,BVe),e(v,xVe),e(v,xg),e(xg,NU),e(NU,kVe),e(xg,RVe),e(xg,WB),e(WB,SVe),e(xg,PVe),e(v,$Ve),e(v,kg),e(kg,DU),e(DU,IVe),e(kg,NVe),e(kg,QB),e(QB,DVe),e(kg,jVe),e(v,qVe),e(v,Rg),e(Rg,jU),e(jU,GVe),e(Rg,OVe),e(Rg,HB),e(HB,XVe),e(Rg,VVe),e(v,zVe),e(v,Sg),e(Sg,qU),e(qU,WVe),e(Sg,QVe),e(Sg,UB),e(UB,HVe),e(Sg,UVe),e(mo,JVe),e(mo,GU),e(GU,YVe),e(mo,KVe),g(bE,mo,null),e(Wo,ZVe),e(Wo,Pg),g(vE,Pg,null),e(Pg,eze),e(Pg,OU),e(OU,oze),b(c,mke,u),b(c,Wi,u),e(Wi,$g),e($g,XU),g(TE,XU,null),e(Wi,rze),e(Wi,VU),e(VU,tze),b(c,gke,u),b(c,Qo,u),g(FE,Qo,null),e(Qo,aze),e(Qo,CE),e(CE,nze),e(CE,JB),e(JB,sze),e(CE,lze),e(Qo,ize),e(Qo,ME),e(ME,dze),e(ME,zU),e(zU,cze),e(ME,fze),e(Qo,mze),e(Qo,go),g(EE,go,null),e(go,gze),e(go,WU),e(WU,hze),e(go,pze),e(go,Oa),e(Oa,_ze),e(Oa,QU),e(QU,uze),e(Oa,bze),e(Oa,HU),e(HU,vze),e(Oa,Tze),e(Oa,UU),e(UU,Fze),e(Oa,Cze),e(go,Mze),e(go,E),e(E,Wn),e(Wn,JU),e(JU,Eze),e(Wn,yze),e(Wn,YB),e(YB,wze),e(Wn,Aze),e(Wn,KB),e(KB,Lze),e(Wn,Bze),e(E,xze),e(E,Qn),e(Qn,YU),e(YU,kze),e(Qn,Rze),e(Qn,ZB),e(ZB,Sze),e(Qn,Pze),e(Qn,ex),e(ex,$ze),e(Qn,Ize),e(E,Nze),e(E,Hn),e(Hn,KU),e(KU,Dze),e(Hn,jze),e(Hn,ox),e(ox,qze),e(Hn,Gze),e(Hn,rx),e(rx,Oze),e(Hn,Xze),e(E,Vze),e(E,Ig),e(Ig,ZU),e(ZU,zze),e(Ig,Wze),e(Ig,tx),e(tx,Qze),e(Ig,Hze),e(E,Uze),e(E,Un),e(Un,eJ),e(eJ,Jze),e(Un,Yze),e(Un,ax),e(ax,Kze),e(Un,Zze),e(Un,nx),e(nx,eWe),e(Un,oWe),e(E,rWe),e(E,Ng),e(Ng,oJ),e(oJ,tWe),e(Ng,aWe),e(Ng,sx),e(sx,nWe),e(Ng,sWe),e(E,lWe),e(E,Dg),e(Dg,rJ),e(rJ,iWe),e(Dg,dWe),e(Dg,lx),e(lx,cWe),e(Dg,fWe),e(E,mWe),e(E,jg),e(jg,tJ),e(tJ,gWe),e(jg,hWe),e(jg,ix),e(ix,pWe),e(jg,_We),e(E,uWe),e(E,Jn),e(Jn,aJ),e(aJ,bWe),e(Jn,vWe),e(Jn,dx),e(dx,TWe),e(Jn,FWe),e(Jn,cx),e(cx,CWe),e(Jn,MWe),e(E,EWe),e(E,Yn),e(Yn,nJ),e(nJ,yWe),e(Yn,wWe),e(Yn,fx),e(fx,AWe),e(Yn,LWe),e(Yn,mx),e(mx,BWe),e(Yn,xWe),e(E,kWe),e(E,Kn),e(Kn,sJ),e(sJ,RWe),e(Kn,SWe),e(Kn,gx),e(gx,PWe),e(Kn,$We),e(Kn,hx),e(hx,IWe),e(Kn,NWe),e(E,DWe),e(E,qg),e(qg,lJ),e(lJ,jWe),e(qg,qWe),e(qg,px),e(px,GWe),e(qg,OWe),e(E,XWe),e(E,Gg),e(Gg,iJ),e(iJ,VWe),e(Gg,zWe),e(Gg,_x),e(_x,WWe),e(Gg,QWe),e(E,HWe),e(E,Zn),e(Zn,dJ),e(dJ,UWe),e(Zn,JWe),e(Zn,ux),e(ux,YWe),e(Zn,KWe),e(Zn,bx),e(bx,ZWe),e(Zn,eQe),e(E,oQe),e(E,Og),e(Og,cJ),e(cJ,rQe),e(Og,tQe),e(Og,vx),e(vx,aQe),e(Og,nQe),e(E,sQe),e(E,es),e(es,fJ),e(fJ,lQe),e(es,iQe),e(es,Tx),e(Tx,dQe),e(es,cQe),e(es,Fx),e(Fx,fQe),e(es,mQe),e(E,gQe),e(E,os),e(os,mJ),e(mJ,hQe),e(os,pQe),e(os,Cx),e(Cx,_Qe),e(os,uQe),e(os,Mx),e(Mx,bQe),e(os,vQe),e(E,TQe),e(E,rs),e(rs,gJ),e(gJ,FQe),e(rs,CQe),e(rs,Ex),e(Ex,MQe),e(rs,EQe),e(rs,hJ),e(hJ,yQe),e(rs,wQe),e(E,AQe),e(E,Xg),e(Xg,pJ),e(pJ,LQe),e(Xg,BQe),e(Xg,yx),e(yx,xQe),e(Xg,kQe),e(E,RQe),e(E,ts),e(ts,_J),e(_J,SQe),e(ts,PQe),e(ts,wx),e(wx,$Qe),e(ts,IQe),e(ts,Ax),e(Ax,NQe),e(ts,DQe),e(E,jQe),e(E,Vg),e(Vg,uJ),e(uJ,qQe),e(Vg,GQe),e(Vg,Lx),e(Lx,OQe),e(Vg,XQe),e(E,VQe),e(E,as),e(as,bJ),e(bJ,zQe),e(as,WQe),e(as,Bx),e(Bx,QQe),e(as,HQe),e(as,xx),e(xx,UQe),e(as,JQe),e(E,YQe),e(E,ns),e(ns,vJ),e(vJ,KQe),e(ns,ZQe),e(ns,kx),e(kx,eHe),e(ns,oHe),e(ns,Rx),e(Rx,rHe),e(ns,tHe),e(E,aHe),e(E,ss),e(ss,TJ),e(TJ,nHe),e(ss,sHe),e(ss,Sx),e(Sx,lHe),e(ss,iHe),e(ss,Px),e(Px,dHe),e(ss,cHe),e(E,fHe),e(E,zg),e(zg,FJ),e(FJ,mHe),e(zg,gHe),e(zg,$x),e($x,hHe),e(zg,pHe),e(E,_He),e(E,ls),e(ls,CJ),e(CJ,uHe),e(ls,bHe),e(ls,Ix),e(Ix,vHe),e(ls,THe),e(ls,Nx),e(Nx,FHe),e(ls,CHe),e(E,MHe),e(E,Wg),e(Wg,MJ),e(MJ,EHe),e(Wg,yHe),e(Wg,Dx),e(Dx,wHe),e(Wg,AHe),e(E,LHe),e(E,is),e(is,EJ),e(EJ,BHe),e(is,xHe),e(is,jx),e(jx,kHe),e(is,RHe),e(is,qx),e(qx,SHe),e(is,PHe),e(E,$He),e(E,ds),e(ds,yJ),e(yJ,IHe),e(ds,NHe),e(ds,Gx),e(Gx,DHe),e(ds,jHe),e(ds,Ox),e(Ox,qHe),e(ds,GHe),e(E,OHe),e(E,cs),e(cs,wJ),e(wJ,XHe),e(cs,VHe),e(cs,Xx),e(Xx,zHe),e(cs,WHe),e(cs,Vx),e(Vx,QHe),e(cs,HHe),e(E,UHe),e(E,fs),e(fs,AJ),e(AJ,JHe),e(fs,YHe),e(fs,zx),e(zx,KHe),e(fs,ZHe),e(fs,Wx),e(Wx,eUe),e(fs,oUe),e(E,rUe),e(E,Qg),e(Qg,LJ),e(LJ,tUe),e(Qg,aUe),e(Qg,Qx),e(Qx,nUe),e(Qg,sUe),e(E,lUe),e(E,ms),e(ms,BJ),e(BJ,iUe),e(ms,dUe),e(ms,Hx),e(Hx,cUe),e(ms,fUe),e(ms,Ux),e(Ux,mUe),e(ms,gUe),e(E,hUe),e(E,gs),e(gs,xJ),e(xJ,pUe),e(gs,_Ue),e(gs,Jx),e(Jx,uUe),e(gs,bUe),e(gs,Yx),e(Yx,vUe),e(gs,TUe),e(E,FUe),e(E,hs),e(hs,kJ),e(kJ,CUe),e(hs,MUe),e(hs,Kx),e(Kx,EUe),e(hs,yUe),e(hs,Zx),e(Zx,wUe),e(hs,AUe),e(E,LUe),e(E,ps),e(ps,RJ),e(RJ,BUe),e(ps,xUe),e(ps,ek),e(ek,kUe),e(ps,RUe),e(ps,ok),e(ok,SUe),e(ps,PUe),e(E,$Ue),e(E,_s),e(_s,SJ),e(SJ,IUe),e(_s,NUe),e(_s,rk),e(rk,DUe),e(_s,jUe),e(_s,tk),e(tk,qUe),e(_s,GUe),e(E,OUe),e(E,us),e(us,PJ),e(PJ,XUe),e(us,VUe),e(us,ak),e(ak,zUe),e(us,WUe),e(us,nk),e(nk,QUe),e(us,HUe),e(E,UUe),e(E,Hg),e(Hg,$J),e($J,JUe),e(Hg,YUe),e(Hg,sk),e(sk,KUe),e(Hg,ZUe),e(E,eJe),e(E,bs),e(bs,IJ),e(IJ,oJe),e(bs,rJe),e(bs,lk),e(lk,tJe),e(bs,aJe),e(bs,ik),e(ik,nJe),e(bs,sJe),e(E,lJe),e(E,Ug),e(Ug,NJ),e(NJ,iJe),e(Ug,dJe),e(Ug,dk),e(dk,cJe),e(Ug,fJe),e(E,mJe),e(E,Jg),e(Jg,DJ),e(DJ,gJe),e(Jg,hJe),e(Jg,ck),e(ck,pJe),e(Jg,_Je),e(E,uJe),e(E,vs),e(vs,jJ),e(jJ,bJe),e(vs,vJe),e(vs,fk),e(fk,TJe),e(vs,FJe),e(vs,mk),e(mk,CJe),e(vs,MJe),e(E,EJe),e(E,Ts),e(Ts,qJ),e(qJ,yJe),e(Ts,wJe),e(Ts,gk),e(gk,AJe),e(Ts,LJe),e(Ts,hk),e(hk,BJe),e(Ts,xJe),e(E,kJe),e(E,Yg),e(Yg,GJ),e(GJ,RJe),e(Yg,SJe),e(Yg,pk),e(pk,PJe),e(Yg,$Je),e(E,IJe),e(E,Fs),e(Fs,OJ),e(OJ,NJe),e(Fs,DJe),e(Fs,_k),e(_k,jJe),e(Fs,qJe),e(Fs,uk),e(uk,GJe),e(Fs,OJe),e(E,XJe),e(E,Cs),e(Cs,XJ),e(XJ,VJe),e(Cs,zJe),e(Cs,bk),e(bk,WJe),e(Cs,QJe),e(Cs,vk),e(vk,HJe),e(Cs,UJe),e(E,JJe),e(E,Ms),e(Ms,VJ),e(VJ,YJe),e(Ms,KJe),e(Ms,Tk),e(Tk,ZJe),e(Ms,eYe),e(Ms,Fk),e(Fk,oYe),e(Ms,rYe),e(E,tYe),e(E,Es),e(Es,zJ),e(zJ,aYe),e(Es,nYe),e(Es,Ck),e(Ck,sYe),e(Es,lYe),e(Es,Mk),e(Mk,iYe),e(Es,dYe),e(E,cYe),e(E,ys),e(ys,WJ),e(WJ,fYe),e(ys,mYe),e(ys,Ek),e(Ek,gYe),e(ys,hYe),e(ys,yk),e(yk,pYe),e(ys,_Ye),e(E,uYe),e(E,Kg),e(Kg,QJ),e(QJ,bYe),e(Kg,vYe),e(Kg,wk),e(wk,TYe),e(Kg,FYe),e(E,CYe),e(E,Zg),e(Zg,HJ),e(HJ,MYe),e(Zg,EYe),e(Zg,Ak),e(Ak,yYe),e(Zg,wYe),e(E,AYe),e(E,eh),e(eh,UJ),e(UJ,LYe),e(eh,BYe),e(eh,Lk),e(Lk,xYe),e(eh,kYe),e(E,RYe),e(E,oh),e(oh,JJ),e(JJ,SYe),e(oh,PYe),e(oh,Bk),e(Bk,$Ye),e(oh,IYe),e(E,NYe),e(E,ws),e(ws,YJ),e(YJ,DYe),e(ws,jYe),e(ws,xk),e(xk,qYe),e(ws,GYe),e(ws,kk),e(kk,OYe),e(ws,XYe),e(E,VYe),e(E,rh),e(rh,KJ),e(KJ,zYe),e(rh,WYe),e(rh,Rk),e(Rk,QYe),e(rh,HYe),e(E,UYe),e(E,As),e(As,ZJ),e(ZJ,JYe),e(As,YYe),e(As,Sk),e(Sk,KYe),e(As,ZYe),e(As,Pk),e(Pk,eKe),e(As,oKe),e(E,rKe),e(E,Ls),e(Ls,eY),e(eY,tKe),e(Ls,aKe),e(Ls,$k),e($k,nKe),e(Ls,sKe),e(Ls,Ik),e(Ik,lKe),e(Ls,iKe),e(E,dKe),e(E,Bs),e(Bs,oY),e(oY,cKe),e(Bs,fKe),e(Bs,Nk),e(Nk,mKe),e(Bs,gKe),e(Bs,Dk),e(Dk,hKe),e(Bs,pKe),e(E,_Ke),e(E,xs),e(xs,rY),e(rY,uKe),e(xs,bKe),e(xs,jk),e(jk,vKe),e(xs,TKe),e(xs,qk),e(qk,FKe),e(xs,CKe),e(E,MKe),e(E,ks),e(ks,tY),e(tY,EKe),e(ks,yKe),e(ks,Gk),e(Gk,wKe),e(ks,AKe),e(ks,Ok),e(Ok,LKe),e(ks,BKe),e(E,xKe),e(E,Rs),e(Rs,aY),e(aY,kKe),e(Rs,RKe),e(Rs,Xk),e(Xk,SKe),e(Rs,PKe),e(Rs,Vk),e(Vk,$Ke),e(Rs,IKe),e(E,NKe),e(E,th),e(th,nY),e(nY,DKe),e(th,jKe),e(th,zk),e(zk,qKe),e(th,GKe),e(E,OKe),e(E,ah),e(ah,sY),e(sY,XKe),e(ah,VKe),e(ah,Wk),e(Wk,zKe),e(ah,WKe),e(E,QKe),e(E,Ss),e(Ss,lY),e(lY,HKe),e(Ss,UKe),e(Ss,Qk),e(Qk,JKe),e(Ss,YKe),e(Ss,Hk),e(Hk,KKe),e(Ss,ZKe),e(E,eZe),e(E,Ps),e(Ps,iY),e(iY,oZe),e(Ps,rZe),e(Ps,Uk),e(Uk,tZe),e(Ps,aZe),e(Ps,Jk),e(Jk,nZe),e(Ps,sZe),e(E,lZe),e(E,$s),e($s,dY),e(dY,iZe),e($s,dZe),e($s,Yk),e(Yk,cZe),e($s,fZe),e($s,Kk),e(Kk,mZe),e($s,gZe),e(E,hZe),e(E,nh),e(nh,cY),e(cY,pZe),e(nh,_Ze),e(nh,Zk),e(Zk,uZe),e(nh,bZe),e(E,vZe),e(E,sh),e(sh,fY),e(fY,TZe),e(sh,FZe),e(sh,eR),e(eR,CZe),e(sh,MZe),e(E,EZe),e(E,lh),e(lh,mY),e(mY,yZe),e(lh,wZe),e(lh,oR),e(oR,AZe),e(lh,LZe),e(E,BZe),e(E,ih),e(ih,gY),e(gY,xZe),e(ih,kZe),e(ih,rR),e(rR,RZe),e(ih,SZe),e(E,PZe),e(E,Is),e(Is,hY),e(hY,$Ze),e(Is,IZe),e(Is,tR),e(tR,NZe),e(Is,DZe),e(Is,aR),e(aR,jZe),e(Is,qZe),e(E,GZe),e(E,dh),e(dh,pY),e(pY,OZe),e(dh,XZe),e(dh,nR),e(nR,VZe),e(dh,zZe),e(E,WZe),e(E,ch),e(ch,_Y),e(_Y,QZe),e(ch,HZe),e(ch,sR),e(sR,UZe),e(ch,JZe),e(E,YZe),e(E,Ns),e(Ns,uY),e(uY,KZe),e(Ns,ZZe),e(Ns,lR),e(lR,eeo),e(Ns,oeo),e(Ns,iR),e(iR,reo),e(Ns,teo),e(E,aeo),e(E,Ds),e(Ds,bY),e(bY,neo),e(Ds,seo),e(Ds,dR),e(dR,leo),e(Ds,ieo),e(Ds,cR),e(cR,deo),e(Ds,ceo),e(go,feo),e(go,vY),e(vY,meo),e(go,geo),g(yE,go,null),e(Qo,heo),e(Qo,fh),g(wE,fh,null),e(fh,peo),e(fh,TY),e(TY,_eo),b(c,hke,u),b(c,Qi,u),e(Qi,mh),e(mh,FY),g(AE,FY,null),e(Qi,ueo),e(Qi,CY),e(CY,beo),b(c,pke,u),b(c,Ho,u),g(LE,Ho,null),e(Ho,veo),e(Ho,BE),e(BE,Teo),e(BE,fR),e(fR,Feo),e(BE,Ceo),e(Ho,Meo),e(Ho,xE),e(xE,Eeo),e(xE,MY),e(MY,yeo),e(xE,weo),e(Ho,Aeo),e(Ho,$e),g(kE,$e,null),e($e,Leo),e($e,EY),e(EY,Beo),e($e,xeo),e($e,Xa),e(Xa,keo),e(Xa,yY),e(yY,Reo),e(Xa,Seo),e(Xa,wY),e(wY,Peo),e(Xa,$eo),e(Xa,AY),e(AY,Ieo),e(Xa,Neo),e($e,Deo),e($e,re),e(re,gh),e(gh,LY),e(LY,jeo),e(gh,qeo),e(gh,mR),e(mR,Geo),e(gh,Oeo),e(re,Xeo),e(re,hh),e(hh,BY),e(BY,Veo),e(hh,zeo),e(hh,gR),e(gR,Weo),e(hh,Qeo),e(re,Heo),e(re,ph),e(ph,xY),e(xY,Ueo),e(ph,Jeo),e(ph,hR),e(hR,Yeo),e(ph,Keo),e(re,Zeo),e(re,_h),e(_h,kY),e(kY,eoo),e(_h,ooo),e(_h,pR),e(pR,roo),e(_h,too),e(re,aoo),e(re,uh),e(uh,RY),e(RY,noo),e(uh,soo),e(uh,_R),e(_R,loo),e(uh,ioo),e(re,doo),e(re,bh),e(bh,SY),e(SY,coo),e(bh,foo),e(bh,uR),e(uR,moo),e(bh,goo),e(re,hoo),e(re,vh),e(vh,PY),e(PY,poo),e(vh,_oo),e(vh,bR),e(bR,uoo),e(vh,boo),e(re,voo),e(re,Th),e(Th,$Y),e($Y,Too),e(Th,Foo),e(Th,vR),e(vR,Coo),e(Th,Moo),e(re,Eoo),e(re,Fh),e(Fh,IY),e(IY,yoo),e(Fh,woo),e(Fh,TR),e(TR,Aoo),e(Fh,Loo),e(re,Boo),e(re,Ch),e(Ch,NY),e(NY,xoo),e(Ch,koo),e(Ch,FR),e(FR,Roo),e(Ch,Soo),e(re,Poo),e(re,Mh),e(Mh,DY),e(DY,$oo),e(Mh,Ioo),e(Mh,CR),e(CR,Noo),e(Mh,Doo),e(re,joo),e(re,Eh),e(Eh,jY),e(jY,qoo),e(Eh,Goo),e(Eh,MR),e(MR,Ooo),e(Eh,Xoo),e(re,Voo),e(re,yh),e(yh,qY),e(qY,zoo),e(yh,Woo),e(yh,ER),e(ER,Qoo),e(yh,Hoo),e(re,Uoo),e(re,wh),e(wh,GY),e(GY,Joo),e(wh,Yoo),e(wh,yR),e(yR,Koo),e(wh,Zoo),e(re,ero),e(re,Ah),e(Ah,OY),e(OY,oro),e(Ah,rro),e(Ah,wR),e(wR,tro),e(Ah,aro),e(re,nro),e(re,Lh),e(Lh,XY),e(XY,sro),e(Lh,lro),e(Lh,AR),e(AR,iro),e(Lh,dro),e(re,cro),e(re,Bh),e(Bh,VY),e(VY,fro),e(Bh,mro),e(Bh,LR),e(LR,gro),e(Bh,hro),e(re,pro),e(re,xh),e(xh,zY),e(zY,_ro),e(xh,uro),e(xh,BR),e(BR,bro),e(xh,vro),e($e,Tro),g(kh,$e,null),e($e,Fro),e($e,WY),e(WY,Cro),e($e,Mro),g(RE,$e,null),e(Ho,Ero),e(Ho,Rh),g(SE,Rh,null),e(Rh,yro),e(Rh,QY),e(QY,wro),b(c,_ke,u),b(c,Hi,u),e(Hi,Sh),e(Sh,HY),g(PE,HY,null),e(Hi,Aro),e(Hi,UY),e(UY,Lro),b(c,uke,u),b(c,Uo,u),g($E,Uo,null),e(Uo,Bro),e(Uo,IE),e(IE,xro),e(IE,xR),e(xR,kro),e(IE,Rro),e(Uo,Sro),e(Uo,NE),e(NE,Pro),e(NE,JY),e(JY,$ro),e(NE,Iro),e(Uo,Nro),e(Uo,Ie),g(DE,Ie,null),e(Ie,Dro),e(Ie,YY),e(YY,jro),e(Ie,qro),e(Ie,Ui),e(Ui,Gro),e(Ui,KY),e(KY,Oro),e(Ui,Xro),e(Ui,ZY),e(ZY,Vro),e(Ui,zro),e(Ie,Wro),e(Ie,xe),e(xe,Ph),e(Ph,eK),e(eK,Qro),e(Ph,Hro),e(Ph,kR),e(kR,Uro),e(Ph,Jro),e(xe,Yro),e(xe,$h),e($h,oK),e(oK,Kro),e($h,Zro),e($h,RR),e(RR,eto),e($h,oto),e(xe,rto),e(xe,Ih),e(Ih,rK),e(rK,tto),e(Ih,ato),e(Ih,SR),e(SR,nto),e(Ih,sto),e(xe,lto),e(xe,Nh),e(Nh,tK),e(tK,ito),e(Nh,dto),e(Nh,PR),e(PR,cto),e(Nh,fto),e(xe,mto),e(xe,Dh),e(Dh,aK),e(aK,gto),e(Dh,hto),e(Dh,$R),e($R,pto),e(Dh,_to),e(xe,uto),e(xe,jh),e(jh,nK),e(nK,bto),e(jh,vto),e(jh,IR),e(IR,Tto),e(jh,Fto),e(xe,Cto),e(xe,qh),e(qh,sK),e(sK,Mto),e(qh,Eto),e(qh,NR),e(NR,yto),e(qh,wto),e(xe,Ato),e(xe,Gh),e(Gh,lK),e(lK,Lto),e(Gh,Bto),e(Gh,DR),e(DR,xto),e(Gh,kto),e(Ie,Rto),g(Oh,Ie,null),e(Ie,Sto),e(Ie,iK),e(iK,Pto),e(Ie,$to),g(jE,Ie,null),e(Uo,Ito),e(Uo,Xh),g(qE,Xh,null),e(Xh,Nto),e(Xh,dK),e(dK,Dto),b(c,bke,u),b(c,Ji,u),e(Ji,Vh),e(Vh,cK),g(GE,cK,null),e(Ji,jto),e(Ji,fK),e(fK,qto),b(c,vke,u),b(c,Jo,u),g(OE,Jo,null),e(Jo,Gto),e(Jo,Yi),e(Yi,Oto),e(Yi,mK),e(mK,Xto),e(Yi,Vto),e(Yi,gK),e(gK,zto),e(Yi,Wto),e(Jo,Qto),e(Jo,XE),e(XE,Hto),e(XE,hK),e(hK,Uto),e(XE,Jto),e(Jo,Yto),e(Jo,Vr),g(VE,Vr,null),e(Vr,Kto),e(Vr,pK),e(pK,Zto),e(Vr,eao),e(Vr,Ki),e(Ki,oao),e(Ki,_K),e(_K,rao),e(Ki,tao),e(Ki,uK),e(uK,aao),e(Ki,nao),e(Vr,sao),e(Vr,bK),e(bK,lao),e(Vr,iao),g(zE,Vr,null),e(Jo,dao),e(Jo,Ne),g(WE,Ne,null),e(Ne,cao),e(Ne,vK),e(vK,fao),e(Ne,mao),e(Ne,Va),e(Va,gao),e(Va,TK),e(TK,hao),e(Va,pao),e(Va,FK),e(FK,_ao),e(Va,uao),e(Va,CK),e(CK,bao),e(Va,vao),e(Ne,Tao),e(Ne,F),e(F,zh),e(zh,MK),e(MK,Fao),e(zh,Cao),e(zh,jR),e(jR,Mao),e(zh,Eao),e(F,yao),e(F,Wh),e(Wh,EK),e(EK,wao),e(Wh,Aao),e(Wh,qR),e(qR,Lao),e(Wh,Bao),e(F,xao),e(F,Qh),e(Qh,yK),e(yK,kao),e(Qh,Rao),e(Qh,GR),e(GR,Sao),e(Qh,Pao),e(F,$ao),e(F,Hh),e(Hh,wK),e(wK,Iao),e(Hh,Nao),e(Hh,OR),e(OR,Dao),e(Hh,jao),e(F,qao),e(F,Uh),e(Uh,AK),e(AK,Gao),e(Uh,Oao),e(Uh,XR),e(XR,Xao),e(Uh,Vao),e(F,zao),e(F,Jh),e(Jh,LK),e(LK,Wao),e(Jh,Qao),e(Jh,VR),e(VR,Hao),e(Jh,Uao),e(F,Jao),e(F,Yh),e(Yh,BK),e(BK,Yao),e(Yh,Kao),e(Yh,zR),e(zR,Zao),e(Yh,eno),e(F,ono),e(F,Kh),e(Kh,xK),e(xK,rno),e(Kh,tno),e(Kh,WR),e(WR,ano),e(Kh,nno),e(F,sno),e(F,Zh),e(Zh,kK),e(kK,lno),e(Zh,ino),e(Zh,QR),e(QR,dno),e(Zh,cno),e(F,fno),e(F,ep),e(ep,RK),e(RK,mno),e(ep,gno),e(ep,HR),e(HR,hno),e(ep,pno),e(F,_no),e(F,op),e(op,SK),e(SK,uno),e(op,bno),e(op,UR),e(UR,vno),e(op,Tno),e(F,Fno),e(F,rp),e(rp,PK),e(PK,Cno),e(rp,Mno),e(rp,JR),e(JR,Eno),e(rp,yno),e(F,wno),e(F,tp),e(tp,$K),e($K,Ano),e(tp,Lno),e(tp,YR),e(YR,Bno),e(tp,xno),e(F,kno),e(F,ap),e(ap,IK),e(IK,Rno),e(ap,Sno),e(ap,KR),e(KR,Pno),e(ap,$no),e(F,Ino),e(F,np),e(np,NK),e(NK,Nno),e(np,Dno),e(np,ZR),e(ZR,jno),e(np,qno),e(F,Gno),e(F,sp),e(sp,DK),e(DK,Ono),e(sp,Xno),e(sp,eS),e(eS,Vno),e(sp,zno),e(F,Wno),e(F,lp),e(lp,jK),e(jK,Qno),e(lp,Hno),e(lp,oS),e(oS,Uno),e(lp,Jno),e(F,Yno),e(F,ip),e(ip,qK),e(qK,Kno),e(ip,Zno),e(ip,rS),e(rS,eso),e(ip,oso),e(F,rso),e(F,dp),e(dp,GK),e(GK,tso),e(dp,aso),e(dp,tS),e(tS,nso),e(dp,sso),e(F,lso),e(F,cp),e(cp,OK),e(OK,iso),e(cp,dso),e(cp,aS),e(aS,cso),e(cp,fso),e(F,mso),e(F,fp),e(fp,XK),e(XK,gso),e(fp,hso),e(fp,nS),e(nS,pso),e(fp,_so),e(F,uso),e(F,mp),e(mp,VK),e(VK,bso),e(mp,vso),e(mp,sS),e(sS,Tso),e(mp,Fso),e(F,Cso),e(F,gp),e(gp,zK),e(zK,Mso),e(gp,Eso),e(gp,lS),e(lS,yso),e(gp,wso),e(F,Aso),e(F,hp),e(hp,WK),e(WK,Lso),e(hp,Bso),e(hp,iS),e(iS,xso),e(hp,kso),e(F,Rso),e(F,pp),e(pp,QK),e(QK,Sso),e(pp,Pso),e(pp,dS),e(dS,$so),e(pp,Iso),e(F,Nso),e(F,_p),e(_p,HK),e(HK,Dso),e(_p,jso),e(_p,cS),e(cS,qso),e(_p,Gso),e(F,Oso),e(F,up),e(up,UK),e(UK,Xso),e(up,Vso),e(up,fS),e(fS,zso),e(up,Wso),e(F,Qso),e(F,bp),e(bp,JK),e(JK,Hso),e(bp,Uso),e(bp,mS),e(mS,Jso),e(bp,Yso),e(F,Kso),e(F,js),e(js,YK),e(YK,Zso),e(js,elo),e(js,gS),e(gS,olo),e(js,rlo),e(js,hS),e(hS,tlo),e(js,alo),e(F,nlo),e(F,vp),e(vp,KK),e(KK,slo),e(vp,llo),e(vp,pS),e(pS,ilo),e(vp,dlo),e(F,clo),e(F,Tp),e(Tp,ZK),e(ZK,flo),e(Tp,mlo),e(Tp,_S),e(_S,glo),e(Tp,hlo),e(F,plo),e(F,Fp),e(Fp,eZ),e(eZ,_lo),e(Fp,ulo),e(Fp,uS),e(uS,blo),e(Fp,vlo),e(F,Tlo),e(F,Cp),e(Cp,oZ),e(oZ,Flo),e(Cp,Clo),e(Cp,bS),e(bS,Mlo),e(Cp,Elo),e(F,ylo),e(F,Mp),e(Mp,rZ),e(rZ,wlo),e(Mp,Alo),e(Mp,vS),e(vS,Llo),e(Mp,Blo),e(F,xlo),e(F,Ep),e(Ep,tZ),e(tZ,klo),e(Ep,Rlo),e(Ep,TS),e(TS,Slo),e(Ep,Plo),e(F,$lo),e(F,yp),e(yp,aZ),e(aZ,Ilo),e(yp,Nlo),e(yp,FS),e(FS,Dlo),e(yp,jlo),e(F,qlo),e(F,wp),e(wp,nZ),e(nZ,Glo),e(wp,Olo),e(wp,CS),e(CS,Xlo),e(wp,Vlo),e(F,zlo),e(F,Ap),e(Ap,sZ),e(sZ,Wlo),e(Ap,Qlo),e(Ap,MS),e(MS,Hlo),e(Ap,Ulo),e(F,Jlo),e(F,Lp),e(Lp,lZ),e(lZ,Ylo),e(Lp,Klo),e(Lp,ES),e(ES,Zlo),e(Lp,eio),e(F,oio),e(F,Bp),e(Bp,iZ),e(iZ,rio),e(Bp,tio),e(Bp,yS),e(yS,aio),e(Bp,nio),e(F,sio),e(F,xp),e(xp,dZ),e(dZ,lio),e(xp,iio),e(xp,wS),e(wS,dio),e(xp,cio),e(F,fio),e(F,kp),e(kp,cZ),e(cZ,mio),e(kp,gio),e(kp,AS),e(AS,hio),e(kp,pio),e(F,_io),e(F,Rp),e(Rp,fZ),e(fZ,uio),e(Rp,bio),e(Rp,LS),e(LS,vio),e(Rp,Tio),e(F,Fio),e(F,Sp),e(Sp,mZ),e(mZ,Cio),e(Sp,Mio),e(Sp,BS),e(BS,Eio),e(Sp,yio),e(F,wio),e(F,Pp),e(Pp,gZ),e(gZ,Aio),e(Pp,Lio),e(Pp,xS),e(xS,Bio),e(Pp,xio),e(F,kio),e(F,$p),e($p,hZ),e(hZ,Rio),e($p,Sio),e($p,kS),e(kS,Pio),e($p,$io),e(F,Iio),e(F,Ip),e(Ip,pZ),e(pZ,Nio),e(Ip,Dio),e(Ip,RS),e(RS,jio),e(Ip,qio),e(F,Gio),e(F,Np),e(Np,_Z),e(_Z,Oio),e(Np,Xio),e(Np,SS),e(SS,Vio),e(Np,zio),e(F,Wio),e(F,Dp),e(Dp,uZ),e(uZ,Qio),e(Dp,Hio),e(Dp,PS),e(PS,Uio),e(Dp,Jio),e(F,Yio),e(F,jp),e(jp,bZ),e(bZ,Kio),e(jp,Zio),e(jp,$S),e($S,edo),e(jp,odo),e(F,rdo),e(F,qp),e(qp,vZ),e(vZ,tdo),e(qp,ado),e(qp,IS),e(IS,ndo),e(qp,sdo),e(F,ldo),e(F,Gp),e(Gp,TZ),e(TZ,ido),e(Gp,ddo),e(Gp,NS),e(NS,cdo),e(Gp,fdo),e(F,mdo),e(F,Op),e(Op,FZ),e(FZ,gdo),e(Op,hdo),e(Op,DS),e(DS,pdo),e(Op,_do),e(F,udo),e(F,Xp),e(Xp,CZ),e(CZ,bdo),e(Xp,vdo),e(Xp,jS),e(jS,Tdo),e(Xp,Fdo),e(F,Cdo),e(F,Vp),e(Vp,MZ),e(MZ,Mdo),e(Vp,Edo),e(Vp,qS),e(qS,ydo),e(Vp,wdo),e(F,Ado),e(F,zp),e(zp,EZ),e(EZ,Ldo),e(zp,Bdo),e(zp,GS),e(GS,xdo),e(zp,kdo),e(F,Rdo),e(F,Wp),e(Wp,yZ),e(yZ,Sdo),e(Wp,Pdo),e(Wp,OS),e(OS,$do),e(Wp,Ido),e(F,Ndo),e(F,Qp),e(Qp,wZ),e(wZ,Ddo),e(Qp,jdo),e(Qp,XS),e(XS,qdo),e(Qp,Gdo),e(F,Odo),e(F,Hp),e(Hp,AZ),e(AZ,Xdo),e(Hp,Vdo),e(Hp,VS),e(VS,zdo),e(Hp,Wdo),e(F,Qdo),e(F,Up),e(Up,LZ),e(LZ,Hdo),e(Up,Udo),e(Up,zS),e(zS,Jdo),e(Up,Ydo),e(F,Kdo),e(F,Jp),e(Jp,BZ),e(BZ,Zdo),e(Jp,eco),e(Jp,WS),e(WS,oco),e(Jp,rco),e(F,tco),e(F,Yp),e(Yp,xZ),e(xZ,aco),e(Yp,nco),e(Yp,QS),e(QS,sco),e(Yp,lco),e(F,ico),e(F,Kp),e(Kp,kZ),e(kZ,dco),e(Kp,cco),e(Kp,HS),e(HS,fco),e(Kp,mco),e(F,gco),e(F,Zp),e(Zp,RZ),e(RZ,hco),e(Zp,pco),e(Zp,US),e(US,_co),e(Zp,uco),e(F,bco),e(F,e_),e(e_,SZ),e(SZ,vco),e(e_,Tco),e(e_,JS),e(JS,Fco),e(e_,Cco),e(F,Mco),e(F,o_),e(o_,PZ),e(PZ,Eco),e(o_,yco),e(o_,YS),e(YS,wco),e(o_,Aco),e(F,Lco),e(F,r_),e(r_,$Z),e($Z,Bco),e(r_,xco),e(r_,KS),e(KS,kco),e(r_,Rco),e(F,Sco),e(F,t_),e(t_,IZ),e(IZ,Pco),e(t_,$co),e(t_,ZS),e(ZS,Ico),e(t_,Nco),e(F,Dco),e(F,a_),e(a_,NZ),e(NZ,jco),e(a_,qco),e(a_,eP),e(eP,Gco),e(a_,Oco),e(F,Xco),e(F,n_),e(n_,DZ),e(DZ,Vco),e(n_,zco),e(n_,oP),e(oP,Wco),e(n_,Qco),e(F,Hco),e(F,s_),e(s_,jZ),e(jZ,Uco),e(s_,Jco),e(s_,rP),e(rP,Yco),e(s_,Kco),e(F,Zco),e(F,l_),e(l_,qZ),e(qZ,efo),e(l_,ofo),e(l_,tP),e(tP,rfo),e(l_,tfo),e(F,afo),e(F,i_),e(i_,GZ),e(GZ,nfo),e(i_,sfo),e(i_,aP),e(aP,lfo),e(i_,ifo),e(F,dfo),e(F,d_),e(d_,OZ),e(OZ,cfo),e(d_,ffo),e(d_,nP),e(nP,mfo),e(d_,gfo),e(F,hfo),e(F,c_),e(c_,XZ),e(XZ,pfo),e(c_,_fo),e(c_,sP),e(sP,ufo),e(c_,bfo),e(F,vfo),e(F,f_),e(f_,VZ),e(VZ,Tfo),e(f_,Ffo),e(f_,lP),e(lP,Cfo),e(f_,Mfo),e(F,Efo),e(F,m_),e(m_,zZ),e(zZ,yfo),e(m_,wfo),e(m_,iP),e(iP,Afo),e(m_,Lfo),e(F,Bfo),e(F,g_),e(g_,WZ),e(WZ,xfo),e(g_,kfo),e(g_,dP),e(dP,Rfo),e(g_,Sfo),e(F,Pfo),e(F,h_),e(h_,QZ),e(QZ,$fo),e(h_,Ifo),e(h_,cP),e(cP,Nfo),e(h_,Dfo),e(F,jfo),e(F,p_),e(p_,HZ),e(HZ,qfo),e(p_,Gfo),e(p_,fP),e(fP,Ofo),e(p_,Xfo),e(F,Vfo),e(F,__),e(__,UZ),e(UZ,zfo),e(__,Wfo),e(__,mP),e(mP,Qfo),e(__,Hfo),e(F,Ufo),e(F,u_),e(u_,JZ),e(JZ,Jfo),e(u_,Yfo),e(u_,gP),e(gP,Kfo),e(u_,Zfo),e(F,emo),e(F,b_),e(b_,YZ),e(YZ,omo),e(b_,rmo),e(b_,hP),e(hP,tmo),e(b_,amo),e(F,nmo),e(F,v_),e(v_,KZ),e(KZ,smo),e(v_,lmo),e(v_,pP),e(pP,imo),e(v_,dmo),e(F,cmo),e(F,T_),e(T_,ZZ),e(ZZ,fmo),e(T_,mmo),e(T_,_P),e(_P,gmo),e(T_,hmo),e(F,pmo),e(F,F_),e(F_,eee),e(eee,_mo),e(F_,umo),e(F_,uP),e(uP,bmo),e(F_,vmo),e(F,Tmo),e(F,C_),e(C_,oee),e(oee,Fmo),e(C_,Cmo),e(C_,bP),e(bP,Mmo),e(C_,Emo),e(F,ymo),e(F,M_),e(M_,ree),e(ree,wmo),e(M_,Amo),e(M_,vP),e(vP,Lmo),e(M_,Bmo),e(F,xmo),e(F,E_),e(E_,tee),e(tee,kmo),e(E_,Rmo),e(E_,TP),e(TP,Smo),e(E_,Pmo),e(F,$mo),e(F,y_),e(y_,aee),e(aee,Imo),e(y_,Nmo),e(y_,FP),e(FP,Dmo),e(y_,jmo),e(F,qmo),e(F,w_),e(w_,nee),e(nee,Gmo),e(w_,Omo),e(w_,CP),e(CP,Xmo),e(w_,Vmo),e(Ne,zmo),e(Ne,A_),e(A_,Wmo),e(A_,see),e(see,Qmo),e(A_,Hmo),e(A_,lee),e(lee,Umo),e(Ne,Jmo),e(Ne,iee),e(iee,Ymo),e(Ne,Kmo),g(QE,Ne,null),b(c,Tke,u),b(c,Zi,u),e(Zi,L_),e(L_,dee),g(HE,dee,null),e(Zi,Zmo),e(Zi,cee),e(cee,ego),b(c,Fke,u),b(c,Yo,u),g(UE,Yo,null),e(Yo,ogo),e(Yo,ed),e(ed,rgo),e(ed,fee),e(fee,tgo),e(ed,ago),e(ed,mee),e(mee,ngo),e(ed,sgo),e(Yo,lgo),e(Yo,JE),e(JE,igo),e(JE,gee),e(gee,dgo),e(JE,cgo),e(Yo,fgo),e(Yo,zr),g(YE,zr,null),e(zr,mgo),e(zr,hee),e(hee,ggo),e(zr,hgo),e(zr,od),e(od,pgo),e(od,pee),e(pee,_go),e(od,ugo),e(od,_ee),e(_ee,bgo),e(od,vgo),e(zr,Tgo),e(zr,uee),e(uee,Fgo),e(zr,Cgo),g(KE,zr,null),e(Yo,Mgo),e(Yo,De),g(ZE,De,null),e(De,Ego),e(De,bee),e(bee,ygo),e(De,wgo),e(De,za),e(za,Ago),e(za,vee),e(vee,Lgo),e(za,Bgo),e(za,Tee),e(Tee,xgo),e(za,kgo),e(za,Fee),e(Fee,Rgo),e(za,Sgo),e(De,Pgo),e(De,k),e(k,B_),e(B_,Cee),e(Cee,$go),e(B_,Igo),e(B_,MP),e(MP,Ngo),e(B_,Dgo),e(k,jgo),e(k,x_),e(x_,Mee),e(Mee,qgo),e(x_,Ggo),e(x_,EP),e(EP,Ogo),e(x_,Xgo),e(k,Vgo),e(k,k_),e(k_,Eee),e(Eee,zgo),e(k_,Wgo),e(k_,yP),e(yP,Qgo),e(k_,Hgo),e(k,Ugo),e(k,R_),e(R_,yee),e(yee,Jgo),e(R_,Ygo),e(R_,wP),e(wP,Kgo),e(R_,Zgo),e(k,eho),e(k,S_),e(S_,wee),e(wee,oho),e(S_,rho),e(S_,AP),e(AP,tho),e(S_,aho),e(k,nho),e(k,P_),e(P_,Aee),e(Aee,sho),e(P_,lho),e(P_,LP),e(LP,iho),e(P_,dho),e(k,cho),e(k,$_),e($_,Lee),e(Lee,fho),e($_,mho),e($_,BP),e(BP,gho),e($_,hho),e(k,pho),e(k,I_),e(I_,Bee),e(Bee,_ho),e(I_,uho),e(I_,xP),e(xP,bho),e(I_,vho),e(k,Tho),e(k,N_),e(N_,xee),e(xee,Fho),e(N_,Cho),e(N_,kP),e(kP,Mho),e(N_,Eho),e(k,yho),e(k,D_),e(D_,kee),e(kee,who),e(D_,Aho),e(D_,RP),e(RP,Lho),e(D_,Bho),e(k,xho),e(k,j_),e(j_,Ree),e(Ree,kho),e(j_,Rho),e(j_,SP),e(SP,Sho),e(j_,Pho),e(k,$ho),e(k,q_),e(q_,See),e(See,Iho),e(q_,Nho),e(q_,PP),e(PP,Dho),e(q_,jho),e(k,qho),e(k,G_),e(G_,Pee),e(Pee,Gho),e(G_,Oho),e(G_,$P),e($P,Xho),e(G_,Vho),e(k,zho),e(k,O_),e(O_,$ee),e($ee,Who),e(O_,Qho),e(O_,IP),e(IP,Hho),e(O_,Uho),e(k,Jho),e(k,X_),e(X_,Iee),e(Iee,Yho),e(X_,Kho),e(X_,NP),e(NP,Zho),e(X_,epo),e(k,opo),e(k,V_),e(V_,Nee),e(Nee,rpo),e(V_,tpo),e(V_,DP),e(DP,apo),e(V_,npo),e(k,spo),e(k,z_),e(z_,Dee),e(Dee,lpo),e(z_,ipo),e(z_,jP),e(jP,dpo),e(z_,cpo),e(k,fpo),e(k,W_),e(W_,jee),e(jee,mpo),e(W_,gpo),e(W_,qP),e(qP,hpo),e(W_,ppo),e(k,_po),e(k,Q_),e(Q_,qee),e(qee,upo),e(Q_,bpo),e(Q_,GP),e(GP,vpo),e(Q_,Tpo),e(k,Fpo),e(k,H_),e(H_,Gee),e(Gee,Cpo),e(H_,Mpo),e(H_,OP),e(OP,Epo),e(H_,ypo),e(k,wpo),e(k,U_),e(U_,Oee),e(Oee,Apo),e(U_,Lpo),e(U_,XP),e(XP,Bpo),e(U_,xpo),e(k,kpo),e(k,J_),e(J_,Xee),e(Xee,Rpo),e(J_,Spo),e(J_,VP),e(VP,Ppo),e(J_,$po),e(k,Ipo),e(k,Y_),e(Y_,Vee),e(Vee,Npo),e(Y_,Dpo),e(Y_,zP),e(zP,jpo),e(Y_,qpo),e(k,Gpo),e(k,K_),e(K_,zee),e(zee,Opo),e(K_,Xpo),e(K_,WP),e(WP,Vpo),e(K_,zpo),e(k,Wpo),e(k,Z_),e(Z_,Wee),e(Wee,Qpo),e(Z_,Hpo),e(Z_,QP),e(QP,Upo),e(Z_,Jpo),e(k,Ypo),e(k,eu),e(eu,Qee),e(Qee,Kpo),e(eu,Zpo),e(eu,HP),e(HP,e_o),e(eu,o_o),e(k,r_o),e(k,ou),e(ou,Hee),e(Hee,t_o),e(ou,a_o),e(ou,UP),e(UP,n_o),e(ou,s_o),e(k,l_o),e(k,ru),e(ru,Uee),e(Uee,i_o),e(ru,d_o),e(ru,JP),e(JP,c_o),e(ru,f_o),e(k,m_o),e(k,tu),e(tu,Jee),e(Jee,g_o),e(tu,h_o),e(tu,YP),e(YP,p_o),e(tu,__o),e(k,u_o),e(k,au),e(au,Yee),e(Yee,b_o),e(au,v_o),e(au,KP),e(KP,T_o),e(au,F_o),e(k,C_o),e(k,nu),e(nu,Kee),e(Kee,M_o),e(nu,E_o),e(nu,ZP),e(ZP,y_o),e(nu,w_o),e(k,A_o),e(k,su),e(su,Zee),e(Zee,L_o),e(su,B_o),e(su,e$),e(e$,x_o),e(su,k_o),e(k,R_o),e(k,lu),e(lu,eoe),e(eoe,S_o),e(lu,P_o),e(lu,o$),e(o$,$_o),e(lu,I_o),e(k,N_o),e(k,iu),e(iu,ooe),e(ooe,D_o),e(iu,j_o),e(iu,r$),e(r$,q_o),e(iu,G_o),e(k,O_o),e(k,du),e(du,roe),e(roe,X_o),e(du,V_o),e(du,t$),e(t$,z_o),e(du,W_o),e(k,Q_o),e(k,cu),e(cu,toe),e(toe,H_o),e(cu,U_o),e(cu,a$),e(a$,J_o),e(cu,Y_o),e(k,K_o),e(k,fu),e(fu,aoe),e(aoe,Z_o),e(fu,euo),e(fu,n$),e(n$,ouo),e(fu,ruo),e(k,tuo),e(k,mu),e(mu,noe),e(noe,auo),e(mu,nuo),e(mu,s$),e(s$,suo),e(mu,luo),e(k,iuo),e(k,gu),e(gu,soe),e(soe,duo),e(gu,cuo),e(gu,l$),e(l$,fuo),e(gu,muo),e(De,guo),e(De,hu),e(hu,huo),e(hu,loe),e(loe,puo),e(hu,_uo),e(hu,ioe),e(ioe,uuo),e(De,buo),e(De,doe),e(doe,vuo),e(De,Tuo),g(e3,De,null),b(c,Cke,u),b(c,rd,u),e(rd,pu),e(pu,coe),g(o3,coe,null),e(rd,Fuo),e(rd,foe),e(foe,Cuo),b(c,Mke,u),b(c,Ko,u),g(r3,Ko,null),e(Ko,Muo),e(Ko,td),e(td,Euo),e(td,moe),e(moe,yuo),e(td,wuo),e(td,goe),e(goe,Auo),e(td,Luo),e(Ko,Buo),e(Ko,t3),e(t3,xuo),e(t3,hoe),e(hoe,kuo),e(t3,Ruo),e(Ko,Suo),e(Ko,Wr),g(a3,Wr,null),e(Wr,Puo),e(Wr,poe),e(poe,$uo),e(Wr,Iuo),e(Wr,ad),e(ad,Nuo),e(ad,_oe),e(_oe,Duo),e(ad,juo),e(ad,uoe),e(uoe,quo),e(ad,Guo),e(Wr,Ouo),e(Wr,boe),e(boe,Xuo),e(Wr,Vuo),g(n3,Wr,null),e(Ko,zuo),e(Ko,je),g(s3,je,null),e(je,Wuo),e(je,voe),e(voe,Quo),e(je,Huo),e(je,Wa),e(Wa,Uuo),e(Wa,Toe),e(Toe,Juo),e(Wa,Yuo),e(Wa,Foe),e(Foe,Kuo),e(Wa,Zuo),e(Wa,Coe),e(Coe,e1o),e(Wa,o1o),e(je,r1o),e(je,$),e($,_u),e(_u,Moe),e(Moe,t1o),e(_u,a1o),e(_u,i$),e(i$,n1o),e(_u,s1o),e($,l1o),e($,uu),e(uu,Eoe),e(Eoe,i1o),e(uu,d1o),e(uu,d$),e(d$,c1o),e(uu,f1o),e($,m1o),e($,bu),e(bu,yoe),e(yoe,g1o),e(bu,h1o),e(bu,c$),e(c$,p1o),e(bu,_1o),e($,u1o),e($,vu),e(vu,woe),e(woe,b1o),e(vu,v1o),e(vu,f$),e(f$,T1o),e(vu,F1o),e($,C1o),e($,Tu),e(Tu,Aoe),e(Aoe,M1o),e(Tu,E1o),e(Tu,m$),e(m$,y1o),e(Tu,w1o),e($,A1o),e($,Fu),e(Fu,Loe),e(Loe,L1o),e(Fu,B1o),e(Fu,g$),e(g$,x1o),e(Fu,k1o),e($,R1o),e($,Cu),e(Cu,Boe),e(Boe,S1o),e(Cu,P1o),e(Cu,h$),e(h$,$1o),e(Cu,I1o),e($,N1o),e($,Mu),e(Mu,xoe),e(xoe,D1o),e(Mu,j1o),e(Mu,p$),e(p$,q1o),e(Mu,G1o),e($,O1o),e($,Eu),e(Eu,koe),e(koe,X1o),e(Eu,V1o),e(Eu,_$),e(_$,z1o),e(Eu,W1o),e($,Q1o),e($,yu),e(yu,Roe),e(Roe,H1o),e(yu,U1o),e(yu,u$),e(u$,J1o),e(yu,Y1o),e($,K1o),e($,wu),e(wu,Soe),e(Soe,Z1o),e(wu,ebo),e(wu,b$),e(b$,obo),e(wu,rbo),e($,tbo),e($,Au),e(Au,Poe),e(Poe,abo),e(Au,nbo),e(Au,v$),e(v$,sbo),e(Au,lbo),e($,ibo),e($,Lu),e(Lu,$oe),e($oe,dbo),e(Lu,cbo),e(Lu,T$),e(T$,fbo),e(Lu,mbo),e($,gbo),e($,Bu),e(Bu,Ioe),e(Ioe,hbo),e(Bu,pbo),e(Bu,F$),e(F$,_bo),e(Bu,ubo),e($,bbo),e($,xu),e(xu,Noe),e(Noe,vbo),e(xu,Tbo),e(xu,C$),e(C$,Fbo),e(xu,Cbo),e($,Mbo),e($,ku),e(ku,Doe),e(Doe,Ebo),e(ku,ybo),e(ku,M$),e(M$,wbo),e(ku,Abo),e($,Lbo),e($,Ru),e(Ru,joe),e(joe,Bbo),e(Ru,xbo),e(Ru,E$),e(E$,kbo),e(Ru,Rbo),e($,Sbo),e($,Su),e(Su,qoe),e(qoe,Pbo),e(Su,$bo),e(Su,y$),e(y$,Ibo),e(Su,Nbo),e($,Dbo),e($,Pu),e(Pu,Goe),e(Goe,jbo),e(Pu,qbo),e(Pu,w$),e(w$,Gbo),e(Pu,Obo),e($,Xbo),e($,$u),e($u,Ooe),e(Ooe,Vbo),e($u,zbo),e($u,A$),e(A$,Wbo),e($u,Qbo),e($,Hbo),e($,Iu),e(Iu,Xoe),e(Xoe,Ubo),e(Iu,Jbo),e(Iu,L$),e(L$,Ybo),e(Iu,Kbo),e($,Zbo),e($,Nu),e(Nu,Voe),e(Voe,e5o),e(Nu,o5o),e(Nu,B$),e(B$,r5o),e(Nu,t5o),e($,a5o),e($,Du),e(Du,zoe),e(zoe,n5o),e(Du,s5o),e(Du,x$),e(x$,l5o),e(Du,i5o),e($,d5o),e($,ju),e(ju,Woe),e(Woe,c5o),e(ju,f5o),e(ju,k$),e(k$,m5o),e(ju,g5o),e($,h5o),e($,qu),e(qu,Qoe),e(Qoe,p5o),e(qu,_5o),e(qu,R$),e(R$,u5o),e(qu,b5o),e($,v5o),e($,Gu),e(Gu,Hoe),e(Hoe,T5o),e(Gu,F5o),e(Gu,S$),e(S$,C5o),e(Gu,M5o),e($,E5o),e($,Ou),e(Ou,Uoe),e(Uoe,y5o),e(Ou,w5o),e(Ou,P$),e(P$,A5o),e(Ou,L5o),e($,B5o),e($,Xu),e(Xu,Joe),e(Joe,x5o),e(Xu,k5o),e(Xu,$$),e($$,R5o),e(Xu,S5o),e($,P5o),e($,Vu),e(Vu,Yoe),e(Yoe,$5o),e(Vu,I5o),e(Vu,I$),e(I$,N5o),e(Vu,D5o),e($,j5o),e($,zu),e(zu,Koe),e(Koe,q5o),e(zu,G5o),e(zu,N$),e(N$,O5o),e(zu,X5o),e($,V5o),e($,Wu),e(Wu,Zoe),e(Zoe,z5o),e(Wu,W5o),e(Wu,D$),e(D$,Q5o),e(Wu,H5o),e($,U5o),e($,Qu),e(Qu,ere),e(ere,J5o),e(Qu,Y5o),e(Qu,j$),e(j$,K5o),e(Qu,Z5o),e($,e2o),e($,Hu),e(Hu,ore),e(ore,o2o),e(Hu,r2o),e(Hu,q$),e(q$,t2o),e(Hu,a2o),e($,n2o),e($,Uu),e(Uu,rre),e(rre,s2o),e(Uu,l2o),e(Uu,G$),e(G$,i2o),e(Uu,d2o),e($,c2o),e($,Ju),e(Ju,tre),e(tre,f2o),e(Ju,m2o),e(Ju,O$),e(O$,g2o),e(Ju,h2o),e(je,p2o),e(je,Yu),e(Yu,_2o),e(Yu,are),e(are,u2o),e(Yu,b2o),e(Yu,nre),e(nre,v2o),e(je,T2o),e(je,sre),e(sre,F2o),e(je,C2o),g(l3,je,null),b(c,Eke,u),b(c,nd,u),e(nd,Ku),e(Ku,lre),g(i3,lre,null),e(nd,M2o),e(nd,ire),e(ire,E2o),b(c,yke,u),b(c,Zo,u),g(d3,Zo,null),e(Zo,y2o),e(Zo,sd),e(sd,w2o),e(sd,dre),e(dre,A2o),e(sd,L2o),e(sd,cre),e(cre,B2o),e(sd,x2o),e(Zo,k2o),e(Zo,c3),e(c3,R2o),e(c3,fre),e(fre,S2o),e(c3,P2o),e(Zo,$2o),e(Zo,Qr),g(f3,Qr,null),e(Qr,I2o),e(Qr,mre),e(mre,N2o),e(Qr,D2o),e(Qr,ld),e(ld,j2o),e(ld,gre),e(gre,q2o),e(ld,G2o),e(ld,hre),e(hre,O2o),e(ld,X2o),e(Qr,V2o),e(Qr,pre),e(pre,z2o),e(Qr,W2o),g(m3,Qr,null),e(Zo,Q2o),e(Zo,qe),g(g3,qe,null),e(qe,H2o),e(qe,_re),e(_re,U2o),e(qe,J2o),e(qe,Qa),e(Qa,Y2o),e(Qa,ure),e(ure,K2o),e(Qa,Z2o),e(Qa,bre),e(bre,evo),e(Qa,ovo),e(Qa,vre),e(vre,rvo),e(Qa,tvo),e(qe,avo),e(qe,I),e(I,Zu),e(Zu,Tre),e(Tre,nvo),e(Zu,svo),e(Zu,X$),e(X$,lvo),e(Zu,ivo),e(I,dvo),e(I,e1),e(e1,Fre),e(Fre,cvo),e(e1,fvo),e(e1,V$),e(V$,mvo),e(e1,gvo),e(I,hvo),e(I,o1),e(o1,Cre),e(Cre,pvo),e(o1,_vo),e(o1,z$),e(z$,uvo),e(o1,bvo),e(I,vvo),e(I,r1),e(r1,Mre),e(Mre,Tvo),e(r1,Fvo),e(r1,W$),e(W$,Cvo),e(r1,Mvo),e(I,Evo),e(I,t1),e(t1,Ere),e(Ere,yvo),e(t1,wvo),e(t1,Q$),e(Q$,Avo),e(t1,Lvo),e(I,Bvo),e(I,a1),e(a1,yre),e(yre,xvo),e(a1,kvo),e(a1,H$),e(H$,Rvo),e(a1,Svo),e(I,Pvo),e(I,n1),e(n1,wre),e(wre,$vo),e(n1,Ivo),e(n1,U$),e(U$,Nvo),e(n1,Dvo),e(I,jvo),e(I,s1),e(s1,Are),e(Are,qvo),e(s1,Gvo),e(s1,J$),e(J$,Ovo),e(s1,Xvo),e(I,Vvo),e(I,l1),e(l1,Lre),e(Lre,zvo),e(l1,Wvo),e(l1,Y$),e(Y$,Qvo),e(l1,Hvo),e(I,Uvo),e(I,i1),e(i1,Bre),e(Bre,Jvo),e(i1,Yvo),e(i1,K$),e(K$,Kvo),e(i1,Zvo),e(I,eTo),e(I,d1),e(d1,xre),e(xre,oTo),e(d1,rTo),e(d1,Z$),e(Z$,tTo),e(d1,aTo),e(I,nTo),e(I,c1),e(c1,kre),e(kre,sTo),e(c1,lTo),e(c1,eI),e(eI,iTo),e(c1,dTo),e(I,cTo),e(I,f1),e(f1,Rre),e(Rre,fTo),e(f1,mTo),e(f1,oI),e(oI,gTo),e(f1,hTo),e(I,pTo),e(I,m1),e(m1,Sre),e(Sre,_To),e(m1,uTo),e(m1,rI),e(rI,bTo),e(m1,vTo),e(I,TTo),e(I,g1),e(g1,Pre),e(Pre,FTo),e(g1,CTo),e(g1,tI),e(tI,MTo),e(g1,ETo),e(I,yTo),e(I,h1),e(h1,$re),e($re,wTo),e(h1,ATo),e(h1,aI),e(aI,LTo),e(h1,BTo),e(I,xTo),e(I,p1),e(p1,Ire),e(Ire,kTo),e(p1,RTo),e(p1,nI),e(nI,STo),e(p1,PTo),e(I,$To),e(I,_1),e(_1,Nre),e(Nre,ITo),e(_1,NTo),e(_1,sI),e(sI,DTo),e(_1,jTo),e(I,qTo),e(I,u1),e(u1,Dre),e(Dre,GTo),e(u1,OTo),e(u1,lI),e(lI,XTo),e(u1,VTo),e(I,zTo),e(I,b1),e(b1,jre),e(jre,WTo),e(b1,QTo),e(b1,iI),e(iI,HTo),e(b1,UTo),e(I,JTo),e(I,v1),e(v1,qre),e(qre,YTo),e(v1,KTo),e(v1,dI),e(dI,ZTo),e(v1,e7o),e(I,o7o),e(I,T1),e(T1,Gre),e(Gre,r7o),e(T1,t7o),e(T1,cI),e(cI,a7o),e(T1,n7o),e(I,s7o),e(I,F1),e(F1,Ore),e(Ore,l7o),e(F1,i7o),e(F1,fI),e(fI,d7o),e(F1,c7o),e(I,f7o),e(I,C1),e(C1,Xre),e(Xre,m7o),e(C1,g7o),e(C1,mI),e(mI,h7o),e(C1,p7o),e(I,_7o),e(I,M1),e(M1,Vre),e(Vre,u7o),e(M1,b7o),e(M1,gI),e(gI,v7o),e(M1,T7o),e(I,F7o),e(I,E1),e(E1,zre),e(zre,C7o),e(E1,M7o),e(E1,hI),e(hI,E7o),e(E1,y7o),e(I,w7o),e(I,y1),e(y1,Wre),e(Wre,A7o),e(y1,L7o),e(y1,pI),e(pI,B7o),e(y1,x7o),e(I,k7o),e(I,w1),e(w1,Qre),e(Qre,R7o),e(w1,S7o),e(w1,_I),e(_I,P7o),e(w1,$7o),e(I,I7o),e(I,A1),e(A1,Hre),e(Hre,N7o),e(A1,D7o),e(A1,uI),e(uI,j7o),e(A1,q7o),e(I,G7o),e(I,L1),e(L1,Ure),e(Ure,O7o),e(L1,X7o),e(L1,bI),e(bI,V7o),e(L1,z7o),e(I,W7o),e(I,B1),e(B1,Jre),e(Jre,Q7o),e(B1,H7o),e(B1,Yre),e(Yre,U7o),e(B1,J7o),e(I,Y7o),e(I,x1),e(x1,Kre),e(Kre,K7o),e(x1,Z7o),e(x1,vI),e(vI,e8o),e(x1,o8o),e(I,r8o),e(I,k1),e(k1,Zre),e(Zre,t8o),e(k1,a8o),e(k1,TI),e(TI,n8o),e(k1,s8o),e(I,l8o),e(I,R1),e(R1,ete),e(ete,i8o),e(R1,d8o),e(R1,FI),e(FI,c8o),e(R1,f8o),e(I,m8o),e(I,S1),e(S1,ote),e(ote,g8o),e(S1,h8o),e(S1,CI),e(CI,p8o),e(S1,_8o),e(qe,u8o),e(qe,P1),e(P1,b8o),e(P1,rte),e(rte,v8o),e(P1,T8o),e(P1,tte),e(tte,F8o),e(qe,C8o),e(qe,ate),e(ate,M8o),e(qe,E8o),g(h3,qe,null),b(c,wke,u),b(c,id,u),e(id,$1),e($1,nte),g(p3,nte,null),e(id,y8o),e(id,ste),e(ste,w8o),b(c,Ake,u),b(c,er,u),g(_3,er,null),e(er,A8o),e(er,dd),e(dd,L8o),e(dd,lte),e(lte,B8o),e(dd,x8o),e(dd,ite),e(ite,k8o),e(dd,R8o),e(er,S8o),e(er,u3),e(u3,P8o),e(u3,dte),e(dte,$8o),e(u3,I8o),e(er,N8o),e(er,Hr),g(b3,Hr,null),e(Hr,D8o),e(Hr,cte),e(cte,j8o),e(Hr,q8o),e(Hr,cd),e(cd,G8o),e(cd,fte),e(fte,O8o),e(cd,X8o),e(cd,mte),e(mte,V8o),e(cd,z8o),e(Hr,W8o),e(Hr,gte),e(gte,Q8o),e(Hr,H8o),g(v3,Hr,null),e(er,U8o),e(er,Ge),g(T3,Ge,null),e(Ge,J8o),e(Ge,hte),e(hte,Y8o),e(Ge,K8o),e(Ge,Ha),e(Ha,Z8o),e(Ha,pte),e(pte,eFo),e(Ha,oFo),e(Ha,_te),e(_te,rFo),e(Ha,tFo),e(Ha,ute),e(ute,aFo),e(Ha,nFo),e(Ge,sFo),e(Ge,se),e(se,I1),e(I1,bte),e(bte,lFo),e(I1,iFo),e(I1,MI),e(MI,dFo),e(I1,cFo),e(se,fFo),e(se,N1),e(N1,vte),e(vte,mFo),e(N1,gFo),e(N1,EI),e(EI,hFo),e(N1,pFo),e(se,_Fo),e(se,D1),e(D1,Tte),e(Tte,uFo),e(D1,bFo),e(D1,yI),e(yI,vFo),e(D1,TFo),e(se,FFo),e(se,j1),e(j1,Fte),e(Fte,CFo),e(j1,MFo),e(j1,wI),e(wI,EFo),e(j1,yFo),e(se,wFo),e(se,q1),e(q1,Cte),e(Cte,AFo),e(q1,LFo),e(q1,AI),e(AI,BFo),e(q1,xFo),e(se,kFo),e(se,G1),e(G1,Mte),e(Mte,RFo),e(G1,SFo),e(G1,LI),e(LI,PFo),e(G1,$Fo),e(se,IFo),e(se,O1),e(O1,Ete),e(Ete,NFo),e(O1,DFo),e(O1,BI),e(BI,jFo),e(O1,qFo),e(se,GFo),e(se,X1),e(X1,yte),e(yte,OFo),e(X1,XFo),e(X1,xI),e(xI,VFo),e(X1,zFo),e(se,WFo),e(se,V1),e(V1,wte),e(wte,QFo),e(V1,HFo),e(V1,kI),e(kI,UFo),e(V1,JFo),e(se,YFo),e(se,z1),e(z1,Ate),e(Ate,KFo),e(z1,ZFo),e(z1,RI),e(RI,eCo),e(z1,oCo),e(se,rCo),e(se,W1),e(W1,Lte),e(Lte,tCo),e(W1,aCo),e(W1,SI),e(SI,nCo),e(W1,sCo),e(se,lCo),e(se,Q1),e(Q1,Bte),e(Bte,iCo),e(Q1,dCo),e(Q1,PI),e(PI,cCo),e(Q1,fCo),e(se,mCo),e(se,H1),e(H1,xte),e(xte,gCo),e(H1,hCo),e(H1,$I),e($I,pCo),e(H1,_Co),e(se,uCo),e(se,U1),e(U1,kte),e(kte,bCo),e(U1,vCo),e(U1,II),e(II,TCo),e(U1,FCo),e(se,CCo),e(se,J1),e(J1,Rte),e(Rte,MCo),e(J1,ECo),e(J1,NI),e(NI,yCo),e(J1,wCo),e(se,ACo),e(se,Y1),e(Y1,Ste),e(Ste,LCo),e(Y1,BCo),e(Y1,DI),e(DI,xCo),e(Y1,kCo),e(Ge,RCo),e(Ge,K1),e(K1,SCo),e(K1,Pte),e(Pte,PCo),e(K1,$Co),e(K1,$te),e($te,ICo),e(Ge,NCo),e(Ge,Ite),e(Ite,DCo),e(Ge,jCo),g(F3,Ge,null),b(c,Lke,u),b(c,fd,u),e(fd,Z1),e(Z1,Nte),g(C3,Nte,null),e(fd,qCo),e(fd,Dte),e(Dte,GCo),b(c,Bke,u),b(c,or,u),g(M3,or,null),e(or,OCo),e(or,md),e(md,XCo),e(md,jte),e(jte,VCo),e(md,zCo),e(md,qte),e(qte,WCo),e(md,QCo),e(or,HCo),e(or,E3),e(E3,UCo),e(E3,Gte),e(Gte,JCo),e(E3,YCo),e(or,KCo),e(or,Ur),g(y3,Ur,null),e(Ur,ZCo),e(Ur,Ote),e(Ote,eMo),e(Ur,oMo),e(Ur,gd),e(gd,rMo),e(gd,Xte),e(Xte,tMo),e(gd,aMo),e(gd,Vte),e(Vte,nMo),e(gd,sMo),e(Ur,lMo),e(Ur,zte),e(zte,iMo),e(Ur,dMo),g(w3,Ur,null),e(or,cMo),e(or,Oe),g(A3,Oe,null),e(Oe,fMo),e(Oe,Wte),e(Wte,mMo),e(Oe,gMo),e(Oe,Ua),e(Ua,hMo),e(Ua,Qte),e(Qte,pMo),e(Ua,_Mo),e(Ua,Hte),e(Hte,uMo),e(Ua,bMo),e(Ua,Ute),e(Ute,vMo),e(Ua,TMo),e(Oe,FMo),e(Oe,A),e(A,eb),e(eb,Jte),e(Jte,CMo),e(eb,MMo),e(eb,jI),e(jI,EMo),e(eb,yMo),e(A,wMo),e(A,ob),e(ob,Yte),e(Yte,AMo),e(ob,LMo),e(ob,qI),e(qI,BMo),e(ob,xMo),e(A,kMo),e(A,rb),e(rb,Kte),e(Kte,RMo),e(rb,SMo),e(rb,GI),e(GI,PMo),e(rb,$Mo),e(A,IMo),e(A,tb),e(tb,Zte),e(Zte,NMo),e(tb,DMo),e(tb,OI),e(OI,jMo),e(tb,qMo),e(A,GMo),e(A,ab),e(ab,eae),e(eae,OMo),e(ab,XMo),e(ab,XI),e(XI,VMo),e(ab,zMo),e(A,WMo),e(A,nb),e(nb,oae),e(oae,QMo),e(nb,HMo),e(nb,VI),e(VI,UMo),e(nb,JMo),e(A,YMo),e(A,sb),e(sb,rae),e(rae,KMo),e(sb,ZMo),e(sb,zI),e(zI,e4o),e(sb,o4o),e(A,r4o),e(A,lb),e(lb,tae),e(tae,t4o),e(lb,a4o),e(lb,WI),e(WI,n4o),e(lb,s4o),e(A,l4o),e(A,ib),e(ib,aae),e(aae,i4o),e(ib,d4o),e(ib,QI),e(QI,c4o),e(ib,f4o),e(A,m4o),e(A,db),e(db,nae),e(nae,g4o),e(db,h4o),e(db,HI),e(HI,p4o),e(db,_4o),e(A,u4o),e(A,cb),e(cb,sae),e(sae,b4o),e(cb,v4o),e(cb,UI),e(UI,T4o),e(cb,F4o),e(A,C4o),e(A,fb),e(fb,lae),e(lae,M4o),e(fb,E4o),e(fb,JI),e(JI,y4o),e(fb,w4o),e(A,A4o),e(A,mb),e(mb,iae),e(iae,L4o),e(mb,B4o),e(mb,YI),e(YI,x4o),e(mb,k4o),e(A,R4o),e(A,gb),e(gb,dae),e(dae,S4o),e(gb,P4o),e(gb,KI),e(KI,$4o),e(gb,I4o),e(A,N4o),e(A,hb),e(hb,cae),e(cae,D4o),e(hb,j4o),e(hb,ZI),e(ZI,q4o),e(hb,G4o),e(A,O4o),e(A,pb),e(pb,fae),e(fae,X4o),e(pb,V4o),e(pb,eN),e(eN,z4o),e(pb,W4o),e(A,Q4o),e(A,_b),e(_b,mae),e(mae,H4o),e(_b,U4o),e(_b,oN),e(oN,J4o),e(_b,Y4o),e(A,K4o),e(A,ub),e(ub,gae),e(gae,Z4o),e(ub,eEo),e(ub,rN),e(rN,oEo),e(ub,rEo),e(A,tEo),e(A,bb),e(bb,hae),e(hae,aEo),e(bb,nEo),e(bb,tN),e(tN,sEo),e(bb,lEo),e(A,iEo),e(A,vb),e(vb,pae),e(pae,dEo),e(vb,cEo),e(vb,aN),e(aN,fEo),e(vb,mEo),e(A,gEo),e(A,Tb),e(Tb,_ae),e(_ae,hEo),e(Tb,pEo),e(Tb,nN),e(nN,_Eo),e(Tb,uEo),e(A,bEo),e(A,Fb),e(Fb,uae),e(uae,vEo),e(Fb,TEo),e(Fb,sN),e(sN,FEo),e(Fb,CEo),e(A,MEo),e(A,Cb),e(Cb,bae),e(bae,EEo),e(Cb,yEo),e(Cb,lN),e(lN,wEo),e(Cb,AEo),e(A,LEo),e(A,Mb),e(Mb,vae),e(vae,BEo),e(Mb,xEo),e(Mb,iN),e(iN,kEo),e(Mb,REo),e(A,SEo),e(A,Eb),e(Eb,Tae),e(Tae,PEo),e(Eb,$Eo),e(Eb,dN),e(dN,IEo),e(Eb,NEo),e(A,DEo),e(A,yb),e(yb,Fae),e(Fae,jEo),e(yb,qEo),e(yb,cN),e(cN,GEo),e(yb,OEo),e(A,XEo),e(A,wb),e(wb,Cae),e(Cae,VEo),e(wb,zEo),e(wb,fN),e(fN,WEo),e(wb,QEo),e(A,HEo),e(A,Ab),e(Ab,Mae),e(Mae,UEo),e(Ab,JEo),e(Ab,mN),e(mN,YEo),e(Ab,KEo),e(A,ZEo),e(A,Lb),e(Lb,Eae),e(Eae,e3o),e(Lb,o3o),e(Lb,gN),e(gN,r3o),e(Lb,t3o),e(A,a3o),e(A,Bb),e(Bb,yae),e(yae,n3o),e(Bb,s3o),e(Bb,hN),e(hN,l3o),e(Bb,i3o),e(A,d3o),e(A,xb),e(xb,wae),e(wae,c3o),e(xb,f3o),e(xb,pN),e(pN,m3o),e(xb,g3o),e(A,h3o),e(A,kb),e(kb,Aae),e(Aae,p3o),e(kb,_3o),e(kb,_N),e(_N,u3o),e(kb,b3o),e(A,v3o),e(A,Rb),e(Rb,Lae),e(Lae,T3o),e(Rb,F3o),e(Rb,uN),e(uN,C3o),e(Rb,M3o),e(A,E3o),e(A,Sb),e(Sb,Bae),e(Bae,y3o),e(Sb,w3o),e(Sb,bN),e(bN,A3o),e(Sb,L3o),e(A,B3o),e(A,Pb),e(Pb,xae),e(xae,x3o),e(Pb,k3o),e(Pb,vN),e(vN,R3o),e(Pb,S3o),e(A,P3o),e(A,$b),e($b,kae),e(kae,$3o),e($b,I3o),e($b,TN),e(TN,N3o),e($b,D3o),e(A,j3o),e(A,Ib),e(Ib,Rae),e(Rae,q3o),e(Ib,G3o),e(Ib,FN),e(FN,O3o),e(Ib,X3o),e(A,V3o),e(A,Nb),e(Nb,Sae),e(Sae,z3o),e(Nb,W3o),e(Nb,CN),e(CN,Q3o),e(Nb,H3o),e(A,U3o),e(A,Db),e(Db,Pae),e(Pae,J3o),e(Db,Y3o),e(Db,MN),e(MN,K3o),e(Db,Z3o),e(A,eyo),e(A,jb),e(jb,$ae),e($ae,oyo),e(jb,ryo),e(jb,EN),e(EN,tyo),e(jb,ayo),e(A,nyo),e(A,qb),e(qb,Iae),e(Iae,syo),e(qb,lyo),e(qb,yN),e(yN,iyo),e(qb,dyo),e(A,cyo),e(A,Gb),e(Gb,Nae),e(Nae,fyo),e(Gb,myo),e(Gb,wN),e(wN,gyo),e(Gb,hyo),e(A,pyo),e(A,Ob),e(Ob,Dae),e(Dae,_yo),e(Ob,uyo),e(Ob,AN),e(AN,byo),e(Ob,vyo),e(A,Tyo),e(A,Xb),e(Xb,jae),e(jae,Fyo),e(Xb,Cyo),e(Xb,LN),e(LN,Myo),e(Xb,Eyo),e(A,yyo),e(A,Vb),e(Vb,qae),e(qae,wyo),e(Vb,Ayo),e(Vb,BN),e(BN,Lyo),e(Vb,Byo),e(A,xyo),e(A,zb),e(zb,Gae),e(Gae,kyo),e(zb,Ryo),e(zb,xN),e(xN,Syo),e(zb,Pyo),e(Oe,$yo),e(Oe,Wb),e(Wb,Iyo),e(Wb,Oae),e(Oae,Nyo),e(Wb,Dyo),e(Wb,Xae),e(Xae,jyo),e(Oe,qyo),e(Oe,Vae),e(Vae,Gyo),e(Oe,Oyo),g(L3,Oe,null),b(c,xke,u),b(c,hd,u),e(hd,Qb),e(Qb,zae),g(B3,zae,null),e(hd,Xyo),e(hd,Wae),e(Wae,Vyo),b(c,kke,u),b(c,rr,u),g(x3,rr,null),e(rr,zyo),e(rr,pd),e(pd,Wyo),e(pd,Qae),e(Qae,Qyo),e(pd,Hyo),e(pd,Hae),e(Hae,Uyo),e(pd,Jyo),e(rr,Yyo),e(rr,k3),e(k3,Kyo),e(k3,Uae),e(Uae,Zyo),e(k3,ewo),e(rr,owo),e(rr,Jr),g(R3,Jr,null),e(Jr,rwo),e(Jr,Jae),e(Jae,two),e(Jr,awo),e(Jr,_d),e(_d,nwo),e(_d,Yae),e(Yae,swo),e(_d,lwo),e(_d,Kae),e(Kae,iwo),e(_d,dwo),e(Jr,cwo),e(Jr,Zae),e(Zae,fwo),e(Jr,mwo),g(S3,Jr,null),e(rr,gwo),e(rr,Xe),g(P3,Xe,null),e(Xe,hwo),e(Xe,ene),e(ene,pwo),e(Xe,_wo),e(Xe,Ja),e(Ja,uwo),e(Ja,one),e(one,bwo),e(Ja,vwo),e(Ja,rne),e(rne,Two),e(Ja,Fwo),e(Ja,tne),e(tne,Cwo),e(Ja,Mwo),e(Xe,Ewo),e(Xe,G),e(G,Hb),e(Hb,ane),e(ane,ywo),e(Hb,wwo),e(Hb,kN),e(kN,Awo),e(Hb,Lwo),e(G,Bwo),e(G,Ub),e(Ub,nne),e(nne,xwo),e(Ub,kwo),e(Ub,RN),e(RN,Rwo),e(Ub,Swo),e(G,Pwo),e(G,Jb),e(Jb,sne),e(sne,$wo),e(Jb,Iwo),e(Jb,SN),e(SN,Nwo),e(Jb,Dwo),e(G,jwo),e(G,Yb),e(Yb,lne),e(lne,qwo),e(Yb,Gwo),e(Yb,PN),e(PN,Owo),e(Yb,Xwo),e(G,Vwo),e(G,Kb),e(Kb,ine),e(ine,zwo),e(Kb,Wwo),e(Kb,$N),e($N,Qwo),e(Kb,Hwo),e(G,Uwo),e(G,Zb),e(Zb,dne),e(dne,Jwo),e(Zb,Ywo),e(Zb,IN),e(IN,Kwo),e(Zb,Zwo),e(G,e6o),e(G,e5),e(e5,cne),e(cne,o6o),e(e5,r6o),e(e5,NN),e(NN,t6o),e(e5,a6o),e(G,n6o),e(G,o5),e(o5,fne),e(fne,s6o),e(o5,l6o),e(o5,DN),e(DN,i6o),e(o5,d6o),e(G,c6o),e(G,r5),e(r5,mne),e(mne,f6o),e(r5,m6o),e(r5,jN),e(jN,g6o),e(r5,h6o),e(G,p6o),e(G,t5),e(t5,gne),e(gne,_6o),e(t5,u6o),e(t5,qN),e(qN,b6o),e(t5,v6o),e(G,T6o),e(G,a5),e(a5,hne),e(hne,F6o),e(a5,C6o),e(a5,GN),e(GN,M6o),e(a5,E6o),e(G,y6o),e(G,n5),e(n5,pne),e(pne,w6o),e(n5,A6o),e(n5,ON),e(ON,L6o),e(n5,B6o),e(G,x6o),e(G,s5),e(s5,_ne),e(_ne,k6o),e(s5,R6o),e(s5,XN),e(XN,S6o),e(s5,P6o),e(G,$6o),e(G,l5),e(l5,une),e(une,I6o),e(l5,N6o),e(l5,VN),e(VN,D6o),e(l5,j6o),e(G,q6o),e(G,i5),e(i5,bne),e(bne,G6o),e(i5,O6o),e(i5,zN),e(zN,X6o),e(i5,V6o),e(G,z6o),e(G,d5),e(d5,vne),e(vne,W6o),e(d5,Q6o),e(d5,WN),e(WN,H6o),e(d5,U6o),e(G,J6o),e(G,c5),e(c5,Tne),e(Tne,Y6o),e(c5,K6o),e(c5,QN),e(QN,Z6o),e(c5,eAo),e(G,oAo),e(G,f5),e(f5,Fne),e(Fne,rAo),e(f5,tAo),e(f5,HN),e(HN,aAo),e(f5,nAo),e(G,sAo),e(G,m5),e(m5,Cne),e(Cne,lAo),e(m5,iAo),e(m5,UN),e(UN,dAo),e(m5,cAo),e(G,fAo),e(G,g5),e(g5,Mne),e(Mne,mAo),e(g5,gAo),e(g5,JN),e(JN,hAo),e(g5,pAo),e(G,_Ao),e(G,h5),e(h5,Ene),e(Ene,uAo),e(h5,bAo),e(h5,YN),e(YN,vAo),e(h5,TAo),e(G,FAo),e(G,p5),e(p5,yne),e(yne,CAo),e(p5,MAo),e(p5,KN),e(KN,EAo),e(p5,yAo),e(G,wAo),e(G,_5),e(_5,wne),e(wne,AAo),e(_5,LAo),e(_5,ZN),e(ZN,BAo),e(_5,xAo),e(G,kAo),e(G,u5),e(u5,Ane),e(Ane,RAo),e(u5,SAo),e(u5,eD),e(eD,PAo),e(u5,$Ao),e(G,IAo),e(G,b5),e(b5,Lne),e(Lne,NAo),e(b5,DAo),e(b5,oD),e(oD,jAo),e(b5,qAo),e(G,GAo),e(G,v5),e(v5,Bne),e(Bne,OAo),e(v5,XAo),e(v5,rD),e(rD,VAo),e(v5,zAo),e(G,WAo),e(G,T5),e(T5,xne),e(xne,QAo),e(T5,HAo),e(T5,tD),e(tD,UAo),e(T5,JAo),e(G,YAo),e(G,F5),e(F5,kne),e(kne,KAo),e(F5,ZAo),e(F5,aD),e(aD,e0o),e(F5,o0o),e(Xe,r0o),e(Xe,C5),e(C5,t0o),e(C5,Rne),e(Rne,a0o),e(C5,n0o),e(C5,Sne),e(Sne,s0o),e(Xe,l0o),e(Xe,Pne),e(Pne,i0o),e(Xe,d0o),g($3,Xe,null),b(c,Rke,u),b(c,ud,u),e(ud,M5),e(M5,$ne),g(I3,$ne,null),e(ud,c0o),e(ud,Ine),e(Ine,f0o),b(c,Ske,u),b(c,tr,u),g(N3,tr,null),e(tr,m0o),e(tr,bd),e(bd,g0o),e(bd,Nne),e(Nne,h0o),e(bd,p0o),e(bd,Dne),e(Dne,_0o),e(bd,u0o),e(tr,b0o),e(tr,D3),e(D3,v0o),e(D3,jne),e(jne,T0o),e(D3,F0o),e(tr,C0o),e(tr,Yr),g(j3,Yr,null),e(Yr,M0o),e(Yr,qne),e(qne,E0o),e(Yr,y0o),e(Yr,vd),e(vd,w0o),e(vd,Gne),e(Gne,A0o),e(vd,L0o),e(vd,One),e(One,B0o),e(vd,x0o),e(Yr,k0o),e(Yr,Xne),e(Xne,R0o),e(Yr,S0o),g(q3,Yr,null),e(tr,P0o),e(tr,Ve),g(G3,Ve,null),e(Ve,$0o),e(Ve,Vne),e(Vne,I0o),e(Ve,N0o),e(Ve,Ya),e(Ya,D0o),e(Ya,zne),e(zne,j0o),e(Ya,q0o),e(Ya,Wne),e(Wne,G0o),e(Ya,O0o),e(Ya,Qne),e(Qne,X0o),e(Ya,V0o),e(Ve,z0o),e(Ve,da),e(da,E5),e(E5,Hne),e(Hne,W0o),e(E5,Q0o),e(E5,nD),e(nD,H0o),e(E5,U0o),e(da,J0o),e(da,y5),e(y5,Une),e(Une,Y0o),e(y5,K0o),e(y5,sD),e(sD,Z0o),e(y5,eLo),e(da,oLo),e(da,w5),e(w5,Jne),e(Jne,rLo),e(w5,tLo),e(w5,lD),e(lD,aLo),e(w5,nLo),e(da,sLo),e(da,A5),e(A5,Yne),e(Yne,lLo),e(A5,iLo),e(A5,iD),e(iD,dLo),e(A5,cLo),e(da,fLo),e(da,L5),e(L5,Kne),e(Kne,mLo),e(L5,gLo),e(L5,dD),e(dD,hLo),e(L5,pLo),e(Ve,_Lo),e(Ve,B5),e(B5,uLo),e(B5,Zne),e(Zne,bLo),e(B5,vLo),e(B5,ese),e(ese,TLo),e(Ve,FLo),e(Ve,ose),e(ose,CLo),e(Ve,MLo),g(O3,Ve,null),b(c,Pke,u),b(c,Td,u),e(Td,x5),e(x5,rse),g(X3,rse,null),e(Td,ELo),e(Td,tse),e(tse,yLo),b(c,$ke,u),b(c,ar,u),g(V3,ar,null),e(ar,wLo),e(ar,Fd),e(Fd,ALo),e(Fd,ase),e(ase,LLo),e(Fd,BLo),e(Fd,nse),e(nse,xLo),e(Fd,kLo),e(ar,RLo),e(ar,z3),e(z3,SLo),e(z3,sse),e(sse,PLo),e(z3,$Lo),e(ar,ILo),e(ar,Kr),g(W3,Kr,null),e(Kr,NLo),e(Kr,lse),e(lse,DLo),e(Kr,jLo),e(Kr,Cd),e(Cd,qLo),e(Cd,ise),e(ise,GLo),e(Cd,OLo),e(Cd,dse),e(dse,XLo),e(Cd,VLo),e(Kr,zLo),e(Kr,cse),e(cse,WLo),e(Kr,QLo),g(Q3,Kr,null),e(ar,HLo),e(ar,ze),g(H3,ze,null),e(ze,ULo),e(ze,fse),e(fse,JLo),e(ze,YLo),e(ze,Ka),e(Ka,KLo),e(Ka,mse),e(mse,ZLo),e(Ka,e9o),e(Ka,gse),e(gse,o9o),e(Ka,r9o),e(Ka,hse),e(hse,t9o),e(Ka,a9o),e(ze,n9o),e(ze,j),e(j,k5),e(k5,pse),e(pse,s9o),e(k5,l9o),e(k5,cD),e(cD,i9o),e(k5,d9o),e(j,c9o),e(j,R5),e(R5,_se),e(_se,f9o),e(R5,m9o),e(R5,fD),e(fD,g9o),e(R5,h9o),e(j,p9o),e(j,S5),e(S5,use),e(use,_9o),e(S5,u9o),e(S5,mD),e(mD,b9o),e(S5,v9o),e(j,T9o),e(j,P5),e(P5,bse),e(bse,F9o),e(P5,C9o),e(P5,gD),e(gD,M9o),e(P5,E9o),e(j,y9o),e(j,$5),e($5,vse),e(vse,w9o),e($5,A9o),e($5,hD),e(hD,L9o),e($5,B9o),e(j,x9o),e(j,I5),e(I5,Tse),e(Tse,k9o),e(I5,R9o),e(I5,pD),e(pD,S9o),e(I5,P9o),e(j,$9o),e(j,N5),e(N5,Fse),e(Fse,I9o),e(N5,N9o),e(N5,_D),e(_D,D9o),e(N5,j9o),e(j,q9o),e(j,D5),e(D5,Cse),e(Cse,G9o),e(D5,O9o),e(D5,uD),e(uD,X9o),e(D5,V9o),e(j,z9o),e(j,j5),e(j5,Mse),e(Mse,W9o),e(j5,Q9o),e(j5,bD),e(bD,H9o),e(j5,U9o),e(j,J9o),e(j,q5),e(q5,Ese),e(Ese,Y9o),e(q5,K9o),e(q5,vD),e(vD,Z9o),e(q5,eBo),e(j,oBo),e(j,G5),e(G5,yse),e(yse,rBo),e(G5,tBo),e(G5,TD),e(TD,aBo),e(G5,nBo),e(j,sBo),e(j,O5),e(O5,wse),e(wse,lBo),e(O5,iBo),e(O5,FD),e(FD,dBo),e(O5,cBo),e(j,fBo),e(j,X5),e(X5,Ase),e(Ase,mBo),e(X5,gBo),e(X5,CD),e(CD,hBo),e(X5,pBo),e(j,_Bo),e(j,V5),e(V5,Lse),e(Lse,uBo),e(V5,bBo),e(V5,MD),e(MD,vBo),e(V5,TBo),e(j,FBo),e(j,z5),e(z5,Bse),e(Bse,CBo),e(z5,MBo),e(z5,ED),e(ED,EBo),e(z5,yBo),e(j,wBo),e(j,W5),e(W5,xse),e(xse,ABo),e(W5,LBo),e(W5,yD),e(yD,BBo),e(W5,xBo),e(j,kBo),e(j,Q5),e(Q5,kse),e(kse,RBo),e(Q5,SBo),e(Q5,wD),e(wD,PBo),e(Q5,$Bo),e(j,IBo),e(j,H5),e(H5,Rse),e(Rse,NBo),e(H5,DBo),e(H5,AD),e(AD,jBo),e(H5,qBo),e(j,GBo),e(j,U5),e(U5,Sse),e(Sse,OBo),e(U5,XBo),e(U5,LD),e(LD,VBo),e(U5,zBo),e(j,WBo),e(j,J5),e(J5,Pse),e(Pse,QBo),e(J5,HBo),e(J5,BD),e(BD,UBo),e(J5,JBo),e(j,YBo),e(j,Y5),e(Y5,$se),e($se,KBo),e(Y5,ZBo),e(Y5,xD),e(xD,exo),e(Y5,oxo),e(j,rxo),e(j,K5),e(K5,Ise),e(Ise,txo),e(K5,axo),e(K5,kD),e(kD,nxo),e(K5,sxo),e(j,lxo),e(j,Z5),e(Z5,Nse),e(Nse,ixo),e(Z5,dxo),e(Z5,RD),e(RD,cxo),e(Z5,fxo),e(j,mxo),e(j,e2),e(e2,Dse),e(Dse,gxo),e(e2,hxo),e(e2,SD),e(SD,pxo),e(e2,_xo),e(j,uxo),e(j,o2),e(o2,jse),e(jse,bxo),e(o2,vxo),e(o2,PD),e(PD,Txo),e(o2,Fxo),e(j,Cxo),e(j,r2),e(r2,qse),e(qse,Mxo),e(r2,Exo),e(r2,$D),e($D,yxo),e(r2,wxo),e(j,Axo),e(j,t2),e(t2,Gse),e(Gse,Lxo),e(t2,Bxo),e(t2,ID),e(ID,xxo),e(t2,kxo),e(j,Rxo),e(j,a2),e(a2,Ose),e(Ose,Sxo),e(a2,Pxo),e(a2,ND),e(ND,$xo),e(a2,Ixo),e(j,Nxo),e(j,n2),e(n2,Xse),e(Xse,Dxo),e(n2,jxo),e(n2,DD),e(DD,qxo),e(n2,Gxo),e(j,Oxo),e(j,s2),e(s2,Vse),e(Vse,Xxo),e(s2,Vxo),e(s2,jD),e(jD,zxo),e(s2,Wxo),e(j,Qxo),e(j,l2),e(l2,zse),e(zse,Hxo),e(l2,Uxo),e(l2,qD),e(qD,Jxo),e(l2,Yxo),e(j,Kxo),e(j,i2),e(i2,Wse),e(Wse,Zxo),e(i2,eko),e(i2,GD),e(GD,oko),e(i2,rko),e(j,tko),e(j,d2),e(d2,Qse),e(Qse,ako),e(d2,nko),e(d2,OD),e(OD,sko),e(d2,lko),e(ze,iko),e(ze,c2),e(c2,dko),e(c2,Hse),e(Hse,cko),e(c2,fko),e(c2,Use),e(Use,mko),e(ze,gko),e(ze,Jse),e(Jse,hko),e(ze,pko),g(U3,ze,null),b(c,Ike,u),b(c,Md,u),e(Md,f2),e(f2,Yse),g(J3,Yse,null),e(Md,_ko),e(Md,Kse),e(Kse,uko),b(c,Nke,u),b(c,nr,u),g(Y3,nr,null),e(nr,bko),e(nr,Ed),e(Ed,vko),e(Ed,Zse),e(Zse,Tko),e(Ed,Fko),e(Ed,ele),e(ele,Cko),e(Ed,Mko),e(nr,Eko),e(nr,K3),e(K3,yko),e(K3,ole),e(ole,wko),e(K3,Ako),e(nr,Lko),e(nr,Zr),g(Z3,Zr,null),e(Zr,Bko),e(Zr,rle),e(rle,xko),e(Zr,kko),e(Zr,yd),e(yd,Rko),e(yd,tle),e(tle,Sko),e(yd,Pko),e(yd,ale),e(ale,$ko),e(yd,Iko),e(Zr,Nko),e(Zr,nle),e(nle,Dko),e(Zr,jko),g(ey,Zr,null),e(nr,qko),e(nr,We),g(oy,We,null),e(We,Gko),e(We,sle),e(sle,Oko),e(We,Xko),e(We,Za),e(Za,Vko),e(Za,lle),e(lle,zko),e(Za,Wko),e(Za,ile),e(ile,Qko),e(Za,Hko),e(Za,dle),e(dle,Uko),e(Za,Jko),e(We,Yko),e(We,R),e(R,m2),e(m2,cle),e(cle,Kko),e(m2,Zko),e(m2,XD),e(XD,eRo),e(m2,oRo),e(R,rRo),e(R,g2),e(g2,fle),e(fle,tRo),e(g2,aRo),e(g2,VD),e(VD,nRo),e(g2,sRo),e(R,lRo),e(R,h2),e(h2,mle),e(mle,iRo),e(h2,dRo),e(h2,zD),e(zD,cRo),e(h2,fRo),e(R,mRo),e(R,p2),e(p2,gle),e(gle,gRo),e(p2,hRo),e(p2,WD),e(WD,pRo),e(p2,_Ro),e(R,uRo),e(R,_2),e(_2,hle),e(hle,bRo),e(_2,vRo),e(_2,QD),e(QD,TRo),e(_2,FRo),e(R,CRo),e(R,u2),e(u2,ple),e(ple,MRo),e(u2,ERo),e(u2,HD),e(HD,yRo),e(u2,wRo),e(R,ARo),e(R,b2),e(b2,_le),e(_le,LRo),e(b2,BRo),e(b2,UD),e(UD,xRo),e(b2,kRo),e(R,RRo),e(R,v2),e(v2,ule),e(ule,SRo),e(v2,PRo),e(v2,JD),e(JD,$Ro),e(v2,IRo),e(R,NRo),e(R,T2),e(T2,ble),e(ble,DRo),e(T2,jRo),e(T2,YD),e(YD,qRo),e(T2,GRo),e(R,ORo),e(R,F2),e(F2,vle),e(vle,XRo),e(F2,VRo),e(F2,KD),e(KD,zRo),e(F2,WRo),e(R,QRo),e(R,C2),e(C2,Tle),e(Tle,HRo),e(C2,URo),e(C2,ZD),e(ZD,JRo),e(C2,YRo),e(R,KRo),e(R,M2),e(M2,Fle),e(Fle,ZRo),e(M2,eSo),e(M2,ej),e(ej,oSo),e(M2,rSo),e(R,tSo),e(R,E2),e(E2,Cle),e(Cle,aSo),e(E2,nSo),e(E2,oj),e(oj,sSo),e(E2,lSo),e(R,iSo),e(R,y2),e(y2,Mle),e(Mle,dSo),e(y2,cSo),e(y2,rj),e(rj,fSo),e(y2,mSo),e(R,gSo),e(R,w2),e(w2,Ele),e(Ele,hSo),e(w2,pSo),e(w2,tj),e(tj,_So),e(w2,uSo),e(R,bSo),e(R,A2),e(A2,yle),e(yle,vSo),e(A2,TSo),e(A2,aj),e(aj,FSo),e(A2,CSo),e(R,MSo),e(R,L2),e(L2,wle),e(wle,ESo),e(L2,ySo),e(L2,nj),e(nj,wSo),e(L2,ASo),e(R,LSo),e(R,B2),e(B2,Ale),e(Ale,BSo),e(B2,xSo),e(B2,sj),e(sj,kSo),e(B2,RSo),e(R,SSo),e(R,x2),e(x2,Lle),e(Lle,PSo),e(x2,$So),e(x2,lj),e(lj,ISo),e(x2,NSo),e(R,DSo),e(R,k2),e(k2,Ble),e(Ble,jSo),e(k2,qSo),e(k2,ij),e(ij,GSo),e(k2,OSo),e(R,XSo),e(R,R2),e(R2,xle),e(xle,VSo),e(R2,zSo),e(R2,dj),e(dj,WSo),e(R2,QSo),e(R,HSo),e(R,S2),e(S2,kle),e(kle,USo),e(S2,JSo),e(S2,cj),e(cj,YSo),e(S2,KSo),e(R,ZSo),e(R,P2),e(P2,Rle),e(Rle,ePo),e(P2,oPo),e(P2,fj),e(fj,rPo),e(P2,tPo),e(R,aPo),e(R,$2),e($2,Sle),e(Sle,nPo),e($2,sPo),e($2,mj),e(mj,lPo),e($2,iPo),e(R,dPo),e(R,I2),e(I2,Ple),e(Ple,cPo),e(I2,fPo),e(I2,gj),e(gj,mPo),e(I2,gPo),e(R,hPo),e(R,N2),e(N2,$le),e($le,pPo),e(N2,_Po),e(N2,hj),e(hj,uPo),e(N2,bPo),e(R,vPo),e(R,D2),e(D2,Ile),e(Ile,TPo),e(D2,FPo),e(D2,pj),e(pj,CPo),e(D2,MPo),e(R,EPo),e(R,j2),e(j2,Nle),e(Nle,yPo),e(j2,wPo),e(j2,_j),e(_j,APo),e(j2,LPo),e(R,BPo),e(R,q2),e(q2,Dle),e(Dle,xPo),e(q2,kPo),e(q2,uj),e(uj,RPo),e(q2,SPo),e(R,PPo),e(R,G2),e(G2,jle),e(jle,$Po),e(G2,IPo),e(G2,bj),e(bj,NPo),e(G2,DPo),e(R,jPo),e(R,O2),e(O2,qle),e(qle,qPo),e(O2,GPo),e(O2,vj),e(vj,OPo),e(O2,XPo),e(R,VPo),e(R,X2),e(X2,Gle),e(Gle,zPo),e(X2,WPo),e(X2,Tj),e(Tj,QPo),e(X2,HPo),e(R,UPo),e(R,V2),e(V2,Ole),e(Ole,JPo),e(V2,YPo),e(V2,Fj),e(Fj,KPo),e(V2,ZPo),e(R,e$o),e(R,z2),e(z2,Xle),e(Xle,o$o),e(z2,r$o),e(z2,Cj),e(Cj,t$o),e(z2,a$o),e(R,n$o),e(R,W2),e(W2,Vle),e(Vle,s$o),e(W2,l$o),e(W2,Mj),e(Mj,i$o),e(W2,d$o),e(R,c$o),e(R,Q2),e(Q2,zle),e(zle,f$o),e(Q2,m$o),e(Q2,Ej),e(Ej,g$o),e(Q2,h$o),e(R,p$o),e(R,H2),e(H2,Wle),e(Wle,_$o),e(H2,u$o),e(H2,yj),e(yj,b$o),e(H2,v$o),e(R,T$o),e(R,U2),e(U2,Qle),e(Qle,F$o),e(U2,C$o),e(U2,wj),e(wj,M$o),e(U2,E$o),e(R,y$o),e(R,J2),e(J2,Hle),e(Hle,w$o),e(J2,A$o),e(J2,Aj),e(Aj,L$o),e(J2,B$o),e(We,x$o),e(We,Y2),e(Y2,k$o),e(Y2,Ule),e(Ule,R$o),e(Y2,S$o),e(Y2,Jle),e(Jle,P$o),e(We,$$o),e(We,Yle),e(Yle,I$o),e(We,N$o),g(ry,We,null),b(c,Dke,u),b(c,wd,u),e(wd,K2),e(K2,Kle),g(ty,Kle,null),e(wd,D$o),e(wd,Zle),e(Zle,j$o),b(c,jke,u),b(c,sr,u),g(ay,sr,null),e(sr,q$o),e(sr,Ad),e(Ad,G$o),e(Ad,eie),e(eie,O$o),e(Ad,X$o),e(Ad,oie),e(oie,V$o),e(Ad,z$o),e(sr,W$o),e(sr,ny),e(ny,Q$o),e(ny,rie),e(rie,H$o),e(ny,U$o),e(sr,J$o),e(sr,et),g(sy,et,null),e(et,Y$o),e(et,tie),e(tie,K$o),e(et,Z$o),e(et,Ld),e(Ld,eIo),e(Ld,aie),e(aie,oIo),e(Ld,rIo),e(Ld,nie),e(nie,tIo),e(Ld,aIo),e(et,nIo),e(et,sie),e(sie,sIo),e(et,lIo),g(ly,et,null),e(sr,iIo),e(sr,Qe),g(iy,Qe,null),e(Qe,dIo),e(Qe,lie),e(lie,cIo),e(Qe,fIo),e(Qe,en),e(en,mIo),e(en,iie),e(iie,gIo),e(en,hIo),e(en,die),e(die,pIo),e(en,_Io),e(en,cie),e(cie,uIo),e(en,bIo),e(Qe,vIo),e(Qe,fie),e(fie,Z2),e(Z2,mie),e(mie,TIo),e(Z2,FIo),e(Z2,Lj),e(Lj,CIo),e(Z2,MIo),e(Qe,EIo),e(Qe,ev),e(ev,yIo),e(ev,gie),e(gie,wIo),e(ev,AIo),e(ev,hie),e(hie,LIo),e(Qe,BIo),e(Qe,pie),e(pie,xIo),e(Qe,kIo),g(dy,Qe,null),b(c,qke,u),b(c,Bd,u),e(Bd,ov),e(ov,_ie),g(cy,_ie,null),e(Bd,RIo),e(Bd,uie),e(uie,SIo),b(c,Gke,u),b(c,lr,u),g(fy,lr,null),e(lr,PIo),e(lr,xd),e(xd,$Io),e(xd,bie),e(bie,IIo),e(xd,NIo),e(xd,vie),e(vie,DIo),e(xd,jIo),e(lr,qIo),e(lr,my),e(my,GIo),e(my,Tie),e(Tie,OIo),e(my,XIo),e(lr,VIo),e(lr,ot),g(gy,ot,null),e(ot,zIo),e(ot,Fie),e(Fie,WIo),e(ot,QIo),e(ot,kd),e(kd,HIo),e(kd,Cie),e(Cie,UIo),e(kd,JIo),e(kd,Mie),e(Mie,YIo),e(kd,KIo),e(ot,ZIo),e(ot,Eie),e(Eie,eNo),e(ot,oNo),g(hy,ot,null),e(lr,rNo),e(lr,He),g(py,He,null),e(He,tNo),e(He,yie),e(yie,aNo),e(He,nNo),e(He,on),e(on,sNo),e(on,wie),e(wie,lNo),e(on,iNo),e(on,Aie),e(Aie,dNo),e(on,cNo),e(on,Lie),e(Lie,fNo),e(on,mNo),e(He,gNo),e(He,me),e(me,rv),e(rv,Bie),e(Bie,hNo),e(rv,pNo),e(rv,Bj),e(Bj,_No),e(rv,uNo),e(me,bNo),e(me,tv),e(tv,xie),e(xie,vNo),e(tv,TNo),e(tv,xj),e(xj,FNo),e(tv,CNo),e(me,MNo),e(me,qs),e(qs,kie),e(kie,ENo),e(qs,yNo),e(qs,kj),e(kj,wNo),e(qs,ANo),e(qs,Rj),e(Rj,LNo),e(qs,BNo),e(me,xNo),e(me,av),e(av,Rie),e(Rie,kNo),e(av,RNo),e(av,Sj),e(Sj,SNo),e(av,PNo),e(me,$No),e(me,ma),e(ma,Sie),e(Sie,INo),e(ma,NNo),e(ma,Pj),e(Pj,DNo),e(ma,jNo),e(ma,$j),e($j,qNo),e(ma,GNo),e(ma,Ij),e(Ij,ONo),e(ma,XNo),e(me,VNo),e(me,nv),e(nv,Pie),e(Pie,zNo),e(nv,WNo),e(nv,Nj),e(Nj,QNo),e(nv,HNo),e(me,UNo),e(me,sv),e(sv,$ie),e($ie,JNo),e(sv,YNo),e(sv,Dj),e(Dj,KNo),e(sv,ZNo),e(me,eDo),e(me,lv),e(lv,Iie),e(Iie,oDo),e(lv,rDo),e(lv,jj),e(jj,tDo),e(lv,aDo),e(me,nDo),e(me,iv),e(iv,Nie),e(Nie,sDo),e(iv,lDo),e(iv,qj),e(qj,iDo),e(iv,dDo),e(me,cDo),e(me,dv),e(dv,Die),e(Die,fDo),e(dv,mDo),e(dv,Gj),e(Gj,gDo),e(dv,hDo),e(me,pDo),e(me,cv),e(cv,jie),e(jie,_Do),e(cv,uDo),e(cv,Oj),e(Oj,bDo),e(cv,vDo),e(He,TDo),e(He,fv),e(fv,FDo),e(fv,qie),e(qie,CDo),e(fv,MDo),e(fv,Gie),e(Gie,EDo),e(He,yDo),e(He,Oie),e(Oie,wDo),e(He,ADo),g(_y,He,null),b(c,Oke,u),b(c,Rd,u),e(Rd,mv),e(mv,Xie),g(uy,Xie,null),e(Rd,LDo),e(Rd,Vie),e(Vie,BDo),b(c,Xke,u),b(c,ir,u),g(by,ir,null),e(ir,xDo),e(ir,Sd),e(Sd,kDo),e(Sd,zie),e(zie,RDo),e(Sd,SDo),e(Sd,Wie),e(Wie,PDo),e(Sd,$Do),e(ir,IDo),e(ir,vy),e(vy,NDo),e(vy,Qie),e(Qie,DDo),e(vy,jDo),e(ir,qDo),e(ir,rt),g(Ty,rt,null),e(rt,GDo),e(rt,Hie),e(Hie,ODo),e(rt,XDo),e(rt,Pd),e(Pd,VDo),e(Pd,Uie),e(Uie,zDo),e(Pd,WDo),e(Pd,Jie),e(Jie,QDo),e(Pd,HDo),e(rt,UDo),e(rt,Yie),e(Yie,JDo),e(rt,YDo),g(Fy,rt,null),e(ir,KDo),e(ir,Ue),g(Cy,Ue,null),e(Ue,ZDo),e(Ue,Kie),e(Kie,ejo),e(Ue,ojo),e(Ue,rn),e(rn,rjo),e(rn,Zie),e(Zie,tjo),e(rn,ajo),e(rn,ede),e(ede,njo),e(rn,sjo),e(rn,ode),e(ode,ljo),e(rn,ijo),e(Ue,djo),e(Ue,rde),e(rde,gv),e(gv,tde),e(tde,cjo),e(gv,fjo),e(gv,Xj),e(Xj,mjo),e(gv,gjo),e(Ue,hjo),e(Ue,hv),e(hv,pjo),e(hv,ade),e(ade,_jo),e(hv,ujo),e(hv,nde),e(nde,bjo),e(Ue,vjo),e(Ue,sde),e(sde,Tjo),e(Ue,Fjo),g(My,Ue,null),b(c,Vke,u),b(c,$d,u),e($d,pv),e(pv,lde),g(Ey,lde,null),e($d,Cjo),e($d,ide),e(ide,Mjo),b(c,zke,u),b(c,dr,u),g(yy,dr,null),e(dr,Ejo),e(dr,Id),e(Id,yjo),e(Id,dde),e(dde,wjo),e(Id,Ajo),e(Id,cde),e(cde,Ljo),e(Id,Bjo),e(dr,xjo),e(dr,wy),e(wy,kjo),e(wy,fde),e(fde,Rjo),e(wy,Sjo),e(dr,Pjo),e(dr,tt),g(Ay,tt,null),e(tt,$jo),e(tt,mde),e(mde,Ijo),e(tt,Njo),e(tt,Nd),e(Nd,Djo),e(Nd,gde),e(gde,jjo),e(Nd,qjo),e(Nd,hde),e(hde,Gjo),e(Nd,Ojo),e(tt,Xjo),e(tt,pde),e(pde,Vjo),e(tt,zjo),g(Ly,tt,null),e(dr,Wjo),e(dr,Je),g(By,Je,null),e(Je,Qjo),e(Je,_de),e(_de,Hjo),e(Je,Ujo),e(Je,tn),e(tn,Jjo),e(tn,ude),e(ude,Yjo),e(tn,Kjo),e(tn,bde),e(bde,Zjo),e(tn,eqo),e(tn,vde),e(vde,oqo),e(tn,rqo),e(Je,tqo),e(Je,ke),e(ke,_v),e(_v,Tde),e(Tde,aqo),e(_v,nqo),e(_v,Vj),e(Vj,sqo),e(_v,lqo),e(ke,iqo),e(ke,uv),e(uv,Fde),e(Fde,dqo),e(uv,cqo),e(uv,zj),e(zj,fqo),e(uv,mqo),e(ke,gqo),e(ke,bv),e(bv,Cde),e(Cde,hqo),e(bv,pqo),e(bv,Wj),e(Wj,_qo),e(bv,uqo),e(ke,bqo),e(ke,vv),e(vv,Mde),e(Mde,vqo),e(vv,Tqo),e(vv,Qj),e(Qj,Fqo),e(vv,Cqo),e(ke,Mqo),e(ke,Tv),e(Tv,Ede),e(Ede,Eqo),e(Tv,yqo),e(Tv,Hj),e(Hj,wqo),e(Tv,Aqo),e(ke,Lqo),e(ke,Fv),e(Fv,yde),e(yde,Bqo),e(Fv,xqo),e(Fv,Uj),e(Uj,kqo),e(Fv,Rqo),e(ke,Sqo),e(ke,Cv),e(Cv,wde),e(wde,Pqo),e(Cv,$qo),e(Cv,Jj),e(Jj,Iqo),e(Cv,Nqo),e(ke,Dqo),e(ke,Mv),e(Mv,Ade),e(Ade,jqo),e(Mv,qqo),e(Mv,Yj),e(Yj,Gqo),e(Mv,Oqo),e(Je,Xqo),e(Je,Ev),e(Ev,Vqo),e(Ev,Lde),e(Lde,zqo),e(Ev,Wqo),e(Ev,Bde),e(Bde,Qqo),e(Je,Hqo),e(Je,xde),e(xde,Uqo),e(Je,Jqo),g(xy,Je,null),b(c,Wke,u),b(c,Dd,u),e(Dd,yv),e(yv,kde),g(ky,kde,null),e(Dd,Yqo),e(Dd,Rde),e(Rde,Kqo),b(c,Qke,u),b(c,cr,u),g(Ry,cr,null),e(cr,Zqo),e(cr,jd),e(jd,eGo),e(jd,Sde),e(Sde,oGo),e(jd,rGo),e(jd,Pde),e(Pde,tGo),e(jd,aGo),e(cr,nGo),e(cr,Sy),e(Sy,sGo),e(Sy,$de),e($de,lGo),e(Sy,iGo),e(cr,dGo),e(cr,at),g(Py,at,null),e(at,cGo),e(at,Ide),e(Ide,fGo),e(at,mGo),e(at,qd),e(qd,gGo),e(qd,Nde),e(Nde,hGo),e(qd,pGo),e(qd,Dde),e(Dde,_Go),e(qd,uGo),e(at,bGo),e(at,jde),e(jde,vGo),e(at,TGo),g($y,at,null),e(cr,FGo),e(cr,Ye),g(Iy,Ye,null),e(Ye,CGo),e(Ye,qde),e(qde,MGo),e(Ye,EGo),e(Ye,an),e(an,yGo),e(an,Gde),e(Gde,wGo),e(an,AGo),e(an,Ode),e(Ode,LGo),e(an,BGo),e(an,Xde),e(Xde,xGo),e(an,kGo),e(Ye,RGo),e(Ye,nn),e(nn,wv),e(wv,Vde),e(Vde,SGo),e(wv,PGo),e(wv,Kj),e(Kj,$Go),e(wv,IGo),e(nn,NGo),e(nn,Av),e(Av,zde),e(zde,DGo),e(Av,jGo),e(Av,Zj),e(Zj,qGo),e(Av,GGo),e(nn,OGo),e(nn,Lv),e(Lv,Wde),e(Wde,XGo),e(Lv,VGo),e(Lv,eq),e(eq,zGo),e(Lv,WGo),e(nn,QGo),e(nn,Bv),e(Bv,Qde),e(Qde,HGo),e(Bv,UGo),e(Bv,oq),e(oq,JGo),e(Bv,YGo),e(Ye,KGo),e(Ye,xv),e(xv,ZGo),e(xv,Hde),e(Hde,eOo),e(xv,oOo),e(xv,Ude),e(Ude,rOo),e(Ye,tOo),e(Ye,Jde),e(Jde,aOo),e(Ye,nOo),g(Ny,Ye,null),b(c,Hke,u),b(c,Gd,u),e(Gd,kv),e(kv,Yde),g(Dy,Yde,null),e(Gd,sOo),e(Gd,Kde),e(Kde,lOo),b(c,Uke,u),b(c,fr,u),g(jy,fr,null),e(fr,iOo),e(fr,Od),e(Od,dOo),e(Od,Zde),e(Zde,cOo),e(Od,fOo),e(Od,ece),e(ece,mOo),e(Od,gOo),e(fr,hOo),e(fr,qy),e(qy,pOo),e(qy,oce),e(oce,_Oo),e(qy,uOo),e(fr,bOo),e(fr,nt),g(Gy,nt,null),e(nt,vOo),e(nt,rce),e(rce,TOo),e(nt,FOo),e(nt,Xd),e(Xd,COo),e(Xd,tce),e(tce,MOo),e(Xd,EOo),e(Xd,ace),e(ace,yOo),e(Xd,wOo),e(nt,AOo),e(nt,nce),e(nce,LOo),e(nt,BOo),g(Oy,nt,null),e(fr,xOo),e(fr,Ke),g(Xy,Ke,null),e(Ke,kOo),e(Ke,sce),e(sce,ROo),e(Ke,SOo),e(Ke,sn),e(sn,POo),e(sn,lce),e(lce,$Oo),e(sn,IOo),e(sn,ice),e(ice,NOo),e(sn,DOo),e(sn,dce),e(dce,jOo),e(sn,qOo),e(Ke,GOo),e(Ke,Re),e(Re,Rv),e(Rv,cce),e(cce,OOo),e(Rv,XOo),e(Rv,rq),e(rq,VOo),e(Rv,zOo),e(Re,WOo),e(Re,Sv),e(Sv,fce),e(fce,QOo),e(Sv,HOo),e(Sv,tq),e(tq,UOo),e(Sv,JOo),e(Re,YOo),e(Re,Pv),e(Pv,mce),e(mce,KOo),e(Pv,ZOo),e(Pv,aq),e(aq,eXo),e(Pv,oXo),e(Re,rXo),e(Re,$v),e($v,gce),e(gce,tXo),e($v,aXo),e($v,nq),e(nq,nXo),e($v,sXo),e(Re,lXo),e(Re,Iv),e(Iv,hce),e(hce,iXo),e(Iv,dXo),e(Iv,sq),e(sq,cXo),e(Iv,fXo),e(Re,mXo),e(Re,Nv),e(Nv,pce),e(pce,gXo),e(Nv,hXo),e(Nv,lq),e(lq,pXo),e(Nv,_Xo),e(Re,uXo),e(Re,Dv),e(Dv,_ce),e(_ce,bXo),e(Dv,vXo),e(Dv,iq),e(iq,TXo),e(Dv,FXo),e(Re,CXo),e(Re,jv),e(jv,uce),e(uce,MXo),e(jv,EXo),e(jv,dq),e(dq,yXo),e(jv,wXo),e(Ke,AXo),e(Ke,qv),e(qv,LXo),e(qv,bce),e(bce,BXo),e(qv,xXo),e(qv,vce),e(vce,kXo),e(Ke,RXo),e(Ke,Tce),e(Tce,SXo),e(Ke,PXo),g(Vy,Ke,null),b(c,Jke,u),b(c,Vd,u),e(Vd,Gv),e(Gv,Fce),g(zy,Fce,null),e(Vd,$Xo),e(Vd,Cce),e(Cce,IXo),b(c,Yke,u),b(c,mr,u),g(Wy,mr,null),e(mr,NXo),e(mr,zd),e(zd,DXo),e(zd,Mce),e(Mce,jXo),e(zd,qXo),e(zd,Ece),e(Ece,GXo),e(zd,OXo),e(mr,XXo),e(mr,Qy),e(Qy,VXo),e(Qy,yce),e(yce,zXo),e(Qy,WXo),e(mr,QXo),e(mr,st),g(Hy,st,null),e(st,HXo),e(st,wce),e(wce,UXo),e(st,JXo),e(st,Wd),e(Wd,YXo),e(Wd,Ace),e(Ace,KXo),e(Wd,ZXo),e(Wd,Lce),e(Lce,eVo),e(Wd,oVo),e(st,rVo),e(st,Bce),e(Bce,tVo),e(st,aVo),g(Uy,st,null),e(mr,nVo),e(mr,Ze),g(Jy,Ze,null),e(Ze,sVo),e(Ze,xce),e(xce,lVo),e(Ze,iVo),e(Ze,ln),e(ln,dVo),e(ln,kce),e(kce,cVo),e(ln,fVo),e(ln,Rce),e(Rce,mVo),e(ln,gVo),e(ln,Sce),e(Sce,hVo),e(ln,pVo),e(Ze,_Vo),e(Ze,Yy),e(Yy,Ov),e(Ov,Pce),e(Pce,uVo),e(Ov,bVo),e(Ov,cq),e(cq,vVo),e(Ov,TVo),e(Yy,FVo),e(Yy,Xv),e(Xv,$ce),e($ce,CVo),e(Xv,MVo),e(Xv,fq),e(fq,EVo),e(Xv,yVo),e(Ze,wVo),e(Ze,Vv),e(Vv,AVo),e(Vv,Ice),e(Ice,LVo),e(Vv,BVo),e(Vv,Nce),e(Nce,xVo),e(Ze,kVo),e(Ze,Dce),e(Dce,RVo),e(Ze,SVo),g(Ky,Ze,null),b(c,Kke,u),b(c,Qd,u),e(Qd,zv),e(zv,jce),g(Zy,jce,null),e(Qd,PVo),e(Qd,qce),e(qce,$Vo),b(c,Zke,u),b(c,gr,u),g(ew,gr,null),e(gr,IVo),e(gr,Hd),e(Hd,NVo),e(Hd,Gce),e(Gce,DVo),e(Hd,jVo),e(Hd,Oce),e(Oce,qVo),e(Hd,GVo),e(gr,OVo),e(gr,ow),e(ow,XVo),e(ow,Xce),e(Xce,VVo),e(ow,zVo),e(gr,WVo),e(gr,lt),g(rw,lt,null),e(lt,QVo),e(lt,Vce),e(Vce,HVo),e(lt,UVo),e(lt,Ud),e(Ud,JVo),e(Ud,zce),e(zce,YVo),e(Ud,KVo),e(Ud,Wce),e(Wce,ZVo),e(Ud,ezo),e(lt,ozo),e(lt,Qce),e(Qce,rzo),e(lt,tzo),g(tw,lt,null),e(gr,azo),e(gr,eo),g(aw,eo,null),e(eo,nzo),e(eo,Hce),e(Hce,szo),e(eo,lzo),e(eo,dn),e(dn,izo),e(dn,Uce),e(Uce,dzo),e(dn,czo),e(dn,Jce),e(Jce,fzo),e(dn,mzo),e(dn,Yce),e(Yce,gzo),e(dn,hzo),e(eo,pzo),e(eo,cn),e(cn,Wv),e(Wv,Kce),e(Kce,_zo),e(Wv,uzo),e(Wv,mq),e(mq,bzo),e(Wv,vzo),e(cn,Tzo),e(cn,Qv),e(Qv,Zce),e(Zce,Fzo),e(Qv,Czo),e(Qv,gq),e(gq,Mzo),e(Qv,Ezo),e(cn,yzo),e(cn,Hv),e(Hv,efe),e(efe,wzo),e(Hv,Azo),e(Hv,hq),e(hq,Lzo),e(Hv,Bzo),e(cn,xzo),e(cn,Uv),e(Uv,ofe),e(ofe,kzo),e(Uv,Rzo),e(Uv,pq),e(pq,Szo),e(Uv,Pzo),e(eo,$zo),e(eo,Jv),e(Jv,Izo),e(Jv,rfe),e(rfe,Nzo),e(Jv,Dzo),e(Jv,tfe),e(tfe,jzo),e(eo,qzo),e(eo,afe),e(afe,Gzo),e(eo,Ozo),g(nw,eo,null),b(c,eRe,u),b(c,Jd,u),e(Jd,Yv),e(Yv,nfe),g(sw,nfe,null),e(Jd,Xzo),e(Jd,sfe),e(sfe,Vzo),b(c,oRe,u),b(c,hr,u),g(lw,hr,null),e(hr,zzo),e(hr,Yd),e(Yd,Wzo),e(Yd,lfe),e(lfe,Qzo),e(Yd,Hzo),e(Yd,ife),e(ife,Uzo),e(Yd,Jzo),e(hr,Yzo),e(hr,iw),e(iw,Kzo),e(iw,dfe),e(dfe,Zzo),e(iw,eWo),e(hr,oWo),e(hr,it),g(dw,it,null),e(it,rWo),e(it,cfe),e(cfe,tWo),e(it,aWo),e(it,Kd),e(Kd,nWo),e(Kd,ffe),e(ffe,sWo),e(Kd,lWo),e(Kd,mfe),e(mfe,iWo),e(Kd,dWo),e(it,cWo),e(it,gfe),e(gfe,fWo),e(it,mWo),g(cw,it,null),e(hr,gWo),e(hr,oo),g(fw,oo,null),e(oo,hWo),e(oo,hfe),e(hfe,pWo),e(oo,_Wo),e(oo,fn),e(fn,uWo),e(fn,pfe),e(pfe,bWo),e(fn,vWo),e(fn,_fe),e(_fe,TWo),e(fn,FWo),e(fn,ufe),e(ufe,CWo),e(fn,MWo),e(oo,EWo),e(oo,Zd),e(Zd,Kv),e(Kv,bfe),e(bfe,yWo),e(Kv,wWo),e(Kv,_q),e(_q,AWo),e(Kv,LWo),e(Zd,BWo),e(Zd,Zv),e(Zv,vfe),e(vfe,xWo),e(Zv,kWo),e(Zv,uq),e(uq,RWo),e(Zv,SWo),e(Zd,PWo),e(Zd,eT),e(eT,Tfe),e(Tfe,$Wo),e(eT,IWo),e(eT,bq),e(bq,NWo),e(eT,DWo),e(oo,jWo),e(oo,oT),e(oT,qWo),e(oT,Ffe),e(Ffe,GWo),e(oT,OWo),e(oT,Cfe),e(Cfe,XWo),e(oo,VWo),e(oo,Mfe),e(Mfe,zWo),e(oo,WWo),g(mw,oo,null),b(c,rRe,u),b(c,ec,u),e(ec,rT),e(rT,Efe),g(gw,Efe,null),e(ec,QWo),e(ec,yfe),e(yfe,HWo),b(c,tRe,u),b(c,pr,u),g(hw,pr,null),e(pr,UWo),e(pr,oc),e(oc,JWo),e(oc,wfe),e(wfe,YWo),e(oc,KWo),e(oc,Afe),e(Afe,ZWo),e(oc,eQo),e(pr,oQo),e(pr,pw),e(pw,rQo),e(pw,Lfe),e(Lfe,tQo),e(pw,aQo),e(pr,nQo),e(pr,dt),g(_w,dt,null),e(dt,sQo),e(dt,Bfe),e(Bfe,lQo),e(dt,iQo),e(dt,rc),e(rc,dQo),e(rc,xfe),e(xfe,cQo),e(rc,fQo),e(rc,kfe),e(kfe,mQo),e(rc,gQo),e(dt,hQo),e(dt,Rfe),e(Rfe,pQo),e(dt,_Qo),g(uw,dt,null),e(pr,uQo),e(pr,ro),g(bw,ro,null),e(ro,bQo),e(ro,Sfe),e(Sfe,vQo),e(ro,TQo),e(ro,mn),e(mn,FQo),e(mn,Pfe),e(Pfe,CQo),e(mn,MQo),e(mn,$fe),e($fe,EQo),e(mn,yQo),e(mn,Ife),e(Ife,wQo),e(mn,AQo),e(ro,LQo),e(ro,Nfe),e(Nfe,tT),e(tT,Dfe),e(Dfe,BQo),e(tT,xQo),e(tT,vq),e(vq,kQo),e(tT,RQo),e(ro,SQo),e(ro,aT),e(aT,PQo),e(aT,jfe),e(jfe,$Qo),e(aT,IQo),e(aT,qfe),e(qfe,NQo),e(ro,DQo),e(ro,Gfe),e(Gfe,jQo),e(ro,qQo),g(vw,ro,null),b(c,aRe,u),b(c,tc,u),e(tc,nT),e(nT,Ofe),g(Tw,Ofe,null),e(tc,GQo),e(tc,Xfe),e(Xfe,OQo),b(c,nRe,u),b(c,_r,u),g(Fw,_r,null),e(_r,XQo),e(_r,ac),e(ac,VQo),e(ac,Vfe),e(Vfe,zQo),e(ac,WQo),e(ac,zfe),e(zfe,QQo),e(ac,HQo),e(_r,UQo),e(_r,Cw),e(Cw,JQo),e(Cw,Wfe),e(Wfe,YQo),e(Cw,KQo),e(_r,ZQo),e(_r,ct),g(Mw,ct,null),e(ct,eHo),e(ct,Qfe),e(Qfe,oHo),e(ct,rHo),e(ct,nc),e(nc,tHo),e(nc,Hfe),e(Hfe,aHo),e(nc,nHo),e(nc,Ufe),e(Ufe,sHo),e(nc,lHo),e(ct,iHo),e(ct,Jfe),e(Jfe,dHo),e(ct,cHo),g(Ew,ct,null),e(_r,fHo),e(_r,to),g(yw,to,null),e(to,mHo),e(to,Yfe),e(Yfe,gHo),e(to,hHo),e(to,gn),e(gn,pHo),e(gn,Kfe),e(Kfe,_Ho),e(gn,uHo),e(gn,Zfe),e(Zfe,bHo),e(gn,vHo),e(gn,eme),e(eme,THo),e(gn,FHo),e(to,CHo),e(to,ome),e(ome,sT),e(sT,rme),e(rme,MHo),e(sT,EHo),e(sT,Tq),e(Tq,yHo),e(sT,wHo),e(to,AHo),e(to,lT),e(lT,LHo),e(lT,tme),e(tme,BHo),e(lT,xHo),e(lT,ame),e(ame,kHo),e(to,RHo),e(to,nme),e(nme,SHo),e(to,PHo),g(ww,to,null),b(c,sRe,u),b(c,sc,u),e(sc,iT),e(iT,sme),g(Aw,sme,null),e(sc,$Ho),e(sc,lme),e(lme,IHo),b(c,lRe,u),b(c,ur,u),g(Lw,ur,null),e(ur,NHo),e(ur,lc),e(lc,DHo),e(lc,ime),e(ime,jHo),e(lc,qHo),e(lc,dme),e(dme,GHo),e(lc,OHo),e(ur,XHo),e(ur,Bw),e(Bw,VHo),e(Bw,cme),e(cme,zHo),e(Bw,WHo),e(ur,QHo),e(ur,ft),g(xw,ft,null),e(ft,HHo),e(ft,fme),e(fme,UHo),e(ft,JHo),e(ft,ic),e(ic,YHo),e(ic,mme),e(mme,KHo),e(ic,ZHo),e(ic,gme),e(gme,eUo),e(ic,oUo),e(ft,rUo),e(ft,hme),e(hme,tUo),e(ft,aUo),g(kw,ft,null),e(ur,nUo),e(ur,ao),g(Rw,ao,null),e(ao,sUo),e(ao,pme),e(pme,lUo),e(ao,iUo),e(ao,hn),e(hn,dUo),e(hn,_me),e(_me,cUo),e(hn,fUo),e(hn,ume),e(ume,mUo),e(hn,gUo),e(hn,bme),e(bme,hUo),e(hn,pUo),e(ao,_Uo),e(ao,dc),e(dc,dT),e(dT,vme),e(vme,uUo),e(dT,bUo),e(dT,Fq),e(Fq,vUo),e(dT,TUo),e(dc,FUo),e(dc,cT),e(cT,Tme),e(Tme,CUo),e(cT,MUo),e(cT,Cq),e(Cq,EUo),e(cT,yUo),e(dc,wUo),e(dc,fT),e(fT,Fme),e(Fme,AUo),e(fT,LUo),e(fT,Mq),e(Mq,BUo),e(fT,xUo),e(ao,kUo),e(ao,mT),e(mT,RUo),e(mT,Cme),e(Cme,SUo),e(mT,PUo),e(mT,Mme),e(Mme,$Uo),e(ao,IUo),e(ao,Eme),e(Eme,NUo),e(ao,DUo),g(Sw,ao,null),b(c,iRe,u),b(c,cc,u),e(cc,gT),e(gT,yme),g(Pw,yme,null),e(cc,jUo),e(cc,wme),e(wme,qUo),b(c,dRe,u),b(c,br,u),g($w,br,null),e(br,GUo),e(br,fc),e(fc,OUo),e(fc,Ame),e(Ame,XUo),e(fc,VUo),e(fc,Lme),e(Lme,zUo),e(fc,WUo),e(br,QUo),e(br,Iw),e(Iw,HUo),e(Iw,Bme),e(Bme,UUo),e(Iw,JUo),e(br,YUo),e(br,mt),g(Nw,mt,null),e(mt,KUo),e(mt,xme),e(xme,ZUo),e(mt,eJo),e(mt,mc),e(mc,oJo),e(mc,kme),e(kme,rJo),e(mc,tJo),e(mc,Rme),e(Rme,aJo),e(mc,nJo),e(mt,sJo),e(mt,Sme),e(Sme,lJo),e(mt,iJo),g(Dw,mt,null),e(br,dJo),e(br,no),g(jw,no,null),e(no,cJo),e(no,Pme),e(Pme,fJo),e(no,mJo),e(no,pn),e(pn,gJo),e(pn,$me),e($me,hJo),e(pn,pJo),e(pn,Ime),e(Ime,_Jo),e(pn,uJo),e(pn,Nme),e(Nme,bJo),e(pn,vJo),e(no,TJo),e(no,Dme),e(Dme,hT),e(hT,jme),e(jme,FJo),e(hT,CJo),e(hT,Eq),e(Eq,MJo),e(hT,EJo),e(no,yJo),e(no,pT),e(pT,wJo),e(pT,qme),e(qme,AJo),e(pT,LJo),e(pT,Gme),e(Gme,BJo),e(no,xJo),e(no,Ome),e(Ome,kJo),e(no,RJo),g(qw,no,null),b(c,cRe,u),b(c,gc,u),e(gc,_T),e(_T,Xme),g(Gw,Xme,null),e(gc,SJo),e(gc,Vme),e(Vme,PJo),b(c,fRe,u),b(c,vr,u),g(Ow,vr,null),e(vr,$Jo),e(vr,hc),e(hc,IJo),e(hc,zme),e(zme,NJo),e(hc,DJo),e(hc,Wme),e(Wme,jJo),e(hc,qJo),e(vr,GJo),e(vr,Xw),e(Xw,OJo),e(Xw,Qme),e(Qme,XJo),e(Xw,VJo),e(vr,zJo),e(vr,gt),g(Vw,gt,null),e(gt,WJo),e(gt,Hme),e(Hme,QJo),e(gt,HJo),e(gt,pc),e(pc,UJo),e(pc,Ume),e(Ume,JJo),e(pc,YJo),e(pc,Jme),e(Jme,KJo),e(pc,ZJo),e(gt,eYo),e(gt,Yme),e(Yme,oYo),e(gt,rYo),g(zw,gt,null),e(vr,tYo),e(vr,ho),g(Ww,ho,null),e(ho,aYo),e(ho,Kme),e(Kme,nYo),e(ho,sYo),e(ho,_n),e(_n,lYo),e(_n,Zme),e(Zme,iYo),e(_n,dYo),e(_n,ege),e(ege,cYo),e(_n,fYo),e(_n,oge),e(oge,mYo),e(_n,gYo),e(ho,hYo),e(ho,B),e(B,uT),e(uT,rge),e(rge,pYo),e(uT,_Yo),e(uT,yq),e(yq,uYo),e(uT,bYo),e(B,vYo),e(B,bT),e(bT,tge),e(tge,TYo),e(bT,FYo),e(bT,wq),e(wq,CYo),e(bT,MYo),e(B,EYo),e(B,vT),e(vT,age),e(age,yYo),e(vT,wYo),e(vT,Aq),e(Aq,AYo),e(vT,LYo),e(B,BYo),e(B,TT),e(TT,nge),e(nge,xYo),e(TT,kYo),e(TT,Lq),e(Lq,RYo),e(TT,SYo),e(B,PYo),e(B,FT),e(FT,sge),e(sge,$Yo),e(FT,IYo),e(FT,Bq),e(Bq,NYo),e(FT,DYo),e(B,jYo),e(B,CT),e(CT,lge),e(lge,qYo),e(CT,GYo),e(CT,xq),e(xq,OYo),e(CT,XYo),e(B,VYo),e(B,MT),e(MT,ige),e(ige,zYo),e(MT,WYo),e(MT,kq),e(kq,QYo),e(MT,HYo),e(B,UYo),e(B,ET),e(ET,dge),e(dge,JYo),e(ET,YYo),e(ET,Rq),e(Rq,KYo),e(ET,ZYo),e(B,eKo),e(B,yT),e(yT,cge),e(cge,oKo),e(yT,rKo),e(yT,Sq),e(Sq,tKo),e(yT,aKo),e(B,nKo),e(B,wT),e(wT,fge),e(fge,sKo),e(wT,lKo),e(wT,Pq),e(Pq,iKo),e(wT,dKo),e(B,cKo),e(B,AT),e(AT,mge),e(mge,fKo),e(AT,mKo),e(AT,$q),e($q,gKo),e(AT,hKo),e(B,pKo),e(B,LT),e(LT,gge),e(gge,_Ko),e(LT,uKo),e(LT,Iq),e(Iq,bKo),e(LT,vKo),e(B,TKo),e(B,BT),e(BT,hge),e(hge,FKo),e(BT,CKo),e(BT,Nq),e(Nq,MKo),e(BT,EKo),e(B,yKo),e(B,xT),e(xT,pge),e(pge,wKo),e(xT,AKo),e(xT,Dq),e(Dq,LKo),e(xT,BKo),e(B,xKo),e(B,kT),e(kT,_ge),e(_ge,kKo),e(kT,RKo),e(kT,jq),e(jq,SKo),e(kT,PKo),e(B,$Ko),e(B,RT),e(RT,uge),e(uge,IKo),e(RT,NKo),e(RT,qq),e(qq,DKo),e(RT,jKo),e(B,qKo),e(B,Gs),e(Gs,bge),e(bge,GKo),e(Gs,OKo),e(Gs,Gq),e(Gq,XKo),e(Gs,VKo),e(Gs,Oq),e(Oq,zKo),e(Gs,WKo),e(B,QKo),e(B,ST),e(ST,vge),e(vge,HKo),e(ST,UKo),e(ST,Xq),e(Xq,JKo),e(ST,YKo),e(B,KKo),e(B,PT),e(PT,Tge),e(Tge,ZKo),e(PT,eZo),e(PT,Vq),e(Vq,oZo),e(PT,rZo),e(B,tZo),e(B,$T),e($T,Fge),e(Fge,aZo),e($T,nZo),e($T,zq),e(zq,sZo),e($T,lZo),e(B,iZo),e(B,IT),e(IT,Cge),e(Cge,dZo),e(IT,cZo),e(IT,Wq),e(Wq,fZo),e(IT,mZo),e(B,gZo),e(B,NT),e(NT,Mge),e(Mge,hZo),e(NT,pZo),e(NT,Qq),e(Qq,_Zo),e(NT,uZo),e(B,bZo),e(B,DT),e(DT,Ege),e(Ege,vZo),e(DT,TZo),e(DT,Hq),e(Hq,FZo),e(DT,CZo),e(B,MZo),e(B,jT),e(jT,yge),e(yge,EZo),e(jT,yZo),e(jT,Uq),e(Uq,wZo),e(jT,AZo),e(B,LZo),e(B,qT),e(qT,wge),e(wge,BZo),e(qT,xZo),e(qT,Jq),e(Jq,kZo),e(qT,RZo),e(B,SZo),e(B,GT),e(GT,Age),e(Age,PZo),e(GT,$Zo),e(GT,Yq),e(Yq,IZo),e(GT,NZo),e(B,DZo),e(B,OT),e(OT,Lge),e(Lge,jZo),e(OT,qZo),e(OT,Kq),e(Kq,GZo),e(OT,OZo),e(B,XZo),e(B,XT),e(XT,Bge),e(Bge,VZo),e(XT,zZo),e(XT,Zq),e(Zq,WZo),e(XT,QZo),e(B,HZo),e(B,VT),e(VT,xge),e(xge,UZo),e(VT,JZo),e(VT,eG),e(eG,YZo),e(VT,KZo),e(B,ZZo),e(B,zT),e(zT,kge),e(kge,eer),e(zT,oer),e(zT,oG),e(oG,rer),e(zT,ter),e(B,aer),e(B,WT),e(WT,Rge),e(Rge,ner),e(WT,ser),e(WT,rG),e(rG,ler),e(WT,ier),e(B,der),e(B,QT),e(QT,Sge),e(Sge,cer),e(QT,fer),e(QT,tG),e(tG,mer),e(QT,ger),e(B,her),e(B,HT),e(HT,Pge),e(Pge,per),e(HT,_er),e(HT,aG),e(aG,uer),e(HT,ber),e(B,ver),e(B,UT),e(UT,$ge),e($ge,Ter),e(UT,Fer),e(UT,nG),e(nG,Cer),e(UT,Mer),e(B,Eer),e(B,JT),e(JT,Ige),e(Ige,yer),e(JT,wer),e(JT,sG),e(sG,Aer),e(JT,Ler),e(B,Ber),e(B,YT),e(YT,Nge),e(Nge,xer),e(YT,ker),e(YT,lG),e(lG,Rer),e(YT,Ser),e(B,Per),e(B,KT),e(KT,Dge),e(Dge,$er),e(KT,Ier),e(KT,iG),e(iG,Ner),e(KT,Der),e(B,jer),e(B,ZT),e(ZT,jge),e(jge,qer),e(ZT,Ger),e(ZT,dG),e(dG,Oer),e(ZT,Xer),e(B,Ver),e(B,e7),e(e7,qge),e(qge,zer),e(e7,Wer),e(e7,cG),e(cG,Qer),e(e7,Her),e(B,Uer),e(B,o7),e(o7,Gge),e(Gge,Jer),e(o7,Yer),e(o7,fG),e(fG,Ker),e(o7,Zer),e(B,eor),e(B,r7),e(r7,Oge),e(Oge,oor),e(r7,ror),e(r7,mG),e(mG,tor),e(r7,aor),e(B,nor),e(B,t7),e(t7,Xge),e(Xge,sor),e(t7,lor),e(t7,gG),e(gG,ior),e(t7,dor),e(ho,cor),e(ho,Vge),e(Vge,mor),e(ho,gor),g(Qw,ho,null),b(c,mRe,u),b(c,_c,u),e(_c,a7),e(a7,zge),g(Hw,zge,null),e(_c,hor),e(_c,Wge),e(Wge,por),b(c,gRe,u),b(c,Tr,u),g(Uw,Tr,null),e(Tr,_or),e(Tr,uc),e(uc,uor),e(uc,Qge),e(Qge,bor),e(uc,vor),e(uc,Hge),e(Hge,Tor),e(uc,For),e(Tr,Cor),e(Tr,Jw),e(Jw,Mor),e(Jw,Uge),e(Uge,Eor),e(Jw,yor),e(Tr,wor),e(Tr,ht),g(Yw,ht,null),e(ht,Aor),e(ht,Jge),e(Jge,Lor),e(ht,Bor),e(ht,bc),e(bc,xor),e(bc,Yge),e(Yge,kor),e(bc,Ror),e(bc,Kge),e(Kge,Sor),e(bc,Por),e(ht,$or),e(ht,Zge),e(Zge,Ior),e(ht,Nor),g(Kw,ht,null),e(Tr,Dor),e(Tr,po),g(Zw,po,null),e(po,jor),e(po,ehe),e(ehe,qor),e(po,Gor),e(po,un),e(un,Oor),e(un,ohe),e(ohe,Xor),e(un,Vor),e(un,rhe),e(rhe,zor),e(un,Wor),e(un,the),e(the,Qor),e(un,Hor),e(po,Uor),e(po,H),e(H,n7),e(n7,ahe),e(ahe,Jor),e(n7,Yor),e(n7,hG),e(hG,Kor),e(n7,Zor),e(H,err),e(H,s7),e(s7,nhe),e(nhe,orr),e(s7,rrr),e(s7,pG),e(pG,trr),e(s7,arr),e(H,nrr),e(H,l7),e(l7,she),e(she,srr),e(l7,lrr),e(l7,_G),e(_G,irr),e(l7,drr),e(H,crr),e(H,i7),e(i7,lhe),e(lhe,frr),e(i7,mrr),e(i7,uG),e(uG,grr),e(i7,hrr),e(H,prr),e(H,d7),e(d7,ihe),e(ihe,_rr),e(d7,urr),e(d7,bG),e(bG,brr),e(d7,vrr),e(H,Trr),e(H,c7),e(c7,dhe),e(dhe,Frr),e(c7,Crr),e(c7,vG),e(vG,Mrr),e(c7,Err),e(H,yrr),e(H,f7),e(f7,che),e(che,wrr),e(f7,Arr),e(f7,TG),e(TG,Lrr),e(f7,Brr),e(H,xrr),e(H,m7),e(m7,fhe),e(fhe,krr),e(m7,Rrr),e(m7,FG),e(FG,Srr),e(m7,Prr),e(H,$rr),e(H,g7),e(g7,mhe),e(mhe,Irr),e(g7,Nrr),e(g7,CG),e(CG,Drr),e(g7,jrr),e(H,qrr),e(H,h7),e(h7,ghe),e(ghe,Grr),e(h7,Orr),e(h7,MG),e(MG,Xrr),e(h7,Vrr),e(H,zrr),e(H,p7),e(p7,hhe),e(hhe,Wrr),e(p7,Qrr),e(p7,EG),e(EG,Hrr),e(p7,Urr),e(H,Jrr),e(H,_7),e(_7,phe),e(phe,Yrr),e(_7,Krr),e(_7,yG),e(yG,Zrr),e(_7,etr),e(H,otr),e(H,u7),e(u7,_he),e(_he,rtr),e(u7,ttr),e(u7,wG),e(wG,atr),e(u7,ntr),e(H,str),e(H,b7),e(b7,uhe),e(uhe,ltr),e(b7,itr),e(b7,AG),e(AG,dtr),e(b7,ctr),e(H,ftr),e(H,v7),e(v7,bhe),e(bhe,mtr),e(v7,gtr),e(v7,LG),e(LG,htr),e(v7,ptr),e(H,_tr),e(H,T7),e(T7,vhe),e(vhe,utr),e(T7,btr),e(T7,BG),e(BG,vtr),e(T7,Ttr),e(H,Ftr),e(H,F7),e(F7,The),e(The,Ctr),e(F7,Mtr),e(F7,xG),e(xG,Etr),e(F7,ytr),e(H,wtr),e(H,C7),e(C7,Fhe),e(Fhe,Atr),e(C7,Ltr),e(C7,kG),e(kG,Btr),e(C7,xtr),e(H,ktr),e(H,M7),e(M7,Che),e(Che,Rtr),e(M7,Str),e(M7,RG),e(RG,Ptr),e(M7,$tr),e(H,Itr),e(H,E7),e(E7,Mhe),e(Mhe,Ntr),e(E7,Dtr),e(E7,SG),e(SG,jtr),e(E7,qtr),e(H,Gtr),e(H,y7),e(y7,Ehe),e(Ehe,Otr),e(y7,Xtr),e(y7,PG),e(PG,Vtr),e(y7,ztr),e(H,Wtr),e(H,w7),e(w7,yhe),e(yhe,Qtr),e(w7,Htr),e(w7,$G),e($G,Utr),e(w7,Jtr),e(po,Ytr),e(po,whe),e(whe,Ktr),e(po,Ztr),g(e6,po,null),b(c,hRe,u),b(c,vc,u),e(vc,A7),e(A7,Ahe),g(o6,Ahe,null),e(vc,ear),e(vc,Lhe),e(Lhe,oar),b(c,pRe,u),b(c,Fr,u),g(r6,Fr,null),e(Fr,rar),e(Fr,Tc),e(Tc,tar),e(Tc,Bhe),e(Bhe,aar),e(Tc,nar),e(Tc,xhe),e(xhe,sar),e(Tc,lar),e(Fr,iar),e(Fr,t6),e(t6,dar),e(t6,khe),e(khe,car),e(t6,far),e(Fr,mar),e(Fr,pt),g(a6,pt,null),e(pt,gar),e(pt,Rhe),e(Rhe,har),e(pt,par),e(pt,Fc),e(Fc,_ar),e(Fc,She),e(She,uar),e(Fc,bar),e(Fc,Phe),e(Phe,Tar),e(Fc,Far),e(pt,Car),e(pt,$he),e($he,Mar),e(pt,Ear),g(n6,pt,null),e(Fr,yar),e(Fr,_o),g(s6,_o,null),e(_o,war),e(_o,Ihe),e(Ihe,Aar),e(_o,Lar),e(_o,bn),e(bn,Bar),e(bn,Nhe),e(Nhe,xar),e(bn,kar),e(bn,Dhe),e(Dhe,Rar),e(bn,Sar),e(bn,jhe),e(jhe,Par),e(bn,$ar),e(_o,Iar),e(_o,ge),e(ge,L7),e(L7,qhe),e(qhe,Nar),e(L7,Dar),e(L7,IG),e(IG,jar),e(L7,qar),e(ge,Gar),e(ge,B7),e(B7,Ghe),e(Ghe,Oar),e(B7,Xar),e(B7,NG),e(NG,Var),e(B7,zar),e(ge,War),e(ge,x7),e(x7,Ohe),e(Ohe,Qar),e(x7,Har),e(x7,DG),e(DG,Uar),e(x7,Jar),e(ge,Yar),e(ge,k7),e(k7,Xhe),e(Xhe,Kar),e(k7,Zar),e(k7,jG),e(jG,enr),e(k7,onr),e(ge,rnr),e(ge,R7),e(R7,Vhe),e(Vhe,tnr),e(R7,anr),e(R7,qG),e(qG,nnr),e(R7,snr),e(ge,lnr),e(ge,S7),e(S7,zhe),e(zhe,inr),e(S7,dnr),e(S7,GG),e(GG,cnr),e(S7,fnr),e(ge,mnr),e(ge,P7),e(P7,Whe),e(Whe,gnr),e(P7,hnr),e(P7,OG),e(OG,pnr),e(P7,_nr),e(ge,unr),e(ge,$7),e($7,Qhe),e(Qhe,bnr),e($7,vnr),e($7,XG),e(XG,Tnr),e($7,Fnr),e(ge,Cnr),e(ge,I7),e(I7,Hhe),e(Hhe,Mnr),e(I7,Enr),e(I7,VG),e(VG,ynr),e(I7,wnr),e(ge,Anr),e(ge,N7),e(N7,Uhe),e(Uhe,Lnr),e(N7,Bnr),e(N7,zG),e(zG,xnr),e(N7,knr),e(ge,Rnr),e(ge,D7),e(D7,Jhe),e(Jhe,Snr),e(D7,Pnr),e(D7,WG),e(WG,$nr),e(D7,Inr),e(_o,Nnr),e(_o,Yhe),e(Yhe,Dnr),e(_o,jnr),g(l6,_o,null),b(c,_Re,u),b(c,Cc,u),e(Cc,j7),e(j7,Khe),g(i6,Khe,null),e(Cc,qnr),e(Cc,Zhe),e(Zhe,Gnr),b(c,uRe,u),b(c,Cr,u),g(d6,Cr,null),e(Cr,Onr),e(Cr,Mc),e(Mc,Xnr),e(Mc,epe),e(epe,Vnr),e(Mc,znr),e(Mc,ope),e(ope,Wnr),e(Mc,Qnr),e(Cr,Hnr),e(Cr,c6),e(c6,Unr),e(c6,rpe),e(rpe,Jnr),e(c6,Ynr),e(Cr,Knr),e(Cr,_t),g(f6,_t,null),e(_t,Znr),e(_t,tpe),e(tpe,esr),e(_t,osr),e(_t,Ec),e(Ec,rsr),e(Ec,ape),e(ape,tsr),e(Ec,asr),e(Ec,npe),e(npe,nsr),e(Ec,ssr),e(_t,lsr),e(_t,spe),e(spe,isr),e(_t,dsr),g(m6,_t,null),e(Cr,csr),e(Cr,uo),g(g6,uo,null),e(uo,fsr),e(uo,lpe),e(lpe,msr),e(uo,gsr),e(uo,vn),e(vn,hsr),e(vn,ipe),e(ipe,psr),e(vn,_sr),e(vn,dpe),e(dpe,usr),e(vn,bsr),e(vn,cpe),e(cpe,vsr),e(vn,Tsr),e(uo,Fsr),e(uo,h6),e(h6,q7),e(q7,fpe),e(fpe,Csr),e(q7,Msr),e(q7,QG),e(QG,Esr),e(q7,ysr),e(h6,wsr),e(h6,G7),e(G7,mpe),e(mpe,Asr),e(G7,Lsr),e(G7,HG),e(HG,Bsr),e(G7,xsr),e(uo,ksr),e(uo,gpe),e(gpe,Rsr),e(uo,Ssr),g(p6,uo,null),b(c,bRe,u),b(c,yc,u),e(yc,O7),e(O7,hpe),g(_6,hpe,null),e(yc,Psr),e(yc,ppe),e(ppe,$sr),b(c,vRe,u),b(c,Mr,u),g(u6,Mr,null),e(Mr,Isr),e(Mr,wc),e(wc,Nsr),e(wc,_pe),e(_pe,Dsr),e(wc,jsr),e(wc,upe),e(upe,qsr),e(wc,Gsr),e(Mr,Osr),e(Mr,b6),e(b6,Xsr),e(b6,bpe),e(bpe,Vsr),e(b6,zsr),e(Mr,Wsr),e(Mr,ut),g(v6,ut,null),e(ut,Qsr),e(ut,vpe),e(vpe,Hsr),e(ut,Usr),e(ut,Ac),e(Ac,Jsr),e(Ac,Tpe),e(Tpe,Ysr),e(Ac,Ksr),e(Ac,Fpe),e(Fpe,Zsr),e(Ac,elr),e(ut,olr),e(ut,Cpe),e(Cpe,rlr),e(ut,tlr),g(T6,ut,null),e(Mr,alr),e(Mr,bo),g(F6,bo,null),e(bo,nlr),e(bo,Mpe),e(Mpe,slr),e(bo,llr),e(bo,Tn),e(Tn,ilr),e(Tn,Epe),e(Epe,dlr),e(Tn,clr),e(Tn,ype),e(ype,flr),e(Tn,mlr),e(Tn,wpe),e(wpe,glr),e(Tn,hlr),e(bo,plr),e(bo,J),e(J,X7),e(X7,Ape),e(Ape,_lr),e(X7,ulr),e(X7,UG),e(UG,blr),e(X7,vlr),e(J,Tlr),e(J,V7),e(V7,Lpe),e(Lpe,Flr),e(V7,Clr),e(V7,JG),e(JG,Mlr),e(V7,Elr),e(J,ylr),e(J,z7),e(z7,Bpe),e(Bpe,wlr),e(z7,Alr),e(z7,YG),e(YG,Llr),e(z7,Blr),e(J,xlr),e(J,W7),e(W7,xpe),e(xpe,klr),e(W7,Rlr),e(W7,KG),e(KG,Slr),e(W7,Plr),e(J,$lr),e(J,Q7),e(Q7,kpe),e(kpe,Ilr),e(Q7,Nlr),e(Q7,ZG),e(ZG,Dlr),e(Q7,jlr),e(J,qlr),e(J,H7),e(H7,Rpe),e(Rpe,Glr),e(H7,Olr),e(H7,eO),e(eO,Xlr),e(H7,Vlr),e(J,zlr),e(J,U7),e(U7,Spe),e(Spe,Wlr),e(U7,Qlr),e(U7,oO),e(oO,Hlr),e(U7,Ulr),e(J,Jlr),e(J,J7),e(J7,Ppe),e(Ppe,Ylr),e(J7,Klr),e(J7,rO),e(rO,Zlr),e(J7,eir),e(J,oir),e(J,Y7),e(Y7,$pe),e($pe,rir),e(Y7,tir),e(Y7,tO),e(tO,air),e(Y7,nir),e(J,sir),e(J,K7),e(K7,Ipe),e(Ipe,lir),e(K7,iir),e(K7,aO),e(aO,dir),e(K7,cir),e(J,fir),e(J,Z7),e(Z7,Npe),e(Npe,mir),e(Z7,gir),e(Z7,nO),e(nO,hir),e(Z7,pir),e(J,_ir),e(J,e8),e(e8,Dpe),e(Dpe,uir),e(e8,bir),e(e8,sO),e(sO,vir),e(e8,Tir),e(J,Fir),e(J,o8),e(o8,jpe),e(jpe,Cir),e(o8,Mir),e(o8,lO),e(lO,Eir),e(o8,yir),e(J,wir),e(J,r8),e(r8,qpe),e(qpe,Air),e(r8,Lir),e(r8,iO),e(iO,Bir),e(r8,xir),e(J,kir),e(J,t8),e(t8,Gpe),e(Gpe,Rir),e(t8,Sir),e(t8,dO),e(dO,Pir),e(t8,$ir),e(J,Iir),e(J,a8),e(a8,Ope),e(Ope,Nir),e(a8,Dir),e(a8,cO),e(cO,jir),e(a8,qir),e(J,Gir),e(J,n8),e(n8,Xpe),e(Xpe,Oir),e(n8,Xir),e(n8,fO),e(fO,Vir),e(n8,zir),e(J,Wir),e(J,s8),e(s8,Vpe),e(Vpe,Qir),e(s8,Hir),e(s8,mO),e(mO,Uir),e(s8,Jir),e(J,Yir),e(J,l8),e(l8,zpe),e(zpe,Kir),e(l8,Zir),e(l8,gO),e(gO,edr),e(l8,odr),e(J,rdr),e(J,i8),e(i8,Wpe),e(Wpe,tdr),e(i8,adr),e(i8,hO),e(hO,ndr),e(i8,sdr),e(bo,ldr),e(bo,Qpe),e(Qpe,idr),e(bo,ddr),g(C6,bo,null),b(c,TRe,u),b(c,Lc,u),e(Lc,d8),e(d8,Hpe),g(M6,Hpe,null),e(Lc,cdr),e(Lc,Upe),e(Upe,fdr),b(c,FRe,u),b(c,Er,u),g(E6,Er,null),e(Er,mdr),e(Er,Bc),e(Bc,gdr),e(Bc,Jpe),e(Jpe,hdr),e(Bc,pdr),e(Bc,Ype),e(Ype,_dr),e(Bc,udr),e(Er,bdr),e(Er,y6),e(y6,vdr),e(y6,Kpe),e(Kpe,Tdr),e(y6,Fdr),e(Er,Cdr),e(Er,bt),g(w6,bt,null),e(bt,Mdr),e(bt,Zpe),e(Zpe,Edr),e(bt,ydr),e(bt,xc),e(xc,wdr),e(xc,e_e),e(e_e,Adr),e(xc,Ldr),e(xc,o_e),e(o_e,Bdr),e(xc,xdr),e(bt,kdr),e(bt,r_e),e(r_e,Rdr),e(bt,Sdr),g(A6,bt,null),e(Er,Pdr),e(Er,vo),g(L6,vo,null),e(vo,$dr),e(vo,t_e),e(t_e,Idr),e(vo,Ndr),e(vo,Fn),e(Fn,Ddr),e(Fn,a_e),e(a_e,jdr),e(Fn,qdr),e(Fn,n_e),e(n_e,Gdr),e(Fn,Odr),e(Fn,s_e),e(s_e,Xdr),e(Fn,Vdr),e(vo,zdr),e(vo,_e),e(_e,c8),e(c8,l_e),e(l_e,Wdr),e(c8,Qdr),e(c8,pO),e(pO,Hdr),e(c8,Udr),e(_e,Jdr),e(_e,f8),e(f8,i_e),e(i_e,Ydr),e(f8,Kdr),e(f8,_O),e(_O,Zdr),e(f8,ecr),e(_e,ocr),e(_e,m8),e(m8,d_e),e(d_e,rcr),e(m8,tcr),e(m8,uO),e(uO,acr),e(m8,ncr),e(_e,scr),e(_e,g8),e(g8,c_e),e(c_e,lcr),e(g8,icr),e(g8,bO),e(bO,dcr),e(g8,ccr),e(_e,fcr),e(_e,h8),e(h8,f_e),e(f_e,mcr),e(h8,gcr),e(h8,vO),e(vO,hcr),e(h8,pcr),e(_e,_cr),e(_e,p8),e(p8,m_e),e(m_e,ucr),e(p8,bcr),e(p8,TO),e(TO,vcr),e(p8,Tcr),e(_e,Fcr),e(_e,_8),e(_8,g_e),e(g_e,Ccr),e(_8,Mcr),e(_8,FO),e(FO,Ecr),e(_8,ycr),e(_e,wcr),e(_e,u8),e(u8,h_e),e(h_e,Acr),e(u8,Lcr),e(u8,CO),e(CO,Bcr),e(u8,xcr),e(_e,kcr),e(_e,b8),e(b8,p_e),e(p_e,Rcr),e(b8,Scr),e(b8,MO),e(MO,Pcr),e(b8,$cr),e(_e,Icr),e(_e,v8),e(v8,__e),e(__e,Ncr),e(v8,Dcr),e(v8,EO),e(EO,jcr),e(v8,qcr),e(vo,Gcr),e(vo,u_e),e(u_e,Ocr),e(vo,Xcr),g(B6,vo,null),b(c,CRe,u),b(c,kc,u),e(kc,T8),e(T8,b_e),g(x6,b_e,null),e(kc,Vcr),e(kc,v_e),e(v_e,zcr),b(c,MRe,u),b(c,yr,u),g(k6,yr,null),e(yr,Wcr),e(yr,Rc),e(Rc,Qcr),e(Rc,T_e),e(T_e,Hcr),e(Rc,Ucr),e(Rc,F_e),e(F_e,Jcr),e(Rc,Ycr),e(yr,Kcr),e(yr,R6),e(R6,Zcr),e(R6,C_e),e(C_e,efr),e(R6,ofr),e(yr,rfr),e(yr,vt),g(S6,vt,null),e(vt,tfr),e(vt,M_e),e(M_e,afr),e(vt,nfr),e(vt,Sc),e(Sc,sfr),e(Sc,E_e),e(E_e,lfr),e(Sc,ifr),e(Sc,y_e),e(y_e,dfr),e(Sc,cfr),e(vt,ffr),e(vt,w_e),e(w_e,mfr),e(vt,gfr),g(P6,vt,null),e(yr,hfr),e(yr,To),g($6,To,null),e(To,pfr),e(To,A_e),e(A_e,_fr),e(To,ufr),e(To,Cn),e(Cn,bfr),e(Cn,L_e),e(L_e,vfr),e(Cn,Tfr),e(Cn,B_e),e(B_e,Ffr),e(Cn,Cfr),e(Cn,x_e),e(x_e,Mfr),e(Cn,Efr),e(To,yfr),e(To,V),e(V,F8),e(F8,k_e),e(k_e,wfr),e(F8,Afr),e(F8,yO),e(yO,Lfr),e(F8,Bfr),e(V,xfr),e(V,C8),e(C8,R_e),e(R_e,kfr),e(C8,Rfr),e(C8,wO),e(wO,Sfr),e(C8,Pfr),e(V,$fr),e(V,M8),e(M8,S_e),e(S_e,Ifr),e(M8,Nfr),e(M8,AO),e(AO,Dfr),e(M8,jfr),e(V,qfr),e(V,E8),e(E8,P_e),e(P_e,Gfr),e(E8,Ofr),e(E8,LO),e(LO,Xfr),e(E8,Vfr),e(V,zfr),e(V,y8),e(y8,$_e),e($_e,Wfr),e(y8,Qfr),e(y8,BO),e(BO,Hfr),e(y8,Ufr),e(V,Jfr),e(V,w8),e(w8,I_e),e(I_e,Yfr),e(w8,Kfr),e(w8,xO),e(xO,Zfr),e(w8,emr),e(V,omr),e(V,A8),e(A8,N_e),e(N_e,rmr),e(A8,tmr),e(A8,kO),e(kO,amr),e(A8,nmr),e(V,smr),e(V,L8),e(L8,D_e),e(D_e,lmr),e(L8,imr),e(L8,RO),e(RO,dmr),e(L8,cmr),e(V,fmr),e(V,B8),e(B8,j_e),e(j_e,mmr),e(B8,gmr),e(B8,SO),e(SO,hmr),e(B8,pmr),e(V,_mr),e(V,x8),e(x8,q_e),e(q_e,umr),e(x8,bmr),e(x8,PO),e(PO,vmr),e(x8,Tmr),e(V,Fmr),e(V,k8),e(k8,G_e),e(G_e,Cmr),e(k8,Mmr),e(k8,$O),e($O,Emr),e(k8,ymr),e(V,wmr),e(V,R8),e(R8,O_e),e(O_e,Amr),e(R8,Lmr),e(R8,IO),e(IO,Bmr),e(R8,xmr),e(V,kmr),e(V,S8),e(S8,X_e),e(X_e,Rmr),e(S8,Smr),e(S8,NO),e(NO,Pmr),e(S8,$mr),e(V,Imr),e(V,P8),e(P8,V_e),e(V_e,Nmr),e(P8,Dmr),e(P8,DO),e(DO,jmr),e(P8,qmr),e(V,Gmr),e(V,$8),e($8,z_e),e(z_e,Omr),e($8,Xmr),e($8,jO),e(jO,Vmr),e($8,zmr),e(V,Wmr),e(V,I8),e(I8,W_e),e(W_e,Qmr),e(I8,Hmr),e(I8,qO),e(qO,Umr),e(I8,Jmr),e(V,Ymr),e(V,N8),e(N8,Q_e),e(Q_e,Kmr),e(N8,Zmr),e(N8,GO),e(GO,egr),e(N8,ogr),e(V,rgr),e(V,D8),e(D8,H_e),e(H_e,tgr),e(D8,agr),e(D8,OO),e(OO,ngr),e(D8,sgr),e(V,lgr),e(V,j8),e(j8,U_e),e(U_e,igr),e(j8,dgr),e(j8,XO),e(XO,cgr),e(j8,fgr),e(V,mgr),e(V,q8),e(q8,J_e),e(J_e,ggr),e(q8,hgr),e(q8,VO),e(VO,pgr),e(q8,_gr),e(V,ugr),e(V,G8),e(G8,Y_e),e(Y_e,bgr),e(G8,vgr),e(G8,zO),e(zO,Tgr),e(G8,Fgr),e(V,Cgr),e(V,O8),e(O8,K_e),e(K_e,Mgr),e(O8,Egr),e(O8,WO),e(WO,ygr),e(O8,wgr),e(V,Agr),e(V,X8),e(X8,Z_e),e(Z_e,Lgr),e(X8,Bgr),e(X8,QO),e(QO,xgr),e(X8,kgr),e(V,Rgr),e(V,V8),e(V8,eue),e(eue,Sgr),e(V8,Pgr),e(V8,HO),e(HO,$gr),e(V8,Igr),e(V,Ngr),e(V,z8),e(z8,oue),e(oue,Dgr),e(z8,jgr),e(z8,UO),e(UO,qgr),e(z8,Ggr),e(To,Ogr),e(To,rue),e(rue,Xgr),e(To,Vgr),g(I6,To,null),b(c,ERe,u),b(c,Pc,u),e(Pc,W8),e(W8,tue),g(N6,tue,null),e(Pc,zgr),e(Pc,aue),e(aue,Wgr),b(c,yRe,u),b(c,wr,u),g(D6,wr,null),e(wr,Qgr),e(wr,$c),e($c,Hgr),e($c,nue),e(nue,Ugr),e($c,Jgr),e($c,sue),e(sue,Ygr),e($c,Kgr),e(wr,Zgr),e(wr,j6),e(j6,ehr),e(j6,lue),e(lue,ohr),e(j6,rhr),e(wr,thr),e(wr,Tt),g(q6,Tt,null),e(Tt,ahr),e(Tt,iue),e(iue,nhr),e(Tt,shr),e(Tt,Ic),e(Ic,lhr),e(Ic,due),e(due,ihr),e(Ic,dhr),e(Ic,cue),e(cue,chr),e(Ic,fhr),e(Tt,mhr),e(Tt,fue),e(fue,ghr),e(Tt,hhr),g(G6,Tt,null),e(wr,phr),e(wr,Fo),g(O6,Fo,null),e(Fo,_hr),e(Fo,mue),e(mue,uhr),e(Fo,bhr),e(Fo,Mn),e(Mn,vhr),e(Mn,gue),e(gue,Thr),e(Mn,Fhr),e(Mn,hue),e(hue,Chr),e(Mn,Mhr),e(Mn,pue),e(pue,Ehr),e(Mn,yhr),e(Fo,whr),e(Fo,ae),e(ae,Q8),e(Q8,_ue),e(_ue,Ahr),e(Q8,Lhr),e(Q8,JO),e(JO,Bhr),e(Q8,xhr),e(ae,khr),e(ae,H8),e(H8,uue),e(uue,Rhr),e(H8,Shr),e(H8,YO),e(YO,Phr),e(H8,$hr),e(ae,Ihr),e(ae,U8),e(U8,bue),e(bue,Nhr),e(U8,Dhr),e(U8,KO),e(KO,jhr),e(U8,qhr),e(ae,Ghr),e(ae,J8),e(J8,vue),e(vue,Ohr),e(J8,Xhr),e(J8,ZO),e(ZO,Vhr),e(J8,zhr),e(ae,Whr),e(ae,Y8),e(Y8,Tue),e(Tue,Qhr),e(Y8,Hhr),e(Y8,eX),e(eX,Uhr),e(Y8,Jhr),e(ae,Yhr),e(ae,K8),e(K8,Fue),e(Fue,Khr),e(K8,Zhr),e(K8,oX),e(oX,epr),e(K8,opr),e(ae,rpr),e(ae,Z8),e(Z8,Cue),e(Cue,tpr),e(Z8,apr),e(Z8,rX),e(rX,npr),e(Z8,spr),e(ae,lpr),e(ae,eF),e(eF,Mue),e(Mue,ipr),e(eF,dpr),e(eF,tX),e(tX,cpr),e(eF,fpr),e(ae,mpr),e(ae,oF),e(oF,Eue),e(Eue,gpr),e(oF,hpr),e(oF,aX),e(aX,ppr),e(oF,_pr),e(ae,upr),e(ae,rF),e(rF,yue),e(yue,bpr),e(rF,vpr),e(rF,nX),e(nX,Tpr),e(rF,Fpr),e(ae,Cpr),e(ae,tF),e(tF,wue),e(wue,Mpr),e(tF,Epr),e(tF,sX),e(sX,ypr),e(tF,wpr),e(ae,Apr),e(ae,aF),e(aF,Aue),e(Aue,Lpr),e(aF,Bpr),e(aF,lX),e(lX,xpr),e(aF,kpr),e(ae,Rpr),e(ae,nF),e(nF,Lue),e(Lue,Spr),e(nF,Ppr),e(nF,iX),e(iX,$pr),e(nF,Ipr),e(ae,Npr),e(ae,sF),e(sF,Bue),e(Bue,Dpr),e(sF,jpr),e(sF,dX),e(dX,qpr),e(sF,Gpr),e(ae,Opr),e(ae,lF),e(lF,xue),e(xue,Xpr),e(lF,Vpr),e(lF,cX),e(cX,zpr),e(lF,Wpr),e(ae,Qpr),e(ae,iF),e(iF,kue),e(kue,Hpr),e(iF,Upr),e(iF,fX),e(fX,Jpr),e(iF,Ypr),e(ae,Kpr),e(ae,dF),e(dF,Rue),e(Rue,Zpr),e(dF,e_r),e(dF,mX),e(mX,o_r),e(dF,r_r),e(Fo,t_r),e(Fo,Sue),e(Sue,a_r),e(Fo,n_r),g(X6,Fo,null),b(c,wRe,u),b(c,Nc,u),e(Nc,cF),e(cF,Pue),g(V6,Pue,null),e(Nc,s_r),e(Nc,$ue),e($ue,l_r),b(c,ARe,u),b(c,Ar,u),g(z6,Ar,null),e(Ar,i_r),e(Ar,Dc),e(Dc,d_r),e(Dc,Iue),e(Iue,c_r),e(Dc,f_r),e(Dc,Nue),e(Nue,m_r),e(Dc,g_r),e(Ar,h_r),e(Ar,W6),e(W6,p_r),e(W6,Due),e(Due,__r),e(W6,u_r),e(Ar,b_r),e(Ar,Ft),g(Q6,Ft,null),e(Ft,v_r),e(Ft,jue),e(jue,T_r),e(Ft,F_r),e(Ft,jc),e(jc,C_r),e(jc,que),e(que,M_r),e(jc,E_r),e(jc,Gue),e(Gue,y_r),e(jc,w_r),e(Ft,A_r),e(Ft,Oue),e(Oue,L_r),e(Ft,B_r),g(H6,Ft,null),e(Ar,x_r),e(Ar,Co),g(U6,Co,null),e(Co,k_r),e(Co,Xue),e(Xue,R_r),e(Co,S_r),e(Co,En),e(En,P_r),e(En,Vue),e(Vue,$_r),e(En,I_r),e(En,zue),e(zue,N_r),e(En,D_r),e(En,Wue),e(Wue,j_r),e(En,q_r),e(Co,G_r),e(Co,Que),e(Que,fF),e(fF,Hue),e(Hue,O_r),e(fF,X_r),e(fF,gX),e(gX,V_r),e(fF,z_r),e(Co,W_r),e(Co,Uue),e(Uue,Q_r),e(Co,H_r),g(J6,Co,null),b(c,LRe,u),b(c,qc,u),e(qc,mF),e(mF,Jue),g(Y6,Jue,null),e(qc,U_r),e(qc,Yue),e(Yue,J_r),b(c,BRe,u),b(c,Lr,u),g(K6,Lr,null),e(Lr,Y_r),e(Lr,Gc),e(Gc,K_r),e(Gc,Kue),e(Kue,Z_r),e(Gc,eur),e(Gc,Zue),e(Zue,our),e(Gc,rur),e(Lr,tur),e(Lr,Z6),e(Z6,aur),e(Z6,e1e),e(e1e,nur),e(Z6,sur),e(Lr,lur),e(Lr,Ct),g(eA,Ct,null),e(Ct,iur),e(Ct,o1e),e(o1e,dur),e(Ct,cur),e(Ct,Oc),e(Oc,fur),e(Oc,r1e),e(r1e,mur),e(Oc,gur),e(Oc,t1e),e(t1e,hur),e(Oc,pur),e(Ct,_ur),e(Ct,a1e),e(a1e,uur),e(Ct,bur),g(oA,Ct,null),e(Lr,vur),e(Lr,Mo),g(rA,Mo,null),e(Mo,Tur),e(Mo,n1e),e(n1e,Fur),e(Mo,Cur),e(Mo,yn),e(yn,Mur),e(yn,s1e),e(s1e,Eur),e(yn,yur),e(yn,l1e),e(l1e,wur),e(yn,Aur),e(yn,i1e),e(i1e,Lur),e(yn,Bur),e(Mo,xur),e(Mo,Y),e(Y,gF),e(gF,d1e),e(d1e,kur),e(gF,Rur),e(gF,hX),e(hX,Sur),e(gF,Pur),e(Y,$ur),e(Y,hF),e(hF,c1e),e(c1e,Iur),e(hF,Nur),e(hF,pX),e(pX,Dur),e(hF,jur),e(Y,qur),e(Y,pF),e(pF,f1e),e(f1e,Gur),e(pF,Our),e(pF,_X),e(_X,Xur),e(pF,Vur),e(Y,zur),e(Y,_F),e(_F,m1e),e(m1e,Wur),e(_F,Qur),e(_F,uX),e(uX,Hur),e(_F,Uur),e(Y,Jur),e(Y,uF),e(uF,g1e),e(g1e,Yur),e(uF,Kur),e(uF,bX),e(bX,Zur),e(uF,e1r),e(Y,o1r),e(Y,bF),e(bF,h1e),e(h1e,r1r),e(bF,t1r),e(bF,vX),e(vX,a1r),e(bF,n1r),e(Y,s1r),e(Y,vF),e(vF,p1e),e(p1e,l1r),e(vF,i1r),e(vF,TX),e(TX,d1r),e(vF,c1r),e(Y,f1r),e(Y,TF),e(TF,_1e),e(_1e,m1r),e(TF,g1r),e(TF,FX),e(FX,h1r),e(TF,p1r),e(Y,_1r),e(Y,FF),e(FF,u1e),e(u1e,u1r),e(FF,b1r),e(FF,CX),e(CX,v1r),e(FF,T1r),e(Y,F1r),e(Y,CF),e(CF,b1e),e(b1e,C1r),e(CF,M1r),e(CF,MX),e(MX,E1r),e(CF,y1r),e(Y,w1r),e(Y,MF),e(MF,v1e),e(v1e,A1r),e(MF,L1r),e(MF,EX),e(EX,B1r),e(MF,x1r),e(Y,k1r),e(Y,EF),e(EF,T1e),e(T1e,R1r),e(EF,S1r),e(EF,yX),e(yX,P1r),e(EF,$1r),e(Y,I1r),e(Y,yF),e(yF,F1e),e(F1e,N1r),e(yF,D1r),e(yF,wX),e(wX,j1r),e(yF,q1r),e(Y,G1r),e(Y,wF),e(wF,C1e),e(C1e,O1r),e(wF,X1r),e(wF,AX),e(AX,V1r),e(wF,z1r),e(Y,W1r),e(Y,AF),e(AF,M1e),e(M1e,Q1r),e(AF,H1r),e(AF,LX),e(LX,U1r),e(AF,J1r),e(Y,Y1r),e(Y,LF),e(LF,E1e),e(E1e,K1r),e(LF,Z1r),e(LF,BX),e(BX,ebr),e(LF,obr),e(Y,rbr),e(Y,BF),e(BF,y1e),e(y1e,tbr),e(BF,abr),e(BF,xX),e(xX,nbr),e(BF,sbr),e(Y,lbr),e(Y,xF),e(xF,w1e),e(w1e,ibr),e(xF,dbr),e(xF,kX),e(kX,cbr),e(xF,fbr),e(Y,mbr),e(Y,kF),e(kF,A1e),e(A1e,gbr),e(kF,hbr),e(kF,RX),e(RX,pbr),e(kF,_br),e(Y,ubr),e(Y,RF),e(RF,L1e),e(L1e,bbr),e(RF,vbr),e(RF,SX),e(SX,Tbr),e(RF,Fbr),e(Mo,Cbr),e(Mo,B1e),e(B1e,Mbr),e(Mo,Ebr),g(tA,Mo,null),b(c,xRe,u),b(c,Xc,u),e(Xc,SF),e(SF,x1e),g(aA,x1e,null),e(Xc,ybr),e(Xc,k1e),e(k1e,wbr),b(c,kRe,u),b(c,Br,u),g(nA,Br,null),e(Br,Abr),e(Br,Vc),e(Vc,Lbr),e(Vc,R1e),e(R1e,Bbr),e(Vc,xbr),e(Vc,S1e),e(S1e,kbr),e(Vc,Rbr),e(Br,Sbr),e(Br,sA),e(sA,Pbr),e(sA,P1e),e(P1e,$br),e(sA,Ibr),e(Br,Nbr),e(Br,Mt),g(lA,Mt,null),e(Mt,Dbr),e(Mt,$1e),e($1e,jbr),e(Mt,qbr),e(Mt,zc),e(zc,Gbr),e(zc,I1e),e(I1e,Obr),e(zc,Xbr),e(zc,N1e),e(N1e,Vbr),e(zc,zbr),e(Mt,Wbr),e(Mt,D1e),e(D1e,Qbr),e(Mt,Hbr),g(iA,Mt,null),e(Br,Ubr),e(Br,Eo),g(dA,Eo,null),e(Eo,Jbr),e(Eo,j1e),e(j1e,Ybr),e(Eo,Kbr),e(Eo,wn),e(wn,Zbr),e(wn,q1e),e(q1e,e5r),e(wn,o5r),e(wn,G1e),e(G1e,r5r),e(wn,t5r),e(wn,O1e),e(O1e,a5r),e(wn,n5r),e(Eo,s5r),e(Eo,Z),e(Z,PF),e(PF,X1e),e(X1e,l5r),e(PF,i5r),e(PF,PX),e(PX,d5r),e(PF,c5r),e(Z,f5r),e(Z,$F),e($F,V1e),e(V1e,m5r),e($F,g5r),e($F,$X),e($X,h5r),e($F,p5r),e(Z,_5r),e(Z,IF),e(IF,z1e),e(z1e,u5r),e(IF,b5r),e(IF,IX),e(IX,v5r),e(IF,T5r),e(Z,F5r),e(Z,NF),e(NF,W1e),e(W1e,C5r),e(NF,M5r),e(NF,NX),e(NX,E5r),e(NF,y5r),e(Z,w5r),e(Z,DF),e(DF,Q1e),e(Q1e,A5r),e(DF,L5r),e(DF,DX),e(DX,B5r),e(DF,x5r),e(Z,k5r),e(Z,jF),e(jF,H1e),e(H1e,R5r),e(jF,S5r),e(jF,jX),e(jX,P5r),e(jF,$5r),e(Z,I5r),e(Z,qF),e(qF,U1e),e(U1e,N5r),e(qF,D5r),e(qF,qX),e(qX,j5r),e(qF,q5r),e(Z,G5r),e(Z,GF),e(GF,J1e),e(J1e,O5r),e(GF,X5r),e(GF,GX),e(GX,V5r),e(GF,z5r),e(Z,W5r),e(Z,OF),e(OF,Y1e),e(Y1e,Q5r),e(OF,H5r),e(OF,OX),e(OX,U5r),e(OF,J5r),e(Z,Y5r),e(Z,XF),e(XF,K1e),e(K1e,K5r),e(XF,Z5r),e(XF,XX),e(XX,e2r),e(XF,o2r),e(Z,r2r),e(Z,VF),e(VF,Z1e),e(Z1e,t2r),e(VF,a2r),e(VF,VX),e(VX,n2r),e(VF,s2r),e(Z,l2r),e(Z,zF),e(zF,ebe),e(ebe,i2r),e(zF,d2r),e(zF,zX),e(zX,c2r),e(zF,f2r),e(Z,m2r),e(Z,WF),e(WF,obe),e(obe,g2r),e(WF,h2r),e(WF,WX),e(WX,p2r),e(WF,_2r),e(Z,u2r),e(Z,QF),e(QF,rbe),e(rbe,b2r),e(QF,v2r),e(QF,QX),e(QX,T2r),e(QF,F2r),e(Z,C2r),e(Z,HF),e(HF,tbe),e(tbe,M2r),e(HF,E2r),e(HF,HX),e(HX,y2r),e(HF,w2r),e(Z,A2r),e(Z,UF),e(UF,abe),e(abe,L2r),e(UF,B2r),e(UF,UX),e(UX,x2r),e(UF,k2r),e(Z,R2r),e(Z,JF),e(JF,nbe),e(nbe,S2r),e(JF,P2r),e(JF,JX),e(JX,$2r),e(JF,I2r),e(Z,N2r),e(Z,YF),e(YF,sbe),e(sbe,D2r),e(YF,j2r),e(YF,YX),e(YX,q2r),e(YF,G2r),e(Z,O2r),e(Z,KF),e(KF,lbe),e(lbe,X2r),e(KF,V2r),e(KF,KX),e(KX,z2r),e(KF,W2r),e(Eo,Q2r),e(Eo,ibe),e(ibe,H2r),e(Eo,U2r),g(cA,Eo,null),b(c,RRe,u),b(c,Wc,u),e(Wc,ZF),e(ZF,dbe),g(fA,dbe,null),e(Wc,J2r),e(Wc,cbe),e(cbe,Y2r),b(c,SRe,u),b(c,xr,u),g(mA,xr,null),e(xr,K2r),e(xr,Qc),e(Qc,Z2r),e(Qc,fbe),e(fbe,evr),e(Qc,ovr),e(Qc,mbe),e(mbe,rvr),e(Qc,tvr),e(xr,avr),e(xr,gA),e(gA,nvr),e(gA,gbe),e(gbe,svr),e(gA,lvr),e(xr,ivr),e(xr,Et),g(hA,Et,null),e(Et,dvr),e(Et,hbe),e(hbe,cvr),e(Et,fvr),e(Et,Hc),e(Hc,mvr),e(Hc,pbe),e(pbe,gvr),e(Hc,hvr),e(Hc,_be),e(_be,pvr),e(Hc,_vr),e(Et,uvr),e(Et,ube),e(ube,bvr),e(Et,vvr),g(pA,Et,null),e(xr,Tvr),e(xr,yo),g(_A,yo,null),e(yo,Fvr),e(yo,bbe),e(bbe,Cvr),e(yo,Mvr),e(yo,An),e(An,Evr),e(An,vbe),e(vbe,yvr),e(An,wvr),e(An,Tbe),e(Tbe,Avr),e(An,Lvr),e(An,Fbe),e(Fbe,Bvr),e(An,xvr),e(yo,kvr),e(yo,Cbe),e(Cbe,eC),e(eC,Mbe),e(Mbe,Rvr),e(eC,Svr),e(eC,ZX),e(ZX,Pvr),e(eC,$vr),e(yo,Ivr),e(yo,Ebe),e(Ebe,Nvr),e(yo,Dvr),g(uA,yo,null),b(c,PRe,u),b(c,Uc,u),e(Uc,oC),e(oC,ybe),g(bA,ybe,null),e(Uc,jvr),e(Uc,wbe),e(wbe,qvr),b(c,$Re,u),b(c,kr,u),g(vA,kr,null),e(kr,Gvr),e(kr,Jc),e(Jc,Ovr),e(Jc,Abe),e(Abe,Xvr),e(Jc,Vvr),e(Jc,Lbe),e(Lbe,zvr),e(Jc,Wvr),e(kr,Qvr),e(kr,TA),e(TA,Hvr),e(TA,Bbe),e(Bbe,Uvr),e(TA,Jvr),e(kr,Yvr),e(kr,yt),g(FA,yt,null),e(yt,Kvr),e(yt,xbe),e(xbe,Zvr),e(yt,eTr),e(yt,Yc),e(Yc,oTr),e(Yc,kbe),e(kbe,rTr),e(Yc,tTr),e(Yc,Rbe),e(Rbe,aTr),e(Yc,nTr),e(yt,sTr),e(yt,Sbe),e(Sbe,lTr),e(yt,iTr),g(CA,yt,null),e(kr,dTr),e(kr,wo),g(MA,wo,null),e(wo,cTr),e(wo,Pbe),e(Pbe,fTr),e(wo,mTr),e(wo,Ln),e(Ln,gTr),e(Ln,$be),e($be,hTr),e(Ln,pTr),e(Ln,Ibe),e(Ibe,_Tr),e(Ln,uTr),e(Ln,Nbe),e(Nbe,bTr),e(Ln,vTr),e(wo,TTr),e(wo,Dbe),e(Dbe,rC),e(rC,jbe),e(jbe,FTr),e(rC,CTr),e(rC,eV),e(eV,MTr),e(rC,ETr),e(wo,yTr),e(wo,qbe),e(qbe,wTr),e(wo,ATr),g(EA,wo,null),b(c,IRe,u),b(c,Kc,u),e(Kc,tC),e(tC,Gbe),g(yA,Gbe,null),e(Kc,LTr),e(Kc,Obe),e(Obe,BTr),b(c,NRe,u),b(c,Rr,u),g(wA,Rr,null),e(Rr,xTr),e(Rr,Zc),e(Zc,kTr),e(Zc,Xbe),e(Xbe,RTr),e(Zc,STr),e(Zc,Vbe),e(Vbe,PTr),e(Zc,$Tr),e(Rr,ITr),e(Rr,AA),e(AA,NTr),e(AA,zbe),e(zbe,DTr),e(AA,jTr),e(Rr,qTr),e(Rr,wt),g(LA,wt,null),e(wt,GTr),e(wt,Wbe),e(Wbe,OTr),e(wt,XTr),e(wt,ef),e(ef,VTr),e(ef,Qbe),e(Qbe,zTr),e(ef,WTr),e(ef,Hbe),e(Hbe,QTr),e(ef,HTr),e(wt,UTr),e(wt,Ube),e(Ube,JTr),e(wt,YTr),g(BA,wt,null),e(Rr,KTr),e(Rr,Ao),g(xA,Ao,null),e(Ao,ZTr),e(Ao,Jbe),e(Jbe,e7r),e(Ao,o7r),e(Ao,Bn),e(Bn,r7r),e(Bn,Ybe),e(Ybe,t7r),e(Bn,a7r),e(Bn,Kbe),e(Kbe,n7r),e(Bn,s7r),e(Bn,Zbe),e(Zbe,l7r),e(Bn,i7r),e(Ao,d7r),e(Ao,z),e(z,aC),e(aC,e5e),e(e5e,c7r),e(aC,f7r),e(aC,oV),e(oV,m7r),e(aC,g7r),e(z,h7r),e(z,nC),e(nC,o5e),e(o5e,p7r),e(nC,_7r),e(nC,rV),e(rV,u7r),e(nC,b7r),e(z,v7r),e(z,sC),e(sC,r5e),e(r5e,T7r),e(sC,F7r),e(sC,tV),e(tV,C7r),e(sC,M7r),e(z,E7r),e(z,lC),e(lC,t5e),e(t5e,y7r),e(lC,w7r),e(lC,aV),e(aV,A7r),e(lC,L7r),e(z,B7r),e(z,iC),e(iC,a5e),e(a5e,x7r),e(iC,k7r),e(iC,nV),e(nV,R7r),e(iC,S7r),e(z,P7r),e(z,dC),e(dC,n5e),e(n5e,$7r),e(dC,I7r),e(dC,sV),e(sV,N7r),e(dC,D7r),e(z,j7r),e(z,cC),e(cC,s5e),e(s5e,q7r),e(cC,G7r),e(cC,lV),e(lV,O7r),e(cC,X7r),e(z,V7r),e(z,fC),e(fC,l5e),e(l5e,z7r),e(fC,W7r),e(fC,iV),e(iV,Q7r),e(fC,H7r),e(z,U7r),e(z,mC),e(mC,i5e),e(i5e,J7r),e(mC,Y7r),e(mC,dV),e(dV,K7r),e(mC,Z7r),e(z,e8r),e(z,gC),e(gC,d5e),e(d5e,o8r),e(gC,r8r),e(gC,cV),e(cV,t8r),e(gC,a8r),e(z,n8r),e(z,hC),e(hC,c5e),e(c5e,s8r),e(hC,l8r),e(hC,fV),e(fV,i8r),e(hC,d8r),e(z,c8r),e(z,pC),e(pC,f5e),e(f5e,f8r),e(pC,m8r),e(pC,mV),e(mV,g8r),e(pC,h8r),e(z,p8r),e(z,_C),e(_C,m5e),e(m5e,_8r),e(_C,u8r),e(_C,gV),e(gV,b8r),e(_C,v8r),e(z,T8r),e(z,uC),e(uC,g5e),e(g5e,F8r),e(uC,C8r),e(uC,hV),e(hV,M8r),e(uC,E8r),e(z,y8r),e(z,bC),e(bC,h5e),e(h5e,w8r),e(bC,A8r),e(bC,pV),e(pV,L8r),e(bC,B8r),e(z,x8r),e(z,vC),e(vC,p5e),e(p5e,k8r),e(vC,R8r),e(vC,_V),e(_V,S8r),e(vC,P8r),e(z,$8r),e(z,TC),e(TC,_5e),e(_5e,I8r),e(TC,N8r),e(TC,uV),e(uV,D8r),e(TC,j8r),e(z,q8r),e(z,FC),e(FC,u5e),e(u5e,G8r),e(FC,O8r),e(FC,bV),e(bV,X8r),e(FC,V8r),e(z,z8r),e(z,CC),e(CC,b5e),e(b5e,W8r),e(CC,Q8r),e(CC,vV),e(vV,H8r),e(CC,U8r),e(z,J8r),e(z,MC),e(MC,v5e),e(v5e,Y8r),e(MC,K8r),e(MC,TV),e(TV,Z8r),e(MC,eFr),e(z,oFr),e(z,EC),e(EC,T5e),e(T5e,rFr),e(EC,tFr),e(EC,FV),e(FV,aFr),e(EC,nFr),e(z,sFr),e(z,yC),e(yC,F5e),e(F5e,lFr),e(yC,iFr),e(yC,CV),e(CV,dFr),e(yC,cFr),e(z,fFr),e(z,wC),e(wC,C5e),e(C5e,mFr),e(wC,gFr),e(wC,MV),e(MV,hFr),e(wC,pFr),e(z,_Fr),e(z,AC),e(AC,M5e),e(M5e,uFr),e(AC,bFr),e(AC,EV),e(EV,vFr),e(AC,TFr),e(z,FFr),e(z,LC),e(LC,E5e),e(E5e,CFr),e(LC,MFr),e(LC,yV),e(yV,EFr),e(LC,yFr),e(Ao,wFr),e(Ao,y5e),e(y5e,AFr),e(Ao,LFr),g(kA,Ao,null),b(c,DRe,u),b(c,of,u),e(of,BC),e(BC,w5e),g(RA,w5e,null),e(of,BFr),e(of,A5e),e(A5e,xFr),b(c,jRe,u),b(c,Sr,u),g(SA,Sr,null),e(Sr,kFr),e(Sr,rf),e(rf,RFr),e(rf,L5e),e(L5e,SFr),e(rf,PFr),e(rf,B5e),e(B5e,$Fr),e(rf,IFr),e(Sr,NFr),e(Sr,PA),e(PA,DFr),e(PA,x5e),e(x5e,jFr),e(PA,qFr),e(Sr,GFr),e(Sr,At),g($A,At,null),e(At,OFr),e(At,k5e),e(k5e,XFr),e(At,VFr),e(At,tf),e(tf,zFr),e(tf,R5e),e(R5e,WFr),e(tf,QFr),e(tf,S5e),e(S5e,HFr),e(tf,UFr),e(At,JFr),e(At,P5e),e(P5e,YFr),e(At,KFr),g(IA,At,null),e(Sr,ZFr),e(Sr,Lo),g(NA,Lo,null),e(Lo,eCr),e(Lo,$5e),e($5e,oCr),e(Lo,rCr),e(Lo,xn),e(xn,tCr),e(xn,I5e),e(I5e,aCr),e(xn,nCr),e(xn,N5e),e(N5e,sCr),e(xn,lCr),e(xn,D5e),e(D5e,iCr),e(xn,dCr),e(Lo,cCr),e(Lo,ca),e(ca,xC),e(xC,j5e),e(j5e,fCr),e(xC,mCr),e(xC,wV),e(wV,gCr),e(xC,hCr),e(ca,pCr),e(ca,kC),e(kC,q5e),e(q5e,_Cr),e(kC,uCr),e(kC,AV),e(AV,bCr),e(kC,vCr),e(ca,TCr),e(ca,RC),e(RC,G5e),e(G5e,FCr),e(RC,CCr),e(RC,LV),e(LV,MCr),e(RC,ECr),e(ca,yCr),e(ca,SC),e(SC,O5e),e(O5e,wCr),e(SC,ACr),e(SC,BV),e(BV,LCr),e(SC,BCr),e(ca,xCr),e(ca,PC),e(PC,X5e),e(X5e,kCr),e(PC,RCr),e(PC,xV),e(xV,SCr),e(PC,PCr),e(Lo,$Cr),e(Lo,V5e),e(V5e,ICr),e(Lo,NCr),g(DA,Lo,null),b(c,qRe,u),b(c,af,u),e(af,$C),e($C,z5e),g(jA,z5e,null),e(af,DCr),e(af,W5e),e(W5e,jCr),b(c,GRe,u),b(c,Pr,u),g(qA,Pr,null),e(Pr,qCr),e(Pr,nf),e(nf,GCr),e(nf,Q5e),e(Q5e,OCr),e(nf,XCr),e(nf,H5e),e(H5e,VCr),e(nf,zCr),e(Pr,WCr),e(Pr,GA),e(GA,QCr),e(GA,U5e),e(U5e,HCr),e(GA,UCr),e(Pr,JCr),e(Pr,Lt),g(OA,Lt,null),e(Lt,YCr),e(Lt,J5e),e(J5e,KCr),e(Lt,ZCr),e(Lt,sf),e(sf,eMr),e(sf,Y5e),e(Y5e,oMr),e(sf,rMr),e(sf,K5e),e(K5e,tMr),e(sf,aMr),e(Lt,nMr),e(Lt,Z5e),e(Z5e,sMr),e(Lt,lMr),g(XA,Lt,null),e(Pr,iMr),e(Pr,Bo),g(VA,Bo,null),e(Bo,dMr),e(Bo,e2e),e(e2e,cMr),e(Bo,fMr),e(Bo,kn),e(kn,mMr),e(kn,o2e),e(o2e,gMr),e(kn,hMr),e(kn,r2e),e(r2e,pMr),e(kn,_Mr),e(kn,t2e),e(t2e,uMr),e(kn,bMr),e(Bo,vMr),e(Bo,ce),e(ce,IC),e(IC,a2e),e(a2e,TMr),e(IC,FMr),e(IC,kV),e(kV,CMr),e(IC,MMr),e(ce,EMr),e(ce,NC),e(NC,n2e),e(n2e,yMr),e(NC,wMr),e(NC,RV),e(RV,AMr),e(NC,LMr),e(ce,BMr),e(ce,DC),e(DC,s2e),e(s2e,xMr),e(DC,kMr),e(DC,SV),e(SV,RMr),e(DC,SMr),e(ce,PMr),e(ce,jC),e(jC,l2e),e(l2e,$Mr),e(jC,IMr),e(jC,PV),e(PV,NMr),e(jC,DMr),e(ce,jMr),e(ce,qC),e(qC,i2e),e(i2e,qMr),e(qC,GMr),e(qC,$V),e($V,OMr),e(qC,XMr),e(ce,VMr),e(ce,GC),e(GC,d2e),e(d2e,zMr),e(GC,WMr),e(GC,IV),e(IV,QMr),e(GC,HMr),e(ce,UMr),e(ce,OC),e(OC,c2e),e(c2e,JMr),e(OC,YMr),e(OC,NV),e(NV,KMr),e(OC,ZMr),e(ce,e4r),e(ce,XC),e(XC,f2e),e(f2e,o4r),e(XC,r4r),e(XC,DV),e(DV,t4r),e(XC,a4r),e(ce,n4r),e(ce,VC),e(VC,m2e),e(m2e,s4r),e(VC,l4r),e(VC,jV),e(jV,i4r),e(VC,d4r),e(ce,c4r),e(ce,zC),e(zC,g2e),e(g2e,f4r),e(zC,m4r),e(zC,qV),e(qV,g4r),e(zC,h4r),e(ce,p4r),e(ce,WC),e(WC,h2e),e(h2e,_4r),e(WC,u4r),e(WC,GV),e(GV,b4r),e(WC,v4r),e(ce,T4r),e(ce,QC),e(QC,p2e),e(p2e,F4r),e(QC,C4r),e(QC,OV),e(OV,M4r),e(QC,E4r),e(Bo,y4r),e(Bo,_2e),e(_2e,w4r),e(Bo,A4r),g(zA,Bo,null),b(c,ORe,u),b(c,lf,u),e(lf,HC),e(HC,u2e),g(WA,u2e,null),e(lf,L4r),e(lf,b2e),e(b2e,B4r),b(c,XRe,u),b(c,$r,u),g(QA,$r,null),e($r,x4r),e($r,df),e(df,k4r),e(df,v2e),e(v2e,R4r),e(df,S4r),e(df,T2e),e(T2e,P4r),e(df,$4r),e($r,I4r),e($r,HA),e(HA,N4r),e(HA,F2e),e(F2e,D4r),e(HA,j4r),e($r,q4r),e($r,Bt),g(UA,Bt,null),e(Bt,G4r),e(Bt,C2e),e(C2e,O4r),e(Bt,X4r),e(Bt,cf),e(cf,V4r),e(cf,M2e),e(M2e,z4r),e(cf,W4r),e(cf,E2e),e(E2e,Q4r),e(cf,H4r),e(Bt,U4r),e(Bt,y2e),e(y2e,J4r),e(Bt,Y4r),g(JA,Bt,null),e($r,K4r),e($r,xo),g(YA,xo,null),e(xo,Z4r),e(xo,w2e),e(w2e,eEr),e(xo,oEr),e(xo,Rn),e(Rn,rEr),e(Rn,A2e),e(A2e,tEr),e(Rn,aEr),e(Rn,L2e),e(L2e,nEr),e(Rn,sEr),e(Rn,B2e),e(B2e,lEr),e(Rn,iEr),e(xo,dEr),e(xo,ue),e(ue,UC),e(UC,x2e),e(x2e,cEr),e(UC,fEr),e(UC,XV),e(XV,mEr),e(UC,gEr),e(ue,hEr),e(ue,JC),e(JC,k2e),e(k2e,pEr),e(JC,_Er),e(JC,VV),e(VV,uEr),e(JC,bEr),e(ue,vEr),e(ue,YC),e(YC,R2e),e(R2e,TEr),e(YC,FEr),e(YC,zV),e(zV,CEr),e(YC,MEr),e(ue,EEr),e(ue,KC),e(KC,S2e),e(S2e,yEr),e(KC,wEr),e(KC,WV),e(WV,AEr),e(KC,LEr),e(ue,BEr),e(ue,ZC),e(ZC,P2e),e(P2e,xEr),e(ZC,kEr),e(ZC,QV),e(QV,REr),e(ZC,SEr),e(ue,PEr),e(ue,eM),e(eM,$2e),e($2e,$Er),e(eM,IEr),e(eM,HV),e(HV,NEr),e(eM,DEr),e(ue,jEr),e(ue,oM),e(oM,I2e),e(I2e,qEr),e(oM,GEr),e(oM,UV),e(UV,OEr),e(oM,XEr),e(ue,VEr),e(ue,rM),e(rM,N2e),e(N2e,zEr),e(rM,WEr),e(rM,JV),e(JV,QEr),e(rM,HEr),e(ue,UEr),e(ue,tM),e(tM,D2e),e(D2e,JEr),e(tM,YEr),e(tM,YV),e(YV,KEr),e(tM,ZEr),e(ue,e3r),e(ue,aM),e(aM,j2e),e(j2e,o3r),e(aM,r3r),e(aM,KV),e(KV,t3r),e(aM,a3r),e(xo,n3r),e(xo,q2e),e(q2e,s3r),e(xo,l3r),g(KA,xo,null),b(c,VRe,u),b(c,ff,u),e(ff,nM),e(nM,G2e),g(ZA,G2e,null),e(ff,i3r),e(ff,O2e),e(O2e,d3r),b(c,zRe,u),b(c,Ir,u),g(e0,Ir,null),e(Ir,c3r),e(Ir,mf),e(mf,f3r),e(mf,X2e),e(X2e,m3r),e(mf,g3r),e(mf,V2e),e(V2e,h3r),e(mf,p3r),e(Ir,_3r),e(Ir,o0),e(o0,u3r),e(o0,z2e),e(z2e,b3r),e(o0,v3r),e(Ir,T3r),e(Ir,xt),g(r0,xt,null),e(xt,F3r),e(xt,W2e),e(W2e,C3r),e(xt,M3r),e(xt,gf),e(gf,E3r),e(gf,Q2e),e(Q2e,y3r),e(gf,w3r),e(gf,H2e),e(H2e,A3r),e(gf,L3r),e(xt,B3r),e(xt,U2e),e(U2e,x3r),e(xt,k3r),g(t0,xt,null),e(Ir,R3r),e(Ir,ko),g(a0,ko,null),e(ko,S3r),e(ko,J2e),e(J2e,P3r),e(ko,$3r),e(ko,Sn),e(Sn,I3r),e(Sn,Y2e),e(Y2e,N3r),e(Sn,D3r),e(Sn,K2e),e(K2e,j3r),e(Sn,q3r),e(Sn,Z2e),e(Z2e,G3r),e(Sn,O3r),e(ko,X3r),e(ko,Me),e(Me,sM),e(sM,eve),e(eve,V3r),e(sM,z3r),e(sM,ZV),e(ZV,W3r),e(sM,Q3r),e(Me,H3r),e(Me,lM),e(lM,ove),e(ove,U3r),e(lM,J3r),e(lM,ez),e(ez,Y3r),e(lM,K3r),e(Me,Z3r),e(Me,iM),e(iM,rve),e(rve,eyr),e(iM,oyr),e(iM,oz),e(oz,ryr),e(iM,tyr),e(Me,ayr),e(Me,dM),e(dM,tve),e(tve,nyr),e(dM,syr),e(dM,rz),e(rz,lyr),e(dM,iyr),e(Me,dyr),e(Me,cM),e(cM,ave),e(ave,cyr),e(cM,fyr),e(cM,tz),e(tz,myr),e(cM,gyr),e(Me,hyr),e(Me,fM),e(fM,nve),e(nve,pyr),e(fM,_yr),e(fM,az),e(az,uyr),e(fM,byr),e(Me,vyr),e(Me,mM),e(mM,sve),e(sve,Tyr),e(mM,Fyr),e(mM,nz),e(nz,Cyr),e(mM,Myr),e(Me,Eyr),e(Me,gM),e(gM,lve),e(lve,yyr),e(gM,wyr),e(gM,sz),e(sz,Ayr),e(gM,Lyr),e(Me,Byr),e(Me,hM),e(hM,ive),e(ive,xyr),e(hM,kyr),e(hM,lz),e(lz,Ryr),e(hM,Syr),e(ko,Pyr),e(ko,dve),e(dve,$yr),e(ko,Iyr),g(n0,ko,null),b(c,WRe,u),b(c,hf,u),e(hf,pM),e(pM,cve),g(s0,cve,null),e(hf,Nyr),e(hf,fve),e(fve,Dyr),b(c,QRe,u),b(c,Nr,u),g(l0,Nr,null),e(Nr,jyr),e(Nr,pf),e(pf,qyr),e(pf,mve),e(mve,Gyr),e(pf,Oyr),e(pf,gve),e(gve,Xyr),e(pf,Vyr),e(Nr,zyr),e(Nr,i0),e(i0,Wyr),e(i0,hve),e(hve,Qyr),e(i0,Hyr),e(Nr,Uyr),e(Nr,kt),g(d0,kt,null),e(kt,Jyr),e(kt,pve),e(pve,Yyr),e(kt,Kyr),e(kt,_f),e(_f,Zyr),e(_f,_ve),e(_ve,ewr),e(_f,owr),e(_f,uve),e(uve,rwr),e(_f,twr),e(kt,awr),e(kt,bve),e(bve,nwr),e(kt,swr),g(c0,kt,null),e(Nr,lwr),e(Nr,Ro),g(f0,Ro,null),e(Ro,iwr),e(Ro,vve),e(vve,dwr),e(Ro,cwr),e(Ro,Pn),e(Pn,fwr),e(Pn,Tve),e(Tve,mwr),e(Pn,gwr),e(Pn,Fve),e(Fve,hwr),e(Pn,pwr),e(Pn,Cve),e(Cve,_wr),e(Pn,uwr),e(Ro,bwr),e(Ro,be),e(be,_M),e(_M,Mve),e(Mve,vwr),e(_M,Twr),e(_M,iz),e(iz,Fwr),e(_M,Cwr),e(be,Mwr),e(be,uM),e(uM,Eve),e(Eve,Ewr),e(uM,ywr),e(uM,dz),e(dz,wwr),e(uM,Awr),e(be,Lwr),e(be,bM),e(bM,yve),e(yve,Bwr),e(bM,xwr),e(bM,cz),e(cz,kwr),e(bM,Rwr),e(be,Swr),e(be,vM),e(vM,wve),e(wve,Pwr),e(vM,$wr),e(vM,fz),e(fz,Iwr),e(vM,Nwr),e(be,Dwr),e(be,TM),e(TM,Ave),e(Ave,jwr),e(TM,qwr),e(TM,mz),e(mz,Gwr),e(TM,Owr),e(be,Xwr),e(be,FM),e(FM,Lve),e(Lve,Vwr),e(FM,zwr),e(FM,gz),e(gz,Wwr),e(FM,Qwr),e(be,Hwr),e(be,CM),e(CM,Bve),e(Bve,Uwr),e(CM,Jwr),e(CM,hz),e(hz,Ywr),e(CM,Kwr),e(be,Zwr),e(be,MM),e(MM,xve),e(xve,e6r),e(MM,o6r),e(MM,pz),e(pz,r6r),e(MM,t6r),e(be,a6r),e(be,EM),e(EM,kve),e(kve,n6r),e(EM,s6r),e(EM,_z),e(_z,l6r),e(EM,i6r),e(be,d6r),e(be,yM),e(yM,Rve),e(Rve,c6r),e(yM,f6r),e(yM,uz),e(uz,m6r),e(yM,g6r),e(Ro,h6r),e(Ro,Sve),e(Sve,p6r),e(Ro,_6r),g(m0,Ro,null),b(c,HRe,u),b(c,uf,u),e(uf,wM),e(wM,Pve),g(g0,Pve,null),e(uf,u6r),e(uf,$ve),e($ve,b6r),b(c,URe,u),b(c,Dr,u),g(h0,Dr,null),e(Dr,v6r),e(Dr,bf),e(bf,T6r),e(bf,Ive),e(Ive,F6r),e(bf,C6r),e(bf,Nve),e(Nve,M6r),e(bf,E6r),e(Dr,y6r),e(Dr,p0),e(p0,w6r),e(p0,Dve),e(Dve,A6r),e(p0,L6r),e(Dr,B6r),e(Dr,Rt),g(_0,Rt,null),e(Rt,x6r),e(Rt,jve),e(jve,k6r),e(Rt,R6r),e(Rt,vf),e(vf,S6r),e(vf,qve),e(qve,P6r),e(vf,$6r),e(vf,Gve),e(Gve,I6r),e(vf,N6r),e(Rt,D6r),e(Rt,Ove),e(Ove,j6r),e(Rt,q6r),g(u0,Rt,null),e(Dr,G6r),e(Dr,So),g(b0,So,null),e(So,O6r),e(So,Xve),e(Xve,X6r),e(So,V6r),e(So,$n),e($n,z6r),e($n,Vve),e(Vve,W6r),e($n,Q6r),e($n,zve),e(zve,H6r),e($n,U6r),e($n,Wve),e(Wve,J6r),e($n,Y6r),e(So,K6r),e(So,ve),e(ve,AM),e(AM,Qve),e(Qve,Z6r),e(AM,eAr),e(AM,bz),e(bz,oAr),e(AM,rAr),e(ve,tAr),e(ve,LM),e(LM,Hve),e(Hve,aAr),e(LM,nAr),e(LM,vz),e(vz,sAr),e(LM,lAr),e(ve,iAr),e(ve,BM),e(BM,Uve),e(Uve,dAr),e(BM,cAr),e(BM,Tz),e(Tz,fAr),e(BM,mAr),e(ve,gAr),e(ve,xM),e(xM,Jve),e(Jve,hAr),e(xM,pAr),e(xM,Fz),e(Fz,_Ar),e(xM,uAr),e(ve,bAr),e(ve,kM),e(kM,Yve),e(Yve,vAr),e(kM,TAr),e(kM,Cz),e(Cz,FAr),e(kM,CAr),e(ve,MAr),e(ve,RM),e(RM,Kve),e(Kve,EAr),e(RM,yAr),e(RM,Mz),e(Mz,wAr),e(RM,AAr),e(ve,LAr),e(ve,SM),e(SM,Zve),e(Zve,BAr),e(SM,xAr),e(SM,Ez),e(Ez,kAr),e(SM,RAr),e(ve,SAr),e(ve,PM),e(PM,eTe),e(eTe,PAr),e(PM,$Ar),e(PM,yz),e(yz,IAr),e(PM,NAr),e(ve,DAr),e(ve,$M),e($M,oTe),e(oTe,jAr),e($M,qAr),e($M,wz),e(wz,GAr),e($M,OAr),e(ve,XAr),e(ve,IM),e(IM,rTe),e(rTe,VAr),e(IM,zAr),e(IM,Az),e(Az,WAr),e(IM,QAr),e(So,HAr),e(So,tTe),e(tTe,UAr),e(So,JAr),g(v0,So,null),b(c,JRe,u),b(c,Tf,u),e(Tf,NM),e(NM,aTe),g(T0,aTe,null),e(Tf,YAr),e(Tf,nTe),e(nTe,KAr),b(c,YRe,u),b(c,jr,u),g(F0,jr,null),e(jr,ZAr),e(jr,Ff),e(Ff,e0r),e(Ff,sTe),e(sTe,o0r),e(Ff,r0r),e(Ff,lTe),e(lTe,t0r),e(Ff,a0r),e(jr,n0r),e(jr,C0),e(C0,s0r),e(C0,iTe),e(iTe,l0r),e(C0,i0r),e(jr,d0r),e(jr,St),g(M0,St,null),e(St,c0r),e(St,dTe),e(dTe,f0r),e(St,m0r),e(St,Cf),e(Cf,g0r),e(Cf,cTe),e(cTe,h0r),e(Cf,p0r),e(Cf,fTe),e(fTe,_0r),e(Cf,u0r),e(St,b0r),e(St,mTe),e(mTe,v0r),e(St,T0r),g(E0,St,null),e(jr,F0r),e(jr,Po),g(y0,Po,null),e(Po,C0r),e(Po,gTe),e(gTe,M0r),e(Po,E0r),e(Po,In),e(In,y0r),e(In,hTe),e(hTe,w0r),e(In,A0r),e(In,pTe),e(pTe,L0r),e(In,B0r),e(In,_Te),e(_Te,x0r),e(In,k0r),e(Po,R0r),e(Po,Se),e(Se,DM),e(DM,uTe),e(uTe,S0r),e(DM,P0r),e(DM,Lz),e(Lz,$0r),e(DM,I0r),e(Se,N0r),e(Se,jM),e(jM,bTe),e(bTe,D0r),e(jM,j0r),e(jM,Bz),e(Bz,q0r),e(jM,G0r),e(Se,O0r),e(Se,qM),e(qM,vTe),e(vTe,X0r),e(qM,V0r),e(qM,xz),e(xz,z0r),e(qM,W0r),e(Se,Q0r),e(Se,GM),e(GM,TTe),e(TTe,H0r),e(GM,U0r),e(GM,kz),e(kz,J0r),e(GM,Y0r),e(Se,K0r),e(Se,OM),e(OM,FTe),e(FTe,Z0r),e(OM,eLr),e(OM,Rz),e(Rz,oLr),e(OM,rLr),e(Se,tLr),e(Se,XM),e(XM,CTe),e(CTe,aLr),e(XM,nLr),e(XM,Sz),e(Sz,sLr),e(XM,lLr),e(Se,iLr),e(Se,VM),e(VM,MTe),e(MTe,dLr),e(VM,cLr),e(VM,Pz),e(Pz,fLr),e(VM,mLr),e(Se,gLr),e(Se,zM),e(zM,ETe),e(ETe,hLr),e(zM,pLr),e(zM,$z),e($z,_Lr),e(zM,uLr),e(Po,bLr),e(Po,yTe),e(yTe,vLr),e(Po,TLr),g(w0,Po,null),b(c,KRe,u),b(c,Mf,u),e(Mf,WM),e(WM,wTe),g(A0,wTe,null),e(Mf,FLr),e(Mf,ATe),e(ATe,CLr),b(c,ZRe,u),b(c,qr,u),g(L0,qr,null),e(qr,MLr),e(qr,Ef),e(Ef,ELr),e(Ef,LTe),e(LTe,yLr),e(Ef,wLr),e(Ef,BTe),e(BTe,ALr),e(Ef,LLr),e(qr,BLr),e(qr,B0),e(B0,xLr),e(B0,xTe),e(xTe,kLr),e(B0,RLr),e(qr,SLr),e(qr,Pt),g(x0,Pt,null),e(Pt,PLr),e(Pt,kTe),e(kTe,$Lr),e(Pt,ILr),e(Pt,yf),e(yf,NLr),e(yf,RTe),e(RTe,DLr),e(yf,jLr),e(yf,STe),e(STe,qLr),e(yf,GLr),e(Pt,OLr),e(Pt,PTe),e(PTe,XLr),e(Pt,VLr),g(k0,Pt,null),e(qr,zLr),e(qr,$o),g(R0,$o,null),e($o,WLr),e($o,$Te),e($Te,QLr),e($o,HLr),e($o,Nn),e(Nn,ULr),e(Nn,ITe),e(ITe,JLr),e(Nn,YLr),e(Nn,NTe),e(NTe,KLr),e(Nn,ZLr),e(Nn,DTe),e(DTe,e9r),e(Nn,o9r),e($o,r9r),e($o,Pe),e(Pe,QM),e(QM,jTe),e(jTe,t9r),e(QM,a9r),e(QM,Iz),e(Iz,n9r),e(QM,s9r),e(Pe,l9r),e(Pe,HM),e(HM,qTe),e(qTe,i9r),e(HM,d9r),e(HM,Nz),e(Nz,c9r),e(HM,f9r),e(Pe,m9r),e(Pe,UM),e(UM,GTe),e(GTe,g9r),e(UM,h9r),e(UM,Dz),e(Dz,p9r),e(UM,_9r),e(Pe,u9r),e(Pe,JM),e(JM,OTe),e(OTe,b9r),e(JM,v9r),e(JM,jz),e(jz,T9r),e(JM,F9r),e(Pe,C9r),e(Pe,YM),e(YM,XTe),e(XTe,M9r),e(YM,E9r),e(YM,qz),e(qz,y9r),e(YM,w9r),e(Pe,A9r),e(Pe,KM),e(KM,VTe),e(VTe,L9r),e(KM,B9r),e(KM,Gz),e(Gz,x9r),e(KM,k9r),e(Pe,R9r),e(Pe,ZM),e(ZM,zTe),e(zTe,S9r),e(ZM,P9r),e(ZM,Oz),e(Oz,$9r),e(ZM,I9r),e(Pe,N9r),e(Pe,e4),e(e4,WTe),e(WTe,D9r),e(e4,j9r),e(e4,Xz),e(Xz,q9r),e(e4,G9r),e($o,O9r),e($o,QTe),e(QTe,X9r),e($o,V9r),g(S0,$o,null),b(c,eSe,u),b(c,wf,u),e(wf,o4),e(o4,HTe),g(P0,HTe,null),e(wf,z9r),e(wf,UTe),e(UTe,W9r),b(c,oSe,u),b(c,Gr,u),g($0,Gr,null),e(Gr,Q9r),e(Gr,Af),e(Af,H9r),e(Af,JTe),e(JTe,U9r),e(Af,J9r),e(Af,YTe),e(YTe,Y9r),e(Af,K9r),e(Gr,Z9r),e(Gr,I0),e(I0,eBr),e(I0,KTe),e(KTe,oBr),e(I0,rBr),e(Gr,tBr),e(Gr,$t),g(N0,$t,null),e($t,aBr),e($t,ZTe),e(ZTe,nBr),e($t,sBr),e($t,Lf),e(Lf,lBr),e(Lf,e7e),e(e7e,iBr),e(Lf,dBr),e(Lf,o7e),e(o7e,cBr),e(Lf,fBr),e($t,mBr),e($t,r7e),e(r7e,gBr),e($t,hBr),g(D0,$t,null),e(Gr,pBr),e(Gr,Io),g(j0,Io,null),e(Io,_Br),e(Io,t7e),e(t7e,uBr),e(Io,bBr),e(Io,Dn),e(Dn,vBr),e(Dn,a7e),e(a7e,TBr),e(Dn,FBr),e(Dn,n7e),e(n7e,CBr),e(Dn,MBr),e(Dn,s7e),e(s7e,EBr),e(Dn,yBr),e(Io,wBr),e(Io,l7e),e(l7e,r4),e(r4,i7e),e(i7e,ABr),e(r4,LBr),e(r4,Vz),e(Vz,BBr),e(r4,xBr),e(Io,kBr),e(Io,d7e),e(d7e,RBr),e(Io,SBr),g(q0,Io,null),b(c,rSe,u),b(c,Bf,u),e(Bf,t4),e(t4,c7e),g(G0,c7e,null),e(Bf,PBr),e(Bf,f7e),e(f7e,$Br),b(c,tSe,u),b(c,Or,u),g(O0,Or,null),e(Or,IBr),e(Or,xf),e(xf,NBr),e(xf,m7e),e(m7e,DBr),e(xf,jBr),e(xf,g7e),e(g7e,qBr),e(xf,GBr),e(Or,OBr),e(Or,X0),e(X0,XBr),e(X0,h7e),e(h7e,VBr),e(X0,zBr),e(Or,WBr),e(Or,It),g(V0,It,null),e(It,QBr),e(It,p7e),e(p7e,HBr),e(It,UBr),e(It,kf),e(kf,JBr),e(kf,_7e),e(_7e,YBr),e(kf,KBr),e(kf,u7e),e(u7e,ZBr),e(kf,exr),e(It,oxr),e(It,b7e),e(b7e,rxr),e(It,txr),g(z0,It,null),e(Or,axr),e(Or,No),g(W0,No,null),e(No,nxr),e(No,v7e),e(v7e,sxr),e(No,lxr),e(No,jn),e(jn,ixr),e(jn,T7e),e(T7e,dxr),e(jn,cxr),e(jn,F7e),e(F7e,fxr),e(jn,mxr),e(jn,C7e),e(C7e,gxr),e(jn,hxr),e(No,pxr),e(No,Q0),e(Q0,a4),e(a4,M7e),e(M7e,_xr),e(a4,uxr),e(a4,zz),e(zz,bxr),e(a4,vxr),e(Q0,Txr),e(Q0,n4),e(n4,E7e),e(E7e,Fxr),e(n4,Cxr),e(n4,Wz),e(Wz,Mxr),e(n4,Exr),e(No,yxr),e(No,y7e),e(y7e,wxr),e(No,Axr),g(H0,No,null),b(c,aSe,u),b(c,Rf,u),e(Rf,s4),e(s4,w7e),g(U0,w7e,null),e(Rf,Lxr),e(Rf,A7e),e(A7e,Bxr),b(c,nSe,u),b(c,Xr,u),g(J0,Xr,null),e(Xr,xxr),e(Xr,Sf),e(Sf,kxr),e(Sf,L7e),e(L7e,Rxr),e(Sf,Sxr),e(Sf,B7e),e(B7e,Pxr),e(Sf,$xr),e(Xr,Ixr),e(Xr,Y0),e(Y0,Nxr),e(Y0,x7e),e(x7e,Dxr),e(Y0,jxr),e(Xr,qxr),e(Xr,Nt),g(K0,Nt,null),e(Nt,Gxr),e(Nt,k7e),e(k7e,Oxr),e(Nt,Xxr),e(Nt,Pf),e(Pf,Vxr),e(Pf,R7e),e(R7e,zxr),e(Pf,Wxr),e(Pf,S7e),e(S7e,Qxr),e(Pf,Hxr),e(Nt,Uxr),e(Nt,P7e),e(P7e,Jxr),e(Nt,Yxr),g(Z0,Nt,null),e(Xr,Kxr),e(Xr,Do),g(eL,Do,null),e(Do,Zxr),e(Do,$7e),e($7e,ekr),e(Do,okr),e(Do,qn),e(qn,rkr),e(qn,I7e),e(I7e,tkr),e(qn,akr),e(qn,N7e),e(N7e,nkr),e(qn,skr),e(qn,D7e),e(D7e,lkr),e(qn,ikr),e(Do,dkr),e(Do,j7e),e(j7e,l4),e(l4,q7e),e(q7e,ckr),e(l4,fkr),e(l4,Qz),e(Qz,mkr),e(l4,gkr),e(Do,hkr),e(Do,G7e),e(G7e,pkr),e(Do,_kr),g(oL,Do,null),sSe=!0},p(c,[u]){const rL={};u&2&&(rL.$$scope={dirty:u,ctx:c}),Of.$set(rL);const O7e={};u&2&&(O7e.$$scope={dirty:u,ctx:c}),kh.$set(O7e);const X7e={};u&2&&(X7e.$$scope={dirty:u,ctx:c}),Oh.$set(X7e)},i(c){sSe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(fE.$$.fragment,c),h(mE.$$.fragment,c),h(Of.$$.fragment,c),h(gE.$$.fragment,c),h(hE.$$.fragment,c),h(uE.$$.fragment,c),h(bE.$$.fragment,c),h(vE.$$.fragment,c),h(TE.$$.fragment,c),h(FE.$$.fragment,c),h(EE.$$.fragment,c),h(yE.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(LE.$$.fragment,c),h(kE.$$.fragment,c),h(kh.$$.fragment,c),h(RE.$$.fragment,c),h(SE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(DE.$$.fragment,c),h(Oh.$$.fragment,c),h(jE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(WE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(F3.$$.fragment,c),h(C3.$$.fragment,c),h(M3.$$.fragment,c),h(y3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(L3.$$.fragment,c),h(B3.$$.fragment,c),h(x3.$$.fragment,c),h(R3.$$.fragment,c),h(S3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(q3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(X3.$$.fragment,c),h(V3.$$.fragment,c),h(W3.$$.fragment,c),h(Q3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(Z3.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Ty.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(jw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(v6.$$.fragment,c),h(T6.$$.fragment,c),h(F6.$$.fragment,c),h(C6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(L6.$$.fragment,c),h(B6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(S6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(N6.$$.fragment,c),h(D6.$$.fragment,c),h(q6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(V6.$$.fragment,c),h(z6.$$.fragment,c),h(Q6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(yA.$$.fragment,c),h(wA.$$.fragment,c),h(LA.$$.fragment,c),h(BA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(SA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(jA.$$.fragment,c),h(qA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(QA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(j0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),sSe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(fE.$$.fragment,c),p(mE.$$.fragment,c),p(Of.$$.fragment,c),p(gE.$$.fragment,c),p(hE.$$.fragment,c),p(uE.$$.fragment,c),p(bE.$$.fragment,c),p(vE.$$.fragment,c),p(TE.$$.fragment,c),p(FE.$$.fragment,c),p(EE.$$.fragment,c),p(yE.$$.fragment,c),p(wE.$$.fragment,c),p(AE.$$.fragment,c),p(LE.$$.fragment,c),p(kE.$$.fragment,c),p(kh.$$.fragment,c),p(RE.$$.fragment,c),p(SE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(DE.$$.fragment,c),p(Oh.$$.fragment,c),p(jE.$$.fragment,c),p(qE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(WE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(F3.$$.fragment,c),p(C3.$$.fragment,c),p(M3.$$.fragment,c),p(y3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(L3.$$.fragment,c),p(B3.$$.fragment,c),p(x3.$$.fragment,c),p(R3.$$.fragment,c),p(S3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(q3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(X3.$$.fragment,c),p(V3.$$.fragment,c),p(W3.$$.fragment,c),p(Q3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(Z3.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Ty.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(jw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(v6.$$.fragment,c),p(T6.$$.fragment,c),p(F6.$$.fragment,c),p(C6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(L6.$$.fragment,c),p(B6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(S6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(N6.$$.fragment,c),p(D6.$$.fragment,c),p(q6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(X6.$$.fragment,c),p(V6.$$.fragment,c),p(z6.$$.fragment,c),p(Q6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(yA.$$.fragment,c),p(wA.$$.fragment,c),p(LA.$$.fragment,c),p(BA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(SA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(jA.$$.fragment,c),p(qA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(QA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(j0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),sSe=!1},d(c){t(K),c&&t(io),c&&t(de),_(fe),c&&t(Nf),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(pe),c&&t(zo),c&&t(Ga),c&&t(nke),c&&t(Xi),_(fE),c&&t(ske),c&&t(zn),c&&t(lke),_(mE,c),c&&t(ike),c&&t(a9),c&&t(dke),_(Of,c),c&&t(cke),c&&t(Vi),_(gE),c&&t(fke),c&&t(Wo),_(hE),_(uE),_(bE),_(vE),c&&t(mke),c&&t(Wi),_(TE),c&&t(gke),c&&t(Qo),_(FE),_(EE),_(yE),_(wE),c&&t(hke),c&&t(Qi),_(AE),c&&t(pke),c&&t(Ho),_(LE),_(kE),_(kh),_(RE),_(SE),c&&t(_ke),c&&t(Hi),_(PE),c&&t(uke),c&&t(Uo),_($E),_(DE),_(Oh),_(jE),_(qE),c&&t(bke),c&&t(Ji),_(GE),c&&t(vke),c&&t(Jo),_(OE),_(VE),_(zE),_(WE),_(QE),c&&t(Tke),c&&t(Zi),_(HE),c&&t(Fke),c&&t(Yo),_(UE),_(YE),_(KE),_(ZE),_(e3),c&&t(Cke),c&&t(rd),_(o3),c&&t(Mke),c&&t(Ko),_(r3),_(a3),_(n3),_(s3),_(l3),c&&t(Eke),c&&t(nd),_(i3),c&&t(yke),c&&t(Zo),_(d3),_(f3),_(m3),_(g3),_(h3),c&&t(wke),c&&t(id),_(p3),c&&t(Ake),c&&t(er),_(_3),_(b3),_(v3),_(T3),_(F3),c&&t(Lke),c&&t(fd),_(C3),c&&t(Bke),c&&t(or),_(M3),_(y3),_(w3),_(A3),_(L3),c&&t(xke),c&&t(hd),_(B3),c&&t(kke),c&&t(rr),_(x3),_(R3),_(S3),_(P3),_($3),c&&t(Rke),c&&t(ud),_(I3),c&&t(Ske),c&&t(tr),_(N3),_(j3),_(q3),_(G3),_(O3),c&&t(Pke),c&&t(Td),_(X3),c&&t($ke),c&&t(ar),_(V3),_(W3),_(Q3),_(H3),_(U3),c&&t(Ike),c&&t(Md),_(J3),c&&t(Nke),c&&t(nr),_(Y3),_(Z3),_(ey),_(oy),_(ry),c&&t(Dke),c&&t(wd),_(ty),c&&t(jke),c&&t(sr),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t(qke),c&&t(Bd),_(cy),c&&t(Gke),c&&t(lr),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(Oke),c&&t(Rd),_(uy),c&&t(Xke),c&&t(ir),_(by),_(Ty),_(Fy),_(Cy),_(My),c&&t(Vke),c&&t($d),_(Ey),c&&t(zke),c&&t(dr),_(yy),_(Ay),_(Ly),_(By),_(xy),c&&t(Wke),c&&t(Dd),_(ky),c&&t(Qke),c&&t(cr),_(Ry),_(Py),_($y),_(Iy),_(Ny),c&&t(Hke),c&&t(Gd),_(Dy),c&&t(Uke),c&&t(fr),_(jy),_(Gy),_(Oy),_(Xy),_(Vy),c&&t(Jke),c&&t(Vd),_(zy),c&&t(Yke),c&&t(mr),_(Wy),_(Hy),_(Uy),_(Jy),_(Ky),c&&t(Kke),c&&t(Qd),_(Zy),c&&t(Zke),c&&t(gr),_(ew),_(rw),_(tw),_(aw),_(nw),c&&t(eRe),c&&t(Jd),_(sw),c&&t(oRe),c&&t(hr),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(rRe),c&&t(ec),_(gw),c&&t(tRe),c&&t(pr),_(hw),_(_w),_(uw),_(bw),_(vw),c&&t(aRe),c&&t(tc),_(Tw),c&&t(nRe),c&&t(_r),_(Fw),_(Mw),_(Ew),_(yw),_(ww),c&&t(sRe),c&&t(sc),_(Aw),c&&t(lRe),c&&t(ur),_(Lw),_(xw),_(kw),_(Rw),_(Sw),c&&t(iRe),c&&t(cc),_(Pw),c&&t(dRe),c&&t(br),_($w),_(Nw),_(Dw),_(jw),_(qw),c&&t(cRe),c&&t(gc),_(Gw),c&&t(fRe),c&&t(vr),_(Ow),_(Vw),_(zw),_(Ww),_(Qw),c&&t(mRe),c&&t(_c),_(Hw),c&&t(gRe),c&&t(Tr),_(Uw),_(Yw),_(Kw),_(Zw),_(e6),c&&t(hRe),c&&t(vc),_(o6),c&&t(pRe),c&&t(Fr),_(r6),_(a6),_(n6),_(s6),_(l6),c&&t(_Re),c&&t(Cc),_(i6),c&&t(uRe),c&&t(Cr),_(d6),_(f6),_(m6),_(g6),_(p6),c&&t(bRe),c&&t(yc),_(_6),c&&t(vRe),c&&t(Mr),_(u6),_(v6),_(T6),_(F6),_(C6),c&&t(TRe),c&&t(Lc),_(M6),c&&t(FRe),c&&t(Er),_(E6),_(w6),_(A6),_(L6),_(B6),c&&t(CRe),c&&t(kc),_(x6),c&&t(MRe),c&&t(yr),_(k6),_(S6),_(P6),_($6),_(I6),c&&t(ERe),c&&t(Pc),_(N6),c&&t(yRe),c&&t(wr),_(D6),_(q6),_(G6),_(O6),_(X6),c&&t(wRe),c&&t(Nc),_(V6),c&&t(ARe),c&&t(Ar),_(z6),_(Q6),_(H6),_(U6),_(J6),c&&t(LRe),c&&t(qc),_(Y6),c&&t(BRe),c&&t(Lr),_(K6),_(eA),_(oA),_(rA),_(tA),c&&t(xRe),c&&t(Xc),_(aA),c&&t(kRe),c&&t(Br),_(nA),_(lA),_(iA),_(dA),_(cA),c&&t(RRe),c&&t(Wc),_(fA),c&&t(SRe),c&&t(xr),_(mA),_(hA),_(pA),_(_A),_(uA),c&&t(PRe),c&&t(Uc),_(bA),c&&t($Re),c&&t(kr),_(vA),_(FA),_(CA),_(MA),_(EA),c&&t(IRe),c&&t(Kc),_(yA),c&&t(NRe),c&&t(Rr),_(wA),_(LA),_(BA),_(xA),_(kA),c&&t(DRe),c&&t(of),_(RA),c&&t(jRe),c&&t(Sr),_(SA),_($A),_(IA),_(NA),_(DA),c&&t(qRe),c&&t(af),_(jA),c&&t(GRe),c&&t(Pr),_(qA),_(OA),_(XA),_(VA),_(zA),c&&t(ORe),c&&t(lf),_(WA),c&&t(XRe),c&&t($r),_(QA),_(UA),_(JA),_(YA),_(KA),c&&t(VRe),c&&t(ff),_(ZA),c&&t(zRe),c&&t(Ir),_(e0),_(r0),_(t0),_(a0),_(n0),c&&t(WRe),c&&t(hf),_(s0),c&&t(QRe),c&&t(Nr),_(l0),_(d0),_(c0),_(f0),_(m0),c&&t(HRe),c&&t(uf),_(g0),c&&t(URe),c&&t(Dr),_(h0),_(_0),_(u0),_(b0),_(v0),c&&t(JRe),c&&t(Tf),_(T0),c&&t(YRe),c&&t(jr),_(F0),_(M0),_(E0),_(y0),_(w0),c&&t(KRe),c&&t(Mf),_(A0),c&&t(ZRe),c&&t(qr),_(L0),_(x0),_(k0),_(R0),_(S0),c&&t(eSe),c&&t(wf),_(P0),c&&t(oSe),c&&t(Gr),_($0),_(N0),_(D0),_(j0),_(q0),c&&t(rSe),c&&t(Bf),_(G0),c&&t(tSe),c&&t(Or),_(O0),_(V0),_(z0),_(W0),_(H0),c&&t(aSe),c&&t(Rf),_(U0),c&&t(nSe),c&&t(Xr),_(J0),_(K0),_(Z0),_(eL),_(oL)}}}const yCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function wCt(If){return TCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class RCt extends _Ct{constructor(K){super();uCt(this,K,wCt,ECt,bCt,{})}}export{RCt as default,yCt as metadata};
